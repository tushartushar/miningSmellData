Implementation smell,Namespace,Class,File,Method,Description
Long Method,StockSharp.Algo,OfflineMessageAdapter,C:\repos\stocksharp_stocksharp\Algo\OfflineMessageAdapter.cs,SendInMessage,The method has 106 lines of code.
Long Method,StockSharp.Algo,SecurityNativeIdMessageAdapter,C:\repos\stocksharp_stocksharp\Algo\SecurityNativeIdMessageAdapter.cs,OnInnerAdapterNewOutMessage,The method has 140 lines of code.
Long Method,StockSharp.Algo,BasketMessageAdapter,C:\repos\stocksharp_stocksharp\Algo\BasketMessageAdapter.cs,OnSendInMessage,The method has 185 lines of code.
Long Method,StockSharp.Algo,Connector,C:\repos\stocksharp_stocksharp\Algo\Connector_ProcessMessage.cs,ProcessQuotesMessage,The method has 115 lines of code.
Long Method,StockSharp.Algo,EntityCache,C:\repos\stocksharp_stocksharp\Algo\EntityCache.cs,ProcessOrderMessage,The method has 111 lines of code.
Long Method,StockSharp.Algo,TraderHelper,C:\repos\stocksharp_stocksharp\Algo\TraderHelper.cs,EmulateTrades,The method has 111 lines of code.
Long Method,StockSharp.Algo,TraderHelper,C:\repos\stocksharp_stocksharp\Algo\TraderHelper.cs,Filter,The method has 103 lines of code.
Long Method,StockSharp.Algo,TraderHelper,C:\repos\stocksharp_stocksharp\Algo\TraderHelper.cs,ApplyChanges,The method has 228 lines of code.
Long Method,StockSharp.Algo.Export.Database,SecurityTable,C:\repos\stocksharp_stocksharp\Algo\Export\Database\SecurityTable.cs,CreateColumns,The method has 139 lines of code.
Long Method,StockSharp.Algo.Export,ExcelExporter,C:\repos\stocksharp_stocksharp\Algo\Export\ExcelExporter.cs,Export,The method has 130 lines of code.
Long Method,StockSharp.Algo.Import,FieldMappingRegistry,C:\repos\stocksharp_stocksharp\Algo\Import\FieldMappingRegistry.cs,CreateFields,The method has 223 lines of code.
Long Method,StockSharp.Algo.Indicators,JurikMovingAverage,C:\repos\stocksharp_stocksharp\Algo\Indicators\JurikMovingAverage.cs,OnProcess,The method has 379 lines of code.
Long Method,StockSharp.Algo.Indicators,ZigZag,C:\repos\stocksharp_stocksharp\Algo\Indicators\ZigZag.cs,OnProcess,The method has 189 lines of code.
Long Method,StockSharp.Algo.Storages.Binary.Snapshot,Level1BinarySnapshotSerializer,C:\repos\stocksharp_stocksharp\Algo\Storages\Binary\Snapshot\Level1BinarySnapshotSerializer.cs,Serialize,The method has 171 lines of code.
Long Method,StockSharp.Algo.Storages.Binary,Level1BinarySerializer,C:\repos\stocksharp_stocksharp\Algo\Storages\Binary\Level1BinarySerializer.cs,OnSave,The method has 481 lines of code.
Long Method,StockSharp.Algo.Storages.Binary,Level1BinarySerializer,C:\repos\stocksharp_stocksharp\Algo\Storages\Binary\Level1BinarySerializer.cs,MoveNext,The method has 477 lines of code.
Long Method,StockSharp.Algo.Storages.Binary,TransactionBinarySerializer,C:\repos\stocksharp_stocksharp\Algo\Storages\Binary\TransactionBinarySerializer.cs,OnSave,The method has 149 lines of code.
Long Method,StockSharp.Algo.Storages.Binary,TransactionBinarySerializer,C:\repos\stocksharp_stocksharp\Algo\Storages\Binary\TransactionBinarySerializer.cs,MoveNext,The method has 126 lines of code.
Long Method,StockSharp.Algo.Storages.Binary,CandleBinarySerializer<TCandleMessage>,C:\repos\stocksharp_stocksharp\Algo\Storages\Binary\CandleBinarySerializer.cs,OnSave,The method has 246 lines of code.
Long Method,StockSharp.Algo.Storages.Binary,CandleBinarySerializer<TCandleMessage>,C:\repos\stocksharp_stocksharp\Algo\Storages\Binary\CandleBinarySerializer.cs,MoveNext,The method has 141 lines of code.
Long Method,StockSharp.Algo.Storages.Binary,OrderLogBinarySerializer,C:\repos\stocksharp_stocksharp\Algo\Storages\Binary\OrderLogBinarySerializer.cs,OnSave,The method has 126 lines of code.
Long Method,StockSharp.Algo.Storages.Binary,OrderLogBinarySerializer,C:\repos\stocksharp_stocksharp\Algo\Storages\Binary\OrderLogBinarySerializer.cs,MoveNext,The method has 103 lines of code.
Long Method,StockSharp.Algo.Storages.Binary,TickBinarySerializer,C:\repos\stocksharp_stocksharp\Algo\Storages\Binary\TickBinarySerializer.cs,OnSave,The method has 110 lines of code.
Long Method,StockSharp.Algo.Strategies.Reporting,ExcelStrategyReport,C:\repos\stocksharp_stocksharp\Algo\Strategies\Reporting\ExcelStrategyReport.cs,Generate,The method has 220 lines of code.
Long Method,StockSharp.Algo.Testing,HistoryMessageAdapter,C:\repos\stocksharp_stocksharp\Algo\Testing\HistoryMessageAdapter.cs,OnSendInMessage,The method has 101 lines of code.
Long Method,StockSharp.Algo.Testing,HistoryMessageAdapter,C:\repos\stocksharp_stocksharp\Algo\Testing\HistoryMessageAdapter.cs,ProcessMarketDataMessage,The method has 123 lines of code.
Long Method,StockSharp.Algo.Testing,TrendMarketDepthGenerator,C:\repos\stocksharp_stocksharp\Algo\Testing\MarketDepthGenerator.cs,OnProcess,The method has 157 lines of code.
Long Method,StockSharp.Algo.Testing,ExecutionLogConverter,C:\repos\stocksharp_stocksharp\Algo\Testing\ExecutionLogConverter.cs,ToExecutionLog,The method has 114 lines of code.
Long Method,StockSharp.Algo.Testing,ExecutionLogConverter,C:\repos\stocksharp_stocksharp\Algo\Testing\ExecutionLogConverter.cs,ToExecutionLog,The method has 102 lines of code.
Long Method,StockSharp.Algo.Testing,MarketEmulator,C:\repos\stocksharp_stocksharp\Algo\Testing\MarketEmulator.cs,SendInMessage,The method has 149 lines of code.
Long Method,StockSharp.Algo.Testing,SecurityMarketEmulator,C:\repos\stocksharp_stocksharp\Algo\Testing\MarketEmulator.cs,Process,The method has 237 lines of code.
Long Method,StockSharp.Algo.Testing,SecurityMarketEmulator,C:\repos\stocksharp_stocksharp\Algo\Testing\MarketEmulator.cs,MatchOrder,The method has 194 lines of code.
Long Method,StockSharp.Algo.Testing,OrderLogGenerator,C:\repos\stocksharp_stocksharp\Algo\Testing\OrderLogGenerator.cs,OnProcess,The method has 103 lines of code.
Complex Method,StockSharp.Algo,Connector,C:\repos\stocksharp_stocksharp\Algo\Connector_ProcessMessage.cs,SetAdapterConnected,Cyclomatic complexity of the method is 11
Complex Method,StockSharp.Algo,Connector,C:\repos\stocksharp_stocksharp\Algo\Connector_ProcessMessage.cs,ProcessQuotesMessage,Cyclomatic complexity of the method is 16
Complex Method,StockSharp.Algo,Connector,C:\repos\stocksharp_stocksharp\Algo\Connector_ProcessMessage.cs,ProcessOrderMessage,Cyclomatic complexity of the method is 9
Complex Method,StockSharp.Algo,Connector,C:\repos\stocksharp_stocksharp\Algo\Connector_ProcessMessage.cs,ReRegisterOrderPair,Cyclomatic complexity of the method is 8
Complex Method,StockSharp.Algo,Connector,C:\repos\stocksharp_stocksharp\Algo\Connector_ProcessMessage.cs,CheckOnNew,Cyclomatic complexity of the method is 8
Complex Method,StockSharp.Algo,EntityCache,C:\repos\stocksharp_stocksharp\Algo\EntityCache.cs,ProcessOrderFailMessage,Cyclomatic complexity of the method is 15
Complex Method,StockSharp.Algo,EntityCache,C:\repos\stocksharp_stocksharp\Algo\EntityCache.cs,ProcessNewsMessage,Cyclomatic complexity of the method is 10
Complex Method,StockSharp.Algo,OrderInfo,C:\repos\stocksharp_stocksharp\Algo\EntityCache.cs,ApplyChanges,Cyclomatic complexity of the method is 13
Complex Method,StockSharp.Algo,MarketRuleHelper,C:\repos\stocksharp_stocksharp\Algo\MarketRuleHelper.cs,CreateLastTradeCondition,Cyclomatic complexity of the method is 8
Complex Method,StockSharp.Algo,MarketRuleHelper,C:\repos\stocksharp_stocksharp\Algo\MarketRuleHelper.cs,ActiveRule,Cyclomatic complexity of the method is 8
Complex Method,StockSharp.Algo,TraderHelper,C:\repos\stocksharp_stocksharp\Algo\TraderHelper.cs,GetFilteredQuotes,Cyclomatic complexity of the method is 11
Complex Method,StockSharp.Algo,TraderHelper,C:\repos\stocksharp_stocksharp\Algo\TraderHelper.cs,Sparse,Cyclomatic complexity of the method is 8
Complex Method,StockSharp.Algo,TraderHelper,C:\repos\stocksharp_stocksharp\Algo\TraderHelper.cs,GetDelta,Cyclomatic complexity of the method is 10
Complex Method,StockSharp.Algo,TraderHelper,C:\repos\stocksharp_stocksharp\Algo\TraderHelper.cs,GetFortsJumps,Cyclomatic complexity of the method is 9
Complex Method,StockSharp.Algo,TraderHelper,C:\repos\stocksharp_stocksharp\Algo\TraderHelper.cs,ApplyChanges,Cyclomatic complexity of the method is 10
Complex Method,StockSharp.Algo,TraderHelper,C:\repos\stocksharp_stocksharp\Algo\TraderHelper.cs,ApplyChanges,Cyclomatic complexity of the method is 29
Complex Method,StockSharp.Algo.Candles.Compression,CandleBuilderMessageAdapter,C:\repos\stocksharp_stocksharp\Algo\Candles\Compression\CandleBuilderMessageAdapter.cs,ProcessValue,Cyclomatic complexity of the method is 8
Complex Method,StockSharp.Algo.Indicators,RSquared,C:\repos\stocksharp_stocksharp\Algo\Indicators\RSquared.cs,OnProcess,Cyclomatic complexity of the method is 9
Complex Method,StockSharp.Algo.Indicators,StandardError,C:\repos\stocksharp_stocksharp\Algo\Indicators\StandardError.cs,OnProcess,Cyclomatic complexity of the method is 9
Complex Method,StockSharp.Algo.Indicators,JurikMovingAverage,C:\repos\stocksharp_stocksharp\Algo\Indicators\JurikMovingAverage.cs,OnProcess,Cyclomatic complexity of the method is 42
Complex Method,StockSharp.Algo.Indicators,NickRypockTrailingReverse,C:\repos\stocksharp_stocksharp\Algo\Indicators\NickRypockTrailingReverse.cs,OnProcess,Cyclomatic complexity of the method is 10
Complex Method,StockSharp.Algo.Indicators,ParabolicSar,C:\repos\stocksharp_stocksharp\Algo\Indicators\ParabolicSar.cs,OnProcess,Cyclomatic complexity of the method is 15
Complex Method,StockSharp.Algo.Indicators,ZigZag,C:\repos\stocksharp_stocksharp\Algo\Indicators\ZigZag.cs,OnProcess,Cyclomatic complexity of the method is 24
Complex Method,StockSharp.Algo.Indicators,ZigZagEquis,C:\repos\stocksharp_stocksharp\Algo\Indicators\ZigZagEquis.cs,OnProcess,Cyclomatic complexity of the method is 13
Complex Method,StockSharp.Algo.Indicators,Fractals,C:\repos\stocksharp_stocksharp\Algo\Indicators\Fractals.cs,OnProcess,Cyclomatic complexity of the method is 11
Complex Method,StockSharp.Algo.Storages.Binary.Snapshot,TransactionBinarySnapshotSerializer,C:\repos\stocksharp_stocksharp\Algo\Storages\Binary\Snapshot\TransactionBinarySnapshotSerializer.cs,Update,Cyclomatic complexity of the method is 36
Complex Method,StockSharp.Algo.Storages.Binary.Snapshot,Level1BinarySnapshotSerializer,C:\repos\stocksharp_stocksharp\Algo\Storages\Binary\Snapshot\Level1BinarySnapshotSerializer.cs,Update,Cyclomatic complexity of the method is 8
Complex Method,StockSharp.Algo.Storages.Csv,SecurityCsvList,C:\repos\stocksharp_stocksharp\Algo\Storages\Csv\CsvEntityRegistry.cs,IsChanged,Cyclomatic complexity of the method is 19
Complex Method,StockSharp.Algo.Storages,CachedBasketMarketDataStorage<T>,C:\repos\stocksharp_stocksharp\Algo\Storages\CachedBasketMarketDataStorage.cs,OnLoad,Cyclomatic complexity of the method is 8
Complex Method,StockSharp.Algo.Storages,CachedBasketMarketDataStorage<T>,C:\repos\stocksharp_stocksharp\Algo\Storages\CachedBasketMarketDataStorage.cs,EnqueueMessages,Cyclomatic complexity of the method is 10
Complex Method,StockSharp.Algo.Storages,StorageMessageAdapter,C:\repos\stocksharp_stocksharp\Algo\Storages\StorageMessageAdapter.cs,Load,Cyclomatic complexity of the method is 8
Complex Method,StockSharp.Algo.Storages,StorageMessageAdapter,C:\repos\stocksharp_stocksharp\Algo\Storages\StorageMessageAdapter.cs,LoadMessages,Cyclomatic complexity of the method is 9
Complex Method,StockSharp.Algo.Storages,StorageHelper,C:\repos\stocksharp_stocksharp\Algo\Storages\StorageHelper.cs,SynchronizeSecurities,Cyclomatic complexity of the method is 20
Complex Method,StockSharp.Algo.Storages,StorageHelper,C:\repos\stocksharp_stocksharp\Algo\Storages\StorageHelper.cs,ClearDatesCache,Cyclomatic complexity of the method is 12
Complex Method,StockSharp.Algo.Storages,RangeEnumerator,C:\repos\stocksharp_stocksharp\Algo\Storages\StorageHelper.cs,MoveNext,Cyclomatic complexity of the method is 8
Complex Method,StockSharp.Algo.Storages,MarketDataStorage<TData;TId>,C:\repos\stocksharp_stocksharp\Algo\Storages\MarketDataStorage.cs,Save,Cyclomatic complexity of the method is 9
Complex Method,StockSharp.Algo.Storages,BasketEnumerable,C:\repos\stocksharp_stocksharp\Algo\Storages\BasketMarketDataStorage.cs,BasketEnumerable,Cyclomatic complexity of the method is 14
Complex Method,StockSharp.Algo.Storages.Binary,PositionBinarySerializer,C:\repos\stocksharp_stocksharp\Algo\Storages\Binary\PositionBinarySerializer.cs,OnSave,Cyclomatic complexity of the method is 10
Complex Method,StockSharp.Algo.Storages.Binary,Level1MetaInfo,C:\repos\stocksharp_stocksharp\Algo\Storages\Binary\Level1BinarySerializer.cs,Write,Cyclomatic complexity of the method is 14
Complex Method,StockSharp.Algo.Storages.Binary,Level1MetaInfo,C:\repos\stocksharp_stocksharp\Algo\Storages\Binary\Level1BinarySerializer.cs,Read,Cyclomatic complexity of the method is 14
Complex Method,StockSharp.Algo.Storages.Binary,Level1BinarySerializer,C:\repos\stocksharp_stocksharp\Algo\Storages\Binary\Level1BinarySerializer.cs,OnSave,Cyclomatic complexity of the method is 12
Complex Method,StockSharp.Algo.Storages.Binary,Level1BinarySerializer,C:\repos\stocksharp_stocksharp\Algo\Storages\Binary\Level1BinarySerializer.cs,MoveNext,Cyclomatic complexity of the method is 8
Complex Method,StockSharp.Algo.Storages.Binary,TransactionBinarySerializer,C:\repos\stocksharp_stocksharp\Algo\Storages\Binary\TransactionBinarySerializer.cs,OnSave,Cyclomatic complexity of the method is 25
Complex Method,StockSharp.Algo.Storages.Binary,TransactionBinarySerializer,C:\repos\stocksharp_stocksharp\Algo\Storages\Binary\TransactionBinarySerializer.cs,MoveNext,Cyclomatic complexity of the method is 10
Complex Method,StockSharp.Algo.Storages.Binary,NewsBinarySerializer,C:\repos\stocksharp_stocksharp\Algo\Storages\Binary\NewsBinarySerializer.cs,OnSave,Cyclomatic complexity of the method is 9
Complex Method,StockSharp.Algo.Storages.Binary,QuoteBinarySerializer,C:\repos\stocksharp_stocksharp\Algo\Storages\Binary\QuoteBinarySerializer.cs,OnSave,Cyclomatic complexity of the method is 8
Complex Method,StockSharp.Algo.Storages.Binary,CandleBinarySerializer<TCandleMessage>,C:\repos\stocksharp_stocksharp\Algo\Storages\Binary\CandleBinarySerializer.cs,OnSave,Cyclomatic complexity of the method is 34
Complex Method,StockSharp.Algo.Storages.Binary,CandleBinarySerializer<TCandleMessage>,C:\repos\stocksharp_stocksharp\Algo\Storages\Binary\CandleBinarySerializer.cs,MoveNext,Cyclomatic complexity of the method is 18
Complex Method,StockSharp.Algo.Storages.Binary,BinaryHelper,C:\repos\stocksharp_stocksharp\Algo\Storages\Binary\BinaryHelper.cs,WritePrice,Cyclomatic complexity of the method is 13
Complex Method,StockSharp.Algo.Storages.Binary,BinaryHelper,C:\repos\stocksharp_stocksharp\Algo\Storages\Binary\BinaryHelper.cs,WriteTime,Cyclomatic complexity of the method is 11
Complex Method,StockSharp.Algo.Storages.Binary,OrderLogBinarySerializer,C:\repos\stocksharp_stocksharp\Algo\Storages\Binary\OrderLogBinarySerializer.cs,OnSave,Cyclomatic complexity of the method is 22
Complex Method,StockSharp.Algo.Storages.Binary,OrderLogBinarySerializer,C:\repos\stocksharp_stocksharp\Algo\Storages\Binary\OrderLogBinarySerializer.cs,MoveNext,Cyclomatic complexity of the method is 13
Complex Method,StockSharp.Algo.Storages.Binary,TickBinarySerializer,C:\repos\stocksharp_stocksharp\Algo\Storages\Binary\TickBinarySerializer.cs,OnSave,Cyclomatic complexity of the method is 20
Complex Method,StockSharp.Algo.Storages.Binary,TickBinarySerializer,C:\repos\stocksharp_stocksharp\Algo\Storages\Binary\TickBinarySerializer.cs,MoveNext,Cyclomatic complexity of the method is 10
Complex Method,StockSharp.Algo.Candles,CandleSourceEnumerator<TSource;TValue>,C:\repos\stocksharp_stocksharp\Algo\Candles\CandleSourceEnumerator.cs,CandleSourceEnumerator,Cyclomatic complexity of the method is 13
Complex Method,StockSharp.Algo.Candles,CandleMessageEnumerator,C:\repos\stocksharp_stocksharp\Algo\Candles\CandleHelper.cs,MoveNext,Cyclomatic complexity of the method is 10
Complex Method,StockSharp.Algo.Export.Database.DbProviders,BaseDbProvider,C:\repos\stocksharp_stocksharp\Algo\Export\Database\DbProviders\BaseDbProvider.cs,GetDbType,Cyclomatic complexity of the method is 11
Complex Method,StockSharp.Algo.Strategies,Strategy,C:\repos\stocksharp_stocksharp\Algo\Strategies\Strategy.cs,OnConnectorNewMessage,Cyclomatic complexity of the method is 9
Complex Method,StockSharp.Algo.Strategies,StrategyHelper,C:\repos\stocksharp_stocksharp\Algo\Strategies\StrategyHelper.cs,LoadState,Cyclomatic complexity of the method is 12
Complex Method,StockSharp.Algo.Testing,TrendMarketDepthGenerator,C:\repos\stocksharp_stocksharp\Algo\Testing\MarketDepthGenerator.cs,OnProcess,Cyclomatic complexity of the method is 15
Complex Method,StockSharp.Algo.Testing,MarketEmulator,C:\repos\stocksharp_stocksharp\Algo\Testing\MarketEmulator.cs,CheckRegistration,Cyclomatic complexity of the method is 10
Complex Method,StockSharp.Algo.Testing,SecurityMarketEmulator,C:\repos\stocksharp_stocksharp\Algo\Testing\MarketEmulator.cs,UpdateQuotes,Cyclomatic complexity of the method is 8
Complex Method,StockSharp.Algo.Testing,SecurityMarketEmulator,C:\repos\stocksharp_stocksharp\Algo\Testing\MarketEmulator.cs,MatchOrder,Cyclomatic complexity of the method is 17
Long Parameter List,StockSharp.Algo,IRemoteAuthorization,C:\repos\stocksharp_stocksharp\Algo\IRemoteAuthorization.cs,HasPermissions,The method has 6 parameters. Parameters: sessionId' requiredPermissions' securityId' dataType' arg' date
Long Parameter List,StockSharp.Algo,AnonymousRemoteAuthorization,C:\repos\stocksharp_stocksharp\Algo\IRemoteAuthorization.cs,HasPermissions,The method has 6 parameters. Parameters: sessionId' requiredPermissions' securityId' dataType' arg' date
Long Parameter List,StockSharp.Algo,OfflineMessageAdapter,C:\repos\stocksharp_stocksharp\Algo\OfflineMessageAdapter.cs,ProcessSubscriptionMessage,The method has 5 parameters. Parameters: message' isSubscribe' transactionId' originalTransactionId' subscriptions
Long Parameter List,StockSharp.Algo,Connector,C:\repos\stocksharp_stocksharp\Algo\Connector_ProcessMessage.cs,SetAdapterFailed,The method has 5 parameters. Parameters: adapter' message' checkState' raiseTimeOut' error
Long Parameter List,StockSharp.Algo,Connector,C:\repos\stocksharp_stocksharp\Algo\Connector_ProcessMessage.cs,SubscribeCandles,The method has 6 parameters. Parameters: series' from' to' count' transactionId' extensionInfo
Long Parameter List,StockSharp.Algo,Connector,C:\repos\stocksharp_stocksharp\Algo\Connector_ProcessMessage.cs,Connector,The method has 5 parameters. Parameters: entityRegistry' storageRegistry' initManagers' supportOffline' supportSubscriptionTracking
Long Parameter List,StockSharp.Algo,Connector,C:\repos\stocksharp_stocksharp\Algo\Connector_ProcessMessage.cs,Connector,The method has 5 parameters. Parameters: initAdapter' initChannels' initManagers' supportOffline' supportSubscriptionTracking
Long Parameter List,StockSharp.Algo,Connector,C:\repos\stocksharp_stocksharp\Algo\Connector_ProcessMessage.cs,GetPosition,The method has 6 parameters. Parameters: portfolio' security' clientCode' depoName' limitType' description
Long Parameter List,StockSharp.Algo,Connector,C:\repos\stocksharp_stocksharp\Algo\Connector_ProcessMessage.cs,CancelOrders,The method has 7 parameters. Parameters: isStopOrder' portfolio' direction' board' security' securityType' transactionId
Long Parameter List,StockSharp.Algo,Connector,C:\repos\stocksharp_stocksharp\Algo\Connector_ProcessMessage.cs,OnCancelOrders,The method has 7 parameters. Parameters: transactionId' isStopOrder' portfolio' direction' board' security' securityType
Long Parameter List,StockSharp.Algo,EntityCache,C:\repos\stocksharp_stocksharp\Algo\EntityCache.cs,ProcessOrderMessage,The method has 5 parameters. Parameters: order' security' message' transactionId' pfInfo
Long Parameter List,StockSharp.Algo,EntityCache,C:\repos\stocksharp_stocksharp\Algo\EntityCache.cs,GetOrder,The method has 6 parameters. Parameters: security' transactionId' orderId' orderStringId' orderType' isCancel
Long Parameter List,StockSharp.Algo,EntityCache,C:\repos\stocksharp_stocksharp\Algo\EntityCache.cs,TryAddPosition,The method has 7 parameters. Parameters: portfolio' security' clientCode' depoName' limitType' description' isNew
Long Parameter List,StockSharp.Algo,SubscriptionMessageAdapter,C:\repos\stocksharp_stocksharp\Algo\SubscriptionMessageAdapter.cs,ProcessSubscription,The method has 6 parameters. Parameters: subscriptions' key' message' isSubscribe' sendIn' sendOutMsg
Long Parameter List,StockSharp.Algo,MarketRuleHelper,C:\repos\stocksharp_stocksharp\Algo\MarketRuleHelper.cs,CreateSecurityCondition,The method has 5 parameters. Parameters: security' connector' field' offset' isLess
Long Parameter List,StockSharp.Algo,MarketRuleHelper,C:\repos\stocksharp_stocksharp\Algo\MarketRuleHelper.cs,CreateLastTradeCondition,The method has 5 parameters. Parameters: security' connector' provider' offset' isLess
Long Parameter List,StockSharp.Algo,MarketRuleHelper,C:\repos\stocksharp_stocksharp\Algo\MarketRuleHelper.cs,CreateAndActivateTimeFrameTimer,The method has 6 parameters. Parameters: security' timeFrame' connector' callback' percent' periodical
Long Parameter List,StockSharp.Algo,MarketRuleHelper,C:\repos\stocksharp_stocksharp\Algo\MarketRuleHelper.cs,AddRuleLog,The method has 5 parameters. Parameters: container' level' rule' message' args
Long Parameter List,StockSharp.Algo,MessageConverterHelper,C:\repos\stocksharp_stocksharp\Algo\MessageConverterHelper.cs,CreateReplaceMessage,The method has 6 parameters. Parameters: oldOrder1' newOrder1' security1' oldOrder2' newOrder2' security2
Long Parameter List,StockSharp.Algo,MessageConverterHelper,C:\repos\stocksharp_stocksharp\Algo\MessageConverterHelper.cs,CreateQuote,The method has 5 parameters. Parameters: message' security' side' priceField' volumeField
Long Parameter List,StockSharp.Algo,MessageConverterHelper,C:\repos\stocksharp_stocksharp\Algo\MessageConverterHelper.cs,ToMarketDataMessage,The method has 5 parameters. Parameters: series' isSubscribe' from' to' count
Long Parameter List,StockSharp.Algo,TraderHelper,C:\repos\stocksharp_stocksharp\Algo\TraderHelper.cs,GetCurrentPrice,The method has 5 parameters. Parameters: security' provider' direction' priceType' orders
Long Parameter List,StockSharp.Algo,TraderHelper,C:\repos\stocksharp_stocksharp\Algo\TraderHelper.cs,CancelOrders,The method has 8 parameters. Parameters: connector' orders' isStopOrder' portfolio' direction' board' security' securityType
Long Parameter List,StockSharp.Algo,TraderHelper,C:\repos\stocksharp_stocksharp\Algo\TraderHelper.cs,GetFortsJumps,The method has 5 parameters. Parameters: baseCode' from' to' getSecurity' throwIfNotExists
Long Parameter List,StockSharp.Algo,TraderHelper,C:\repos\stocksharp_stocksharp\Algo\TraderHelper.cs,GetFortsJumps,The method has 6 parameters. Parameters: continuousSecurity' provider' baseCode' from' to' throwIfNotExists
Long Parameter List,StockSharp.Algo,TraderHelper,C:\repos\stocksharp_stocksharp\Algo\TraderHelper.cs,FillFortsJumps,The method has 5 parameters. Parameters: continuousSecurity' provider' baseCode' from' to
Long Parameter List,StockSharp.Algo,TraderHelper,C:\repos\stocksharp_stocksharp\Algo\TraderHelper.cs,AddOrderLog,The method has 5 parameters. Parameters: receiver' type' order' operation' getAdditionalInfo
Long Parameter List,StockSharp.Algo.Candles.Compression,BaseCandleBuilderValueTransform,C:\repos\stocksharp_stocksharp\Algo\Candles\Compression\ICandleBuilderValueTransform.cs,Update,The method has 5 parameters. Parameters: time' price' volume' side' openInterest
Long Parameter List,StockSharp.Algo.Candles.Compression,PnFCandleBuilder,C:\repos\stocksharp_stocksharp\Algo\Candles\Compression\CandleBuilder.cs,UpdateCandle,The method has 6 parameters. Parameters: currentPnFCandle' price' volume' time' side' oi
Long Parameter List,StockSharp.Algo.Candles.Compression,PnFCandleBuilder,C:\repos\stocksharp_stocksharp\Algo\Candles\Compression\CandleBuilder.cs,CreateCandle,The method has 11 parameters. Parameters: message' pnfArg' openPrice' highPrice' lowPrice' closePrice' price' volume' side' time' oi
Long Parameter List,StockSharp.Algo.Candles.Compression,RenkoCandleBuilder,C:\repos\stocksharp_stocksharp\Algo\Candles\Compression\CandleBuilder.cs,CreateCandle,The method has 9 parameters. Parameters: message' boxSize' openPrice' renkoStep' price' volume' side' time' oi
Long Parameter List,StockSharp.Algo.Export,StockSharpExporter,C:\repos\stocksharp_stocksharp\Algo\Export\StockSharpExporter.cs,StockSharpExporter,The method has 6 parameters. Parameters: security' arg' isCancelled' storageRegistry' drive' format
Long Parameter List,StockSharp.Algo.Export,ExcelExporter,C:\repos\stocksharp_stocksharp\Algo\Export\ExcelExporter.cs,ExcelExporter,The method has 5 parameters. Parameters: security' arg' isCancelled' fileName' breaked
Long Parameter List,StockSharp.Algo.Export,TextExporter,C:\repos\stocksharp_stocksharp\Algo\Export\TextExporter.cs,TextExporter,The method has 6 parameters. Parameters: security' arg' isCancelled' fileName' template' header
Long Parameter List,StockSharp.Algo.Import,CsvImporter,C:\repos\stocksharp_stocksharp\Algo\Import\CsvImporter.cs,CsvImporter,The method has 6 parameters. Parameters: dataType' fields' entityRegistry' exchangeInfoProvider' drive' storageFormat
Long Parameter List,StockSharp.Algo.Import,FieldMapping,C:\repos\stocksharp_stocksharp\Algo\Import\FieldMapping.cs,FieldMapping,The method has 5 parameters. Parameters: name' displayName' description' type' isExtended
Long Parameter List,StockSharp.Algo.Import,FieldMapping<TInstance;TValue>,C:\repos\stocksharp_stocksharp\Algo\Import\FieldMapping.cs,FieldMapping,The method has 5 parameters. Parameters: name' displayName' description' apply' isExtended
Long Parameter List,StockSharp.Algo.Storages,ConvertableStorage<TMessage;TEntity;TId>,C:\repos\stocksharp_stocksharp\Algo\Storages\ISecurityMarketDataDrive.cs,ConvertableStorage,The method has 9 parameters. Parameters: parent' security' securityId' arg' getTime' getSecurity' getId' serializer' drive
Long Parameter List,StockSharp.Algo.Storages,ConvertableStorage<TMessage;TEntity;TId>,C:\repos\stocksharp_stocksharp\Algo\Storages\ISecurityMarketDataDrive.cs,ConvertableStorage,The method has 9 parameters. Parameters: parent' security' securityId' arg' getTime' getSecurity' getId' serializer' drive
Long Parameter List,StockSharp.Algo.Storages,TradeStorage,C:\repos\stocksharp_stocksharp\Algo\Storages\ISecurityMarketDataDrive.cs,TradeStorage,The method has 5 parameters. Parameters: parent' security' securityId' drive' serializer
Long Parameter List,StockSharp.Algo.Storages,TradeStorage,C:\repos\stocksharp_stocksharp\Algo\Storages\ISecurityMarketDataDrive.cs,TradeStorage,The method has 5 parameters. Parameters: parent' security' securityId' drive' serializer
Long Parameter List,StockSharp.Algo.Storages,MarketDepthStorage,C:\repos\stocksharp_stocksharp\Algo\Storages\ISecurityMarketDataDrive.cs,MarketDepthStorage,The method has 5 parameters. Parameters: parent' security' securityId' drive' serializer
Long Parameter List,StockSharp.Algo.Storages,MarketDepthStorage,C:\repos\stocksharp_stocksharp\Algo\Storages\ISecurityMarketDataDrive.cs,MarketDepthStorage,The method has 5 parameters. Parameters: parent' security' securityId' drive' serializer
Long Parameter List,StockSharp.Algo.Storages,OrderLogStorage,C:\repos\stocksharp_stocksharp\Algo\Storages\ISecurityMarketDataDrive.cs,OrderLogStorage,The method has 5 parameters. Parameters: parent' security' securityId' drive' serializer
Long Parameter List,StockSharp.Algo.Storages,OrderLogStorage,C:\repos\stocksharp_stocksharp\Algo\Storages\ISecurityMarketDataDrive.cs,OrderLogStorage,The method has 5 parameters. Parameters: parent' security' securityId' drive' serializer
Long Parameter List,StockSharp.Algo.Storages,CandleMessageStorage<TCandleMessage>,C:\repos\stocksharp_stocksharp\Algo\Storages\ISecurityMarketDataDrive.cs,CandleMessageStorage,The method has 5 parameters. Parameters: security' securityId' arg' drive' serializer
Long Parameter List,StockSharp.Algo.Storages,CandleMessageStorage<TCandleMessage>,C:\repos\stocksharp_stocksharp\Algo\Storages\ISecurityMarketDataDrive.cs,CandleMessageStorage,The method has 5 parameters. Parameters: security' securityId' arg' drive' serializer
Long Parameter List,StockSharp.Algo.Storages,TypedCandleStorage<TCandleMessage;TCandle>,C:\repos\stocksharp_stocksharp\Algo\Storages\ISecurityMarketDataDrive.cs,TypedCandleStorage,The method has 5 parameters. Parameters: security' securityId' arg' drive' serializer
Long Parameter List,StockSharp.Algo.Storages,TypedCandleStorage<TCandleMessage;TCandle>,C:\repos\stocksharp_stocksharp\Algo\Storages\ISecurityMarketDataDrive.cs,TypedCandleStorage,The method has 5 parameters. Parameters: security' securityId' arg' drive' serializer
Long Parameter List,StockSharp.Algo.Storages,CandleStorage<TCandleMessage;TCandle>,C:\repos\stocksharp_stocksharp\Algo\Storages\ISecurityMarketDataDrive.cs,CandleStorage,The method has 5 parameters. Parameters: security' securityId' arg' drive' serializer
Long Parameter List,StockSharp.Algo.Storages,CandleStorage<TCandleMessage;TCandle>,C:\repos\stocksharp_stocksharp\Algo\Storages\ISecurityMarketDataDrive.cs,CandleStorage,The method has 5 parameters. Parameters: security' securityId' arg' drive' serializer
Long Parameter List,StockSharp.Algo.Storages,StorageHelper,C:\repos\stocksharp_stocksharp\Algo\Storages\StorageHelper.cs,GetCandleStorage,The method has 5 parameters. Parameters: storageRegistry' security' arg' drive' format
Long Parameter List,StockSharp.Algo.Storages,StorageHelper,C:\repos\stocksharp_stocksharp\Algo\Storages\StorageHelper.cs,SynchronizeSecurities,The method has 7 parameters. Parameters: drives' securityStorage' exchangeInfoProvider' newSecurity' updateProgress' isCancelled' logsReceiver
Long Parameter List,StockSharp.Algo.Storages,StorageRegistry,C:\repos\stocksharp_stocksharp\Algo\Storages\StorageRegistry.cs,GetCandleStorage,The method has 5 parameters. Parameters: candleType' security' arg' drive' format
Long Parameter List,StockSharp.Algo.Storages,StorageRegistry,C:\repos\stocksharp_stocksharp\Algo\Storages\StorageRegistry.cs,GetCandleMessageStorage,The method has 5 parameters. Parameters: candleMessageType' security' arg' drive' format
Long Parameter List,StockSharp.Algo.Storages,StorageRegistry,C:\repos\stocksharp_stocksharp\Algo\Storages\StorageRegistry.cs,GetStorage,The method has 5 parameters. Parameters: security' dataType' arg' drive' format
Long Parameter List,StockSharp.Algo.Storages,NewsStorage,C:\repos\stocksharp_stocksharp\Algo\Storages\StorageRegistry.cs,NewsStorage,The method has 5 parameters. Parameters: parent' security' securityId' serializer' drive
Long Parameter List,StockSharp.Algo.Storages,IStorageRegistry,C:\repos\stocksharp_stocksharp\Algo\Storages\IStorageRegistry.cs,GetCandleStorage,The method has 5 parameters. Parameters: candleType' security' arg' drive' format
Long Parameter List,StockSharp.Algo.Storages,IStorageRegistry,C:\repos\stocksharp_stocksharp\Algo\Storages\IStorageRegistry.cs,GetCandleMessageStorage,The method has 5 parameters. Parameters: candleMessageType' security' arg' drive' format
Long Parameter List,StockSharp.Algo.Storages,IStorageRegistry,C:\repos\stocksharp_stocksharp\Algo\Storages\IStorageRegistry.cs,GetStorage,The method has 5 parameters. Parameters: security' dataType' arg' drive' format
Long Parameter List,StockSharp.Algo.Storages,MarketDataStorage<TData;TId>,C:\repos\stocksharp_stocksharp\Algo\Storages\MarketDataStorage.cs,MarketDataStorage,The method has 8 parameters. Parameters: security' securityId' arg' getTime' getSecurity' getId' serializer' drive
Long Parameter List,StockSharp.Algo.Storages,MarketDataStorage<TData;TId>,C:\repos\stocksharp_stocksharp\Algo\Storages\MarketDataStorage.cs,MarketDataStorage,The method has 7 parameters. Parameters: securityId' arg' getTime' getSecurityId' getId' serializer' drive
Long Parameter List,StockSharp.Algo.Storages.Binary,Level1BinarySerializer,C:\repos\stocksharp_stocksharp\Algo\Storages\Binary\Level1BinarySerializer.cs,SerializePrice,The method has 5 parameters. Parameters: writer' metaInfo' price' useLong' nonAdjustPrice
Long Parameter List,StockSharp.Algo.Storages.Binary,QuoteBinarySerializer,C:\repos\stocksharp_stocksharp\Algo\Storages\Binary\QuoteBinarySerializer.cs,SerializeQuotes,The method has 5 parameters. Parameters: writer' quotes' metaInfo' useLong' nonAdjustPrice
Long Parameter List,StockSharp.Algo.Storages.Binary,QuoteBinarySerializer,C:\repos\stocksharp_stocksharp\Algo\Storages\Binary\QuoteBinarySerializer.cs,DeserializeQuotes,The method has 5 parameters. Parameters: reader' metaInfo' side' useLong' nonAdjustPrice
Long Parameter List,StockSharp.Algo.Storages.Binary,BinaryHelper,C:\repos\stocksharp_stocksharp\Algo\Storages\Binary\BinaryHelper.cs,WritePrice,The method has 7 parameters. Parameters: writer' price' prevPrice' info' securityId' useLong' nonAdjustPrice
Long Parameter List,StockSharp.Algo.Storages.Binary,BinaryHelper,C:\repos\stocksharp_stocksharp\Algo\Storages\Binary\BinaryHelper.cs,WritePriceEx,The method has 5 parameters. Parameters: writer' price' info' securityId' useLong
Long Parameter List,StockSharp.Algo.Storages.Binary,BinaryHelper,C:\repos\stocksharp_stocksharp\Algo\Storages\Binary\BinaryHelper.cs,ReadPrice,The method has 5 parameters. Parameters: reader' prevPrice' info' useLong' nonAdjustPrice
Long Parameter List,StockSharp.Algo.Storages.Binary,BinaryHelper,C:\repos\stocksharp_stocksharp\Algo\Storages\Binary\BinaryHelper.cs,WriteTime,The method has 11 parameters. Parameters: writer' dto' prevTime' name' allowNonOrdered' isUtc' offset' allowDiffOffsets' isTickPrecision' prevOffset' bigRange
Long Parameter List,StockSharp.Algo.Storages.Binary,BinaryHelper,C:\repos\stocksharp_stocksharp\Algo\Storages\Binary\BinaryHelper.cs,ReadTime,The method has 9 parameters. Parameters: reader' prevTime' allowNonOrdered' isUtc' offset' allowDiffOffsets' isTickPrecision' prevOffset' bigRange
Long Parameter List,StockSharp.Algo.Candles,CandleSourceEnumerator<TSource;TValue>,C:\repos\stocksharp_stocksharp\Algo\Candles\CandleSourceEnumerator.cs,CandleSourceEnumerator,The method has 6 parameters. Parameters: series' from' to' sources' processing' stopped
Long Parameter List,StockSharp.Algo.Candles,CandleHelper,C:\repos\stocksharp_stocksharp\Algo\Candles\CandleHelper.cs,CreateTick,The method has 5 parameters. Parameters: candleMsg' side' price' volume' openInterest
Long Parameter List,StockSharp.Algo.Candles,IndexSeriesInfo,C:\repos\stocksharp_stocksharp\Algo\Candles\IndexSecurityCandleManagerSource.cs,IndexSeriesInfo,The method has 8 parameters. Parameters: candleManager' candleType' innerSeries' from' to' security' processing' stopped
Long Parameter List,StockSharp.Algo.Candles,CandleBuffer,C:\repos\stocksharp_stocksharp\Algo\Candles\IndexCandleBuilder.cs,CandleBuffer,The method has 5 parameters. Parameters: candleType' openTime' closeTime' maxCandleCount' isSparseBuffer
Long Parameter List,StockSharp.Algo.Derivatives,DerivativesHelper,C:\repos\stocksharp_stocksharp\Algo\Derivatives\DerivativesHelper.cs,GetOption,The method has 5 parameters. Parameters: future' provider' strike' expirationDate' optionType
Long Parameter List,StockSharp.Algo.Derivatives,DerivativesHelper,C:\repos\stocksharp_stocksharp\Algo\Derivatives\DerivativesHelper.cs,GetCentralStrike,The method has 5 parameters. Parameters: underlyingAsset' securityProvider' dataProvider' expirationDate' optionType
Long Parameter List,StockSharp.Algo.Derivatives,DerivativesHelper,C:\repos\stocksharp_stocksharp\Algo\Derivatives\DerivativesHelper.cs,ImpliedVolatility,The method has 6 parameters. Parameters: depth' securityProvider' dataProvider' currentTime' riskFree' dividend
Long Parameter List,StockSharp.Algo.Derivatives,DerivativesHelper,C:\repos\stocksharp_stocksharp\Algo\Derivatives\DerivativesHelper.cs,D1,The method has 6 parameters. Parameters: assetPrice' strike' riskFree' dividend' deviation' timeToExp
Long Parameter List,StockSharp.Algo.Derivatives,DerivativesHelper,C:\repos\stocksharp_stocksharp\Algo\Derivatives\DerivativesHelper.cs,Premium,The method has 8 parameters. Parameters: optionType' strike' assetPrice' riskFree' dividend' deviation' timeToExp' d1
Long Parameter List,StockSharp.Algo.Derivatives,DerivativesHelper,C:\repos\stocksharp_stocksharp\Algo\Derivatives\DerivativesHelper.cs,Theta,The method has 8 parameters. Parameters: optionType' strike' assetPrice' riskFree' deviation' timeToExp' d1' daysInYear
Long Parameter List,StockSharp.Algo.Derivatives,DerivativesHelper,C:\repos\stocksharp_stocksharp\Algo\Derivatives\DerivativesHelper.cs,Rho,The method has 7 parameters. Parameters: optionType' strike' assetPrice' riskFree' deviation' timeToExp' d1
Long Parameter List,StockSharp.Algo.Testing,ExecutionLogConverter,C:\repos\stocksharp_stocksharp\Algo\Testing\ExecutionLogConverter.cs,ExecutionLogConverter,The method has 5 parameters. Parameters: securityId' bids' asks' settings' getServerTime
Long Parameter List,StockSharp.Algo.Testing,ExecutionLogConverter,C:\repos\stocksharp_stocksharp\Algo\Testing\ExecutionLogConverter.cs,GetDiff,The method has 7 parameters. Parameters: diff' time' serverTime' from' to' side' newBestPrice
Long Parameter List,StockSharp.Algo.Testing,ExecutionLogConverter,C:\repos\stocksharp_stocksharp\Algo\Testing\ExecutionLogConverter.cs,AddExecMsg,The method has 6 parameters. Parameters: diff' time' serverTime' quote' volume' isSpread
Long Parameter List,StockSharp.Algo.Testing,ExecutionLogConverter,C:\repos\stocksharp_stocksharp\Algo\Testing\ExecutionLogConverter.cs,ProcessMarketOrder,The method has 7 parameters. Parameters: retVal' quotes' time' localTime' orderSide' tradePrice' volume
Long Parameter List,StockSharp.Algo.Testing,ExecutionLogConverter,C:\repos\stocksharp_stocksharp\Algo\Testing\ExecutionLogConverter.cs,TryCreateOppositeOrder,The method has 7 parameters. Parameters: retVal' quotes' localTime' serverTime' tradePrice' volume' originSide
Long Parameter List,StockSharp.Algo.Testing,ExecutionLogConverter,C:\repos\stocksharp_stocksharp\Algo\Testing\ExecutionLogConverter.cs,CancelWorstQuote,The method has 5 parameters. Parameters: retVal' time' serverTime' side' quotes
Long Parameter List,StockSharp.Algo.Testing,ExecutionLogConverter,C:\repos\stocksharp_stocksharp\Algo\Testing\ExecutionLogConverter.cs,CreateMessage,The method has 7 parameters. Parameters: localTime' serverTime' side' price' volume' isCancelling' tif
Long Identifier,StockSharp.Algo,Connector,C:\repos\stocksharp_stocksharp\Algo\Connector_ProcessMessage.cs,,The length of the parameter _nonAssociatedByTransactionIdMyTrades is 37.
Long Identifier,StockSharp.Algo,Connector,C:\repos\stocksharp_stocksharp\Algo\Connector_ProcessMessage.cs,,The length of the parameter _nonAssociatedByStringIdMyTrades is 32.
Long Identifier,StockSharp.Algo,ExtendedMessageTypes,C:\repos\stocksharp_stocksharp\Algo\ExtendedMessageTypes.cs,,The length of the parameter ProcessSuspendedSecurityMessages is 32.
Long Identifier,StockSharp.Algo.Storages,CachedBasketMarketDataStorage<T>,C:\repos\stocksharp_stocksharp\Algo\Storages\CachedBasketMarketDataStorage.cs,,The length of the parameter _postTradeMarketTimeChangedCount is 32.
Long Identifier,StockSharp.Algo.Storages,SecurityList,C:\repos\stocksharp_stocksharp\Algo\Storages\SecurityList.cs,,The length of the parameter _readAllByCodeAndTypeAndExpiryDate is 34.
Long Statement,StockSharp.Algo,Level1DepthBuilder,C:\repos\stocksharp_stocksharp\Algo\Level1DepthBuilderAdapter.cs,Process,The length of the statement  "					Bids = bidPrice == null ? Enumerable.Empty<QuoteChange>() : new[] { new QuoteChange(Sides.Buy' bidPrice.Value' bidVolume ?? 0) }' " is 129.
Long Statement,StockSharp.Algo,Level1DepthBuilder,C:\repos\stocksharp_stocksharp\Algo\Level1DepthBuilderAdapter.cs,Process,The length of the statement  "					Asks = askPrice == null ? Enumerable.Empty<QuoteChange>() : new[] { new QuoteChange(Sides.Sell' askPrice.Value' askVolume ?? 0) }' " is 130.
Long Statement,StockSharp.Algo,OfflineMessageAdapter,C:\repos\stocksharp_stocksharp\Algo\OfflineMessageAdapter.cs,SendInMessage,The length of the statement  "							ProcessSubscriptionMessage(pfMsg' pfMsg.IsSubscribe' pfMsg.TransactionId' pfMsg.OriginalTransactionId' _pfSubscriptions); " is 121.
Long Statement,StockSharp.Algo,OfflineMessageAdapter,C:\repos\stocksharp_stocksharp\Algo\OfflineMessageAdapter.cs,SendInMessage,The length of the statement  "							ProcessSubscriptionMessage(mdMsg' mdMsg.IsSubscribe' mdMsg.TransactionId' mdMsg.OriginalTransactionId' _mdSubscriptions); " is 121.
Long Statement,StockSharp.Algo,SecurityNativeIdMessageAdapter,C:\repos\stocksharp_stocksharp\Algo\SecurityNativeIdMessageAdapter.cs,OnInnerAdapterNewOutMessage,The length of the statement  "									throw new InvalidOperationException(LocalizedStrings.Str687Params.Put(Storage.TryGetBySecurityId(storageName' securityId)' nativeSecurityId' securityId)); " is 154.
Long Statement,StockSharp.Algo,SecurityNativeIdMessageAdapter,C:\repos\stocksharp_stocksharp\Algo\SecurityNativeIdMessageAdapter.cs,ProcessMessage,The length of the statement  "						var tuple = _suspendedOutMessages.SafeAdd(securityId' key => RefTuple.Create((List<Message>)null' (Dictionary<MessageTypes' Message>)null)); " is 140.
Long Statement,StockSharp.Algo,SecurityNativeIdMessageAdapter,C:\repos\stocksharp_stocksharp\Algo\SecurityNativeIdMessageAdapter.cs,ProcessMessage,The length of the statement  "							var tuple = _suspendedOutMessages.SafeAdd(securityId' key => RefTuple.Create(new List<Message>()' (Dictionary<MessageTypes' Message>)null)); " is 140.
Long Statement,StockSharp.Algo,SecurityNativeIdMessageAdapter,C:\repos\stocksharp_stocksharp\Algo\SecurityNativeIdMessageAdapter.cs,ProcessMessage,The length of the statement  "					//	throw new ArgumentException(nameof(securityId)' LocalizedStrings.Str682Params.Put(securityCode' securityId.SecurityType)); " is 125.
Long Statement,StockSharp.Algo,BasketMessageAdapter,C:\repos\stocksharp_stocksharp\Algo\BasketMessageAdapter.cs,CreateWrappers,The length of the statement  "				adapter = new ExtendedInfoStorageMessageAdapter(adapter' ExtendedInfoStorage' adapter.StorageName' adapter.SecurityExtendedFields); " is 131.
Long Statement,StockSharp.Algo,BasketMessageAdapter,C:\repos\stocksharp_stocksharp\Algo\BasketMessageAdapter.cs,OnSendInMessage,The length of the statement  "										RaiseMarketDataMessage(null' mdMsg.OriginalTransactionId' new InvalidOperationException(state.Value.ToString())' false); " is 120.
Long Statement,StockSharp.Algo,BasketMessageAdapter,C:\repos\stocksharp_stocksharp\Algo\BasketMessageAdapter.cs,ProcessSubscriptionAction,The length of the statement  "				RaiseMarketDataMessage(null' originalTransactionId' new ArgumentException(LocalizedStrings.Str629Params.Put(key.Item1 + " " + key.Item2)' nameof(message))' true); " is 162.
Long Statement,StockSharp.Algo,Connector,C:\repos\stocksharp_stocksharp\Algo\Connector_ProcessMessage.cs,EnableAdapter,The length of the statement  "						throw new InvalidOperationException(LocalizedStrings.TypeNotImplemented.Put(adapter.GetType()' nameof(IMessageAdapterWrapper))); " is 128.
Long Statement,StockSharp.Algo,Connector,C:\repos\stocksharp_stocksharp\Algo\Connector_ProcessMessage.cs,ProcessConnectMessage,The length of the statement  "							SetAdapterFailed(adapter' message' ConnectionStates.Connecting' false' new InvalidOperationException(LocalizedStrings.Str683' message.Error)); " is 142.
Long Statement,StockSharp.Algo,Connector,C:\repos\stocksharp_stocksharp\Algo\Connector_ProcessMessage.cs,ProcessConnectMessage,The length of the statement  "							SetAdapterFailed(adapter' message' ConnectionStates.Disconnecting' false' new InvalidOperationException(LocalizedStrings.Str684' message.Error)); " is 145.
Long Statement,StockSharp.Algo,Connector,C:\repos\stocksharp_stocksharp\Algo\Connector_ProcessMessage.cs,ProcessConnectMessage,The length of the statement  "				var error2 = new InvalidOperationException(LocalizedStrings.Str685Params.Put(state' message.GetType().Name)' message.Error); " is 124.
Long Statement,StockSharp.Algo,Connector,C:\repos\stocksharp_stocksharp\Algo\Connector_ProcessMessage.cs,ProcessConnectMessage,The length of the statement  "				if (TimeChange && _adapterStates.Count > 0 && _adapterStates.CachedValues.All(s => s == ConnectionStates.Disconnected || s == ConnectionStates.Failed)) " is 151.
Long Statement,StockSharp.Algo,Connector,C:\repos\stocksharp_stocksharp\Algo\Connector_ProcessMessage.cs,ProcessPortfolioLookupResultMessage,The length of the statement  "			RaiseLookupPortfoliosResult(message.Error' Portfolios.Where(pf => criteria.PortfolioName.IsEmpty() || pf.Name.ContainsIgnoreCase(criteria.PortfolioName))); " is 155.
Long Statement,StockSharp.Algo,Connector,C:\repos\stocksharp_stocksharp\Algo\Connector_ProcessMessage.cs,ProcessPositionChangeMessage,The length of the statement  "			var position = GetPosition(portfolio' security' message.ClientCode' message.DepoName' message.LimitType' message.Description); " is 126.
Long Statement,StockSharp.Algo,Connector,C:\repos\stocksharp_stocksharp\Algo\Connector_ProcessMessage.cs,ProcessQuotesMessage,The length of the statement  "					var info = _marketDepths.SafeAdd(Tuple.Create(security' message.IsFiltered)' key => new MarketDepthInfo(EntityFactory.CreateMarketDepth(security))); " is 148.
Long Statement,StockSharp.Algo,Connector,C:\repos\stocksharp_stocksharp\Algo\Connector_ProcessMessage.cs,ProcessOrderLogMessage,The length of the statement  "					var builder = _olBuilders.SafeAdd(security' key => MarketDataAdapter.CreateOrderLogMarketDepthBuilder(message.SecurityId)); " is 123.
Long Statement,StockSharp.Algo,Connector,C:\repos\stocksharp_stocksharp\Algo\Connector_ProcessMessage.cs,ProcessMyTrades,The length of the statement  "				.Select(t => _entityCache.ProcessMyTradeMessage(order' order.Security' t' _entityCache.GetTransactionId(t.OriginalTransactionId))) " is 130.
Long Statement,StockSharp.Algo,Connector,C:\repos\stocksharp_stocksharp\Algo\Connector_ProcessMessage.cs,ProcessOrderMessage,The length of the statement  "					//if (message.OrderType == OrderTypes.Conditional && (message.DerivedOrderId != null || !message.DerivedOrderStringId.IsEmpty())) " is 129.
Long Statement,StockSharp.Algo,Connector,C:\repos\stocksharp_stocksharp\Algo\Connector_ProcessMessage.cs,ProcessOrderMessage,The length of the statement  "					//	var derivedOrder = _entityCache.GetOrder(order.Security' 0L' message.DerivedOrderId ?? 0' message.DerivedOrderStringId); " is 123.
Long Statement,StockSharp.Algo,Connector,C:\repos\stocksharp_stocksharp\Algo\Connector_ProcessMessage.cs,ProcessOrderMessage,The length of the statement  "					//		_orderStopOrderAssociations.Add(Tuple.Create(message.DerivedOrderId' message.DerivedOrderStringId)' new RefPair<Order' Action<Order' Order>>(order' (s' o1) => s.DerivedOrder = o1)); " is 185.
Long Statement,StockSharp.Algo,Connector,C:\repos\stocksharp_stocksharp\Algo\Connector_ProcessMessage.cs,ProcessOrderMessage,The length of the statement  "					//var isRegisterFail = (fail.Order.Id == null && fail.Order.StringId.IsEmpty()) || fail.Order.Status == OrderStatus.RejectedBySystem; " is 133.
Long Statement,StockSharp.Algo,Connector,C:\repos\stocksharp_stocksharp\Algo\Connector_ProcessMessage.cs,GetPosition,The length of the statement  "			var position = _entityCache.TryAddPosition(portfolio' security' clientCode' depoName' limitType' description' out bool isNew); " is 126.
Long Statement,StockSharp.Algo,Connector,C:\repos\stocksharp_stocksharp\Algo\Connector_ProcessMessage.cs,ReRegisterOrder,The length of the statement  "					throw new ArgumentException(LocalizedStrings.Str1098Params.Put(newOrder.Security.Id' oldOrder.Security.Id)' nameof(newOrder)); " is 126.
Long Statement,StockSharp.Algo,Connector,C:\repos\stocksharp_stocksharp\Algo\Connector_ProcessMessage.cs,ReRegisterOrderPair,The length of the statement  "					throw new ArgumentException(LocalizedStrings.Str1099Params.Put(newOrder1.Security.Id' oldOrder1.Security.Id)' nameof(newOrder1)); " is 129.
Long Statement,StockSharp.Algo,Connector,C:\repos\stocksharp_stocksharp\Algo\Connector_ProcessMessage.cs,ReRegisterOrderPair,The length of the statement  "					throw new ArgumentException(LocalizedStrings.Str1100Params.Put(newOrder2.Security.Id' oldOrder2.Security.Id)' nameof(newOrder2)); " is 129.
Long Statement,StockSharp.Algo,Connector,C:\repos\stocksharp_stocksharp\Algo\Connector_ProcessMessage.cs,CheckOnNew,The length of the statement  "				throw new ArgumentException(LocalizedStrings.Str896Params.Put(order.Id == null ? order.StringId : order.Id.To<string>())' nameof(order)); " is 137.
Long Statement,StockSharp.Algo,Connector,C:\repos\stocksharp_stocksharp\Algo\Connector_ProcessMessage.cs,CheckOrderState,The length of the statement  "			if (order.Price == 0 && (order.Type == OrderTypes.Limit || order.Type == OrderTypes.ExtRepo || order.Type == OrderTypes.Repo || order.Type == OrderTypes.Rps)) " is 158.
Long Statement,StockSharp.Algo,Connector,C:\repos\stocksharp_stocksharp\Algo\Connector_ProcessMessage.cs,OnReRegisterOrderPair,The length of the statement  "			SendInMessage(oldOrder1.CreateReplaceMessage(newOrder1' GetSecurityId(newOrder1.Security)' oldOrder2' newOrder2' GetSecurityId(newOrder2.Security))); " is 149.
Long Statement,StockSharp.Algo,Connector,C:\repos\stocksharp_stocksharp\Algo\Connector_ProcessMessage.cs,GetSecurity,The length of the statement  "				return Tuple.Create(idInfo.SecurityCode' _entityCache.ExchangeInfoProvider.GetOrCreateBoard(GetBoardCode(idInfo.BoardCode))); " is 125.
Long Statement,StockSharp.Algo,Connector,C:\repos\stocksharp_stocksharp\Algo\Connector_ProcessMessage.cs,Load,The length of the statement  "			IsRestorSubscriptioneOnReconnect = storage.GetValue(nameof(IsRestorSubscriptioneOnReconnect)' IsRestorSubscriptioneOnReconnect); " is 128.
Long Statement,StockSharp.Algo,HeartbeatMessageAdapter,C:\repos\stocksharp_stocksharp\Algo\HeartbeatMessageAdapter.cs,ProcessReconnection,The length of the statement  "						this.AddInfoLog("RCM: To Connecting. CurrState {0} PrevState {1} Attempts {2}."' _currState' _prevState' _connectingAttemptCount); " is 130.
Long Statement,StockSharp.Algo,ContinuousSecurity,C:\repos\stocksharp_stocksharp\Algo\ContinuousSecurity.cs,FromSerializedString,The length of the statement  "					return new KeyValuePair<SecurityId' DateTimeOffset>(parts[0].ToSecurityId()' parts[1].ToDateTime(_dateFormat).ChangeKind(DateTimeKind.Utc)); " is 140.
Long Statement,StockSharp.Algo,ExpirationJumpsDictionary,C:\repos\stocksharp_stocksharp\Algo\ContinuousSecurity.cs,RefreshRanges,The length of the statement  "				_enumerator = ((IEnumerable<KeyValuePair<Range<DateTimeOffset>' SecurityId>>)new CircularBuffer<KeyValuePair<Range<DateTimeOffset>' SecurityId>>(_expirationRanges)).GetEnumerator(); " is 181.
Long Statement,StockSharp.Algo,EntityCache,C:\repos\stocksharp_stocksharp\Algo\EntityCache.cs,AddOrderByTransactionId,The length of the statement  "			GetData(order.Security).Orders.Add(CreateOrderKey(order.Type' transactionId' isCancel)' new OrderInfo(order' !isCancel)); " is 121.
Long Statement,StockSharp.Algo,EntityCache,C:\repos\stocksharp_stocksharp\Algo\EntityCache.cs,ProcessOrderMessage,The length of the statement  "				if (cancelledInfo != null) // && (cancelledOrder.Id == orderId || (!cancelledOrder.StringId.IsEmpty() && cancelledOrder.StringId.CompareIgnoreCase(orderStringId)))) " is 164.
Long Statement,StockSharp.Algo,EntityCache,C:\repos\stocksharp_stocksharp\Algo\EntityCache.cs,ProcessOrderMessage,The length of the statement  "					if (orderState != null && cancellationOrder.State != OrderStates.Done && orderState != OrderStates.None && orderState != OrderStates.Pending) " is 141.
Long Statement,StockSharp.Algo,EntityCache,C:\repos\stocksharp_stocksharp\Algo\EntityCache.cs,ProcessOrderFailMessage,The length of the statement  "					cancelledOrder = data.Orders.TryGetValue(CreateOrderKey(OrderTypes.Conditional' message.OriginalTransactionId' true))?.Order; " is 125.
Long Statement,StockSharp.Algo,EntityCache,C:\repos\stocksharp_stocksharp\Algo\EntityCache.cs,ProcessOrderFailMessage,The length of the statement  "					registeredOrder = data.Orders.TryGetValue(CreateOrderKey(OrderTypes.Conditional' message.OriginalTransactionId' false))?.Order; " is 127.
Long Statement,StockSharp.Algo,EntityCache,C:\repos\stocksharp_stocksharp\Algo\EntityCache.cs,ProcessOrderFailMessage,The length of the statement  "				var error = message.Error ?? new InvalidOperationException(isCancelTransaction ? LocalizedStrings.Str716 : LocalizedStrings.Str717); " is 132.
Long Statement,StockSharp.Algo,EntityCache,C:\repos\stocksharp_stocksharp\Algo\EntityCache.cs,GetTransactionId,The length of the statement  "			return IsOrderStatusRequest(originalTransactionId) || IsMassCancelation(originalTransactionId) ? 0 : originalTransactionId; " is 123.
Long Statement,StockSharp.Algo,EntityCache,C:\repos\stocksharp_stocksharp\Algo\EntityCache.cs,GetOrder,The length of the statement  "			return _allOrdersByTransactionId.TryGetValue(Tuple.Create(transactionId' true)) ?? _allOrdersByTransactionId.TryGetValue(Tuple.Create(transactionId' false)); " is 157.
Long Statement,StockSharp.Algo,Helper,C:\repos\stocksharp_stocksharp\Algo\Helper.cs,CreateKey,The length of the statement  "			return Tuple.Create(message.DataType' securityId ?? message.SecurityId' message.Arg' message.From' message.To' message.Count' message.MaxDepth); " is 144.
Long Statement,StockSharp.Algo,DepthEnumerator,C:\repos\stocksharp_stocksharp\Algo\OrderLogHelper.cs,MoveNext,The length of the statement  "						//	_builder = new OrderLogMarketDepthBuilder(new QuoteChangeMessage { SecurityId = item.SecurityId' IsSorted = true }' _maxDepth); " is 130.
Long Statement,StockSharp.Algo,SecurityIdGenerator,C:\repos\stocksharp_stocksharp\Algo\SecurityIdGenerator.cs,Split,The length of the statement  "				? nullIfInvalid ? default(SecurityId) : new SecurityId { SecurityCode = securityId' BoardCode = ExchangeBoard.Associated.Code } " is 127.
Long Statement,StockSharp.Algo,SecurityIdGenerator,C:\repos\stocksharp_stocksharp\Algo\SecurityIdGenerator.cs,Split,The length of the statement  "				: new SecurityId { SecurityCode = securityId.Substring(0' index)' BoardCode = securityId.Substring(index + Delimiter.Length' securityId.Length - index - Delimiter.Length) }; " is 173.
Long Statement,StockSharp.Algo,MarketRuleHelper,C:\repos\stocksharp_stocksharp\Algo\MarketRuleHelper.cs,WhenRegistered,The length of the statement  "			return new ChangedOrNewOrderRule(order' connector' o => o.State == OrderStates.Active || o.State == OrderStates.Done) { Name = LocalizedStrings.Str1034 }.Once(); " is 161.
Long Statement,StockSharp.Algo,MarketRuleHelper,C:\repos\stocksharp_stocksharp\Algo\MarketRuleHelper.cs,CreateLastTradeCondition,The length of the statement  "				return new SecurityLastTradeRule(security' connector' s => (decimal?)provider.GetSecurityValue(s' Level1Fields.LastTradePrice) < finishPrice); " is 142.
Long Statement,StockSharp.Algo,MarketRuleHelper,C:\repos\stocksharp_stocksharp\Algo\MarketRuleHelper.cs,CreateLastTradeCondition,The length of the statement  "				return new SecurityLastTradeRule(security' connector' s => (decimal?)provider.GetSecurityValue(s' Level1Fields.LastTradePrice) > finishPrice); " is 142.
Long Statement,StockSharp.Algo,MarketRuleHelper,C:\repos\stocksharp_stocksharp\Algo\MarketRuleHelper.cs,WhenCandlesFinished,The length of the statement  "			return new CandleStateSeriesRule(candleManager' series' CandleStates.Finished) { Name = LocalizedStrings.Str1073 + " " + series }; " is 130.
Long Statement,StockSharp.Algo,OrderRule<TArg>,C:\repos\stocksharp_stocksharp\Algo\MarketRuleHelper.cs,ToString,The length of the statement  "				return "{0} {2}/{3} (0x{1:X})".Put(Name' GetHashCode()' Order.TransactionId' (Order.Id == null ? Order.StringId : Order.Id.To<string>())); " is 138.
Long Statement,StockSharp.Algo,MessageConverterHelper,C:\repos\stocksharp_stocksharp\Algo\MessageConverterHelper.cs,ToMessage,The length of the statement  "				UnderlyingSecurityCode = security.UnderlyingSecurityId.IsEmpty() ? null : security.UnderlyingSecurityId.ToSecurityId().SecurityCode' " is 132.
Long Statement,StockSharp.Algo,MessageConverterHelper,C:\repos\stocksharp_stocksharp\Algo\MessageConverterHelper.cs,ToLookupCriteria,The length of the statement  "				Board = message.SecurityId.BoardCode.IsEmpty() ? null : exchangeInfoProvider.GetExchangeBoard(message.SecurityId.BoardCode)' " is 124.
Long Statement,StockSharp.Algo,MessageConverterHelper,C:\repos\stocksharp_stocksharp\Algo\MessageConverterHelper.cs,ToLookupCriteria,The length of the statement  "				UnderlyingSecurityId = message.UnderlyingSecurityCode.IsEmpty() ? null : _defaultGenerator.GenerateId(message.UnderlyingSecurityCode' message.SecurityId.BoardCode)' " is 164.
Long Statement,StockSharp.Algo,MessageConverterHelper,C:\repos\stocksharp_stocksharp\Algo\MessageConverterHelper.cs,ToLookupMessage,The length of the statement  "				UnderlyingSecurityCode = criteria.UnderlyingSecurityId.IsEmpty() ? null : _defaultGenerator.Split(criteria.UnderlyingSecurityId).SecurityCode' " is 142.
Long Statement,StockSharp.Algo,MessageConverterHelper,C:\repos\stocksharp_stocksharp\Algo\MessageConverterHelper.cs,ToBoard,The length of the statement  "			return message.ToBoard(new ExchangeBoard { Code = message.Code' Exchange = new Exchange { Name = message.ExchangeCode } }); " is 123.
Long Statement,StockSharp.Algo,MessageConverterHelper,C:\repos\stocksharp_stocksharp\Algo\MessageConverterHelper.cs,ToOrderLog,The length of the statement  "				order.State = order.State.CheckModification(message.IsCancelled || message.TradeId != null ? OrderStates.Done : OrderStates.Active); " is 132.
Long Statement,StockSharp.Algo,MessageConverterHelper,C:\repos\stocksharp_stocksharp\Algo\MessageConverterHelper.cs,ToSecurityId,The length of the statement  "				// http://stocksharp.com/forum/yaf_postst5143findunread_API-4-2-4-0-Nie-vystavliaiutsia-zaiavki-po-niekotorym-instrumientam-FORTS.aspx " is 134.
Long Statement,StockSharp.Algo,TraderHelper,C:\repos\stocksharp_stocksharp\Algo\TraderHelper.cs,IsTradeDate,The length of the statement  "			if ((period == null || period.Times.Count == 0) && workingTime.SpecialWorkingDays.Count == 0 && workingTime.SpecialHolidays.Count == 0) " is 135.
Long Statement,StockSharp.Algo,TraderHelper,C:\repos\stocksharp_stocksharp\Algo\TraderHelper.cs,Group,The length of the statement  "			return new MarketDepth(depth.Security).Update(depth.Bids.Group(priceRange)' depth.Asks.Group(priceRange)' true' depth.LastChangeTime);" is 134.
Long Statement,StockSharp.Algo,TraderHelper,C:\repos\stocksharp_stocksharp\Algo\TraderHelper.cs,Group,The length of the statement  "			retVal = firstQuote.OrderDirection == Sides.Sell ? retVal.OrderBy(q => q.Price) : retVal.OrderByDescending(q => q.Price);" is 121.
Long Statement,StockSharp.Algo,TraderHelper,C:\repos\stocksharp_stocksharp\Algo\TraderHelper.cs,AlignPrice,The length of the statement  "				priceLevel = (decimal)(firstPrice + MathHelper.Floor((((price - firstPrice) * 100) / firstPrice)' priceRange.Value).Percents());" is 128.
Long Statement,StockSharp.Algo,TraderHelper,C:\repos\stocksharp_stocksharp\Algo\TraderHelper.cs,Filter,The length of the statement  "			return basket?.InnerSecurityIds.SelectMany(id => orders.Where(o => o.Security.ToSecurityId() == id)) ?? orders.Where(o => o.Security == security);" is 146.
Long Statement,StockSharp.Algo,TraderHelper,C:\repos\stocksharp_stocksharp\Algo\TraderHelper.cs,Filter,The length of the statement  "			return basket?.InnerSecurityIds.SelectMany(id => trades.Where(o => o.Security.ToSecurityId() == id)) ?? trades.Where(t => t.Security == security);" is 146.
Long Statement,StockSharp.Algo,TraderHelper,C:\repos\stocksharp_stocksharp\Algo\TraderHelper.cs,Filter,The length of the statement  "			return basket?.InnerSecurityIds.SelectMany(id => positions.Where(o => o.Security.ToSecurityId() == id)) ?? positions.Where(p => p.Security == security);" is 152.
Long Statement,StockSharp.Algo,TraderHelper,C:\repos\stocksharp_stocksharp\Algo\TraderHelper.cs,Filter,The length of the statement  "			return basket?.InnerSecurityIds.SelectMany(id => myTrades.Where(t => t.Order.Security.ToSecurityId() == id)) ?? myTrades.Where(t => t.Order.Security == security);" is 162.
Long Statement,StockSharp.Algo,TraderHelper,C:\repos\stocksharp_stocksharp\Algo\TraderHelper.cs,GetSecurityCriteria,The length of the statement  "				Board = criteria.SecurityId.BoardCode.IsEmpty() ? null : exchangeInfoProvider.GetOrCreateBoard(criteria.SecurityId.BoardCode)'" is 126.
Long Statement,StockSharp.Algo,TraderHelper,C:\repos\stocksharp_stocksharp\Algo\TraderHelper.cs,Filter,The length of the statement  "				if (!criteria.ExternalId.Bloomberg.IsEmptyOrWhiteSpace() && !s.ExternalId.Bloomberg.ContainsIgnoreCase(criteria.ExternalId.Bloomberg))" is 134.
Long Statement,StockSharp.Algo,TraderHelper,C:\repos\stocksharp_stocksharp\Algo\TraderHelper.cs,Filter,The length of the statement  "				if (!criteria.ExternalId.Cusip.IsEmptyOrWhiteSpace() && !s.ExternalId.Cusip.ContainsIgnoreCase(criteria.ExternalId.Cusip))" is 122.
Long Statement,StockSharp.Algo,TraderHelper,C:\repos\stocksharp_stocksharp\Algo\TraderHelper.cs,Filter,The length of the statement  "				if (!criteria.ExternalId.IQFeed.IsEmptyOrWhiteSpace() && !s.ExternalId.IQFeed.ContainsIgnoreCase(criteria.ExternalId.IQFeed))" is 125.
Long Statement,StockSharp.Algo,TraderHelper,C:\repos\stocksharp_stocksharp\Algo\TraderHelper.cs,Filter,The length of the statement  "				if (!criteria.ExternalId.Sedol.IsEmptyOrWhiteSpace() && !s.ExternalId.Sedol.ContainsIgnoreCase(criteria.ExternalId.Sedol))" is 122.
Long Statement,StockSharp.Algo,TraderHelper,C:\repos\stocksharp_stocksharp\Algo\TraderHelper.cs,GetFortsJumps,The length of the statement  "			return baseCode.GetFortsJumps(from' to' code => provider.LookupByCode(code).FirstOrDefault(s => s.Code.CompareIgnoreCase(code))' throwIfNotExists);" is 147.
Long Statement,StockSharp.Algo,TraderHelper,C:\repos\stocksharp_stocksharp\Algo\TraderHelper.cs,AddOrderLog,The length of the statement  "			receiver.AddLog(new LogMessage(receiver' receiver.CurrentTime' type' () => "{0}: {1} {2}".Put(operation' orderDescription' additionalInfo)));" is 141.
Long Statement,StockSharp.Algo,TraderHelper,C:\repos\stocksharp_stocksharp\Algo\TraderHelper.cs,IsAllSecurity,The length of the statement  "			return securityId.SecurityCode.CompareIgnoreCase(MessageAdapter.DefaultAssociatedBoardCode) && securityId.BoardCode.CompareIgnoreCase(MessageAdapter.DefaultAssociatedBoardCode);" is 177.
Long Statement,StockSharp.Algo,TraderHelper,C:\repos\stocksharp_stocksharp\Algo\TraderHelper.cs,ToTimeQuotes,The length of the statement  "			return messages.SelectMany(d => d.Asks.Concat(d.Bids).OrderByDescending(q => q.Price).Select(q => new TimeQuoteChange(q' d)));" is 126.
Long Statement,StockSharp.Algo,OrderBookEnumerator,C:\repos\stocksharp_stocksharp\Algo\TraderHelper.cs,MoveNext,The length of the statement  "						if (prevBidPrice == _prevBidPrice && prevBidVolume == _prevBidVolume && prevAskPrice == _prevAskPrice && prevAskVolume == _prevAskVolume)" is 137.
Long Statement,StockSharp.Algo,OrderBookEnumerator,C:\repos\stocksharp_stocksharp\Algo\TraderHelper.cs,MoveNext,The length of the statement  "							Bids = _prevBidPrice == null ? Enumerable.Empty<QuoteChange>() : new[] { new QuoteChange(Sides.Buy' _prevBidPrice.Value' _prevBidVolume ?? 0) }'" is 144.
Long Statement,StockSharp.Algo,OrderBookEnumerator,C:\repos\stocksharp_stocksharp\Algo\TraderHelper.cs,MoveNext,The length of the statement  "							Asks = _prevAskPrice == null ? Enumerable.Empty<QuoteChange>() : new[] { new QuoteChange(Sides.Sell' _prevAskPrice.Value' _prevAskVolume ?? 0) }'" is 145.
Long Statement,StockSharp.Algo.Candles.Compression,CandleBuilderMessageAdapter,C:\repos\stocksharp_stocksharp\Algo\Candles\Compression\CandleBuilderMessageAdapter.cs,ProcessMarketDataMessage,The length of the statement  "					Board = !securityId.BoardCode.IsEmpty() ? _exchangeInfoProvider.GetOrCreateBoard(securityId.BoardCode) : ExchangeBoard.Associated " is 129.
Long Statement,StockSharp.Algo.Candles.Compression,CandleBuilderMessageAdapter,C:\repos\stocksharp_stocksharp\Algo\Candles\Compression\CandleBuilderMessageAdapter.cs,ProcessMarketDataFinished,The length of the statement  "				//RaiseNewOutMessage(new MarketDataFinishedMessage { OriginalTransactionId = info.MarketDataMessage.TransactionId' IsHistory = true }); " is 135.
Long Statement,StockSharp.Algo.Candles.Compression,CandleBuilderMessageAdapter,C:\repos\stocksharp_stocksharp\Algo\Candles\Compression\CandleBuilderMessageAdapter.cs,RemoveSeriesInfo,The length of the statement  "			_series.Remove(Tuple.Create(info.MarketDataMessage.SecurityId' info.MarketDataMessage.DataType' info.MarketDataMessage.Arg)); " is 125.
Long Statement,StockSharp.Algo.Candles.Compression,CandleHolderMessageAdapter,C:\repos\stocksharp_stocksharp\Algo\Candles\Compression\CandleHolderMessageAdapter.cs,ProcessMarketData,The length of the statement  "					var info = _infos.SafeAdd(message.TransactionId' k => message.DataType.ToCandleMessage().CreateInstance<CandleMessage>()); " is 122.
Long Statement,StockSharp.Algo.Commissions,CommissionMessageAdapter,C:\repos\stocksharp_stocksharp\Algo\Commissions\CommissionMessageAdapter.cs,OnInnerAdapterNewOutMessage,The length of the statement  "			if (message is ExecutionMessage execMsg && execMsg.ExecutionType == ExecutionTypes.Transaction && execMsg.Commission == null) " is 125.
Long Statement,StockSharp.Algo.Export.Database,TransactionTable,C:\repos\stocksharp_stocksharp\Algo\Export\Database\TransactionTable.cs,CreateColumns,The length of the statement  "			yield return new ColumnDescription(nameof(ExecutionMessage.OrderPrice)) { DbType = typeof(decimal)' ValueRestriction = new DecimalRestriction { Scale = security.PriceStep?.GetCachedDecimals() ?? 1 } }; " is 201.
Long Statement,StockSharp.Algo.Export.Database,TransactionTable,C:\repos\stocksharp_stocksharp\Algo\Export\Database\TransactionTable.cs,CreateColumns,The length of the statement  "			yield return new ColumnDescription(nameof(ExecutionMessage.OrderVolume)) { DbType = typeof(decimal?)' ValueRestriction = new DecimalRestriction { Scale = security.VolumeStep?.GetCachedDecimals() ?? 1 } }; " is 204.
Long Statement,StockSharp.Algo.Export.Database,TransactionTable,C:\repos\stocksharp_stocksharp\Algo\Export\Database\TransactionTable.cs,CreateColumns,The length of the statement  "			yield return new ColumnDescription(nameof(ExecutionMessage.VisibleVolume)) { DbType = typeof(decimal?)' ValueRestriction = new DecimalRestriction { Scale = security.VolumeStep?.GetCachedDecimals() ?? 1 } }; " is 206.
Long Statement,StockSharp.Algo.Export.Database,TransactionTable,C:\repos\stocksharp_stocksharp\Algo\Export\Database\TransactionTable.cs,CreateColumns,The length of the statement  "			yield return new ColumnDescription(nameof(ExecutionMessage.Balance)) { DbType = typeof(decimal?)' ValueRestriction = new DecimalRestriction { Scale = security.VolumeStep?.GetCachedDecimals() ?? 1 } }; " is 200.
Long Statement,StockSharp.Algo.Export.Database,TransactionTable,C:\repos\stocksharp_stocksharp\Algo\Export\Database\TransactionTable.cs,CreateColumns,The length of the statement  "			yield return new ColumnDescription(nameof(ExecutionMessage.TradePrice)) { DbType = typeof(decimal?)' ValueRestriction = new DecimalRestriction { Scale = security.PriceStep?.GetCachedDecimals() ?? 1 } }; " is 202.
Long Statement,StockSharp.Algo.Export.Database,TransactionTable,C:\repos\stocksharp_stocksharp\Algo\Export\Database\TransactionTable.cs,CreateColumns,The length of the statement  "			yield return new ColumnDescription(nameof(ExecutionMessage.TradeVolume)) { DbType = typeof(decimal?)' ValueRestriction = new DecimalRestriction { Scale = security.VolumeStep?.GetCachedDecimals() ?? 1 } }; " is 204.
Long Statement,StockSharp.Algo.Export.Database,TransactionTable,C:\repos\stocksharp_stocksharp\Algo\Export\Database\TransactionTable.cs,CreateColumns,The length of the statement  "			yield return new ColumnDescription(nameof(ExecutionMessage.Slippage)) { DbType = typeof(decimal?)' ValueRestriction = new DecimalRestriction { Scale = security.PriceStep?.GetCachedDecimals() ?? 1 } }; " is 200.
Long Statement,StockSharp.Algo.Export.Database,TransactionTable,C:\repos\stocksharp_stocksharp\Algo\Export\Database\TransactionTable.cs,CreateColumns,The length of the statement  "			yield return new ColumnDescription(nameof(ExecutionMessage.Position)) { DbType = typeof(decimal?)' ValueRestriction = new DecimalRestriction { Scale = security.VolumeStep?.GetCachedDecimals() ?? 1 } }; " is 201.
Long Statement,StockSharp.Algo.Export.Database,TransactionTable,C:\repos\stocksharp_stocksharp\Algo\Export\Database\TransactionTable.cs,CreateColumns,The length of the statement  "			yield return new ColumnDescription(nameof(ExecutionMessage.PnL)) { DbType = typeof(decimal?)' ValueRestriction = new DecimalRestriction { Scale = security.PriceStep?.GetCachedDecimals() ?? 1 } }; " is 195.
Long Statement,StockSharp.Algo.Export.Database,TransactionTable,C:\repos\stocksharp_stocksharp\Algo\Export\Database\TransactionTable.cs,CreateColumns,The length of the statement  "			yield return new ColumnDescription(nameof(ExecutionMessage.OpenInterest)) { DbType = typeof(decimal?)' ValueRestriction = new DecimalRestriction { Scale = security.VolumeStep?.GetCachedDecimals() ?? 1 } }; " is 205.
Long Statement,StockSharp.Algo.Export.Database,TransactionTable,C:\repos\stocksharp_stocksharp\Algo\Export\Database\TransactionTable.cs,ConvertToParameters,The length of the statement  "				//{ nameof(ExecutionMessage.DerivedOrderId)' value.DerivedOrderId == null ? value.DerivedOrderStringId : value.DerivedOrderId.To<string>() }' " is 141.
Long Statement,StockSharp.Algo.Export.Database,MarketDepthQuoteTable,C:\repos\stocksharp_stocksharp\Algo\Export\Database\MarketDepthQuoteTable.cs,CreateColumns,The length of the statement  "			yield return new ColumnDescription(nameof(TimeQuoteChange.ServerTime)) { IsPrimaryKey = true' DbType = typeof(DateTimeOffset) }; " is 128.
Long Statement,StockSharp.Algo.Export.Database,OrderLogTable,C:\repos\stocksharp_stocksharp\Algo\Export\Database\OrderLogTable.cs,CreateColumns,The length of the statement  "			yield return new ColumnDescription(nameof(ExecutionMessage.OrderPrice)) { DbType = typeof(decimal)' ValueRestriction = new DecimalRestriction { Scale = security.PriceStep?.GetCachedDecimals() ?? 1 } }; " is 201.
Long Statement,StockSharp.Algo.Export.Database,OrderLogTable,C:\repos\stocksharp_stocksharp\Algo\Export\Database\OrderLogTable.cs,CreateColumns,The length of the statement  "			yield return new ColumnDescription(nameof(ExecutionMessage.OrderVolume)) { DbType = typeof(decimal)' ValueRestriction = new DecimalRestriction { Scale = security.VolumeStep?.GetCachedDecimals() ?? 1 } }; " is 203.
Long Statement,StockSharp.Algo.Export.Database,OrderLogTable,C:\repos\stocksharp_stocksharp\Algo\Export\Database\OrderLogTable.cs,CreateColumns,The length of the statement  "			yield return new ColumnDescription(nameof(ExecutionMessage.TradePrice)) { DbType = typeof(decimal?)' ValueRestriction = new DecimalRestriction { Scale = security.PriceStep?.GetCachedDecimals() ?? 1 } }; " is 202.
Long Statement,StockSharp.Algo.Export.Database,OrderLogTable,C:\repos\stocksharp_stocksharp\Algo\Export\Database\OrderLogTable.cs,CreateColumns,The length of the statement  "			yield return new ColumnDescription(nameof(ExecutionMessage.OpenInterest)) { DbType = typeof(decimal?)' ValueRestriction = new DecimalRestriction { Scale = security.VolumeStep?.GetCachedDecimals() ?? 1 } }; " is 205.
Long Statement,StockSharp.Algo.Export.Database,TradeTable,C:\repos\stocksharp_stocksharp\Algo\Export\Database\TradeTable.cs,CreateColumns,The length of the statement  "			yield return new ColumnDescription(nameof(ExecutionMessage.TradePrice)) { DbType = typeof(decimal)' ValueRestriction = new DecimalRestriction { Scale = security.PriceStep?.GetCachedDecimals() ?? 1 } }; " is 201.
Long Statement,StockSharp.Algo.Export.Database,TradeTable,C:\repos\stocksharp_stocksharp\Algo\Export\Database\TradeTable.cs,CreateColumns,The length of the statement  "			yield return new ColumnDescription(nameof(ExecutionMessage.TradeVolume)) { DbType = typeof(decimal)' ValueRestriction = new DecimalRestriction { Scale = security.VolumeStep?.GetCachedDecimals() ?? 1 } }; " is 203.
Long Statement,StockSharp.Algo.Export.Database,TradeTable,C:\repos\stocksharp_stocksharp\Algo\Export\Database\TradeTable.cs,CreateColumns,The length of the statement  "			yield return new ColumnDescription(nameof(ExecutionMessage.OpenInterest)) { DbType = typeof(decimal?)' ValueRestriction = new DecimalRestriction { Scale = security.VolumeStep?.GetCachedDecimals() ?? 1 } }; " is 205.
Long Statement,StockSharp.Algo.Export,XmlExporter,C:\repos\stocksharp_stocksharp\Algo\Export\XmlExporter.cs,Export,The length of the statement  "						//writer.WriteAttribute("derivedOrderId"' item.DerivedOrderId == null ? item.DerivedOrderStringId : item.DerivedOrderId.To<string>()); " is 134.
Long Statement,StockSharp.Algo.Import,CsvImporter,C:\repos\stocksharp_stocksharp\Algo\Import\CsvImporter.cs,FlushBuffer,The length of the statement  "								((IMarketDataStorage<Level1ChangeMessage>)storage).Save(secGroup.Cast<Level1ChangeMessage>().OrderBy(m => m.ServerTime)); " is 121.
Long Statement,StockSharp.Algo.Import,CsvParser,C:\repos\stocksharp_stocksharp\Algo\Import\CsvParser.cs,Parse,The length of the statement  "							throw new InvalidOperationException(LocalizedStrings.CsvImportError.Put(lineIndex' number' cells[number]' field.DisplayName)' ex); " is 130.
Long Statement,StockSharp.Algo.Import,FieldMappingRegistry,C:\repos\stocksharp_stocksharp\Algo\Import\FieldMappingRegistry.cs,CreateFields,The length of the statement  "				fields.Add(new FieldMapping<SecurityMessage' string>(GetSecurityCodeField(nameof(SecurityMessage.SecurityId))' LocalizedStrings.Security' secCodeDescr' SetSecCode) { IsRequired = true }); " is 187.
Long Statement,StockSharp.Algo.Import,FieldMappingRegistry,C:\repos\stocksharp_stocksharp\Algo\Import\FieldMappingRegistry.cs,CreateFields,The length of the statement  "				fields.Add(new FieldMapping<SecurityMessage' string>(GetBoardCodeField(nameof(SecurityMessage.SecurityId))' LocalizedStrings.Board' boardCodeDescr' SetBoardCode) { IsRequired = true }); " is 185.
Long Statement,StockSharp.Algo.Import,FieldMappingRegistry,C:\repos\stocksharp_stocksharp\Algo\Import\FieldMappingRegistry.cs,CreateFields,The length of the statement  "				fields.Add(new FieldMapping<SecurityMessage' string>(nameof(SecurityMessage.Name)' LocalizedStrings.Name' LocalizedStrings.Str362' (i' v) => i.Name = v)); " is 154.
Long Statement,StockSharp.Algo.Import,FieldMappingRegistry,C:\repos\stocksharp_stocksharp\Algo\Import\FieldMappingRegistry.cs,CreateFields,The length of the statement  "				fields.Add(new FieldMapping<SecurityMessage' decimal>(nameof(SecurityMessage.PriceStep)' LocalizedStrings.PriceStep' LocalizedStrings.MinPriceStep' (i' v) => i.PriceStep = v)); " is 176.
Long Statement,StockSharp.Algo.Import,FieldMappingRegistry,C:\repos\stocksharp_stocksharp\Algo\Import\FieldMappingRegistry.cs,CreateFields,The length of the statement  "				fields.Add(new FieldMapping<SecurityMessage' int>(nameof(SecurityMessage.Decimals)' LocalizedStrings.Decimals' LocalizedStrings.Str548' (i' v) => i.Decimals = v)); " is 163.
Long Statement,StockSharp.Algo.Import,FieldMappingRegistry,C:\repos\stocksharp_stocksharp\Algo\Import\FieldMappingRegistry.cs,CreateFields,The length of the statement  "				fields.Add(new FieldMapping<SecurityMessage' decimal>(nameof(SecurityMessage.VolumeStep)' LocalizedStrings.VolumeStep' LocalizedStrings.Str366' (i' v) => i.VolumeStep = v)); " is 173.
Long Statement,StockSharp.Algo.Import,FieldMappingRegistry,C:\repos\stocksharp_stocksharp\Algo\Import\FieldMappingRegistry.cs,CreateFields,The length of the statement  "				fields.Add(new FieldMapping<SecurityMessage' decimal>(nameof(SecurityMessage.Multiplier)' LocalizedStrings.Str330' LocalizedStrings.LotVolume' (i' v) => i.Multiplier = v)); " is 172.
Long Statement,StockSharp.Algo.Import,FieldMappingRegistry,C:\repos\stocksharp_stocksharp\Algo\Import\FieldMappingRegistry.cs,CreateFields,The length of the statement  "				fields.Add(new FieldMapping<SecurityMessage' SecurityTypes>(nameof(SecurityMessage.SecurityType)' LocalizedStrings.Type' LocalizedStrings.Str360' (i' v) => i.SecurityType = v)); " is 177.
Long Statement,StockSharp.Algo.Import,FieldMappingRegistry,C:\repos\stocksharp_stocksharp\Algo\Import\FieldMappingRegistry.cs,CreateFields,The length of the statement  "						fields.Add(new FieldMapping<ExecutionMessage' string>(GetSecurityCodeField(nameof(ExecutionMessage.SecurityId))' LocalizedStrings.Security' secCodeDescr' SetSecCode) { IsRequired = true }); " is 189.
Long Statement,StockSharp.Algo.Import,FieldMappingRegistry,C:\repos\stocksharp_stocksharp\Algo\Import\FieldMappingRegistry.cs,CreateFields,The length of the statement  "						fields.Add(new FieldMapping<ExecutionMessage' string>(GetBoardCodeField(nameof(ExecutionMessage.SecurityId))' LocalizedStrings.Board' boardCodeDescr' SetBoardCode) { IsRequired = true }); " is 187.
Long Statement,StockSharp.Algo.Import,FieldMappingRegistry,C:\repos\stocksharp_stocksharp\Algo\Import\FieldMappingRegistry.cs,CreateFields,The length of the statement  "						fields.Add(new FieldMapping<ExecutionMessage' long>(nameof(ExecutionMessage.TradeId)' LocalizedStrings.Id' string.Empty' (i' v) => i.TradeId = v)); " is 147.
Long Statement,StockSharp.Algo.Import,FieldMappingRegistry,C:\repos\stocksharp_stocksharp\Algo\Import\FieldMappingRegistry.cs,CreateFields,The length of the statement  "						fields.Add(new FieldMapping<ExecutionMessage' string>(nameof(ExecutionMessage.TradeStringId)' LocalizedStrings.Str2856' string.Empty' (i' v) => i.TradeStringId = v)); " is 166.
Long Statement,StockSharp.Algo.Import,FieldMappingRegistry,C:\repos\stocksharp_stocksharp\Algo\Import\FieldMappingRegistry.cs,CreateFields,The length of the statement  "						fields.Add(new FieldMapping<ExecutionMessage' DateTimeOffset>(GetDateField(nameof(ExecutionMessage.ServerTime))' LocalizedStrings.Date' dateDescr' (i' v) => i.ServerTime = v + i.ServerTime.TimeOfDay) { IsRequired = true }); " is 223.
Long Statement,StockSharp.Algo.Import,FieldMappingRegistry,C:\repos\stocksharp_stocksharp\Algo\Import\FieldMappingRegistry.cs,CreateFields,The length of the statement  "						fields.Add(new FieldMapping<ExecutionMessage' TimeSpan>(GetTimeOfDayField(nameof(ExecutionMessage.ServerTime))' LocalizedStrings.Time' timeDescr' (i' v) => i.ServerTime += v)); " is 176.
Long Statement,StockSharp.Algo.Import,FieldMappingRegistry,C:\repos\stocksharp_stocksharp\Algo\Import\FieldMappingRegistry.cs,CreateFields,The length of the statement  "						fields.Add(new FieldMapping<ExecutionMessage' decimal>(nameof(ExecutionMessage.TradePrice)' LocalizedStrings.Price' string.Empty' (i' v) => i.TradePrice = v) { IsRequired = true }); " is 181.
Long Statement,StockSharp.Algo.Import,FieldMappingRegistry,C:\repos\stocksharp_stocksharp\Algo\Import\FieldMappingRegistry.cs,CreateFields,The length of the statement  "						fields.Add(new FieldMapping<ExecutionMessage' decimal>(nameof(ExecutionMessage.TradeVolume)' LocalizedStrings.Volume' string.Empty' (i' v) => i.TradeVolume = v) { IsRequired = true }); " is 184.
Long Statement,StockSharp.Algo.Import,FieldMappingRegistry,C:\repos\stocksharp_stocksharp\Algo\Import\FieldMappingRegistry.cs,CreateFields,The length of the statement  "						fields.Add(new FieldMapping<ExecutionMessage' Sides>(nameof(ExecutionMessage.OriginSide)' LocalizedStrings.Str329' LocalizedStrings.Str149' (i' v) => i.OriginSide = v)); " is 169.
Long Statement,StockSharp.Algo.Import,FieldMappingRegistry,C:\repos\stocksharp_stocksharp\Algo\Import\FieldMappingRegistry.cs,CreateFields,The length of the statement  "						fields.Add(new FieldMapping<ExecutionMessage' decimal>(nameof(ExecutionMessage.OpenInterest)' LocalizedStrings.Str150' LocalizedStrings.Str151' (i' v) => i.OpenInterest = v)); " is 175.
Long Statement,StockSharp.Algo.Import,FieldMappingRegistry,C:\repos\stocksharp_stocksharp\Algo\Import\FieldMappingRegistry.cs,CreateFields,The length of the statement  "						fields.Add(new FieldMapping<ExecutionMessage' bool>(nameof(ExecutionMessage.IsSystem)' LocalizedStrings.Str342' LocalizedStrings.Str140' (i' v) => i.IsSystem = v)); " is 164.
Long Statement,StockSharp.Algo.Import,FieldMappingRegistry,C:\repos\stocksharp_stocksharp\Algo\Import\FieldMappingRegistry.cs,CreateFields,The length of the statement  "						fields.Add(new FieldMapping<ExecutionMessage' bool>(nameof(ExecutionMessage.IsUpTick)' LocalizedStrings.Str157' LocalizedStrings.Str158' (i' v) => i.IsUpTick = v)); " is 164.
Long Statement,StockSharp.Algo.Import,FieldMappingRegistry,C:\repos\stocksharp_stocksharp\Algo\Import\FieldMappingRegistry.cs,CreateFields,The length of the statement  "						fields.Add(new FieldMapping<ExecutionMessage' string>(GetSecurityCodeField(nameof(ExecutionMessage.SecurityId))' LocalizedStrings.Security' secCodeDescr' SetSecCode) { IsRequired = true }); " is 189.
Long Statement,StockSharp.Algo.Import,FieldMappingRegistry,C:\repos\stocksharp_stocksharp\Algo\Import\FieldMappingRegistry.cs,CreateFields,The length of the statement  "						fields.Add(new FieldMapping<ExecutionMessage' string>(GetBoardCodeField(nameof(ExecutionMessage.SecurityId))' LocalizedStrings.Board' boardCodeDescr' SetBoardCode) { IsRequired = true }); " is 187.
Long Statement,StockSharp.Algo.Import,FieldMappingRegistry,C:\repos\stocksharp_stocksharp\Algo\Import\FieldMappingRegistry.cs,CreateFields,The length of the statement  "						fields.Add(new FieldMapping<ExecutionMessage' long>(nameof(ExecutionMessage.OrderId)' LocalizedStrings.Id' LocalizedStrings.OrderId' (i' v) => i.OrderId = v) { IsRequired = true }); " is 181.
Long Statement,StockSharp.Algo.Import,FieldMappingRegistry,C:\repos\stocksharp_stocksharp\Algo\Import\FieldMappingRegistry.cs,CreateFields,The length of the statement  "						fields.Add(new FieldMapping<ExecutionMessage' DateTimeOffset>(GetDateField(nameof(ExecutionMessage.ServerTime))' LocalizedStrings.Date' dateDescr' (i' v) => i.ServerTime = v + i.ServerTime.TimeOfDay) { IsRequired = true }); " is 223.
Long Statement,StockSharp.Algo.Import,FieldMappingRegistry,C:\repos\stocksharp_stocksharp\Algo\Import\FieldMappingRegistry.cs,CreateFields,The length of the statement  "						fields.Add(new FieldMapping<ExecutionMessage' TimeSpan>(GetTimeOfDayField(nameof(ExecutionMessage.ServerTime))' LocalizedStrings.Time' timeDescr' (i' v) => i.ServerTime += v)); " is 176.
Long Statement,StockSharp.Algo.Import,FieldMappingRegistry,C:\repos\stocksharp_stocksharp\Algo\Import\FieldMappingRegistry.cs,CreateFields,The length of the statement  "						fields.Add(new FieldMapping<ExecutionMessage' decimal>(nameof(ExecutionMessage.OrderPrice)' LocalizedStrings.Price' LocalizedStrings.OrderPrice' (i' v) => i.OrderPrice = v) { IsRequired = true }); " is 196.
Long Statement,StockSharp.Algo.Import,FieldMappingRegistry,C:\repos\stocksharp_stocksharp\Algo\Import\FieldMappingRegistry.cs,CreateFields,The length of the statement  "						fields.Add(new FieldMapping<ExecutionMessage' decimal>(nameof(ExecutionMessage.OrderVolume)' LocalizedStrings.Volume' LocalizedStrings.OrderVolume' (i' v) => i.OrderVolume = v) { IsRequired = true }); " is 200.
Long Statement,StockSharp.Algo.Import,FieldMappingRegistry,C:\repos\stocksharp_stocksharp\Algo\Import\FieldMappingRegistry.cs,CreateFields,The length of the statement  "						fields.Add(new FieldMapping<ExecutionMessage' Sides>(nameof(ExecutionMessage.Side)' LocalizedStrings.Str128' LocalizedStrings.Str129' (i' v) => i.Side = v) { IsRequired = true }); " is 179.
Long Statement,StockSharp.Algo.Import,FieldMappingRegistry,C:\repos\stocksharp_stocksharp\Algo\Import\FieldMappingRegistry.cs,CreateFields,The length of the statement  "						fields.Add(new FieldMapping<ExecutionMessage' bool>(nameof(ExecutionMessage.IsSystem)' LocalizedStrings.Str342' LocalizedStrings.Str140' (i' v) => i.IsSystem = v)); " is 164.
Long Statement,StockSharp.Algo.Import,FieldMappingRegistry,C:\repos\stocksharp_stocksharp\Algo\Import\FieldMappingRegistry.cs,CreateFields,The length of the statement  "						fields.Add(new FieldMapping<ExecutionMessage' OrderStates>(nameof(ExecutionMessage.OrderState)' LocalizedStrings.Str722' LocalizedStrings.Str134' (i' v) => i.OrderState = v) { IsRequired = true }); " is 197.
Long Statement,StockSharp.Algo.Import,FieldMappingRegistry,C:\repos\stocksharp_stocksharp\Algo\Import\FieldMappingRegistry.cs,CreateFields,The length of the statement  "						fields.Add(new FieldMapping<ExecutionMessage' TimeInForce>(nameof(ExecutionMessage.TimeInForce)' LocalizedStrings.TimeInForce' LocalizedStrings.Str144Key' (i' v) => i.TimeInForce = v) { IsRequired = false }); " is 208.
Long Statement,StockSharp.Algo.Import,FieldMappingRegistry,C:\repos\stocksharp_stocksharp\Algo\Import\FieldMappingRegistry.cs,CreateFields,The length of the statement  "						fields.Add(new FieldMapping<ExecutionMessage' long>(nameof(ExecutionMessage.TradeId)' LocalizedStrings.Str723' LocalizedStrings.Str145' (i' v) => i.TradeId = v) { IsRequired = true }); " is 184.
Long Statement,StockSharp.Algo.Import,FieldMappingRegistry,C:\repos\stocksharp_stocksharp\Algo\Import\FieldMappingRegistry.cs,CreateFields,The length of the statement  "						fields.Add(new FieldMapping<ExecutionMessage' decimal>(nameof(ExecutionMessage.TradePrice)' LocalizedStrings.Str724' LocalizedStrings.Str147' (i' v) => i.TradePrice = v) { IsRequired = true }); " is 193.
Long Statement,StockSharp.Algo.Import,FieldMappingRegistry,C:\repos\stocksharp_stocksharp\Algo\Import\FieldMappingRegistry.cs,CreateFields,The length of the statement  "						fields.Add(new FieldMapping<ExecutionMessage' decimal>(nameof(ExecutionMessage.OpenInterest)' LocalizedStrings.Str150' LocalizedStrings.Str151' (i' v) => i.OpenInterest = v)); " is 175.
Long Statement,StockSharp.Algo.Import,FieldMappingRegistry,C:\repos\stocksharp_stocksharp\Algo\Import\FieldMappingRegistry.cs,CreateFields,The length of the statement  "						fields.Add(new FieldMapping<ExecutionMessage' string>(GetSecurityCodeField(nameof(ExecutionMessage.SecurityId))' LocalizedStrings.Security' secCodeDescr' SetSecCode) { IsRequired = true }); " is 189.
Long Statement,StockSharp.Algo.Import,FieldMappingRegistry,C:\repos\stocksharp_stocksharp\Algo\Import\FieldMappingRegistry.cs,CreateFields,The length of the statement  "						fields.Add(new FieldMapping<ExecutionMessage' string>(GetBoardCodeField(nameof(ExecutionMessage.SecurityId))' LocalizedStrings.Board' boardCodeDescr' SetBoardCode) { IsRequired = true }); " is 187.
Long Statement,StockSharp.Algo.Import,FieldMappingRegistry,C:\repos\stocksharp_stocksharp\Algo\Import\FieldMappingRegistry.cs,CreateFields,The length of the statement  "						fields.Add(new FieldMapping<ExecutionMessage' DateTimeOffset>(GetDateField(nameof(ExecutionMessage.ServerTime))' LocalizedStrings.Date' dateDescr' (i' v) => i.ServerTime = v + i.ServerTime.TimeOfDay) { IsRequired = true }); " is 223.
Long Statement,StockSharp.Algo.Import,FieldMappingRegistry,C:\repos\stocksharp_stocksharp\Algo\Import\FieldMappingRegistry.cs,CreateFields,The length of the statement  "						fields.Add(new FieldMapping<ExecutionMessage' TimeSpan>(GetTimeOfDayField(nameof(ExecutionMessage.ServerTime))' LocalizedStrings.Time' timeDescr' (i' v) => i.ServerTime += v)); " is 176.
Long Statement,StockSharp.Algo.Import,FieldMappingRegistry,C:\repos\stocksharp_stocksharp\Algo\Import\FieldMappingRegistry.cs,CreateFields,The length of the statement  "						fields.Add(new FieldMapping<ExecutionMessage' string>(nameof(ExecutionMessage.PortfolioName)' LocalizedStrings.Portfolio' LocalizedStrings.PortfolioName' (i' v) => i.PortfolioName = v) { IsRequired = true }); " is 208.
Long Statement,StockSharp.Algo.Import,FieldMappingRegistry,C:\repos\stocksharp_stocksharp\Algo\Import\FieldMappingRegistry.cs,CreateFields,The length of the statement  "						fields.Add(new FieldMapping<ExecutionMessage' long>(nameof(ExecutionMessage.TransactionId)' LocalizedStrings.TransactionId' LocalizedStrings.TransactionId' (i' v) => i.TransactionId = v)); " is 188.
Long Statement,StockSharp.Algo.Import,FieldMappingRegistry,C:\repos\stocksharp_stocksharp\Algo\Import\FieldMappingRegistry.cs,CreateFields,The length of the statement  "						fields.Add(new FieldMapping<ExecutionMessage' long>(nameof(ExecutionMessage.OrderId)' LocalizedStrings.Id' LocalizedStrings.OrderId' (i' v) => i.OrderId = v)); " is 159.
Long Statement,StockSharp.Algo.Import,FieldMappingRegistry,C:\repos\stocksharp_stocksharp\Algo\Import\FieldMappingRegistry.cs,CreateFields,The length of the statement  "						fields.Add(new FieldMapping<ExecutionMessage' decimal>(nameof(ExecutionMessage.OrderPrice)' LocalizedStrings.Price' LocalizedStrings.OrderPrice' (i' v) => { i.OrderPrice = v; i.HasOrderInfo = true; }) { IsRequired = true }); " is 224.
Long Statement,StockSharp.Algo.Import,FieldMappingRegistry,C:\repos\stocksharp_stocksharp\Algo\Import\FieldMappingRegistry.cs,CreateFields,The length of the statement  "						fields.Add(new FieldMapping<ExecutionMessage' decimal>(nameof(ExecutionMessage.OrderVolume)' LocalizedStrings.Volume' LocalizedStrings.OrderVolume' (i' v) => i.OrderVolume = v) { IsRequired = true }); " is 200.
Long Statement,StockSharp.Algo.Import,FieldMappingRegistry,C:\repos\stocksharp_stocksharp\Algo\Import\FieldMappingRegistry.cs,CreateFields,The length of the statement  "						fields.Add(new FieldMapping<ExecutionMessage' decimal>(nameof(ExecutionMessage.Balance)' LocalizedStrings.Str1325' LocalizedStrings.Str131' (i' v) => i.Balance = v) { IsRequired = true }); " is 188.
Long Statement,StockSharp.Algo.Import,FieldMappingRegistry,C:\repos\stocksharp_stocksharp\Algo\Import\FieldMappingRegistry.cs,CreateFields,The length of the statement  "						fields.Add(new FieldMapping<ExecutionMessage' Sides>(nameof(ExecutionMessage.Side)' LocalizedStrings.Str329' LocalizedStrings.Str129' (i' v) => i.Side = v)); " is 157.
Long Statement,StockSharp.Algo.Import,FieldMappingRegistry,C:\repos\stocksharp_stocksharp\Algo\Import\FieldMappingRegistry.cs,CreateFields,The length of the statement  "						fields.Add(new FieldMapping<ExecutionMessage' OrderTypes>(nameof(ExecutionMessage.OrderType)' LocalizedStrings.Str132' LocalizedStrings.Str133' (i' v) => i.OrderType = v) { IsRequired = true }); " is 194.
Long Statement,StockSharp.Algo.Import,FieldMappingRegistry,C:\repos\stocksharp_stocksharp\Algo\Import\FieldMappingRegistry.cs,CreateFields,The length of the statement  "						fields.Add(new FieldMapping<ExecutionMessage' OrderStates>(nameof(ExecutionMessage.OrderState)' LocalizedStrings.State' LocalizedStrings.Str134' (i' v) => i.OrderState = v) { IsRequired = true }); " is 196.
Long Statement,StockSharp.Algo.Import,FieldMappingRegistry,C:\repos\stocksharp_stocksharp\Algo\Import\FieldMappingRegistry.cs,CreateFields,The length of the statement  "						fields.Add(new FieldMapping<ExecutionMessage' TimeInForce>(nameof(ExecutionMessage.TimeInForce)' LocalizedStrings.TimeInForce' LocalizedStrings.Str144Key' (i' v) => i.TimeInForce = v) { IsRequired = false }); " is 208.
Long Statement,StockSharp.Algo.Import,FieldMappingRegistry,C:\repos\stocksharp_stocksharp\Algo\Import\FieldMappingRegistry.cs,CreateFields,The length of the statement  "						fields.Add(new FieldMapping<ExecutionMessage' long>(nameof(ExecutionMessage.TradeId)' LocalizedStrings.Str723' LocalizedStrings.Str145' (i' v) => i.TradeId = v) { IsRequired = true }); " is 184.
Long Statement,StockSharp.Algo.Import,FieldMappingRegistry,C:\repos\stocksharp_stocksharp\Algo\Import\FieldMappingRegistry.cs,CreateFields,The length of the statement  "						fields.Add(new FieldMapping<ExecutionMessage' decimal>(nameof(ExecutionMessage.TradePrice)' LocalizedStrings.Str724' LocalizedStrings.Str147' (i' v) => { i.TradePrice = v; i.HasTradeInfo = true; }) { IsRequired = true }); " is 221.
Long Statement,StockSharp.Algo.Import,FieldMappingRegistry,C:\repos\stocksharp_stocksharp\Algo\Import\FieldMappingRegistry.cs,CreateFields,The length of the statement  "				fields.Add(new FieldMapping<CandleMessage' string>(GetSecurityCodeField(nameof(CandleMessage.SecurityId))' LocalizedStrings.Security' secCodeDescr' SetSecCode) { IsRequired = true }); " is 183.
Long Statement,StockSharp.Algo.Import,FieldMappingRegistry,C:\repos\stocksharp_stocksharp\Algo\Import\FieldMappingRegistry.cs,CreateFields,The length of the statement  "				fields.Add(new FieldMapping<CandleMessage' string>(GetBoardCodeField(nameof(CandleMessage.SecurityId))' LocalizedStrings.Board' boardCodeDescr' SetBoardCode) { IsRequired = true }); " is 181.
Long Statement,StockSharp.Algo.Import,FieldMappingRegistry,C:\repos\stocksharp_stocksharp\Algo\Import\FieldMappingRegistry.cs,CreateFields,The length of the statement  "				fields.Add(new FieldMapping<CandleMessage' DateTimeOffset>(GetDateField(nameof(CandleMessage.OpenTime))' LocalizedStrings.Date' dateDescr' (i' v) => " is 148.
Long Statement,StockSharp.Algo.Import,FieldMappingRegistry,C:\repos\stocksharp_stocksharp\Algo\Import\FieldMappingRegistry.cs,CreateFields,The length of the statement  "				fields.Add(new FieldMapping<CandleMessage' TimeSpan>(GetTimeOfDayField(nameof(CandleMessage.OpenTime))' LocalizedStrings.Str2860' LocalizedStrings.CandleOpenTime' (i' v) => i.OpenTime += v)); " is 191.
Long Statement,StockSharp.Algo.Import,FieldMappingRegistry,C:\repos\stocksharp_stocksharp\Algo\Import\FieldMappingRegistry.cs,CreateFields,The length of the statement  "				fields.Add(new FieldMapping<CandleMessage' TimeSpan>(nameof(CandleMessage.CloseTime)' LocalizedStrings.Str2861' LocalizedStrings.CandleCloseTime' (i' v) => i.CloseTime += v)); " is 175.
Long Statement,StockSharp.Algo.Import,FieldMappingRegistry,C:\repos\stocksharp_stocksharp\Algo\Import\FieldMappingRegistry.cs,CreateFields,The length of the statement  "				fields.Add(new FieldMapping<CandleMessage' decimal>(nameof(CandleMessage.OpenInterest)' LocalizedStrings.Str150' string.Empty' (i' v) => i.OpenInterest = v)); " is 158.
Long Statement,StockSharp.Algo.Import,FieldMappingRegistry,C:\repos\stocksharp_stocksharp\Algo\Import\FieldMappingRegistry.cs,CreateFields,The length of the statement  "				fields.Add(new FieldMapping<CandleMessage' decimal>(nameof(CandleMessage.OpenPrice)' "O"' LocalizedStrings.Str80' (i' v) => i.OpenPrice = v) { IsRequired = true }); " is 164.
Long Statement,StockSharp.Algo.Import,FieldMappingRegistry,C:\repos\stocksharp_stocksharp\Algo\Import\FieldMappingRegistry.cs,CreateFields,The length of the statement  "				fields.Add(new FieldMapping<CandleMessage' decimal>(nameof(CandleMessage.HighPrice)' "H"' LocalizedStrings.Str82' (i' v) => i.HighPrice = v) { IsRequired = true }); " is 164.
Long Statement,StockSharp.Algo.Import,FieldMappingRegistry,C:\repos\stocksharp_stocksharp\Algo\Import\FieldMappingRegistry.cs,CreateFields,The length of the statement  "				fields.Add(new FieldMapping<CandleMessage' decimal>(nameof(CandleMessage.LowPrice)' "L"' LocalizedStrings.Str84' (i' v) => i.LowPrice = v) { IsRequired = true }); " is 162.
Long Statement,StockSharp.Algo.Import,FieldMappingRegistry,C:\repos\stocksharp_stocksharp\Algo\Import\FieldMappingRegistry.cs,CreateFields,The length of the statement  "				fields.Add(new FieldMapping<CandleMessage' decimal>(nameof(CandleMessage.ClosePrice)' "C"' LocalizedStrings.Str86' (i' v) => i.ClosePrice = v) { IsRequired = true }); " is 166.
Long Statement,StockSharp.Algo.Import,FieldMappingRegistry,C:\repos\stocksharp_stocksharp\Algo\Import\FieldMappingRegistry.cs,CreateFields,The length of the statement  "				fields.Add(new FieldMapping<CandleMessage' decimal>(nameof(CandleMessage.TotalVolume)' "V"' LocalizedStrings.TotalCandleVolume' (i' v) => i.TotalVolume = v) { IsRequired = true }); " is 180.
Long Statement,StockSharp.Algo.Import,FieldMappingRegistry,C:\repos\stocksharp_stocksharp\Algo\Import\FieldMappingRegistry.cs,CreateFields,The length of the statement  "				//_allFields.Add(new FieldMapping<CandleMessage>("Arg"' "Οΰπΰμεςπ"' string.Empty' typeof(object)' (i' v) => i.Arg = v) { IsRequired = true }); " is 142.
Long Statement,StockSharp.Algo.Import,FieldMappingRegistry,C:\repos\stocksharp_stocksharp\Algo\Import\FieldMappingRegistry.cs,CreateFields,The length of the statement  "				fields.Add(new FieldMapping<CandleMessage' int>(nameof(CandleMessage.UpTicks)' LocalizedStrings.TickUp' LocalizedStrings.TickUpCount' (i' v) => i.UpTicks = v) { IsRequired = false }); " is 183.
Long Statement,StockSharp.Algo.Import,FieldMappingRegistry,C:\repos\stocksharp_stocksharp\Algo\Import\FieldMappingRegistry.cs,CreateFields,The length of the statement  "				fields.Add(new FieldMapping<CandleMessage' int>(nameof(CandleMessage.DownTicks)' LocalizedStrings.TickDown' LocalizedStrings.TickDownCount' (i' v) => i.DownTicks = v) { IsRequired = false }); " is 191.
Long Statement,StockSharp.Algo.Import,FieldMappingRegistry,C:\repos\stocksharp_stocksharp\Algo\Import\FieldMappingRegistry.cs,CreateFields,The length of the statement  "				fields.Add(new FieldMapping<CandleMessage' int>(nameof(CandleMessage.TotalTicks)' LocalizedStrings.Ticks' LocalizedStrings.TickCount' (i' v) => i.TotalTicks = v) { IsRequired = false }); " is 186.
Long Statement,StockSharp.Algo.Import,FieldMappingRegistry,C:\repos\stocksharp_stocksharp\Algo\Import\FieldMappingRegistry.cs,CreateFields,The length of the statement  "				fields.Add(new FieldMapping<TimeQuoteChange' string>(GetSecurityCodeField(nameof(TimeQuoteChange.SecurityId))' LocalizedStrings.Security' secCodeDescr' SetSecCode) { IsRequired = true }); " is 187.
Long Statement,StockSharp.Algo.Import,FieldMappingRegistry,C:\repos\stocksharp_stocksharp\Algo\Import\FieldMappingRegistry.cs,CreateFields,The length of the statement  "				fields.Add(new FieldMapping<TimeQuoteChange' string>(GetBoardCodeField(nameof(TimeQuoteChange.SecurityId))' LocalizedStrings.Board' boardCodeDescr' SetBoardCode) { IsRequired = true }); " is 185.
Long Statement,StockSharp.Algo.Import,FieldMappingRegistry,C:\repos\stocksharp_stocksharp\Algo\Import\FieldMappingRegistry.cs,CreateFields,The length of the statement  "				fields.Add(new FieldMapping<TimeQuoteChange' DateTimeOffset>(GetDateField(nameof(TimeQuoteChange.ServerTime))' LocalizedStrings.Date' dateDescr' (i' v) => i.ServerTime = v + i.ServerTime.TimeOfDay) { IsRequired = true }); " is 221.
Long Statement,StockSharp.Algo.Import,FieldMappingRegistry,C:\repos\stocksharp_stocksharp\Algo\Import\FieldMappingRegistry.cs,CreateFields,The length of the statement  "				fields.Add(new FieldMapping<TimeQuoteChange' TimeSpan>(GetTimeOfDayField(nameof(TimeQuoteChange.ServerTime))' LocalizedStrings.Time' timeDescr' (i' v) => i.ServerTime += v)); " is 174.
Long Statement,StockSharp.Algo.Import,FieldMappingRegistry,C:\repos\stocksharp_stocksharp\Algo\Import\FieldMappingRegistry.cs,CreateFields,The length of the statement  "				fields.Add(new FieldMapping<TimeQuoteChange' decimal>(nameof(TimeQuoteChange.Price)' LocalizedStrings.Price' LocalizedStrings.Str275' (i' v) => i.Price = v) { IsRequired = true }); " is 180.
Long Statement,StockSharp.Algo.Import,FieldMappingRegistry,C:\repos\stocksharp_stocksharp\Algo\Import\FieldMappingRegistry.cs,CreateFields,The length of the statement  "				fields.Add(new FieldMapping<TimeQuoteChange' decimal>(nameof(TimeQuoteChange.Volume)' LocalizedStrings.Volume' LocalizedStrings.Str276' (i' v) => i.Volume = v) { IsRequired = true }); " is 183.
Long Statement,StockSharp.Algo.Import,FieldMappingRegistry,C:\repos\stocksharp_stocksharp\Algo\Import\FieldMappingRegistry.cs,CreateFields,The length of the statement  "				fields.Add(new FieldMapping<TimeQuoteChange' Sides>(nameof(TimeQuoteChange.Side)' LocalizedStrings.Str128' LocalizedStrings.Str277' (i' v) => i.Side = v) { IsRequired = true }); " is 177.
Long Statement,StockSharp.Algo.Import,FieldMappingRegistry,C:\repos\stocksharp_stocksharp\Algo\Import\FieldMappingRegistry.cs,CreateFields,The length of the statement  "				fields.Add(new FieldMapping<Level1ChangeMessage' string>(GetSecurityCodeField(nameof(Level1ChangeMessage.SecurityId))' LocalizedStrings.Security' secCodeDescr' SetSecCode) { IsRequired = true }); " is 195.
Long Statement,StockSharp.Algo.Import,FieldMappingRegistry,C:\repos\stocksharp_stocksharp\Algo\Import\FieldMappingRegistry.cs,CreateFields,The length of the statement  "				fields.Add(new FieldMapping<Level1ChangeMessage' string>(GetBoardCodeField(nameof(Level1ChangeMessage.SecurityId))' LocalizedStrings.Board' boardCodeDescr' SetBoardCode) { IsRequired = true }); " is 193.
Long Statement,StockSharp.Algo.Import,FieldMappingRegistry,C:\repos\stocksharp_stocksharp\Algo\Import\FieldMappingRegistry.cs,CreateFields,The length of the statement  "				fields.Add(new FieldMapping<Level1ChangeMessage' DateTimeOffset>(GetDateField(nameof(Level1ChangeMessage.ServerTime))' LocalizedStrings.Date' dateDescr' (i' v) => i.ServerTime = v + i.ServerTime.TimeOfDay) { IsRequired = true }); " is 229.
Long Statement,StockSharp.Algo.Import,FieldMappingRegistry,C:\repos\stocksharp_stocksharp\Algo\Import\FieldMappingRegistry.cs,CreateFields,The length of the statement  "				fields.Add(new FieldMapping<Level1ChangeMessage' TimeSpan>(GetTimeOfDayField(nameof(Level1ChangeMessage.ServerTime))' LocalizedStrings.Time' timeDescr' (i' v) => i.ServerTime += v)); " is 182.
Long Statement,StockSharp.Algo.Import,FieldMappingRegistry,C:\repos\stocksharp_stocksharp\Algo\Import\FieldMappingRegistry.cs,CreateFields,The length of the statement  "				fields.Add(new FieldMapping<Level1ChangeMessage' long>(GetChangesField(Level1Fields.LastTradeId)' Level1Fields.LastTradeId.GetDisplayName()' string.Empty' (i' v) => i.Changes.Add(Level1Fields.LastTradeId' v))); " is 210.
Long Statement,StockSharp.Algo.Import,FieldMappingRegistry,C:\repos\stocksharp_stocksharp\Algo\Import\FieldMappingRegistry.cs,CreateFields,The length of the statement  "				fields.Add(new FieldMapping<Level1ChangeMessage' TimeSpan>(GetChangesField(Level1Fields.LastTradeTime)' Level1Fields.LastTradeTime.GetDisplayName()' string.Empty' (i' v) => i.Changes.Add(Level1Fields.LastTradeTime' i.ServerTime - i.ServerTime.TimeOfDay + v))); " is 260.
Long Statement,StockSharp.Algo.Import,FieldMappingRegistry,C:\repos\stocksharp_stocksharp\Algo\Import\FieldMappingRegistry.cs,CreateFields,The length of the statement  "				fields.Add(new FieldMapping<Level1ChangeMessage' TimeSpan>(GetChangesField(Level1Fields.BestBidTime)' Level1Fields.BestBidTime.GetDisplayName()' string.Empty' (i' v) => i.Changes.Add(Level1Fields.BestBidTime' i.ServerTime - i.ServerTime.TimeOfDay + v))); " is 254.
Long Statement,StockSharp.Algo.Import,FieldMappingRegistry,C:\repos\stocksharp_stocksharp\Algo\Import\FieldMappingRegistry.cs,CreateFields,The length of the statement  "				fields.Add(new FieldMapping<Level1ChangeMessage' TimeSpan>(GetChangesField(Level1Fields.BestAskTime)' Level1Fields.BestAskTime.GetDisplayName()' string.Empty' (i' v) => i.Changes.Add(Level1Fields.BestAskTime' i.ServerTime - i.ServerTime.TimeOfDay + v))); " is 254.
Long Statement,StockSharp.Algo.Import,FieldMappingRegistry,C:\repos\stocksharp_stocksharp\Algo\Import\FieldMappingRegistry.cs,CreateFields,The length of the statement  "				fields.Add(new FieldMapping<Level1ChangeMessage' DateTimeOffset>(GetChangesField(Level1Fields.BuyBackDate)' Level1Fields.BuyBackDate.GetDisplayName()' string.Empty' (i' v) => i.Changes.Add(Level1Fields.BuyBackDate' v))); " is 220.
Long Statement,StockSharp.Algo.Import,FieldMappingRegistry,C:\repos\stocksharp_stocksharp\Algo\Import\FieldMappingRegistry.cs,CreateFields,The length of the statement  "				fields.Add(new FieldMapping<Level1ChangeMessage' int>(GetChangesField(Level1Fields.BidsCount)' Level1Fields.BidsCount.GetDisplayName()' string.Empty' (i' v) => i.Changes.Add(Level1Fields.BidsCount' v))); " is 203.
Long Statement,StockSharp.Algo.Import,FieldMappingRegistry,C:\repos\stocksharp_stocksharp\Algo\Import\FieldMappingRegistry.cs,CreateFields,The length of the statement  "				fields.Add(new FieldMapping<Level1ChangeMessage' int>(GetChangesField(Level1Fields.AsksCount)' Level1Fields.AsksCount.GetDisplayName()' string.Empty' (i' v) => i.Changes.Add(Level1Fields.AsksCount' v))); " is 203.
Long Statement,StockSharp.Algo.Import,FieldMappingRegistry,C:\repos\stocksharp_stocksharp\Algo\Import\FieldMappingRegistry.cs,CreateFields,The length of the statement  "				fields.Add(new FieldMapping<Level1ChangeMessage' int>(GetChangesField(Level1Fields.TradesCount)' Level1Fields.TradesCount.GetDisplayName()' string.Empty' (i' v) => i.Changes.Add(Level1Fields.TradesCount' v))); " is 209.
Long Statement,StockSharp.Algo.Import,FieldMappingRegistry,C:\repos\stocksharp_stocksharp\Algo\Import\FieldMappingRegistry.cs,CreateFields,The length of the statement  "					fields.Add(new FieldMapping<Level1ChangeMessage' decimal>(GetChangesField(field)' field.GetDisplayName()' string.Empty' (i' v) => " is 129.
Long Statement,StockSharp.Algo.Import,FieldMappingRegistry,C:\repos\stocksharp_stocksharp\Algo\Import\FieldMappingRegistry.cs,CreateFields,The length of the statement  "				fields.Add(new FieldMapping<PositionChangeMessage' string>(GetSecurityCodeField(nameof(PositionChangeMessage.SecurityId))' LocalizedStrings.Security' secCodeDescr' SetSecCode) { IsRequired = true }); " is 199.
Long Statement,StockSharp.Algo.Import,FieldMappingRegistry,C:\repos\stocksharp_stocksharp\Algo\Import\FieldMappingRegistry.cs,CreateFields,The length of the statement  "				fields.Add(new FieldMapping<PositionChangeMessage' string>(GetBoardCodeField(nameof(PositionChangeMessage.SecurityId))' LocalizedStrings.Board' boardCodeDescr' SetBoardCode) { IsRequired = true }); " is 197.
Long Statement,StockSharp.Algo.Import,FieldMappingRegistry,C:\repos\stocksharp_stocksharp\Algo\Import\FieldMappingRegistry.cs,CreateFields,The length of the statement  "				fields.Add(new FieldMapping<PositionChangeMessage' DateTimeOffset>(GetDateField(nameof(PositionChangeMessage.ServerTime))' LocalizedStrings.Date' dateDescr' (i' v) => i.ServerTime = v + i.ServerTime.TimeOfDay) { IsRequired = true }); " is 233.
Long Statement,StockSharp.Algo.Import,FieldMappingRegistry,C:\repos\stocksharp_stocksharp\Algo\Import\FieldMappingRegistry.cs,CreateFields,The length of the statement  "				fields.Add(new FieldMapping<PositionChangeMessage' TimeSpan>(GetTimeOfDayField(nameof(PositionChangeMessage.ServerTime))' LocalizedStrings.Time' timeDescr' (i' v) => i.ServerTime += v)); " is 186.
Long Statement,StockSharp.Algo.Import,FieldMappingRegistry,C:\repos\stocksharp_stocksharp\Algo\Import\FieldMappingRegistry.cs,CreateFields,The length of the statement  "				fields.Add(new FieldMapping<PositionChangeMessage' CurrencyTypes>(GetChangesField(PositionChangeTypes.Currency)' PositionChangeTypes.Currency.GetDisplayName()' string.Empty' (i' v) => i.Changes.Add(PositionChangeTypes.Currency' v))); " is 233.
Long Statement,StockSharp.Algo.Import,FieldMappingRegistry,C:\repos\stocksharp_stocksharp\Algo\Import\FieldMappingRegistry.cs,CreateFields,The length of the statement  "				fields.Add(new FieldMapping<PositionChangeMessage' PortfolioStates>(GetChangesField(PositionChangeTypes.State)' PositionChangeTypes.State.GetDisplayName()' string.Empty' (i' v) => i.Changes.Add(PositionChangeTypes.State' v))); " is 226.
Long Statement,StockSharp.Algo.Import,FieldMappingRegistry,C:\repos\stocksharp_stocksharp\Algo\Import\FieldMappingRegistry.cs,CreateFields,The length of the statement  "					fields.Add(new FieldMapping<PositionChangeMessage' decimal>(GetChangesField(type)' type.GetDisplayName()' string.Empty' (i' v) => " is 129.
Long Statement,StockSharp.Algo.Import,FieldMappingRegistry,C:\repos\stocksharp_stocksharp\Algo\Import\FieldMappingRegistry.cs,CreateFields,The length of the statement  "				fields.Add(new FieldMapping<NewsMessage' string>(nameof(NewsMessage.Id)' LocalizedStrings.Id' string.Empty' (i' v) => i.Id = v) { IsRequired = true }); " is 151.
Long Statement,StockSharp.Algo.Import,FieldMappingRegistry,C:\repos\stocksharp_stocksharp\Algo\Import\FieldMappingRegistry.cs,CreateFields,The length of the statement  "				fields.Add(new FieldMapping<NewsMessage' string>(GetSecurityCodeField(nameof(NewsMessage.SecurityId))' LocalizedStrings.Security' secCodeDescr' (i' v) => { i.SecurityId = new SecurityId { SecurityCode = v }; })); " is 212.
Long Statement,StockSharp.Algo.Import,FieldMappingRegistry,C:\repos\stocksharp_stocksharp\Algo\Import\FieldMappingRegistry.cs,CreateFields,The length of the statement  "				fields.Add(new FieldMapping<NewsMessage' string>(GetBoardCodeField(nameof(NewsMessage.SecurityId))' LocalizedStrings.Board' boardCodeDescr' (i' v) => i.BoardCode = v)); " is 168.
Long Statement,StockSharp.Algo.Import,FieldMappingRegistry,C:\repos\stocksharp_stocksharp\Algo\Import\FieldMappingRegistry.cs,CreateFields,The length of the statement  "				fields.Add(new FieldMapping<NewsMessage' DateTimeOffset>(GetDateField(nameof(NewsMessage.ServerTime))' LocalizedStrings.Date' dateDescr' (i' v) => i.ServerTime = v + i.ServerTime.TimeOfDay) { IsRequired = true }); " is 213.
Long Statement,StockSharp.Algo.Import,FieldMappingRegistry,C:\repos\stocksharp_stocksharp\Algo\Import\FieldMappingRegistry.cs,CreateFields,The length of the statement  "				fields.Add(new FieldMapping<NewsMessage' TimeSpan>(GetTimeOfDayField(nameof(NewsMessage.ServerTime))' LocalizedStrings.Time' timeDescr' (i' v) => i.ServerTime += v)); " is 166.
Long Statement,StockSharp.Algo.Import,FieldMappingRegistry,C:\repos\stocksharp_stocksharp\Algo\Import\FieldMappingRegistry.cs,CreateFields,The length of the statement  "				fields.Add(new FieldMapping<NewsMessage' string>(nameof(NewsMessage.Headline)' LocalizedStrings.Str215' LocalizedStrings.Str215' (i' v) => i.Headline = v)); " is 156.
Long Statement,StockSharp.Algo.Import,FieldMappingRegistry,C:\repos\stocksharp_stocksharp\Algo\Import\FieldMappingRegistry.cs,CreateFields,The length of the statement  "				fields.Add(new FieldMapping<NewsMessage' string>(nameof(NewsMessage.Story)' LocalizedStrings.Str217' LocalizedStrings.Str218' (i' v) => i.Story = v)); " is 150.
Long Statement,StockSharp.Algo.Import,FieldMappingRegistry,C:\repos\stocksharp_stocksharp\Algo\Import\FieldMappingRegistry.cs,CreateFields,The length of the statement  "				fields.Add(new FieldMapping<NewsMessage' string>(nameof(NewsMessage.Source)' LocalizedStrings.Str213' LocalizedStrings.Str214' (i' v) => i.Source = v)); " is 152.
Long Statement,StockSharp.Algo.Import,FieldMappingRegistry,C:\repos\stocksharp_stocksharp\Algo\Import\FieldMappingRegistry.cs,CreateFields,The length of the statement  "				fields.Add(new FieldMapping<NewsMessage' string>(nameof(NewsMessage.Url)' LocalizedStrings.Str221' LocalizedStrings.Str222' (i' v) => i.Url = v.To<Uri>())); " is 156.
Long Statement,StockSharp.Algo.Import,FieldMappingRegistry,C:\repos\stocksharp_stocksharp\Algo\Import\FieldMappingRegistry.cs,CreateExtendedFields,The length of the statement  "				.Select(t => (FieldMapping)new FieldMapping<SecurityMessage' object>($"{nameof(SecurityMessage.ExtensionInfo)}[{t.Item1}]"' t.Item1' string.Empty' (s' v) => s.ExtensionInfo[t.Item1] = v' true)) " is 193.
Long Statement,StockSharp.Algo.Indicators,MoneyFlowIndex,C:\repos\stocksharp_stocksharp\Algo\Indicators\MoneyFlowIndex.cs,OnProcess,The length of the statement  "			var positiveFlow = _positiveFlow.Process(input.SetValue(this' typicalPrice > _previousPrice ? moneyFlow : 0.0m)).GetValue<decimal>(); " is 133.
Long Statement,StockSharp.Algo.Indicators,MoneyFlowIndex,C:\repos\stocksharp_stocksharp\Algo\Indicators\MoneyFlowIndex.cs,OnProcess,The length of the statement  "			var negativeFlow = _negativeFlow.Process(input.SetValue(this' typicalPrice < _previousPrice ? moneyFlow : 0.0m)).GetValue<decimal>(); " is 133.
Long Statement,StockSharp.Algo.Indicators,Lowest,C:\repos\stocksharp_stocksharp\Algo\Indicators\Lowest.cs,OnProcess,The length of the statement  "				if (first == lastValue && lastValue != newValue) // удаляется экстремум' для поиска нового значения необходим проход по всему буфферу " is 133.
Long Statement,StockSharp.Algo.Indicators,StandardError,C:\repos\stocksharp_stocksharp\Algo\Indicators\StandardError.cs,OnProcess,The length of the statement  "					return new DecimalIndicatorValue(this' 0); //если всего 2 точки' то прямая проходит через них и стандартная ошибка равна нулю. " is 126.
Long Statement,StockSharp.Algo.Indicators,VerticalHorizontalFilter,C:\repos\stocksharp_stocksharp\Algo\Indicators\VerticalHorizontalFilter.cs,OnProcess,The length of the statement  "				sumValue = _sum.Process(input.SetValue(this' Math.Abs(_previousClosePrice.Value - candle.ClosePrice))).GetValue<decimal>(); " is 123.
Long Statement,StockSharp.Algo.Indicators,CommodityChannelIndex,C:\repos\stocksharp_stocksharp\Algo\Indicators\CommodityChannelIndex.cs,OnProcess,The length of the statement  "				return new DecimalIndicatorValue(this' ((aveP - _mean.Sma.GetCurrentValue()) / (0.015m * meanValue.GetValue<decimal>()))); " is 122.
Long Statement,StockSharp.Algo.Indicators,DiPart,C:\repos\stocksharp_stocksharp\Algo\Indicators\DiPart.cs,OnProcess,The length of the statement  "				var maValue = _movingAverage.Process(new DecimalIndicatorValue(this' GetValue(candle' _lastCandle)) { IsFinal = input.IsFinal }); " is 129.
Long Statement,StockSharp.Algo.Indicators,UltimateOscillator,C:\repos\stocksharp_stocksharp\Algo\Indicators\UltimateOscillator.cs,OnProcess,The length of the statement  "					return new DecimalIndicatorValue(this' _stoProcentov * (_weight4 * average7 + _weight2 * average14 + _weight1 * average28) / (_weight4 + _weight2 + _weight1)); " is 159.
Long Statement,StockSharp.Algo.Indicators,OptimalTracking,C:\repos\stocksharp_stocksharp\Algo\Indicators\OptimalTracking.cs,OnProcess,The length of the statement  "				_alpha = (-_lambda * _lambda + (decimal)Math.Sqrt((double)(_lambda * _lambda * _lambda * _lambda + 16 * _lambda * _lambda))) / 8; " is 129.
Long Statement,StockSharp.Algo.Indicators,ParabolicSar,C:\repos\stocksharp_stocksharp\Algo\Indicators\ParabolicSar.cs,OnProcess,The length of the statement  "				if ((_longPosition && (_candles[_candles.Count - 1].LowPrice < _todaySar || _candles[_candles.Count - 2].LowPrice < _todaySar)) " is 127.
Long Statement,StockSharp.Algo.Indicators,ParabolicSar,C:\repos\stocksharp_stocksharp\Algo\Indicators\ParabolicSar.cs,OnProcess,The length of the statement  "						|| (!_longPosition && (_candles[_candles.Count - 1].HighPrice > _todaySar || _candles[_candles.Count - 2].HighPrice > _todaySar))) " is 130.
Long Statement,StockSharp.Algo.Indicators,ParabolicSar,C:\repos\stocksharp_stocksharp\Algo\Indicators\ParabolicSar.cs,TodaySar,The length of the statement  "				var lowestSar = Math.Min(Math.Min(todaySar' _candles[_candles.Count - 1].LowPrice)' _candles[_candles.Count - 2].LowPrice); " is 123.
Long Statement,StockSharp.Algo.Indicators,ParabolicSar,C:\repos\stocksharp_stocksharp\Algo\Indicators\ParabolicSar.cs,TodaySar,The length of the statement  "				var highestSar = Math.Max(Math.Max(todaySar' _candles[_candles.Count - 1].HighPrice)' _candles[_candles.Count - 2].HighPrice); " is 126.
Long Statement,StockSharp.Algo.Indicators,TripleExponentialMovingAverage,C:\repos\stocksharp_stocksharp\Algo\Indicators\TripleExponentialMovingAverage.cs,OnProcess,The length of the statement  "			return new DecimalIndicatorValue(this' 3 * ema1Value.GetValue<decimal>() - 3 * ema2Value.GetValue<decimal>() + ema3Value.GetValue<decimal>()); " is 142.
Long Statement,StockSharp.Algo.Indicators,Fractals,C:\repos\stocksharp_stocksharp\Algo\Indicators\Fractals.cs,OnProcess,The length of the statement  "				var upValue = isMax ? new ShiftedIndicatorValue(this' shift' new DecimalIndicatorValue(this' centerHighPrice)) : new ShiftedIndicatorValue(this); " is 145.
Long Statement,StockSharp.Algo.Indicators,Fractals,C:\repos\stocksharp_stocksharp\Algo\Indicators\Fractals.cs,OnProcess,The length of the statement  "				var downValue = isMin ? new ShiftedIndicatorValue(this' shift' new DecimalIndicatorValue(this' centerLowPrice)) : new ShiftedIndicatorValue(this); " is 146.
Long Statement,StockSharp.Algo.Indicators,GatorHistogram,C:\repos\stocksharp_stocksharp\Algo\Indicators\GatorHistogram.cs,OnProcess,The length of the statement  "			return new DecimalIndicatorValue(this' (_isNegative ? -1 : 1) * Math.Abs(_line1.GetCurrentValue() - _line2.GetCurrentValue())); " is 127.
Long Statement,StockSharp.Algo.Storages.Binary.Snapshot,TransactionBinarySnapshotSerializer,C:\repos\stocksharp_stocksharp\Algo\Storages\Binary\Snapshot\TransactionBinarySnapshotSerializer.cs,Deserialize,The length of the statement  "				var snapshot = (TransactionSnapshot)Marshal.PtrToStructure(handle.Value.AddrOfPinnedObject()' typeof(TransactionSnapshot)); " is 123.
Long Statement,StockSharp.Algo.Storages.Csv,SecurityCsvList,C:\repos\stocksharp_stocksharp\Algo\Storages\Csv\CsvEntityRegistry.cs,IsChanged,The length of the statement  "				if (!security.ShortName.IsEmpty() && (liteSec.ShortName == null || !liteSec.ShortName.CompareIgnoreCase(security.ShortName))) " is 125.
Long Statement,StockSharp.Algo.Storages.Csv,SecurityCsvList,C:\repos\stocksharp_stocksharp\Algo\Storages\Csv\CsvEntityRegistry.cs,IsChanged,The length of the statement  "				if (!security.UnderlyingSecurityId.IsEmpty() && (liteSec.UnderlyingSecurityId == null || !liteSec.UnderlyingSecurityId.CompareIgnoreCase(security.UnderlyingSecurityId))) " is 169.
Long Statement,StockSharp.Algo.Storages.Csv,Level1CsvSerializer,C:\repos\stocksharp_stocksharp\Algo\Storages\Csv\Level1CsvSerializer.cs,Read,The length of the statement  "							level1.Changes.Add(field' (dtStr.ToDateTime() + reader.ReadString().ToTimeMls()).ToDateTimeOffset(TimeSpan.Parse(reader.ReadString().Remove("+")))); " is 148.
Long Statement,StockSharp.Algo.Storages.Csv,TransactionCsvSerializer,C:\repos\stocksharp_stocksharp\Algo\Storages\Csv\TransactionCsvSerializer.cs,Read,The length of the statement  "				msg.ExpiryDate = (dtStr.ToDateTime() + reader.ReadString().ToTimeMls()).ToDateTimeOffset(TimeSpan.Parse(reader.ReadString().Remove("+"))); " is 138.
Long Statement,StockSharp.Algo.Storages,InMemorySecurityMappingStorage,C:\repos\stocksharp_stocksharp\Algo\Storages\ISecurityMappingStorage.cs,Get,The length of the statement  "				return _mappings.TryGetValue(name)?.Select(p => (SecurityIdMapping)p).ToArray() ?? ArrayHelper.Empty<SecurityIdMapping>(); " is 122.
Long Statement,StockSharp.Algo.Storages,CsvSecurityMappingStorage,C:\repos\stocksharp_stocksharp\Algo\Storages\ISecurityMappingStorage.cs,Get,The length of the statement  "				return _mappings.TryGetValue(name)?.Select(p => (SecurityIdMapping)p).ToArray() ?? ArrayHelper.Empty<SecurityIdMapping>(); " is 122.
Long Statement,StockSharp.Algo.Storages,CsvExtendedInfoStorageItem,C:\repos\stocksharp_stocksharp\Algo\Storages\IExtendedInfoStorage.cs,Write,The length of the statement  "					writer.WriteRow(new[] { typeof(string) }.Concat(_fields.Select(f => f.Item2)).Select(t => Converter.GetAlias(t) ?? t.GetTypeName(false))); " is 138.
Long Statement,StockSharp.Algo.Storages,CsvExtendedInfoStorageItem,C:\repos\stocksharp_stocksharp\Algo\Storages\IExtendedInfoStorage.cs,Write,The length of the statement  "						writer.WriteRow(new[] { pair.Item1.ToStringId() }.Concat(_fields.Select(f => pair.Item2.TryGetValue(f.Item1)?.To<string>()))); " is 126.
Long Statement,StockSharp.Algo.Storages,InMemoryNativeIdStorage,C:\repos\stocksharp_stocksharp\Algo\Storages\INativeIdStorage.cs,Get,The length of the statement  "				return _nativeIds.TryGetValue(name)?.Select(p => Tuple.Create(p.Key' p.Value)).ToArray() ?? ArrayHelper.Empty<Tuple<SecurityId' object>>(); " is 139.
Long Statement,StockSharp.Algo.Storages,CachedBasketMarketDataStorage<T>,C:\repos\stocksharp_stocksharp\Algo\Storages\CachedBasketMarketDataStorage.cs,GetOrderedRanges,The length of the statement  "					orderedRanges[i] = Tuple.Create(orderedRanges[i].Item1' new Range<TimeSpan>(orderedRanges[i].Item2.Min' orderedRanges[i + 1].Item2.Max)); " is 137.
Long Statement,StockSharp.Algo.Storages,SecurityMarketDataDrive,C:\repos\stocksharp_stocksharp\Algo\Storages\ISecurityMarketDataDrive.cs,GetOrderLogStorage,The length of the statement  "			return new OrderLogStorage(this' Security' SecurityId' GetStorageDrive(serializer' ExecutionTypes.OrderLog)' serializer); " is 121.
Long Statement,StockSharp.Algo.Storages,SecurityMarketDataDrive,C:\repos\stocksharp_stocksharp\Algo\Storages\ISecurityMarketDataDrive.cs,GetCandleStorage,The length of the statement  "			return typeof(CandleStorage<'>).Make(candleType' candleType.ToCandleType()).CreateInstance<IMarketDataStorage<CandleMessage>>(Security' SecurityId' arg' GetStorageDrive(serializer' candleType' arg)' serializer); " is 211.
Long Statement,StockSharp.Algo.Storages,SecurityMarketDataDrive,C:\repos\stocksharp_stocksharp\Algo\Storages\ISecurityMarketDataDrive.cs,GetTransactionStorage,The length of the statement  "			return new TransactionStorage(Security' SecurityId' GetStorageDrive(serializer' ExecutionTypes.Transaction)' serializer); " is 121.
Long Statement,StockSharp.Algo.Storages,IndexBuilder<T>,C:\repos\stocksharp_stocksharp\Algo\Storages\IndexSecurityMarketDataStorage.cs,Calculate,The length of the statement  "				throw new ArithmeticException(LocalizedStrings.BuildIndexError.Put(SecurityId' Security.InnerSecurityIds.Zip(values' (s' v) => "{0}: {1}".Put(s' v)).Join("' "))' excp); " is 168.
Long Statement,StockSharp.Algo.Storages,LocalMarketDataDrive,C:\repos\stocksharp_stocksharp\Algo\Storages\LocalMarketDataDrive.cs,GetDataType,The length of the statement  "			var type = "{0}.{1}Message' {2}".Put(typeof(CandleMessage).Namespace' parts[1]' typeof(CandleMessage).Assembly.FullName).To<Type>(); " is 132.
Long Statement,StockSharp.Algo.Storages,StorageMessageAdapter,C:\repos\stocksharp_stocksharp\Algo\Storages\StorageMessageAdapter.cs,LoadMessages,The length of the statement  "						? LoadMessages(GetStorage<ExecutionMessage>(msg.SecurityId' ExecutionTypes.Tick)' from' to' m => SetTransactionId(m' transactionId))  " is 132.
Long Statement,StockSharp.Algo.Storages,StorageMessageAdapter,C:\repos\stocksharp_stocksharp\Algo\Storages\StorageMessageAdapter.cs,LoadMessages,The length of the statement  "					lastTime = LoadMessages(GetStorage<ExecutionMessage>(msg.SecurityId' ExecutionTypes.OrderLog)' from' to' m => SetTransactionId(m' transactionId)); " is 146.
Long Statement,StockSharp.Algo.Storages,StorageMessageAdapter,C:\repos\stocksharp_stocksharp\Algo\Storages\StorageMessageAdapter.cs,LoadMessages,The length of the statement  "					lastTime = LoadMessages(_storageRegistry.GetNewsMessageStorage(Drive' Format)' from' to' m => SetTransactionId(m' transactionId)); " is 130.
Long Statement,StockSharp.Algo.Storages,StorageMessageAdapter,C:\repos\stocksharp_stocksharp\Algo\Storages\StorageMessageAdapter.cs,LoadMessages,The length of the statement  "					lastTime = LoadMessages(GetStorage<TimeFrameCandleMessage>(msg.SecurityId' msg.Arg)' from' to' m => SetTransactionId(m' transactionId)); " is 136.
Long Statement,StockSharp.Algo.Storages,StorageMessageAdapter,C:\repos\stocksharp_stocksharp\Algo\Storages\StorageMessageAdapter.cs,LoadMessages,The length of the statement  "					lastTime = LoadMessages(GetStorage<PnFCandleMessage>(msg.SecurityId' msg.Arg)' from' to' m => SetTransactionId(m' transactionId)); " is 130.
Long Statement,StockSharp.Algo.Storages,StorageMessageAdapter,C:\repos\stocksharp_stocksharp\Algo\Storages\StorageMessageAdapter.cs,LoadMessages,The length of the statement  "					lastTime = LoadMessages(GetStorage<RangeCandleMessage>(msg.SecurityId' msg.Arg)' from' to' m => SetTransactionId(m' transactionId)); " is 132.
Long Statement,StockSharp.Algo.Storages,StorageMessageAdapter,C:\repos\stocksharp_stocksharp\Algo\Storages\StorageMessageAdapter.cs,LoadMessages,The length of the statement  "					lastTime = LoadMessages(GetStorage<RenkoCandleMessage>(msg.SecurityId' msg.Arg)' from' to' m => SetTransactionId(m' transactionId)); " is 132.
Long Statement,StockSharp.Algo.Storages,StorageMessageAdapter,C:\repos\stocksharp_stocksharp\Algo\Storages\StorageMessageAdapter.cs,LoadMessages,The length of the statement  "					lastTime = LoadMessages(GetStorage<TickCandleMessage>(msg.SecurityId' msg.Arg)' from' to' m => SetTransactionId(m' transactionId)); " is 131.
Long Statement,StockSharp.Algo.Storages,StorageMessageAdapter,C:\repos\stocksharp_stocksharp\Algo\Storages\StorageMessageAdapter.cs,LoadMessages,The length of the statement  "					lastTime = LoadMessages(GetStorage<VolumeCandleMessage>(msg.SecurityId' msg.Arg)' from' to' m => SetTransactionId(m' transactionId)); " is 133.
Long Statement,StockSharp.Algo.Storages,StorageMessageAdapter,C:\repos\stocksharp_stocksharp\Algo\Storages\StorageMessageAdapter.cs,GetPosition,The length of the statement  "			var security = !securityId.SecurityCode.IsEmpty() && !securityId.BoardCode.IsEmpty() ? _entityRegistry.Securities.ReadBySecurityId(securityId) : _entityRegistry.Securities.Lookup(new Security " is 191.
Long Statement,StockSharp.Algo.Storages,StorageHelper,C:\repos\stocksharp_stocksharp\Algo\Storages\StorageHelper.cs,GetRange,The length of the statement  "			return new Range<DateTimeOffset>(first' last).Intersect(new Range<DateTimeOffset>((from ?? first).StorageTruncate(timePrecision)' (to ?? last).StorageTruncate(timePrecision))); " is 176.
Long Statement,StockSharp.Algo.Storages,StorageHelper,C:\repos\stocksharp_stocksharp\Algo\Storages\StorageHelper.cs,SynchronizeSecurities,The length of the statement  "			var securities = securityStorage.LookupAll().ToDictionary(s => s.Id' s => s' StringComparer.InvariantCultureIgnoreCase); " is 120.
Long Statement,StockSharp.Algo.Storages,StorageRegistry,C:\repos\stocksharp_stocksharp\Algo\Storages\StorageRegistry.cs,GetCandleStorage,The length of the statement  "			return (IMarketDataStorage<Candle>)GetCandleMessageStorage(candleType.ToCandleMessageType()' security' arg' drive' format); " is 123.
Long Statement,StockSharp.Algo.Storages,StorageRegistry,C:\repos\stocksharp_stocksharp\Algo\Storages\StorageRegistry.cs,GetQuoteMessageStorage,The length of the statement  "			return _depthStorages.SafeAdd(Tuple.Create(securityId' (drive ?? DefaultDrive).GetStorageDrive(securityId' typeof(QuoteChangeMessage)' null' format))' key => " is 157.
Long Statement,StockSharp.Algo.Storages,StorageRegistry,C:\repos\stocksharp_stocksharp\Algo\Storages\StorageRegistry.cs,GetLevel1MessageStorage,The length of the statement  "			return _level1Storages.SafeAdd(Tuple.Create(securityId' (drive ?? DefaultDrive).GetStorageDrive(securityId' typeof(Level1ChangeMessage)' null' format))' key => " is 159.
Long Statement,StockSharp.Algo.Storages,StorageRegistry,C:\repos\stocksharp_stocksharp\Algo\Storages\StorageRegistry.cs,GetLevel1MessageStorage,The length of the statement  "				//	return new AllSecurityMarketDataStorage<Level1ChangeMessage>(security' null' md => md.ServerTime' md => ToSecurity(md.SecurityId)' (s' d) => GetLevel1MessageStorage(s' d' format)' key.Item2' ExchangeInfoProvider); " is 216.
Long Statement,StockSharp.Algo.Storages,StorageRegistry,C:\repos\stocksharp_stocksharp\Algo\Storages\StorageRegistry.cs,GetPositionMessageStorage,The length of the statement  "			return _positionStorages.SafeAdd(Tuple.Create(securityId' (drive ?? DefaultDrive).GetStorageDrive(securityId' typeof(PositionChangeMessage)' null' format))' key => " is 163.
Long Statement,StockSharp.Algo.Storages,StorageRegistry,C:\repos\stocksharp_stocksharp\Algo\Storages\StorageRegistry.cs,GetPositionMessageStorage,The length of the statement  "				//	return new AllSecurityMarketDataStorage<Level1ChangeMessage>(security' null' md => md.ServerTime' md => ToSecurity(md.SecurityId)' (s' d) => GetLevel1MessageStorage(s' d' format)' key.Item2' ExchangeInfoProvider); " is 216.
Long Statement,StockSharp.Algo.Storages,StorageRegistry,C:\repos\stocksharp_stocksharp\Algo\Storages\StorageRegistry.cs,GetCandleMessageStorage,The length of the statement  "			return _candleStorages.SafeAdd(Tuple.Create(securityId' (drive ?? DefaultDrive).GetStorageDrive(securityId' candleMessageType' arg' format))' key => " is 148.
Long Statement,StockSharp.Algo.Storages,StorageRegistry,C:\repos\stocksharp_stocksharp\Algo\Storages\StorageRegistry.cs,GetCandleMessageStorage,The length of the statement  "						serializer = typeof(CandleBinarySerializer<>).Make(candleMessageType).CreateInstance<IMarketDataSerializer>(key.Item1' arg' ExchangeInfoProvider); " is 146.
Long Statement,StockSharp.Algo.Storages,StorageRegistry,C:\repos\stocksharp_stocksharp\Algo\Storages\StorageRegistry.cs,GetCandleMessageStorage,The length of the statement  "						serializer = typeof(CandleCsvSerializer<>).Make(candleMessageType).CreateInstance<IMarketDataSerializer>(key.Item1' arg' null); " is 127.
Long Statement,StockSharp.Algo.Storages,StorageRegistry,C:\repos\stocksharp_stocksharp\Algo\Storages\StorageRegistry.cs,GetCandleMessageStorage,The length of the statement  "				return typeof(CandleStorage<'>).Make(candleMessageType' candleMessageType.ToCandleType()).CreateInstance<IMarketDataStorage<CandleMessage>>(security' key.Item1' arg' key.Item2' serializer); " is 189.
Long Statement,StockSharp.Algo.Storages,StorageRegistry,C:\repos\stocksharp_stocksharp\Algo\Storages\StorageRegistry.cs,GetExecutionMessageStorage,The length of the statement  "			return _executionStorages.SafeAdd(Tuple.Create(securityId' type' (drive ?? DefaultDrive).GetStorageDrive(securityId' typeof(ExecutionMessage)' type' format))' key => " is 165.
Long Statement,StockSharp.Algo.Storages,StorageRegistry,C:\repos\stocksharp_stocksharp\Algo\Storages\StorageRegistry.cs,GetNewsMessageStorage,The length of the statement  "			return _newsStorages.SafeAdd((drive ?? DefaultDrive).GetStorageDrive(securityId' typeof(NewsMessage)' null' format)' key => " is 123.
Long Statement,StockSharp.Algo.Storages,MarketDataStorage<TData;TId>,C:\repos\stocksharp_stocksharp\Algo\Storages\MarketDataStorage.cs,SecurityIdEqual,The length of the statement  "			return securityId.SecurityCode.CompareIgnoreCase(SecurityId.SecurityCode) && securityId.BoardCode.CompareIgnoreCase(SecurityId.BoardCode); " is 138.
Long Statement,StockSharp.Algo.Storages.Binary,PositionBinarySerializer,C:\repos\stocksharp_stocksharp\Algo\Storages\Binary\PositionBinarySerializer.cs,OnSave,The length of the statement  "				metaInfo.LastTime = writer.WriteTime(message.ServerTime' metaInfo.LastTime' "level1"' true' true' metaInfo.ServerOffset' true' true' ref lastOffset); " is 149.
Long Statement,StockSharp.Algo.Storages.Binary,PositionBinarySerializer,C:\repos\stocksharp_stocksharp\Algo\Storages\Binary\PositionBinarySerializer.cs,OnSave,The length of the statement  "					metaInfo.LastLocalTime = writer.WriteTime(message.LocalTime' metaInfo.LastLocalTime' LocalizedStrings.Str919' true' true' metaInfo.LocalOffset' true' true' ref lastOffset); " is 172.
Long Statement,StockSharp.Algo.Storages.Binary,PositionBinarySerializer,C:\repos\stocksharp_stocksharp\Algo\Storages\Binary\PositionBinarySerializer.cs,MoveNext,The length of the statement  "			posMsg.ServerTime = reader.ReadTime(ref prevTime' true' true' metaInfo.GetTimeZone(true' SecurityId' ExchangeInfoProvider)' true' true' ref lastOffset); " is 152.
Long Statement,StockSharp.Algo.Storages.Binary,BinaryMarketDataSerializer<TData;TMetaInfo>,C:\repos\stocksharp_stocksharp\Algo\Storages\Binary\BinaryMarketDataSerializer.cs,Deserialize,The length of the statement  "			return new SimpleEnumerable<TData>(() => new MarketDataEnumerator(this' new BitArrayReader(data)' (TMetaInfo)metaInfo)); " is 120.
Long Statement,StockSharp.Algo.Storages.Binary,BinaryMarketDataSerializer<TData;TMetaInfo>,C:\repos\stocksharp_stocksharp\Algo\Storages\Binary\BinaryMarketDataSerializer.cs,WriteItemLocalTime,The length of the statement  "			metaInfo.LastItemLocalTime = writer.WriteTime(message.LocalTime' metaInfo.LastItemLocalTime' "local time"' true' true' metaInfo.LocalOffset' true' isTickPrecision' ref lastLocalOffset); " is 185.
Long Statement,StockSharp.Algo.Storages.Binary,Level1BinarySerializer,C:\repos\stocksharp_stocksharp\Algo\Storages\Binary\Level1BinarySerializer.cs,OnSave,The length of the statement  "					metaInfo.LastTime = writer.WriteTime(message.ServerTime' metaInfo.LastTime' "level1"' allowNonOrdered' isUtc' metaInfo.ServerOffset' allowDiffOffsets' isTickPrecision' ref lastOffset); " is 184.
Long Statement,StockSharp.Algo.Storages.Binary,Level1BinarySerializer,C:\repos\stocksharp_stocksharp\Algo\Storages\Binary\Level1BinarySerializer.cs,OnSave,The length of the statement  "						metaInfo.LastLocalTime = writer.WriteTime(message.LocalTime' metaInfo.LastLocalTime' LocalizedStrings.Str919' allowNonOrdered' isUtc' metaInfo.LocalOffset' allowDiffOffsets' isTickPrecision' ref lastOffset); " is 207.
Long Statement,StockSharp.Algo.Storages.Binary,Level1BinarySerializer,C:\repos\stocksharp_stocksharp\Algo\Storages\Binary\Level1BinarySerializer.cs,OnSave,The length of the statement  "						metaInfo.LastTime = writer.WriteTime(message.ServerTime' metaInfo.LastTime' "level1"' allowNonOrdered' isUtc' metaInfo.ServerOffset' false' false' ref offset); " is 159.
Long Statement,StockSharp.Algo.Storages.Binary,Level1BinarySerializer,C:\repos\stocksharp_stocksharp\Algo\Storages\Binary\Level1BinarySerializer.cs,OnSave,The length of the statement  "							metaInfo.LastFieldTime = writer.WriteTime(timeValue' metaInfo.LastFieldTime' LocalizedStrings.Str921Params.Put(change.Key)' allowNonOrdered' isUtc' metaInfo.ServerOffset' allowDiffOffsets' isTickPrecision' ref lastOffset); " is 222.
Long Statement,StockSharp.Algo.Storages.Binary,Level1BinarySerializer,C:\repos\stocksharp_stocksharp\Algo\Storages\Binary\Level1BinarySerializer.cs,OnSave,The length of the statement  "							metaInfo.LastBuyBackDateTime = writer.WriteTime(timeValue' metaInfo.LastBuyBackDateTime' LocalizedStrings.Str921Params.Put(change.Key)' allowNonOrdered' isUtc' metaInfo.ServerOffset' allowDiffOffsets' isTickPrecision' ref lastOffset); " is 234.
Long Statement,StockSharp.Algo.Storages.Binary,Level1BinarySerializer,C:\repos\stocksharp_stocksharp\Algo\Storages\Binary\Level1BinarySerializer.cs,MoveNext,The length of the statement  "				l1Msg.ServerTime = reader.ReadTime(ref prevTime' allowNonOrdered' isUtc' metaInfo.GetTimeZone(isUtc' SecurityId' ExchangeInfoProvider)' allowDiffOffsets' isTickPrecision' ref lastOffset); " is 187.
Long Statement,StockSharp.Algo.Storages.Binary,Level1BinarySerializer,C:\repos\stocksharp_stocksharp\Algo\Storages\Binary\Level1BinarySerializer.cs,MoveNext,The length of the statement  "					l1Msg.LocalTime = reader.ReadTime(ref prevTime' allowNonOrdered' isUtc' metaInfo.LocalOffset' allowDiffOffsets' isTickPrecision' ref lastOffset); " is 145.
Long Statement,StockSharp.Algo.Storages.Binary,Level1BinarySerializer,C:\repos\stocksharp_stocksharp\Algo\Storages\Binary\Level1BinarySerializer.cs,MoveNext,The length of the statement  "				l1Msg.ServerTime = reader.ReadTime(ref prevTime' allowNonOrdered' isUtc' metaInfo.LocalOffset' false' false' ref offset); " is 121.
Long Statement,StockSharp.Algo.Storages.Binary,Level1BinarySerializer,C:\repos\stocksharp_stocksharp\Algo\Storages\Binary\Level1BinarySerializer.cs,MoveNext,The length of the statement  "						l1Msg.Add(field' reader.ReadTime(ref prevTime' allowNonOrdered' isUtc' metaInfo.GetTimeZone(isUtc' SecurityId' ExchangeInfoProvider)' allowDiffOffsets' isTickPrecision' ref lastOffset)); " is 186.
Long Statement,StockSharp.Algo.Storages.Binary,Level1BinarySerializer,C:\repos\stocksharp_stocksharp\Algo\Storages\Binary\Level1BinarySerializer.cs,MoveNext,The length of the statement  "						l1Msg.Add(field' metaInfo.Version < MarketDataVersions.Version46 ? (int)reader.ReadVolume(metaInfo) : reader.ReadInt()); " is 120.
Long Statement,StockSharp.Algo.Storages.Binary,Level1BinarySerializer,C:\repos\stocksharp_stocksharp\Algo\Storages\Binary\Level1BinarySerializer.cs,MoveNext,The length of the statement  "						l1Msg.Add(field' reader.ReadTime(ref prevTime' allowNonOrdered' isUtc' metaInfo.GetTimeZone(isUtc' SecurityId' ExchangeInfoProvider)' allowDiffOffsets' isTickPrecision' ref lastOffset)); " is 186.
Long Statement,StockSharp.Algo.Storages.Binary,TransactionBinarySerializer,C:\repos\stocksharp_stocksharp\Algo\Storages\Binary\TransactionBinarySerializer.cs,OnSave,The length of the statement  "					throw new ArgumentOutOfRangeException(nameof(messages)' msg.ExecutionType' LocalizedStrings.Str1695Params.Put(msg.OrderId ?? msg.TradeId)); " is 139.
Long Statement,StockSharp.Algo.Storages.Binary,TransactionBinarySerializer,C:\repos\stocksharp_stocksharp\Algo\Storages\Binary\TransactionBinarySerializer.cs,OnSave,The length of the statement  "					throw new ArgumentOutOfRangeException(nameof(messages)' msg.OrderPrice' LocalizedStrings.Str926Params.Put(msg.OrderId == null ? msg.OrderStringId : msg.OrderId.To<string>())); " is 175.
Long Statement,StockSharp.Algo.Storages.Binary,TransactionBinarySerializer,C:\repos\stocksharp_stocksharp\Algo\Storages\Binary\TransactionBinarySerializer.cs,OnSave,The length of the statement  "				//	throw new ArgumentOutOfRangeException(nameof(messages)' volume' LocalizedStrings.Str927Params.Put(msg.OrderId == null ? msg.OrderStringId : msg.OrderId.To<string>())); " is 170.
Long Statement,StockSharp.Algo.Storages.Binary,TransactionBinarySerializer,C:\repos\stocksharp_stocksharp\Algo\Storages\Binary\TransactionBinarySerializer.cs,OnSave,The length of the statement  "					//	throw new ArgumentOutOfRangeException(nameof(messages)' msg.TradeId' LocalizedStrings.Str928Params.Put(msg.TransactionId)); " is 126.
Long Statement,StockSharp.Algo.Storages.Binary,TransactionBinarySerializer,C:\repos\stocksharp_stocksharp\Algo\Storages\Binary\TransactionBinarySerializer.cs,OnSave,The length of the statement  "						throw new ArgumentOutOfRangeException(nameof(messages)' msg.TradePrice' LocalizedStrings.Str929Params.Put(msg.TradeId' msg.OrderId)); " is 133.
Long Statement,StockSharp.Algo.Storages.Binary,TransactionBinarySerializer,C:\repos\stocksharp_stocksharp\Algo\Storages\Binary\TransactionBinarySerializer.cs,OnSave,The length of the statement  "				metaInfo.LastTime = writer.WriteTime(msg.ServerTime' metaInfo.LastTime' LocalizedStrings.Str930' allowNonOrdered' isUtc' metaInfo.ServerOffset' allowDiffOffsets' isTickPrecision' ref lastOffset); " is 195.
Long Statement,StockSharp.Algo.Storages.Binary,TransactionBinarySerializer,C:\repos\stocksharp_stocksharp\Algo\Storages\Binary\TransactionBinarySerializer.cs,MoveNext,The length of the statement  "			var serverTime = reader.ReadTime(ref prevTime' true' true' metaInfo.GetTimeZone(true' SecurityId' ExchangeInfoProvider)' true' isTickPrecision' ref lastOffset); " is 160.
Long Statement,StockSharp.Algo.Storages.Binary,TransactionBinarySerializer,C:\repos\stocksharp_stocksharp\Algo\Storages\Binary\TransactionBinarySerializer.cs,MoveNext,The length of the statement  "			var expDate = reader.Read() ? reader.ReadLong().To<DateTime>().ApplyTimeZone(new TimeSpan(reader.ReadInt()' reader.ReadInt()' 0)) : (DateTimeOffset?)null; " is 154.
Long Statement,StockSharp.Algo.Storages.Binary,TransactionBinarySerializer,C:\repos\stocksharp_stocksharp\Algo\Storages\Binary\TransactionBinarySerializer.cs,MoveNext,The length of the statement  "			var commission = reader.Read() ? metaInfo.FirstCommission = reader.ReadDecimal(metaInfo.FirstCommission) : (decimal?)null; " is 122.
Long Statement,StockSharp.Algo.Storages.Binary,NewsBinarySerializer,C:\repos\stocksharp_stocksharp\Algo\Storages\Binary\NewsBinarySerializer.cs,OnSave,The length of the statement  "				metaInfo.LastTime = writer.WriteTime(news.ServerTime' metaInfo.LastTime' LocalizedStrings.News' true' true' metaInfo.ServerOffset' allowDiffOffsets' isTickPrecision' ref lastOffset); " is 182.
Long Statement,StockSharp.Algo.Storages.Binary,NewsBinarySerializer,C:\repos\stocksharp_stocksharp\Algo\Storages\Binary\NewsBinarySerializer.cs,MoveNext,The length of the statement  "			message.ServerTime = reader.ReadTime(ref prevTime' true' true' metaInfo.ServerOffset' allowDiffOffsets' isTickPrecision' ref lastOffset); " is 137.
Long Statement,StockSharp.Algo.Storages.Binary,QuoteBinarySerializer,C:\repos\stocksharp_stocksharp\Algo\Storages\Binary\QuoteBinarySerializer.cs,OnSave,The length of the statement  "				//	throw new ArgumentException(LocalizedStrings.Str932Params.Put(bid.Price' ask.Price' quoteMsg.ServerTime)' nameof(messages)); " is 127.
Long Statement,StockSharp.Algo.Storages.Binary,QuoteBinarySerializer,C:\repos\stocksharp_stocksharp\Algo\Storages\Binary\QuoteBinarySerializer.cs,OnSave,The length of the statement  "				metaInfo.LastTime = writer.WriteTime(quoteMsg.ServerTime' metaInfo.LastTime' LocalizedStrings.MarketDepth' allowNonOrdered' isUtc' metaInfo.ServerOffset' allowDiffOffsets' isTickPrecision' ref lastOffset); " is 205.
Long Statement,StockSharp.Algo.Storages.Binary,QuoteBinarySerializer,C:\repos\stocksharp_stocksharp\Algo\Storages\Binary\QuoteBinarySerializer.cs,OnSave,The length of the statement  "						metaInfo.LastLocalTime = writer.WriteTime(quoteMsg.LocalTime' metaInfo.LastLocalTime' LocalizedStrings.Str934' allowNonOrdered' isUtc' metaInfo.LocalOffset' allowDiffOffsets' isTickPrecision' ref lastOffset); " is 208.
Long Statement,StockSharp.Algo.Storages.Binary,QuoteBinarySerializer,C:\repos\stocksharp_stocksharp\Algo\Storages\Binary\QuoteBinarySerializer.cs,MoveNext,The length of the statement  "			var serverTime = reader.ReadTime(ref prevTime' allowNonOrdered' isUtc' metaInfo.GetTimeZone(isUtc' SecurityId' ExchangeInfoProvider)' allowDiffOffsets' isTickPrecision' ref lastOffset); " is 185.
Long Statement,StockSharp.Algo.Storages.Binary,QuoteBinarySerializer,C:\repos\stocksharp_stocksharp\Algo\Storages\Binary\QuoteBinarySerializer.cs,MoveNext,The length of the statement  "			//	throw new InvalidOperationException("Лучший бид {0} больше или равен лучшему офферу {1}.".Put(depth.BestBid.Price' depth.BestAsk.Price)); " is 140.
Long Statement,StockSharp.Algo.Storages.Binary,QuoteBinarySerializer,C:\repos\stocksharp_stocksharp\Algo\Storages\Binary\QuoteBinarySerializer.cs,MoveNext,The length of the statement  "					var localTime = reader.ReadTime(ref prevLocalTime' allowNonOrdered' isUtc' metaInfo.LocalOffset' allowDiffOffsets' isTickPrecision' ref lastOffset); " is 148.
Long Statement,StockSharp.Algo.Storages.Binary,CandleBinarySerializer<TCandleMessage>,C:\repos\stocksharp_stocksharp\Algo\Storages\Binary\CandleBinarySerializer.cs,OnSave,The length of the statement  "				metaInfo.LastTime = writer.WriteTime(candle.OpenTime' metaInfo.LastTime' LocalizedStrings.Str998' allowNonOrdered' isUtc' metaInfo.ServerOffset' allowDiffOffsets' isTickPrecision' ref lastOffset); " is 196.
Long Statement,StockSharp.Algo.Storages.Binary,CandleBinarySerializer<TCandleMessage>,C:\repos\stocksharp_stocksharp\Algo\Storages\Binary\CandleBinarySerializer.cs,OnSave,The length of the statement  "						metaInfo.LastTime = writer.WriteTime(first' metaInfo.LastTime' LocalizedStrings.Str999' allowNonOrdered' isUtc' metaInfo.ServerOffset' allowDiffOffsets' isTickPrecision' ref lastOffset' bigRange); " is 196.
Long Statement,StockSharp.Algo.Storages.Binary,CandleBinarySerializer<TCandleMessage>,C:\repos\stocksharp_stocksharp\Algo\Storages\Binary\CandleBinarySerializer.cs,OnSave,The length of the statement  "						metaInfo.LastTime = writer.WriteTime(second' metaInfo.LastTime' LocalizedStrings.Str1000' allowNonOrdered' isUtc' metaInfo.ServerOffset' allowDiffOffsets' isTickPrecision' ref lastOffset' bigRange); " is 198.
Long Statement,StockSharp.Algo.Storages.Binary,CandleBinarySerializer<TCandleMessage>,C:\repos\stocksharp_stocksharp\Algo\Storages\Binary\CandleBinarySerializer.cs,OnSave,The length of the statement  "						metaInfo.LastTime = writer.WriteTime(candle.CloseTime' metaInfo.LastTime' LocalizedStrings.Str1001' allowNonOrdered' isUtc' metaInfo.ServerOffset' allowDiffOffsets' isTickPrecision' ref lastOffset' bigRange); " is 208.
Long Statement,StockSharp.Algo.Storages.Binary,CandleBinarySerializer<TCandleMessage>,C:\repos\stocksharp_stocksharp\Algo\Storages\Binary\CandleBinarySerializer.cs,OnSave,The length of the statement  "					var time = writer.WriteTime(candle.CloseTime' metaInfo.LastTime' LocalizedStrings.Str1001' allowNonOrdered' isUtc' metaInfo.ServerOffset' allowDiffOffsets' false' ref lastOffset); " is 179.
Long Statement,StockSharp.Algo.Storages.Binary,CandleBinarySerializer<TCandleMessage>,C:\repos\stocksharp_stocksharp\Algo\Storages\Binary\CandleBinarySerializer.cs,MoveNext,The length of the statement  "				RelativeVolume = metaInfo.Version < MarketDataVersions.Version52 || !reader.Read() ? (decimal?)null : reader.ReadVolume(metaInfo)' " is 130.
Long Statement,StockSharp.Algo.Storages.Binary,CandleBinarySerializer<TCandleMessage>,C:\repos\stocksharp_stocksharp\Algo\Storages\Binary\CandleBinarySerializer.cs,MoveNext,The length of the statement  "			candle.OpenTime = reader.ReadTime(ref prevTime' allowNonOrdered' isUtc' timeZone' allowDiffOffsets' isTickPrecision' ref lastOffset); " is 133.
Long Statement,StockSharp.Algo.Storages.Binary,CandleBinarySerializer<TCandleMessage>,C:\repos\stocksharp_stocksharp\Algo\Storages\Binary\CandleBinarySerializer.cs,MoveNext,The length of the statement  "					var first = reader.ReadTime(ref prevTime' allowNonOrdered' isUtc' timeZone' allowDiffOffsets' isTickPrecision' ref lastOffset' bigRange); " is 137.
Long Statement,StockSharp.Algo.Storages.Binary,CandleBinarySerializer<TCandleMessage>,C:\repos\stocksharp_stocksharp\Algo\Storages\Binary\CandleBinarySerializer.cs,MoveNext,The length of the statement  "					var second = reader.ReadTime(ref prevTime' allowNonOrdered' isUtc' timeZone' allowDiffOffsets' isTickPrecision' ref lastOffset' bigRange); " is 138.
Long Statement,StockSharp.Algo.Storages.Binary,CandleBinarySerializer<TCandleMessage>,C:\repos\stocksharp_stocksharp\Algo\Storages\Binary\CandleBinarySerializer.cs,MoveNext,The length of the statement  "						candle.HighTime = reader.ReadTime(ref prevTime' allowNonOrdered' isUtc' timeZone' allowDiffOffsets' isTickPrecision' ref lastOffset' bigRange); " is 143.
Long Statement,StockSharp.Algo.Storages.Binary,CandleBinarySerializer<TCandleMessage>,C:\repos\stocksharp_stocksharp\Algo\Storages\Binary\CandleBinarySerializer.cs,MoveNext,The length of the statement  "						candle.LowTime = reader.ReadTime(ref prevTime' allowNonOrdered' isUtc' timeZone' allowDiffOffsets' isTickPrecision' ref lastOffset' bigRange); " is 142.
Long Statement,StockSharp.Algo.Storages.Binary,CandleBinarySerializer<TCandleMessage>,C:\repos\stocksharp_stocksharp\Algo\Storages\Binary\CandleBinarySerializer.cs,MoveNext,The length of the statement  "					candle.CloseTime = reader.ReadTime(ref prevTime' allowNonOrdered' isUtc' timeZone' allowDiffOffsets' isTickPrecision' ref lastOffset' bigRange); " is 144.
Long Statement,StockSharp.Algo.Storages.Binary,CandleBinarySerializer<TCandleMessage>,C:\repos\stocksharp_stocksharp\Algo\Storages\Binary\CandleBinarySerializer.cs,MoveNext,The length of the statement  "				candle.CloseTime = reader.ReadTime(ref prevTime' allowNonOrdered' isUtc' metaInfo.LocalOffset' allowDiffOffsets' false' ref lastOffset); " is 136.
Long Statement,StockSharp.Algo.Storages.Binary,OrderLogBinarySerializer,C:\repos\stocksharp_stocksharp\Algo\Storages\Binary\OrderLogBinarySerializer.cs,OnSave,The length of the statement  "					throw new ArgumentOutOfRangeException(nameof(messages)' message.ExecutionType' LocalizedStrings.Str1695Params.Put(orderId)); " is 124.
Long Statement,StockSharp.Algo.Storages.Binary,OrderLogBinarySerializer,C:\repos\stocksharp_stocksharp\Algo\Storages\Binary\OrderLogBinarySerializer.cs,OnSave,The length of the statement  "				//	throw new ArgumentOutOfRangeException(nameof(messages)' item.Price' LocalizedStrings.Str926Params.Put(item.OrderId)); " is 120.
Long Statement,StockSharp.Algo.Storages.Binary,OrderLogBinarySerializer,C:\repos\stocksharp_stocksharp\Algo\Storages\Binary\OrderLogBinarySerializer.cs,OnSave,The length of the statement  "					//	throw new ArgumentOutOfRangeException(nameof(messages)' item.TradePrice' LocalizedStrings.Str929Params.Put(item.TradeId' item.OrderId)); " is 139.
Long Statement,StockSharp.Algo.Storages.Binary,OrderLogBinarySerializer,C:\repos\stocksharp_stocksharp\Algo\Storages\Binary\OrderLogBinarySerializer.cs,OnSave,The length of the statement  "				metaInfo.LastTime = writer.WriteTime(message.ServerTime' metaInfo.LastTime' LocalizedStrings.Str1013' allowNonOrdered' isUtc' metaInfo.ServerOffset' allowDiffOffsets' isTickPrecision' ref lastOffset); " is 200.
Long Statement,StockSharp.Algo.Storages.Binary,OrderLogBinarySerializer,C:\repos\stocksharp_stocksharp\Algo\Storages\Binary\OrderLogBinarySerializer.cs,MoveNext,The length of the statement  "			var serverTime = reader.ReadTime(ref prevTime' allowNonOrdered' isUtc' metaInfo.GetTimeZone(isUtc' SecurityId' ExchangeInfoProvider)' allowDiffOffsets' isTickPrecision' ref lastOffset); " is 185.
Long Statement,StockSharp.Algo.Storages.Binary,TickBinarySerializer,C:\repos\stocksharp_stocksharp\Algo\Storages\Binary\TickBinarySerializer.cs,OnSave,The length of the statement  "					throw new ArgumentOutOfRangeException(nameof(messages)' msg.ExecutionType' LocalizedStrings.Str1695Params.Put(msg.TradeId)); " is 124.
Long Statement,StockSharp.Algo.Storages.Binary,TickBinarySerializer,C:\repos\stocksharp_stocksharp\Algo\Storages\Binary\TickBinarySerializer.cs,OnSave,The length of the statement  "				//	throw new ArgumentOutOfRangeException(nameof(messages)' msg.TradePrice' LocalizedStrings.Str1021Params.Put(msg.TradeId)); " is 124.
Long Statement,StockSharp.Algo.Storages.Binary,TickBinarySerializer,C:\repos\stocksharp_stocksharp\Algo\Storages\Binary\TickBinarySerializer.cs,OnSave,The length of the statement  "						throw new ArgumentException(LocalizedStrings.Str1022Params.Put((object)msg.TradeId ?? msg.TradeStringId)' nameof(messages)); " is 124.
Long Statement,StockSharp.Algo.Storages.Binary,TickBinarySerializer,C:\repos\stocksharp_stocksharp\Algo\Storages\Binary\TickBinarySerializer.cs,OnSave,The length of the statement  "				metaInfo.LastTime = writer.WriteTime(msg.ServerTime' metaInfo.LastTime' LocalizedStrings.Str985' allowNonOrdered' isUtc' metaInfo.ServerOffset' allowDiffOffsets' isTickPrecision' ref lastOffset); " is 195.
Long Statement,StockSharp.Algo.Storages.Binary,TickBinarySerializer,C:\repos\stocksharp_stocksharp\Algo\Storages\Binary\TickBinarySerializer.cs,OnSave,The length of the statement  "						metaInfo.LastLocalTime = writer.WriteTime(msg.LocalTime' metaInfo.LastLocalTime' LocalizedStrings.Str1024' allowNonOrdered' isUtc' metaInfo.LocalOffset' allowDiffOffsets' isTickPrecision' ref lastOffset); " is 204.
Long Statement,StockSharp.Algo.Storages.Binary,TickBinarySerializer,C:\repos\stocksharp_stocksharp\Algo\Storages\Binary\TickBinarySerializer.cs,MoveNext,The length of the statement  "			var serverTime = reader.ReadTime(ref prevTime' allowNonOrdered' isUtc' metaInfo.GetTimeZone(isUtc' SecurityId' ExchangeInfoProvider)' allowDiffOffsets' isTickPrecision' ref lastOffset); " is 185.
Long Statement,StockSharp.Algo.Storages.Binary,TickBinarySerializer,C:\repos\stocksharp_stocksharp\Algo\Storages\Binary\TickBinarySerializer.cs,MoveNext,The length of the statement  "					var localTime = reader.ReadTime(ref prevLocalTime' allowNonOrdered' isUtc' metaInfo.LocalOffset' allowDiffOffsets' isTickPrecision' ref lastOffset); " is 148.
Long Statement,StockSharp.Algo.Candles,CandleHelper,C:\repos\stocksharp_stocksharp\Algo\Candles\CandleHelper.cs,GetSeries,The length of the statement  "			return candleManager.ThrowIfNull().Series.FirstOrDefault(s => s.CandleType == typeof(TCandle) && s.Security == security && s.Arg.Equals(arg)); " is 142.
Long Statement,StockSharp.Algo.Candles,CandleHelper,C:\repos\stocksharp_stocksharp\Algo\Candles\CandleHelper.cs,ToTrades,The length of the statement  "				c = CreateTick(candleMsg' isUptrend ? Sides.Buy : Sides.Sell' candleMsg.ClosePrice' candleMsg.TotalVolume - 3 * vol' candleMsg.OpenInterest); " is 141.
Long Statement,StockSharp.Algo.Candles,CandleHelper,C:\repos\stocksharp_stocksharp\Algo\Candles\CandleHelper.cs,GetTimeFrameCount,The length of the statement  "			var totalCount = workingTime.GetTimeFrameCount(from' new Range<TimeSpan>(from.TimeOfDay' TimeHelper.LessOneDay)' timeFrame); " is 124.
Long Statement,StockSharp.Algo.Candles,IndexCandleBuilder,C:\repos\stocksharp_stocksharp\Algo\Candles\IndexCandleBuilder.cs,ProcessCandle,The length of the statement  "					if (indexCandle.OpenPrice == 0 || indexCandle.HighPrice == 0 || indexCandle.LowPrice == 0 || indexCandle.ClosePrice == 0) " is 121.
Long Statement,StockSharp.Algo.Candles,IndexCandleBuilder,C:\repos\stocksharp_stocksharp\Algo\Candles\IndexCandleBuilder.cs,GetFormedBuffers,The length of the statement  "				var buffer = _buffers.SafeAdd(candle.OpenTime' key => new CandleBuffer(_candleType' candle.OpenTime' candle.CloseTime' _bufferSize' false)); " is 140.
Long Statement,StockSharp.Algo.Candles,IndexCandleBuilder,C:\repos\stocksharp_stocksharp\Algo\Candles\IndexCandleBuilder.cs,Calculate,The length of the statement  "				throw new ArithmeticException(LocalizedStrings.BuildIndexError.Put(_security' _security.InnerSecurityIds.Zip(values' (s' v) => "{0}: {1}".Put(s' v)).Join("' "))' excp); " is 168.
Long Statement,StockSharp.Algo.Candles,CandleManager,C:\repos\stocksharp_stocksharp\Algo\Candles\CandleManager.cs,Start,The length of the statement  "					series.Security is IndexSecurity ? (IEnumerable<ICandleSource<Candle>>)new[] { new IndexSecurityCandleManagerSource(this' ConfigManager.GetService<ISecurityProvider>()' from' to) } : Sources' " is 191.
Long Statement,StockSharp.Algo.Derivatives,BasketBlackScholes,C:\repos\stocksharp_stocksharp\Algo\Derivatives\BasketBlackScholes.cs,ProcessOptions,The length of the statement  "				return iv == null ? null : func(m) * (usePos ? PositionProvider.Positions.Where(p => p.Security == m.Option).Sum(p => p.CurrentValue) : 1); " is 139.
Long Statement,StockSharp.Algo.Derivatives,BlackScholes,C:\repos\stocksharp_stocksharp\Algo\Derivatives\BlackScholes.cs,Premium,The length of the statement  "			return TryRound(DerivativesHelper.Premium(OptionType' GetStrike()' assetPrice.Value' RiskFree' Dividend' deviation.Value' timeToExp.Value' D1(deviation.Value' assetPrice.Value' timeToExp.Value))); " is 196.
Long Statement,StockSharp.Algo.Derivatives,BlackScholes,C:\repos\stocksharp_stocksharp\Algo\Derivatives\BlackScholes.cs,Delta,The length of the statement  "			return TryRound(DerivativesHelper.Delta(OptionType' assetPrice.Value' D1(deviation ?? DefaultDeviation' assetPrice.Value' timeToExp.Value))); " is 141.
Long Statement,StockSharp.Algo.Derivatives,BlackScholes,C:\repos\stocksharp_stocksharp\Algo\Derivatives\BlackScholes.cs,Gamma,The length of the statement  "			return TryRound(DerivativesHelper.Gamma(assetPrice.Value' deviation.Value' timeToExp.Value' D1(deviation.Value' assetPrice.Value' timeToExp.Value))); " is 149.
Long Statement,StockSharp.Algo.Derivatives,BlackScholes,C:\repos\stocksharp_stocksharp\Algo\Derivatives\BlackScholes.cs,Vega,The length of the statement  "			return TryRound(DerivativesHelper.Vega(assetPrice.Value' timeToExp.Value' D1(deviation ?? DefaultDeviation' assetPrice.Value' timeToExp.Value))); " is 145.
Long Statement,StockSharp.Algo.Derivatives,BlackScholes,C:\repos\stocksharp_stocksharp\Algo\Derivatives\BlackScholes.cs,Theta,The length of the statement  "			return TryRound(DerivativesHelper.Theta(OptionType' GetStrike()' assetPrice.Value' RiskFree' deviation.Value' timeToExp.Value' D1(deviation.Value' assetPrice.Value' timeToExp.Value))); " is 184.
Long Statement,StockSharp.Algo.Derivatives,BlackScholes,C:\repos\stocksharp_stocksharp\Algo\Derivatives\BlackScholes.cs,Rho,The length of the statement  "			return TryRound(DerivativesHelper.Rho(OptionType' GetStrike()' assetPrice.Value' RiskFree' deviation.Value' timeToExp.Value' D1(deviation.Value' assetPrice.Value' timeToExp.Value))); " is 182.
Long Statement,StockSharp.Algo.Derivatives,DerivativesHelper,C:\repos\stocksharp_stocksharp\Algo\Derivatives\DerivativesHelper.cs,GetCentralStrike,The length of the statement  "			return underlyingAsset.GetCentralStrike(dataProvider' underlyingAsset.GetDerivatives(securityProvider' expirationDate).Filter(optionType)); " is 139.
Long Statement,StockSharp.Algo.Derivatives,DerivativesHelper,C:\repos\stocksharp_stocksharp\Algo\Derivatives\DerivativesHelper.cs,GetOutOfTheMoney,The length of the statement  "			return allStrikes.Where(s => s.Strike != null && s.OptionType == OptionTypes.Call ? s.Strike > cs.Strike : s.Strike < cs.Strike); " is 129.
Long Statement,StockSharp.Algo.Derivatives,DerivativesHelper,C:\repos\stocksharp_stocksharp\Algo\Derivatives\DerivativesHelper.cs,GetInTheMoney,The length of the statement  "			return allStrikes.Where(s => s.Strike != null && s.OptionType == OptionTypes.Call ? s.Strike < cs.Strike : s.Strike > cs.Strike); " is 129.
Long Statement,StockSharp.Algo.Derivatives,DerivativesHelper,C:\repos\stocksharp_stocksharp\Algo\Derivatives\DerivativesHelper.cs,GetIntrinsicValue,The length of the statement  "			return ((decimal)(option.OptionType == OptionTypes.Call ? assetPrice - option.Strike : option.Strike - assetPrice)).Max(0); " is 123.
Long Statement,StockSharp.Algo.Derivatives,DerivativesHelper,C:\repos\stocksharp_stocksharp\Algo\Derivatives\DerivativesHelper.cs,ImpliedVolatility,The length of the statement  "			return depth.ImpliedVolatility(new BlackScholes(depth.Security' securityProvider' dataProvider) { RiskFree = riskFree' Dividend = dividend }' currentTime); " is 155.
Long Statement,StockSharp.Algo.Derivatives,DerivativesHelper,C:\repos\stocksharp_stocksharp\Algo\Derivatives\DerivativesHelper.cs,ImpliedVolatility,The length of the statement  "			return new MarketDepth(depth.Security).Update(depth.Bids.Select(Convert)' depth.Asks.Select(Convert)' true' depth.LastChangeTime); " is 130.
Long Statement,StockSharp.Algo.Derivatives,DerivativesHelper,C:\repos\stocksharp_stocksharp\Algo\Derivatives\DerivativesHelper.cs,Gamma,The length of the statement  "			//throw new ArgumentOutOfRangeException(nameof(deviation)' deviation' "Стандартное отклонение имеет недопустимое значение."); " is 125.
Long Statement,StockSharp.Algo.Export.Database.DbProviders,MSSQLDbProvider,C:\repos\stocksharp_stocksharp\Algo\Export\Database\DbProviders\MSSQLDbProvider.cs,InsertBatch,The length of the statement  "						using (var command = CreateCommand(connection' CreateInsertSqlString(table' value)' value.ToDictionary(par => "@" + par.Key' par => par.Value))) " is 144.
Long Statement,StockSharp.Algo.Export.Database.DbProviders,SQLiteDbProvider,C:\repos\stocksharp_stocksharp\Algo\Export\Database\DbProviders\SQLiteDbProvider.cs,InsertBatch,The length of the statement  "						using (var command = CreateCommand(connection' CreateInsertSqlString(table' value)' value.ToDictionary(par => "@" + par.Key' par => par.Value))) " is 144.
Long Statement,StockSharp.Algo.Export.Database.DbProviders,SQLiteDbProvider,C:\repos\stocksharp_stocksharp\Algo\Export\Database\DbProviders\SQLiteDbProvider.cs,GetDbType,The length of the statement  "			//anothar:SQLite не поддерживает datetime2' а только datetime то есть округляет до трех знаков в миллисекундах-нам не подходит. " is 127.
Long Statement,StockSharp.Algo.Strategies,Strategy,C:\repos\stocksharp_stocksharp\Algo\Strategies\Strategy.cs,LogProcessState,The length of the statement  "			this.AddInfoLog(LocalizedStrings.Str1374Params' stateStr' ChildStrategies.Count' Parent != null ? ParentStrategy.ChildStrategies.Count : -1' Position); " is 151.
Long Statement,StockSharp.Algo.Strategies,Strategy,C:\repos\stocksharp_stocksharp\Algo\Strategies\Strategy.cs,InitStartValues,The length of the statement  "				if (parameter.Value is Unit unit && unit.GetTypeValue == null && (unit.Type == UnitTypes.Point || unit.Type == UnitTypes.Step)) " is 127.
Long Statement,StockSharp.Algo.Strategies,Strategy,C:\repos\stocksharp_stocksharp\Algo\Strategies\Strategy.cs,ReRegisterOrder,The length of the statement  "			this.AddInfoLog(LocalizedStrings.Str1384Params' oldOrder.GetTraceId()' oldOrder.Price' newOrder.Price' oldOrder.Comment); " is 121.
Long Statement,StockSharp.Algo.Strategies,Strategy,C:\repos\stocksharp_stocksharp\Algo\Strategies\Strategy.cs,UpdatePnLManager,The length of the statement  "					.TryAdd(Level1Fields.StepPrice' this.GetSecurityValue<decimal?>(security' Level1Fields.StepPrice) ?? security.StepPrice) " is 120.
Long Statement,StockSharp.Algo.Strategies,Strategy,C:\repos\stocksharp_stocksharp\Algo\Strategies\Strategy.cs,UpdatePnLManager,The length of the statement  "					.TryAdd(Level1Fields.Multiplier' this.GetSecurityValue<decimal?>(security' Level1Fields.Multiplier) ?? security.Multiplier); " is 124.
Long Statement,StockSharp.Algo.Strategies,Strategy,C:\repos\stocksharp_stocksharp\Algo\Strategies\Strategy.cs,RaisePositionChanged,The length of the statement  "			this.AddInfoLog(LocalizedStrings.Str1399Params' PositionManager.Positions.Select(pos => pos.Key + "=" + pos.Value).Join("' ")); " is 127.
Long Statement,StockSharp.Algo.Strategies,StrategyHelper,C:\repos\stocksharp_stocksharp\Algo\Strategies\StrategyHelper.cs,LoadState,The length of the statement  "				foreach (var parameter in strategy.StatisticManager.Parameters.Where(parameter => statistics.ContainsKey(parameter.Name))) " is 122.
Long Statement,StockSharp.Algo.Strategies,StrategyHelper,C:\repos\stocksharp_stocksharp\Algo\Strategies\StrategyHelper.cs,EmulateOrders,The length of the statement  "			using (var connector = new RealTimeEmulationTrader<HistoryMessageAdapter>(new HistoryMessageAdapter(new IncrementalIdGenerator()' new CollectionSecurityProvider(array.Select(o => o.Security).Distinct())) " is 203.
Long Statement,StockSharp.Algo.Strategies.Reporting,CsvStrategyReport,C:\repos\stocksharp_stocksharp\Algo\Strategies\Reporting\CsvStrategyReport.cs,Generate,The length of the statement  "					WriteValues(writer' LocalizedStrings.Strategy' LocalizedStrings.Security' LocalizedStrings.Portfolio' LocalizedStrings.Str1321' LocalizedStrings.Str862' LocalizedStrings.PnL' LocalizedStrings.Str159' LocalizedStrings.Str163' LocalizedStrings.Str161); " is 250.
Long Statement,StockSharp.Algo.Strategies.Reporting,CsvStrategyReport,C:\repos\stocksharp_stocksharp\Algo\Strategies\Reporting\CsvStrategyReport.cs,Generate,The length of the statement  "						strategy.Name' strategy.Security != null ? strategy.Security.Id : string.Empty' strategy.Portfolio != null ? strategy.Portfolio.Name : string.Empty' " is 148.
Long Statement,StockSharp.Algo.Strategies.Reporting,CsvStrategyReport,C:\repos\stocksharp_stocksharp\Algo\Strategies\Reporting\CsvStrategyReport.cs,Generate,The length of the statement  "					WriteValues(writer' LocalizedStrings.Str1190' LocalizedStrings.Transaction' LocalizedStrings.Str128' LocalizedStrings.Time' LocalizedStrings.Price' " is 147.
Long Statement,StockSharp.Algo.Strategies.Reporting,CsvStrategyReport,C:\repos\stocksharp_stocksharp\Algo\Strategies\Reporting\CsvStrategyReport.cs,Generate,The length of the statement  "						WriteValues(writer' order.Id' order.TransactionId' Format(order.Direction)' order.Time' order.Price' order.GetAveragePrice(strategy.Connector)' " is 143.
Long Statement,StockSharp.Algo.Strategies.Reporting,CsvStrategyReport,C:\repos\stocksharp_stocksharp\Algo\Strategies\Reporting\CsvStrategyReport.cs,Generate,The length of the statement  "							Format(order.State)' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : string.Empty)' order.Balance' " is 146.
Long Statement,StockSharp.Algo.Strategies.Reporting,CsvStrategyReport,C:\repos\stocksharp_stocksharp\Algo\Strategies\Reporting\CsvStrategyReport.cs,Generate,The length of the statement  "					WriteValues(writer' LocalizedStrings.Str1192' LocalizedStrings.Transaction' LocalizedStrings.Time' LocalizedStrings.Price' LocalizedStrings.Volume' " is 147.
Long Statement,StockSharp.Algo.Strategies.Reporting,CsvStrategyReport,C:\repos\stocksharp_stocksharp\Algo\Strategies\Reporting\CsvStrategyReport.cs,Generate,The length of the statement  "						WriteValues(writer' trade.Trade.Id' trade.Order.TransactionId' Format(trade.Trade.Time)' trade.Trade.Price' trade.Trade.Volume' " is 127.
Long Statement,StockSharp.Algo.Strategies.Reporting,CsvStrategyReport,C:\repos\stocksharp_stocksharp\Algo\Strategies\Reporting\CsvStrategyReport.cs,Generate,The length of the statement  "							Format(trade.Order.Direction)' trade.Order.Id' strategy.PnLManager.ProcessMessage(trade.ToMessage()).PnL' trade.Slippage); " is 122.
Long Statement,StockSharp.Algo.Strategies.Reporting,ExcelStrategyReport,C:\repos\stocksharp_stocksharp\Algo\Strategies\Reporting\ExcelStrategyReport.cs,Generate,The length of the statement  "					//foreach (var group in Strategy.CommissionManager.Rules.SyncGet(c => c.ToArray()).GroupBy(c => c.GetType().GetDisplayName())) " is 126.
Long Statement,StockSharp.Algo.Strategies.Reporting,ExcelStrategyReport,C:\repos\stocksharp_stocksharp\Algo\Strategies\Reporting\ExcelStrategyReport.cs,Generate,The length of the statement  "							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str1329)' null' Colors.Green) " is 129.
Long Statement,StockSharp.Algo.Strategies.Reporting,ExcelStrategyReport,C:\repos\stocksharp_stocksharp\Algo\Strategies\Reporting\ExcelStrategyReport.cs,Generate,The length of the statement  "							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str238)' null' Colors.Red); " is 127.
Long Statement,StockSharp.Algo.Strategies.Reporting,ExcelStrategyReport,C:\repos\stocksharp_stocksharp\Algo\Strategies\Reporting\ExcelStrategyReport.cs,Generate,The length of the statement  "								.SetCell(columnShift + 9' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : LocalizedStrings.Str238)) " is 157.
Long Statement,StockSharp.Algo.Strategies.Reporting,ExcelStrategyReport,C:\repos\stocksharp_stocksharp\Algo\Strategies\Reporting\ExcelStrategyReport.cs,Generate,The length of the statement  "									.SetCell(columnShift + 6' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : string.Empty)) " is 146.
Long Statement,StockSharp.Algo.Testing,HistoryMessageAdapter,C:\repos\stocksharp_stocksharp\Algo\Testing\HistoryMessageAdapter.cs,ProcessMarketDataMessage,The length of the statement  "				RaiseMarketDataMessage(message' new InvalidOperationException(LocalizedStrings.Str1117Params.Put(message.DataType' securityId))); " is 129.
Long Statement,StockSharp.Algo.Testing,HistoryMessageAdapter,C:\repos\stocksharp_stocksharp\Algo\Testing\HistoryMessageAdapter.cs,ProcessMarketDataMessage,The length of the statement  "						BasketStorage.RemoveStorage<IMarketDataStorage<ExecutionMessage>>(security' MessageTypes.Execution' ExecutionTypes.Tick); " is 121.
Long Statement,StockSharp.Algo.Testing,HistoryMessageAdapter,C:\repos\stocksharp_stocksharp\Algo\Testing\HistoryMessageAdapter.cs,ProcessMarketDataMessage,The length of the statement  "						BasketStorage.RemoveStorage<IMarketDataStorage<ExecutionMessage>>(security' MessageTypes.Execution' ExecutionTypes.OrderLog); " is 125.
Long Statement,StockSharp.Algo.Testing,ExecutionLogConverter,C:\repos\stocksharp_stocksharp\Algo\Testing\ExecutionLogConverter.cs,ProcessQuoteChange,The length of the statement  "				//при обновлении стакана необходимо учитывать направление сдвига' чтобы не было ложного исполнения при наложении бидов и асков. " is 127.
Long Statement,StockSharp.Algo.Testing,ExecutionLogConverter,C:\repos\stocksharp_stocksharp\Algo\Testing\ExecutionLogConverter.cs,ToExecutionLog,The length of the statement  "				retVal.Add(CreateMessage(time' tick.ServerTime' originSide' tradePrice' volume + (_securityDefinition.VolumeStep ?? 1 * _settings.VolumeMultiplier)' tif: TimeInForce.MatchOrCancel)); " is 182.
Long Statement,StockSharp.Algo.Testing,ExecutionLogConverter,C:\repos\stocksharp_stocksharp\Algo\Testing\ExecutionLogConverter.cs,ToExecutionLog,The length of the statement  "				retVal.Add(CreateMessage(time' tick.ServerTime' originSide.Invert()' tradePrice' volume' tif: TimeInForce.MatchOrCancel)); " is 122.
Long Statement,StockSharp.Algo.Testing,ExecutionLogConverter,C:\repos\stocksharp_stocksharp\Algo\Testing\ExecutionLogConverter.cs,ToExecutionLog,The length of the statement  "				if (prevBidPrice == _prevBidPrice && prevBidVolume == _prevBidVolume && prevAskPrice == _prevAskPrice && prevAskVolume == _prevAskVolume) " is 137.
Long Statement,StockSharp.Algo.Testing,ExecutionLogConverter,C:\repos\stocksharp_stocksharp\Algo\Testing\ExecutionLogConverter.cs,ToExecutionLog,The length of the statement  "					Bids = _prevBidPrice == null ? Enumerable.Empty<QuoteChange>() : new[] { new QuoteChange(Sides.Buy' _prevBidPrice.Value' _prevBidVolume ?? 0) }' " is 144.
Long Statement,StockSharp.Algo.Testing,ExecutionLogConverter,C:\repos\stocksharp_stocksharp\Algo\Testing\ExecutionLogConverter.cs,ToExecutionLog,The length of the statement  "					Asks = _prevAskPrice == null ? Enumerable.Empty<QuoteChange>() : new[] { new QuoteChange(Sides.Sell' _prevAskPrice.Value' _prevAskVolume ?? 0) }' " is 145.
Long Statement,StockSharp.Algo.Testing,ExecutionLogConverter,C:\repos\stocksharp_stocksharp\Algo\Testing\ExecutionLogConverter.cs,TryCreateOppositeOrder,The length of the statement  "            var oppositePrice = (tradePrice + _settings.SpreadSize * priceStep * (originSide == Sides.Buy ? 1 : -1)).Max(priceStep); " is 120.
Long Statement,StockSharp.Algo.Testing,ExecutionLogConverter,C:\repos\stocksharp_stocksharp\Algo\Testing\ExecutionLogConverter.cs,TryCreateOppositeOrder,The length of the statement  "			if (bestQuote.Value == null || ((originSide == Sides.Buy && oppositePrice < bestQuote.Key) || (originSide == Sides.Sell && oppositePrice > bestQuote.Key))) " is 155.
Long Statement,StockSharp.Algo.Testing,SecurityMarketEmulator,C:\repos\stocksharp_stocksharp\Algo\Testing\MarketEmulator.cs,Process,The length of the statement  "									this.AddInfoLog(LocalizedStrings.Str1145Params' execMsg.IsCancelled ? LocalizedStrings.Str1146 : LocalizedStrings.Str1147' execMsg.TransactionId == 0 ? execMsg.OriginalTransactionId : execMsg.TransactionId); " is 207.
Long Statement,StockSharp.Algo.Testing,SecurityMarketEmulator,C:\repos\stocksharp_stocksharp\Algo\Testing\MarketEmulator.cs,Process,The length of the statement  "						var info = _candleInfo.SafeAdd(candleMsg.OpenTime' key => Tuple.Create(new List<CandleMessage>()' new List<ExecutionMessage>())); " is 129.
Long Statement,StockSharp.Algo.Testing,SecurityMarketEmulator,C:\repos\stocksharp_stocksharp\Algo\Testing\MarketEmulator.cs,AcceptExecution,The length of the statement  "						this.AddErrorLog(LocalizedStrings.Str1151Params' execution.IsCancelled ? LocalizedStrings.Str1152 : LocalizedStrings.Str1153' execution.OriginalTransactionId == 0 ? execution.TransactionId : execution.OriginalTransactionId); " is 224.
Long Statement,StockSharp.Algo.Testing,SecurityMarketEmulator,C:\repos\stocksharp_stocksharp\Algo\Testing\MarketEmulator.cs,UpdateQuotes,The length of the statement  "					throw new ArgumentOutOfRangeException(nameof(message)' message.OrderVolume' LocalizedStrings.Str1160Params.Put(message.TransactionId)); " is 135.
Long Statement,StockSharp.Algo.Testing,SecurityMarketEmulator,C:\repos\stocksharp_stocksharp\Algo\Testing\MarketEmulator.cs,GetQuotes,The length of the statement  "				//return _quotes.SafeAdd(side' key => new SortedDictionary<decimal' List<ExecutionMessage>>(side == Sides.Buy ? new BackwardComparer<decimal>() : null)); " is 153.
Long Statement,StockSharp.Algo.Testing,SecurityMarketEmulator,C:\repos\stocksharp_stocksharp\Algo\Testing\MarketEmulator.cs,MatchOrder,The length of the statement  "					this.AddInfoLog(LocalizedStrings.Str1168Params' tradeMsg.TradeId' tradeMsg.OriginalTransactionId' execution.Key' execution.Value); " is 130.
Long Statement,StockSharp.Algo.Testing,SecurityMarketEmulator,C:\repos\stocksharp_stocksharp\Algo\Testing\MarketEmulator.cs,UpdateQuote,The length of the statement  "					quotes[message.OrderPrice] = pair = RefTuple.Create(new LevelQuotes()' new QuoteChange(message.Side' message.OrderPrice' 0)); " is 125.
Long Statement,StockSharp.Algo.Testing,SecurityMarketEmulator,C:\repos\stocksharp_stocksharp\Algo\Testing\MarketEmulator.cs,UpdateQuote,The length of the statement  "						//	throw new InvalidOperationException("Котировка для отмены с номером транзакции {0} не найдена.".Put(message.TransactionId)); " is 127.
Long Statement,StockSharp.Algo.Testing,SecurityMarketEmulator,C:\repos\stocksharp_stocksharp\Algo\Testing\MarketEmulator.cs,GetMarginPrice,The length of the statement  "				return (decimal?)_parent._secStates.TryGetValue(_securityId)?.TryGetValue(field) ?? GetQuotes(side).FirstOr()?.Key ?? 0; " is 120.
Long Statement,StockSharp.Algo.Testing,PortfolioEmulator,C:\repos\stocksharp_stocksharp\Algo\Testing\MarketEmulator.cs,ProcessPositionChange,The length of the statement  "				money.PositionAveragePrice = posMsg.Changes.TryGetValue(PositionChangeTypes.AveragePrice).To<decimal?>() ?? money.PositionAveragePrice; " is 135.
Complex Conditional,StockSharp.Algo,Level1DepthBuilder,C:\repos\stocksharp_stocksharp\Algo\Level1DepthBuilderAdapter.cs,Process,The conditional expression  "_bidPrice == bidPrice && _askPrice == askPrice && _bidVolume == bidVolume && _askVolume == askVolume"  is complex.
Complex Conditional,StockSharp.Algo,Connector,C:\repos\stocksharp_stocksharp\Algo\Connector_ProcessMessage.cs,ProcessConnectMessage,The conditional expression  "TimeChange && _adapterStates.Count > 0 && _adapterStates.CachedValues.All(s => s == ConnectionStates.Disconnected || s == ConnectionStates.Failed)"  is complex.
Complex Conditional,StockSharp.Algo,Connector,C:\repos\stocksharp_stocksharp\Algo\Connector_ProcessMessage.cs,CheckOrderState,The conditional expression  "order.Price == 0 && (order.Type == OrderTypes.Limit || order.Type == OrderTypes.ExtRepo || order.Type == OrderTypes.Repo || order.Type == OrderTypes.Rps)"  is complex.
Complex Conditional,StockSharp.Algo,EntityCache,C:\repos\stocksharp_stocksharp\Algo\EntityCache.cs,ProcessOrderMessage,The conditional expression  "orderState != null && cancellationOrder.State != OrderStates.Done && orderState != OrderStates.None && orderState != OrderStates.Pending"  is complex.
Complex Conditional,StockSharp.Algo,MarketRuleHelper,C:\repos\stocksharp_stocksharp\Algo\MarketRuleHelper.cs,TryRemoveRule,The conditional expression  "(!checkCanFinish && !rule.IsActive && rule.IsReady) || rule.CanFinish()"  is complex.
Complex Conditional,StockSharp.Algo,CandleStateSeriesRule,C:\repos\stocksharp_stocksharp\Algo\MarketRuleHelper.cs,OnProcessCandle,The conditional expression  "(_states == null && candle.State == _state) || (_states != null && _states.Contains(candle.State))"  is complex.
Complex Conditional,StockSharp.Algo,TraderHelper,C:\repos\stocksharp_stocksharp\Algo\TraderHelper.cs,IsTradeDate,The conditional expression  "(period == null || period.Times.Count == 0) && workingTime.SpecialWorkingDays.Count == 0 && workingTime.SpecialHolidays.Count == 0"  is complex.
Complex Conditional,StockSharp.Algo,OrderBookEnumerator,C:\repos\stocksharp_stocksharp\Algo\TraderHelper.cs,MoveNext,The conditional expression  "prevBidPrice == _prevBidPrice && prevBidVolume == _prevBidVolume && prevAskPrice == _prevAskPrice && prevAskVolume == _prevAskVolume"  is complex.
Complex Conditional,StockSharp.Algo.Indicators,ParabolicSar,C:\repos\stocksharp_stocksharp\Algo\Indicators\ParabolicSar.cs,OnProcess,The conditional expression  "(_longPosition && (_candles[_candles.Count - 1].LowPrice < _todaySar || _candles[_candles.Count - 2].LowPrice < _todaySar))  						|| (!_longPosition && (_candles[_candles.Count - 1].HighPrice > _todaySar || _candles[_candles.Count - 2].HighPrice > _todaySar))"  is complex.
Complex Conditional,StockSharp.Algo.Indicators,ParabolicSar,C:\repos\stocksharp_stocksharp\Algo\Indicators\ParabolicSar.cs,Reverse,The conditional expression  "(_longPosition && _prevSar > _candles[_candles.Count - 1].LowPrice) ||  				(!_longPosition && _prevSar < _candles[_candles.Count - 1].HighPrice) || _prevBar != _candles.Count"  is complex.
Complex Conditional,StockSharp.Algo.Candles,CandleHelper,C:\repos\stocksharp_stocksharp\Algo\Candles\CandleHelper.cs,ToTrades,The conditional expression  "candleMsg.OpenPrice == candleMsg.ClosePrice &&   				candleMsg.LowPrice == candleMsg.HighPrice &&   				candleMsg.OpenPrice == candleMsg.LowPrice ||  				candleMsg.TotalVolume == 1"  is complex.
Complex Conditional,StockSharp.Algo.Candles,IndexCandleBuilder,C:\repos\stocksharp_stocksharp\Algo\Candles\IndexCandleBuilder.cs,ProcessCandle,The conditional expression  "indexCandle.OpenPrice == 0 || indexCandle.HighPrice == 0 || indexCandle.LowPrice == 0 || indexCandle.ClosePrice == 0"  is complex.
Complex Conditional,StockSharp.Algo.Strategies,Strategy,C:\repos\stocksharp_stocksharp\Algo\Strategies\Strategy.cs,InitStartValues,The conditional expression  "parameter.Value is Unit unit && unit.GetTypeValue == null && (unit.Type == UnitTypes.Point || unit.Type == UnitTypes.Step)"  is complex.
Complex Conditional,StockSharp.Algo.Testing,ExecutionLogConverter,C:\repos\stocksharp_stocksharp\Algo\Testing\ExecutionLogConverter.cs,ToExecutionLog,The conditional expression  "bestBid.Value != null && bestAsk.Value != null && bestBid.Key < tradePrice && tradePrice < bestAsk.Key"  is complex.
Complex Conditional,StockSharp.Algo.Testing,ExecutionLogConverter,C:\repos\stocksharp_stocksharp\Algo\Testing\ExecutionLogConverter.cs,ToExecutionLog,The conditional expression  "prevBidPrice == _prevBidPrice && prevBidVolume == _prevBidVolume && prevAskPrice == _prevAskPrice && prevAskVolume == _prevAskVolume"  is complex.
Complex Conditional,StockSharp.Algo.Testing,ExecutionLogConverter,C:\repos\stocksharp_stocksharp\Algo\Testing\ExecutionLogConverter.cs,TryCreateOppositeOrder,The conditional expression  "bestQuote.Value == null || ((originSide == Sides.Buy && oppositePrice < bestQuote.Key) || (originSide == Sides.Sell && oppositePrice > bestQuote.Key))"  is complex.
Virtual Method Call from Constructor,StockSharp.Algo.Storages,StorageExchangeInfoProvider,C:\repos\stocksharp_stocksharp\Algo\Storages\IExchangeInfoProvider.cs,StorageExchangeInfoProvider,The constructor "StorageExchangeInfoProvider" calls a virtual method "GetIds".
Virtual Method Call from Constructor,StockSharp.Algo.Storages,StorageExchangeInfoProvider,C:\repos\stocksharp_stocksharp\Algo\Storages\IExchangeInfoProvider.cs,StorageExchangeInfoProvider,The constructor "StorageExchangeInfoProvider" calls a virtual method "Save".
Virtual Method Call from Constructor,StockSharp.Algo.Storages,StorageExchangeInfoProvider,C:\repos\stocksharp_stocksharp\Algo\Storages\IExchangeInfoProvider.cs,StorageExchangeInfoProvider,The constructor "StorageExchangeInfoProvider" calls a virtual method "Save".
Empty Catch Block,StockSharp.Algo.Storages,LocalMarketDataStorageDrive,C:\repos\stocksharp_stocksharp\Algo\Storages\LocalMarketDataDrive.cs,SaveDates,The method has an empty catch block.
Magic Number,StockSharp.Algo,DataType,C:\repos\stocksharp_stocksharp\Algo\DataType.cs,ReInitHashCode,The following statement contains a magic number: _hashCode = ((h1 << 5) + h1) ^ h2;
Magic Number,StockSharp.Algo,SecurityTrie,C:\repos\stocksharp_stocksharp\Algo\SecurityTrie.cs,RemoveRange,The following statement contains a magic number: lock (_sync)  			{  				if (securities.Count() > 1000 || (_allSecurities.Count > 1000 && securities.Count() > _allSecurities.Count * 0.1))  				{  					_allSecurities.RemoveRange(securities);    					securities = _allSecurities.ToArray();    					_allSecurities.Clear();  					_trie.Clear();    					securities.ForEach(Add);  				}  				else  				{  					_trie.RemoveRange(securities);  					_allSecurities.RemoveRange(securities);  				}  			}
Magic Number,StockSharp.Algo,SecurityTrie,C:\repos\stocksharp_stocksharp\Algo\SecurityTrie.cs,RemoveRange,The following statement contains a magic number: lock (_sync)  			{  				if (securities.Count() > 1000 || (_allSecurities.Count > 1000 && securities.Count() > _allSecurities.Count * 0.1))  				{  					_allSecurities.RemoveRange(securities);    					securities = _allSecurities.ToArray();    					_allSecurities.Clear();  					_trie.Clear();    					securities.ForEach(Add);  				}  				else  				{  					_trie.RemoveRange(securities);  					_allSecurities.RemoveRange(securities);  				}  			}
Magic Number,StockSharp.Algo,SecurityTrie,C:\repos\stocksharp_stocksharp\Algo\SecurityTrie.cs,RemoveRange,The following statement contains a magic number: lock (_sync)  			{  				if (securities.Count() > 1000 || (_allSecurities.Count > 1000 && securities.Count() > _allSecurities.Count * 0.1))  				{  					_allSecurities.RemoveRange(securities);    					securities = _allSecurities.ToArray();    					_allSecurities.Clear();  					_trie.Clear();    					securities.ForEach(Add);  				}  				else  				{  					_trie.RemoveRange(securities);  					_allSecurities.RemoveRange(securities);  				}  			}
Magic Number,StockSharp.Algo,Connector,C:\repos\stocksharp_stocksharp\Algo\Connector_ProcessMessage.cs,ProcessQuotesMessage,The following statement contains a magic number: if (!fromLevel1 && (bestBid != null || bestAsk != null))  			{  				var values = GetSecurityValues(security);  				var changes = new List<KeyValuePair<Level1Fields' object>>(4);    				lock (values.SyncRoot)  				{  					if (bestBid != null)  					{  						values[(int)Level1Fields.BestBidPrice] = bestBid.Price;  						changes.Add(new KeyValuePair<Level1Fields' object>(Level1Fields.BestBidPrice' bestBid.Price));    						if (bestBid.Volume != 0)  						{  							values[(int)Level1Fields.BestBidVolume] = bestBid.Volume;  							changes.Add(new KeyValuePair<Level1Fields' object>(Level1Fields.BestBidVolume' bestBid.Volume));  						}  					}    					if (bestAsk != null)  					{  						values[(int)Level1Fields.BestAskPrice] = bestAsk.Price;  						changes.Add(new KeyValuePair<Level1Fields' object>(Level1Fields.BestAskPrice' bestAsk.Price));    						if (bestAsk.Volume != 0)  						{  							values[(int)Level1Fields.BestAskVolume] = bestAsk.Volume;  							changes.Add(new KeyValuePair<Level1Fields' object>(Level1Fields.BestAskVolume' bestAsk.Volume));  						}  					}  				}    				RaiseValuesChanged(security' changes' message.ServerTime' message.LocalTime);  			}
Magic Number,StockSharp.Algo,Connector,C:\repos\stocksharp_stocksharp\Algo\Connector_ProcessMessage.cs,ProcessTradeMessage,The following statement contains a magic number: var changes = new List<KeyValuePair<Level1Fields' object>>(4)  			{  				new KeyValuePair<Level1Fields' object>(Level1Fields.LastTradeTime' message.ServerTime)'  				new KeyValuePair<Level1Fields' object>(Level1Fields.LastTradePrice' message.TradePrice)  			};
Magic Number,StockSharp.Algo,Connector,C:\repos\stocksharp_stocksharp\Algo\Connector_ProcessMessage.cs,GetLevel1Fields,The following statement contains a magic number: var fields = new List<Level1Fields>(30);
Magic Number,StockSharp.Algo,EntityCache,C:\repos\stocksharp_stocksharp\Algo\EntityCache.cs,RecycleTrades,The following statement contains a magic number: if (totalCount < (1.5 * TradesKeepCount))  				return;
Magic Number,StockSharp.Algo,EntityCache,C:\repos\stocksharp_stocksharp\Algo\EntityCache.cs,RecycleOrders,The following statement contains a magic number: if (totalCount < (1.5 * OrdersKeepCount))  				return;
Magic Number,StockSharp.Algo,MarketRuleHelper,C:\repos\stocksharp_stocksharp\Algo\MarketRuleHelper.cs,CreateAndActivateTimeFrameTimer,The following statement contains a magic number: percent = percent / 100;
Magic Number,StockSharp.Algo,MarketRuleHelper,C:\repos\stocksharp_stocksharp\Algo\MarketRuleHelper.cs,IsCandlePartiallyFinished,The following statement contains a magic number: var realPercent = percent / 100;
Magic Number,StockSharp.Algo,TraderHelper,C:\repos\stocksharp_stocksharp\Algo\TraderHelper.cs,TraderHelper,The following statement contains a magic number: _stateChangePossibilities = new bool[5][];
Magic Number,StockSharp.Algo,TraderHelper,C:\repos\stocksharp_stocksharp\Algo\TraderHelper.cs,GetCurrentPrice,The following statement contains a magic number: switch (priceType) 			{ 				case MarketPriceTypes.Opposite: 				{ 					var quote = (side == Sides.Buy ? bestPair.Ask : bestPair.Bid); 					currentPrice = quote?.Price; 					break; 				} 				case MarketPriceTypes.Following: 				{ 					var quote = (side == Sides.Buy ? bestPair.Bid : bestPair.Ask); 					currentPrice = quote?.Price; 					break; 				} 				case MarketPriceTypes.Middle: 				{ 					if (bestPair.IsFull) 						currentPrice = bestPair.Bid.Price + bestPair.SpreadPrice / 2; 					else 						currentPrice = null; 					break; 				} 				default: 					throw new ArgumentOutOfRangeException(nameof(priceType)' priceType' LocalizedStrings.Str1219); 			}
Magic Number,StockSharp.Algo,TraderHelper,C:\repos\stocksharp_stocksharp\Algo\TraderHelper.cs,Sparse,The following statement contains a magic number: if (list.Count < 2) 				return ArrayHelper.Empty<Quote>();
Magic Number,StockSharp.Algo,TraderHelper,C:\repos\stocksharp_stocksharp\Algo\TraderHelper.cs,AlignPrice,The following statement contains a magic number: if (priceRange.Type == UnitTypes.Percent) 				priceLevel = (decimal)(firstPrice + MathHelper.Floor((((price - firstPrice) * 100) / firstPrice)' priceRange.Value).Percents()); 			else 				priceLevel = MathHelper.Floor(price' (decimal)priceRange);
Magic Number,StockSharp.Algo,TraderHelper,C:\repos\stocksharp_stocksharp\Algo\TraderHelper.cs,GetTheoreticalTrades,The following statement contains a magic number: var testPf = new Portfolio { Name = "test account"' BeginValue = decimal.MaxValue / 2 };
Magic Number,StockSharp.Algo,TraderHelper,C:\repos\stocksharp_stocksharp\Algo\TraderHelper.cs,GetExpiryDates,The following statement contains a magic number: for (var year = from.Year; year <= to.Year; year++) 			{ 				var monthFrom = year == from.Year ? from.Month : 1; 				var monthTo = year == to.Year ? to.Month : 12;  				for (var month = monthFrom; month <= monthTo; month++) 				{ 					switch (month) 					{ 						case 3: 						case 6: 						case 9: 						case 12: 						{ 							var dt = new DateTime(year' month' 15).ApplyTimeZone(ExchangeBoard.Forts.TimeZone);  							while (!ExchangeBoard.Forts.IsTradeDate(dt)) 							{ 								dt = dt.AddDays(1); 							} 							yield return dt; 							break; 						} 						 						default: 							continue; 					} 				} 			}
Magic Number,StockSharp.Algo,TraderHelper,C:\repos\stocksharp_stocksharp\Algo\TraderHelper.cs,GetExpiryDates,The following statement contains a magic number: for (var year = from.Year; year <= to.Year; year++) 			{ 				var monthFrom = year == from.Year ? from.Month : 1; 				var monthTo = year == to.Year ? to.Month : 12;  				for (var month = monthFrom; month <= monthTo; month++) 				{ 					switch (month) 					{ 						case 3: 						case 6: 						case 9: 						case 12: 						{ 							var dt = new DateTime(year' month' 15).ApplyTimeZone(ExchangeBoard.Forts.TimeZone);  							while (!ExchangeBoard.Forts.IsTradeDate(dt)) 							{ 								dt = dt.AddDays(1); 							} 							yield return dt; 							break; 						} 						 						default: 							continue; 					} 				} 			}
Magic Number,StockSharp.Algo,TraderHelper,C:\repos\stocksharp_stocksharp\Algo\TraderHelper.cs,GetExpiryDates,The following statement contains a magic number: for (var year = from.Year; year <= to.Year; year++) 			{ 				var monthFrom = year == from.Year ? from.Month : 1; 				var monthTo = year == to.Year ? to.Month : 12;  				for (var month = monthFrom; month <= monthTo; month++) 				{ 					switch (month) 					{ 						case 3: 						case 6: 						case 9: 						case 12: 						{ 							var dt = new DateTime(year' month' 15).ApplyTimeZone(ExchangeBoard.Forts.TimeZone);  							while (!ExchangeBoard.Forts.IsTradeDate(dt)) 							{ 								dt = dt.AddDays(1); 							} 							yield return dt; 							break; 						} 						 						default: 							continue; 					} 				} 			}
Magic Number,StockSharp.Algo,TraderHelper,C:\repos\stocksharp_stocksharp\Algo\TraderHelper.cs,GetExpiryDates,The following statement contains a magic number: for (var year = from.Year; year <= to.Year; year++) 			{ 				var monthFrom = year == from.Year ? from.Month : 1; 				var monthTo = year == to.Year ? to.Month : 12;  				for (var month = monthFrom; month <= monthTo; month++) 				{ 					switch (month) 					{ 						case 3: 						case 6: 						case 9: 						case 12: 						{ 							var dt = new DateTime(year' month' 15).ApplyTimeZone(ExchangeBoard.Forts.TimeZone);  							while (!ExchangeBoard.Forts.IsTradeDate(dt)) 							{ 								dt = dt.AddDays(1); 							} 							yield return dt; 							break; 						} 						 						default: 							continue; 					} 				} 			}
Magic Number,StockSharp.Algo,TraderHelper,C:\repos\stocksharp_stocksharp\Algo\TraderHelper.cs,GetExpiryDates,The following statement contains a magic number: for (var year = from.Year; year <= to.Year; year++) 			{ 				var monthFrom = year == from.Year ? from.Month : 1; 				var monthTo = year == to.Year ? to.Month : 12;  				for (var month = monthFrom; month <= monthTo; month++) 				{ 					switch (month) 					{ 						case 3: 						case 6: 						case 9: 						case 12: 						{ 							var dt = new DateTime(year' month' 15).ApplyTimeZone(ExchangeBoard.Forts.TimeZone);  							while (!ExchangeBoard.Forts.IsTradeDate(dt)) 							{ 								dt = dt.AddDays(1); 							} 							yield return dt; 							break; 						} 						 						default: 							continue; 					} 				} 			}
Magic Number,StockSharp.Algo,TraderHelper,C:\repos\stocksharp_stocksharp\Algo\TraderHelper.cs,GetExpiryDates,The following statement contains a magic number: for (var year = from.Year; year <= to.Year; year++) 			{ 				var monthFrom = year == from.Year ? from.Month : 1; 				var monthTo = year == to.Year ? to.Month : 12;  				for (var month = monthFrom; month <= monthTo; month++) 				{ 					switch (month) 					{ 						case 3: 						case 6: 						case 9: 						case 12: 						{ 							var dt = new DateTime(year' month' 15).ApplyTimeZone(ExchangeBoard.Forts.TimeZone);  							while (!ExchangeBoard.Forts.IsTradeDate(dt)) 							{ 								dt = dt.AddDays(1); 							} 							yield return dt; 							break; 						} 						 						default: 							continue; 					} 				} 			}
Magic Number,StockSharp.Algo,TraderHelper,C:\repos\stocksharp_stocksharp\Algo\TraderHelper.cs,GetFortsJumps,The following statement contains a magic number: for (var year = from.Year; year <= to.Year; year++) 			{ 				var monthFrom = year == from.Year ? from.Month : 1; 				var monthTo = year == to.Year ? to.Month : 12;  				for (var month = monthFrom; month <= monthTo; month++) 				{ 					char monthCode;  					switch (month) 					{ 						case 3: 							monthCode = 'H'; 							break; 						case 6: 							monthCode = 'M'; 							break; 						case 9: 							monthCode = 'U'; 							break; 						case 12: 							monthCode = 'Z'; 							break; 						default: 							continue; 					}  					var yearStr = year.To<string>(); 					var code = baseCode + monthCode + yearStr.Substring(yearStr.Length - 1' 1);  					var security = getSecurity(code);  					if (security == null) 					{ 						if (throwIfNotExists) 							throw new InvalidOperationException(LocalizedStrings.Str1218Params.Put(code));  						continue; 					} 					 					yield return security; 				} 			}
Magic Number,StockSharp.Algo,TraderHelper,C:\repos\stocksharp_stocksharp\Algo\TraderHelper.cs,GetFortsJumps,The following statement contains a magic number: for (var year = from.Year; year <= to.Year; year++) 			{ 				var monthFrom = year == from.Year ? from.Month : 1; 				var monthTo = year == to.Year ? to.Month : 12;  				for (var month = monthFrom; month <= monthTo; month++) 				{ 					char monthCode;  					switch (month) 					{ 						case 3: 							monthCode = 'H'; 							break; 						case 6: 							monthCode = 'M'; 							break; 						case 9: 							monthCode = 'U'; 							break; 						case 12: 							monthCode = 'Z'; 							break; 						default: 							continue; 					}  					var yearStr = year.To<string>(); 					var code = baseCode + monthCode + yearStr.Substring(yearStr.Length - 1' 1);  					var security = getSecurity(code);  					if (security == null) 					{ 						if (throwIfNotExists) 							throw new InvalidOperationException(LocalizedStrings.Str1218Params.Put(code));  						continue; 					} 					 					yield return security; 				} 			}
Magic Number,StockSharp.Algo,TraderHelper,C:\repos\stocksharp_stocksharp\Algo\TraderHelper.cs,GetFortsJumps,The following statement contains a magic number: for (var year = from.Year; year <= to.Year; year++) 			{ 				var monthFrom = year == from.Year ? from.Month : 1; 				var monthTo = year == to.Year ? to.Month : 12;  				for (var month = monthFrom; month <= monthTo; month++) 				{ 					char monthCode;  					switch (month) 					{ 						case 3: 							monthCode = 'H'; 							break; 						case 6: 							monthCode = 'M'; 							break; 						case 9: 							monthCode = 'U'; 							break; 						case 12: 							monthCode = 'Z'; 							break; 						default: 							continue; 					}  					var yearStr = year.To<string>(); 					var code = baseCode + monthCode + yearStr.Substring(yearStr.Length - 1' 1);  					var security = getSecurity(code);  					if (security == null) 					{ 						if (throwIfNotExists) 							throw new InvalidOperationException(LocalizedStrings.Str1218Params.Put(code));  						continue; 					} 					 					yield return security; 				} 			}
Magic Number,StockSharp.Algo,TraderHelper,C:\repos\stocksharp_stocksharp\Algo\TraderHelper.cs,GetFortsJumps,The following statement contains a magic number: for (var year = from.Year; year <= to.Year; year++) 			{ 				var monthFrom = year == from.Year ? from.Month : 1; 				var monthTo = year == to.Year ? to.Month : 12;  				for (var month = monthFrom; month <= monthTo; month++) 				{ 					char monthCode;  					switch (month) 					{ 						case 3: 							monthCode = 'H'; 							break; 						case 6: 							monthCode = 'M'; 							break; 						case 9: 							monthCode = 'U'; 							break; 						case 12: 							monthCode = 'Z'; 							break; 						default: 							continue; 					}  					var yearStr = year.To<string>(); 					var code = baseCode + monthCode + yearStr.Substring(yearStr.Length - 1' 1);  					var security = getSecurity(code);  					if (security == null) 					{ 						if (throwIfNotExists) 							throw new InvalidOperationException(LocalizedStrings.Str1218Params.Put(code));  						continue; 					} 					 					yield return security; 				} 			}
Magic Number,StockSharp.Algo,TraderHelper,C:\repos\stocksharp_stocksharp\Algo\TraderHelper.cs,GetFortsJumps,The following statement contains a magic number: for (var year = from.Year; year <= to.Year; year++) 			{ 				var monthFrom = year == from.Year ? from.Month : 1; 				var monthTo = year == to.Year ? to.Month : 12;  				for (var month = monthFrom; month <= monthTo; month++) 				{ 					char monthCode;  					switch (month) 					{ 						case 3: 							monthCode = 'H'; 							break; 						case 6: 							monthCode = 'M'; 							break; 						case 9: 							monthCode = 'U'; 							break; 						case 12: 							monthCode = 'Z'; 							break; 						default: 							continue; 					}  					var yearStr = year.To<string>(); 					var code = baseCode + monthCode + yearStr.Substring(yearStr.Length - 1' 1);  					var security = getSecurity(code);  					if (security == null) 					{ 						if (throwIfNotExists) 							throw new InvalidOperationException(LocalizedStrings.Str1218Params.Put(code));  						continue; 					} 					 					yield return security; 				} 			}
Magic Number,StockSharp.Algo,TraderHelper,C:\repos\stocksharp_stocksharp\Algo\TraderHelper.cs,GetPriceStep,The following statement contains a magic number: return 1m / 10.Pow(decimals);
Magic Number,StockSharp.Algo,TraderHelper,C:\repos\stocksharp_stocksharp\Algo\TraderHelper.cs,Iso10962ToSecurityType,The following statement contains a magic number: if (cfi.Length != 6) 				return null;
Magic Number,StockSharp.Algo,TraderHelper,C:\repos\stocksharp_stocksharp\Algo\TraderHelper.cs,Iso10962ToSecurityType,The following statement contains a magic number: switch (cfi[0]) 			{ 				case 'E': 					return SecurityTypes.Stock;  				case 'D': 					return SecurityTypes.Bond;  				case 'R': 					return SecurityTypes.Warrant;  				case 'O': 					return SecurityTypes.Option;  				case 'F': 				{ 					switch (cfi[2]) 					{ 						case 'W': 							return SecurityTypes.Swap;  						case 'M': 							return SecurityTypes.Forward;  						default: 							return SecurityTypes.Future; 					} 				}  				case 'M': 				{ 					switch (cfi[1]) 					{ 						case 'R': 						{ 							switch (cfi[2]) 							{ 								case 'I': 									return SecurityTypes.Index;  								case 'C': 									return SecurityTypes.Currency;  								case 'T': 									return SecurityTypes.Commodity; 							}  							break; 						}  						case 'M': 						{ 							switch (cfi[2]) 							{ 								case 'B': 									return SecurityTypes.CryptoCurrency;  								case 'W': 									return SecurityTypes.Weather;  								case 'A': 									return SecurityTypes.Adr;  								case 'C': 									return SecurityTypes.Cfd;  								case 'N': 									return SecurityTypes.News; 							}  							break; 						} 					}  					break; 				} 			}
Magic Number,StockSharp.Algo,TraderHelper,C:\repos\stocksharp_stocksharp\Algo\TraderHelper.cs,Iso10962ToSecurityType,The following statement contains a magic number: switch (cfi[0]) 			{ 				case 'E': 					return SecurityTypes.Stock;  				case 'D': 					return SecurityTypes.Bond;  				case 'R': 					return SecurityTypes.Warrant;  				case 'O': 					return SecurityTypes.Option;  				case 'F': 				{ 					switch (cfi[2]) 					{ 						case 'W': 							return SecurityTypes.Swap;  						case 'M': 							return SecurityTypes.Forward;  						default: 							return SecurityTypes.Future; 					} 				}  				case 'M': 				{ 					switch (cfi[1]) 					{ 						case 'R': 						{ 							switch (cfi[2]) 							{ 								case 'I': 									return SecurityTypes.Index;  								case 'C': 									return SecurityTypes.Currency;  								case 'T': 									return SecurityTypes.Commodity; 							}  							break; 						}  						case 'M': 						{ 							switch (cfi[2]) 							{ 								case 'B': 									return SecurityTypes.CryptoCurrency;  								case 'W': 									return SecurityTypes.Weather;  								case 'A': 									return SecurityTypes.Adr;  								case 'C': 									return SecurityTypes.Cfd;  								case 'N': 									return SecurityTypes.News; 							}  							break; 						} 					}  					break; 				} 			}
Magic Number,StockSharp.Algo,TraderHelper,C:\repos\stocksharp_stocksharp\Algo\TraderHelper.cs,Iso10962ToSecurityType,The following statement contains a magic number: switch (cfi[0]) 			{ 				case 'E': 					return SecurityTypes.Stock;  				case 'D': 					return SecurityTypes.Bond;  				case 'R': 					return SecurityTypes.Warrant;  				case 'O': 					return SecurityTypes.Option;  				case 'F': 				{ 					switch (cfi[2]) 					{ 						case 'W': 							return SecurityTypes.Swap;  						case 'M': 							return SecurityTypes.Forward;  						default: 							return SecurityTypes.Future; 					} 				}  				case 'M': 				{ 					switch (cfi[1]) 					{ 						case 'R': 						{ 							switch (cfi[2]) 							{ 								case 'I': 									return SecurityTypes.Index;  								case 'C': 									return SecurityTypes.Currency;  								case 'T': 									return SecurityTypes.Commodity; 							}  							break; 						}  						case 'M': 						{ 							switch (cfi[2]) 							{ 								case 'B': 									return SecurityTypes.CryptoCurrency;  								case 'W': 									return SecurityTypes.Weather;  								case 'A': 									return SecurityTypes.Adr;  								case 'C': 									return SecurityTypes.Cfd;  								case 'N': 									return SecurityTypes.News; 							}  							break; 						} 					}  					break; 				} 			}
Magic Number,StockSharp.Algo,TraderHelper,C:\repos\stocksharp_stocksharp\Algo\TraderHelper.cs,Iso10962ToOptionType,The following statement contains a magic number: if (cfi.Length < 2) 				throw new ArgumentOutOfRangeException(nameof(cfi)' LocalizedStrings.Str1605Params.Put(cfi));
Magic Number,StockSharp.Algo.Export.Database,CandleTable,C:\repos\stocksharp_stocksharp\Algo\Export\Database\CandleTable.cs,CreateColumns,The following statement contains a magic number: yield return new ColumnDescription(nameof(SecurityId.SecurityCode))  			{  				IsPrimaryKey = true'  				DbType = typeof(string)'  				ValueRestriction = new StringRestriction(256)  			};
Magic Number,StockSharp.Algo.Export.Database,CandleTable,C:\repos\stocksharp_stocksharp\Algo\Export\Database\CandleTable.cs,CreateColumns,The following statement contains a magic number: yield return new ColumnDescription(nameof(SecurityId.BoardCode))  			{  				IsPrimaryKey = true'  				DbType = typeof(string)'  				ValueRestriction = new StringRestriction(256)  			};
Magic Number,StockSharp.Algo.Export.Database,CandleTable,C:\repos\stocksharp_stocksharp\Algo\Export\Database\CandleTable.cs,CreateColumns,The following statement contains a magic number: yield return new ColumnDescription("CandleType")  			{  				IsPrimaryKey = true'  				DbType = typeof(string)'  				ValueRestriction = new StringRestriction(32)  			};
Magic Number,StockSharp.Algo.Export.Database,CandleTable,C:\repos\stocksharp_stocksharp\Algo\Export\Database\CandleTable.cs,CreateColumns,The following statement contains a magic number: yield return new ColumnDescription("Argument")  			{  				IsPrimaryKey = true'  				DbType = typeof(string)'  				ValueRestriction = new StringRestriction(100)  			};
Magic Number,StockSharp.Algo.Export.Database,IndicatorValueTable,C:\repos\stocksharp_stocksharp\Algo\Export\Database\IndicatorValueTable.cs,CreateColumns,The following statement contains a magic number: yield return new ColumnDescription(nameof(SecurityId.SecurityCode))  			{  				DbType = typeof(string)'  				ValueRestriction = new StringRestriction(256)  			};
Magic Number,StockSharp.Algo.Export.Database,IndicatorValueTable,C:\repos\stocksharp_stocksharp\Algo\Export\Database\IndicatorValueTable.cs,CreateColumns,The following statement contains a magic number: yield return new ColumnDescription(nameof(SecurityId.BoardCode))  			{  				DbType = typeof(string)'  				ValueRestriction = new StringRestriction(256)  			};
Magic Number,StockSharp.Algo.Export.Database,IndicatorValueTable,C:\repos\stocksharp_stocksharp\Algo\Export\Database\IndicatorValueTable.cs,CreateColumns,The following statement contains a magic number: for (var i = 0; i < _maxInnerValue; i++)  			{  				yield return new ColumnDescription(nameof(IndicatorValue.Value) + (i + 1))  				{  					DbType = typeof(decimal?)'  					ValueRestriction = new DecimalRestriction { Precision = 10' Scale = 6 }  				};	  			}
Magic Number,StockSharp.Algo.Export.Database,IndicatorValueTable,C:\repos\stocksharp_stocksharp\Algo\Export\Database\IndicatorValueTable.cs,CreateColumns,The following statement contains a magic number: for (var i = 0; i < _maxInnerValue; i++)  			{  				yield return new ColumnDescription(nameof(IndicatorValue.Value) + (i + 1))  				{  					DbType = typeof(decimal?)'  					ValueRestriction = new DecimalRestriction { Precision = 10' Scale = 6 }  				};	  			}
Magic Number,StockSharp.Algo.Export.Database,PositionChangeTable,C:\repos\stocksharp_stocksharp\Algo\Export\Database\PositionChangeTable.cs,CreateColumns,The following statement contains a magic number: yield return new ColumnDescription(nameof(SecurityId.SecurityCode))  			{  				DbType = typeof(string)'  				ValueRestriction = new StringRestriction(256)  			};
Magic Number,StockSharp.Algo.Export.Database,PositionChangeTable,C:\repos\stocksharp_stocksharp\Algo\Export\Database\PositionChangeTable.cs,CreateColumns,The following statement contains a magic number: yield return new ColumnDescription(nameof(SecurityId.BoardCode))  			{  				DbType = typeof(string)'  				ValueRestriction = new StringRestriction(256)  			};
Magic Number,StockSharp.Algo.Export.Database,PositionChangeTable,C:\repos\stocksharp_stocksharp\Algo\Export\Database\PositionChangeTable.cs,CreateColumns,The following statement contains a magic number: yield return new ColumnDescription(nameof(PositionChangeMessage.PortfolioName))  			{  				DbType = typeof(string)'  				ValueRestriction = new StringRestriction(256)  			};
Magic Number,StockSharp.Algo.Export.Database,PositionChangeTable,C:\repos\stocksharp_stocksharp\Algo\Export\Database\PositionChangeTable.cs,CreateColumns,The following statement contains a magic number: yield return new ColumnDescription(nameof(PositionChangeMessage.ClientCode))  			{  				DbType = typeof(string)'  				ValueRestriction = new StringRestriction(256)  			};
Magic Number,StockSharp.Algo.Export.Database,PositionChangeTable,C:\repos\stocksharp_stocksharp\Algo\Export\Database\PositionChangeTable.cs,CreateColumns,The following statement contains a magic number: yield return new ColumnDescription(nameof(PositionChangeMessage.DepoName))  			{  				DbType = typeof(string)'  				ValueRestriction = new StringRestriction(256)  			};
Magic Number,StockSharp.Algo.Export.Database,SecurityTable,C:\repos\stocksharp_stocksharp\Algo\Export\Database\SecurityTable.cs,CreateColumns,The following statement contains a magic number: yield return new ColumnDescription(nameof(SecurityId.SecurityCode))  			{  				IsPrimaryKey = true'  				DbType = typeof(string)'  				ValueRestriction = new StringRestriction(256)  			};
Magic Number,StockSharp.Algo.Export.Database,SecurityTable,C:\repos\stocksharp_stocksharp\Algo\Export\Database\SecurityTable.cs,CreateColumns,The following statement contains a magic number: yield return new ColumnDescription(nameof(SecurityId.BoardCode))  			{  				IsPrimaryKey = true'  				DbType = typeof(string)'  				ValueRestriction = new StringRestriction(256)  			};
Magic Number,StockSharp.Algo.Export.Database,SecurityTable,C:\repos\stocksharp_stocksharp\Algo\Export\Database\SecurityTable.cs,CreateColumns,The following statement contains a magic number: yield return new ColumnDescription(nameof(SecurityMessage.SecurityType))  			{  				DbType = typeof(string)'  				ValueRestriction = new StringRestriction(32)  			};
Magic Number,StockSharp.Algo.Export.Database,SecurityTable,C:\repos\stocksharp_stocksharp\Algo\Export\Database\SecurityTable.cs,CreateColumns,The following statement contains a magic number: yield return new ColumnDescription(nameof(SecurityMessage.OptionType))  			{  				DbType = typeof(string)'  				ValueRestriction = new StringRestriction(32)  			};
Magic Number,StockSharp.Algo.Export.Database,SecurityTable,C:\repos\stocksharp_stocksharp\Algo\Export\Database\SecurityTable.cs,CreateColumns,The following statement contains a magic number: yield return new ColumnDescription(nameof(SecurityMessage.BinaryOptionType))  			{  				DbType = typeof(string)'  				ValueRestriction = new StringRestriction(256)  			};
Magic Number,StockSharp.Algo.Export.Database,SecurityTable,C:\repos\stocksharp_stocksharp\Algo\Export\Database\SecurityTable.cs,CreateColumns,The following statement contains a magic number: yield return new ColumnDescription(nameof(SecurityMessage.UnderlyingSecurityCode))  			{  				DbType = typeof(string)'  				ValueRestriction = new StringRestriction(256)  			};
Magic Number,StockSharp.Algo.Export.Database,SecurityTable,C:\repos\stocksharp_stocksharp\Algo\Export\Database\SecurityTable.cs,CreateColumns,The following statement contains a magic number: yield return new ColumnDescription(nameof(SecurityMessage.UnderlyingSecurityType))  			{  				DbType = typeof(string)'  				ValueRestriction = new StringRestriction(32)  			};
Magic Number,StockSharp.Algo.Export.Database,SecurityTable,C:\repos\stocksharp_stocksharp\Algo\Export\Database\SecurityTable.cs,CreateColumns,The following statement contains a magic number: yield return new ColumnDescription(nameof(SecurityMessage.Currency))  			{  				DbType = typeof(string)'  				ValueRestriction = new StringRestriction(3)  			};
Magic Number,StockSharp.Algo.Export.Database,SecurityTable,C:\repos\stocksharp_stocksharp\Algo\Export\Database\SecurityTable.cs,CreateColumns,The following statement contains a magic number: yield return new ColumnDescription(nameof(SecurityMessage.Name))  			{  				DbType = typeof(string)'  				ValueRestriction = new StringRestriction(256)  			};
Magic Number,StockSharp.Algo.Export.Database,SecurityTable,C:\repos\stocksharp_stocksharp\Algo\Export\Database\SecurityTable.cs,CreateColumns,The following statement contains a magic number: yield return new ColumnDescription(nameof(SecurityMessage.ShortName))  			{  				DbType = typeof(string)'  				ValueRestriction = new StringRestriction(64)  			};
Magic Number,StockSharp.Algo.Export.Database,SecurityTable,C:\repos\stocksharp_stocksharp\Algo\Export\Database\SecurityTable.cs,CreateColumns,The following statement contains a magic number: yield return new ColumnDescription(nameof(SecurityMessage.CfiCode))  			{  				DbType = typeof(string)'  				ValueRestriction = new StringRestriction(6)  			};
Magic Number,StockSharp.Algo.Export.Database,SecurityTable,C:\repos\stocksharp_stocksharp\Algo\Export\Database\SecurityTable.cs,CreateColumns,The following statement contains a magic number: yield return new ColumnDescription(nameof(SecurityId.Bloomberg))  			{  				DbType = typeof(string)'  				ValueRestriction = new StringRestriction(16)  			};
Magic Number,StockSharp.Algo.Export.Database,SecurityTable,C:\repos\stocksharp_stocksharp\Algo\Export\Database\SecurityTable.cs,CreateColumns,The following statement contains a magic number: yield return new ColumnDescription(nameof(SecurityId.Cusip))  			{  				DbType = typeof(string)'  				ValueRestriction = new StringRestriction(16)  			};
Magic Number,StockSharp.Algo.Export.Database,SecurityTable,C:\repos\stocksharp_stocksharp\Algo\Export\Database\SecurityTable.cs,CreateColumns,The following statement contains a magic number: yield return new ColumnDescription(nameof(SecurityId.IQFeed))  			{  				DbType = typeof(string)'  				ValueRestriction = new StringRestriction(16)  			};
Magic Number,StockSharp.Algo.Export.Database,SecurityTable,C:\repos\stocksharp_stocksharp\Algo\Export\Database\SecurityTable.cs,CreateColumns,The following statement contains a magic number: yield return new ColumnDescription(nameof(SecurityId.Isin))  			{  				DbType = typeof(string)'  				ValueRestriction = new StringRestriction(16)  			};
Magic Number,StockSharp.Algo.Export.Database,SecurityTable,C:\repos\stocksharp_stocksharp\Algo\Export\Database\SecurityTable.cs,CreateColumns,The following statement contains a magic number: yield return new ColumnDescription(nameof(SecurityId.Plaza))  			{  				DbType = typeof(string)'  				ValueRestriction = new StringRestriction(16)  			};
Magic Number,StockSharp.Algo.Export.Database,SecurityTable,C:\repos\stocksharp_stocksharp\Algo\Export\Database\SecurityTable.cs,CreateColumns,The following statement contains a magic number: yield return new ColumnDescription(nameof(SecurityId.Ric))  			{  				DbType = typeof(string)'  				ValueRestriction = new StringRestriction(16)  			};
Magic Number,StockSharp.Algo.Export.Database,SecurityTable,C:\repos\stocksharp_stocksharp\Algo\Export\Database\SecurityTable.cs,CreateColumns,The following statement contains a magic number: yield return new ColumnDescription(nameof(SecurityId.Sedol))  			{  				DbType = typeof(string)'  				ValueRestriction = new StringRestriction(16)  			};
Magic Number,StockSharp.Algo.Export.Database,TransactionTable,C:\repos\stocksharp_stocksharp\Algo\Export\Database\TransactionTable.cs,CreateColumns,The following statement contains a magic number: yield return new ColumnDescription(nameof(SecurityId.SecurityCode))  			{  				DbType = typeof(string)'  				ValueRestriction = new StringRestriction(256)  			};
Magic Number,StockSharp.Algo.Export.Database,TransactionTable,C:\repos\stocksharp_stocksharp\Algo\Export\Database\TransactionTable.cs,CreateColumns,The following statement contains a magic number: yield return new ColumnDescription(nameof(SecurityId.BoardCode))  			{  				DbType = typeof(string)'  				ValueRestriction = new StringRestriction(256)  			};
Magic Number,StockSharp.Algo.Export.Database,TransactionTable,C:\repos\stocksharp_stocksharp\Algo\Export\Database\TransactionTable.cs,CreateColumns,The following statement contains a magic number: yield return new ColumnDescription(nameof(ExecutionMessage.PortfolioName))  			{  				DbType = typeof(string)'  				ValueRestriction = new StringRestriction(32)  			};
Magic Number,StockSharp.Algo.Export.Database,TransactionTable,C:\repos\stocksharp_stocksharp\Algo\Export\Database\TransactionTable.cs,CreateColumns,The following statement contains a magic number: yield return new ColumnDescription(nameof(ExecutionMessage.ClientCode))  			{  				DbType = typeof(string)'  				ValueRestriction = new StringRestriction(32)  			};
Magic Number,StockSharp.Algo.Export.Database,TransactionTable,C:\repos\stocksharp_stocksharp\Algo\Export\Database\TransactionTable.cs,CreateColumns,The following statement contains a magic number: yield return new ColumnDescription(nameof(ExecutionMessage.BrokerCode))  			{  				DbType = typeof(string)'  				ValueRestriction = new StringRestriction(32)  			};
Magic Number,StockSharp.Algo.Export.Database,TransactionTable,C:\repos\stocksharp_stocksharp\Algo\Export\Database\TransactionTable.cs,CreateColumns,The following statement contains a magic number: yield return new ColumnDescription(nameof(ExecutionMessage.DepoName))  			{  				DbType = typeof(string)'  				ValueRestriction = new StringRestriction(32)  			};
Magic Number,StockSharp.Algo.Export.Database,TransactionTable,C:\repos\stocksharp_stocksharp\Algo\Export\Database\TransactionTable.cs,CreateColumns,The following statement contains a magic number: yield return new ColumnDescription(nameof(ExecutionMessage.OrderId))  			{  				DbType = typeof(string)'  				ValueRestriction = new StringRestriction(32)  			};
Magic Number,StockSharp.Algo.Export.Database,TransactionTable,C:\repos\stocksharp_stocksharp\Algo\Export\Database\TransactionTable.cs,CreateColumns,The following statement contains a magic number: yield return new ColumnDescription(nameof(ExecutionMessage.TradeId))  			{  				DbType = typeof(string)'  				ValueRestriction = new StringRestriction(32)  			};
Magic Number,StockSharp.Algo.Export.Database,TransactionTable,C:\repos\stocksharp_stocksharp\Algo\Export\Database\TransactionTable.cs,CreateColumns,The following statement contains a magic number: yield return new ColumnDescription(nameof(ExecutionMessage.Comment))  			{  				DbType = typeof(string)'  				ValueRestriction = new StringRestriction(1024)  			};
Magic Number,StockSharp.Algo.Export.Database,TransactionTable,C:\repos\stocksharp_stocksharp\Algo\Export\Database\TransactionTable.cs,CreateColumns,The following statement contains a magic number: yield return new ColumnDescription(nameof(ExecutionMessage.SystemComment))  			{  				DbType = typeof(string)'  				ValueRestriction = new StringRestriction(1024)  			};
Magic Number,StockSharp.Algo.Export.Database,TransactionTable,C:\repos\stocksharp_stocksharp\Algo\Export\Database\TransactionTable.cs,CreateColumns,The following statement contains a magic number: yield return new ColumnDescription(nameof(ExecutionMessage.Error))  			{  				DbType = typeof(string)'  				ValueRestriction = new StringRestriction(1024)  			};
Magic Number,StockSharp.Algo.Export.Database,Level1Table,C:\repos\stocksharp_stocksharp\Algo\Export\Database\Level1Table.cs,CreateColumns,The following statement contains a magic number: yield return new ColumnDescription(nameof(SecurityId.SecurityCode))  			{  				DbType = typeof(string)'  				ValueRestriction = new StringRestriction(256)  			};
Magic Number,StockSharp.Algo.Export.Database,Level1Table,C:\repos\stocksharp_stocksharp\Algo\Export\Database\Level1Table.cs,CreateColumns,The following statement contains a magic number: yield return new ColumnDescription(nameof(SecurityId.BoardCode))  			{  				DbType = typeof(string)'  				ValueRestriction = new StringRestriction(256)  			};
Magic Number,StockSharp.Algo.Export.Database,MarketDepthQuoteTable,C:\repos\stocksharp_stocksharp\Algo\Export\Database\MarketDepthQuoteTable.cs,CreateColumns,The following statement contains a magic number: yield return new ColumnDescription(nameof(SecurityId.SecurityCode))  			{  				IsPrimaryKey = true'  				DbType = typeof(string)'  				ValueRestriction = new StringRestriction(256)  			};
Magic Number,StockSharp.Algo.Export.Database,MarketDepthQuoteTable,C:\repos\stocksharp_stocksharp\Algo\Export\Database\MarketDepthQuoteTable.cs,CreateColumns,The following statement contains a magic number: yield return new ColumnDescription(nameof(SecurityId.BoardCode))  			{  				IsPrimaryKey = true'  				DbType = typeof(string)'  				ValueRestriction = new StringRestriction(256)  			};
Magic Number,StockSharp.Algo.Export.Database,NewsTable,C:\repos\stocksharp_stocksharp\Algo\Export\Database\NewsTable.cs,CreateColumns,The following statement contains a magic number: yield return new ColumnDescription(nameof(SecurityId.SecurityCode))  			{  				DbType = typeof(string)'  				ValueRestriction = new StringRestriction(256)  			};
Magic Number,StockSharp.Algo.Export.Database,NewsTable,C:\repos\stocksharp_stocksharp\Algo\Export\Database\NewsTable.cs,CreateColumns,The following statement contains a magic number: yield return new ColumnDescription(nameof(NewsMessage.BoardCode))  			{  				DbType = typeof(string)'  				ValueRestriction = new StringRestriction(256)  			};
Magic Number,StockSharp.Algo.Export.Database,NewsTable,C:\repos\stocksharp_stocksharp\Algo\Export\Database\NewsTable.cs,CreateColumns,The following statement contains a magic number: yield return new ColumnDescription(nameof(NewsMessage.Headline))  			{  				DbType = typeof(string)'  				ValueRestriction = new StringRestriction(256)  			};
Magic Number,StockSharp.Algo.Export.Database,NewsTable,C:\repos\stocksharp_stocksharp\Algo\Export\Database\NewsTable.cs,CreateColumns,The following statement contains a magic number: yield return new ColumnDescription(nameof(NewsMessage.Source))  			{  				DbType = typeof(string)'  				ValueRestriction = new StringRestriction(256)  			};
Magic Number,StockSharp.Algo.Export.Database,NewsTable,C:\repos\stocksharp_stocksharp\Algo\Export\Database\NewsTable.cs,CreateColumns,The following statement contains a magic number: yield return new ColumnDescription(nameof(NewsMessage.Url))  			{  				DbType = typeof(string)'  				ValueRestriction = new StringRestriction(1024)  			};
Magic Number,StockSharp.Algo.Export.Database,OrderLogTable,C:\repos\stocksharp_stocksharp\Algo\Export\Database\OrderLogTable.cs,CreateColumns,The following statement contains a magic number: yield return new ColumnDescription(nameof(ExecutionMessage.OrderId))  			{  				DbType = typeof(string)'  				ValueRestriction = new StringRestriction(32)  			};
Magic Number,StockSharp.Algo.Export.Database,OrderLogTable,C:\repos\stocksharp_stocksharp\Algo\Export\Database\OrderLogTable.cs,CreateColumns,The following statement contains a magic number: yield return new ColumnDescription(nameof(SecurityId.SecurityCode))  			{  				DbType = typeof(string)'  				ValueRestriction = new StringRestriction(256)  			};
Magic Number,StockSharp.Algo.Export.Database,OrderLogTable,C:\repos\stocksharp_stocksharp\Algo\Export\Database\OrderLogTable.cs,CreateColumns,The following statement contains a magic number: yield return new ColumnDescription(nameof(SecurityId.BoardCode))  			{  				DbType = typeof(string)'  				ValueRestriction = new StringRestriction(256)  			};
Magic Number,StockSharp.Algo.Export.Database,OrderLogTable,C:\repos\stocksharp_stocksharp\Algo\Export\Database\OrderLogTable.cs,CreateColumns,The following statement contains a magic number: yield return new ColumnDescription(nameof(ExecutionMessage.TradeId))  			{  				DbType = typeof(string)'  				ValueRestriction = new StringRestriction(32)  			};
Magic Number,StockSharp.Algo.Export.Database,DecimalRestriction,C:\repos\stocksharp_stocksharp\Algo\Export\Database\Table.cs,DecimalRestriction,The following statement contains a magic number: Precision = 15;
Magic Number,StockSharp.Algo.Export.Database,DecimalRestriction,C:\repos\stocksharp_stocksharp\Algo\Export\Database\Table.cs,DecimalRestriction,The following statement contains a magic number: Scale = 5;
Magic Number,StockSharp.Algo.Export.Database,TradeTable,C:\repos\stocksharp_stocksharp\Algo\Export\Database\TradeTable.cs,CreateColumns,The following statement contains a magic number: yield return new ColumnDescription(nameof(ExecutionMessage.TradeId))  			{  				IsPrimaryKey = true'  				DbType = typeof(string)'  				ValueRestriction = new StringRestriction(32)  			};
Magic Number,StockSharp.Algo.Export.Database,TradeTable,C:\repos\stocksharp_stocksharp\Algo\Export\Database\TradeTable.cs,CreateColumns,The following statement contains a magic number: yield return new ColumnDescription(nameof(SecurityId.SecurityCode))  			{  				IsPrimaryKey = true'  				DbType = typeof(string)'  				ValueRestriction = new StringRestriction(256)  			};
Magic Number,StockSharp.Algo.Export.Database,TradeTable,C:\repos\stocksharp_stocksharp\Algo\Export\Database\TradeTable.cs,CreateColumns,The following statement contains a magic number: yield return new ColumnDescription(nameof(SecurityId.BoardCode))  			{  				IsPrimaryKey = true'  				DbType = typeof(string)'  				ValueRestriction = new StringRestriction(256)  			};
Magic Number,StockSharp.Algo.Export,ExcelExporter,C:\repos\stocksharp_stocksharp\Algo\Export\ExcelExporter.cs,Export,The following statement contains a magic number: switch ((ExecutionTypes)Arg)  			{  				case ExecutionTypes.Tick:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Id).SetStyle(0' typeof(string))  							.SetCell(1' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(2' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(3' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(4' 0' LocalizedStrings.Str128)  							.SetCell(5' 0' LocalizedStrings.OI).SetStyle(5' typeof(decimal))  							.SetCell(6' 0' "UP_DOWN").SetStyle(5' typeof(bool));    						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  								.SetCell(1' index' message.ServerTime)  								.SetCell(2' index' message.TradePrice)  								.SetCell(3' index' message.TradeVolume)  								.SetCell(4' index' message.OriginSide)  								.SetCell(5' index' message.OpenInterest)  								.SetCell(6' index' message.IsUpTick);    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				case ExecutionTypes.OrderLog:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Id).SetStyle(0' typeof(string))  							.SetCell(1' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(2' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(3' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(4' 0' LocalizedStrings.Str128)  							.SetCell(5' 0' LocalizedStrings.Str722)  							.SetCell(6' 0' LocalizedStrings.Type)  							.SetCell(7' 0' LocalizedStrings.Str342)  							.SetCell(8' 0' LocalizedStrings.Str723).SetStyle(8' typeof(string))  							.SetCell(9' 0' LocalizedStrings.Str724).SetStyle(9' typeof(decimal))  							.SetCell(10' 0' LocalizedStrings.Str725).SetStyle(10' typeof(decimal));    						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.OrderId == null ? message.OrderStringId : message.OrderId.To<string>())  								.SetCell(1' index' message.ServerTime)  								.SetCell(2' index' message.OrderPrice)  								.SetCell(3' index' message.OrderVolume)  								.SetCell(4' index' message.Side)  								.SetCell(5' index' message.OrderState)  								.SetCell(6' index' message.TimeInForce)  								.SetCell(7' index' message.IsSystem);    							if (message.TradePrice != null)  							{  								worker  									.SetCell(8' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  									.SetCell(9' index' message.TradePrice)  									.SetCell(10' index' message.OpenInterest);  							}    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				case ExecutionTypes.Transaction:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(1' 0' LocalizedStrings.Portfolio)  							.SetCell(2' 0' LocalizedStrings.TransactionId)  							.SetCell(3' 0' LocalizedStrings.OrderId)  							.SetCell(4' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(5' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(6' 0' LocalizedStrings.Str1325).SetStyle(3' typeof(decimal))  							.SetCell(7' 0' LocalizedStrings.Str128)  							.SetCell(8' 0' LocalizedStrings.Str132)  							.SetCell(9' 0' LocalizedStrings.Str134)  							.SetCell(10' 0' LocalizedStrings.Str506)  							.SetCell(11' 0' LocalizedStrings.TradePrice).SetStyle(3' typeof(decimal));    						worker.SetConditionalFormatting(7' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(7' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Active)' null' Colors.Blue);  						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Done)' null' Colors.Green);  						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Failed)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.ServerTime)  								.SetCell(1' index' message.PortfolioName)  								.SetCell(2' index' message.TransactionId)  								.SetCell(3' index' message.OrderId == null ? message.OrderStringId : message.OrderId.To<string>())  								.SetCell(4' index' message.OrderPrice)  								.SetCell(5' index' message.OrderVolume)  								.SetCell(6' index' message.Balance)  								.SetCell(7' index' message.Side)  								.SetCell(8' index' message.OrderType)  								.SetCell(9' index' message.OrderState)  								.SetCell(10' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  								.SetCell(11' index' message.TradePrice)  								.SetCell(12' index' message.HasOrderInfo)  								.SetCell(13' index' message.HasTradeInfo);    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				default:  					throw new ArgumentOutOfRangeException();  			}
Magic Number,StockSharp.Algo.Export,ExcelExporter,C:\repos\stocksharp_stocksharp\Algo\Export\ExcelExporter.cs,Export,The following statement contains a magic number: switch ((ExecutionTypes)Arg)  			{  				case ExecutionTypes.Tick:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Id).SetStyle(0' typeof(string))  							.SetCell(1' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(2' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(3' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(4' 0' LocalizedStrings.Str128)  							.SetCell(5' 0' LocalizedStrings.OI).SetStyle(5' typeof(decimal))  							.SetCell(6' 0' "UP_DOWN").SetStyle(5' typeof(bool));    						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  								.SetCell(1' index' message.ServerTime)  								.SetCell(2' index' message.TradePrice)  								.SetCell(3' index' message.TradeVolume)  								.SetCell(4' index' message.OriginSide)  								.SetCell(5' index' message.OpenInterest)  								.SetCell(6' index' message.IsUpTick);    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				case ExecutionTypes.OrderLog:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Id).SetStyle(0' typeof(string))  							.SetCell(1' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(2' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(3' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(4' 0' LocalizedStrings.Str128)  							.SetCell(5' 0' LocalizedStrings.Str722)  							.SetCell(6' 0' LocalizedStrings.Type)  							.SetCell(7' 0' LocalizedStrings.Str342)  							.SetCell(8' 0' LocalizedStrings.Str723).SetStyle(8' typeof(string))  							.SetCell(9' 0' LocalizedStrings.Str724).SetStyle(9' typeof(decimal))  							.SetCell(10' 0' LocalizedStrings.Str725).SetStyle(10' typeof(decimal));    						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.OrderId == null ? message.OrderStringId : message.OrderId.To<string>())  								.SetCell(1' index' message.ServerTime)  								.SetCell(2' index' message.OrderPrice)  								.SetCell(3' index' message.OrderVolume)  								.SetCell(4' index' message.Side)  								.SetCell(5' index' message.OrderState)  								.SetCell(6' index' message.TimeInForce)  								.SetCell(7' index' message.IsSystem);    							if (message.TradePrice != null)  							{  								worker  									.SetCell(8' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  									.SetCell(9' index' message.TradePrice)  									.SetCell(10' index' message.OpenInterest);  							}    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				case ExecutionTypes.Transaction:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(1' 0' LocalizedStrings.Portfolio)  							.SetCell(2' 0' LocalizedStrings.TransactionId)  							.SetCell(3' 0' LocalizedStrings.OrderId)  							.SetCell(4' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(5' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(6' 0' LocalizedStrings.Str1325).SetStyle(3' typeof(decimal))  							.SetCell(7' 0' LocalizedStrings.Str128)  							.SetCell(8' 0' LocalizedStrings.Str132)  							.SetCell(9' 0' LocalizedStrings.Str134)  							.SetCell(10' 0' LocalizedStrings.Str506)  							.SetCell(11' 0' LocalizedStrings.TradePrice).SetStyle(3' typeof(decimal));    						worker.SetConditionalFormatting(7' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(7' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Active)' null' Colors.Blue);  						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Done)' null' Colors.Green);  						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Failed)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.ServerTime)  								.SetCell(1' index' message.PortfolioName)  								.SetCell(2' index' message.TransactionId)  								.SetCell(3' index' message.OrderId == null ? message.OrderStringId : message.OrderId.To<string>())  								.SetCell(4' index' message.OrderPrice)  								.SetCell(5' index' message.OrderVolume)  								.SetCell(6' index' message.Balance)  								.SetCell(7' index' message.Side)  								.SetCell(8' index' message.OrderType)  								.SetCell(9' index' message.OrderState)  								.SetCell(10' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  								.SetCell(11' index' message.TradePrice)  								.SetCell(12' index' message.HasOrderInfo)  								.SetCell(13' index' message.HasTradeInfo);    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				default:  					throw new ArgumentOutOfRangeException();  			}
Magic Number,StockSharp.Algo.Export,ExcelExporter,C:\repos\stocksharp_stocksharp\Algo\Export\ExcelExporter.cs,Export,The following statement contains a magic number: switch ((ExecutionTypes)Arg)  			{  				case ExecutionTypes.Tick:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Id).SetStyle(0' typeof(string))  							.SetCell(1' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(2' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(3' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(4' 0' LocalizedStrings.Str128)  							.SetCell(5' 0' LocalizedStrings.OI).SetStyle(5' typeof(decimal))  							.SetCell(6' 0' "UP_DOWN").SetStyle(5' typeof(bool));    						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  								.SetCell(1' index' message.ServerTime)  								.SetCell(2' index' message.TradePrice)  								.SetCell(3' index' message.TradeVolume)  								.SetCell(4' index' message.OriginSide)  								.SetCell(5' index' message.OpenInterest)  								.SetCell(6' index' message.IsUpTick);    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				case ExecutionTypes.OrderLog:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Id).SetStyle(0' typeof(string))  							.SetCell(1' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(2' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(3' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(4' 0' LocalizedStrings.Str128)  							.SetCell(5' 0' LocalizedStrings.Str722)  							.SetCell(6' 0' LocalizedStrings.Type)  							.SetCell(7' 0' LocalizedStrings.Str342)  							.SetCell(8' 0' LocalizedStrings.Str723).SetStyle(8' typeof(string))  							.SetCell(9' 0' LocalizedStrings.Str724).SetStyle(9' typeof(decimal))  							.SetCell(10' 0' LocalizedStrings.Str725).SetStyle(10' typeof(decimal));    						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.OrderId == null ? message.OrderStringId : message.OrderId.To<string>())  								.SetCell(1' index' message.ServerTime)  								.SetCell(2' index' message.OrderPrice)  								.SetCell(3' index' message.OrderVolume)  								.SetCell(4' index' message.Side)  								.SetCell(5' index' message.OrderState)  								.SetCell(6' index' message.TimeInForce)  								.SetCell(7' index' message.IsSystem);    							if (message.TradePrice != null)  							{  								worker  									.SetCell(8' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  									.SetCell(9' index' message.TradePrice)  									.SetCell(10' index' message.OpenInterest);  							}    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				case ExecutionTypes.Transaction:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(1' 0' LocalizedStrings.Portfolio)  							.SetCell(2' 0' LocalizedStrings.TransactionId)  							.SetCell(3' 0' LocalizedStrings.OrderId)  							.SetCell(4' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(5' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(6' 0' LocalizedStrings.Str1325).SetStyle(3' typeof(decimal))  							.SetCell(7' 0' LocalizedStrings.Str128)  							.SetCell(8' 0' LocalizedStrings.Str132)  							.SetCell(9' 0' LocalizedStrings.Str134)  							.SetCell(10' 0' LocalizedStrings.Str506)  							.SetCell(11' 0' LocalizedStrings.TradePrice).SetStyle(3' typeof(decimal));    						worker.SetConditionalFormatting(7' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(7' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Active)' null' Colors.Blue);  						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Done)' null' Colors.Green);  						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Failed)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.ServerTime)  								.SetCell(1' index' message.PortfolioName)  								.SetCell(2' index' message.TransactionId)  								.SetCell(3' index' message.OrderId == null ? message.OrderStringId : message.OrderId.To<string>())  								.SetCell(4' index' message.OrderPrice)  								.SetCell(5' index' message.OrderVolume)  								.SetCell(6' index' message.Balance)  								.SetCell(7' index' message.Side)  								.SetCell(8' index' message.OrderType)  								.SetCell(9' index' message.OrderState)  								.SetCell(10' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  								.SetCell(11' index' message.TradePrice)  								.SetCell(12' index' message.HasOrderInfo)  								.SetCell(13' index' message.HasTradeInfo);    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				default:  					throw new ArgumentOutOfRangeException();  			}
Magic Number,StockSharp.Algo.Export,ExcelExporter,C:\repos\stocksharp_stocksharp\Algo\Export\ExcelExporter.cs,Export,The following statement contains a magic number: switch ((ExecutionTypes)Arg)  			{  				case ExecutionTypes.Tick:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Id).SetStyle(0' typeof(string))  							.SetCell(1' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(2' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(3' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(4' 0' LocalizedStrings.Str128)  							.SetCell(5' 0' LocalizedStrings.OI).SetStyle(5' typeof(decimal))  							.SetCell(6' 0' "UP_DOWN").SetStyle(5' typeof(bool));    						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  								.SetCell(1' index' message.ServerTime)  								.SetCell(2' index' message.TradePrice)  								.SetCell(3' index' message.TradeVolume)  								.SetCell(4' index' message.OriginSide)  								.SetCell(5' index' message.OpenInterest)  								.SetCell(6' index' message.IsUpTick);    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				case ExecutionTypes.OrderLog:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Id).SetStyle(0' typeof(string))  							.SetCell(1' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(2' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(3' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(4' 0' LocalizedStrings.Str128)  							.SetCell(5' 0' LocalizedStrings.Str722)  							.SetCell(6' 0' LocalizedStrings.Type)  							.SetCell(7' 0' LocalizedStrings.Str342)  							.SetCell(8' 0' LocalizedStrings.Str723).SetStyle(8' typeof(string))  							.SetCell(9' 0' LocalizedStrings.Str724).SetStyle(9' typeof(decimal))  							.SetCell(10' 0' LocalizedStrings.Str725).SetStyle(10' typeof(decimal));    						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.OrderId == null ? message.OrderStringId : message.OrderId.To<string>())  								.SetCell(1' index' message.ServerTime)  								.SetCell(2' index' message.OrderPrice)  								.SetCell(3' index' message.OrderVolume)  								.SetCell(4' index' message.Side)  								.SetCell(5' index' message.OrderState)  								.SetCell(6' index' message.TimeInForce)  								.SetCell(7' index' message.IsSystem);    							if (message.TradePrice != null)  							{  								worker  									.SetCell(8' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  									.SetCell(9' index' message.TradePrice)  									.SetCell(10' index' message.OpenInterest);  							}    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				case ExecutionTypes.Transaction:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(1' 0' LocalizedStrings.Portfolio)  							.SetCell(2' 0' LocalizedStrings.TransactionId)  							.SetCell(3' 0' LocalizedStrings.OrderId)  							.SetCell(4' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(5' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(6' 0' LocalizedStrings.Str1325).SetStyle(3' typeof(decimal))  							.SetCell(7' 0' LocalizedStrings.Str128)  							.SetCell(8' 0' LocalizedStrings.Str132)  							.SetCell(9' 0' LocalizedStrings.Str134)  							.SetCell(10' 0' LocalizedStrings.Str506)  							.SetCell(11' 0' LocalizedStrings.TradePrice).SetStyle(3' typeof(decimal));    						worker.SetConditionalFormatting(7' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(7' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Active)' null' Colors.Blue);  						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Done)' null' Colors.Green);  						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Failed)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.ServerTime)  								.SetCell(1' index' message.PortfolioName)  								.SetCell(2' index' message.TransactionId)  								.SetCell(3' index' message.OrderId == null ? message.OrderStringId : message.OrderId.To<string>())  								.SetCell(4' index' message.OrderPrice)  								.SetCell(5' index' message.OrderVolume)  								.SetCell(6' index' message.Balance)  								.SetCell(7' index' message.Side)  								.SetCell(8' index' message.OrderType)  								.SetCell(9' index' message.OrderState)  								.SetCell(10' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  								.SetCell(11' index' message.TradePrice)  								.SetCell(12' index' message.HasOrderInfo)  								.SetCell(13' index' message.HasTradeInfo);    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				default:  					throw new ArgumentOutOfRangeException();  			}
Magic Number,StockSharp.Algo.Export,ExcelExporter,C:\repos\stocksharp_stocksharp\Algo\Export\ExcelExporter.cs,Export,The following statement contains a magic number: switch ((ExecutionTypes)Arg)  			{  				case ExecutionTypes.Tick:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Id).SetStyle(0' typeof(string))  							.SetCell(1' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(2' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(3' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(4' 0' LocalizedStrings.Str128)  							.SetCell(5' 0' LocalizedStrings.OI).SetStyle(5' typeof(decimal))  							.SetCell(6' 0' "UP_DOWN").SetStyle(5' typeof(bool));    						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  								.SetCell(1' index' message.ServerTime)  								.SetCell(2' index' message.TradePrice)  								.SetCell(3' index' message.TradeVolume)  								.SetCell(4' index' message.OriginSide)  								.SetCell(5' index' message.OpenInterest)  								.SetCell(6' index' message.IsUpTick);    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				case ExecutionTypes.OrderLog:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Id).SetStyle(0' typeof(string))  							.SetCell(1' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(2' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(3' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(4' 0' LocalizedStrings.Str128)  							.SetCell(5' 0' LocalizedStrings.Str722)  							.SetCell(6' 0' LocalizedStrings.Type)  							.SetCell(7' 0' LocalizedStrings.Str342)  							.SetCell(8' 0' LocalizedStrings.Str723).SetStyle(8' typeof(string))  							.SetCell(9' 0' LocalizedStrings.Str724).SetStyle(9' typeof(decimal))  							.SetCell(10' 0' LocalizedStrings.Str725).SetStyle(10' typeof(decimal));    						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.OrderId == null ? message.OrderStringId : message.OrderId.To<string>())  								.SetCell(1' index' message.ServerTime)  								.SetCell(2' index' message.OrderPrice)  								.SetCell(3' index' message.OrderVolume)  								.SetCell(4' index' message.Side)  								.SetCell(5' index' message.OrderState)  								.SetCell(6' index' message.TimeInForce)  								.SetCell(7' index' message.IsSystem);    							if (message.TradePrice != null)  							{  								worker  									.SetCell(8' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  									.SetCell(9' index' message.TradePrice)  									.SetCell(10' index' message.OpenInterest);  							}    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				case ExecutionTypes.Transaction:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(1' 0' LocalizedStrings.Portfolio)  							.SetCell(2' 0' LocalizedStrings.TransactionId)  							.SetCell(3' 0' LocalizedStrings.OrderId)  							.SetCell(4' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(5' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(6' 0' LocalizedStrings.Str1325).SetStyle(3' typeof(decimal))  							.SetCell(7' 0' LocalizedStrings.Str128)  							.SetCell(8' 0' LocalizedStrings.Str132)  							.SetCell(9' 0' LocalizedStrings.Str134)  							.SetCell(10' 0' LocalizedStrings.Str506)  							.SetCell(11' 0' LocalizedStrings.TradePrice).SetStyle(3' typeof(decimal));    						worker.SetConditionalFormatting(7' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(7' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Active)' null' Colors.Blue);  						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Done)' null' Colors.Green);  						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Failed)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.ServerTime)  								.SetCell(1' index' message.PortfolioName)  								.SetCell(2' index' message.TransactionId)  								.SetCell(3' index' message.OrderId == null ? message.OrderStringId : message.OrderId.To<string>())  								.SetCell(4' index' message.OrderPrice)  								.SetCell(5' index' message.OrderVolume)  								.SetCell(6' index' message.Balance)  								.SetCell(7' index' message.Side)  								.SetCell(8' index' message.OrderType)  								.SetCell(9' index' message.OrderState)  								.SetCell(10' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  								.SetCell(11' index' message.TradePrice)  								.SetCell(12' index' message.HasOrderInfo)  								.SetCell(13' index' message.HasTradeInfo);    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				default:  					throw new ArgumentOutOfRangeException();  			}
Magic Number,StockSharp.Algo.Export,ExcelExporter,C:\repos\stocksharp_stocksharp\Algo\Export\ExcelExporter.cs,Export,The following statement contains a magic number: switch ((ExecutionTypes)Arg)  			{  				case ExecutionTypes.Tick:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Id).SetStyle(0' typeof(string))  							.SetCell(1' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(2' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(3' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(4' 0' LocalizedStrings.Str128)  							.SetCell(5' 0' LocalizedStrings.OI).SetStyle(5' typeof(decimal))  							.SetCell(6' 0' "UP_DOWN").SetStyle(5' typeof(bool));    						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  								.SetCell(1' index' message.ServerTime)  								.SetCell(2' index' message.TradePrice)  								.SetCell(3' index' message.TradeVolume)  								.SetCell(4' index' message.OriginSide)  								.SetCell(5' index' message.OpenInterest)  								.SetCell(6' index' message.IsUpTick);    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				case ExecutionTypes.OrderLog:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Id).SetStyle(0' typeof(string))  							.SetCell(1' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(2' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(3' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(4' 0' LocalizedStrings.Str128)  							.SetCell(5' 0' LocalizedStrings.Str722)  							.SetCell(6' 0' LocalizedStrings.Type)  							.SetCell(7' 0' LocalizedStrings.Str342)  							.SetCell(8' 0' LocalizedStrings.Str723).SetStyle(8' typeof(string))  							.SetCell(9' 0' LocalizedStrings.Str724).SetStyle(9' typeof(decimal))  							.SetCell(10' 0' LocalizedStrings.Str725).SetStyle(10' typeof(decimal));    						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.OrderId == null ? message.OrderStringId : message.OrderId.To<string>())  								.SetCell(1' index' message.ServerTime)  								.SetCell(2' index' message.OrderPrice)  								.SetCell(3' index' message.OrderVolume)  								.SetCell(4' index' message.Side)  								.SetCell(5' index' message.OrderState)  								.SetCell(6' index' message.TimeInForce)  								.SetCell(7' index' message.IsSystem);    							if (message.TradePrice != null)  							{  								worker  									.SetCell(8' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  									.SetCell(9' index' message.TradePrice)  									.SetCell(10' index' message.OpenInterest);  							}    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				case ExecutionTypes.Transaction:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(1' 0' LocalizedStrings.Portfolio)  							.SetCell(2' 0' LocalizedStrings.TransactionId)  							.SetCell(3' 0' LocalizedStrings.OrderId)  							.SetCell(4' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(5' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(6' 0' LocalizedStrings.Str1325).SetStyle(3' typeof(decimal))  							.SetCell(7' 0' LocalizedStrings.Str128)  							.SetCell(8' 0' LocalizedStrings.Str132)  							.SetCell(9' 0' LocalizedStrings.Str134)  							.SetCell(10' 0' LocalizedStrings.Str506)  							.SetCell(11' 0' LocalizedStrings.TradePrice).SetStyle(3' typeof(decimal));    						worker.SetConditionalFormatting(7' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(7' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Active)' null' Colors.Blue);  						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Done)' null' Colors.Green);  						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Failed)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.ServerTime)  								.SetCell(1' index' message.PortfolioName)  								.SetCell(2' index' message.TransactionId)  								.SetCell(3' index' message.OrderId == null ? message.OrderStringId : message.OrderId.To<string>())  								.SetCell(4' index' message.OrderPrice)  								.SetCell(5' index' message.OrderVolume)  								.SetCell(6' index' message.Balance)  								.SetCell(7' index' message.Side)  								.SetCell(8' index' message.OrderType)  								.SetCell(9' index' message.OrderState)  								.SetCell(10' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  								.SetCell(11' index' message.TradePrice)  								.SetCell(12' index' message.HasOrderInfo)  								.SetCell(13' index' message.HasTradeInfo);    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				default:  					throw new ArgumentOutOfRangeException();  			}
Magic Number,StockSharp.Algo.Export,ExcelExporter,C:\repos\stocksharp_stocksharp\Algo\Export\ExcelExporter.cs,Export,The following statement contains a magic number: switch ((ExecutionTypes)Arg)  			{  				case ExecutionTypes.Tick:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Id).SetStyle(0' typeof(string))  							.SetCell(1' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(2' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(3' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(4' 0' LocalizedStrings.Str128)  							.SetCell(5' 0' LocalizedStrings.OI).SetStyle(5' typeof(decimal))  							.SetCell(6' 0' "UP_DOWN").SetStyle(5' typeof(bool));    						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  								.SetCell(1' index' message.ServerTime)  								.SetCell(2' index' message.TradePrice)  								.SetCell(3' index' message.TradeVolume)  								.SetCell(4' index' message.OriginSide)  								.SetCell(5' index' message.OpenInterest)  								.SetCell(6' index' message.IsUpTick);    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				case ExecutionTypes.OrderLog:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Id).SetStyle(0' typeof(string))  							.SetCell(1' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(2' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(3' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(4' 0' LocalizedStrings.Str128)  							.SetCell(5' 0' LocalizedStrings.Str722)  							.SetCell(6' 0' LocalizedStrings.Type)  							.SetCell(7' 0' LocalizedStrings.Str342)  							.SetCell(8' 0' LocalizedStrings.Str723).SetStyle(8' typeof(string))  							.SetCell(9' 0' LocalizedStrings.Str724).SetStyle(9' typeof(decimal))  							.SetCell(10' 0' LocalizedStrings.Str725).SetStyle(10' typeof(decimal));    						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.OrderId == null ? message.OrderStringId : message.OrderId.To<string>())  								.SetCell(1' index' message.ServerTime)  								.SetCell(2' index' message.OrderPrice)  								.SetCell(3' index' message.OrderVolume)  								.SetCell(4' index' message.Side)  								.SetCell(5' index' message.OrderState)  								.SetCell(6' index' message.TimeInForce)  								.SetCell(7' index' message.IsSystem);    							if (message.TradePrice != null)  							{  								worker  									.SetCell(8' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  									.SetCell(9' index' message.TradePrice)  									.SetCell(10' index' message.OpenInterest);  							}    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				case ExecutionTypes.Transaction:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(1' 0' LocalizedStrings.Portfolio)  							.SetCell(2' 0' LocalizedStrings.TransactionId)  							.SetCell(3' 0' LocalizedStrings.OrderId)  							.SetCell(4' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(5' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(6' 0' LocalizedStrings.Str1325).SetStyle(3' typeof(decimal))  							.SetCell(7' 0' LocalizedStrings.Str128)  							.SetCell(8' 0' LocalizedStrings.Str132)  							.SetCell(9' 0' LocalizedStrings.Str134)  							.SetCell(10' 0' LocalizedStrings.Str506)  							.SetCell(11' 0' LocalizedStrings.TradePrice).SetStyle(3' typeof(decimal));    						worker.SetConditionalFormatting(7' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(7' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Active)' null' Colors.Blue);  						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Done)' null' Colors.Green);  						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Failed)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.ServerTime)  								.SetCell(1' index' message.PortfolioName)  								.SetCell(2' index' message.TransactionId)  								.SetCell(3' index' message.OrderId == null ? message.OrderStringId : message.OrderId.To<string>())  								.SetCell(4' index' message.OrderPrice)  								.SetCell(5' index' message.OrderVolume)  								.SetCell(6' index' message.Balance)  								.SetCell(7' index' message.Side)  								.SetCell(8' index' message.OrderType)  								.SetCell(9' index' message.OrderState)  								.SetCell(10' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  								.SetCell(11' index' message.TradePrice)  								.SetCell(12' index' message.HasOrderInfo)  								.SetCell(13' index' message.HasTradeInfo);    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				default:  					throw new ArgumentOutOfRangeException();  			}
Magic Number,StockSharp.Algo.Export,ExcelExporter,C:\repos\stocksharp_stocksharp\Algo\Export\ExcelExporter.cs,Export,The following statement contains a magic number: switch ((ExecutionTypes)Arg)  			{  				case ExecutionTypes.Tick:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Id).SetStyle(0' typeof(string))  							.SetCell(1' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(2' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(3' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(4' 0' LocalizedStrings.Str128)  							.SetCell(5' 0' LocalizedStrings.OI).SetStyle(5' typeof(decimal))  							.SetCell(6' 0' "UP_DOWN").SetStyle(5' typeof(bool));    						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  								.SetCell(1' index' message.ServerTime)  								.SetCell(2' index' message.TradePrice)  								.SetCell(3' index' message.TradeVolume)  								.SetCell(4' index' message.OriginSide)  								.SetCell(5' index' message.OpenInterest)  								.SetCell(6' index' message.IsUpTick);    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				case ExecutionTypes.OrderLog:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Id).SetStyle(0' typeof(string))  							.SetCell(1' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(2' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(3' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(4' 0' LocalizedStrings.Str128)  							.SetCell(5' 0' LocalizedStrings.Str722)  							.SetCell(6' 0' LocalizedStrings.Type)  							.SetCell(7' 0' LocalizedStrings.Str342)  							.SetCell(8' 0' LocalizedStrings.Str723).SetStyle(8' typeof(string))  							.SetCell(9' 0' LocalizedStrings.Str724).SetStyle(9' typeof(decimal))  							.SetCell(10' 0' LocalizedStrings.Str725).SetStyle(10' typeof(decimal));    						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.OrderId == null ? message.OrderStringId : message.OrderId.To<string>())  								.SetCell(1' index' message.ServerTime)  								.SetCell(2' index' message.OrderPrice)  								.SetCell(3' index' message.OrderVolume)  								.SetCell(4' index' message.Side)  								.SetCell(5' index' message.OrderState)  								.SetCell(6' index' message.TimeInForce)  								.SetCell(7' index' message.IsSystem);    							if (message.TradePrice != null)  							{  								worker  									.SetCell(8' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  									.SetCell(9' index' message.TradePrice)  									.SetCell(10' index' message.OpenInterest);  							}    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				case ExecutionTypes.Transaction:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(1' 0' LocalizedStrings.Portfolio)  							.SetCell(2' 0' LocalizedStrings.TransactionId)  							.SetCell(3' 0' LocalizedStrings.OrderId)  							.SetCell(4' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(5' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(6' 0' LocalizedStrings.Str1325).SetStyle(3' typeof(decimal))  							.SetCell(7' 0' LocalizedStrings.Str128)  							.SetCell(8' 0' LocalizedStrings.Str132)  							.SetCell(9' 0' LocalizedStrings.Str134)  							.SetCell(10' 0' LocalizedStrings.Str506)  							.SetCell(11' 0' LocalizedStrings.TradePrice).SetStyle(3' typeof(decimal));    						worker.SetConditionalFormatting(7' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(7' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Active)' null' Colors.Blue);  						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Done)' null' Colors.Green);  						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Failed)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.ServerTime)  								.SetCell(1' index' message.PortfolioName)  								.SetCell(2' index' message.TransactionId)  								.SetCell(3' index' message.OrderId == null ? message.OrderStringId : message.OrderId.To<string>())  								.SetCell(4' index' message.OrderPrice)  								.SetCell(5' index' message.OrderVolume)  								.SetCell(6' index' message.Balance)  								.SetCell(7' index' message.Side)  								.SetCell(8' index' message.OrderType)  								.SetCell(9' index' message.OrderState)  								.SetCell(10' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  								.SetCell(11' index' message.TradePrice)  								.SetCell(12' index' message.HasOrderInfo)  								.SetCell(13' index' message.HasTradeInfo);    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				default:  					throw new ArgumentOutOfRangeException();  			}
Magic Number,StockSharp.Algo.Export,ExcelExporter,C:\repos\stocksharp_stocksharp\Algo\Export\ExcelExporter.cs,Export,The following statement contains a magic number: switch ((ExecutionTypes)Arg)  			{  				case ExecutionTypes.Tick:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Id).SetStyle(0' typeof(string))  							.SetCell(1' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(2' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(3' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(4' 0' LocalizedStrings.Str128)  							.SetCell(5' 0' LocalizedStrings.OI).SetStyle(5' typeof(decimal))  							.SetCell(6' 0' "UP_DOWN").SetStyle(5' typeof(bool));    						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  								.SetCell(1' index' message.ServerTime)  								.SetCell(2' index' message.TradePrice)  								.SetCell(3' index' message.TradeVolume)  								.SetCell(4' index' message.OriginSide)  								.SetCell(5' index' message.OpenInterest)  								.SetCell(6' index' message.IsUpTick);    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				case ExecutionTypes.OrderLog:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Id).SetStyle(0' typeof(string))  							.SetCell(1' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(2' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(3' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(4' 0' LocalizedStrings.Str128)  							.SetCell(5' 0' LocalizedStrings.Str722)  							.SetCell(6' 0' LocalizedStrings.Type)  							.SetCell(7' 0' LocalizedStrings.Str342)  							.SetCell(8' 0' LocalizedStrings.Str723).SetStyle(8' typeof(string))  							.SetCell(9' 0' LocalizedStrings.Str724).SetStyle(9' typeof(decimal))  							.SetCell(10' 0' LocalizedStrings.Str725).SetStyle(10' typeof(decimal));    						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.OrderId == null ? message.OrderStringId : message.OrderId.To<string>())  								.SetCell(1' index' message.ServerTime)  								.SetCell(2' index' message.OrderPrice)  								.SetCell(3' index' message.OrderVolume)  								.SetCell(4' index' message.Side)  								.SetCell(5' index' message.OrderState)  								.SetCell(6' index' message.TimeInForce)  								.SetCell(7' index' message.IsSystem);    							if (message.TradePrice != null)  							{  								worker  									.SetCell(8' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  									.SetCell(9' index' message.TradePrice)  									.SetCell(10' index' message.OpenInterest);  							}    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				case ExecutionTypes.Transaction:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(1' 0' LocalizedStrings.Portfolio)  							.SetCell(2' 0' LocalizedStrings.TransactionId)  							.SetCell(3' 0' LocalizedStrings.OrderId)  							.SetCell(4' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(5' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(6' 0' LocalizedStrings.Str1325).SetStyle(3' typeof(decimal))  							.SetCell(7' 0' LocalizedStrings.Str128)  							.SetCell(8' 0' LocalizedStrings.Str132)  							.SetCell(9' 0' LocalizedStrings.Str134)  							.SetCell(10' 0' LocalizedStrings.Str506)  							.SetCell(11' 0' LocalizedStrings.TradePrice).SetStyle(3' typeof(decimal));    						worker.SetConditionalFormatting(7' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(7' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Active)' null' Colors.Blue);  						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Done)' null' Colors.Green);  						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Failed)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.ServerTime)  								.SetCell(1' index' message.PortfolioName)  								.SetCell(2' index' message.TransactionId)  								.SetCell(3' index' message.OrderId == null ? message.OrderStringId : message.OrderId.To<string>())  								.SetCell(4' index' message.OrderPrice)  								.SetCell(5' index' message.OrderVolume)  								.SetCell(6' index' message.Balance)  								.SetCell(7' index' message.Side)  								.SetCell(8' index' message.OrderType)  								.SetCell(9' index' message.OrderState)  								.SetCell(10' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  								.SetCell(11' index' message.TradePrice)  								.SetCell(12' index' message.HasOrderInfo)  								.SetCell(13' index' message.HasTradeInfo);    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				default:  					throw new ArgumentOutOfRangeException();  			}
Magic Number,StockSharp.Algo.Export,ExcelExporter,C:\repos\stocksharp_stocksharp\Algo\Export\ExcelExporter.cs,Export,The following statement contains a magic number: switch ((ExecutionTypes)Arg)  			{  				case ExecutionTypes.Tick:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Id).SetStyle(0' typeof(string))  							.SetCell(1' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(2' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(3' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(4' 0' LocalizedStrings.Str128)  							.SetCell(5' 0' LocalizedStrings.OI).SetStyle(5' typeof(decimal))  							.SetCell(6' 0' "UP_DOWN").SetStyle(5' typeof(bool));    						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  								.SetCell(1' index' message.ServerTime)  								.SetCell(2' index' message.TradePrice)  								.SetCell(3' index' message.TradeVolume)  								.SetCell(4' index' message.OriginSide)  								.SetCell(5' index' message.OpenInterest)  								.SetCell(6' index' message.IsUpTick);    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				case ExecutionTypes.OrderLog:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Id).SetStyle(0' typeof(string))  							.SetCell(1' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(2' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(3' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(4' 0' LocalizedStrings.Str128)  							.SetCell(5' 0' LocalizedStrings.Str722)  							.SetCell(6' 0' LocalizedStrings.Type)  							.SetCell(7' 0' LocalizedStrings.Str342)  							.SetCell(8' 0' LocalizedStrings.Str723).SetStyle(8' typeof(string))  							.SetCell(9' 0' LocalizedStrings.Str724).SetStyle(9' typeof(decimal))  							.SetCell(10' 0' LocalizedStrings.Str725).SetStyle(10' typeof(decimal));    						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.OrderId == null ? message.OrderStringId : message.OrderId.To<string>())  								.SetCell(1' index' message.ServerTime)  								.SetCell(2' index' message.OrderPrice)  								.SetCell(3' index' message.OrderVolume)  								.SetCell(4' index' message.Side)  								.SetCell(5' index' message.OrderState)  								.SetCell(6' index' message.TimeInForce)  								.SetCell(7' index' message.IsSystem);    							if (message.TradePrice != null)  							{  								worker  									.SetCell(8' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  									.SetCell(9' index' message.TradePrice)  									.SetCell(10' index' message.OpenInterest);  							}    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				case ExecutionTypes.Transaction:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(1' 0' LocalizedStrings.Portfolio)  							.SetCell(2' 0' LocalizedStrings.TransactionId)  							.SetCell(3' 0' LocalizedStrings.OrderId)  							.SetCell(4' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(5' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(6' 0' LocalizedStrings.Str1325).SetStyle(3' typeof(decimal))  							.SetCell(7' 0' LocalizedStrings.Str128)  							.SetCell(8' 0' LocalizedStrings.Str132)  							.SetCell(9' 0' LocalizedStrings.Str134)  							.SetCell(10' 0' LocalizedStrings.Str506)  							.SetCell(11' 0' LocalizedStrings.TradePrice).SetStyle(3' typeof(decimal));    						worker.SetConditionalFormatting(7' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(7' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Active)' null' Colors.Blue);  						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Done)' null' Colors.Green);  						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Failed)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.ServerTime)  								.SetCell(1' index' message.PortfolioName)  								.SetCell(2' index' message.TransactionId)  								.SetCell(3' index' message.OrderId == null ? message.OrderStringId : message.OrderId.To<string>())  								.SetCell(4' index' message.OrderPrice)  								.SetCell(5' index' message.OrderVolume)  								.SetCell(6' index' message.Balance)  								.SetCell(7' index' message.Side)  								.SetCell(8' index' message.OrderType)  								.SetCell(9' index' message.OrderState)  								.SetCell(10' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  								.SetCell(11' index' message.TradePrice)  								.SetCell(12' index' message.HasOrderInfo)  								.SetCell(13' index' message.HasTradeInfo);    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				default:  					throw new ArgumentOutOfRangeException();  			}
Magic Number,StockSharp.Algo.Export,ExcelExporter,C:\repos\stocksharp_stocksharp\Algo\Export\ExcelExporter.cs,Export,The following statement contains a magic number: switch ((ExecutionTypes)Arg)  			{  				case ExecutionTypes.Tick:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Id).SetStyle(0' typeof(string))  							.SetCell(1' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(2' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(3' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(4' 0' LocalizedStrings.Str128)  							.SetCell(5' 0' LocalizedStrings.OI).SetStyle(5' typeof(decimal))  							.SetCell(6' 0' "UP_DOWN").SetStyle(5' typeof(bool));    						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  								.SetCell(1' index' message.ServerTime)  								.SetCell(2' index' message.TradePrice)  								.SetCell(3' index' message.TradeVolume)  								.SetCell(4' index' message.OriginSide)  								.SetCell(5' index' message.OpenInterest)  								.SetCell(6' index' message.IsUpTick);    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				case ExecutionTypes.OrderLog:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Id).SetStyle(0' typeof(string))  							.SetCell(1' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(2' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(3' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(4' 0' LocalizedStrings.Str128)  							.SetCell(5' 0' LocalizedStrings.Str722)  							.SetCell(6' 0' LocalizedStrings.Type)  							.SetCell(7' 0' LocalizedStrings.Str342)  							.SetCell(8' 0' LocalizedStrings.Str723).SetStyle(8' typeof(string))  							.SetCell(9' 0' LocalizedStrings.Str724).SetStyle(9' typeof(decimal))  							.SetCell(10' 0' LocalizedStrings.Str725).SetStyle(10' typeof(decimal));    						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.OrderId == null ? message.OrderStringId : message.OrderId.To<string>())  								.SetCell(1' index' message.ServerTime)  								.SetCell(2' index' message.OrderPrice)  								.SetCell(3' index' message.OrderVolume)  								.SetCell(4' index' message.Side)  								.SetCell(5' index' message.OrderState)  								.SetCell(6' index' message.TimeInForce)  								.SetCell(7' index' message.IsSystem);    							if (message.TradePrice != null)  							{  								worker  									.SetCell(8' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  									.SetCell(9' index' message.TradePrice)  									.SetCell(10' index' message.OpenInterest);  							}    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				case ExecutionTypes.Transaction:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(1' 0' LocalizedStrings.Portfolio)  							.SetCell(2' 0' LocalizedStrings.TransactionId)  							.SetCell(3' 0' LocalizedStrings.OrderId)  							.SetCell(4' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(5' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(6' 0' LocalizedStrings.Str1325).SetStyle(3' typeof(decimal))  							.SetCell(7' 0' LocalizedStrings.Str128)  							.SetCell(8' 0' LocalizedStrings.Str132)  							.SetCell(9' 0' LocalizedStrings.Str134)  							.SetCell(10' 0' LocalizedStrings.Str506)  							.SetCell(11' 0' LocalizedStrings.TradePrice).SetStyle(3' typeof(decimal));    						worker.SetConditionalFormatting(7' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(7' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Active)' null' Colors.Blue);  						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Done)' null' Colors.Green);  						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Failed)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.ServerTime)  								.SetCell(1' index' message.PortfolioName)  								.SetCell(2' index' message.TransactionId)  								.SetCell(3' index' message.OrderId == null ? message.OrderStringId : message.OrderId.To<string>())  								.SetCell(4' index' message.OrderPrice)  								.SetCell(5' index' message.OrderVolume)  								.SetCell(6' index' message.Balance)  								.SetCell(7' index' message.Side)  								.SetCell(8' index' message.OrderType)  								.SetCell(9' index' message.OrderState)  								.SetCell(10' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  								.SetCell(11' index' message.TradePrice)  								.SetCell(12' index' message.HasOrderInfo)  								.SetCell(13' index' message.HasTradeInfo);    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				default:  					throw new ArgumentOutOfRangeException();  			}
Magic Number,StockSharp.Algo.Export,ExcelExporter,C:\repos\stocksharp_stocksharp\Algo\Export\ExcelExporter.cs,Export,The following statement contains a magic number: switch ((ExecutionTypes)Arg)  			{  				case ExecutionTypes.Tick:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Id).SetStyle(0' typeof(string))  							.SetCell(1' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(2' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(3' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(4' 0' LocalizedStrings.Str128)  							.SetCell(5' 0' LocalizedStrings.OI).SetStyle(5' typeof(decimal))  							.SetCell(6' 0' "UP_DOWN").SetStyle(5' typeof(bool));    						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  								.SetCell(1' index' message.ServerTime)  								.SetCell(2' index' message.TradePrice)  								.SetCell(3' index' message.TradeVolume)  								.SetCell(4' index' message.OriginSide)  								.SetCell(5' index' message.OpenInterest)  								.SetCell(6' index' message.IsUpTick);    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				case ExecutionTypes.OrderLog:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Id).SetStyle(0' typeof(string))  							.SetCell(1' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(2' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(3' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(4' 0' LocalizedStrings.Str128)  							.SetCell(5' 0' LocalizedStrings.Str722)  							.SetCell(6' 0' LocalizedStrings.Type)  							.SetCell(7' 0' LocalizedStrings.Str342)  							.SetCell(8' 0' LocalizedStrings.Str723).SetStyle(8' typeof(string))  							.SetCell(9' 0' LocalizedStrings.Str724).SetStyle(9' typeof(decimal))  							.SetCell(10' 0' LocalizedStrings.Str725).SetStyle(10' typeof(decimal));    						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.OrderId == null ? message.OrderStringId : message.OrderId.To<string>())  								.SetCell(1' index' message.ServerTime)  								.SetCell(2' index' message.OrderPrice)  								.SetCell(3' index' message.OrderVolume)  								.SetCell(4' index' message.Side)  								.SetCell(5' index' message.OrderState)  								.SetCell(6' index' message.TimeInForce)  								.SetCell(7' index' message.IsSystem);    							if (message.TradePrice != null)  							{  								worker  									.SetCell(8' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  									.SetCell(9' index' message.TradePrice)  									.SetCell(10' index' message.OpenInterest);  							}    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				case ExecutionTypes.Transaction:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(1' 0' LocalizedStrings.Portfolio)  							.SetCell(2' 0' LocalizedStrings.TransactionId)  							.SetCell(3' 0' LocalizedStrings.OrderId)  							.SetCell(4' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(5' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(6' 0' LocalizedStrings.Str1325).SetStyle(3' typeof(decimal))  							.SetCell(7' 0' LocalizedStrings.Str128)  							.SetCell(8' 0' LocalizedStrings.Str132)  							.SetCell(9' 0' LocalizedStrings.Str134)  							.SetCell(10' 0' LocalizedStrings.Str506)  							.SetCell(11' 0' LocalizedStrings.TradePrice).SetStyle(3' typeof(decimal));    						worker.SetConditionalFormatting(7' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(7' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Active)' null' Colors.Blue);  						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Done)' null' Colors.Green);  						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Failed)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.ServerTime)  								.SetCell(1' index' message.PortfolioName)  								.SetCell(2' index' message.TransactionId)  								.SetCell(3' index' message.OrderId == null ? message.OrderStringId : message.OrderId.To<string>())  								.SetCell(4' index' message.OrderPrice)  								.SetCell(5' index' message.OrderVolume)  								.SetCell(6' index' message.Balance)  								.SetCell(7' index' message.Side)  								.SetCell(8' index' message.OrderType)  								.SetCell(9' index' message.OrderState)  								.SetCell(10' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  								.SetCell(11' index' message.TradePrice)  								.SetCell(12' index' message.HasOrderInfo)  								.SetCell(13' index' message.HasTradeInfo);    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				default:  					throw new ArgumentOutOfRangeException();  			}
Magic Number,StockSharp.Algo.Export,ExcelExporter,C:\repos\stocksharp_stocksharp\Algo\Export\ExcelExporter.cs,Export,The following statement contains a magic number: switch ((ExecutionTypes)Arg)  			{  				case ExecutionTypes.Tick:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Id).SetStyle(0' typeof(string))  							.SetCell(1' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(2' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(3' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(4' 0' LocalizedStrings.Str128)  							.SetCell(5' 0' LocalizedStrings.OI).SetStyle(5' typeof(decimal))  							.SetCell(6' 0' "UP_DOWN").SetStyle(5' typeof(bool));    						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  								.SetCell(1' index' message.ServerTime)  								.SetCell(2' index' message.TradePrice)  								.SetCell(3' index' message.TradeVolume)  								.SetCell(4' index' message.OriginSide)  								.SetCell(5' index' message.OpenInterest)  								.SetCell(6' index' message.IsUpTick);    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				case ExecutionTypes.OrderLog:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Id).SetStyle(0' typeof(string))  							.SetCell(1' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(2' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(3' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(4' 0' LocalizedStrings.Str128)  							.SetCell(5' 0' LocalizedStrings.Str722)  							.SetCell(6' 0' LocalizedStrings.Type)  							.SetCell(7' 0' LocalizedStrings.Str342)  							.SetCell(8' 0' LocalizedStrings.Str723).SetStyle(8' typeof(string))  							.SetCell(9' 0' LocalizedStrings.Str724).SetStyle(9' typeof(decimal))  							.SetCell(10' 0' LocalizedStrings.Str725).SetStyle(10' typeof(decimal));    						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.OrderId == null ? message.OrderStringId : message.OrderId.To<string>())  								.SetCell(1' index' message.ServerTime)  								.SetCell(2' index' message.OrderPrice)  								.SetCell(3' index' message.OrderVolume)  								.SetCell(4' index' message.Side)  								.SetCell(5' index' message.OrderState)  								.SetCell(6' index' message.TimeInForce)  								.SetCell(7' index' message.IsSystem);    							if (message.TradePrice != null)  							{  								worker  									.SetCell(8' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  									.SetCell(9' index' message.TradePrice)  									.SetCell(10' index' message.OpenInterest);  							}    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				case ExecutionTypes.Transaction:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(1' 0' LocalizedStrings.Portfolio)  							.SetCell(2' 0' LocalizedStrings.TransactionId)  							.SetCell(3' 0' LocalizedStrings.OrderId)  							.SetCell(4' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(5' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(6' 0' LocalizedStrings.Str1325).SetStyle(3' typeof(decimal))  							.SetCell(7' 0' LocalizedStrings.Str128)  							.SetCell(8' 0' LocalizedStrings.Str132)  							.SetCell(9' 0' LocalizedStrings.Str134)  							.SetCell(10' 0' LocalizedStrings.Str506)  							.SetCell(11' 0' LocalizedStrings.TradePrice).SetStyle(3' typeof(decimal));    						worker.SetConditionalFormatting(7' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(7' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Active)' null' Colors.Blue);  						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Done)' null' Colors.Green);  						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Failed)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.ServerTime)  								.SetCell(1' index' message.PortfolioName)  								.SetCell(2' index' message.TransactionId)  								.SetCell(3' index' message.OrderId == null ? message.OrderStringId : message.OrderId.To<string>())  								.SetCell(4' index' message.OrderPrice)  								.SetCell(5' index' message.OrderVolume)  								.SetCell(6' index' message.Balance)  								.SetCell(7' index' message.Side)  								.SetCell(8' index' message.OrderType)  								.SetCell(9' index' message.OrderState)  								.SetCell(10' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  								.SetCell(11' index' message.TradePrice)  								.SetCell(12' index' message.HasOrderInfo)  								.SetCell(13' index' message.HasTradeInfo);    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				default:  					throw new ArgumentOutOfRangeException();  			}
Magic Number,StockSharp.Algo.Export,ExcelExporter,C:\repos\stocksharp_stocksharp\Algo\Export\ExcelExporter.cs,Export,The following statement contains a magic number: switch ((ExecutionTypes)Arg)  			{  				case ExecutionTypes.Tick:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Id).SetStyle(0' typeof(string))  							.SetCell(1' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(2' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(3' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(4' 0' LocalizedStrings.Str128)  							.SetCell(5' 0' LocalizedStrings.OI).SetStyle(5' typeof(decimal))  							.SetCell(6' 0' "UP_DOWN").SetStyle(5' typeof(bool));    						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  								.SetCell(1' index' message.ServerTime)  								.SetCell(2' index' message.TradePrice)  								.SetCell(3' index' message.TradeVolume)  								.SetCell(4' index' message.OriginSide)  								.SetCell(5' index' message.OpenInterest)  								.SetCell(6' index' message.IsUpTick);    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				case ExecutionTypes.OrderLog:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Id).SetStyle(0' typeof(string))  							.SetCell(1' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(2' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(3' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(4' 0' LocalizedStrings.Str128)  							.SetCell(5' 0' LocalizedStrings.Str722)  							.SetCell(6' 0' LocalizedStrings.Type)  							.SetCell(7' 0' LocalizedStrings.Str342)  							.SetCell(8' 0' LocalizedStrings.Str723).SetStyle(8' typeof(string))  							.SetCell(9' 0' LocalizedStrings.Str724).SetStyle(9' typeof(decimal))  							.SetCell(10' 0' LocalizedStrings.Str725).SetStyle(10' typeof(decimal));    						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.OrderId == null ? message.OrderStringId : message.OrderId.To<string>())  								.SetCell(1' index' message.ServerTime)  								.SetCell(2' index' message.OrderPrice)  								.SetCell(3' index' message.OrderVolume)  								.SetCell(4' index' message.Side)  								.SetCell(5' index' message.OrderState)  								.SetCell(6' index' message.TimeInForce)  								.SetCell(7' index' message.IsSystem);    							if (message.TradePrice != null)  							{  								worker  									.SetCell(8' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  									.SetCell(9' index' message.TradePrice)  									.SetCell(10' index' message.OpenInterest);  							}    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				case ExecutionTypes.Transaction:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(1' 0' LocalizedStrings.Portfolio)  							.SetCell(2' 0' LocalizedStrings.TransactionId)  							.SetCell(3' 0' LocalizedStrings.OrderId)  							.SetCell(4' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(5' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(6' 0' LocalizedStrings.Str1325).SetStyle(3' typeof(decimal))  							.SetCell(7' 0' LocalizedStrings.Str128)  							.SetCell(8' 0' LocalizedStrings.Str132)  							.SetCell(9' 0' LocalizedStrings.Str134)  							.SetCell(10' 0' LocalizedStrings.Str506)  							.SetCell(11' 0' LocalizedStrings.TradePrice).SetStyle(3' typeof(decimal));    						worker.SetConditionalFormatting(7' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(7' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Active)' null' Colors.Blue);  						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Done)' null' Colors.Green);  						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Failed)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.ServerTime)  								.SetCell(1' index' message.PortfolioName)  								.SetCell(2' index' message.TransactionId)  								.SetCell(3' index' message.OrderId == null ? message.OrderStringId : message.OrderId.To<string>())  								.SetCell(4' index' message.OrderPrice)  								.SetCell(5' index' message.OrderVolume)  								.SetCell(6' index' message.Balance)  								.SetCell(7' index' message.Side)  								.SetCell(8' index' message.OrderType)  								.SetCell(9' index' message.OrderState)  								.SetCell(10' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  								.SetCell(11' index' message.TradePrice)  								.SetCell(12' index' message.HasOrderInfo)  								.SetCell(13' index' message.HasTradeInfo);    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				default:  					throw new ArgumentOutOfRangeException();  			}
Magic Number,StockSharp.Algo.Export,ExcelExporter,C:\repos\stocksharp_stocksharp\Algo\Export\ExcelExporter.cs,Export,The following statement contains a magic number: switch ((ExecutionTypes)Arg)  			{  				case ExecutionTypes.Tick:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Id).SetStyle(0' typeof(string))  							.SetCell(1' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(2' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(3' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(4' 0' LocalizedStrings.Str128)  							.SetCell(5' 0' LocalizedStrings.OI).SetStyle(5' typeof(decimal))  							.SetCell(6' 0' "UP_DOWN").SetStyle(5' typeof(bool));    						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  								.SetCell(1' index' message.ServerTime)  								.SetCell(2' index' message.TradePrice)  								.SetCell(3' index' message.TradeVolume)  								.SetCell(4' index' message.OriginSide)  								.SetCell(5' index' message.OpenInterest)  								.SetCell(6' index' message.IsUpTick);    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				case ExecutionTypes.OrderLog:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Id).SetStyle(0' typeof(string))  							.SetCell(1' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(2' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(3' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(4' 0' LocalizedStrings.Str128)  							.SetCell(5' 0' LocalizedStrings.Str722)  							.SetCell(6' 0' LocalizedStrings.Type)  							.SetCell(7' 0' LocalizedStrings.Str342)  							.SetCell(8' 0' LocalizedStrings.Str723).SetStyle(8' typeof(string))  							.SetCell(9' 0' LocalizedStrings.Str724).SetStyle(9' typeof(decimal))  							.SetCell(10' 0' LocalizedStrings.Str725).SetStyle(10' typeof(decimal));    						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.OrderId == null ? message.OrderStringId : message.OrderId.To<string>())  								.SetCell(1' index' message.ServerTime)  								.SetCell(2' index' message.OrderPrice)  								.SetCell(3' index' message.OrderVolume)  								.SetCell(4' index' message.Side)  								.SetCell(5' index' message.OrderState)  								.SetCell(6' index' message.TimeInForce)  								.SetCell(7' index' message.IsSystem);    							if (message.TradePrice != null)  							{  								worker  									.SetCell(8' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  									.SetCell(9' index' message.TradePrice)  									.SetCell(10' index' message.OpenInterest);  							}    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				case ExecutionTypes.Transaction:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(1' 0' LocalizedStrings.Portfolio)  							.SetCell(2' 0' LocalizedStrings.TransactionId)  							.SetCell(3' 0' LocalizedStrings.OrderId)  							.SetCell(4' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(5' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(6' 0' LocalizedStrings.Str1325).SetStyle(3' typeof(decimal))  							.SetCell(7' 0' LocalizedStrings.Str128)  							.SetCell(8' 0' LocalizedStrings.Str132)  							.SetCell(9' 0' LocalizedStrings.Str134)  							.SetCell(10' 0' LocalizedStrings.Str506)  							.SetCell(11' 0' LocalizedStrings.TradePrice).SetStyle(3' typeof(decimal));    						worker.SetConditionalFormatting(7' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(7' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Active)' null' Colors.Blue);  						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Done)' null' Colors.Green);  						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Failed)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.ServerTime)  								.SetCell(1' index' message.PortfolioName)  								.SetCell(2' index' message.TransactionId)  								.SetCell(3' index' message.OrderId == null ? message.OrderStringId : message.OrderId.To<string>())  								.SetCell(4' index' message.OrderPrice)  								.SetCell(5' index' message.OrderVolume)  								.SetCell(6' index' message.Balance)  								.SetCell(7' index' message.Side)  								.SetCell(8' index' message.OrderType)  								.SetCell(9' index' message.OrderState)  								.SetCell(10' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  								.SetCell(11' index' message.TradePrice)  								.SetCell(12' index' message.HasOrderInfo)  								.SetCell(13' index' message.HasTradeInfo);    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				default:  					throw new ArgumentOutOfRangeException();  			}
Magic Number,StockSharp.Algo.Export,ExcelExporter,C:\repos\stocksharp_stocksharp\Algo\Export\ExcelExporter.cs,Export,The following statement contains a magic number: switch ((ExecutionTypes)Arg)  			{  				case ExecutionTypes.Tick:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Id).SetStyle(0' typeof(string))  							.SetCell(1' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(2' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(3' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(4' 0' LocalizedStrings.Str128)  							.SetCell(5' 0' LocalizedStrings.OI).SetStyle(5' typeof(decimal))  							.SetCell(6' 0' "UP_DOWN").SetStyle(5' typeof(bool));    						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  								.SetCell(1' index' message.ServerTime)  								.SetCell(2' index' message.TradePrice)  								.SetCell(3' index' message.TradeVolume)  								.SetCell(4' index' message.OriginSide)  								.SetCell(5' index' message.OpenInterest)  								.SetCell(6' index' message.IsUpTick);    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				case ExecutionTypes.OrderLog:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Id).SetStyle(0' typeof(string))  							.SetCell(1' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(2' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(3' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(4' 0' LocalizedStrings.Str128)  							.SetCell(5' 0' LocalizedStrings.Str722)  							.SetCell(6' 0' LocalizedStrings.Type)  							.SetCell(7' 0' LocalizedStrings.Str342)  							.SetCell(8' 0' LocalizedStrings.Str723).SetStyle(8' typeof(string))  							.SetCell(9' 0' LocalizedStrings.Str724).SetStyle(9' typeof(decimal))  							.SetCell(10' 0' LocalizedStrings.Str725).SetStyle(10' typeof(decimal));    						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.OrderId == null ? message.OrderStringId : message.OrderId.To<string>())  								.SetCell(1' index' message.ServerTime)  								.SetCell(2' index' message.OrderPrice)  								.SetCell(3' index' message.OrderVolume)  								.SetCell(4' index' message.Side)  								.SetCell(5' index' message.OrderState)  								.SetCell(6' index' message.TimeInForce)  								.SetCell(7' index' message.IsSystem);    							if (message.TradePrice != null)  							{  								worker  									.SetCell(8' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  									.SetCell(9' index' message.TradePrice)  									.SetCell(10' index' message.OpenInterest);  							}    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				case ExecutionTypes.Transaction:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(1' 0' LocalizedStrings.Portfolio)  							.SetCell(2' 0' LocalizedStrings.TransactionId)  							.SetCell(3' 0' LocalizedStrings.OrderId)  							.SetCell(4' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(5' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(6' 0' LocalizedStrings.Str1325).SetStyle(3' typeof(decimal))  							.SetCell(7' 0' LocalizedStrings.Str128)  							.SetCell(8' 0' LocalizedStrings.Str132)  							.SetCell(9' 0' LocalizedStrings.Str134)  							.SetCell(10' 0' LocalizedStrings.Str506)  							.SetCell(11' 0' LocalizedStrings.TradePrice).SetStyle(3' typeof(decimal));    						worker.SetConditionalFormatting(7' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(7' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Active)' null' Colors.Blue);  						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Done)' null' Colors.Green);  						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Failed)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.ServerTime)  								.SetCell(1' index' message.PortfolioName)  								.SetCell(2' index' message.TransactionId)  								.SetCell(3' index' message.OrderId == null ? message.OrderStringId : message.OrderId.To<string>())  								.SetCell(4' index' message.OrderPrice)  								.SetCell(5' index' message.OrderVolume)  								.SetCell(6' index' message.Balance)  								.SetCell(7' index' message.Side)  								.SetCell(8' index' message.OrderType)  								.SetCell(9' index' message.OrderState)  								.SetCell(10' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  								.SetCell(11' index' message.TradePrice)  								.SetCell(12' index' message.HasOrderInfo)  								.SetCell(13' index' message.HasTradeInfo);    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				default:  					throw new ArgumentOutOfRangeException();  			}
Magic Number,StockSharp.Algo.Export,ExcelExporter,C:\repos\stocksharp_stocksharp\Algo\Export\ExcelExporter.cs,Export,The following statement contains a magic number: switch ((ExecutionTypes)Arg)  			{  				case ExecutionTypes.Tick:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Id).SetStyle(0' typeof(string))  							.SetCell(1' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(2' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(3' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(4' 0' LocalizedStrings.Str128)  							.SetCell(5' 0' LocalizedStrings.OI).SetStyle(5' typeof(decimal))  							.SetCell(6' 0' "UP_DOWN").SetStyle(5' typeof(bool));    						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  								.SetCell(1' index' message.ServerTime)  								.SetCell(2' index' message.TradePrice)  								.SetCell(3' index' message.TradeVolume)  								.SetCell(4' index' message.OriginSide)  								.SetCell(5' index' message.OpenInterest)  								.SetCell(6' index' message.IsUpTick);    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				case ExecutionTypes.OrderLog:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Id).SetStyle(0' typeof(string))  							.SetCell(1' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(2' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(3' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(4' 0' LocalizedStrings.Str128)  							.SetCell(5' 0' LocalizedStrings.Str722)  							.SetCell(6' 0' LocalizedStrings.Type)  							.SetCell(7' 0' LocalizedStrings.Str342)  							.SetCell(8' 0' LocalizedStrings.Str723).SetStyle(8' typeof(string))  							.SetCell(9' 0' LocalizedStrings.Str724).SetStyle(9' typeof(decimal))  							.SetCell(10' 0' LocalizedStrings.Str725).SetStyle(10' typeof(decimal));    						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.OrderId == null ? message.OrderStringId : message.OrderId.To<string>())  								.SetCell(1' index' message.ServerTime)  								.SetCell(2' index' message.OrderPrice)  								.SetCell(3' index' message.OrderVolume)  								.SetCell(4' index' message.Side)  								.SetCell(5' index' message.OrderState)  								.SetCell(6' index' message.TimeInForce)  								.SetCell(7' index' message.IsSystem);    							if (message.TradePrice != null)  							{  								worker  									.SetCell(8' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  									.SetCell(9' index' message.TradePrice)  									.SetCell(10' index' message.OpenInterest);  							}    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				case ExecutionTypes.Transaction:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(1' 0' LocalizedStrings.Portfolio)  							.SetCell(2' 0' LocalizedStrings.TransactionId)  							.SetCell(3' 0' LocalizedStrings.OrderId)  							.SetCell(4' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(5' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(6' 0' LocalizedStrings.Str1325).SetStyle(3' typeof(decimal))  							.SetCell(7' 0' LocalizedStrings.Str128)  							.SetCell(8' 0' LocalizedStrings.Str132)  							.SetCell(9' 0' LocalizedStrings.Str134)  							.SetCell(10' 0' LocalizedStrings.Str506)  							.SetCell(11' 0' LocalizedStrings.TradePrice).SetStyle(3' typeof(decimal));    						worker.SetConditionalFormatting(7' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(7' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Active)' null' Colors.Blue);  						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Done)' null' Colors.Green);  						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Failed)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.ServerTime)  								.SetCell(1' index' message.PortfolioName)  								.SetCell(2' index' message.TransactionId)  								.SetCell(3' index' message.OrderId == null ? message.OrderStringId : message.OrderId.To<string>())  								.SetCell(4' index' message.OrderPrice)  								.SetCell(5' index' message.OrderVolume)  								.SetCell(6' index' message.Balance)  								.SetCell(7' index' message.Side)  								.SetCell(8' index' message.OrderType)  								.SetCell(9' index' message.OrderState)  								.SetCell(10' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  								.SetCell(11' index' message.TradePrice)  								.SetCell(12' index' message.HasOrderInfo)  								.SetCell(13' index' message.HasTradeInfo);    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				default:  					throw new ArgumentOutOfRangeException();  			}
Magic Number,StockSharp.Algo.Export,ExcelExporter,C:\repos\stocksharp_stocksharp\Algo\Export\ExcelExporter.cs,Export,The following statement contains a magic number: switch ((ExecutionTypes)Arg)  			{  				case ExecutionTypes.Tick:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Id).SetStyle(0' typeof(string))  							.SetCell(1' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(2' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(3' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(4' 0' LocalizedStrings.Str128)  							.SetCell(5' 0' LocalizedStrings.OI).SetStyle(5' typeof(decimal))  							.SetCell(6' 0' "UP_DOWN").SetStyle(5' typeof(bool));    						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  								.SetCell(1' index' message.ServerTime)  								.SetCell(2' index' message.TradePrice)  								.SetCell(3' index' message.TradeVolume)  								.SetCell(4' index' message.OriginSide)  								.SetCell(5' index' message.OpenInterest)  								.SetCell(6' index' message.IsUpTick);    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				case ExecutionTypes.OrderLog:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Id).SetStyle(0' typeof(string))  							.SetCell(1' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(2' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(3' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(4' 0' LocalizedStrings.Str128)  							.SetCell(5' 0' LocalizedStrings.Str722)  							.SetCell(6' 0' LocalizedStrings.Type)  							.SetCell(7' 0' LocalizedStrings.Str342)  							.SetCell(8' 0' LocalizedStrings.Str723).SetStyle(8' typeof(string))  							.SetCell(9' 0' LocalizedStrings.Str724).SetStyle(9' typeof(decimal))  							.SetCell(10' 0' LocalizedStrings.Str725).SetStyle(10' typeof(decimal));    						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.OrderId == null ? message.OrderStringId : message.OrderId.To<string>())  								.SetCell(1' index' message.ServerTime)  								.SetCell(2' index' message.OrderPrice)  								.SetCell(3' index' message.OrderVolume)  								.SetCell(4' index' message.Side)  								.SetCell(5' index' message.OrderState)  								.SetCell(6' index' message.TimeInForce)  								.SetCell(7' index' message.IsSystem);    							if (message.TradePrice != null)  							{  								worker  									.SetCell(8' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  									.SetCell(9' index' message.TradePrice)  									.SetCell(10' index' message.OpenInterest);  							}    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				case ExecutionTypes.Transaction:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(1' 0' LocalizedStrings.Portfolio)  							.SetCell(2' 0' LocalizedStrings.TransactionId)  							.SetCell(3' 0' LocalizedStrings.OrderId)  							.SetCell(4' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(5' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(6' 0' LocalizedStrings.Str1325).SetStyle(3' typeof(decimal))  							.SetCell(7' 0' LocalizedStrings.Str128)  							.SetCell(8' 0' LocalizedStrings.Str132)  							.SetCell(9' 0' LocalizedStrings.Str134)  							.SetCell(10' 0' LocalizedStrings.Str506)  							.SetCell(11' 0' LocalizedStrings.TradePrice).SetStyle(3' typeof(decimal));    						worker.SetConditionalFormatting(7' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(7' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Active)' null' Colors.Blue);  						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Done)' null' Colors.Green);  						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Failed)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.ServerTime)  								.SetCell(1' index' message.PortfolioName)  								.SetCell(2' index' message.TransactionId)  								.SetCell(3' index' message.OrderId == null ? message.OrderStringId : message.OrderId.To<string>())  								.SetCell(4' index' message.OrderPrice)  								.SetCell(5' index' message.OrderVolume)  								.SetCell(6' index' message.Balance)  								.SetCell(7' index' message.Side)  								.SetCell(8' index' message.OrderType)  								.SetCell(9' index' message.OrderState)  								.SetCell(10' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  								.SetCell(11' index' message.TradePrice)  								.SetCell(12' index' message.HasOrderInfo)  								.SetCell(13' index' message.HasTradeInfo);    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				default:  					throw new ArgumentOutOfRangeException();  			}
Magic Number,StockSharp.Algo.Export,ExcelExporter,C:\repos\stocksharp_stocksharp\Algo\Export\ExcelExporter.cs,Export,The following statement contains a magic number: switch ((ExecutionTypes)Arg)  			{  				case ExecutionTypes.Tick:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Id).SetStyle(0' typeof(string))  							.SetCell(1' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(2' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(3' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(4' 0' LocalizedStrings.Str128)  							.SetCell(5' 0' LocalizedStrings.OI).SetStyle(5' typeof(decimal))  							.SetCell(6' 0' "UP_DOWN").SetStyle(5' typeof(bool));    						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  								.SetCell(1' index' message.ServerTime)  								.SetCell(2' index' message.TradePrice)  								.SetCell(3' index' message.TradeVolume)  								.SetCell(4' index' message.OriginSide)  								.SetCell(5' index' message.OpenInterest)  								.SetCell(6' index' message.IsUpTick);    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				case ExecutionTypes.OrderLog:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Id).SetStyle(0' typeof(string))  							.SetCell(1' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(2' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(3' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(4' 0' LocalizedStrings.Str128)  							.SetCell(5' 0' LocalizedStrings.Str722)  							.SetCell(6' 0' LocalizedStrings.Type)  							.SetCell(7' 0' LocalizedStrings.Str342)  							.SetCell(8' 0' LocalizedStrings.Str723).SetStyle(8' typeof(string))  							.SetCell(9' 0' LocalizedStrings.Str724).SetStyle(9' typeof(decimal))  							.SetCell(10' 0' LocalizedStrings.Str725).SetStyle(10' typeof(decimal));    						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.OrderId == null ? message.OrderStringId : message.OrderId.To<string>())  								.SetCell(1' index' message.ServerTime)  								.SetCell(2' index' message.OrderPrice)  								.SetCell(3' index' message.OrderVolume)  								.SetCell(4' index' message.Side)  								.SetCell(5' index' message.OrderState)  								.SetCell(6' index' message.TimeInForce)  								.SetCell(7' index' message.IsSystem);    							if (message.TradePrice != null)  							{  								worker  									.SetCell(8' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  									.SetCell(9' index' message.TradePrice)  									.SetCell(10' index' message.OpenInterest);  							}    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				case ExecutionTypes.Transaction:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(1' 0' LocalizedStrings.Portfolio)  							.SetCell(2' 0' LocalizedStrings.TransactionId)  							.SetCell(3' 0' LocalizedStrings.OrderId)  							.SetCell(4' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(5' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(6' 0' LocalizedStrings.Str1325).SetStyle(3' typeof(decimal))  							.SetCell(7' 0' LocalizedStrings.Str128)  							.SetCell(8' 0' LocalizedStrings.Str132)  							.SetCell(9' 0' LocalizedStrings.Str134)  							.SetCell(10' 0' LocalizedStrings.Str506)  							.SetCell(11' 0' LocalizedStrings.TradePrice).SetStyle(3' typeof(decimal));    						worker.SetConditionalFormatting(7' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(7' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Active)' null' Colors.Blue);  						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Done)' null' Colors.Green);  						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Failed)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.ServerTime)  								.SetCell(1' index' message.PortfolioName)  								.SetCell(2' index' message.TransactionId)  								.SetCell(3' index' message.OrderId == null ? message.OrderStringId : message.OrderId.To<string>())  								.SetCell(4' index' message.OrderPrice)  								.SetCell(5' index' message.OrderVolume)  								.SetCell(6' index' message.Balance)  								.SetCell(7' index' message.Side)  								.SetCell(8' index' message.OrderType)  								.SetCell(9' index' message.OrderState)  								.SetCell(10' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  								.SetCell(11' index' message.TradePrice)  								.SetCell(12' index' message.HasOrderInfo)  								.SetCell(13' index' message.HasTradeInfo);    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				default:  					throw new ArgumentOutOfRangeException();  			}
Magic Number,StockSharp.Algo.Export,ExcelExporter,C:\repos\stocksharp_stocksharp\Algo\Export\ExcelExporter.cs,Export,The following statement contains a magic number: switch ((ExecutionTypes)Arg)  			{  				case ExecutionTypes.Tick:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Id).SetStyle(0' typeof(string))  							.SetCell(1' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(2' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(3' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(4' 0' LocalizedStrings.Str128)  							.SetCell(5' 0' LocalizedStrings.OI).SetStyle(5' typeof(decimal))  							.SetCell(6' 0' "UP_DOWN").SetStyle(5' typeof(bool));    						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  								.SetCell(1' index' message.ServerTime)  								.SetCell(2' index' message.TradePrice)  								.SetCell(3' index' message.TradeVolume)  								.SetCell(4' index' message.OriginSide)  								.SetCell(5' index' message.OpenInterest)  								.SetCell(6' index' message.IsUpTick);    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				case ExecutionTypes.OrderLog:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Id).SetStyle(0' typeof(string))  							.SetCell(1' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(2' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(3' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(4' 0' LocalizedStrings.Str128)  							.SetCell(5' 0' LocalizedStrings.Str722)  							.SetCell(6' 0' LocalizedStrings.Type)  							.SetCell(7' 0' LocalizedStrings.Str342)  							.SetCell(8' 0' LocalizedStrings.Str723).SetStyle(8' typeof(string))  							.SetCell(9' 0' LocalizedStrings.Str724).SetStyle(9' typeof(decimal))  							.SetCell(10' 0' LocalizedStrings.Str725).SetStyle(10' typeof(decimal));    						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.OrderId == null ? message.OrderStringId : message.OrderId.To<string>())  								.SetCell(1' index' message.ServerTime)  								.SetCell(2' index' message.OrderPrice)  								.SetCell(3' index' message.OrderVolume)  								.SetCell(4' index' message.Side)  								.SetCell(5' index' message.OrderState)  								.SetCell(6' index' message.TimeInForce)  								.SetCell(7' index' message.IsSystem);    							if (message.TradePrice != null)  							{  								worker  									.SetCell(8' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  									.SetCell(9' index' message.TradePrice)  									.SetCell(10' index' message.OpenInterest);  							}    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				case ExecutionTypes.Transaction:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(1' 0' LocalizedStrings.Portfolio)  							.SetCell(2' 0' LocalizedStrings.TransactionId)  							.SetCell(3' 0' LocalizedStrings.OrderId)  							.SetCell(4' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(5' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(6' 0' LocalizedStrings.Str1325).SetStyle(3' typeof(decimal))  							.SetCell(7' 0' LocalizedStrings.Str128)  							.SetCell(8' 0' LocalizedStrings.Str132)  							.SetCell(9' 0' LocalizedStrings.Str134)  							.SetCell(10' 0' LocalizedStrings.Str506)  							.SetCell(11' 0' LocalizedStrings.TradePrice).SetStyle(3' typeof(decimal));    						worker.SetConditionalFormatting(7' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(7' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Active)' null' Colors.Blue);  						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Done)' null' Colors.Green);  						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Failed)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.ServerTime)  								.SetCell(1' index' message.PortfolioName)  								.SetCell(2' index' message.TransactionId)  								.SetCell(3' index' message.OrderId == null ? message.OrderStringId : message.OrderId.To<string>())  								.SetCell(4' index' message.OrderPrice)  								.SetCell(5' index' message.OrderVolume)  								.SetCell(6' index' message.Balance)  								.SetCell(7' index' message.Side)  								.SetCell(8' index' message.OrderType)  								.SetCell(9' index' message.OrderState)  								.SetCell(10' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  								.SetCell(11' index' message.TradePrice)  								.SetCell(12' index' message.HasOrderInfo)  								.SetCell(13' index' message.HasTradeInfo);    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				default:  					throw new ArgumentOutOfRangeException();  			}
Magic Number,StockSharp.Algo.Export,ExcelExporter,C:\repos\stocksharp_stocksharp\Algo\Export\ExcelExporter.cs,Export,The following statement contains a magic number: switch ((ExecutionTypes)Arg)  			{  				case ExecutionTypes.Tick:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Id).SetStyle(0' typeof(string))  							.SetCell(1' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(2' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(3' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(4' 0' LocalizedStrings.Str128)  							.SetCell(5' 0' LocalizedStrings.OI).SetStyle(5' typeof(decimal))  							.SetCell(6' 0' "UP_DOWN").SetStyle(5' typeof(bool));    						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  								.SetCell(1' index' message.ServerTime)  								.SetCell(2' index' message.TradePrice)  								.SetCell(3' index' message.TradeVolume)  								.SetCell(4' index' message.OriginSide)  								.SetCell(5' index' message.OpenInterest)  								.SetCell(6' index' message.IsUpTick);    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				case ExecutionTypes.OrderLog:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Id).SetStyle(0' typeof(string))  							.SetCell(1' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(2' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(3' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(4' 0' LocalizedStrings.Str128)  							.SetCell(5' 0' LocalizedStrings.Str722)  							.SetCell(6' 0' LocalizedStrings.Type)  							.SetCell(7' 0' LocalizedStrings.Str342)  							.SetCell(8' 0' LocalizedStrings.Str723).SetStyle(8' typeof(string))  							.SetCell(9' 0' LocalizedStrings.Str724).SetStyle(9' typeof(decimal))  							.SetCell(10' 0' LocalizedStrings.Str725).SetStyle(10' typeof(decimal));    						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.OrderId == null ? message.OrderStringId : message.OrderId.To<string>())  								.SetCell(1' index' message.ServerTime)  								.SetCell(2' index' message.OrderPrice)  								.SetCell(3' index' message.OrderVolume)  								.SetCell(4' index' message.Side)  								.SetCell(5' index' message.OrderState)  								.SetCell(6' index' message.TimeInForce)  								.SetCell(7' index' message.IsSystem);    							if (message.TradePrice != null)  							{  								worker  									.SetCell(8' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  									.SetCell(9' index' message.TradePrice)  									.SetCell(10' index' message.OpenInterest);  							}    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				case ExecutionTypes.Transaction:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(1' 0' LocalizedStrings.Portfolio)  							.SetCell(2' 0' LocalizedStrings.TransactionId)  							.SetCell(3' 0' LocalizedStrings.OrderId)  							.SetCell(4' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(5' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(6' 0' LocalizedStrings.Str1325).SetStyle(3' typeof(decimal))  							.SetCell(7' 0' LocalizedStrings.Str128)  							.SetCell(8' 0' LocalizedStrings.Str132)  							.SetCell(9' 0' LocalizedStrings.Str134)  							.SetCell(10' 0' LocalizedStrings.Str506)  							.SetCell(11' 0' LocalizedStrings.TradePrice).SetStyle(3' typeof(decimal));    						worker.SetConditionalFormatting(7' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(7' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Active)' null' Colors.Blue);  						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Done)' null' Colors.Green);  						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Failed)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.ServerTime)  								.SetCell(1' index' message.PortfolioName)  								.SetCell(2' index' message.TransactionId)  								.SetCell(3' index' message.OrderId == null ? message.OrderStringId : message.OrderId.To<string>())  								.SetCell(4' index' message.OrderPrice)  								.SetCell(5' index' message.OrderVolume)  								.SetCell(6' index' message.Balance)  								.SetCell(7' index' message.Side)  								.SetCell(8' index' message.OrderType)  								.SetCell(9' index' message.OrderState)  								.SetCell(10' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  								.SetCell(11' index' message.TradePrice)  								.SetCell(12' index' message.HasOrderInfo)  								.SetCell(13' index' message.HasTradeInfo);    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				default:  					throw new ArgumentOutOfRangeException();  			}
Magic Number,StockSharp.Algo.Export,ExcelExporter,C:\repos\stocksharp_stocksharp\Algo\Export\ExcelExporter.cs,Export,The following statement contains a magic number: switch ((ExecutionTypes)Arg)  			{  				case ExecutionTypes.Tick:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Id).SetStyle(0' typeof(string))  							.SetCell(1' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(2' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(3' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(4' 0' LocalizedStrings.Str128)  							.SetCell(5' 0' LocalizedStrings.OI).SetStyle(5' typeof(decimal))  							.SetCell(6' 0' "UP_DOWN").SetStyle(5' typeof(bool));    						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  								.SetCell(1' index' message.ServerTime)  								.SetCell(2' index' message.TradePrice)  								.SetCell(3' index' message.TradeVolume)  								.SetCell(4' index' message.OriginSide)  								.SetCell(5' index' message.OpenInterest)  								.SetCell(6' index' message.IsUpTick);    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				case ExecutionTypes.OrderLog:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Id).SetStyle(0' typeof(string))  							.SetCell(1' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(2' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(3' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(4' 0' LocalizedStrings.Str128)  							.SetCell(5' 0' LocalizedStrings.Str722)  							.SetCell(6' 0' LocalizedStrings.Type)  							.SetCell(7' 0' LocalizedStrings.Str342)  							.SetCell(8' 0' LocalizedStrings.Str723).SetStyle(8' typeof(string))  							.SetCell(9' 0' LocalizedStrings.Str724).SetStyle(9' typeof(decimal))  							.SetCell(10' 0' LocalizedStrings.Str725).SetStyle(10' typeof(decimal));    						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.OrderId == null ? message.OrderStringId : message.OrderId.To<string>())  								.SetCell(1' index' message.ServerTime)  								.SetCell(2' index' message.OrderPrice)  								.SetCell(3' index' message.OrderVolume)  								.SetCell(4' index' message.Side)  								.SetCell(5' index' message.OrderState)  								.SetCell(6' index' message.TimeInForce)  								.SetCell(7' index' message.IsSystem);    							if (message.TradePrice != null)  							{  								worker  									.SetCell(8' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  									.SetCell(9' index' message.TradePrice)  									.SetCell(10' index' message.OpenInterest);  							}    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				case ExecutionTypes.Transaction:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(1' 0' LocalizedStrings.Portfolio)  							.SetCell(2' 0' LocalizedStrings.TransactionId)  							.SetCell(3' 0' LocalizedStrings.OrderId)  							.SetCell(4' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(5' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(6' 0' LocalizedStrings.Str1325).SetStyle(3' typeof(decimal))  							.SetCell(7' 0' LocalizedStrings.Str128)  							.SetCell(8' 0' LocalizedStrings.Str132)  							.SetCell(9' 0' LocalizedStrings.Str134)  							.SetCell(10' 0' LocalizedStrings.Str506)  							.SetCell(11' 0' LocalizedStrings.TradePrice).SetStyle(3' typeof(decimal));    						worker.SetConditionalFormatting(7' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(7' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Active)' null' Colors.Blue);  						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Done)' null' Colors.Green);  						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Failed)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.ServerTime)  								.SetCell(1' index' message.PortfolioName)  								.SetCell(2' index' message.TransactionId)  								.SetCell(3' index' message.OrderId == null ? message.OrderStringId : message.OrderId.To<string>())  								.SetCell(4' index' message.OrderPrice)  								.SetCell(5' index' message.OrderVolume)  								.SetCell(6' index' message.Balance)  								.SetCell(7' index' message.Side)  								.SetCell(8' index' message.OrderType)  								.SetCell(9' index' message.OrderState)  								.SetCell(10' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  								.SetCell(11' index' message.TradePrice)  								.SetCell(12' index' message.HasOrderInfo)  								.SetCell(13' index' message.HasTradeInfo);    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				default:  					throw new ArgumentOutOfRangeException();  			}
Magic Number,StockSharp.Algo.Export,ExcelExporter,C:\repos\stocksharp_stocksharp\Algo\Export\ExcelExporter.cs,Export,The following statement contains a magic number: switch ((ExecutionTypes)Arg)  			{  				case ExecutionTypes.Tick:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Id).SetStyle(0' typeof(string))  							.SetCell(1' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(2' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(3' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(4' 0' LocalizedStrings.Str128)  							.SetCell(5' 0' LocalizedStrings.OI).SetStyle(5' typeof(decimal))  							.SetCell(6' 0' "UP_DOWN").SetStyle(5' typeof(bool));    						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  								.SetCell(1' index' message.ServerTime)  								.SetCell(2' index' message.TradePrice)  								.SetCell(3' index' message.TradeVolume)  								.SetCell(4' index' message.OriginSide)  								.SetCell(5' index' message.OpenInterest)  								.SetCell(6' index' message.IsUpTick);    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				case ExecutionTypes.OrderLog:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Id).SetStyle(0' typeof(string))  							.SetCell(1' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(2' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(3' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(4' 0' LocalizedStrings.Str128)  							.SetCell(5' 0' LocalizedStrings.Str722)  							.SetCell(6' 0' LocalizedStrings.Type)  							.SetCell(7' 0' LocalizedStrings.Str342)  							.SetCell(8' 0' LocalizedStrings.Str723).SetStyle(8' typeof(string))  							.SetCell(9' 0' LocalizedStrings.Str724).SetStyle(9' typeof(decimal))  							.SetCell(10' 0' LocalizedStrings.Str725).SetStyle(10' typeof(decimal));    						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.OrderId == null ? message.OrderStringId : message.OrderId.To<string>())  								.SetCell(1' index' message.ServerTime)  								.SetCell(2' index' message.OrderPrice)  								.SetCell(3' index' message.OrderVolume)  								.SetCell(4' index' message.Side)  								.SetCell(5' index' message.OrderState)  								.SetCell(6' index' message.TimeInForce)  								.SetCell(7' index' message.IsSystem);    							if (message.TradePrice != null)  							{  								worker  									.SetCell(8' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  									.SetCell(9' index' message.TradePrice)  									.SetCell(10' index' message.OpenInterest);  							}    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				case ExecutionTypes.Transaction:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(1' 0' LocalizedStrings.Portfolio)  							.SetCell(2' 0' LocalizedStrings.TransactionId)  							.SetCell(3' 0' LocalizedStrings.OrderId)  							.SetCell(4' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(5' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(6' 0' LocalizedStrings.Str1325).SetStyle(3' typeof(decimal))  							.SetCell(7' 0' LocalizedStrings.Str128)  							.SetCell(8' 0' LocalizedStrings.Str132)  							.SetCell(9' 0' LocalizedStrings.Str134)  							.SetCell(10' 0' LocalizedStrings.Str506)  							.SetCell(11' 0' LocalizedStrings.TradePrice).SetStyle(3' typeof(decimal));    						worker.SetConditionalFormatting(7' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(7' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Active)' null' Colors.Blue);  						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Done)' null' Colors.Green);  						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Failed)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.ServerTime)  								.SetCell(1' index' message.PortfolioName)  								.SetCell(2' index' message.TransactionId)  								.SetCell(3' index' message.OrderId == null ? message.OrderStringId : message.OrderId.To<string>())  								.SetCell(4' index' message.OrderPrice)  								.SetCell(5' index' message.OrderVolume)  								.SetCell(6' index' message.Balance)  								.SetCell(7' index' message.Side)  								.SetCell(8' index' message.OrderType)  								.SetCell(9' index' message.OrderState)  								.SetCell(10' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  								.SetCell(11' index' message.TradePrice)  								.SetCell(12' index' message.HasOrderInfo)  								.SetCell(13' index' message.HasTradeInfo);    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				default:  					throw new ArgumentOutOfRangeException();  			}
Magic Number,StockSharp.Algo.Export,ExcelExporter,C:\repos\stocksharp_stocksharp\Algo\Export\ExcelExporter.cs,Export,The following statement contains a magic number: switch ((ExecutionTypes)Arg)  			{  				case ExecutionTypes.Tick:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Id).SetStyle(0' typeof(string))  							.SetCell(1' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(2' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(3' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(4' 0' LocalizedStrings.Str128)  							.SetCell(5' 0' LocalizedStrings.OI).SetStyle(5' typeof(decimal))  							.SetCell(6' 0' "UP_DOWN").SetStyle(5' typeof(bool));    						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  								.SetCell(1' index' message.ServerTime)  								.SetCell(2' index' message.TradePrice)  								.SetCell(3' index' message.TradeVolume)  								.SetCell(4' index' message.OriginSide)  								.SetCell(5' index' message.OpenInterest)  								.SetCell(6' index' message.IsUpTick);    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				case ExecutionTypes.OrderLog:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Id).SetStyle(0' typeof(string))  							.SetCell(1' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(2' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(3' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(4' 0' LocalizedStrings.Str128)  							.SetCell(5' 0' LocalizedStrings.Str722)  							.SetCell(6' 0' LocalizedStrings.Type)  							.SetCell(7' 0' LocalizedStrings.Str342)  							.SetCell(8' 0' LocalizedStrings.Str723).SetStyle(8' typeof(string))  							.SetCell(9' 0' LocalizedStrings.Str724).SetStyle(9' typeof(decimal))  							.SetCell(10' 0' LocalizedStrings.Str725).SetStyle(10' typeof(decimal));    						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.OrderId == null ? message.OrderStringId : message.OrderId.To<string>())  								.SetCell(1' index' message.ServerTime)  								.SetCell(2' index' message.OrderPrice)  								.SetCell(3' index' message.OrderVolume)  								.SetCell(4' index' message.Side)  								.SetCell(5' index' message.OrderState)  								.SetCell(6' index' message.TimeInForce)  								.SetCell(7' index' message.IsSystem);    							if (message.TradePrice != null)  							{  								worker  									.SetCell(8' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  									.SetCell(9' index' message.TradePrice)  									.SetCell(10' index' message.OpenInterest);  							}    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				case ExecutionTypes.Transaction:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(1' 0' LocalizedStrings.Portfolio)  							.SetCell(2' 0' LocalizedStrings.TransactionId)  							.SetCell(3' 0' LocalizedStrings.OrderId)  							.SetCell(4' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(5' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(6' 0' LocalizedStrings.Str1325).SetStyle(3' typeof(decimal))  							.SetCell(7' 0' LocalizedStrings.Str128)  							.SetCell(8' 0' LocalizedStrings.Str132)  							.SetCell(9' 0' LocalizedStrings.Str134)  							.SetCell(10' 0' LocalizedStrings.Str506)  							.SetCell(11' 0' LocalizedStrings.TradePrice).SetStyle(3' typeof(decimal));    						worker.SetConditionalFormatting(7' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(7' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Active)' null' Colors.Blue);  						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Done)' null' Colors.Green);  						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Failed)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.ServerTime)  								.SetCell(1' index' message.PortfolioName)  								.SetCell(2' index' message.TransactionId)  								.SetCell(3' index' message.OrderId == null ? message.OrderStringId : message.OrderId.To<string>())  								.SetCell(4' index' message.OrderPrice)  								.SetCell(5' index' message.OrderVolume)  								.SetCell(6' index' message.Balance)  								.SetCell(7' index' message.Side)  								.SetCell(8' index' message.OrderType)  								.SetCell(9' index' message.OrderState)  								.SetCell(10' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  								.SetCell(11' index' message.TradePrice)  								.SetCell(12' index' message.HasOrderInfo)  								.SetCell(13' index' message.HasTradeInfo);    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				default:  					throw new ArgumentOutOfRangeException();  			}
Magic Number,StockSharp.Algo.Export,ExcelExporter,C:\repos\stocksharp_stocksharp\Algo\Export\ExcelExporter.cs,Export,The following statement contains a magic number: switch ((ExecutionTypes)Arg)  			{  				case ExecutionTypes.Tick:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Id).SetStyle(0' typeof(string))  							.SetCell(1' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(2' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(3' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(4' 0' LocalizedStrings.Str128)  							.SetCell(5' 0' LocalizedStrings.OI).SetStyle(5' typeof(decimal))  							.SetCell(6' 0' "UP_DOWN").SetStyle(5' typeof(bool));    						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  								.SetCell(1' index' message.ServerTime)  								.SetCell(2' index' message.TradePrice)  								.SetCell(3' index' message.TradeVolume)  								.SetCell(4' index' message.OriginSide)  								.SetCell(5' index' message.OpenInterest)  								.SetCell(6' index' message.IsUpTick);    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				case ExecutionTypes.OrderLog:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Id).SetStyle(0' typeof(string))  							.SetCell(1' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(2' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(3' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(4' 0' LocalizedStrings.Str128)  							.SetCell(5' 0' LocalizedStrings.Str722)  							.SetCell(6' 0' LocalizedStrings.Type)  							.SetCell(7' 0' LocalizedStrings.Str342)  							.SetCell(8' 0' LocalizedStrings.Str723).SetStyle(8' typeof(string))  							.SetCell(9' 0' LocalizedStrings.Str724).SetStyle(9' typeof(decimal))  							.SetCell(10' 0' LocalizedStrings.Str725).SetStyle(10' typeof(decimal));    						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.OrderId == null ? message.OrderStringId : message.OrderId.To<string>())  								.SetCell(1' index' message.ServerTime)  								.SetCell(2' index' message.OrderPrice)  								.SetCell(3' index' message.OrderVolume)  								.SetCell(4' index' message.Side)  								.SetCell(5' index' message.OrderState)  								.SetCell(6' index' message.TimeInForce)  								.SetCell(7' index' message.IsSystem);    							if (message.TradePrice != null)  							{  								worker  									.SetCell(8' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  									.SetCell(9' index' message.TradePrice)  									.SetCell(10' index' message.OpenInterest);  							}    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				case ExecutionTypes.Transaction:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(1' 0' LocalizedStrings.Portfolio)  							.SetCell(2' 0' LocalizedStrings.TransactionId)  							.SetCell(3' 0' LocalizedStrings.OrderId)  							.SetCell(4' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(5' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(6' 0' LocalizedStrings.Str1325).SetStyle(3' typeof(decimal))  							.SetCell(7' 0' LocalizedStrings.Str128)  							.SetCell(8' 0' LocalizedStrings.Str132)  							.SetCell(9' 0' LocalizedStrings.Str134)  							.SetCell(10' 0' LocalizedStrings.Str506)  							.SetCell(11' 0' LocalizedStrings.TradePrice).SetStyle(3' typeof(decimal));    						worker.SetConditionalFormatting(7' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(7' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Active)' null' Colors.Blue);  						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Done)' null' Colors.Green);  						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Failed)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.ServerTime)  								.SetCell(1' index' message.PortfolioName)  								.SetCell(2' index' message.TransactionId)  								.SetCell(3' index' message.OrderId == null ? message.OrderStringId : message.OrderId.To<string>())  								.SetCell(4' index' message.OrderPrice)  								.SetCell(5' index' message.OrderVolume)  								.SetCell(6' index' message.Balance)  								.SetCell(7' index' message.Side)  								.SetCell(8' index' message.OrderType)  								.SetCell(9' index' message.OrderState)  								.SetCell(10' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  								.SetCell(11' index' message.TradePrice)  								.SetCell(12' index' message.HasOrderInfo)  								.SetCell(13' index' message.HasTradeInfo);    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				default:  					throw new ArgumentOutOfRangeException();  			}
Magic Number,StockSharp.Algo.Export,ExcelExporter,C:\repos\stocksharp_stocksharp\Algo\Export\ExcelExporter.cs,Export,The following statement contains a magic number: switch ((ExecutionTypes)Arg)  			{  				case ExecutionTypes.Tick:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Id).SetStyle(0' typeof(string))  							.SetCell(1' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(2' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(3' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(4' 0' LocalizedStrings.Str128)  							.SetCell(5' 0' LocalizedStrings.OI).SetStyle(5' typeof(decimal))  							.SetCell(6' 0' "UP_DOWN").SetStyle(5' typeof(bool));    						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  								.SetCell(1' index' message.ServerTime)  								.SetCell(2' index' message.TradePrice)  								.SetCell(3' index' message.TradeVolume)  								.SetCell(4' index' message.OriginSide)  								.SetCell(5' index' message.OpenInterest)  								.SetCell(6' index' message.IsUpTick);    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				case ExecutionTypes.OrderLog:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Id).SetStyle(0' typeof(string))  							.SetCell(1' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(2' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(3' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(4' 0' LocalizedStrings.Str128)  							.SetCell(5' 0' LocalizedStrings.Str722)  							.SetCell(6' 0' LocalizedStrings.Type)  							.SetCell(7' 0' LocalizedStrings.Str342)  							.SetCell(8' 0' LocalizedStrings.Str723).SetStyle(8' typeof(string))  							.SetCell(9' 0' LocalizedStrings.Str724).SetStyle(9' typeof(decimal))  							.SetCell(10' 0' LocalizedStrings.Str725).SetStyle(10' typeof(decimal));    						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.OrderId == null ? message.OrderStringId : message.OrderId.To<string>())  								.SetCell(1' index' message.ServerTime)  								.SetCell(2' index' message.OrderPrice)  								.SetCell(3' index' message.OrderVolume)  								.SetCell(4' index' message.Side)  								.SetCell(5' index' message.OrderState)  								.SetCell(6' index' message.TimeInForce)  								.SetCell(7' index' message.IsSystem);    							if (message.TradePrice != null)  							{  								worker  									.SetCell(8' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  									.SetCell(9' index' message.TradePrice)  									.SetCell(10' index' message.OpenInterest);  							}    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				case ExecutionTypes.Transaction:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(1' 0' LocalizedStrings.Portfolio)  							.SetCell(2' 0' LocalizedStrings.TransactionId)  							.SetCell(3' 0' LocalizedStrings.OrderId)  							.SetCell(4' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(5' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(6' 0' LocalizedStrings.Str1325).SetStyle(3' typeof(decimal))  							.SetCell(7' 0' LocalizedStrings.Str128)  							.SetCell(8' 0' LocalizedStrings.Str132)  							.SetCell(9' 0' LocalizedStrings.Str134)  							.SetCell(10' 0' LocalizedStrings.Str506)  							.SetCell(11' 0' LocalizedStrings.TradePrice).SetStyle(3' typeof(decimal));    						worker.SetConditionalFormatting(7' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(7' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Active)' null' Colors.Blue);  						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Done)' null' Colors.Green);  						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Failed)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.ServerTime)  								.SetCell(1' index' message.PortfolioName)  								.SetCell(2' index' message.TransactionId)  								.SetCell(3' index' message.OrderId == null ? message.OrderStringId : message.OrderId.To<string>())  								.SetCell(4' index' message.OrderPrice)  								.SetCell(5' index' message.OrderVolume)  								.SetCell(6' index' message.Balance)  								.SetCell(7' index' message.Side)  								.SetCell(8' index' message.OrderType)  								.SetCell(9' index' message.OrderState)  								.SetCell(10' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  								.SetCell(11' index' message.TradePrice)  								.SetCell(12' index' message.HasOrderInfo)  								.SetCell(13' index' message.HasTradeInfo);    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				default:  					throw new ArgumentOutOfRangeException();  			}
Magic Number,StockSharp.Algo.Export,ExcelExporter,C:\repos\stocksharp_stocksharp\Algo\Export\ExcelExporter.cs,Export,The following statement contains a magic number: switch ((ExecutionTypes)Arg)  			{  				case ExecutionTypes.Tick:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Id).SetStyle(0' typeof(string))  							.SetCell(1' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(2' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(3' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(4' 0' LocalizedStrings.Str128)  							.SetCell(5' 0' LocalizedStrings.OI).SetStyle(5' typeof(decimal))  							.SetCell(6' 0' "UP_DOWN").SetStyle(5' typeof(bool));    						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  								.SetCell(1' index' message.ServerTime)  								.SetCell(2' index' message.TradePrice)  								.SetCell(3' index' message.TradeVolume)  								.SetCell(4' index' message.OriginSide)  								.SetCell(5' index' message.OpenInterest)  								.SetCell(6' index' message.IsUpTick);    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				case ExecutionTypes.OrderLog:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Id).SetStyle(0' typeof(string))  							.SetCell(1' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(2' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(3' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(4' 0' LocalizedStrings.Str128)  							.SetCell(5' 0' LocalizedStrings.Str722)  							.SetCell(6' 0' LocalizedStrings.Type)  							.SetCell(7' 0' LocalizedStrings.Str342)  							.SetCell(8' 0' LocalizedStrings.Str723).SetStyle(8' typeof(string))  							.SetCell(9' 0' LocalizedStrings.Str724).SetStyle(9' typeof(decimal))  							.SetCell(10' 0' LocalizedStrings.Str725).SetStyle(10' typeof(decimal));    						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.OrderId == null ? message.OrderStringId : message.OrderId.To<string>())  								.SetCell(1' index' message.ServerTime)  								.SetCell(2' index' message.OrderPrice)  								.SetCell(3' index' message.OrderVolume)  								.SetCell(4' index' message.Side)  								.SetCell(5' index' message.OrderState)  								.SetCell(6' index' message.TimeInForce)  								.SetCell(7' index' message.IsSystem);    							if (message.TradePrice != null)  							{  								worker  									.SetCell(8' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  									.SetCell(9' index' message.TradePrice)  									.SetCell(10' index' message.OpenInterest);  							}    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				case ExecutionTypes.Transaction:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(1' 0' LocalizedStrings.Portfolio)  							.SetCell(2' 0' LocalizedStrings.TransactionId)  							.SetCell(3' 0' LocalizedStrings.OrderId)  							.SetCell(4' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(5' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(6' 0' LocalizedStrings.Str1325).SetStyle(3' typeof(decimal))  							.SetCell(7' 0' LocalizedStrings.Str128)  							.SetCell(8' 0' LocalizedStrings.Str132)  							.SetCell(9' 0' LocalizedStrings.Str134)  							.SetCell(10' 0' LocalizedStrings.Str506)  							.SetCell(11' 0' LocalizedStrings.TradePrice).SetStyle(3' typeof(decimal));    						worker.SetConditionalFormatting(7' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(7' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Active)' null' Colors.Blue);  						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Done)' null' Colors.Green);  						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Failed)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.ServerTime)  								.SetCell(1' index' message.PortfolioName)  								.SetCell(2' index' message.TransactionId)  								.SetCell(3' index' message.OrderId == null ? message.OrderStringId : message.OrderId.To<string>())  								.SetCell(4' index' message.OrderPrice)  								.SetCell(5' index' message.OrderVolume)  								.SetCell(6' index' message.Balance)  								.SetCell(7' index' message.Side)  								.SetCell(8' index' message.OrderType)  								.SetCell(9' index' message.OrderState)  								.SetCell(10' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  								.SetCell(11' index' message.TradePrice)  								.SetCell(12' index' message.HasOrderInfo)  								.SetCell(13' index' message.HasTradeInfo);    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				default:  					throw new ArgumentOutOfRangeException();  			}
Magic Number,StockSharp.Algo.Export,ExcelExporter,C:\repos\stocksharp_stocksharp\Algo\Export\ExcelExporter.cs,Export,The following statement contains a magic number: switch ((ExecutionTypes)Arg)  			{  				case ExecutionTypes.Tick:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Id).SetStyle(0' typeof(string))  							.SetCell(1' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(2' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(3' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(4' 0' LocalizedStrings.Str128)  							.SetCell(5' 0' LocalizedStrings.OI).SetStyle(5' typeof(decimal))  							.SetCell(6' 0' "UP_DOWN").SetStyle(5' typeof(bool));    						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  								.SetCell(1' index' message.ServerTime)  								.SetCell(2' index' message.TradePrice)  								.SetCell(3' index' message.TradeVolume)  								.SetCell(4' index' message.OriginSide)  								.SetCell(5' index' message.OpenInterest)  								.SetCell(6' index' message.IsUpTick);    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				case ExecutionTypes.OrderLog:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Id).SetStyle(0' typeof(string))  							.SetCell(1' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(2' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(3' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(4' 0' LocalizedStrings.Str128)  							.SetCell(5' 0' LocalizedStrings.Str722)  							.SetCell(6' 0' LocalizedStrings.Type)  							.SetCell(7' 0' LocalizedStrings.Str342)  							.SetCell(8' 0' LocalizedStrings.Str723).SetStyle(8' typeof(string))  							.SetCell(9' 0' LocalizedStrings.Str724).SetStyle(9' typeof(decimal))  							.SetCell(10' 0' LocalizedStrings.Str725).SetStyle(10' typeof(decimal));    						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.OrderId == null ? message.OrderStringId : message.OrderId.To<string>())  								.SetCell(1' index' message.ServerTime)  								.SetCell(2' index' message.OrderPrice)  								.SetCell(3' index' message.OrderVolume)  								.SetCell(4' index' message.Side)  								.SetCell(5' index' message.OrderState)  								.SetCell(6' index' message.TimeInForce)  								.SetCell(7' index' message.IsSystem);    							if (message.TradePrice != null)  							{  								worker  									.SetCell(8' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  									.SetCell(9' index' message.TradePrice)  									.SetCell(10' index' message.OpenInterest);  							}    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				case ExecutionTypes.Transaction:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(1' 0' LocalizedStrings.Portfolio)  							.SetCell(2' 0' LocalizedStrings.TransactionId)  							.SetCell(3' 0' LocalizedStrings.OrderId)  							.SetCell(4' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(5' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(6' 0' LocalizedStrings.Str1325).SetStyle(3' typeof(decimal))  							.SetCell(7' 0' LocalizedStrings.Str128)  							.SetCell(8' 0' LocalizedStrings.Str132)  							.SetCell(9' 0' LocalizedStrings.Str134)  							.SetCell(10' 0' LocalizedStrings.Str506)  							.SetCell(11' 0' LocalizedStrings.TradePrice).SetStyle(3' typeof(decimal));    						worker.SetConditionalFormatting(7' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(7' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Active)' null' Colors.Blue);  						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Done)' null' Colors.Green);  						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Failed)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.ServerTime)  								.SetCell(1' index' message.PortfolioName)  								.SetCell(2' index' message.TransactionId)  								.SetCell(3' index' message.OrderId == null ? message.OrderStringId : message.OrderId.To<string>())  								.SetCell(4' index' message.OrderPrice)  								.SetCell(5' index' message.OrderVolume)  								.SetCell(6' index' message.Balance)  								.SetCell(7' index' message.Side)  								.SetCell(8' index' message.OrderType)  								.SetCell(9' index' message.OrderState)  								.SetCell(10' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  								.SetCell(11' index' message.TradePrice)  								.SetCell(12' index' message.HasOrderInfo)  								.SetCell(13' index' message.HasTradeInfo);    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				default:  					throw new ArgumentOutOfRangeException();  			}
Magic Number,StockSharp.Algo.Export,ExcelExporter,C:\repos\stocksharp_stocksharp\Algo\Export\ExcelExporter.cs,Export,The following statement contains a magic number: switch ((ExecutionTypes)Arg)  			{  				case ExecutionTypes.Tick:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Id).SetStyle(0' typeof(string))  							.SetCell(1' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(2' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(3' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(4' 0' LocalizedStrings.Str128)  							.SetCell(5' 0' LocalizedStrings.OI).SetStyle(5' typeof(decimal))  							.SetCell(6' 0' "UP_DOWN").SetStyle(5' typeof(bool));    						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  								.SetCell(1' index' message.ServerTime)  								.SetCell(2' index' message.TradePrice)  								.SetCell(3' index' message.TradeVolume)  								.SetCell(4' index' message.OriginSide)  								.SetCell(5' index' message.OpenInterest)  								.SetCell(6' index' message.IsUpTick);    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				case ExecutionTypes.OrderLog:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Id).SetStyle(0' typeof(string))  							.SetCell(1' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(2' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(3' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(4' 0' LocalizedStrings.Str128)  							.SetCell(5' 0' LocalizedStrings.Str722)  							.SetCell(6' 0' LocalizedStrings.Type)  							.SetCell(7' 0' LocalizedStrings.Str342)  							.SetCell(8' 0' LocalizedStrings.Str723).SetStyle(8' typeof(string))  							.SetCell(9' 0' LocalizedStrings.Str724).SetStyle(9' typeof(decimal))  							.SetCell(10' 0' LocalizedStrings.Str725).SetStyle(10' typeof(decimal));    						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.OrderId == null ? message.OrderStringId : message.OrderId.To<string>())  								.SetCell(1' index' message.ServerTime)  								.SetCell(2' index' message.OrderPrice)  								.SetCell(3' index' message.OrderVolume)  								.SetCell(4' index' message.Side)  								.SetCell(5' index' message.OrderState)  								.SetCell(6' index' message.TimeInForce)  								.SetCell(7' index' message.IsSystem);    							if (message.TradePrice != null)  							{  								worker  									.SetCell(8' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  									.SetCell(9' index' message.TradePrice)  									.SetCell(10' index' message.OpenInterest);  							}    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				case ExecutionTypes.Transaction:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(1' 0' LocalizedStrings.Portfolio)  							.SetCell(2' 0' LocalizedStrings.TransactionId)  							.SetCell(3' 0' LocalizedStrings.OrderId)  							.SetCell(4' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(5' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(6' 0' LocalizedStrings.Str1325).SetStyle(3' typeof(decimal))  							.SetCell(7' 0' LocalizedStrings.Str128)  							.SetCell(8' 0' LocalizedStrings.Str132)  							.SetCell(9' 0' LocalizedStrings.Str134)  							.SetCell(10' 0' LocalizedStrings.Str506)  							.SetCell(11' 0' LocalizedStrings.TradePrice).SetStyle(3' typeof(decimal));    						worker.SetConditionalFormatting(7' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(7' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Active)' null' Colors.Blue);  						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Done)' null' Colors.Green);  						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Failed)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.ServerTime)  								.SetCell(1' index' message.PortfolioName)  								.SetCell(2' index' message.TransactionId)  								.SetCell(3' index' message.OrderId == null ? message.OrderStringId : message.OrderId.To<string>())  								.SetCell(4' index' message.OrderPrice)  								.SetCell(5' index' message.OrderVolume)  								.SetCell(6' index' message.Balance)  								.SetCell(7' index' message.Side)  								.SetCell(8' index' message.OrderType)  								.SetCell(9' index' message.OrderState)  								.SetCell(10' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  								.SetCell(11' index' message.TradePrice)  								.SetCell(12' index' message.HasOrderInfo)  								.SetCell(13' index' message.HasTradeInfo);    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				default:  					throw new ArgumentOutOfRangeException();  			}
Magic Number,StockSharp.Algo.Export,ExcelExporter,C:\repos\stocksharp_stocksharp\Algo\Export\ExcelExporter.cs,Export,The following statement contains a magic number: switch ((ExecutionTypes)Arg)  			{  				case ExecutionTypes.Tick:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Id).SetStyle(0' typeof(string))  							.SetCell(1' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(2' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(3' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(4' 0' LocalizedStrings.Str128)  							.SetCell(5' 0' LocalizedStrings.OI).SetStyle(5' typeof(decimal))  							.SetCell(6' 0' "UP_DOWN").SetStyle(5' typeof(bool));    						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  								.SetCell(1' index' message.ServerTime)  								.SetCell(2' index' message.TradePrice)  								.SetCell(3' index' message.TradeVolume)  								.SetCell(4' index' message.OriginSide)  								.SetCell(5' index' message.OpenInterest)  								.SetCell(6' index' message.IsUpTick);    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				case ExecutionTypes.OrderLog:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Id).SetStyle(0' typeof(string))  							.SetCell(1' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(2' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(3' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(4' 0' LocalizedStrings.Str128)  							.SetCell(5' 0' LocalizedStrings.Str722)  							.SetCell(6' 0' LocalizedStrings.Type)  							.SetCell(7' 0' LocalizedStrings.Str342)  							.SetCell(8' 0' LocalizedStrings.Str723).SetStyle(8' typeof(string))  							.SetCell(9' 0' LocalizedStrings.Str724).SetStyle(9' typeof(decimal))  							.SetCell(10' 0' LocalizedStrings.Str725).SetStyle(10' typeof(decimal));    						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.OrderId == null ? message.OrderStringId : message.OrderId.To<string>())  								.SetCell(1' index' message.ServerTime)  								.SetCell(2' index' message.OrderPrice)  								.SetCell(3' index' message.OrderVolume)  								.SetCell(4' index' message.Side)  								.SetCell(5' index' message.OrderState)  								.SetCell(6' index' message.TimeInForce)  								.SetCell(7' index' message.IsSystem);    							if (message.TradePrice != null)  							{  								worker  									.SetCell(8' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  									.SetCell(9' index' message.TradePrice)  									.SetCell(10' index' message.OpenInterest);  							}    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				case ExecutionTypes.Transaction:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(1' 0' LocalizedStrings.Portfolio)  							.SetCell(2' 0' LocalizedStrings.TransactionId)  							.SetCell(3' 0' LocalizedStrings.OrderId)  							.SetCell(4' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(5' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(6' 0' LocalizedStrings.Str1325).SetStyle(3' typeof(decimal))  							.SetCell(7' 0' LocalizedStrings.Str128)  							.SetCell(8' 0' LocalizedStrings.Str132)  							.SetCell(9' 0' LocalizedStrings.Str134)  							.SetCell(10' 0' LocalizedStrings.Str506)  							.SetCell(11' 0' LocalizedStrings.TradePrice).SetStyle(3' typeof(decimal));    						worker.SetConditionalFormatting(7' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(7' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Active)' null' Colors.Blue);  						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Done)' null' Colors.Green);  						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Failed)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.ServerTime)  								.SetCell(1' index' message.PortfolioName)  								.SetCell(2' index' message.TransactionId)  								.SetCell(3' index' message.OrderId == null ? message.OrderStringId : message.OrderId.To<string>())  								.SetCell(4' index' message.OrderPrice)  								.SetCell(5' index' message.OrderVolume)  								.SetCell(6' index' message.Balance)  								.SetCell(7' index' message.Side)  								.SetCell(8' index' message.OrderType)  								.SetCell(9' index' message.OrderState)  								.SetCell(10' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  								.SetCell(11' index' message.TradePrice)  								.SetCell(12' index' message.HasOrderInfo)  								.SetCell(13' index' message.HasTradeInfo);    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				default:  					throw new ArgumentOutOfRangeException();  			}
Magic Number,StockSharp.Algo.Export,ExcelExporter,C:\repos\stocksharp_stocksharp\Algo\Export\ExcelExporter.cs,Export,The following statement contains a magic number: switch ((ExecutionTypes)Arg)  			{  				case ExecutionTypes.Tick:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Id).SetStyle(0' typeof(string))  							.SetCell(1' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(2' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(3' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(4' 0' LocalizedStrings.Str128)  							.SetCell(5' 0' LocalizedStrings.OI).SetStyle(5' typeof(decimal))  							.SetCell(6' 0' "UP_DOWN").SetStyle(5' typeof(bool));    						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  								.SetCell(1' index' message.ServerTime)  								.SetCell(2' index' message.TradePrice)  								.SetCell(3' index' message.TradeVolume)  								.SetCell(4' index' message.OriginSide)  								.SetCell(5' index' message.OpenInterest)  								.SetCell(6' index' message.IsUpTick);    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				case ExecutionTypes.OrderLog:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Id).SetStyle(0' typeof(string))  							.SetCell(1' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(2' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(3' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(4' 0' LocalizedStrings.Str128)  							.SetCell(5' 0' LocalizedStrings.Str722)  							.SetCell(6' 0' LocalizedStrings.Type)  							.SetCell(7' 0' LocalizedStrings.Str342)  							.SetCell(8' 0' LocalizedStrings.Str723).SetStyle(8' typeof(string))  							.SetCell(9' 0' LocalizedStrings.Str724).SetStyle(9' typeof(decimal))  							.SetCell(10' 0' LocalizedStrings.Str725).SetStyle(10' typeof(decimal));    						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.OrderId == null ? message.OrderStringId : message.OrderId.To<string>())  								.SetCell(1' index' message.ServerTime)  								.SetCell(2' index' message.OrderPrice)  								.SetCell(3' index' message.OrderVolume)  								.SetCell(4' index' message.Side)  								.SetCell(5' index' message.OrderState)  								.SetCell(6' index' message.TimeInForce)  								.SetCell(7' index' message.IsSystem);    							if (message.TradePrice != null)  							{  								worker  									.SetCell(8' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  									.SetCell(9' index' message.TradePrice)  									.SetCell(10' index' message.OpenInterest);  							}    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				case ExecutionTypes.Transaction:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(1' 0' LocalizedStrings.Portfolio)  							.SetCell(2' 0' LocalizedStrings.TransactionId)  							.SetCell(3' 0' LocalizedStrings.OrderId)  							.SetCell(4' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(5' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(6' 0' LocalizedStrings.Str1325).SetStyle(3' typeof(decimal))  							.SetCell(7' 0' LocalizedStrings.Str128)  							.SetCell(8' 0' LocalizedStrings.Str132)  							.SetCell(9' 0' LocalizedStrings.Str134)  							.SetCell(10' 0' LocalizedStrings.Str506)  							.SetCell(11' 0' LocalizedStrings.TradePrice).SetStyle(3' typeof(decimal));    						worker.SetConditionalFormatting(7' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(7' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Active)' null' Colors.Blue);  						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Done)' null' Colors.Green);  						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Failed)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.ServerTime)  								.SetCell(1' index' message.PortfolioName)  								.SetCell(2' index' message.TransactionId)  								.SetCell(3' index' message.OrderId == null ? message.OrderStringId : message.OrderId.To<string>())  								.SetCell(4' index' message.OrderPrice)  								.SetCell(5' index' message.OrderVolume)  								.SetCell(6' index' message.Balance)  								.SetCell(7' index' message.Side)  								.SetCell(8' index' message.OrderType)  								.SetCell(9' index' message.OrderState)  								.SetCell(10' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  								.SetCell(11' index' message.TradePrice)  								.SetCell(12' index' message.HasOrderInfo)  								.SetCell(13' index' message.HasTradeInfo);    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				default:  					throw new ArgumentOutOfRangeException();  			}
Magic Number,StockSharp.Algo.Export,ExcelExporter,C:\repos\stocksharp_stocksharp\Algo\Export\ExcelExporter.cs,Export,The following statement contains a magic number: switch ((ExecutionTypes)Arg)  			{  				case ExecutionTypes.Tick:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Id).SetStyle(0' typeof(string))  							.SetCell(1' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(2' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(3' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(4' 0' LocalizedStrings.Str128)  							.SetCell(5' 0' LocalizedStrings.OI).SetStyle(5' typeof(decimal))  							.SetCell(6' 0' "UP_DOWN").SetStyle(5' typeof(bool));    						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  								.SetCell(1' index' message.ServerTime)  								.SetCell(2' index' message.TradePrice)  								.SetCell(3' index' message.TradeVolume)  								.SetCell(4' index' message.OriginSide)  								.SetCell(5' index' message.OpenInterest)  								.SetCell(6' index' message.IsUpTick);    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				case ExecutionTypes.OrderLog:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Id).SetStyle(0' typeof(string))  							.SetCell(1' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(2' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(3' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(4' 0' LocalizedStrings.Str128)  							.SetCell(5' 0' LocalizedStrings.Str722)  							.SetCell(6' 0' LocalizedStrings.Type)  							.SetCell(7' 0' LocalizedStrings.Str342)  							.SetCell(8' 0' LocalizedStrings.Str723).SetStyle(8' typeof(string))  							.SetCell(9' 0' LocalizedStrings.Str724).SetStyle(9' typeof(decimal))  							.SetCell(10' 0' LocalizedStrings.Str725).SetStyle(10' typeof(decimal));    						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.OrderId == null ? message.OrderStringId : message.OrderId.To<string>())  								.SetCell(1' index' message.ServerTime)  								.SetCell(2' index' message.OrderPrice)  								.SetCell(3' index' message.OrderVolume)  								.SetCell(4' index' message.Side)  								.SetCell(5' index' message.OrderState)  								.SetCell(6' index' message.TimeInForce)  								.SetCell(7' index' message.IsSystem);    							if (message.TradePrice != null)  							{  								worker  									.SetCell(8' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  									.SetCell(9' index' message.TradePrice)  									.SetCell(10' index' message.OpenInterest);  							}    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				case ExecutionTypes.Transaction:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(1' 0' LocalizedStrings.Portfolio)  							.SetCell(2' 0' LocalizedStrings.TransactionId)  							.SetCell(3' 0' LocalizedStrings.OrderId)  							.SetCell(4' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(5' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(6' 0' LocalizedStrings.Str1325).SetStyle(3' typeof(decimal))  							.SetCell(7' 0' LocalizedStrings.Str128)  							.SetCell(8' 0' LocalizedStrings.Str132)  							.SetCell(9' 0' LocalizedStrings.Str134)  							.SetCell(10' 0' LocalizedStrings.Str506)  							.SetCell(11' 0' LocalizedStrings.TradePrice).SetStyle(3' typeof(decimal));    						worker.SetConditionalFormatting(7' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(7' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Active)' null' Colors.Blue);  						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Done)' null' Colors.Green);  						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Failed)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.ServerTime)  								.SetCell(1' index' message.PortfolioName)  								.SetCell(2' index' message.TransactionId)  								.SetCell(3' index' message.OrderId == null ? message.OrderStringId : message.OrderId.To<string>())  								.SetCell(4' index' message.OrderPrice)  								.SetCell(5' index' message.OrderVolume)  								.SetCell(6' index' message.Balance)  								.SetCell(7' index' message.Side)  								.SetCell(8' index' message.OrderType)  								.SetCell(9' index' message.OrderState)  								.SetCell(10' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  								.SetCell(11' index' message.TradePrice)  								.SetCell(12' index' message.HasOrderInfo)  								.SetCell(13' index' message.HasTradeInfo);    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				default:  					throw new ArgumentOutOfRangeException();  			}
Magic Number,StockSharp.Algo.Export,ExcelExporter,C:\repos\stocksharp_stocksharp\Algo\Export\ExcelExporter.cs,Export,The following statement contains a magic number: switch ((ExecutionTypes)Arg)  			{  				case ExecutionTypes.Tick:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Id).SetStyle(0' typeof(string))  							.SetCell(1' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(2' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(3' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(4' 0' LocalizedStrings.Str128)  							.SetCell(5' 0' LocalizedStrings.OI).SetStyle(5' typeof(decimal))  							.SetCell(6' 0' "UP_DOWN").SetStyle(5' typeof(bool));    						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  								.SetCell(1' index' message.ServerTime)  								.SetCell(2' index' message.TradePrice)  								.SetCell(3' index' message.TradeVolume)  								.SetCell(4' index' message.OriginSide)  								.SetCell(5' index' message.OpenInterest)  								.SetCell(6' index' message.IsUpTick);    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				case ExecutionTypes.OrderLog:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Id).SetStyle(0' typeof(string))  							.SetCell(1' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(2' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(3' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(4' 0' LocalizedStrings.Str128)  							.SetCell(5' 0' LocalizedStrings.Str722)  							.SetCell(6' 0' LocalizedStrings.Type)  							.SetCell(7' 0' LocalizedStrings.Str342)  							.SetCell(8' 0' LocalizedStrings.Str723).SetStyle(8' typeof(string))  							.SetCell(9' 0' LocalizedStrings.Str724).SetStyle(9' typeof(decimal))  							.SetCell(10' 0' LocalizedStrings.Str725).SetStyle(10' typeof(decimal));    						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.OrderId == null ? message.OrderStringId : message.OrderId.To<string>())  								.SetCell(1' index' message.ServerTime)  								.SetCell(2' index' message.OrderPrice)  								.SetCell(3' index' message.OrderVolume)  								.SetCell(4' index' message.Side)  								.SetCell(5' index' message.OrderState)  								.SetCell(6' index' message.TimeInForce)  								.SetCell(7' index' message.IsSystem);    							if (message.TradePrice != null)  							{  								worker  									.SetCell(8' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  									.SetCell(9' index' message.TradePrice)  									.SetCell(10' index' message.OpenInterest);  							}    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				case ExecutionTypes.Transaction:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(1' 0' LocalizedStrings.Portfolio)  							.SetCell(2' 0' LocalizedStrings.TransactionId)  							.SetCell(3' 0' LocalizedStrings.OrderId)  							.SetCell(4' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(5' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(6' 0' LocalizedStrings.Str1325).SetStyle(3' typeof(decimal))  							.SetCell(7' 0' LocalizedStrings.Str128)  							.SetCell(8' 0' LocalizedStrings.Str132)  							.SetCell(9' 0' LocalizedStrings.Str134)  							.SetCell(10' 0' LocalizedStrings.Str506)  							.SetCell(11' 0' LocalizedStrings.TradePrice).SetStyle(3' typeof(decimal));    						worker.SetConditionalFormatting(7' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(7' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Active)' null' Colors.Blue);  						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Done)' null' Colors.Green);  						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Failed)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.ServerTime)  								.SetCell(1' index' message.PortfolioName)  								.SetCell(2' index' message.TransactionId)  								.SetCell(3' index' message.OrderId == null ? message.OrderStringId : message.OrderId.To<string>())  								.SetCell(4' index' message.OrderPrice)  								.SetCell(5' index' message.OrderVolume)  								.SetCell(6' index' message.Balance)  								.SetCell(7' index' message.Side)  								.SetCell(8' index' message.OrderType)  								.SetCell(9' index' message.OrderState)  								.SetCell(10' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  								.SetCell(11' index' message.TradePrice)  								.SetCell(12' index' message.HasOrderInfo)  								.SetCell(13' index' message.HasTradeInfo);    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				default:  					throw new ArgumentOutOfRangeException();  			}
Magic Number,StockSharp.Algo.Export,ExcelExporter,C:\repos\stocksharp_stocksharp\Algo\Export\ExcelExporter.cs,Export,The following statement contains a magic number: switch ((ExecutionTypes)Arg)  			{  				case ExecutionTypes.Tick:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Id).SetStyle(0' typeof(string))  							.SetCell(1' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(2' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(3' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(4' 0' LocalizedStrings.Str128)  							.SetCell(5' 0' LocalizedStrings.OI).SetStyle(5' typeof(decimal))  							.SetCell(6' 0' "UP_DOWN").SetStyle(5' typeof(bool));    						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  								.SetCell(1' index' message.ServerTime)  								.SetCell(2' index' message.TradePrice)  								.SetCell(3' index' message.TradeVolume)  								.SetCell(4' index' message.OriginSide)  								.SetCell(5' index' message.OpenInterest)  								.SetCell(6' index' message.IsUpTick);    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				case ExecutionTypes.OrderLog:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Id).SetStyle(0' typeof(string))  							.SetCell(1' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(2' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(3' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(4' 0' LocalizedStrings.Str128)  							.SetCell(5' 0' LocalizedStrings.Str722)  							.SetCell(6' 0' LocalizedStrings.Type)  							.SetCell(7' 0' LocalizedStrings.Str342)  							.SetCell(8' 0' LocalizedStrings.Str723).SetStyle(8' typeof(string))  							.SetCell(9' 0' LocalizedStrings.Str724).SetStyle(9' typeof(decimal))  							.SetCell(10' 0' LocalizedStrings.Str725).SetStyle(10' typeof(decimal));    						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.OrderId == null ? message.OrderStringId : message.OrderId.To<string>())  								.SetCell(1' index' message.ServerTime)  								.SetCell(2' index' message.OrderPrice)  								.SetCell(3' index' message.OrderVolume)  								.SetCell(4' index' message.Side)  								.SetCell(5' index' message.OrderState)  								.SetCell(6' index' message.TimeInForce)  								.SetCell(7' index' message.IsSystem);    							if (message.TradePrice != null)  							{  								worker  									.SetCell(8' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  									.SetCell(9' index' message.TradePrice)  									.SetCell(10' index' message.OpenInterest);  							}    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				case ExecutionTypes.Transaction:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(1' 0' LocalizedStrings.Portfolio)  							.SetCell(2' 0' LocalizedStrings.TransactionId)  							.SetCell(3' 0' LocalizedStrings.OrderId)  							.SetCell(4' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(5' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(6' 0' LocalizedStrings.Str1325).SetStyle(3' typeof(decimal))  							.SetCell(7' 0' LocalizedStrings.Str128)  							.SetCell(8' 0' LocalizedStrings.Str132)  							.SetCell(9' 0' LocalizedStrings.Str134)  							.SetCell(10' 0' LocalizedStrings.Str506)  							.SetCell(11' 0' LocalizedStrings.TradePrice).SetStyle(3' typeof(decimal));    						worker.SetConditionalFormatting(7' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(7' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Active)' null' Colors.Blue);  						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Done)' null' Colors.Green);  						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Failed)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.ServerTime)  								.SetCell(1' index' message.PortfolioName)  								.SetCell(2' index' message.TransactionId)  								.SetCell(3' index' message.OrderId == null ? message.OrderStringId : message.OrderId.To<string>())  								.SetCell(4' index' message.OrderPrice)  								.SetCell(5' index' message.OrderVolume)  								.SetCell(6' index' message.Balance)  								.SetCell(7' index' message.Side)  								.SetCell(8' index' message.OrderType)  								.SetCell(9' index' message.OrderState)  								.SetCell(10' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  								.SetCell(11' index' message.TradePrice)  								.SetCell(12' index' message.HasOrderInfo)  								.SetCell(13' index' message.HasTradeInfo);    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				default:  					throw new ArgumentOutOfRangeException();  			}
Magic Number,StockSharp.Algo.Export,ExcelExporter,C:\repos\stocksharp_stocksharp\Algo\Export\ExcelExporter.cs,Export,The following statement contains a magic number: switch ((ExecutionTypes)Arg)  			{  				case ExecutionTypes.Tick:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Id).SetStyle(0' typeof(string))  							.SetCell(1' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(2' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(3' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(4' 0' LocalizedStrings.Str128)  							.SetCell(5' 0' LocalizedStrings.OI).SetStyle(5' typeof(decimal))  							.SetCell(6' 0' "UP_DOWN").SetStyle(5' typeof(bool));    						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  								.SetCell(1' index' message.ServerTime)  								.SetCell(2' index' message.TradePrice)  								.SetCell(3' index' message.TradeVolume)  								.SetCell(4' index' message.OriginSide)  								.SetCell(5' index' message.OpenInterest)  								.SetCell(6' index' message.IsUpTick);    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				case ExecutionTypes.OrderLog:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Id).SetStyle(0' typeof(string))  							.SetCell(1' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(2' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(3' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(4' 0' LocalizedStrings.Str128)  							.SetCell(5' 0' LocalizedStrings.Str722)  							.SetCell(6' 0' LocalizedStrings.Type)  							.SetCell(7' 0' LocalizedStrings.Str342)  							.SetCell(8' 0' LocalizedStrings.Str723).SetStyle(8' typeof(string))  							.SetCell(9' 0' LocalizedStrings.Str724).SetStyle(9' typeof(decimal))  							.SetCell(10' 0' LocalizedStrings.Str725).SetStyle(10' typeof(decimal));    						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.OrderId == null ? message.OrderStringId : message.OrderId.To<string>())  								.SetCell(1' index' message.ServerTime)  								.SetCell(2' index' message.OrderPrice)  								.SetCell(3' index' message.OrderVolume)  								.SetCell(4' index' message.Side)  								.SetCell(5' index' message.OrderState)  								.SetCell(6' index' message.TimeInForce)  								.SetCell(7' index' message.IsSystem);    							if (message.TradePrice != null)  							{  								worker  									.SetCell(8' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  									.SetCell(9' index' message.TradePrice)  									.SetCell(10' index' message.OpenInterest);  							}    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				case ExecutionTypes.Transaction:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(1' 0' LocalizedStrings.Portfolio)  							.SetCell(2' 0' LocalizedStrings.TransactionId)  							.SetCell(3' 0' LocalizedStrings.OrderId)  							.SetCell(4' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(5' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(6' 0' LocalizedStrings.Str1325).SetStyle(3' typeof(decimal))  							.SetCell(7' 0' LocalizedStrings.Str128)  							.SetCell(8' 0' LocalizedStrings.Str132)  							.SetCell(9' 0' LocalizedStrings.Str134)  							.SetCell(10' 0' LocalizedStrings.Str506)  							.SetCell(11' 0' LocalizedStrings.TradePrice).SetStyle(3' typeof(decimal));    						worker.SetConditionalFormatting(7' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(7' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Active)' null' Colors.Blue);  						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Done)' null' Colors.Green);  						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Failed)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.ServerTime)  								.SetCell(1' index' message.PortfolioName)  								.SetCell(2' index' message.TransactionId)  								.SetCell(3' index' message.OrderId == null ? message.OrderStringId : message.OrderId.To<string>())  								.SetCell(4' index' message.OrderPrice)  								.SetCell(5' index' message.OrderVolume)  								.SetCell(6' index' message.Balance)  								.SetCell(7' index' message.Side)  								.SetCell(8' index' message.OrderType)  								.SetCell(9' index' message.OrderState)  								.SetCell(10' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  								.SetCell(11' index' message.TradePrice)  								.SetCell(12' index' message.HasOrderInfo)  								.SetCell(13' index' message.HasTradeInfo);    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				default:  					throw new ArgumentOutOfRangeException();  			}
Magic Number,StockSharp.Algo.Export,ExcelExporter,C:\repos\stocksharp_stocksharp\Algo\Export\ExcelExporter.cs,Export,The following statement contains a magic number: switch ((ExecutionTypes)Arg)  			{  				case ExecutionTypes.Tick:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Id).SetStyle(0' typeof(string))  							.SetCell(1' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(2' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(3' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(4' 0' LocalizedStrings.Str128)  							.SetCell(5' 0' LocalizedStrings.OI).SetStyle(5' typeof(decimal))  							.SetCell(6' 0' "UP_DOWN").SetStyle(5' typeof(bool));    						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  								.SetCell(1' index' message.ServerTime)  								.SetCell(2' index' message.TradePrice)  								.SetCell(3' index' message.TradeVolume)  								.SetCell(4' index' message.OriginSide)  								.SetCell(5' index' message.OpenInterest)  								.SetCell(6' index' message.IsUpTick);    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				case ExecutionTypes.OrderLog:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Id).SetStyle(0' typeof(string))  							.SetCell(1' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(2' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(3' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(4' 0' LocalizedStrings.Str128)  							.SetCell(5' 0' LocalizedStrings.Str722)  							.SetCell(6' 0' LocalizedStrings.Type)  							.SetCell(7' 0' LocalizedStrings.Str342)  							.SetCell(8' 0' LocalizedStrings.Str723).SetStyle(8' typeof(string))  							.SetCell(9' 0' LocalizedStrings.Str724).SetStyle(9' typeof(decimal))  							.SetCell(10' 0' LocalizedStrings.Str725).SetStyle(10' typeof(decimal));    						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.OrderId == null ? message.OrderStringId : message.OrderId.To<string>())  								.SetCell(1' index' message.ServerTime)  								.SetCell(2' index' message.OrderPrice)  								.SetCell(3' index' message.OrderVolume)  								.SetCell(4' index' message.Side)  								.SetCell(5' index' message.OrderState)  								.SetCell(6' index' message.TimeInForce)  								.SetCell(7' index' message.IsSystem);    							if (message.TradePrice != null)  							{  								worker  									.SetCell(8' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  									.SetCell(9' index' message.TradePrice)  									.SetCell(10' index' message.OpenInterest);  							}    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				case ExecutionTypes.Transaction:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(1' 0' LocalizedStrings.Portfolio)  							.SetCell(2' 0' LocalizedStrings.TransactionId)  							.SetCell(3' 0' LocalizedStrings.OrderId)  							.SetCell(4' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(5' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(6' 0' LocalizedStrings.Str1325).SetStyle(3' typeof(decimal))  							.SetCell(7' 0' LocalizedStrings.Str128)  							.SetCell(8' 0' LocalizedStrings.Str132)  							.SetCell(9' 0' LocalizedStrings.Str134)  							.SetCell(10' 0' LocalizedStrings.Str506)  							.SetCell(11' 0' LocalizedStrings.TradePrice).SetStyle(3' typeof(decimal));    						worker.SetConditionalFormatting(7' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(7' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Active)' null' Colors.Blue);  						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Done)' null' Colors.Green);  						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Failed)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.ServerTime)  								.SetCell(1' index' message.PortfolioName)  								.SetCell(2' index' message.TransactionId)  								.SetCell(3' index' message.OrderId == null ? message.OrderStringId : message.OrderId.To<string>())  								.SetCell(4' index' message.OrderPrice)  								.SetCell(5' index' message.OrderVolume)  								.SetCell(6' index' message.Balance)  								.SetCell(7' index' message.Side)  								.SetCell(8' index' message.OrderType)  								.SetCell(9' index' message.OrderState)  								.SetCell(10' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  								.SetCell(11' index' message.TradePrice)  								.SetCell(12' index' message.HasOrderInfo)  								.SetCell(13' index' message.HasTradeInfo);    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				default:  					throw new ArgumentOutOfRangeException();  			}
Magic Number,StockSharp.Algo.Export,ExcelExporter,C:\repos\stocksharp_stocksharp\Algo\Export\ExcelExporter.cs,Export,The following statement contains a magic number: switch ((ExecutionTypes)Arg)  			{  				case ExecutionTypes.Tick:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Id).SetStyle(0' typeof(string))  							.SetCell(1' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(2' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(3' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(4' 0' LocalizedStrings.Str128)  							.SetCell(5' 0' LocalizedStrings.OI).SetStyle(5' typeof(decimal))  							.SetCell(6' 0' "UP_DOWN").SetStyle(5' typeof(bool));    						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  								.SetCell(1' index' message.ServerTime)  								.SetCell(2' index' message.TradePrice)  								.SetCell(3' index' message.TradeVolume)  								.SetCell(4' index' message.OriginSide)  								.SetCell(5' index' message.OpenInterest)  								.SetCell(6' index' message.IsUpTick);    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				case ExecutionTypes.OrderLog:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Id).SetStyle(0' typeof(string))  							.SetCell(1' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(2' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(3' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(4' 0' LocalizedStrings.Str128)  							.SetCell(5' 0' LocalizedStrings.Str722)  							.SetCell(6' 0' LocalizedStrings.Type)  							.SetCell(7' 0' LocalizedStrings.Str342)  							.SetCell(8' 0' LocalizedStrings.Str723).SetStyle(8' typeof(string))  							.SetCell(9' 0' LocalizedStrings.Str724).SetStyle(9' typeof(decimal))  							.SetCell(10' 0' LocalizedStrings.Str725).SetStyle(10' typeof(decimal));    						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.OrderId == null ? message.OrderStringId : message.OrderId.To<string>())  								.SetCell(1' index' message.ServerTime)  								.SetCell(2' index' message.OrderPrice)  								.SetCell(3' index' message.OrderVolume)  								.SetCell(4' index' message.Side)  								.SetCell(5' index' message.OrderState)  								.SetCell(6' index' message.TimeInForce)  								.SetCell(7' index' message.IsSystem);    							if (message.TradePrice != null)  							{  								worker  									.SetCell(8' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  									.SetCell(9' index' message.TradePrice)  									.SetCell(10' index' message.OpenInterest);  							}    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				case ExecutionTypes.Transaction:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(1' 0' LocalizedStrings.Portfolio)  							.SetCell(2' 0' LocalizedStrings.TransactionId)  							.SetCell(3' 0' LocalizedStrings.OrderId)  							.SetCell(4' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(5' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(6' 0' LocalizedStrings.Str1325).SetStyle(3' typeof(decimal))  							.SetCell(7' 0' LocalizedStrings.Str128)  							.SetCell(8' 0' LocalizedStrings.Str132)  							.SetCell(9' 0' LocalizedStrings.Str134)  							.SetCell(10' 0' LocalizedStrings.Str506)  							.SetCell(11' 0' LocalizedStrings.TradePrice).SetStyle(3' typeof(decimal));    						worker.SetConditionalFormatting(7' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(7' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Active)' null' Colors.Blue);  						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Done)' null' Colors.Green);  						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Failed)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.ServerTime)  								.SetCell(1' index' message.PortfolioName)  								.SetCell(2' index' message.TransactionId)  								.SetCell(3' index' message.OrderId == null ? message.OrderStringId : message.OrderId.To<string>())  								.SetCell(4' index' message.OrderPrice)  								.SetCell(5' index' message.OrderVolume)  								.SetCell(6' index' message.Balance)  								.SetCell(7' index' message.Side)  								.SetCell(8' index' message.OrderType)  								.SetCell(9' index' message.OrderState)  								.SetCell(10' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  								.SetCell(11' index' message.TradePrice)  								.SetCell(12' index' message.HasOrderInfo)  								.SetCell(13' index' message.HasTradeInfo);    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				default:  					throw new ArgumentOutOfRangeException();  			}
Magic Number,StockSharp.Algo.Export,ExcelExporter,C:\repos\stocksharp_stocksharp\Algo\Export\ExcelExporter.cs,Export,The following statement contains a magic number: switch ((ExecutionTypes)Arg)  			{  				case ExecutionTypes.Tick:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Id).SetStyle(0' typeof(string))  							.SetCell(1' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(2' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(3' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(4' 0' LocalizedStrings.Str128)  							.SetCell(5' 0' LocalizedStrings.OI).SetStyle(5' typeof(decimal))  							.SetCell(6' 0' "UP_DOWN").SetStyle(5' typeof(bool));    						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  								.SetCell(1' index' message.ServerTime)  								.SetCell(2' index' message.TradePrice)  								.SetCell(3' index' message.TradeVolume)  								.SetCell(4' index' message.OriginSide)  								.SetCell(5' index' message.OpenInterest)  								.SetCell(6' index' message.IsUpTick);    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				case ExecutionTypes.OrderLog:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Id).SetStyle(0' typeof(string))  							.SetCell(1' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(2' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(3' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(4' 0' LocalizedStrings.Str128)  							.SetCell(5' 0' LocalizedStrings.Str722)  							.SetCell(6' 0' LocalizedStrings.Type)  							.SetCell(7' 0' LocalizedStrings.Str342)  							.SetCell(8' 0' LocalizedStrings.Str723).SetStyle(8' typeof(string))  							.SetCell(9' 0' LocalizedStrings.Str724).SetStyle(9' typeof(decimal))  							.SetCell(10' 0' LocalizedStrings.Str725).SetStyle(10' typeof(decimal));    						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.OrderId == null ? message.OrderStringId : message.OrderId.To<string>())  								.SetCell(1' index' message.ServerTime)  								.SetCell(2' index' message.OrderPrice)  								.SetCell(3' index' message.OrderVolume)  								.SetCell(4' index' message.Side)  								.SetCell(5' index' message.OrderState)  								.SetCell(6' index' message.TimeInForce)  								.SetCell(7' index' message.IsSystem);    							if (message.TradePrice != null)  							{  								worker  									.SetCell(8' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  									.SetCell(9' index' message.TradePrice)  									.SetCell(10' index' message.OpenInterest);  							}    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				case ExecutionTypes.Transaction:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(1' 0' LocalizedStrings.Portfolio)  							.SetCell(2' 0' LocalizedStrings.TransactionId)  							.SetCell(3' 0' LocalizedStrings.OrderId)  							.SetCell(4' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(5' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(6' 0' LocalizedStrings.Str1325).SetStyle(3' typeof(decimal))  							.SetCell(7' 0' LocalizedStrings.Str128)  							.SetCell(8' 0' LocalizedStrings.Str132)  							.SetCell(9' 0' LocalizedStrings.Str134)  							.SetCell(10' 0' LocalizedStrings.Str506)  							.SetCell(11' 0' LocalizedStrings.TradePrice).SetStyle(3' typeof(decimal));    						worker.SetConditionalFormatting(7' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(7' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Active)' null' Colors.Blue);  						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Done)' null' Colors.Green);  						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Failed)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.ServerTime)  								.SetCell(1' index' message.PortfolioName)  								.SetCell(2' index' message.TransactionId)  								.SetCell(3' index' message.OrderId == null ? message.OrderStringId : message.OrderId.To<string>())  								.SetCell(4' index' message.OrderPrice)  								.SetCell(5' index' message.OrderVolume)  								.SetCell(6' index' message.Balance)  								.SetCell(7' index' message.Side)  								.SetCell(8' index' message.OrderType)  								.SetCell(9' index' message.OrderState)  								.SetCell(10' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  								.SetCell(11' index' message.TradePrice)  								.SetCell(12' index' message.HasOrderInfo)  								.SetCell(13' index' message.HasTradeInfo);    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				default:  					throw new ArgumentOutOfRangeException();  			}
Magic Number,StockSharp.Algo.Export,ExcelExporter,C:\repos\stocksharp_stocksharp\Algo\Export\ExcelExporter.cs,Export,The following statement contains a magic number: switch ((ExecutionTypes)Arg)  			{  				case ExecutionTypes.Tick:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Id).SetStyle(0' typeof(string))  							.SetCell(1' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(2' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(3' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(4' 0' LocalizedStrings.Str128)  							.SetCell(5' 0' LocalizedStrings.OI).SetStyle(5' typeof(decimal))  							.SetCell(6' 0' "UP_DOWN").SetStyle(5' typeof(bool));    						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  								.SetCell(1' index' message.ServerTime)  								.SetCell(2' index' message.TradePrice)  								.SetCell(3' index' message.TradeVolume)  								.SetCell(4' index' message.OriginSide)  								.SetCell(5' index' message.OpenInterest)  								.SetCell(6' index' message.IsUpTick);    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				case ExecutionTypes.OrderLog:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Id).SetStyle(0' typeof(string))  							.SetCell(1' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(2' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(3' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(4' 0' LocalizedStrings.Str128)  							.SetCell(5' 0' LocalizedStrings.Str722)  							.SetCell(6' 0' LocalizedStrings.Type)  							.SetCell(7' 0' LocalizedStrings.Str342)  							.SetCell(8' 0' LocalizedStrings.Str723).SetStyle(8' typeof(string))  							.SetCell(9' 0' LocalizedStrings.Str724).SetStyle(9' typeof(decimal))  							.SetCell(10' 0' LocalizedStrings.Str725).SetStyle(10' typeof(decimal));    						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.OrderId == null ? message.OrderStringId : message.OrderId.To<string>())  								.SetCell(1' index' message.ServerTime)  								.SetCell(2' index' message.OrderPrice)  								.SetCell(3' index' message.OrderVolume)  								.SetCell(4' index' message.Side)  								.SetCell(5' index' message.OrderState)  								.SetCell(6' index' message.TimeInForce)  								.SetCell(7' index' message.IsSystem);    							if (message.TradePrice != null)  							{  								worker  									.SetCell(8' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  									.SetCell(9' index' message.TradePrice)  									.SetCell(10' index' message.OpenInterest);  							}    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				case ExecutionTypes.Transaction:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(1' 0' LocalizedStrings.Portfolio)  							.SetCell(2' 0' LocalizedStrings.TransactionId)  							.SetCell(3' 0' LocalizedStrings.OrderId)  							.SetCell(4' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(5' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(6' 0' LocalizedStrings.Str1325).SetStyle(3' typeof(decimal))  							.SetCell(7' 0' LocalizedStrings.Str128)  							.SetCell(8' 0' LocalizedStrings.Str132)  							.SetCell(9' 0' LocalizedStrings.Str134)  							.SetCell(10' 0' LocalizedStrings.Str506)  							.SetCell(11' 0' LocalizedStrings.TradePrice).SetStyle(3' typeof(decimal));    						worker.SetConditionalFormatting(7' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(7' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Active)' null' Colors.Blue);  						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Done)' null' Colors.Green);  						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Failed)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.ServerTime)  								.SetCell(1' index' message.PortfolioName)  								.SetCell(2' index' message.TransactionId)  								.SetCell(3' index' message.OrderId == null ? message.OrderStringId : message.OrderId.To<string>())  								.SetCell(4' index' message.OrderPrice)  								.SetCell(5' index' message.OrderVolume)  								.SetCell(6' index' message.Balance)  								.SetCell(7' index' message.Side)  								.SetCell(8' index' message.OrderType)  								.SetCell(9' index' message.OrderState)  								.SetCell(10' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  								.SetCell(11' index' message.TradePrice)  								.SetCell(12' index' message.HasOrderInfo)  								.SetCell(13' index' message.HasTradeInfo);    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				default:  					throw new ArgumentOutOfRangeException();  			}
Magic Number,StockSharp.Algo.Export,ExcelExporter,C:\repos\stocksharp_stocksharp\Algo\Export\ExcelExporter.cs,Export,The following statement contains a magic number: switch ((ExecutionTypes)Arg)  			{  				case ExecutionTypes.Tick:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Id).SetStyle(0' typeof(string))  							.SetCell(1' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(2' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(3' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(4' 0' LocalizedStrings.Str128)  							.SetCell(5' 0' LocalizedStrings.OI).SetStyle(5' typeof(decimal))  							.SetCell(6' 0' "UP_DOWN").SetStyle(5' typeof(bool));    						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  								.SetCell(1' index' message.ServerTime)  								.SetCell(2' index' message.TradePrice)  								.SetCell(3' index' message.TradeVolume)  								.SetCell(4' index' message.OriginSide)  								.SetCell(5' index' message.OpenInterest)  								.SetCell(6' index' message.IsUpTick);    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				case ExecutionTypes.OrderLog:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Id).SetStyle(0' typeof(string))  							.SetCell(1' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(2' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(3' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(4' 0' LocalizedStrings.Str128)  							.SetCell(5' 0' LocalizedStrings.Str722)  							.SetCell(6' 0' LocalizedStrings.Type)  							.SetCell(7' 0' LocalizedStrings.Str342)  							.SetCell(8' 0' LocalizedStrings.Str723).SetStyle(8' typeof(string))  							.SetCell(9' 0' LocalizedStrings.Str724).SetStyle(9' typeof(decimal))  							.SetCell(10' 0' LocalizedStrings.Str725).SetStyle(10' typeof(decimal));    						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.OrderId == null ? message.OrderStringId : message.OrderId.To<string>())  								.SetCell(1' index' message.ServerTime)  								.SetCell(2' index' message.OrderPrice)  								.SetCell(3' index' message.OrderVolume)  								.SetCell(4' index' message.Side)  								.SetCell(5' index' message.OrderState)  								.SetCell(6' index' message.TimeInForce)  								.SetCell(7' index' message.IsSystem);    							if (message.TradePrice != null)  							{  								worker  									.SetCell(8' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  									.SetCell(9' index' message.TradePrice)  									.SetCell(10' index' message.OpenInterest);  							}    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				case ExecutionTypes.Transaction:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(1' 0' LocalizedStrings.Portfolio)  							.SetCell(2' 0' LocalizedStrings.TransactionId)  							.SetCell(3' 0' LocalizedStrings.OrderId)  							.SetCell(4' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(5' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(6' 0' LocalizedStrings.Str1325).SetStyle(3' typeof(decimal))  							.SetCell(7' 0' LocalizedStrings.Str128)  							.SetCell(8' 0' LocalizedStrings.Str132)  							.SetCell(9' 0' LocalizedStrings.Str134)  							.SetCell(10' 0' LocalizedStrings.Str506)  							.SetCell(11' 0' LocalizedStrings.TradePrice).SetStyle(3' typeof(decimal));    						worker.SetConditionalFormatting(7' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(7' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Active)' null' Colors.Blue);  						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Done)' null' Colors.Green);  						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Failed)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.ServerTime)  								.SetCell(1' index' message.PortfolioName)  								.SetCell(2' index' message.TransactionId)  								.SetCell(3' index' message.OrderId == null ? message.OrderStringId : message.OrderId.To<string>())  								.SetCell(4' index' message.OrderPrice)  								.SetCell(5' index' message.OrderVolume)  								.SetCell(6' index' message.Balance)  								.SetCell(7' index' message.Side)  								.SetCell(8' index' message.OrderType)  								.SetCell(9' index' message.OrderState)  								.SetCell(10' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  								.SetCell(11' index' message.TradePrice)  								.SetCell(12' index' message.HasOrderInfo)  								.SetCell(13' index' message.HasTradeInfo);    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				default:  					throw new ArgumentOutOfRangeException();  			}
Magic Number,StockSharp.Algo.Export,ExcelExporter,C:\repos\stocksharp_stocksharp\Algo\Export\ExcelExporter.cs,Export,The following statement contains a magic number: switch ((ExecutionTypes)Arg)  			{  				case ExecutionTypes.Tick:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Id).SetStyle(0' typeof(string))  							.SetCell(1' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(2' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(3' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(4' 0' LocalizedStrings.Str128)  							.SetCell(5' 0' LocalizedStrings.OI).SetStyle(5' typeof(decimal))  							.SetCell(6' 0' "UP_DOWN").SetStyle(5' typeof(bool));    						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  								.SetCell(1' index' message.ServerTime)  								.SetCell(2' index' message.TradePrice)  								.SetCell(3' index' message.TradeVolume)  								.SetCell(4' index' message.OriginSide)  								.SetCell(5' index' message.OpenInterest)  								.SetCell(6' index' message.IsUpTick);    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				case ExecutionTypes.OrderLog:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Id).SetStyle(0' typeof(string))  							.SetCell(1' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(2' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(3' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(4' 0' LocalizedStrings.Str128)  							.SetCell(5' 0' LocalizedStrings.Str722)  							.SetCell(6' 0' LocalizedStrings.Type)  							.SetCell(7' 0' LocalizedStrings.Str342)  							.SetCell(8' 0' LocalizedStrings.Str723).SetStyle(8' typeof(string))  							.SetCell(9' 0' LocalizedStrings.Str724).SetStyle(9' typeof(decimal))  							.SetCell(10' 0' LocalizedStrings.Str725).SetStyle(10' typeof(decimal));    						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.OrderId == null ? message.OrderStringId : message.OrderId.To<string>())  								.SetCell(1' index' message.ServerTime)  								.SetCell(2' index' message.OrderPrice)  								.SetCell(3' index' message.OrderVolume)  								.SetCell(4' index' message.Side)  								.SetCell(5' index' message.OrderState)  								.SetCell(6' index' message.TimeInForce)  								.SetCell(7' index' message.IsSystem);    							if (message.TradePrice != null)  							{  								worker  									.SetCell(8' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  									.SetCell(9' index' message.TradePrice)  									.SetCell(10' index' message.OpenInterest);  							}    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				case ExecutionTypes.Transaction:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(1' 0' LocalizedStrings.Portfolio)  							.SetCell(2' 0' LocalizedStrings.TransactionId)  							.SetCell(3' 0' LocalizedStrings.OrderId)  							.SetCell(4' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(5' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(6' 0' LocalizedStrings.Str1325).SetStyle(3' typeof(decimal))  							.SetCell(7' 0' LocalizedStrings.Str128)  							.SetCell(8' 0' LocalizedStrings.Str132)  							.SetCell(9' 0' LocalizedStrings.Str134)  							.SetCell(10' 0' LocalizedStrings.Str506)  							.SetCell(11' 0' LocalizedStrings.TradePrice).SetStyle(3' typeof(decimal));    						worker.SetConditionalFormatting(7' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(7' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Active)' null' Colors.Blue);  						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Done)' null' Colors.Green);  						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Failed)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.ServerTime)  								.SetCell(1' index' message.PortfolioName)  								.SetCell(2' index' message.TransactionId)  								.SetCell(3' index' message.OrderId == null ? message.OrderStringId : message.OrderId.To<string>())  								.SetCell(4' index' message.OrderPrice)  								.SetCell(5' index' message.OrderVolume)  								.SetCell(6' index' message.Balance)  								.SetCell(7' index' message.Side)  								.SetCell(8' index' message.OrderType)  								.SetCell(9' index' message.OrderState)  								.SetCell(10' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  								.SetCell(11' index' message.TradePrice)  								.SetCell(12' index' message.HasOrderInfo)  								.SetCell(13' index' message.HasTradeInfo);    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				default:  					throw new ArgumentOutOfRangeException();  			}
Magic Number,StockSharp.Algo.Export,ExcelExporter,C:\repos\stocksharp_stocksharp\Algo\Export\ExcelExporter.cs,Export,The following statement contains a magic number: switch ((ExecutionTypes)Arg)  			{  				case ExecutionTypes.Tick:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Id).SetStyle(0' typeof(string))  							.SetCell(1' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(2' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(3' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(4' 0' LocalizedStrings.Str128)  							.SetCell(5' 0' LocalizedStrings.OI).SetStyle(5' typeof(decimal))  							.SetCell(6' 0' "UP_DOWN").SetStyle(5' typeof(bool));    						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  								.SetCell(1' index' message.ServerTime)  								.SetCell(2' index' message.TradePrice)  								.SetCell(3' index' message.TradeVolume)  								.SetCell(4' index' message.OriginSide)  								.SetCell(5' index' message.OpenInterest)  								.SetCell(6' index' message.IsUpTick);    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				case ExecutionTypes.OrderLog:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Id).SetStyle(0' typeof(string))  							.SetCell(1' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(2' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(3' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(4' 0' LocalizedStrings.Str128)  							.SetCell(5' 0' LocalizedStrings.Str722)  							.SetCell(6' 0' LocalizedStrings.Type)  							.SetCell(7' 0' LocalizedStrings.Str342)  							.SetCell(8' 0' LocalizedStrings.Str723).SetStyle(8' typeof(string))  							.SetCell(9' 0' LocalizedStrings.Str724).SetStyle(9' typeof(decimal))  							.SetCell(10' 0' LocalizedStrings.Str725).SetStyle(10' typeof(decimal));    						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.OrderId == null ? message.OrderStringId : message.OrderId.To<string>())  								.SetCell(1' index' message.ServerTime)  								.SetCell(2' index' message.OrderPrice)  								.SetCell(3' index' message.OrderVolume)  								.SetCell(4' index' message.Side)  								.SetCell(5' index' message.OrderState)  								.SetCell(6' index' message.TimeInForce)  								.SetCell(7' index' message.IsSystem);    							if (message.TradePrice != null)  							{  								worker  									.SetCell(8' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  									.SetCell(9' index' message.TradePrice)  									.SetCell(10' index' message.OpenInterest);  							}    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				case ExecutionTypes.Transaction:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(1' 0' LocalizedStrings.Portfolio)  							.SetCell(2' 0' LocalizedStrings.TransactionId)  							.SetCell(3' 0' LocalizedStrings.OrderId)  							.SetCell(4' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(5' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(6' 0' LocalizedStrings.Str1325).SetStyle(3' typeof(decimal))  							.SetCell(7' 0' LocalizedStrings.Str128)  							.SetCell(8' 0' LocalizedStrings.Str132)  							.SetCell(9' 0' LocalizedStrings.Str134)  							.SetCell(10' 0' LocalizedStrings.Str506)  							.SetCell(11' 0' LocalizedStrings.TradePrice).SetStyle(3' typeof(decimal));    						worker.SetConditionalFormatting(7' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(7' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Active)' null' Colors.Blue);  						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Done)' null' Colors.Green);  						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Failed)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.ServerTime)  								.SetCell(1' index' message.PortfolioName)  								.SetCell(2' index' message.TransactionId)  								.SetCell(3' index' message.OrderId == null ? message.OrderStringId : message.OrderId.To<string>())  								.SetCell(4' index' message.OrderPrice)  								.SetCell(5' index' message.OrderVolume)  								.SetCell(6' index' message.Balance)  								.SetCell(7' index' message.Side)  								.SetCell(8' index' message.OrderType)  								.SetCell(9' index' message.OrderState)  								.SetCell(10' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  								.SetCell(11' index' message.TradePrice)  								.SetCell(12' index' message.HasOrderInfo)  								.SetCell(13' index' message.HasTradeInfo);    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				default:  					throw new ArgumentOutOfRangeException();  			}
Magic Number,StockSharp.Algo.Export,ExcelExporter,C:\repos\stocksharp_stocksharp\Algo\Export\ExcelExporter.cs,Export,The following statement contains a magic number: switch ((ExecutionTypes)Arg)  			{  				case ExecutionTypes.Tick:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Id).SetStyle(0' typeof(string))  							.SetCell(1' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(2' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(3' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(4' 0' LocalizedStrings.Str128)  							.SetCell(5' 0' LocalizedStrings.OI).SetStyle(5' typeof(decimal))  							.SetCell(6' 0' "UP_DOWN").SetStyle(5' typeof(bool));    						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  								.SetCell(1' index' message.ServerTime)  								.SetCell(2' index' message.TradePrice)  								.SetCell(3' index' message.TradeVolume)  								.SetCell(4' index' message.OriginSide)  								.SetCell(5' index' message.OpenInterest)  								.SetCell(6' index' message.IsUpTick);    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				case ExecutionTypes.OrderLog:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Id).SetStyle(0' typeof(string))  							.SetCell(1' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(2' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(3' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(4' 0' LocalizedStrings.Str128)  							.SetCell(5' 0' LocalizedStrings.Str722)  							.SetCell(6' 0' LocalizedStrings.Type)  							.SetCell(7' 0' LocalizedStrings.Str342)  							.SetCell(8' 0' LocalizedStrings.Str723).SetStyle(8' typeof(string))  							.SetCell(9' 0' LocalizedStrings.Str724).SetStyle(9' typeof(decimal))  							.SetCell(10' 0' LocalizedStrings.Str725).SetStyle(10' typeof(decimal));    						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.OrderId == null ? message.OrderStringId : message.OrderId.To<string>())  								.SetCell(1' index' message.ServerTime)  								.SetCell(2' index' message.OrderPrice)  								.SetCell(3' index' message.OrderVolume)  								.SetCell(4' index' message.Side)  								.SetCell(5' index' message.OrderState)  								.SetCell(6' index' message.TimeInForce)  								.SetCell(7' index' message.IsSystem);    							if (message.TradePrice != null)  							{  								worker  									.SetCell(8' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  									.SetCell(9' index' message.TradePrice)  									.SetCell(10' index' message.OpenInterest);  							}    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				case ExecutionTypes.Transaction:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(1' 0' LocalizedStrings.Portfolio)  							.SetCell(2' 0' LocalizedStrings.TransactionId)  							.SetCell(3' 0' LocalizedStrings.OrderId)  							.SetCell(4' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(5' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(6' 0' LocalizedStrings.Str1325).SetStyle(3' typeof(decimal))  							.SetCell(7' 0' LocalizedStrings.Str128)  							.SetCell(8' 0' LocalizedStrings.Str132)  							.SetCell(9' 0' LocalizedStrings.Str134)  							.SetCell(10' 0' LocalizedStrings.Str506)  							.SetCell(11' 0' LocalizedStrings.TradePrice).SetStyle(3' typeof(decimal));    						worker.SetConditionalFormatting(7' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(7' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Active)' null' Colors.Blue);  						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Done)' null' Colors.Green);  						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Failed)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.ServerTime)  								.SetCell(1' index' message.PortfolioName)  								.SetCell(2' index' message.TransactionId)  								.SetCell(3' index' message.OrderId == null ? message.OrderStringId : message.OrderId.To<string>())  								.SetCell(4' index' message.OrderPrice)  								.SetCell(5' index' message.OrderVolume)  								.SetCell(6' index' message.Balance)  								.SetCell(7' index' message.Side)  								.SetCell(8' index' message.OrderType)  								.SetCell(9' index' message.OrderState)  								.SetCell(10' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  								.SetCell(11' index' message.TradePrice)  								.SetCell(12' index' message.HasOrderInfo)  								.SetCell(13' index' message.HasTradeInfo);    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				default:  					throw new ArgumentOutOfRangeException();  			}
Magic Number,StockSharp.Algo.Export,ExcelExporter,C:\repos\stocksharp_stocksharp\Algo\Export\ExcelExporter.cs,Export,The following statement contains a magic number: switch ((ExecutionTypes)Arg)  			{  				case ExecutionTypes.Tick:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Id).SetStyle(0' typeof(string))  							.SetCell(1' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(2' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(3' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(4' 0' LocalizedStrings.Str128)  							.SetCell(5' 0' LocalizedStrings.OI).SetStyle(5' typeof(decimal))  							.SetCell(6' 0' "UP_DOWN").SetStyle(5' typeof(bool));    						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  								.SetCell(1' index' message.ServerTime)  								.SetCell(2' index' message.TradePrice)  								.SetCell(3' index' message.TradeVolume)  								.SetCell(4' index' message.OriginSide)  								.SetCell(5' index' message.OpenInterest)  								.SetCell(6' index' message.IsUpTick);    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				case ExecutionTypes.OrderLog:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Id).SetStyle(0' typeof(string))  							.SetCell(1' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(2' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(3' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(4' 0' LocalizedStrings.Str128)  							.SetCell(5' 0' LocalizedStrings.Str722)  							.SetCell(6' 0' LocalizedStrings.Type)  							.SetCell(7' 0' LocalizedStrings.Str342)  							.SetCell(8' 0' LocalizedStrings.Str723).SetStyle(8' typeof(string))  							.SetCell(9' 0' LocalizedStrings.Str724).SetStyle(9' typeof(decimal))  							.SetCell(10' 0' LocalizedStrings.Str725).SetStyle(10' typeof(decimal));    						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.OrderId == null ? message.OrderStringId : message.OrderId.To<string>())  								.SetCell(1' index' message.ServerTime)  								.SetCell(2' index' message.OrderPrice)  								.SetCell(3' index' message.OrderVolume)  								.SetCell(4' index' message.Side)  								.SetCell(5' index' message.OrderState)  								.SetCell(6' index' message.TimeInForce)  								.SetCell(7' index' message.IsSystem);    							if (message.TradePrice != null)  							{  								worker  									.SetCell(8' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  									.SetCell(9' index' message.TradePrice)  									.SetCell(10' index' message.OpenInterest);  							}    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				case ExecutionTypes.Transaction:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(1' 0' LocalizedStrings.Portfolio)  							.SetCell(2' 0' LocalizedStrings.TransactionId)  							.SetCell(3' 0' LocalizedStrings.OrderId)  							.SetCell(4' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(5' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(6' 0' LocalizedStrings.Str1325).SetStyle(3' typeof(decimal))  							.SetCell(7' 0' LocalizedStrings.Str128)  							.SetCell(8' 0' LocalizedStrings.Str132)  							.SetCell(9' 0' LocalizedStrings.Str134)  							.SetCell(10' 0' LocalizedStrings.Str506)  							.SetCell(11' 0' LocalizedStrings.TradePrice).SetStyle(3' typeof(decimal));    						worker.SetConditionalFormatting(7' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(7' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Active)' null' Colors.Blue);  						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Done)' null' Colors.Green);  						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Failed)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.ServerTime)  								.SetCell(1' index' message.PortfolioName)  								.SetCell(2' index' message.TransactionId)  								.SetCell(3' index' message.OrderId == null ? message.OrderStringId : message.OrderId.To<string>())  								.SetCell(4' index' message.OrderPrice)  								.SetCell(5' index' message.OrderVolume)  								.SetCell(6' index' message.Balance)  								.SetCell(7' index' message.Side)  								.SetCell(8' index' message.OrderType)  								.SetCell(9' index' message.OrderState)  								.SetCell(10' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  								.SetCell(11' index' message.TradePrice)  								.SetCell(12' index' message.HasOrderInfo)  								.SetCell(13' index' message.HasTradeInfo);    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				default:  					throw new ArgumentOutOfRangeException();  			}
Magic Number,StockSharp.Algo.Export,ExcelExporter,C:\repos\stocksharp_stocksharp\Algo\Export\ExcelExporter.cs,Export,The following statement contains a magic number: switch ((ExecutionTypes)Arg)  			{  				case ExecutionTypes.Tick:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Id).SetStyle(0' typeof(string))  							.SetCell(1' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(2' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(3' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(4' 0' LocalizedStrings.Str128)  							.SetCell(5' 0' LocalizedStrings.OI).SetStyle(5' typeof(decimal))  							.SetCell(6' 0' "UP_DOWN").SetStyle(5' typeof(bool));    						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  								.SetCell(1' index' message.ServerTime)  								.SetCell(2' index' message.TradePrice)  								.SetCell(3' index' message.TradeVolume)  								.SetCell(4' index' message.OriginSide)  								.SetCell(5' index' message.OpenInterest)  								.SetCell(6' index' message.IsUpTick);    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				case ExecutionTypes.OrderLog:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Id).SetStyle(0' typeof(string))  							.SetCell(1' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(2' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(3' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(4' 0' LocalizedStrings.Str128)  							.SetCell(5' 0' LocalizedStrings.Str722)  							.SetCell(6' 0' LocalizedStrings.Type)  							.SetCell(7' 0' LocalizedStrings.Str342)  							.SetCell(8' 0' LocalizedStrings.Str723).SetStyle(8' typeof(string))  							.SetCell(9' 0' LocalizedStrings.Str724).SetStyle(9' typeof(decimal))  							.SetCell(10' 0' LocalizedStrings.Str725).SetStyle(10' typeof(decimal));    						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.OrderId == null ? message.OrderStringId : message.OrderId.To<string>())  								.SetCell(1' index' message.ServerTime)  								.SetCell(2' index' message.OrderPrice)  								.SetCell(3' index' message.OrderVolume)  								.SetCell(4' index' message.Side)  								.SetCell(5' index' message.OrderState)  								.SetCell(6' index' message.TimeInForce)  								.SetCell(7' index' message.IsSystem);    							if (message.TradePrice != null)  							{  								worker  									.SetCell(8' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  									.SetCell(9' index' message.TradePrice)  									.SetCell(10' index' message.OpenInterest);  							}    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				case ExecutionTypes.Transaction:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(1' 0' LocalizedStrings.Portfolio)  							.SetCell(2' 0' LocalizedStrings.TransactionId)  							.SetCell(3' 0' LocalizedStrings.OrderId)  							.SetCell(4' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(5' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(6' 0' LocalizedStrings.Str1325).SetStyle(3' typeof(decimal))  							.SetCell(7' 0' LocalizedStrings.Str128)  							.SetCell(8' 0' LocalizedStrings.Str132)  							.SetCell(9' 0' LocalizedStrings.Str134)  							.SetCell(10' 0' LocalizedStrings.Str506)  							.SetCell(11' 0' LocalizedStrings.TradePrice).SetStyle(3' typeof(decimal));    						worker.SetConditionalFormatting(7' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(7' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Active)' null' Colors.Blue);  						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Done)' null' Colors.Green);  						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Failed)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.ServerTime)  								.SetCell(1' index' message.PortfolioName)  								.SetCell(2' index' message.TransactionId)  								.SetCell(3' index' message.OrderId == null ? message.OrderStringId : message.OrderId.To<string>())  								.SetCell(4' index' message.OrderPrice)  								.SetCell(5' index' message.OrderVolume)  								.SetCell(6' index' message.Balance)  								.SetCell(7' index' message.Side)  								.SetCell(8' index' message.OrderType)  								.SetCell(9' index' message.OrderState)  								.SetCell(10' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  								.SetCell(11' index' message.TradePrice)  								.SetCell(12' index' message.HasOrderInfo)  								.SetCell(13' index' message.HasTradeInfo);    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				default:  					throw new ArgumentOutOfRangeException();  			}
Magic Number,StockSharp.Algo.Export,ExcelExporter,C:\repos\stocksharp_stocksharp\Algo\Export\ExcelExporter.cs,Export,The following statement contains a magic number: switch ((ExecutionTypes)Arg)  			{  				case ExecutionTypes.Tick:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Id).SetStyle(0' typeof(string))  							.SetCell(1' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(2' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(3' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(4' 0' LocalizedStrings.Str128)  							.SetCell(5' 0' LocalizedStrings.OI).SetStyle(5' typeof(decimal))  							.SetCell(6' 0' "UP_DOWN").SetStyle(5' typeof(bool));    						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  								.SetCell(1' index' message.ServerTime)  								.SetCell(2' index' message.TradePrice)  								.SetCell(3' index' message.TradeVolume)  								.SetCell(4' index' message.OriginSide)  								.SetCell(5' index' message.OpenInterest)  								.SetCell(6' index' message.IsUpTick);    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				case ExecutionTypes.OrderLog:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Id).SetStyle(0' typeof(string))  							.SetCell(1' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(2' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(3' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(4' 0' LocalizedStrings.Str128)  							.SetCell(5' 0' LocalizedStrings.Str722)  							.SetCell(6' 0' LocalizedStrings.Type)  							.SetCell(7' 0' LocalizedStrings.Str342)  							.SetCell(8' 0' LocalizedStrings.Str723).SetStyle(8' typeof(string))  							.SetCell(9' 0' LocalizedStrings.Str724).SetStyle(9' typeof(decimal))  							.SetCell(10' 0' LocalizedStrings.Str725).SetStyle(10' typeof(decimal));    						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.OrderId == null ? message.OrderStringId : message.OrderId.To<string>())  								.SetCell(1' index' message.ServerTime)  								.SetCell(2' index' message.OrderPrice)  								.SetCell(3' index' message.OrderVolume)  								.SetCell(4' index' message.Side)  								.SetCell(5' index' message.OrderState)  								.SetCell(6' index' message.TimeInForce)  								.SetCell(7' index' message.IsSystem);    							if (message.TradePrice != null)  							{  								worker  									.SetCell(8' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  									.SetCell(9' index' message.TradePrice)  									.SetCell(10' index' message.OpenInterest);  							}    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				case ExecutionTypes.Transaction:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(1' 0' LocalizedStrings.Portfolio)  							.SetCell(2' 0' LocalizedStrings.TransactionId)  							.SetCell(3' 0' LocalizedStrings.OrderId)  							.SetCell(4' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(5' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(6' 0' LocalizedStrings.Str1325).SetStyle(3' typeof(decimal))  							.SetCell(7' 0' LocalizedStrings.Str128)  							.SetCell(8' 0' LocalizedStrings.Str132)  							.SetCell(9' 0' LocalizedStrings.Str134)  							.SetCell(10' 0' LocalizedStrings.Str506)  							.SetCell(11' 0' LocalizedStrings.TradePrice).SetStyle(3' typeof(decimal));    						worker.SetConditionalFormatting(7' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(7' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Active)' null' Colors.Blue);  						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Done)' null' Colors.Green);  						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Failed)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.ServerTime)  								.SetCell(1' index' message.PortfolioName)  								.SetCell(2' index' message.TransactionId)  								.SetCell(3' index' message.OrderId == null ? message.OrderStringId : message.OrderId.To<string>())  								.SetCell(4' index' message.OrderPrice)  								.SetCell(5' index' message.OrderVolume)  								.SetCell(6' index' message.Balance)  								.SetCell(7' index' message.Side)  								.SetCell(8' index' message.OrderType)  								.SetCell(9' index' message.OrderState)  								.SetCell(10' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  								.SetCell(11' index' message.TradePrice)  								.SetCell(12' index' message.HasOrderInfo)  								.SetCell(13' index' message.HasTradeInfo);    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				default:  					throw new ArgumentOutOfRangeException();  			}
Magic Number,StockSharp.Algo.Export,ExcelExporter,C:\repos\stocksharp_stocksharp\Algo\Export\ExcelExporter.cs,Export,The following statement contains a magic number: switch ((ExecutionTypes)Arg)  			{  				case ExecutionTypes.Tick:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Id).SetStyle(0' typeof(string))  							.SetCell(1' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(2' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(3' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(4' 0' LocalizedStrings.Str128)  							.SetCell(5' 0' LocalizedStrings.OI).SetStyle(5' typeof(decimal))  							.SetCell(6' 0' "UP_DOWN").SetStyle(5' typeof(bool));    						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  								.SetCell(1' index' message.ServerTime)  								.SetCell(2' index' message.TradePrice)  								.SetCell(3' index' message.TradeVolume)  								.SetCell(4' index' message.OriginSide)  								.SetCell(5' index' message.OpenInterest)  								.SetCell(6' index' message.IsUpTick);    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				case ExecutionTypes.OrderLog:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Id).SetStyle(0' typeof(string))  							.SetCell(1' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(2' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(3' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(4' 0' LocalizedStrings.Str128)  							.SetCell(5' 0' LocalizedStrings.Str722)  							.SetCell(6' 0' LocalizedStrings.Type)  							.SetCell(7' 0' LocalizedStrings.Str342)  							.SetCell(8' 0' LocalizedStrings.Str723).SetStyle(8' typeof(string))  							.SetCell(9' 0' LocalizedStrings.Str724).SetStyle(9' typeof(decimal))  							.SetCell(10' 0' LocalizedStrings.Str725).SetStyle(10' typeof(decimal));    						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.OrderId == null ? message.OrderStringId : message.OrderId.To<string>())  								.SetCell(1' index' message.ServerTime)  								.SetCell(2' index' message.OrderPrice)  								.SetCell(3' index' message.OrderVolume)  								.SetCell(4' index' message.Side)  								.SetCell(5' index' message.OrderState)  								.SetCell(6' index' message.TimeInForce)  								.SetCell(7' index' message.IsSystem);    							if (message.TradePrice != null)  							{  								worker  									.SetCell(8' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  									.SetCell(9' index' message.TradePrice)  									.SetCell(10' index' message.OpenInterest);  							}    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				case ExecutionTypes.Transaction:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(1' 0' LocalizedStrings.Portfolio)  							.SetCell(2' 0' LocalizedStrings.TransactionId)  							.SetCell(3' 0' LocalizedStrings.OrderId)  							.SetCell(4' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(5' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(6' 0' LocalizedStrings.Str1325).SetStyle(3' typeof(decimal))  							.SetCell(7' 0' LocalizedStrings.Str128)  							.SetCell(8' 0' LocalizedStrings.Str132)  							.SetCell(9' 0' LocalizedStrings.Str134)  							.SetCell(10' 0' LocalizedStrings.Str506)  							.SetCell(11' 0' LocalizedStrings.TradePrice).SetStyle(3' typeof(decimal));    						worker.SetConditionalFormatting(7' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(7' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Active)' null' Colors.Blue);  						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Done)' null' Colors.Green);  						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Failed)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.ServerTime)  								.SetCell(1' index' message.PortfolioName)  								.SetCell(2' index' message.TransactionId)  								.SetCell(3' index' message.OrderId == null ? message.OrderStringId : message.OrderId.To<string>())  								.SetCell(4' index' message.OrderPrice)  								.SetCell(5' index' message.OrderVolume)  								.SetCell(6' index' message.Balance)  								.SetCell(7' index' message.Side)  								.SetCell(8' index' message.OrderType)  								.SetCell(9' index' message.OrderState)  								.SetCell(10' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  								.SetCell(11' index' message.TradePrice)  								.SetCell(12' index' message.HasOrderInfo)  								.SetCell(13' index' message.HasTradeInfo);    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				default:  					throw new ArgumentOutOfRangeException();  			}
Magic Number,StockSharp.Algo.Export,ExcelExporter,C:\repos\stocksharp_stocksharp\Algo\Export\ExcelExporter.cs,Export,The following statement contains a magic number: switch ((ExecutionTypes)Arg)  			{  				case ExecutionTypes.Tick:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Id).SetStyle(0' typeof(string))  							.SetCell(1' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(2' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(3' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(4' 0' LocalizedStrings.Str128)  							.SetCell(5' 0' LocalizedStrings.OI).SetStyle(5' typeof(decimal))  							.SetCell(6' 0' "UP_DOWN").SetStyle(5' typeof(bool));    						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  								.SetCell(1' index' message.ServerTime)  								.SetCell(2' index' message.TradePrice)  								.SetCell(3' index' message.TradeVolume)  								.SetCell(4' index' message.OriginSide)  								.SetCell(5' index' message.OpenInterest)  								.SetCell(6' index' message.IsUpTick);    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				case ExecutionTypes.OrderLog:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Id).SetStyle(0' typeof(string))  							.SetCell(1' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(2' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(3' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(4' 0' LocalizedStrings.Str128)  							.SetCell(5' 0' LocalizedStrings.Str722)  							.SetCell(6' 0' LocalizedStrings.Type)  							.SetCell(7' 0' LocalizedStrings.Str342)  							.SetCell(8' 0' LocalizedStrings.Str723).SetStyle(8' typeof(string))  							.SetCell(9' 0' LocalizedStrings.Str724).SetStyle(9' typeof(decimal))  							.SetCell(10' 0' LocalizedStrings.Str725).SetStyle(10' typeof(decimal));    						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.OrderId == null ? message.OrderStringId : message.OrderId.To<string>())  								.SetCell(1' index' message.ServerTime)  								.SetCell(2' index' message.OrderPrice)  								.SetCell(3' index' message.OrderVolume)  								.SetCell(4' index' message.Side)  								.SetCell(5' index' message.OrderState)  								.SetCell(6' index' message.TimeInForce)  								.SetCell(7' index' message.IsSystem);    							if (message.TradePrice != null)  							{  								worker  									.SetCell(8' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  									.SetCell(9' index' message.TradePrice)  									.SetCell(10' index' message.OpenInterest);  							}    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				case ExecutionTypes.Transaction:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(1' 0' LocalizedStrings.Portfolio)  							.SetCell(2' 0' LocalizedStrings.TransactionId)  							.SetCell(3' 0' LocalizedStrings.OrderId)  							.SetCell(4' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(5' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(6' 0' LocalizedStrings.Str1325).SetStyle(3' typeof(decimal))  							.SetCell(7' 0' LocalizedStrings.Str128)  							.SetCell(8' 0' LocalizedStrings.Str132)  							.SetCell(9' 0' LocalizedStrings.Str134)  							.SetCell(10' 0' LocalizedStrings.Str506)  							.SetCell(11' 0' LocalizedStrings.TradePrice).SetStyle(3' typeof(decimal));    						worker.SetConditionalFormatting(7' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(7' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Active)' null' Colors.Blue);  						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Done)' null' Colors.Green);  						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Failed)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.ServerTime)  								.SetCell(1' index' message.PortfolioName)  								.SetCell(2' index' message.TransactionId)  								.SetCell(3' index' message.OrderId == null ? message.OrderStringId : message.OrderId.To<string>())  								.SetCell(4' index' message.OrderPrice)  								.SetCell(5' index' message.OrderVolume)  								.SetCell(6' index' message.Balance)  								.SetCell(7' index' message.Side)  								.SetCell(8' index' message.OrderType)  								.SetCell(9' index' message.OrderState)  								.SetCell(10' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  								.SetCell(11' index' message.TradePrice)  								.SetCell(12' index' message.HasOrderInfo)  								.SetCell(13' index' message.HasTradeInfo);    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				default:  					throw new ArgumentOutOfRangeException();  			}
Magic Number,StockSharp.Algo.Export,ExcelExporter,C:\repos\stocksharp_stocksharp\Algo\Export\ExcelExporter.cs,Export,The following statement contains a magic number: switch ((ExecutionTypes)Arg)  			{  				case ExecutionTypes.Tick:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Id).SetStyle(0' typeof(string))  							.SetCell(1' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(2' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(3' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(4' 0' LocalizedStrings.Str128)  							.SetCell(5' 0' LocalizedStrings.OI).SetStyle(5' typeof(decimal))  							.SetCell(6' 0' "UP_DOWN").SetStyle(5' typeof(bool));    						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  								.SetCell(1' index' message.ServerTime)  								.SetCell(2' index' message.TradePrice)  								.SetCell(3' index' message.TradeVolume)  								.SetCell(4' index' message.OriginSide)  								.SetCell(5' index' message.OpenInterest)  								.SetCell(6' index' message.IsUpTick);    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				case ExecutionTypes.OrderLog:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Id).SetStyle(0' typeof(string))  							.SetCell(1' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(2' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(3' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(4' 0' LocalizedStrings.Str128)  							.SetCell(5' 0' LocalizedStrings.Str722)  							.SetCell(6' 0' LocalizedStrings.Type)  							.SetCell(7' 0' LocalizedStrings.Str342)  							.SetCell(8' 0' LocalizedStrings.Str723).SetStyle(8' typeof(string))  							.SetCell(9' 0' LocalizedStrings.Str724).SetStyle(9' typeof(decimal))  							.SetCell(10' 0' LocalizedStrings.Str725).SetStyle(10' typeof(decimal));    						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.OrderId == null ? message.OrderStringId : message.OrderId.To<string>())  								.SetCell(1' index' message.ServerTime)  								.SetCell(2' index' message.OrderPrice)  								.SetCell(3' index' message.OrderVolume)  								.SetCell(4' index' message.Side)  								.SetCell(5' index' message.OrderState)  								.SetCell(6' index' message.TimeInForce)  								.SetCell(7' index' message.IsSystem);    							if (message.TradePrice != null)  							{  								worker  									.SetCell(8' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  									.SetCell(9' index' message.TradePrice)  									.SetCell(10' index' message.OpenInterest);  							}    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				case ExecutionTypes.Transaction:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(1' 0' LocalizedStrings.Portfolio)  							.SetCell(2' 0' LocalizedStrings.TransactionId)  							.SetCell(3' 0' LocalizedStrings.OrderId)  							.SetCell(4' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(5' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(6' 0' LocalizedStrings.Str1325).SetStyle(3' typeof(decimal))  							.SetCell(7' 0' LocalizedStrings.Str128)  							.SetCell(8' 0' LocalizedStrings.Str132)  							.SetCell(9' 0' LocalizedStrings.Str134)  							.SetCell(10' 0' LocalizedStrings.Str506)  							.SetCell(11' 0' LocalizedStrings.TradePrice).SetStyle(3' typeof(decimal));    						worker.SetConditionalFormatting(7' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(7' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Active)' null' Colors.Blue);  						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Done)' null' Colors.Green);  						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Failed)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.ServerTime)  								.SetCell(1' index' message.PortfolioName)  								.SetCell(2' index' message.TransactionId)  								.SetCell(3' index' message.OrderId == null ? message.OrderStringId : message.OrderId.To<string>())  								.SetCell(4' index' message.OrderPrice)  								.SetCell(5' index' message.OrderVolume)  								.SetCell(6' index' message.Balance)  								.SetCell(7' index' message.Side)  								.SetCell(8' index' message.OrderType)  								.SetCell(9' index' message.OrderState)  								.SetCell(10' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  								.SetCell(11' index' message.TradePrice)  								.SetCell(12' index' message.HasOrderInfo)  								.SetCell(13' index' message.HasTradeInfo);    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				default:  					throw new ArgumentOutOfRangeException();  			}
Magic Number,StockSharp.Algo.Export,ExcelExporter,C:\repos\stocksharp_stocksharp\Algo\Export\ExcelExporter.cs,Export,The following statement contains a magic number: switch ((ExecutionTypes)Arg)  			{  				case ExecutionTypes.Tick:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Id).SetStyle(0' typeof(string))  							.SetCell(1' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(2' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(3' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(4' 0' LocalizedStrings.Str128)  							.SetCell(5' 0' LocalizedStrings.OI).SetStyle(5' typeof(decimal))  							.SetCell(6' 0' "UP_DOWN").SetStyle(5' typeof(bool));    						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  								.SetCell(1' index' message.ServerTime)  								.SetCell(2' index' message.TradePrice)  								.SetCell(3' index' message.TradeVolume)  								.SetCell(4' index' message.OriginSide)  								.SetCell(5' index' message.OpenInterest)  								.SetCell(6' index' message.IsUpTick);    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				case ExecutionTypes.OrderLog:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Id).SetStyle(0' typeof(string))  							.SetCell(1' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(2' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(3' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(4' 0' LocalizedStrings.Str128)  							.SetCell(5' 0' LocalizedStrings.Str722)  							.SetCell(6' 0' LocalizedStrings.Type)  							.SetCell(7' 0' LocalizedStrings.Str342)  							.SetCell(8' 0' LocalizedStrings.Str723).SetStyle(8' typeof(string))  							.SetCell(9' 0' LocalizedStrings.Str724).SetStyle(9' typeof(decimal))  							.SetCell(10' 0' LocalizedStrings.Str725).SetStyle(10' typeof(decimal));    						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.OrderId == null ? message.OrderStringId : message.OrderId.To<string>())  								.SetCell(1' index' message.ServerTime)  								.SetCell(2' index' message.OrderPrice)  								.SetCell(3' index' message.OrderVolume)  								.SetCell(4' index' message.Side)  								.SetCell(5' index' message.OrderState)  								.SetCell(6' index' message.TimeInForce)  								.SetCell(7' index' message.IsSystem);    							if (message.TradePrice != null)  							{  								worker  									.SetCell(8' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  									.SetCell(9' index' message.TradePrice)  									.SetCell(10' index' message.OpenInterest);  							}    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				case ExecutionTypes.Transaction:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(1' 0' LocalizedStrings.Portfolio)  							.SetCell(2' 0' LocalizedStrings.TransactionId)  							.SetCell(3' 0' LocalizedStrings.OrderId)  							.SetCell(4' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(5' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(6' 0' LocalizedStrings.Str1325).SetStyle(3' typeof(decimal))  							.SetCell(7' 0' LocalizedStrings.Str128)  							.SetCell(8' 0' LocalizedStrings.Str132)  							.SetCell(9' 0' LocalizedStrings.Str134)  							.SetCell(10' 0' LocalizedStrings.Str506)  							.SetCell(11' 0' LocalizedStrings.TradePrice).SetStyle(3' typeof(decimal));    						worker.SetConditionalFormatting(7' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(7' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Active)' null' Colors.Blue);  						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Done)' null' Colors.Green);  						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Failed)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.ServerTime)  								.SetCell(1' index' message.PortfolioName)  								.SetCell(2' index' message.TransactionId)  								.SetCell(3' index' message.OrderId == null ? message.OrderStringId : message.OrderId.To<string>())  								.SetCell(4' index' message.OrderPrice)  								.SetCell(5' index' message.OrderVolume)  								.SetCell(6' index' message.Balance)  								.SetCell(7' index' message.Side)  								.SetCell(8' index' message.OrderType)  								.SetCell(9' index' message.OrderState)  								.SetCell(10' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  								.SetCell(11' index' message.TradePrice)  								.SetCell(12' index' message.HasOrderInfo)  								.SetCell(13' index' message.HasTradeInfo);    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				default:  					throw new ArgumentOutOfRangeException();  			}
Magic Number,StockSharp.Algo.Export,ExcelExporter,C:\repos\stocksharp_stocksharp\Algo\Export\ExcelExporter.cs,Export,The following statement contains a magic number: switch ((ExecutionTypes)Arg)  			{  				case ExecutionTypes.Tick:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Id).SetStyle(0' typeof(string))  							.SetCell(1' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(2' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(3' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(4' 0' LocalizedStrings.Str128)  							.SetCell(5' 0' LocalizedStrings.OI).SetStyle(5' typeof(decimal))  							.SetCell(6' 0' "UP_DOWN").SetStyle(5' typeof(bool));    						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  								.SetCell(1' index' message.ServerTime)  								.SetCell(2' index' message.TradePrice)  								.SetCell(3' index' message.TradeVolume)  								.SetCell(4' index' message.OriginSide)  								.SetCell(5' index' message.OpenInterest)  								.SetCell(6' index' message.IsUpTick);    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				case ExecutionTypes.OrderLog:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Id).SetStyle(0' typeof(string))  							.SetCell(1' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(2' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(3' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(4' 0' LocalizedStrings.Str128)  							.SetCell(5' 0' LocalizedStrings.Str722)  							.SetCell(6' 0' LocalizedStrings.Type)  							.SetCell(7' 0' LocalizedStrings.Str342)  							.SetCell(8' 0' LocalizedStrings.Str723).SetStyle(8' typeof(string))  							.SetCell(9' 0' LocalizedStrings.Str724).SetStyle(9' typeof(decimal))  							.SetCell(10' 0' LocalizedStrings.Str725).SetStyle(10' typeof(decimal));    						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.OrderId == null ? message.OrderStringId : message.OrderId.To<string>())  								.SetCell(1' index' message.ServerTime)  								.SetCell(2' index' message.OrderPrice)  								.SetCell(3' index' message.OrderVolume)  								.SetCell(4' index' message.Side)  								.SetCell(5' index' message.OrderState)  								.SetCell(6' index' message.TimeInForce)  								.SetCell(7' index' message.IsSystem);    							if (message.TradePrice != null)  							{  								worker  									.SetCell(8' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  									.SetCell(9' index' message.TradePrice)  									.SetCell(10' index' message.OpenInterest);  							}    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				case ExecutionTypes.Transaction:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(1' 0' LocalizedStrings.Portfolio)  							.SetCell(2' 0' LocalizedStrings.TransactionId)  							.SetCell(3' 0' LocalizedStrings.OrderId)  							.SetCell(4' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(5' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(6' 0' LocalizedStrings.Str1325).SetStyle(3' typeof(decimal))  							.SetCell(7' 0' LocalizedStrings.Str128)  							.SetCell(8' 0' LocalizedStrings.Str132)  							.SetCell(9' 0' LocalizedStrings.Str134)  							.SetCell(10' 0' LocalizedStrings.Str506)  							.SetCell(11' 0' LocalizedStrings.TradePrice).SetStyle(3' typeof(decimal));    						worker.SetConditionalFormatting(7' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(7' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Active)' null' Colors.Blue);  						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Done)' null' Colors.Green);  						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Failed)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.ServerTime)  								.SetCell(1' index' message.PortfolioName)  								.SetCell(2' index' message.TransactionId)  								.SetCell(3' index' message.OrderId == null ? message.OrderStringId : message.OrderId.To<string>())  								.SetCell(4' index' message.OrderPrice)  								.SetCell(5' index' message.OrderVolume)  								.SetCell(6' index' message.Balance)  								.SetCell(7' index' message.Side)  								.SetCell(8' index' message.OrderType)  								.SetCell(9' index' message.OrderState)  								.SetCell(10' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  								.SetCell(11' index' message.TradePrice)  								.SetCell(12' index' message.HasOrderInfo)  								.SetCell(13' index' message.HasTradeInfo);    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				default:  					throw new ArgumentOutOfRangeException();  			}
Magic Number,StockSharp.Algo.Export,ExcelExporter,C:\repos\stocksharp_stocksharp\Algo\Export\ExcelExporter.cs,Export,The following statement contains a magic number: switch ((ExecutionTypes)Arg)  			{  				case ExecutionTypes.Tick:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Id).SetStyle(0' typeof(string))  							.SetCell(1' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(2' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(3' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(4' 0' LocalizedStrings.Str128)  							.SetCell(5' 0' LocalizedStrings.OI).SetStyle(5' typeof(decimal))  							.SetCell(6' 0' "UP_DOWN").SetStyle(5' typeof(bool));    						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  								.SetCell(1' index' message.ServerTime)  								.SetCell(2' index' message.TradePrice)  								.SetCell(3' index' message.TradeVolume)  								.SetCell(4' index' message.OriginSide)  								.SetCell(5' index' message.OpenInterest)  								.SetCell(6' index' message.IsUpTick);    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				case ExecutionTypes.OrderLog:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Id).SetStyle(0' typeof(string))  							.SetCell(1' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(2' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(3' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(4' 0' LocalizedStrings.Str128)  							.SetCell(5' 0' LocalizedStrings.Str722)  							.SetCell(6' 0' LocalizedStrings.Type)  							.SetCell(7' 0' LocalizedStrings.Str342)  							.SetCell(8' 0' LocalizedStrings.Str723).SetStyle(8' typeof(string))  							.SetCell(9' 0' LocalizedStrings.Str724).SetStyle(9' typeof(decimal))  							.SetCell(10' 0' LocalizedStrings.Str725).SetStyle(10' typeof(decimal));    						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.OrderId == null ? message.OrderStringId : message.OrderId.To<string>())  								.SetCell(1' index' message.ServerTime)  								.SetCell(2' index' message.OrderPrice)  								.SetCell(3' index' message.OrderVolume)  								.SetCell(4' index' message.Side)  								.SetCell(5' index' message.OrderState)  								.SetCell(6' index' message.TimeInForce)  								.SetCell(7' index' message.IsSystem);    							if (message.TradePrice != null)  							{  								worker  									.SetCell(8' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  									.SetCell(9' index' message.TradePrice)  									.SetCell(10' index' message.OpenInterest);  							}    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				case ExecutionTypes.Transaction:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(1' 0' LocalizedStrings.Portfolio)  							.SetCell(2' 0' LocalizedStrings.TransactionId)  							.SetCell(3' 0' LocalizedStrings.OrderId)  							.SetCell(4' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(5' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(6' 0' LocalizedStrings.Str1325).SetStyle(3' typeof(decimal))  							.SetCell(7' 0' LocalizedStrings.Str128)  							.SetCell(8' 0' LocalizedStrings.Str132)  							.SetCell(9' 0' LocalizedStrings.Str134)  							.SetCell(10' 0' LocalizedStrings.Str506)  							.SetCell(11' 0' LocalizedStrings.TradePrice).SetStyle(3' typeof(decimal));    						worker.SetConditionalFormatting(7' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(7' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Active)' null' Colors.Blue);  						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Done)' null' Colors.Green);  						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Failed)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.ServerTime)  								.SetCell(1' index' message.PortfolioName)  								.SetCell(2' index' message.TransactionId)  								.SetCell(3' index' message.OrderId == null ? message.OrderStringId : message.OrderId.To<string>())  								.SetCell(4' index' message.OrderPrice)  								.SetCell(5' index' message.OrderVolume)  								.SetCell(6' index' message.Balance)  								.SetCell(7' index' message.Side)  								.SetCell(8' index' message.OrderType)  								.SetCell(9' index' message.OrderState)  								.SetCell(10' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  								.SetCell(11' index' message.TradePrice)  								.SetCell(12' index' message.HasOrderInfo)  								.SetCell(13' index' message.HasTradeInfo);    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				default:  					throw new ArgumentOutOfRangeException();  			}
Magic Number,StockSharp.Algo.Export,ExcelExporter,C:\repos\stocksharp_stocksharp\Algo\Export\ExcelExporter.cs,Export,The following statement contains a magic number: switch ((ExecutionTypes)Arg)  			{  				case ExecutionTypes.Tick:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Id).SetStyle(0' typeof(string))  							.SetCell(1' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(2' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(3' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(4' 0' LocalizedStrings.Str128)  							.SetCell(5' 0' LocalizedStrings.OI).SetStyle(5' typeof(decimal))  							.SetCell(6' 0' "UP_DOWN").SetStyle(5' typeof(bool));    						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  								.SetCell(1' index' message.ServerTime)  								.SetCell(2' index' message.TradePrice)  								.SetCell(3' index' message.TradeVolume)  								.SetCell(4' index' message.OriginSide)  								.SetCell(5' index' message.OpenInterest)  								.SetCell(6' index' message.IsUpTick);    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				case ExecutionTypes.OrderLog:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Id).SetStyle(0' typeof(string))  							.SetCell(1' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(2' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(3' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(4' 0' LocalizedStrings.Str128)  							.SetCell(5' 0' LocalizedStrings.Str722)  							.SetCell(6' 0' LocalizedStrings.Type)  							.SetCell(7' 0' LocalizedStrings.Str342)  							.SetCell(8' 0' LocalizedStrings.Str723).SetStyle(8' typeof(string))  							.SetCell(9' 0' LocalizedStrings.Str724).SetStyle(9' typeof(decimal))  							.SetCell(10' 0' LocalizedStrings.Str725).SetStyle(10' typeof(decimal));    						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.OrderId == null ? message.OrderStringId : message.OrderId.To<string>())  								.SetCell(1' index' message.ServerTime)  								.SetCell(2' index' message.OrderPrice)  								.SetCell(3' index' message.OrderVolume)  								.SetCell(4' index' message.Side)  								.SetCell(5' index' message.OrderState)  								.SetCell(6' index' message.TimeInForce)  								.SetCell(7' index' message.IsSystem);    							if (message.TradePrice != null)  							{  								worker  									.SetCell(8' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  									.SetCell(9' index' message.TradePrice)  									.SetCell(10' index' message.OpenInterest);  							}    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				case ExecutionTypes.Transaction:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(1' 0' LocalizedStrings.Portfolio)  							.SetCell(2' 0' LocalizedStrings.TransactionId)  							.SetCell(3' 0' LocalizedStrings.OrderId)  							.SetCell(4' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(5' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(6' 0' LocalizedStrings.Str1325).SetStyle(3' typeof(decimal))  							.SetCell(7' 0' LocalizedStrings.Str128)  							.SetCell(8' 0' LocalizedStrings.Str132)  							.SetCell(9' 0' LocalizedStrings.Str134)  							.SetCell(10' 0' LocalizedStrings.Str506)  							.SetCell(11' 0' LocalizedStrings.TradePrice).SetStyle(3' typeof(decimal));    						worker.SetConditionalFormatting(7' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(7' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Active)' null' Colors.Blue);  						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Done)' null' Colors.Green);  						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Failed)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.ServerTime)  								.SetCell(1' index' message.PortfolioName)  								.SetCell(2' index' message.TransactionId)  								.SetCell(3' index' message.OrderId == null ? message.OrderStringId : message.OrderId.To<string>())  								.SetCell(4' index' message.OrderPrice)  								.SetCell(5' index' message.OrderVolume)  								.SetCell(6' index' message.Balance)  								.SetCell(7' index' message.Side)  								.SetCell(8' index' message.OrderType)  								.SetCell(9' index' message.OrderState)  								.SetCell(10' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  								.SetCell(11' index' message.TradePrice)  								.SetCell(12' index' message.HasOrderInfo)  								.SetCell(13' index' message.HasTradeInfo);    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				default:  					throw new ArgumentOutOfRangeException();  			}
Magic Number,StockSharp.Algo.Export,ExcelExporter,C:\repos\stocksharp_stocksharp\Algo\Export\ExcelExporter.cs,Export,The following statement contains a magic number: switch ((ExecutionTypes)Arg)  			{  				case ExecutionTypes.Tick:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Id).SetStyle(0' typeof(string))  							.SetCell(1' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(2' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(3' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(4' 0' LocalizedStrings.Str128)  							.SetCell(5' 0' LocalizedStrings.OI).SetStyle(5' typeof(decimal))  							.SetCell(6' 0' "UP_DOWN").SetStyle(5' typeof(bool));    						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  								.SetCell(1' index' message.ServerTime)  								.SetCell(2' index' message.TradePrice)  								.SetCell(3' index' message.TradeVolume)  								.SetCell(4' index' message.OriginSide)  								.SetCell(5' index' message.OpenInterest)  								.SetCell(6' index' message.IsUpTick);    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				case ExecutionTypes.OrderLog:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Id).SetStyle(0' typeof(string))  							.SetCell(1' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(2' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(3' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(4' 0' LocalizedStrings.Str128)  							.SetCell(5' 0' LocalizedStrings.Str722)  							.SetCell(6' 0' LocalizedStrings.Type)  							.SetCell(7' 0' LocalizedStrings.Str342)  							.SetCell(8' 0' LocalizedStrings.Str723).SetStyle(8' typeof(string))  							.SetCell(9' 0' LocalizedStrings.Str724).SetStyle(9' typeof(decimal))  							.SetCell(10' 0' LocalizedStrings.Str725).SetStyle(10' typeof(decimal));    						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.OrderId == null ? message.OrderStringId : message.OrderId.To<string>())  								.SetCell(1' index' message.ServerTime)  								.SetCell(2' index' message.OrderPrice)  								.SetCell(3' index' message.OrderVolume)  								.SetCell(4' index' message.Side)  								.SetCell(5' index' message.OrderState)  								.SetCell(6' index' message.TimeInForce)  								.SetCell(7' index' message.IsSystem);    							if (message.TradePrice != null)  							{  								worker  									.SetCell(8' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  									.SetCell(9' index' message.TradePrice)  									.SetCell(10' index' message.OpenInterest);  							}    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				case ExecutionTypes.Transaction:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(1' 0' LocalizedStrings.Portfolio)  							.SetCell(2' 0' LocalizedStrings.TransactionId)  							.SetCell(3' 0' LocalizedStrings.OrderId)  							.SetCell(4' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(5' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(6' 0' LocalizedStrings.Str1325).SetStyle(3' typeof(decimal))  							.SetCell(7' 0' LocalizedStrings.Str128)  							.SetCell(8' 0' LocalizedStrings.Str132)  							.SetCell(9' 0' LocalizedStrings.Str134)  							.SetCell(10' 0' LocalizedStrings.Str506)  							.SetCell(11' 0' LocalizedStrings.TradePrice).SetStyle(3' typeof(decimal));    						worker.SetConditionalFormatting(7' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(7' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Active)' null' Colors.Blue);  						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Done)' null' Colors.Green);  						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Failed)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.ServerTime)  								.SetCell(1' index' message.PortfolioName)  								.SetCell(2' index' message.TransactionId)  								.SetCell(3' index' message.OrderId == null ? message.OrderStringId : message.OrderId.To<string>())  								.SetCell(4' index' message.OrderPrice)  								.SetCell(5' index' message.OrderVolume)  								.SetCell(6' index' message.Balance)  								.SetCell(7' index' message.Side)  								.SetCell(8' index' message.OrderType)  								.SetCell(9' index' message.OrderState)  								.SetCell(10' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  								.SetCell(11' index' message.TradePrice)  								.SetCell(12' index' message.HasOrderInfo)  								.SetCell(13' index' message.HasTradeInfo);    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				default:  					throw new ArgumentOutOfRangeException();  			}
Magic Number,StockSharp.Algo.Export,ExcelExporter,C:\repos\stocksharp_stocksharp\Algo\Export\ExcelExporter.cs,Export,The following statement contains a magic number: switch ((ExecutionTypes)Arg)  			{  				case ExecutionTypes.Tick:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Id).SetStyle(0' typeof(string))  							.SetCell(1' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(2' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(3' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(4' 0' LocalizedStrings.Str128)  							.SetCell(5' 0' LocalizedStrings.OI).SetStyle(5' typeof(decimal))  							.SetCell(6' 0' "UP_DOWN").SetStyle(5' typeof(bool));    						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  								.SetCell(1' index' message.ServerTime)  								.SetCell(2' index' message.TradePrice)  								.SetCell(3' index' message.TradeVolume)  								.SetCell(4' index' message.OriginSide)  								.SetCell(5' index' message.OpenInterest)  								.SetCell(6' index' message.IsUpTick);    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				case ExecutionTypes.OrderLog:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Id).SetStyle(0' typeof(string))  							.SetCell(1' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(2' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(3' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(4' 0' LocalizedStrings.Str128)  							.SetCell(5' 0' LocalizedStrings.Str722)  							.SetCell(6' 0' LocalizedStrings.Type)  							.SetCell(7' 0' LocalizedStrings.Str342)  							.SetCell(8' 0' LocalizedStrings.Str723).SetStyle(8' typeof(string))  							.SetCell(9' 0' LocalizedStrings.Str724).SetStyle(9' typeof(decimal))  							.SetCell(10' 0' LocalizedStrings.Str725).SetStyle(10' typeof(decimal));    						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.OrderId == null ? message.OrderStringId : message.OrderId.To<string>())  								.SetCell(1' index' message.ServerTime)  								.SetCell(2' index' message.OrderPrice)  								.SetCell(3' index' message.OrderVolume)  								.SetCell(4' index' message.Side)  								.SetCell(5' index' message.OrderState)  								.SetCell(6' index' message.TimeInForce)  								.SetCell(7' index' message.IsSystem);    							if (message.TradePrice != null)  							{  								worker  									.SetCell(8' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  									.SetCell(9' index' message.TradePrice)  									.SetCell(10' index' message.OpenInterest);  							}    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				case ExecutionTypes.Transaction:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(1' 0' LocalizedStrings.Portfolio)  							.SetCell(2' 0' LocalizedStrings.TransactionId)  							.SetCell(3' 0' LocalizedStrings.OrderId)  							.SetCell(4' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(5' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(6' 0' LocalizedStrings.Str1325).SetStyle(3' typeof(decimal))  							.SetCell(7' 0' LocalizedStrings.Str128)  							.SetCell(8' 0' LocalizedStrings.Str132)  							.SetCell(9' 0' LocalizedStrings.Str134)  							.SetCell(10' 0' LocalizedStrings.Str506)  							.SetCell(11' 0' LocalizedStrings.TradePrice).SetStyle(3' typeof(decimal));    						worker.SetConditionalFormatting(7' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(7' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Active)' null' Colors.Blue);  						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Done)' null' Colors.Green);  						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Failed)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.ServerTime)  								.SetCell(1' index' message.PortfolioName)  								.SetCell(2' index' message.TransactionId)  								.SetCell(3' index' message.OrderId == null ? message.OrderStringId : message.OrderId.To<string>())  								.SetCell(4' index' message.OrderPrice)  								.SetCell(5' index' message.OrderVolume)  								.SetCell(6' index' message.Balance)  								.SetCell(7' index' message.Side)  								.SetCell(8' index' message.OrderType)  								.SetCell(9' index' message.OrderState)  								.SetCell(10' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  								.SetCell(11' index' message.TradePrice)  								.SetCell(12' index' message.HasOrderInfo)  								.SetCell(13' index' message.HasTradeInfo);    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				default:  					throw new ArgumentOutOfRangeException();  			}
Magic Number,StockSharp.Algo.Export,ExcelExporter,C:\repos\stocksharp_stocksharp\Algo\Export\ExcelExporter.cs,Export,The following statement contains a magic number: switch ((ExecutionTypes)Arg)  			{  				case ExecutionTypes.Tick:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Id).SetStyle(0' typeof(string))  							.SetCell(1' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(2' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(3' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(4' 0' LocalizedStrings.Str128)  							.SetCell(5' 0' LocalizedStrings.OI).SetStyle(5' typeof(decimal))  							.SetCell(6' 0' "UP_DOWN").SetStyle(5' typeof(bool));    						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  								.SetCell(1' index' message.ServerTime)  								.SetCell(2' index' message.TradePrice)  								.SetCell(3' index' message.TradeVolume)  								.SetCell(4' index' message.OriginSide)  								.SetCell(5' index' message.OpenInterest)  								.SetCell(6' index' message.IsUpTick);    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				case ExecutionTypes.OrderLog:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Id).SetStyle(0' typeof(string))  							.SetCell(1' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(2' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(3' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(4' 0' LocalizedStrings.Str128)  							.SetCell(5' 0' LocalizedStrings.Str722)  							.SetCell(6' 0' LocalizedStrings.Type)  							.SetCell(7' 0' LocalizedStrings.Str342)  							.SetCell(8' 0' LocalizedStrings.Str723).SetStyle(8' typeof(string))  							.SetCell(9' 0' LocalizedStrings.Str724).SetStyle(9' typeof(decimal))  							.SetCell(10' 0' LocalizedStrings.Str725).SetStyle(10' typeof(decimal));    						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.OrderId == null ? message.OrderStringId : message.OrderId.To<string>())  								.SetCell(1' index' message.ServerTime)  								.SetCell(2' index' message.OrderPrice)  								.SetCell(3' index' message.OrderVolume)  								.SetCell(4' index' message.Side)  								.SetCell(5' index' message.OrderState)  								.SetCell(6' index' message.TimeInForce)  								.SetCell(7' index' message.IsSystem);    							if (message.TradePrice != null)  							{  								worker  									.SetCell(8' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  									.SetCell(9' index' message.TradePrice)  									.SetCell(10' index' message.OpenInterest);  							}    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				case ExecutionTypes.Transaction:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(1' 0' LocalizedStrings.Portfolio)  							.SetCell(2' 0' LocalizedStrings.TransactionId)  							.SetCell(3' 0' LocalizedStrings.OrderId)  							.SetCell(4' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(5' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(6' 0' LocalizedStrings.Str1325).SetStyle(3' typeof(decimal))  							.SetCell(7' 0' LocalizedStrings.Str128)  							.SetCell(8' 0' LocalizedStrings.Str132)  							.SetCell(9' 0' LocalizedStrings.Str134)  							.SetCell(10' 0' LocalizedStrings.Str506)  							.SetCell(11' 0' LocalizedStrings.TradePrice).SetStyle(3' typeof(decimal));    						worker.SetConditionalFormatting(7' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(7' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Active)' null' Colors.Blue);  						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Done)' null' Colors.Green);  						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Failed)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.ServerTime)  								.SetCell(1' index' message.PortfolioName)  								.SetCell(2' index' message.TransactionId)  								.SetCell(3' index' message.OrderId == null ? message.OrderStringId : message.OrderId.To<string>())  								.SetCell(4' index' message.OrderPrice)  								.SetCell(5' index' message.OrderVolume)  								.SetCell(6' index' message.Balance)  								.SetCell(7' index' message.Side)  								.SetCell(8' index' message.OrderType)  								.SetCell(9' index' message.OrderState)  								.SetCell(10' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  								.SetCell(11' index' message.TradePrice)  								.SetCell(12' index' message.HasOrderInfo)  								.SetCell(13' index' message.HasTradeInfo);    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				default:  					throw new ArgumentOutOfRangeException();  			}
Magic Number,StockSharp.Algo.Export,ExcelExporter,C:\repos\stocksharp_stocksharp\Algo\Export\ExcelExporter.cs,Export,The following statement contains a magic number: switch ((ExecutionTypes)Arg)  			{  				case ExecutionTypes.Tick:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Id).SetStyle(0' typeof(string))  							.SetCell(1' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(2' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(3' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(4' 0' LocalizedStrings.Str128)  							.SetCell(5' 0' LocalizedStrings.OI).SetStyle(5' typeof(decimal))  							.SetCell(6' 0' "UP_DOWN").SetStyle(5' typeof(bool));    						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  								.SetCell(1' index' message.ServerTime)  								.SetCell(2' index' message.TradePrice)  								.SetCell(3' index' message.TradeVolume)  								.SetCell(4' index' message.OriginSide)  								.SetCell(5' index' message.OpenInterest)  								.SetCell(6' index' message.IsUpTick);    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				case ExecutionTypes.OrderLog:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Id).SetStyle(0' typeof(string))  							.SetCell(1' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(2' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(3' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(4' 0' LocalizedStrings.Str128)  							.SetCell(5' 0' LocalizedStrings.Str722)  							.SetCell(6' 0' LocalizedStrings.Type)  							.SetCell(7' 0' LocalizedStrings.Str342)  							.SetCell(8' 0' LocalizedStrings.Str723).SetStyle(8' typeof(string))  							.SetCell(9' 0' LocalizedStrings.Str724).SetStyle(9' typeof(decimal))  							.SetCell(10' 0' LocalizedStrings.Str725).SetStyle(10' typeof(decimal));    						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.OrderId == null ? message.OrderStringId : message.OrderId.To<string>())  								.SetCell(1' index' message.ServerTime)  								.SetCell(2' index' message.OrderPrice)  								.SetCell(3' index' message.OrderVolume)  								.SetCell(4' index' message.Side)  								.SetCell(5' index' message.OrderState)  								.SetCell(6' index' message.TimeInForce)  								.SetCell(7' index' message.IsSystem);    							if (message.TradePrice != null)  							{  								worker  									.SetCell(8' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  									.SetCell(9' index' message.TradePrice)  									.SetCell(10' index' message.OpenInterest);  							}    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				case ExecutionTypes.Transaction:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(1' 0' LocalizedStrings.Portfolio)  							.SetCell(2' 0' LocalizedStrings.TransactionId)  							.SetCell(3' 0' LocalizedStrings.OrderId)  							.SetCell(4' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(5' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(6' 0' LocalizedStrings.Str1325).SetStyle(3' typeof(decimal))  							.SetCell(7' 0' LocalizedStrings.Str128)  							.SetCell(8' 0' LocalizedStrings.Str132)  							.SetCell(9' 0' LocalizedStrings.Str134)  							.SetCell(10' 0' LocalizedStrings.Str506)  							.SetCell(11' 0' LocalizedStrings.TradePrice).SetStyle(3' typeof(decimal));    						worker.SetConditionalFormatting(7' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(7' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Active)' null' Colors.Blue);  						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Done)' null' Colors.Green);  						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Failed)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.ServerTime)  								.SetCell(1' index' message.PortfolioName)  								.SetCell(2' index' message.TransactionId)  								.SetCell(3' index' message.OrderId == null ? message.OrderStringId : message.OrderId.To<string>())  								.SetCell(4' index' message.OrderPrice)  								.SetCell(5' index' message.OrderVolume)  								.SetCell(6' index' message.Balance)  								.SetCell(7' index' message.Side)  								.SetCell(8' index' message.OrderType)  								.SetCell(9' index' message.OrderState)  								.SetCell(10' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  								.SetCell(11' index' message.TradePrice)  								.SetCell(12' index' message.HasOrderInfo)  								.SetCell(13' index' message.HasTradeInfo);    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				default:  					throw new ArgumentOutOfRangeException();  			}
Magic Number,StockSharp.Algo.Export,ExcelExporter,C:\repos\stocksharp_stocksharp\Algo\Export\ExcelExporter.cs,Export,The following statement contains a magic number: switch ((ExecutionTypes)Arg)  			{  				case ExecutionTypes.Tick:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Id).SetStyle(0' typeof(string))  							.SetCell(1' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(2' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(3' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(4' 0' LocalizedStrings.Str128)  							.SetCell(5' 0' LocalizedStrings.OI).SetStyle(5' typeof(decimal))  							.SetCell(6' 0' "UP_DOWN").SetStyle(5' typeof(bool));    						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  								.SetCell(1' index' message.ServerTime)  								.SetCell(2' index' message.TradePrice)  								.SetCell(3' index' message.TradeVolume)  								.SetCell(4' index' message.OriginSide)  								.SetCell(5' index' message.OpenInterest)  								.SetCell(6' index' message.IsUpTick);    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				case ExecutionTypes.OrderLog:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Id).SetStyle(0' typeof(string))  							.SetCell(1' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(2' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(3' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(4' 0' LocalizedStrings.Str128)  							.SetCell(5' 0' LocalizedStrings.Str722)  							.SetCell(6' 0' LocalizedStrings.Type)  							.SetCell(7' 0' LocalizedStrings.Str342)  							.SetCell(8' 0' LocalizedStrings.Str723).SetStyle(8' typeof(string))  							.SetCell(9' 0' LocalizedStrings.Str724).SetStyle(9' typeof(decimal))  							.SetCell(10' 0' LocalizedStrings.Str725).SetStyle(10' typeof(decimal));    						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.OrderId == null ? message.OrderStringId : message.OrderId.To<string>())  								.SetCell(1' index' message.ServerTime)  								.SetCell(2' index' message.OrderPrice)  								.SetCell(3' index' message.OrderVolume)  								.SetCell(4' index' message.Side)  								.SetCell(5' index' message.OrderState)  								.SetCell(6' index' message.TimeInForce)  								.SetCell(7' index' message.IsSystem);    							if (message.TradePrice != null)  							{  								worker  									.SetCell(8' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  									.SetCell(9' index' message.TradePrice)  									.SetCell(10' index' message.OpenInterest);  							}    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				case ExecutionTypes.Transaction:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(1' 0' LocalizedStrings.Portfolio)  							.SetCell(2' 0' LocalizedStrings.TransactionId)  							.SetCell(3' 0' LocalizedStrings.OrderId)  							.SetCell(4' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(5' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(6' 0' LocalizedStrings.Str1325).SetStyle(3' typeof(decimal))  							.SetCell(7' 0' LocalizedStrings.Str128)  							.SetCell(8' 0' LocalizedStrings.Str132)  							.SetCell(9' 0' LocalizedStrings.Str134)  							.SetCell(10' 0' LocalizedStrings.Str506)  							.SetCell(11' 0' LocalizedStrings.TradePrice).SetStyle(3' typeof(decimal));    						worker.SetConditionalFormatting(7' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(7' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Active)' null' Colors.Blue);  						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Done)' null' Colors.Green);  						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Failed)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.ServerTime)  								.SetCell(1' index' message.PortfolioName)  								.SetCell(2' index' message.TransactionId)  								.SetCell(3' index' message.OrderId == null ? message.OrderStringId : message.OrderId.To<string>())  								.SetCell(4' index' message.OrderPrice)  								.SetCell(5' index' message.OrderVolume)  								.SetCell(6' index' message.Balance)  								.SetCell(7' index' message.Side)  								.SetCell(8' index' message.OrderType)  								.SetCell(9' index' message.OrderState)  								.SetCell(10' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  								.SetCell(11' index' message.TradePrice)  								.SetCell(12' index' message.HasOrderInfo)  								.SetCell(13' index' message.HasTradeInfo);    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				default:  					throw new ArgumentOutOfRangeException();  			}
Magic Number,StockSharp.Algo.Export,ExcelExporter,C:\repos\stocksharp_stocksharp\Algo\Export\ExcelExporter.cs,Export,The following statement contains a magic number: switch ((ExecutionTypes)Arg)  			{  				case ExecutionTypes.Tick:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Id).SetStyle(0' typeof(string))  							.SetCell(1' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(2' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(3' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(4' 0' LocalizedStrings.Str128)  							.SetCell(5' 0' LocalizedStrings.OI).SetStyle(5' typeof(decimal))  							.SetCell(6' 0' "UP_DOWN").SetStyle(5' typeof(bool));    						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  								.SetCell(1' index' message.ServerTime)  								.SetCell(2' index' message.TradePrice)  								.SetCell(3' index' message.TradeVolume)  								.SetCell(4' index' message.OriginSide)  								.SetCell(5' index' message.OpenInterest)  								.SetCell(6' index' message.IsUpTick);    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				case ExecutionTypes.OrderLog:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Id).SetStyle(0' typeof(string))  							.SetCell(1' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(2' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(3' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(4' 0' LocalizedStrings.Str128)  							.SetCell(5' 0' LocalizedStrings.Str722)  							.SetCell(6' 0' LocalizedStrings.Type)  							.SetCell(7' 0' LocalizedStrings.Str342)  							.SetCell(8' 0' LocalizedStrings.Str723).SetStyle(8' typeof(string))  							.SetCell(9' 0' LocalizedStrings.Str724).SetStyle(9' typeof(decimal))  							.SetCell(10' 0' LocalizedStrings.Str725).SetStyle(10' typeof(decimal));    						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.OrderId == null ? message.OrderStringId : message.OrderId.To<string>())  								.SetCell(1' index' message.ServerTime)  								.SetCell(2' index' message.OrderPrice)  								.SetCell(3' index' message.OrderVolume)  								.SetCell(4' index' message.Side)  								.SetCell(5' index' message.OrderState)  								.SetCell(6' index' message.TimeInForce)  								.SetCell(7' index' message.IsSystem);    							if (message.TradePrice != null)  							{  								worker  									.SetCell(8' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  									.SetCell(9' index' message.TradePrice)  									.SetCell(10' index' message.OpenInterest);  							}    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				case ExecutionTypes.Transaction:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(1' 0' LocalizedStrings.Portfolio)  							.SetCell(2' 0' LocalizedStrings.TransactionId)  							.SetCell(3' 0' LocalizedStrings.OrderId)  							.SetCell(4' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(5' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(6' 0' LocalizedStrings.Str1325).SetStyle(3' typeof(decimal))  							.SetCell(7' 0' LocalizedStrings.Str128)  							.SetCell(8' 0' LocalizedStrings.Str132)  							.SetCell(9' 0' LocalizedStrings.Str134)  							.SetCell(10' 0' LocalizedStrings.Str506)  							.SetCell(11' 0' LocalizedStrings.TradePrice).SetStyle(3' typeof(decimal));    						worker.SetConditionalFormatting(7' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(7' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Active)' null' Colors.Blue);  						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Done)' null' Colors.Green);  						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Failed)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.ServerTime)  								.SetCell(1' index' message.PortfolioName)  								.SetCell(2' index' message.TransactionId)  								.SetCell(3' index' message.OrderId == null ? message.OrderStringId : message.OrderId.To<string>())  								.SetCell(4' index' message.OrderPrice)  								.SetCell(5' index' message.OrderVolume)  								.SetCell(6' index' message.Balance)  								.SetCell(7' index' message.Side)  								.SetCell(8' index' message.OrderType)  								.SetCell(9' index' message.OrderState)  								.SetCell(10' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  								.SetCell(11' index' message.TradePrice)  								.SetCell(12' index' message.HasOrderInfo)  								.SetCell(13' index' message.HasTradeInfo);    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				default:  					throw new ArgumentOutOfRangeException();  			}
Magic Number,StockSharp.Algo.Export,ExcelExporter,C:\repos\stocksharp_stocksharp\Algo\Export\ExcelExporter.cs,Export,The following statement contains a magic number: switch ((ExecutionTypes)Arg)  			{  				case ExecutionTypes.Tick:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Id).SetStyle(0' typeof(string))  							.SetCell(1' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(2' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(3' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(4' 0' LocalizedStrings.Str128)  							.SetCell(5' 0' LocalizedStrings.OI).SetStyle(5' typeof(decimal))  							.SetCell(6' 0' "UP_DOWN").SetStyle(5' typeof(bool));    						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  								.SetCell(1' index' message.ServerTime)  								.SetCell(2' index' message.TradePrice)  								.SetCell(3' index' message.TradeVolume)  								.SetCell(4' index' message.OriginSide)  								.SetCell(5' index' message.OpenInterest)  								.SetCell(6' index' message.IsUpTick);    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				case ExecutionTypes.OrderLog:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Id).SetStyle(0' typeof(string))  							.SetCell(1' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(2' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(3' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(4' 0' LocalizedStrings.Str128)  							.SetCell(5' 0' LocalizedStrings.Str722)  							.SetCell(6' 0' LocalizedStrings.Type)  							.SetCell(7' 0' LocalizedStrings.Str342)  							.SetCell(8' 0' LocalizedStrings.Str723).SetStyle(8' typeof(string))  							.SetCell(9' 0' LocalizedStrings.Str724).SetStyle(9' typeof(decimal))  							.SetCell(10' 0' LocalizedStrings.Str725).SetStyle(10' typeof(decimal));    						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.OrderId == null ? message.OrderStringId : message.OrderId.To<string>())  								.SetCell(1' index' message.ServerTime)  								.SetCell(2' index' message.OrderPrice)  								.SetCell(3' index' message.OrderVolume)  								.SetCell(4' index' message.Side)  								.SetCell(5' index' message.OrderState)  								.SetCell(6' index' message.TimeInForce)  								.SetCell(7' index' message.IsSystem);    							if (message.TradePrice != null)  							{  								worker  									.SetCell(8' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  									.SetCell(9' index' message.TradePrice)  									.SetCell(10' index' message.OpenInterest);  							}    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				case ExecutionTypes.Transaction:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(1' 0' LocalizedStrings.Portfolio)  							.SetCell(2' 0' LocalizedStrings.TransactionId)  							.SetCell(3' 0' LocalizedStrings.OrderId)  							.SetCell(4' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(5' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(6' 0' LocalizedStrings.Str1325).SetStyle(3' typeof(decimal))  							.SetCell(7' 0' LocalizedStrings.Str128)  							.SetCell(8' 0' LocalizedStrings.Str132)  							.SetCell(9' 0' LocalizedStrings.Str134)  							.SetCell(10' 0' LocalizedStrings.Str506)  							.SetCell(11' 0' LocalizedStrings.TradePrice).SetStyle(3' typeof(decimal));    						worker.SetConditionalFormatting(7' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(7' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Active)' null' Colors.Blue);  						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Done)' null' Colors.Green);  						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Failed)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.ServerTime)  								.SetCell(1' index' message.PortfolioName)  								.SetCell(2' index' message.TransactionId)  								.SetCell(3' index' message.OrderId == null ? message.OrderStringId : message.OrderId.To<string>())  								.SetCell(4' index' message.OrderPrice)  								.SetCell(5' index' message.OrderVolume)  								.SetCell(6' index' message.Balance)  								.SetCell(7' index' message.Side)  								.SetCell(8' index' message.OrderType)  								.SetCell(9' index' message.OrderState)  								.SetCell(10' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  								.SetCell(11' index' message.TradePrice)  								.SetCell(12' index' message.HasOrderInfo)  								.SetCell(13' index' message.HasTradeInfo);    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				default:  					throw new ArgumentOutOfRangeException();  			}
Magic Number,StockSharp.Algo.Export,ExcelExporter,C:\repos\stocksharp_stocksharp\Algo\Export\ExcelExporter.cs,Export,The following statement contains a magic number: switch ((ExecutionTypes)Arg)  			{  				case ExecutionTypes.Tick:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Id).SetStyle(0' typeof(string))  							.SetCell(1' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(2' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(3' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(4' 0' LocalizedStrings.Str128)  							.SetCell(5' 0' LocalizedStrings.OI).SetStyle(5' typeof(decimal))  							.SetCell(6' 0' "UP_DOWN").SetStyle(5' typeof(bool));    						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  								.SetCell(1' index' message.ServerTime)  								.SetCell(2' index' message.TradePrice)  								.SetCell(3' index' message.TradeVolume)  								.SetCell(4' index' message.OriginSide)  								.SetCell(5' index' message.OpenInterest)  								.SetCell(6' index' message.IsUpTick);    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				case ExecutionTypes.OrderLog:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Id).SetStyle(0' typeof(string))  							.SetCell(1' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(2' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(3' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(4' 0' LocalizedStrings.Str128)  							.SetCell(5' 0' LocalizedStrings.Str722)  							.SetCell(6' 0' LocalizedStrings.Type)  							.SetCell(7' 0' LocalizedStrings.Str342)  							.SetCell(8' 0' LocalizedStrings.Str723).SetStyle(8' typeof(string))  							.SetCell(9' 0' LocalizedStrings.Str724).SetStyle(9' typeof(decimal))  							.SetCell(10' 0' LocalizedStrings.Str725).SetStyle(10' typeof(decimal));    						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.OrderId == null ? message.OrderStringId : message.OrderId.To<string>())  								.SetCell(1' index' message.ServerTime)  								.SetCell(2' index' message.OrderPrice)  								.SetCell(3' index' message.OrderVolume)  								.SetCell(4' index' message.Side)  								.SetCell(5' index' message.OrderState)  								.SetCell(6' index' message.TimeInForce)  								.SetCell(7' index' message.IsSystem);    							if (message.TradePrice != null)  							{  								worker  									.SetCell(8' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  									.SetCell(9' index' message.TradePrice)  									.SetCell(10' index' message.OpenInterest);  							}    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				case ExecutionTypes.Transaction:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(1' 0' LocalizedStrings.Portfolio)  							.SetCell(2' 0' LocalizedStrings.TransactionId)  							.SetCell(3' 0' LocalizedStrings.OrderId)  							.SetCell(4' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(5' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(6' 0' LocalizedStrings.Str1325).SetStyle(3' typeof(decimal))  							.SetCell(7' 0' LocalizedStrings.Str128)  							.SetCell(8' 0' LocalizedStrings.Str132)  							.SetCell(9' 0' LocalizedStrings.Str134)  							.SetCell(10' 0' LocalizedStrings.Str506)  							.SetCell(11' 0' LocalizedStrings.TradePrice).SetStyle(3' typeof(decimal));    						worker.SetConditionalFormatting(7' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(7' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Active)' null' Colors.Blue);  						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Done)' null' Colors.Green);  						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Failed)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.ServerTime)  								.SetCell(1' index' message.PortfolioName)  								.SetCell(2' index' message.TransactionId)  								.SetCell(3' index' message.OrderId == null ? message.OrderStringId : message.OrderId.To<string>())  								.SetCell(4' index' message.OrderPrice)  								.SetCell(5' index' message.OrderVolume)  								.SetCell(6' index' message.Balance)  								.SetCell(7' index' message.Side)  								.SetCell(8' index' message.OrderType)  								.SetCell(9' index' message.OrderState)  								.SetCell(10' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  								.SetCell(11' index' message.TradePrice)  								.SetCell(12' index' message.HasOrderInfo)  								.SetCell(13' index' message.HasTradeInfo);    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				default:  					throw new ArgumentOutOfRangeException();  			}
Magic Number,StockSharp.Algo.Export,ExcelExporter,C:\repos\stocksharp_stocksharp\Algo\Export\ExcelExporter.cs,Export,The following statement contains a magic number: switch ((ExecutionTypes)Arg)  			{  				case ExecutionTypes.Tick:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Id).SetStyle(0' typeof(string))  							.SetCell(1' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(2' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(3' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(4' 0' LocalizedStrings.Str128)  							.SetCell(5' 0' LocalizedStrings.OI).SetStyle(5' typeof(decimal))  							.SetCell(6' 0' "UP_DOWN").SetStyle(5' typeof(bool));    						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  								.SetCell(1' index' message.ServerTime)  								.SetCell(2' index' message.TradePrice)  								.SetCell(3' index' message.TradeVolume)  								.SetCell(4' index' message.OriginSide)  								.SetCell(5' index' message.OpenInterest)  								.SetCell(6' index' message.IsUpTick);    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				case ExecutionTypes.OrderLog:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Id).SetStyle(0' typeof(string))  							.SetCell(1' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(2' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(3' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(4' 0' LocalizedStrings.Str128)  							.SetCell(5' 0' LocalizedStrings.Str722)  							.SetCell(6' 0' LocalizedStrings.Type)  							.SetCell(7' 0' LocalizedStrings.Str342)  							.SetCell(8' 0' LocalizedStrings.Str723).SetStyle(8' typeof(string))  							.SetCell(9' 0' LocalizedStrings.Str724).SetStyle(9' typeof(decimal))  							.SetCell(10' 0' LocalizedStrings.Str725).SetStyle(10' typeof(decimal));    						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.OrderId == null ? message.OrderStringId : message.OrderId.To<string>())  								.SetCell(1' index' message.ServerTime)  								.SetCell(2' index' message.OrderPrice)  								.SetCell(3' index' message.OrderVolume)  								.SetCell(4' index' message.Side)  								.SetCell(5' index' message.OrderState)  								.SetCell(6' index' message.TimeInForce)  								.SetCell(7' index' message.IsSystem);    							if (message.TradePrice != null)  							{  								worker  									.SetCell(8' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  									.SetCell(9' index' message.TradePrice)  									.SetCell(10' index' message.OpenInterest);  							}    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				case ExecutionTypes.Transaction:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(1' 0' LocalizedStrings.Portfolio)  							.SetCell(2' 0' LocalizedStrings.TransactionId)  							.SetCell(3' 0' LocalizedStrings.OrderId)  							.SetCell(4' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(5' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(6' 0' LocalizedStrings.Str1325).SetStyle(3' typeof(decimal))  							.SetCell(7' 0' LocalizedStrings.Str128)  							.SetCell(8' 0' LocalizedStrings.Str132)  							.SetCell(9' 0' LocalizedStrings.Str134)  							.SetCell(10' 0' LocalizedStrings.Str506)  							.SetCell(11' 0' LocalizedStrings.TradePrice).SetStyle(3' typeof(decimal));    						worker.SetConditionalFormatting(7' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(7' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Active)' null' Colors.Blue);  						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Done)' null' Colors.Green);  						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Failed)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.ServerTime)  								.SetCell(1' index' message.PortfolioName)  								.SetCell(2' index' message.TransactionId)  								.SetCell(3' index' message.OrderId == null ? message.OrderStringId : message.OrderId.To<string>())  								.SetCell(4' index' message.OrderPrice)  								.SetCell(5' index' message.OrderVolume)  								.SetCell(6' index' message.Balance)  								.SetCell(7' index' message.Side)  								.SetCell(8' index' message.OrderType)  								.SetCell(9' index' message.OrderState)  								.SetCell(10' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  								.SetCell(11' index' message.TradePrice)  								.SetCell(12' index' message.HasOrderInfo)  								.SetCell(13' index' message.HasTradeInfo);    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				default:  					throw new ArgumentOutOfRangeException();  			}
Magic Number,StockSharp.Algo.Export,ExcelExporter,C:\repos\stocksharp_stocksharp\Algo\Export\ExcelExporter.cs,Export,The following statement contains a magic number: switch ((ExecutionTypes)Arg)  			{  				case ExecutionTypes.Tick:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Id).SetStyle(0' typeof(string))  							.SetCell(1' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(2' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(3' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(4' 0' LocalizedStrings.Str128)  							.SetCell(5' 0' LocalizedStrings.OI).SetStyle(5' typeof(decimal))  							.SetCell(6' 0' "UP_DOWN").SetStyle(5' typeof(bool));    						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  								.SetCell(1' index' message.ServerTime)  								.SetCell(2' index' message.TradePrice)  								.SetCell(3' index' message.TradeVolume)  								.SetCell(4' index' message.OriginSide)  								.SetCell(5' index' message.OpenInterest)  								.SetCell(6' index' message.IsUpTick);    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				case ExecutionTypes.OrderLog:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Id).SetStyle(0' typeof(string))  							.SetCell(1' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(2' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(3' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(4' 0' LocalizedStrings.Str128)  							.SetCell(5' 0' LocalizedStrings.Str722)  							.SetCell(6' 0' LocalizedStrings.Type)  							.SetCell(7' 0' LocalizedStrings.Str342)  							.SetCell(8' 0' LocalizedStrings.Str723).SetStyle(8' typeof(string))  							.SetCell(9' 0' LocalizedStrings.Str724).SetStyle(9' typeof(decimal))  							.SetCell(10' 0' LocalizedStrings.Str725).SetStyle(10' typeof(decimal));    						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.OrderId == null ? message.OrderStringId : message.OrderId.To<string>())  								.SetCell(1' index' message.ServerTime)  								.SetCell(2' index' message.OrderPrice)  								.SetCell(3' index' message.OrderVolume)  								.SetCell(4' index' message.Side)  								.SetCell(5' index' message.OrderState)  								.SetCell(6' index' message.TimeInForce)  								.SetCell(7' index' message.IsSystem);    							if (message.TradePrice != null)  							{  								worker  									.SetCell(8' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  									.SetCell(9' index' message.TradePrice)  									.SetCell(10' index' message.OpenInterest);  							}    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				case ExecutionTypes.Transaction:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(1' 0' LocalizedStrings.Portfolio)  							.SetCell(2' 0' LocalizedStrings.TransactionId)  							.SetCell(3' 0' LocalizedStrings.OrderId)  							.SetCell(4' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(5' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(6' 0' LocalizedStrings.Str1325).SetStyle(3' typeof(decimal))  							.SetCell(7' 0' LocalizedStrings.Str128)  							.SetCell(8' 0' LocalizedStrings.Str132)  							.SetCell(9' 0' LocalizedStrings.Str134)  							.SetCell(10' 0' LocalizedStrings.Str506)  							.SetCell(11' 0' LocalizedStrings.TradePrice).SetStyle(3' typeof(decimal));    						worker.SetConditionalFormatting(7' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(7' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Active)' null' Colors.Blue);  						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Done)' null' Colors.Green);  						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Failed)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.ServerTime)  								.SetCell(1' index' message.PortfolioName)  								.SetCell(2' index' message.TransactionId)  								.SetCell(3' index' message.OrderId == null ? message.OrderStringId : message.OrderId.To<string>())  								.SetCell(4' index' message.OrderPrice)  								.SetCell(5' index' message.OrderVolume)  								.SetCell(6' index' message.Balance)  								.SetCell(7' index' message.Side)  								.SetCell(8' index' message.OrderType)  								.SetCell(9' index' message.OrderState)  								.SetCell(10' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  								.SetCell(11' index' message.TradePrice)  								.SetCell(12' index' message.HasOrderInfo)  								.SetCell(13' index' message.HasTradeInfo);    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				default:  					throw new ArgumentOutOfRangeException();  			}
Magic Number,StockSharp.Algo.Export,ExcelExporter,C:\repos\stocksharp_stocksharp\Algo\Export\ExcelExporter.cs,Export,The following statement contains a magic number: switch ((ExecutionTypes)Arg)  			{  				case ExecutionTypes.Tick:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Id).SetStyle(0' typeof(string))  							.SetCell(1' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(2' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(3' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(4' 0' LocalizedStrings.Str128)  							.SetCell(5' 0' LocalizedStrings.OI).SetStyle(5' typeof(decimal))  							.SetCell(6' 0' "UP_DOWN").SetStyle(5' typeof(bool));    						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  								.SetCell(1' index' message.ServerTime)  								.SetCell(2' index' message.TradePrice)  								.SetCell(3' index' message.TradeVolume)  								.SetCell(4' index' message.OriginSide)  								.SetCell(5' index' message.OpenInterest)  								.SetCell(6' index' message.IsUpTick);    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				case ExecutionTypes.OrderLog:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Id).SetStyle(0' typeof(string))  							.SetCell(1' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(2' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(3' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(4' 0' LocalizedStrings.Str128)  							.SetCell(5' 0' LocalizedStrings.Str722)  							.SetCell(6' 0' LocalizedStrings.Type)  							.SetCell(7' 0' LocalizedStrings.Str342)  							.SetCell(8' 0' LocalizedStrings.Str723).SetStyle(8' typeof(string))  							.SetCell(9' 0' LocalizedStrings.Str724).SetStyle(9' typeof(decimal))  							.SetCell(10' 0' LocalizedStrings.Str725).SetStyle(10' typeof(decimal));    						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.OrderId == null ? message.OrderStringId : message.OrderId.To<string>())  								.SetCell(1' index' message.ServerTime)  								.SetCell(2' index' message.OrderPrice)  								.SetCell(3' index' message.OrderVolume)  								.SetCell(4' index' message.Side)  								.SetCell(5' index' message.OrderState)  								.SetCell(6' index' message.TimeInForce)  								.SetCell(7' index' message.IsSystem);    							if (message.TradePrice != null)  							{  								worker  									.SetCell(8' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  									.SetCell(9' index' message.TradePrice)  									.SetCell(10' index' message.OpenInterest);  							}    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				case ExecutionTypes.Transaction:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(1' 0' LocalizedStrings.Portfolio)  							.SetCell(2' 0' LocalizedStrings.TransactionId)  							.SetCell(3' 0' LocalizedStrings.OrderId)  							.SetCell(4' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(5' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(6' 0' LocalizedStrings.Str1325).SetStyle(3' typeof(decimal))  							.SetCell(7' 0' LocalizedStrings.Str128)  							.SetCell(8' 0' LocalizedStrings.Str132)  							.SetCell(9' 0' LocalizedStrings.Str134)  							.SetCell(10' 0' LocalizedStrings.Str506)  							.SetCell(11' 0' LocalizedStrings.TradePrice).SetStyle(3' typeof(decimal));    						worker.SetConditionalFormatting(7' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(7' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Active)' null' Colors.Blue);  						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Done)' null' Colors.Green);  						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Failed)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.ServerTime)  								.SetCell(1' index' message.PortfolioName)  								.SetCell(2' index' message.TransactionId)  								.SetCell(3' index' message.OrderId == null ? message.OrderStringId : message.OrderId.To<string>())  								.SetCell(4' index' message.OrderPrice)  								.SetCell(5' index' message.OrderVolume)  								.SetCell(6' index' message.Balance)  								.SetCell(7' index' message.Side)  								.SetCell(8' index' message.OrderType)  								.SetCell(9' index' message.OrderState)  								.SetCell(10' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  								.SetCell(11' index' message.TradePrice)  								.SetCell(12' index' message.HasOrderInfo)  								.SetCell(13' index' message.HasTradeInfo);    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				default:  					throw new ArgumentOutOfRangeException();  			}
Magic Number,StockSharp.Algo.Export,ExcelExporter,C:\repos\stocksharp_stocksharp\Algo\Export\ExcelExporter.cs,Export,The following statement contains a magic number: switch ((ExecutionTypes)Arg)  			{  				case ExecutionTypes.Tick:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Id).SetStyle(0' typeof(string))  							.SetCell(1' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(2' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(3' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(4' 0' LocalizedStrings.Str128)  							.SetCell(5' 0' LocalizedStrings.OI).SetStyle(5' typeof(decimal))  							.SetCell(6' 0' "UP_DOWN").SetStyle(5' typeof(bool));    						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  								.SetCell(1' index' message.ServerTime)  								.SetCell(2' index' message.TradePrice)  								.SetCell(3' index' message.TradeVolume)  								.SetCell(4' index' message.OriginSide)  								.SetCell(5' index' message.OpenInterest)  								.SetCell(6' index' message.IsUpTick);    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				case ExecutionTypes.OrderLog:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Id).SetStyle(0' typeof(string))  							.SetCell(1' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(2' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(3' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(4' 0' LocalizedStrings.Str128)  							.SetCell(5' 0' LocalizedStrings.Str722)  							.SetCell(6' 0' LocalizedStrings.Type)  							.SetCell(7' 0' LocalizedStrings.Str342)  							.SetCell(8' 0' LocalizedStrings.Str723).SetStyle(8' typeof(string))  							.SetCell(9' 0' LocalizedStrings.Str724).SetStyle(9' typeof(decimal))  							.SetCell(10' 0' LocalizedStrings.Str725).SetStyle(10' typeof(decimal));    						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.OrderId == null ? message.OrderStringId : message.OrderId.To<string>())  								.SetCell(1' index' message.ServerTime)  								.SetCell(2' index' message.OrderPrice)  								.SetCell(3' index' message.OrderVolume)  								.SetCell(4' index' message.Side)  								.SetCell(5' index' message.OrderState)  								.SetCell(6' index' message.TimeInForce)  								.SetCell(7' index' message.IsSystem);    							if (message.TradePrice != null)  							{  								worker  									.SetCell(8' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  									.SetCell(9' index' message.TradePrice)  									.SetCell(10' index' message.OpenInterest);  							}    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				case ExecutionTypes.Transaction:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(1' 0' LocalizedStrings.Portfolio)  							.SetCell(2' 0' LocalizedStrings.TransactionId)  							.SetCell(3' 0' LocalizedStrings.OrderId)  							.SetCell(4' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(5' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(6' 0' LocalizedStrings.Str1325).SetStyle(3' typeof(decimal))  							.SetCell(7' 0' LocalizedStrings.Str128)  							.SetCell(8' 0' LocalizedStrings.Str132)  							.SetCell(9' 0' LocalizedStrings.Str134)  							.SetCell(10' 0' LocalizedStrings.Str506)  							.SetCell(11' 0' LocalizedStrings.TradePrice).SetStyle(3' typeof(decimal));    						worker.SetConditionalFormatting(7' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(7' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Active)' null' Colors.Blue);  						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Done)' null' Colors.Green);  						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Failed)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.ServerTime)  								.SetCell(1' index' message.PortfolioName)  								.SetCell(2' index' message.TransactionId)  								.SetCell(3' index' message.OrderId == null ? message.OrderStringId : message.OrderId.To<string>())  								.SetCell(4' index' message.OrderPrice)  								.SetCell(5' index' message.OrderVolume)  								.SetCell(6' index' message.Balance)  								.SetCell(7' index' message.Side)  								.SetCell(8' index' message.OrderType)  								.SetCell(9' index' message.OrderState)  								.SetCell(10' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  								.SetCell(11' index' message.TradePrice)  								.SetCell(12' index' message.HasOrderInfo)  								.SetCell(13' index' message.HasTradeInfo);    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				default:  					throw new ArgumentOutOfRangeException();  			}
Magic Number,StockSharp.Algo.Export,ExcelExporter,C:\repos\stocksharp_stocksharp\Algo\Export\ExcelExporter.cs,Export,The following statement contains a magic number: switch ((ExecutionTypes)Arg)  			{  				case ExecutionTypes.Tick:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Id).SetStyle(0' typeof(string))  							.SetCell(1' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(2' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(3' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(4' 0' LocalizedStrings.Str128)  							.SetCell(5' 0' LocalizedStrings.OI).SetStyle(5' typeof(decimal))  							.SetCell(6' 0' "UP_DOWN").SetStyle(5' typeof(bool));    						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  								.SetCell(1' index' message.ServerTime)  								.SetCell(2' index' message.TradePrice)  								.SetCell(3' index' message.TradeVolume)  								.SetCell(4' index' message.OriginSide)  								.SetCell(5' index' message.OpenInterest)  								.SetCell(6' index' message.IsUpTick);    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				case ExecutionTypes.OrderLog:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Id).SetStyle(0' typeof(string))  							.SetCell(1' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(2' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(3' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(4' 0' LocalizedStrings.Str128)  							.SetCell(5' 0' LocalizedStrings.Str722)  							.SetCell(6' 0' LocalizedStrings.Type)  							.SetCell(7' 0' LocalizedStrings.Str342)  							.SetCell(8' 0' LocalizedStrings.Str723).SetStyle(8' typeof(string))  							.SetCell(9' 0' LocalizedStrings.Str724).SetStyle(9' typeof(decimal))  							.SetCell(10' 0' LocalizedStrings.Str725).SetStyle(10' typeof(decimal));    						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.OrderId == null ? message.OrderStringId : message.OrderId.To<string>())  								.SetCell(1' index' message.ServerTime)  								.SetCell(2' index' message.OrderPrice)  								.SetCell(3' index' message.OrderVolume)  								.SetCell(4' index' message.Side)  								.SetCell(5' index' message.OrderState)  								.SetCell(6' index' message.TimeInForce)  								.SetCell(7' index' message.IsSystem);    							if (message.TradePrice != null)  							{  								worker  									.SetCell(8' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  									.SetCell(9' index' message.TradePrice)  									.SetCell(10' index' message.OpenInterest);  							}    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				case ExecutionTypes.Transaction:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(1' 0' LocalizedStrings.Portfolio)  							.SetCell(2' 0' LocalizedStrings.TransactionId)  							.SetCell(3' 0' LocalizedStrings.OrderId)  							.SetCell(4' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(5' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(6' 0' LocalizedStrings.Str1325).SetStyle(3' typeof(decimal))  							.SetCell(7' 0' LocalizedStrings.Str128)  							.SetCell(8' 0' LocalizedStrings.Str132)  							.SetCell(9' 0' LocalizedStrings.Str134)  							.SetCell(10' 0' LocalizedStrings.Str506)  							.SetCell(11' 0' LocalizedStrings.TradePrice).SetStyle(3' typeof(decimal));    						worker.SetConditionalFormatting(7' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(7' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Active)' null' Colors.Blue);  						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Done)' null' Colors.Green);  						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Failed)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.ServerTime)  								.SetCell(1' index' message.PortfolioName)  								.SetCell(2' index' message.TransactionId)  								.SetCell(3' index' message.OrderId == null ? message.OrderStringId : message.OrderId.To<string>())  								.SetCell(4' index' message.OrderPrice)  								.SetCell(5' index' message.OrderVolume)  								.SetCell(6' index' message.Balance)  								.SetCell(7' index' message.Side)  								.SetCell(8' index' message.OrderType)  								.SetCell(9' index' message.OrderState)  								.SetCell(10' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  								.SetCell(11' index' message.TradePrice)  								.SetCell(12' index' message.HasOrderInfo)  								.SetCell(13' index' message.HasTradeInfo);    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				default:  					throw new ArgumentOutOfRangeException();  			}
Magic Number,StockSharp.Algo.Export,ExcelExporter,C:\repos\stocksharp_stocksharp\Algo\Export\ExcelExporter.cs,Export,The following statement contains a magic number: switch ((ExecutionTypes)Arg)  			{  				case ExecutionTypes.Tick:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Id).SetStyle(0' typeof(string))  							.SetCell(1' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(2' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(3' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(4' 0' LocalizedStrings.Str128)  							.SetCell(5' 0' LocalizedStrings.OI).SetStyle(5' typeof(decimal))  							.SetCell(6' 0' "UP_DOWN").SetStyle(5' typeof(bool));    						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  								.SetCell(1' index' message.ServerTime)  								.SetCell(2' index' message.TradePrice)  								.SetCell(3' index' message.TradeVolume)  								.SetCell(4' index' message.OriginSide)  								.SetCell(5' index' message.OpenInterest)  								.SetCell(6' index' message.IsUpTick);    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				case ExecutionTypes.OrderLog:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Id).SetStyle(0' typeof(string))  							.SetCell(1' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(2' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(3' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(4' 0' LocalizedStrings.Str128)  							.SetCell(5' 0' LocalizedStrings.Str722)  							.SetCell(6' 0' LocalizedStrings.Type)  							.SetCell(7' 0' LocalizedStrings.Str342)  							.SetCell(8' 0' LocalizedStrings.Str723).SetStyle(8' typeof(string))  							.SetCell(9' 0' LocalizedStrings.Str724).SetStyle(9' typeof(decimal))  							.SetCell(10' 0' LocalizedStrings.Str725).SetStyle(10' typeof(decimal));    						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.OrderId == null ? message.OrderStringId : message.OrderId.To<string>())  								.SetCell(1' index' message.ServerTime)  								.SetCell(2' index' message.OrderPrice)  								.SetCell(3' index' message.OrderVolume)  								.SetCell(4' index' message.Side)  								.SetCell(5' index' message.OrderState)  								.SetCell(6' index' message.TimeInForce)  								.SetCell(7' index' message.IsSystem);    							if (message.TradePrice != null)  							{  								worker  									.SetCell(8' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  									.SetCell(9' index' message.TradePrice)  									.SetCell(10' index' message.OpenInterest);  							}    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				case ExecutionTypes.Transaction:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(1' 0' LocalizedStrings.Portfolio)  							.SetCell(2' 0' LocalizedStrings.TransactionId)  							.SetCell(3' 0' LocalizedStrings.OrderId)  							.SetCell(4' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(5' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(6' 0' LocalizedStrings.Str1325).SetStyle(3' typeof(decimal))  							.SetCell(7' 0' LocalizedStrings.Str128)  							.SetCell(8' 0' LocalizedStrings.Str132)  							.SetCell(9' 0' LocalizedStrings.Str134)  							.SetCell(10' 0' LocalizedStrings.Str506)  							.SetCell(11' 0' LocalizedStrings.TradePrice).SetStyle(3' typeof(decimal));    						worker.SetConditionalFormatting(7' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(7' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Active)' null' Colors.Blue);  						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Done)' null' Colors.Green);  						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Failed)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.ServerTime)  								.SetCell(1' index' message.PortfolioName)  								.SetCell(2' index' message.TransactionId)  								.SetCell(3' index' message.OrderId == null ? message.OrderStringId : message.OrderId.To<string>())  								.SetCell(4' index' message.OrderPrice)  								.SetCell(5' index' message.OrderVolume)  								.SetCell(6' index' message.Balance)  								.SetCell(7' index' message.Side)  								.SetCell(8' index' message.OrderType)  								.SetCell(9' index' message.OrderState)  								.SetCell(10' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  								.SetCell(11' index' message.TradePrice)  								.SetCell(12' index' message.HasOrderInfo)  								.SetCell(13' index' message.HasTradeInfo);    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				default:  					throw new ArgumentOutOfRangeException();  			}
Magic Number,StockSharp.Algo.Export,ExcelExporter,C:\repos\stocksharp_stocksharp\Algo\Export\ExcelExporter.cs,Export,The following statement contains a magic number: switch ((ExecutionTypes)Arg)  			{  				case ExecutionTypes.Tick:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Id).SetStyle(0' typeof(string))  							.SetCell(1' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(2' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(3' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(4' 0' LocalizedStrings.Str128)  							.SetCell(5' 0' LocalizedStrings.OI).SetStyle(5' typeof(decimal))  							.SetCell(6' 0' "UP_DOWN").SetStyle(5' typeof(bool));    						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  								.SetCell(1' index' message.ServerTime)  								.SetCell(2' index' message.TradePrice)  								.SetCell(3' index' message.TradeVolume)  								.SetCell(4' index' message.OriginSide)  								.SetCell(5' index' message.OpenInterest)  								.SetCell(6' index' message.IsUpTick);    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				case ExecutionTypes.OrderLog:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Id).SetStyle(0' typeof(string))  							.SetCell(1' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(2' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(3' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(4' 0' LocalizedStrings.Str128)  							.SetCell(5' 0' LocalizedStrings.Str722)  							.SetCell(6' 0' LocalizedStrings.Type)  							.SetCell(7' 0' LocalizedStrings.Str342)  							.SetCell(8' 0' LocalizedStrings.Str723).SetStyle(8' typeof(string))  							.SetCell(9' 0' LocalizedStrings.Str724).SetStyle(9' typeof(decimal))  							.SetCell(10' 0' LocalizedStrings.Str725).SetStyle(10' typeof(decimal));    						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.OrderId == null ? message.OrderStringId : message.OrderId.To<string>())  								.SetCell(1' index' message.ServerTime)  								.SetCell(2' index' message.OrderPrice)  								.SetCell(3' index' message.OrderVolume)  								.SetCell(4' index' message.Side)  								.SetCell(5' index' message.OrderState)  								.SetCell(6' index' message.TimeInForce)  								.SetCell(7' index' message.IsSystem);    							if (message.TradePrice != null)  							{  								worker  									.SetCell(8' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  									.SetCell(9' index' message.TradePrice)  									.SetCell(10' index' message.OpenInterest);  							}    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				case ExecutionTypes.Transaction:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(1' 0' LocalizedStrings.Portfolio)  							.SetCell(2' 0' LocalizedStrings.TransactionId)  							.SetCell(3' 0' LocalizedStrings.OrderId)  							.SetCell(4' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(5' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(6' 0' LocalizedStrings.Str1325).SetStyle(3' typeof(decimal))  							.SetCell(7' 0' LocalizedStrings.Str128)  							.SetCell(8' 0' LocalizedStrings.Str132)  							.SetCell(9' 0' LocalizedStrings.Str134)  							.SetCell(10' 0' LocalizedStrings.Str506)  							.SetCell(11' 0' LocalizedStrings.TradePrice).SetStyle(3' typeof(decimal));    						worker.SetConditionalFormatting(7' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(7' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Active)' null' Colors.Blue);  						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Done)' null' Colors.Green);  						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Failed)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.ServerTime)  								.SetCell(1' index' message.PortfolioName)  								.SetCell(2' index' message.TransactionId)  								.SetCell(3' index' message.OrderId == null ? message.OrderStringId : message.OrderId.To<string>())  								.SetCell(4' index' message.OrderPrice)  								.SetCell(5' index' message.OrderVolume)  								.SetCell(6' index' message.Balance)  								.SetCell(7' index' message.Side)  								.SetCell(8' index' message.OrderType)  								.SetCell(9' index' message.OrderState)  								.SetCell(10' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  								.SetCell(11' index' message.TradePrice)  								.SetCell(12' index' message.HasOrderInfo)  								.SetCell(13' index' message.HasTradeInfo);    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				default:  					throw new ArgumentOutOfRangeException();  			}
Magic Number,StockSharp.Algo.Export,ExcelExporter,C:\repos\stocksharp_stocksharp\Algo\Export\ExcelExporter.cs,Export,The following statement contains a magic number: switch ((ExecutionTypes)Arg)  			{  				case ExecutionTypes.Tick:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Id).SetStyle(0' typeof(string))  							.SetCell(1' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(2' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(3' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(4' 0' LocalizedStrings.Str128)  							.SetCell(5' 0' LocalizedStrings.OI).SetStyle(5' typeof(decimal))  							.SetCell(6' 0' "UP_DOWN").SetStyle(5' typeof(bool));    						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  								.SetCell(1' index' message.ServerTime)  								.SetCell(2' index' message.TradePrice)  								.SetCell(3' index' message.TradeVolume)  								.SetCell(4' index' message.OriginSide)  								.SetCell(5' index' message.OpenInterest)  								.SetCell(6' index' message.IsUpTick);    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				case ExecutionTypes.OrderLog:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Id).SetStyle(0' typeof(string))  							.SetCell(1' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(2' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(3' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(4' 0' LocalizedStrings.Str128)  							.SetCell(5' 0' LocalizedStrings.Str722)  							.SetCell(6' 0' LocalizedStrings.Type)  							.SetCell(7' 0' LocalizedStrings.Str342)  							.SetCell(8' 0' LocalizedStrings.Str723).SetStyle(8' typeof(string))  							.SetCell(9' 0' LocalizedStrings.Str724).SetStyle(9' typeof(decimal))  							.SetCell(10' 0' LocalizedStrings.Str725).SetStyle(10' typeof(decimal));    						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.OrderId == null ? message.OrderStringId : message.OrderId.To<string>())  								.SetCell(1' index' message.ServerTime)  								.SetCell(2' index' message.OrderPrice)  								.SetCell(3' index' message.OrderVolume)  								.SetCell(4' index' message.Side)  								.SetCell(5' index' message.OrderState)  								.SetCell(6' index' message.TimeInForce)  								.SetCell(7' index' message.IsSystem);    							if (message.TradePrice != null)  							{  								worker  									.SetCell(8' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  									.SetCell(9' index' message.TradePrice)  									.SetCell(10' index' message.OpenInterest);  							}    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				case ExecutionTypes.Transaction:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(1' 0' LocalizedStrings.Portfolio)  							.SetCell(2' 0' LocalizedStrings.TransactionId)  							.SetCell(3' 0' LocalizedStrings.OrderId)  							.SetCell(4' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(5' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(6' 0' LocalizedStrings.Str1325).SetStyle(3' typeof(decimal))  							.SetCell(7' 0' LocalizedStrings.Str128)  							.SetCell(8' 0' LocalizedStrings.Str132)  							.SetCell(9' 0' LocalizedStrings.Str134)  							.SetCell(10' 0' LocalizedStrings.Str506)  							.SetCell(11' 0' LocalizedStrings.TradePrice).SetStyle(3' typeof(decimal));    						worker.SetConditionalFormatting(7' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(7' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Active)' null' Colors.Blue);  						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Done)' null' Colors.Green);  						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Failed)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.ServerTime)  								.SetCell(1' index' message.PortfolioName)  								.SetCell(2' index' message.TransactionId)  								.SetCell(3' index' message.OrderId == null ? message.OrderStringId : message.OrderId.To<string>())  								.SetCell(4' index' message.OrderPrice)  								.SetCell(5' index' message.OrderVolume)  								.SetCell(6' index' message.Balance)  								.SetCell(7' index' message.Side)  								.SetCell(8' index' message.OrderType)  								.SetCell(9' index' message.OrderState)  								.SetCell(10' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  								.SetCell(11' index' message.TradePrice)  								.SetCell(12' index' message.HasOrderInfo)  								.SetCell(13' index' message.HasTradeInfo);    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				default:  					throw new ArgumentOutOfRangeException();  			}
Magic Number,StockSharp.Algo.Export,ExcelExporter,C:\repos\stocksharp_stocksharp\Algo\Export\ExcelExporter.cs,Export,The following statement contains a magic number: switch ((ExecutionTypes)Arg)  			{  				case ExecutionTypes.Tick:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Id).SetStyle(0' typeof(string))  							.SetCell(1' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(2' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(3' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(4' 0' LocalizedStrings.Str128)  							.SetCell(5' 0' LocalizedStrings.OI).SetStyle(5' typeof(decimal))  							.SetCell(6' 0' "UP_DOWN").SetStyle(5' typeof(bool));    						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  								.SetCell(1' index' message.ServerTime)  								.SetCell(2' index' message.TradePrice)  								.SetCell(3' index' message.TradeVolume)  								.SetCell(4' index' message.OriginSide)  								.SetCell(5' index' message.OpenInterest)  								.SetCell(6' index' message.IsUpTick);    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				case ExecutionTypes.OrderLog:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Id).SetStyle(0' typeof(string))  							.SetCell(1' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(2' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(3' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(4' 0' LocalizedStrings.Str128)  							.SetCell(5' 0' LocalizedStrings.Str722)  							.SetCell(6' 0' LocalizedStrings.Type)  							.SetCell(7' 0' LocalizedStrings.Str342)  							.SetCell(8' 0' LocalizedStrings.Str723).SetStyle(8' typeof(string))  							.SetCell(9' 0' LocalizedStrings.Str724).SetStyle(9' typeof(decimal))  							.SetCell(10' 0' LocalizedStrings.Str725).SetStyle(10' typeof(decimal));    						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.OrderId == null ? message.OrderStringId : message.OrderId.To<string>())  								.SetCell(1' index' message.ServerTime)  								.SetCell(2' index' message.OrderPrice)  								.SetCell(3' index' message.OrderVolume)  								.SetCell(4' index' message.Side)  								.SetCell(5' index' message.OrderState)  								.SetCell(6' index' message.TimeInForce)  								.SetCell(7' index' message.IsSystem);    							if (message.TradePrice != null)  							{  								worker  									.SetCell(8' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  									.SetCell(9' index' message.TradePrice)  									.SetCell(10' index' message.OpenInterest);  							}    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				case ExecutionTypes.Transaction:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(1' 0' LocalizedStrings.Portfolio)  							.SetCell(2' 0' LocalizedStrings.TransactionId)  							.SetCell(3' 0' LocalizedStrings.OrderId)  							.SetCell(4' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(5' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(6' 0' LocalizedStrings.Str1325).SetStyle(3' typeof(decimal))  							.SetCell(7' 0' LocalizedStrings.Str128)  							.SetCell(8' 0' LocalizedStrings.Str132)  							.SetCell(9' 0' LocalizedStrings.Str134)  							.SetCell(10' 0' LocalizedStrings.Str506)  							.SetCell(11' 0' LocalizedStrings.TradePrice).SetStyle(3' typeof(decimal));    						worker.SetConditionalFormatting(7' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(7' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Active)' null' Colors.Blue);  						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Done)' null' Colors.Green);  						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Failed)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.ServerTime)  								.SetCell(1' index' message.PortfolioName)  								.SetCell(2' index' message.TransactionId)  								.SetCell(3' index' message.OrderId == null ? message.OrderStringId : message.OrderId.To<string>())  								.SetCell(4' index' message.OrderPrice)  								.SetCell(5' index' message.OrderVolume)  								.SetCell(6' index' message.Balance)  								.SetCell(7' index' message.Side)  								.SetCell(8' index' message.OrderType)  								.SetCell(9' index' message.OrderState)  								.SetCell(10' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  								.SetCell(11' index' message.TradePrice)  								.SetCell(12' index' message.HasOrderInfo)  								.SetCell(13' index' message.HasTradeInfo);    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				default:  					throw new ArgumentOutOfRangeException();  			}
Magic Number,StockSharp.Algo.Export,ExcelExporter,C:\repos\stocksharp_stocksharp\Algo\Export\ExcelExporter.cs,Export,The following statement contains a magic number: switch ((ExecutionTypes)Arg)  			{  				case ExecutionTypes.Tick:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Id).SetStyle(0' typeof(string))  							.SetCell(1' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(2' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(3' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(4' 0' LocalizedStrings.Str128)  							.SetCell(5' 0' LocalizedStrings.OI).SetStyle(5' typeof(decimal))  							.SetCell(6' 0' "UP_DOWN").SetStyle(5' typeof(bool));    						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  								.SetCell(1' index' message.ServerTime)  								.SetCell(2' index' message.TradePrice)  								.SetCell(3' index' message.TradeVolume)  								.SetCell(4' index' message.OriginSide)  								.SetCell(5' index' message.OpenInterest)  								.SetCell(6' index' message.IsUpTick);    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				case ExecutionTypes.OrderLog:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Id).SetStyle(0' typeof(string))  							.SetCell(1' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(2' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(3' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(4' 0' LocalizedStrings.Str128)  							.SetCell(5' 0' LocalizedStrings.Str722)  							.SetCell(6' 0' LocalizedStrings.Type)  							.SetCell(7' 0' LocalizedStrings.Str342)  							.SetCell(8' 0' LocalizedStrings.Str723).SetStyle(8' typeof(string))  							.SetCell(9' 0' LocalizedStrings.Str724).SetStyle(9' typeof(decimal))  							.SetCell(10' 0' LocalizedStrings.Str725).SetStyle(10' typeof(decimal));    						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.OrderId == null ? message.OrderStringId : message.OrderId.To<string>())  								.SetCell(1' index' message.ServerTime)  								.SetCell(2' index' message.OrderPrice)  								.SetCell(3' index' message.OrderVolume)  								.SetCell(4' index' message.Side)  								.SetCell(5' index' message.OrderState)  								.SetCell(6' index' message.TimeInForce)  								.SetCell(7' index' message.IsSystem);    							if (message.TradePrice != null)  							{  								worker  									.SetCell(8' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  									.SetCell(9' index' message.TradePrice)  									.SetCell(10' index' message.OpenInterest);  							}    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				case ExecutionTypes.Transaction:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(1' 0' LocalizedStrings.Portfolio)  							.SetCell(2' 0' LocalizedStrings.TransactionId)  							.SetCell(3' 0' LocalizedStrings.OrderId)  							.SetCell(4' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(5' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(6' 0' LocalizedStrings.Str1325).SetStyle(3' typeof(decimal))  							.SetCell(7' 0' LocalizedStrings.Str128)  							.SetCell(8' 0' LocalizedStrings.Str132)  							.SetCell(9' 0' LocalizedStrings.Str134)  							.SetCell(10' 0' LocalizedStrings.Str506)  							.SetCell(11' 0' LocalizedStrings.TradePrice).SetStyle(3' typeof(decimal));    						worker.SetConditionalFormatting(7' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(7' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Active)' null' Colors.Blue);  						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Done)' null' Colors.Green);  						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Failed)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.ServerTime)  								.SetCell(1' index' message.PortfolioName)  								.SetCell(2' index' message.TransactionId)  								.SetCell(3' index' message.OrderId == null ? message.OrderStringId : message.OrderId.To<string>())  								.SetCell(4' index' message.OrderPrice)  								.SetCell(5' index' message.OrderVolume)  								.SetCell(6' index' message.Balance)  								.SetCell(7' index' message.Side)  								.SetCell(8' index' message.OrderType)  								.SetCell(9' index' message.OrderState)  								.SetCell(10' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  								.SetCell(11' index' message.TradePrice)  								.SetCell(12' index' message.HasOrderInfo)  								.SetCell(13' index' message.HasTradeInfo);    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				default:  					throw new ArgumentOutOfRangeException();  			}
Magic Number,StockSharp.Algo.Export,ExcelExporter,C:\repos\stocksharp_stocksharp\Algo\Export\ExcelExporter.cs,Export,The following statement contains a magic number: switch ((ExecutionTypes)Arg)  			{  				case ExecutionTypes.Tick:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Id).SetStyle(0' typeof(string))  							.SetCell(1' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(2' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(3' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(4' 0' LocalizedStrings.Str128)  							.SetCell(5' 0' LocalizedStrings.OI).SetStyle(5' typeof(decimal))  							.SetCell(6' 0' "UP_DOWN").SetStyle(5' typeof(bool));    						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  								.SetCell(1' index' message.ServerTime)  								.SetCell(2' index' message.TradePrice)  								.SetCell(3' index' message.TradeVolume)  								.SetCell(4' index' message.OriginSide)  								.SetCell(5' index' message.OpenInterest)  								.SetCell(6' index' message.IsUpTick);    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				case ExecutionTypes.OrderLog:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Id).SetStyle(0' typeof(string))  							.SetCell(1' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(2' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(3' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(4' 0' LocalizedStrings.Str128)  							.SetCell(5' 0' LocalizedStrings.Str722)  							.SetCell(6' 0' LocalizedStrings.Type)  							.SetCell(7' 0' LocalizedStrings.Str342)  							.SetCell(8' 0' LocalizedStrings.Str723).SetStyle(8' typeof(string))  							.SetCell(9' 0' LocalizedStrings.Str724).SetStyle(9' typeof(decimal))  							.SetCell(10' 0' LocalizedStrings.Str725).SetStyle(10' typeof(decimal));    						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(4' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.OrderId == null ? message.OrderStringId : message.OrderId.To<string>())  								.SetCell(1' index' message.ServerTime)  								.SetCell(2' index' message.OrderPrice)  								.SetCell(3' index' message.OrderVolume)  								.SetCell(4' index' message.Side)  								.SetCell(5' index' message.OrderState)  								.SetCell(6' index' message.TimeInForce)  								.SetCell(7' index' message.IsSystem);    							if (message.TradePrice != null)  							{  								worker  									.SetCell(8' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  									.SetCell(9' index' message.TradePrice)  									.SetCell(10' index' message.OpenInterest);  							}    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				case ExecutionTypes.Transaction:  				{  					Do(worker =>  					{  						worker  							.SetCell(0' 0' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff zzz")  							.SetCell(1' 0' LocalizedStrings.Portfolio)  							.SetCell(2' 0' LocalizedStrings.TransactionId)  							.SetCell(3' 0' LocalizedStrings.OrderId)  							.SetCell(4' 0' LocalizedStrings.Price).SetStyle(2' typeof(decimal))  							.SetCell(5' 0' LocalizedStrings.Volume).SetStyle(3' typeof(decimal))  							.SetCell(6' 0' LocalizedStrings.Str1325).SetStyle(3' typeof(decimal))  							.SetCell(7' 0' LocalizedStrings.Str128)  							.SetCell(8' 0' LocalizedStrings.Str132)  							.SetCell(9' 0' LocalizedStrings.Str134)  							.SetCell(10' 0' LocalizedStrings.Str506)  							.SetCell(11' 0' LocalizedStrings.TradePrice).SetStyle(3' typeof(decimal));    						worker.SetConditionalFormatting(7' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Buy)' null' Colors.Green);  						worker.SetConditionalFormatting(7' ComparisonOperator.Equal' "\"{0}\"".Put(Sides.Sell)' null' Colors.Red);    						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Active)' null' Colors.Blue);  						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Done)' null' Colors.Green);  						worker.SetConditionalFormatting(9' ComparisonOperator.Equal' "\"{0}\"".Put(OrderStates.Failed)' null' Colors.Red);    						var index = 1;    						foreach (var message in messages)  						{  							worker  								.SetCell(0' index' message.ServerTime)  								.SetCell(1' index' message.PortfolioName)  								.SetCell(2' index' message.TransactionId)  								.SetCell(3' index' message.OrderId == null ? message.OrderStringId : message.OrderId.To<string>())  								.SetCell(4' index' message.OrderPrice)  								.SetCell(5' index' message.OrderVolume)  								.SetCell(6' index' message.Balance)  								.SetCell(7' index' message.Side)  								.SetCell(8' index' message.OrderType)  								.SetCell(9' index' message.OrderState)  								.SetCell(10' index' message.TradeId == null ? message.TradeStringId : message.TradeId.To<string>())  								.SetCell(11' index' message.TradePrice)  								.SetCell(12' index' message.HasOrderInfo)  								.SetCell(13' index' message.HasTradeInfo);    							index++;    							if (!Check(index))  								break;  						}  					});    					break;  				}  				default:  					throw new ArgumentOutOfRangeException();  			}
Magic Number,StockSharp.Algo.Export,ExcelExporter,C:\repos\stocksharp_stocksharp\Algo\Export\ExcelExporter.cs,Export,The following statement contains a magic number: Do(worker =>  			{  				var rowIndex = 0;    				foreach (var message in messages)  				{  					worker  						.SetCell(0' rowIndex' LocalizedStrings.Time)  						.SetCell(1' rowIndex' message.ServerTime);    					var columnIndex = 0;    					foreach (var quote in message.Bids.Concat(message.Asks).OrderByDescending(q => q.Price))  					{  						worker  							.SetCell(columnIndex' rowIndex + (quote.Side == Sides.Buy ? 1 : 3)' quote.Price)  							.SetCell(columnIndex' rowIndex + 2' quote.Volume);    						columnIndex++;  					}    					rowIndex += 4;    					if (!Check(rowIndex))  						break;  				}  			});
Magic Number,StockSharp.Algo.Export,ExcelExporter,C:\repos\stocksharp_stocksharp\Algo\Export\ExcelExporter.cs,Export,The following statement contains a magic number: Do(worker =>  			{  				var rowIndex = 0;    				foreach (var message in messages)  				{  					worker  						.SetCell(0' rowIndex' LocalizedStrings.Time)  						.SetCell(1' rowIndex' message.ServerTime);    					var columnIndex = 0;    					foreach (var quote in message.Bids.Concat(message.Asks).OrderByDescending(q => q.Price))  					{  						worker  							.SetCell(columnIndex' rowIndex + (quote.Side == Sides.Buy ? 1 : 3)' quote.Price)  							.SetCell(columnIndex' rowIndex + 2' quote.Volume);    						columnIndex++;  					}    					rowIndex += 4;    					if (!Check(rowIndex))  						break;  				}  			});
Magic Number,StockSharp.Algo.Export,ExcelExporter,C:\repos\stocksharp_stocksharp\Algo\Export\ExcelExporter.cs,Export,The following statement contains a magic number: Do(worker =>  			{  				var rowIndex = 0;    				foreach (var message in messages)  				{  					worker  						.SetCell(0' rowIndex' LocalizedStrings.Time)  						.SetCell(1' rowIndex' message.ServerTime);    					var columnIndex = 0;    					foreach (var quote in message.Bids.Concat(message.Asks).OrderByDescending(q => q.Price))  					{  						worker  							.SetCell(columnIndex' rowIndex + (quote.Side == Sides.Buy ? 1 : 3)' quote.Price)  							.SetCell(columnIndex' rowIndex + 2' quote.Volume);    						columnIndex++;  					}    					rowIndex += 4;    					if (!Check(rowIndex))  						break;  				}  			});
Magic Number,StockSharp.Algo.Export,ExcelExporter,C:\repos\stocksharp_stocksharp\Algo\Export\ExcelExporter.cs,Export,The following statement contains a magic number: Do(worker =>  			{  				var row = 0;    				worker  					.SetCell(0' row' LocalizedStrings.Str726).SetStyle(0' "yyyy-MM-dd HH:mm:ss.fff")  					.SetCell(1' row' LocalizedStrings.Str727).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff")  					.SetCell(2' row' "O").SetStyle(2' typeof(decimal))  					.SetCell(3' row' "H").SetStyle(3' typeof(decimal))  					.SetCell(4' row' "L").SetStyle(4' typeof(decimal))  					.SetCell(5' row' "C").SetStyle(5' typeof(decimal))  					.SetCell(6' row' "V").SetStyle(6' typeof(decimal))  					.SetCell(7' row' LocalizedStrings.OI).SetStyle(7' typeof(decimal));    				row++;    				foreach (var candle in messages)  				{  					worker  						.SetCell(0' row' candle.OpenTime)  						.SetCell(1' row' candle.CloseTime)  						.SetCell(2' row' candle.OpenPrice)  						.SetCell(3' row' candle.HighPrice)  						.SetCell(4' row' candle.LowPrice)  						.SetCell(5' row' candle.ClosePrice)  						.SetCell(6' row' candle.TotalVolume)  						.SetCell(7' row' candle.OpenInterest);    					if (!Check(++row))  						break;  				}  			});
Magic Number,StockSharp.Algo.Export,ExcelExporter,C:\repos\stocksharp_stocksharp\Algo\Export\ExcelExporter.cs,Export,The following statement contains a magic number: Do(worker =>  			{  				var row = 0;    				worker  					.SetCell(0' row' LocalizedStrings.Str726).SetStyle(0' "yyyy-MM-dd HH:mm:ss.fff")  					.SetCell(1' row' LocalizedStrings.Str727).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff")  					.SetCell(2' row' "O").SetStyle(2' typeof(decimal))  					.SetCell(3' row' "H").SetStyle(3' typeof(decimal))  					.SetCell(4' row' "L").SetStyle(4' typeof(decimal))  					.SetCell(5' row' "C").SetStyle(5' typeof(decimal))  					.SetCell(6' row' "V").SetStyle(6' typeof(decimal))  					.SetCell(7' row' LocalizedStrings.OI).SetStyle(7' typeof(decimal));    				row++;    				foreach (var candle in messages)  				{  					worker  						.SetCell(0' row' candle.OpenTime)  						.SetCell(1' row' candle.CloseTime)  						.SetCell(2' row' candle.OpenPrice)  						.SetCell(3' row' candle.HighPrice)  						.SetCell(4' row' candle.LowPrice)  						.SetCell(5' row' candle.ClosePrice)  						.SetCell(6' row' candle.TotalVolume)  						.SetCell(7' row' candle.OpenInterest);    					if (!Check(++row))  						break;  				}  			});
Magic Number,StockSharp.Algo.Export,ExcelExporter,C:\repos\stocksharp_stocksharp\Algo\Export\ExcelExporter.cs,Export,The following statement contains a magic number: Do(worker =>  			{  				var row = 0;    				worker  					.SetCell(0' row' LocalizedStrings.Str726).SetStyle(0' "yyyy-MM-dd HH:mm:ss.fff")  					.SetCell(1' row' LocalizedStrings.Str727).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff")  					.SetCell(2' row' "O").SetStyle(2' typeof(decimal))  					.SetCell(3' row' "H").SetStyle(3' typeof(decimal))  					.SetCell(4' row' "L").SetStyle(4' typeof(decimal))  					.SetCell(5' row' "C").SetStyle(5' typeof(decimal))  					.SetCell(6' row' "V").SetStyle(6' typeof(decimal))  					.SetCell(7' row' LocalizedStrings.OI).SetStyle(7' typeof(decimal));    				row++;    				foreach (var candle in messages)  				{  					worker  						.SetCell(0' row' candle.OpenTime)  						.SetCell(1' row' candle.CloseTime)  						.SetCell(2' row' candle.OpenPrice)  						.SetCell(3' row' candle.HighPrice)  						.SetCell(4' row' candle.LowPrice)  						.SetCell(5' row' candle.ClosePrice)  						.SetCell(6' row' candle.TotalVolume)  						.SetCell(7' row' candle.OpenInterest);    					if (!Check(++row))  						break;  				}  			});
Magic Number,StockSharp.Algo.Export,ExcelExporter,C:\repos\stocksharp_stocksharp\Algo\Export\ExcelExporter.cs,Export,The following statement contains a magic number: Do(worker =>  			{  				var row = 0;    				worker  					.SetCell(0' row' LocalizedStrings.Str726).SetStyle(0' "yyyy-MM-dd HH:mm:ss.fff")  					.SetCell(1' row' LocalizedStrings.Str727).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff")  					.SetCell(2' row' "O").SetStyle(2' typeof(decimal))  					.SetCell(3' row' "H").SetStyle(3' typeof(decimal))  					.SetCell(4' row' "L").SetStyle(4' typeof(decimal))  					.SetCell(5' row' "C").SetStyle(5' typeof(decimal))  					.SetCell(6' row' "V").SetStyle(6' typeof(decimal))  					.SetCell(7' row' LocalizedStrings.OI).SetStyle(7' typeof(decimal));    				row++;    				foreach (var candle in messages)  				{  					worker  						.SetCell(0' row' candle.OpenTime)  						.SetCell(1' row' candle.CloseTime)  						.SetCell(2' row' candle.OpenPrice)  						.SetCell(3' row' candle.HighPrice)  						.SetCell(4' row' candle.LowPrice)  						.SetCell(5' row' candle.ClosePrice)  						.SetCell(6' row' candle.TotalVolume)  						.SetCell(7' row' candle.OpenInterest);    					if (!Check(++row))  						break;  				}  			});
Magic Number,StockSharp.Algo.Export,ExcelExporter,C:\repos\stocksharp_stocksharp\Algo\Export\ExcelExporter.cs,Export,The following statement contains a magic number: Do(worker =>  			{  				var row = 0;    				worker  					.SetCell(0' row' LocalizedStrings.Str726).SetStyle(0' "yyyy-MM-dd HH:mm:ss.fff")  					.SetCell(1' row' LocalizedStrings.Str727).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff")  					.SetCell(2' row' "O").SetStyle(2' typeof(decimal))  					.SetCell(3' row' "H").SetStyle(3' typeof(decimal))  					.SetCell(4' row' "L").SetStyle(4' typeof(decimal))  					.SetCell(5' row' "C").SetStyle(5' typeof(decimal))  					.SetCell(6' row' "V").SetStyle(6' typeof(decimal))  					.SetCell(7' row' LocalizedStrings.OI).SetStyle(7' typeof(decimal));    				row++;    				foreach (var candle in messages)  				{  					worker  						.SetCell(0' row' candle.OpenTime)  						.SetCell(1' row' candle.CloseTime)  						.SetCell(2' row' candle.OpenPrice)  						.SetCell(3' row' candle.HighPrice)  						.SetCell(4' row' candle.LowPrice)  						.SetCell(5' row' candle.ClosePrice)  						.SetCell(6' row' candle.TotalVolume)  						.SetCell(7' row' candle.OpenInterest);    					if (!Check(++row))  						break;  				}  			});
Magic Number,StockSharp.Algo.Export,ExcelExporter,C:\repos\stocksharp_stocksharp\Algo\Export\ExcelExporter.cs,Export,The following statement contains a magic number: Do(worker =>  			{  				var row = 0;    				worker  					.SetCell(0' row' LocalizedStrings.Str726).SetStyle(0' "yyyy-MM-dd HH:mm:ss.fff")  					.SetCell(1' row' LocalizedStrings.Str727).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff")  					.SetCell(2' row' "O").SetStyle(2' typeof(decimal))  					.SetCell(3' row' "H").SetStyle(3' typeof(decimal))  					.SetCell(4' row' "L").SetStyle(4' typeof(decimal))  					.SetCell(5' row' "C").SetStyle(5' typeof(decimal))  					.SetCell(6' row' "V").SetStyle(6' typeof(decimal))  					.SetCell(7' row' LocalizedStrings.OI).SetStyle(7' typeof(decimal));    				row++;    				foreach (var candle in messages)  				{  					worker  						.SetCell(0' row' candle.OpenTime)  						.SetCell(1' row' candle.CloseTime)  						.SetCell(2' row' candle.OpenPrice)  						.SetCell(3' row' candle.HighPrice)  						.SetCell(4' row' candle.LowPrice)  						.SetCell(5' row' candle.ClosePrice)  						.SetCell(6' row' candle.TotalVolume)  						.SetCell(7' row' candle.OpenInterest);    					if (!Check(++row))  						break;  				}  			});
Magic Number,StockSharp.Algo.Export,ExcelExporter,C:\repos\stocksharp_stocksharp\Algo\Export\ExcelExporter.cs,Export,The following statement contains a magic number: Do(worker =>  			{  				var row = 0;    				worker  					.SetCell(0' row' LocalizedStrings.Str726).SetStyle(0' "yyyy-MM-dd HH:mm:ss.fff")  					.SetCell(1' row' LocalizedStrings.Str727).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff")  					.SetCell(2' row' "O").SetStyle(2' typeof(decimal))  					.SetCell(3' row' "H").SetStyle(3' typeof(decimal))  					.SetCell(4' row' "L").SetStyle(4' typeof(decimal))  					.SetCell(5' row' "C").SetStyle(5' typeof(decimal))  					.SetCell(6' row' "V").SetStyle(6' typeof(decimal))  					.SetCell(7' row' LocalizedStrings.OI).SetStyle(7' typeof(decimal));    				row++;    				foreach (var candle in messages)  				{  					worker  						.SetCell(0' row' candle.OpenTime)  						.SetCell(1' row' candle.CloseTime)  						.SetCell(2' row' candle.OpenPrice)  						.SetCell(3' row' candle.HighPrice)  						.SetCell(4' row' candle.LowPrice)  						.SetCell(5' row' candle.ClosePrice)  						.SetCell(6' row' candle.TotalVolume)  						.SetCell(7' row' candle.OpenInterest);    					if (!Check(++row))  						break;  				}  			});
Magic Number,StockSharp.Algo.Export,ExcelExporter,C:\repos\stocksharp_stocksharp\Algo\Export\ExcelExporter.cs,Export,The following statement contains a magic number: Do(worker =>  			{  				var row = 0;    				worker  					.SetCell(0' row' LocalizedStrings.Str726).SetStyle(0' "yyyy-MM-dd HH:mm:ss.fff")  					.SetCell(1' row' LocalizedStrings.Str727).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff")  					.SetCell(2' row' "O").SetStyle(2' typeof(decimal))  					.SetCell(3' row' "H").SetStyle(3' typeof(decimal))  					.SetCell(4' row' "L").SetStyle(4' typeof(decimal))  					.SetCell(5' row' "C").SetStyle(5' typeof(decimal))  					.SetCell(6' row' "V").SetStyle(6' typeof(decimal))  					.SetCell(7' row' LocalizedStrings.OI).SetStyle(7' typeof(decimal));    				row++;    				foreach (var candle in messages)  				{  					worker  						.SetCell(0' row' candle.OpenTime)  						.SetCell(1' row' candle.CloseTime)  						.SetCell(2' row' candle.OpenPrice)  						.SetCell(3' row' candle.HighPrice)  						.SetCell(4' row' candle.LowPrice)  						.SetCell(5' row' candle.ClosePrice)  						.SetCell(6' row' candle.TotalVolume)  						.SetCell(7' row' candle.OpenInterest);    					if (!Check(++row))  						break;  				}  			});
Magic Number,StockSharp.Algo.Export,ExcelExporter,C:\repos\stocksharp_stocksharp\Algo\Export\ExcelExporter.cs,Export,The following statement contains a magic number: Do(worker =>  			{  				var row = 0;    				worker  					.SetCell(0' row' LocalizedStrings.Str726).SetStyle(0' "yyyy-MM-dd HH:mm:ss.fff")  					.SetCell(1' row' LocalizedStrings.Str727).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff")  					.SetCell(2' row' "O").SetStyle(2' typeof(decimal))  					.SetCell(3' row' "H").SetStyle(3' typeof(decimal))  					.SetCell(4' row' "L").SetStyle(4' typeof(decimal))  					.SetCell(5' row' "C").SetStyle(5' typeof(decimal))  					.SetCell(6' row' "V").SetStyle(6' typeof(decimal))  					.SetCell(7' row' LocalizedStrings.OI).SetStyle(7' typeof(decimal));    				row++;    				foreach (var candle in messages)  				{  					worker  						.SetCell(0' row' candle.OpenTime)  						.SetCell(1' row' candle.CloseTime)  						.SetCell(2' row' candle.OpenPrice)  						.SetCell(3' row' candle.HighPrice)  						.SetCell(4' row' candle.LowPrice)  						.SetCell(5' row' candle.ClosePrice)  						.SetCell(6' row' candle.TotalVolume)  						.SetCell(7' row' candle.OpenInterest);    					if (!Check(++row))  						break;  				}  			});
Magic Number,StockSharp.Algo.Export,ExcelExporter,C:\repos\stocksharp_stocksharp\Algo\Export\ExcelExporter.cs,Export,The following statement contains a magic number: Do(worker =>  			{  				var row = 0;    				worker  					.SetCell(0' row' LocalizedStrings.Str726).SetStyle(0' "yyyy-MM-dd HH:mm:ss.fff")  					.SetCell(1' row' LocalizedStrings.Str727).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff")  					.SetCell(2' row' "O").SetStyle(2' typeof(decimal))  					.SetCell(3' row' "H").SetStyle(3' typeof(decimal))  					.SetCell(4' row' "L").SetStyle(4' typeof(decimal))  					.SetCell(5' row' "C").SetStyle(5' typeof(decimal))  					.SetCell(6' row' "V").SetStyle(6' typeof(decimal))  					.SetCell(7' row' LocalizedStrings.OI).SetStyle(7' typeof(decimal));    				row++;    				foreach (var candle in messages)  				{  					worker  						.SetCell(0' row' candle.OpenTime)  						.SetCell(1' row' candle.CloseTime)  						.SetCell(2' row' candle.OpenPrice)  						.SetCell(3' row' candle.HighPrice)  						.SetCell(4' row' candle.LowPrice)  						.SetCell(5' row' candle.ClosePrice)  						.SetCell(6' row' candle.TotalVolume)  						.SetCell(7' row' candle.OpenInterest);    					if (!Check(++row))  						break;  				}  			});
Magic Number,StockSharp.Algo.Export,ExcelExporter,C:\repos\stocksharp_stocksharp\Algo\Export\ExcelExporter.cs,Export,The following statement contains a magic number: Do(worker =>  			{  				var row = 0;    				worker  					.SetCell(0' row' LocalizedStrings.Str726).SetStyle(0' "yyyy-MM-dd HH:mm:ss.fff")  					.SetCell(1' row' LocalizedStrings.Str727).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff")  					.SetCell(2' row' "O").SetStyle(2' typeof(decimal))  					.SetCell(3' row' "H").SetStyle(3' typeof(decimal))  					.SetCell(4' row' "L").SetStyle(4' typeof(decimal))  					.SetCell(5' row' "C").SetStyle(5' typeof(decimal))  					.SetCell(6' row' "V").SetStyle(6' typeof(decimal))  					.SetCell(7' row' LocalizedStrings.OI).SetStyle(7' typeof(decimal));    				row++;    				foreach (var candle in messages)  				{  					worker  						.SetCell(0' row' candle.OpenTime)  						.SetCell(1' row' candle.CloseTime)  						.SetCell(2' row' candle.OpenPrice)  						.SetCell(3' row' candle.HighPrice)  						.SetCell(4' row' candle.LowPrice)  						.SetCell(5' row' candle.ClosePrice)  						.SetCell(6' row' candle.TotalVolume)  						.SetCell(7' row' candle.OpenInterest);    					if (!Check(++row))  						break;  				}  			});
Magic Number,StockSharp.Algo.Export,ExcelExporter,C:\repos\stocksharp_stocksharp\Algo\Export\ExcelExporter.cs,Export,The following statement contains a magic number: Do(worker =>  			{  				var row = 0;    				worker  					.SetCell(0' row' LocalizedStrings.Str726).SetStyle(0' "yyyy-MM-dd HH:mm:ss.fff")  					.SetCell(1' row' LocalizedStrings.Str727).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff")  					.SetCell(2' row' "O").SetStyle(2' typeof(decimal))  					.SetCell(3' row' "H").SetStyle(3' typeof(decimal))  					.SetCell(4' row' "L").SetStyle(4' typeof(decimal))  					.SetCell(5' row' "C").SetStyle(5' typeof(decimal))  					.SetCell(6' row' "V").SetStyle(6' typeof(decimal))  					.SetCell(7' row' LocalizedStrings.OI).SetStyle(7' typeof(decimal));    				row++;    				foreach (var candle in messages)  				{  					worker  						.SetCell(0' row' candle.OpenTime)  						.SetCell(1' row' candle.CloseTime)  						.SetCell(2' row' candle.OpenPrice)  						.SetCell(3' row' candle.HighPrice)  						.SetCell(4' row' candle.LowPrice)  						.SetCell(5' row' candle.ClosePrice)  						.SetCell(6' row' candle.TotalVolume)  						.SetCell(7' row' candle.OpenInterest);    					if (!Check(++row))  						break;  				}  			});
Magic Number,StockSharp.Algo.Export,ExcelExporter,C:\repos\stocksharp_stocksharp\Algo\Export\ExcelExporter.cs,Export,The following statement contains a magic number: Do(worker =>  			{  				var row = 0;    				worker  					.SetCell(0' row' LocalizedStrings.Str726).SetStyle(0' "yyyy-MM-dd HH:mm:ss.fff")  					.SetCell(1' row' LocalizedStrings.Str727).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff")  					.SetCell(2' row' "O").SetStyle(2' typeof(decimal))  					.SetCell(3' row' "H").SetStyle(3' typeof(decimal))  					.SetCell(4' row' "L").SetStyle(4' typeof(decimal))  					.SetCell(5' row' "C").SetStyle(5' typeof(decimal))  					.SetCell(6' row' "V").SetStyle(6' typeof(decimal))  					.SetCell(7' row' LocalizedStrings.OI).SetStyle(7' typeof(decimal));    				row++;    				foreach (var candle in messages)  				{  					worker  						.SetCell(0' row' candle.OpenTime)  						.SetCell(1' row' candle.CloseTime)  						.SetCell(2' row' candle.OpenPrice)  						.SetCell(3' row' candle.HighPrice)  						.SetCell(4' row' candle.LowPrice)  						.SetCell(5' row' candle.ClosePrice)  						.SetCell(6' row' candle.TotalVolume)  						.SetCell(7' row' candle.OpenInterest);    					if (!Check(++row))  						break;  				}  			});
Magic Number,StockSharp.Algo.Export,ExcelExporter,C:\repos\stocksharp_stocksharp\Algo\Export\ExcelExporter.cs,Export,The following statement contains a magic number: Do(worker =>  			{  				var row = 0;    				worker  					.SetCell(0' row' LocalizedStrings.Str726).SetStyle(0' "yyyy-MM-dd HH:mm:ss.fff")  					.SetCell(1' row' LocalizedStrings.Str727).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff")  					.SetCell(2' row' "O").SetStyle(2' typeof(decimal))  					.SetCell(3' row' "H").SetStyle(3' typeof(decimal))  					.SetCell(4' row' "L").SetStyle(4' typeof(decimal))  					.SetCell(5' row' "C").SetStyle(5' typeof(decimal))  					.SetCell(6' row' "V").SetStyle(6' typeof(decimal))  					.SetCell(7' row' LocalizedStrings.OI).SetStyle(7' typeof(decimal));    				row++;    				foreach (var candle in messages)  				{  					worker  						.SetCell(0' row' candle.OpenTime)  						.SetCell(1' row' candle.CloseTime)  						.SetCell(2' row' candle.OpenPrice)  						.SetCell(3' row' candle.HighPrice)  						.SetCell(4' row' candle.LowPrice)  						.SetCell(5' row' candle.ClosePrice)  						.SetCell(6' row' candle.TotalVolume)  						.SetCell(7' row' candle.OpenInterest);    					if (!Check(++row))  						break;  				}  			});
Magic Number,StockSharp.Algo.Export,ExcelExporter,C:\repos\stocksharp_stocksharp\Algo\Export\ExcelExporter.cs,Export,The following statement contains a magic number: Do(worker =>  			{  				var row = 0;    				worker  					.SetCell(0' row' LocalizedStrings.Str726).SetStyle(0' "yyyy-MM-dd HH:mm:ss.fff")  					.SetCell(1' row' LocalizedStrings.Str727).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff")  					.SetCell(2' row' "O").SetStyle(2' typeof(decimal))  					.SetCell(3' row' "H").SetStyle(3' typeof(decimal))  					.SetCell(4' row' "L").SetStyle(4' typeof(decimal))  					.SetCell(5' row' "C").SetStyle(5' typeof(decimal))  					.SetCell(6' row' "V").SetStyle(6' typeof(decimal))  					.SetCell(7' row' LocalizedStrings.OI).SetStyle(7' typeof(decimal));    				row++;    				foreach (var candle in messages)  				{  					worker  						.SetCell(0' row' candle.OpenTime)  						.SetCell(1' row' candle.CloseTime)  						.SetCell(2' row' candle.OpenPrice)  						.SetCell(3' row' candle.HighPrice)  						.SetCell(4' row' candle.LowPrice)  						.SetCell(5' row' candle.ClosePrice)  						.SetCell(6' row' candle.TotalVolume)  						.SetCell(7' row' candle.OpenInterest);    					if (!Check(++row))  						break;  				}  			});
Magic Number,StockSharp.Algo.Export,ExcelExporter,C:\repos\stocksharp_stocksharp\Algo\Export\ExcelExporter.cs,Export,The following statement contains a magic number: Do(worker =>  			{  				var row = 0;    				worker  					.SetCell(0' row' LocalizedStrings.Str726).SetStyle(0' "yyyy-MM-dd HH:mm:ss.fff")  					.SetCell(1' row' LocalizedStrings.Str727).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff")  					.SetCell(2' row' "O").SetStyle(2' typeof(decimal))  					.SetCell(3' row' "H").SetStyle(3' typeof(decimal))  					.SetCell(4' row' "L").SetStyle(4' typeof(decimal))  					.SetCell(5' row' "C").SetStyle(5' typeof(decimal))  					.SetCell(6' row' "V").SetStyle(6' typeof(decimal))  					.SetCell(7' row' LocalizedStrings.OI).SetStyle(7' typeof(decimal));    				row++;    				foreach (var candle in messages)  				{  					worker  						.SetCell(0' row' candle.OpenTime)  						.SetCell(1' row' candle.CloseTime)  						.SetCell(2' row' candle.OpenPrice)  						.SetCell(3' row' candle.HighPrice)  						.SetCell(4' row' candle.LowPrice)  						.SetCell(5' row' candle.ClosePrice)  						.SetCell(6' row' candle.TotalVolume)  						.SetCell(7' row' candle.OpenInterest);    					if (!Check(++row))  						break;  				}  			});
Magic Number,StockSharp.Algo.Export,ExcelExporter,C:\repos\stocksharp_stocksharp\Algo\Export\ExcelExporter.cs,Export,The following statement contains a magic number: Do(worker =>  			{  				var row = 0;    				worker  					.SetCell(0' row' LocalizedStrings.Str726).SetStyle(0' "yyyy-MM-dd HH:mm:ss.fff")  					.SetCell(1' row' LocalizedStrings.Str727).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff")  					.SetCell(2' row' "O").SetStyle(2' typeof(decimal))  					.SetCell(3' row' "H").SetStyle(3' typeof(decimal))  					.SetCell(4' row' "L").SetStyle(4' typeof(decimal))  					.SetCell(5' row' "C").SetStyle(5' typeof(decimal))  					.SetCell(6' row' "V").SetStyle(6' typeof(decimal))  					.SetCell(7' row' LocalizedStrings.OI).SetStyle(7' typeof(decimal));    				row++;    				foreach (var candle in messages)  				{  					worker  						.SetCell(0' row' candle.OpenTime)  						.SetCell(1' row' candle.CloseTime)  						.SetCell(2' row' candle.OpenPrice)  						.SetCell(3' row' candle.HighPrice)  						.SetCell(4' row' candle.LowPrice)  						.SetCell(5' row' candle.ClosePrice)  						.SetCell(6' row' candle.TotalVolume)  						.SetCell(7' row' candle.OpenInterest);    					if (!Check(++row))  						break;  				}  			});
Magic Number,StockSharp.Algo.Export,ExcelExporter,C:\repos\stocksharp_stocksharp\Algo\Export\ExcelExporter.cs,Export,The following statement contains a magic number: Do(worker =>  			{  				var row = 0;    				worker  					.SetCell(0' row' LocalizedStrings.Str726).SetStyle(0' "yyyy-MM-dd HH:mm:ss.fff")  					.SetCell(1' row' LocalizedStrings.Str727).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff")  					.SetCell(2' row' "O").SetStyle(2' typeof(decimal))  					.SetCell(3' row' "H").SetStyle(3' typeof(decimal))  					.SetCell(4' row' "L").SetStyle(4' typeof(decimal))  					.SetCell(5' row' "C").SetStyle(5' typeof(decimal))  					.SetCell(6' row' "V").SetStyle(6' typeof(decimal))  					.SetCell(7' row' LocalizedStrings.OI).SetStyle(7' typeof(decimal));    				row++;    				foreach (var candle in messages)  				{  					worker  						.SetCell(0' row' candle.OpenTime)  						.SetCell(1' row' candle.CloseTime)  						.SetCell(2' row' candle.OpenPrice)  						.SetCell(3' row' candle.HighPrice)  						.SetCell(4' row' candle.LowPrice)  						.SetCell(5' row' candle.ClosePrice)  						.SetCell(6' row' candle.TotalVolume)  						.SetCell(7' row' candle.OpenInterest);    					if (!Check(++row))  						break;  				}  			});
Magic Number,StockSharp.Algo.Export,ExcelExporter,C:\repos\stocksharp_stocksharp\Algo\Export\ExcelExporter.cs,Export,The following statement contains a magic number: Do(worker =>  			{  				var row = 0;    				worker  					.SetCell(0' row' LocalizedStrings.Id).SetStyle(0' typeof(string))  					.SetCell(1' row' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff")  					.SetCell(2' row' LocalizedStrings.Security).SetStyle(2' typeof(string))  					.SetCell(3' row' LocalizedStrings.Board).SetStyle(3' typeof(string))  					.SetCell(4' row' LocalizedStrings.Str215).SetStyle(4' typeof(string))  					.SetCell(5' row' LocalizedStrings.Str217).SetStyle(5' typeof(string))  					.SetCell(6' row' LocalizedStrings.Str213).SetStyle(6' typeof(string))  					.SetCell(7' row' LocalizedStrings.Str221).SetStyle(6' typeof(string));    				row++;    				foreach (var n in messages)  				{  					worker  						.SetCell(0' row' n.Id)  						.SetCell(1' row' n.ServerTime)  						.SetCell(2' row' n.SecurityId?.SecurityCode)  						.SetCell(3' row' n.BoardCode)  						.SetCell(4' row' n.Headline)  						.SetCell(5' row' n.Story)  						.SetCell(6' row' n.Source)  						.SetCell(7' row' n.Url);    					if (!Check(++row))  						break;  				}  			});
Magic Number,StockSharp.Algo.Export,ExcelExporter,C:\repos\stocksharp_stocksharp\Algo\Export\ExcelExporter.cs,Export,The following statement contains a magic number: Do(worker =>  			{  				var row = 0;    				worker  					.SetCell(0' row' LocalizedStrings.Id).SetStyle(0' typeof(string))  					.SetCell(1' row' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff")  					.SetCell(2' row' LocalizedStrings.Security).SetStyle(2' typeof(string))  					.SetCell(3' row' LocalizedStrings.Board).SetStyle(3' typeof(string))  					.SetCell(4' row' LocalizedStrings.Str215).SetStyle(4' typeof(string))  					.SetCell(5' row' LocalizedStrings.Str217).SetStyle(5' typeof(string))  					.SetCell(6' row' LocalizedStrings.Str213).SetStyle(6' typeof(string))  					.SetCell(7' row' LocalizedStrings.Str221).SetStyle(6' typeof(string));    				row++;    				foreach (var n in messages)  				{  					worker  						.SetCell(0' row' n.Id)  						.SetCell(1' row' n.ServerTime)  						.SetCell(2' row' n.SecurityId?.SecurityCode)  						.SetCell(3' row' n.BoardCode)  						.SetCell(4' row' n.Headline)  						.SetCell(5' row' n.Story)  						.SetCell(6' row' n.Source)  						.SetCell(7' row' n.Url);    					if (!Check(++row))  						break;  				}  			});
Magic Number,StockSharp.Algo.Export,ExcelExporter,C:\repos\stocksharp_stocksharp\Algo\Export\ExcelExporter.cs,Export,The following statement contains a magic number: Do(worker =>  			{  				var row = 0;    				worker  					.SetCell(0' row' LocalizedStrings.Id).SetStyle(0' typeof(string))  					.SetCell(1' row' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff")  					.SetCell(2' row' LocalizedStrings.Security).SetStyle(2' typeof(string))  					.SetCell(3' row' LocalizedStrings.Board).SetStyle(3' typeof(string))  					.SetCell(4' row' LocalizedStrings.Str215).SetStyle(4' typeof(string))  					.SetCell(5' row' LocalizedStrings.Str217).SetStyle(5' typeof(string))  					.SetCell(6' row' LocalizedStrings.Str213).SetStyle(6' typeof(string))  					.SetCell(7' row' LocalizedStrings.Str221).SetStyle(6' typeof(string));    				row++;    				foreach (var n in messages)  				{  					worker  						.SetCell(0' row' n.Id)  						.SetCell(1' row' n.ServerTime)  						.SetCell(2' row' n.SecurityId?.SecurityCode)  						.SetCell(3' row' n.BoardCode)  						.SetCell(4' row' n.Headline)  						.SetCell(5' row' n.Story)  						.SetCell(6' row' n.Source)  						.SetCell(7' row' n.Url);    					if (!Check(++row))  						break;  				}  			});
Magic Number,StockSharp.Algo.Export,ExcelExporter,C:\repos\stocksharp_stocksharp\Algo\Export\ExcelExporter.cs,Export,The following statement contains a magic number: Do(worker =>  			{  				var row = 0;    				worker  					.SetCell(0' row' LocalizedStrings.Id).SetStyle(0' typeof(string))  					.SetCell(1' row' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff")  					.SetCell(2' row' LocalizedStrings.Security).SetStyle(2' typeof(string))  					.SetCell(3' row' LocalizedStrings.Board).SetStyle(3' typeof(string))  					.SetCell(4' row' LocalizedStrings.Str215).SetStyle(4' typeof(string))  					.SetCell(5' row' LocalizedStrings.Str217).SetStyle(5' typeof(string))  					.SetCell(6' row' LocalizedStrings.Str213).SetStyle(6' typeof(string))  					.SetCell(7' row' LocalizedStrings.Str221).SetStyle(6' typeof(string));    				row++;    				foreach (var n in messages)  				{  					worker  						.SetCell(0' row' n.Id)  						.SetCell(1' row' n.ServerTime)  						.SetCell(2' row' n.SecurityId?.SecurityCode)  						.SetCell(3' row' n.BoardCode)  						.SetCell(4' row' n.Headline)  						.SetCell(5' row' n.Story)  						.SetCell(6' row' n.Source)  						.SetCell(7' row' n.Url);    					if (!Check(++row))  						break;  				}  			});
Magic Number,StockSharp.Algo.Export,ExcelExporter,C:\repos\stocksharp_stocksharp\Algo\Export\ExcelExporter.cs,Export,The following statement contains a magic number: Do(worker =>  			{  				var row = 0;    				worker  					.SetCell(0' row' LocalizedStrings.Id).SetStyle(0' typeof(string))  					.SetCell(1' row' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff")  					.SetCell(2' row' LocalizedStrings.Security).SetStyle(2' typeof(string))  					.SetCell(3' row' LocalizedStrings.Board).SetStyle(3' typeof(string))  					.SetCell(4' row' LocalizedStrings.Str215).SetStyle(4' typeof(string))  					.SetCell(5' row' LocalizedStrings.Str217).SetStyle(5' typeof(string))  					.SetCell(6' row' LocalizedStrings.Str213).SetStyle(6' typeof(string))  					.SetCell(7' row' LocalizedStrings.Str221).SetStyle(6' typeof(string));    				row++;    				foreach (var n in messages)  				{  					worker  						.SetCell(0' row' n.Id)  						.SetCell(1' row' n.ServerTime)  						.SetCell(2' row' n.SecurityId?.SecurityCode)  						.SetCell(3' row' n.BoardCode)  						.SetCell(4' row' n.Headline)  						.SetCell(5' row' n.Story)  						.SetCell(6' row' n.Source)  						.SetCell(7' row' n.Url);    					if (!Check(++row))  						break;  				}  			});
Magic Number,StockSharp.Algo.Export,ExcelExporter,C:\repos\stocksharp_stocksharp\Algo\Export\ExcelExporter.cs,Export,The following statement contains a magic number: Do(worker =>  			{  				var row = 0;    				worker  					.SetCell(0' row' LocalizedStrings.Id).SetStyle(0' typeof(string))  					.SetCell(1' row' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff")  					.SetCell(2' row' LocalizedStrings.Security).SetStyle(2' typeof(string))  					.SetCell(3' row' LocalizedStrings.Board).SetStyle(3' typeof(string))  					.SetCell(4' row' LocalizedStrings.Str215).SetStyle(4' typeof(string))  					.SetCell(5' row' LocalizedStrings.Str217).SetStyle(5' typeof(string))  					.SetCell(6' row' LocalizedStrings.Str213).SetStyle(6' typeof(string))  					.SetCell(7' row' LocalizedStrings.Str221).SetStyle(6' typeof(string));    				row++;    				foreach (var n in messages)  				{  					worker  						.SetCell(0' row' n.Id)  						.SetCell(1' row' n.ServerTime)  						.SetCell(2' row' n.SecurityId?.SecurityCode)  						.SetCell(3' row' n.BoardCode)  						.SetCell(4' row' n.Headline)  						.SetCell(5' row' n.Story)  						.SetCell(6' row' n.Source)  						.SetCell(7' row' n.Url);    					if (!Check(++row))  						break;  				}  			});
Magic Number,StockSharp.Algo.Export,ExcelExporter,C:\repos\stocksharp_stocksharp\Algo\Export\ExcelExporter.cs,Export,The following statement contains a magic number: Do(worker =>  			{  				var row = 0;    				worker  					.SetCell(0' row' LocalizedStrings.Id).SetStyle(0' typeof(string))  					.SetCell(1' row' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff")  					.SetCell(2' row' LocalizedStrings.Security).SetStyle(2' typeof(string))  					.SetCell(3' row' LocalizedStrings.Board).SetStyle(3' typeof(string))  					.SetCell(4' row' LocalizedStrings.Str215).SetStyle(4' typeof(string))  					.SetCell(5' row' LocalizedStrings.Str217).SetStyle(5' typeof(string))  					.SetCell(6' row' LocalizedStrings.Str213).SetStyle(6' typeof(string))  					.SetCell(7' row' LocalizedStrings.Str221).SetStyle(6' typeof(string));    				row++;    				foreach (var n in messages)  				{  					worker  						.SetCell(0' row' n.Id)  						.SetCell(1' row' n.ServerTime)  						.SetCell(2' row' n.SecurityId?.SecurityCode)  						.SetCell(3' row' n.BoardCode)  						.SetCell(4' row' n.Headline)  						.SetCell(5' row' n.Story)  						.SetCell(6' row' n.Source)  						.SetCell(7' row' n.Url);    					if (!Check(++row))  						break;  				}  			});
Magic Number,StockSharp.Algo.Export,ExcelExporter,C:\repos\stocksharp_stocksharp\Algo\Export\ExcelExporter.cs,Export,The following statement contains a magic number: Do(worker =>  			{  				var row = 0;    				worker  					.SetCell(0' row' LocalizedStrings.Id).SetStyle(0' typeof(string))  					.SetCell(1' row' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff")  					.SetCell(2' row' LocalizedStrings.Security).SetStyle(2' typeof(string))  					.SetCell(3' row' LocalizedStrings.Board).SetStyle(3' typeof(string))  					.SetCell(4' row' LocalizedStrings.Str215).SetStyle(4' typeof(string))  					.SetCell(5' row' LocalizedStrings.Str217).SetStyle(5' typeof(string))  					.SetCell(6' row' LocalizedStrings.Str213).SetStyle(6' typeof(string))  					.SetCell(7' row' LocalizedStrings.Str221).SetStyle(6' typeof(string));    				row++;    				foreach (var n in messages)  				{  					worker  						.SetCell(0' row' n.Id)  						.SetCell(1' row' n.ServerTime)  						.SetCell(2' row' n.SecurityId?.SecurityCode)  						.SetCell(3' row' n.BoardCode)  						.SetCell(4' row' n.Headline)  						.SetCell(5' row' n.Story)  						.SetCell(6' row' n.Source)  						.SetCell(7' row' n.Url);    					if (!Check(++row))  						break;  				}  			});
Magic Number,StockSharp.Algo.Export,ExcelExporter,C:\repos\stocksharp_stocksharp\Algo\Export\ExcelExporter.cs,Export,The following statement contains a magic number: Do(worker =>  			{  				var row = 0;    				worker  					.SetCell(0' row' LocalizedStrings.Id).SetStyle(0' typeof(string))  					.SetCell(1' row' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff")  					.SetCell(2' row' LocalizedStrings.Security).SetStyle(2' typeof(string))  					.SetCell(3' row' LocalizedStrings.Board).SetStyle(3' typeof(string))  					.SetCell(4' row' LocalizedStrings.Str215).SetStyle(4' typeof(string))  					.SetCell(5' row' LocalizedStrings.Str217).SetStyle(5' typeof(string))  					.SetCell(6' row' LocalizedStrings.Str213).SetStyle(6' typeof(string))  					.SetCell(7' row' LocalizedStrings.Str221).SetStyle(6' typeof(string));    				row++;    				foreach (var n in messages)  				{  					worker  						.SetCell(0' row' n.Id)  						.SetCell(1' row' n.ServerTime)  						.SetCell(2' row' n.SecurityId?.SecurityCode)  						.SetCell(3' row' n.BoardCode)  						.SetCell(4' row' n.Headline)  						.SetCell(5' row' n.Story)  						.SetCell(6' row' n.Source)  						.SetCell(7' row' n.Url);    					if (!Check(++row))  						break;  				}  			});
Magic Number,StockSharp.Algo.Export,ExcelExporter,C:\repos\stocksharp_stocksharp\Algo\Export\ExcelExporter.cs,Export,The following statement contains a magic number: Do(worker =>  			{  				var row = 0;    				worker  					.SetCell(0' row' LocalizedStrings.Id).SetStyle(0' typeof(string))  					.SetCell(1' row' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff")  					.SetCell(2' row' LocalizedStrings.Security).SetStyle(2' typeof(string))  					.SetCell(3' row' LocalizedStrings.Board).SetStyle(3' typeof(string))  					.SetCell(4' row' LocalizedStrings.Str215).SetStyle(4' typeof(string))  					.SetCell(5' row' LocalizedStrings.Str217).SetStyle(5' typeof(string))  					.SetCell(6' row' LocalizedStrings.Str213).SetStyle(6' typeof(string))  					.SetCell(7' row' LocalizedStrings.Str221).SetStyle(6' typeof(string));    				row++;    				foreach (var n in messages)  				{  					worker  						.SetCell(0' row' n.Id)  						.SetCell(1' row' n.ServerTime)  						.SetCell(2' row' n.SecurityId?.SecurityCode)  						.SetCell(3' row' n.BoardCode)  						.SetCell(4' row' n.Headline)  						.SetCell(5' row' n.Story)  						.SetCell(6' row' n.Source)  						.SetCell(7' row' n.Url);    					if (!Check(++row))  						break;  				}  			});
Magic Number,StockSharp.Algo.Export,ExcelExporter,C:\repos\stocksharp_stocksharp\Algo\Export\ExcelExporter.cs,Export,The following statement contains a magic number: Do(worker =>  			{  				var row = 0;    				worker  					.SetCell(0' row' LocalizedStrings.Id).SetStyle(0' typeof(string))  					.SetCell(1' row' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff")  					.SetCell(2' row' LocalizedStrings.Security).SetStyle(2' typeof(string))  					.SetCell(3' row' LocalizedStrings.Board).SetStyle(3' typeof(string))  					.SetCell(4' row' LocalizedStrings.Str215).SetStyle(4' typeof(string))  					.SetCell(5' row' LocalizedStrings.Str217).SetStyle(5' typeof(string))  					.SetCell(6' row' LocalizedStrings.Str213).SetStyle(6' typeof(string))  					.SetCell(7' row' LocalizedStrings.Str221).SetStyle(6' typeof(string));    				row++;    				foreach (var n in messages)  				{  					worker  						.SetCell(0' row' n.Id)  						.SetCell(1' row' n.ServerTime)  						.SetCell(2' row' n.SecurityId?.SecurityCode)  						.SetCell(3' row' n.BoardCode)  						.SetCell(4' row' n.Headline)  						.SetCell(5' row' n.Story)  						.SetCell(6' row' n.Source)  						.SetCell(7' row' n.Url);    					if (!Check(++row))  						break;  				}  			});
Magic Number,StockSharp.Algo.Export,ExcelExporter,C:\repos\stocksharp_stocksharp\Algo\Export\ExcelExporter.cs,Export,The following statement contains a magic number: Do(worker =>  			{  				var row = 0;    				worker  					.SetCell(0' row' LocalizedStrings.Id).SetStyle(0' typeof(string))  					.SetCell(1' row' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff")  					.SetCell(2' row' LocalizedStrings.Security).SetStyle(2' typeof(string))  					.SetCell(3' row' LocalizedStrings.Board).SetStyle(3' typeof(string))  					.SetCell(4' row' LocalizedStrings.Str215).SetStyle(4' typeof(string))  					.SetCell(5' row' LocalizedStrings.Str217).SetStyle(5' typeof(string))  					.SetCell(6' row' LocalizedStrings.Str213).SetStyle(6' typeof(string))  					.SetCell(7' row' LocalizedStrings.Str221).SetStyle(6' typeof(string));    				row++;    				foreach (var n in messages)  				{  					worker  						.SetCell(0' row' n.Id)  						.SetCell(1' row' n.ServerTime)  						.SetCell(2' row' n.SecurityId?.SecurityCode)  						.SetCell(3' row' n.BoardCode)  						.SetCell(4' row' n.Headline)  						.SetCell(5' row' n.Story)  						.SetCell(6' row' n.Source)  						.SetCell(7' row' n.Url);    					if (!Check(++row))  						break;  				}  			});
Magic Number,StockSharp.Algo.Export,ExcelExporter,C:\repos\stocksharp_stocksharp\Algo\Export\ExcelExporter.cs,Export,The following statement contains a magic number: Do(worker =>  			{  				var row = 0;    				worker  					.SetCell(0' row' LocalizedStrings.Id).SetStyle(0' typeof(string))  					.SetCell(1' row' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff")  					.SetCell(2' row' LocalizedStrings.Security).SetStyle(2' typeof(string))  					.SetCell(3' row' LocalizedStrings.Board).SetStyle(3' typeof(string))  					.SetCell(4' row' LocalizedStrings.Str215).SetStyle(4' typeof(string))  					.SetCell(5' row' LocalizedStrings.Str217).SetStyle(5' typeof(string))  					.SetCell(6' row' LocalizedStrings.Str213).SetStyle(6' typeof(string))  					.SetCell(7' row' LocalizedStrings.Str221).SetStyle(6' typeof(string));    				row++;    				foreach (var n in messages)  				{  					worker  						.SetCell(0' row' n.Id)  						.SetCell(1' row' n.ServerTime)  						.SetCell(2' row' n.SecurityId?.SecurityCode)  						.SetCell(3' row' n.BoardCode)  						.SetCell(4' row' n.Headline)  						.SetCell(5' row' n.Story)  						.SetCell(6' row' n.Source)  						.SetCell(7' row' n.Url);    					if (!Check(++row))  						break;  				}  			});
Magic Number,StockSharp.Algo.Export,ExcelExporter,C:\repos\stocksharp_stocksharp\Algo\Export\ExcelExporter.cs,Export,The following statement contains a magic number: Do(worker =>  			{  				var row = 0;    				worker  					.SetCell(0' row' LocalizedStrings.Id).SetStyle(0' typeof(string))  					.SetCell(1' row' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff")  					.SetCell(2' row' LocalizedStrings.Security).SetStyle(2' typeof(string))  					.SetCell(3' row' LocalizedStrings.Board).SetStyle(3' typeof(string))  					.SetCell(4' row' LocalizedStrings.Str215).SetStyle(4' typeof(string))  					.SetCell(5' row' LocalizedStrings.Str217).SetStyle(5' typeof(string))  					.SetCell(6' row' LocalizedStrings.Str213).SetStyle(6' typeof(string))  					.SetCell(7' row' LocalizedStrings.Str221).SetStyle(6' typeof(string));    				row++;    				foreach (var n in messages)  				{  					worker  						.SetCell(0' row' n.Id)  						.SetCell(1' row' n.ServerTime)  						.SetCell(2' row' n.SecurityId?.SecurityCode)  						.SetCell(3' row' n.BoardCode)  						.SetCell(4' row' n.Headline)  						.SetCell(5' row' n.Story)  						.SetCell(6' row' n.Source)  						.SetCell(7' row' n.Url);    					if (!Check(++row))  						break;  				}  			});
Magic Number,StockSharp.Algo.Export,ExcelExporter,C:\repos\stocksharp_stocksharp\Algo\Export\ExcelExporter.cs,Export,The following statement contains a magic number: Do(worker =>  			{  				var row = 0;    				worker  					.SetCell(0' row' LocalizedStrings.Id).SetStyle(0' typeof(string))  					.SetCell(1' row' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff")  					.SetCell(2' row' LocalizedStrings.Security).SetStyle(2' typeof(string))  					.SetCell(3' row' LocalizedStrings.Board).SetStyle(3' typeof(string))  					.SetCell(4' row' LocalizedStrings.Str215).SetStyle(4' typeof(string))  					.SetCell(5' row' LocalizedStrings.Str217).SetStyle(5' typeof(string))  					.SetCell(6' row' LocalizedStrings.Str213).SetStyle(6' typeof(string))  					.SetCell(7' row' LocalizedStrings.Str221).SetStyle(6' typeof(string));    				row++;    				foreach (var n in messages)  				{  					worker  						.SetCell(0' row' n.Id)  						.SetCell(1' row' n.ServerTime)  						.SetCell(2' row' n.SecurityId?.SecurityCode)  						.SetCell(3' row' n.BoardCode)  						.SetCell(4' row' n.Headline)  						.SetCell(5' row' n.Story)  						.SetCell(6' row' n.Source)  						.SetCell(7' row' n.Url);    					if (!Check(++row))  						break;  				}  			});
Magic Number,StockSharp.Algo.Export,ExcelExporter,C:\repos\stocksharp_stocksharp\Algo\Export\ExcelExporter.cs,Export,The following statement contains a magic number: Do(worker =>  			{  				var row = 0;    				worker  					.SetCell(0' row' LocalizedStrings.Id).SetStyle(0' typeof(string))  					.SetCell(1' row' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff")  					.SetCell(2' row' LocalizedStrings.Security).SetStyle(2' typeof(string))  					.SetCell(3' row' LocalizedStrings.Board).SetStyle(3' typeof(string))  					.SetCell(4' row' LocalizedStrings.Str215).SetStyle(4' typeof(string))  					.SetCell(5' row' LocalizedStrings.Str217).SetStyle(5' typeof(string))  					.SetCell(6' row' LocalizedStrings.Str213).SetStyle(6' typeof(string))  					.SetCell(7' row' LocalizedStrings.Str221).SetStyle(6' typeof(string));    				row++;    				foreach (var n in messages)  				{  					worker  						.SetCell(0' row' n.Id)  						.SetCell(1' row' n.ServerTime)  						.SetCell(2' row' n.SecurityId?.SecurityCode)  						.SetCell(3' row' n.BoardCode)  						.SetCell(4' row' n.Headline)  						.SetCell(5' row' n.Story)  						.SetCell(6' row' n.Source)  						.SetCell(7' row' n.Url);    					if (!Check(++row))  						break;  				}  			});
Magic Number,StockSharp.Algo.Export,ExcelExporter,C:\repos\stocksharp_stocksharp\Algo\Export\ExcelExporter.cs,Export,The following statement contains a magic number: Do(worker =>  			{  				var row = 0;    				worker  					.SetCell(0' row' LocalizedStrings.Id).SetStyle(0' typeof(string))  					.SetCell(1' row' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff")  					.SetCell(2' row' LocalizedStrings.Security).SetStyle(2' typeof(string))  					.SetCell(3' row' LocalizedStrings.Board).SetStyle(3' typeof(string))  					.SetCell(4' row' LocalizedStrings.Str215).SetStyle(4' typeof(string))  					.SetCell(5' row' LocalizedStrings.Str217).SetStyle(5' typeof(string))  					.SetCell(6' row' LocalizedStrings.Str213).SetStyle(6' typeof(string))  					.SetCell(7' row' LocalizedStrings.Str221).SetStyle(6' typeof(string));    				row++;    				foreach (var n in messages)  				{  					worker  						.SetCell(0' row' n.Id)  						.SetCell(1' row' n.ServerTime)  						.SetCell(2' row' n.SecurityId?.SecurityCode)  						.SetCell(3' row' n.BoardCode)  						.SetCell(4' row' n.Headline)  						.SetCell(5' row' n.Story)  						.SetCell(6' row' n.Source)  						.SetCell(7' row' n.Url);    					if (!Check(++row))  						break;  				}  			});
Magic Number,StockSharp.Algo.Export,ExcelExporter,C:\repos\stocksharp_stocksharp\Algo\Export\ExcelExporter.cs,Export,The following statement contains a magic number: Do(worker =>  			{  				var row = 0;    				worker  					.SetCell(0' row' LocalizedStrings.Id).SetStyle(0' typeof(string))  					.SetCell(1' row' LocalizedStrings.Time).SetStyle(1' "yyyy-MM-dd HH:mm:ss.fff")  					.SetCell(2' row' LocalizedStrings.Security).SetStyle(2' typeof(string))  					.SetCell(3' row' LocalizedStrings.Board).SetStyle(3' typeof(string))  					.SetCell(4' row' LocalizedStrings.Str215).SetStyle(4' typeof(string))  					.SetCell(5' row' LocalizedStrings.Str217).SetStyle(5' typeof(string))  					.SetCell(6' row' LocalizedStrings.Str213).SetStyle(6' typeof(string))  					.SetCell(7' row' LocalizedStrings.Str221).SetStyle(6' typeof(string));    				row++;    				foreach (var n in messages)  				{  					worker  						.SetCell(0' row' n.Id)  						.SetCell(1' row' n.ServerTime)  						.SetCell(2' row' n.SecurityId?.SecurityCode)  						.SetCell(3' row' n.BoardCode)  						.SetCell(4' row' n.Headline)  						.SetCell(5' row' n.Story)  						.SetCell(6' row' n.Source)  						.SetCell(7' row' n.Url);    					if (!Check(++row))  						break;  				}  			});
Magic Number,StockSharp.Algo.Export,ExcelExporter,C:\repos\stocksharp_stocksharp\Algo\Export\ExcelExporter.cs,Check,The following statement contains a magic number: if (index < 1048576)  			//if (index < (ushort.MaxValue - 1))  			{  				return CanProcess();  			}  			else  			{  				_breaked();  				return false;  			}
Magic Number,StockSharp.Algo.Import,CsvImporter,C:\repos\stocksharp_stocksharp\Algo\Import\CsvImporter.cs,Import,The following statement contains a magic number: try  			{  				var len = new FileInfo(fileName).Length;  				var prevPercent = 0;  				var lineIndex = 0;    				foreach (var instance in Parse(fileName' isCancelled))  				{  					if (!(instance is SecurityMessage secMsg))  					{  						buffer.Add(instance);    						if (buffer.Count > 1000)  							FlushBuffer(buffer);  					}  					else  					{  						var security = _entityRegistry.Securities.ReadBySecurityId(secMsg.SecurityId);    						if (security != null)  						{  							if (!UpdateDuplicateSecurities)  							{  								this.AddErrorLog(LocalizedStrings.Str1453.Put(secMsg.SecurityId));  								continue;  							}    							security.Type = secMsg.SecurityType ?? secMsg.SecurityId.SecurityType;  							security.CfiCode = secMsg.CfiCode;  							security.Strike = secMsg.Strike;  							security.OptionType = secMsg.OptionType;  							security.Name = secMsg.Name;  							security.ShortName = secMsg.ShortName;  							security.Class = secMsg.Class;  							security.BinaryOptionType = secMsg.BinaryOptionType;  							security.ExternalId = secMsg.SecurityId.ToExternalId();  							security.ExpiryDate = secMsg.ExpiryDate;  							security.SettlementDate = secMsg.SettlementDate;  							security.UnderlyingSecurityId = secMsg.UnderlyingSecurityCode + "@" + secMsg.SecurityId.BoardCode;  							security.Currency = secMsg.Currency;  							security.PriceStep = secMsg.PriceStep;  							security.Decimals = secMsg.Decimals;  							security.VolumeStep = secMsg.VolumeStep;  							security.Multiplier = secMsg.Multiplier;  							security.IssueSize = secMsg.IssueSize;  							security.IssueDate = secMsg.IssueDate;  							security.UnderlyingSecurityType = secMsg.UnderlyingSecurityType;  						}  						else  							security = secMsg.ToSecurity(_exchangeInfoProvider);    						_entityRegistry.Securities.Save(security);    						if (ExtendedInfoStorageItem != null)  						{  							ExtendedInfoStorageItem.Add(secMsg.SecurityId' secMsg.ExtensionInfo);  						}  					}    					var percent = (int)(((double)lineIndex / len) * 100 - 1).Round();    					lineIndex++;    					if (percent <= prevPercent)  						continue;    					prevPercent = percent;  					updateProgress?.Invoke(prevPercent);  				}  			}  			catch (Exception ex)  			{  				ex.LogError();  			}
Magic Number,StockSharp.Algo.Import,CsvImporter,C:\repos\stocksharp_stocksharp\Algo\Import\CsvImporter.cs,Import,The following statement contains a magic number: try  			{  				var len = new FileInfo(fileName).Length;  				var prevPercent = 0;  				var lineIndex = 0;    				foreach (var instance in Parse(fileName' isCancelled))  				{  					if (!(instance is SecurityMessage secMsg))  					{  						buffer.Add(instance);    						if (buffer.Count > 1000)  							FlushBuffer(buffer);  					}  					else  					{  						var security = _entityRegistry.Securities.ReadBySecurityId(secMsg.SecurityId);    						if (security != null)  						{  							if (!UpdateDuplicateSecurities)  							{  								this.AddErrorLog(LocalizedStrings.Str1453.Put(secMsg.SecurityId));  								continue;  							}    							security.Type = secMsg.SecurityType ?? secMsg.SecurityId.SecurityType;  							security.CfiCode = secMsg.CfiCode;  							security.Strike = secMsg.Strike;  							security.OptionType = secMsg.OptionType;  							security.Name = secMsg.Name;  							security.ShortName = secMsg.ShortName;  							security.Class = secMsg.Class;  							security.BinaryOptionType = secMsg.BinaryOptionType;  							security.ExternalId = secMsg.SecurityId.ToExternalId();  							security.ExpiryDate = secMsg.ExpiryDate;  							security.SettlementDate = secMsg.SettlementDate;  							security.UnderlyingSecurityId = secMsg.UnderlyingSecurityCode + "@" + secMsg.SecurityId.BoardCode;  							security.Currency = secMsg.Currency;  							security.PriceStep = secMsg.PriceStep;  							security.Decimals = secMsg.Decimals;  							security.VolumeStep = secMsg.VolumeStep;  							security.Multiplier = secMsg.Multiplier;  							security.IssueSize = secMsg.IssueSize;  							security.IssueDate = secMsg.IssueDate;  							security.UnderlyingSecurityType = secMsg.UnderlyingSecurityType;  						}  						else  							security = secMsg.ToSecurity(_exchangeInfoProvider);    						_entityRegistry.Securities.Save(security);    						if (ExtendedInfoStorageItem != null)  						{  							ExtendedInfoStorageItem.Add(secMsg.SecurityId' secMsg.ExtensionInfo);  						}  					}    					var percent = (int)(((double)lineIndex / len) * 100 - 1).Round();    					lineIndex++;    					if (percent <= prevPercent)  						continue;    					prevPercent = percent;  					updateProgress?.Invoke(prevPercent);  				}  			}  			catch (Exception ex)  			{  				ex.LogError();  			}
Magic Number,StockSharp.Algo.Indicators,Correlation,C:\repos\stocksharp_stocksharp\Algo\Indicators\Correlation.cs,Correlation,The following statement contains a magic number: Length = 20;
Magic Number,StockSharp.Algo.Indicators,Covariance,C:\repos\stocksharp_stocksharp\Algo\Indicators\Covariance.cs,Covariance,The following statement contains a magic number: Length = 20;
Magic Number,StockSharp.Algo.Indicators,MoneyFlowIndex,C:\repos\stocksharp_stocksharp\Algo\Indicators\MoneyFlowIndex.cs,MoneyFlowIndex,The following statement contains a magic number: Length = 14;
Magic Number,StockSharp.Algo.Indicators,StochasticOscillator,C:\repos\stocksharp_stocksharp\Algo\Indicators\StochasticOscillator.cs,StochasticOscillator,The following statement contains a magic number: InnerIndicators.Add(D = new SimpleMovingAverage { Length = 3 });
Magic Number,StockSharp.Algo.Indicators,Highest,C:\repos\stocksharp_stocksharp\Algo\Indicators\Highest.cs,Highest,The following statement contains a magic number: Length = 5;
Magic Number,StockSharp.Algo.Indicators,LinearReg,C:\repos\stocksharp_stocksharp\Algo\Indicators\LinearReg.cs,LinearReg,The following statement contains a magic number: Length = 11;
Magic Number,StockSharp.Algo.Indicators,LinearRegression,C:\repos\stocksharp_stocksharp\Algo\Indicators\LinearRegression.cs,LinearRegression,The following statement contains a magic number: Length = 11;
Magic Number,StockSharp.Algo.Indicators,LinearRegSlope,C:\repos\stocksharp_stocksharp\Algo\Indicators\LinearRegSlope.cs,LinearRegSlope,The following statement contains a magic number: Length = 11;
Magic Number,StockSharp.Algo.Indicators,Lowest,C:\repos\stocksharp_stocksharp\Algo\Indicators\Lowest.cs,Lowest,The following statement contains a magic number: Length = 5;
Magic Number,StockSharp.Algo.Indicators,MeanDeviation,C:\repos\stocksharp_stocksharp\Algo\Indicators\MeanDeviation.cs,MeanDeviation,The following statement contains a magic number: Length = 5;
Magic Number,StockSharp.Algo.Indicators,MedianPrice,C:\repos\stocksharp_stocksharp\Algo\Indicators\MedianPrice.cs,OnProcess,The following statement contains a magic number: return new DecimalIndicatorValue(this' (candle.HighPrice + candle.LowPrice) / 2);
Magic Number,StockSharp.Algo.Indicators,QStick,C:\repos\stocksharp_stocksharp\Algo\Indicators\QStick.cs,QStick,The following statement contains a magic number: Length = 15;
Magic Number,StockSharp.Algo.Indicators,RSquared,C:\repos\stocksharp_stocksharp\Algo\Indicators\RSquared.cs,RSquared,The following statement contains a magic number: Length = 10;
Magic Number,StockSharp.Algo.Indicators,StandardError,C:\repos\stocksharp_stocksharp\Algo\Indicators\StandardError.cs,StandardError,The following statement contains a magic number: Length = 10;
Magic Number,StockSharp.Algo.Indicators,StandardError,C:\repos\stocksharp_stocksharp\Algo\Indicators\StandardError.cs,OnProcess,The following statement contains a magic number: if (IsFormed)  			{  				//x - независимая переменная' номер значения в буфере  				//y - зависимая переменная - значения из буфера  				var sumX = 0m; //сумма x  				var sumY = 0m; //сумма y  				var sumXy = 0m; //сумма x*y  				var sumX2 = 0m; //сумма x^2    				for (int i = 0; i < Length; i++)  				{  					sumX += i;  					sumY += buff.ElementAt(i);  					sumXy += i * buff.ElementAt(i);  					sumX2 += i * i;  				}    				//коэффициент при независимой переменной  				var divisor = Length * sumX2 - sumX * sumX;  				if (divisor == 0) _slope = 0;  				else _slope = (Length * sumXy - sumX * sumY) / divisor;    				//свободный член  				var b = (sumY - _slope * sumX) / Length;    				//счиаем сумму квадратов ошибок  				var sumErr2 = 0m; //сумма квадратов ошибок    				for (int i = 0; i < Length; i++)  				{  					var y = buff.ElementAt(i); // значение  					var yEst = _slope * i + b; // оценка по регрессии  					sumErr2 += (y - yEst) * (y - yEst);  				}    				//Стандартная ошибка  				if (Length == 2)  				{  					return new DecimalIndicatorValue(this' 0); //если всего 2 точки' то прямая проходит через них и стандартная ошибка равна нулю.  				}  				else  				{  					return new DecimalIndicatorValue(this' (decimal)Math.Sqrt((double)(sumErr2 / (Length - 2))));  				}  			}
Magic Number,StockSharp.Algo.Indicators,StandardError,C:\repos\stocksharp_stocksharp\Algo\Indicators\StandardError.cs,OnProcess,The following statement contains a magic number: if (IsFormed)  			{  				//x - независимая переменная' номер значения в буфере  				//y - зависимая переменная - значения из буфера  				var sumX = 0m; //сумма x  				var sumY = 0m; //сумма y  				var sumXy = 0m; //сумма x*y  				var sumX2 = 0m; //сумма x^2    				for (int i = 0; i < Length; i++)  				{  					sumX += i;  					sumY += buff.ElementAt(i);  					sumXy += i * buff.ElementAt(i);  					sumX2 += i * i;  				}    				//коэффициент при независимой переменной  				var divisor = Length * sumX2 - sumX * sumX;  				if (divisor == 0) _slope = 0;  				else _slope = (Length * sumXy - sumX * sumY) / divisor;    				//свободный член  				var b = (sumY - _slope * sumX) / Length;    				//счиаем сумму квадратов ошибок  				var sumErr2 = 0m; //сумма квадратов ошибок    				for (int i = 0; i < Length; i++)  				{  					var y = buff.ElementAt(i); // значение  					var yEst = _slope * i + b; // оценка по регрессии  					sumErr2 += (y - yEst) * (y - yEst);  				}    				//Стандартная ошибка  				if (Length == 2)  				{  					return new DecimalIndicatorValue(this' 0); //если всего 2 точки' то прямая проходит через них и стандартная ошибка равна нулю.  				}  				else  				{  					return new DecimalIndicatorValue(this' (decimal)Math.Sqrt((double)(sumErr2 / (Length - 2))));  				}  			}
Magic Number,StockSharp.Algo.Indicators,Sum,C:\repos\stocksharp_stocksharp\Algo\Indicators\Sum.cs,Sum,The following statement contains a magic number: Length = 15;
Magic Number,StockSharp.Algo.Indicators,VerticalHorizontalFilter,C:\repos\stocksharp_stocksharp\Algo\Indicators\VerticalHorizontalFilter.cs,VerticalHorizontalFilter,The following statement contains a magic number: Length = 15;
Magic Number,StockSharp.Algo.Indicators,Vidya,C:\repos\stocksharp_stocksharp\Algo\Indicators\Vidya.cs,Vidya,The following statement contains a magic number: Length = 15;
Magic Number,StockSharp.Algo.Indicators,ChandeMomentumOscillator,C:\repos\stocksharp_stocksharp\Algo\Indicators\ChandeMomentumOscillator.cs,ChandeMomentumOscillator,The following statement contains a magic number: Length = 15;
Magic Number,StockSharp.Algo.Indicators,CommodityChannelIndex,C:\repos\stocksharp_stocksharp\Algo\Indicators\CommodityChannelIndex.cs,CommodityChannelIndex,The following statement contains a magic number: Length = 15;
Magic Number,StockSharp.Algo.Indicators,DetrendedPriceOscillator,C:\repos\stocksharp_stocksharp\Algo\Indicators\DetrendedPriceOscillator.cs,DetrendedPriceOscillator,The following statement contains a magic number: Length = 3;
Magic Number,StockSharp.Algo.Indicators,DetrendedPriceOscillator,C:\repos\stocksharp_stocksharp\Algo\Indicators\DetrendedPriceOscillator.cs,Reset,The following statement contains a magic number: _sma.Length = (Length - 2) * 2;
Magic Number,StockSharp.Algo.Indicators,DetrendedPriceOscillator,C:\repos\stocksharp_stocksharp\Algo\Indicators\DetrendedPriceOscillator.cs,Reset,The following statement contains a magic number: _sma.Length = (Length - 2) * 2;
Magic Number,StockSharp.Algo.Indicators,DiPart,C:\repos\stocksharp_stocksharp\Algo\Indicators\DiPart.cs,DiPart,The following statement contains a magic number: Length = 5;
Magic Number,StockSharp.Algo.Indicators,DirectionalIndex,C:\repos\stocksharp_stocksharp\Algo\Indicators\DirectionalIndex.cs,OnProcess,The following statement contains a magic number: value.InnerValues.Add(this' value.SetValue(this' diSum != 0m ? (100 * diDiff / diSum) : 0m));
Magic Number,StockSharp.Algo.Indicators,Ichimoku,C:\repos\stocksharp_stocksharp\Algo\Indicators\Ichimoku.cs,Ichimoku,The following statement contains a magic number: InnerIndicators.Add(SenkouB = new IchimokuSenkouBLine(Kijun) { Length = 52 });
Magic Number,StockSharp.Algo.Indicators,IchimokuLine,C:\repos\stocksharp_stocksharp\Algo\Indicators\IchimokuLine.cs,OnProcess,The following statement contains a magic number: if (IsFormed)  			{  				// рассчитываем значение  				var max = buff.Max(t => t.HighPrice);  				var min = buff.Min(t => t.LowPrice);    				return new DecimalIndicatorValue(this' (max + min) / 2);  			}
Magic Number,StockSharp.Algo.Indicators,IchimokuSenkouALine,C:\repos\stocksharp_stocksharp\Algo\Indicators\IchimokuSenkouALine.cs,OnProcess,The following statement contains a magic number: if (Tenkan.IsFormed && Kijun.IsFormed)  			{  				if (input.IsFinal)  					Buffer.Add((Tenkan.GetCurrentValue() + Kijun.GetCurrentValue()) / 2);    				if (IsFormed)  					result = Buffer[0];    				if (Buffer.Count > Kijun.Length && input.IsFinal)  				{  					Buffer.RemoveAt(0);  				}  			}
Magic Number,StockSharp.Algo.Indicators,IchimokuSenkouBLine,C:\repos\stocksharp_stocksharp\Algo\Indicators\IchimokuSenkouBLine.cs,OnProcess,The following statement contains a magic number: if (buff.Count >= Length)  			{  				// рассчитываем значение  				var max = buff.Max(t => t.HighPrice);  				var min = buff.Min(t => t.LowPrice);    				if (Kijun.IsFormed && input.IsFinal)  				    Buffer.Add((max + min) / 2);    				if (Buffer.Count >= Kijun.Length)  					result = Buffer[0];    				if (Buffer.Count > Kijun.Length)  				{  					Buffer.RemoveAt(0);  				}  			}
Magic Number,StockSharp.Algo.Indicators,Momentum,C:\repos\stocksharp_stocksharp\Algo\Indicators\Momentum.cs,Momentum,The following statement contains a magic number: Length = 5;
Magic Number,StockSharp.Algo.Indicators,RateOfChange,C:\repos\stocksharp_stocksharp\Algo\Indicators\RateOfChange.cs,OnProcess,The following statement contains a magic number: if (Buffer.Count > 0 && Buffer[0] != 0)  				return new DecimalIndicatorValue(this' result.GetValue<decimal>() / Buffer[0] * 100);
Magic Number,StockSharp.Algo.Indicators,RelativeStrengthIndex,C:\repos\stocksharp_stocksharp\Algo\Indicators\RelativeStrengthIndex.cs,RelativeStrengthIndex,The following statement contains a magic number: Length = 15;
Magic Number,StockSharp.Algo.Indicators,RelativeVigorIndexAverage,C:\repos\stocksharp_stocksharp\Algo\Indicators\RelativeVigorIndexAverage.cs,RelativeVigorIndexAverage,The following statement contains a magic number: Length = 4;
Magic Number,StockSharp.Algo.Indicators,RelativeVigorIndexAverage,C:\repos\stocksharp_stocksharp\Algo\Indicators\RelativeVigorIndexAverage.cs,OnProcess,The following statement contains a magic number: if (IsFormed)  			{  				decimal valueUp' valueDn;    				if (input.IsFinal)  				{  					valueUp = ((_buffer[0].ClosePrice - _buffer[0].OpenPrice) +  					           2*(_buffer[1].ClosePrice - _buffer[1].OpenPrice) +  					           2*(_buffer[2].ClosePrice - _buffer[2].OpenPrice) +  					           (_buffer[3].ClosePrice - _buffer[3].OpenPrice))/6m;    					valueDn = ((_buffer[0].HighPrice - _buffer[0].LowPrice) +  					           2*(_buffer[1].HighPrice - _buffer[1].LowPrice) +  					           2*(_buffer[2].HighPrice - _buffer[2].LowPrice) +  					           (_buffer[3].HighPrice - _buffer[3].LowPrice))/6m;  				}  				else  				{  					valueUp = ((_buffer[1].ClosePrice - _buffer[1].OpenPrice) +  					           2*(_buffer[2].ClosePrice - _buffer[2].OpenPrice) +  					           2*(_buffer[3].ClosePrice - _buffer[3].OpenPrice) +  							   (newValue.ClosePrice - newValue.OpenPrice)) / 6m;    					valueDn = ((_buffer[1].HighPrice - _buffer[1].LowPrice) +  					           2*(_buffer[2].HighPrice - _buffer[2].LowPrice) +  					           2*(_buffer[3].HighPrice - _buffer[3].LowPrice) +  							   (newValue.HighPrice - newValue.LowPrice)) / 6m;  				}    				return new DecimalIndicatorValue(this' valueDn == decimal.Zero   					? valueUp   					: valueUp / valueDn);  			}
Magic Number,StockSharp.Algo.Indicators,RelativeVigorIndexAverage,C:\repos\stocksharp_stocksharp\Algo\Indicators\RelativeVigorIndexAverage.cs,OnProcess,The following statement contains a magic number: if (IsFormed)  			{  				decimal valueUp' valueDn;    				if (input.IsFinal)  				{  					valueUp = ((_buffer[0].ClosePrice - _buffer[0].OpenPrice) +  					           2*(_buffer[1].ClosePrice - _buffer[1].OpenPrice) +  					           2*(_buffer[2].ClosePrice - _buffer[2].OpenPrice) +  					           (_buffer[3].ClosePrice - _buffer[3].OpenPrice))/6m;    					valueDn = ((_buffer[0].HighPrice - _buffer[0].LowPrice) +  					           2*(_buffer[1].HighPrice - _buffer[1].LowPrice) +  					           2*(_buffer[2].HighPrice - _buffer[2].LowPrice) +  					           (_buffer[3].HighPrice - _buffer[3].LowPrice))/6m;  				}  				else  				{  					valueUp = ((_buffer[1].ClosePrice - _buffer[1].OpenPrice) +  					           2*(_buffer[2].ClosePrice - _buffer[2].OpenPrice) +  					           2*(_buffer[3].ClosePrice - _buffer[3].OpenPrice) +  							   (newValue.ClosePrice - newValue.OpenPrice)) / 6m;    					valueDn = ((_buffer[1].HighPrice - _buffer[1].LowPrice) +  					           2*(_buffer[2].HighPrice - _buffer[2].LowPrice) +  					           2*(_buffer[3].HighPrice - _buffer[3].LowPrice) +  							   (newValue.HighPrice - newValue.LowPrice)) / 6m;  				}    				return new DecimalIndicatorValue(this' valueDn == decimal.Zero   					? valueUp   					: valueUp / valueDn);  			}
Magic Number,StockSharp.Algo.Indicators,RelativeVigorIndexAverage,C:\repos\stocksharp_stocksharp\Algo\Indicators\RelativeVigorIndexAverage.cs,OnProcess,The following statement contains a magic number: if (IsFormed)  			{  				decimal valueUp' valueDn;    				if (input.IsFinal)  				{  					valueUp = ((_buffer[0].ClosePrice - _buffer[0].OpenPrice) +  					           2*(_buffer[1].ClosePrice - _buffer[1].OpenPrice) +  					           2*(_buffer[2].ClosePrice - _buffer[2].OpenPrice) +  					           (_buffer[3].ClosePrice - _buffer[3].OpenPrice))/6m;    					valueDn = ((_buffer[0].HighPrice - _buffer[0].LowPrice) +  					           2*(_buffer[1].HighPrice - _buffer[1].LowPrice) +  					           2*(_buffer[2].HighPrice - _buffer[2].LowPrice) +  					           (_buffer[3].HighPrice - _buffer[3].LowPrice))/6m;  				}  				else  				{  					valueUp = ((_buffer[1].ClosePrice - _buffer[1].OpenPrice) +  					           2*(_buffer[2].ClosePrice - _buffer[2].OpenPrice) +  					           2*(_buffer[3].ClosePrice - _buffer[3].OpenPrice) +  							   (newValue.ClosePrice - newValue.OpenPrice)) / 6m;    					valueDn = ((_buffer[1].HighPrice - _buffer[1].LowPrice) +  					           2*(_buffer[2].HighPrice - _buffer[2].LowPrice) +  					           2*(_buffer[3].HighPrice - _buffer[3].LowPrice) +  							   (newValue.HighPrice - newValue.LowPrice)) / 6m;  				}    				return new DecimalIndicatorValue(this' valueDn == decimal.Zero   					? valueUp   					: valueUp / valueDn);  			}
Magic Number,StockSharp.Algo.Indicators,RelativeVigorIndexAverage,C:\repos\stocksharp_stocksharp\Algo\Indicators\RelativeVigorIndexAverage.cs,OnProcess,The following statement contains a magic number: if (IsFormed)  			{  				decimal valueUp' valueDn;    				if (input.IsFinal)  				{  					valueUp = ((_buffer[0].ClosePrice - _buffer[0].OpenPrice) +  					           2*(_buffer[1].ClosePrice - _buffer[1].OpenPrice) +  					           2*(_buffer[2].ClosePrice - _buffer[2].OpenPrice) +  					           (_buffer[3].ClosePrice - _buffer[3].OpenPrice))/6m;    					valueDn = ((_buffer[0].HighPrice - _buffer[0].LowPrice) +  					           2*(_buffer[1].HighPrice - _buffer[1].LowPrice) +  					           2*(_buffer[2].HighPrice - _buffer[2].LowPrice) +  					           (_buffer[3].HighPrice - _buffer[3].LowPrice))/6m;  				}  				else  				{  					valueUp = ((_buffer[1].ClosePrice - _buffer[1].OpenPrice) +  					           2*(_buffer[2].ClosePrice - _buffer[2].OpenPrice) +  					           2*(_buffer[3].ClosePrice - _buffer[3].OpenPrice) +  							   (newValue.ClosePrice - newValue.OpenPrice)) / 6m;    					valueDn = ((_buffer[1].HighPrice - _buffer[1].LowPrice) +  					           2*(_buffer[2].HighPrice - _buffer[2].LowPrice) +  					           2*(_buffer[3].HighPrice - _buffer[3].LowPrice) +  							   (newValue.HighPrice - newValue.LowPrice)) / 6m;  				}    				return new DecimalIndicatorValue(this' valueDn == decimal.Zero   					? valueUp   					: valueUp / valueDn);  			}
Magic Number,StockSharp.Algo.Indicators,RelativeVigorIndexAverage,C:\repos\stocksharp_stocksharp\Algo\Indicators\RelativeVigorIndexAverage.cs,OnProcess,The following statement contains a magic number: if (IsFormed)  			{  				decimal valueUp' valueDn;    				if (input.IsFinal)  				{  					valueUp = ((_buffer[0].ClosePrice - _buffer[0].OpenPrice) +  					           2*(_buffer[1].ClosePrice - _buffer[1].OpenPrice) +  					           2*(_buffer[2].ClosePrice - _buffer[2].OpenPrice) +  					           (_buffer[3].ClosePrice - _buffer[3].OpenPrice))/6m;    					valueDn = ((_buffer[0].HighPrice - _buffer[0].LowPrice) +  					           2*(_buffer[1].HighPrice - _buffer[1].LowPrice) +  					           2*(_buffer[2].HighPrice - _buffer[2].LowPrice) +  					           (_buffer[3].HighPrice - _buffer[3].LowPrice))/6m;  				}  				else  				{  					valueUp = ((_buffer[1].ClosePrice - _buffer[1].OpenPrice) +  					           2*(_buffer[2].ClosePrice - _buffer[2].OpenPrice) +  					           2*(_buffer[3].ClosePrice - _buffer[3].OpenPrice) +  							   (newValue.ClosePrice - newValue.OpenPrice)) / 6m;    					valueDn = ((_buffer[1].HighPrice - _buffer[1].LowPrice) +  					           2*(_buffer[2].HighPrice - _buffer[2].LowPrice) +  					           2*(_buffer[3].HighPrice - _buffer[3].LowPrice) +  							   (newValue.HighPrice - newValue.LowPrice)) / 6m;  				}    				return new DecimalIndicatorValue(this' valueDn == decimal.Zero   					? valueUp   					: valueUp / valueDn);  			}
Magic Number,StockSharp.Algo.Indicators,RelativeVigorIndexAverage,C:\repos\stocksharp_stocksharp\Algo\Indicators\RelativeVigorIndexAverage.cs,OnProcess,The following statement contains a magic number: if (IsFormed)  			{  				decimal valueUp' valueDn;    				if (input.IsFinal)  				{  					valueUp = ((_buffer[0].ClosePrice - _buffer[0].OpenPrice) +  					           2*(_buffer[1].ClosePrice - _buffer[1].OpenPrice) +  					           2*(_buffer[2].ClosePrice - _buffer[2].OpenPrice) +  					           (_buffer[3].ClosePrice - _buffer[3].OpenPrice))/6m;    					valueDn = ((_buffer[0].HighPrice - _buffer[0].LowPrice) +  					           2*(_buffer[1].HighPrice - _buffer[1].LowPrice) +  					           2*(_buffer[2].HighPrice - _buffer[2].LowPrice) +  					           (_buffer[3].HighPrice - _buffer[3].LowPrice))/6m;  				}  				else  				{  					valueUp = ((_buffer[1].ClosePrice - _buffer[1].OpenPrice) +  					           2*(_buffer[2].ClosePrice - _buffer[2].OpenPrice) +  					           2*(_buffer[3].ClosePrice - _buffer[3].OpenPrice) +  							   (newValue.ClosePrice - newValue.OpenPrice)) / 6m;    					valueDn = ((_buffer[1].HighPrice - _buffer[1].LowPrice) +  					           2*(_buffer[2].HighPrice - _buffer[2].LowPrice) +  					           2*(_buffer[3].HighPrice - _buffer[3].LowPrice) +  							   (newValue.HighPrice - newValue.LowPrice)) / 6m;  				}    				return new DecimalIndicatorValue(this' valueDn == decimal.Zero   					? valueUp   					: valueUp / valueDn);  			}
Magic Number,StockSharp.Algo.Indicators,RelativeVigorIndexAverage,C:\repos\stocksharp_stocksharp\Algo\Indicators\RelativeVigorIndexAverage.cs,OnProcess,The following statement contains a magic number: if (IsFormed)  			{  				decimal valueUp' valueDn;    				if (input.IsFinal)  				{  					valueUp = ((_buffer[0].ClosePrice - _buffer[0].OpenPrice) +  					           2*(_buffer[1].ClosePrice - _buffer[1].OpenPrice) +  					           2*(_buffer[2].ClosePrice - _buffer[2].OpenPrice) +  					           (_buffer[3].ClosePrice - _buffer[3].OpenPrice))/6m;    					valueDn = ((_buffer[0].HighPrice - _buffer[0].LowPrice) +  					           2*(_buffer[1].HighPrice - _buffer[1].LowPrice) +  					           2*(_buffer[2].HighPrice - _buffer[2].LowPrice) +  					           (_buffer[3].HighPrice - _buffer[3].LowPrice))/6m;  				}  				else  				{  					valueUp = ((_buffer[1].ClosePrice - _buffer[1].OpenPrice) +  					           2*(_buffer[2].ClosePrice - _buffer[2].OpenPrice) +  					           2*(_buffer[3].ClosePrice - _buffer[3].OpenPrice) +  							   (newValue.ClosePrice - newValue.OpenPrice)) / 6m;    					valueDn = ((_buffer[1].HighPrice - _buffer[1].LowPrice) +  					           2*(_buffer[2].HighPrice - _buffer[2].LowPrice) +  					           2*(_buffer[3].HighPrice - _buffer[3].LowPrice) +  							   (newValue.HighPrice - newValue.LowPrice)) / 6m;  				}    				return new DecimalIndicatorValue(this' valueDn == decimal.Zero   					? valueUp   					: valueUp / valueDn);  			}
Magic Number,StockSharp.Algo.Indicators,RelativeVigorIndexAverage,C:\repos\stocksharp_stocksharp\Algo\Indicators\RelativeVigorIndexAverage.cs,OnProcess,The following statement contains a magic number: if (IsFormed)  			{  				decimal valueUp' valueDn;    				if (input.IsFinal)  				{  					valueUp = ((_buffer[0].ClosePrice - _buffer[0].OpenPrice) +  					           2*(_buffer[1].ClosePrice - _buffer[1].OpenPrice) +  					           2*(_buffer[2].ClosePrice - _buffer[2].OpenPrice) +  					           (_buffer[3].ClosePrice - _buffer[3].OpenPrice))/6m;    					valueDn = ((_buffer[0].HighPrice - _buffer[0].LowPrice) +  					           2*(_buffer[1].HighPrice - _buffer[1].LowPrice) +  					           2*(_buffer[2].HighPrice - _buffer[2].LowPrice) +  					           (_buffer[3].HighPrice - _buffer[3].LowPrice))/6m;  				}  				else  				{  					valueUp = ((_buffer[1].ClosePrice - _buffer[1].OpenPrice) +  					           2*(_buffer[2].ClosePrice - _buffer[2].OpenPrice) +  					           2*(_buffer[3].ClosePrice - _buffer[3].OpenPrice) +  							   (newValue.ClosePrice - newValue.OpenPrice)) / 6m;    					valueDn = ((_buffer[1].HighPrice - _buffer[1].LowPrice) +  					           2*(_buffer[2].HighPrice - _buffer[2].LowPrice) +  					           2*(_buffer[3].HighPrice - _buffer[3].LowPrice) +  							   (newValue.HighPrice - newValue.LowPrice)) / 6m;  				}    				return new DecimalIndicatorValue(this' valueDn == decimal.Zero   					? valueUp   					: valueUp / valueDn);  			}
Magic Number,StockSharp.Algo.Indicators,RelativeVigorIndexAverage,C:\repos\stocksharp_stocksharp\Algo\Indicators\RelativeVigorIndexAverage.cs,OnProcess,The following statement contains a magic number: if (IsFormed)  			{  				decimal valueUp' valueDn;    				if (input.IsFinal)  				{  					valueUp = ((_buffer[0].ClosePrice - _buffer[0].OpenPrice) +  					           2*(_buffer[1].ClosePrice - _buffer[1].OpenPrice) +  					           2*(_buffer[2].ClosePrice - _buffer[2].OpenPrice) +  					           (_buffer[3].ClosePrice - _buffer[3].OpenPrice))/6m;    					valueDn = ((_buffer[0].HighPrice - _buffer[0].LowPrice) +  					           2*(_buffer[1].HighPrice - _buffer[1].LowPrice) +  					           2*(_buffer[2].HighPrice - _buffer[2].LowPrice) +  					           (_buffer[3].HighPrice - _buffer[3].LowPrice))/6m;  				}  				else  				{  					valueUp = ((_buffer[1].ClosePrice - _buffer[1].OpenPrice) +  					           2*(_buffer[2].ClosePrice - _buffer[2].OpenPrice) +  					           2*(_buffer[3].ClosePrice - _buffer[3].OpenPrice) +  							   (newValue.ClosePrice - newValue.OpenPrice)) / 6m;    					valueDn = ((_buffer[1].HighPrice - _buffer[1].LowPrice) +  					           2*(_buffer[2].HighPrice - _buffer[2].LowPrice) +  					           2*(_buffer[3].HighPrice - _buffer[3].LowPrice) +  							   (newValue.HighPrice - newValue.LowPrice)) / 6m;  				}    				return new DecimalIndicatorValue(this' valueDn == decimal.Zero   					? valueUp   					: valueUp / valueDn);  			}
Magic Number,StockSharp.Algo.Indicators,RelativeVigorIndexAverage,C:\repos\stocksharp_stocksharp\Algo\Indicators\RelativeVigorIndexAverage.cs,OnProcess,The following statement contains a magic number: if (IsFormed)  			{  				decimal valueUp' valueDn;    				if (input.IsFinal)  				{  					valueUp = ((_buffer[0].ClosePrice - _buffer[0].OpenPrice) +  					           2*(_buffer[1].ClosePrice - _buffer[1].OpenPrice) +  					           2*(_buffer[2].ClosePrice - _buffer[2].OpenPrice) +  					           (_buffer[3].ClosePrice - _buffer[3].OpenPrice))/6m;    					valueDn = ((_buffer[0].HighPrice - _buffer[0].LowPrice) +  					           2*(_buffer[1].HighPrice - _buffer[1].LowPrice) +  					           2*(_buffer[2].HighPrice - _buffer[2].LowPrice) +  					           (_buffer[3].HighPrice - _buffer[3].LowPrice))/6m;  				}  				else  				{  					valueUp = ((_buffer[1].ClosePrice - _buffer[1].OpenPrice) +  					           2*(_buffer[2].ClosePrice - _buffer[2].OpenPrice) +  					           2*(_buffer[3].ClosePrice - _buffer[3].OpenPrice) +  							   (newValue.ClosePrice - newValue.OpenPrice)) / 6m;    					valueDn = ((_buffer[1].HighPrice - _buffer[1].LowPrice) +  					           2*(_buffer[2].HighPrice - _buffer[2].LowPrice) +  					           2*(_buffer[3].HighPrice - _buffer[3].LowPrice) +  							   (newValue.HighPrice - newValue.LowPrice)) / 6m;  				}    				return new DecimalIndicatorValue(this' valueDn == decimal.Zero   					? valueUp   					: valueUp / valueDn);  			}
Magic Number,StockSharp.Algo.Indicators,RelativeVigorIndexAverage,C:\repos\stocksharp_stocksharp\Algo\Indicators\RelativeVigorIndexAverage.cs,OnProcess,The following statement contains a magic number: if (IsFormed)  			{  				decimal valueUp' valueDn;    				if (input.IsFinal)  				{  					valueUp = ((_buffer[0].ClosePrice - _buffer[0].OpenPrice) +  					           2*(_buffer[1].ClosePrice - _buffer[1].OpenPrice) +  					           2*(_buffer[2].ClosePrice - _buffer[2].OpenPrice) +  					           (_buffer[3].ClosePrice - _buffer[3].OpenPrice))/6m;    					valueDn = ((_buffer[0].HighPrice - _buffer[0].LowPrice) +  					           2*(_buffer[1].HighPrice - _buffer[1].LowPrice) +  					           2*(_buffer[2].HighPrice - _buffer[2].LowPrice) +  					           (_buffer[3].HighPrice - _buffer[3].LowPrice))/6m;  				}  				else  				{  					valueUp = ((_buffer[1].ClosePrice - _buffer[1].OpenPrice) +  					           2*(_buffer[2].ClosePrice - _buffer[2].OpenPrice) +  					           2*(_buffer[3].ClosePrice - _buffer[3].OpenPrice) +  							   (newValue.ClosePrice - newValue.OpenPrice)) / 6m;    					valueDn = ((_buffer[1].HighPrice - _buffer[1].LowPrice) +  					           2*(_buffer[2].HighPrice - _buffer[2].LowPrice) +  					           2*(_buffer[3].HighPrice - _buffer[3].LowPrice) +  							   (newValue.HighPrice - newValue.LowPrice)) / 6m;  				}    				return new DecimalIndicatorValue(this' valueDn == decimal.Zero   					? valueUp   					: valueUp / valueDn);  			}
Magic Number,StockSharp.Algo.Indicators,RelativeVigorIndexAverage,C:\repos\stocksharp_stocksharp\Algo\Indicators\RelativeVigorIndexAverage.cs,OnProcess,The following statement contains a magic number: if (IsFormed)  			{  				decimal valueUp' valueDn;    				if (input.IsFinal)  				{  					valueUp = ((_buffer[0].ClosePrice - _buffer[0].OpenPrice) +  					           2*(_buffer[1].ClosePrice - _buffer[1].OpenPrice) +  					           2*(_buffer[2].ClosePrice - _buffer[2].OpenPrice) +  					           (_buffer[3].ClosePrice - _buffer[3].OpenPrice))/6m;    					valueDn = ((_buffer[0].HighPrice - _buffer[0].LowPrice) +  					           2*(_buffer[1].HighPrice - _buffer[1].LowPrice) +  					           2*(_buffer[2].HighPrice - _buffer[2].LowPrice) +  					           (_buffer[3].HighPrice - _buffer[3].LowPrice))/6m;  				}  				else  				{  					valueUp = ((_buffer[1].ClosePrice - _buffer[1].OpenPrice) +  					           2*(_buffer[2].ClosePrice - _buffer[2].OpenPrice) +  					           2*(_buffer[3].ClosePrice - _buffer[3].OpenPrice) +  							   (newValue.ClosePrice - newValue.OpenPrice)) / 6m;    					valueDn = ((_buffer[1].HighPrice - _buffer[1].LowPrice) +  					           2*(_buffer[2].HighPrice - _buffer[2].LowPrice) +  					           2*(_buffer[3].HighPrice - _buffer[3].LowPrice) +  							   (newValue.HighPrice - newValue.LowPrice)) / 6m;  				}    				return new DecimalIndicatorValue(this' valueDn == decimal.Zero   					? valueUp   					: valueUp / valueDn);  			}
Magic Number,StockSharp.Algo.Indicators,RelativeVigorIndexAverage,C:\repos\stocksharp_stocksharp\Algo\Indicators\RelativeVigorIndexAverage.cs,OnProcess,The following statement contains a magic number: if (IsFormed)  			{  				decimal valueUp' valueDn;    				if (input.IsFinal)  				{  					valueUp = ((_buffer[0].ClosePrice - _buffer[0].OpenPrice) +  					           2*(_buffer[1].ClosePrice - _buffer[1].OpenPrice) +  					           2*(_buffer[2].ClosePrice - _buffer[2].OpenPrice) +  					           (_buffer[3].ClosePrice - _buffer[3].OpenPrice))/6m;    					valueDn = ((_buffer[0].HighPrice - _buffer[0].LowPrice) +  					           2*(_buffer[1].HighPrice - _buffer[1].LowPrice) +  					           2*(_buffer[2].HighPrice - _buffer[2].LowPrice) +  					           (_buffer[3].HighPrice - _buffer[3].LowPrice))/6m;  				}  				else  				{  					valueUp = ((_buffer[1].ClosePrice - _buffer[1].OpenPrice) +  					           2*(_buffer[2].ClosePrice - _buffer[2].OpenPrice) +  					           2*(_buffer[3].ClosePrice - _buffer[3].OpenPrice) +  							   (newValue.ClosePrice - newValue.OpenPrice)) / 6m;    					valueDn = ((_buffer[1].HighPrice - _buffer[1].LowPrice) +  					           2*(_buffer[2].HighPrice - _buffer[2].LowPrice) +  					           2*(_buffer[3].HighPrice - _buffer[3].LowPrice) +  							   (newValue.HighPrice - newValue.LowPrice)) / 6m;  				}    				return new DecimalIndicatorValue(this' valueDn == decimal.Zero   					? valueUp   					: valueUp / valueDn);  			}
Magic Number,StockSharp.Algo.Indicators,RelativeVigorIndexAverage,C:\repos\stocksharp_stocksharp\Algo\Indicators\RelativeVigorIndexAverage.cs,OnProcess,The following statement contains a magic number: if (IsFormed)  			{  				decimal valueUp' valueDn;    				if (input.IsFinal)  				{  					valueUp = ((_buffer[0].ClosePrice - _buffer[0].OpenPrice) +  					           2*(_buffer[1].ClosePrice - _buffer[1].OpenPrice) +  					           2*(_buffer[2].ClosePrice - _buffer[2].OpenPrice) +  					           (_buffer[3].ClosePrice - _buffer[3].OpenPrice))/6m;    					valueDn = ((_buffer[0].HighPrice - _buffer[0].LowPrice) +  					           2*(_buffer[1].HighPrice - _buffer[1].LowPrice) +  					           2*(_buffer[2].HighPrice - _buffer[2].LowPrice) +  					           (_buffer[3].HighPrice - _buffer[3].LowPrice))/6m;  				}  				else  				{  					valueUp = ((_buffer[1].ClosePrice - _buffer[1].OpenPrice) +  					           2*(_buffer[2].ClosePrice - _buffer[2].OpenPrice) +  					           2*(_buffer[3].ClosePrice - _buffer[3].OpenPrice) +  							   (newValue.ClosePrice - newValue.OpenPrice)) / 6m;    					valueDn = ((_buffer[1].HighPrice - _buffer[1].LowPrice) +  					           2*(_buffer[2].HighPrice - _buffer[2].LowPrice) +  					           2*(_buffer[3].HighPrice - _buffer[3].LowPrice) +  							   (newValue.HighPrice - newValue.LowPrice)) / 6m;  				}    				return new DecimalIndicatorValue(this' valueDn == decimal.Zero   					? valueUp   					: valueUp / valueDn);  			}
Magic Number,StockSharp.Algo.Indicators,RelativeVigorIndexAverage,C:\repos\stocksharp_stocksharp\Algo\Indicators\RelativeVigorIndexAverage.cs,OnProcess,The following statement contains a magic number: if (IsFormed)  			{  				decimal valueUp' valueDn;    				if (input.IsFinal)  				{  					valueUp = ((_buffer[0].ClosePrice - _buffer[0].OpenPrice) +  					           2*(_buffer[1].ClosePrice - _buffer[1].OpenPrice) +  					           2*(_buffer[2].ClosePrice - _buffer[2].OpenPrice) +  					           (_buffer[3].ClosePrice - _buffer[3].OpenPrice))/6m;    					valueDn = ((_buffer[0].HighPrice - _buffer[0].LowPrice) +  					           2*(_buffer[1].HighPrice - _buffer[1].LowPrice) +  					           2*(_buffer[2].HighPrice - _buffer[2].LowPrice) +  					           (_buffer[3].HighPrice - _buffer[3].LowPrice))/6m;  				}  				else  				{  					valueUp = ((_buffer[1].ClosePrice - _buffer[1].OpenPrice) +  					           2*(_buffer[2].ClosePrice - _buffer[2].OpenPrice) +  					           2*(_buffer[3].ClosePrice - _buffer[3].OpenPrice) +  							   (newValue.ClosePrice - newValue.OpenPrice)) / 6m;    					valueDn = ((_buffer[1].HighPrice - _buffer[1].LowPrice) +  					           2*(_buffer[2].HighPrice - _buffer[2].LowPrice) +  					           2*(_buffer[3].HighPrice - _buffer[3].LowPrice) +  							   (newValue.HighPrice - newValue.LowPrice)) / 6m;  				}    				return new DecimalIndicatorValue(this' valueDn == decimal.Zero   					? valueUp   					: valueUp / valueDn);  			}
Magic Number,StockSharp.Algo.Indicators,RelativeVigorIndexAverage,C:\repos\stocksharp_stocksharp\Algo\Indicators\RelativeVigorIndexAverage.cs,OnProcess,The following statement contains a magic number: if (IsFormed)  			{  				decimal valueUp' valueDn;    				if (input.IsFinal)  				{  					valueUp = ((_buffer[0].ClosePrice - _buffer[0].OpenPrice) +  					           2*(_buffer[1].ClosePrice - _buffer[1].OpenPrice) +  					           2*(_buffer[2].ClosePrice - _buffer[2].OpenPrice) +  					           (_buffer[3].ClosePrice - _buffer[3].OpenPrice))/6m;    					valueDn = ((_buffer[0].HighPrice - _buffer[0].LowPrice) +  					           2*(_buffer[1].HighPrice - _buffer[1].LowPrice) +  					           2*(_buffer[2].HighPrice - _buffer[2].LowPrice) +  					           (_buffer[3].HighPrice - _buffer[3].LowPrice))/6m;  				}  				else  				{  					valueUp = ((_buffer[1].ClosePrice - _buffer[1].OpenPrice) +  					           2*(_buffer[2].ClosePrice - _buffer[2].OpenPrice) +  					           2*(_buffer[3].ClosePrice - _buffer[3].OpenPrice) +  							   (newValue.ClosePrice - newValue.OpenPrice)) / 6m;    					valueDn = ((_buffer[1].HighPrice - _buffer[1].LowPrice) +  					           2*(_buffer[2].HighPrice - _buffer[2].LowPrice) +  					           2*(_buffer[3].HighPrice - _buffer[3].LowPrice) +  							   (newValue.HighPrice - newValue.LowPrice)) / 6m;  				}    				return new DecimalIndicatorValue(this' valueDn == decimal.Zero   					? valueUp   					: valueUp / valueDn);  			}
Magic Number,StockSharp.Algo.Indicators,RelativeVigorIndexAverage,C:\repos\stocksharp_stocksharp\Algo\Indicators\RelativeVigorIndexAverage.cs,OnProcess,The following statement contains a magic number: if (IsFormed)  			{  				decimal valueUp' valueDn;    				if (input.IsFinal)  				{  					valueUp = ((_buffer[0].ClosePrice - _buffer[0].OpenPrice) +  					           2*(_buffer[1].ClosePrice - _buffer[1].OpenPrice) +  					           2*(_buffer[2].ClosePrice - _buffer[2].OpenPrice) +  					           (_buffer[3].ClosePrice - _buffer[3].OpenPrice))/6m;    					valueDn = ((_buffer[0].HighPrice - _buffer[0].LowPrice) +  					           2*(_buffer[1].HighPrice - _buffer[1].LowPrice) +  					           2*(_buffer[2].HighPrice - _buffer[2].LowPrice) +  					           (_buffer[3].HighPrice - _buffer[3].LowPrice))/6m;  				}  				else  				{  					valueUp = ((_buffer[1].ClosePrice - _buffer[1].OpenPrice) +  					           2*(_buffer[2].ClosePrice - _buffer[2].OpenPrice) +  					           2*(_buffer[3].ClosePrice - _buffer[3].OpenPrice) +  							   (newValue.ClosePrice - newValue.OpenPrice)) / 6m;    					valueDn = ((_buffer[1].HighPrice - _buffer[1].LowPrice) +  					           2*(_buffer[2].HighPrice - _buffer[2].LowPrice) +  					           2*(_buffer[3].HighPrice - _buffer[3].LowPrice) +  							   (newValue.HighPrice - newValue.LowPrice)) / 6m;  				}    				return new DecimalIndicatorValue(this' valueDn == decimal.Zero   					? valueUp   					: valueUp / valueDn);  			}
Magic Number,StockSharp.Algo.Indicators,RelativeVigorIndexAverage,C:\repos\stocksharp_stocksharp\Algo\Indicators\RelativeVigorIndexAverage.cs,OnProcess,The following statement contains a magic number: if (IsFormed)  			{  				decimal valueUp' valueDn;    				if (input.IsFinal)  				{  					valueUp = ((_buffer[0].ClosePrice - _buffer[0].OpenPrice) +  					           2*(_buffer[1].ClosePrice - _buffer[1].OpenPrice) +  					           2*(_buffer[2].ClosePrice - _buffer[2].OpenPrice) +  					           (_buffer[3].ClosePrice - _buffer[3].OpenPrice))/6m;    					valueDn = ((_buffer[0].HighPrice - _buffer[0].LowPrice) +  					           2*(_buffer[1].HighPrice - _buffer[1].LowPrice) +  					           2*(_buffer[2].HighPrice - _buffer[2].LowPrice) +  					           (_buffer[3].HighPrice - _buffer[3].LowPrice))/6m;  				}  				else  				{  					valueUp = ((_buffer[1].ClosePrice - _buffer[1].OpenPrice) +  					           2*(_buffer[2].ClosePrice - _buffer[2].OpenPrice) +  					           2*(_buffer[3].ClosePrice - _buffer[3].OpenPrice) +  							   (newValue.ClosePrice - newValue.OpenPrice)) / 6m;    					valueDn = ((_buffer[1].HighPrice - _buffer[1].LowPrice) +  					           2*(_buffer[2].HighPrice - _buffer[2].LowPrice) +  					           2*(_buffer[3].HighPrice - _buffer[3].LowPrice) +  							   (newValue.HighPrice - newValue.LowPrice)) / 6m;  				}    				return new DecimalIndicatorValue(this' valueDn == decimal.Zero   					? valueUp   					: valueUp / valueDn);  			}
Magic Number,StockSharp.Algo.Indicators,RelativeVigorIndexAverage,C:\repos\stocksharp_stocksharp\Algo\Indicators\RelativeVigorIndexAverage.cs,OnProcess,The following statement contains a magic number: if (IsFormed)  			{  				decimal valueUp' valueDn;    				if (input.IsFinal)  				{  					valueUp = ((_buffer[0].ClosePrice - _buffer[0].OpenPrice) +  					           2*(_buffer[1].ClosePrice - _buffer[1].OpenPrice) +  					           2*(_buffer[2].ClosePrice - _buffer[2].OpenPrice) +  					           (_buffer[3].ClosePrice - _buffer[3].OpenPrice))/6m;    					valueDn = ((_buffer[0].HighPrice - _buffer[0].LowPrice) +  					           2*(_buffer[1].HighPrice - _buffer[1].LowPrice) +  					           2*(_buffer[2].HighPrice - _buffer[2].LowPrice) +  					           (_buffer[3].HighPrice - _buffer[3].LowPrice))/6m;  				}  				else  				{  					valueUp = ((_buffer[1].ClosePrice - _buffer[1].OpenPrice) +  					           2*(_buffer[2].ClosePrice - _buffer[2].OpenPrice) +  					           2*(_buffer[3].ClosePrice - _buffer[3].OpenPrice) +  							   (newValue.ClosePrice - newValue.OpenPrice)) / 6m;    					valueDn = ((_buffer[1].HighPrice - _buffer[1].LowPrice) +  					           2*(_buffer[2].HighPrice - _buffer[2].LowPrice) +  					           2*(_buffer[3].HighPrice - _buffer[3].LowPrice) +  							   (newValue.HighPrice - newValue.LowPrice)) / 6m;  				}    				return new DecimalIndicatorValue(this' valueDn == decimal.Zero   					? valueUp   					: valueUp / valueDn);  			}
Magic Number,StockSharp.Algo.Indicators,RelativeVigorIndexAverage,C:\repos\stocksharp_stocksharp\Algo\Indicators\RelativeVigorIndexAverage.cs,OnProcess,The following statement contains a magic number: if (IsFormed)  			{  				decimal valueUp' valueDn;    				if (input.IsFinal)  				{  					valueUp = ((_buffer[0].ClosePrice - _buffer[0].OpenPrice) +  					           2*(_buffer[1].ClosePrice - _buffer[1].OpenPrice) +  					           2*(_buffer[2].ClosePrice - _buffer[2].OpenPrice) +  					           (_buffer[3].ClosePrice - _buffer[3].OpenPrice))/6m;    					valueDn = ((_buffer[0].HighPrice - _buffer[0].LowPrice) +  					           2*(_buffer[1].HighPrice - _buffer[1].LowPrice) +  					           2*(_buffer[2].HighPrice - _buffer[2].LowPrice) +  					           (_buffer[3].HighPrice - _buffer[3].LowPrice))/6m;  				}  				else  				{  					valueUp = ((_buffer[1].ClosePrice - _buffer[1].OpenPrice) +  					           2*(_buffer[2].ClosePrice - _buffer[2].OpenPrice) +  					           2*(_buffer[3].ClosePrice - _buffer[3].OpenPrice) +  							   (newValue.ClosePrice - newValue.OpenPrice)) / 6m;    					valueDn = ((_buffer[1].HighPrice - _buffer[1].LowPrice) +  					           2*(_buffer[2].HighPrice - _buffer[2].LowPrice) +  					           2*(_buffer[3].HighPrice - _buffer[3].LowPrice) +  							   (newValue.HighPrice - newValue.LowPrice)) / 6m;  				}    				return new DecimalIndicatorValue(this' valueDn == decimal.Zero   					? valueUp   					: valueUp / valueDn);  			}
Magic Number,StockSharp.Algo.Indicators,RelativeVigorIndexAverage,C:\repos\stocksharp_stocksharp\Algo\Indicators\RelativeVigorIndexAverage.cs,OnProcess,The following statement contains a magic number: if (IsFormed)  			{  				decimal valueUp' valueDn;    				if (input.IsFinal)  				{  					valueUp = ((_buffer[0].ClosePrice - _buffer[0].OpenPrice) +  					           2*(_buffer[1].ClosePrice - _buffer[1].OpenPrice) +  					           2*(_buffer[2].ClosePrice - _buffer[2].OpenPrice) +  					           (_buffer[3].ClosePrice - _buffer[3].OpenPrice))/6m;    					valueDn = ((_buffer[0].HighPrice - _buffer[0].LowPrice) +  					           2*(_buffer[1].HighPrice - _buffer[1].LowPrice) +  					           2*(_buffer[2].HighPrice - _buffer[2].LowPrice) +  					           (_buffer[3].HighPrice - _buffer[3].LowPrice))/6m;  				}  				else  				{  					valueUp = ((_buffer[1].ClosePrice - _buffer[1].OpenPrice) +  					           2*(_buffer[2].ClosePrice - _buffer[2].OpenPrice) +  					           2*(_buffer[3].ClosePrice - _buffer[3].OpenPrice) +  							   (newValue.ClosePrice - newValue.OpenPrice)) / 6m;    					valueDn = ((_buffer[1].HighPrice - _buffer[1].LowPrice) +  					           2*(_buffer[2].HighPrice - _buffer[2].LowPrice) +  					           2*(_buffer[3].HighPrice - _buffer[3].LowPrice) +  							   (newValue.HighPrice - newValue.LowPrice)) / 6m;  				}    				return new DecimalIndicatorValue(this' valueDn == decimal.Zero   					? valueUp   					: valueUp / valueDn);  			}
Magic Number,StockSharp.Algo.Indicators,RelativeVigorIndexAverage,C:\repos\stocksharp_stocksharp\Algo\Indicators\RelativeVigorIndexAverage.cs,OnProcess,The following statement contains a magic number: if (IsFormed)  			{  				decimal valueUp' valueDn;    				if (input.IsFinal)  				{  					valueUp = ((_buffer[0].ClosePrice - _buffer[0].OpenPrice) +  					           2*(_buffer[1].ClosePrice - _buffer[1].OpenPrice) +  					           2*(_buffer[2].ClosePrice - _buffer[2].OpenPrice) +  					           (_buffer[3].ClosePrice - _buffer[3].OpenPrice))/6m;    					valueDn = ((_buffer[0].HighPrice - _buffer[0].LowPrice) +  					           2*(_buffer[1].HighPrice - _buffer[1].LowPrice) +  					           2*(_buffer[2].HighPrice - _buffer[2].LowPrice) +  					           (_buffer[3].HighPrice - _buffer[3].LowPrice))/6m;  				}  				else  				{  					valueUp = ((_buffer[1].ClosePrice - _buffer[1].OpenPrice) +  					           2*(_buffer[2].ClosePrice - _buffer[2].OpenPrice) +  					           2*(_buffer[3].ClosePrice - _buffer[3].OpenPrice) +  							   (newValue.ClosePrice - newValue.OpenPrice)) / 6m;    					valueDn = ((_buffer[1].HighPrice - _buffer[1].LowPrice) +  					           2*(_buffer[2].HighPrice - _buffer[2].LowPrice) +  					           2*(_buffer[3].HighPrice - _buffer[3].LowPrice) +  							   (newValue.HighPrice - newValue.LowPrice)) / 6m;  				}    				return new DecimalIndicatorValue(this' valueDn == decimal.Zero   					? valueUp   					: valueUp / valueDn);  			}
Magic Number,StockSharp.Algo.Indicators,RelativeVigorIndexAverage,C:\repos\stocksharp_stocksharp\Algo\Indicators\RelativeVigorIndexAverage.cs,OnProcess,The following statement contains a magic number: if (IsFormed)  			{  				decimal valueUp' valueDn;    				if (input.IsFinal)  				{  					valueUp = ((_buffer[0].ClosePrice - _buffer[0].OpenPrice) +  					           2*(_buffer[1].ClosePrice - _buffer[1].OpenPrice) +  					           2*(_buffer[2].ClosePrice - _buffer[2].OpenPrice) +  					           (_buffer[3].ClosePrice - _buffer[3].OpenPrice))/6m;    					valueDn = ((_buffer[0].HighPrice - _buffer[0].LowPrice) +  					           2*(_buffer[1].HighPrice - _buffer[1].LowPrice) +  					           2*(_buffer[2].HighPrice - _buffer[2].LowPrice) +  					           (_buffer[3].HighPrice - _buffer[3].LowPrice))/6m;  				}  				else  				{  					valueUp = ((_buffer[1].ClosePrice - _buffer[1].OpenPrice) +  					           2*(_buffer[2].ClosePrice - _buffer[2].OpenPrice) +  					           2*(_buffer[3].ClosePrice - _buffer[3].OpenPrice) +  							   (newValue.ClosePrice - newValue.OpenPrice)) / 6m;    					valueDn = ((_buffer[1].HighPrice - _buffer[1].LowPrice) +  					           2*(_buffer[2].HighPrice - _buffer[2].LowPrice) +  					           2*(_buffer[3].HighPrice - _buffer[3].LowPrice) +  							   (newValue.HighPrice - newValue.LowPrice)) / 6m;  				}    				return new DecimalIndicatorValue(this' valueDn == decimal.Zero   					? valueUp   					: valueUp / valueDn);  			}
Magic Number,StockSharp.Algo.Indicators,RelativeVigorIndexAverage,C:\repos\stocksharp_stocksharp\Algo\Indicators\RelativeVigorIndexAverage.cs,OnProcess,The following statement contains a magic number: if (IsFormed)  			{  				decimal valueUp' valueDn;    				if (input.IsFinal)  				{  					valueUp = ((_buffer[0].ClosePrice - _buffer[0].OpenPrice) +  					           2*(_buffer[1].ClosePrice - _buffer[1].OpenPrice) +  					           2*(_buffer[2].ClosePrice - _buffer[2].OpenPrice) +  					           (_buffer[3].ClosePrice - _buffer[3].OpenPrice))/6m;    					valueDn = ((_buffer[0].HighPrice - _buffer[0].LowPrice) +  					           2*(_buffer[1].HighPrice - _buffer[1].LowPrice) +  					           2*(_buffer[2].HighPrice - _buffer[2].LowPrice) +  					           (_buffer[3].HighPrice - _buffer[3].LowPrice))/6m;  				}  				else  				{  					valueUp = ((_buffer[1].ClosePrice - _buffer[1].OpenPrice) +  					           2*(_buffer[2].ClosePrice - _buffer[2].OpenPrice) +  					           2*(_buffer[3].ClosePrice - _buffer[3].OpenPrice) +  							   (newValue.ClosePrice - newValue.OpenPrice)) / 6m;    					valueDn = ((_buffer[1].HighPrice - _buffer[1].LowPrice) +  					           2*(_buffer[2].HighPrice - _buffer[2].LowPrice) +  					           2*(_buffer[3].HighPrice - _buffer[3].LowPrice) +  							   (newValue.HighPrice - newValue.LowPrice)) / 6m;  				}    				return new DecimalIndicatorValue(this' valueDn == decimal.Zero   					? valueUp   					: valueUp / valueDn);  			}
Magic Number,StockSharp.Algo.Indicators,RelativeVigorIndexSignal,C:\repos\stocksharp_stocksharp\Algo\Indicators\RelativeVigorIndexSignal.cs,RelativeVigorIndexSignal,The following statement contains a magic number: Length = 4;
Magic Number,StockSharp.Algo.Indicators,RelativeVigorIndexSignal,C:\repos\stocksharp_stocksharp\Algo\Indicators\RelativeVigorIndexSignal.cs,OnProcess,The following statement contains a magic number: if (IsFormed)  			{  				return input.IsFinal  					? new DecimalIndicatorValue(this' (Buffer[0] + 2 * Buffer[1] + 2 * Buffer[2] + Buffer[3]) / 6m)  					: new DecimalIndicatorValue(this' (Buffer[1] + 2 * Buffer[2] + 2 * Buffer[3] + newValue) / 6m);  			}
Magic Number,StockSharp.Algo.Indicators,RelativeVigorIndexSignal,C:\repos\stocksharp_stocksharp\Algo\Indicators\RelativeVigorIndexSignal.cs,OnProcess,The following statement contains a magic number: if (IsFormed)  			{  				return input.IsFinal  					? new DecimalIndicatorValue(this' (Buffer[0] + 2 * Buffer[1] + 2 * Buffer[2] + Buffer[3]) / 6m)  					: new DecimalIndicatorValue(this' (Buffer[1] + 2 * Buffer[2] + 2 * Buffer[3] + newValue) / 6m);  			}
Magic Number,StockSharp.Algo.Indicators,RelativeVigorIndexSignal,C:\repos\stocksharp_stocksharp\Algo\Indicators\RelativeVigorIndexSignal.cs,OnProcess,The following statement contains a magic number: if (IsFormed)  			{  				return input.IsFinal  					? new DecimalIndicatorValue(this' (Buffer[0] + 2 * Buffer[1] + 2 * Buffer[2] + Buffer[3]) / 6m)  					: new DecimalIndicatorValue(this' (Buffer[1] + 2 * Buffer[2] + 2 * Buffer[3] + newValue) / 6m);  			}
Magic Number,StockSharp.Algo.Indicators,RelativeVigorIndexSignal,C:\repos\stocksharp_stocksharp\Algo\Indicators\RelativeVigorIndexSignal.cs,OnProcess,The following statement contains a magic number: if (IsFormed)  			{  				return input.IsFinal  					? new DecimalIndicatorValue(this' (Buffer[0] + 2 * Buffer[1] + 2 * Buffer[2] + Buffer[3]) / 6m)  					: new DecimalIndicatorValue(this' (Buffer[1] + 2 * Buffer[2] + 2 * Buffer[3] + newValue) / 6m);  			}
Magic Number,StockSharp.Algo.Indicators,RelativeVigorIndexSignal,C:\repos\stocksharp_stocksharp\Algo\Indicators\RelativeVigorIndexSignal.cs,OnProcess,The following statement contains a magic number: if (IsFormed)  			{  				return input.IsFinal  					? new DecimalIndicatorValue(this' (Buffer[0] + 2 * Buffer[1] + 2 * Buffer[2] + Buffer[3]) / 6m)  					: new DecimalIndicatorValue(this' (Buffer[1] + 2 * Buffer[2] + 2 * Buffer[3] + newValue) / 6m);  			}
Magic Number,StockSharp.Algo.Indicators,RelativeVigorIndexSignal,C:\repos\stocksharp_stocksharp\Algo\Indicators\RelativeVigorIndexSignal.cs,OnProcess,The following statement contains a magic number: if (IsFormed)  			{  				return input.IsFinal  					? new DecimalIndicatorValue(this' (Buffer[0] + 2 * Buffer[1] + 2 * Buffer[2] + Buffer[3]) / 6m)  					: new DecimalIndicatorValue(this' (Buffer[1] + 2 * Buffer[2] + 2 * Buffer[3] + newValue) / 6m);  			}
Magic Number,StockSharp.Algo.Indicators,RelativeVigorIndexSignal,C:\repos\stocksharp_stocksharp\Algo\Indicators\RelativeVigorIndexSignal.cs,OnProcess,The following statement contains a magic number: if (IsFormed)  			{  				return input.IsFinal  					? new DecimalIndicatorValue(this' (Buffer[0] + 2 * Buffer[1] + 2 * Buffer[2] + Buffer[3]) / 6m)  					: new DecimalIndicatorValue(this' (Buffer[1] + 2 * Buffer[2] + 2 * Buffer[3] + newValue) / 6m);  			}
Magic Number,StockSharp.Algo.Indicators,RelativeVigorIndexSignal,C:\repos\stocksharp_stocksharp\Algo\Indicators\RelativeVigorIndexSignal.cs,OnProcess,The following statement contains a magic number: if (IsFormed)  			{  				return input.IsFinal  					? new DecimalIndicatorValue(this' (Buffer[0] + 2 * Buffer[1] + 2 * Buffer[2] + Buffer[3]) / 6m)  					: new DecimalIndicatorValue(this' (Buffer[1] + 2 * Buffer[2] + 2 * Buffer[3] + newValue) / 6m);  			}
Magic Number,StockSharp.Algo.Indicators,StochasticK,C:\repos\stocksharp_stocksharp\Algo\Indicators\StochasticK.cs,StochasticK,The following statement contains a magic number: Length = 14;
Magic Number,StockSharp.Algo.Indicators,StochasticK,C:\repos\stocksharp_stocksharp\Algo\Indicators\StochasticK.cs,OnProcess,The following statement contains a magic number: return new DecimalIndicatorValue(this' 100 * (candle.ClosePrice - lowValue) / diff);
Magic Number,StockSharp.Algo.Indicators,BollingerBands,C:\repos\stocksharp_stocksharp\Algo\Indicators\BollingerBands.cs,BollingerBands,The following statement contains a magic number: Width = 2;
Magic Number,StockSharp.Algo.Indicators,DoubleExponentialMovingAverage,C:\repos\stocksharp_stocksharp\Algo\Indicators\DoubleExponentialMovingAverage.cs,DoubleExponentialMovingAverage,The following statement contains a magic number: Length = 32;
Magic Number,StockSharp.Algo.Indicators,DoubleExponentialMovingAverage,C:\repos\stocksharp_stocksharp\Algo\Indicators\DoubleExponentialMovingAverage.cs,OnProcess,The following statement contains a magic number: return new DecimalIndicatorValue(this' 2 * ema1Value.GetValue<decimal>() - ema2Value.GetValue<decimal>());
Magic Number,StockSharp.Algo.Indicators,ExponentialMovingAverage,C:\repos\stocksharp_stocksharp\Algo\Indicators\ExponentialMovingAverage.cs,ExponentialMovingAverage,The following statement contains a magic number: Length = 32;
Magic Number,StockSharp.Algo.Indicators,HullMovingAverage,C:\repos\stocksharp_stocksharp\Algo\Indicators\HullMovingAverage.cs,HullMovingAverage,The following statement contains a magic number: Length = 10;
Magic Number,StockSharp.Algo.Indicators,HullMovingAverage,C:\repos\stocksharp_stocksharp\Algo\Indicators\HullMovingAverage.cs,Reset,The following statement contains a magic number: _wmaFast.Length = Length / 2;
Magic Number,StockSharp.Algo.Indicators,HullMovingAverage,C:\repos\stocksharp_stocksharp\Algo\Indicators\HullMovingAverage.cs,OnProcess,The following statement contains a magic number: if (_wmaFast.IsFormed && _wmaSlow.IsFormed)  			{  				var diff = 2 * _wmaFast.GetCurrentValue() - _wmaSlow.GetCurrentValue();  				_wmaResult.Process(diff);  			}
Magic Number,StockSharp.Algo.Indicators,JurikMovingAverage,C:\repos\stocksharp_stocksharp\Algo\Indicators\JurikMovingAverage.cs,Initialize,The following statement contains a magic number: _list = new double[128];
Magic Number,StockSharp.Algo.Indicators,JurikMovingAverage,C:\repos\stocksharp_stocksharp\Algo\Indicators\JurikMovingAverage.cs,Initialize,The following statement contains a magic number: _ring1 = new double[128];
Magic Number,StockSharp.Algo.Indicators,JurikMovingAverage,C:\repos\stocksharp_stocksharp\Algo\Indicators\JurikMovingAverage.cs,Initialize,The following statement contains a magic number: _ring2 = new double[11];
Magic Number,StockSharp.Algo.Indicators,JurikMovingAverage,C:\repos\stocksharp_stocksharp\Algo\Indicators\JurikMovingAverage.cs,Initialize,The following statement contains a magic number: _buffer = new double[62];
Magic Number,StockSharp.Algo.Indicators,JurikMovingAverage,C:\repos\stocksharp_stocksharp\Algo\Indicators\JurikMovingAverage.cs,Initialize,The following statement contains a magic number: _s28 = 63;
Magic Number,StockSharp.Algo.Indicators,JurikMovingAverage,C:\repos\stocksharp_stocksharp\Algo\Indicators\JurikMovingAverage.cs,Initialize,The following statement contains a magic number: _s30 = 64;
Magic Number,StockSharp.Algo.Indicators,JurikMovingAverage,C:\repos\stocksharp_stocksharp\Algo\Indicators\JurikMovingAverage.cs,Initialize,The following statement contains a magic number: for (var i = 1; i <= (int)_s28; i++)   				_list[i] = -1000000;
Magic Number,StockSharp.Algo.Indicators,JurikMovingAverage,C:\repos\stocksharp_stocksharp\Algo\Indicators\JurikMovingAverage.cs,Initialize,The following statement contains a magic number: for (var i = (int)_s30; i <= 127; i++)  				_list[i] = 1000000;
Magic Number,StockSharp.Algo.Indicators,JurikMovingAverage,C:\repos\stocksharp_stocksharp\Algo\Indicators\JurikMovingAverage.cs,Initialize,The following statement contains a magic number: for (var i = (int)_s30; i <= 127; i++)  				_list[i] = 1000000;
Magic Number,StockSharp.Algo.Indicators,JurikMovingAverage,C:\repos\stocksharp_stocksharp\Algo\Indicators\JurikMovingAverage.cs,OnProcess,The following statement contains a magic number: if (_fF0 < 61)  			{  				_fF0 = _fF0 + 1;  				_buffer[_fF0] = _series;  			}
Magic Number,StockSharp.Algo.Indicators,JurikMovingAverage,C:\repos\stocksharp_stocksharp\Algo\Indicators\JurikMovingAverage.cs,OnProcess,The following statement contains a magic number: if (_fF0 > 30)  			{  				if (Length < 1.0000000002)  				{  					_f80 = 0.0000000001; //{1.0e-10}  				}  				else  				{  					_f80 = (Length - 1) / 2.0;  				}    				if (_phase < -100)  				{  					_f10 = 0.5;  				}  				else  				{  					if (_phase > 100)  					{  						_f10 = 2.5;  					}  					else  					{  						_f10 = (double)_phase / 100 + 1.5;  					}  				}    				_v1 = Math.Log(Math.Sqrt(_f80));  				_v2 = _v1;    				if (_v1 / Math.Log(2.0) + 2.0 < 0.0)  				{  					_v3 = 0;  				}  				else  				{  					_v3 = _v2 / Math.Log(2.0) + 2.0;  				}    				_f98 = _v3;    				//----  				if (0.5 <= _f98 - 2.0)  				{  					_f88 = _f98 - 2.0;  				}  				else  				{  					_f88 = 0.5;  				}    				_f78 = Math.Sqrt(_f80) * _f98;  				_f90 = _f78 / (_f78 + 1.0);  				_f80 = _f80 * 0.9;  				_f50 = _f80 / (_f80 + 2.0);    				//----  				if (_f0 != 0)  				{  					_f0 = 0;  					_v5 = 0;    					for (_ii = 1; _ii <= 29; _ii++)  					{  						if (_buffer[_ii + 1] != _buffer[_ii])  						{  							_v5 = 1;  						}  					}    					_fD8 = _v5 * 30;    					_f38 = _fD8 == 0 ? _series : _buffer[1];    					_f18 = _f38;    					if (_fD8 > 29)  						_fD8 = 29;  				}  				else  					_fD8 = 0;    				//----  				for (_ii = _fD8; _ii >= 0; _ii--)  				{  					//{ another bigcycle...}  					_value2 = 31 - _ii;    					_f8 = _ii == 0 ? _series : _buffer[_value2];    					_f28 = _f8 - _f18;  					_f48 = _f8 - _f38;    					_v2 = Math.Max(Math.Abs(_f28)' Math.Abs(_f48));    					_fA0 = _v2;  					_vv = _fA0 + 0.0000000001; //{1.0e-10;}    					//----  					if (_s48 <= 1)  					{  						_s48 = 127;  					}  					else  					{  						_s48 = _s48 - 1;  					}    					if (_s50 <= 1)  					{  						_s50 = 10;  					}  					else  					{  						_s50 = _s50 - 1;  					}    					if (_s70 < 128)  						_s70 = _s70 + 1;    					_s8 = _s8 + _vv - _ring2[_s50];  					_ring2[_s50] = _vv;    					if (_s70 > 10)  					{  						_s20 = _s8 / 10;  					}  					else  						_s20 = _s8 / _s70;    					//----  					if (_s70 > 127)  					{  						_s10 = _ring1[_s48];  						_ring1[_s48] = _s20;  						_s68 = 64;  						_s58 = Convert.ToInt32(_s68);    						while (_s68 > 1)  						{  							if (_list[_s58] < _s10)  							{  								_s68 = _s68 * 0.5;  								_s58 = _s58 + Convert.ToInt32(_s68);  							}  							else  								if (_list[_s58] <= _s10)  								{  									_s68 = 1;  								}  								else  								{  									_s68 = _s68 * 0.5;  									_s58 = _s58 - Convert.ToInt32(_s68);  								}  						}  					}  					else  					{  						_ring1[_s48] = _s20;    						if (_s28 + _s30 > 127)  						{  							_s30 = _s30 - 1;  							_s58 = Convert.ToInt32(_s30);  						}  						else  						{  							_s28 = _s28 + 1;  							_s58 = Convert.ToInt32(_s28);  						}    						_s38 = _s28 > 96 ? 96 : Convert.ToInt32(_s28);  						_s40 = _s30 < 32 ? 32 : Convert.ToInt32(_s30);  					}    					//----  					_s68 = 64;  					_s60 = Convert.ToInt32(_s68);    					while (_s68 > 1)  					{  						if (_list[_s60] >= _s20)  						{  							if (_list[_s60 - 1] <= _s20)  							{  								_s68 = 1;  							}  							else  							{  								_s68 = _s68 * 0.5;  								_s60 = _s60 - Convert.ToInt32(_s68);  							}  						}  						else  						{  							_s68 = _s68 * 0.5;  							_s60 = _s60 + Convert.ToInt32(_s68);  						}    						if ((_s60 == 127) && (_s20 > _list[127]))  							_s60 = 128;  					}    					if (_s70 > 127)  					{  						if (_s58 >= _s60)  						{  							if ((_s38 + 1 > _s60) && (_s40 - 1 < _s60))  							{  								_s18 = _s18 + _s20;  							}  							else  								if ((_s40 > _s60) && (_s40 - 1 < _s58))  									_s18 = _s18 + _list[_s40 - 1];  						}  						else  							if (_s40 >= _s60)  							{  								if ((_s38 + 1 < _s60) && (_s38 + 1 > _s58))  									_s18 = _s18 + _list[_s38 + 1];  							}  							else  								if (_s38 + 2 > _s60)  								{  									_s18 = _s18 + _s20;  								}  								else  									if ((_s38 + 1 < _s60) && (_s38 + 1 > _s58))  										_s18 = _s18 + _list[_s38 + 1];    						if (_s58 > _s60)  						{  							if ((_s40 - 1 < _s58) && (_s38 + 1 > _s58))  							{  								_s18 = _s18 - _list[_s58];  							}  							else  								if ((_s38 < _s58) && (_s38 + 1 > _s60))  									_s18 = _s18 - _list[_s38];  						}  						else  						{  							if ((_s38 + 1 > _s58) && (_s40 - 1 < _s58))  							{  								_s18 = _s18 - _list[_s58];  							}  							else  								if ((_s40 > _s58) && (_s40 < _s60))  									_s18 = _s18 - _list[_s40];  						}  					}    					if (_s58 <= _s60)  					{  						if (_s58 >= _s60)  						{  							_list[_s60] = _s20;  						}  						else  						{  							for (_jj = _s58 + 1; _jj <= _s60 - 1; _jj++)  							{  								_list[_jj - 1] = _list[_jj];  							}  							_list[_s60 - 1] = _s20;  						}  					}  					else  					{  						for (_jj = _s58 - 1; _jj >= _s60; _jj--)  						{  							_list[_jj + 1] = _list[_jj];  						}  						_list[_s60] = _s20;  					}    					if (_s70 <= 127)  					{  						_s18 = 0;  						for (_jj = _s40; _jj <= _s38; _jj++)  						{  							_s18 = _s18 + _list[_jj];  						}  					}    					_f60 = _s18 / (_s38 - _s40 + 1);    					if (_fF8 + 1 > 31)  					{  						_fF8 = 31;  					}  					else  						_fF8 = _fF8 + 1;    					//----  					if (_fF8 <= 30)  					{  						if (_f28 > 0)  						{  							_f18 = _f8;  						}  						else  							_f18 = _f8 - _f28 * _f90;    						if (_f48 < 0)  						{  							_f38 = _f8;  						}  						else  							_f38 = _f8 - _f48 * _f90;    						_fB8 = _series;    						if (_fF8 != 30)  						{  							continue;  						}    						if (_fF8 == 30)  						{  							_fC0 = _series;    							_v4 = Math.Max(Math.Ceiling(_f78)' 1);    							_fE8 = (int)Math.Ceiling(_v4);    							_v2 = Math.Max(Math.Floor(_f78)' 1);    							_fE0 = (int)Math.Ceiling(_v2);    							if (_fE8 == _fE0)  							{  								_f68 = 1;  							}  							else  							{  								_v4 = _fE8 - _fE0;  								_f68 = (_f78 - _fE0) / _v4;  							}    							_v5 = _fE0 <= 29 ? Convert.ToInt32(_fE0) : 29;    							_v6 = _fE8 <= 29 ? Convert.ToInt32(_fE8) : 29;    							_fA8 = (_series - _buffer[_fF0 - _v5]) * (1 - _f68) / _fE0 + (_series - _buffer[_fF0 - _v6]) * _f68 / _fE8;  						}  					}  					else  					{  						_v1 = Math.Min(_f98' Math.Pow(_fA0 / _f60' _f88));    						if (_v1 < 1)  						{  							_v2 = 1;  						}  						else  						{  							_v3 = Math.Min(_f98' Math.Pow(_fA0 / _f60' _f88));    							_v2 = _v3;  						}    						_f58 = _v2;  						_f70 = Math.Pow(_f90' Math.Sqrt(_f58));    						if (_f28 > 0)  						{  							_f18 = _f8;  						}  						else  						{  							_f18 = _f8 - _f28 * _f70;  						}    						if (_f48 < 0)  						{  							_f38 = _f8;  						}  						else  						{  							_f38 = _f8 - _f48 * _f70;  						}  					}  				}    				if (_fF8 > 30)  				{  					_f30 = Math.Pow(_f50' _f58);  					_fC0 = (1 - _f30) * _series + _f30 * _fC0;  					_fC8 = (_series - _fC0) * (1 - _f50) + _f50 * _fC8;  					_fD0 = _f10 * _fC8 + _fC0;  					_f20 = -_f30 * 2;  					_f40 = _f30 * _f30;  					_fB0 = _f20 + _f40 + 1;  					_fA8 = (_fD0 - _fB8) * _fB0 + _f40 * _fA8;  					_fB8 = _fB8 + _fA8;  				}    				lastValue = (decimal)_fB8;  			}
Magic Number,StockSharp.Algo.Indicators,JurikMovingAverage,C:\repos\stocksharp_stocksharp\Algo\Indicators\JurikMovingAverage.cs,OnProcess,The following statement contains a magic number: if (_fF0 > 30)  			{  				if (Length < 1.0000000002)  				{  					_f80 = 0.0000000001; //{1.0e-10}  				}  				else  				{  					_f80 = (Length - 1) / 2.0;  				}    				if (_phase < -100)  				{  					_f10 = 0.5;  				}  				else  				{  					if (_phase > 100)  					{  						_f10 = 2.5;  					}  					else  					{  						_f10 = (double)_phase / 100 + 1.5;  					}  				}    				_v1 = Math.Log(Math.Sqrt(_f80));  				_v2 = _v1;    				if (_v1 / Math.Log(2.0) + 2.0 < 0.0)  				{  					_v3 = 0;  				}  				else  				{  					_v3 = _v2 / Math.Log(2.0) + 2.0;  				}    				_f98 = _v3;    				//----  				if (0.5 <= _f98 - 2.0)  				{  					_f88 = _f98 - 2.0;  				}  				else  				{  					_f88 = 0.5;  				}    				_f78 = Math.Sqrt(_f80) * _f98;  				_f90 = _f78 / (_f78 + 1.0);  				_f80 = _f80 * 0.9;  				_f50 = _f80 / (_f80 + 2.0);    				//----  				if (_f0 != 0)  				{  					_f0 = 0;  					_v5 = 0;    					for (_ii = 1; _ii <= 29; _ii++)  					{  						if (_buffer[_ii + 1] != _buffer[_ii])  						{  							_v5 = 1;  						}  					}    					_fD8 = _v5 * 30;    					_f38 = _fD8 == 0 ? _series : _buffer[1];    					_f18 = _f38;    					if (_fD8 > 29)  						_fD8 = 29;  				}  				else  					_fD8 = 0;    				//----  				for (_ii = _fD8; _ii >= 0; _ii--)  				{  					//{ another bigcycle...}  					_value2 = 31 - _ii;    					_f8 = _ii == 0 ? _series : _buffer[_value2];    					_f28 = _f8 - _f18;  					_f48 = _f8 - _f38;    					_v2 = Math.Max(Math.Abs(_f28)' Math.Abs(_f48));    					_fA0 = _v2;  					_vv = _fA0 + 0.0000000001; //{1.0e-10;}    					//----  					if (_s48 <= 1)  					{  						_s48 = 127;  					}  					else  					{  						_s48 = _s48 - 1;  					}    					if (_s50 <= 1)  					{  						_s50 = 10;  					}  					else  					{  						_s50 = _s50 - 1;  					}    					if (_s70 < 128)  						_s70 = _s70 + 1;    					_s8 = _s8 + _vv - _ring2[_s50];  					_ring2[_s50] = _vv;    					if (_s70 > 10)  					{  						_s20 = _s8 / 10;  					}  					else  						_s20 = _s8 / _s70;    					//----  					if (_s70 > 127)  					{  						_s10 = _ring1[_s48];  						_ring1[_s48] = _s20;  						_s68 = 64;  						_s58 = Convert.ToInt32(_s68);    						while (_s68 > 1)  						{  							if (_list[_s58] < _s10)  							{  								_s68 = _s68 * 0.5;  								_s58 = _s58 + Convert.ToInt32(_s68);  							}  							else  								if (_list[_s58] <= _s10)  								{  									_s68 = 1;  								}  								else  								{  									_s68 = _s68 * 0.5;  									_s58 = _s58 - Convert.ToInt32(_s68);  								}  						}  					}  					else  					{  						_ring1[_s48] = _s20;    						if (_s28 + _s30 > 127)  						{  							_s30 = _s30 - 1;  							_s58 = Convert.ToInt32(_s30);  						}  						else  						{  							_s28 = _s28 + 1;  							_s58 = Convert.ToInt32(_s28);  						}    						_s38 = _s28 > 96 ? 96 : Convert.ToInt32(_s28);  						_s40 = _s30 < 32 ? 32 : Convert.ToInt32(_s30);  					}    					//----  					_s68 = 64;  					_s60 = Convert.ToInt32(_s68);    					while (_s68 > 1)  					{  						if (_list[_s60] >= _s20)  						{  							if (_list[_s60 - 1] <= _s20)  							{  								_s68 = 1;  							}  							else  							{  								_s68 = _s68 * 0.5;  								_s60 = _s60 - Convert.ToInt32(_s68);  							}  						}  						else  						{  							_s68 = _s68 * 0.5;  							_s60 = _s60 + Convert.ToInt32(_s68);  						}    						if ((_s60 == 127) && (_s20 > _list[127]))  							_s60 = 128;  					}    					if (_s70 > 127)  					{  						if (_s58 >= _s60)  						{  							if ((_s38 + 1 > _s60) && (_s40 - 1 < _s60))  							{  								_s18 = _s18 + _s20;  							}  							else  								if ((_s40 > _s60) && (_s40 - 1 < _s58))  									_s18 = _s18 + _list[_s40 - 1];  						}  						else  							if (_s40 >= _s60)  							{  								if ((_s38 + 1 < _s60) && (_s38 + 1 > _s58))  									_s18 = _s18 + _list[_s38 + 1];  							}  							else  								if (_s38 + 2 > _s60)  								{  									_s18 = _s18 + _s20;  								}  								else  									if ((_s38 + 1 < _s60) && (_s38 + 1 > _s58))  										_s18 = _s18 + _list[_s38 + 1];    						if (_s58 > _s60)  						{  							if ((_s40 - 1 < _s58) && (_s38 + 1 > _s58))  							{  								_s18 = _s18 - _list[_s58];  							}  							else  								if ((_s38 < _s58) && (_s38 + 1 > _s60))  									_s18 = _s18 - _list[_s38];  						}  						else  						{  							if ((_s38 + 1 > _s58) && (_s40 - 1 < _s58))  							{  								_s18 = _s18 - _list[_s58];  							}  							else  								if ((_s40 > _s58) && (_s40 < _s60))  									_s18 = _s18 - _list[_s40];  						}  					}    					if (_s58 <= _s60)  					{  						if (_s58 >= _s60)  						{  							_list[_s60] = _s20;  						}  						else  						{  							for (_jj = _s58 + 1; _jj <= _s60 - 1; _jj++)  							{  								_list[_jj - 1] = _list[_jj];  							}  							_list[_s60 - 1] = _s20;  						}  					}  					else  					{  						for (_jj = _s58 - 1; _jj >= _s60; _jj--)  						{  							_list[_jj + 1] = _list[_jj];  						}  						_list[_s60] = _s20;  					}    					if (_s70 <= 127)  					{  						_s18 = 0;  						for (_jj = _s40; _jj <= _s38; _jj++)  						{  							_s18 = _s18 + _list[_jj];  						}  					}    					_f60 = _s18 / (_s38 - _s40 + 1);    					if (_fF8 + 1 > 31)  					{  						_fF8 = 31;  					}  					else  						_fF8 = _fF8 + 1;    					//----  					if (_fF8 <= 30)  					{  						if (_f28 > 0)  						{  							_f18 = _f8;  						}  						else  							_f18 = _f8 - _f28 * _f90;    						if (_f48 < 0)  						{  							_f38 = _f8;  						}  						else  							_f38 = _f8 - _f48 * _f90;    						_fB8 = _series;    						if (_fF8 != 30)  						{  							continue;  						}    						if (_fF8 == 30)  						{  							_fC0 = _series;    							_v4 = Math.Max(Math.Ceiling(_f78)' 1);    							_fE8 = (int)Math.Ceiling(_v4);    							_v2 = Math.Max(Math.Floor(_f78)' 1);    							_fE0 = (int)Math.Ceiling(_v2);    							if (_fE8 == _fE0)  							{  								_f68 = 1;  							}  							else  							{  								_v4 = _fE8 - _fE0;  								_f68 = (_f78 - _fE0) / _v4;  							}    							_v5 = _fE0 <= 29 ? Convert.ToInt32(_fE0) : 29;    							_v6 = _fE8 <= 29 ? Convert.ToInt32(_fE8) : 29;    							_fA8 = (_series - _buffer[_fF0 - _v5]) * (1 - _f68) / _fE0 + (_series - _buffer[_fF0 - _v6]) * _f68 / _fE8;  						}  					}  					else  					{  						_v1 = Math.Min(_f98' Math.Pow(_fA0 / _f60' _f88));    						if (_v1 < 1)  						{  							_v2 = 1;  						}  						else  						{  							_v3 = Math.Min(_f98' Math.Pow(_fA0 / _f60' _f88));    							_v2 = _v3;  						}    						_f58 = _v2;  						_f70 = Math.Pow(_f90' Math.Sqrt(_f58));    						if (_f28 > 0)  						{  							_f18 = _f8;  						}  						else  						{  							_f18 = _f8 - _f28 * _f70;  						}    						if (_f48 < 0)  						{  							_f38 = _f8;  						}  						else  						{  							_f38 = _f8 - _f48 * _f70;  						}  					}  				}    				if (_fF8 > 30)  				{  					_f30 = Math.Pow(_f50' _f58);  					_fC0 = (1 - _f30) * _series + _f30 * _fC0;  					_fC8 = (_series - _fC0) * (1 - _f50) + _f50 * _fC8;  					_fD0 = _f10 * _fC8 + _fC0;  					_f20 = -_f30 * 2;  					_f40 = _f30 * _f30;  					_fB0 = _f20 + _f40 + 1;  					_fA8 = (_fD0 - _fB8) * _fB0 + _f40 * _fA8;  					_fB8 = _fB8 + _fA8;  				}    				lastValue = (decimal)_fB8;  			}
Magic Number,StockSharp.Algo.Indicators,JurikMovingAverage,C:\repos\stocksharp_stocksharp\Algo\Indicators\JurikMovingAverage.cs,OnProcess,The following statement contains a magic number: if (_fF0 > 30)  			{  				if (Length < 1.0000000002)  				{  					_f80 = 0.0000000001; //{1.0e-10}  				}  				else  				{  					_f80 = (Length - 1) / 2.0;  				}    				if (_phase < -100)  				{  					_f10 = 0.5;  				}  				else  				{  					if (_phase > 100)  					{  						_f10 = 2.5;  					}  					else  					{  						_f10 = (double)_phase / 100 + 1.5;  					}  				}    				_v1 = Math.Log(Math.Sqrt(_f80));  				_v2 = _v1;    				if (_v1 / Math.Log(2.0) + 2.0 < 0.0)  				{  					_v3 = 0;  				}  				else  				{  					_v3 = _v2 / Math.Log(2.0) + 2.0;  				}    				_f98 = _v3;    				//----  				if (0.5 <= _f98 - 2.0)  				{  					_f88 = _f98 - 2.0;  				}  				else  				{  					_f88 = 0.5;  				}    				_f78 = Math.Sqrt(_f80) * _f98;  				_f90 = _f78 / (_f78 + 1.0);  				_f80 = _f80 * 0.9;  				_f50 = _f80 / (_f80 + 2.0);    				//----  				if (_f0 != 0)  				{  					_f0 = 0;  					_v5 = 0;    					for (_ii = 1; _ii <= 29; _ii++)  					{  						if (_buffer[_ii + 1] != _buffer[_ii])  						{  							_v5 = 1;  						}  					}    					_fD8 = _v5 * 30;    					_f38 = _fD8 == 0 ? _series : _buffer[1];    					_f18 = _f38;    					if (_fD8 > 29)  						_fD8 = 29;  				}  				else  					_fD8 = 0;    				//----  				for (_ii = _fD8; _ii >= 0; _ii--)  				{  					//{ another bigcycle...}  					_value2 = 31 - _ii;    					_f8 = _ii == 0 ? _series : _buffer[_value2];    					_f28 = _f8 - _f18;  					_f48 = _f8 - _f38;    					_v2 = Math.Max(Math.Abs(_f28)' Math.Abs(_f48));    					_fA0 = _v2;  					_vv = _fA0 + 0.0000000001; //{1.0e-10;}    					//----  					if (_s48 <= 1)  					{  						_s48 = 127;  					}  					else  					{  						_s48 = _s48 - 1;  					}    					if (_s50 <= 1)  					{  						_s50 = 10;  					}  					else  					{  						_s50 = _s50 - 1;  					}    					if (_s70 < 128)  						_s70 = _s70 + 1;    					_s8 = _s8 + _vv - _ring2[_s50];  					_ring2[_s50] = _vv;    					if (_s70 > 10)  					{  						_s20 = _s8 / 10;  					}  					else  						_s20 = _s8 / _s70;    					//----  					if (_s70 > 127)  					{  						_s10 = _ring1[_s48];  						_ring1[_s48] = _s20;  						_s68 = 64;  						_s58 = Convert.ToInt32(_s68);    						while (_s68 > 1)  						{  							if (_list[_s58] < _s10)  							{  								_s68 = _s68 * 0.5;  								_s58 = _s58 + Convert.ToInt32(_s68);  							}  							else  								if (_list[_s58] <= _s10)  								{  									_s68 = 1;  								}  								else  								{  									_s68 = _s68 * 0.5;  									_s58 = _s58 - Convert.ToInt32(_s68);  								}  						}  					}  					else  					{  						_ring1[_s48] = _s20;    						if (_s28 + _s30 > 127)  						{  							_s30 = _s30 - 1;  							_s58 = Convert.ToInt32(_s30);  						}  						else  						{  							_s28 = _s28 + 1;  							_s58 = Convert.ToInt32(_s28);  						}    						_s38 = _s28 > 96 ? 96 : Convert.ToInt32(_s28);  						_s40 = _s30 < 32 ? 32 : Convert.ToInt32(_s30);  					}    					//----  					_s68 = 64;  					_s60 = Convert.ToInt32(_s68);    					while (_s68 > 1)  					{  						if (_list[_s60] >= _s20)  						{  							if (_list[_s60 - 1] <= _s20)  							{  								_s68 = 1;  							}  							else  							{  								_s68 = _s68 * 0.5;  								_s60 = _s60 - Convert.ToInt32(_s68);  							}  						}  						else  						{  							_s68 = _s68 * 0.5;  							_s60 = _s60 + Convert.ToInt32(_s68);  						}    						if ((_s60 == 127) && (_s20 > _list[127]))  							_s60 = 128;  					}    					if (_s70 > 127)  					{  						if (_s58 >= _s60)  						{  							if ((_s38 + 1 > _s60) && (_s40 - 1 < _s60))  							{  								_s18 = _s18 + _s20;  							}  							else  								if ((_s40 > _s60) && (_s40 - 1 < _s58))  									_s18 = _s18 + _list[_s40 - 1];  						}  						else  							if (_s40 >= _s60)  							{  								if ((_s38 + 1 < _s60) && (_s38 + 1 > _s58))  									_s18 = _s18 + _list[_s38 + 1];  							}  							else  								if (_s38 + 2 > _s60)  								{  									_s18 = _s18 + _s20;  								}  								else  									if ((_s38 + 1 < _s60) && (_s38 + 1 > _s58))  										_s18 = _s18 + _list[_s38 + 1];    						if (_s58 > _s60)  						{  							if ((_s40 - 1 < _s58) && (_s38 + 1 > _s58))  							{  								_s18 = _s18 - _list[_s58];  							}  							else  								if ((_s38 < _s58) && (_s38 + 1 > _s60))  									_s18 = _s18 - _list[_s38];  						}  						else  						{  							if ((_s38 + 1 > _s58) && (_s40 - 1 < _s58))  							{  								_s18 = _s18 - _list[_s58];  							}  							else  								if ((_s40 > _s58) && (_s40 < _s60))  									_s18 = _s18 - _list[_s40];  						}  					}    					if (_s58 <= _s60)  					{  						if (_s58 >= _s60)  						{  							_list[_s60] = _s20;  						}  						else  						{  							for (_jj = _s58 + 1; _jj <= _s60 - 1; _jj++)  							{  								_list[_jj - 1] = _list[_jj];  							}  							_list[_s60 - 1] = _s20;  						}  					}  					else  					{  						for (_jj = _s58 - 1; _jj >= _s60; _jj--)  						{  							_list[_jj + 1] = _list[_jj];  						}  						_list[_s60] = _s20;  					}    					if (_s70 <= 127)  					{  						_s18 = 0;  						for (_jj = _s40; _jj <= _s38; _jj++)  						{  							_s18 = _s18 + _list[_jj];  						}  					}    					_f60 = _s18 / (_s38 - _s40 + 1);    					if (_fF8 + 1 > 31)  					{  						_fF8 = 31;  					}  					else  						_fF8 = _fF8 + 1;    					//----  					if (_fF8 <= 30)  					{  						if (_f28 > 0)  						{  							_f18 = _f8;  						}  						else  							_f18 = _f8 - _f28 * _f90;    						if (_f48 < 0)  						{  							_f38 = _f8;  						}  						else  							_f38 = _f8 - _f48 * _f90;    						_fB8 = _series;    						if (_fF8 != 30)  						{  							continue;  						}    						if (_fF8 == 30)  						{  							_fC0 = _series;    							_v4 = Math.Max(Math.Ceiling(_f78)' 1);    							_fE8 = (int)Math.Ceiling(_v4);    							_v2 = Math.Max(Math.Floor(_f78)' 1);    							_fE0 = (int)Math.Ceiling(_v2);    							if (_fE8 == _fE0)  							{  								_f68 = 1;  							}  							else  							{  								_v4 = _fE8 - _fE0;  								_f68 = (_f78 - _fE0) / _v4;  							}    							_v5 = _fE0 <= 29 ? Convert.ToInt32(_fE0) : 29;    							_v6 = _fE8 <= 29 ? Convert.ToInt32(_fE8) : 29;    							_fA8 = (_series - _buffer[_fF0 - _v5]) * (1 - _f68) / _fE0 + (_series - _buffer[_fF0 - _v6]) * _f68 / _fE8;  						}  					}  					else  					{  						_v1 = Math.Min(_f98' Math.Pow(_fA0 / _f60' _f88));    						if (_v1 < 1)  						{  							_v2 = 1;  						}  						else  						{  							_v3 = Math.Min(_f98' Math.Pow(_fA0 / _f60' _f88));    							_v2 = _v3;  						}    						_f58 = _v2;  						_f70 = Math.Pow(_f90' Math.Sqrt(_f58));    						if (_f28 > 0)  						{  							_f18 = _f8;  						}  						else  						{  							_f18 = _f8 - _f28 * _f70;  						}    						if (_f48 < 0)  						{  							_f38 = _f8;  						}  						else  						{  							_f38 = _f8 - _f48 * _f70;  						}  					}  				}    				if (_fF8 > 30)  				{  					_f30 = Math.Pow(_f50' _f58);  					_fC0 = (1 - _f30) * _series + _f30 * _fC0;  					_fC8 = (_series - _fC0) * (1 - _f50) + _f50 * _fC8;  					_fD0 = _f10 * _fC8 + _fC0;  					_f20 = -_f30 * 2;  					_f40 = _f30 * _f30;  					_fB0 = _f20 + _f40 + 1;  					_fA8 = (_fD0 - _fB8) * _fB0 + _f40 * _fA8;  					_fB8 = _fB8 + _fA8;  				}    				lastValue = (decimal)_fB8;  			}
Magic Number,StockSharp.Algo.Indicators,JurikMovingAverage,C:\repos\stocksharp_stocksharp\Algo\Indicators\JurikMovingAverage.cs,OnProcess,The following statement contains a magic number: if (_fF0 > 30)  			{  				if (Length < 1.0000000002)  				{  					_f80 = 0.0000000001; //{1.0e-10}  				}  				else  				{  					_f80 = (Length - 1) / 2.0;  				}    				if (_phase < -100)  				{  					_f10 = 0.5;  				}  				else  				{  					if (_phase > 100)  					{  						_f10 = 2.5;  					}  					else  					{  						_f10 = (double)_phase / 100 + 1.5;  					}  				}    				_v1 = Math.Log(Math.Sqrt(_f80));  				_v2 = _v1;    				if (_v1 / Math.Log(2.0) + 2.0 < 0.0)  				{  					_v3 = 0;  				}  				else  				{  					_v3 = _v2 / Math.Log(2.0) + 2.0;  				}    				_f98 = _v3;    				//----  				if (0.5 <= _f98 - 2.0)  				{  					_f88 = _f98 - 2.0;  				}  				else  				{  					_f88 = 0.5;  				}    				_f78 = Math.Sqrt(_f80) * _f98;  				_f90 = _f78 / (_f78 + 1.0);  				_f80 = _f80 * 0.9;  				_f50 = _f80 / (_f80 + 2.0);    				//----  				if (_f0 != 0)  				{  					_f0 = 0;  					_v5 = 0;    					for (_ii = 1; _ii <= 29; _ii++)  					{  						if (_buffer[_ii + 1] != _buffer[_ii])  						{  							_v5 = 1;  						}  					}    					_fD8 = _v5 * 30;    					_f38 = _fD8 == 0 ? _series : _buffer[1];    					_f18 = _f38;    					if (_fD8 > 29)  						_fD8 = 29;  				}  				else  					_fD8 = 0;    				//----  				for (_ii = _fD8; _ii >= 0; _ii--)  				{  					//{ another bigcycle...}  					_value2 = 31 - _ii;    					_f8 = _ii == 0 ? _series : _buffer[_value2];    					_f28 = _f8 - _f18;  					_f48 = _f8 - _f38;    					_v2 = Math.Max(Math.Abs(_f28)' Math.Abs(_f48));    					_fA0 = _v2;  					_vv = _fA0 + 0.0000000001; //{1.0e-10;}    					//----  					if (_s48 <= 1)  					{  						_s48 = 127;  					}  					else  					{  						_s48 = _s48 - 1;  					}    					if (_s50 <= 1)  					{  						_s50 = 10;  					}  					else  					{  						_s50 = _s50 - 1;  					}    					if (_s70 < 128)  						_s70 = _s70 + 1;    					_s8 = _s8 + _vv - _ring2[_s50];  					_ring2[_s50] = _vv;    					if (_s70 > 10)  					{  						_s20 = _s8 / 10;  					}  					else  						_s20 = _s8 / _s70;    					//----  					if (_s70 > 127)  					{  						_s10 = _ring1[_s48];  						_ring1[_s48] = _s20;  						_s68 = 64;  						_s58 = Convert.ToInt32(_s68);    						while (_s68 > 1)  						{  							if (_list[_s58] < _s10)  							{  								_s68 = _s68 * 0.5;  								_s58 = _s58 + Convert.ToInt32(_s68);  							}  							else  								if (_list[_s58] <= _s10)  								{  									_s68 = 1;  								}  								else  								{  									_s68 = _s68 * 0.5;  									_s58 = _s58 - Convert.ToInt32(_s68);  								}  						}  					}  					else  					{  						_ring1[_s48] = _s20;    						if (_s28 + _s30 > 127)  						{  							_s30 = _s30 - 1;  							_s58 = Convert.ToInt32(_s30);  						}  						else  						{  							_s28 = _s28 + 1;  							_s58 = Convert.ToInt32(_s28);  						}    						_s38 = _s28 > 96 ? 96 : Convert.ToInt32(_s28);  						_s40 = _s30 < 32 ? 32 : Convert.ToInt32(_s30);  					}    					//----  					_s68 = 64;  					_s60 = Convert.ToInt32(_s68);    					while (_s68 > 1)  					{  						if (_list[_s60] >= _s20)  						{  							if (_list[_s60 - 1] <= _s20)  							{  								_s68 = 1;  							}  							else  							{  								_s68 = _s68 * 0.5;  								_s60 = _s60 - Convert.ToInt32(_s68);  							}  						}  						else  						{  							_s68 = _s68 * 0.5;  							_s60 = _s60 + Convert.ToInt32(_s68);  						}    						if ((_s60 == 127) && (_s20 > _list[127]))  							_s60 = 128;  					}    					if (_s70 > 127)  					{  						if (_s58 >= _s60)  						{  							if ((_s38 + 1 > _s60) && (_s40 - 1 < _s60))  							{  								_s18 = _s18 + _s20;  							}  							else  								if ((_s40 > _s60) && (_s40 - 1 < _s58))  									_s18 = _s18 + _list[_s40 - 1];  						}  						else  							if (_s40 >= _s60)  							{  								if ((_s38 + 1 < _s60) && (_s38 + 1 > _s58))  									_s18 = _s18 + _list[_s38 + 1];  							}  							else  								if (_s38 + 2 > _s60)  								{  									_s18 = _s18 + _s20;  								}  								else  									if ((_s38 + 1 < _s60) && (_s38 + 1 > _s58))  										_s18 = _s18 + _list[_s38 + 1];    						if (_s58 > _s60)  						{  							if ((_s40 - 1 < _s58) && (_s38 + 1 > _s58))  							{  								_s18 = _s18 - _list[_s58];  							}  							else  								if ((_s38 < _s58) && (_s38 + 1 > _s60))  									_s18 = _s18 - _list[_s38];  						}  						else  						{  							if ((_s38 + 1 > _s58) && (_s40 - 1 < _s58))  							{  								_s18 = _s18 - _list[_s58];  							}  							else  								if ((_s40 > _s58) && (_s40 < _s60))  									_s18 = _s18 - _list[_s40];  						}  					}    					if (_s58 <= _s60)  					{  						if (_s58 >= _s60)  						{  							_list[_s60] = _s20;  						}  						else  						{  							for (_jj = _s58 + 1; _jj <= _s60 - 1; _jj++)  							{  								_list[_jj - 1] = _list[_jj];  							}  							_list[_s60 - 1] = _s20;  						}  					}  					else  					{  						for (_jj = _s58 - 1; _jj >= _s60; _jj--)  						{  							_list[_jj + 1] = _list[_jj];  						}  						_list[_s60] = _s20;  					}    					if (_s70 <= 127)  					{  						_s18 = 0;  						for (_jj = _s40; _jj <= _s38; _jj++)  						{  							_s18 = _s18 + _list[_jj];  						}  					}    					_f60 = _s18 / (_s38 - _s40 + 1);    					if (_fF8 + 1 > 31)  					{  						_fF8 = 31;  					}  					else  						_fF8 = _fF8 + 1;    					//----  					if (_fF8 <= 30)  					{  						if (_f28 > 0)  						{  							_f18 = _f8;  						}  						else  							_f18 = _f8 - _f28 * _f90;    						if (_f48 < 0)  						{  							_f38 = _f8;  						}  						else  							_f38 = _f8 - _f48 * _f90;    						_fB8 = _series;    						if (_fF8 != 30)  						{  							continue;  						}    						if (_fF8 == 30)  						{  							_fC0 = _series;    							_v4 = Math.Max(Math.Ceiling(_f78)' 1);    							_fE8 = (int)Math.Ceiling(_v4);    							_v2 = Math.Max(Math.Floor(_f78)' 1);    							_fE0 = (int)Math.Ceiling(_v2);    							if (_fE8 == _fE0)  							{  								_f68 = 1;  							}  							else  							{  								_v4 = _fE8 - _fE0;  								_f68 = (_f78 - _fE0) / _v4;  							}    							_v5 = _fE0 <= 29 ? Convert.ToInt32(_fE0) : 29;    							_v6 = _fE8 <= 29 ? Convert.ToInt32(_fE8) : 29;    							_fA8 = (_series - _buffer[_fF0 - _v5]) * (1 - _f68) / _fE0 + (_series - _buffer[_fF0 - _v6]) * _f68 / _fE8;  						}  					}  					else  					{  						_v1 = Math.Min(_f98' Math.Pow(_fA0 / _f60' _f88));    						if (_v1 < 1)  						{  							_v2 = 1;  						}  						else  						{  							_v3 = Math.Min(_f98' Math.Pow(_fA0 / _f60' _f88));    							_v2 = _v3;  						}    						_f58 = _v2;  						_f70 = Math.Pow(_f90' Math.Sqrt(_f58));    						if (_f28 > 0)  						{  							_f18 = _f8;  						}  						else  						{  							_f18 = _f8 - _f28 * _f70;  						}    						if (_f48 < 0)  						{  							_f38 = _f8;  						}  						else  						{  							_f38 = _f8 - _f48 * _f70;  						}  					}  				}    				if (_fF8 > 30)  				{  					_f30 = Math.Pow(_f50' _f58);  					_fC0 = (1 - _f30) * _series + _f30 * _fC0;  					_fC8 = (_series - _fC0) * (1 - _f50) + _f50 * _fC8;  					_fD0 = _f10 * _fC8 + _fC0;  					_f20 = -_f30 * 2;  					_f40 = _f30 * _f30;  					_fB0 = _f20 + _f40 + 1;  					_fA8 = (_fD0 - _fB8) * _fB0 + _f40 * _fA8;  					_fB8 = _fB8 + _fA8;  				}    				lastValue = (decimal)_fB8;  			}
Magic Number,StockSharp.Algo.Indicators,JurikMovingAverage,C:\repos\stocksharp_stocksharp\Algo\Indicators\JurikMovingAverage.cs,OnProcess,The following statement contains a magic number: if (_fF0 > 30)  			{  				if (Length < 1.0000000002)  				{  					_f80 = 0.0000000001; //{1.0e-10}  				}  				else  				{  					_f80 = (Length - 1) / 2.0;  				}    				if (_phase < -100)  				{  					_f10 = 0.5;  				}  				else  				{  					if (_phase > 100)  					{  						_f10 = 2.5;  					}  					else  					{  						_f10 = (double)_phase / 100 + 1.5;  					}  				}    				_v1 = Math.Log(Math.Sqrt(_f80));  				_v2 = _v1;    				if (_v1 / Math.Log(2.0) + 2.0 < 0.0)  				{  					_v3 = 0;  				}  				else  				{  					_v3 = _v2 / Math.Log(2.0) + 2.0;  				}    				_f98 = _v3;    				//----  				if (0.5 <= _f98 - 2.0)  				{  					_f88 = _f98 - 2.0;  				}  				else  				{  					_f88 = 0.5;  				}    				_f78 = Math.Sqrt(_f80) * _f98;  				_f90 = _f78 / (_f78 + 1.0);  				_f80 = _f80 * 0.9;  				_f50 = _f80 / (_f80 + 2.0);    				//----  				if (_f0 != 0)  				{  					_f0 = 0;  					_v5 = 0;    					for (_ii = 1; _ii <= 29; _ii++)  					{  						if (_buffer[_ii + 1] != _buffer[_ii])  						{  							_v5 = 1;  						}  					}    					_fD8 = _v5 * 30;    					_f38 = _fD8 == 0 ? _series : _buffer[1];    					_f18 = _f38;    					if (_fD8 > 29)  						_fD8 = 29;  				}  				else  					_fD8 = 0;    				//----  				for (_ii = _fD8; _ii >= 0; _ii--)  				{  					//{ another bigcycle...}  					_value2 = 31 - _ii;    					_f8 = _ii == 0 ? _series : _buffer[_value2];    					_f28 = _f8 - _f18;  					_f48 = _f8 - _f38;    					_v2 = Math.Max(Math.Abs(_f28)' Math.Abs(_f48));    					_fA0 = _v2;  					_vv = _fA0 + 0.0000000001; //{1.0e-10;}    					//----  					if (_s48 <= 1)  					{  						_s48 = 127;  					}  					else  					{  						_s48 = _s48 - 1;  					}    					if (_s50 <= 1)  					{  						_s50 = 10;  					}  					else  					{  						_s50 = _s50 - 1;  					}    					if (_s70 < 128)  						_s70 = _s70 + 1;    					_s8 = _s8 + _vv - _ring2[_s50];  					_ring2[_s50] = _vv;    					if (_s70 > 10)  					{  						_s20 = _s8 / 10;  					}  					else  						_s20 = _s8 / _s70;    					//----  					if (_s70 > 127)  					{  						_s10 = _ring1[_s48];  						_ring1[_s48] = _s20;  						_s68 = 64;  						_s58 = Convert.ToInt32(_s68);    						while (_s68 > 1)  						{  							if (_list[_s58] < _s10)  							{  								_s68 = _s68 * 0.5;  								_s58 = _s58 + Convert.ToInt32(_s68);  							}  							else  								if (_list[_s58] <= _s10)  								{  									_s68 = 1;  								}  								else  								{  									_s68 = _s68 * 0.5;  									_s58 = _s58 - Convert.ToInt32(_s68);  								}  						}  					}  					else  					{  						_ring1[_s48] = _s20;    						if (_s28 + _s30 > 127)  						{  							_s30 = _s30 - 1;  							_s58 = Convert.ToInt32(_s30);  						}  						else  						{  							_s28 = _s28 + 1;  							_s58 = Convert.ToInt32(_s28);  						}    						_s38 = _s28 > 96 ? 96 : Convert.ToInt32(_s28);  						_s40 = _s30 < 32 ? 32 : Convert.ToInt32(_s30);  					}    					//----  					_s68 = 64;  					_s60 = Convert.ToInt32(_s68);    					while (_s68 > 1)  					{  						if (_list[_s60] >= _s20)  						{  							if (_list[_s60 - 1] <= _s20)  							{  								_s68 = 1;  							}  							else  							{  								_s68 = _s68 * 0.5;  								_s60 = _s60 - Convert.ToInt32(_s68);  							}  						}  						else  						{  							_s68 = _s68 * 0.5;  							_s60 = _s60 + Convert.ToInt32(_s68);  						}    						if ((_s60 == 127) && (_s20 > _list[127]))  							_s60 = 128;  					}    					if (_s70 > 127)  					{  						if (_s58 >= _s60)  						{  							if ((_s38 + 1 > _s60) && (_s40 - 1 < _s60))  							{  								_s18 = _s18 + _s20;  							}  							else  								if ((_s40 > _s60) && (_s40 - 1 < _s58))  									_s18 = _s18 + _list[_s40 - 1];  						}  						else  							if (_s40 >= _s60)  							{  								if ((_s38 + 1 < _s60) && (_s38 + 1 > _s58))  									_s18 = _s18 + _list[_s38 + 1];  							}  							else  								if (_s38 + 2 > _s60)  								{  									_s18 = _s18 + _s20;  								}  								else  									if ((_s38 + 1 < _s60) && (_s38 + 1 > _s58))  										_s18 = _s18 + _list[_s38 + 1];    						if (_s58 > _s60)  						{  							if ((_s40 - 1 < _s58) && (_s38 + 1 > _s58))  							{  								_s18 = _s18 - _list[_s58];  							}  							else  								if ((_s38 < _s58) && (_s38 + 1 > _s60))  									_s18 = _s18 - _list[_s38];  						}  						else  						{  							if ((_s38 + 1 > _s58) && (_s40 - 1 < _s58))  							{  								_s18 = _s18 - _list[_s58];  							}  							else  								if ((_s40 > _s58) && (_s40 < _s60))  									_s18 = _s18 - _list[_s40];  						}  					}    					if (_s58 <= _s60)  					{  						if (_s58 >= _s60)  						{  							_list[_s60] = _s20;  						}  						else  						{  							for (_jj = _s58 + 1; _jj <= _s60 - 1; _jj++)  							{  								_list[_jj - 1] = _list[_jj];  							}  							_list[_s60 - 1] = _s20;  						}  					}  					else  					{  						for (_jj = _s58 - 1; _jj >= _s60; _jj--)  						{  							_list[_jj + 1] = _list[_jj];  						}  						_list[_s60] = _s20;  					}    					if (_s70 <= 127)  					{  						_s18 = 0;  						for (_jj = _s40; _jj <= _s38; _jj++)  						{  							_s18 = _s18 + _list[_jj];  						}  					}    					_f60 = _s18 / (_s38 - _s40 + 1);    					if (_fF8 + 1 > 31)  					{  						_fF8 = 31;  					}  					else  						_fF8 = _fF8 + 1;    					//----  					if (_fF8 <= 30)  					{  						if (_f28 > 0)  						{  							_f18 = _f8;  						}  						else  							_f18 = _f8 - _f28 * _f90;    						if (_f48 < 0)  						{  							_f38 = _f8;  						}  						else  							_f38 = _f8 - _f48 * _f90;    						_fB8 = _series;    						if (_fF8 != 30)  						{  							continue;  						}    						if (_fF8 == 30)  						{  							_fC0 = _series;    							_v4 = Math.Max(Math.Ceiling(_f78)' 1);    							_fE8 = (int)Math.Ceiling(_v4);    							_v2 = Math.Max(Math.Floor(_f78)' 1);    							_fE0 = (int)Math.Ceiling(_v2);    							if (_fE8 == _fE0)  							{  								_f68 = 1;  							}  							else  							{  								_v4 = _fE8 - _fE0;  								_f68 = (_f78 - _fE0) / _v4;  							}    							_v5 = _fE0 <= 29 ? Convert.ToInt32(_fE0) : 29;    							_v6 = _fE8 <= 29 ? Convert.ToInt32(_fE8) : 29;    							_fA8 = (_series - _buffer[_fF0 - _v5]) * (1 - _f68) / _fE0 + (_series - _buffer[_fF0 - _v6]) * _f68 / _fE8;  						}  					}  					else  					{  						_v1 = Math.Min(_f98' Math.Pow(_fA0 / _f60' _f88));    						if (_v1 < 1)  						{  							_v2 = 1;  						}  						else  						{  							_v3 = Math.Min(_f98' Math.Pow(_fA0 / _f60' _f88));    							_v2 = _v3;  						}    						_f58 = _v2;  						_f70 = Math.Pow(_f90' Math.Sqrt(_f58));    						if (_f28 > 0)  						{  							_f18 = _f8;  						}  						else  						{  							_f18 = _f8 - _f28 * _f70;  						}    						if (_f48 < 0)  						{  							_f38 = _f8;  						}  						else  						{  							_f38 = _f8 - _f48 * _f70;  						}  					}  				}    				if (_fF8 > 30)  				{  					_f30 = Math.Pow(_f50' _f58);  					_fC0 = (1 - _f30) * _series + _f30 * _fC0;  					_fC8 = (_series - _fC0) * (1 - _f50) + _f50 * _fC8;  					_fD0 = _f10 * _fC8 + _fC0;  					_f20 = -_f30 * 2;  					_f40 = _f30 * _f30;  					_fB0 = _f20 + _f40 + 1;  					_fA8 = (_fD0 - _fB8) * _fB0 + _f40 * _fA8;  					_fB8 = _fB8 + _fA8;  				}    				lastValue = (decimal)_fB8;  			}
Magic Number,StockSharp.Algo.Indicators,JurikMovingAverage,C:\repos\stocksharp_stocksharp\Algo\Indicators\JurikMovingAverage.cs,OnProcess,The following statement contains a magic number: if (_fF0 > 30)  			{  				if (Length < 1.0000000002)  				{  					_f80 = 0.0000000001; //{1.0e-10}  				}  				else  				{  					_f80 = (Length - 1) / 2.0;  				}    				if (_phase < -100)  				{  					_f10 = 0.5;  				}  				else  				{  					if (_phase > 100)  					{  						_f10 = 2.5;  					}  					else  					{  						_f10 = (double)_phase / 100 + 1.5;  					}  				}    				_v1 = Math.Log(Math.Sqrt(_f80));  				_v2 = _v1;    				if (_v1 / Math.Log(2.0) + 2.0 < 0.0)  				{  					_v3 = 0;  				}  				else  				{  					_v3 = _v2 / Math.Log(2.0) + 2.0;  				}    				_f98 = _v3;    				//----  				if (0.5 <= _f98 - 2.0)  				{  					_f88 = _f98 - 2.0;  				}  				else  				{  					_f88 = 0.5;  				}    				_f78 = Math.Sqrt(_f80) * _f98;  				_f90 = _f78 / (_f78 + 1.0);  				_f80 = _f80 * 0.9;  				_f50 = _f80 / (_f80 + 2.0);    				//----  				if (_f0 != 0)  				{  					_f0 = 0;  					_v5 = 0;    					for (_ii = 1; _ii <= 29; _ii++)  					{  						if (_buffer[_ii + 1] != _buffer[_ii])  						{  							_v5 = 1;  						}  					}    					_fD8 = _v5 * 30;    					_f38 = _fD8 == 0 ? _series : _buffer[1];    					_f18 = _f38;    					if (_fD8 > 29)  						_fD8 = 29;  				}  				else  					_fD8 = 0;    				//----  				for (_ii = _fD8; _ii >= 0; _ii--)  				{  					//{ another bigcycle...}  					_value2 = 31 - _ii;    					_f8 = _ii == 0 ? _series : _buffer[_value2];    					_f28 = _f8 - _f18;  					_f48 = _f8 - _f38;    					_v2 = Math.Max(Math.Abs(_f28)' Math.Abs(_f48));    					_fA0 = _v2;  					_vv = _fA0 + 0.0000000001; //{1.0e-10;}    					//----  					if (_s48 <= 1)  					{  						_s48 = 127;  					}  					else  					{  						_s48 = _s48 - 1;  					}    					if (_s50 <= 1)  					{  						_s50 = 10;  					}  					else  					{  						_s50 = _s50 - 1;  					}    					if (_s70 < 128)  						_s70 = _s70 + 1;    					_s8 = _s8 + _vv - _ring2[_s50];  					_ring2[_s50] = _vv;    					if (_s70 > 10)  					{  						_s20 = _s8 / 10;  					}  					else  						_s20 = _s8 / _s70;    					//----  					if (_s70 > 127)  					{  						_s10 = _ring1[_s48];  						_ring1[_s48] = _s20;  						_s68 = 64;  						_s58 = Convert.ToInt32(_s68);    						while (_s68 > 1)  						{  							if (_list[_s58] < _s10)  							{  								_s68 = _s68 * 0.5;  								_s58 = _s58 + Convert.ToInt32(_s68);  							}  							else  								if (_list[_s58] <= _s10)  								{  									_s68 = 1;  								}  								else  								{  									_s68 = _s68 * 0.5;  									_s58 = _s58 - Convert.ToInt32(_s68);  								}  						}  					}  					else  					{  						_ring1[_s48] = _s20;    						if (_s28 + _s30 > 127)  						{  							_s30 = _s30 - 1;  							_s58 = Convert.ToInt32(_s30);  						}  						else  						{  							_s28 = _s28 + 1;  							_s58 = Convert.ToInt32(_s28);  						}    						_s38 = _s28 > 96 ? 96 : Convert.ToInt32(_s28);  						_s40 = _s30 < 32 ? 32 : Convert.ToInt32(_s30);  					}    					//----  					_s68 = 64;  					_s60 = Convert.ToInt32(_s68);    					while (_s68 > 1)  					{  						if (_list[_s60] >= _s20)  						{  							if (_list[_s60 - 1] <= _s20)  							{  								_s68 = 1;  							}  							else  							{  								_s68 = _s68 * 0.5;  								_s60 = _s60 - Convert.ToInt32(_s68);  							}  						}  						else  						{  							_s68 = _s68 * 0.5;  							_s60 = _s60 + Convert.ToInt32(_s68);  						}    						if ((_s60 == 127) && (_s20 > _list[127]))  							_s60 = 128;  					}    					if (_s70 > 127)  					{  						if (_s58 >= _s60)  						{  							if ((_s38 + 1 > _s60) && (_s40 - 1 < _s60))  							{  								_s18 = _s18 + _s20;  							}  							else  								if ((_s40 > _s60) && (_s40 - 1 < _s58))  									_s18 = _s18 + _list[_s40 - 1];  						}  						else  							if (_s40 >= _s60)  							{  								if ((_s38 + 1 < _s60) && (_s38 + 1 > _s58))  									_s18 = _s18 + _list[_s38 + 1];  							}  							else  								if (_s38 + 2 > _s60)  								{  									_s18 = _s18 + _s20;  								}  								else  									if ((_s38 + 1 < _s60) && (_s38 + 1 > _s58))  										_s18 = _s18 + _list[_s38 + 1];    						if (_s58 > _s60)  						{  							if ((_s40 - 1 < _s58) && (_s38 + 1 > _s58))  							{  								_s18 = _s18 - _list[_s58];  							}  							else  								if ((_s38 < _s58) && (_s38 + 1 > _s60))  									_s18 = _s18 - _list[_s38];  						}  						else  						{  							if ((_s38 + 1 > _s58) && (_s40 - 1 < _s58))  							{  								_s18 = _s18 - _list[_s58];  							}  							else  								if ((_s40 > _s58) && (_s40 < _s60))  									_s18 = _s18 - _list[_s40];  						}  					}    					if (_s58 <= _s60)  					{  						if (_s58 >= _s60)  						{  							_list[_s60] = _s20;  						}  						else  						{  							for (_jj = _s58 + 1; _jj <= _s60 - 1; _jj++)  							{  								_list[_jj - 1] = _list[_jj];  							}  							_list[_s60 - 1] = _s20;  						}  					}  					else  					{  						for (_jj = _s58 - 1; _jj >= _s60; _jj--)  						{  							_list[_jj + 1] = _list[_jj];  						}  						_list[_s60] = _s20;  					}    					if (_s70 <= 127)  					{  						_s18 = 0;  						for (_jj = _s40; _jj <= _s38; _jj++)  						{  							_s18 = _s18 + _list[_jj];  						}  					}    					_f60 = _s18 / (_s38 - _s40 + 1);    					if (_fF8 + 1 > 31)  					{  						_fF8 = 31;  					}  					else  						_fF8 = _fF8 + 1;    					//----  					if (_fF8 <= 30)  					{  						if (_f28 > 0)  						{  							_f18 = _f8;  						}  						else  							_f18 = _f8 - _f28 * _f90;    						if (_f48 < 0)  						{  							_f38 = _f8;  						}  						else  							_f38 = _f8 - _f48 * _f90;    						_fB8 = _series;    						if (_fF8 != 30)  						{  							continue;  						}    						if (_fF8 == 30)  						{  							_fC0 = _series;    							_v4 = Math.Max(Math.Ceiling(_f78)' 1);    							_fE8 = (int)Math.Ceiling(_v4);    							_v2 = Math.Max(Math.Floor(_f78)' 1);    							_fE0 = (int)Math.Ceiling(_v2);    							if (_fE8 == _fE0)  							{  								_f68 = 1;  							}  							else  							{  								_v4 = _fE8 - _fE0;  								_f68 = (_f78 - _fE0) / _v4;  							}    							_v5 = _fE0 <= 29 ? Convert.ToInt32(_fE0) : 29;    							_v6 = _fE8 <= 29 ? Convert.ToInt32(_fE8) : 29;    							_fA8 = (_series - _buffer[_fF0 - _v5]) * (1 - _f68) / _fE0 + (_series - _buffer[_fF0 - _v6]) * _f68 / _fE8;  						}  					}  					else  					{  						_v1 = Math.Min(_f98' Math.Pow(_fA0 / _f60' _f88));    						if (_v1 < 1)  						{  							_v2 = 1;  						}  						else  						{  							_v3 = Math.Min(_f98' Math.Pow(_fA0 / _f60' _f88));    							_v2 = _v3;  						}    						_f58 = _v2;  						_f70 = Math.Pow(_f90' Math.Sqrt(_f58));    						if (_f28 > 0)  						{  							_f18 = _f8;  						}  						else  						{  							_f18 = _f8 - _f28 * _f70;  						}    						if (_f48 < 0)  						{  							_f38 = _f8;  						}  						else  						{  							_f38 = _f8 - _f48 * _f70;  						}  					}  				}    				if (_fF8 > 30)  				{  					_f30 = Math.Pow(_f50' _f58);  					_fC0 = (1 - _f30) * _series + _f30 * _fC0;  					_fC8 = (_series - _fC0) * (1 - _f50) + _f50 * _fC8;  					_fD0 = _f10 * _fC8 + _fC0;  					_f20 = -_f30 * 2;  					_f40 = _f30 * _f30;  					_fB0 = _f20 + _f40 + 1;  					_fA8 = (_fD0 - _fB8) * _fB0 + _f40 * _fA8;  					_fB8 = _fB8 + _fA8;  				}    				lastValue = (decimal)_fB8;  			}
Magic Number,StockSharp.Algo.Indicators,JurikMovingAverage,C:\repos\stocksharp_stocksharp\Algo\Indicators\JurikMovingAverage.cs,OnProcess,The following statement contains a magic number: if (_fF0 > 30)  			{  				if (Length < 1.0000000002)  				{  					_f80 = 0.0000000001; //{1.0e-10}  				}  				else  				{  					_f80 = (Length - 1) / 2.0;  				}    				if (_phase < -100)  				{  					_f10 = 0.5;  				}  				else  				{  					if (_phase > 100)  					{  						_f10 = 2.5;  					}  					else  					{  						_f10 = (double)_phase / 100 + 1.5;  					}  				}    				_v1 = Math.Log(Math.Sqrt(_f80));  				_v2 = _v1;    				if (_v1 / Math.Log(2.0) + 2.0 < 0.0)  				{  					_v3 = 0;  				}  				else  				{  					_v3 = _v2 / Math.Log(2.0) + 2.0;  				}    				_f98 = _v3;    				//----  				if (0.5 <= _f98 - 2.0)  				{  					_f88 = _f98 - 2.0;  				}  				else  				{  					_f88 = 0.5;  				}    				_f78 = Math.Sqrt(_f80) * _f98;  				_f90 = _f78 / (_f78 + 1.0);  				_f80 = _f80 * 0.9;  				_f50 = _f80 / (_f80 + 2.0);    				//----  				if (_f0 != 0)  				{  					_f0 = 0;  					_v5 = 0;    					for (_ii = 1; _ii <= 29; _ii++)  					{  						if (_buffer[_ii + 1] != _buffer[_ii])  						{  							_v5 = 1;  						}  					}    					_fD8 = _v5 * 30;    					_f38 = _fD8 == 0 ? _series : _buffer[1];    					_f18 = _f38;    					if (_fD8 > 29)  						_fD8 = 29;  				}  				else  					_fD8 = 0;    				//----  				for (_ii = _fD8; _ii >= 0; _ii--)  				{  					//{ another bigcycle...}  					_value2 = 31 - _ii;    					_f8 = _ii == 0 ? _series : _buffer[_value2];    					_f28 = _f8 - _f18;  					_f48 = _f8 - _f38;    					_v2 = Math.Max(Math.Abs(_f28)' Math.Abs(_f48));    					_fA0 = _v2;  					_vv = _fA0 + 0.0000000001; //{1.0e-10;}    					//----  					if (_s48 <= 1)  					{  						_s48 = 127;  					}  					else  					{  						_s48 = _s48 - 1;  					}    					if (_s50 <= 1)  					{  						_s50 = 10;  					}  					else  					{  						_s50 = _s50 - 1;  					}    					if (_s70 < 128)  						_s70 = _s70 + 1;    					_s8 = _s8 + _vv - _ring2[_s50];  					_ring2[_s50] = _vv;    					if (_s70 > 10)  					{  						_s20 = _s8 / 10;  					}  					else  						_s20 = _s8 / _s70;    					//----  					if (_s70 > 127)  					{  						_s10 = _ring1[_s48];  						_ring1[_s48] = _s20;  						_s68 = 64;  						_s58 = Convert.ToInt32(_s68);    						while (_s68 > 1)  						{  							if (_list[_s58] < _s10)  							{  								_s68 = _s68 * 0.5;  								_s58 = _s58 + Convert.ToInt32(_s68);  							}  							else  								if (_list[_s58] <= _s10)  								{  									_s68 = 1;  								}  								else  								{  									_s68 = _s68 * 0.5;  									_s58 = _s58 - Convert.ToInt32(_s68);  								}  						}  					}  					else  					{  						_ring1[_s48] = _s20;    						if (_s28 + _s30 > 127)  						{  							_s30 = _s30 - 1;  							_s58 = Convert.ToInt32(_s30);  						}  						else  						{  							_s28 = _s28 + 1;  							_s58 = Convert.ToInt32(_s28);  						}    						_s38 = _s28 > 96 ? 96 : Convert.ToInt32(_s28);  						_s40 = _s30 < 32 ? 32 : Convert.ToInt32(_s30);  					}    					//----  					_s68 = 64;  					_s60 = Convert.ToInt32(_s68);    					while (_s68 > 1)  					{  						if (_list[_s60] >= _s20)  						{  							if (_list[_s60 - 1] <= _s20)  							{  								_s68 = 1;  							}  							else  							{  								_s68 = _s68 * 0.5;  								_s60 = _s60 - Convert.ToInt32(_s68);  							}  						}  						else  						{  							_s68 = _s68 * 0.5;  							_s60 = _s60 + Convert.ToInt32(_s68);  						}    						if ((_s60 == 127) && (_s20 > _list[127]))  							_s60 = 128;  					}    					if (_s70 > 127)  					{  						if (_s58 >= _s60)  						{  							if ((_s38 + 1 > _s60) && (_s40 - 1 < _s60))  							{  								_s18 = _s18 + _s20;  							}  							else  								if ((_s40 > _s60) && (_s40 - 1 < _s58))  									_s18 = _s18 + _list[_s40 - 1];  						}  						else  							if (_s40 >= _s60)  							{  								if ((_s38 + 1 < _s60) && (_s38 + 1 > _s58))  									_s18 = _s18 + _list[_s38 + 1];  							}  							else  								if (_s38 + 2 > _s60)  								{  									_s18 = _s18 + _s20;  								}  								else  									if ((_s38 + 1 < _s60) && (_s38 + 1 > _s58))  										_s18 = _s18 + _list[_s38 + 1];    						if (_s58 > _s60)  						{  							if ((_s40 - 1 < _s58) && (_s38 + 1 > _s58))  							{  								_s18 = _s18 - _list[_s58];  							}  							else  								if ((_s38 < _s58) && (_s38 + 1 > _s60))  									_s18 = _s18 - _list[_s38];  						}  						else  						{  							if ((_s38 + 1 > _s58) && (_s40 - 1 < _s58))  							{  								_s18 = _s18 - _list[_s58];  							}  							else  								if ((_s40 > _s58) && (_s40 < _s60))  									_s18 = _s18 - _list[_s40];  						}  					}    					if (_s58 <= _s60)  					{  						if (_s58 >= _s60)  						{  							_list[_s60] = _s20;  						}  						else  						{  							for (_jj = _s58 + 1; _jj <= _s60 - 1; _jj++)  							{  								_list[_jj - 1] = _list[_jj];  							}  							_list[_s60 - 1] = _s20;  						}  					}  					else  					{  						for (_jj = _s58 - 1; _jj >= _s60; _jj--)  						{  							_list[_jj + 1] = _list[_jj];  						}  						_list[_s60] = _s20;  					}    					if (_s70 <= 127)  					{  						_s18 = 0;  						for (_jj = _s40; _jj <= _s38; _jj++)  						{  							_s18 = _s18 + _list[_jj];  						}  					}    					_f60 = _s18 / (_s38 - _s40 + 1);    					if (_fF8 + 1 > 31)  					{  						_fF8 = 31;  					}  					else  						_fF8 = _fF8 + 1;    					//----  					if (_fF8 <= 30)  					{  						if (_f28 > 0)  						{  							_f18 = _f8;  						}  						else  							_f18 = _f8 - _f28 * _f90;    						if (_f48 < 0)  						{  							_f38 = _f8;  						}  						else  							_f38 = _f8 - _f48 * _f90;    						_fB8 = _series;    						if (_fF8 != 30)  						{  							continue;  						}    						if (_fF8 == 30)  						{  							_fC0 = _series;    							_v4 = Math.Max(Math.Ceiling(_f78)' 1);    							_fE8 = (int)Math.Ceiling(_v4);    							_v2 = Math.Max(Math.Floor(_f78)' 1);    							_fE0 = (int)Math.Ceiling(_v2);    							if (_fE8 == _fE0)  							{  								_f68 = 1;  							}  							else  							{  								_v4 = _fE8 - _fE0;  								_f68 = (_f78 - _fE0) / _v4;  							}    							_v5 = _fE0 <= 29 ? Convert.ToInt32(_fE0) : 29;    							_v6 = _fE8 <= 29 ? Convert.ToInt32(_fE8) : 29;    							_fA8 = (_series - _buffer[_fF0 - _v5]) * (1 - _f68) / _fE0 + (_series - _buffer[_fF0 - _v6]) * _f68 / _fE8;  						}  					}  					else  					{  						_v1 = Math.Min(_f98' Math.Pow(_fA0 / _f60' _f88));    						if (_v1 < 1)  						{  							_v2 = 1;  						}  						else  						{  							_v3 = Math.Min(_f98' Math.Pow(_fA0 / _f60' _f88));    							_v2 = _v3;  						}    						_f58 = _v2;  						_f70 = Math.Pow(_f90' Math.Sqrt(_f58));    						if (_f28 > 0)  						{  							_f18 = _f8;  						}  						else  						{  							_f18 = _f8 - _f28 * _f70;  						}    						if (_f48 < 0)  						{  							_f38 = _f8;  						}  						else  						{  							_f38 = _f8 - _f48 * _f70;  						}  					}  				}    				if (_fF8 > 30)  				{  					_f30 = Math.Pow(_f50' _f58);  					_fC0 = (1 - _f30) * _series + _f30 * _fC0;  					_fC8 = (_series - _fC0) * (1 - _f50) + _f50 * _fC8;  					_fD0 = _f10 * _fC8 + _fC0;  					_f20 = -_f30 * 2;  					_f40 = _f30 * _f30;  					_fB0 = _f20 + _f40 + 1;  					_fA8 = (_fD0 - _fB8) * _fB0 + _f40 * _fA8;  					_fB8 = _fB8 + _fA8;  				}    				lastValue = (decimal)_fB8;  			}
Magic Number,StockSharp.Algo.Indicators,JurikMovingAverage,C:\repos\stocksharp_stocksharp\Algo\Indicators\JurikMovingAverage.cs,OnProcess,The following statement contains a magic number: if (_fF0 > 30)  			{  				if (Length < 1.0000000002)  				{  					_f80 = 0.0000000001; //{1.0e-10}  				}  				else  				{  					_f80 = (Length - 1) / 2.0;  				}    				if (_phase < -100)  				{  					_f10 = 0.5;  				}  				else  				{  					if (_phase > 100)  					{  						_f10 = 2.5;  					}  					else  					{  						_f10 = (double)_phase / 100 + 1.5;  					}  				}    				_v1 = Math.Log(Math.Sqrt(_f80));  				_v2 = _v1;    				if (_v1 / Math.Log(2.0) + 2.0 < 0.0)  				{  					_v3 = 0;  				}  				else  				{  					_v3 = _v2 / Math.Log(2.0) + 2.0;  				}    				_f98 = _v3;    				//----  				if (0.5 <= _f98 - 2.0)  				{  					_f88 = _f98 - 2.0;  				}  				else  				{  					_f88 = 0.5;  				}    				_f78 = Math.Sqrt(_f80) * _f98;  				_f90 = _f78 / (_f78 + 1.0);  				_f80 = _f80 * 0.9;  				_f50 = _f80 / (_f80 + 2.0);    				//----  				if (_f0 != 0)  				{  					_f0 = 0;  					_v5 = 0;    					for (_ii = 1; _ii <= 29; _ii++)  					{  						if (_buffer[_ii + 1] != _buffer[_ii])  						{  							_v5 = 1;  						}  					}    					_fD8 = _v5 * 30;    					_f38 = _fD8 == 0 ? _series : _buffer[1];    					_f18 = _f38;    					if (_fD8 > 29)  						_fD8 = 29;  				}  				else  					_fD8 = 0;    				//----  				for (_ii = _fD8; _ii >= 0; _ii--)  				{  					//{ another bigcycle...}  					_value2 = 31 - _ii;    					_f8 = _ii == 0 ? _series : _buffer[_value2];    					_f28 = _f8 - _f18;  					_f48 = _f8 - _f38;    					_v2 = Math.Max(Math.Abs(_f28)' Math.Abs(_f48));    					_fA0 = _v2;  					_vv = _fA0 + 0.0000000001; //{1.0e-10;}    					//----  					if (_s48 <= 1)  					{  						_s48 = 127;  					}  					else  					{  						_s48 = _s48 - 1;  					}    					if (_s50 <= 1)  					{  						_s50 = 10;  					}  					else  					{  						_s50 = _s50 - 1;  					}    					if (_s70 < 128)  						_s70 = _s70 + 1;    					_s8 = _s8 + _vv - _ring2[_s50];  					_ring2[_s50] = _vv;    					if (_s70 > 10)  					{  						_s20 = _s8 / 10;  					}  					else  						_s20 = _s8 / _s70;    					//----  					if (_s70 > 127)  					{  						_s10 = _ring1[_s48];  						_ring1[_s48] = _s20;  						_s68 = 64;  						_s58 = Convert.ToInt32(_s68);    						while (_s68 > 1)  						{  							if (_list[_s58] < _s10)  							{  								_s68 = _s68 * 0.5;  								_s58 = _s58 + Convert.ToInt32(_s68);  							}  							else  								if (_list[_s58] <= _s10)  								{  									_s68 = 1;  								}  								else  								{  									_s68 = _s68 * 0.5;  									_s58 = _s58 - Convert.ToInt32(_s68);  								}  						}  					}  					else  					{  						_ring1[_s48] = _s20;    						if (_s28 + _s30 > 127)  						{  							_s30 = _s30 - 1;  							_s58 = Convert.ToInt32(_s30);  						}  						else  						{  							_s28 = _s28 + 1;  							_s58 = Convert.ToInt32(_s28);  						}    						_s38 = _s28 > 96 ? 96 : Convert.ToInt32(_s28);  						_s40 = _s30 < 32 ? 32 : Convert.ToInt32(_s30);  					}    					//----  					_s68 = 64;  					_s60 = Convert.ToInt32(_s68);    					while (_s68 > 1)  					{  						if (_list[_s60] >= _s20)  						{  							if (_list[_s60 - 1] <= _s20)  							{  								_s68 = 1;  							}  							else  							{  								_s68 = _s68 * 0.5;  								_s60 = _s60 - Convert.ToInt32(_s68);  							}  						}  						else  						{  							_s68 = _s68 * 0.5;  							_s60 = _s60 + Convert.ToInt32(_s68);  						}    						if ((_s60 == 127) && (_s20 > _list[127]))  							_s60 = 128;  					}    					if (_s70 > 127)  					{  						if (_s58 >= _s60)  						{  							if ((_s38 + 1 > _s60) && (_s40 - 1 < _s60))  							{  								_s18 = _s18 + _s20;  							}  							else  								if ((_s40 > _s60) && (_s40 - 1 < _s58))  									_s18 = _s18 + _list[_s40 - 1];  						}  						else  							if (_s40 >= _s60)  							{  								if ((_s38 + 1 < _s60) && (_s38 + 1 > _s58))  									_s18 = _s18 + _list[_s38 + 1];  							}  							else  								if (_s38 + 2 > _s60)  								{  									_s18 = _s18 + _s20;  								}  								else  									if ((_s38 + 1 < _s60) && (_s38 + 1 > _s58))  										_s18 = _s18 + _list[_s38 + 1];    						if (_s58 > _s60)  						{  							if ((_s40 - 1 < _s58) && (_s38 + 1 > _s58))  							{  								_s18 = _s18 - _list[_s58];  							}  							else  								if ((_s38 < _s58) && (_s38 + 1 > _s60))  									_s18 = _s18 - _list[_s38];  						}  						else  						{  							if ((_s38 + 1 > _s58) && (_s40 - 1 < _s58))  							{  								_s18 = _s18 - _list[_s58];  							}  							else  								if ((_s40 > _s58) && (_s40 < _s60))  									_s18 = _s18 - _list[_s40];  						}  					}    					if (_s58 <= _s60)  					{  						if (_s58 >= _s60)  						{  							_list[_s60] = _s20;  						}  						else  						{  							for (_jj = _s58 + 1; _jj <= _s60 - 1; _jj++)  							{  								_list[_jj - 1] = _list[_jj];  							}  							_list[_s60 - 1] = _s20;  						}  					}  					else  					{  						for (_jj = _s58 - 1; _jj >= _s60; _jj--)  						{  							_list[_jj + 1] = _list[_jj];  						}  						_list[_s60] = _s20;  					}    					if (_s70 <= 127)  					{  						_s18 = 0;  						for (_jj = _s40; _jj <= _s38; _jj++)  						{  							_s18 = _s18 + _list[_jj];  						}  					}    					_f60 = _s18 / (_s38 - _s40 + 1);    					if (_fF8 + 1 > 31)  					{  						_fF8 = 31;  					}  					else  						_fF8 = _fF8 + 1;    					//----  					if (_fF8 <= 30)  					{  						if (_f28 > 0)  						{  							_f18 = _f8;  						}  						else  							_f18 = _f8 - _f28 * _f90;    						if (_f48 < 0)  						{  							_f38 = _f8;  						}  						else  							_f38 = _f8 - _f48 * _f90;    						_fB8 = _series;    						if (_fF8 != 30)  						{  							continue;  						}    						if (_fF8 == 30)  						{  							_fC0 = _series;    							_v4 = Math.Max(Math.Ceiling(_f78)' 1);    							_fE8 = (int)Math.Ceiling(_v4);    							_v2 = Math.Max(Math.Floor(_f78)' 1);    							_fE0 = (int)Math.Ceiling(_v2);    							if (_fE8 == _fE0)  							{  								_f68 = 1;  							}  							else  							{  								_v4 = _fE8 - _fE0;  								_f68 = (_f78 - _fE0) / _v4;  							}    							_v5 = _fE0 <= 29 ? Convert.ToInt32(_fE0) : 29;    							_v6 = _fE8 <= 29 ? Convert.ToInt32(_fE8) : 29;    							_fA8 = (_series - _buffer[_fF0 - _v5]) * (1 - _f68) / _fE0 + (_series - _buffer[_fF0 - _v6]) * _f68 / _fE8;  						}  					}  					else  					{  						_v1 = Math.Min(_f98' Math.Pow(_fA0 / _f60' _f88));    						if (_v1 < 1)  						{  							_v2 = 1;  						}  						else  						{  							_v3 = Math.Min(_f98' Math.Pow(_fA0 / _f60' _f88));    							_v2 = _v3;  						}    						_f58 = _v2;  						_f70 = Math.Pow(_f90' Math.Sqrt(_f58));    						if (_f28 > 0)  						{  							_f18 = _f8;  						}  						else  						{  							_f18 = _f8 - _f28 * _f70;  						}    						if (_f48 < 0)  						{  							_f38 = _f8;  						}  						else  						{  							_f38 = _f8 - _f48 * _f70;  						}  					}  				}    				if (_fF8 > 30)  				{  					_f30 = Math.Pow(_f50' _f58);  					_fC0 = (1 - _f30) * _series + _f30 * _fC0;  					_fC8 = (_series - _fC0) * (1 - _f50) + _f50 * _fC8;  					_fD0 = _f10 * _fC8 + _fC0;  					_f20 = -_f30 * 2;  					_f40 = _f30 * _f30;  					_fB0 = _f20 + _f40 + 1;  					_fA8 = (_fD0 - _fB8) * _fB0 + _f40 * _fA8;  					_fB8 = _fB8 + _fA8;  				}    				lastValue = (decimal)_fB8;  			}
Magic Number,StockSharp.Algo.Indicators,JurikMovingAverage,C:\repos\stocksharp_stocksharp\Algo\Indicators\JurikMovingAverage.cs,OnProcess,The following statement contains a magic number: if (_fF0 > 30)  			{  				if (Length < 1.0000000002)  				{  					_f80 = 0.0000000001; //{1.0e-10}  				}  				else  				{  					_f80 = (Length - 1) / 2.0;  				}    				if (_phase < -100)  				{  					_f10 = 0.5;  				}  				else  				{  					if (_phase > 100)  					{  						_f10 = 2.5;  					}  					else  					{  						_f10 = (double)_phase / 100 + 1.5;  					}  				}    				_v1 = Math.Log(Math.Sqrt(_f80));  				_v2 = _v1;    				if (_v1 / Math.Log(2.0) + 2.0 < 0.0)  				{  					_v3 = 0;  				}  				else  				{  					_v3 = _v2 / Math.Log(2.0) + 2.0;  				}    				_f98 = _v3;    				//----  				if (0.5 <= _f98 - 2.0)  				{  					_f88 = _f98 - 2.0;  				}  				else  				{  					_f88 = 0.5;  				}    				_f78 = Math.Sqrt(_f80) * _f98;  				_f90 = _f78 / (_f78 + 1.0);  				_f80 = _f80 * 0.9;  				_f50 = _f80 / (_f80 + 2.0);    				//----  				if (_f0 != 0)  				{  					_f0 = 0;  					_v5 = 0;    					for (_ii = 1; _ii <= 29; _ii++)  					{  						if (_buffer[_ii + 1] != _buffer[_ii])  						{  							_v5 = 1;  						}  					}    					_fD8 = _v5 * 30;    					_f38 = _fD8 == 0 ? _series : _buffer[1];    					_f18 = _f38;    					if (_fD8 > 29)  						_fD8 = 29;  				}  				else  					_fD8 = 0;    				//----  				for (_ii = _fD8; _ii >= 0; _ii--)  				{  					//{ another bigcycle...}  					_value2 = 31 - _ii;    					_f8 = _ii == 0 ? _series : _buffer[_value2];    					_f28 = _f8 - _f18;  					_f48 = _f8 - _f38;    					_v2 = Math.Max(Math.Abs(_f28)' Math.Abs(_f48));    					_fA0 = _v2;  					_vv = _fA0 + 0.0000000001; //{1.0e-10;}    					//----  					if (_s48 <= 1)  					{  						_s48 = 127;  					}  					else  					{  						_s48 = _s48 - 1;  					}    					if (_s50 <= 1)  					{  						_s50 = 10;  					}  					else  					{  						_s50 = _s50 - 1;  					}    					if (_s70 < 128)  						_s70 = _s70 + 1;    					_s8 = _s8 + _vv - _ring2[_s50];  					_ring2[_s50] = _vv;    					if (_s70 > 10)  					{  						_s20 = _s8 / 10;  					}  					else  						_s20 = _s8 / _s70;    					//----  					if (_s70 > 127)  					{  						_s10 = _ring1[_s48];  						_ring1[_s48] = _s20;  						_s68 = 64;  						_s58 = Convert.ToInt32(_s68);    						while (_s68 > 1)  						{  							if (_list[_s58] < _s10)  							{  								_s68 = _s68 * 0.5;  								_s58 = _s58 + Convert.ToInt32(_s68);  							}  							else  								if (_list[_s58] <= _s10)  								{  									_s68 = 1;  								}  								else  								{  									_s68 = _s68 * 0.5;  									_s58 = _s58 - Convert.ToInt32(_s68);  								}  						}  					}  					else  					{  						_ring1[_s48] = _s20;    						if (_s28 + _s30 > 127)  						{  							_s30 = _s30 - 1;  							_s58 = Convert.ToInt32(_s30);  						}  						else  						{  							_s28 = _s28 + 1;  							_s58 = Convert.ToInt32(_s28);  						}    						_s38 = _s28 > 96 ? 96 : Convert.ToInt32(_s28);  						_s40 = _s30 < 32 ? 32 : Convert.ToInt32(_s30);  					}    					//----  					_s68 = 64;  					_s60 = Convert.ToInt32(_s68);    					while (_s68 > 1)  					{  						if (_list[_s60] >= _s20)  						{  							if (_list[_s60 - 1] <= _s20)  							{  								_s68 = 1;  							}  							else  							{  								_s68 = _s68 * 0.5;  								_s60 = _s60 - Convert.ToInt32(_s68);  							}  						}  						else  						{  							_s68 = _s68 * 0.5;  							_s60 = _s60 + Convert.ToInt32(_s68);  						}    						if ((_s60 == 127) && (_s20 > _list[127]))  							_s60 = 128;  					}    					if (_s70 > 127)  					{  						if (_s58 >= _s60)  						{  							if ((_s38 + 1 > _s60) && (_s40 - 1 < _s60))  							{  								_s18 = _s18 + _s20;  							}  							else  								if ((_s40 > _s60) && (_s40 - 1 < _s58))  									_s18 = _s18 + _list[_s40 - 1];  						}  						else  							if (_s40 >= _s60)  							{  								if ((_s38 + 1 < _s60) && (_s38 + 1 > _s58))  									_s18 = _s18 + _list[_s38 + 1];  							}  							else  								if (_s38 + 2 > _s60)  								{  									_s18 = _s18 + _s20;  								}  								else  									if ((_s38 + 1 < _s60) && (_s38 + 1 > _s58))  										_s18 = _s18 + _list[_s38 + 1];    						if (_s58 > _s60)  						{  							if ((_s40 - 1 < _s58) && (_s38 + 1 > _s58))  							{  								_s18 = _s18 - _list[_s58];  							}  							else  								if ((_s38 < _s58) && (_s38 + 1 > _s60))  									_s18 = _s18 - _list[_s38];  						}  						else  						{  							if ((_s38 + 1 > _s58) && (_s40 - 1 < _s58))  							{  								_s18 = _s18 - _list[_s58];  							}  							else  								if ((_s40 > _s58) && (_s40 < _s60))  									_s18 = _s18 - _list[_s40];  						}  					}    					if (_s58 <= _s60)  					{  						if (_s58 >= _s60)  						{  							_list[_s60] = _s20;  						}  						else  						{  							for (_jj = _s58 + 1; _jj <= _s60 - 1; _jj++)  							{  								_list[_jj - 1] = _list[_jj];  							}  							_list[_s60 - 1] = _s20;  						}  					}  					else  					{  						for (_jj = _s58 - 1; _jj >= _s60; _jj--)  						{  							_list[_jj + 1] = _list[_jj];  						}  						_list[_s60] = _s20;  					}    					if (_s70 <= 127)  					{  						_s18 = 0;  						for (_jj = _s40; _jj <= _s38; _jj++)  						{  							_s18 = _s18 + _list[_jj];  						}  					}    					_f60 = _s18 / (_s38 - _s40 + 1);    					if (_fF8 + 1 > 31)  					{  						_fF8 = 31;  					}  					else  						_fF8 = _fF8 + 1;    					//----  					if (_fF8 <= 30)  					{  						if (_f28 > 0)  						{  							_f18 = _f8;  						}  						else  							_f18 = _f8 - _f28 * _f90;    						if (_f48 < 0)  						{  							_f38 = _f8;  						}  						else  							_f38 = _f8 - _f48 * _f90;    						_fB8 = _series;    						if (_fF8 != 30)  						{  							continue;  						}    						if (_fF8 == 30)  						{  							_fC0 = _series;    							_v4 = Math.Max(Math.Ceiling(_f78)' 1);    							_fE8 = (int)Math.Ceiling(_v4);    							_v2 = Math.Max(Math.Floor(_f78)' 1);    							_fE0 = (int)Math.Ceiling(_v2);    							if (_fE8 == _fE0)  							{  								_f68 = 1;  							}  							else  							{  								_v4 = _fE8 - _fE0;  								_f68 = (_f78 - _fE0) / _v4;  							}    							_v5 = _fE0 <= 29 ? Convert.ToInt32(_fE0) : 29;    							_v6 = _fE8 <= 29 ? Convert.ToInt32(_fE8) : 29;    							_fA8 = (_series - _buffer[_fF0 - _v5]) * (1 - _f68) / _fE0 + (_series - _buffer[_fF0 - _v6]) * _f68 / _fE8;  						}  					}  					else  					{  						_v1 = Math.Min(_f98' Math.Pow(_fA0 / _f60' _f88));    						if (_v1 < 1)  						{  							_v2 = 1;  						}  						else  						{  							_v3 = Math.Min(_f98' Math.Pow(_fA0 / _f60' _f88));    							_v2 = _v3;  						}    						_f58 = _v2;  						_f70 = Math.Pow(_f90' Math.Sqrt(_f58));    						if (_f28 > 0)  						{  							_f18 = _f8;  						}  						else  						{  							_f18 = _f8 - _f28 * _f70;  						}    						if (_f48 < 0)  						{  							_f38 = _f8;  						}  						else  						{  							_f38 = _f8 - _f48 * _f70;  						}  					}  				}    				if (_fF8 > 30)  				{  					_f30 = Math.Pow(_f50' _f58);  					_fC0 = (1 - _f30) * _series + _f30 * _fC0;  					_fC8 = (_series - _fC0) * (1 - _f50) + _f50 * _fC8;  					_fD0 = _f10 * _fC8 + _fC0;  					_f20 = -_f30 * 2;  					_f40 = _f30 * _f30;  					_fB0 = _f20 + _f40 + 1;  					_fA8 = (_fD0 - _fB8) * _fB0 + _f40 * _fA8;  					_fB8 = _fB8 + _fA8;  				}    				lastValue = (decimal)_fB8;  			}
Magic Number,StockSharp.Algo.Indicators,JurikMovingAverage,C:\repos\stocksharp_stocksharp\Algo\Indicators\JurikMovingAverage.cs,OnProcess,The following statement contains a magic number: if (_fF0 > 30)  			{  				if (Length < 1.0000000002)  				{  					_f80 = 0.0000000001; //{1.0e-10}  				}  				else  				{  					_f80 = (Length - 1) / 2.0;  				}    				if (_phase < -100)  				{  					_f10 = 0.5;  				}  				else  				{  					if (_phase > 100)  					{  						_f10 = 2.5;  					}  					else  					{  						_f10 = (double)_phase / 100 + 1.5;  					}  				}    				_v1 = Math.Log(Math.Sqrt(_f80));  				_v2 = _v1;    				if (_v1 / Math.Log(2.0) + 2.0 < 0.0)  				{  					_v3 = 0;  				}  				else  				{  					_v3 = _v2 / Math.Log(2.0) + 2.0;  				}    				_f98 = _v3;    				//----  				if (0.5 <= _f98 - 2.0)  				{  					_f88 = _f98 - 2.0;  				}  				else  				{  					_f88 = 0.5;  				}    				_f78 = Math.Sqrt(_f80) * _f98;  				_f90 = _f78 / (_f78 + 1.0);  				_f80 = _f80 * 0.9;  				_f50 = _f80 / (_f80 + 2.0);    				//----  				if (_f0 != 0)  				{  					_f0 = 0;  					_v5 = 0;    					for (_ii = 1; _ii <= 29; _ii++)  					{  						if (_buffer[_ii + 1] != _buffer[_ii])  						{  							_v5 = 1;  						}  					}    					_fD8 = _v5 * 30;    					_f38 = _fD8 == 0 ? _series : _buffer[1];    					_f18 = _f38;    					if (_fD8 > 29)  						_fD8 = 29;  				}  				else  					_fD8 = 0;    				//----  				for (_ii = _fD8; _ii >= 0; _ii--)  				{  					//{ another bigcycle...}  					_value2 = 31 - _ii;    					_f8 = _ii == 0 ? _series : _buffer[_value2];    					_f28 = _f8 - _f18;  					_f48 = _f8 - _f38;    					_v2 = Math.Max(Math.Abs(_f28)' Math.Abs(_f48));    					_fA0 = _v2;  					_vv = _fA0 + 0.0000000001; //{1.0e-10;}    					//----  					if (_s48 <= 1)  					{  						_s48 = 127;  					}  					else  					{  						_s48 = _s48 - 1;  					}    					if (_s50 <= 1)  					{  						_s50 = 10;  					}  					else  					{  						_s50 = _s50 - 1;  					}    					if (_s70 < 128)  						_s70 = _s70 + 1;    					_s8 = _s8 + _vv - _ring2[_s50];  					_ring2[_s50] = _vv;    					if (_s70 > 10)  					{  						_s20 = _s8 / 10;  					}  					else  						_s20 = _s8 / _s70;    					//----  					if (_s70 > 127)  					{  						_s10 = _ring1[_s48];  						_ring1[_s48] = _s20;  						_s68 = 64;  						_s58 = Convert.ToInt32(_s68);    						while (_s68 > 1)  						{  							if (_list[_s58] < _s10)  							{  								_s68 = _s68 * 0.5;  								_s58 = _s58 + Convert.ToInt32(_s68);  							}  							else  								if (_list[_s58] <= _s10)  								{  									_s68 = 1;  								}  								else  								{  									_s68 = _s68 * 0.5;  									_s58 = _s58 - Convert.ToInt32(_s68);  								}  						}  					}  					else  					{  						_ring1[_s48] = _s20;    						if (_s28 + _s30 > 127)  						{  							_s30 = _s30 - 1;  							_s58 = Convert.ToInt32(_s30);  						}  						else  						{  							_s28 = _s28 + 1;  							_s58 = Convert.ToInt32(_s28);  						}    						_s38 = _s28 > 96 ? 96 : Convert.ToInt32(_s28);  						_s40 = _s30 < 32 ? 32 : Convert.ToInt32(_s30);  					}    					//----  					_s68 = 64;  					_s60 = Convert.ToInt32(_s68);    					while (_s68 > 1)  					{  						if (_list[_s60] >= _s20)  						{  							if (_list[_s60 - 1] <= _s20)  							{  								_s68 = 1;  							}  							else  							{  								_s68 = _s68 * 0.5;  								_s60 = _s60 - Convert.ToInt32(_s68);  							}  						}  						else  						{  							_s68 = _s68 * 0.5;  							_s60 = _s60 + Convert.ToInt32(_s68);  						}    						if ((_s60 == 127) && (_s20 > _list[127]))  							_s60 = 128;  					}    					if (_s70 > 127)  					{  						if (_s58 >= _s60)  						{  							if ((_s38 + 1 > _s60) && (_s40 - 1 < _s60))  							{  								_s18 = _s18 + _s20;  							}  							else  								if ((_s40 > _s60) && (_s40 - 1 < _s58))  									_s18 = _s18 + _list[_s40 - 1];  						}  						else  							if (_s40 >= _s60)  							{  								if ((_s38 + 1 < _s60) && (_s38 + 1 > _s58))  									_s18 = _s18 + _list[_s38 + 1];  							}  							else  								if (_s38 + 2 > _s60)  								{  									_s18 = _s18 + _s20;  								}  								else  									if ((_s38 + 1 < _s60) && (_s38 + 1 > _s58))  										_s18 = _s18 + _list[_s38 + 1];    						if (_s58 > _s60)  						{  							if ((_s40 - 1 < _s58) && (_s38 + 1 > _s58))  							{  								_s18 = _s18 - _list[_s58];  							}  							else  								if ((_s38 < _s58) && (_s38 + 1 > _s60))  									_s18 = _s18 - _list[_s38];  						}  						else  						{  							if ((_s38 + 1 > _s58) && (_s40 - 1 < _s58))  							{  								_s18 = _s18 - _list[_s58];  							}  							else  								if ((_s40 > _s58) && (_s40 < _s60))  									_s18 = _s18 - _list[_s40];  						}  					}    					if (_s58 <= _s60)  					{  						if (_s58 >= _s60)  						{  							_list[_s60] = _s20;  						}  						else  						{  							for (_jj = _s58 + 1; _jj <= _s60 - 1; _jj++)  							{  								_list[_jj - 1] = _list[_jj];  							}  							_list[_s60 - 1] = _s20;  						}  					}  					else  					{  						for (_jj = _s58 - 1; _jj >= _s60; _jj--)  						{  							_list[_jj + 1] = _list[_jj];  						}  						_list[_s60] = _s20;  					}    					if (_s70 <= 127)  					{  						_s18 = 0;  						for (_jj = _s40; _jj <= _s38; _jj++)  						{  							_s18 = _s18 + _list[_jj];  						}  					}    					_f60 = _s18 / (_s38 - _s40 + 1);    					if (_fF8 + 1 > 31)  					{  						_fF8 = 31;  					}  					else  						_fF8 = _fF8 + 1;    					//----  					if (_fF8 <= 30)  					{  						if (_f28 > 0)  						{  							_f18 = _f8;  						}  						else  							_f18 = _f8 - _f28 * _f90;    						if (_f48 < 0)  						{  							_f38 = _f8;  						}  						else  							_f38 = _f8 - _f48 * _f90;    						_fB8 = _series;    						if (_fF8 != 30)  						{  							continue;  						}    						if (_fF8 == 30)  						{  							_fC0 = _series;    							_v4 = Math.Max(Math.Ceiling(_f78)' 1);    							_fE8 = (int)Math.Ceiling(_v4);    							_v2 = Math.Max(Math.Floor(_f78)' 1);    							_fE0 = (int)Math.Ceiling(_v2);    							if (_fE8 == _fE0)  							{  								_f68 = 1;  							}  							else  							{  								_v4 = _fE8 - _fE0;  								_f68 = (_f78 - _fE0) / _v4;  							}    							_v5 = _fE0 <= 29 ? Convert.ToInt32(_fE0) : 29;    							_v6 = _fE8 <= 29 ? Convert.ToInt32(_fE8) : 29;    							_fA8 = (_series - _buffer[_fF0 - _v5]) * (1 - _f68) / _fE0 + (_series - _buffer[_fF0 - _v6]) * _f68 / _fE8;  						}  					}  					else  					{  						_v1 = Math.Min(_f98' Math.Pow(_fA0 / _f60' _f88));    						if (_v1 < 1)  						{  							_v2 = 1;  						}  						else  						{  							_v3 = Math.Min(_f98' Math.Pow(_fA0 / _f60' _f88));    							_v2 = _v3;  						}    						_f58 = _v2;  						_f70 = Math.Pow(_f90' Math.Sqrt(_f58));    						if (_f28 > 0)  						{  							_f18 = _f8;  						}  						else  						{  							_f18 = _f8 - _f28 * _f70;  						}    						if (_f48 < 0)  						{  							_f38 = _f8;  						}  						else  						{  							_f38 = _f8 - _f48 * _f70;  						}  					}  				}    				if (_fF8 > 30)  				{  					_f30 = Math.Pow(_f50' _f58);  					_fC0 = (1 - _f30) * _series + _f30 * _fC0;  					_fC8 = (_series - _fC0) * (1 - _f50) + _f50 * _fC8;  					_fD0 = _f10 * _fC8 + _fC0;  					_f20 = -_f30 * 2;  					_f40 = _f30 * _f30;  					_fB0 = _f20 + _f40 + 1;  					_fA8 = (_fD0 - _fB8) * _fB0 + _f40 * _fA8;  					_fB8 = _fB8 + _fA8;  				}    				lastValue = (decimal)_fB8;  			}
Magic Number,StockSharp.Algo.Indicators,JurikMovingAverage,C:\repos\stocksharp_stocksharp\Algo\Indicators\JurikMovingAverage.cs,OnProcess,The following statement contains a magic number: if (_fF0 > 30)  			{  				if (Length < 1.0000000002)  				{  					_f80 = 0.0000000001; //{1.0e-10}  				}  				else  				{  					_f80 = (Length - 1) / 2.0;  				}    				if (_phase < -100)  				{  					_f10 = 0.5;  				}  				else  				{  					if (_phase > 100)  					{  						_f10 = 2.5;  					}  					else  					{  						_f10 = (double)_phase / 100 + 1.5;  					}  				}    				_v1 = Math.Log(Math.Sqrt(_f80));  				_v2 = _v1;    				if (_v1 / Math.Log(2.0) + 2.0 < 0.0)  				{  					_v3 = 0;  				}  				else  				{  					_v3 = _v2 / Math.Log(2.0) + 2.0;  				}    				_f98 = _v3;    				//----  				if (0.5 <= _f98 - 2.0)  				{  					_f88 = _f98 - 2.0;  				}  				else  				{  					_f88 = 0.5;  				}    				_f78 = Math.Sqrt(_f80) * _f98;  				_f90 = _f78 / (_f78 + 1.0);  				_f80 = _f80 * 0.9;  				_f50 = _f80 / (_f80 + 2.0);    				//----  				if (_f0 != 0)  				{  					_f0 = 0;  					_v5 = 0;    					for (_ii = 1; _ii <= 29; _ii++)  					{  						if (_buffer[_ii + 1] != _buffer[_ii])  						{  							_v5 = 1;  						}  					}    					_fD8 = _v5 * 30;    					_f38 = _fD8 == 0 ? _series : _buffer[1];    					_f18 = _f38;    					if (_fD8 > 29)  						_fD8 = 29;  				}  				else  					_fD8 = 0;    				//----  				for (_ii = _fD8; _ii >= 0; _ii--)  				{  					//{ another bigcycle...}  					_value2 = 31 - _ii;    					_f8 = _ii == 0 ? _series : _buffer[_value2];    					_f28 = _f8 - _f18;  					_f48 = _f8 - _f38;    					_v2 = Math.Max(Math.Abs(_f28)' Math.Abs(_f48));    					_fA0 = _v2;  					_vv = _fA0 + 0.0000000001; //{1.0e-10;}    					//----  					if (_s48 <= 1)  					{  						_s48 = 127;  					}  					else  					{  						_s48 = _s48 - 1;  					}    					if (_s50 <= 1)  					{  						_s50 = 10;  					}  					else  					{  						_s50 = _s50 - 1;  					}    					if (_s70 < 128)  						_s70 = _s70 + 1;    					_s8 = _s8 + _vv - _ring2[_s50];  					_ring2[_s50] = _vv;    					if (_s70 > 10)  					{  						_s20 = _s8 / 10;  					}  					else  						_s20 = _s8 / _s70;    					//----  					if (_s70 > 127)  					{  						_s10 = _ring1[_s48];  						_ring1[_s48] = _s20;  						_s68 = 64;  						_s58 = Convert.ToInt32(_s68);    						while (_s68 > 1)  						{  							if (_list[_s58] < _s10)  							{  								_s68 = _s68 * 0.5;  								_s58 = _s58 + Convert.ToInt32(_s68);  							}  							else  								if (_list[_s58] <= _s10)  								{  									_s68 = 1;  								}  								else  								{  									_s68 = _s68 * 0.5;  									_s58 = _s58 - Convert.ToInt32(_s68);  								}  						}  					}  					else  					{  						_ring1[_s48] = _s20;    						if (_s28 + _s30 > 127)  						{  							_s30 = _s30 - 1;  							_s58 = Convert.ToInt32(_s30);  						}  						else  						{  							_s28 = _s28 + 1;  							_s58 = Convert.ToInt32(_s28);  						}    						_s38 = _s28 > 96 ? 96 : Convert.ToInt32(_s28);  						_s40 = _s30 < 32 ? 32 : Convert.ToInt32(_s30);  					}    					//----  					_s68 = 64;  					_s60 = Convert.ToInt32(_s68);    					while (_s68 > 1)  					{  						if (_list[_s60] >= _s20)  						{  							if (_list[_s60 - 1] <= _s20)  							{  								_s68 = 1;  							}  							else  							{  								_s68 = _s68 * 0.5;  								_s60 = _s60 - Convert.ToInt32(_s68);  							}  						}  						else  						{  							_s68 = _s68 * 0.5;  							_s60 = _s60 + Convert.ToInt32(_s68);  						}    						if ((_s60 == 127) && (_s20 > _list[127]))  							_s60 = 128;  					}    					if (_s70 > 127)  					{  						if (_s58 >= _s60)  						{  							if ((_s38 + 1 > _s60) && (_s40 - 1 < _s60))  							{  								_s18 = _s18 + _s20;  							}  							else  								if ((_s40 > _s60) && (_s40 - 1 < _s58))  									_s18 = _s18 + _list[_s40 - 1];  						}  						else  							if (_s40 >= _s60)  							{  								if ((_s38 + 1 < _s60) && (_s38 + 1 > _s58))  									_s18 = _s18 + _list[_s38 + 1];  							}  							else  								if (_s38 + 2 > _s60)  								{  									_s18 = _s18 + _s20;  								}  								else  									if ((_s38 + 1 < _s60) && (_s38 + 1 > _s58))  										_s18 = _s18 + _list[_s38 + 1];    						if (_s58 > _s60)  						{  							if ((_s40 - 1 < _s58) && (_s38 + 1 > _s58))  							{  								_s18 = _s18 - _list[_s58];  							}  							else  								if ((_s38 < _s58) && (_s38 + 1 > _s60))  									_s18 = _s18 - _list[_s38];  						}  						else  						{  							if ((_s38 + 1 > _s58) && (_s40 - 1 < _s58))  							{  								_s18 = _s18 - _list[_s58];  							}  							else  								if ((_s40 > _s58) && (_s40 < _s60))  									_s18 = _s18 - _list[_s40];  						}  					}    					if (_s58 <= _s60)  					{  						if (_s58 >= _s60)  						{  							_list[_s60] = _s20;  						}  						else  						{  							for (_jj = _s58 + 1; _jj <= _s60 - 1; _jj++)  							{  								_list[_jj - 1] = _list[_jj];  							}  							_list[_s60 - 1] = _s20;  						}  					}  					else  					{  						for (_jj = _s58 - 1; _jj >= _s60; _jj--)  						{  							_list[_jj + 1] = _list[_jj];  						}  						_list[_s60] = _s20;  					}    					if (_s70 <= 127)  					{  						_s18 = 0;  						for (_jj = _s40; _jj <= _s38; _jj++)  						{  							_s18 = _s18 + _list[_jj];  						}  					}    					_f60 = _s18 / (_s38 - _s40 + 1);    					if (_fF8 + 1 > 31)  					{  						_fF8 = 31;  					}  					else  						_fF8 = _fF8 + 1;    					//----  					if (_fF8 <= 30)  					{  						if (_f28 > 0)  						{  							_f18 = _f8;  						}  						else  							_f18 = _f8 - _f28 * _f90;    						if (_f48 < 0)  						{  							_f38 = _f8;  						}  						else  							_f38 = _f8 - _f48 * _f90;    						_fB8 = _series;    						if (_fF8 != 30)  						{  							continue;  						}    						if (_fF8 == 30)  						{  							_fC0 = _series;    							_v4 = Math.Max(Math.Ceiling(_f78)' 1);    							_fE8 = (int)Math.Ceiling(_v4);    							_v2 = Math.Max(Math.Floor(_f78)' 1);    							_fE0 = (int)Math.Ceiling(_v2);    							if (_fE8 == _fE0)  							{  								_f68 = 1;  							}  							else  							{  								_v4 = _fE8 - _fE0;  								_f68 = (_f78 - _fE0) / _v4;  							}    							_v5 = _fE0 <= 29 ? Convert.ToInt32(_fE0) : 29;    							_v6 = _fE8 <= 29 ? Convert.ToInt32(_fE8) : 29;    							_fA8 = (_series - _buffer[_fF0 - _v5]) * (1 - _f68) / _fE0 + (_series - _buffer[_fF0 - _v6]) * _f68 / _fE8;  						}  					}  					else  					{  						_v1 = Math.Min(_f98' Math.Pow(_fA0 / _f60' _f88));    						if (_v1 < 1)  						{  							_v2 = 1;  						}  						else  						{  							_v3 = Math.Min(_f98' Math.Pow(_fA0 / _f60' _f88));    							_v2 = _v3;  						}    						_f58 = _v2;  						_f70 = Math.Pow(_f90' Math.Sqrt(_f58));    						if (_f28 > 0)  						{  							_f18 = _f8;  						}  						else  						{  							_f18 = _f8 - _f28 * _f70;  						}    						if (_f48 < 0)  						{  							_f38 = _f8;  						}  						else  						{  							_f38 = _f8 - _f48 * _f70;  						}  					}  				}    				if (_fF8 > 30)  				{  					_f30 = Math.Pow(_f50' _f58);  					_fC0 = (1 - _f30) * _series + _f30 * _fC0;  					_fC8 = (_series - _fC0) * (1 - _f50) + _f50 * _fC8;  					_fD0 = _f10 * _fC8 + _fC0;  					_f20 = -_f30 * 2;  					_f40 = _f30 * _f30;  					_fB0 = _f20 + _f40 + 1;  					_fA8 = (_fD0 - _fB8) * _fB0 + _f40 * _fA8;  					_fB8 = _fB8 + _fA8;  				}    				lastValue = (decimal)_fB8;  			}
Magic Number,StockSharp.Algo.Indicators,JurikMovingAverage,C:\repos\stocksharp_stocksharp\Algo\Indicators\JurikMovingAverage.cs,OnProcess,The following statement contains a magic number: if (_fF0 > 30)  			{  				if (Length < 1.0000000002)  				{  					_f80 = 0.0000000001; //{1.0e-10}  				}  				else  				{  					_f80 = (Length - 1) / 2.0;  				}    				if (_phase < -100)  				{  					_f10 = 0.5;  				}  				else  				{  					if (_phase > 100)  					{  						_f10 = 2.5;  					}  					else  					{  						_f10 = (double)_phase / 100 + 1.5;  					}  				}    				_v1 = Math.Log(Math.Sqrt(_f80));  				_v2 = _v1;    				if (_v1 / Math.Log(2.0) + 2.0 < 0.0)  				{  					_v3 = 0;  				}  				else  				{  					_v3 = _v2 / Math.Log(2.0) + 2.0;  				}    				_f98 = _v3;    				//----  				if (0.5 <= _f98 - 2.0)  				{  					_f88 = _f98 - 2.0;  				}  				else  				{  					_f88 = 0.5;  				}    				_f78 = Math.Sqrt(_f80) * _f98;  				_f90 = _f78 / (_f78 + 1.0);  				_f80 = _f80 * 0.9;  				_f50 = _f80 / (_f80 + 2.0);    				//----  				if (_f0 != 0)  				{  					_f0 = 0;  					_v5 = 0;    					for (_ii = 1; _ii <= 29; _ii++)  					{  						if (_buffer[_ii + 1] != _buffer[_ii])  						{  							_v5 = 1;  						}  					}    					_fD8 = _v5 * 30;    					_f38 = _fD8 == 0 ? _series : _buffer[1];    					_f18 = _f38;    					if (_fD8 > 29)  						_fD8 = 29;  				}  				else  					_fD8 = 0;    				//----  				for (_ii = _fD8; _ii >= 0; _ii--)  				{  					//{ another bigcycle...}  					_value2 = 31 - _ii;    					_f8 = _ii == 0 ? _series : _buffer[_value2];    					_f28 = _f8 - _f18;  					_f48 = _f8 - _f38;    					_v2 = Math.Max(Math.Abs(_f28)' Math.Abs(_f48));    					_fA0 = _v2;  					_vv = _fA0 + 0.0000000001; //{1.0e-10;}    					//----  					if (_s48 <= 1)  					{  						_s48 = 127;  					}  					else  					{  						_s48 = _s48 - 1;  					}    					if (_s50 <= 1)  					{  						_s50 = 10;  					}  					else  					{  						_s50 = _s50 - 1;  					}    					if (_s70 < 128)  						_s70 = _s70 + 1;    					_s8 = _s8 + _vv - _ring2[_s50];  					_ring2[_s50] = _vv;    					if (_s70 > 10)  					{  						_s20 = _s8 / 10;  					}  					else  						_s20 = _s8 / _s70;    					//----  					if (_s70 > 127)  					{  						_s10 = _ring1[_s48];  						_ring1[_s48] = _s20;  						_s68 = 64;  						_s58 = Convert.ToInt32(_s68);    						while (_s68 > 1)  						{  							if (_list[_s58] < _s10)  							{  								_s68 = _s68 * 0.5;  								_s58 = _s58 + Convert.ToInt32(_s68);  							}  							else  								if (_list[_s58] <= _s10)  								{  									_s68 = 1;  								}  								else  								{  									_s68 = _s68 * 0.5;  									_s58 = _s58 - Convert.ToInt32(_s68);  								}  						}  					}  					else  					{  						_ring1[_s48] = _s20;    						if (_s28 + _s30 > 127)  						{  							_s30 = _s30 - 1;  							_s58 = Convert.ToInt32(_s30);  						}  						else  						{  							_s28 = _s28 + 1;  							_s58 = Convert.ToInt32(_s28);  						}    						_s38 = _s28 > 96 ? 96 : Convert.ToInt32(_s28);  						_s40 = _s30 < 32 ? 32 : Convert.ToInt32(_s30);  					}    					//----  					_s68 = 64;  					_s60 = Convert.ToInt32(_s68);    					while (_s68 > 1)  					{  						if (_list[_s60] >= _s20)  						{  							if (_list[_s60 - 1] <= _s20)  							{  								_s68 = 1;  							}  							else  							{  								_s68 = _s68 * 0.5;  								_s60 = _s60 - Convert.ToInt32(_s68);  							}  						}  						else  						{  							_s68 = _s68 * 0.5;  							_s60 = _s60 + Convert.ToInt32(_s68);  						}    						if ((_s60 == 127) && (_s20 > _list[127]))  							_s60 = 128;  					}    					if (_s70 > 127)  					{  						if (_s58 >= _s60)  						{  							if ((_s38 + 1 > _s60) && (_s40 - 1 < _s60))  							{  								_s18 = _s18 + _s20;  							}  							else  								if ((_s40 > _s60) && (_s40 - 1 < _s58))  									_s18 = _s18 + _list[_s40 - 1];  						}  						else  							if (_s40 >= _s60)  							{  								if ((_s38 + 1 < _s60) && (_s38 + 1 > _s58))  									_s18 = _s18 + _list[_s38 + 1];  							}  							else  								if (_s38 + 2 > _s60)  								{  									_s18 = _s18 + _s20;  								}  								else  									if ((_s38 + 1 < _s60) && (_s38 + 1 > _s58))  										_s18 = _s18 + _list[_s38 + 1];    						if (_s58 > _s60)  						{  							if ((_s40 - 1 < _s58) && (_s38 + 1 > _s58))  							{  								_s18 = _s18 - _list[_s58];  							}  							else  								if ((_s38 < _s58) && (_s38 + 1 > _s60))  									_s18 = _s18 - _list[_s38];  						}  						else  						{  							if ((_s38 + 1 > _s58) && (_s40 - 1 < _s58))  							{  								_s18 = _s18 - _list[_s58];  							}  							else  								if ((_s40 > _s58) && (_s40 < _s60))  									_s18 = _s18 - _list[_s40];  						}  					}    					if (_s58 <= _s60)  					{  						if (_s58 >= _s60)  						{  							_list[_s60] = _s20;  						}  						else  						{  							for (_jj = _s58 + 1; _jj <= _s60 - 1; _jj++)  							{  								_list[_jj - 1] = _list[_jj];  							}  							_list[_s60 - 1] = _s20;  						}  					}  					else  					{  						for (_jj = _s58 - 1; _jj >= _s60; _jj--)  						{  							_list[_jj + 1] = _list[_jj];  						}  						_list[_s60] = _s20;  					}    					if (_s70 <= 127)  					{  						_s18 = 0;  						for (_jj = _s40; _jj <= _s38; _jj++)  						{  							_s18 = _s18 + _list[_jj];  						}  					}    					_f60 = _s18 / (_s38 - _s40 + 1);    					if (_fF8 + 1 > 31)  					{  						_fF8 = 31;  					}  					else  						_fF8 = _fF8 + 1;    					//----  					if (_fF8 <= 30)  					{  						if (_f28 > 0)  						{  							_f18 = _f8;  						}  						else  							_f18 = _f8 - _f28 * _f90;    						if (_f48 < 0)  						{  							_f38 = _f8;  						}  						else  							_f38 = _f8 - _f48 * _f90;    						_fB8 = _series;    						if (_fF8 != 30)  						{  							continue;  						}    						if (_fF8 == 30)  						{  							_fC0 = _series;    							_v4 = Math.Max(Math.Ceiling(_f78)' 1);    							_fE8 = (int)Math.Ceiling(_v4);    							_v2 = Math.Max(Math.Floor(_f78)' 1);    							_fE0 = (int)Math.Ceiling(_v2);    							if (_fE8 == _fE0)  							{  								_f68 = 1;  							}  							else  							{  								_v4 = _fE8 - _fE0;  								_f68 = (_f78 - _fE0) / _v4;  							}    							_v5 = _fE0 <= 29 ? Convert.ToInt32(_fE0) : 29;    							_v6 = _fE8 <= 29 ? Convert.ToInt32(_fE8) : 29;    							_fA8 = (_series - _buffer[_fF0 - _v5]) * (1 - _f68) / _fE0 + (_series - _buffer[_fF0 - _v6]) * _f68 / _fE8;  						}  					}  					else  					{  						_v1 = Math.Min(_f98' Math.Pow(_fA0 / _f60' _f88));    						if (_v1 < 1)  						{  							_v2 = 1;  						}  						else  						{  							_v3 = Math.Min(_f98' Math.Pow(_fA0 / _f60' _f88));    							_v2 = _v3;  						}    						_f58 = _v2;  						_f70 = Math.Pow(_f90' Math.Sqrt(_f58));    						if (_f28 > 0)  						{  							_f18 = _f8;  						}  						else  						{  							_f18 = _f8 - _f28 * _f70;  						}    						if (_f48 < 0)  						{  							_f38 = _f8;  						}  						else  						{  							_f38 = _f8 - _f48 * _f70;  						}  					}  				}    				if (_fF8 > 30)  				{  					_f30 = Math.Pow(_f50' _f58);  					_fC0 = (1 - _f30) * _series + _f30 * _fC0;  					_fC8 = (_series - _fC0) * (1 - _f50) + _f50 * _fC8;  					_fD0 = _f10 * _fC8 + _fC0;  					_f20 = -_f30 * 2;  					_f40 = _f30 * _f30;  					_fB0 = _f20 + _f40 + 1;  					_fA8 = (_fD0 - _fB8) * _fB0 + _f40 * _fA8;  					_fB8 = _fB8 + _fA8;  				}    				lastValue = (decimal)_fB8;  			}
Magic Number,StockSharp.Algo.Indicators,JurikMovingAverage,C:\repos\stocksharp_stocksharp\Algo\Indicators\JurikMovingAverage.cs,OnProcess,The following statement contains a magic number: if (_fF0 > 30)  			{  				if (Length < 1.0000000002)  				{  					_f80 = 0.0000000001; //{1.0e-10}  				}  				else  				{  					_f80 = (Length - 1) / 2.0;  				}    				if (_phase < -100)  				{  					_f10 = 0.5;  				}  				else  				{  					if (_phase > 100)  					{  						_f10 = 2.5;  					}  					else  					{  						_f10 = (double)_phase / 100 + 1.5;  					}  				}    				_v1 = Math.Log(Math.Sqrt(_f80));  				_v2 = _v1;    				if (_v1 / Math.Log(2.0) + 2.0 < 0.0)  				{  					_v3 = 0;  				}  				else  				{  					_v3 = _v2 / Math.Log(2.0) + 2.0;  				}    				_f98 = _v3;    				//----  				if (0.5 <= _f98 - 2.0)  				{  					_f88 = _f98 - 2.0;  				}  				else  				{  					_f88 = 0.5;  				}    				_f78 = Math.Sqrt(_f80) * _f98;  				_f90 = _f78 / (_f78 + 1.0);  				_f80 = _f80 * 0.9;  				_f50 = _f80 / (_f80 + 2.0);    				//----  				if (_f0 != 0)  				{  					_f0 = 0;  					_v5 = 0;    					for (_ii = 1; _ii <= 29; _ii++)  					{  						if (_buffer[_ii + 1] != _buffer[_ii])  						{  							_v5 = 1;  						}  					}    					_fD8 = _v5 * 30;    					_f38 = _fD8 == 0 ? _series : _buffer[1];    					_f18 = _f38;    					if (_fD8 > 29)  						_fD8 = 29;  				}  				else  					_fD8 = 0;    				//----  				for (_ii = _fD8; _ii >= 0; _ii--)  				{  					//{ another bigcycle...}  					_value2 = 31 - _ii;    					_f8 = _ii == 0 ? _series : _buffer[_value2];    					_f28 = _f8 - _f18;  					_f48 = _f8 - _f38;    					_v2 = Math.Max(Math.Abs(_f28)' Math.Abs(_f48));    					_fA0 = _v2;  					_vv = _fA0 + 0.0000000001; //{1.0e-10;}    					//----  					if (_s48 <= 1)  					{  						_s48 = 127;  					}  					else  					{  						_s48 = _s48 - 1;  					}    					if (_s50 <= 1)  					{  						_s50 = 10;  					}  					else  					{  						_s50 = _s50 - 1;  					}    					if (_s70 < 128)  						_s70 = _s70 + 1;    					_s8 = _s8 + _vv - _ring2[_s50];  					_ring2[_s50] = _vv;    					if (_s70 > 10)  					{  						_s20 = _s8 / 10;  					}  					else  						_s20 = _s8 / _s70;    					//----  					if (_s70 > 127)  					{  						_s10 = _ring1[_s48];  						_ring1[_s48] = _s20;  						_s68 = 64;  						_s58 = Convert.ToInt32(_s68);    						while (_s68 > 1)  						{  							if (_list[_s58] < _s10)  							{  								_s68 = _s68 * 0.5;  								_s58 = _s58 + Convert.ToInt32(_s68);  							}  							else  								if (_list[_s58] <= _s10)  								{  									_s68 = 1;  								}  								else  								{  									_s68 = _s68 * 0.5;  									_s58 = _s58 - Convert.ToInt32(_s68);  								}  						}  					}  					else  					{  						_ring1[_s48] = _s20;    						if (_s28 + _s30 > 127)  						{  							_s30 = _s30 - 1;  							_s58 = Convert.ToInt32(_s30);  						}  						else  						{  							_s28 = _s28 + 1;  							_s58 = Convert.ToInt32(_s28);  						}    						_s38 = _s28 > 96 ? 96 : Convert.ToInt32(_s28);  						_s40 = _s30 < 32 ? 32 : Convert.ToInt32(_s30);  					}    					//----  					_s68 = 64;  					_s60 = Convert.ToInt32(_s68);    					while (_s68 > 1)  					{  						if (_list[_s60] >= _s20)  						{  							if (_list[_s60 - 1] <= _s20)  							{  								_s68 = 1;  							}  							else  							{  								_s68 = _s68 * 0.5;  								_s60 = _s60 - Convert.ToInt32(_s68);  							}  						}  						else  						{  							_s68 = _s68 * 0.5;  							_s60 = _s60 + Convert.ToInt32(_s68);  						}    						if ((_s60 == 127) && (_s20 > _list[127]))  							_s60 = 128;  					}    					if (_s70 > 127)  					{  						if (_s58 >= _s60)  						{  							if ((_s38 + 1 > _s60) && (_s40 - 1 < _s60))  							{  								_s18 = _s18 + _s20;  							}  							else  								if ((_s40 > _s60) && (_s40 - 1 < _s58))  									_s18 = _s18 + _list[_s40 - 1];  						}  						else  							if (_s40 >= _s60)  							{  								if ((_s38 + 1 < _s60) && (_s38 + 1 > _s58))  									_s18 = _s18 + _list[_s38 + 1];  							}  							else  								if (_s38 + 2 > _s60)  								{  									_s18 = _s18 + _s20;  								}  								else  									if ((_s38 + 1 < _s60) && (_s38 + 1 > _s58))  										_s18 = _s18 + _list[_s38 + 1];    						if (_s58 > _s60)  						{  							if ((_s40 - 1 < _s58) && (_s38 + 1 > _s58))  							{  								_s18 = _s18 - _list[_s58];  							}  							else  								if ((_s38 < _s58) && (_s38 + 1 > _s60))  									_s18 = _s18 - _list[_s38];  						}  						else  						{  							if ((_s38 + 1 > _s58) && (_s40 - 1 < _s58))  							{  								_s18 = _s18 - _list[_s58];  							}  							else  								if ((_s40 > _s58) && (_s40 < _s60))  									_s18 = _s18 - _list[_s40];  						}  					}    					if (_s58 <= _s60)  					{  						if (_s58 >= _s60)  						{  							_list[_s60] = _s20;  						}  						else  						{  							for (_jj = _s58 + 1; _jj <= _s60 - 1; _jj++)  							{  								_list[_jj - 1] = _list[_jj];  							}  							_list[_s60 - 1] = _s20;  						}  					}  					else  					{  						for (_jj = _s58 - 1; _jj >= _s60; _jj--)  						{  							_list[_jj + 1] = _list[_jj];  						}  						_list[_s60] = _s20;  					}    					if (_s70 <= 127)  					{  						_s18 = 0;  						for (_jj = _s40; _jj <= _s38; _jj++)  						{  							_s18 = _s18 + _list[_jj];  						}  					}    					_f60 = _s18 / (_s38 - _s40 + 1);    					if (_fF8 + 1 > 31)  					{  						_fF8 = 31;  					}  					else  						_fF8 = _fF8 + 1;    					//----  					if (_fF8 <= 30)  					{  						if (_f28 > 0)  						{  							_f18 = _f8;  						}  						else  							_f18 = _f8 - _f28 * _f90;    						if (_f48 < 0)  						{  							_f38 = _f8;  						}  						else  							_f38 = _f8 - _f48 * _f90;    						_fB8 = _series;    						if (_fF8 != 30)  						{  							continue;  						}    						if (_fF8 == 30)  						{  							_fC0 = _series;    							_v4 = Math.Max(Math.Ceiling(_f78)' 1);    							_fE8 = (int)Math.Ceiling(_v4);    							_v2 = Math.Max(Math.Floor(_f78)' 1);    							_fE0 = (int)Math.Ceiling(_v2);    							if (_fE8 == _fE0)  							{  								_f68 = 1;  							}  							else  							{  								_v4 = _fE8 - _fE0;  								_f68 = (_f78 - _fE0) / _v4;  							}    							_v5 = _fE0 <= 29 ? Convert.ToInt32(_fE0) : 29;    							_v6 = _fE8 <= 29 ? Convert.ToInt32(_fE8) : 29;    							_fA8 = (_series - _buffer[_fF0 - _v5]) * (1 - _f68) / _fE0 + (_series - _buffer[_fF0 - _v6]) * _f68 / _fE8;  						}  					}  					else  					{  						_v1 = Math.Min(_f98' Math.Pow(_fA0 / _f60' _f88));    						if (_v1 < 1)  						{  							_v2 = 1;  						}  						else  						{  							_v3 = Math.Min(_f98' Math.Pow(_fA0 / _f60' _f88));    							_v2 = _v3;  						}    						_f58 = _v2;  						_f70 = Math.Pow(_f90' Math.Sqrt(_f58));    						if (_f28 > 0)  						{  							_f18 = _f8;  						}  						else  						{  							_f18 = _f8 - _f28 * _f70;  						}    						if (_f48 < 0)  						{  							_f38 = _f8;  						}  						else  						{  							_f38 = _f8 - _f48 * _f70;  						}  					}  				}    				if (_fF8 > 30)  				{  					_f30 = Math.Pow(_f50' _f58);  					_fC0 = (1 - _f30) * _series + _f30 * _fC0;  					_fC8 = (_series - _fC0) * (1 - _f50) + _f50 * _fC8;  					_fD0 = _f10 * _fC8 + _fC0;  					_f20 = -_f30 * 2;  					_f40 = _f30 * _f30;  					_fB0 = _f20 + _f40 + 1;  					_fA8 = (_fD0 - _fB8) * _fB0 + _f40 * _fA8;  					_fB8 = _fB8 + _fA8;  				}    				lastValue = (decimal)_fB8;  			}
Magic Number,StockSharp.Algo.Indicators,JurikMovingAverage,C:\repos\stocksharp_stocksharp\Algo\Indicators\JurikMovingAverage.cs,OnProcess,The following statement contains a magic number: if (_fF0 > 30)  			{  				if (Length < 1.0000000002)  				{  					_f80 = 0.0000000001; //{1.0e-10}  				}  				else  				{  					_f80 = (Length - 1) / 2.0;  				}    				if (_phase < -100)  				{  					_f10 = 0.5;  				}  				else  				{  					if (_phase > 100)  					{  						_f10 = 2.5;  					}  					else  					{  						_f10 = (double)_phase / 100 + 1.5;  					}  				}    				_v1 = Math.Log(Math.Sqrt(_f80));  				_v2 = _v1;    				if (_v1 / Math.Log(2.0) + 2.0 < 0.0)  				{  					_v3 = 0;  				}  				else  				{  					_v3 = _v2 / Math.Log(2.0) + 2.0;  				}    				_f98 = _v3;    				//----  				if (0.5 <= _f98 - 2.0)  				{  					_f88 = _f98 - 2.0;  				}  				else  				{  					_f88 = 0.5;  				}    				_f78 = Math.Sqrt(_f80) * _f98;  				_f90 = _f78 / (_f78 + 1.0);  				_f80 = _f80 * 0.9;  				_f50 = _f80 / (_f80 + 2.0);    				//----  				if (_f0 != 0)  				{  					_f0 = 0;  					_v5 = 0;    					for (_ii = 1; _ii <= 29; _ii++)  					{  						if (_buffer[_ii + 1] != _buffer[_ii])  						{  							_v5 = 1;  						}  					}    					_fD8 = _v5 * 30;    					_f38 = _fD8 == 0 ? _series : _buffer[1];    					_f18 = _f38;    					if (_fD8 > 29)  						_fD8 = 29;  				}  				else  					_fD8 = 0;    				//----  				for (_ii = _fD8; _ii >= 0; _ii--)  				{  					//{ another bigcycle...}  					_value2 = 31 - _ii;    					_f8 = _ii == 0 ? _series : _buffer[_value2];    					_f28 = _f8 - _f18;  					_f48 = _f8 - _f38;    					_v2 = Math.Max(Math.Abs(_f28)' Math.Abs(_f48));    					_fA0 = _v2;  					_vv = _fA0 + 0.0000000001; //{1.0e-10;}    					//----  					if (_s48 <= 1)  					{  						_s48 = 127;  					}  					else  					{  						_s48 = _s48 - 1;  					}    					if (_s50 <= 1)  					{  						_s50 = 10;  					}  					else  					{  						_s50 = _s50 - 1;  					}    					if (_s70 < 128)  						_s70 = _s70 + 1;    					_s8 = _s8 + _vv - _ring2[_s50];  					_ring2[_s50] = _vv;    					if (_s70 > 10)  					{  						_s20 = _s8 / 10;  					}  					else  						_s20 = _s8 / _s70;    					//----  					if (_s70 > 127)  					{  						_s10 = _ring1[_s48];  						_ring1[_s48] = _s20;  						_s68 = 64;  						_s58 = Convert.ToInt32(_s68);    						while (_s68 > 1)  						{  							if (_list[_s58] < _s10)  							{  								_s68 = _s68 * 0.5;  								_s58 = _s58 + Convert.ToInt32(_s68);  							}  							else  								if (_list[_s58] <= _s10)  								{  									_s68 = 1;  								}  								else  								{  									_s68 = _s68 * 0.5;  									_s58 = _s58 - Convert.ToInt32(_s68);  								}  						}  					}  					else  					{  						_ring1[_s48] = _s20;    						if (_s28 + _s30 > 127)  						{  							_s30 = _s30 - 1;  							_s58 = Convert.ToInt32(_s30);  						}  						else  						{  							_s28 = _s28 + 1;  							_s58 = Convert.ToInt32(_s28);  						}    						_s38 = _s28 > 96 ? 96 : Convert.ToInt32(_s28);  						_s40 = _s30 < 32 ? 32 : Convert.ToInt32(_s30);  					}    					//----  					_s68 = 64;  					_s60 = Convert.ToInt32(_s68);    					while (_s68 > 1)  					{  						if (_list[_s60] >= _s20)  						{  							if (_list[_s60 - 1] <= _s20)  							{  								_s68 = 1;  							}  							else  							{  								_s68 = _s68 * 0.5;  								_s60 = _s60 - Convert.ToInt32(_s68);  							}  						}  						else  						{  							_s68 = _s68 * 0.5;  							_s60 = _s60 + Convert.ToInt32(_s68);  						}    						if ((_s60 == 127) && (_s20 > _list[127]))  							_s60 = 128;  					}    					if (_s70 > 127)  					{  						if (_s58 >= _s60)  						{  							if ((_s38 + 1 > _s60) && (_s40 - 1 < _s60))  							{  								_s18 = _s18 + _s20;  							}  							else  								if ((_s40 > _s60) && (_s40 - 1 < _s58))  									_s18 = _s18 + _list[_s40 - 1];  						}  						else  							if (_s40 >= _s60)  							{  								if ((_s38 + 1 < _s60) && (_s38 + 1 > _s58))  									_s18 = _s18 + _list[_s38 + 1];  							}  							else  								if (_s38 + 2 > _s60)  								{  									_s18 = _s18 + _s20;  								}  								else  									if ((_s38 + 1 < _s60) && (_s38 + 1 > _s58))  										_s18 = _s18 + _list[_s38 + 1];    						if (_s58 > _s60)  						{  							if ((_s40 - 1 < _s58) && (_s38 + 1 > _s58))  							{  								_s18 = _s18 - _list[_s58];  							}  							else  								if ((_s38 < _s58) && (_s38 + 1 > _s60))  									_s18 = _s18 - _list[_s38];  						}  						else  						{  							if ((_s38 + 1 > _s58) && (_s40 - 1 < _s58))  							{  								_s18 = _s18 - _list[_s58];  							}  							else  								if ((_s40 > _s58) && (_s40 < _s60))  									_s18 = _s18 - _list[_s40];  						}  					}    					if (_s58 <= _s60)  					{  						if (_s58 >= _s60)  						{  							_list[_s60] = _s20;  						}  						else  						{  							for (_jj = _s58 + 1; _jj <= _s60 - 1; _jj++)  							{  								_list[_jj - 1] = _list[_jj];  							}  							_list[_s60 - 1] = _s20;  						}  					}  					else  					{  						for (_jj = _s58 - 1; _jj >= _s60; _jj--)  						{  							_list[_jj + 1] = _list[_jj];  						}  						_list[_s60] = _s20;  					}    					if (_s70 <= 127)  					{  						_s18 = 0;  						for (_jj = _s40; _jj <= _s38; _jj++)  						{  							_s18 = _s18 + _list[_jj];  						}  					}    					_f60 = _s18 / (_s38 - _s40 + 1);    					if (_fF8 + 1 > 31)  					{  						_fF8 = 31;  					}  					else  						_fF8 = _fF8 + 1;    					//----  					if (_fF8 <= 30)  					{  						if (_f28 > 0)  						{  							_f18 = _f8;  						}  						else  							_f18 = _f8 - _f28 * _f90;    						if (_f48 < 0)  						{  							_f38 = _f8;  						}  						else  							_f38 = _f8 - _f48 * _f90;    						_fB8 = _series;    						if (_fF8 != 30)  						{  							continue;  						}    						if (_fF8 == 30)  						{  							_fC0 = _series;    							_v4 = Math.Max(Math.Ceiling(_f78)' 1);    							_fE8 = (int)Math.Ceiling(_v4);    							_v2 = Math.Max(Math.Floor(_f78)' 1);    							_fE0 = (int)Math.Ceiling(_v2);    							if (_fE8 == _fE0)  							{  								_f68 = 1;  							}  							else  							{  								_v4 = _fE8 - _fE0;  								_f68 = (_f78 - _fE0) / _v4;  							}    							_v5 = _fE0 <= 29 ? Convert.ToInt32(_fE0) : 29;    							_v6 = _fE8 <= 29 ? Convert.ToInt32(_fE8) : 29;    							_fA8 = (_series - _buffer[_fF0 - _v5]) * (1 - _f68) / _fE0 + (_series - _buffer[_fF0 - _v6]) * _f68 / _fE8;  						}  					}  					else  					{  						_v1 = Math.Min(_f98' Math.Pow(_fA0 / _f60' _f88));    						if (_v1 < 1)  						{  							_v2 = 1;  						}  						else  						{  							_v3 = Math.Min(_f98' Math.Pow(_fA0 / _f60' _f88));    							_v2 = _v3;  						}    						_f58 = _v2;  						_f70 = Math.Pow(_f90' Math.Sqrt(_f58));    						if (_f28 > 0)  						{  							_f18 = _f8;  						}  						else  						{  							_f18 = _f8 - _f28 * _f70;  						}    						if (_f48 < 0)  						{  							_f38 = _f8;  						}  						else  						{  							_f38 = _f8 - _f48 * _f70;  						}  					}  				}    				if (_fF8 > 30)  				{  					_f30 = Math.Pow(_f50' _f58);  					_fC0 = (1 - _f30) * _series + _f30 * _fC0;  					_fC8 = (_series - _fC0) * (1 - _f50) + _f50 * _fC8;  					_fD0 = _f10 * _fC8 + _fC0;  					_f20 = -_f30 * 2;  					_f40 = _f30 * _f30;  					_fB0 = _f20 + _f40 + 1;  					_fA8 = (_fD0 - _fB8) * _fB0 + _f40 * _fA8;  					_fB8 = _fB8 + _fA8;  				}    				lastValue = (decimal)_fB8;  			}
Magic Number,StockSharp.Algo.Indicators,JurikMovingAverage,C:\repos\stocksharp_stocksharp\Algo\Indicators\JurikMovingAverage.cs,OnProcess,The following statement contains a magic number: if (_fF0 > 30)  			{  				if (Length < 1.0000000002)  				{  					_f80 = 0.0000000001; //{1.0e-10}  				}  				else  				{  					_f80 = (Length - 1) / 2.0;  				}    				if (_phase < -100)  				{  					_f10 = 0.5;  				}  				else  				{  					if (_phase > 100)  					{  						_f10 = 2.5;  					}  					else  					{  						_f10 = (double)_phase / 100 + 1.5;  					}  				}    				_v1 = Math.Log(Math.Sqrt(_f80));  				_v2 = _v1;    				if (_v1 / Math.Log(2.0) + 2.0 < 0.0)  				{  					_v3 = 0;  				}  				else  				{  					_v3 = _v2 / Math.Log(2.0) + 2.0;  				}    				_f98 = _v3;    				//----  				if (0.5 <= _f98 - 2.0)  				{  					_f88 = _f98 - 2.0;  				}  				else  				{  					_f88 = 0.5;  				}    				_f78 = Math.Sqrt(_f80) * _f98;  				_f90 = _f78 / (_f78 + 1.0);  				_f80 = _f80 * 0.9;  				_f50 = _f80 / (_f80 + 2.0);    				//----  				if (_f0 != 0)  				{  					_f0 = 0;  					_v5 = 0;    					for (_ii = 1; _ii <= 29; _ii++)  					{  						if (_buffer[_ii + 1] != _buffer[_ii])  						{  							_v5 = 1;  						}  					}    					_fD8 = _v5 * 30;    					_f38 = _fD8 == 0 ? _series : _buffer[1];    					_f18 = _f38;    					if (_fD8 > 29)  						_fD8 = 29;  				}  				else  					_fD8 = 0;    				//----  				for (_ii = _fD8; _ii >= 0; _ii--)  				{  					//{ another bigcycle...}  					_value2 = 31 - _ii;    					_f8 = _ii == 0 ? _series : _buffer[_value2];    					_f28 = _f8 - _f18;  					_f48 = _f8 - _f38;    					_v2 = Math.Max(Math.Abs(_f28)' Math.Abs(_f48));    					_fA0 = _v2;  					_vv = _fA0 + 0.0000000001; //{1.0e-10;}    					//----  					if (_s48 <= 1)  					{  						_s48 = 127;  					}  					else  					{  						_s48 = _s48 - 1;  					}    					if (_s50 <= 1)  					{  						_s50 = 10;  					}  					else  					{  						_s50 = _s50 - 1;  					}    					if (_s70 < 128)  						_s70 = _s70 + 1;    					_s8 = _s8 + _vv - _ring2[_s50];  					_ring2[_s50] = _vv;    					if (_s70 > 10)  					{  						_s20 = _s8 / 10;  					}  					else  						_s20 = _s8 / _s70;    					//----  					if (_s70 > 127)  					{  						_s10 = _ring1[_s48];  						_ring1[_s48] = _s20;  						_s68 = 64;  						_s58 = Convert.ToInt32(_s68);    						while (_s68 > 1)  						{  							if (_list[_s58] < _s10)  							{  								_s68 = _s68 * 0.5;  								_s58 = _s58 + Convert.ToInt32(_s68);  							}  							else  								if (_list[_s58] <= _s10)  								{  									_s68 = 1;  								}  								else  								{  									_s68 = _s68 * 0.5;  									_s58 = _s58 - Convert.ToInt32(_s68);  								}  						}  					}  					else  					{  						_ring1[_s48] = _s20;    						if (_s28 + _s30 > 127)  						{  							_s30 = _s30 - 1;  							_s58 = Convert.ToInt32(_s30);  						}  						else  						{  							_s28 = _s28 + 1;  							_s58 = Convert.ToInt32(_s28);  						}    						_s38 = _s28 > 96 ? 96 : Convert.ToInt32(_s28);  						_s40 = _s30 < 32 ? 32 : Convert.ToInt32(_s30);  					}    					//----  					_s68 = 64;  					_s60 = Convert.ToInt32(_s68);    					while (_s68 > 1)  					{  						if (_list[_s60] >= _s20)  						{  							if (_list[_s60 - 1] <= _s20)  							{  								_s68 = 1;  							}  							else  							{  								_s68 = _s68 * 0.5;  								_s60 = _s60 - Convert.ToInt32(_s68);  							}  						}  						else  						{  							_s68 = _s68 * 0.5;  							_s60 = _s60 + Convert.ToInt32(_s68);  						}    						if ((_s60 == 127) && (_s20 > _list[127]))  							_s60 = 128;  					}    					if (_s70 > 127)  					{  						if (_s58 >= _s60)  						{  							if ((_s38 + 1 > _s60) && (_s40 - 1 < _s60))  							{  								_s18 = _s18 + _s20;  							}  							else  								if ((_s40 > _s60) && (_s40 - 1 < _s58))  									_s18 = _s18 + _list[_s40 - 1];  						}  						else  							if (_s40 >= _s60)  							{  								if ((_s38 + 1 < _s60) && (_s38 + 1 > _s58))  									_s18 = _s18 + _list[_s38 + 1];  							}  							else  								if (_s38 + 2 > _s60)  								{  									_s18 = _s18 + _s20;  								}  								else  									if ((_s38 + 1 < _s60) && (_s38 + 1 > _s58))  										_s18 = _s18 + _list[_s38 + 1];    						if (_s58 > _s60)  						{  							if ((_s40 - 1 < _s58) && (_s38 + 1 > _s58))  							{  								_s18 = _s18 - _list[_s58];  							}  							else  								if ((_s38 < _s58) && (_s38 + 1 > _s60))  									_s18 = _s18 - _list[_s38];  						}  						else  						{  							if ((_s38 + 1 > _s58) && (_s40 - 1 < _s58))  							{  								_s18 = _s18 - _list[_s58];  							}  							else  								if ((_s40 > _s58) && (_s40 < _s60))  									_s18 = _s18 - _list[_s40];  						}  					}    					if (_s58 <= _s60)  					{  						if (_s58 >= _s60)  						{  							_list[_s60] = _s20;  						}  						else  						{  							for (_jj = _s58 + 1; _jj <= _s60 - 1; _jj++)  							{  								_list[_jj - 1] = _list[_jj];  							}  							_list[_s60 - 1] = _s20;  						}  					}  					else  					{  						for (_jj = _s58 - 1; _jj >= _s60; _jj--)  						{  							_list[_jj + 1] = _list[_jj];  						}  						_list[_s60] = _s20;  					}    					if (_s70 <= 127)  					{  						_s18 = 0;  						for (_jj = _s40; _jj <= _s38; _jj++)  						{  							_s18 = _s18 + _list[_jj];  						}  					}    					_f60 = _s18 / (_s38 - _s40 + 1);    					if (_fF8 + 1 > 31)  					{  						_fF8 = 31;  					}  					else  						_fF8 = _fF8 + 1;    					//----  					if (_fF8 <= 30)  					{  						if (_f28 > 0)  						{  							_f18 = _f8;  						}  						else  							_f18 = _f8 - _f28 * _f90;    						if (_f48 < 0)  						{  							_f38 = _f8;  						}  						else  							_f38 = _f8 - _f48 * _f90;    						_fB8 = _series;    						if (_fF8 != 30)  						{  							continue;  						}    						if (_fF8 == 30)  						{  							_fC0 = _series;    							_v4 = Math.Max(Math.Ceiling(_f78)' 1);    							_fE8 = (int)Math.Ceiling(_v4);    							_v2 = Math.Max(Math.Floor(_f78)' 1);    							_fE0 = (int)Math.Ceiling(_v2);    							if (_fE8 == _fE0)  							{  								_f68 = 1;  							}  							else  							{  								_v4 = _fE8 - _fE0;  								_f68 = (_f78 - _fE0) / _v4;  							}    							_v5 = _fE0 <= 29 ? Convert.ToInt32(_fE0) : 29;    							_v6 = _fE8 <= 29 ? Convert.ToInt32(_fE8) : 29;    							_fA8 = (_series - _buffer[_fF0 - _v5]) * (1 - _f68) / _fE0 + (_series - _buffer[_fF0 - _v6]) * _f68 / _fE8;  						}  					}  					else  					{  						_v1 = Math.Min(_f98' Math.Pow(_fA0 / _f60' _f88));    						if (_v1 < 1)  						{  							_v2 = 1;  						}  						else  						{  							_v3 = Math.Min(_f98' Math.Pow(_fA0 / _f60' _f88));    							_v2 = _v3;  						}    						_f58 = _v2;  						_f70 = Math.Pow(_f90' Math.Sqrt(_f58));    						if (_f28 > 0)  						{  							_f18 = _f8;  						}  						else  						{  							_f18 = _f8 - _f28 * _f70;  						}    						if (_f48 < 0)  						{  							_f38 = _f8;  						}  						else  						{  							_f38 = _f8 - _f48 * _f70;  						}  					}  				}    				if (_fF8 > 30)  				{  					_f30 = Math.Pow(_f50' _f58);  					_fC0 = (1 - _f30) * _series + _f30 * _fC0;  					_fC8 = (_series - _fC0) * (1 - _f50) + _f50 * _fC8;  					_fD0 = _f10 * _fC8 + _fC0;  					_f20 = -_f30 * 2;  					_f40 = _f30 * _f30;  					_fB0 = _f20 + _f40 + 1;  					_fA8 = (_fD0 - _fB8) * _fB0 + _f40 * _fA8;  					_fB8 = _fB8 + _fA8;  				}    				lastValue = (decimal)_fB8;  			}
Magic Number,StockSharp.Algo.Indicators,JurikMovingAverage,C:\repos\stocksharp_stocksharp\Algo\Indicators\JurikMovingAverage.cs,OnProcess,The following statement contains a magic number: if (_fF0 > 30)  			{  				if (Length < 1.0000000002)  				{  					_f80 = 0.0000000001; //{1.0e-10}  				}  				else  				{  					_f80 = (Length - 1) / 2.0;  				}    				if (_phase < -100)  				{  					_f10 = 0.5;  				}  				else  				{  					if (_phase > 100)  					{  						_f10 = 2.5;  					}  					else  					{  						_f10 = (double)_phase / 100 + 1.5;  					}  				}    				_v1 = Math.Log(Math.Sqrt(_f80));  				_v2 = _v1;    				if (_v1 / Math.Log(2.0) + 2.0 < 0.0)  				{  					_v3 = 0;  				}  				else  				{  					_v3 = _v2 / Math.Log(2.0) + 2.0;  				}    				_f98 = _v3;    				//----  				if (0.5 <= _f98 - 2.0)  				{  					_f88 = _f98 - 2.0;  				}  				else  				{  					_f88 = 0.5;  				}    				_f78 = Math.Sqrt(_f80) * _f98;  				_f90 = _f78 / (_f78 + 1.0);  				_f80 = _f80 * 0.9;  				_f50 = _f80 / (_f80 + 2.0);    				//----  				if (_f0 != 0)  				{  					_f0 = 0;  					_v5 = 0;    					for (_ii = 1; _ii <= 29; _ii++)  					{  						if (_buffer[_ii + 1] != _buffer[_ii])  						{  							_v5 = 1;  						}  					}    					_fD8 = _v5 * 30;    					_f38 = _fD8 == 0 ? _series : _buffer[1];    					_f18 = _f38;    					if (_fD8 > 29)  						_fD8 = 29;  				}  				else  					_fD8 = 0;    				//----  				for (_ii = _fD8; _ii >= 0; _ii--)  				{  					//{ another bigcycle...}  					_value2 = 31 - _ii;    					_f8 = _ii == 0 ? _series : _buffer[_value2];    					_f28 = _f8 - _f18;  					_f48 = _f8 - _f38;    					_v2 = Math.Max(Math.Abs(_f28)' Math.Abs(_f48));    					_fA0 = _v2;  					_vv = _fA0 + 0.0000000001; //{1.0e-10;}    					//----  					if (_s48 <= 1)  					{  						_s48 = 127;  					}  					else  					{  						_s48 = _s48 - 1;  					}    					if (_s50 <= 1)  					{  						_s50 = 10;  					}  					else  					{  						_s50 = _s50 - 1;  					}    					if (_s70 < 128)  						_s70 = _s70 + 1;    					_s8 = _s8 + _vv - _ring2[_s50];  					_ring2[_s50] = _vv;    					if (_s70 > 10)  					{  						_s20 = _s8 / 10;  					}  					else  						_s20 = _s8 / _s70;    					//----  					if (_s70 > 127)  					{  						_s10 = _ring1[_s48];  						_ring1[_s48] = _s20;  						_s68 = 64;  						_s58 = Convert.ToInt32(_s68);    						while (_s68 > 1)  						{  							if (_list[_s58] < _s10)  							{  								_s68 = _s68 * 0.5;  								_s58 = _s58 + Convert.ToInt32(_s68);  							}  							else  								if (_list[_s58] <= _s10)  								{  									_s68 = 1;  								}  								else  								{  									_s68 = _s68 * 0.5;  									_s58 = _s58 - Convert.ToInt32(_s68);  								}  						}  					}  					else  					{  						_ring1[_s48] = _s20;    						if (_s28 + _s30 > 127)  						{  							_s30 = _s30 - 1;  							_s58 = Convert.ToInt32(_s30);  						}  						else  						{  							_s28 = _s28 + 1;  							_s58 = Convert.ToInt32(_s28);  						}    						_s38 = _s28 > 96 ? 96 : Convert.ToInt32(_s28);  						_s40 = _s30 < 32 ? 32 : Convert.ToInt32(_s30);  					}    					//----  					_s68 = 64;  					_s60 = Convert.ToInt32(_s68);    					while (_s68 > 1)  					{  						if (_list[_s60] >= _s20)  						{  							if (_list[_s60 - 1] <= _s20)  							{  								_s68 = 1;  							}  							else  							{  								_s68 = _s68 * 0.5;  								_s60 = _s60 - Convert.ToInt32(_s68);  							}  						}  						else  						{  							_s68 = _s68 * 0.5;  							_s60 = _s60 + Convert.ToInt32(_s68);  						}    						if ((_s60 == 127) && (_s20 > _list[127]))  							_s60 = 128;  					}    					if (_s70 > 127)  					{  						if (_s58 >= _s60)  						{  							if ((_s38 + 1 > _s60) && (_s40 - 1 < _s60))  							{  								_s18 = _s18 + _s20;  							}  							else  								if ((_s40 > _s60) && (_s40 - 1 < _s58))  									_s18 = _s18 + _list[_s40 - 1];  						}  						else  							if (_s40 >= _s60)  							{  								if ((_s38 + 1 < _s60) && (_s38 + 1 > _s58))  									_s18 = _s18 + _list[_s38 + 1];  							}  							else  								if (_s38 + 2 > _s60)  								{  									_s18 = _s18 + _s20;  								}  								else  									if ((_s38 + 1 < _s60) && (_s38 + 1 > _s58))  										_s18 = _s18 + _list[_s38 + 1];    						if (_s58 > _s60)  						{  							if ((_s40 - 1 < _s58) && (_s38 + 1 > _s58))  							{  								_s18 = _s18 - _list[_s58];  							}  							else  								if ((_s38 < _s58) && (_s38 + 1 > _s60))  									_s18 = _s18 - _list[_s38];  						}  						else  						{  							if ((_s38 + 1 > _s58) && (_s40 - 1 < _s58))  							{  								_s18 = _s18 - _list[_s58];  							}  							else  								if ((_s40 > _s58) && (_s40 < _s60))  									_s18 = _s18 - _list[_s40];  						}  					}    					if (_s58 <= _s60)  					{  						if (_s58 >= _s60)  						{  							_list[_s60] = _s20;  						}  						else  						{  							for (_jj = _s58 + 1; _jj <= _s60 - 1; _jj++)  							{  								_list[_jj - 1] = _list[_jj];  							}  							_list[_s60 - 1] = _s20;  						}  					}  					else  					{  						for (_jj = _s58 - 1; _jj >= _s60; _jj--)  						{  							_list[_jj + 1] = _list[_jj];  						}  						_list[_s60] = _s20;  					}    					if (_s70 <= 127)  					{  						_s18 = 0;  						for (_jj = _s40; _jj <= _s38; _jj++)  						{  							_s18 = _s18 + _list[_jj];  						}  					}    					_f60 = _s18 / (_s38 - _s40 + 1);    					if (_fF8 + 1 > 31)  					{  						_fF8 = 31;  					}  					else  						_fF8 = _fF8 + 1;    					//----  					if (_fF8 <= 30)  					{  						if (_f28 > 0)  						{  							_f18 = _f8;  						}  						else  							_f18 = _f8 - _f28 * _f90;    						if (_f48 < 0)  						{  							_f38 = _f8;  						}  						else  							_f38 = _f8 - _f48 * _f90;    						_fB8 = _series;    						if (_fF8 != 30)  						{  							continue;  						}    						if (_fF8 == 30)  						{  							_fC0 = _series;    							_v4 = Math.Max(Math.Ceiling(_f78)' 1);    							_fE8 = (int)Math.Ceiling(_v4);    							_v2 = Math.Max(Math.Floor(_f78)' 1);    							_fE0 = (int)Math.Ceiling(_v2);    							if (_fE8 == _fE0)  							{  								_f68 = 1;  							}  							else  							{  								_v4 = _fE8 - _fE0;  								_f68 = (_f78 - _fE0) / _v4;  							}    							_v5 = _fE0 <= 29 ? Convert.ToInt32(_fE0) : 29;    							_v6 = _fE8 <= 29 ? Convert.ToInt32(_fE8) : 29;    							_fA8 = (_series - _buffer[_fF0 - _v5]) * (1 - _f68) / _fE0 + (_series - _buffer[_fF0 - _v6]) * _f68 / _fE8;  						}  					}  					else  					{  						_v1 = Math.Min(_f98' Math.Pow(_fA0 / _f60' _f88));    						if (_v1 < 1)  						{  							_v2 = 1;  						}  						else  						{  							_v3 = Math.Min(_f98' Math.Pow(_fA0 / _f60' _f88));    							_v2 = _v3;  						}    						_f58 = _v2;  						_f70 = Math.Pow(_f90' Math.Sqrt(_f58));    						if (_f28 > 0)  						{  							_f18 = _f8;  						}  						else  						{  							_f18 = _f8 - _f28 * _f70;  						}    						if (_f48 < 0)  						{  							_f38 = _f8;  						}  						else  						{  							_f38 = _f8 - _f48 * _f70;  						}  					}  				}    				if (_fF8 > 30)  				{  					_f30 = Math.Pow(_f50' _f58);  					_fC0 = (1 - _f30) * _series + _f30 * _fC0;  					_fC8 = (_series - _fC0) * (1 - _f50) + _f50 * _fC8;  					_fD0 = _f10 * _fC8 + _fC0;  					_f20 = -_f30 * 2;  					_f40 = _f30 * _f30;  					_fB0 = _f20 + _f40 + 1;  					_fA8 = (_fD0 - _fB8) * _fB0 + _f40 * _fA8;  					_fB8 = _fB8 + _fA8;  				}    				lastValue = (decimal)_fB8;  			}
Magic Number,StockSharp.Algo.Indicators,JurikMovingAverage,C:\repos\stocksharp_stocksharp\Algo\Indicators\JurikMovingAverage.cs,OnProcess,The following statement contains a magic number: if (_fF0 > 30)  			{  				if (Length < 1.0000000002)  				{  					_f80 = 0.0000000001; //{1.0e-10}  				}  				else  				{  					_f80 = (Length - 1) / 2.0;  				}    				if (_phase < -100)  				{  					_f10 = 0.5;  				}  				else  				{  					if (_phase > 100)  					{  						_f10 = 2.5;  					}  					else  					{  						_f10 = (double)_phase / 100 + 1.5;  					}  				}    				_v1 = Math.Log(Math.Sqrt(_f80));  				_v2 = _v1;    				if (_v1 / Math.Log(2.0) + 2.0 < 0.0)  				{  					_v3 = 0;  				}  				else  				{  					_v3 = _v2 / Math.Log(2.0) + 2.0;  				}    				_f98 = _v3;    				//----  				if (0.5 <= _f98 - 2.0)  				{  					_f88 = _f98 - 2.0;  				}  				else  				{  					_f88 = 0.5;  				}    				_f78 = Math.Sqrt(_f80) * _f98;  				_f90 = _f78 / (_f78 + 1.0);  				_f80 = _f80 * 0.9;  				_f50 = _f80 / (_f80 + 2.0);    				//----  				if (_f0 != 0)  				{  					_f0 = 0;  					_v5 = 0;    					for (_ii = 1; _ii <= 29; _ii++)  					{  						if (_buffer[_ii + 1] != _buffer[_ii])  						{  							_v5 = 1;  						}  					}    					_fD8 = _v5 * 30;    					_f38 = _fD8 == 0 ? _series : _buffer[1];    					_f18 = _f38;    					if (_fD8 > 29)  						_fD8 = 29;  				}  				else  					_fD8 = 0;    				//----  				for (_ii = _fD8; _ii >= 0; _ii--)  				{  					//{ another bigcycle...}  					_value2 = 31 - _ii;    					_f8 = _ii == 0 ? _series : _buffer[_value2];    					_f28 = _f8 - _f18;  					_f48 = _f8 - _f38;    					_v2 = Math.Max(Math.Abs(_f28)' Math.Abs(_f48));    					_fA0 = _v2;  					_vv = _fA0 + 0.0000000001; //{1.0e-10;}    					//----  					if (_s48 <= 1)  					{  						_s48 = 127;  					}  					else  					{  						_s48 = _s48 - 1;  					}    					if (_s50 <= 1)  					{  						_s50 = 10;  					}  					else  					{  						_s50 = _s50 - 1;  					}    					if (_s70 < 128)  						_s70 = _s70 + 1;    					_s8 = _s8 + _vv - _ring2[_s50];  					_ring2[_s50] = _vv;    					if (_s70 > 10)  					{  						_s20 = _s8 / 10;  					}  					else  						_s20 = _s8 / _s70;    					//----  					if (_s70 > 127)  					{  						_s10 = _ring1[_s48];  						_ring1[_s48] = _s20;  						_s68 = 64;  						_s58 = Convert.ToInt32(_s68);    						while (_s68 > 1)  						{  							if (_list[_s58] < _s10)  							{  								_s68 = _s68 * 0.5;  								_s58 = _s58 + Convert.ToInt32(_s68);  							}  							else  								if (_list[_s58] <= _s10)  								{  									_s68 = 1;  								}  								else  								{  									_s68 = _s68 * 0.5;  									_s58 = _s58 - Convert.ToInt32(_s68);  								}  						}  					}  					else  					{  						_ring1[_s48] = _s20;    						if (_s28 + _s30 > 127)  						{  							_s30 = _s30 - 1;  							_s58 = Convert.ToInt32(_s30);  						}  						else  						{  							_s28 = _s28 + 1;  							_s58 = Convert.ToInt32(_s28);  						}    						_s38 = _s28 > 96 ? 96 : Convert.ToInt32(_s28);  						_s40 = _s30 < 32 ? 32 : Convert.ToInt32(_s30);  					}    					//----  					_s68 = 64;  					_s60 = Convert.ToInt32(_s68);    					while (_s68 > 1)  					{  						if (_list[_s60] >= _s20)  						{  							if (_list[_s60 - 1] <= _s20)  							{  								_s68 = 1;  							}  							else  							{  								_s68 = _s68 * 0.5;  								_s60 = _s60 - Convert.ToInt32(_s68);  							}  						}  						else  						{  							_s68 = _s68 * 0.5;  							_s60 = _s60 + Convert.ToInt32(_s68);  						}    						if ((_s60 == 127) && (_s20 > _list[127]))  							_s60 = 128;  					}    					if (_s70 > 127)  					{  						if (_s58 >= _s60)  						{  							if ((_s38 + 1 > _s60) && (_s40 - 1 < _s60))  							{  								_s18 = _s18 + _s20;  							}  							else  								if ((_s40 > _s60) && (_s40 - 1 < _s58))  									_s18 = _s18 + _list[_s40 - 1];  						}  						else  							if (_s40 >= _s60)  							{  								if ((_s38 + 1 < _s60) && (_s38 + 1 > _s58))  									_s18 = _s18 + _list[_s38 + 1];  							}  							else  								if (_s38 + 2 > _s60)  								{  									_s18 = _s18 + _s20;  								}  								else  									if ((_s38 + 1 < _s60) && (_s38 + 1 > _s58))  										_s18 = _s18 + _list[_s38 + 1];    						if (_s58 > _s60)  						{  							if ((_s40 - 1 < _s58) && (_s38 + 1 > _s58))  							{  								_s18 = _s18 - _list[_s58];  							}  							else  								if ((_s38 < _s58) && (_s38 + 1 > _s60))  									_s18 = _s18 - _list[_s38];  						}  						else  						{  							if ((_s38 + 1 > _s58) && (_s40 - 1 < _s58))  							{  								_s18 = _s18 - _list[_s58];  							}  							else  								if ((_s40 > _s58) && (_s40 < _s60))  									_s18 = _s18 - _list[_s40];  						}  					}    					if (_s58 <= _s60)  					{  						if (_s58 >= _s60)  						{  							_list[_s60] = _s20;  						}  						else  						{  							for (_jj = _s58 + 1; _jj <= _s60 - 1; _jj++)  							{  								_list[_jj - 1] = _list[_jj];  							}  							_list[_s60 - 1] = _s20;  						}  					}  					else  					{  						for (_jj = _s58 - 1; _jj >= _s60; _jj--)  						{  							_list[_jj + 1] = _list[_jj];  						}  						_list[_s60] = _s20;  					}    					if (_s70 <= 127)  					{  						_s18 = 0;  						for (_jj = _s40; _jj <= _s38; _jj++)  						{  							_s18 = _s18 + _list[_jj];  						}  					}    					_f60 = _s18 / (_s38 - _s40 + 1);    					if (_fF8 + 1 > 31)  					{  						_fF8 = 31;  					}  					else  						_fF8 = _fF8 + 1;    					//----  					if (_fF8 <= 30)  					{  						if (_f28 > 0)  						{  							_f18 = _f8;  						}  						else  							_f18 = _f8 - _f28 * _f90;    						if (_f48 < 0)  						{  							_f38 = _f8;  						}  						else  							_f38 = _f8 - _f48 * _f90;    						_fB8 = _series;    						if (_fF8 != 30)  						{  							continue;  						}    						if (_fF8 == 30)  						{  							_fC0 = _series;    							_v4 = Math.Max(Math.Ceiling(_f78)' 1);    							_fE8 = (int)Math.Ceiling(_v4);    							_v2 = Math.Max(Math.Floor(_f78)' 1);    							_fE0 = (int)Math.Ceiling(_v2);    							if (_fE8 == _fE0)  							{  								_f68 = 1;  							}  							else  							{  								_v4 = _fE8 - _fE0;  								_f68 = (_f78 - _fE0) / _v4;  							}    							_v5 = _fE0 <= 29 ? Convert.ToInt32(_fE0) : 29;    							_v6 = _fE8 <= 29 ? Convert.ToInt32(_fE8) : 29;    							_fA8 = (_series - _buffer[_fF0 - _v5]) * (1 - _f68) / _fE0 + (_series - _buffer[_fF0 - _v6]) * _f68 / _fE8;  						}  					}  					else  					{  						_v1 = Math.Min(_f98' Math.Pow(_fA0 / _f60' _f88));    						if (_v1 < 1)  						{  							_v2 = 1;  						}  						else  						{  							_v3 = Math.Min(_f98' Math.Pow(_fA0 / _f60' _f88));    							_v2 = _v3;  						}    						_f58 = _v2;  						_f70 = Math.Pow(_f90' Math.Sqrt(_f58));    						if (_f28 > 0)  						{  							_f18 = _f8;  						}  						else  						{  							_f18 = _f8 - _f28 * _f70;  						}    						if (_f48 < 0)  						{  							_f38 = _f8;  						}  						else  						{  							_f38 = _f8 - _f48 * _f70;  						}  					}  				}    				if (_fF8 > 30)  				{  					_f30 = Math.Pow(_f50' _f58);  					_fC0 = (1 - _f30) * _series + _f30 * _fC0;  					_fC8 = (_series - _fC0) * (1 - _f50) + _f50 * _fC8;  					_fD0 = _f10 * _fC8 + _fC0;  					_f20 = -_f30 * 2;  					_f40 = _f30 * _f30;  					_fB0 = _f20 + _f40 + 1;  					_fA8 = (_fD0 - _fB8) * _fB0 + _f40 * _fA8;  					_fB8 = _fB8 + _fA8;  				}    				lastValue = (decimal)_fB8;  			}
Magic Number,StockSharp.Algo.Indicators,JurikMovingAverage,C:\repos\stocksharp_stocksharp\Algo\Indicators\JurikMovingAverage.cs,OnProcess,The following statement contains a magic number: if (_fF0 > 30)  			{  				if (Length < 1.0000000002)  				{  					_f80 = 0.0000000001; //{1.0e-10}  				}  				else  				{  					_f80 = (Length - 1) / 2.0;  				}    				if (_phase < -100)  				{  					_f10 = 0.5;  				}  				else  				{  					if (_phase > 100)  					{  						_f10 = 2.5;  					}  					else  					{  						_f10 = (double)_phase / 100 + 1.5;  					}  				}    				_v1 = Math.Log(Math.Sqrt(_f80));  				_v2 = _v1;    				if (_v1 / Math.Log(2.0) + 2.0 < 0.0)  				{  					_v3 = 0;  				}  				else  				{  					_v3 = _v2 / Math.Log(2.0) + 2.0;  				}    				_f98 = _v3;    				//----  				if (0.5 <= _f98 - 2.0)  				{  					_f88 = _f98 - 2.0;  				}  				else  				{  					_f88 = 0.5;  				}    				_f78 = Math.Sqrt(_f80) * _f98;  				_f90 = _f78 / (_f78 + 1.0);  				_f80 = _f80 * 0.9;  				_f50 = _f80 / (_f80 + 2.0);    				//----  				if (_f0 != 0)  				{  					_f0 = 0;  					_v5 = 0;    					for (_ii = 1; _ii <= 29; _ii++)  					{  						if (_buffer[_ii + 1] != _buffer[_ii])  						{  							_v5 = 1;  						}  					}    					_fD8 = _v5 * 30;    					_f38 = _fD8 == 0 ? _series : _buffer[1];    					_f18 = _f38;    					if (_fD8 > 29)  						_fD8 = 29;  				}  				else  					_fD8 = 0;    				//----  				for (_ii = _fD8; _ii >= 0; _ii--)  				{  					//{ another bigcycle...}  					_value2 = 31 - _ii;    					_f8 = _ii == 0 ? _series : _buffer[_value2];    					_f28 = _f8 - _f18;  					_f48 = _f8 - _f38;    					_v2 = Math.Max(Math.Abs(_f28)' Math.Abs(_f48));    					_fA0 = _v2;  					_vv = _fA0 + 0.0000000001; //{1.0e-10;}    					//----  					if (_s48 <= 1)  					{  						_s48 = 127;  					}  					else  					{  						_s48 = _s48 - 1;  					}    					if (_s50 <= 1)  					{  						_s50 = 10;  					}  					else  					{  						_s50 = _s50 - 1;  					}    					if (_s70 < 128)  						_s70 = _s70 + 1;    					_s8 = _s8 + _vv - _ring2[_s50];  					_ring2[_s50] = _vv;    					if (_s70 > 10)  					{  						_s20 = _s8 / 10;  					}  					else  						_s20 = _s8 / _s70;    					//----  					if (_s70 > 127)  					{  						_s10 = _ring1[_s48];  						_ring1[_s48] = _s20;  						_s68 = 64;  						_s58 = Convert.ToInt32(_s68);    						while (_s68 > 1)  						{  							if (_list[_s58] < _s10)  							{  								_s68 = _s68 * 0.5;  								_s58 = _s58 + Convert.ToInt32(_s68);  							}  							else  								if (_list[_s58] <= _s10)  								{  									_s68 = 1;  								}  								else  								{  									_s68 = _s68 * 0.5;  									_s58 = _s58 - Convert.ToInt32(_s68);  								}  						}  					}  					else  					{  						_ring1[_s48] = _s20;    						if (_s28 + _s30 > 127)  						{  							_s30 = _s30 - 1;  							_s58 = Convert.ToInt32(_s30);  						}  						else  						{  							_s28 = _s28 + 1;  							_s58 = Convert.ToInt32(_s28);  						}    						_s38 = _s28 > 96 ? 96 : Convert.ToInt32(_s28);  						_s40 = _s30 < 32 ? 32 : Convert.ToInt32(_s30);  					}    					//----  					_s68 = 64;  					_s60 = Convert.ToInt32(_s68);    					while (_s68 > 1)  					{  						if (_list[_s60] >= _s20)  						{  							if (_list[_s60 - 1] <= _s20)  							{  								_s68 = 1;  							}  							else  							{  								_s68 = _s68 * 0.5;  								_s60 = _s60 - Convert.ToInt32(_s68);  							}  						}  						else  						{  							_s68 = _s68 * 0.5;  							_s60 = _s60 + Convert.ToInt32(_s68);  						}    						if ((_s60 == 127) && (_s20 > _list[127]))  							_s60 = 128;  					}    					if (_s70 > 127)  					{  						if (_s58 >= _s60)  						{  							if ((_s38 + 1 > _s60) && (_s40 - 1 < _s60))  							{  								_s18 = _s18 + _s20;  							}  							else  								if ((_s40 > _s60) && (_s40 - 1 < _s58))  									_s18 = _s18 + _list[_s40 - 1];  						}  						else  							if (_s40 >= _s60)  							{  								if ((_s38 + 1 < _s60) && (_s38 + 1 > _s58))  									_s18 = _s18 + _list[_s38 + 1];  							}  							else  								if (_s38 + 2 > _s60)  								{  									_s18 = _s18 + _s20;  								}  								else  									if ((_s38 + 1 < _s60) && (_s38 + 1 > _s58))  										_s18 = _s18 + _list[_s38 + 1];    						if (_s58 > _s60)  						{  							if ((_s40 - 1 < _s58) && (_s38 + 1 > _s58))  							{  								_s18 = _s18 - _list[_s58];  							}  							else  								if ((_s38 < _s58) && (_s38 + 1 > _s60))  									_s18 = _s18 - _list[_s38];  						}  						else  						{  							if ((_s38 + 1 > _s58) && (_s40 - 1 < _s58))  							{  								_s18 = _s18 - _list[_s58];  							}  							else  								if ((_s40 > _s58) && (_s40 < _s60))  									_s18 = _s18 - _list[_s40];  						}  					}    					if (_s58 <= _s60)  					{  						if (_s58 >= _s60)  						{  							_list[_s60] = _s20;  						}  						else  						{  							for (_jj = _s58 + 1; _jj <= _s60 - 1; _jj++)  							{  								_list[_jj - 1] = _list[_jj];  							}  							_list[_s60 - 1] = _s20;  						}  					}  					else  					{  						for (_jj = _s58 - 1; _jj >= _s60; _jj--)  						{  							_list[_jj + 1] = _list[_jj];  						}  						_list[_s60] = _s20;  					}    					if (_s70 <= 127)  					{  						_s18 = 0;  						for (_jj = _s40; _jj <= _s38; _jj++)  						{  							_s18 = _s18 + _list[_jj];  						}  					}    					_f60 = _s18 / (_s38 - _s40 + 1);    					if (_fF8 + 1 > 31)  					{  						_fF8 = 31;  					}  					else  						_fF8 = _fF8 + 1;    					//----  					if (_fF8 <= 30)  					{  						if (_f28 > 0)  						{  							_f18 = _f8;  						}  						else  							_f18 = _f8 - _f28 * _f90;    						if (_f48 < 0)  						{  							_f38 = _f8;  						}  						else  							_f38 = _f8 - _f48 * _f90;    						_fB8 = _series;    						if (_fF8 != 30)  						{  							continue;  						}    						if (_fF8 == 30)  						{  							_fC0 = _series;    							_v4 = Math.Max(Math.Ceiling(_f78)' 1);    							_fE8 = (int)Math.Ceiling(_v4);    							_v2 = Math.Max(Math.Floor(_f78)' 1);    							_fE0 = (int)Math.Ceiling(_v2);    							if (_fE8 == _fE0)  							{  								_f68 = 1;  							}  							else  							{  								_v4 = _fE8 - _fE0;  								_f68 = (_f78 - _fE0) / _v4;  							}    							_v5 = _fE0 <= 29 ? Convert.ToInt32(_fE0) : 29;    							_v6 = _fE8 <= 29 ? Convert.ToInt32(_fE8) : 29;    							_fA8 = (_series - _buffer[_fF0 - _v5]) * (1 - _f68) / _fE0 + (_series - _buffer[_fF0 - _v6]) * _f68 / _fE8;  						}  					}  					else  					{  						_v1 = Math.Min(_f98' Math.Pow(_fA0 / _f60' _f88));    						if (_v1 < 1)  						{  							_v2 = 1;  						}  						else  						{  							_v3 = Math.Min(_f98' Math.Pow(_fA0 / _f60' _f88));    							_v2 = _v3;  						}    						_f58 = _v2;  						_f70 = Math.Pow(_f90' Math.Sqrt(_f58));    						if (_f28 > 0)  						{  							_f18 = _f8;  						}  						else  						{  							_f18 = _f8 - _f28 * _f70;  						}    						if (_f48 < 0)  						{  							_f38 = _f8;  						}  						else  						{  							_f38 = _f8 - _f48 * _f70;  						}  					}  				}    				if (_fF8 > 30)  				{  					_f30 = Math.Pow(_f50' _f58);  					_fC0 = (1 - _f30) * _series + _f30 * _fC0;  					_fC8 = (_series - _fC0) * (1 - _f50) + _f50 * _fC8;  					_fD0 = _f10 * _fC8 + _fC0;  					_f20 = -_f30 * 2;  					_f40 = _f30 * _f30;  					_fB0 = _f20 + _f40 + 1;  					_fA8 = (_fD0 - _fB8) * _fB0 + _f40 * _fA8;  					_fB8 = _fB8 + _fA8;  				}    				lastValue = (decimal)_fB8;  			}
Magic Number,StockSharp.Algo.Indicators,JurikMovingAverage,C:\repos\stocksharp_stocksharp\Algo\Indicators\JurikMovingAverage.cs,OnProcess,The following statement contains a magic number: if (_fF0 > 30)  			{  				if (Length < 1.0000000002)  				{  					_f80 = 0.0000000001; //{1.0e-10}  				}  				else  				{  					_f80 = (Length - 1) / 2.0;  				}    				if (_phase < -100)  				{  					_f10 = 0.5;  				}  				else  				{  					if (_phase > 100)  					{  						_f10 = 2.5;  					}  					else  					{  						_f10 = (double)_phase / 100 + 1.5;  					}  				}    				_v1 = Math.Log(Math.Sqrt(_f80));  				_v2 = _v1;    				if (_v1 / Math.Log(2.0) + 2.0 < 0.0)  				{  					_v3 = 0;  				}  				else  				{  					_v3 = _v2 / Math.Log(2.0) + 2.0;  				}    				_f98 = _v3;    				//----  				if (0.5 <= _f98 - 2.0)  				{  					_f88 = _f98 - 2.0;  				}  				else  				{  					_f88 = 0.5;  				}    				_f78 = Math.Sqrt(_f80) * _f98;  				_f90 = _f78 / (_f78 + 1.0);  				_f80 = _f80 * 0.9;  				_f50 = _f80 / (_f80 + 2.0);    				//----  				if (_f0 != 0)  				{  					_f0 = 0;  					_v5 = 0;    					for (_ii = 1; _ii <= 29; _ii++)  					{  						if (_buffer[_ii + 1] != _buffer[_ii])  						{  							_v5 = 1;  						}  					}    					_fD8 = _v5 * 30;    					_f38 = _fD8 == 0 ? _series : _buffer[1];    					_f18 = _f38;    					if (_fD8 > 29)  						_fD8 = 29;  				}  				else  					_fD8 = 0;    				//----  				for (_ii = _fD8; _ii >= 0; _ii--)  				{  					//{ another bigcycle...}  					_value2 = 31 - _ii;    					_f8 = _ii == 0 ? _series : _buffer[_value2];    					_f28 = _f8 - _f18;  					_f48 = _f8 - _f38;    					_v2 = Math.Max(Math.Abs(_f28)' Math.Abs(_f48));    					_fA0 = _v2;  					_vv = _fA0 + 0.0000000001; //{1.0e-10;}    					//----  					if (_s48 <= 1)  					{  						_s48 = 127;  					}  					else  					{  						_s48 = _s48 - 1;  					}    					if (_s50 <= 1)  					{  						_s50 = 10;  					}  					else  					{  						_s50 = _s50 - 1;  					}    					if (_s70 < 128)  						_s70 = _s70 + 1;    					_s8 = _s8 + _vv - _ring2[_s50];  					_ring2[_s50] = _vv;    					if (_s70 > 10)  					{  						_s20 = _s8 / 10;  					}  					else  						_s20 = _s8 / _s70;    					//----  					if (_s70 > 127)  					{  						_s10 = _ring1[_s48];  						_ring1[_s48] = _s20;  						_s68 = 64;  						_s58 = Convert.ToInt32(_s68);    						while (_s68 > 1)  						{  							if (_list[_s58] < _s10)  							{  								_s68 = _s68 * 0.5;  								_s58 = _s58 + Convert.ToInt32(_s68);  							}  							else  								if (_list[_s58] <= _s10)  								{  									_s68 = 1;  								}  								else  								{  									_s68 = _s68 * 0.5;  									_s58 = _s58 - Convert.ToInt32(_s68);  								}  						}  					}  					else  					{  						_ring1[_s48] = _s20;    						if (_s28 + _s30 > 127)  						{  							_s30 = _s30 - 1;  							_s58 = Convert.ToInt32(_s30);  						}  						else  						{  							_s28 = _s28 + 1;  							_s58 = Convert.ToInt32(_s28);  						}    						_s38 = _s28 > 96 ? 96 : Convert.ToInt32(_s28);  						_s40 = _s30 < 32 ? 32 : Convert.ToInt32(_s30);  					}    					//----  					_s68 = 64;  					_s60 = Convert.ToInt32(_s68);    					while (_s68 > 1)  					{  						if (_list[_s60] >= _s20)  						{  							if (_list[_s60 - 1] <= _s20)  							{  								_s68 = 1;  							}  							else  							{  								_s68 = _s68 * 0.5;  								_s60 = _s60 - Convert.ToInt32(_s68);  							}  						}  						else  						{  							_s68 = _s68 * 0.5;  							_s60 = _s60 + Convert.ToInt32(_s68);  						}    						if ((_s60 == 127) && (_s20 > _list[127]))  							_s60 = 128;  					}    					if (_s70 > 127)  					{  						if (_s58 >= _s60)  						{  							if ((_s38 + 1 > _s60) && (_s40 - 1 < _s60))  							{  								_s18 = _s18 + _s20;  							}  							else  								if ((_s40 > _s60) && (_s40 - 1 < _s58))  									_s18 = _s18 + _list[_s40 - 1];  						}  						else  							if (_s40 >= _s60)  							{  								if ((_s38 + 1 < _s60) && (_s38 + 1 > _s58))  									_s18 = _s18 + _list[_s38 + 1];  							}  							else  								if (_s38 + 2 > _s60)  								{  									_s18 = _s18 + _s20;  								}  								else  									if ((_s38 + 1 < _s60) && (_s38 + 1 > _s58))  										_s18 = _s18 + _list[_s38 + 1];    						if (_s58 > _s60)  						{  							if ((_s40 - 1 < _s58) && (_s38 + 1 > _s58))  							{  								_s18 = _s18 - _list[_s58];  							}  							else  								if ((_s38 < _s58) && (_s38 + 1 > _s60))  									_s18 = _s18 - _list[_s38];  						}  						else  						{  							if ((_s38 + 1 > _s58) && (_s40 - 1 < _s58))  							{  								_s18 = _s18 - _list[_s58];  							}  							else  								if ((_s40 > _s58) && (_s40 < _s60))  									_s18 = _s18 - _list[_s40];  						}  					}    					if (_s58 <= _s60)  					{  						if (_s58 >= _s60)  						{  							_list[_s60] = _s20;  						}  						else  						{  							for (_jj = _s58 + 1; _jj <= _s60 - 1; _jj++)  							{  								_list[_jj - 1] = _list[_jj];  							}  							_list[_s60 - 1] = _s20;  						}  					}  					else  					{  						for (_jj = _s58 - 1; _jj >= _s60; _jj--)  						{  							_list[_jj + 1] = _list[_jj];  						}  						_list[_s60] = _s20;  					}    					if (_s70 <= 127)  					{  						_s18 = 0;  						for (_jj = _s40; _jj <= _s38; _jj++)  						{  							_s18 = _s18 + _list[_jj];  						}  					}    					_f60 = _s18 / (_s38 - _s40 + 1);    					if (_fF8 + 1 > 31)  					{  						_fF8 = 31;  					}  					else  						_fF8 = _fF8 + 1;    					//----  					if (_fF8 <= 30)  					{  						if (_f28 > 0)  						{  							_f18 = _f8;  						}  						else  							_f18 = _f8 - _f28 * _f90;    						if (_f48 < 0)  						{  							_f38 = _f8;  						}  						else  							_f38 = _f8 - _f48 * _f90;    						_fB8 = _series;    						if (_fF8 != 30)  						{  							continue;  						}    						if (_fF8 == 30)  						{  							_fC0 = _series;    							_v4 = Math.Max(Math.Ceiling(_f78)' 1);    							_fE8 = (int)Math.Ceiling(_v4);    							_v2 = Math.Max(Math.Floor(_f78)' 1);    							_fE0 = (int)Math.Ceiling(_v2);    							if (_fE8 == _fE0)  							{  								_f68 = 1;  							}  							else  							{  								_v4 = _fE8 - _fE0;  								_f68 = (_f78 - _fE0) / _v4;  							}    							_v5 = _fE0 <= 29 ? Convert.ToInt32(_fE0) : 29;    							_v6 = _fE8 <= 29 ? Convert.ToInt32(_fE8) : 29;    							_fA8 = (_series - _buffer[_fF0 - _v5]) * (1 - _f68) / _fE0 + (_series - _buffer[_fF0 - _v6]) * _f68 / _fE8;  						}  					}  					else  					{  						_v1 = Math.Min(_f98' Math.Pow(_fA0 / _f60' _f88));    						if (_v1 < 1)  						{  							_v2 = 1;  						}  						else  						{  							_v3 = Math.Min(_f98' Math.Pow(_fA0 / _f60' _f88));    							_v2 = _v3;  						}    						_f58 = _v2;  						_f70 = Math.Pow(_f90' Math.Sqrt(_f58));    						if (_f28 > 0)  						{  							_f18 = _f8;  						}  						else  						{  							_f18 = _f8 - _f28 * _f70;  						}    						if (_f48 < 0)  						{  							_f38 = _f8;  						}  						else  						{  							_f38 = _f8 - _f48 * _f70;  						}  					}  				}    				if (_fF8 > 30)  				{  					_f30 = Math.Pow(_f50' _f58);  					_fC0 = (1 - _f30) * _series + _f30 * _fC0;  					_fC8 = (_series - _fC0) * (1 - _f50) + _f50 * _fC8;  					_fD0 = _f10 * _fC8 + _fC0;  					_f20 = -_f30 * 2;  					_f40 = _f30 * _f30;  					_fB0 = _f20 + _f40 + 1;  					_fA8 = (_fD0 - _fB8) * _fB0 + _f40 * _fA8;  					_fB8 = _fB8 + _fA8;  				}    				lastValue = (decimal)_fB8;  			}
Magic Number,StockSharp.Algo.Indicators,JurikMovingAverage,C:\repos\stocksharp_stocksharp\Algo\Indicators\JurikMovingAverage.cs,OnProcess,The following statement contains a magic number: if (_fF0 > 30)  			{  				if (Length < 1.0000000002)  				{  					_f80 = 0.0000000001; //{1.0e-10}  				}  				else  				{  					_f80 = (Length - 1) / 2.0;  				}    				if (_phase < -100)  				{  					_f10 = 0.5;  				}  				else  				{  					if (_phase > 100)  					{  						_f10 = 2.5;  					}  					else  					{  						_f10 = (double)_phase / 100 + 1.5;  					}  				}    				_v1 = Math.Log(Math.Sqrt(_f80));  				_v2 = _v1;    				if (_v1 / Math.Log(2.0) + 2.0 < 0.0)  				{  					_v3 = 0;  				}  				else  				{  					_v3 = _v2 / Math.Log(2.0) + 2.0;  				}    				_f98 = _v3;    				//----  				if (0.5 <= _f98 - 2.0)  				{  					_f88 = _f98 - 2.0;  				}  				else  				{  					_f88 = 0.5;  				}    				_f78 = Math.Sqrt(_f80) * _f98;  				_f90 = _f78 / (_f78 + 1.0);  				_f80 = _f80 * 0.9;  				_f50 = _f80 / (_f80 + 2.0);    				//----  				if (_f0 != 0)  				{  					_f0 = 0;  					_v5 = 0;    					for (_ii = 1; _ii <= 29; _ii++)  					{  						if (_buffer[_ii + 1] != _buffer[_ii])  						{  							_v5 = 1;  						}  					}    					_fD8 = _v5 * 30;    					_f38 = _fD8 == 0 ? _series : _buffer[1];    					_f18 = _f38;    					if (_fD8 > 29)  						_fD8 = 29;  				}  				else  					_fD8 = 0;    				//----  				for (_ii = _fD8; _ii >= 0; _ii--)  				{  					//{ another bigcycle...}  					_value2 = 31 - _ii;    					_f8 = _ii == 0 ? _series : _buffer[_value2];    					_f28 = _f8 - _f18;  					_f48 = _f8 - _f38;    					_v2 = Math.Max(Math.Abs(_f28)' Math.Abs(_f48));    					_fA0 = _v2;  					_vv = _fA0 + 0.0000000001; //{1.0e-10;}    					//----  					if (_s48 <= 1)  					{  						_s48 = 127;  					}  					else  					{  						_s48 = _s48 - 1;  					}    					if (_s50 <= 1)  					{  						_s50 = 10;  					}  					else  					{  						_s50 = _s50 - 1;  					}    					if (_s70 < 128)  						_s70 = _s70 + 1;    					_s8 = _s8 + _vv - _ring2[_s50];  					_ring2[_s50] = _vv;    					if (_s70 > 10)  					{  						_s20 = _s8 / 10;  					}  					else  						_s20 = _s8 / _s70;    					//----  					if (_s70 > 127)  					{  						_s10 = _ring1[_s48];  						_ring1[_s48] = _s20;  						_s68 = 64;  						_s58 = Convert.ToInt32(_s68);    						while (_s68 > 1)  						{  							if (_list[_s58] < _s10)  							{  								_s68 = _s68 * 0.5;  								_s58 = _s58 + Convert.ToInt32(_s68);  							}  							else  								if (_list[_s58] <= _s10)  								{  									_s68 = 1;  								}  								else  								{  									_s68 = _s68 * 0.5;  									_s58 = _s58 - Convert.ToInt32(_s68);  								}  						}  					}  					else  					{  						_ring1[_s48] = _s20;    						if (_s28 + _s30 > 127)  						{  							_s30 = _s30 - 1;  							_s58 = Convert.ToInt32(_s30);  						}  						else  						{  							_s28 = _s28 + 1;  							_s58 = Convert.ToInt32(_s28);  						}    						_s38 = _s28 > 96 ? 96 : Convert.ToInt32(_s28);  						_s40 = _s30 < 32 ? 32 : Convert.ToInt32(_s30);  					}    					//----  					_s68 = 64;  					_s60 = Convert.ToInt32(_s68);    					while (_s68 > 1)  					{  						if (_list[_s60] >= _s20)  						{  							if (_list[_s60 - 1] <= _s20)  							{  								_s68 = 1;  							}  							else  							{  								_s68 = _s68 * 0.5;  								_s60 = _s60 - Convert.ToInt32(_s68);  							}  						}  						else  						{  							_s68 = _s68 * 0.5;  							_s60 = _s60 + Convert.ToInt32(_s68);  						}    						if ((_s60 == 127) && (_s20 > _list[127]))  							_s60 = 128;  					}    					if (_s70 > 127)  					{  						if (_s58 >= _s60)  						{  							if ((_s38 + 1 > _s60) && (_s40 - 1 < _s60))  							{  								_s18 = _s18 + _s20;  							}  							else  								if ((_s40 > _s60) && (_s40 - 1 < _s58))  									_s18 = _s18 + _list[_s40 - 1];  						}  						else  							if (_s40 >= _s60)  							{  								if ((_s38 + 1 < _s60) && (_s38 + 1 > _s58))  									_s18 = _s18 + _list[_s38 + 1];  							}  							else  								if (_s38 + 2 > _s60)  								{  									_s18 = _s18 + _s20;  								}  								else  									if ((_s38 + 1 < _s60) && (_s38 + 1 > _s58))  										_s18 = _s18 + _list[_s38 + 1];    						if (_s58 > _s60)  						{  							if ((_s40 - 1 < _s58) && (_s38 + 1 > _s58))  							{  								_s18 = _s18 - _list[_s58];  							}  							else  								if ((_s38 < _s58) && (_s38 + 1 > _s60))  									_s18 = _s18 - _list[_s38];  						}  						else  						{  							if ((_s38 + 1 > _s58) && (_s40 - 1 < _s58))  							{  								_s18 = _s18 - _list[_s58];  							}  							else  								if ((_s40 > _s58) && (_s40 < _s60))  									_s18 = _s18 - _list[_s40];  						}  					}    					if (_s58 <= _s60)  					{  						if (_s58 >= _s60)  						{  							_list[_s60] = _s20;  						}  						else  						{  							for (_jj = _s58 + 1; _jj <= _s60 - 1; _jj++)  							{  								_list[_jj - 1] = _list[_jj];  							}  							_list[_s60 - 1] = _s20;  						}  					}  					else  					{  						for (_jj = _s58 - 1; _jj >= _s60; _jj--)  						{  							_list[_jj + 1] = _list[_jj];  						}  						_list[_s60] = _s20;  					}    					if (_s70 <= 127)  					{  						_s18 = 0;  						for (_jj = _s40; _jj <= _s38; _jj++)  						{  							_s18 = _s18 + _list[_jj];  						}  					}    					_f60 = _s18 / (_s38 - _s40 + 1);    					if (_fF8 + 1 > 31)  					{  						_fF8 = 31;  					}  					else  						_fF8 = _fF8 + 1;    					//----  					if (_fF8 <= 30)  					{  						if (_f28 > 0)  						{  							_f18 = _f8;  						}  						else  							_f18 = _f8 - _f28 * _f90;    						if (_f48 < 0)  						{  							_f38 = _f8;  						}  						else  							_f38 = _f8 - _f48 * _f90;    						_fB8 = _series;    						if (_fF8 != 30)  						{  							continue;  						}    						if (_fF8 == 30)  						{  							_fC0 = _series;    							_v4 = Math.Max(Math.Ceiling(_f78)' 1);    							_fE8 = (int)Math.Ceiling(_v4);    							_v2 = Math.Max(Math.Floor(_f78)' 1);    							_fE0 = (int)Math.Ceiling(_v2);    							if (_fE8 == _fE0)  							{  								_f68 = 1;  							}  							else  							{  								_v4 = _fE8 - _fE0;  								_f68 = (_f78 - _fE0) / _v4;  							}    							_v5 = _fE0 <= 29 ? Convert.ToInt32(_fE0) : 29;    							_v6 = _fE8 <= 29 ? Convert.ToInt32(_fE8) : 29;    							_fA8 = (_series - _buffer[_fF0 - _v5]) * (1 - _f68) / _fE0 + (_series - _buffer[_fF0 - _v6]) * _f68 / _fE8;  						}  					}  					else  					{  						_v1 = Math.Min(_f98' Math.Pow(_fA0 / _f60' _f88));    						if (_v1 < 1)  						{  							_v2 = 1;  						}  						else  						{  							_v3 = Math.Min(_f98' Math.Pow(_fA0 / _f60' _f88));    							_v2 = _v3;  						}    						_f58 = _v2;  						_f70 = Math.Pow(_f90' Math.Sqrt(_f58));    						if (_f28 > 0)  						{  							_f18 = _f8;  						}  						else  						{  							_f18 = _f8 - _f28 * _f70;  						}    						if (_f48 < 0)  						{  							_f38 = _f8;  						}  						else  						{  							_f38 = _f8 - _f48 * _f70;  						}  					}  				}    				if (_fF8 > 30)  				{  					_f30 = Math.Pow(_f50' _f58);  					_fC0 = (1 - _f30) * _series + _f30 * _fC0;  					_fC8 = (_series - _fC0) * (1 - _f50) + _f50 * _fC8;  					_fD0 = _f10 * _fC8 + _fC0;  					_f20 = -_f30 * 2;  					_f40 = _f30 * _f30;  					_fB0 = _f20 + _f40 + 1;  					_fA8 = (_fD0 - _fB8) * _fB0 + _f40 * _fA8;  					_fB8 = _fB8 + _fA8;  				}    				lastValue = (decimal)_fB8;  			}
Magic Number,StockSharp.Algo.Indicators,JurikMovingAverage,C:\repos\stocksharp_stocksharp\Algo\Indicators\JurikMovingAverage.cs,OnProcess,The following statement contains a magic number: if (_fF0 > 30)  			{  				if (Length < 1.0000000002)  				{  					_f80 = 0.0000000001; //{1.0e-10}  				}  				else  				{  					_f80 = (Length - 1) / 2.0;  				}    				if (_phase < -100)  				{  					_f10 = 0.5;  				}  				else  				{  					if (_phase > 100)  					{  						_f10 = 2.5;  					}  					else  					{  						_f10 = (double)_phase / 100 + 1.5;  					}  				}    				_v1 = Math.Log(Math.Sqrt(_f80));  				_v2 = _v1;    				if (_v1 / Math.Log(2.0) + 2.0 < 0.0)  				{  					_v3 = 0;  				}  				else  				{  					_v3 = _v2 / Math.Log(2.0) + 2.0;  				}    				_f98 = _v3;    				//----  				if (0.5 <= _f98 - 2.0)  				{  					_f88 = _f98 - 2.0;  				}  				else  				{  					_f88 = 0.5;  				}    				_f78 = Math.Sqrt(_f80) * _f98;  				_f90 = _f78 / (_f78 + 1.0);  				_f80 = _f80 * 0.9;  				_f50 = _f80 / (_f80 + 2.0);    				//----  				if (_f0 != 0)  				{  					_f0 = 0;  					_v5 = 0;    					for (_ii = 1; _ii <= 29; _ii++)  					{  						if (_buffer[_ii + 1] != _buffer[_ii])  						{  							_v5 = 1;  						}  					}    					_fD8 = _v5 * 30;    					_f38 = _fD8 == 0 ? _series : _buffer[1];    					_f18 = _f38;    					if (_fD8 > 29)  						_fD8 = 29;  				}  				else  					_fD8 = 0;    				//----  				for (_ii = _fD8; _ii >= 0; _ii--)  				{  					//{ another bigcycle...}  					_value2 = 31 - _ii;    					_f8 = _ii == 0 ? _series : _buffer[_value2];    					_f28 = _f8 - _f18;  					_f48 = _f8 - _f38;    					_v2 = Math.Max(Math.Abs(_f28)' Math.Abs(_f48));    					_fA0 = _v2;  					_vv = _fA0 + 0.0000000001; //{1.0e-10;}    					//----  					if (_s48 <= 1)  					{  						_s48 = 127;  					}  					else  					{  						_s48 = _s48 - 1;  					}    					if (_s50 <= 1)  					{  						_s50 = 10;  					}  					else  					{  						_s50 = _s50 - 1;  					}    					if (_s70 < 128)  						_s70 = _s70 + 1;    					_s8 = _s8 + _vv - _ring2[_s50];  					_ring2[_s50] = _vv;    					if (_s70 > 10)  					{  						_s20 = _s8 / 10;  					}  					else  						_s20 = _s8 / _s70;    					//----  					if (_s70 > 127)  					{  						_s10 = _ring1[_s48];  						_ring1[_s48] = _s20;  						_s68 = 64;  						_s58 = Convert.ToInt32(_s68);    						while (_s68 > 1)  						{  							if (_list[_s58] < _s10)  							{  								_s68 = _s68 * 0.5;  								_s58 = _s58 + Convert.ToInt32(_s68);  							}  							else  								if (_list[_s58] <= _s10)  								{  									_s68 = 1;  								}  								else  								{  									_s68 = _s68 * 0.5;  									_s58 = _s58 - Convert.ToInt32(_s68);  								}  						}  					}  					else  					{  						_ring1[_s48] = _s20;    						if (_s28 + _s30 > 127)  						{  							_s30 = _s30 - 1;  							_s58 = Convert.ToInt32(_s30);  						}  						else  						{  							_s28 = _s28 + 1;  							_s58 = Convert.ToInt32(_s28);  						}    						_s38 = _s28 > 96 ? 96 : Convert.ToInt32(_s28);  						_s40 = _s30 < 32 ? 32 : Convert.ToInt32(_s30);  					}    					//----  					_s68 = 64;  					_s60 = Convert.ToInt32(_s68);    					while (_s68 > 1)  					{  						if (_list[_s60] >= _s20)  						{  							if (_list[_s60 - 1] <= _s20)  							{  								_s68 = 1;  							}  							else  							{  								_s68 = _s68 * 0.5;  								_s60 = _s60 - Convert.ToInt32(_s68);  							}  						}  						else  						{  							_s68 = _s68 * 0.5;  							_s60 = _s60 + Convert.ToInt32(_s68);  						}    						if ((_s60 == 127) && (_s20 > _list[127]))  							_s60 = 128;  					}    					if (_s70 > 127)  					{  						if (_s58 >= _s60)  						{  							if ((_s38 + 1 > _s60) && (_s40 - 1 < _s60))  							{  								_s18 = _s18 + _s20;  							}  							else  								if ((_s40 > _s60) && (_s40 - 1 < _s58))  									_s18 = _s18 + _list[_s40 - 1];  						}  						else  							if (_s40 >= _s60)  							{  								if ((_s38 + 1 < _s60) && (_s38 + 1 > _s58))  									_s18 = _s18 + _list[_s38 + 1];  							}  							else  								if (_s38 + 2 > _s60)  								{  									_s18 = _s18 + _s20;  								}  								else  									if ((_s38 + 1 < _s60) && (_s38 + 1 > _s58))  										_s18 = _s18 + _list[_s38 + 1];    						if (_s58 > _s60)  						{  							if ((_s40 - 1 < _s58) && (_s38 + 1 > _s58))  							{  								_s18 = _s18 - _list[_s58];  							}  							else  								if ((_s38 < _s58) && (_s38 + 1 > _s60))  									_s18 = _s18 - _list[_s38];  						}  						else  						{  							if ((_s38 + 1 > _s58) && (_s40 - 1 < _s58))  							{  								_s18 = _s18 - _list[_s58];  							}  							else  								if ((_s40 > _s58) && (_s40 < _s60))  									_s18 = _s18 - _list[_s40];  						}  					}    					if (_s58 <= _s60)  					{  						if (_s58 >= _s60)  						{  							_list[_s60] = _s20;  						}  						else  						{  							for (_jj = _s58 + 1; _jj <= _s60 - 1; _jj++)  							{  								_list[_jj - 1] = _list[_jj];  							}  							_list[_s60 - 1] = _s20;  						}  					}  					else  					{  						for (_jj = _s58 - 1; _jj >= _s60; _jj--)  						{  							_list[_jj + 1] = _list[_jj];  						}  						_list[_s60] = _s20;  					}    					if (_s70 <= 127)  					{  						_s18 = 0;  						for (_jj = _s40; _jj <= _s38; _jj++)  						{  							_s18 = _s18 + _list[_jj];  						}  					}    					_f60 = _s18 / (_s38 - _s40 + 1);    					if (_fF8 + 1 > 31)  					{  						_fF8 = 31;  					}  					else  						_fF8 = _fF8 + 1;    					//----  					if (_fF8 <= 30)  					{  						if (_f28 > 0)  						{  							_f18 = _f8;  						}  						else  							_f18 = _f8 - _f28 * _f90;    						if (_f48 < 0)  						{  							_f38 = _f8;  						}  						else  							_f38 = _f8 - _f48 * _f90;    						_fB8 = _series;    						if (_fF8 != 30)  						{  							continue;  						}    						if (_fF8 == 30)  						{  							_fC0 = _series;    							_v4 = Math.Max(Math.Ceiling(_f78)' 1);    							_fE8 = (int)Math.Ceiling(_v4);    							_v2 = Math.Max(Math.Floor(_f78)' 1);    							_fE0 = (int)Math.Ceiling(_v2);    							if (_fE8 == _fE0)  							{  								_f68 = 1;  							}  							else  							{  								_v4 = _fE8 - _fE0;  								_f68 = (_f78 - _fE0) / _v4;  							}    							_v5 = _fE0 <= 29 ? Convert.ToInt32(_fE0) : 29;    							_v6 = _fE8 <= 29 ? Convert.ToInt32(_fE8) : 29;    							_fA8 = (_series - _buffer[_fF0 - _v5]) * (1 - _f68) / _fE0 + (_series - _buffer[_fF0 - _v6]) * _f68 / _fE8;  						}  					}  					else  					{  						_v1 = Math.Min(_f98' Math.Pow(_fA0 / _f60' _f88));    						if (_v1 < 1)  						{  							_v2 = 1;  						}  						else  						{  							_v3 = Math.Min(_f98' Math.Pow(_fA0 / _f60' _f88));    							_v2 = _v3;  						}    						_f58 = _v2;  						_f70 = Math.Pow(_f90' Math.Sqrt(_f58));    						if (_f28 > 0)  						{  							_f18 = _f8;  						}  						else  						{  							_f18 = _f8 - _f28 * _f70;  						}    						if (_f48 < 0)  						{  							_f38 = _f8;  						}  						else  						{  							_f38 = _f8 - _f48 * _f70;  						}  					}  				}    				if (_fF8 > 30)  				{  					_f30 = Math.Pow(_f50' _f58);  					_fC0 = (1 - _f30) * _series + _f30 * _fC0;  					_fC8 = (_series - _fC0) * (1 - _f50) + _f50 * _fC8;  					_fD0 = _f10 * _fC8 + _fC0;  					_f20 = -_f30 * 2;  					_f40 = _f30 * _f30;  					_fB0 = _f20 + _f40 + 1;  					_fA8 = (_fD0 - _fB8) * _fB0 + _f40 * _fA8;  					_fB8 = _fB8 + _fA8;  				}    				lastValue = (decimal)_fB8;  			}
Magic Number,StockSharp.Algo.Indicators,JurikMovingAverage,C:\repos\stocksharp_stocksharp\Algo\Indicators\JurikMovingAverage.cs,OnProcess,The following statement contains a magic number: if (_fF0 > 30)  			{  				if (Length < 1.0000000002)  				{  					_f80 = 0.0000000001; //{1.0e-10}  				}  				else  				{  					_f80 = (Length - 1) / 2.0;  				}    				if (_phase < -100)  				{  					_f10 = 0.5;  				}  				else  				{  					if (_phase > 100)  					{  						_f10 = 2.5;  					}  					else  					{  						_f10 = (double)_phase / 100 + 1.5;  					}  				}    				_v1 = Math.Log(Math.Sqrt(_f80));  				_v2 = _v1;    				if (_v1 / Math.Log(2.0) + 2.0 < 0.0)  				{  					_v3 = 0;  				}  				else  				{  					_v3 = _v2 / Math.Log(2.0) + 2.0;  				}    				_f98 = _v3;    				//----  				if (0.5 <= _f98 - 2.0)  				{  					_f88 = _f98 - 2.0;  				}  				else  				{  					_f88 = 0.5;  				}    				_f78 = Math.Sqrt(_f80) * _f98;  				_f90 = _f78 / (_f78 + 1.0);  				_f80 = _f80 * 0.9;  				_f50 = _f80 / (_f80 + 2.0);    				//----  				if (_f0 != 0)  				{  					_f0 = 0;  					_v5 = 0;    					for (_ii = 1; _ii <= 29; _ii++)  					{  						if (_buffer[_ii + 1] != _buffer[_ii])  						{  							_v5 = 1;  						}  					}    					_fD8 = _v5 * 30;    					_f38 = _fD8 == 0 ? _series : _buffer[1];    					_f18 = _f38;    					if (_fD8 > 29)  						_fD8 = 29;  				}  				else  					_fD8 = 0;    				//----  				for (_ii = _fD8; _ii >= 0; _ii--)  				{  					//{ another bigcycle...}  					_value2 = 31 - _ii;    					_f8 = _ii == 0 ? _series : _buffer[_value2];    					_f28 = _f8 - _f18;  					_f48 = _f8 - _f38;    					_v2 = Math.Max(Math.Abs(_f28)' Math.Abs(_f48));    					_fA0 = _v2;  					_vv = _fA0 + 0.0000000001; //{1.0e-10;}    					//----  					if (_s48 <= 1)  					{  						_s48 = 127;  					}  					else  					{  						_s48 = _s48 - 1;  					}    					if (_s50 <= 1)  					{  						_s50 = 10;  					}  					else  					{  						_s50 = _s50 - 1;  					}    					if (_s70 < 128)  						_s70 = _s70 + 1;    					_s8 = _s8 + _vv - _ring2[_s50];  					_ring2[_s50] = _vv;    					if (_s70 > 10)  					{  						_s20 = _s8 / 10;  					}  					else  						_s20 = _s8 / _s70;    					//----  					if (_s70 > 127)  					{  						_s10 = _ring1[_s48];  						_ring1[_s48] = _s20;  						_s68 = 64;  						_s58 = Convert.ToInt32(_s68);    						while (_s68 > 1)  						{  							if (_list[_s58] < _s10)  							{  								_s68 = _s68 * 0.5;  								_s58 = _s58 + Convert.ToInt32(_s68);  							}  							else  								if (_list[_s58] <= _s10)  								{  									_s68 = 1;  								}  								else  								{  									_s68 = _s68 * 0.5;  									_s58 = _s58 - Convert.ToInt32(_s68);  								}  						}  					}  					else  					{  						_ring1[_s48] = _s20;    						if (_s28 + _s30 > 127)  						{  							_s30 = _s30 - 1;  							_s58 = Convert.ToInt32(_s30);  						}  						else  						{  							_s28 = _s28 + 1;  							_s58 = Convert.ToInt32(_s28);  						}    						_s38 = _s28 > 96 ? 96 : Convert.ToInt32(_s28);  						_s40 = _s30 < 32 ? 32 : Convert.ToInt32(_s30);  					}    					//----  					_s68 = 64;  					_s60 = Convert.ToInt32(_s68);    					while (_s68 > 1)  					{  						if (_list[_s60] >= _s20)  						{  							if (_list[_s60 - 1] <= _s20)  							{  								_s68 = 1;  							}  							else  							{  								_s68 = _s68 * 0.5;  								_s60 = _s60 - Convert.ToInt32(_s68);  							}  						}  						else  						{  							_s68 = _s68 * 0.5;  							_s60 = _s60 + Convert.ToInt32(_s68);  						}    						if ((_s60 == 127) && (_s20 > _list[127]))  							_s60 = 128;  					}    					if (_s70 > 127)  					{  						if (_s58 >= _s60)  						{  							if ((_s38 + 1 > _s60) && (_s40 - 1 < _s60))  							{  								_s18 = _s18 + _s20;  							}  							else  								if ((_s40 > _s60) && (_s40 - 1 < _s58))  									_s18 = _s18 + _list[_s40 - 1];  						}  						else  							if (_s40 >= _s60)  							{  								if ((_s38 + 1 < _s60) && (_s38 + 1 > _s58))  									_s18 = _s18 + _list[_s38 + 1];  							}  							else  								if (_s38 + 2 > _s60)  								{  									_s18 = _s18 + _s20;  								}  								else  									if ((_s38 + 1 < _s60) && (_s38 + 1 > _s58))  										_s18 = _s18 + _list[_s38 + 1];    						if (_s58 > _s60)  						{  							if ((_s40 - 1 < _s58) && (_s38 + 1 > _s58))  							{  								_s18 = _s18 - _list[_s58];  							}  							else  								if ((_s38 < _s58) && (_s38 + 1 > _s60))  									_s18 = _s18 - _list[_s38];  						}  						else  						{  							if ((_s38 + 1 > _s58) && (_s40 - 1 < _s58))  							{  								_s18 = _s18 - _list[_s58];  							}  							else  								if ((_s40 > _s58) && (_s40 < _s60))  									_s18 = _s18 - _list[_s40];  						}  					}    					if (_s58 <= _s60)  					{  						if (_s58 >= _s60)  						{  							_list[_s60] = _s20;  						}  						else  						{  							for (_jj = _s58 + 1; _jj <= _s60 - 1; _jj++)  							{  								_list[_jj - 1] = _list[_jj];  							}  							_list[_s60 - 1] = _s20;  						}  					}  					else  					{  						for (_jj = _s58 - 1; _jj >= _s60; _jj--)  						{  							_list[_jj + 1] = _list[_jj];  						}  						_list[_s60] = _s20;  					}    					if (_s70 <= 127)  					{  						_s18 = 0;  						for (_jj = _s40; _jj <= _s38; _jj++)  						{  							_s18 = _s18 + _list[_jj];  						}  					}    					_f60 = _s18 / (_s38 - _s40 + 1);    					if (_fF8 + 1 > 31)  					{  						_fF8 = 31;  					}  					else  						_fF8 = _fF8 + 1;    					//----  					if (_fF8 <= 30)  					{  						if (_f28 > 0)  						{  							_f18 = _f8;  						}  						else  							_f18 = _f8 - _f28 * _f90;    						if (_f48 < 0)  						{  							_f38 = _f8;  						}  						else  							_f38 = _f8 - _f48 * _f90;    						_fB8 = _series;    						if (_fF8 != 30)  						{  							continue;  						}    						if (_fF8 == 30)  						{  							_fC0 = _series;    							_v4 = Math.Max(Math.Ceiling(_f78)' 1);    							_fE8 = (int)Math.Ceiling(_v4);    							_v2 = Math.Max(Math.Floor(_f78)' 1);    							_fE0 = (int)Math.Ceiling(_v2);    							if (_fE8 == _fE0)  							{  								_f68 = 1;  							}  							else  							{  								_v4 = _fE8 - _fE0;  								_f68 = (_f78 - _fE0) / _v4;  							}    							_v5 = _fE0 <= 29 ? Convert.ToInt32(_fE0) : 29;    							_v6 = _fE8 <= 29 ? Convert.ToInt32(_fE8) : 29;    							_fA8 = (_series - _buffer[_fF0 - _v5]) * (1 - _f68) / _fE0 + (_series - _buffer[_fF0 - _v6]) * _f68 / _fE8;  						}  					}  					else  					{  						_v1 = Math.Min(_f98' Math.Pow(_fA0 / _f60' _f88));    						if (_v1 < 1)  						{  							_v2 = 1;  						}  						else  						{  							_v3 = Math.Min(_f98' Math.Pow(_fA0 / _f60' _f88));    							_v2 = _v3;  						}    						_f58 = _v2;  						_f70 = Math.Pow(_f90' Math.Sqrt(_f58));    						if (_f28 > 0)  						{  							_f18 = _f8;  						}  						else  						{  							_f18 = _f8 - _f28 * _f70;  						}    						if (_f48 < 0)  						{  							_f38 = _f8;  						}  						else  						{  							_f38 = _f8 - _f48 * _f70;  						}  					}  				}    				if (_fF8 > 30)  				{  					_f30 = Math.Pow(_f50' _f58);  					_fC0 = (1 - _f30) * _series + _f30 * _fC0;  					_fC8 = (_series - _fC0) * (1 - _f50) + _f50 * _fC8;  					_fD0 = _f10 * _fC8 + _fC0;  					_f20 = -_f30 * 2;  					_f40 = _f30 * _f30;  					_fB0 = _f20 + _f40 + 1;  					_fA8 = (_fD0 - _fB8) * _fB0 + _f40 * _fA8;  					_fB8 = _fB8 + _fA8;  				}    				lastValue = (decimal)_fB8;  			}
Magic Number,StockSharp.Algo.Indicators,JurikMovingAverage,C:\repos\stocksharp_stocksharp\Algo\Indicators\JurikMovingAverage.cs,OnProcess,The following statement contains a magic number: if (_fF0 > 30)  			{  				if (Length < 1.0000000002)  				{  					_f80 = 0.0000000001; //{1.0e-10}  				}  				else  				{  					_f80 = (Length - 1) / 2.0;  				}    				if (_phase < -100)  				{  					_f10 = 0.5;  				}  				else  				{  					if (_phase > 100)  					{  						_f10 = 2.5;  					}  					else  					{  						_f10 = (double)_phase / 100 + 1.5;  					}  				}    				_v1 = Math.Log(Math.Sqrt(_f80));  				_v2 = _v1;    				if (_v1 / Math.Log(2.0) + 2.0 < 0.0)  				{  					_v3 = 0;  				}  				else  				{  					_v3 = _v2 / Math.Log(2.0) + 2.0;  				}    				_f98 = _v3;    				//----  				if (0.5 <= _f98 - 2.0)  				{  					_f88 = _f98 - 2.0;  				}  				else  				{  					_f88 = 0.5;  				}    				_f78 = Math.Sqrt(_f80) * _f98;  				_f90 = _f78 / (_f78 + 1.0);  				_f80 = _f80 * 0.9;  				_f50 = _f80 / (_f80 + 2.0);    				//----  				if (_f0 != 0)  				{  					_f0 = 0;  					_v5 = 0;    					for (_ii = 1; _ii <= 29; _ii++)  					{  						if (_buffer[_ii + 1] != _buffer[_ii])  						{  							_v5 = 1;  						}  					}    					_fD8 = _v5 * 30;    					_f38 = _fD8 == 0 ? _series : _buffer[1];    					_f18 = _f38;    					if (_fD8 > 29)  						_fD8 = 29;  				}  				else  					_fD8 = 0;    				//----  				for (_ii = _fD8; _ii >= 0; _ii--)  				{  					//{ another bigcycle...}  					_value2 = 31 - _ii;    					_f8 = _ii == 0 ? _series : _buffer[_value2];    					_f28 = _f8 - _f18;  					_f48 = _f8 - _f38;    					_v2 = Math.Max(Math.Abs(_f28)' Math.Abs(_f48));    					_fA0 = _v2;  					_vv = _fA0 + 0.0000000001; //{1.0e-10;}    					//----  					if (_s48 <= 1)  					{  						_s48 = 127;  					}  					else  					{  						_s48 = _s48 - 1;  					}    					if (_s50 <= 1)  					{  						_s50 = 10;  					}  					else  					{  						_s50 = _s50 - 1;  					}    					if (_s70 < 128)  						_s70 = _s70 + 1;    					_s8 = _s8 + _vv - _ring2[_s50];  					_ring2[_s50] = _vv;    					if (_s70 > 10)  					{  						_s20 = _s8 / 10;  					}  					else  						_s20 = _s8 / _s70;    					//----  					if (_s70 > 127)  					{  						_s10 = _ring1[_s48];  						_ring1[_s48] = _s20;  						_s68 = 64;  						_s58 = Convert.ToInt32(_s68);    						while (_s68 > 1)  						{  							if (_list[_s58] < _s10)  							{  								_s68 = _s68 * 0.5;  								_s58 = _s58 + Convert.ToInt32(_s68);  							}  							else  								if (_list[_s58] <= _s10)  								{  									_s68 = 1;  								}  								else  								{  									_s68 = _s68 * 0.5;  									_s58 = _s58 - Convert.ToInt32(_s68);  								}  						}  					}  					else  					{  						_ring1[_s48] = _s20;    						if (_s28 + _s30 > 127)  						{  							_s30 = _s30 - 1;  							_s58 = Convert.ToInt32(_s30);  						}  						else  						{  							_s28 = _s28 + 1;  							_s58 = Convert.ToInt32(_s28);  						}    						_s38 = _s28 > 96 ? 96 : Convert.ToInt32(_s28);  						_s40 = _s30 < 32 ? 32 : Convert.ToInt32(_s30);  					}    					//----  					_s68 = 64;  					_s60 = Convert.ToInt32(_s68);    					while (_s68 > 1)  					{  						if (_list[_s60] >= _s20)  						{  							if (_list[_s60 - 1] <= _s20)  							{  								_s68 = 1;  							}  							else  							{  								_s68 = _s68 * 0.5;  								_s60 = _s60 - Convert.ToInt32(_s68);  							}  						}  						else  						{  							_s68 = _s68 * 0.5;  							_s60 = _s60 + Convert.ToInt32(_s68);  						}    						if ((_s60 == 127) && (_s20 > _list[127]))  							_s60 = 128;  					}    					if (_s70 > 127)  					{  						if (_s58 >= _s60)  						{  							if ((_s38 + 1 > _s60) && (_s40 - 1 < _s60))  							{  								_s18 = _s18 + _s20;  							}  							else  								if ((_s40 > _s60) && (_s40 - 1 < _s58))  									_s18 = _s18 + _list[_s40 - 1];  						}  						else  							if (_s40 >= _s60)  							{  								if ((_s38 + 1 < _s60) && (_s38 + 1 > _s58))  									_s18 = _s18 + _list[_s38 + 1];  							}  							else  								if (_s38 + 2 > _s60)  								{  									_s18 = _s18 + _s20;  								}  								else  									if ((_s38 + 1 < _s60) && (_s38 + 1 > _s58))  										_s18 = _s18 + _list[_s38 + 1];    						if (_s58 > _s60)  						{  							if ((_s40 - 1 < _s58) && (_s38 + 1 > _s58))  							{  								_s18 = _s18 - _list[_s58];  							}  							else  								if ((_s38 < _s58) && (_s38 + 1 > _s60))  									_s18 = _s18 - _list[_s38];  						}  						else  						{  							if ((_s38 + 1 > _s58) && (_s40 - 1 < _s58))  							{  								_s18 = _s18 - _list[_s58];  							}  							else  								if ((_s40 > _s58) && (_s40 < _s60))  									_s18 = _s18 - _list[_s40];  						}  					}    					if (_s58 <= _s60)  					{  						if (_s58 >= _s60)  						{  							_list[_s60] = _s20;  						}  						else  						{  							for (_jj = _s58 + 1; _jj <= _s60 - 1; _jj++)  							{  								_list[_jj - 1] = _list[_jj];  							}  							_list[_s60 - 1] = _s20;  						}  					}  					else  					{  						for (_jj = _s58 - 1; _jj >= _s60; _jj--)  						{  							_list[_jj + 1] = _list[_jj];  						}  						_list[_s60] = _s20;  					}    					if (_s70 <= 127)  					{  						_s18 = 0;  						for (_jj = _s40; _jj <= _s38; _jj++)  						{  							_s18 = _s18 + _list[_jj];  						}  					}    					_f60 = _s18 / (_s38 - _s40 + 1);    					if (_fF8 + 1 > 31)  					{  						_fF8 = 31;  					}  					else  						_fF8 = _fF8 + 1;    					//----  					if (_fF8 <= 30)  					{  						if (_f28 > 0)  						{  							_f18 = _f8;  						}  						else  							_f18 = _f8 - _f28 * _f90;    						if (_f48 < 0)  						{  							_f38 = _f8;  						}  						else  							_f38 = _f8 - _f48 * _f90;    						_fB8 = _series;    						if (_fF8 != 30)  						{  							continue;  						}    						if (_fF8 == 30)  						{  							_fC0 = _series;    							_v4 = Math.Max(Math.Ceiling(_f78)' 1);    							_fE8 = (int)Math.Ceiling(_v4);    							_v2 = Math.Max(Math.Floor(_f78)' 1);    							_fE0 = (int)Math.Ceiling(_v2);    							if (_fE8 == _fE0)  							{  								_f68 = 1;  							}  							else  							{  								_v4 = _fE8 - _fE0;  								_f68 = (_f78 - _fE0) / _v4;  							}    							_v5 = _fE0 <= 29 ? Convert.ToInt32(_fE0) : 29;    							_v6 = _fE8 <= 29 ? Convert.ToInt32(_fE8) : 29;    							_fA8 = (_series - _buffer[_fF0 - _v5]) * (1 - _f68) / _fE0 + (_series - _buffer[_fF0 - _v6]) * _f68 / _fE8;  						}  					}  					else  					{  						_v1 = Math.Min(_f98' Math.Pow(_fA0 / _f60' _f88));    						if (_v1 < 1)  						{  							_v2 = 1;  						}  						else  						{  							_v3 = Math.Min(_f98' Math.Pow(_fA0 / _f60' _f88));    							_v2 = _v3;  						}    						_f58 = _v2;  						_f70 = Math.Pow(_f90' Math.Sqrt(_f58));    						if (_f28 > 0)  						{  							_f18 = _f8;  						}  						else  						{  							_f18 = _f8 - _f28 * _f70;  						}    						if (_f48 < 0)  						{  							_f38 = _f8;  						}  						else  						{  							_f38 = _f8 - _f48 * _f70;  						}  					}  				}    				if (_fF8 > 30)  				{  					_f30 = Math.Pow(_f50' _f58);  					_fC0 = (1 - _f30) * _series + _f30 * _fC0;  					_fC8 = (_series - _fC0) * (1 - _f50) + _f50 * _fC8;  					_fD0 = _f10 * _fC8 + _fC0;  					_f20 = -_f30 * 2;  					_f40 = _f30 * _f30;  					_fB0 = _f20 + _f40 + 1;  					_fA8 = (_fD0 - _fB8) * _fB0 + _f40 * _fA8;  					_fB8 = _fB8 + _fA8;  				}    				lastValue = (decimal)_fB8;  			}
Magic Number,StockSharp.Algo.Indicators,JurikMovingAverage,C:\repos\stocksharp_stocksharp\Algo\Indicators\JurikMovingAverage.cs,OnProcess,The following statement contains a magic number: if (_fF0 > 30)  			{  				if (Length < 1.0000000002)  				{  					_f80 = 0.0000000001; //{1.0e-10}  				}  				else  				{  					_f80 = (Length - 1) / 2.0;  				}    				if (_phase < -100)  				{  					_f10 = 0.5;  				}  				else  				{  					if (_phase > 100)  					{  						_f10 = 2.5;  					}  					else  					{  						_f10 = (double)_phase / 100 + 1.5;  					}  				}    				_v1 = Math.Log(Math.Sqrt(_f80));  				_v2 = _v1;    				if (_v1 / Math.Log(2.0) + 2.0 < 0.0)  				{  					_v3 = 0;  				}  				else  				{  					_v3 = _v2 / Math.Log(2.0) + 2.0;  				}    				_f98 = _v3;    				//----  				if (0.5 <= _f98 - 2.0)  				{  					_f88 = _f98 - 2.0;  				}  				else  				{  					_f88 = 0.5;  				}    				_f78 = Math.Sqrt(_f80) * _f98;  				_f90 = _f78 / (_f78 + 1.0);  				_f80 = _f80 * 0.9;  				_f50 = _f80 / (_f80 + 2.0);    				//----  				if (_f0 != 0)  				{  					_f0 = 0;  					_v5 = 0;    					for (_ii = 1; _ii <= 29; _ii++)  					{  						if (_buffer[_ii + 1] != _buffer[_ii])  						{  							_v5 = 1;  						}  					}    					_fD8 = _v5 * 30;    					_f38 = _fD8 == 0 ? _series : _buffer[1];    					_f18 = _f38;    					if (_fD8 > 29)  						_fD8 = 29;  				}  				else  					_fD8 = 0;    				//----  				for (_ii = _fD8; _ii >= 0; _ii--)  				{  					//{ another bigcycle...}  					_value2 = 31 - _ii;    					_f8 = _ii == 0 ? _series : _buffer[_value2];    					_f28 = _f8 - _f18;  					_f48 = _f8 - _f38;    					_v2 = Math.Max(Math.Abs(_f28)' Math.Abs(_f48));    					_fA0 = _v2;  					_vv = _fA0 + 0.0000000001; //{1.0e-10;}    					//----  					if (_s48 <= 1)  					{  						_s48 = 127;  					}  					else  					{  						_s48 = _s48 - 1;  					}    					if (_s50 <= 1)  					{  						_s50 = 10;  					}  					else  					{  						_s50 = _s50 - 1;  					}    					if (_s70 < 128)  						_s70 = _s70 + 1;    					_s8 = _s8 + _vv - _ring2[_s50];  					_ring2[_s50] = _vv;    					if (_s70 > 10)  					{  						_s20 = _s8 / 10;  					}  					else  						_s20 = _s8 / _s70;    					//----  					if (_s70 > 127)  					{  						_s10 = _ring1[_s48];  						_ring1[_s48] = _s20;  						_s68 = 64;  						_s58 = Convert.ToInt32(_s68);    						while (_s68 > 1)  						{  							if (_list[_s58] < _s10)  							{  								_s68 = _s68 * 0.5;  								_s58 = _s58 + Convert.ToInt32(_s68);  							}  							else  								if (_list[_s58] <= _s10)  								{  									_s68 = 1;  								}  								else  								{  									_s68 = _s68 * 0.5;  									_s58 = _s58 - Convert.ToInt32(_s68);  								}  						}  					}  					else  					{  						_ring1[_s48] = _s20;    						if (_s28 + _s30 > 127)  						{  							_s30 = _s30 - 1;  							_s58 = Convert.ToInt32(_s30);  						}  						else  						{  							_s28 = _s28 + 1;  							_s58 = Convert.ToInt32(_s28);  						}    						_s38 = _s28 > 96 ? 96 : Convert.ToInt32(_s28);  						_s40 = _s30 < 32 ? 32 : Convert.ToInt32(_s30);  					}    					//----  					_s68 = 64;  					_s60 = Convert.ToInt32(_s68);    					while (_s68 > 1)  					{  						if (_list[_s60] >= _s20)  						{  							if (_list[_s60 - 1] <= _s20)  							{  								_s68 = 1;  							}  							else  							{  								_s68 = _s68 * 0.5;  								_s60 = _s60 - Convert.ToInt32(_s68);  							}  						}  						else  						{  							_s68 = _s68 * 0.5;  							_s60 = _s60 + Convert.ToInt32(_s68);  						}    						if ((_s60 == 127) && (_s20 > _list[127]))  							_s60 = 128;  					}    					if (_s70 > 127)  					{  						if (_s58 >= _s60)  						{  							if ((_s38 + 1 > _s60) && (_s40 - 1 < _s60))  							{  								_s18 = _s18 + _s20;  							}  							else  								if ((_s40 > _s60) && (_s40 - 1 < _s58))  									_s18 = _s18 + _list[_s40 - 1];  						}  						else  							if (_s40 >= _s60)  							{  								if ((_s38 + 1 < _s60) && (_s38 + 1 > _s58))  									_s18 = _s18 + _list[_s38 + 1];  							}  							else  								if (_s38 + 2 > _s60)  								{  									_s18 = _s18 + _s20;  								}  								else  									if ((_s38 + 1 < _s60) && (_s38 + 1 > _s58))  										_s18 = _s18 + _list[_s38 + 1];    						if (_s58 > _s60)  						{  							if ((_s40 - 1 < _s58) && (_s38 + 1 > _s58))  							{  								_s18 = _s18 - _list[_s58];  							}  							else  								if ((_s38 < _s58) && (_s38 + 1 > _s60))  									_s18 = _s18 - _list[_s38];  						}  						else  						{  							if ((_s38 + 1 > _s58) && (_s40 - 1 < _s58))  							{  								_s18 = _s18 - _list[_s58];  							}  							else  								if ((_s40 > _s58) && (_s40 < _s60))  									_s18 = _s18 - _list[_s40];  						}  					}    					if (_s58 <= _s60)  					{  						if (_s58 >= _s60)  						{  							_list[_s60] = _s20;  						}  						else  						{  							for (_jj = _s58 + 1; _jj <= _s60 - 1; _jj++)  							{  								_list[_jj - 1] = _list[_jj];  							}  							_list[_s60 - 1] = _s20;  						}  					}  					else  					{  						for (_jj = _s58 - 1; _jj >= _s60; _jj--)  						{  							_list[_jj + 1] = _list[_jj];  						}  						_list[_s60] = _s20;  					}    					if (_s70 <= 127)  					{  						_s18 = 0;  						for (_jj = _s40; _jj <= _s38; _jj++)  						{  							_s18 = _s18 + _list[_jj];  						}  					}    					_f60 = _s18 / (_s38 - _s40 + 1);    					if (_fF8 + 1 > 31)  					{  						_fF8 = 31;  					}  					else  						_fF8 = _fF8 + 1;    					//----  					if (_fF8 <= 30)  					{  						if (_f28 > 0)  						{  							_f18 = _f8;  						}  						else  							_f18 = _f8 - _f28 * _f90;    						if (_f48 < 0)  						{  							_f38 = _f8;  						}  						else  							_f38 = _f8 - _f48 * _f90;    						_fB8 = _series;    						if (_fF8 != 30)  						{  							continue;  						}    						if (_fF8 == 30)  						{  							_fC0 = _series;    							_v4 = Math.Max(Math.Ceiling(_f78)' 1);    							_fE8 = (int)Math.Ceiling(_v4);    							_v2 = Math.Max(Math.Floor(_f78)' 1);    							_fE0 = (int)Math.Ceiling(_v2);    							if (_fE8 == _fE0)  							{  								_f68 = 1;  							}  							else  							{  								_v4 = _fE8 - _fE0;  								_f68 = (_f78 - _fE0) / _v4;  							}    							_v5 = _fE0 <= 29 ? Convert.ToInt32(_fE0) : 29;    							_v6 = _fE8 <= 29 ? Convert.ToInt32(_fE8) : 29;    							_fA8 = (_series - _buffer[_fF0 - _v5]) * (1 - _f68) / _fE0 + (_series - _buffer[_fF0 - _v6]) * _f68 / _fE8;  						}  					}  					else  					{  						_v1 = Math.Min(_f98' Math.Pow(_fA0 / _f60' _f88));    						if (_v1 < 1)  						{  							_v2 = 1;  						}  						else  						{  							_v3 = Math.Min(_f98' Math.Pow(_fA0 / _f60' _f88));    							_v2 = _v3;  						}    						_f58 = _v2;  						_f70 = Math.Pow(_f90' Math.Sqrt(_f58));    						if (_f28 > 0)  						{  							_f18 = _f8;  						}  						else  						{  							_f18 = _f8 - _f28 * _f70;  						}    						if (_f48 < 0)  						{  							_f38 = _f8;  						}  						else  						{  							_f38 = _f8 - _f48 * _f70;  						}  					}  				}    				if (_fF8 > 30)  				{  					_f30 = Math.Pow(_f50' _f58);  					_fC0 = (1 - _f30) * _series + _f30 * _fC0;  					_fC8 = (_series - _fC0) * (1 - _f50) + _f50 * _fC8;  					_fD0 = _f10 * _fC8 + _fC0;  					_f20 = -_f30 * 2;  					_f40 = _f30 * _f30;  					_fB0 = _f20 + _f40 + 1;  					_fA8 = (_fD0 - _fB8) * _fB0 + _f40 * _fA8;  					_fB8 = _fB8 + _fA8;  				}    				lastValue = (decimal)_fB8;  			}
Magic Number,StockSharp.Algo.Indicators,JurikMovingAverage,C:\repos\stocksharp_stocksharp\Algo\Indicators\JurikMovingAverage.cs,OnProcess,The following statement contains a magic number: if (_fF0 > 30)  			{  				if (Length < 1.0000000002)  				{  					_f80 = 0.0000000001; //{1.0e-10}  				}  				else  				{  					_f80 = (Length - 1) / 2.0;  				}    				if (_phase < -100)  				{  					_f10 = 0.5;  				}  				else  				{  					if (_phase > 100)  					{  						_f10 = 2.5;  					}  					else  					{  						_f10 = (double)_phase / 100 + 1.5;  					}  				}    				_v1 = Math.Log(Math.Sqrt(_f80));  				_v2 = _v1;    				if (_v1 / Math.Log(2.0) + 2.0 < 0.0)  				{  					_v3 = 0;  				}  				else  				{  					_v3 = _v2 / Math.Log(2.0) + 2.0;  				}    				_f98 = _v3;    				//----  				if (0.5 <= _f98 - 2.0)  				{  					_f88 = _f98 - 2.0;  				}  				else  				{  					_f88 = 0.5;  				}    				_f78 = Math.Sqrt(_f80) * _f98;  				_f90 = _f78 / (_f78 + 1.0);  				_f80 = _f80 * 0.9;  				_f50 = _f80 / (_f80 + 2.0);    				//----  				if (_f0 != 0)  				{  					_f0 = 0;  					_v5 = 0;    					for (_ii = 1; _ii <= 29; _ii++)  					{  						if (_buffer[_ii + 1] != _buffer[_ii])  						{  							_v5 = 1;  						}  					}    					_fD8 = _v5 * 30;    					_f38 = _fD8 == 0 ? _series : _buffer[1];    					_f18 = _f38;    					if (_fD8 > 29)  						_fD8 = 29;  				}  				else  					_fD8 = 0;    				//----  				for (_ii = _fD8; _ii >= 0; _ii--)  				{  					//{ another bigcycle...}  					_value2 = 31 - _ii;    					_f8 = _ii == 0 ? _series : _buffer[_value2];    					_f28 = _f8 - _f18;  					_f48 = _f8 - _f38;    					_v2 = Math.Max(Math.Abs(_f28)' Math.Abs(_f48));    					_fA0 = _v2;  					_vv = _fA0 + 0.0000000001; //{1.0e-10;}    					//----  					if (_s48 <= 1)  					{  						_s48 = 127;  					}  					else  					{  						_s48 = _s48 - 1;  					}    					if (_s50 <= 1)  					{  						_s50 = 10;  					}  					else  					{  						_s50 = _s50 - 1;  					}    					if (_s70 < 128)  						_s70 = _s70 + 1;    					_s8 = _s8 + _vv - _ring2[_s50];  					_ring2[_s50] = _vv;    					if (_s70 > 10)  					{  						_s20 = _s8 / 10;  					}  					else  						_s20 = _s8 / _s70;    					//----  					if (_s70 > 127)  					{  						_s10 = _ring1[_s48];  						_ring1[_s48] = _s20;  						_s68 = 64;  						_s58 = Convert.ToInt32(_s68);    						while (_s68 > 1)  						{  							if (_list[_s58] < _s10)  							{  								_s68 = _s68 * 0.5;  								_s58 = _s58 + Convert.ToInt32(_s68);  							}  							else  								if (_list[_s58] <= _s10)  								{  									_s68 = 1;  								}  								else  								{  									_s68 = _s68 * 0.5;  									_s58 = _s58 - Convert.ToInt32(_s68);  								}  						}  					}  					else  					{  						_ring1[_s48] = _s20;    						if (_s28 + _s30 > 127)  						{  							_s30 = _s30 - 1;  							_s58 = Convert.ToInt32(_s30);  						}  						else  						{  							_s28 = _s28 + 1;  							_s58 = Convert.ToInt32(_s28);  						}    						_s38 = _s28 > 96 ? 96 : Convert.ToInt32(_s28);  						_s40 = _s30 < 32 ? 32 : Convert.ToInt32(_s30);  					}    					//----  					_s68 = 64;  					_s60 = Convert.ToInt32(_s68);    					while (_s68 > 1)  					{  						if (_list[_s60] >= _s20)  						{  							if (_list[_s60 - 1] <= _s20)  							{  								_s68 = 1;  							}  							else  							{  								_s68 = _s68 * 0.5;  								_s60 = _s60 - Convert.ToInt32(_s68);  							}  						}  						else  						{  							_s68 = _s68 * 0.5;  							_s60 = _s60 + Convert.ToInt32(_s68);  						}    						if ((_s60 == 127) && (_s20 > _list[127]))  							_s60 = 128;  					}    					if (_s70 > 127)  					{  						if (_s58 >= _s60)  						{  							if ((_s38 + 1 > _s60) && (_s40 - 1 < _s60))  							{  								_s18 = _s18 + _s20;  							}  							else  								if ((_s40 > _s60) && (_s40 - 1 < _s58))  									_s18 = _s18 + _list[_s40 - 1];  						}  						else  							if (_s40 >= _s60)  							{  								if ((_s38 + 1 < _s60) && (_s38 + 1 > _s58))  									_s18 = _s18 + _list[_s38 + 1];  							}  							else  								if (_s38 + 2 > _s60)  								{  									_s18 = _s18 + _s20;  								}  								else  									if ((_s38 + 1 < _s60) && (_s38 + 1 > _s58))  										_s18 = _s18 + _list[_s38 + 1];    						if (_s58 > _s60)  						{  							if ((_s40 - 1 < _s58) && (_s38 + 1 > _s58))  							{  								_s18 = _s18 - _list[_s58];  							}  							else  								if ((_s38 < _s58) && (_s38 + 1 > _s60))  									_s18 = _s18 - _list[_s38];  						}  						else  						{  							if ((_s38 + 1 > _s58) && (_s40 - 1 < _s58))  							{  								_s18 = _s18 - _list[_s58];  							}  							else  								if ((_s40 > _s58) && (_s40 < _s60))  									_s18 = _s18 - _list[_s40];  						}  					}    					if (_s58 <= _s60)  					{  						if (_s58 >= _s60)  						{  							_list[_s60] = _s20;  						}  						else  						{  							for (_jj = _s58 + 1; _jj <= _s60 - 1; _jj++)  							{  								_list[_jj - 1] = _list[_jj];  							}  							_list[_s60 - 1] = _s20;  						}  					}  					else  					{  						for (_jj = _s58 - 1; _jj >= _s60; _jj--)  						{  							_list[_jj + 1] = _list[_jj];  						}  						_list[_s60] = _s20;  					}    					if (_s70 <= 127)  					{  						_s18 = 0;  						for (_jj = _s40; _jj <= _s38; _jj++)  						{  							_s18 = _s18 + _list[_jj];  						}  					}    					_f60 = _s18 / (_s38 - _s40 + 1);    					if (_fF8 + 1 > 31)  					{  						_fF8 = 31;  					}  					else  						_fF8 = _fF8 + 1;    					//----  					if (_fF8 <= 30)  					{  						if (_f28 > 0)  						{  							_f18 = _f8;  						}  						else  							_f18 = _f8 - _f28 * _f90;    						if (_f48 < 0)  						{  							_f38 = _f8;  						}  						else  							_f38 = _f8 - _f48 * _f90;    						_fB8 = _series;    						if (_fF8 != 30)  						{  							continue;  						}    						if (_fF8 == 30)  						{  							_fC0 = _series;    							_v4 = Math.Max(Math.Ceiling(_f78)' 1);    							_fE8 = (int)Math.Ceiling(_v4);    							_v2 = Math.Max(Math.Floor(_f78)' 1);    							_fE0 = (int)Math.Ceiling(_v2);    							if (_fE8 == _fE0)  							{  								_f68 = 1;  							}  							else  							{  								_v4 = _fE8 - _fE0;  								_f68 = (_f78 - _fE0) / _v4;  							}    							_v5 = _fE0 <= 29 ? Convert.ToInt32(_fE0) : 29;    							_v6 = _fE8 <= 29 ? Convert.ToInt32(_fE8) : 29;    							_fA8 = (_series - _buffer[_fF0 - _v5]) * (1 - _f68) / _fE0 + (_series - _buffer[_fF0 - _v6]) * _f68 / _fE8;  						}  					}  					else  					{  						_v1 = Math.Min(_f98' Math.Pow(_fA0 / _f60' _f88));    						if (_v1 < 1)  						{  							_v2 = 1;  						}  						else  						{  							_v3 = Math.Min(_f98' Math.Pow(_fA0 / _f60' _f88));    							_v2 = _v3;  						}    						_f58 = _v2;  						_f70 = Math.Pow(_f90' Math.Sqrt(_f58));    						if (_f28 > 0)  						{  							_f18 = _f8;  						}  						else  						{  							_f18 = _f8 - _f28 * _f70;  						}    						if (_f48 < 0)  						{  							_f38 = _f8;  						}  						else  						{  							_f38 = _f8 - _f48 * _f70;  						}  					}  				}    				if (_fF8 > 30)  				{  					_f30 = Math.Pow(_f50' _f58);  					_fC0 = (1 - _f30) * _series + _f30 * _fC0;  					_fC8 = (_series - _fC0) * (1 - _f50) + _f50 * _fC8;  					_fD0 = _f10 * _fC8 + _fC0;  					_f20 = -_f30 * 2;  					_f40 = _f30 * _f30;  					_fB0 = _f20 + _f40 + 1;  					_fA8 = (_fD0 - _fB8) * _fB0 + _f40 * _fA8;  					_fB8 = _fB8 + _fA8;  				}    				lastValue = (decimal)_fB8;  			}
Magic Number,StockSharp.Algo.Indicators,JurikMovingAverage,C:\repos\stocksharp_stocksharp\Algo\Indicators\JurikMovingAverage.cs,OnProcess,The following statement contains a magic number: if (_fF0 > 30)  			{  				if (Length < 1.0000000002)  				{  					_f80 = 0.0000000001; //{1.0e-10}  				}  				else  				{  					_f80 = (Length - 1) / 2.0;  				}    				if (_phase < -100)  				{  					_f10 = 0.5;  				}  				else  				{  					if (_phase > 100)  					{  						_f10 = 2.5;  					}  					else  					{  						_f10 = (double)_phase / 100 + 1.5;  					}  				}    				_v1 = Math.Log(Math.Sqrt(_f80));  				_v2 = _v1;    				if (_v1 / Math.Log(2.0) + 2.0 < 0.0)  				{  					_v3 = 0;  				}  				else  				{  					_v3 = _v2 / Math.Log(2.0) + 2.0;  				}    				_f98 = _v3;    				//----  				if (0.5 <= _f98 - 2.0)  				{  					_f88 = _f98 - 2.0;  				}  				else  				{  					_f88 = 0.5;  				}    				_f78 = Math.Sqrt(_f80) * _f98;  				_f90 = _f78 / (_f78 + 1.0);  				_f80 = _f80 * 0.9;  				_f50 = _f80 / (_f80 + 2.0);    				//----  				if (_f0 != 0)  				{  					_f0 = 0;  					_v5 = 0;    					for (_ii = 1; _ii <= 29; _ii++)  					{  						if (_buffer[_ii + 1] != _buffer[_ii])  						{  							_v5 = 1;  						}  					}    					_fD8 = _v5 * 30;    					_f38 = _fD8 == 0 ? _series : _buffer[1];    					_f18 = _f38;    					if (_fD8 > 29)  						_fD8 = 29;  				}  				else  					_fD8 = 0;    				//----  				for (_ii = _fD8; _ii >= 0; _ii--)  				{  					//{ another bigcycle...}  					_value2 = 31 - _ii;    					_f8 = _ii == 0 ? _series : _buffer[_value2];    					_f28 = _f8 - _f18;  					_f48 = _f8 - _f38;    					_v2 = Math.Max(Math.Abs(_f28)' Math.Abs(_f48));    					_fA0 = _v2;  					_vv = _fA0 + 0.0000000001; //{1.0e-10;}    					//----  					if (_s48 <= 1)  					{  						_s48 = 127;  					}  					else  					{  						_s48 = _s48 - 1;  					}    					if (_s50 <= 1)  					{  						_s50 = 10;  					}  					else  					{  						_s50 = _s50 - 1;  					}    					if (_s70 < 128)  						_s70 = _s70 + 1;    					_s8 = _s8 + _vv - _ring2[_s50];  					_ring2[_s50] = _vv;    					if (_s70 > 10)  					{  						_s20 = _s8 / 10;  					}  					else  						_s20 = _s8 / _s70;    					//----  					if (_s70 > 127)  					{  						_s10 = _ring1[_s48];  						_ring1[_s48] = _s20;  						_s68 = 64;  						_s58 = Convert.ToInt32(_s68);    						while (_s68 > 1)  						{  							if (_list[_s58] < _s10)  							{  								_s68 = _s68 * 0.5;  								_s58 = _s58 + Convert.ToInt32(_s68);  							}  							else  								if (_list[_s58] <= _s10)  								{  									_s68 = 1;  								}  								else  								{  									_s68 = _s68 * 0.5;  									_s58 = _s58 - Convert.ToInt32(_s68);  								}  						}  					}  					else  					{  						_ring1[_s48] = _s20;    						if (_s28 + _s30 > 127)  						{  							_s30 = _s30 - 1;  							_s58 = Convert.ToInt32(_s30);  						}  						else  						{  							_s28 = _s28 + 1;  							_s58 = Convert.ToInt32(_s28);  						}    						_s38 = _s28 > 96 ? 96 : Convert.ToInt32(_s28);  						_s40 = _s30 < 32 ? 32 : Convert.ToInt32(_s30);  					}    					//----  					_s68 = 64;  					_s60 = Convert.ToInt32(_s68);    					while (_s68 > 1)  					{  						if (_list[_s60] >= _s20)  						{  							if (_list[_s60 - 1] <= _s20)  							{  								_s68 = 1;  							}  							else  							{  								_s68 = _s68 * 0.5;  								_s60 = _s60 - Convert.ToInt32(_s68);  							}  						}  						else  						{  							_s68 = _s68 * 0.5;  							_s60 = _s60 + Convert.ToInt32(_s68);  						}    						if ((_s60 == 127) && (_s20 > _list[127]))  							_s60 = 128;  					}    					if (_s70 > 127)  					{  						if (_s58 >= _s60)  						{  							if ((_s38 + 1 > _s60) && (_s40 - 1 < _s60))  							{  								_s18 = _s18 + _s20;  							}  							else  								if ((_s40 > _s60) && (_s40 - 1 < _s58))  									_s18 = _s18 + _list[_s40 - 1];  						}  						else  							if (_s40 >= _s60)  							{  								if ((_s38 + 1 < _s60) && (_s38 + 1 > _s58))  									_s18 = _s18 + _list[_s38 + 1];  							}  							else  								if (_s38 + 2 > _s60)  								{  									_s18 = _s18 + _s20;  								}  								else  									if ((_s38 + 1 < _s60) && (_s38 + 1 > _s58))  										_s18 = _s18 + _list[_s38 + 1];    						if (_s58 > _s60)  						{  							if ((_s40 - 1 < _s58) && (_s38 + 1 > _s58))  							{  								_s18 = _s18 - _list[_s58];  							}  							else  								if ((_s38 < _s58) && (_s38 + 1 > _s60))  									_s18 = _s18 - _list[_s38];  						}  						else  						{  							if ((_s38 + 1 > _s58) && (_s40 - 1 < _s58))  							{  								_s18 = _s18 - _list[_s58];  							}  							else  								if ((_s40 > _s58) && (_s40 < _s60))  									_s18 = _s18 - _list[_s40];  						}  					}    					if (_s58 <= _s60)  					{  						if (_s58 >= _s60)  						{  							_list[_s60] = _s20;  						}  						else  						{  							for (_jj = _s58 + 1; _jj <= _s60 - 1; _jj++)  							{  								_list[_jj - 1] = _list[_jj];  							}  							_list[_s60 - 1] = _s20;  						}  					}  					else  					{  						for (_jj = _s58 - 1; _jj >= _s60; _jj--)  						{  							_list[_jj + 1] = _list[_jj];  						}  						_list[_s60] = _s20;  					}    					if (_s70 <= 127)  					{  						_s18 = 0;  						for (_jj = _s40; _jj <= _s38; _jj++)  						{  							_s18 = _s18 + _list[_jj];  						}  					}    					_f60 = _s18 / (_s38 - _s40 + 1);    					if (_fF8 + 1 > 31)  					{  						_fF8 = 31;  					}  					else  						_fF8 = _fF8 + 1;    					//----  					if (_fF8 <= 30)  					{  						if (_f28 > 0)  						{  							_f18 = _f8;  						}  						else  							_f18 = _f8 - _f28 * _f90;    						if (_f48 < 0)  						{  							_f38 = _f8;  						}  						else  							_f38 = _f8 - _f48 * _f90;    						_fB8 = _series;    						if (_fF8 != 30)  						{  							continue;  						}    						if (_fF8 == 30)  						{  							_fC0 = _series;    							_v4 = Math.Max(Math.Ceiling(_f78)' 1);    							_fE8 = (int)Math.Ceiling(_v4);    							_v2 = Math.Max(Math.Floor(_f78)' 1);    							_fE0 = (int)Math.Ceiling(_v2);    							if (_fE8 == _fE0)  							{  								_f68 = 1;  							}  							else  							{  								_v4 = _fE8 - _fE0;  								_f68 = (_f78 - _fE0) / _v4;  							}    							_v5 = _fE0 <= 29 ? Convert.ToInt32(_fE0) : 29;    							_v6 = _fE8 <= 29 ? Convert.ToInt32(_fE8) : 29;    							_fA8 = (_series - _buffer[_fF0 - _v5]) * (1 - _f68) / _fE0 + (_series - _buffer[_fF0 - _v6]) * _f68 / _fE8;  						}  					}  					else  					{  						_v1 = Math.Min(_f98' Math.Pow(_fA0 / _f60' _f88));    						if (_v1 < 1)  						{  							_v2 = 1;  						}  						else  						{  							_v3 = Math.Min(_f98' Math.Pow(_fA0 / _f60' _f88));    							_v2 = _v3;  						}    						_f58 = _v2;  						_f70 = Math.Pow(_f90' Math.Sqrt(_f58));    						if (_f28 > 0)  						{  							_f18 = _f8;  						}  						else  						{  							_f18 = _f8 - _f28 * _f70;  						}    						if (_f48 < 0)  						{  							_f38 = _f8;  						}  						else  						{  							_f38 = _f8 - _f48 * _f70;  						}  					}  				}    				if (_fF8 > 30)  				{  					_f30 = Math.Pow(_f50' _f58);  					_fC0 = (1 - _f30) * _series + _f30 * _fC0;  					_fC8 = (_series - _fC0) * (1 - _f50) + _f50 * _fC8;  					_fD0 = _f10 * _fC8 + _fC0;  					_f20 = -_f30 * 2;  					_f40 = _f30 * _f30;  					_fB0 = _f20 + _f40 + 1;  					_fA8 = (_fD0 - _fB8) * _fB0 + _f40 * _fA8;  					_fB8 = _fB8 + _fA8;  				}    				lastValue = (decimal)_fB8;  			}
Magic Number,StockSharp.Algo.Indicators,JurikMovingAverage,C:\repos\stocksharp_stocksharp\Algo\Indicators\JurikMovingAverage.cs,OnProcess,The following statement contains a magic number: if (_fF0 > 30)  			{  				if (Length < 1.0000000002)  				{  					_f80 = 0.0000000001; //{1.0e-10}  				}  				else  				{  					_f80 = (Length - 1) / 2.0;  				}    				if (_phase < -100)  				{  					_f10 = 0.5;  				}  				else  				{  					if (_phase > 100)  					{  						_f10 = 2.5;  					}  					else  					{  						_f10 = (double)_phase / 100 + 1.5;  					}  				}    				_v1 = Math.Log(Math.Sqrt(_f80));  				_v2 = _v1;    				if (_v1 / Math.Log(2.0) + 2.0 < 0.0)  				{  					_v3 = 0;  				}  				else  				{  					_v3 = _v2 / Math.Log(2.0) + 2.0;  				}    				_f98 = _v3;    				//----  				if (0.5 <= _f98 - 2.0)  				{  					_f88 = _f98 - 2.0;  				}  				else  				{  					_f88 = 0.5;  				}    				_f78 = Math.Sqrt(_f80) * _f98;  				_f90 = _f78 / (_f78 + 1.0);  				_f80 = _f80 * 0.9;  				_f50 = _f80 / (_f80 + 2.0);    				//----  				if (_f0 != 0)  				{  					_f0 = 0;  					_v5 = 0;    					for (_ii = 1; _ii <= 29; _ii++)  					{  						if (_buffer[_ii + 1] != _buffer[_ii])  						{  							_v5 = 1;  						}  					}    					_fD8 = _v5 * 30;    					_f38 = _fD8 == 0 ? _series : _buffer[1];    					_f18 = _f38;    					if (_fD8 > 29)  						_fD8 = 29;  				}  				else  					_fD8 = 0;    				//----  				for (_ii = _fD8; _ii >= 0; _ii--)  				{  					//{ another bigcycle...}  					_value2 = 31 - _ii;    					_f8 = _ii == 0 ? _series : _buffer[_value2];    					_f28 = _f8 - _f18;  					_f48 = _f8 - _f38;    					_v2 = Math.Max(Math.Abs(_f28)' Math.Abs(_f48));    					_fA0 = _v2;  					_vv = _fA0 + 0.0000000001; //{1.0e-10;}    					//----  					if (_s48 <= 1)  					{  						_s48 = 127;  					}  					else  					{  						_s48 = _s48 - 1;  					}    					if (_s50 <= 1)  					{  						_s50 = 10;  					}  					else  					{  						_s50 = _s50 - 1;  					}    					if (_s70 < 128)  						_s70 = _s70 + 1;    					_s8 = _s8 + _vv - _ring2[_s50];  					_ring2[_s50] = _vv;    					if (_s70 > 10)  					{  						_s20 = _s8 / 10;  					}  					else  						_s20 = _s8 / _s70;    					//----  					if (_s70 > 127)  					{  						_s10 = _ring1[_s48];  						_ring1[_s48] = _s20;  						_s68 = 64;  						_s58 = Convert.ToInt32(_s68);    						while (_s68 > 1)  						{  							if (_list[_s58] < _s10)  							{  								_s68 = _s68 * 0.5;  								_s58 = _s58 + Convert.ToInt32(_s68);  							}  							else  								if (_list[_s58] <= _s10)  								{  									_s68 = 1;  								}  								else  								{  									_s68 = _s68 * 0.5;  									_s58 = _s58 - Convert.ToInt32(_s68);  								}  						}  					}  					else  					{  						_ring1[_s48] = _s20;    						if (_s28 + _s30 > 127)  						{  							_s30 = _s30 - 1;  							_s58 = Convert.ToInt32(_s30);  						}  						else  						{  							_s28 = _s28 + 1;  							_s58 = Convert.ToInt32(_s28);  						}    						_s38 = _s28 > 96 ? 96 : Convert.ToInt32(_s28);  						_s40 = _s30 < 32 ? 32 : Convert.ToInt32(_s30);  					}    					//----  					_s68 = 64;  					_s60 = Convert.ToInt32(_s68);    					while (_s68 > 1)  					{  						if (_list[_s60] >= _s20)  						{  							if (_list[_s60 - 1] <= _s20)  							{  								_s68 = 1;  							}  							else  							{  								_s68 = _s68 * 0.5;  								_s60 = _s60 - Convert.ToInt32(_s68);  							}  						}  						else  						{  							_s68 = _s68 * 0.5;  							_s60 = _s60 + Convert.ToInt32(_s68);  						}    						if ((_s60 == 127) && (_s20 > _list[127]))  							_s60 = 128;  					}    					if (_s70 > 127)  					{  						if (_s58 >= _s60)  						{  							if ((_s38 + 1 > _s60) && (_s40 - 1 < _s60))  							{  								_s18 = _s18 + _s20;  							}  							else  								if ((_s40 > _s60) && (_s40 - 1 < _s58))  									_s18 = _s18 + _list[_s40 - 1];  						}  						else  							if (_s40 >= _s60)  							{  								if ((_s38 + 1 < _s60) && (_s38 + 1 > _s58))  									_s18 = _s18 + _list[_s38 + 1];  							}  							else  								if (_s38 + 2 > _s60)  								{  									_s18 = _s18 + _s20;  								}  								else  									if ((_s38 + 1 < _s60) && (_s38 + 1 > _s58))  										_s18 = _s18 + _list[_s38 + 1];    						if (_s58 > _s60)  						{  							if ((_s40 - 1 < _s58) && (_s38 + 1 > _s58))  							{  								_s18 = _s18 - _list[_s58];  							}  							else  								if ((_s38 < _s58) && (_s38 + 1 > _s60))  									_s18 = _s18 - _list[_s38];  						}  						else  						{  							if ((_s38 + 1 > _s58) && (_s40 - 1 < _s58))  							{  								_s18 = _s18 - _list[_s58];  							}  							else  								if ((_s40 > _s58) && (_s40 < _s60))  									_s18 = _s18 - _list[_s40];  						}  					}    					if (_s58 <= _s60)  					{  						if (_s58 >= _s60)  						{  							_list[_s60] = _s20;  						}  						else  						{  							for (_jj = _s58 + 1; _jj <= _s60 - 1; _jj++)  							{  								_list[_jj - 1] = _list[_jj];  							}  							_list[_s60 - 1] = _s20;  						}  					}  					else  					{  						for (_jj = _s58 - 1; _jj >= _s60; _jj--)  						{  							_list[_jj + 1] = _list[_jj];  						}  						_list[_s60] = _s20;  					}    					if (_s70 <= 127)  					{  						_s18 = 0;  						for (_jj = _s40; _jj <= _s38; _jj++)  						{  							_s18 = _s18 + _list[_jj];  						}  					}    					_f60 = _s18 / (_s38 - _s40 + 1);    					if (_fF8 + 1 > 31)  					{  						_fF8 = 31;  					}  					else  						_fF8 = _fF8 + 1;    					//----  					if (_fF8 <= 30)  					{  						if (_f28 > 0)  						{  							_f18 = _f8;  						}  						else  							_f18 = _f8 - _f28 * _f90;    						if (_f48 < 0)  						{  							_f38 = _f8;  						}  						else  							_f38 = _f8 - _f48 * _f90;    						_fB8 = _series;    						if (_fF8 != 30)  						{  							continue;  						}    						if (_fF8 == 30)  						{  							_fC0 = _series;    							_v4 = Math.Max(Math.Ceiling(_f78)' 1);    							_fE8 = (int)Math.Ceiling(_v4);    							_v2 = Math.Max(Math.Floor(_f78)' 1);    							_fE0 = (int)Math.Ceiling(_v2);    							if (_fE8 == _fE0)  							{  								_f68 = 1;  							}  							else  							{  								_v4 = _fE8 - _fE0;  								_f68 = (_f78 - _fE0) / _v4;  							}    							_v5 = _fE0 <= 29 ? Convert.ToInt32(_fE0) : 29;    							_v6 = _fE8 <= 29 ? Convert.ToInt32(_fE8) : 29;    							_fA8 = (_series - _buffer[_fF0 - _v5]) * (1 - _f68) / _fE0 + (_series - _buffer[_fF0 - _v6]) * _f68 / _fE8;  						}  					}  					else  					{  						_v1 = Math.Min(_f98' Math.Pow(_fA0 / _f60' _f88));    						if (_v1 < 1)  						{  							_v2 = 1;  						}  						else  						{  							_v3 = Math.Min(_f98' Math.Pow(_fA0 / _f60' _f88));    							_v2 = _v3;  						}    						_f58 = _v2;  						_f70 = Math.Pow(_f90' Math.Sqrt(_f58));    						if (_f28 > 0)  						{  							_f18 = _f8;  						}  						else  						{  							_f18 = _f8 - _f28 * _f70;  						}    						if (_f48 < 0)  						{  							_f38 = _f8;  						}  						else  						{  							_f38 = _f8 - _f48 * _f70;  						}  					}  				}    				if (_fF8 > 30)  				{  					_f30 = Math.Pow(_f50' _f58);  					_fC0 = (1 - _f30) * _series + _f30 * _fC0;  					_fC8 = (_series - _fC0) * (1 - _f50) + _f50 * _fC8;  					_fD0 = _f10 * _fC8 + _fC0;  					_f20 = -_f30 * 2;  					_f40 = _f30 * _f30;  					_fB0 = _f20 + _f40 + 1;  					_fA8 = (_fD0 - _fB8) * _fB0 + _f40 * _fA8;  					_fB8 = _fB8 + _fA8;  				}    				lastValue = (decimal)_fB8;  			}
Magic Number,StockSharp.Algo.Indicators,JurikMovingAverage,C:\repos\stocksharp_stocksharp\Algo\Indicators\JurikMovingAverage.cs,OnProcess,The following statement contains a magic number: if (_fF0 > 30)  			{  				if (Length < 1.0000000002)  				{  					_f80 = 0.0000000001; //{1.0e-10}  				}  				else  				{  					_f80 = (Length - 1) / 2.0;  				}    				if (_phase < -100)  				{  					_f10 = 0.5;  				}  				else  				{  					if (_phase > 100)  					{  						_f10 = 2.5;  					}  					else  					{  						_f10 = (double)_phase / 100 + 1.5;  					}  				}    				_v1 = Math.Log(Math.Sqrt(_f80));  				_v2 = _v1;    				if (_v1 / Math.Log(2.0) + 2.0 < 0.0)  				{  					_v3 = 0;  				}  				else  				{  					_v3 = _v2 / Math.Log(2.0) + 2.0;  				}    				_f98 = _v3;    				//----  				if (0.5 <= _f98 - 2.0)  				{  					_f88 = _f98 - 2.0;  				}  				else  				{  					_f88 = 0.5;  				}    				_f78 = Math.Sqrt(_f80) * _f98;  				_f90 = _f78 / (_f78 + 1.0);  				_f80 = _f80 * 0.9;  				_f50 = _f80 / (_f80 + 2.0);    				//----  				if (_f0 != 0)  				{  					_f0 = 0;  					_v5 = 0;    					for (_ii = 1; _ii <= 29; _ii++)  					{  						if (_buffer[_ii + 1] != _buffer[_ii])  						{  							_v5 = 1;  						}  					}    					_fD8 = _v5 * 30;    					_f38 = _fD8 == 0 ? _series : _buffer[1];    					_f18 = _f38;    					if (_fD8 > 29)  						_fD8 = 29;  				}  				else  					_fD8 = 0;    				//----  				for (_ii = _fD8; _ii >= 0; _ii--)  				{  					//{ another bigcycle...}  					_value2 = 31 - _ii;    					_f8 = _ii == 0 ? _series : _buffer[_value2];    					_f28 = _f8 - _f18;  					_f48 = _f8 - _f38;    					_v2 = Math.Max(Math.Abs(_f28)' Math.Abs(_f48));    					_fA0 = _v2;  					_vv = _fA0 + 0.0000000001; //{1.0e-10;}    					//----  					if (_s48 <= 1)  					{  						_s48 = 127;  					}  					else  					{  						_s48 = _s48 - 1;  					}    					if (_s50 <= 1)  					{  						_s50 = 10;  					}  					else  					{  						_s50 = _s50 - 1;  					}    					if (_s70 < 128)  						_s70 = _s70 + 1;    					_s8 = _s8 + _vv - _ring2[_s50];  					_ring2[_s50] = _vv;    					if (_s70 > 10)  					{  						_s20 = _s8 / 10;  					}  					else  						_s20 = _s8 / _s70;    					//----  					if (_s70 > 127)  					{  						_s10 = _ring1[_s48];  						_ring1[_s48] = _s20;  						_s68 = 64;  						_s58 = Convert.ToInt32(_s68);    						while (_s68 > 1)  						{  							if (_list[_s58] < _s10)  							{  								_s68 = _s68 * 0.5;  								_s58 = _s58 + Convert.ToInt32(_s68);  							}  							else  								if (_list[_s58] <= _s10)  								{  									_s68 = 1;  								}  								else  								{  									_s68 = _s68 * 0.5;  									_s58 = _s58 - Convert.ToInt32(_s68);  								}  						}  					}  					else  					{  						_ring1[_s48] = _s20;    						if (_s28 + _s30 > 127)  						{  							_s30 = _s30 - 1;  							_s58 = Convert.ToInt32(_s30);  						}  						else  						{  							_s28 = _s28 + 1;  							_s58 = Convert.ToInt32(_s28);  						}    						_s38 = _s28 > 96 ? 96 : Convert.ToInt32(_s28);  						_s40 = _s30 < 32 ? 32 : Convert.ToInt32(_s30);  					}    					//----  					_s68 = 64;  					_s60 = Convert.ToInt32(_s68);    					while (_s68 > 1)  					{  						if (_list[_s60] >= _s20)  						{  							if (_list[_s60 - 1] <= _s20)  							{  								_s68 = 1;  							}  							else  							{  								_s68 = _s68 * 0.5;  								_s60 = _s60 - Convert.ToInt32(_s68);  							}  						}  						else  						{  							_s68 = _s68 * 0.5;  							_s60 = _s60 + Convert.ToInt32(_s68);  						}    						if ((_s60 == 127) && (_s20 > _list[127]))  							_s60 = 128;  					}    					if (_s70 > 127)  					{  						if (_s58 >= _s60)  						{  							if ((_s38 + 1 > _s60) && (_s40 - 1 < _s60))  							{  								_s18 = _s18 + _s20;  							}  							else  								if ((_s40 > _s60) && (_s40 - 1 < _s58))  									_s18 = _s18 + _list[_s40 - 1];  						}  						else  							if (_s40 >= _s60)  							{  								if ((_s38 + 1 < _s60) && (_s38 + 1 > _s58))  									_s18 = _s18 + _list[_s38 + 1];  							}  							else  								if (_s38 + 2 > _s60)  								{  									_s18 = _s18 + _s20;  								}  								else  									if ((_s38 + 1 < _s60) && (_s38 + 1 > _s58))  										_s18 = _s18 + _list[_s38 + 1];    						if (_s58 > _s60)  						{  							if ((_s40 - 1 < _s58) && (_s38 + 1 > _s58))  							{  								_s18 = _s18 - _list[_s58];  							}  							else  								if ((_s38 < _s58) && (_s38 + 1 > _s60))  									_s18 = _s18 - _list[_s38];  						}  						else  						{  							if ((_s38 + 1 > _s58) && (_s40 - 1 < _s58))  							{  								_s18 = _s18 - _list[_s58];  							}  							else  								if ((_s40 > _s58) && (_s40 < _s60))  									_s18 = _s18 - _list[_s40];  						}  					}    					if (_s58 <= _s60)  					{  						if (_s58 >= _s60)  						{  							_list[_s60] = _s20;  						}  						else  						{  							for (_jj = _s58 + 1; _jj <= _s60 - 1; _jj++)  							{  								_list[_jj - 1] = _list[_jj];  							}  							_list[_s60 - 1] = _s20;  						}  					}  					else  					{  						for (_jj = _s58 - 1; _jj >= _s60; _jj--)  						{  							_list[_jj + 1] = _list[_jj];  						}  						_list[_s60] = _s20;  					}    					if (_s70 <= 127)  					{  						_s18 = 0;  						for (_jj = _s40; _jj <= _s38; _jj++)  						{  							_s18 = _s18 + _list[_jj];  						}  					}    					_f60 = _s18 / (_s38 - _s40 + 1);    					if (_fF8 + 1 > 31)  					{  						_fF8 = 31;  					}  					else  						_fF8 = _fF8 + 1;    					//----  					if (_fF8 <= 30)  					{  						if (_f28 > 0)  						{  							_f18 = _f8;  						}  						else  							_f18 = _f8 - _f28 * _f90;    						if (_f48 < 0)  						{  							_f38 = _f8;  						}  						else  							_f38 = _f8 - _f48 * _f90;    						_fB8 = _series;    						if (_fF8 != 30)  						{  							continue;  						}    						if (_fF8 == 30)  						{  							_fC0 = _series;    							_v4 = Math.Max(Math.Ceiling(_f78)' 1);    							_fE8 = (int)Math.Ceiling(_v4);    							_v2 = Math.Max(Math.Floor(_f78)' 1);    							_fE0 = (int)Math.Ceiling(_v2);    							if (_fE8 == _fE0)  							{  								_f68 = 1;  							}  							else  							{  								_v4 = _fE8 - _fE0;  								_f68 = (_f78 - _fE0) / _v4;  							}    							_v5 = _fE0 <= 29 ? Convert.ToInt32(_fE0) : 29;    							_v6 = _fE8 <= 29 ? Convert.ToInt32(_fE8) : 29;    							_fA8 = (_series - _buffer[_fF0 - _v5]) * (1 - _f68) / _fE0 + (_series - _buffer[_fF0 - _v6]) * _f68 / _fE8;  						}  					}  					else  					{  						_v1 = Math.Min(_f98' Math.Pow(_fA0 / _f60' _f88));    						if (_v1 < 1)  						{  							_v2 = 1;  						}  						else  						{  							_v3 = Math.Min(_f98' Math.Pow(_fA0 / _f60' _f88));    							_v2 = _v3;  						}    						_f58 = _v2;  						_f70 = Math.Pow(_f90' Math.Sqrt(_f58));    						if (_f28 > 0)  						{  							_f18 = _f8;  						}  						else  						{  							_f18 = _f8 - _f28 * _f70;  						}    						if (_f48 < 0)  						{  							_f38 = _f8;  						}  						else  						{  							_f38 = _f8 - _f48 * _f70;  						}  					}  				}    				if (_fF8 > 30)  				{  					_f30 = Math.Pow(_f50' _f58);  					_fC0 = (1 - _f30) * _series + _f30 * _fC0;  					_fC8 = (_series - _fC0) * (1 - _f50) + _f50 * _fC8;  					_fD0 = _f10 * _fC8 + _fC0;  					_f20 = -_f30 * 2;  					_f40 = _f30 * _f30;  					_fB0 = _f20 + _f40 + 1;  					_fA8 = (_fD0 - _fB8) * _fB0 + _f40 * _fA8;  					_fB8 = _fB8 + _fA8;  				}    				lastValue = (decimal)_fB8;  			}
Magic Number,StockSharp.Algo.Indicators,JurikMovingAverage,C:\repos\stocksharp_stocksharp\Algo\Indicators\JurikMovingAverage.cs,OnProcess,The following statement contains a magic number: if (_fF0 > 30)  			{  				if (Length < 1.0000000002)  				{  					_f80 = 0.0000000001; //{1.0e-10}  				}  				else  				{  					_f80 = (Length - 1) / 2.0;  				}    				if (_phase < -100)  				{  					_f10 = 0.5;  				}  				else  				{  					if (_phase > 100)  					{  						_f10 = 2.5;  					}  					else  					{  						_f10 = (double)_phase / 100 + 1.5;  					}  				}    				_v1 = Math.Log(Math.Sqrt(_f80));  				_v2 = _v1;    				if (_v1 / Math.Log(2.0) + 2.0 < 0.0)  				{  					_v3 = 0;  				}  				else  				{  					_v3 = _v2 / Math.Log(2.0) + 2.0;  				}    				_f98 = _v3;    				//----  				if (0.5 <= _f98 - 2.0)  				{  					_f88 = _f98 - 2.0;  				}  				else  				{  					_f88 = 0.5;  				}    				_f78 = Math.Sqrt(_f80) * _f98;  				_f90 = _f78 / (_f78 + 1.0);  				_f80 = _f80 * 0.9;  				_f50 = _f80 / (_f80 + 2.0);    				//----  				if (_f0 != 0)  				{  					_f0 = 0;  					_v5 = 0;    					for (_ii = 1; _ii <= 29; _ii++)  					{  						if (_buffer[_ii + 1] != _buffer[_ii])  						{  							_v5 = 1;  						}  					}    					_fD8 = _v5 * 30;    					_f38 = _fD8 == 0 ? _series : _buffer[1];    					_f18 = _f38;    					if (_fD8 > 29)  						_fD8 = 29;  				}  				else  					_fD8 = 0;    				//----  				for (_ii = _fD8; _ii >= 0; _ii--)  				{  					//{ another bigcycle...}  					_value2 = 31 - _ii;    					_f8 = _ii == 0 ? _series : _buffer[_value2];    					_f28 = _f8 - _f18;  					_f48 = _f8 - _f38;    					_v2 = Math.Max(Math.Abs(_f28)' Math.Abs(_f48));    					_fA0 = _v2;  					_vv = _fA0 + 0.0000000001; //{1.0e-10;}    					//----  					if (_s48 <= 1)  					{  						_s48 = 127;  					}  					else  					{  						_s48 = _s48 - 1;  					}    					if (_s50 <= 1)  					{  						_s50 = 10;  					}  					else  					{  						_s50 = _s50 - 1;  					}    					if (_s70 < 128)  						_s70 = _s70 + 1;    					_s8 = _s8 + _vv - _ring2[_s50];  					_ring2[_s50] = _vv;    					if (_s70 > 10)  					{  						_s20 = _s8 / 10;  					}  					else  						_s20 = _s8 / _s70;    					//----  					if (_s70 > 127)  					{  						_s10 = _ring1[_s48];  						_ring1[_s48] = _s20;  						_s68 = 64;  						_s58 = Convert.ToInt32(_s68);    						while (_s68 > 1)  						{  							if (_list[_s58] < _s10)  							{  								_s68 = _s68 * 0.5;  								_s58 = _s58 + Convert.ToInt32(_s68);  							}  							else  								if (_list[_s58] <= _s10)  								{  									_s68 = 1;  								}  								else  								{  									_s68 = _s68 * 0.5;  									_s58 = _s58 - Convert.ToInt32(_s68);  								}  						}  					}  					else  					{  						_ring1[_s48] = _s20;    						if (_s28 + _s30 > 127)  						{  							_s30 = _s30 - 1;  							_s58 = Convert.ToInt32(_s30);  						}  						else  						{  							_s28 = _s28 + 1;  							_s58 = Convert.ToInt32(_s28);  						}    						_s38 = _s28 > 96 ? 96 : Convert.ToInt32(_s28);  						_s40 = _s30 < 32 ? 32 : Convert.ToInt32(_s30);  					}    					//----  					_s68 = 64;  					_s60 = Convert.ToInt32(_s68);    					while (_s68 > 1)  					{  						if (_list[_s60] >= _s20)  						{  							if (_list[_s60 - 1] <= _s20)  							{  								_s68 = 1;  							}  							else  							{  								_s68 = _s68 * 0.5;  								_s60 = _s60 - Convert.ToInt32(_s68);  							}  						}  						else  						{  							_s68 = _s68 * 0.5;  							_s60 = _s60 + Convert.ToInt32(_s68);  						}    						if ((_s60 == 127) && (_s20 > _list[127]))  							_s60 = 128;  					}    					if (_s70 > 127)  					{  						if (_s58 >= _s60)  						{  							if ((_s38 + 1 > _s60) && (_s40 - 1 < _s60))  							{  								_s18 = _s18 + _s20;  							}  							else  								if ((_s40 > _s60) && (_s40 - 1 < _s58))  									_s18 = _s18 + _list[_s40 - 1];  						}  						else  							if (_s40 >= _s60)  							{  								if ((_s38 + 1 < _s60) && (_s38 + 1 > _s58))  									_s18 = _s18 + _list[_s38 + 1];  							}  							else  								if (_s38 + 2 > _s60)  								{  									_s18 = _s18 + _s20;  								}  								else  									if ((_s38 + 1 < _s60) && (_s38 + 1 > _s58))  										_s18 = _s18 + _list[_s38 + 1];    						if (_s58 > _s60)  						{  							if ((_s40 - 1 < _s58) && (_s38 + 1 > _s58))  							{  								_s18 = _s18 - _list[_s58];  							}  							else  								if ((_s38 < _s58) && (_s38 + 1 > _s60))  									_s18 = _s18 - _list[_s38];  						}  						else  						{  							if ((_s38 + 1 > _s58) && (_s40 - 1 < _s58))  							{  								_s18 = _s18 - _list[_s58];  							}  							else  								if ((_s40 > _s58) && (_s40 < _s60))  									_s18 = _s18 - _list[_s40];  						}  					}    					if (_s58 <= _s60)  					{  						if (_s58 >= _s60)  						{  							_list[_s60] = _s20;  						}  						else  						{  							for (_jj = _s58 + 1; _jj <= _s60 - 1; _jj++)  							{  								_list[_jj - 1] = _list[_jj];  							}  							_list[_s60 - 1] = _s20;  						}  					}  					else  					{  						for (_jj = _s58 - 1; _jj >= _s60; _jj--)  						{  							_list[_jj + 1] = _list[_jj];  						}  						_list[_s60] = _s20;  					}    					if (_s70 <= 127)  					{  						_s18 = 0;  						for (_jj = _s40; _jj <= _s38; _jj++)  						{  							_s18 = _s18 + _list[_jj];  						}  					}    					_f60 = _s18 / (_s38 - _s40 + 1);    					if (_fF8 + 1 > 31)  					{  						_fF8 = 31;  					}  					else  						_fF8 = _fF8 + 1;    					//----  					if (_fF8 <= 30)  					{  						if (_f28 > 0)  						{  							_f18 = _f8;  						}  						else  							_f18 = _f8 - _f28 * _f90;    						if (_f48 < 0)  						{  							_f38 = _f8;  						}  						else  							_f38 = _f8 - _f48 * _f90;    						_fB8 = _series;    						if (_fF8 != 30)  						{  							continue;  						}    						if (_fF8 == 30)  						{  							_fC0 = _series;    							_v4 = Math.Max(Math.Ceiling(_f78)' 1);    							_fE8 = (int)Math.Ceiling(_v4);    							_v2 = Math.Max(Math.Floor(_f78)' 1);    							_fE0 = (int)Math.Ceiling(_v2);    							if (_fE8 == _fE0)  							{  								_f68 = 1;  							}  							else  							{  								_v4 = _fE8 - _fE0;  								_f68 = (_f78 - _fE0) / _v4;  							}    							_v5 = _fE0 <= 29 ? Convert.ToInt32(_fE0) : 29;    							_v6 = _fE8 <= 29 ? Convert.ToInt32(_fE8) : 29;    							_fA8 = (_series - _buffer[_fF0 - _v5]) * (1 - _f68) / _fE0 + (_series - _buffer[_fF0 - _v6]) * _f68 / _fE8;  						}  					}  					else  					{  						_v1 = Math.Min(_f98' Math.Pow(_fA0 / _f60' _f88));    						if (_v1 < 1)  						{  							_v2 = 1;  						}  						else  						{  							_v3 = Math.Min(_f98' Math.Pow(_fA0 / _f60' _f88));    							_v2 = _v3;  						}    						_f58 = _v2;  						_f70 = Math.Pow(_f90' Math.Sqrt(_f58));    						if (_f28 > 0)  						{  							_f18 = _f8;  						}  						else  						{  							_f18 = _f8 - _f28 * _f70;  						}    						if (_f48 < 0)  						{  							_f38 = _f8;  						}  						else  						{  							_f38 = _f8 - _f48 * _f70;  						}  					}  				}    				if (_fF8 > 30)  				{  					_f30 = Math.Pow(_f50' _f58);  					_fC0 = (1 - _f30) * _series + _f30 * _fC0;  					_fC8 = (_series - _fC0) * (1 - _f50) + _f50 * _fC8;  					_fD0 = _f10 * _fC8 + _fC0;  					_f20 = -_f30 * 2;  					_f40 = _f30 * _f30;  					_fB0 = _f20 + _f40 + 1;  					_fA8 = (_fD0 - _fB8) * _fB0 + _f40 * _fA8;  					_fB8 = _fB8 + _fA8;  				}    				lastValue = (decimal)_fB8;  			}
Magic Number,StockSharp.Algo.Indicators,JurikMovingAverage,C:\repos\stocksharp_stocksharp\Algo\Indicators\JurikMovingAverage.cs,OnProcess,The following statement contains a magic number: if (_fF0 > 30)  			{  				if (Length < 1.0000000002)  				{  					_f80 = 0.0000000001; //{1.0e-10}  				}  				else  				{  					_f80 = (Length - 1) / 2.0;  				}    				if (_phase < -100)  				{  					_f10 = 0.5;  				}  				else  				{  					if (_phase > 100)  					{  						_f10 = 2.5;  					}  					else  					{  						_f10 = (double)_phase / 100 + 1.5;  					}  				}    				_v1 = Math.Log(Math.Sqrt(_f80));  				_v2 = _v1;    				if (_v1 / Math.Log(2.0) + 2.0 < 0.0)  				{  					_v3 = 0;  				}  				else  				{  					_v3 = _v2 / Math.Log(2.0) + 2.0;  				}    				_f98 = _v3;    				//----  				if (0.5 <= _f98 - 2.0)  				{  					_f88 = _f98 - 2.0;  				}  				else  				{  					_f88 = 0.5;  				}    				_f78 = Math.Sqrt(_f80) * _f98;  				_f90 = _f78 / (_f78 + 1.0);  				_f80 = _f80 * 0.9;  				_f50 = _f80 / (_f80 + 2.0);    				//----  				if (_f0 != 0)  				{  					_f0 = 0;  					_v5 = 0;    					for (_ii = 1; _ii <= 29; _ii++)  					{  						if (_buffer[_ii + 1] != _buffer[_ii])  						{  							_v5 = 1;  						}  					}    					_fD8 = _v5 * 30;    					_f38 = _fD8 == 0 ? _series : _buffer[1];    					_f18 = _f38;    					if (_fD8 > 29)  						_fD8 = 29;  				}  				else  					_fD8 = 0;    				//----  				for (_ii = _fD8; _ii >= 0; _ii--)  				{  					//{ another bigcycle...}  					_value2 = 31 - _ii;    					_f8 = _ii == 0 ? _series : _buffer[_value2];    					_f28 = _f8 - _f18;  					_f48 = _f8 - _f38;    					_v2 = Math.Max(Math.Abs(_f28)' Math.Abs(_f48));    					_fA0 = _v2;  					_vv = _fA0 + 0.0000000001; //{1.0e-10;}    					//----  					if (_s48 <= 1)  					{  						_s48 = 127;  					}  					else  					{  						_s48 = _s48 - 1;  					}    					if (_s50 <= 1)  					{  						_s50 = 10;  					}  					else  					{  						_s50 = _s50 - 1;  					}    					if (_s70 < 128)  						_s70 = _s70 + 1;    					_s8 = _s8 + _vv - _ring2[_s50];  					_ring2[_s50] = _vv;    					if (_s70 > 10)  					{  						_s20 = _s8 / 10;  					}  					else  						_s20 = _s8 / _s70;    					//----  					if (_s70 > 127)  					{  						_s10 = _ring1[_s48];  						_ring1[_s48] = _s20;  						_s68 = 64;  						_s58 = Convert.ToInt32(_s68);    						while (_s68 > 1)  						{  							if (_list[_s58] < _s10)  							{  								_s68 = _s68 * 0.5;  								_s58 = _s58 + Convert.ToInt32(_s68);  							}  							else  								if (_list[_s58] <= _s10)  								{  									_s68 = 1;  								}  								else  								{  									_s68 = _s68 * 0.5;  									_s58 = _s58 - Convert.ToInt32(_s68);  								}  						}  					}  					else  					{  						_ring1[_s48] = _s20;    						if (_s28 + _s30 > 127)  						{  							_s30 = _s30 - 1;  							_s58 = Convert.ToInt32(_s30);  						}  						else  						{  							_s28 = _s28 + 1;  							_s58 = Convert.ToInt32(_s28);  						}    						_s38 = _s28 > 96 ? 96 : Convert.ToInt32(_s28);  						_s40 = _s30 < 32 ? 32 : Convert.ToInt32(_s30);  					}    					//----  					_s68 = 64;  					_s60 = Convert.ToInt32(_s68);    					while (_s68 > 1)  					{  						if (_list[_s60] >= _s20)  						{  							if (_list[_s60 - 1] <= _s20)  							{  								_s68 = 1;  							}  							else  							{  								_s68 = _s68 * 0.5;  								_s60 = _s60 - Convert.ToInt32(_s68);  							}  						}  						else  						{  							_s68 = _s68 * 0.5;  							_s60 = _s60 + Convert.ToInt32(_s68);  						}    						if ((_s60 == 127) && (_s20 > _list[127]))  							_s60 = 128;  					}    					if (_s70 > 127)  					{  						if (_s58 >= _s60)  						{  							if ((_s38 + 1 > _s60) && (_s40 - 1 < _s60))  							{  								_s18 = _s18 + _s20;  							}  							else  								if ((_s40 > _s60) && (_s40 - 1 < _s58))  									_s18 = _s18 + _list[_s40 - 1];  						}  						else  							if (_s40 >= _s60)  							{  								if ((_s38 + 1 < _s60) && (_s38 + 1 > _s58))  									_s18 = _s18 + _list[_s38 + 1];  							}  							else  								if (_s38 + 2 > _s60)  								{  									_s18 = _s18 + _s20;  								}  								else  									if ((_s38 + 1 < _s60) && (_s38 + 1 > _s58))  										_s18 = _s18 + _list[_s38 + 1];    						if (_s58 > _s60)  						{  							if ((_s40 - 1 < _s58) && (_s38 + 1 > _s58))  							{  								_s18 = _s18 - _list[_s58];  							}  							else  								if ((_s38 < _s58) && (_s38 + 1 > _s60))  									_s18 = _s18 - _list[_s38];  						}  						else  						{  							if ((_s38 + 1 > _s58) && (_s40 - 1 < _s58))  							{  								_s18 = _s18 - _list[_s58];  							}  							else  								if ((_s40 > _s58) && (_s40 < _s60))  									_s18 = _s18 - _list[_s40];  						}  					}    					if (_s58 <= _s60)  					{  						if (_s58 >= _s60)  						{  							_list[_s60] = _s20;  						}  						else  						{  							for (_jj = _s58 + 1; _jj <= _s60 - 1; _jj++)  							{  								_list[_jj - 1] = _list[_jj];  							}  							_list[_s60 - 1] = _s20;  						}  					}  					else  					{  						for (_jj = _s58 - 1; _jj >= _s60; _jj--)  						{  							_list[_jj + 1] = _list[_jj];  						}  						_list[_s60] = _s20;  					}    					if (_s70 <= 127)  					{  						_s18 = 0;  						for (_jj = _s40; _jj <= _s38; _jj++)  						{  							_s18 = _s18 + _list[_jj];  						}  					}    					_f60 = _s18 / (_s38 - _s40 + 1);    					if (_fF8 + 1 > 31)  					{  						_fF8 = 31;  					}  					else  						_fF8 = _fF8 + 1;    					//----  					if (_fF8 <= 30)  					{  						if (_f28 > 0)  						{  							_f18 = _f8;  						}  						else  							_f18 = _f8 - _f28 * _f90;    						if (_f48 < 0)  						{  							_f38 = _f8;  						}  						else  							_f38 = _f8 - _f48 * _f90;    						_fB8 = _series;    						if (_fF8 != 30)  						{  							continue;  						}    						if (_fF8 == 30)  						{  							_fC0 = _series;    							_v4 = Math.Max(Math.Ceiling(_f78)' 1);    							_fE8 = (int)Math.Ceiling(_v4);    							_v2 = Math.Max(Math.Floor(_f78)' 1);    							_fE0 = (int)Math.Ceiling(_v2);    							if (_fE8 == _fE0)  							{  								_f68 = 1;  							}  							else  							{  								_v4 = _fE8 - _fE0;  								_f68 = (_f78 - _fE0) / _v4;  							}    							_v5 = _fE0 <= 29 ? Convert.ToInt32(_fE0) : 29;    							_v6 = _fE8 <= 29 ? Convert.ToInt32(_fE8) : 29;    							_fA8 = (_series - _buffer[_fF0 - _v5]) * (1 - _f68) / _fE0 + (_series - _buffer[_fF0 - _v6]) * _f68 / _fE8;  						}  					}  					else  					{  						_v1 = Math.Min(_f98' Math.Pow(_fA0 / _f60' _f88));    						if (_v1 < 1)  						{  							_v2 = 1;  						}  						else  						{  							_v3 = Math.Min(_f98' Math.Pow(_fA0 / _f60' _f88));    							_v2 = _v3;  						}    						_f58 = _v2;  						_f70 = Math.Pow(_f90' Math.Sqrt(_f58));    						if (_f28 > 0)  						{  							_f18 = _f8;  						}  						else  						{  							_f18 = _f8 - _f28 * _f70;  						}    						if (_f48 < 0)  						{  							_f38 = _f8;  						}  						else  						{  							_f38 = _f8 - _f48 * _f70;  						}  					}  				}    				if (_fF8 > 30)  				{  					_f30 = Math.Pow(_f50' _f58);  					_fC0 = (1 - _f30) * _series + _f30 * _fC0;  					_fC8 = (_series - _fC0) * (1 - _f50) + _f50 * _fC8;  					_fD0 = _f10 * _fC8 + _fC0;  					_f20 = -_f30 * 2;  					_f40 = _f30 * _f30;  					_fB0 = _f20 + _f40 + 1;  					_fA8 = (_fD0 - _fB8) * _fB0 + _f40 * _fA8;  					_fB8 = _fB8 + _fA8;  				}    				lastValue = (decimal)_fB8;  			}
Magic Number,StockSharp.Algo.Indicators,JurikMovingAverage,C:\repos\stocksharp_stocksharp\Algo\Indicators\JurikMovingAverage.cs,OnProcess,The following statement contains a magic number: if (_fF0 > 30)  			{  				if (Length < 1.0000000002)  				{  					_f80 = 0.0000000001; //{1.0e-10}  				}  				else  				{  					_f80 = (Length - 1) / 2.0;  				}    				if (_phase < -100)  				{  					_f10 = 0.5;  				}  				else  				{  					if (_phase > 100)  					{  						_f10 = 2.5;  					}  					else  					{  						_f10 = (double)_phase / 100 + 1.5;  					}  				}    				_v1 = Math.Log(Math.Sqrt(_f80));  				_v2 = _v1;    				if (_v1 / Math.Log(2.0) + 2.0 < 0.0)  				{  					_v3 = 0;  				}  				else  				{  					_v3 = _v2 / Math.Log(2.0) + 2.0;  				}    				_f98 = _v3;    				//----  				if (0.5 <= _f98 - 2.0)  				{  					_f88 = _f98 - 2.0;  				}  				else  				{  					_f88 = 0.5;  				}    				_f78 = Math.Sqrt(_f80) * _f98;  				_f90 = _f78 / (_f78 + 1.0);  				_f80 = _f80 * 0.9;  				_f50 = _f80 / (_f80 + 2.0);    				//----  				if (_f0 != 0)  				{  					_f0 = 0;  					_v5 = 0;    					for (_ii = 1; _ii <= 29; _ii++)  					{  						if (_buffer[_ii + 1] != _buffer[_ii])  						{  							_v5 = 1;  						}  					}    					_fD8 = _v5 * 30;    					_f38 = _fD8 == 0 ? _series : _buffer[1];    					_f18 = _f38;    					if (_fD8 > 29)  						_fD8 = 29;  				}  				else  					_fD8 = 0;    				//----  				for (_ii = _fD8; _ii >= 0; _ii--)  				{  					//{ another bigcycle...}  					_value2 = 31 - _ii;    					_f8 = _ii == 0 ? _series : _buffer[_value2];    					_f28 = _f8 - _f18;  					_f48 = _f8 - _f38;    					_v2 = Math.Max(Math.Abs(_f28)' Math.Abs(_f48));    					_fA0 = _v2;  					_vv = _fA0 + 0.0000000001; //{1.0e-10;}    					//----  					if (_s48 <= 1)  					{  						_s48 = 127;  					}  					else  					{  						_s48 = _s48 - 1;  					}    					if (_s50 <= 1)  					{  						_s50 = 10;  					}  					else  					{  						_s50 = _s50 - 1;  					}    					if (_s70 < 128)  						_s70 = _s70 + 1;    					_s8 = _s8 + _vv - _ring2[_s50];  					_ring2[_s50] = _vv;    					if (_s70 > 10)  					{  						_s20 = _s8 / 10;  					}  					else  						_s20 = _s8 / _s70;    					//----  					if (_s70 > 127)  					{  						_s10 = _ring1[_s48];  						_ring1[_s48] = _s20;  						_s68 = 64;  						_s58 = Convert.ToInt32(_s68);    						while (_s68 > 1)  						{  							if (_list[_s58] < _s10)  							{  								_s68 = _s68 * 0.5;  								_s58 = _s58 + Convert.ToInt32(_s68);  							}  							else  								if (_list[_s58] <= _s10)  								{  									_s68 = 1;  								}  								else  								{  									_s68 = _s68 * 0.5;  									_s58 = _s58 - Convert.ToInt32(_s68);  								}  						}  					}  					else  					{  						_ring1[_s48] = _s20;    						if (_s28 + _s30 > 127)  						{  							_s30 = _s30 - 1;  							_s58 = Convert.ToInt32(_s30);  						}  						else  						{  							_s28 = _s28 + 1;  							_s58 = Convert.ToInt32(_s28);  						}    						_s38 = _s28 > 96 ? 96 : Convert.ToInt32(_s28);  						_s40 = _s30 < 32 ? 32 : Convert.ToInt32(_s30);  					}    					//----  					_s68 = 64;  					_s60 = Convert.ToInt32(_s68);    					while (_s68 > 1)  					{  						if (_list[_s60] >= _s20)  						{  							if (_list[_s60 - 1] <= _s20)  							{  								_s68 = 1;  							}  							else  							{  								_s68 = _s68 * 0.5;  								_s60 = _s60 - Convert.ToInt32(_s68);  							}  						}  						else  						{  							_s68 = _s68 * 0.5;  							_s60 = _s60 + Convert.ToInt32(_s68);  						}    						if ((_s60 == 127) && (_s20 > _list[127]))  							_s60 = 128;  					}    					if (_s70 > 127)  					{  						if (_s58 >= _s60)  						{  							if ((_s38 + 1 > _s60) && (_s40 - 1 < _s60))  							{  								_s18 = _s18 + _s20;  							}  							else  								if ((_s40 > _s60) && (_s40 - 1 < _s58))  									_s18 = _s18 + _list[_s40 - 1];  						}  						else  							if (_s40 >= _s60)  							{  								if ((_s38 + 1 < _s60) && (_s38 + 1 > _s58))  									_s18 = _s18 + _list[_s38 + 1];  							}  							else  								if (_s38 + 2 > _s60)  								{  									_s18 = _s18 + _s20;  								}  								else  									if ((_s38 + 1 < _s60) && (_s38 + 1 > _s58))  										_s18 = _s18 + _list[_s38 + 1];    						if (_s58 > _s60)  						{  							if ((_s40 - 1 < _s58) && (_s38 + 1 > _s58))  							{  								_s18 = _s18 - _list[_s58];  							}  							else  								if ((_s38 < _s58) && (_s38 + 1 > _s60))  									_s18 = _s18 - _list[_s38];  						}  						else  						{  							if ((_s38 + 1 > _s58) && (_s40 - 1 < _s58))  							{  								_s18 = _s18 - _list[_s58];  							}  							else  								if ((_s40 > _s58) && (_s40 < _s60))  									_s18 = _s18 - _list[_s40];  						}  					}    					if (_s58 <= _s60)  					{  						if (_s58 >= _s60)  						{  							_list[_s60] = _s20;  						}  						else  						{  							for (_jj = _s58 + 1; _jj <= _s60 - 1; _jj++)  							{  								_list[_jj - 1] = _list[_jj];  							}  							_list[_s60 - 1] = _s20;  						}  					}  					else  					{  						for (_jj = _s58 - 1; _jj >= _s60; _jj--)  						{  							_list[_jj + 1] = _list[_jj];  						}  						_list[_s60] = _s20;  					}    					if (_s70 <= 127)  					{  						_s18 = 0;  						for (_jj = _s40; _jj <= _s38; _jj++)  						{  							_s18 = _s18 + _list[_jj];  						}  					}    					_f60 = _s18 / (_s38 - _s40 + 1);    					if (_fF8 + 1 > 31)  					{  						_fF8 = 31;  					}  					else  						_fF8 = _fF8 + 1;    					//----  					if (_fF8 <= 30)  					{  						if (_f28 > 0)  						{  							_f18 = _f8;  						}  						else  							_f18 = _f8 - _f28 * _f90;    						if (_f48 < 0)  						{  							_f38 = _f8;  						}  						else  							_f38 = _f8 - _f48 * _f90;    						_fB8 = _series;    						if (_fF8 != 30)  						{  							continue;  						}    						if (_fF8 == 30)  						{  							_fC0 = _series;    							_v4 = Math.Max(Math.Ceiling(_f78)' 1);    							_fE8 = (int)Math.Ceiling(_v4);    							_v2 = Math.Max(Math.Floor(_f78)' 1);    							_fE0 = (int)Math.Ceiling(_v2);    							if (_fE8 == _fE0)  							{  								_f68 = 1;  							}  							else  							{  								_v4 = _fE8 - _fE0;  								_f68 = (_f78 - _fE0) / _v4;  							}    							_v5 = _fE0 <= 29 ? Convert.ToInt32(_fE0) : 29;    							_v6 = _fE8 <= 29 ? Convert.ToInt32(_fE8) : 29;    							_fA8 = (_series - _buffer[_fF0 - _v5]) * (1 - _f68) / _fE0 + (_series - _buffer[_fF0 - _v6]) * _f68 / _fE8;  						}  					}  					else  					{  						_v1 = Math.Min(_f98' Math.Pow(_fA0 / _f60' _f88));    						if (_v1 < 1)  						{  							_v2 = 1;  						}  						else  						{  							_v3 = Math.Min(_f98' Math.Pow(_fA0 / _f60' _f88));    							_v2 = _v3;  						}    						_f58 = _v2;  						_f70 = Math.Pow(_f90' Math.Sqrt(_f58));    						if (_f28 > 0)  						{  							_f18 = _f8;  						}  						else  						{  							_f18 = _f8 - _f28 * _f70;  						}    						if (_f48 < 0)  						{  							_f38 = _f8;  						}  						else  						{  							_f38 = _f8 - _f48 * _f70;  						}  					}  				}    				if (_fF8 > 30)  				{  					_f30 = Math.Pow(_f50' _f58);  					_fC0 = (1 - _f30) * _series + _f30 * _fC0;  					_fC8 = (_series - _fC0) * (1 - _f50) + _f50 * _fC8;  					_fD0 = _f10 * _fC8 + _fC0;  					_f20 = -_f30 * 2;  					_f40 = _f30 * _f30;  					_fB0 = _f20 + _f40 + 1;  					_fA8 = (_fD0 - _fB8) * _fB0 + _f40 * _fA8;  					_fB8 = _fB8 + _fA8;  				}    				lastValue = (decimal)_fB8;  			}
Magic Number,StockSharp.Algo.Indicators,JurikMovingAverage,C:\repos\stocksharp_stocksharp\Algo\Indicators\JurikMovingAverage.cs,OnProcess,The following statement contains a magic number: if (_fF0 > 30)  			{  				if (Length < 1.0000000002)  				{  					_f80 = 0.0000000001; //{1.0e-10}  				}  				else  				{  					_f80 = (Length - 1) / 2.0;  				}    				if (_phase < -100)  				{  					_f10 = 0.5;  				}  				else  				{  					if (_phase > 100)  					{  						_f10 = 2.5;  					}  					else  					{  						_f10 = (double)_phase / 100 + 1.5;  					}  				}    				_v1 = Math.Log(Math.Sqrt(_f80));  				_v2 = _v1;    				if (_v1 / Math.Log(2.0) + 2.0 < 0.0)  				{  					_v3 = 0;  				}  				else  				{  					_v3 = _v2 / Math.Log(2.0) + 2.0;  				}    				_f98 = _v3;    				//----  				if (0.5 <= _f98 - 2.0)  				{  					_f88 = _f98 - 2.0;  				}  				else  				{  					_f88 = 0.5;  				}    				_f78 = Math.Sqrt(_f80) * _f98;  				_f90 = _f78 / (_f78 + 1.0);  				_f80 = _f80 * 0.9;  				_f50 = _f80 / (_f80 + 2.0);    				//----  				if (_f0 != 0)  				{  					_f0 = 0;  					_v5 = 0;    					for (_ii = 1; _ii <= 29; _ii++)  					{  						if (_buffer[_ii + 1] != _buffer[_ii])  						{  							_v5 = 1;  						}  					}    					_fD8 = _v5 * 30;    					_f38 = _fD8 == 0 ? _series : _buffer[1];    					_f18 = _f38;    					if (_fD8 > 29)  						_fD8 = 29;  				}  				else  					_fD8 = 0;    				//----  				for (_ii = _fD8; _ii >= 0; _ii--)  				{  					//{ another bigcycle...}  					_value2 = 31 - _ii;    					_f8 = _ii == 0 ? _series : _buffer[_value2];    					_f28 = _f8 - _f18;  					_f48 = _f8 - _f38;    					_v2 = Math.Max(Math.Abs(_f28)' Math.Abs(_f48));    					_fA0 = _v2;  					_vv = _fA0 + 0.0000000001; //{1.0e-10;}    					//----  					if (_s48 <= 1)  					{  						_s48 = 127;  					}  					else  					{  						_s48 = _s48 - 1;  					}    					if (_s50 <= 1)  					{  						_s50 = 10;  					}  					else  					{  						_s50 = _s50 - 1;  					}    					if (_s70 < 128)  						_s70 = _s70 + 1;    					_s8 = _s8 + _vv - _ring2[_s50];  					_ring2[_s50] = _vv;    					if (_s70 > 10)  					{  						_s20 = _s8 / 10;  					}  					else  						_s20 = _s8 / _s70;    					//----  					if (_s70 > 127)  					{  						_s10 = _ring1[_s48];  						_ring1[_s48] = _s20;  						_s68 = 64;  						_s58 = Convert.ToInt32(_s68);    						while (_s68 > 1)  						{  							if (_list[_s58] < _s10)  							{  								_s68 = _s68 * 0.5;  								_s58 = _s58 + Convert.ToInt32(_s68);  							}  							else  								if (_list[_s58] <= _s10)  								{  									_s68 = 1;  								}  								else  								{  									_s68 = _s68 * 0.5;  									_s58 = _s58 - Convert.ToInt32(_s68);  								}  						}  					}  					else  					{  						_ring1[_s48] = _s20;    						if (_s28 + _s30 > 127)  						{  							_s30 = _s30 - 1;  							_s58 = Convert.ToInt32(_s30);  						}  						else  						{  							_s28 = _s28 + 1;  							_s58 = Convert.ToInt32(_s28);  						}    						_s38 = _s28 > 96 ? 96 : Convert.ToInt32(_s28);  						_s40 = _s30 < 32 ? 32 : Convert.ToInt32(_s30);  					}    					//----  					_s68 = 64;  					_s60 = Convert.ToInt32(_s68);    					while (_s68 > 1)  					{  						if (_list[_s60] >= _s20)  						{  							if (_list[_s60 - 1] <= _s20)  							{  								_s68 = 1;  							}  							else  							{  								_s68 = _s68 * 0.5;  								_s60 = _s60 - Convert.ToInt32(_s68);  							}  						}  						else  						{  							_s68 = _s68 * 0.5;  							_s60 = _s60 + Convert.ToInt32(_s68);  						}    						if ((_s60 == 127) && (_s20 > _list[127]))  							_s60 = 128;  					}    					if (_s70 > 127)  					{  						if (_s58 >= _s60)  						{  							if ((_s38 + 1 > _s60) && (_s40 - 1 < _s60))  							{  								_s18 = _s18 + _s20;  							}  							else  								if ((_s40 > _s60) && (_s40 - 1 < _s58))  									_s18 = _s18 + _list[_s40 - 1];  						}  						else  							if (_s40 >= _s60)  							{  								if ((_s38 + 1 < _s60) && (_s38 + 1 > _s58))  									_s18 = _s18 + _list[_s38 + 1];  							}  							else  								if (_s38 + 2 > _s60)  								{  									_s18 = _s18 + _s20;  								}  								else  									if ((_s38 + 1 < _s60) && (_s38 + 1 > _s58))  										_s18 = _s18 + _list[_s38 + 1];    						if (_s58 > _s60)  						{  							if ((_s40 - 1 < _s58) && (_s38 + 1 > _s58))  							{  								_s18 = _s18 - _list[_s58];  							}  							else  								if ((_s38 < _s58) && (_s38 + 1 > _s60))  									_s18 = _s18 - _list[_s38];  						}  						else  						{  							if ((_s38 + 1 > _s58) && (_s40 - 1 < _s58))  							{  								_s18 = _s18 - _list[_s58];  							}  							else  								if ((_s40 > _s58) && (_s40 < _s60))  									_s18 = _s18 - _list[_s40];  						}  					}    					if (_s58 <= _s60)  					{  						if (_s58 >= _s60)  						{  							_list[_s60] = _s20;  						}  						else  						{  							for (_jj = _s58 + 1; _jj <= _s60 - 1; _jj++)  							{  								_list[_jj - 1] = _list[_jj];  							}  							_list[_s60 - 1] = _s20;  						}  					}  					else  					{  						for (_jj = _s58 - 1; _jj >= _s60; _jj--)  						{  							_list[_jj + 1] = _list[_jj];  						}  						_list[_s60] = _s20;  					}    					if (_s70 <= 127)  					{  						_s18 = 0;  						for (_jj = _s40; _jj <= _s38; _jj++)  						{  							_s18 = _s18 + _list[_jj];  						}  					}    					_f60 = _s18 / (_s38 - _s40 + 1);    					if (_fF8 + 1 > 31)  					{  						_fF8 = 31;  					}  					else  						_fF8 = _fF8 + 1;    					//----  					if (_fF8 <= 30)  					{  						if (_f28 > 0)  						{  							_f18 = _f8;  						}  						else  							_f18 = _f8 - _f28 * _f90;    						if (_f48 < 0)  						{  							_f38 = _f8;  						}  						else  							_f38 = _f8 - _f48 * _f90;    						_fB8 = _series;    						if (_fF8 != 30)  						{  							continue;  						}    						if (_fF8 == 30)  						{  							_fC0 = _series;    							_v4 = Math.Max(Math.Ceiling(_f78)' 1);    							_fE8 = (int)Math.Ceiling(_v4);    							_v2 = Math.Max(Math.Floor(_f78)' 1);    							_fE0 = (int)Math.Ceiling(_v2);    							if (_fE8 == _fE0)  							{  								_f68 = 1;  							}  							else  							{  								_v4 = _fE8 - _fE0;  								_f68 = (_f78 - _fE0) / _v4;  							}    							_v5 = _fE0 <= 29 ? Convert.ToInt32(_fE0) : 29;    							_v6 = _fE8 <= 29 ? Convert.ToInt32(_fE8) : 29;    							_fA8 = (_series - _buffer[_fF0 - _v5]) * (1 - _f68) / _fE0 + (_series - _buffer[_fF0 - _v6]) * _f68 / _fE8;  						}  					}  					else  					{  						_v1 = Math.Min(_f98' Math.Pow(_fA0 / _f60' _f88));    						if (_v1 < 1)  						{  							_v2 = 1;  						}  						else  						{  							_v3 = Math.Min(_f98' Math.Pow(_fA0 / _f60' _f88));    							_v2 = _v3;  						}    						_f58 = _v2;  						_f70 = Math.Pow(_f90' Math.Sqrt(_f58));    						if (_f28 > 0)  						{  							_f18 = _f8;  						}  						else  						{  							_f18 = _f8 - _f28 * _f70;  						}    						if (_f48 < 0)  						{  							_f38 = _f8;  						}  						else  						{  							_f38 = _f8 - _f48 * _f70;  						}  					}  				}    				if (_fF8 > 30)  				{  					_f30 = Math.Pow(_f50' _f58);  					_fC0 = (1 - _f30) * _series + _f30 * _fC0;  					_fC8 = (_series - _fC0) * (1 - _f50) + _f50 * _fC8;  					_fD0 = _f10 * _fC8 + _fC0;  					_f20 = -_f30 * 2;  					_f40 = _f30 * _f30;  					_fB0 = _f20 + _f40 + 1;  					_fA8 = (_fD0 - _fB8) * _fB0 + _f40 * _fA8;  					_fB8 = _fB8 + _fA8;  				}    				lastValue = (decimal)_fB8;  			}
Magic Number,StockSharp.Algo.Indicators,JurikMovingAverage,C:\repos\stocksharp_stocksharp\Algo\Indicators\JurikMovingAverage.cs,OnProcess,The following statement contains a magic number: if (_fF0 > 30)  			{  				if (Length < 1.0000000002)  				{  					_f80 = 0.0000000001; //{1.0e-10}  				}  				else  				{  					_f80 = (Length - 1) / 2.0;  				}    				if (_phase < -100)  				{  					_f10 = 0.5;  				}  				else  				{  					if (_phase > 100)  					{  						_f10 = 2.5;  					}  					else  					{  						_f10 = (double)_phase / 100 + 1.5;  					}  				}    				_v1 = Math.Log(Math.Sqrt(_f80));  				_v2 = _v1;    				if (_v1 / Math.Log(2.0) + 2.0 < 0.0)  				{  					_v3 = 0;  				}  				else  				{  					_v3 = _v2 / Math.Log(2.0) + 2.0;  				}    				_f98 = _v3;    				//----  				if (0.5 <= _f98 - 2.0)  				{  					_f88 = _f98 - 2.0;  				}  				else  				{  					_f88 = 0.5;  				}    				_f78 = Math.Sqrt(_f80) * _f98;  				_f90 = _f78 / (_f78 + 1.0);  				_f80 = _f80 * 0.9;  				_f50 = _f80 / (_f80 + 2.0);    				//----  				if (_f0 != 0)  				{  					_f0 = 0;  					_v5 = 0;    					for (_ii = 1; _ii <= 29; _ii++)  					{  						if (_buffer[_ii + 1] != _buffer[_ii])  						{  							_v5 = 1;  						}  					}    					_fD8 = _v5 * 30;    					_f38 = _fD8 == 0 ? _series : _buffer[1];    					_f18 = _f38;    					if (_fD8 > 29)  						_fD8 = 29;  				}  				else  					_fD8 = 0;    				//----  				for (_ii = _fD8; _ii >= 0; _ii--)  				{  					//{ another bigcycle...}  					_value2 = 31 - _ii;    					_f8 = _ii == 0 ? _series : _buffer[_value2];    					_f28 = _f8 - _f18;  					_f48 = _f8 - _f38;    					_v2 = Math.Max(Math.Abs(_f28)' Math.Abs(_f48));    					_fA0 = _v2;  					_vv = _fA0 + 0.0000000001; //{1.0e-10;}    					//----  					if (_s48 <= 1)  					{  						_s48 = 127;  					}  					else  					{  						_s48 = _s48 - 1;  					}    					if (_s50 <= 1)  					{  						_s50 = 10;  					}  					else  					{  						_s50 = _s50 - 1;  					}    					if (_s70 < 128)  						_s70 = _s70 + 1;    					_s8 = _s8 + _vv - _ring2[_s50];  					_ring2[_s50] = _vv;    					if (_s70 > 10)  					{  						_s20 = _s8 / 10;  					}  					else  						_s20 = _s8 / _s70;    					//----  					if (_s70 > 127)  					{  						_s10 = _ring1[_s48];  						_ring1[_s48] = _s20;  						_s68 = 64;  						_s58 = Convert.ToInt32(_s68);    						while (_s68 > 1)  						{  							if (_list[_s58] < _s10)  							{  								_s68 = _s68 * 0.5;  								_s58 = _s58 + Convert.ToInt32(_s68);  							}  							else  								if (_list[_s58] <= _s10)  								{  									_s68 = 1;  								}  								else  								{  									_s68 = _s68 * 0.5;  									_s58 = _s58 - Convert.ToInt32(_s68);  								}  						}  					}  					else  					{  						_ring1[_s48] = _s20;    						if (_s28 + _s30 > 127)  						{  							_s30 = _s30 - 1;  							_s58 = Convert.ToInt32(_s30);  						}  						else  						{  							_s28 = _s28 + 1;  							_s58 = Convert.ToInt32(_s28);  						}    						_s38 = _s28 > 96 ? 96 : Convert.ToInt32(_s28);  						_s40 = _s30 < 32 ? 32 : Convert.ToInt32(_s30);  					}    					//----  					_s68 = 64;  					_s60 = Convert.ToInt32(_s68);    					while (_s68 > 1)  					{  						if (_list[_s60] >= _s20)  						{  							if (_list[_s60 - 1] <= _s20)  							{  								_s68 = 1;  							}  							else  							{  								_s68 = _s68 * 0.5;  								_s60 = _s60 - Convert.ToInt32(_s68);  							}  						}  						else  						{  							_s68 = _s68 * 0.5;  							_s60 = _s60 + Convert.ToInt32(_s68);  						}    						if ((_s60 == 127) && (_s20 > _list[127]))  							_s60 = 128;  					}    					if (_s70 > 127)  					{  						if (_s58 >= _s60)  						{  							if ((_s38 + 1 > _s60) && (_s40 - 1 < _s60))  							{  								_s18 = _s18 + _s20;  							}  							else  								if ((_s40 > _s60) && (_s40 - 1 < _s58))  									_s18 = _s18 + _list[_s40 - 1];  						}  						else  							if (_s40 >= _s60)  							{  								if ((_s38 + 1 < _s60) && (_s38 + 1 > _s58))  									_s18 = _s18 + _list[_s38 + 1];  							}  							else  								if (_s38 + 2 > _s60)  								{  									_s18 = _s18 + _s20;  								}  								else  									if ((_s38 + 1 < _s60) && (_s38 + 1 > _s58))  										_s18 = _s18 + _list[_s38 + 1];    						if (_s58 > _s60)  						{  							if ((_s40 - 1 < _s58) && (_s38 + 1 > _s58))  							{  								_s18 = _s18 - _list[_s58];  							}  							else  								if ((_s38 < _s58) && (_s38 + 1 > _s60))  									_s18 = _s18 - _list[_s38];  						}  						else  						{  							if ((_s38 + 1 > _s58) && (_s40 - 1 < _s58))  							{  								_s18 = _s18 - _list[_s58];  							}  							else  								if ((_s40 > _s58) && (_s40 < _s60))  									_s18 = _s18 - _list[_s40];  						}  					}    					if (_s58 <= _s60)  					{  						if (_s58 >= _s60)  						{  							_list[_s60] = _s20;  						}  						else  						{  							for (_jj = _s58 + 1; _jj <= _s60 - 1; _jj++)  							{  								_list[_jj - 1] = _list[_jj];  							}  							_list[_s60 - 1] = _s20;  						}  					}  					else  					{  						for (_jj = _s58 - 1; _jj >= _s60; _jj--)  						{  							_list[_jj + 1] = _list[_jj];  						}  						_list[_s60] = _s20;  					}    					if (_s70 <= 127)  					{  						_s18 = 0;  						for (_jj = _s40; _jj <= _s38; _jj++)  						{  							_s18 = _s18 + _list[_jj];  						}  					}    					_f60 = _s18 / (_s38 - _s40 + 1);    					if (_fF8 + 1 > 31)  					{  						_fF8 = 31;  					}  					else  						_fF8 = _fF8 + 1;    					//----  					if (_fF8 <= 30)  					{  						if (_f28 > 0)  						{  							_f18 = _f8;  						}  						else  							_f18 = _f8 - _f28 * _f90;    						if (_f48 < 0)  						{  							_f38 = _f8;  						}  						else  							_f38 = _f8 - _f48 * _f90;    						_fB8 = _series;    						if (_fF8 != 30)  						{  							continue;  						}    						if (_fF8 == 30)  						{  							_fC0 = _series;    							_v4 = Math.Max(Math.Ceiling(_f78)' 1);    							_fE8 = (int)Math.Ceiling(_v4);    							_v2 = Math.Max(Math.Floor(_f78)' 1);    							_fE0 = (int)Math.Ceiling(_v2);    							if (_fE8 == _fE0)  							{  								_f68 = 1;  							}  							else  							{  								_v4 = _fE8 - _fE0;  								_f68 = (_f78 - _fE0) / _v4;  							}    							_v5 = _fE0 <= 29 ? Convert.ToInt32(_fE0) : 29;    							_v6 = _fE8 <= 29 ? Convert.ToInt32(_fE8) : 29;    							_fA8 = (_series - _buffer[_fF0 - _v5]) * (1 - _f68) / _fE0 + (_series - _buffer[_fF0 - _v6]) * _f68 / _fE8;  						}  					}  					else  					{  						_v1 = Math.Min(_f98' Math.Pow(_fA0 / _f60' _f88));    						if (_v1 < 1)  						{  							_v2 = 1;  						}  						else  						{  							_v3 = Math.Min(_f98' Math.Pow(_fA0 / _f60' _f88));    							_v2 = _v3;  						}    						_f58 = _v2;  						_f70 = Math.Pow(_f90' Math.Sqrt(_f58));    						if (_f28 > 0)  						{  							_f18 = _f8;  						}  						else  						{  							_f18 = _f8 - _f28 * _f70;  						}    						if (_f48 < 0)  						{  							_f38 = _f8;  						}  						else  						{  							_f38 = _f8 - _f48 * _f70;  						}  					}  				}    				if (_fF8 > 30)  				{  					_f30 = Math.Pow(_f50' _f58);  					_fC0 = (1 - _f30) * _series + _f30 * _fC0;  					_fC8 = (_series - _fC0) * (1 - _f50) + _f50 * _fC8;  					_fD0 = _f10 * _fC8 + _fC0;  					_f20 = -_f30 * 2;  					_f40 = _f30 * _f30;  					_fB0 = _f20 + _f40 + 1;  					_fA8 = (_fD0 - _fB8) * _fB0 + _f40 * _fA8;  					_fB8 = _fB8 + _fA8;  				}    				lastValue = (decimal)_fB8;  			}
Magic Number,StockSharp.Algo.Indicators,JurikMovingAverage,C:\repos\stocksharp_stocksharp\Algo\Indicators\JurikMovingAverage.cs,OnProcess,The following statement contains a magic number: if (_fF0 > 30)  			{  				if (Length < 1.0000000002)  				{  					_f80 = 0.0000000001; //{1.0e-10}  				}  				else  				{  					_f80 = (Length - 1) / 2.0;  				}    				if (_phase < -100)  				{  					_f10 = 0.5;  				}  				else  				{  					if (_phase > 100)  					{  						_f10 = 2.5;  					}  					else  					{  						_f10 = (double)_phase / 100 + 1.5;  					}  				}    				_v1 = Math.Log(Math.Sqrt(_f80));  				_v2 = _v1;    				if (_v1 / Math.Log(2.0) + 2.0 < 0.0)  				{  					_v3 = 0;  				}  				else  				{  					_v3 = _v2 / Math.Log(2.0) + 2.0;  				}    				_f98 = _v3;    				//----  				if (0.5 <= _f98 - 2.0)  				{  					_f88 = _f98 - 2.0;  				}  				else  				{  					_f88 = 0.5;  				}    				_f78 = Math.Sqrt(_f80) * _f98;  				_f90 = _f78 / (_f78 + 1.0);  				_f80 = _f80 * 0.9;  				_f50 = _f80 / (_f80 + 2.0);    				//----  				if (_f0 != 0)  				{  					_f0 = 0;  					_v5 = 0;    					for (_ii = 1; _ii <= 29; _ii++)  					{  						if (_buffer[_ii + 1] != _buffer[_ii])  						{  							_v5 = 1;  						}  					}    					_fD8 = _v5 * 30;    					_f38 = _fD8 == 0 ? _series : _buffer[1];    					_f18 = _f38;    					if (_fD8 > 29)  						_fD8 = 29;  				}  				else  					_fD8 = 0;    				//----  				for (_ii = _fD8; _ii >= 0; _ii--)  				{  					//{ another bigcycle...}  					_value2 = 31 - _ii;    					_f8 = _ii == 0 ? _series : _buffer[_value2];    					_f28 = _f8 - _f18;  					_f48 = _f8 - _f38;    					_v2 = Math.Max(Math.Abs(_f28)' Math.Abs(_f48));    					_fA0 = _v2;  					_vv = _fA0 + 0.0000000001; //{1.0e-10;}    					//----  					if (_s48 <= 1)  					{  						_s48 = 127;  					}  					else  					{  						_s48 = _s48 - 1;  					}    					if (_s50 <= 1)  					{  						_s50 = 10;  					}  					else  					{  						_s50 = _s50 - 1;  					}    					if (_s70 < 128)  						_s70 = _s70 + 1;    					_s8 = _s8 + _vv - _ring2[_s50];  					_ring2[_s50] = _vv;    					if (_s70 > 10)  					{  						_s20 = _s8 / 10;  					}  					else  						_s20 = _s8 / _s70;    					//----  					if (_s70 > 127)  					{  						_s10 = _ring1[_s48];  						_ring1[_s48] = _s20;  						_s68 = 64;  						_s58 = Convert.ToInt32(_s68);    						while (_s68 > 1)  						{  							if (_list[_s58] < _s10)  							{  								_s68 = _s68 * 0.5;  								_s58 = _s58 + Convert.ToInt32(_s68);  							}  							else  								if (_list[_s58] <= _s10)  								{  									_s68 = 1;  								}  								else  								{  									_s68 = _s68 * 0.5;  									_s58 = _s58 - Convert.ToInt32(_s68);  								}  						}  					}  					else  					{  						_ring1[_s48] = _s20;    						if (_s28 + _s30 > 127)  						{  							_s30 = _s30 - 1;  							_s58 = Convert.ToInt32(_s30);  						}  						else  						{  							_s28 = _s28 + 1;  							_s58 = Convert.ToInt32(_s28);  						}    						_s38 = _s28 > 96 ? 96 : Convert.ToInt32(_s28);  						_s40 = _s30 < 32 ? 32 : Convert.ToInt32(_s30);  					}    					//----  					_s68 = 64;  					_s60 = Convert.ToInt32(_s68);    					while (_s68 > 1)  					{  						if (_list[_s60] >= _s20)  						{  							if (_list[_s60 - 1] <= _s20)  							{  								_s68 = 1;  							}  							else  							{  								_s68 = _s68 * 0.5;  								_s60 = _s60 - Convert.ToInt32(_s68);  							}  						}  						else  						{  							_s68 = _s68 * 0.5;  							_s60 = _s60 + Convert.ToInt32(_s68);  						}    						if ((_s60 == 127) && (_s20 > _list[127]))  							_s60 = 128;  					}    					if (_s70 > 127)  					{  						if (_s58 >= _s60)  						{  							if ((_s38 + 1 > _s60) && (_s40 - 1 < _s60))  							{  								_s18 = _s18 + _s20;  							}  							else  								if ((_s40 > _s60) && (_s40 - 1 < _s58))  									_s18 = _s18 + _list[_s40 - 1];  						}  						else  							if (_s40 >= _s60)  							{  								if ((_s38 + 1 < _s60) && (_s38 + 1 > _s58))  									_s18 = _s18 + _list[_s38 + 1];  							}  							else  								if (_s38 + 2 > _s60)  								{  									_s18 = _s18 + _s20;  								}  								else  									if ((_s38 + 1 < _s60) && (_s38 + 1 > _s58))  										_s18 = _s18 + _list[_s38 + 1];    						if (_s58 > _s60)  						{  							if ((_s40 - 1 < _s58) && (_s38 + 1 > _s58))  							{  								_s18 = _s18 - _list[_s58];  							}  							else  								if ((_s38 < _s58) && (_s38 + 1 > _s60))  									_s18 = _s18 - _list[_s38];  						}  						else  						{  							if ((_s38 + 1 > _s58) && (_s40 - 1 < _s58))  							{  								_s18 = _s18 - _list[_s58];  							}  							else  								if ((_s40 > _s58) && (_s40 < _s60))  									_s18 = _s18 - _list[_s40];  						}  					}    					if (_s58 <= _s60)  					{  						if (_s58 >= _s60)  						{  							_list[_s60] = _s20;  						}  						else  						{  							for (_jj = _s58 + 1; _jj <= _s60 - 1; _jj++)  							{  								_list[_jj - 1] = _list[_jj];  							}  							_list[_s60 - 1] = _s20;  						}  					}  					else  					{  						for (_jj = _s58 - 1; _jj >= _s60; _jj--)  						{  							_list[_jj + 1] = _list[_jj];  						}  						_list[_s60] = _s20;  					}    					if (_s70 <= 127)  					{  						_s18 = 0;  						for (_jj = _s40; _jj <= _s38; _jj++)  						{  							_s18 = _s18 + _list[_jj];  						}  					}    					_f60 = _s18 / (_s38 - _s40 + 1);    					if (_fF8 + 1 > 31)  					{  						_fF8 = 31;  					}  					else  						_fF8 = _fF8 + 1;    					//----  					if (_fF8 <= 30)  					{  						if (_f28 > 0)  						{  							_f18 = _f8;  						}  						else  							_f18 = _f8 - _f28 * _f90;    						if (_f48 < 0)  						{  							_f38 = _f8;  						}  						else  							_f38 = _f8 - _f48 * _f90;    						_fB8 = _series;    						if (_fF8 != 30)  						{  							continue;  						}    						if (_fF8 == 30)  						{  							_fC0 = _series;    							_v4 = Math.Max(Math.Ceiling(_f78)' 1);    							_fE8 = (int)Math.Ceiling(_v4);    							_v2 = Math.Max(Math.Floor(_f78)' 1);    							_fE0 = (int)Math.Ceiling(_v2);    							if (_fE8 == _fE0)  							{  								_f68 = 1;  							}  							else  							{  								_v4 = _fE8 - _fE0;  								_f68 = (_f78 - _fE0) / _v4;  							}    							_v5 = _fE0 <= 29 ? Convert.ToInt32(_fE0) : 29;    							_v6 = _fE8 <= 29 ? Convert.ToInt32(_fE8) : 29;    							_fA8 = (_series - _buffer[_fF0 - _v5]) * (1 - _f68) / _fE0 + (_series - _buffer[_fF0 - _v6]) * _f68 / _fE8;  						}  					}  					else  					{  						_v1 = Math.Min(_f98' Math.Pow(_fA0 / _f60' _f88));    						if (_v1 < 1)  						{  							_v2 = 1;  						}  						else  						{  							_v3 = Math.Min(_f98' Math.Pow(_fA0 / _f60' _f88));    							_v2 = _v3;  						}    						_f58 = _v2;  						_f70 = Math.Pow(_f90' Math.Sqrt(_f58));    						if (_f28 > 0)  						{  							_f18 = _f8;  						}  						else  						{  							_f18 = _f8 - _f28 * _f70;  						}    						if (_f48 < 0)  						{  							_f38 = _f8;  						}  						else  						{  							_f38 = _f8 - _f48 * _f70;  						}  					}  				}    				if (_fF8 > 30)  				{  					_f30 = Math.Pow(_f50' _f58);  					_fC0 = (1 - _f30) * _series + _f30 * _fC0;  					_fC8 = (_series - _fC0) * (1 - _f50) + _f50 * _fC8;  					_fD0 = _f10 * _fC8 + _fC0;  					_f20 = -_f30 * 2;  					_f40 = _f30 * _f30;  					_fB0 = _f20 + _f40 + 1;  					_fA8 = (_fD0 - _fB8) * _fB0 + _f40 * _fA8;  					_fB8 = _fB8 + _fA8;  				}    				lastValue = (decimal)_fB8;  			}
Magic Number,StockSharp.Algo.Indicators,JurikMovingAverage,C:\repos\stocksharp_stocksharp\Algo\Indicators\JurikMovingAverage.cs,OnProcess,The following statement contains a magic number: if (_fF0 > 30)  			{  				if (Length < 1.0000000002)  				{  					_f80 = 0.0000000001; //{1.0e-10}  				}  				else  				{  					_f80 = (Length - 1) / 2.0;  				}    				if (_phase < -100)  				{  					_f10 = 0.5;  				}  				else  				{  					if (_phase > 100)  					{  						_f10 = 2.5;  					}  					else  					{  						_f10 = (double)_phase / 100 + 1.5;  					}  				}    				_v1 = Math.Log(Math.Sqrt(_f80));  				_v2 = _v1;    				if (_v1 / Math.Log(2.0) + 2.0 < 0.0)  				{  					_v3 = 0;  				}  				else  				{  					_v3 = _v2 / Math.Log(2.0) + 2.0;  				}    				_f98 = _v3;    				//----  				if (0.5 <= _f98 - 2.0)  				{  					_f88 = _f98 - 2.0;  				}  				else  				{  					_f88 = 0.5;  				}    				_f78 = Math.Sqrt(_f80) * _f98;  				_f90 = _f78 / (_f78 + 1.0);  				_f80 = _f80 * 0.9;  				_f50 = _f80 / (_f80 + 2.0);    				//----  				if (_f0 != 0)  				{  					_f0 = 0;  					_v5 = 0;    					for (_ii = 1; _ii <= 29; _ii++)  					{  						if (_buffer[_ii + 1] != _buffer[_ii])  						{  							_v5 = 1;  						}  					}    					_fD8 = _v5 * 30;    					_f38 = _fD8 == 0 ? _series : _buffer[1];    					_f18 = _f38;    					if (_fD8 > 29)  						_fD8 = 29;  				}  				else  					_fD8 = 0;    				//----  				for (_ii = _fD8; _ii >= 0; _ii--)  				{  					//{ another bigcycle...}  					_value2 = 31 - _ii;    					_f8 = _ii == 0 ? _series : _buffer[_value2];    					_f28 = _f8 - _f18;  					_f48 = _f8 - _f38;    					_v2 = Math.Max(Math.Abs(_f28)' Math.Abs(_f48));    					_fA0 = _v2;  					_vv = _fA0 + 0.0000000001; //{1.0e-10;}    					//----  					if (_s48 <= 1)  					{  						_s48 = 127;  					}  					else  					{  						_s48 = _s48 - 1;  					}    					if (_s50 <= 1)  					{  						_s50 = 10;  					}  					else  					{  						_s50 = _s50 - 1;  					}    					if (_s70 < 128)  						_s70 = _s70 + 1;    					_s8 = _s8 + _vv - _ring2[_s50];  					_ring2[_s50] = _vv;    					if (_s70 > 10)  					{  						_s20 = _s8 / 10;  					}  					else  						_s20 = _s8 / _s70;    					//----  					if (_s70 > 127)  					{  						_s10 = _ring1[_s48];  						_ring1[_s48] = _s20;  						_s68 = 64;  						_s58 = Convert.ToInt32(_s68);    						while (_s68 > 1)  						{  							if (_list[_s58] < _s10)  							{  								_s68 = _s68 * 0.5;  								_s58 = _s58 + Convert.ToInt32(_s68);  							}  							else  								if (_list[_s58] <= _s10)  								{  									_s68 = 1;  								}  								else  								{  									_s68 = _s68 * 0.5;  									_s58 = _s58 - Convert.ToInt32(_s68);  								}  						}  					}  					else  					{  						_ring1[_s48] = _s20;    						if (_s28 + _s30 > 127)  						{  							_s30 = _s30 - 1;  							_s58 = Convert.ToInt32(_s30);  						}  						else  						{  							_s28 = _s28 + 1;  							_s58 = Convert.ToInt32(_s28);  						}    						_s38 = _s28 > 96 ? 96 : Convert.ToInt32(_s28);  						_s40 = _s30 < 32 ? 32 : Convert.ToInt32(_s30);  					}    					//----  					_s68 = 64;  					_s60 = Convert.ToInt32(_s68);    					while (_s68 > 1)  					{  						if (_list[_s60] >= _s20)  						{  							if (_list[_s60 - 1] <= _s20)  							{  								_s68 = 1;  							}  							else  							{  								_s68 = _s68 * 0.5;  								_s60 = _s60 - Convert.ToInt32(_s68);  							}  						}  						else  						{  							_s68 = _s68 * 0.5;  							_s60 = _s60 + Convert.ToInt32(_s68);  						}    						if ((_s60 == 127) && (_s20 > _list[127]))  							_s60 = 128;  					}    					if (_s70 > 127)  					{  						if (_s58 >= _s60)  						{  							if ((_s38 + 1 > _s60) && (_s40 - 1 < _s60))  							{  								_s18 = _s18 + _s20;  							}  							else  								if ((_s40 > _s60) && (_s40 - 1 < _s58))  									_s18 = _s18 + _list[_s40 - 1];  						}  						else  							if (_s40 >= _s60)  							{  								if ((_s38 + 1 < _s60) && (_s38 + 1 > _s58))  									_s18 = _s18 + _list[_s38 + 1];  							}  							else  								if (_s38 + 2 > _s60)  								{  									_s18 = _s18 + _s20;  								}  								else  									if ((_s38 + 1 < _s60) && (_s38 + 1 > _s58))  										_s18 = _s18 + _list[_s38 + 1];    						if (_s58 > _s60)  						{  							if ((_s40 - 1 < _s58) && (_s38 + 1 > _s58))  							{  								_s18 = _s18 - _list[_s58];  							}  							else  								if ((_s38 < _s58) && (_s38 + 1 > _s60))  									_s18 = _s18 - _list[_s38];  						}  						else  						{  							if ((_s38 + 1 > _s58) && (_s40 - 1 < _s58))  							{  								_s18 = _s18 - _list[_s58];  							}  							else  								if ((_s40 > _s58) && (_s40 < _s60))  									_s18 = _s18 - _list[_s40];  						}  					}    					if (_s58 <= _s60)  					{  						if (_s58 >= _s60)  						{  							_list[_s60] = _s20;  						}  						else  						{  							for (_jj = _s58 + 1; _jj <= _s60 - 1; _jj++)  							{  								_list[_jj - 1] = _list[_jj];  							}  							_list[_s60 - 1] = _s20;  						}  					}  					else  					{  						for (_jj = _s58 - 1; _jj >= _s60; _jj--)  						{  							_list[_jj + 1] = _list[_jj];  						}  						_list[_s60] = _s20;  					}    					if (_s70 <= 127)  					{  						_s18 = 0;  						for (_jj = _s40; _jj <= _s38; _jj++)  						{  							_s18 = _s18 + _list[_jj];  						}  					}    					_f60 = _s18 / (_s38 - _s40 + 1);    					if (_fF8 + 1 > 31)  					{  						_fF8 = 31;  					}  					else  						_fF8 = _fF8 + 1;    					//----  					if (_fF8 <= 30)  					{  						if (_f28 > 0)  						{  							_f18 = _f8;  						}  						else  							_f18 = _f8 - _f28 * _f90;    						if (_f48 < 0)  						{  							_f38 = _f8;  						}  						else  							_f38 = _f8 - _f48 * _f90;    						_fB8 = _series;    						if (_fF8 != 30)  						{  							continue;  						}    						if (_fF8 == 30)  						{  							_fC0 = _series;    							_v4 = Math.Max(Math.Ceiling(_f78)' 1);    							_fE8 = (int)Math.Ceiling(_v4);    							_v2 = Math.Max(Math.Floor(_f78)' 1);    							_fE0 = (int)Math.Ceiling(_v2);    							if (_fE8 == _fE0)  							{  								_f68 = 1;  							}  							else  							{  								_v4 = _fE8 - _fE0;  								_f68 = (_f78 - _fE0) / _v4;  							}    							_v5 = _fE0 <= 29 ? Convert.ToInt32(_fE0) : 29;    							_v6 = _fE8 <= 29 ? Convert.ToInt32(_fE8) : 29;    							_fA8 = (_series - _buffer[_fF0 - _v5]) * (1 - _f68) / _fE0 + (_series - _buffer[_fF0 - _v6]) * _f68 / _fE8;  						}  					}  					else  					{  						_v1 = Math.Min(_f98' Math.Pow(_fA0 / _f60' _f88));    						if (_v1 < 1)  						{  							_v2 = 1;  						}  						else  						{  							_v3 = Math.Min(_f98' Math.Pow(_fA0 / _f60' _f88));    							_v2 = _v3;  						}    						_f58 = _v2;  						_f70 = Math.Pow(_f90' Math.Sqrt(_f58));    						if (_f28 > 0)  						{  							_f18 = _f8;  						}  						else  						{  							_f18 = _f8 - _f28 * _f70;  						}    						if (_f48 < 0)  						{  							_f38 = _f8;  						}  						else  						{  							_f38 = _f8 - _f48 * _f70;  						}  					}  				}    				if (_fF8 > 30)  				{  					_f30 = Math.Pow(_f50' _f58);  					_fC0 = (1 - _f30) * _series + _f30 * _fC0;  					_fC8 = (_series - _fC0) * (1 - _f50) + _f50 * _fC8;  					_fD0 = _f10 * _fC8 + _fC0;  					_f20 = -_f30 * 2;  					_f40 = _f30 * _f30;  					_fB0 = _f20 + _f40 + 1;  					_fA8 = (_fD0 - _fB8) * _fB0 + _f40 * _fA8;  					_fB8 = _fB8 + _fA8;  				}    				lastValue = (decimal)_fB8;  			}
Magic Number,StockSharp.Algo.Indicators,JurikMovingAverage,C:\repos\stocksharp_stocksharp\Algo\Indicators\JurikMovingAverage.cs,OnProcess,The following statement contains a magic number: if (_fF0 > 30)  			{  				if (Length < 1.0000000002)  				{  					_f80 = 0.0000000001; //{1.0e-10}  				}  				else  				{  					_f80 = (Length - 1) / 2.0;  				}    				if (_phase < -100)  				{  					_f10 = 0.5;  				}  				else  				{  					if (_phase > 100)  					{  						_f10 = 2.5;  					}  					else  					{  						_f10 = (double)_phase / 100 + 1.5;  					}  				}    				_v1 = Math.Log(Math.Sqrt(_f80));  				_v2 = _v1;    				if (_v1 / Math.Log(2.0) + 2.0 < 0.0)  				{  					_v3 = 0;  				}  				else  				{  					_v3 = _v2 / Math.Log(2.0) + 2.0;  				}    				_f98 = _v3;    				//----  				if (0.5 <= _f98 - 2.0)  				{  					_f88 = _f98 - 2.0;  				}  				else  				{  					_f88 = 0.5;  				}    				_f78 = Math.Sqrt(_f80) * _f98;  				_f90 = _f78 / (_f78 + 1.0);  				_f80 = _f80 * 0.9;  				_f50 = _f80 / (_f80 + 2.0);    				//----  				if (_f0 != 0)  				{  					_f0 = 0;  					_v5 = 0;    					for (_ii = 1; _ii <= 29; _ii++)  					{  						if (_buffer[_ii + 1] != _buffer[_ii])  						{  							_v5 = 1;  						}  					}    					_fD8 = _v5 * 30;    					_f38 = _fD8 == 0 ? _series : _buffer[1];    					_f18 = _f38;    					if (_fD8 > 29)  						_fD8 = 29;  				}  				else  					_fD8 = 0;    				//----  				for (_ii = _fD8; _ii >= 0; _ii--)  				{  					//{ another bigcycle...}  					_value2 = 31 - _ii;    					_f8 = _ii == 0 ? _series : _buffer[_value2];    					_f28 = _f8 - _f18;  					_f48 = _f8 - _f38;    					_v2 = Math.Max(Math.Abs(_f28)' Math.Abs(_f48));    					_fA0 = _v2;  					_vv = _fA0 + 0.0000000001; //{1.0e-10;}    					//----  					if (_s48 <= 1)  					{  						_s48 = 127;  					}  					else  					{  						_s48 = _s48 - 1;  					}    					if (_s50 <= 1)  					{  						_s50 = 10;  					}  					else  					{  						_s50 = _s50 - 1;  					}    					if (_s70 < 128)  						_s70 = _s70 + 1;    					_s8 = _s8 + _vv - _ring2[_s50];  					_ring2[_s50] = _vv;    					if (_s70 > 10)  					{  						_s20 = _s8 / 10;  					}  					else  						_s20 = _s8 / _s70;    					//----  					if (_s70 > 127)  					{  						_s10 = _ring1[_s48];  						_ring1[_s48] = _s20;  						_s68 = 64;  						_s58 = Convert.ToInt32(_s68);    						while (_s68 > 1)  						{  							if (_list[_s58] < _s10)  							{  								_s68 = _s68 * 0.5;  								_s58 = _s58 + Convert.ToInt32(_s68);  							}  							else  								if (_list[_s58] <= _s10)  								{  									_s68 = 1;  								}  								else  								{  									_s68 = _s68 * 0.5;  									_s58 = _s58 - Convert.ToInt32(_s68);  								}  						}  					}  					else  					{  						_ring1[_s48] = _s20;    						if (_s28 + _s30 > 127)  						{  							_s30 = _s30 - 1;  							_s58 = Convert.ToInt32(_s30);  						}  						else  						{  							_s28 = _s28 + 1;  							_s58 = Convert.ToInt32(_s28);  						}    						_s38 = _s28 > 96 ? 96 : Convert.ToInt32(_s28);  						_s40 = _s30 < 32 ? 32 : Convert.ToInt32(_s30);  					}    					//----  					_s68 = 64;  					_s60 = Convert.ToInt32(_s68);    					while (_s68 > 1)  					{  						if (_list[_s60] >= _s20)  						{  							if (_list[_s60 - 1] <= _s20)  							{  								_s68 = 1;  							}  							else  							{  								_s68 = _s68 * 0.5;  								_s60 = _s60 - Convert.ToInt32(_s68);  							}  						}  						else  						{  							_s68 = _s68 * 0.5;  							_s60 = _s60 + Convert.ToInt32(_s68);  						}    						if ((_s60 == 127) && (_s20 > _list[127]))  							_s60 = 128;  					}    					if (_s70 > 127)  					{  						if (_s58 >= _s60)  						{  							if ((_s38 + 1 > _s60) && (_s40 - 1 < _s60))  							{  								_s18 = _s18 + _s20;  							}  							else  								if ((_s40 > _s60) && (_s40 - 1 < _s58))  									_s18 = _s18 + _list[_s40 - 1];  						}  						else  							if (_s40 >= _s60)  							{  								if ((_s38 + 1 < _s60) && (_s38 + 1 > _s58))  									_s18 = _s18 + _list[_s38 + 1];  							}  							else  								if (_s38 + 2 > _s60)  								{  									_s18 = _s18 + _s20;  								}  								else  									if ((_s38 + 1 < _s60) && (_s38 + 1 > _s58))  										_s18 = _s18 + _list[_s38 + 1];    						if (_s58 > _s60)  						{  							if ((_s40 - 1 < _s58) && (_s38 + 1 > _s58))  							{  								_s18 = _s18 - _list[_s58];  							}  							else  								if ((_s38 < _s58) && (_s38 + 1 > _s60))  									_s18 = _s18 - _list[_s38];  						}  						else  						{  							if ((_s38 + 1 > _s58) && (_s40 - 1 < _s58))  							{  								_s18 = _s18 - _list[_s58];  							}  							else  								if ((_s40 > _s58) && (_s40 < _s60))  									_s18 = _s18 - _list[_s40];  						}  					}    					if (_s58 <= _s60)  					{  						if (_s58 >= _s60)  						{  							_list[_s60] = _s20;  						}  						else  						{  							for (_jj = _s58 + 1; _jj <= _s60 - 1; _jj++)  							{  								_list[_jj - 1] = _list[_jj];  							}  							_list[_s60 - 1] = _s20;  						}  					}  					else  					{  						for (_jj = _s58 - 1; _jj >= _s60; _jj--)  						{  							_list[_jj + 1] = _list[_jj];  						}  						_list[_s60] = _s20;  					}    					if (_s70 <= 127)  					{  						_s18 = 0;  						for (_jj = _s40; _jj <= _s38; _jj++)  						{  							_s18 = _s18 + _list[_jj];  						}  					}    					_f60 = _s18 / (_s38 - _s40 + 1);    					if (_fF8 + 1 > 31)  					{  						_fF8 = 31;  					}  					else  						_fF8 = _fF8 + 1;    					//----  					if (_fF8 <= 30)  					{  						if (_f28 > 0)  						{  							_f18 = _f8;  						}  						else  							_f18 = _f8 - _f28 * _f90;    						if (_f48 < 0)  						{  							_f38 = _f8;  						}  						else  							_f38 = _f8 - _f48 * _f90;    						_fB8 = _series;    						if (_fF8 != 30)  						{  							continue;  						}    						if (_fF8 == 30)  						{  							_fC0 = _series;    							_v4 = Math.Max(Math.Ceiling(_f78)' 1);    							_fE8 = (int)Math.Ceiling(_v4);    							_v2 = Math.Max(Math.Floor(_f78)' 1);    							_fE0 = (int)Math.Ceiling(_v2);    							if (_fE8 == _fE0)  							{  								_f68 = 1;  							}  							else  							{  								_v4 = _fE8 - _fE0;  								_f68 = (_f78 - _fE0) / _v4;  							}    							_v5 = _fE0 <= 29 ? Convert.ToInt32(_fE0) : 29;    							_v6 = _fE8 <= 29 ? Convert.ToInt32(_fE8) : 29;    							_fA8 = (_series - _buffer[_fF0 - _v5]) * (1 - _f68) / _fE0 + (_series - _buffer[_fF0 - _v6]) * _f68 / _fE8;  						}  					}  					else  					{  						_v1 = Math.Min(_f98' Math.Pow(_fA0 / _f60' _f88));    						if (_v1 < 1)  						{  							_v2 = 1;  						}  						else  						{  							_v3 = Math.Min(_f98' Math.Pow(_fA0 / _f60' _f88));    							_v2 = _v3;  						}    						_f58 = _v2;  						_f70 = Math.Pow(_f90' Math.Sqrt(_f58));    						if (_f28 > 0)  						{  							_f18 = _f8;  						}  						else  						{  							_f18 = _f8 - _f28 * _f70;  						}    						if (_f48 < 0)  						{  							_f38 = _f8;  						}  						else  						{  							_f38 = _f8 - _f48 * _f70;  						}  					}  				}    				if (_fF8 > 30)  				{  					_f30 = Math.Pow(_f50' _f58);  					_fC0 = (1 - _f30) * _series + _f30 * _fC0;  					_fC8 = (_series - _fC0) * (1 - _f50) + _f50 * _fC8;  					_fD0 = _f10 * _fC8 + _fC0;  					_f20 = -_f30 * 2;  					_f40 = _f30 * _f30;  					_fB0 = _f20 + _f40 + 1;  					_fA8 = (_fD0 - _fB8) * _fB0 + _f40 * _fA8;  					_fB8 = _fB8 + _fA8;  				}    				lastValue = (decimal)_fB8;  			}
Magic Number,StockSharp.Algo.Indicators,JurikMovingAverage,C:\repos\stocksharp_stocksharp\Algo\Indicators\JurikMovingAverage.cs,OnProcess,The following statement contains a magic number: if (_fF0 > 30)  			{  				if (Length < 1.0000000002)  				{  					_f80 = 0.0000000001; //{1.0e-10}  				}  				else  				{  					_f80 = (Length - 1) / 2.0;  				}    				if (_phase < -100)  				{  					_f10 = 0.5;  				}  				else  				{  					if (_phase > 100)  					{  						_f10 = 2.5;  					}  					else  					{  						_f10 = (double)_phase / 100 + 1.5;  					}  				}    				_v1 = Math.Log(Math.Sqrt(_f80));  				_v2 = _v1;    				if (_v1 / Math.Log(2.0) + 2.0 < 0.0)  				{  					_v3 = 0;  				}  				else  				{  					_v3 = _v2 / Math.Log(2.0) + 2.0;  				}    				_f98 = _v3;    				//----  				if (0.5 <= _f98 - 2.0)  				{  					_f88 = _f98 - 2.0;  				}  				else  				{  					_f88 = 0.5;  				}    				_f78 = Math.Sqrt(_f80) * _f98;  				_f90 = _f78 / (_f78 + 1.0);  				_f80 = _f80 * 0.9;  				_f50 = _f80 / (_f80 + 2.0);    				//----  				if (_f0 != 0)  				{  					_f0 = 0;  					_v5 = 0;    					for (_ii = 1; _ii <= 29; _ii++)  					{  						if (_buffer[_ii + 1] != _buffer[_ii])  						{  							_v5 = 1;  						}  					}    					_fD8 = _v5 * 30;    					_f38 = _fD8 == 0 ? _series : _buffer[1];    					_f18 = _f38;    					if (_fD8 > 29)  						_fD8 = 29;  				}  				else  					_fD8 = 0;    				//----  				for (_ii = _fD8; _ii >= 0; _ii--)  				{  					//{ another bigcycle...}  					_value2 = 31 - _ii;    					_f8 = _ii == 0 ? _series : _buffer[_value2];    					_f28 = _f8 - _f18;  					_f48 = _f8 - _f38;    					_v2 = Math.Max(Math.Abs(_f28)' Math.Abs(_f48));    					_fA0 = _v2;  					_vv = _fA0 + 0.0000000001; //{1.0e-10;}    					//----  					if (_s48 <= 1)  					{  						_s48 = 127;  					}  					else  					{  						_s48 = _s48 - 1;  					}    					if (_s50 <= 1)  					{  						_s50 = 10;  					}  					else  					{  						_s50 = _s50 - 1;  					}    					if (_s70 < 128)  						_s70 = _s70 + 1;    					_s8 = _s8 + _vv - _ring2[_s50];  					_ring2[_s50] = _vv;    					if (_s70 > 10)  					{  						_s20 = _s8 / 10;  					}  					else  						_s20 = _s8 / _s70;    					//----  					if (_s70 > 127)  					{  						_s10 = _ring1[_s48];  						_ring1[_s48] = _s20;  						_s68 = 64;  						_s58 = Convert.ToInt32(_s68);    						while (_s68 > 1)  						{  							if (_list[_s58] < _s10)  							{  								_s68 = _s68 * 0.5;  								_s58 = _s58 + Convert.ToInt32(_s68);  							}  							else  								if (_list[_s58] <= _s10)  								{  									_s68 = 1;  								}  								else  								{  									_s68 = _s68 * 0.5;  									_s58 = _s58 - Convert.ToInt32(_s68);  								}  						}  					}  					else  					{  						_ring1[_s48] = _s20;    						if (_s28 + _s30 > 127)  						{  							_s30 = _s30 - 1;  							_s58 = Convert.ToInt32(_s30);  						}  						else  						{  							_s28 = _s28 + 1;  							_s58 = Convert.ToInt32(_s28);  						}    						_s38 = _s28 > 96 ? 96 : Convert.ToInt32(_s28);  						_s40 = _s30 < 32 ? 32 : Convert.ToInt32(_s30);  					}    					//----  					_s68 = 64;  					_s60 = Convert.ToInt32(_s68);    					while (_s68 > 1)  					{  						if (_list[_s60] >= _s20)  						{  							if (_list[_s60 - 1] <= _s20)  							{  								_s68 = 1;  							}  							else  							{  								_s68 = _s68 * 0.5;  								_s60 = _s60 - Convert.ToInt32(_s68);  							}  						}  						else  						{  							_s68 = _s68 * 0.5;  							_s60 = _s60 + Convert.ToInt32(_s68);  						}    						if ((_s60 == 127) && (_s20 > _list[127]))  							_s60 = 128;  					}    					if (_s70 > 127)  					{  						if (_s58 >= _s60)  						{  							if ((_s38 + 1 > _s60) && (_s40 - 1 < _s60))  							{  								_s18 = _s18 + _s20;  							}  							else  								if ((_s40 > _s60) && (_s40 - 1 < _s58))  									_s18 = _s18 + _list[_s40 - 1];  						}  						else  							if (_s40 >= _s60)  							{  								if ((_s38 + 1 < _s60) && (_s38 + 1 > _s58))  									_s18 = _s18 + _list[_s38 + 1];  							}  							else  								if (_s38 + 2 > _s60)  								{  									_s18 = _s18 + _s20;  								}  								else  									if ((_s38 + 1 < _s60) && (_s38 + 1 > _s58))  										_s18 = _s18 + _list[_s38 + 1];    						if (_s58 > _s60)  						{  							if ((_s40 - 1 < _s58) && (_s38 + 1 > _s58))  							{  								_s18 = _s18 - _list[_s58];  							}  							else  								if ((_s38 < _s58) && (_s38 + 1 > _s60))  									_s18 = _s18 - _list[_s38];  						}  						else  						{  							if ((_s38 + 1 > _s58) && (_s40 - 1 < _s58))  							{  								_s18 = _s18 - _list[_s58];  							}  							else  								if ((_s40 > _s58) && (_s40 < _s60))  									_s18 = _s18 - _list[_s40];  						}  					}    					if (_s58 <= _s60)  					{  						if (_s58 >= _s60)  						{  							_list[_s60] = _s20;  						}  						else  						{  							for (_jj = _s58 + 1; _jj <= _s60 - 1; _jj++)  							{  								_list[_jj - 1] = _list[_jj];  							}  							_list[_s60 - 1] = _s20;  						}  					}  					else  					{  						for (_jj = _s58 - 1; _jj >= _s60; _jj--)  						{  							_list[_jj + 1] = _list[_jj];  						}  						_list[_s60] = _s20;  					}    					if (_s70 <= 127)  					{  						_s18 = 0;  						for (_jj = _s40; _jj <= _s38; _jj++)  						{  							_s18 = _s18 + _list[_jj];  						}  					}    					_f60 = _s18 / (_s38 - _s40 + 1);    					if (_fF8 + 1 > 31)  					{  						_fF8 = 31;  					}  					else  						_fF8 = _fF8 + 1;    					//----  					if (_fF8 <= 30)  					{  						if (_f28 > 0)  						{  							_f18 = _f8;  						}  						else  							_f18 = _f8 - _f28 * _f90;    						if (_f48 < 0)  						{  							_f38 = _f8;  						}  						else  							_f38 = _f8 - _f48 * _f90;    						_fB8 = _series;    						if (_fF8 != 30)  						{  							continue;  						}    						if (_fF8 == 30)  						{  							_fC0 = _series;    							_v4 = Math.Max(Math.Ceiling(_f78)' 1);    							_fE8 = (int)Math.Ceiling(_v4);    							_v2 = Math.Max(Math.Floor(_f78)' 1);    							_fE0 = (int)Math.Ceiling(_v2);    							if (_fE8 == _fE0)  							{  								_f68 = 1;  							}  							else  							{  								_v4 = _fE8 - _fE0;  								_f68 = (_f78 - _fE0) / _v4;  							}    							_v5 = _fE0 <= 29 ? Convert.ToInt32(_fE0) : 29;    							_v6 = _fE8 <= 29 ? Convert.ToInt32(_fE8) : 29;    							_fA8 = (_series - _buffer[_fF0 - _v5]) * (1 - _f68) / _fE0 + (_series - _buffer[_fF0 - _v6]) * _f68 / _fE8;  						}  					}  					else  					{  						_v1 = Math.Min(_f98' Math.Pow(_fA0 / _f60' _f88));    						if (_v1 < 1)  						{  							_v2 = 1;  						}  						else  						{  							_v3 = Math.Min(_f98' Math.Pow(_fA0 / _f60' _f88));    							_v2 = _v3;  						}    						_f58 = _v2;  						_f70 = Math.Pow(_f90' Math.Sqrt(_f58));    						if (_f28 > 0)  						{  							_f18 = _f8;  						}  						else  						{  							_f18 = _f8 - _f28 * _f70;  						}    						if (_f48 < 0)  						{  							_f38 = _f8;  						}  						else  						{  							_f38 = _f8 - _f48 * _f70;  						}  					}  				}    				if (_fF8 > 30)  				{  					_f30 = Math.Pow(_f50' _f58);  					_fC0 = (1 - _f30) * _series + _f30 * _fC0;  					_fC8 = (_series - _fC0) * (1 - _f50) + _f50 * _fC8;  					_fD0 = _f10 * _fC8 + _fC0;  					_f20 = -_f30 * 2;  					_f40 = _f30 * _f30;  					_fB0 = _f20 + _f40 + 1;  					_fA8 = (_fD0 - _fB8) * _fB0 + _f40 * _fA8;  					_fB8 = _fB8 + _fA8;  				}    				lastValue = (decimal)_fB8;  			}
Magic Number,StockSharp.Algo.Indicators,JurikMovingAverage,C:\repos\stocksharp_stocksharp\Algo\Indicators\JurikMovingAverage.cs,OnProcess,The following statement contains a magic number: if (_fF0 > 30)  			{  				if (Length < 1.0000000002)  				{  					_f80 = 0.0000000001; //{1.0e-10}  				}  				else  				{  					_f80 = (Length - 1) / 2.0;  				}    				if (_phase < -100)  				{  					_f10 = 0.5;  				}  				else  				{  					if (_phase > 100)  					{  						_f10 = 2.5;  					}  					else  					{  						_f10 = (double)_phase / 100 + 1.5;  					}  				}    				_v1 = Math.Log(Math.Sqrt(_f80));  				_v2 = _v1;    				if (_v1 / Math.Log(2.0) + 2.0 < 0.0)  				{  					_v3 = 0;  				}  				else  				{  					_v3 = _v2 / Math.Log(2.0) + 2.0;  				}    				_f98 = _v3;    				//----  				if (0.5 <= _f98 - 2.0)  				{  					_f88 = _f98 - 2.0;  				}  				else  				{  					_f88 = 0.5;  				}    				_f78 = Math.Sqrt(_f80) * _f98;  				_f90 = _f78 / (_f78 + 1.0);  				_f80 = _f80 * 0.9;  				_f50 = _f80 / (_f80 + 2.0);    				//----  				if (_f0 != 0)  				{  					_f0 = 0;  					_v5 = 0;    					for (_ii = 1; _ii <= 29; _ii++)  					{  						if (_buffer[_ii + 1] != _buffer[_ii])  						{  							_v5 = 1;  						}  					}    					_fD8 = _v5 * 30;    					_f38 = _fD8 == 0 ? _series : _buffer[1];    					_f18 = _f38;    					if (_fD8 > 29)  						_fD8 = 29;  				}  				else  					_fD8 = 0;    				//----  				for (_ii = _fD8; _ii >= 0; _ii--)  				{  					//{ another bigcycle...}  					_value2 = 31 - _ii;    					_f8 = _ii == 0 ? _series : _buffer[_value2];    					_f28 = _f8 - _f18;  					_f48 = _f8 - _f38;    					_v2 = Math.Max(Math.Abs(_f28)' Math.Abs(_f48));    					_fA0 = _v2;  					_vv = _fA0 + 0.0000000001; //{1.0e-10;}    					//----  					if (_s48 <= 1)  					{  						_s48 = 127;  					}  					else  					{  						_s48 = _s48 - 1;  					}    					if (_s50 <= 1)  					{  						_s50 = 10;  					}  					else  					{  						_s50 = _s50 - 1;  					}    					if (_s70 < 128)  						_s70 = _s70 + 1;    					_s8 = _s8 + _vv - _ring2[_s50];  					_ring2[_s50] = _vv;    					if (_s70 > 10)  					{  						_s20 = _s8 / 10;  					}  					else  						_s20 = _s8 / _s70;    					//----  					if (_s70 > 127)  					{  						_s10 = _ring1[_s48];  						_ring1[_s48] = _s20;  						_s68 = 64;  						_s58 = Convert.ToInt32(_s68);    						while (_s68 > 1)  						{  							if (_list[_s58] < _s10)  							{  								_s68 = _s68 * 0.5;  								_s58 = _s58 + Convert.ToInt32(_s68);  							}  							else  								if (_list[_s58] <= _s10)  								{  									_s68 = 1;  								}  								else  								{  									_s68 = _s68 * 0.5;  									_s58 = _s58 - Convert.ToInt32(_s68);  								}  						}  					}  					else  					{  						_ring1[_s48] = _s20;    						if (_s28 + _s30 > 127)  						{  							_s30 = _s30 - 1;  							_s58 = Convert.ToInt32(_s30);  						}  						else  						{  							_s28 = _s28 + 1;  							_s58 = Convert.ToInt32(_s28);  						}    						_s38 = _s28 > 96 ? 96 : Convert.ToInt32(_s28);  						_s40 = _s30 < 32 ? 32 : Convert.ToInt32(_s30);  					}    					//----  					_s68 = 64;  					_s60 = Convert.ToInt32(_s68);    					while (_s68 > 1)  					{  						if (_list[_s60] >= _s20)  						{  							if (_list[_s60 - 1] <= _s20)  							{  								_s68 = 1;  							}  							else  							{  								_s68 = _s68 * 0.5;  								_s60 = _s60 - Convert.ToInt32(_s68);  							}  						}  						else  						{  							_s68 = _s68 * 0.5;  							_s60 = _s60 + Convert.ToInt32(_s68);  						}    						if ((_s60 == 127) && (_s20 > _list[127]))  							_s60 = 128;  					}    					if (_s70 > 127)  					{  						if (_s58 >= _s60)  						{  							if ((_s38 + 1 > _s60) && (_s40 - 1 < _s60))  							{  								_s18 = _s18 + _s20;  							}  							else  								if ((_s40 > _s60) && (_s40 - 1 < _s58))  									_s18 = _s18 + _list[_s40 - 1];  						}  						else  							if (_s40 >= _s60)  							{  								if ((_s38 + 1 < _s60) && (_s38 + 1 > _s58))  									_s18 = _s18 + _list[_s38 + 1];  							}  							else  								if (_s38 + 2 > _s60)  								{  									_s18 = _s18 + _s20;  								}  								else  									if ((_s38 + 1 < _s60) && (_s38 + 1 > _s58))  										_s18 = _s18 + _list[_s38 + 1];    						if (_s58 > _s60)  						{  							if ((_s40 - 1 < _s58) && (_s38 + 1 > _s58))  							{  								_s18 = _s18 - _list[_s58];  							}  							else  								if ((_s38 < _s58) && (_s38 + 1 > _s60))  									_s18 = _s18 - _list[_s38];  						}  						else  						{  							if ((_s38 + 1 > _s58) && (_s40 - 1 < _s58))  							{  								_s18 = _s18 - _list[_s58];  							}  							else  								if ((_s40 > _s58) && (_s40 < _s60))  									_s18 = _s18 - _list[_s40];  						}  					}    					if (_s58 <= _s60)  					{  						if (_s58 >= _s60)  						{  							_list[_s60] = _s20;  						}  						else  						{  							for (_jj = _s58 + 1; _jj <= _s60 - 1; _jj++)  							{  								_list[_jj - 1] = _list[_jj];  							}  							_list[_s60 - 1] = _s20;  						}  					}  					else  					{  						for (_jj = _s58 - 1; _jj >= _s60; _jj--)  						{  							_list[_jj + 1] = _list[_jj];  						}  						_list[_s60] = _s20;  					}    					if (_s70 <= 127)  					{  						_s18 = 0;  						for (_jj = _s40; _jj <= _s38; _jj++)  						{  							_s18 = _s18 + _list[_jj];  						}  					}    					_f60 = _s18 / (_s38 - _s40 + 1);    					if (_fF8 + 1 > 31)  					{  						_fF8 = 31;  					}  					else  						_fF8 = _fF8 + 1;    					//----  					if (_fF8 <= 30)  					{  						if (_f28 > 0)  						{  							_f18 = _f8;  						}  						else  							_f18 = _f8 - _f28 * _f90;    						if (_f48 < 0)  						{  							_f38 = _f8;  						}  						else  							_f38 = _f8 - _f48 * _f90;    						_fB8 = _series;    						if (_fF8 != 30)  						{  							continue;  						}    						if (_fF8 == 30)  						{  							_fC0 = _series;    							_v4 = Math.Max(Math.Ceiling(_f78)' 1);    							_fE8 = (int)Math.Ceiling(_v4);    							_v2 = Math.Max(Math.Floor(_f78)' 1);    							_fE0 = (int)Math.Ceiling(_v2);    							if (_fE8 == _fE0)  							{  								_f68 = 1;  							}  							else  							{  								_v4 = _fE8 - _fE0;  								_f68 = (_f78 - _fE0) / _v4;  							}    							_v5 = _fE0 <= 29 ? Convert.ToInt32(_fE0) : 29;    							_v6 = _fE8 <= 29 ? Convert.ToInt32(_fE8) : 29;    							_fA8 = (_series - _buffer[_fF0 - _v5]) * (1 - _f68) / _fE0 + (_series - _buffer[_fF0 - _v6]) * _f68 / _fE8;  						}  					}  					else  					{  						_v1 = Math.Min(_f98' Math.Pow(_fA0 / _f60' _f88));    						if (_v1 < 1)  						{  							_v2 = 1;  						}  						else  						{  							_v3 = Math.Min(_f98' Math.Pow(_fA0 / _f60' _f88));    							_v2 = _v3;  						}    						_f58 = _v2;  						_f70 = Math.Pow(_f90' Math.Sqrt(_f58));    						if (_f28 > 0)  						{  							_f18 = _f8;  						}  						else  						{  							_f18 = _f8 - _f28 * _f70;  						}    						if (_f48 < 0)  						{  							_f38 = _f8;  						}  						else  						{  							_f38 = _f8 - _f48 * _f70;  						}  					}  				}    				if (_fF8 > 30)  				{  					_f30 = Math.Pow(_f50' _f58);  					_fC0 = (1 - _f30) * _series + _f30 * _fC0;  					_fC8 = (_series - _fC0) * (1 - _f50) + _f50 * _fC8;  					_fD0 = _f10 * _fC8 + _fC0;  					_f20 = -_f30 * 2;  					_f40 = _f30 * _f30;  					_fB0 = _f20 + _f40 + 1;  					_fA8 = (_fD0 - _fB8) * _fB0 + _f40 * _fA8;  					_fB8 = _fB8 + _fA8;  				}    				lastValue = (decimal)_fB8;  			}
Magic Number,StockSharp.Algo.Indicators,JurikMovingAverage,C:\repos\stocksharp_stocksharp\Algo\Indicators\JurikMovingAverage.cs,OnProcess,The following statement contains a magic number: if (_fF0 > 30)  			{  				if (Length < 1.0000000002)  				{  					_f80 = 0.0000000001; //{1.0e-10}  				}  				else  				{  					_f80 = (Length - 1) / 2.0;  				}    				if (_phase < -100)  				{  					_f10 = 0.5;  				}  				else  				{  					if (_phase > 100)  					{  						_f10 = 2.5;  					}  					else  					{  						_f10 = (double)_phase / 100 + 1.5;  					}  				}    				_v1 = Math.Log(Math.Sqrt(_f80));  				_v2 = _v1;    				if (_v1 / Math.Log(2.0) + 2.0 < 0.0)  				{  					_v3 = 0;  				}  				else  				{  					_v3 = _v2 / Math.Log(2.0) + 2.0;  				}    				_f98 = _v3;    				//----  				if (0.5 <= _f98 - 2.0)  				{  					_f88 = _f98 - 2.0;  				}  				else  				{  					_f88 = 0.5;  				}    				_f78 = Math.Sqrt(_f80) * _f98;  				_f90 = _f78 / (_f78 + 1.0);  				_f80 = _f80 * 0.9;  				_f50 = _f80 / (_f80 + 2.0);    				//----  				if (_f0 != 0)  				{  					_f0 = 0;  					_v5 = 0;    					for (_ii = 1; _ii <= 29; _ii++)  					{  						if (_buffer[_ii + 1] != _buffer[_ii])  						{  							_v5 = 1;  						}  					}    					_fD8 = _v5 * 30;    					_f38 = _fD8 == 0 ? _series : _buffer[1];    					_f18 = _f38;    					if (_fD8 > 29)  						_fD8 = 29;  				}  				else  					_fD8 = 0;    				//----  				for (_ii = _fD8; _ii >= 0; _ii--)  				{  					//{ another bigcycle...}  					_value2 = 31 - _ii;    					_f8 = _ii == 0 ? _series : _buffer[_value2];    					_f28 = _f8 - _f18;  					_f48 = _f8 - _f38;    					_v2 = Math.Max(Math.Abs(_f28)' Math.Abs(_f48));    					_fA0 = _v2;  					_vv = _fA0 + 0.0000000001; //{1.0e-10;}    					//----  					if (_s48 <= 1)  					{  						_s48 = 127;  					}  					else  					{  						_s48 = _s48 - 1;  					}    					if (_s50 <= 1)  					{  						_s50 = 10;  					}  					else  					{  						_s50 = _s50 - 1;  					}    					if (_s70 < 128)  						_s70 = _s70 + 1;    					_s8 = _s8 + _vv - _ring2[_s50];  					_ring2[_s50] = _vv;    					if (_s70 > 10)  					{  						_s20 = _s8 / 10;  					}  					else  						_s20 = _s8 / _s70;    					//----  					if (_s70 > 127)  					{  						_s10 = _ring1[_s48];  						_ring1[_s48] = _s20;  						_s68 = 64;  						_s58 = Convert.ToInt32(_s68);    						while (_s68 > 1)  						{  							if (_list[_s58] < _s10)  							{  								_s68 = _s68 * 0.5;  								_s58 = _s58 + Convert.ToInt32(_s68);  							}  							else  								if (_list[_s58] <= _s10)  								{  									_s68 = 1;  								}  								else  								{  									_s68 = _s68 * 0.5;  									_s58 = _s58 - Convert.ToInt32(_s68);  								}  						}  					}  					else  					{  						_ring1[_s48] = _s20;    						if (_s28 + _s30 > 127)  						{  							_s30 = _s30 - 1;  							_s58 = Convert.ToInt32(_s30);  						}  						else  						{  							_s28 = _s28 + 1;  							_s58 = Convert.ToInt32(_s28);  						}    						_s38 = _s28 > 96 ? 96 : Convert.ToInt32(_s28);  						_s40 = _s30 < 32 ? 32 : Convert.ToInt32(_s30);  					}    					//----  					_s68 = 64;  					_s60 = Convert.ToInt32(_s68);    					while (_s68 > 1)  					{  						if (_list[_s60] >= _s20)  						{  							if (_list[_s60 - 1] <= _s20)  							{  								_s68 = 1;  							}  							else  							{  								_s68 = _s68 * 0.5;  								_s60 = _s60 - Convert.ToInt32(_s68);  							}  						}  						else  						{  							_s68 = _s68 * 0.5;  							_s60 = _s60 + Convert.ToInt32(_s68);  						}    						if ((_s60 == 127) && (_s20 > _list[127]))  							_s60 = 128;  					}    					if (_s70 > 127)  					{  						if (_s58 >= _s60)  						{  							if ((_s38 + 1 > _s60) && (_s40 - 1 < _s60))  							{  								_s18 = _s18 + _s20;  							}  							else  								if ((_s40 > _s60) && (_s40 - 1 < _s58))  									_s18 = _s18 + _list[_s40 - 1];  						}  						else  							if (_s40 >= _s60)  							{  								if ((_s38 + 1 < _s60) && (_s38 + 1 > _s58))  									_s18 = _s18 + _list[_s38 + 1];  							}  							else  								if (_s38 + 2 > _s60)  								{  									_s18 = _s18 + _s20;  								}  								else  									if ((_s38 + 1 < _s60) && (_s38 + 1 > _s58))  										_s18 = _s18 + _list[_s38 + 1];    						if (_s58 > _s60)  						{  							if ((_s40 - 1 < _s58) && (_s38 + 1 > _s58))  							{  								_s18 = _s18 - _list[_s58];  							}  							else  								if ((_s38 < _s58) && (_s38 + 1 > _s60))  									_s18 = _s18 - _list[_s38];  						}  						else  						{  							if ((_s38 + 1 > _s58) && (_s40 - 1 < _s58))  							{  								_s18 = _s18 - _list[_s58];  							}  							else  								if ((_s40 > _s58) && (_s40 < _s60))  									_s18 = _s18 - _list[_s40];  						}  					}    					if (_s58 <= _s60)  					{  						if (_s58 >= _s60)  						{  							_list[_s60] = _s20;  						}  						else  						{  							for (_jj = _s58 + 1; _jj <= _s60 - 1; _jj++)  							{  								_list[_jj - 1] = _list[_jj];  							}  							_list[_s60 - 1] = _s20;  						}  					}  					else  					{  						for (_jj = _s58 - 1; _jj >= _s60; _jj--)  						{  							_list[_jj + 1] = _list[_jj];  						}  						_list[_s60] = _s20;  					}    					if (_s70 <= 127)  					{  						_s18 = 0;  						for (_jj = _s40; _jj <= _s38; _jj++)  						{  							_s18 = _s18 + _list[_jj];  						}  					}    					_f60 = _s18 / (_s38 - _s40 + 1);    					if (_fF8 + 1 > 31)  					{  						_fF8 = 31;  					}  					else  						_fF8 = _fF8 + 1;    					//----  					if (_fF8 <= 30)  					{  						if (_f28 > 0)  						{  							_f18 = _f8;  						}  						else  							_f18 = _f8 - _f28 * _f90;    						if (_f48 < 0)  						{  							_f38 = _f8;  						}  						else  							_f38 = _f8 - _f48 * _f90;    						_fB8 = _series;    						if (_fF8 != 30)  						{  							continue;  						}    						if (_fF8 == 30)  						{  							_fC0 = _series;    							_v4 = Math.Max(Math.Ceiling(_f78)' 1);    							_fE8 = (int)Math.Ceiling(_v4);    							_v2 = Math.Max(Math.Floor(_f78)' 1);    							_fE0 = (int)Math.Ceiling(_v2);    							if (_fE8 == _fE0)  							{  								_f68 = 1;  							}  							else  							{  								_v4 = _fE8 - _fE0;  								_f68 = (_f78 - _fE0) / _v4;  							}    							_v5 = _fE0 <= 29 ? Convert.ToInt32(_fE0) : 29;    							_v6 = _fE8 <= 29 ? Convert.ToInt32(_fE8) : 29;    							_fA8 = (_series - _buffer[_fF0 - _v5]) * (1 - _f68) / _fE0 + (_series - _buffer[_fF0 - _v6]) * _f68 / _fE8;  						}  					}  					else  					{  						_v1 = Math.Min(_f98' Math.Pow(_fA0 / _f60' _f88));    						if (_v1 < 1)  						{  							_v2 = 1;  						}  						else  						{  							_v3 = Math.Min(_f98' Math.Pow(_fA0 / _f60' _f88));    							_v2 = _v3;  						}    						_f58 = _v2;  						_f70 = Math.Pow(_f90' Math.Sqrt(_f58));    						if (_f28 > 0)  						{  							_f18 = _f8;  						}  						else  						{  							_f18 = _f8 - _f28 * _f70;  						}    						if (_f48 < 0)  						{  							_f38 = _f8;  						}  						else  						{  							_f38 = _f8 - _f48 * _f70;  						}  					}  				}    				if (_fF8 > 30)  				{  					_f30 = Math.Pow(_f50' _f58);  					_fC0 = (1 - _f30) * _series + _f30 * _fC0;  					_fC8 = (_series - _fC0) * (1 - _f50) + _f50 * _fC8;  					_fD0 = _f10 * _fC8 + _fC0;  					_f20 = -_f30 * 2;  					_f40 = _f30 * _f30;  					_fB0 = _f20 + _f40 + 1;  					_fA8 = (_fD0 - _fB8) * _fB0 + _f40 * _fA8;  					_fB8 = _fB8 + _fA8;  				}    				lastValue = (decimal)_fB8;  			}
Magic Number,StockSharp.Algo.Indicators,JurikMovingAverage,C:\repos\stocksharp_stocksharp\Algo\Indicators\JurikMovingAverage.cs,OnProcess,The following statement contains a magic number: if (_fF0 > 30)  			{  				if (Length < 1.0000000002)  				{  					_f80 = 0.0000000001; //{1.0e-10}  				}  				else  				{  					_f80 = (Length - 1) / 2.0;  				}    				if (_phase < -100)  				{  					_f10 = 0.5;  				}  				else  				{  					if (_phase > 100)  					{  						_f10 = 2.5;  					}  					else  					{  						_f10 = (double)_phase / 100 + 1.5;  					}  				}    				_v1 = Math.Log(Math.Sqrt(_f80));  				_v2 = _v1;    				if (_v1 / Math.Log(2.0) + 2.0 < 0.0)  				{  					_v3 = 0;  				}  				else  				{  					_v3 = _v2 / Math.Log(2.0) + 2.0;  				}    				_f98 = _v3;    				//----  				if (0.5 <= _f98 - 2.0)  				{  					_f88 = _f98 - 2.0;  				}  				else  				{  					_f88 = 0.5;  				}    				_f78 = Math.Sqrt(_f80) * _f98;  				_f90 = _f78 / (_f78 + 1.0);  				_f80 = _f80 * 0.9;  				_f50 = _f80 / (_f80 + 2.0);    				//----  				if (_f0 != 0)  				{  					_f0 = 0;  					_v5 = 0;    					for (_ii = 1; _ii <= 29; _ii++)  					{  						if (_buffer[_ii + 1] != _buffer[_ii])  						{  							_v5 = 1;  						}  					}    					_fD8 = _v5 * 30;    					_f38 = _fD8 == 0 ? _series : _buffer[1];    					_f18 = _f38;    					if (_fD8 > 29)  						_fD8 = 29;  				}  				else  					_fD8 = 0;    				//----  				for (_ii = _fD8; _ii >= 0; _ii--)  				{  					//{ another bigcycle...}  					_value2 = 31 - _ii;    					_f8 = _ii == 0 ? _series : _buffer[_value2];    					_f28 = _f8 - _f18;  					_f48 = _f8 - _f38;    					_v2 = Math.Max(Math.Abs(_f28)' Math.Abs(_f48));    					_fA0 = _v2;  					_vv = _fA0 + 0.0000000001; //{1.0e-10;}    					//----  					if (_s48 <= 1)  					{  						_s48 = 127;  					}  					else  					{  						_s48 = _s48 - 1;  					}    					if (_s50 <= 1)  					{  						_s50 = 10;  					}  					else  					{  						_s50 = _s50 - 1;  					}    					if (_s70 < 128)  						_s70 = _s70 + 1;    					_s8 = _s8 + _vv - _ring2[_s50];  					_ring2[_s50] = _vv;    					if (_s70 > 10)  					{  						_s20 = _s8 / 10;  					}  					else  						_s20 = _s8 / _s70;    					//----  					if (_s70 > 127)  					{  						_s10 = _ring1[_s48];  						_ring1[_s48] = _s20;  						_s68 = 64;  						_s58 = Convert.ToInt32(_s68);    						while (_s68 > 1)  						{  							if (_list[_s58] < _s10)  							{  								_s68 = _s68 * 0.5;  								_s58 = _s58 + Convert.ToInt32(_s68);  							}  							else  								if (_list[_s58] <= _s10)  								{  									_s68 = 1;  								}  								else  								{  									_s68 = _s68 * 0.5;  									_s58 = _s58 - Convert.ToInt32(_s68);  								}  						}  					}  					else  					{  						_ring1[_s48] = _s20;    						if (_s28 + _s30 > 127)  						{  							_s30 = _s30 - 1;  							_s58 = Convert.ToInt32(_s30);  						}  						else  						{  							_s28 = _s28 + 1;  							_s58 = Convert.ToInt32(_s28);  						}    						_s38 = _s28 > 96 ? 96 : Convert.ToInt32(_s28);  						_s40 = _s30 < 32 ? 32 : Convert.ToInt32(_s30);  					}    					//----  					_s68 = 64;  					_s60 = Convert.ToInt32(_s68);    					while (_s68 > 1)  					{  						if (_list[_s60] >= _s20)  						{  							if (_list[_s60 - 1] <= _s20)  							{  								_s68 = 1;  							}  							else  							{  								_s68 = _s68 * 0.5;  								_s60 = _s60 - Convert.ToInt32(_s68);  							}  						}  						else  						{  							_s68 = _s68 * 0.5;  							_s60 = _s60 + Convert.ToInt32(_s68);  						}    						if ((_s60 == 127) && (_s20 > _list[127]))  							_s60 = 128;  					}    					if (_s70 > 127)  					{  						if (_s58 >= _s60)  						{  							if ((_s38 + 1 > _s60) && (_s40 - 1 < _s60))  							{  								_s18 = _s18 + _s20;  							}  							else  								if ((_s40 > _s60) && (_s40 - 1 < _s58))  									_s18 = _s18 + _list[_s40 - 1];  						}  						else  							if (_s40 >= _s60)  							{  								if ((_s38 + 1 < _s60) && (_s38 + 1 > _s58))  									_s18 = _s18 + _list[_s38 + 1];  							}  							else  								if (_s38 + 2 > _s60)  								{  									_s18 = _s18 + _s20;  								}  								else  									if ((_s38 + 1 < _s60) && (_s38 + 1 > _s58))  										_s18 = _s18 + _list[_s38 + 1];    						if (_s58 > _s60)  						{  							if ((_s40 - 1 < _s58) && (_s38 + 1 > _s58))  							{  								_s18 = _s18 - _list[_s58];  							}  							else  								if ((_s38 < _s58) && (_s38 + 1 > _s60))  									_s18 = _s18 - _list[_s38];  						}  						else  						{  							if ((_s38 + 1 > _s58) && (_s40 - 1 < _s58))  							{  								_s18 = _s18 - _list[_s58];  							}  							else  								if ((_s40 > _s58) && (_s40 < _s60))  									_s18 = _s18 - _list[_s40];  						}  					}    					if (_s58 <= _s60)  					{  						if (_s58 >= _s60)  						{  							_list[_s60] = _s20;  						}  						else  						{  							for (_jj = _s58 + 1; _jj <= _s60 - 1; _jj++)  							{  								_list[_jj - 1] = _list[_jj];  							}  							_list[_s60 - 1] = _s20;  						}  					}  					else  					{  						for (_jj = _s58 - 1; _jj >= _s60; _jj--)  						{  							_list[_jj + 1] = _list[_jj];  						}  						_list[_s60] = _s20;  					}    					if (_s70 <= 127)  					{  						_s18 = 0;  						for (_jj = _s40; _jj <= _s38; _jj++)  						{  							_s18 = _s18 + _list[_jj];  						}  					}    					_f60 = _s18 / (_s38 - _s40 + 1);    					if (_fF8 + 1 > 31)  					{  						_fF8 = 31;  					}  					else  						_fF8 = _fF8 + 1;    					//----  					if (_fF8 <= 30)  					{  						if (_f28 > 0)  						{  							_f18 = _f8;  						}  						else  							_f18 = _f8 - _f28 * _f90;    						if (_f48 < 0)  						{  							_f38 = _f8;  						}  						else  							_f38 = _f8 - _f48 * _f90;    						_fB8 = _series;    						if (_fF8 != 30)  						{  							continue;  						}    						if (_fF8 == 30)  						{  							_fC0 = _series;    							_v4 = Math.Max(Math.Ceiling(_f78)' 1);    							_fE8 = (int)Math.Ceiling(_v4);    							_v2 = Math.Max(Math.Floor(_f78)' 1);    							_fE0 = (int)Math.Ceiling(_v2);    							if (_fE8 == _fE0)  							{  								_f68 = 1;  							}  							else  							{  								_v4 = _fE8 - _fE0;  								_f68 = (_f78 - _fE0) / _v4;  							}    							_v5 = _fE0 <= 29 ? Convert.ToInt32(_fE0) : 29;    							_v6 = _fE8 <= 29 ? Convert.ToInt32(_fE8) : 29;    							_fA8 = (_series - _buffer[_fF0 - _v5]) * (1 - _f68) / _fE0 + (_series - _buffer[_fF0 - _v6]) * _f68 / _fE8;  						}  					}  					else  					{  						_v1 = Math.Min(_f98' Math.Pow(_fA0 / _f60' _f88));    						if (_v1 < 1)  						{  							_v2 = 1;  						}  						else  						{  							_v3 = Math.Min(_f98' Math.Pow(_fA0 / _f60' _f88));    							_v2 = _v3;  						}    						_f58 = _v2;  						_f70 = Math.Pow(_f90' Math.Sqrt(_f58));    						if (_f28 > 0)  						{  							_f18 = _f8;  						}  						else  						{  							_f18 = _f8 - _f28 * _f70;  						}    						if (_f48 < 0)  						{  							_f38 = _f8;  						}  						else  						{  							_f38 = _f8 - _f48 * _f70;  						}  					}  				}    				if (_fF8 > 30)  				{  					_f30 = Math.Pow(_f50' _f58);  					_fC0 = (1 - _f30) * _series + _f30 * _fC0;  					_fC8 = (_series - _fC0) * (1 - _f50) + _f50 * _fC8;  					_fD0 = _f10 * _fC8 + _fC0;  					_f20 = -_f30 * 2;  					_f40 = _f30 * _f30;  					_fB0 = _f20 + _f40 + 1;  					_fA8 = (_fD0 - _fB8) * _fB0 + _f40 * _fA8;  					_fB8 = _fB8 + _fA8;  				}    				lastValue = (decimal)_fB8;  			}
Magic Number,StockSharp.Algo.Indicators,JurikMovingAverage,C:\repos\stocksharp_stocksharp\Algo\Indicators\JurikMovingAverage.cs,OnProcess,The following statement contains a magic number: if (_fF0 > 30)  			{  				if (Length < 1.0000000002)  				{  					_f80 = 0.0000000001; //{1.0e-10}  				}  				else  				{  					_f80 = (Length - 1) / 2.0;  				}    				if (_phase < -100)  				{  					_f10 = 0.5;  				}  				else  				{  					if (_phase > 100)  					{  						_f10 = 2.5;  					}  					else  					{  						_f10 = (double)_phase / 100 + 1.5;  					}  				}    				_v1 = Math.Log(Math.Sqrt(_f80));  				_v2 = _v1;    				if (_v1 / Math.Log(2.0) + 2.0 < 0.0)  				{  					_v3 = 0;  				}  				else  				{  					_v3 = _v2 / Math.Log(2.0) + 2.0;  				}    				_f98 = _v3;    				//----  				if (0.5 <= _f98 - 2.0)  				{  					_f88 = _f98 - 2.0;  				}  				else  				{  					_f88 = 0.5;  				}    				_f78 = Math.Sqrt(_f80) * _f98;  				_f90 = _f78 / (_f78 + 1.0);  				_f80 = _f80 * 0.9;  				_f50 = _f80 / (_f80 + 2.0);    				//----  				if (_f0 != 0)  				{  					_f0 = 0;  					_v5 = 0;    					for (_ii = 1; _ii <= 29; _ii++)  					{  						if (_buffer[_ii + 1] != _buffer[_ii])  						{  							_v5 = 1;  						}  					}    					_fD8 = _v5 * 30;    					_f38 = _fD8 == 0 ? _series : _buffer[1];    					_f18 = _f38;    					if (_fD8 > 29)  						_fD8 = 29;  				}  				else  					_fD8 = 0;    				//----  				for (_ii = _fD8; _ii >= 0; _ii--)  				{  					//{ another bigcycle...}  					_value2 = 31 - _ii;    					_f8 = _ii == 0 ? _series : _buffer[_value2];    					_f28 = _f8 - _f18;  					_f48 = _f8 - _f38;    					_v2 = Math.Max(Math.Abs(_f28)' Math.Abs(_f48));    					_fA0 = _v2;  					_vv = _fA0 + 0.0000000001; //{1.0e-10;}    					//----  					if (_s48 <= 1)  					{  						_s48 = 127;  					}  					else  					{  						_s48 = _s48 - 1;  					}    					if (_s50 <= 1)  					{  						_s50 = 10;  					}  					else  					{  						_s50 = _s50 - 1;  					}    					if (_s70 < 128)  						_s70 = _s70 + 1;    					_s8 = _s8 + _vv - _ring2[_s50];  					_ring2[_s50] = _vv;    					if (_s70 > 10)  					{  						_s20 = _s8 / 10;  					}  					else  						_s20 = _s8 / _s70;    					//----  					if (_s70 > 127)  					{  						_s10 = _ring1[_s48];  						_ring1[_s48] = _s20;  						_s68 = 64;  						_s58 = Convert.ToInt32(_s68);    						while (_s68 > 1)  						{  							if (_list[_s58] < _s10)  							{  								_s68 = _s68 * 0.5;  								_s58 = _s58 + Convert.ToInt32(_s68);  							}  							else  								if (_list[_s58] <= _s10)  								{  									_s68 = 1;  								}  								else  								{  									_s68 = _s68 * 0.5;  									_s58 = _s58 - Convert.ToInt32(_s68);  								}  						}  					}  					else  					{  						_ring1[_s48] = _s20;    						if (_s28 + _s30 > 127)  						{  							_s30 = _s30 - 1;  							_s58 = Convert.ToInt32(_s30);  						}  						else  						{  							_s28 = _s28 + 1;  							_s58 = Convert.ToInt32(_s28);  						}    						_s38 = _s28 > 96 ? 96 : Convert.ToInt32(_s28);  						_s40 = _s30 < 32 ? 32 : Convert.ToInt32(_s30);  					}    					//----  					_s68 = 64;  					_s60 = Convert.ToInt32(_s68);    					while (_s68 > 1)  					{  						if (_list[_s60] >= _s20)  						{  							if (_list[_s60 - 1] <= _s20)  							{  								_s68 = 1;  							}  							else  							{  								_s68 = _s68 * 0.5;  								_s60 = _s60 - Convert.ToInt32(_s68);  							}  						}  						else  						{  							_s68 = _s68 * 0.5;  							_s60 = _s60 + Convert.ToInt32(_s68);  						}    						if ((_s60 == 127) && (_s20 > _list[127]))  							_s60 = 128;  					}    					if (_s70 > 127)  					{  						if (_s58 >= _s60)  						{  							if ((_s38 + 1 > _s60) && (_s40 - 1 < _s60))  							{  								_s18 = _s18 + _s20;  							}  							else  								if ((_s40 > _s60) && (_s40 - 1 < _s58))  									_s18 = _s18 + _list[_s40 - 1];  						}  						else  							if (_s40 >= _s60)  							{  								if ((_s38 + 1 < _s60) && (_s38 + 1 > _s58))  									_s18 = _s18 + _list[_s38 + 1];  							}  							else  								if (_s38 + 2 > _s60)  								{  									_s18 = _s18 + _s20;  								}  								else  									if ((_s38 + 1 < _s60) && (_s38 + 1 > _s58))  										_s18 = _s18 + _list[_s38 + 1];    						if (_s58 > _s60)  						{  							if ((_s40 - 1 < _s58) && (_s38 + 1 > _s58))  							{  								_s18 = _s18 - _list[_s58];  							}  							else  								if ((_s38 < _s58) && (_s38 + 1 > _s60))  									_s18 = _s18 - _list[_s38];  						}  						else  						{  							if ((_s38 + 1 > _s58) && (_s40 - 1 < _s58))  							{  								_s18 = _s18 - _list[_s58];  							}  							else  								if ((_s40 > _s58) && (_s40 < _s60))  									_s18 = _s18 - _list[_s40];  						}  					}    					if (_s58 <= _s60)  					{  						if (_s58 >= _s60)  						{  							_list[_s60] = _s20;  						}  						else  						{  							for (_jj = _s58 + 1; _jj <= _s60 - 1; _jj++)  							{  								_list[_jj - 1] = _list[_jj];  							}  							_list[_s60 - 1] = _s20;  						}  					}  					else  					{  						for (_jj = _s58 - 1; _jj >= _s60; _jj--)  						{  							_list[_jj + 1] = _list[_jj];  						}  						_list[_s60] = _s20;  					}    					if (_s70 <= 127)  					{  						_s18 = 0;  						for (_jj = _s40; _jj <= _s38; _jj++)  						{  							_s18 = _s18 + _list[_jj];  						}  					}    					_f60 = _s18 / (_s38 - _s40 + 1);    					if (_fF8 + 1 > 31)  					{  						_fF8 = 31;  					}  					else  						_fF8 = _fF8 + 1;    					//----  					if (_fF8 <= 30)  					{  						if (_f28 > 0)  						{  							_f18 = _f8;  						}  						else  							_f18 = _f8 - _f28 * _f90;    						if (_f48 < 0)  						{  							_f38 = _f8;  						}  						else  							_f38 = _f8 - _f48 * _f90;    						_fB8 = _series;    						if (_fF8 != 30)  						{  							continue;  						}    						if (_fF8 == 30)  						{  							_fC0 = _series;    							_v4 = Math.Max(Math.Ceiling(_f78)' 1);    							_fE8 = (int)Math.Ceiling(_v4);    							_v2 = Math.Max(Math.Floor(_f78)' 1);    							_fE0 = (int)Math.Ceiling(_v2);    							if (_fE8 == _fE0)  							{  								_f68 = 1;  							}  							else  							{  								_v4 = _fE8 - _fE0;  								_f68 = (_f78 - _fE0) / _v4;  							}    							_v5 = _fE0 <= 29 ? Convert.ToInt32(_fE0) : 29;    							_v6 = _fE8 <= 29 ? Convert.ToInt32(_fE8) : 29;    							_fA8 = (_series - _buffer[_fF0 - _v5]) * (1 - _f68) / _fE0 + (_series - _buffer[_fF0 - _v6]) * _f68 / _fE8;  						}  					}  					else  					{  						_v1 = Math.Min(_f98' Math.Pow(_fA0 / _f60' _f88));    						if (_v1 < 1)  						{  							_v2 = 1;  						}  						else  						{  							_v3 = Math.Min(_f98' Math.Pow(_fA0 / _f60' _f88));    							_v2 = _v3;  						}    						_f58 = _v2;  						_f70 = Math.Pow(_f90' Math.Sqrt(_f58));    						if (_f28 > 0)  						{  							_f18 = _f8;  						}  						else  						{  							_f18 = _f8 - _f28 * _f70;  						}    						if (_f48 < 0)  						{  							_f38 = _f8;  						}  						else  						{  							_f38 = _f8 - _f48 * _f70;  						}  					}  				}    				if (_fF8 > 30)  				{  					_f30 = Math.Pow(_f50' _f58);  					_fC0 = (1 - _f30) * _series + _f30 * _fC0;  					_fC8 = (_series - _fC0) * (1 - _f50) + _f50 * _fC8;  					_fD0 = _f10 * _fC8 + _fC0;  					_f20 = -_f30 * 2;  					_f40 = _f30 * _f30;  					_fB0 = _f20 + _f40 + 1;  					_fA8 = (_fD0 - _fB8) * _fB0 + _f40 * _fA8;  					_fB8 = _fB8 + _fA8;  				}    				lastValue = (decimal)_fB8;  			}
Magic Number,StockSharp.Algo.Indicators,JurikMovingAverage,C:\repos\stocksharp_stocksharp\Algo\Indicators\JurikMovingAverage.cs,OnProcess,The following statement contains a magic number: if (_fF0 > 30)  			{  				if (Length < 1.0000000002)  				{  					_f80 = 0.0000000001; //{1.0e-10}  				}  				else  				{  					_f80 = (Length - 1) / 2.0;  				}    				if (_phase < -100)  				{  					_f10 = 0.5;  				}  				else  				{  					if (_phase > 100)  					{  						_f10 = 2.5;  					}  					else  					{  						_f10 = (double)_phase / 100 + 1.5;  					}  				}    				_v1 = Math.Log(Math.Sqrt(_f80));  				_v2 = _v1;    				if (_v1 / Math.Log(2.0) + 2.0 < 0.0)  				{  					_v3 = 0;  				}  				else  				{  					_v3 = _v2 / Math.Log(2.0) + 2.0;  				}    				_f98 = _v3;    				//----  				if (0.5 <= _f98 - 2.0)  				{  					_f88 = _f98 - 2.0;  				}  				else  				{  					_f88 = 0.5;  				}    				_f78 = Math.Sqrt(_f80) * _f98;  				_f90 = _f78 / (_f78 + 1.0);  				_f80 = _f80 * 0.9;  				_f50 = _f80 / (_f80 + 2.0);    				//----  				if (_f0 != 0)  				{  					_f0 = 0;  					_v5 = 0;    					for (_ii = 1; _ii <= 29; _ii++)  					{  						if (_buffer[_ii + 1] != _buffer[_ii])  						{  							_v5 = 1;  						}  					}    					_fD8 = _v5 * 30;    					_f38 = _fD8 == 0 ? _series : _buffer[1];    					_f18 = _f38;    					if (_fD8 > 29)  						_fD8 = 29;  				}  				else  					_fD8 = 0;    				//----  				for (_ii = _fD8; _ii >= 0; _ii--)  				{  					//{ another bigcycle...}  					_value2 = 31 - _ii;    					_f8 = _ii == 0 ? _series : _buffer[_value2];    					_f28 = _f8 - _f18;  					_f48 = _f8 - _f38;    					_v2 = Math.Max(Math.Abs(_f28)' Math.Abs(_f48));    					_fA0 = _v2;  					_vv = _fA0 + 0.0000000001; //{1.0e-10;}    					//----  					if (_s48 <= 1)  					{  						_s48 = 127;  					}  					else  					{  						_s48 = _s48 - 1;  					}    					if (_s50 <= 1)  					{  						_s50 = 10;  					}  					else  					{  						_s50 = _s50 - 1;  					}    					if (_s70 < 128)  						_s70 = _s70 + 1;    					_s8 = _s8 + _vv - _ring2[_s50];  					_ring2[_s50] = _vv;    					if (_s70 > 10)  					{  						_s20 = _s8 / 10;  					}  					else  						_s20 = _s8 / _s70;    					//----  					if (_s70 > 127)  					{  						_s10 = _ring1[_s48];  						_ring1[_s48] = _s20;  						_s68 = 64;  						_s58 = Convert.ToInt32(_s68);    						while (_s68 > 1)  						{  							if (_list[_s58] < _s10)  							{  								_s68 = _s68 * 0.5;  								_s58 = _s58 + Convert.ToInt32(_s68);  							}  							else  								if (_list[_s58] <= _s10)  								{  									_s68 = 1;  								}  								else  								{  									_s68 = _s68 * 0.5;  									_s58 = _s58 - Convert.ToInt32(_s68);  								}  						}  					}  					else  					{  						_ring1[_s48] = _s20;    						if (_s28 + _s30 > 127)  						{  							_s30 = _s30 - 1;  							_s58 = Convert.ToInt32(_s30);  						}  						else  						{  							_s28 = _s28 + 1;  							_s58 = Convert.ToInt32(_s28);  						}    						_s38 = _s28 > 96 ? 96 : Convert.ToInt32(_s28);  						_s40 = _s30 < 32 ? 32 : Convert.ToInt32(_s30);  					}    					//----  					_s68 = 64;  					_s60 = Convert.ToInt32(_s68);    					while (_s68 > 1)  					{  						if (_list[_s60] >= _s20)  						{  							if (_list[_s60 - 1] <= _s20)  							{  								_s68 = 1;  							}  							else  							{  								_s68 = _s68 * 0.5;  								_s60 = _s60 - Convert.ToInt32(_s68);  							}  						}  						else  						{  							_s68 = _s68 * 0.5;  							_s60 = _s60 + Convert.ToInt32(_s68);  						}    						if ((_s60 == 127) && (_s20 > _list[127]))  							_s60 = 128;  					}    					if (_s70 > 127)  					{  						if (_s58 >= _s60)  						{  							if ((_s38 + 1 > _s60) && (_s40 - 1 < _s60))  							{  								_s18 = _s18 + _s20;  							}  							else  								if ((_s40 > _s60) && (_s40 - 1 < _s58))  									_s18 = _s18 + _list[_s40 - 1];  						}  						else  							if (_s40 >= _s60)  							{  								if ((_s38 + 1 < _s60) && (_s38 + 1 > _s58))  									_s18 = _s18 + _list[_s38 + 1];  							}  							else  								if (_s38 + 2 > _s60)  								{  									_s18 = _s18 + _s20;  								}  								else  									if ((_s38 + 1 < _s60) && (_s38 + 1 > _s58))  										_s18 = _s18 + _list[_s38 + 1];    						if (_s58 > _s60)  						{  							if ((_s40 - 1 < _s58) && (_s38 + 1 > _s58))  							{  								_s18 = _s18 - _list[_s58];  							}  							else  								if ((_s38 < _s58) && (_s38 + 1 > _s60))  									_s18 = _s18 - _list[_s38];  						}  						else  						{  							if ((_s38 + 1 > _s58) && (_s40 - 1 < _s58))  							{  								_s18 = _s18 - _list[_s58];  							}  							else  								if ((_s40 > _s58) && (_s40 < _s60))  									_s18 = _s18 - _list[_s40];  						}  					}    					if (_s58 <= _s60)  					{  						if (_s58 >= _s60)  						{  							_list[_s60] = _s20;  						}  						else  						{  							for (_jj = _s58 + 1; _jj <= _s60 - 1; _jj++)  							{  								_list[_jj - 1] = _list[_jj];  							}  							_list[_s60 - 1] = _s20;  						}  					}  					else  					{  						for (_jj = _s58 - 1; _jj >= _s60; _jj--)  						{  							_list[_jj + 1] = _list[_jj];  						}  						_list[_s60] = _s20;  					}    					if (_s70 <= 127)  					{  						_s18 = 0;  						for (_jj = _s40; _jj <= _s38; _jj++)  						{  							_s18 = _s18 + _list[_jj];  						}  					}    					_f60 = _s18 / (_s38 - _s40 + 1);    					if (_fF8 + 1 > 31)  					{  						_fF8 = 31;  					}  					else  						_fF8 = _fF8 + 1;    					//----  					if (_fF8 <= 30)  					{  						if (_f28 > 0)  						{  							_f18 = _f8;  						}  						else  							_f18 = _f8 - _f28 * _f90;    						if (_f48 < 0)  						{  							_f38 = _f8;  						}  						else  							_f38 = _f8 - _f48 * _f90;    						_fB8 = _series;    						if (_fF8 != 30)  						{  							continue;  						}    						if (_fF8 == 30)  						{  							_fC0 = _series;    							_v4 = Math.Max(Math.Ceiling(_f78)' 1);    							_fE8 = (int)Math.Ceiling(_v4);    							_v2 = Math.Max(Math.Floor(_f78)' 1);    							_fE0 = (int)Math.Ceiling(_v2);    							if (_fE8 == _fE0)  							{  								_f68 = 1;  							}  							else  							{  								_v4 = _fE8 - _fE0;  								_f68 = (_f78 - _fE0) / _v4;  							}    							_v5 = _fE0 <= 29 ? Convert.ToInt32(_fE0) : 29;    							_v6 = _fE8 <= 29 ? Convert.ToInt32(_fE8) : 29;    							_fA8 = (_series - _buffer[_fF0 - _v5]) * (1 - _f68) / _fE0 + (_series - _buffer[_fF0 - _v6]) * _f68 / _fE8;  						}  					}  					else  					{  						_v1 = Math.Min(_f98' Math.Pow(_fA0 / _f60' _f88));    						if (_v1 < 1)  						{  							_v2 = 1;  						}  						else  						{  							_v3 = Math.Min(_f98' Math.Pow(_fA0 / _f60' _f88));    							_v2 = _v3;  						}    						_f58 = _v2;  						_f70 = Math.Pow(_f90' Math.Sqrt(_f58));    						if (_f28 > 0)  						{  							_f18 = _f8;  						}  						else  						{  							_f18 = _f8 - _f28 * _f70;  						}    						if (_f48 < 0)  						{  							_f38 = _f8;  						}  						else  						{  							_f38 = _f8 - _f48 * _f70;  						}  					}  				}    				if (_fF8 > 30)  				{  					_f30 = Math.Pow(_f50' _f58);  					_fC0 = (1 - _f30) * _series + _f30 * _fC0;  					_fC8 = (_series - _fC0) * (1 - _f50) + _f50 * _fC8;  					_fD0 = _f10 * _fC8 + _fC0;  					_f20 = -_f30 * 2;  					_f40 = _f30 * _f30;  					_fB0 = _f20 + _f40 + 1;  					_fA8 = (_fD0 - _fB8) * _fB0 + _f40 * _fA8;  					_fB8 = _fB8 + _fA8;  				}    				lastValue = (decimal)_fB8;  			}
Magic Number,StockSharp.Algo.Indicators,JurikMovingAverage,C:\repos\stocksharp_stocksharp\Algo\Indicators\JurikMovingAverage.cs,OnProcess,The following statement contains a magic number: if (_fF0 > 30)  			{  				if (Length < 1.0000000002)  				{  					_f80 = 0.0000000001; //{1.0e-10}  				}  				else  				{  					_f80 = (Length - 1) / 2.0;  				}    				if (_phase < -100)  				{  					_f10 = 0.5;  				}  				else  				{  					if (_phase > 100)  					{  						_f10 = 2.5;  					}  					else  					{  						_f10 = (double)_phase / 100 + 1.5;  					}  				}    				_v1 = Math.Log(Math.Sqrt(_f80));  				_v2 = _v1;    				if (_v1 / Math.Log(2.0) + 2.0 < 0.0)  				{  					_v3 = 0;  				}  				else  				{  					_v3 = _v2 / Math.Log(2.0) + 2.0;  				}    				_f98 = _v3;    				//----  				if (0.5 <= _f98 - 2.0)  				{  					_f88 = _f98 - 2.0;  				}  				else  				{  					_f88 = 0.5;  				}    				_f78 = Math.Sqrt(_f80) * _f98;  				_f90 = _f78 / (_f78 + 1.0);  				_f80 = _f80 * 0.9;  				_f50 = _f80 / (_f80 + 2.0);    				//----  				if (_f0 != 0)  				{  					_f0 = 0;  					_v5 = 0;    					for (_ii = 1; _ii <= 29; _ii++)  					{  						if (_buffer[_ii + 1] != _buffer[_ii])  						{  							_v5 = 1;  						}  					}    					_fD8 = _v5 * 30;    					_f38 = _fD8 == 0 ? _series : _buffer[1];    					_f18 = _f38;    					if (_fD8 > 29)  						_fD8 = 29;  				}  				else  					_fD8 = 0;    				//----  				for (_ii = _fD8; _ii >= 0; _ii--)  				{  					//{ another bigcycle...}  					_value2 = 31 - _ii;    					_f8 = _ii == 0 ? _series : _buffer[_value2];    					_f28 = _f8 - _f18;  					_f48 = _f8 - _f38;    					_v2 = Math.Max(Math.Abs(_f28)' Math.Abs(_f48));    					_fA0 = _v2;  					_vv = _fA0 + 0.0000000001; //{1.0e-10;}    					//----  					if (_s48 <= 1)  					{  						_s48 = 127;  					}  					else  					{  						_s48 = _s48 - 1;  					}    					if (_s50 <= 1)  					{  						_s50 = 10;  					}  					else  					{  						_s50 = _s50 - 1;  					}    					if (_s70 < 128)  						_s70 = _s70 + 1;    					_s8 = _s8 + _vv - _ring2[_s50];  					_ring2[_s50] = _vv;    					if (_s70 > 10)  					{  						_s20 = _s8 / 10;  					}  					else  						_s20 = _s8 / _s70;    					//----  					if (_s70 > 127)  					{  						_s10 = _ring1[_s48];  						_ring1[_s48] = _s20;  						_s68 = 64;  						_s58 = Convert.ToInt32(_s68);    						while (_s68 > 1)  						{  							if (_list[_s58] < _s10)  							{  								_s68 = _s68 * 0.5;  								_s58 = _s58 + Convert.ToInt32(_s68);  							}  							else  								if (_list[_s58] <= _s10)  								{  									_s68 = 1;  								}  								else  								{  									_s68 = _s68 * 0.5;  									_s58 = _s58 - Convert.ToInt32(_s68);  								}  						}  					}  					else  					{  						_ring1[_s48] = _s20;    						if (_s28 + _s30 > 127)  						{  							_s30 = _s30 - 1;  							_s58 = Convert.ToInt32(_s30);  						}  						else  						{  							_s28 = _s28 + 1;  							_s58 = Convert.ToInt32(_s28);  						}    						_s38 = _s28 > 96 ? 96 : Convert.ToInt32(_s28);  						_s40 = _s30 < 32 ? 32 : Convert.ToInt32(_s30);  					}    					//----  					_s68 = 64;  					_s60 = Convert.ToInt32(_s68);    					while (_s68 > 1)  					{  						if (_list[_s60] >= _s20)  						{  							if (_list[_s60 - 1] <= _s20)  							{  								_s68 = 1;  							}  							else  							{  								_s68 = _s68 * 0.5;  								_s60 = _s60 - Convert.ToInt32(_s68);  							}  						}  						else  						{  							_s68 = _s68 * 0.5;  							_s60 = _s60 + Convert.ToInt32(_s68);  						}    						if ((_s60 == 127) && (_s20 > _list[127]))  							_s60 = 128;  					}    					if (_s70 > 127)  					{  						if (_s58 >= _s60)  						{  							if ((_s38 + 1 > _s60) && (_s40 - 1 < _s60))  							{  								_s18 = _s18 + _s20;  							}  							else  								if ((_s40 > _s60) && (_s40 - 1 < _s58))  									_s18 = _s18 + _list[_s40 - 1];  						}  						else  							if (_s40 >= _s60)  							{  								if ((_s38 + 1 < _s60) && (_s38 + 1 > _s58))  									_s18 = _s18 + _list[_s38 + 1];  							}  							else  								if (_s38 + 2 > _s60)  								{  									_s18 = _s18 + _s20;  								}  								else  									if ((_s38 + 1 < _s60) && (_s38 + 1 > _s58))  										_s18 = _s18 + _list[_s38 + 1];    						if (_s58 > _s60)  						{  							if ((_s40 - 1 < _s58) && (_s38 + 1 > _s58))  							{  								_s18 = _s18 - _list[_s58];  							}  							else  								if ((_s38 < _s58) && (_s38 + 1 > _s60))  									_s18 = _s18 - _list[_s38];  						}  						else  						{  							if ((_s38 + 1 > _s58) && (_s40 - 1 < _s58))  							{  								_s18 = _s18 - _list[_s58];  							}  							else  								if ((_s40 > _s58) && (_s40 < _s60))  									_s18 = _s18 - _list[_s40];  						}  					}    					if (_s58 <= _s60)  					{  						if (_s58 >= _s60)  						{  							_list[_s60] = _s20;  						}  						else  						{  							for (_jj = _s58 + 1; _jj <= _s60 - 1; _jj++)  							{  								_list[_jj - 1] = _list[_jj];  							}  							_list[_s60 - 1] = _s20;  						}  					}  					else  					{  						for (_jj = _s58 - 1; _jj >= _s60; _jj--)  						{  							_list[_jj + 1] = _list[_jj];  						}  						_list[_s60] = _s20;  					}    					if (_s70 <= 127)  					{  						_s18 = 0;  						for (_jj = _s40; _jj <= _s38; _jj++)  						{  							_s18 = _s18 + _list[_jj];  						}  					}    					_f60 = _s18 / (_s38 - _s40 + 1);    					if (_fF8 + 1 > 31)  					{  						_fF8 = 31;  					}  					else  						_fF8 = _fF8 + 1;    					//----  					if (_fF8 <= 30)  					{  						if (_f28 > 0)  						{  							_f18 = _f8;  						}  						else  							_f18 = _f8 - _f28 * _f90;    						if (_f48 < 0)  						{  							_f38 = _f8;  						}  						else  							_f38 = _f8 - _f48 * _f90;    						_fB8 = _series;    						if (_fF8 != 30)  						{  							continue;  						}    						if (_fF8 == 30)  						{  							_fC0 = _series;    							_v4 = Math.Max(Math.Ceiling(_f78)' 1);    							_fE8 = (int)Math.Ceiling(_v4);    							_v2 = Math.Max(Math.Floor(_f78)' 1);    							_fE0 = (int)Math.Ceiling(_v2);    							if (_fE8 == _fE0)  							{  								_f68 = 1;  							}  							else  							{  								_v4 = _fE8 - _fE0;  								_f68 = (_f78 - _fE0) / _v4;  							}    							_v5 = _fE0 <= 29 ? Convert.ToInt32(_fE0) : 29;    							_v6 = _fE8 <= 29 ? Convert.ToInt32(_fE8) : 29;    							_fA8 = (_series - _buffer[_fF0 - _v5]) * (1 - _f68) / _fE0 + (_series - _buffer[_fF0 - _v6]) * _f68 / _fE8;  						}  					}  					else  					{  						_v1 = Math.Min(_f98' Math.Pow(_fA0 / _f60' _f88));    						if (_v1 < 1)  						{  							_v2 = 1;  						}  						else  						{  							_v3 = Math.Min(_f98' Math.Pow(_fA0 / _f60' _f88));    							_v2 = _v3;  						}    						_f58 = _v2;  						_f70 = Math.Pow(_f90' Math.Sqrt(_f58));    						if (_f28 > 0)  						{  							_f18 = _f8;  						}  						else  						{  							_f18 = _f8 - _f28 * _f70;  						}    						if (_f48 < 0)  						{  							_f38 = _f8;  						}  						else  						{  							_f38 = _f8 - _f48 * _f70;  						}  					}  				}    				if (_fF8 > 30)  				{  					_f30 = Math.Pow(_f50' _f58);  					_fC0 = (1 - _f30) * _series + _f30 * _fC0;  					_fC8 = (_series - _fC0) * (1 - _f50) + _f50 * _fC8;  					_fD0 = _f10 * _fC8 + _fC0;  					_f20 = -_f30 * 2;  					_f40 = _f30 * _f30;  					_fB0 = _f20 + _f40 + 1;  					_fA8 = (_fD0 - _fB8) * _fB0 + _f40 * _fA8;  					_fB8 = _fB8 + _fA8;  				}    				lastValue = (decimal)_fB8;  			}
Magic Number,StockSharp.Algo.Indicators,JurikMovingAverage,C:\repos\stocksharp_stocksharp\Algo\Indicators\JurikMovingAverage.cs,OnProcess,The following statement contains a magic number: if (_fF0 > 30)  			{  				if (Length < 1.0000000002)  				{  					_f80 = 0.0000000001; //{1.0e-10}  				}  				else  				{  					_f80 = (Length - 1) / 2.0;  				}    				if (_phase < -100)  				{  					_f10 = 0.5;  				}  				else  				{  					if (_phase > 100)  					{  						_f10 = 2.5;  					}  					else  					{  						_f10 = (double)_phase / 100 + 1.5;  					}  				}    				_v1 = Math.Log(Math.Sqrt(_f80));  				_v2 = _v1;    				if (_v1 / Math.Log(2.0) + 2.0 < 0.0)  				{  					_v3 = 0;  				}  				else  				{  					_v3 = _v2 / Math.Log(2.0) + 2.0;  				}    				_f98 = _v3;    				//----  				if (0.5 <= _f98 - 2.0)  				{  					_f88 = _f98 - 2.0;  				}  				else  				{  					_f88 = 0.5;  				}    				_f78 = Math.Sqrt(_f80) * _f98;  				_f90 = _f78 / (_f78 + 1.0);  				_f80 = _f80 * 0.9;  				_f50 = _f80 / (_f80 + 2.0);    				//----  				if (_f0 != 0)  				{  					_f0 = 0;  					_v5 = 0;    					for (_ii = 1; _ii <= 29; _ii++)  					{  						if (_buffer[_ii + 1] != _buffer[_ii])  						{  							_v5 = 1;  						}  					}    					_fD8 = _v5 * 30;    					_f38 = _fD8 == 0 ? _series : _buffer[1];    					_f18 = _f38;    					if (_fD8 > 29)  						_fD8 = 29;  				}  				else  					_fD8 = 0;    				//----  				for (_ii = _fD8; _ii >= 0; _ii--)  				{  					//{ another bigcycle...}  					_value2 = 31 - _ii;    					_f8 = _ii == 0 ? _series : _buffer[_value2];    					_f28 = _f8 - _f18;  					_f48 = _f8 - _f38;    					_v2 = Math.Max(Math.Abs(_f28)' Math.Abs(_f48));    					_fA0 = _v2;  					_vv = _fA0 + 0.0000000001; //{1.0e-10;}    					//----  					if (_s48 <= 1)  					{  						_s48 = 127;  					}  					else  					{  						_s48 = _s48 - 1;  					}    					if (_s50 <= 1)  					{  						_s50 = 10;  					}  					else  					{  						_s50 = _s50 - 1;  					}    					if (_s70 < 128)  						_s70 = _s70 + 1;    					_s8 = _s8 + _vv - _ring2[_s50];  					_ring2[_s50] = _vv;    					if (_s70 > 10)  					{  						_s20 = _s8 / 10;  					}  					else  						_s20 = _s8 / _s70;    					//----  					if (_s70 > 127)  					{  						_s10 = _ring1[_s48];  						_ring1[_s48] = _s20;  						_s68 = 64;  						_s58 = Convert.ToInt32(_s68);    						while (_s68 > 1)  						{  							if (_list[_s58] < _s10)  							{  								_s68 = _s68 * 0.5;  								_s58 = _s58 + Convert.ToInt32(_s68);  							}  							else  								if (_list[_s58] <= _s10)  								{  									_s68 = 1;  								}  								else  								{  									_s68 = _s68 * 0.5;  									_s58 = _s58 - Convert.ToInt32(_s68);  								}  						}  					}  					else  					{  						_ring1[_s48] = _s20;    						if (_s28 + _s30 > 127)  						{  							_s30 = _s30 - 1;  							_s58 = Convert.ToInt32(_s30);  						}  						else  						{  							_s28 = _s28 + 1;  							_s58 = Convert.ToInt32(_s28);  						}    						_s38 = _s28 > 96 ? 96 : Convert.ToInt32(_s28);  						_s40 = _s30 < 32 ? 32 : Convert.ToInt32(_s30);  					}    					//----  					_s68 = 64;  					_s60 = Convert.ToInt32(_s68);    					while (_s68 > 1)  					{  						if (_list[_s60] >= _s20)  						{  							if (_list[_s60 - 1] <= _s20)  							{  								_s68 = 1;  							}  							else  							{  								_s68 = _s68 * 0.5;  								_s60 = _s60 - Convert.ToInt32(_s68);  							}  						}  						else  						{  							_s68 = _s68 * 0.5;  							_s60 = _s60 + Convert.ToInt32(_s68);  						}    						if ((_s60 == 127) && (_s20 > _list[127]))  							_s60 = 128;  					}    					if (_s70 > 127)  					{  						if (_s58 >= _s60)  						{  							if ((_s38 + 1 > _s60) && (_s40 - 1 < _s60))  							{  								_s18 = _s18 + _s20;  							}  							else  								if ((_s40 > _s60) && (_s40 - 1 < _s58))  									_s18 = _s18 + _list[_s40 - 1];  						}  						else  							if (_s40 >= _s60)  							{  								if ((_s38 + 1 < _s60) && (_s38 + 1 > _s58))  									_s18 = _s18 + _list[_s38 + 1];  							}  							else  								if (_s38 + 2 > _s60)  								{  									_s18 = _s18 + _s20;  								}  								else  									if ((_s38 + 1 < _s60) && (_s38 + 1 > _s58))  										_s18 = _s18 + _list[_s38 + 1];    						if (_s58 > _s60)  						{  							if ((_s40 - 1 < _s58) && (_s38 + 1 > _s58))  							{  								_s18 = _s18 - _list[_s58];  							}  							else  								if ((_s38 < _s58) && (_s38 + 1 > _s60))  									_s18 = _s18 - _list[_s38];  						}  						else  						{  							if ((_s38 + 1 > _s58) && (_s40 - 1 < _s58))  							{  								_s18 = _s18 - _list[_s58];  							}  							else  								if ((_s40 > _s58) && (_s40 < _s60))  									_s18 = _s18 - _list[_s40];  						}  					}    					if (_s58 <= _s60)  					{  						if (_s58 >= _s60)  						{  							_list[_s60] = _s20;  						}  						else  						{  							for (_jj = _s58 + 1; _jj <= _s60 - 1; _jj++)  							{  								_list[_jj - 1] = _list[_jj];  							}  							_list[_s60 - 1] = _s20;  						}  					}  					else  					{  						for (_jj = _s58 - 1; _jj >= _s60; _jj--)  						{  							_list[_jj + 1] = _list[_jj];  						}  						_list[_s60] = _s20;  					}    					if (_s70 <= 127)  					{  						_s18 = 0;  						for (_jj = _s40; _jj <= _s38; _jj++)  						{  							_s18 = _s18 + _list[_jj];  						}  					}    					_f60 = _s18 / (_s38 - _s40 + 1);    					if (_fF8 + 1 > 31)  					{  						_fF8 = 31;  					}  					else  						_fF8 = _fF8 + 1;    					//----  					if (_fF8 <= 30)  					{  						if (_f28 > 0)  						{  							_f18 = _f8;  						}  						else  							_f18 = _f8 - _f28 * _f90;    						if (_f48 < 0)  						{  							_f38 = _f8;  						}  						else  							_f38 = _f8 - _f48 * _f90;    						_fB8 = _series;    						if (_fF8 != 30)  						{  							continue;  						}    						if (_fF8 == 30)  						{  							_fC0 = _series;    							_v4 = Math.Max(Math.Ceiling(_f78)' 1);    							_fE8 = (int)Math.Ceiling(_v4);    							_v2 = Math.Max(Math.Floor(_f78)' 1);    							_fE0 = (int)Math.Ceiling(_v2);    							if (_fE8 == _fE0)  							{  								_f68 = 1;  							}  							else  							{  								_v4 = _fE8 - _fE0;  								_f68 = (_f78 - _fE0) / _v4;  							}    							_v5 = _fE0 <= 29 ? Convert.ToInt32(_fE0) : 29;    							_v6 = _fE8 <= 29 ? Convert.ToInt32(_fE8) : 29;    							_fA8 = (_series - _buffer[_fF0 - _v5]) * (1 - _f68) / _fE0 + (_series - _buffer[_fF0 - _v6]) * _f68 / _fE8;  						}  					}  					else  					{  						_v1 = Math.Min(_f98' Math.Pow(_fA0 / _f60' _f88));    						if (_v1 < 1)  						{  							_v2 = 1;  						}  						else  						{  							_v3 = Math.Min(_f98' Math.Pow(_fA0 / _f60' _f88));    							_v2 = _v3;  						}    						_f58 = _v2;  						_f70 = Math.Pow(_f90' Math.Sqrt(_f58));    						if (_f28 > 0)  						{  							_f18 = _f8;  						}  						else  						{  							_f18 = _f8 - _f28 * _f70;  						}    						if (_f48 < 0)  						{  							_f38 = _f8;  						}  						else  						{  							_f38 = _f8 - _f48 * _f70;  						}  					}  				}    				if (_fF8 > 30)  				{  					_f30 = Math.Pow(_f50' _f58);  					_fC0 = (1 - _f30) * _series + _f30 * _fC0;  					_fC8 = (_series - _fC0) * (1 - _f50) + _f50 * _fC8;  					_fD0 = _f10 * _fC8 + _fC0;  					_f20 = -_f30 * 2;  					_f40 = _f30 * _f30;  					_fB0 = _f20 + _f40 + 1;  					_fA8 = (_fD0 - _fB8) * _fB0 + _f40 * _fA8;  					_fB8 = _fB8 + _fA8;  				}    				lastValue = (decimal)_fB8;  			}
Magic Number,StockSharp.Algo.Indicators,JurikMovingAverage,C:\repos\stocksharp_stocksharp\Algo\Indicators\JurikMovingAverage.cs,OnProcess,The following statement contains a magic number: if (_fF0 > 30)  			{  				if (Length < 1.0000000002)  				{  					_f80 = 0.0000000001; //{1.0e-10}  				}  				else  				{  					_f80 = (Length - 1) / 2.0;  				}    				if (_phase < -100)  				{  					_f10 = 0.5;  				}  				else  				{  					if (_phase > 100)  					{  						_f10 = 2.5;  					}  					else  					{  						_f10 = (double)_phase / 100 + 1.5;  					}  				}    				_v1 = Math.Log(Math.Sqrt(_f80));  				_v2 = _v1;    				if (_v1 / Math.Log(2.0) + 2.0 < 0.0)  				{  					_v3 = 0;  				}  				else  				{  					_v3 = _v2 / Math.Log(2.0) + 2.0;  				}    				_f98 = _v3;    				//----  				if (0.5 <= _f98 - 2.0)  				{  					_f88 = _f98 - 2.0;  				}  				else  				{  					_f88 = 0.5;  				}    				_f78 = Math.Sqrt(_f80) * _f98;  				_f90 = _f78 / (_f78 + 1.0);  				_f80 = _f80 * 0.9;  				_f50 = _f80 / (_f80 + 2.0);    				//----  				if (_f0 != 0)  				{  					_f0 = 0;  					_v5 = 0;    					for (_ii = 1; _ii <= 29; _ii++)  					{  						if (_buffer[_ii + 1] != _buffer[_ii])  						{  							_v5 = 1;  						}  					}    					_fD8 = _v5 * 30;    					_f38 = _fD8 == 0 ? _series : _buffer[1];    					_f18 = _f38;    					if (_fD8 > 29)  						_fD8 = 29;  				}  				else  					_fD8 = 0;    				//----  				for (_ii = _fD8; _ii >= 0; _ii--)  				{  					//{ another bigcycle...}  					_value2 = 31 - _ii;    					_f8 = _ii == 0 ? _series : _buffer[_value2];    					_f28 = _f8 - _f18;  					_f48 = _f8 - _f38;    					_v2 = Math.Max(Math.Abs(_f28)' Math.Abs(_f48));    					_fA0 = _v2;  					_vv = _fA0 + 0.0000000001; //{1.0e-10;}    					//----  					if (_s48 <= 1)  					{  						_s48 = 127;  					}  					else  					{  						_s48 = _s48 - 1;  					}    					if (_s50 <= 1)  					{  						_s50 = 10;  					}  					else  					{  						_s50 = _s50 - 1;  					}    					if (_s70 < 128)  						_s70 = _s70 + 1;    					_s8 = _s8 + _vv - _ring2[_s50];  					_ring2[_s50] = _vv;    					if (_s70 > 10)  					{  						_s20 = _s8 / 10;  					}  					else  						_s20 = _s8 / _s70;    					//----  					if (_s70 > 127)  					{  						_s10 = _ring1[_s48];  						_ring1[_s48] = _s20;  						_s68 = 64;  						_s58 = Convert.ToInt32(_s68);    						while (_s68 > 1)  						{  							if (_list[_s58] < _s10)  							{  								_s68 = _s68 * 0.5;  								_s58 = _s58 + Convert.ToInt32(_s68);  							}  							else  								if (_list[_s58] <= _s10)  								{  									_s68 = 1;  								}  								else  								{  									_s68 = _s68 * 0.5;  									_s58 = _s58 - Convert.ToInt32(_s68);  								}  						}  					}  					else  					{  						_ring1[_s48] = _s20;    						if (_s28 + _s30 > 127)  						{  							_s30 = _s30 - 1;  							_s58 = Convert.ToInt32(_s30);  						}  						else  						{  							_s28 = _s28 + 1;  							_s58 = Convert.ToInt32(_s28);  						}    						_s38 = _s28 > 96 ? 96 : Convert.ToInt32(_s28);  						_s40 = _s30 < 32 ? 32 : Convert.ToInt32(_s30);  					}    					//----  					_s68 = 64;  					_s60 = Convert.ToInt32(_s68);    					while (_s68 > 1)  					{  						if (_list[_s60] >= _s20)  						{  							if (_list[_s60 - 1] <= _s20)  							{  								_s68 = 1;  							}  							else  							{  								_s68 = _s68 * 0.5;  								_s60 = _s60 - Convert.ToInt32(_s68);  							}  						}  						else  						{  							_s68 = _s68 * 0.5;  							_s60 = _s60 + Convert.ToInt32(_s68);  						}    						if ((_s60 == 127) && (_s20 > _list[127]))  							_s60 = 128;  					}    					if (_s70 > 127)  					{  						if (_s58 >= _s60)  						{  							if ((_s38 + 1 > _s60) && (_s40 - 1 < _s60))  							{  								_s18 = _s18 + _s20;  							}  							else  								if ((_s40 > _s60) && (_s40 - 1 < _s58))  									_s18 = _s18 + _list[_s40 - 1];  						}  						else  							if (_s40 >= _s60)  							{  								if ((_s38 + 1 < _s60) && (_s38 + 1 > _s58))  									_s18 = _s18 + _list[_s38 + 1];  							}  							else  								if (_s38 + 2 > _s60)  								{  									_s18 = _s18 + _s20;  								}  								else  									if ((_s38 + 1 < _s60) && (_s38 + 1 > _s58))  										_s18 = _s18 + _list[_s38 + 1];    						if (_s58 > _s60)  						{  							if ((_s40 - 1 < _s58) && (_s38 + 1 > _s58))  							{  								_s18 = _s18 - _list[_s58];  							}  							else  								if ((_s38 < _s58) && (_s38 + 1 > _s60))  									_s18 = _s18 - _list[_s38];  						}  						else  						{  							if ((_s38 + 1 > _s58) && (_s40 - 1 < _s58))  							{  								_s18 = _s18 - _list[_s58];  							}  							else  								if ((_s40 > _s58) && (_s40 < _s60))  									_s18 = _s18 - _list[_s40];  						}  					}    					if (_s58 <= _s60)  					{  						if (_s58 >= _s60)  						{  							_list[_s60] = _s20;  						}  						else  						{  							for (_jj = _s58 + 1; _jj <= _s60 - 1; _jj++)  							{  								_list[_jj - 1] = _list[_jj];  							}  							_list[_s60 - 1] = _s20;  						}  					}  					else  					{  						for (_jj = _s58 - 1; _jj >= _s60; _jj--)  						{  							_list[_jj + 1] = _list[_jj];  						}  						_list[_s60] = _s20;  					}    					if (_s70 <= 127)  					{  						_s18 = 0;  						for (_jj = _s40; _jj <= _s38; _jj++)  						{  							_s18 = _s18 + _list[_jj];  						}  					}    					_f60 = _s18 / (_s38 - _s40 + 1);    					if (_fF8 + 1 > 31)  					{  						_fF8 = 31;  					}  					else  						_fF8 = _fF8 + 1;    					//----  					if (_fF8 <= 30)  					{  						if (_f28 > 0)  						{  							_f18 = _f8;  						}  						else  							_f18 = _f8 - _f28 * _f90;    						if (_f48 < 0)  						{  							_f38 = _f8;  						}  						else  							_f38 = _f8 - _f48 * _f90;    						_fB8 = _series;    						if (_fF8 != 30)  						{  							continue;  						}    						if (_fF8 == 30)  						{  							_fC0 = _series;    							_v4 = Math.Max(Math.Ceiling(_f78)' 1);    							_fE8 = (int)Math.Ceiling(_v4);    							_v2 = Math.Max(Math.Floor(_f78)' 1);    							_fE0 = (int)Math.Ceiling(_v2);    							if (_fE8 == _fE0)  							{  								_f68 = 1;  							}  							else  							{  								_v4 = _fE8 - _fE0;  								_f68 = (_f78 - _fE0) / _v4;  							}    							_v5 = _fE0 <= 29 ? Convert.ToInt32(_fE0) : 29;    							_v6 = _fE8 <= 29 ? Convert.ToInt32(_fE8) : 29;    							_fA8 = (_series - _buffer[_fF0 - _v5]) * (1 - _f68) / _fE0 + (_series - _buffer[_fF0 - _v6]) * _f68 / _fE8;  						}  					}  					else  					{  						_v1 = Math.Min(_f98' Math.Pow(_fA0 / _f60' _f88));    						if (_v1 < 1)  						{  							_v2 = 1;  						}  						else  						{  							_v3 = Math.Min(_f98' Math.Pow(_fA0 / _f60' _f88));    							_v2 = _v3;  						}    						_f58 = _v2;  						_f70 = Math.Pow(_f90' Math.Sqrt(_f58));    						if (_f28 > 0)  						{  							_f18 = _f8;  						}  						else  						{  							_f18 = _f8 - _f28 * _f70;  						}    						if (_f48 < 0)  						{  							_f38 = _f8;  						}  						else  						{  							_f38 = _f8 - _f48 * _f70;  						}  					}  				}    				if (_fF8 > 30)  				{  					_f30 = Math.Pow(_f50' _f58);  					_fC0 = (1 - _f30) * _series + _f30 * _fC0;  					_fC8 = (_series - _fC0) * (1 - _f50) + _f50 * _fC8;  					_fD0 = _f10 * _fC8 + _fC0;  					_f20 = -_f30 * 2;  					_f40 = _f30 * _f30;  					_fB0 = _f20 + _f40 + 1;  					_fA8 = (_fD0 - _fB8) * _fB0 + _f40 * _fA8;  					_fB8 = _fB8 + _fA8;  				}    				lastValue = (decimal)_fB8;  			}
Magic Number,StockSharp.Algo.Indicators,JurikMovingAverage,C:\repos\stocksharp_stocksharp\Algo\Indicators\JurikMovingAverage.cs,OnProcess,The following statement contains a magic number: if (_fF0 > 30)  			{  				if (Length < 1.0000000002)  				{  					_f80 = 0.0000000001; //{1.0e-10}  				}  				else  				{  					_f80 = (Length - 1) / 2.0;  				}    				if (_phase < -100)  				{  					_f10 = 0.5;  				}  				else  				{  					if (_phase > 100)  					{  						_f10 = 2.5;  					}  					else  					{  						_f10 = (double)_phase / 100 + 1.5;  					}  				}    				_v1 = Math.Log(Math.Sqrt(_f80));  				_v2 = _v1;    				if (_v1 / Math.Log(2.0) + 2.0 < 0.0)  				{  					_v3 = 0;  				}  				else  				{  					_v3 = _v2 / Math.Log(2.0) + 2.0;  				}    				_f98 = _v3;    				//----  				if (0.5 <= _f98 - 2.0)  				{  					_f88 = _f98 - 2.0;  				}  				else  				{  					_f88 = 0.5;  				}    				_f78 = Math.Sqrt(_f80) * _f98;  				_f90 = _f78 / (_f78 + 1.0);  				_f80 = _f80 * 0.9;  				_f50 = _f80 / (_f80 + 2.0);    				//----  				if (_f0 != 0)  				{  					_f0 = 0;  					_v5 = 0;    					for (_ii = 1; _ii <= 29; _ii++)  					{  						if (_buffer[_ii + 1] != _buffer[_ii])  						{  							_v5 = 1;  						}  					}    					_fD8 = _v5 * 30;    					_f38 = _fD8 == 0 ? _series : _buffer[1];    					_f18 = _f38;    					if (_fD8 > 29)  						_fD8 = 29;  				}  				else  					_fD8 = 0;    				//----  				for (_ii = _fD8; _ii >= 0; _ii--)  				{  					//{ another bigcycle...}  					_value2 = 31 - _ii;    					_f8 = _ii == 0 ? _series : _buffer[_value2];    					_f28 = _f8 - _f18;  					_f48 = _f8 - _f38;    					_v2 = Math.Max(Math.Abs(_f28)' Math.Abs(_f48));    					_fA0 = _v2;  					_vv = _fA0 + 0.0000000001; //{1.0e-10;}    					//----  					if (_s48 <= 1)  					{  						_s48 = 127;  					}  					else  					{  						_s48 = _s48 - 1;  					}    					if (_s50 <= 1)  					{  						_s50 = 10;  					}  					else  					{  						_s50 = _s50 - 1;  					}    					if (_s70 < 128)  						_s70 = _s70 + 1;    					_s8 = _s8 + _vv - _ring2[_s50];  					_ring2[_s50] = _vv;    					if (_s70 > 10)  					{  						_s20 = _s8 / 10;  					}  					else  						_s20 = _s8 / _s70;    					//----  					if (_s70 > 127)  					{  						_s10 = _ring1[_s48];  						_ring1[_s48] = _s20;  						_s68 = 64;  						_s58 = Convert.ToInt32(_s68);    						while (_s68 > 1)  						{  							if (_list[_s58] < _s10)  							{  								_s68 = _s68 * 0.5;  								_s58 = _s58 + Convert.ToInt32(_s68);  							}  							else  								if (_list[_s58] <= _s10)  								{  									_s68 = 1;  								}  								else  								{  									_s68 = _s68 * 0.5;  									_s58 = _s58 - Convert.ToInt32(_s68);  								}  						}  					}  					else  					{  						_ring1[_s48] = _s20;    						if (_s28 + _s30 > 127)  						{  							_s30 = _s30 - 1;  							_s58 = Convert.ToInt32(_s30);  						}  						else  						{  							_s28 = _s28 + 1;  							_s58 = Convert.ToInt32(_s28);  						}    						_s38 = _s28 > 96 ? 96 : Convert.ToInt32(_s28);  						_s40 = _s30 < 32 ? 32 : Convert.ToInt32(_s30);  					}    					//----  					_s68 = 64;  					_s60 = Convert.ToInt32(_s68);    					while (_s68 > 1)  					{  						if (_list[_s60] >= _s20)  						{  							if (_list[_s60 - 1] <= _s20)  							{  								_s68 = 1;  							}  							else  							{  								_s68 = _s68 * 0.5;  								_s60 = _s60 - Convert.ToInt32(_s68);  							}  						}  						else  						{  							_s68 = _s68 * 0.5;  							_s60 = _s60 + Convert.ToInt32(_s68);  						}    						if ((_s60 == 127) && (_s20 > _list[127]))  							_s60 = 128;  					}    					if (_s70 > 127)  					{  						if (_s58 >= _s60)  						{  							if ((_s38 + 1 > _s60) && (_s40 - 1 < _s60))  							{  								_s18 = _s18 + _s20;  							}  							else  								if ((_s40 > _s60) && (_s40 - 1 < _s58))  									_s18 = _s18 + _list[_s40 - 1];  						}  						else  							if (_s40 >= _s60)  							{  								if ((_s38 + 1 < _s60) && (_s38 + 1 > _s58))  									_s18 = _s18 + _list[_s38 + 1];  							}  							else  								if (_s38 + 2 > _s60)  								{  									_s18 = _s18 + _s20;  								}  								else  									if ((_s38 + 1 < _s60) && (_s38 + 1 > _s58))  										_s18 = _s18 + _list[_s38 + 1];    						if (_s58 > _s60)  						{  							if ((_s40 - 1 < _s58) && (_s38 + 1 > _s58))  							{  								_s18 = _s18 - _list[_s58];  							}  							else  								if ((_s38 < _s58) && (_s38 + 1 > _s60))  									_s18 = _s18 - _list[_s38];  						}  						else  						{  							if ((_s38 + 1 > _s58) && (_s40 - 1 < _s58))  							{  								_s18 = _s18 - _list[_s58];  							}  							else  								if ((_s40 > _s58) && (_s40 < _s60))  									_s18 = _s18 - _list[_s40];  						}  					}    					if (_s58 <= _s60)  					{  						if (_s58 >= _s60)  						{  							_list[_s60] = _s20;  						}  						else  						{  							for (_jj = _s58 + 1; _jj <= _s60 - 1; _jj++)  							{  								_list[_jj - 1] = _list[_jj];  							}  							_list[_s60 - 1] = _s20;  						}  					}  					else  					{  						for (_jj = _s58 - 1; _jj >= _s60; _jj--)  						{  							_list[_jj + 1] = _list[_jj];  						}  						_list[_s60] = _s20;  					}    					if (_s70 <= 127)  					{  						_s18 = 0;  						for (_jj = _s40; _jj <= _s38; _jj++)  						{  							_s18 = _s18 + _list[_jj];  						}  					}    					_f60 = _s18 / (_s38 - _s40 + 1);    					if (_fF8 + 1 > 31)  					{  						_fF8 = 31;  					}  					else  						_fF8 = _fF8 + 1;    					//----  					if (_fF8 <= 30)  					{  						if (_f28 > 0)  						{  							_f18 = _f8;  						}  						else  							_f18 = _f8 - _f28 * _f90;    						if (_f48 < 0)  						{  							_f38 = _f8;  						}  						else  							_f38 = _f8 - _f48 * _f90;    						_fB8 = _series;    						if (_fF8 != 30)  						{  							continue;  						}    						if (_fF8 == 30)  						{  							_fC0 = _series;    							_v4 = Math.Max(Math.Ceiling(_f78)' 1);    							_fE8 = (int)Math.Ceiling(_v4);    							_v2 = Math.Max(Math.Floor(_f78)' 1);    							_fE0 = (int)Math.Ceiling(_v2);    							if (_fE8 == _fE0)  							{  								_f68 = 1;  							}  							else  							{  								_v4 = _fE8 - _fE0;  								_f68 = (_f78 - _fE0) / _v4;  							}    							_v5 = _fE0 <= 29 ? Convert.ToInt32(_fE0) : 29;    							_v6 = _fE8 <= 29 ? Convert.ToInt32(_fE8) : 29;    							_fA8 = (_series - _buffer[_fF0 - _v5]) * (1 - _f68) / _fE0 + (_series - _buffer[_fF0 - _v6]) * _f68 / _fE8;  						}  					}  					else  					{  						_v1 = Math.Min(_f98' Math.Pow(_fA0 / _f60' _f88));    						if (_v1 < 1)  						{  							_v2 = 1;  						}  						else  						{  							_v3 = Math.Min(_f98' Math.Pow(_fA0 / _f60' _f88));    							_v2 = _v3;  						}    						_f58 = _v2;  						_f70 = Math.Pow(_f90' Math.Sqrt(_f58));    						if (_f28 > 0)  						{  							_f18 = _f8;  						}  						else  						{  							_f18 = _f8 - _f28 * _f70;  						}    						if (_f48 < 0)  						{  							_f38 = _f8;  						}  						else  						{  							_f38 = _f8 - _f48 * _f70;  						}  					}  				}    				if (_fF8 > 30)  				{  					_f30 = Math.Pow(_f50' _f58);  					_fC0 = (1 - _f30) * _series + _f30 * _fC0;  					_fC8 = (_series - _fC0) * (1 - _f50) + _f50 * _fC8;  					_fD0 = _f10 * _fC8 + _fC0;  					_f20 = -_f30 * 2;  					_f40 = _f30 * _f30;  					_fB0 = _f20 + _f40 + 1;  					_fA8 = (_fD0 - _fB8) * _fB0 + _f40 * _fA8;  					_fB8 = _fB8 + _fA8;  				}    				lastValue = (decimal)_fB8;  			}
Magic Number,StockSharp.Algo.Indicators,JurikMovingAverage,C:\repos\stocksharp_stocksharp\Algo\Indicators\JurikMovingAverage.cs,OnProcess,The following statement contains a magic number: if (_fF0 > 30)  			{  				if (Length < 1.0000000002)  				{  					_f80 = 0.0000000001; //{1.0e-10}  				}  				else  				{  					_f80 = (Length - 1) / 2.0;  				}    				if (_phase < -100)  				{  					_f10 = 0.5;  				}  				else  				{  					if (_phase > 100)  					{  						_f10 = 2.5;  					}  					else  					{  						_f10 = (double)_phase / 100 + 1.5;  					}  				}    				_v1 = Math.Log(Math.Sqrt(_f80));  				_v2 = _v1;    				if (_v1 / Math.Log(2.0) + 2.0 < 0.0)  				{  					_v3 = 0;  				}  				else  				{  					_v3 = _v2 / Math.Log(2.0) + 2.0;  				}    				_f98 = _v3;    				//----  				if (0.5 <= _f98 - 2.0)  				{  					_f88 = _f98 - 2.0;  				}  				else  				{  					_f88 = 0.5;  				}    				_f78 = Math.Sqrt(_f80) * _f98;  				_f90 = _f78 / (_f78 + 1.0);  				_f80 = _f80 * 0.9;  				_f50 = _f80 / (_f80 + 2.0);    				//----  				if (_f0 != 0)  				{  					_f0 = 0;  					_v5 = 0;    					for (_ii = 1; _ii <= 29; _ii++)  					{  						if (_buffer[_ii + 1] != _buffer[_ii])  						{  							_v5 = 1;  						}  					}    					_fD8 = _v5 * 30;    					_f38 = _fD8 == 0 ? _series : _buffer[1];    					_f18 = _f38;    					if (_fD8 > 29)  						_fD8 = 29;  				}  				else  					_fD8 = 0;    				//----  				for (_ii = _fD8; _ii >= 0; _ii--)  				{  					//{ another bigcycle...}  					_value2 = 31 - _ii;    					_f8 = _ii == 0 ? _series : _buffer[_value2];    					_f28 = _f8 - _f18;  					_f48 = _f8 - _f38;    					_v2 = Math.Max(Math.Abs(_f28)' Math.Abs(_f48));    					_fA0 = _v2;  					_vv = _fA0 + 0.0000000001; //{1.0e-10;}    					//----  					if (_s48 <= 1)  					{  						_s48 = 127;  					}  					else  					{  						_s48 = _s48 - 1;  					}    					if (_s50 <= 1)  					{  						_s50 = 10;  					}  					else  					{  						_s50 = _s50 - 1;  					}    					if (_s70 < 128)  						_s70 = _s70 + 1;    					_s8 = _s8 + _vv - _ring2[_s50];  					_ring2[_s50] = _vv;    					if (_s70 > 10)  					{  						_s20 = _s8 / 10;  					}  					else  						_s20 = _s8 / _s70;    					//----  					if (_s70 > 127)  					{  						_s10 = _ring1[_s48];  						_ring1[_s48] = _s20;  						_s68 = 64;  						_s58 = Convert.ToInt32(_s68);    						while (_s68 > 1)  						{  							if (_list[_s58] < _s10)  							{  								_s68 = _s68 * 0.5;  								_s58 = _s58 + Convert.ToInt32(_s68);  							}  							else  								if (_list[_s58] <= _s10)  								{  									_s68 = 1;  								}  								else  								{  									_s68 = _s68 * 0.5;  									_s58 = _s58 - Convert.ToInt32(_s68);  								}  						}  					}  					else  					{  						_ring1[_s48] = _s20;    						if (_s28 + _s30 > 127)  						{  							_s30 = _s30 - 1;  							_s58 = Convert.ToInt32(_s30);  						}  						else  						{  							_s28 = _s28 + 1;  							_s58 = Convert.ToInt32(_s28);  						}    						_s38 = _s28 > 96 ? 96 : Convert.ToInt32(_s28);  						_s40 = _s30 < 32 ? 32 : Convert.ToInt32(_s30);  					}    					//----  					_s68 = 64;  					_s60 = Convert.ToInt32(_s68);    					while (_s68 > 1)  					{  						if (_list[_s60] >= _s20)  						{  							if (_list[_s60 - 1] <= _s20)  							{  								_s68 = 1;  							}  							else  							{  								_s68 = _s68 * 0.5;  								_s60 = _s60 - Convert.ToInt32(_s68);  							}  						}  						else  						{  							_s68 = _s68 * 0.5;  							_s60 = _s60 + Convert.ToInt32(_s68);  						}    						if ((_s60 == 127) && (_s20 > _list[127]))  							_s60 = 128;  					}    					if (_s70 > 127)  					{  						if (_s58 >= _s60)  						{  							if ((_s38 + 1 > _s60) && (_s40 - 1 < _s60))  							{  								_s18 = _s18 + _s20;  							}  							else  								if ((_s40 > _s60) && (_s40 - 1 < _s58))  									_s18 = _s18 + _list[_s40 - 1];  						}  						else  							if (_s40 >= _s60)  							{  								if ((_s38 + 1 < _s60) && (_s38 + 1 > _s58))  									_s18 = _s18 + _list[_s38 + 1];  							}  							else  								if (_s38 + 2 > _s60)  								{  									_s18 = _s18 + _s20;  								}  								else  									if ((_s38 + 1 < _s60) && (_s38 + 1 > _s58))  										_s18 = _s18 + _list[_s38 + 1];    						if (_s58 > _s60)  						{  							if ((_s40 - 1 < _s58) && (_s38 + 1 > _s58))  							{  								_s18 = _s18 - _list[_s58];  							}  							else  								if ((_s38 < _s58) && (_s38 + 1 > _s60))  									_s18 = _s18 - _list[_s38];  						}  						else  						{  							if ((_s38 + 1 > _s58) && (_s40 - 1 < _s58))  							{  								_s18 = _s18 - _list[_s58];  							}  							else  								if ((_s40 > _s58) && (_s40 < _s60))  									_s18 = _s18 - _list[_s40];  						}  					}    					if (_s58 <= _s60)  					{  						if (_s58 >= _s60)  						{  							_list[_s60] = _s20;  						}  						else  						{  							for (_jj = _s58 + 1; _jj <= _s60 - 1; _jj++)  							{  								_list[_jj - 1] = _list[_jj];  							}  							_list[_s60 - 1] = _s20;  						}  					}  					else  					{  						for (_jj = _s58 - 1; _jj >= _s60; _jj--)  						{  							_list[_jj + 1] = _list[_jj];  						}  						_list[_s60] = _s20;  					}    					if (_s70 <= 127)  					{  						_s18 = 0;  						for (_jj = _s40; _jj <= _s38; _jj++)  						{  							_s18 = _s18 + _list[_jj];  						}  					}    					_f60 = _s18 / (_s38 - _s40 + 1);    					if (_fF8 + 1 > 31)  					{  						_fF8 = 31;  					}  					else  						_fF8 = _fF8 + 1;    					//----  					if (_fF8 <= 30)  					{  						if (_f28 > 0)  						{  							_f18 = _f8;  						}  						else  							_f18 = _f8 - _f28 * _f90;    						if (_f48 < 0)  						{  							_f38 = _f8;  						}  						else  							_f38 = _f8 - _f48 * _f90;    						_fB8 = _series;    						if (_fF8 != 30)  						{  							continue;  						}    						if (_fF8 == 30)  						{  							_fC0 = _series;    							_v4 = Math.Max(Math.Ceiling(_f78)' 1);    							_fE8 = (int)Math.Ceiling(_v4);    							_v2 = Math.Max(Math.Floor(_f78)' 1);    							_fE0 = (int)Math.Ceiling(_v2);    							if (_fE8 == _fE0)  							{  								_f68 = 1;  							}  							else  							{  								_v4 = _fE8 - _fE0;  								_f68 = (_f78 - _fE0) / _v4;  							}    							_v5 = _fE0 <= 29 ? Convert.ToInt32(_fE0) : 29;    							_v6 = _fE8 <= 29 ? Convert.ToInt32(_fE8) : 29;    							_fA8 = (_series - _buffer[_fF0 - _v5]) * (1 - _f68) / _fE0 + (_series - _buffer[_fF0 - _v6]) * _f68 / _fE8;  						}  					}  					else  					{  						_v1 = Math.Min(_f98' Math.Pow(_fA0 / _f60' _f88));    						if (_v1 < 1)  						{  							_v2 = 1;  						}  						else  						{  							_v3 = Math.Min(_f98' Math.Pow(_fA0 / _f60' _f88));    							_v2 = _v3;  						}    						_f58 = _v2;  						_f70 = Math.Pow(_f90' Math.Sqrt(_f58));    						if (_f28 > 0)  						{  							_f18 = _f8;  						}  						else  						{  							_f18 = _f8 - _f28 * _f70;  						}    						if (_f48 < 0)  						{  							_f38 = _f8;  						}  						else  						{  							_f38 = _f8 - _f48 * _f70;  						}  					}  				}    				if (_fF8 > 30)  				{  					_f30 = Math.Pow(_f50' _f58);  					_fC0 = (1 - _f30) * _series + _f30 * _fC0;  					_fC8 = (_series - _fC0) * (1 - _f50) + _f50 * _fC8;  					_fD0 = _f10 * _fC8 + _fC0;  					_f20 = -_f30 * 2;  					_f40 = _f30 * _f30;  					_fB0 = _f20 + _f40 + 1;  					_fA8 = (_fD0 - _fB8) * _fB0 + _f40 * _fA8;  					_fB8 = _fB8 + _fA8;  				}    				lastValue = (decimal)_fB8;  			}
Magic Number,StockSharp.Algo.Indicators,JurikMovingAverage,C:\repos\stocksharp_stocksharp\Algo\Indicators\JurikMovingAverage.cs,OnProcess,The following statement contains a magic number: if (_fF0 > 30)  			{  				if (Length < 1.0000000002)  				{  					_f80 = 0.0000000001; //{1.0e-10}  				}  				else  				{  					_f80 = (Length - 1) / 2.0;  				}    				if (_phase < -100)  				{  					_f10 = 0.5;  				}  				else  				{  					if (_phase > 100)  					{  						_f10 = 2.5;  					}  					else  					{  						_f10 = (double)_phase / 100 + 1.5;  					}  				}    				_v1 = Math.Log(Math.Sqrt(_f80));  				_v2 = _v1;    				if (_v1 / Math.Log(2.0) + 2.0 < 0.0)  				{  					_v3 = 0;  				}  				else  				{  					_v3 = _v2 / Math.Log(2.0) + 2.0;  				}    				_f98 = _v3;    				//----  				if (0.5 <= _f98 - 2.0)  				{  					_f88 = _f98 - 2.0;  				}  				else  				{  					_f88 = 0.5;  				}    				_f78 = Math.Sqrt(_f80) * _f98;  				_f90 = _f78 / (_f78 + 1.0);  				_f80 = _f80 * 0.9;  				_f50 = _f80 / (_f80 + 2.0);    				//----  				if (_f0 != 0)  				{  					_f0 = 0;  					_v5 = 0;    					for (_ii = 1; _ii <= 29; _ii++)  					{  						if (_buffer[_ii + 1] != _buffer[_ii])  						{  							_v5 = 1;  						}  					}    					_fD8 = _v5 * 30;    					_f38 = _fD8 == 0 ? _series : _buffer[1];    					_f18 = _f38;    					if (_fD8 > 29)  						_fD8 = 29;  				}  				else  					_fD8 = 0;    				//----  				for (_ii = _fD8; _ii >= 0; _ii--)  				{  					//{ another bigcycle...}  					_value2 = 31 - _ii;    					_f8 = _ii == 0 ? _series : _buffer[_value2];    					_f28 = _f8 - _f18;  					_f48 = _f8 - _f38;    					_v2 = Math.Max(Math.Abs(_f28)' Math.Abs(_f48));    					_fA0 = _v2;  					_vv = _fA0 + 0.0000000001; //{1.0e-10;}    					//----  					if (_s48 <= 1)  					{  						_s48 = 127;  					}  					else  					{  						_s48 = _s48 - 1;  					}    					if (_s50 <= 1)  					{  						_s50 = 10;  					}  					else  					{  						_s50 = _s50 - 1;  					}    					if (_s70 < 128)  						_s70 = _s70 + 1;    					_s8 = _s8 + _vv - _ring2[_s50];  					_ring2[_s50] = _vv;    					if (_s70 > 10)  					{  						_s20 = _s8 / 10;  					}  					else  						_s20 = _s8 / _s70;    					//----  					if (_s70 > 127)  					{  						_s10 = _ring1[_s48];  						_ring1[_s48] = _s20;  						_s68 = 64;  						_s58 = Convert.ToInt32(_s68);    						while (_s68 > 1)  						{  							if (_list[_s58] < _s10)  							{  								_s68 = _s68 * 0.5;  								_s58 = _s58 + Convert.ToInt32(_s68);  							}  							else  								if (_list[_s58] <= _s10)  								{  									_s68 = 1;  								}  								else  								{  									_s68 = _s68 * 0.5;  									_s58 = _s58 - Convert.ToInt32(_s68);  								}  						}  					}  					else  					{  						_ring1[_s48] = _s20;    						if (_s28 + _s30 > 127)  						{  							_s30 = _s30 - 1;  							_s58 = Convert.ToInt32(_s30);  						}  						else  						{  							_s28 = _s28 + 1;  							_s58 = Convert.ToInt32(_s28);  						}    						_s38 = _s28 > 96 ? 96 : Convert.ToInt32(_s28);  						_s40 = _s30 < 32 ? 32 : Convert.ToInt32(_s30);  					}    					//----  					_s68 = 64;  					_s60 = Convert.ToInt32(_s68);    					while (_s68 > 1)  					{  						if (_list[_s60] >= _s20)  						{  							if (_list[_s60 - 1] <= _s20)  							{  								_s68 = 1;  							}  							else  							{  								_s68 = _s68 * 0.5;  								_s60 = _s60 - Convert.ToInt32(_s68);  							}  						}  						else  						{  							_s68 = _s68 * 0.5;  							_s60 = _s60 + Convert.ToInt32(_s68);  						}    						if ((_s60 == 127) && (_s20 > _list[127]))  							_s60 = 128;  					}    					if (_s70 > 127)  					{  						if (_s58 >= _s60)  						{  							if ((_s38 + 1 > _s60) && (_s40 - 1 < _s60))  							{  								_s18 = _s18 + _s20;  							}  							else  								if ((_s40 > _s60) && (_s40 - 1 < _s58))  									_s18 = _s18 + _list[_s40 - 1];  						}  						else  							if (_s40 >= _s60)  							{  								if ((_s38 + 1 < _s60) && (_s38 + 1 > _s58))  									_s18 = _s18 + _list[_s38 + 1];  							}  							else  								if (_s38 + 2 > _s60)  								{  									_s18 = _s18 + _s20;  								}  								else  									if ((_s38 + 1 < _s60) && (_s38 + 1 > _s58))  										_s18 = _s18 + _list[_s38 + 1];    						if (_s58 > _s60)  						{  							if ((_s40 - 1 < _s58) && (_s38 + 1 > _s58))  							{  								_s18 = _s18 - _list[_s58];  							}  							else  								if ((_s38 < _s58) && (_s38 + 1 > _s60))  									_s18 = _s18 - _list[_s38];  						}  						else  						{  							if ((_s38 + 1 > _s58) && (_s40 - 1 < _s58))  							{  								_s18 = _s18 - _list[_s58];  							}  							else  								if ((_s40 > _s58) && (_s40 < _s60))  									_s18 = _s18 - _list[_s40];  						}  					}    					if (_s58 <= _s60)  					{  						if (_s58 >= _s60)  						{  							_list[_s60] = _s20;  						}  						else  						{  							for (_jj = _s58 + 1; _jj <= _s60 - 1; _jj++)  							{  								_list[_jj - 1] = _list[_jj];  							}  							_list[_s60 - 1] = _s20;  						}  					}  					else  					{  						for (_jj = _s58 - 1; _jj >= _s60; _jj--)  						{  							_list[_jj + 1] = _list[_jj];  						}  						_list[_s60] = _s20;  					}    					if (_s70 <= 127)  					{  						_s18 = 0;  						for (_jj = _s40; _jj <= _s38; _jj++)  						{  							_s18 = _s18 + _list[_jj];  						}  					}    					_f60 = _s18 / (_s38 - _s40 + 1);    					if (_fF8 + 1 > 31)  					{  						_fF8 = 31;  					}  					else  						_fF8 = _fF8 + 1;    					//----  					if (_fF8 <= 30)  					{  						if (_f28 > 0)  						{  							_f18 = _f8;  						}  						else  							_f18 = _f8 - _f28 * _f90;    						if (_f48 < 0)  						{  							_f38 = _f8;  						}  						else  							_f38 = _f8 - _f48 * _f90;    						_fB8 = _series;    						if (_fF8 != 30)  						{  							continue;  						}    						if (_fF8 == 30)  						{  							_fC0 = _series;    							_v4 = Math.Max(Math.Ceiling(_f78)' 1);    							_fE8 = (int)Math.Ceiling(_v4);    							_v2 = Math.Max(Math.Floor(_f78)' 1);    							_fE0 = (int)Math.Ceiling(_v2);    							if (_fE8 == _fE0)  							{  								_f68 = 1;  							}  							else  							{  								_v4 = _fE8 - _fE0;  								_f68 = (_f78 - _fE0) / _v4;  							}    							_v5 = _fE0 <= 29 ? Convert.ToInt32(_fE0) : 29;    							_v6 = _fE8 <= 29 ? Convert.ToInt32(_fE8) : 29;    							_fA8 = (_series - _buffer[_fF0 - _v5]) * (1 - _f68) / _fE0 + (_series - _buffer[_fF0 - _v6]) * _f68 / _fE8;  						}  					}  					else  					{  						_v1 = Math.Min(_f98' Math.Pow(_fA0 / _f60' _f88));    						if (_v1 < 1)  						{  							_v2 = 1;  						}  						else  						{  							_v3 = Math.Min(_f98' Math.Pow(_fA0 / _f60' _f88));    							_v2 = _v3;  						}    						_f58 = _v2;  						_f70 = Math.Pow(_f90' Math.Sqrt(_f58));    						if (_f28 > 0)  						{  							_f18 = _f8;  						}  						else  						{  							_f18 = _f8 - _f28 * _f70;  						}    						if (_f48 < 0)  						{  							_f38 = _f8;  						}  						else  						{  							_f38 = _f8 - _f48 * _f70;  						}  					}  				}    				if (_fF8 > 30)  				{  					_f30 = Math.Pow(_f50' _f58);  					_fC0 = (1 - _f30) * _series + _f30 * _fC0;  					_fC8 = (_series - _fC0) * (1 - _f50) + _f50 * _fC8;  					_fD0 = _f10 * _fC8 + _fC0;  					_f20 = -_f30 * 2;  					_f40 = _f30 * _f30;  					_fB0 = _f20 + _f40 + 1;  					_fA8 = (_fD0 - _fB8) * _fB0 + _f40 * _fA8;  					_fB8 = _fB8 + _fA8;  				}    				lastValue = (decimal)_fB8;  			}
Magic Number,StockSharp.Algo.Indicators,JurikMovingAverage,C:\repos\stocksharp_stocksharp\Algo\Indicators\JurikMovingAverage.cs,OnProcess,The following statement contains a magic number: if (_fF0 > 30)  			{  				if (Length < 1.0000000002)  				{  					_f80 = 0.0000000001; //{1.0e-10}  				}  				else  				{  					_f80 = (Length - 1) / 2.0;  				}    				if (_phase < -100)  				{  					_f10 = 0.5;  				}  				else  				{  					if (_phase > 100)  					{  						_f10 = 2.5;  					}  					else  					{  						_f10 = (double)_phase / 100 + 1.5;  					}  				}    				_v1 = Math.Log(Math.Sqrt(_f80));  				_v2 = _v1;    				if (_v1 / Math.Log(2.0) + 2.0 < 0.0)  				{  					_v3 = 0;  				}  				else  				{  					_v3 = _v2 / Math.Log(2.0) + 2.0;  				}    				_f98 = _v3;    				//----  				if (0.5 <= _f98 - 2.0)  				{  					_f88 = _f98 - 2.0;  				}  				else  				{  					_f88 = 0.5;  				}    				_f78 = Math.Sqrt(_f80) * _f98;  				_f90 = _f78 / (_f78 + 1.0);  				_f80 = _f80 * 0.9;  				_f50 = _f80 / (_f80 + 2.0);    				//----  				if (_f0 != 0)  				{  					_f0 = 0;  					_v5 = 0;    					for (_ii = 1; _ii <= 29; _ii++)  					{  						if (_buffer[_ii + 1] != _buffer[_ii])  						{  							_v5 = 1;  						}  					}    					_fD8 = _v5 * 30;    					_f38 = _fD8 == 0 ? _series : _buffer[1];    					_f18 = _f38;    					if (_fD8 > 29)  						_fD8 = 29;  				}  				else  					_fD8 = 0;    				//----  				for (_ii = _fD8; _ii >= 0; _ii--)  				{  					//{ another bigcycle...}  					_value2 = 31 - _ii;    					_f8 = _ii == 0 ? _series : _buffer[_value2];    					_f28 = _f8 - _f18;  					_f48 = _f8 - _f38;    					_v2 = Math.Max(Math.Abs(_f28)' Math.Abs(_f48));    					_fA0 = _v2;  					_vv = _fA0 + 0.0000000001; //{1.0e-10;}    					//----  					if (_s48 <= 1)  					{  						_s48 = 127;  					}  					else  					{  						_s48 = _s48 - 1;  					}    					if (_s50 <= 1)  					{  						_s50 = 10;  					}  					else  					{  						_s50 = _s50 - 1;  					}    					if (_s70 < 128)  						_s70 = _s70 + 1;    					_s8 = _s8 + _vv - _ring2[_s50];  					_ring2[_s50] = _vv;    					if (_s70 > 10)  					{  						_s20 = _s8 / 10;  					}  					else  						_s20 = _s8 / _s70;    					//----  					if (_s70 > 127)  					{  						_s10 = _ring1[_s48];  						_ring1[_s48] = _s20;  						_s68 = 64;  						_s58 = Convert.ToInt32(_s68);    						while (_s68 > 1)  						{  							if (_list[_s58] < _s10)  							{  								_s68 = _s68 * 0.5;  								_s58 = _s58 + Convert.ToInt32(_s68);  							}  							else  								if (_list[_s58] <= _s10)  								{  									_s68 = 1;  								}  								else  								{  									_s68 = _s68 * 0.5;  									_s58 = _s58 - Convert.ToInt32(_s68);  								}  						}  					}  					else  					{  						_ring1[_s48] = _s20;    						if (_s28 + _s30 > 127)  						{  							_s30 = _s30 - 1;  							_s58 = Convert.ToInt32(_s30);  						}  						else  						{  							_s28 = _s28 + 1;  							_s58 = Convert.ToInt32(_s28);  						}    						_s38 = _s28 > 96 ? 96 : Convert.ToInt32(_s28);  						_s40 = _s30 < 32 ? 32 : Convert.ToInt32(_s30);  					}    					//----  					_s68 = 64;  					_s60 = Convert.ToInt32(_s68);    					while (_s68 > 1)  					{  						if (_list[_s60] >= _s20)  						{  							if (_list[_s60 - 1] <= _s20)  							{  								_s68 = 1;  							}  							else  							{  								_s68 = _s68 * 0.5;  								_s60 = _s60 - Convert.ToInt32(_s68);  							}  						}  						else  						{  							_s68 = _s68 * 0.5;  							_s60 = _s60 + Convert.ToInt32(_s68);  						}    						if ((_s60 == 127) && (_s20 > _list[127]))  							_s60 = 128;  					}    					if (_s70 > 127)  					{  						if (_s58 >= _s60)  						{  							if ((_s38 + 1 > _s60) && (_s40 - 1 < _s60))  							{  								_s18 = _s18 + _s20;  							}  							else  								if ((_s40 > _s60) && (_s40 - 1 < _s58))  									_s18 = _s18 + _list[_s40 - 1];  						}  						else  							if (_s40 >= _s60)  							{  								if ((_s38 + 1 < _s60) && (_s38 + 1 > _s58))  									_s18 = _s18 + _list[_s38 + 1];  							}  							else  								if (_s38 + 2 > _s60)  								{  									_s18 = _s18 + _s20;  								}  								else  									if ((_s38 + 1 < _s60) && (_s38 + 1 > _s58))  										_s18 = _s18 + _list[_s38 + 1];    						if (_s58 > _s60)  						{  							if ((_s40 - 1 < _s58) && (_s38 + 1 > _s58))  							{  								_s18 = _s18 - _list[_s58];  							}  							else  								if ((_s38 < _s58) && (_s38 + 1 > _s60))  									_s18 = _s18 - _list[_s38];  						}  						else  						{  							if ((_s38 + 1 > _s58) && (_s40 - 1 < _s58))  							{  								_s18 = _s18 - _list[_s58];  							}  							else  								if ((_s40 > _s58) && (_s40 < _s60))  									_s18 = _s18 - _list[_s40];  						}  					}    					if (_s58 <= _s60)  					{  						if (_s58 >= _s60)  						{  							_list[_s60] = _s20;  						}  						else  						{  							for (_jj = _s58 + 1; _jj <= _s60 - 1; _jj++)  							{  								_list[_jj - 1] = _list[_jj];  							}  							_list[_s60 - 1] = _s20;  						}  					}  					else  					{  						for (_jj = _s58 - 1; _jj >= _s60; _jj--)  						{  							_list[_jj + 1] = _list[_jj];  						}  						_list[_s60] = _s20;  					}    					if (_s70 <= 127)  					{  						_s18 = 0;  						for (_jj = _s40; _jj <= _s38; _jj++)  						{  							_s18 = _s18 + _list[_jj];  						}  					}    					_f60 = _s18 / (_s38 - _s40 + 1);    					if (_fF8 + 1 > 31)  					{  						_fF8 = 31;  					}  					else  						_fF8 = _fF8 + 1;    					//----  					if (_fF8 <= 30)  					{  						if (_f28 > 0)  						{  							_f18 = _f8;  						}  						else  							_f18 = _f8 - _f28 * _f90;    						if (_f48 < 0)  						{  							_f38 = _f8;  						}  						else  							_f38 = _f8 - _f48 * _f90;    						_fB8 = _series;    						if (_fF8 != 30)  						{  							continue;  						}    						if (_fF8 == 30)  						{  							_fC0 = _series;    							_v4 = Math.Max(Math.Ceiling(_f78)' 1);    							_fE8 = (int)Math.Ceiling(_v4);    							_v2 = Math.Max(Math.Floor(_f78)' 1);    							_fE0 = (int)Math.Ceiling(_v2);    							if (_fE8 == _fE0)  							{  								_f68 = 1;  							}  							else  							{  								_v4 = _fE8 - _fE0;  								_f68 = (_f78 - _fE0) / _v4;  							}    							_v5 = _fE0 <= 29 ? Convert.ToInt32(_fE0) : 29;    							_v6 = _fE8 <= 29 ? Convert.ToInt32(_fE8) : 29;    							_fA8 = (_series - _buffer[_fF0 - _v5]) * (1 - _f68) / _fE0 + (_series - _buffer[_fF0 - _v6]) * _f68 / _fE8;  						}  					}  					else  					{  						_v1 = Math.Min(_f98' Math.Pow(_fA0 / _f60' _f88));    						if (_v1 < 1)  						{  							_v2 = 1;  						}  						else  						{  							_v3 = Math.Min(_f98' Math.Pow(_fA0 / _f60' _f88));    							_v2 = _v3;  						}    						_f58 = _v2;  						_f70 = Math.Pow(_f90' Math.Sqrt(_f58));    						if (_f28 > 0)  						{  							_f18 = _f8;  						}  						else  						{  							_f18 = _f8 - _f28 * _f70;  						}    						if (_f48 < 0)  						{  							_f38 = _f8;  						}  						else  						{  							_f38 = _f8 - _f48 * _f70;  						}  					}  				}    				if (_fF8 > 30)  				{  					_f30 = Math.Pow(_f50' _f58);  					_fC0 = (1 - _f30) * _series + _f30 * _fC0;  					_fC8 = (_series - _fC0) * (1 - _f50) + _f50 * _fC8;  					_fD0 = _f10 * _fC8 + _fC0;  					_f20 = -_f30 * 2;  					_f40 = _f30 * _f30;  					_fB0 = _f20 + _f40 + 1;  					_fA8 = (_fD0 - _fB8) * _fB0 + _f40 * _fA8;  					_fB8 = _fB8 + _fA8;  				}    				lastValue = (decimal)_fB8;  			}
Magic Number,StockSharp.Algo.Indicators,JurikMovingAverage,C:\repos\stocksharp_stocksharp\Algo\Indicators\JurikMovingAverage.cs,OnProcess,The following statement contains a magic number: if (_fF0 > 30)  			{  				if (Length < 1.0000000002)  				{  					_f80 = 0.0000000001; //{1.0e-10}  				}  				else  				{  					_f80 = (Length - 1) / 2.0;  				}    				if (_phase < -100)  				{  					_f10 = 0.5;  				}  				else  				{  					if (_phase > 100)  					{  						_f10 = 2.5;  					}  					else  					{  						_f10 = (double)_phase / 100 + 1.5;  					}  				}    				_v1 = Math.Log(Math.Sqrt(_f80));  				_v2 = _v1;    				if (_v1 / Math.Log(2.0) + 2.0 < 0.0)  				{  					_v3 = 0;  				}  				else  				{  					_v3 = _v2 / Math.Log(2.0) + 2.0;  				}    				_f98 = _v3;    				//----  				if (0.5 <= _f98 - 2.0)  				{  					_f88 = _f98 - 2.0;  				}  				else  				{  					_f88 = 0.5;  				}    				_f78 = Math.Sqrt(_f80) * _f98;  				_f90 = _f78 / (_f78 + 1.0);  				_f80 = _f80 * 0.9;  				_f50 = _f80 / (_f80 + 2.0);    				//----  				if (_f0 != 0)  				{  					_f0 = 0;  					_v5 = 0;    					for (_ii = 1; _ii <= 29; _ii++)  					{  						if (_buffer[_ii + 1] != _buffer[_ii])  						{  							_v5 = 1;  						}  					}    					_fD8 = _v5 * 30;    					_f38 = _fD8 == 0 ? _series : _buffer[1];    					_f18 = _f38;    					if (_fD8 > 29)  						_fD8 = 29;  				}  				else  					_fD8 = 0;    				//----  				for (_ii = _fD8; _ii >= 0; _ii--)  				{  					//{ another bigcycle...}  					_value2 = 31 - _ii;    					_f8 = _ii == 0 ? _series : _buffer[_value2];    					_f28 = _f8 - _f18;  					_f48 = _f8 - _f38;    					_v2 = Math.Max(Math.Abs(_f28)' Math.Abs(_f48));    					_fA0 = _v2;  					_vv = _fA0 + 0.0000000001; //{1.0e-10;}    					//----  					if (_s48 <= 1)  					{  						_s48 = 127;  					}  					else  					{  						_s48 = _s48 - 1;  					}    					if (_s50 <= 1)  					{  						_s50 = 10;  					}  					else  					{  						_s50 = _s50 - 1;  					}    					if (_s70 < 128)  						_s70 = _s70 + 1;    					_s8 = _s8 + _vv - _ring2[_s50];  					_ring2[_s50] = _vv;    					if (_s70 > 10)  					{  						_s20 = _s8 / 10;  					}  					else  						_s20 = _s8 / _s70;    					//----  					if (_s70 > 127)  					{  						_s10 = _ring1[_s48];  						_ring1[_s48] = _s20;  						_s68 = 64;  						_s58 = Convert.ToInt32(_s68);    						while (_s68 > 1)  						{  							if (_list[_s58] < _s10)  							{  								_s68 = _s68 * 0.5;  								_s58 = _s58 + Convert.ToInt32(_s68);  							}  							else  								if (_list[_s58] <= _s10)  								{  									_s68 = 1;  								}  								else  								{  									_s68 = _s68 * 0.5;  									_s58 = _s58 - Convert.ToInt32(_s68);  								}  						}  					}  					else  					{  						_ring1[_s48] = _s20;    						if (_s28 + _s30 > 127)  						{  							_s30 = _s30 - 1;  							_s58 = Convert.ToInt32(_s30);  						}  						else  						{  							_s28 = _s28 + 1;  							_s58 = Convert.ToInt32(_s28);  						}    						_s38 = _s28 > 96 ? 96 : Convert.ToInt32(_s28);  						_s40 = _s30 < 32 ? 32 : Convert.ToInt32(_s30);  					}    					//----  					_s68 = 64;  					_s60 = Convert.ToInt32(_s68);    					while (_s68 > 1)  					{  						if (_list[_s60] >= _s20)  						{  							if (_list[_s60 - 1] <= _s20)  							{  								_s68 = 1;  							}  							else  							{  								_s68 = _s68 * 0.5;  								_s60 = _s60 - Convert.ToInt32(_s68);  							}  						}  						else  						{  							_s68 = _s68 * 0.5;  							_s60 = _s60 + Convert.ToInt32(_s68);  						}    						if ((_s60 == 127) && (_s20 > _list[127]))  							_s60 = 128;  					}    					if (_s70 > 127)  					{  						if (_s58 >= _s60)  						{  							if ((_s38 + 1 > _s60) && (_s40 - 1 < _s60))  							{  								_s18 = _s18 + _s20;  							}  							else  								if ((_s40 > _s60) && (_s40 - 1 < _s58))  									_s18 = _s18 + _list[_s40 - 1];  						}  						else  							if (_s40 >= _s60)  							{  								if ((_s38 + 1 < _s60) && (_s38 + 1 > _s58))  									_s18 = _s18 + _list[_s38 + 1];  							}  							else  								if (_s38 + 2 > _s60)  								{  									_s18 = _s18 + _s20;  								}  								else  									if ((_s38 + 1 < _s60) && (_s38 + 1 > _s58))  										_s18 = _s18 + _list[_s38 + 1];    						if (_s58 > _s60)  						{  							if ((_s40 - 1 < _s58) && (_s38 + 1 > _s58))  							{  								_s18 = _s18 - _list[_s58];  							}  							else  								if ((_s38 < _s58) && (_s38 + 1 > _s60))  									_s18 = _s18 - _list[_s38];  						}  						else  						{  							if ((_s38 + 1 > _s58) && (_s40 - 1 < _s58))  							{  								_s18 = _s18 - _list[_s58];  							}  							else  								if ((_s40 > _s58) && (_s40 < _s60))  									_s18 = _s18 - _list[_s40];  						}  					}    					if (_s58 <= _s60)  					{  						if (_s58 >= _s60)  						{  							_list[_s60] = _s20;  						}  						else  						{  							for (_jj = _s58 + 1; _jj <= _s60 - 1; _jj++)  							{  								_list[_jj - 1] = _list[_jj];  							}  							_list[_s60 - 1] = _s20;  						}  					}  					else  					{  						for (_jj = _s58 - 1; _jj >= _s60; _jj--)  						{  							_list[_jj + 1] = _list[_jj];  						}  						_list[_s60] = _s20;  					}    					if (_s70 <= 127)  					{  						_s18 = 0;  						for (_jj = _s40; _jj <= _s38; _jj++)  						{  							_s18 = _s18 + _list[_jj];  						}  					}    					_f60 = _s18 / (_s38 - _s40 + 1);    					if (_fF8 + 1 > 31)  					{  						_fF8 = 31;  					}  					else  						_fF8 = _fF8 + 1;    					//----  					if (_fF8 <= 30)  					{  						if (_f28 > 0)  						{  							_f18 = _f8;  						}  						else  							_f18 = _f8 - _f28 * _f90;    						if (_f48 < 0)  						{  							_f38 = _f8;  						}  						else  							_f38 = _f8 - _f48 * _f90;    						_fB8 = _series;    						if (_fF8 != 30)  						{  							continue;  						}    						if (_fF8 == 30)  						{  							_fC0 = _series;    							_v4 = Math.Max(Math.Ceiling(_f78)' 1);    							_fE8 = (int)Math.Ceiling(_v4);    							_v2 = Math.Max(Math.Floor(_f78)' 1);    							_fE0 = (int)Math.Ceiling(_v2);    							if (_fE8 == _fE0)  							{  								_f68 = 1;  							}  							else  							{  								_v4 = _fE8 - _fE0;  								_f68 = (_f78 - _fE0) / _v4;  							}    							_v5 = _fE0 <= 29 ? Convert.ToInt32(_fE0) : 29;    							_v6 = _fE8 <= 29 ? Convert.ToInt32(_fE8) : 29;    							_fA8 = (_series - _buffer[_fF0 - _v5]) * (1 - _f68) / _fE0 + (_series - _buffer[_fF0 - _v6]) * _f68 / _fE8;  						}  					}  					else  					{  						_v1 = Math.Min(_f98' Math.Pow(_fA0 / _f60' _f88));    						if (_v1 < 1)  						{  							_v2 = 1;  						}  						else  						{  							_v3 = Math.Min(_f98' Math.Pow(_fA0 / _f60' _f88));    							_v2 = _v3;  						}    						_f58 = _v2;  						_f70 = Math.Pow(_f90' Math.Sqrt(_f58));    						if (_f28 > 0)  						{  							_f18 = _f8;  						}  						else  						{  							_f18 = _f8 - _f28 * _f70;  						}    						if (_f48 < 0)  						{  							_f38 = _f8;  						}  						else  						{  							_f38 = _f8 - _f48 * _f70;  						}  					}  				}    				if (_fF8 > 30)  				{  					_f30 = Math.Pow(_f50' _f58);  					_fC0 = (1 - _f30) * _series + _f30 * _fC0;  					_fC8 = (_series - _fC0) * (1 - _f50) + _f50 * _fC8;  					_fD0 = _f10 * _fC8 + _fC0;  					_f20 = -_f30 * 2;  					_f40 = _f30 * _f30;  					_fB0 = _f20 + _f40 + 1;  					_fA8 = (_fD0 - _fB8) * _fB0 + _f40 * _fA8;  					_fB8 = _fB8 + _fA8;  				}    				lastValue = (decimal)_fB8;  			}
Magic Number,StockSharp.Algo.Indicators,JurikMovingAverage,C:\repos\stocksharp_stocksharp\Algo\Indicators\JurikMovingAverage.cs,OnProcess,The following statement contains a magic number: if (_fF0 > 30)  			{  				if (Length < 1.0000000002)  				{  					_f80 = 0.0000000001; //{1.0e-10}  				}  				else  				{  					_f80 = (Length - 1) / 2.0;  				}    				if (_phase < -100)  				{  					_f10 = 0.5;  				}  				else  				{  					if (_phase > 100)  					{  						_f10 = 2.5;  					}  					else  					{  						_f10 = (double)_phase / 100 + 1.5;  					}  				}    				_v1 = Math.Log(Math.Sqrt(_f80));  				_v2 = _v1;    				if (_v1 / Math.Log(2.0) + 2.0 < 0.0)  				{  					_v3 = 0;  				}  				else  				{  					_v3 = _v2 / Math.Log(2.0) + 2.0;  				}    				_f98 = _v3;    				//----  				if (0.5 <= _f98 - 2.0)  				{  					_f88 = _f98 - 2.0;  				}  				else  				{  					_f88 = 0.5;  				}    				_f78 = Math.Sqrt(_f80) * _f98;  				_f90 = _f78 / (_f78 + 1.0);  				_f80 = _f80 * 0.9;  				_f50 = _f80 / (_f80 + 2.0);    				//----  				if (_f0 != 0)  				{  					_f0 = 0;  					_v5 = 0;    					for (_ii = 1; _ii <= 29; _ii++)  					{  						if (_buffer[_ii + 1] != _buffer[_ii])  						{  							_v5 = 1;  						}  					}    					_fD8 = _v5 * 30;    					_f38 = _fD8 == 0 ? _series : _buffer[1];    					_f18 = _f38;    					if (_fD8 > 29)  						_fD8 = 29;  				}  				else  					_fD8 = 0;    				//----  				for (_ii = _fD8; _ii >= 0; _ii--)  				{  					//{ another bigcycle...}  					_value2 = 31 - _ii;    					_f8 = _ii == 0 ? _series : _buffer[_value2];    					_f28 = _f8 - _f18;  					_f48 = _f8 - _f38;    					_v2 = Math.Max(Math.Abs(_f28)' Math.Abs(_f48));    					_fA0 = _v2;  					_vv = _fA0 + 0.0000000001; //{1.0e-10;}    					//----  					if (_s48 <= 1)  					{  						_s48 = 127;  					}  					else  					{  						_s48 = _s48 - 1;  					}    					if (_s50 <= 1)  					{  						_s50 = 10;  					}  					else  					{  						_s50 = _s50 - 1;  					}    					if (_s70 < 128)  						_s70 = _s70 + 1;    					_s8 = _s8 + _vv - _ring2[_s50];  					_ring2[_s50] = _vv;    					if (_s70 > 10)  					{  						_s20 = _s8 / 10;  					}  					else  						_s20 = _s8 / _s70;    					//----  					if (_s70 > 127)  					{  						_s10 = _ring1[_s48];  						_ring1[_s48] = _s20;  						_s68 = 64;  						_s58 = Convert.ToInt32(_s68);    						while (_s68 > 1)  						{  							if (_list[_s58] < _s10)  							{  								_s68 = _s68 * 0.5;  								_s58 = _s58 + Convert.ToInt32(_s68);  							}  							else  								if (_list[_s58] <= _s10)  								{  									_s68 = 1;  								}  								else  								{  									_s68 = _s68 * 0.5;  									_s58 = _s58 - Convert.ToInt32(_s68);  								}  						}  					}  					else  					{  						_ring1[_s48] = _s20;    						if (_s28 + _s30 > 127)  						{  							_s30 = _s30 - 1;  							_s58 = Convert.ToInt32(_s30);  						}  						else  						{  							_s28 = _s28 + 1;  							_s58 = Convert.ToInt32(_s28);  						}    						_s38 = _s28 > 96 ? 96 : Convert.ToInt32(_s28);  						_s40 = _s30 < 32 ? 32 : Convert.ToInt32(_s30);  					}    					//----  					_s68 = 64;  					_s60 = Convert.ToInt32(_s68);    					while (_s68 > 1)  					{  						if (_list[_s60] >= _s20)  						{  							if (_list[_s60 - 1] <= _s20)  							{  								_s68 = 1;  							}  							else  							{  								_s68 = _s68 * 0.5;  								_s60 = _s60 - Convert.ToInt32(_s68);  							}  						}  						else  						{  							_s68 = _s68 * 0.5;  							_s60 = _s60 + Convert.ToInt32(_s68);  						}    						if ((_s60 == 127) && (_s20 > _list[127]))  							_s60 = 128;  					}    					if (_s70 > 127)  					{  						if (_s58 >= _s60)  						{  							if ((_s38 + 1 > _s60) && (_s40 - 1 < _s60))  							{  								_s18 = _s18 + _s20;  							}  							else  								if ((_s40 > _s60) && (_s40 - 1 < _s58))  									_s18 = _s18 + _list[_s40 - 1];  						}  						else  							if (_s40 >= _s60)  							{  								if ((_s38 + 1 < _s60) && (_s38 + 1 > _s58))  									_s18 = _s18 + _list[_s38 + 1];  							}  							else  								if (_s38 + 2 > _s60)  								{  									_s18 = _s18 + _s20;  								}  								else  									if ((_s38 + 1 < _s60) && (_s38 + 1 > _s58))  										_s18 = _s18 + _list[_s38 + 1];    						if (_s58 > _s60)  						{  							if ((_s40 - 1 < _s58) && (_s38 + 1 > _s58))  							{  								_s18 = _s18 - _list[_s58];  							}  							else  								if ((_s38 < _s58) && (_s38 + 1 > _s60))  									_s18 = _s18 - _list[_s38];  						}  						else  						{  							if ((_s38 + 1 > _s58) && (_s40 - 1 < _s58))  							{  								_s18 = _s18 - _list[_s58];  							}  							else  								if ((_s40 > _s58) && (_s40 < _s60))  									_s18 = _s18 - _list[_s40];  						}  					}    					if (_s58 <= _s60)  					{  						if (_s58 >= _s60)  						{  							_list[_s60] = _s20;  						}  						else  						{  							for (_jj = _s58 + 1; _jj <= _s60 - 1; _jj++)  							{  								_list[_jj - 1] = _list[_jj];  							}  							_list[_s60 - 1] = _s20;  						}  					}  					else  					{  						for (_jj = _s58 - 1; _jj >= _s60; _jj--)  						{  							_list[_jj + 1] = _list[_jj];  						}  						_list[_s60] = _s20;  					}    					if (_s70 <= 127)  					{  						_s18 = 0;  						for (_jj = _s40; _jj <= _s38; _jj++)  						{  							_s18 = _s18 + _list[_jj];  						}  					}    					_f60 = _s18 / (_s38 - _s40 + 1);    					if (_fF8 + 1 > 31)  					{  						_fF8 = 31;  					}  					else  						_fF8 = _fF8 + 1;    					//----  					if (_fF8 <= 30)  					{  						if (_f28 > 0)  						{  							_f18 = _f8;  						}  						else  							_f18 = _f8 - _f28 * _f90;    						if (_f48 < 0)  						{  							_f38 = _f8;  						}  						else  							_f38 = _f8 - _f48 * _f90;    						_fB8 = _series;    						if (_fF8 != 30)  						{  							continue;  						}    						if (_fF8 == 30)  						{  							_fC0 = _series;    							_v4 = Math.Max(Math.Ceiling(_f78)' 1);    							_fE8 = (int)Math.Ceiling(_v4);    							_v2 = Math.Max(Math.Floor(_f78)' 1);    							_fE0 = (int)Math.Ceiling(_v2);    							if (_fE8 == _fE0)  							{  								_f68 = 1;  							}  							else  							{  								_v4 = _fE8 - _fE0;  								_f68 = (_f78 - _fE0) / _v4;  							}    							_v5 = _fE0 <= 29 ? Convert.ToInt32(_fE0) : 29;    							_v6 = _fE8 <= 29 ? Convert.ToInt32(_fE8) : 29;    							_fA8 = (_series - _buffer[_fF0 - _v5]) * (1 - _f68) / _fE0 + (_series - _buffer[_fF0 - _v6]) * _f68 / _fE8;  						}  					}  					else  					{  						_v1 = Math.Min(_f98' Math.Pow(_fA0 / _f60' _f88));    						if (_v1 < 1)  						{  							_v2 = 1;  						}  						else  						{  							_v3 = Math.Min(_f98' Math.Pow(_fA0 / _f60' _f88));    							_v2 = _v3;  						}    						_f58 = _v2;  						_f70 = Math.Pow(_f90' Math.Sqrt(_f58));    						if (_f28 > 0)  						{  							_f18 = _f8;  						}  						else  						{  							_f18 = _f8 - _f28 * _f70;  						}    						if (_f48 < 0)  						{  							_f38 = _f8;  						}  						else  						{  							_f38 = _f8 - _f48 * _f70;  						}  					}  				}    				if (_fF8 > 30)  				{  					_f30 = Math.Pow(_f50' _f58);  					_fC0 = (1 - _f30) * _series + _f30 * _fC0;  					_fC8 = (_series - _fC0) * (1 - _f50) + _f50 * _fC8;  					_fD0 = _f10 * _fC8 + _fC0;  					_f20 = -_f30 * 2;  					_f40 = _f30 * _f30;  					_fB0 = _f20 + _f40 + 1;  					_fA8 = (_fD0 - _fB8) * _fB0 + _f40 * _fA8;  					_fB8 = _fB8 + _fA8;  				}    				lastValue = (decimal)_fB8;  			}
Magic Number,StockSharp.Algo.Indicators,JurikMovingAverage,C:\repos\stocksharp_stocksharp\Algo\Indicators\JurikMovingAverage.cs,OnProcess,The following statement contains a magic number: if (_fF0 > 30)  			{  				if (Length < 1.0000000002)  				{  					_f80 = 0.0000000001; //{1.0e-10}  				}  				else  				{  					_f80 = (Length - 1) / 2.0;  				}    				if (_phase < -100)  				{  					_f10 = 0.5;  				}  				else  				{  					if (_phase > 100)  					{  						_f10 = 2.5;  					}  					else  					{  						_f10 = (double)_phase / 100 + 1.5;  					}  				}    				_v1 = Math.Log(Math.Sqrt(_f80));  				_v2 = _v1;    				if (_v1 / Math.Log(2.0) + 2.0 < 0.0)  				{  					_v3 = 0;  				}  				else  				{  					_v3 = _v2 / Math.Log(2.0) + 2.0;  				}    				_f98 = _v3;    				//----  				if (0.5 <= _f98 - 2.0)  				{  					_f88 = _f98 - 2.0;  				}  				else  				{  					_f88 = 0.5;  				}    				_f78 = Math.Sqrt(_f80) * _f98;  				_f90 = _f78 / (_f78 + 1.0);  				_f80 = _f80 * 0.9;  				_f50 = _f80 / (_f80 + 2.0);    				//----  				if (_f0 != 0)  				{  					_f0 = 0;  					_v5 = 0;    					for (_ii = 1; _ii <= 29; _ii++)  					{  						if (_buffer[_ii + 1] != _buffer[_ii])  						{  							_v5 = 1;  						}  					}    					_fD8 = _v5 * 30;    					_f38 = _fD8 == 0 ? _series : _buffer[1];    					_f18 = _f38;    					if (_fD8 > 29)  						_fD8 = 29;  				}  				else  					_fD8 = 0;    				//----  				for (_ii = _fD8; _ii >= 0; _ii--)  				{  					//{ another bigcycle...}  					_value2 = 31 - _ii;    					_f8 = _ii == 0 ? _series : _buffer[_value2];    					_f28 = _f8 - _f18;  					_f48 = _f8 - _f38;    					_v2 = Math.Max(Math.Abs(_f28)' Math.Abs(_f48));    					_fA0 = _v2;  					_vv = _fA0 + 0.0000000001; //{1.0e-10;}    					//----  					if (_s48 <= 1)  					{  						_s48 = 127;  					}  					else  					{  						_s48 = _s48 - 1;  					}    					if (_s50 <= 1)  					{  						_s50 = 10;  					}  					else  					{  						_s50 = _s50 - 1;  					}    					if (_s70 < 128)  						_s70 = _s70 + 1;    					_s8 = _s8 + _vv - _ring2[_s50];  					_ring2[_s50] = _vv;    					if (_s70 > 10)  					{  						_s20 = _s8 / 10;  					}  					else  						_s20 = _s8 / _s70;    					//----  					if (_s70 > 127)  					{  						_s10 = _ring1[_s48];  						_ring1[_s48] = _s20;  						_s68 = 64;  						_s58 = Convert.ToInt32(_s68);    						while (_s68 > 1)  						{  							if (_list[_s58] < _s10)  							{  								_s68 = _s68 * 0.5;  								_s58 = _s58 + Convert.ToInt32(_s68);  							}  							else  								if (_list[_s58] <= _s10)  								{  									_s68 = 1;  								}  								else  								{  									_s68 = _s68 * 0.5;  									_s58 = _s58 - Convert.ToInt32(_s68);  								}  						}  					}  					else  					{  						_ring1[_s48] = _s20;    						if (_s28 + _s30 > 127)  						{  							_s30 = _s30 - 1;  							_s58 = Convert.ToInt32(_s30);  						}  						else  						{  							_s28 = _s28 + 1;  							_s58 = Convert.ToInt32(_s28);  						}    						_s38 = _s28 > 96 ? 96 : Convert.ToInt32(_s28);  						_s40 = _s30 < 32 ? 32 : Convert.ToInt32(_s30);  					}    					//----  					_s68 = 64;  					_s60 = Convert.ToInt32(_s68);    					while (_s68 > 1)  					{  						if (_list[_s60] >= _s20)  						{  							if (_list[_s60 - 1] <= _s20)  							{  								_s68 = 1;  							}  							else  							{  								_s68 = _s68 * 0.5;  								_s60 = _s60 - Convert.ToInt32(_s68);  							}  						}  						else  						{  							_s68 = _s68 * 0.5;  							_s60 = _s60 + Convert.ToInt32(_s68);  						}    						if ((_s60 == 127) && (_s20 > _list[127]))  							_s60 = 128;  					}    					if (_s70 > 127)  					{  						if (_s58 >= _s60)  						{  							if ((_s38 + 1 > _s60) && (_s40 - 1 < _s60))  							{  								_s18 = _s18 + _s20;  							}  							else  								if ((_s40 > _s60) && (_s40 - 1 < _s58))  									_s18 = _s18 + _list[_s40 - 1];  						}  						else  							if (_s40 >= _s60)  							{  								if ((_s38 + 1 < _s60) && (_s38 + 1 > _s58))  									_s18 = _s18 + _list[_s38 + 1];  							}  							else  								if (_s38 + 2 > _s60)  								{  									_s18 = _s18 + _s20;  								}  								else  									if ((_s38 + 1 < _s60) && (_s38 + 1 > _s58))  										_s18 = _s18 + _list[_s38 + 1];    						if (_s58 > _s60)  						{  							if ((_s40 - 1 < _s58) && (_s38 + 1 > _s58))  							{  								_s18 = _s18 - _list[_s58];  							}  							else  								if ((_s38 < _s58) && (_s38 + 1 > _s60))  									_s18 = _s18 - _list[_s38];  						}  						else  						{  							if ((_s38 + 1 > _s58) && (_s40 - 1 < _s58))  							{  								_s18 = _s18 - _list[_s58];  							}  							else  								if ((_s40 > _s58) && (_s40 < _s60))  									_s18 = _s18 - _list[_s40];  						}  					}    					if (_s58 <= _s60)  					{  						if (_s58 >= _s60)  						{  							_list[_s60] = _s20;  						}  						else  						{  							for (_jj = _s58 + 1; _jj <= _s60 - 1; _jj++)  							{  								_list[_jj - 1] = _list[_jj];  							}  							_list[_s60 - 1] = _s20;  						}  					}  					else  					{  						for (_jj = _s58 - 1; _jj >= _s60; _jj--)  						{  							_list[_jj + 1] = _list[_jj];  						}  						_list[_s60] = _s20;  					}    					if (_s70 <= 127)  					{  						_s18 = 0;  						for (_jj = _s40; _jj <= _s38; _jj++)  						{  							_s18 = _s18 + _list[_jj];  						}  					}    					_f60 = _s18 / (_s38 - _s40 + 1);    					if (_fF8 + 1 > 31)  					{  						_fF8 = 31;  					}  					else  						_fF8 = _fF8 + 1;    					//----  					if (_fF8 <= 30)  					{  						if (_f28 > 0)  						{  							_f18 = _f8;  						}  						else  							_f18 = _f8 - _f28 * _f90;    						if (_f48 < 0)  						{  							_f38 = _f8;  						}  						else  							_f38 = _f8 - _f48 * _f90;    						_fB8 = _series;    						if (_fF8 != 30)  						{  							continue;  						}    						if (_fF8 == 30)  						{  							_fC0 = _series;    							_v4 = Math.Max(Math.Ceiling(_f78)' 1);    							_fE8 = (int)Math.Ceiling(_v4);    							_v2 = Math.Max(Math.Floor(_f78)' 1);    							_fE0 = (int)Math.Ceiling(_v2);    							if (_fE8 == _fE0)  							{  								_f68 = 1;  							}  							else  							{  								_v4 = _fE8 - _fE0;  								_f68 = (_f78 - _fE0) / _v4;  							}    							_v5 = _fE0 <= 29 ? Convert.ToInt32(_fE0) : 29;    							_v6 = _fE8 <= 29 ? Convert.ToInt32(_fE8) : 29;    							_fA8 = (_series - _buffer[_fF0 - _v5]) * (1 - _f68) / _fE0 + (_series - _buffer[_fF0 - _v6]) * _f68 / _fE8;  						}  					}  					else  					{  						_v1 = Math.Min(_f98' Math.Pow(_fA0 / _f60' _f88));    						if (_v1 < 1)  						{  							_v2 = 1;  						}  						else  						{  							_v3 = Math.Min(_f98' Math.Pow(_fA0 / _f60' _f88));    							_v2 = _v3;  						}    						_f58 = _v2;  						_f70 = Math.Pow(_f90' Math.Sqrt(_f58));    						if (_f28 > 0)  						{  							_f18 = _f8;  						}  						else  						{  							_f18 = _f8 - _f28 * _f70;  						}    						if (_f48 < 0)  						{  							_f38 = _f8;  						}  						else  						{  							_f38 = _f8 - _f48 * _f70;  						}  					}  				}    				if (_fF8 > 30)  				{  					_f30 = Math.Pow(_f50' _f58);  					_fC0 = (1 - _f30) * _series + _f30 * _fC0;  					_fC8 = (_series - _fC0) * (1 - _f50) + _f50 * _fC8;  					_fD0 = _f10 * _fC8 + _fC0;  					_f20 = -_f30 * 2;  					_f40 = _f30 * _f30;  					_fB0 = _f20 + _f40 + 1;  					_fA8 = (_fD0 - _fB8) * _fB0 + _f40 * _fA8;  					_fB8 = _fB8 + _fA8;  				}    				lastValue = (decimal)_fB8;  			}
Magic Number,StockSharp.Algo.Indicators,JurikMovingAverage,C:\repos\stocksharp_stocksharp\Algo\Indicators\JurikMovingAverage.cs,OnProcess,The following statement contains a magic number: if (_fF0 > 30)  			{  				if (Length < 1.0000000002)  				{  					_f80 = 0.0000000001; //{1.0e-10}  				}  				else  				{  					_f80 = (Length - 1) / 2.0;  				}    				if (_phase < -100)  				{  					_f10 = 0.5;  				}  				else  				{  					if (_phase > 100)  					{  						_f10 = 2.5;  					}  					else  					{  						_f10 = (double)_phase / 100 + 1.5;  					}  				}    				_v1 = Math.Log(Math.Sqrt(_f80));  				_v2 = _v1;    				if (_v1 / Math.Log(2.0) + 2.0 < 0.0)  				{  					_v3 = 0;  				}  				else  				{  					_v3 = _v2 / Math.Log(2.0) + 2.0;  				}    				_f98 = _v3;    				//----  				if (0.5 <= _f98 - 2.0)  				{  					_f88 = _f98 - 2.0;  				}  				else  				{  					_f88 = 0.5;  				}    				_f78 = Math.Sqrt(_f80) * _f98;  				_f90 = _f78 / (_f78 + 1.0);  				_f80 = _f80 * 0.9;  				_f50 = _f80 / (_f80 + 2.0);    				//----  				if (_f0 != 0)  				{  					_f0 = 0;  					_v5 = 0;    					for (_ii = 1; _ii <= 29; _ii++)  					{  						if (_buffer[_ii + 1] != _buffer[_ii])  						{  							_v5 = 1;  						}  					}    					_fD8 = _v5 * 30;    					_f38 = _fD8 == 0 ? _series : _buffer[1];    					_f18 = _f38;    					if (_fD8 > 29)  						_fD8 = 29;  				}  				else  					_fD8 = 0;    				//----  				for (_ii = _fD8; _ii >= 0; _ii--)  				{  					//{ another bigcycle...}  					_value2 = 31 - _ii;    					_f8 = _ii == 0 ? _series : _buffer[_value2];    					_f28 = _f8 - _f18;  					_f48 = _f8 - _f38;    					_v2 = Math.Max(Math.Abs(_f28)' Math.Abs(_f48));    					_fA0 = _v2;  					_vv = _fA0 + 0.0000000001; //{1.0e-10;}    					//----  					if (_s48 <= 1)  					{  						_s48 = 127;  					}  					else  					{  						_s48 = _s48 - 1;  					}    					if (_s50 <= 1)  					{  						_s50 = 10;  					}  					else  					{  						_s50 = _s50 - 1;  					}    					if (_s70 < 128)  						_s70 = _s70 + 1;    					_s8 = _s8 + _vv - _ring2[_s50];  					_ring2[_s50] = _vv;    					if (_s70 > 10)  					{  						_s20 = _s8 / 10;  					}  					else  						_s20 = _s8 / _s70;    					//----  					if (_s70 > 127)  					{  						_s10 = _ring1[_s48];  						_ring1[_s48] = _s20;  						_s68 = 64;  						_s58 = Convert.ToInt32(_s68);    						while (_s68 > 1)  						{  							if (_list[_s58] < _s10)  							{  								_s68 = _s68 * 0.5;  								_s58 = _s58 + Convert.ToInt32(_s68);  							}  							else  								if (_list[_s58] <= _s10)  								{  									_s68 = 1;  								}  								else  								{  									_s68 = _s68 * 0.5;  									_s58 = _s58 - Convert.ToInt32(_s68);  								}  						}  					}  					else  					{  						_ring1[_s48] = _s20;    						if (_s28 + _s30 > 127)  						{  							_s30 = _s30 - 1;  							_s58 = Convert.ToInt32(_s30);  						}  						else  						{  							_s28 = _s28 + 1;  							_s58 = Convert.ToInt32(_s28);  						}    						_s38 = _s28 > 96 ? 96 : Convert.ToInt32(_s28);  						_s40 = _s30 < 32 ? 32 : Convert.ToInt32(_s30);  					}    					//----  					_s68 = 64;  					_s60 = Convert.ToInt32(_s68);    					while (_s68 > 1)  					{  						if (_list[_s60] >= _s20)  						{  							if (_list[_s60 - 1] <= _s20)  							{  								_s68 = 1;  							}  							else  							{  								_s68 = _s68 * 0.5;  								_s60 = _s60 - Convert.ToInt32(_s68);  							}  						}  						else  						{  							_s68 = _s68 * 0.5;  							_s60 = _s60 + Convert.ToInt32(_s68);  						}    						if ((_s60 == 127) && (_s20 > _list[127]))  							_s60 = 128;  					}    					if (_s70 > 127)  					{  						if (_s58 >= _s60)  						{  							if ((_s38 + 1 > _s60) && (_s40 - 1 < _s60))  							{  								_s18 = _s18 + _s20;  							}  							else  								if ((_s40 > _s60) && (_s40 - 1 < _s58))  									_s18 = _s18 + _list[_s40 - 1];  						}  						else  							if (_s40 >= _s60)  							{  								if ((_s38 + 1 < _s60) && (_s38 + 1 > _s58))  									_s18 = _s18 + _list[_s38 + 1];  							}  							else  								if (_s38 + 2 > _s60)  								{  									_s18 = _s18 + _s20;  								}  								else  									if ((_s38 + 1 < _s60) && (_s38 + 1 > _s58))  										_s18 = _s18 + _list[_s38 + 1];    						if (_s58 > _s60)  						{  							if ((_s40 - 1 < _s58) && (_s38 + 1 > _s58))  							{  								_s18 = _s18 - _list[_s58];  							}  							else  								if ((_s38 < _s58) && (_s38 + 1 > _s60))  									_s18 = _s18 - _list[_s38];  						}  						else  						{  							if ((_s38 + 1 > _s58) && (_s40 - 1 < _s58))  							{  								_s18 = _s18 - _list[_s58];  							}  							else  								if ((_s40 > _s58) && (_s40 < _s60))  									_s18 = _s18 - _list[_s40];  						}  					}    					if (_s58 <= _s60)  					{  						if (_s58 >= _s60)  						{  							_list[_s60] = _s20;  						}  						else  						{  							for (_jj = _s58 + 1; _jj <= _s60 - 1; _jj++)  							{  								_list[_jj - 1] = _list[_jj];  							}  							_list[_s60 - 1] = _s20;  						}  					}  					else  					{  						for (_jj = _s58 - 1; _jj >= _s60; _jj--)  						{  							_list[_jj + 1] = _list[_jj];  						}  						_list[_s60] = _s20;  					}    					if (_s70 <= 127)  					{  						_s18 = 0;  						for (_jj = _s40; _jj <= _s38; _jj++)  						{  							_s18 = _s18 + _list[_jj];  						}  					}    					_f60 = _s18 / (_s38 - _s40 + 1);    					if (_fF8 + 1 > 31)  					{  						_fF8 = 31;  					}  					else  						_fF8 = _fF8 + 1;    					//----  					if (_fF8 <= 30)  					{  						if (_f28 > 0)  						{  							_f18 = _f8;  						}  						else  							_f18 = _f8 - _f28 * _f90;    						if (_f48 < 0)  						{  							_f38 = _f8;  						}  						else  							_f38 = _f8 - _f48 * _f90;    						_fB8 = _series;    						if (_fF8 != 30)  						{  							continue;  						}    						if (_fF8 == 30)  						{  							_fC0 = _series;    							_v4 = Math.Max(Math.Ceiling(_f78)' 1);    							_fE8 = (int)Math.Ceiling(_v4);    							_v2 = Math.Max(Math.Floor(_f78)' 1);    							_fE0 = (int)Math.Ceiling(_v2);    							if (_fE8 == _fE0)  							{  								_f68 = 1;  							}  							else  							{  								_v4 = _fE8 - _fE0;  								_f68 = (_f78 - _fE0) / _v4;  							}    							_v5 = _fE0 <= 29 ? Convert.ToInt32(_fE0) : 29;    							_v6 = _fE8 <= 29 ? Convert.ToInt32(_fE8) : 29;    							_fA8 = (_series - _buffer[_fF0 - _v5]) * (1 - _f68) / _fE0 + (_series - _buffer[_fF0 - _v6]) * _f68 / _fE8;  						}  					}  					else  					{  						_v1 = Math.Min(_f98' Math.Pow(_fA0 / _f60' _f88));    						if (_v1 < 1)  						{  							_v2 = 1;  						}  						else  						{  							_v3 = Math.Min(_f98' Math.Pow(_fA0 / _f60' _f88));    							_v2 = _v3;  						}    						_f58 = _v2;  						_f70 = Math.Pow(_f90' Math.Sqrt(_f58));    						if (_f28 > 0)  						{  							_f18 = _f8;  						}  						else  						{  							_f18 = _f8 - _f28 * _f70;  						}    						if (_f48 < 0)  						{  							_f38 = _f8;  						}  						else  						{  							_f38 = _f8 - _f48 * _f70;  						}  					}  				}    				if (_fF8 > 30)  				{  					_f30 = Math.Pow(_f50' _f58);  					_fC0 = (1 - _f30) * _series + _f30 * _fC0;  					_fC8 = (_series - _fC0) * (1 - _f50) + _f50 * _fC8;  					_fD0 = _f10 * _fC8 + _fC0;  					_f20 = -_f30 * 2;  					_f40 = _f30 * _f30;  					_fB0 = _f20 + _f40 + 1;  					_fA8 = (_fD0 - _fB8) * _fB0 + _f40 * _fA8;  					_fB8 = _fB8 + _fA8;  				}    				lastValue = (decimal)_fB8;  			}
Magic Number,StockSharp.Algo.Indicators,JurikMovingAverage,C:\repos\stocksharp_stocksharp\Algo\Indicators\JurikMovingAverage.cs,OnProcess,The following statement contains a magic number: if (_fF0 > 30)  			{  				if (Length < 1.0000000002)  				{  					_f80 = 0.0000000001; //{1.0e-10}  				}  				else  				{  					_f80 = (Length - 1) / 2.0;  				}    				if (_phase < -100)  				{  					_f10 = 0.5;  				}  				else  				{  					if (_phase > 100)  					{  						_f10 = 2.5;  					}  					else  					{  						_f10 = (double)_phase / 100 + 1.5;  					}  				}    				_v1 = Math.Log(Math.Sqrt(_f80));  				_v2 = _v1;    				if (_v1 / Math.Log(2.0) + 2.0 < 0.0)  				{  					_v3 = 0;  				}  				else  				{  					_v3 = _v2 / Math.Log(2.0) + 2.0;  				}    				_f98 = _v3;    				//----  				if (0.5 <= _f98 - 2.0)  				{  					_f88 = _f98 - 2.0;  				}  				else  				{  					_f88 = 0.5;  				}    				_f78 = Math.Sqrt(_f80) * _f98;  				_f90 = _f78 / (_f78 + 1.0);  				_f80 = _f80 * 0.9;  				_f50 = _f80 / (_f80 + 2.0);    				//----  				if (_f0 != 0)  				{  					_f0 = 0;  					_v5 = 0;    					for (_ii = 1; _ii <= 29; _ii++)  					{  						if (_buffer[_ii + 1] != _buffer[_ii])  						{  							_v5 = 1;  						}  					}    					_fD8 = _v5 * 30;    					_f38 = _fD8 == 0 ? _series : _buffer[1];    					_f18 = _f38;    					if (_fD8 > 29)  						_fD8 = 29;  				}  				else  					_fD8 = 0;    				//----  				for (_ii = _fD8; _ii >= 0; _ii--)  				{  					//{ another bigcycle...}  					_value2 = 31 - _ii;    					_f8 = _ii == 0 ? _series : _buffer[_value2];    					_f28 = _f8 - _f18;  					_f48 = _f8 - _f38;    					_v2 = Math.Max(Math.Abs(_f28)' Math.Abs(_f48));    					_fA0 = _v2;  					_vv = _fA0 + 0.0000000001; //{1.0e-10;}    					//----  					if (_s48 <= 1)  					{  						_s48 = 127;  					}  					else  					{  						_s48 = _s48 - 1;  					}    					if (_s50 <= 1)  					{  						_s50 = 10;  					}  					else  					{  						_s50 = _s50 - 1;  					}    					if (_s70 < 128)  						_s70 = _s70 + 1;    					_s8 = _s8 + _vv - _ring2[_s50];  					_ring2[_s50] = _vv;    					if (_s70 > 10)  					{  						_s20 = _s8 / 10;  					}  					else  						_s20 = _s8 / _s70;    					//----  					if (_s70 > 127)  					{  						_s10 = _ring1[_s48];  						_ring1[_s48] = _s20;  						_s68 = 64;  						_s58 = Convert.ToInt32(_s68);    						while (_s68 > 1)  						{  							if (_list[_s58] < _s10)  							{  								_s68 = _s68 * 0.5;  								_s58 = _s58 + Convert.ToInt32(_s68);  							}  							else  								if (_list[_s58] <= _s10)  								{  									_s68 = 1;  								}  								else  								{  									_s68 = _s68 * 0.5;  									_s58 = _s58 - Convert.ToInt32(_s68);  								}  						}  					}  					else  					{  						_ring1[_s48] = _s20;    						if (_s28 + _s30 > 127)  						{  							_s30 = _s30 - 1;  							_s58 = Convert.ToInt32(_s30);  						}  						else  						{  							_s28 = _s28 + 1;  							_s58 = Convert.ToInt32(_s28);  						}    						_s38 = _s28 > 96 ? 96 : Convert.ToInt32(_s28);  						_s40 = _s30 < 32 ? 32 : Convert.ToInt32(_s30);  					}    					//----  					_s68 = 64;  					_s60 = Convert.ToInt32(_s68);    					while (_s68 > 1)  					{  						if (_list[_s60] >= _s20)  						{  							if (_list[_s60 - 1] <= _s20)  							{  								_s68 = 1;  							}  							else  							{  								_s68 = _s68 * 0.5;  								_s60 = _s60 - Convert.ToInt32(_s68);  							}  						}  						else  						{  							_s68 = _s68 * 0.5;  							_s60 = _s60 + Convert.ToInt32(_s68);  						}    						if ((_s60 == 127) && (_s20 > _list[127]))  							_s60 = 128;  					}    					if (_s70 > 127)  					{  						if (_s58 >= _s60)  						{  							if ((_s38 + 1 > _s60) && (_s40 - 1 < _s60))  							{  								_s18 = _s18 + _s20;  							}  							else  								if ((_s40 > _s60) && (_s40 - 1 < _s58))  									_s18 = _s18 + _list[_s40 - 1];  						}  						else  							if (_s40 >= _s60)  							{  								if ((_s38 + 1 < _s60) && (_s38 + 1 > _s58))  									_s18 = _s18 + _list[_s38 + 1];  							}  							else  								if (_s38 + 2 > _s60)  								{  									_s18 = _s18 + _s20;  								}  								else  									if ((_s38 + 1 < _s60) && (_s38 + 1 > _s58))  										_s18 = _s18 + _list[_s38 + 1];    						if (_s58 > _s60)  						{  							if ((_s40 - 1 < _s58) && (_s38 + 1 > _s58))  							{  								_s18 = _s18 - _list[_s58];  							}  							else  								if ((_s38 < _s58) && (_s38 + 1 > _s60))  									_s18 = _s18 - _list[_s38];  						}  						else  						{  							if ((_s38 + 1 > _s58) && (_s40 - 1 < _s58))  							{  								_s18 = _s18 - _list[_s58];  							}  							else  								if ((_s40 > _s58) && (_s40 < _s60))  									_s18 = _s18 - _list[_s40];  						}  					}    					if (_s58 <= _s60)  					{  						if (_s58 >= _s60)  						{  							_list[_s60] = _s20;  						}  						else  						{  							for (_jj = _s58 + 1; _jj <= _s60 - 1; _jj++)  							{  								_list[_jj - 1] = _list[_jj];  							}  							_list[_s60 - 1] = _s20;  						}  					}  					else  					{  						for (_jj = _s58 - 1; _jj >= _s60; _jj--)  						{  							_list[_jj + 1] = _list[_jj];  						}  						_list[_s60] = _s20;  					}    					if (_s70 <= 127)  					{  						_s18 = 0;  						for (_jj = _s40; _jj <= _s38; _jj++)  						{  							_s18 = _s18 + _list[_jj];  						}  					}    					_f60 = _s18 / (_s38 - _s40 + 1);    					if (_fF8 + 1 > 31)  					{  						_fF8 = 31;  					}  					else  						_fF8 = _fF8 + 1;    					//----  					if (_fF8 <= 30)  					{  						if (_f28 > 0)  						{  							_f18 = _f8;  						}  						else  							_f18 = _f8 - _f28 * _f90;    						if (_f48 < 0)  						{  							_f38 = _f8;  						}  						else  							_f38 = _f8 - _f48 * _f90;    						_fB8 = _series;    						if (_fF8 != 30)  						{  							continue;  						}    						if (_fF8 == 30)  						{  							_fC0 = _series;    							_v4 = Math.Max(Math.Ceiling(_f78)' 1);    							_fE8 = (int)Math.Ceiling(_v4);    							_v2 = Math.Max(Math.Floor(_f78)' 1);    							_fE0 = (int)Math.Ceiling(_v2);    							if (_fE8 == _fE0)  							{  								_f68 = 1;  							}  							else  							{  								_v4 = _fE8 - _fE0;  								_f68 = (_f78 - _fE0) / _v4;  							}    							_v5 = _fE0 <= 29 ? Convert.ToInt32(_fE0) : 29;    							_v6 = _fE8 <= 29 ? Convert.ToInt32(_fE8) : 29;    							_fA8 = (_series - _buffer[_fF0 - _v5]) * (1 - _f68) / _fE0 + (_series - _buffer[_fF0 - _v6]) * _f68 / _fE8;  						}  					}  					else  					{  						_v1 = Math.Min(_f98' Math.Pow(_fA0 / _f60' _f88));    						if (_v1 < 1)  						{  							_v2 = 1;  						}  						else  						{  							_v3 = Math.Min(_f98' Math.Pow(_fA0 / _f60' _f88));    							_v2 = _v3;  						}    						_f58 = _v2;  						_f70 = Math.Pow(_f90' Math.Sqrt(_f58));    						if (_f28 > 0)  						{  							_f18 = _f8;  						}  						else  						{  							_f18 = _f8 - _f28 * _f70;  						}    						if (_f48 < 0)  						{  							_f38 = _f8;  						}  						else  						{  							_f38 = _f8 - _f48 * _f70;  						}  					}  				}    				if (_fF8 > 30)  				{  					_f30 = Math.Pow(_f50' _f58);  					_fC0 = (1 - _f30) * _series + _f30 * _fC0;  					_fC8 = (_series - _fC0) * (1 - _f50) + _f50 * _fC8;  					_fD0 = _f10 * _fC8 + _fC0;  					_f20 = -_f30 * 2;  					_f40 = _f30 * _f30;  					_fB0 = _f20 + _f40 + 1;  					_fA8 = (_fD0 - _fB8) * _fB0 + _f40 * _fA8;  					_fB8 = _fB8 + _fA8;  				}    				lastValue = (decimal)_fB8;  			}
Magic Number,StockSharp.Algo.Indicators,JurikMovingAverage,C:\repos\stocksharp_stocksharp\Algo\Indicators\JurikMovingAverage.cs,OnProcess,The following statement contains a magic number: if (_fF0 > 30)  			{  				if (Length < 1.0000000002)  				{  					_f80 = 0.0000000001; //{1.0e-10}  				}  				else  				{  					_f80 = (Length - 1) / 2.0;  				}    				if (_phase < -100)  				{  					_f10 = 0.5;  				}  				else  				{  					if (_phase > 100)  					{  						_f10 = 2.5;  					}  					else  					{  						_f10 = (double)_phase / 100 + 1.5;  					}  				}    				_v1 = Math.Log(Math.Sqrt(_f80));  				_v2 = _v1;    				if (_v1 / Math.Log(2.0) + 2.0 < 0.0)  				{  					_v3 = 0;  				}  				else  				{  					_v3 = _v2 / Math.Log(2.0) + 2.0;  				}    				_f98 = _v3;    				//----  				if (0.5 <= _f98 - 2.0)  				{  					_f88 = _f98 - 2.0;  				}  				else  				{  					_f88 = 0.5;  				}    				_f78 = Math.Sqrt(_f80) * _f98;  				_f90 = _f78 / (_f78 + 1.0);  				_f80 = _f80 * 0.9;  				_f50 = _f80 / (_f80 + 2.0);    				//----  				if (_f0 != 0)  				{  					_f0 = 0;  					_v5 = 0;    					for (_ii = 1; _ii <= 29; _ii++)  					{  						if (_buffer[_ii + 1] != _buffer[_ii])  						{  							_v5 = 1;  						}  					}    					_fD8 = _v5 * 30;    					_f38 = _fD8 == 0 ? _series : _buffer[1];    					_f18 = _f38;    					if (_fD8 > 29)  						_fD8 = 29;  				}  				else  					_fD8 = 0;    				//----  				for (_ii = _fD8; _ii >= 0; _ii--)  				{  					//{ another bigcycle...}  					_value2 = 31 - _ii;    					_f8 = _ii == 0 ? _series : _buffer[_value2];    					_f28 = _f8 - _f18;  					_f48 = _f8 - _f38;    					_v2 = Math.Max(Math.Abs(_f28)' Math.Abs(_f48));    					_fA0 = _v2;  					_vv = _fA0 + 0.0000000001; //{1.0e-10;}    					//----  					if (_s48 <= 1)  					{  						_s48 = 127;  					}  					else  					{  						_s48 = _s48 - 1;  					}    					if (_s50 <= 1)  					{  						_s50 = 10;  					}  					else  					{  						_s50 = _s50 - 1;  					}    					if (_s70 < 128)  						_s70 = _s70 + 1;    					_s8 = _s8 + _vv - _ring2[_s50];  					_ring2[_s50] = _vv;    					if (_s70 > 10)  					{  						_s20 = _s8 / 10;  					}  					else  						_s20 = _s8 / _s70;    					//----  					if (_s70 > 127)  					{  						_s10 = _ring1[_s48];  						_ring1[_s48] = _s20;  						_s68 = 64;  						_s58 = Convert.ToInt32(_s68);    						while (_s68 > 1)  						{  							if (_list[_s58] < _s10)  							{  								_s68 = _s68 * 0.5;  								_s58 = _s58 + Convert.ToInt32(_s68);  							}  							else  								if (_list[_s58] <= _s10)  								{  									_s68 = 1;  								}  								else  								{  									_s68 = _s68 * 0.5;  									_s58 = _s58 - Convert.ToInt32(_s68);  								}  						}  					}  					else  					{  						_ring1[_s48] = _s20;    						if (_s28 + _s30 > 127)  						{  							_s30 = _s30 - 1;  							_s58 = Convert.ToInt32(_s30);  						}  						else  						{  							_s28 = _s28 + 1;  							_s58 = Convert.ToInt32(_s28);  						}    						_s38 = _s28 > 96 ? 96 : Convert.ToInt32(_s28);  						_s40 = _s30 < 32 ? 32 : Convert.ToInt32(_s30);  					}    					//----  					_s68 = 64;  					_s60 = Convert.ToInt32(_s68);    					while (_s68 > 1)  					{  						if (_list[_s60] >= _s20)  						{  							if (_list[_s60 - 1] <= _s20)  							{  								_s68 = 1;  							}  							else  							{  								_s68 = _s68 * 0.5;  								_s60 = _s60 - Convert.ToInt32(_s68);  							}  						}  						else  						{  							_s68 = _s68 * 0.5;  							_s60 = _s60 + Convert.ToInt32(_s68);  						}    						if ((_s60 == 127) && (_s20 > _list[127]))  							_s60 = 128;  					}    					if (_s70 > 127)  					{  						if (_s58 >= _s60)  						{  							if ((_s38 + 1 > _s60) && (_s40 - 1 < _s60))  							{  								_s18 = _s18 + _s20;  							}  							else  								if ((_s40 > _s60) && (_s40 - 1 < _s58))  									_s18 = _s18 + _list[_s40 - 1];  						}  						else  							if (_s40 >= _s60)  							{  								if ((_s38 + 1 < _s60) && (_s38 + 1 > _s58))  									_s18 = _s18 + _list[_s38 + 1];  							}  							else  								if (_s38 + 2 > _s60)  								{  									_s18 = _s18 + _s20;  								}  								else  									if ((_s38 + 1 < _s60) && (_s38 + 1 > _s58))  										_s18 = _s18 + _list[_s38 + 1];    						if (_s58 > _s60)  						{  							if ((_s40 - 1 < _s58) && (_s38 + 1 > _s58))  							{  								_s18 = _s18 - _list[_s58];  							}  							else  								if ((_s38 < _s58) && (_s38 + 1 > _s60))  									_s18 = _s18 - _list[_s38];  						}  						else  						{  							if ((_s38 + 1 > _s58) && (_s40 - 1 < _s58))  							{  								_s18 = _s18 - _list[_s58];  							}  							else  								if ((_s40 > _s58) && (_s40 < _s60))  									_s18 = _s18 - _list[_s40];  						}  					}    					if (_s58 <= _s60)  					{  						if (_s58 >= _s60)  						{  							_list[_s60] = _s20;  						}  						else  						{  							for (_jj = _s58 + 1; _jj <= _s60 - 1; _jj++)  							{  								_list[_jj - 1] = _list[_jj];  							}  							_list[_s60 - 1] = _s20;  						}  					}  					else  					{  						for (_jj = _s58 - 1; _jj >= _s60; _jj--)  						{  							_list[_jj + 1] = _list[_jj];  						}  						_list[_s60] = _s20;  					}    					if (_s70 <= 127)  					{  						_s18 = 0;  						for (_jj = _s40; _jj <= _s38; _jj++)  						{  							_s18 = _s18 + _list[_jj];  						}  					}    					_f60 = _s18 / (_s38 - _s40 + 1);    					if (_fF8 + 1 > 31)  					{  						_fF8 = 31;  					}  					else  						_fF8 = _fF8 + 1;    					//----  					if (_fF8 <= 30)  					{  						if (_f28 > 0)  						{  							_f18 = _f8;  						}  						else  							_f18 = _f8 - _f28 * _f90;    						if (_f48 < 0)  						{  							_f38 = _f8;  						}  						else  							_f38 = _f8 - _f48 * _f90;    						_fB8 = _series;    						if (_fF8 != 30)  						{  							continue;  						}    						if (_fF8 == 30)  						{  							_fC0 = _series;    							_v4 = Math.Max(Math.Ceiling(_f78)' 1);    							_fE8 = (int)Math.Ceiling(_v4);    							_v2 = Math.Max(Math.Floor(_f78)' 1);    							_fE0 = (int)Math.Ceiling(_v2);    							if (_fE8 == _fE0)  							{  								_f68 = 1;  							}  							else  							{  								_v4 = _fE8 - _fE0;  								_f68 = (_f78 - _fE0) / _v4;  							}    							_v5 = _fE0 <= 29 ? Convert.ToInt32(_fE0) : 29;    							_v6 = _fE8 <= 29 ? Convert.ToInt32(_fE8) : 29;    							_fA8 = (_series - _buffer[_fF0 - _v5]) * (1 - _f68) / _fE0 + (_series - _buffer[_fF0 - _v6]) * _f68 / _fE8;  						}  					}  					else  					{  						_v1 = Math.Min(_f98' Math.Pow(_fA0 / _f60' _f88));    						if (_v1 < 1)  						{  							_v2 = 1;  						}  						else  						{  							_v3 = Math.Min(_f98' Math.Pow(_fA0 / _f60' _f88));    							_v2 = _v3;  						}    						_f58 = _v2;  						_f70 = Math.Pow(_f90' Math.Sqrt(_f58));    						if (_f28 > 0)  						{  							_f18 = _f8;  						}  						else  						{  							_f18 = _f8 - _f28 * _f70;  						}    						if (_f48 < 0)  						{  							_f38 = _f8;  						}  						else  						{  							_f38 = _f8 - _f48 * _f70;  						}  					}  				}    				if (_fF8 > 30)  				{  					_f30 = Math.Pow(_f50' _f58);  					_fC0 = (1 - _f30) * _series + _f30 * _fC0;  					_fC8 = (_series - _fC0) * (1 - _f50) + _f50 * _fC8;  					_fD0 = _f10 * _fC8 + _fC0;  					_f20 = -_f30 * 2;  					_f40 = _f30 * _f30;  					_fB0 = _f20 + _f40 + 1;  					_fA8 = (_fD0 - _fB8) * _fB0 + _f40 * _fA8;  					_fB8 = _fB8 + _fA8;  				}    				lastValue = (decimal)_fB8;  			}
Magic Number,StockSharp.Algo.Indicators,JurikMovingAverage,C:\repos\stocksharp_stocksharp\Algo\Indicators\JurikMovingAverage.cs,OnProcess,The following statement contains a magic number: if (_fF0 > 30)  			{  				if (Length < 1.0000000002)  				{  					_f80 = 0.0000000001; //{1.0e-10}  				}  				else  				{  					_f80 = (Length - 1) / 2.0;  				}    				if (_phase < -100)  				{  					_f10 = 0.5;  				}  				else  				{  					if (_phase > 100)  					{  						_f10 = 2.5;  					}  					else  					{  						_f10 = (double)_phase / 100 + 1.5;  					}  				}    				_v1 = Math.Log(Math.Sqrt(_f80));  				_v2 = _v1;    				if (_v1 / Math.Log(2.0) + 2.0 < 0.0)  				{  					_v3 = 0;  				}  				else  				{  					_v3 = _v2 / Math.Log(2.0) + 2.0;  				}    				_f98 = _v3;    				//----  				if (0.5 <= _f98 - 2.0)  				{  					_f88 = _f98 - 2.0;  				}  				else  				{  					_f88 = 0.5;  				}    				_f78 = Math.Sqrt(_f80) * _f98;  				_f90 = _f78 / (_f78 + 1.0);  				_f80 = _f80 * 0.9;  				_f50 = _f80 / (_f80 + 2.0);    				//----  				if (_f0 != 0)  				{  					_f0 = 0;  					_v5 = 0;    					for (_ii = 1; _ii <= 29; _ii++)  					{  						if (_buffer[_ii + 1] != _buffer[_ii])  						{  							_v5 = 1;  						}  					}    					_fD8 = _v5 * 30;    					_f38 = _fD8 == 0 ? _series : _buffer[1];    					_f18 = _f38;    					if (_fD8 > 29)  						_fD8 = 29;  				}  				else  					_fD8 = 0;    				//----  				for (_ii = _fD8; _ii >= 0; _ii--)  				{  					//{ another bigcycle...}  					_value2 = 31 - _ii;    					_f8 = _ii == 0 ? _series : _buffer[_value2];    					_f28 = _f8 - _f18;  					_f48 = _f8 - _f38;    					_v2 = Math.Max(Math.Abs(_f28)' Math.Abs(_f48));    					_fA0 = _v2;  					_vv = _fA0 + 0.0000000001; //{1.0e-10;}    					//----  					if (_s48 <= 1)  					{  						_s48 = 127;  					}  					else  					{  						_s48 = _s48 - 1;  					}    					if (_s50 <= 1)  					{  						_s50 = 10;  					}  					else  					{  						_s50 = _s50 - 1;  					}    					if (_s70 < 128)  						_s70 = _s70 + 1;    					_s8 = _s8 + _vv - _ring2[_s50];  					_ring2[_s50] = _vv;    					if (_s70 > 10)  					{  						_s20 = _s8 / 10;  					}  					else  						_s20 = _s8 / _s70;    					//----  					if (_s70 > 127)  					{  						_s10 = _ring1[_s48];  						_ring1[_s48] = _s20;  						_s68 = 64;  						_s58 = Convert.ToInt32(_s68);    						while (_s68 > 1)  						{  							if (_list[_s58] < _s10)  							{  								_s68 = _s68 * 0.5;  								_s58 = _s58 + Convert.ToInt32(_s68);  							}  							else  								if (_list[_s58] <= _s10)  								{  									_s68 = 1;  								}  								else  								{  									_s68 = _s68 * 0.5;  									_s58 = _s58 - Convert.ToInt32(_s68);  								}  						}  					}  					else  					{  						_ring1[_s48] = _s20;    						if (_s28 + _s30 > 127)  						{  							_s30 = _s30 - 1;  							_s58 = Convert.ToInt32(_s30);  						}  						else  						{  							_s28 = _s28 + 1;  							_s58 = Convert.ToInt32(_s28);  						}    						_s38 = _s28 > 96 ? 96 : Convert.ToInt32(_s28);  						_s40 = _s30 < 32 ? 32 : Convert.ToInt32(_s30);  					}    					//----  					_s68 = 64;  					_s60 = Convert.ToInt32(_s68);    					while (_s68 > 1)  					{  						if (_list[_s60] >= _s20)  						{  							if (_list[_s60 - 1] <= _s20)  							{  								_s68 = 1;  							}  							else  							{  								_s68 = _s68 * 0.5;  								_s60 = _s60 - Convert.ToInt32(_s68);  							}  						}  						else  						{  							_s68 = _s68 * 0.5;  							_s60 = _s60 + Convert.ToInt32(_s68);  						}    						if ((_s60 == 127) && (_s20 > _list[127]))  							_s60 = 128;  					}    					if (_s70 > 127)  					{  						if (_s58 >= _s60)  						{  							if ((_s38 + 1 > _s60) && (_s40 - 1 < _s60))  							{  								_s18 = _s18 + _s20;  							}  							else  								if ((_s40 > _s60) && (_s40 - 1 < _s58))  									_s18 = _s18 + _list[_s40 - 1];  						}  						else  							if (_s40 >= _s60)  							{  								if ((_s38 + 1 < _s60) && (_s38 + 1 > _s58))  									_s18 = _s18 + _list[_s38 + 1];  							}  							else  								if (_s38 + 2 > _s60)  								{  									_s18 = _s18 + _s20;  								}  								else  									if ((_s38 + 1 < _s60) && (_s38 + 1 > _s58))  										_s18 = _s18 + _list[_s38 + 1];    						if (_s58 > _s60)  						{  							if ((_s40 - 1 < _s58) && (_s38 + 1 > _s58))  							{  								_s18 = _s18 - _list[_s58];  							}  							else  								if ((_s38 < _s58) && (_s38 + 1 > _s60))  									_s18 = _s18 - _list[_s38];  						}  						else  						{  							if ((_s38 + 1 > _s58) && (_s40 - 1 < _s58))  							{  								_s18 = _s18 - _list[_s58];  							}  							else  								if ((_s40 > _s58) && (_s40 < _s60))  									_s18 = _s18 - _list[_s40];  						}  					}    					if (_s58 <= _s60)  					{  						if (_s58 >= _s60)  						{  							_list[_s60] = _s20;  						}  						else  						{  							for (_jj = _s58 + 1; _jj <= _s60 - 1; _jj++)  							{  								_list[_jj - 1] = _list[_jj];  							}  							_list[_s60 - 1] = _s20;  						}  					}  					else  					{  						for (_jj = _s58 - 1; _jj >= _s60; _jj--)  						{  							_list[_jj + 1] = _list[_jj];  						}  						_list[_s60] = _s20;  					}    					if (_s70 <= 127)  					{  						_s18 = 0;  						for (_jj = _s40; _jj <= _s38; _jj++)  						{  							_s18 = _s18 + _list[_jj];  						}  					}    					_f60 = _s18 / (_s38 - _s40 + 1);    					if (_fF8 + 1 > 31)  					{  						_fF8 = 31;  					}  					else  						_fF8 = _fF8 + 1;    					//----  					if (_fF8 <= 30)  					{  						if (_f28 > 0)  						{  							_f18 = _f8;  						}  						else  							_f18 = _f8 - _f28 * _f90;    						if (_f48 < 0)  						{  							_f38 = _f8;  						}  						else  							_f38 = _f8 - _f48 * _f90;    						_fB8 = _series;    						if (_fF8 != 30)  						{  							continue;  						}    						if (_fF8 == 30)  						{  							_fC0 = _series;    							_v4 = Math.Max(Math.Ceiling(_f78)' 1);    							_fE8 = (int)Math.Ceiling(_v4);    							_v2 = Math.Max(Math.Floor(_f78)' 1);    							_fE0 = (int)Math.Ceiling(_v2);    							if (_fE8 == _fE0)  							{  								_f68 = 1;  							}  							else  							{  								_v4 = _fE8 - _fE0;  								_f68 = (_f78 - _fE0) / _v4;  							}    							_v5 = _fE0 <= 29 ? Convert.ToInt32(_fE0) : 29;    							_v6 = _fE8 <= 29 ? Convert.ToInt32(_fE8) : 29;    							_fA8 = (_series - _buffer[_fF0 - _v5]) * (1 - _f68) / _fE0 + (_series - _buffer[_fF0 - _v6]) * _f68 / _fE8;  						}  					}  					else  					{  						_v1 = Math.Min(_f98' Math.Pow(_fA0 / _f60' _f88));    						if (_v1 < 1)  						{  							_v2 = 1;  						}  						else  						{  							_v3 = Math.Min(_f98' Math.Pow(_fA0 / _f60' _f88));    							_v2 = _v3;  						}    						_f58 = _v2;  						_f70 = Math.Pow(_f90' Math.Sqrt(_f58));    						if (_f28 > 0)  						{  							_f18 = _f8;  						}  						else  						{  							_f18 = _f8 - _f28 * _f70;  						}    						if (_f48 < 0)  						{  							_f38 = _f8;  						}  						else  						{  							_f38 = _f8 - _f48 * _f70;  						}  					}  				}    				if (_fF8 > 30)  				{  					_f30 = Math.Pow(_f50' _f58);  					_fC0 = (1 - _f30) * _series + _f30 * _fC0;  					_fC8 = (_series - _fC0) * (1 - _f50) + _f50 * _fC8;  					_fD0 = _f10 * _fC8 + _fC0;  					_f20 = -_f30 * 2;  					_f40 = _f30 * _f30;  					_fB0 = _f20 + _f40 + 1;  					_fA8 = (_fD0 - _fB8) * _fB0 + _f40 * _fA8;  					_fB8 = _fB8 + _fA8;  				}    				lastValue = (decimal)_fB8;  			}
Magic Number,StockSharp.Algo.Indicators,JurikMovingAverage,C:\repos\stocksharp_stocksharp\Algo\Indicators\JurikMovingAverage.cs,OnProcess,The following statement contains a magic number: if (_fF0 > 30)  			{  				if (Length < 1.0000000002)  				{  					_f80 = 0.0000000001; //{1.0e-10}  				}  				else  				{  					_f80 = (Length - 1) / 2.0;  				}    				if (_phase < -100)  				{  					_f10 = 0.5;  				}  				else  				{  					if (_phase > 100)  					{  						_f10 = 2.5;  					}  					else  					{  						_f10 = (double)_phase / 100 + 1.5;  					}  				}    				_v1 = Math.Log(Math.Sqrt(_f80));  				_v2 = _v1;    				if (_v1 / Math.Log(2.0) + 2.0 < 0.0)  				{  					_v3 = 0;  				}  				else  				{  					_v3 = _v2 / Math.Log(2.0) + 2.0;  				}    				_f98 = _v3;    				//----  				if (0.5 <= _f98 - 2.0)  				{  					_f88 = _f98 - 2.0;  				}  				else  				{  					_f88 = 0.5;  				}    				_f78 = Math.Sqrt(_f80) * _f98;  				_f90 = _f78 / (_f78 + 1.0);  				_f80 = _f80 * 0.9;  				_f50 = _f80 / (_f80 + 2.0);    				//----  				if (_f0 != 0)  				{  					_f0 = 0;  					_v5 = 0;    					for (_ii = 1; _ii <= 29; _ii++)  					{  						if (_buffer[_ii + 1] != _buffer[_ii])  						{  							_v5 = 1;  						}  					}    					_fD8 = _v5 * 30;    					_f38 = _fD8 == 0 ? _series : _buffer[1];    					_f18 = _f38;    					if (_fD8 > 29)  						_fD8 = 29;  				}  				else  					_fD8 = 0;    				//----  				for (_ii = _fD8; _ii >= 0; _ii--)  				{  					//{ another bigcycle...}  					_value2 = 31 - _ii;    					_f8 = _ii == 0 ? _series : _buffer[_value2];    					_f28 = _f8 - _f18;  					_f48 = _f8 - _f38;    					_v2 = Math.Max(Math.Abs(_f28)' Math.Abs(_f48));    					_fA0 = _v2;  					_vv = _fA0 + 0.0000000001; //{1.0e-10;}    					//----  					if (_s48 <= 1)  					{  						_s48 = 127;  					}  					else  					{  						_s48 = _s48 - 1;  					}    					if (_s50 <= 1)  					{  						_s50 = 10;  					}  					else  					{  						_s50 = _s50 - 1;  					}    					if (_s70 < 128)  						_s70 = _s70 + 1;    					_s8 = _s8 + _vv - _ring2[_s50];  					_ring2[_s50] = _vv;    					if (_s70 > 10)  					{  						_s20 = _s8 / 10;  					}  					else  						_s20 = _s8 / _s70;    					//----  					if (_s70 > 127)  					{  						_s10 = _ring1[_s48];  						_ring1[_s48] = _s20;  						_s68 = 64;  						_s58 = Convert.ToInt32(_s68);    						while (_s68 > 1)  						{  							if (_list[_s58] < _s10)  							{  								_s68 = _s68 * 0.5;  								_s58 = _s58 + Convert.ToInt32(_s68);  							}  							else  								if (_list[_s58] <= _s10)  								{  									_s68 = 1;  								}  								else  								{  									_s68 = _s68 * 0.5;  									_s58 = _s58 - Convert.ToInt32(_s68);  								}  						}  					}  					else  					{  						_ring1[_s48] = _s20;    						if (_s28 + _s30 > 127)  						{  							_s30 = _s30 - 1;  							_s58 = Convert.ToInt32(_s30);  						}  						else  						{  							_s28 = _s28 + 1;  							_s58 = Convert.ToInt32(_s28);  						}    						_s38 = _s28 > 96 ? 96 : Convert.ToInt32(_s28);  						_s40 = _s30 < 32 ? 32 : Convert.ToInt32(_s30);  					}    					//----  					_s68 = 64;  					_s60 = Convert.ToInt32(_s68);    					while (_s68 > 1)  					{  						if (_list[_s60] >= _s20)  						{  							if (_list[_s60 - 1] <= _s20)  							{  								_s68 = 1;  							}  							else  							{  								_s68 = _s68 * 0.5;  								_s60 = _s60 - Convert.ToInt32(_s68);  							}  						}  						else  						{  							_s68 = _s68 * 0.5;  							_s60 = _s60 + Convert.ToInt32(_s68);  						}    						if ((_s60 == 127) && (_s20 > _list[127]))  							_s60 = 128;  					}    					if (_s70 > 127)  					{  						if (_s58 >= _s60)  						{  							if ((_s38 + 1 > _s60) && (_s40 - 1 < _s60))  							{  								_s18 = _s18 + _s20;  							}  							else  								if ((_s40 > _s60) && (_s40 - 1 < _s58))  									_s18 = _s18 + _list[_s40 - 1];  						}  						else  							if (_s40 >= _s60)  							{  								if ((_s38 + 1 < _s60) && (_s38 + 1 > _s58))  									_s18 = _s18 + _list[_s38 + 1];  							}  							else  								if (_s38 + 2 > _s60)  								{  									_s18 = _s18 + _s20;  								}  								else  									if ((_s38 + 1 < _s60) && (_s38 + 1 > _s58))  										_s18 = _s18 + _list[_s38 + 1];    						if (_s58 > _s60)  						{  							if ((_s40 - 1 < _s58) && (_s38 + 1 > _s58))  							{  								_s18 = _s18 - _list[_s58];  							}  							else  								if ((_s38 < _s58) && (_s38 + 1 > _s60))  									_s18 = _s18 - _list[_s38];  						}  						else  						{  							if ((_s38 + 1 > _s58) && (_s40 - 1 < _s58))  							{  								_s18 = _s18 - _list[_s58];  							}  							else  								if ((_s40 > _s58) && (_s40 < _s60))  									_s18 = _s18 - _list[_s40];  						}  					}    					if (_s58 <= _s60)  					{  						if (_s58 >= _s60)  						{  							_list[_s60] = _s20;  						}  						else  						{  							for (_jj = _s58 + 1; _jj <= _s60 - 1; _jj++)  							{  								_list[_jj - 1] = _list[_jj];  							}  							_list[_s60 - 1] = _s20;  						}  					}  					else  					{  						for (_jj = _s58 - 1; _jj >= _s60; _jj--)  						{  							_list[_jj + 1] = _list[_jj];  						}  						_list[_s60] = _s20;  					}    					if (_s70 <= 127)  					{  						_s18 = 0;  						for (_jj = _s40; _jj <= _s38; _jj++)  						{  							_s18 = _s18 + _list[_jj];  						}  					}    					_f60 = _s18 / (_s38 - _s40 + 1);    					if (_fF8 + 1 > 31)  					{  						_fF8 = 31;  					}  					else  						_fF8 = _fF8 + 1;    					//----  					if (_fF8 <= 30)  					{  						if (_f28 > 0)  						{  							_f18 = _f8;  						}  						else  							_f18 = _f8 - _f28 * _f90;    						if (_f48 < 0)  						{  							_f38 = _f8;  						}  						else  							_f38 = _f8 - _f48 * _f90;    						_fB8 = _series;    						if (_fF8 != 30)  						{  							continue;  						}    						if (_fF8 == 30)  						{  							_fC0 = _series;    							_v4 = Math.Max(Math.Ceiling(_f78)' 1);    							_fE8 = (int)Math.Ceiling(_v4);    							_v2 = Math.Max(Math.Floor(_f78)' 1);    							_fE0 = (int)Math.Ceiling(_v2);    							if (_fE8 == _fE0)  							{  								_f68 = 1;  							}  							else  							{  								_v4 = _fE8 - _fE0;  								_f68 = (_f78 - _fE0) / _v4;  							}    							_v5 = _fE0 <= 29 ? Convert.ToInt32(_fE0) : 29;    							_v6 = _fE8 <= 29 ? Convert.ToInt32(_fE8) : 29;    							_fA8 = (_series - _buffer[_fF0 - _v5]) * (1 - _f68) / _fE0 + (_series - _buffer[_fF0 - _v6]) * _f68 / _fE8;  						}  					}  					else  					{  						_v1 = Math.Min(_f98' Math.Pow(_fA0 / _f60' _f88));    						if (_v1 < 1)  						{  							_v2 = 1;  						}  						else  						{  							_v3 = Math.Min(_f98' Math.Pow(_fA0 / _f60' _f88));    							_v2 = _v3;  						}    						_f58 = _v2;  						_f70 = Math.Pow(_f90' Math.Sqrt(_f58));    						if (_f28 > 0)  						{  							_f18 = _f8;  						}  						else  						{  							_f18 = _f8 - _f28 * _f70;  						}    						if (_f48 < 0)  						{  							_f38 = _f8;  						}  						else  						{  							_f38 = _f8 - _f48 * _f70;  						}  					}  				}    				if (_fF8 > 30)  				{  					_f30 = Math.Pow(_f50' _f58);  					_fC0 = (1 - _f30) * _series + _f30 * _fC0;  					_fC8 = (_series - _fC0) * (1 - _f50) + _f50 * _fC8;  					_fD0 = _f10 * _fC8 + _fC0;  					_f20 = -_f30 * 2;  					_f40 = _f30 * _f30;  					_fB0 = _f20 + _f40 + 1;  					_fA8 = (_fD0 - _fB8) * _fB0 + _f40 * _fA8;  					_fB8 = _fB8 + _fA8;  				}    				lastValue = (decimal)_fB8;  			}
Magic Number,StockSharp.Algo.Indicators,JurikMovingAverage,C:\repos\stocksharp_stocksharp\Algo\Indicators\JurikMovingAverage.cs,OnProcess,The following statement contains a magic number: if (_fF0 > 30)  			{  				if (Length < 1.0000000002)  				{  					_f80 = 0.0000000001; //{1.0e-10}  				}  				else  				{  					_f80 = (Length - 1) / 2.0;  				}    				if (_phase < -100)  				{  					_f10 = 0.5;  				}  				else  				{  					if (_phase > 100)  					{  						_f10 = 2.5;  					}  					else  					{  						_f10 = (double)_phase / 100 + 1.5;  					}  				}    				_v1 = Math.Log(Math.Sqrt(_f80));  				_v2 = _v1;    				if (_v1 / Math.Log(2.0) + 2.0 < 0.0)  				{  					_v3 = 0;  				}  				else  				{  					_v3 = _v2 / Math.Log(2.0) + 2.0;  				}    				_f98 = _v3;    				//----  				if (0.5 <= _f98 - 2.0)  				{  					_f88 = _f98 - 2.0;  				}  				else  				{  					_f88 = 0.5;  				}    				_f78 = Math.Sqrt(_f80) * _f98;  				_f90 = _f78 / (_f78 + 1.0);  				_f80 = _f80 * 0.9;  				_f50 = _f80 / (_f80 + 2.0);    				//----  				if (_f0 != 0)  				{  					_f0 = 0;  					_v5 = 0;    					for (_ii = 1; _ii <= 29; _ii++)  					{  						if (_buffer[_ii + 1] != _buffer[_ii])  						{  							_v5 = 1;  						}  					}    					_fD8 = _v5 * 30;    					_f38 = _fD8 == 0 ? _series : _buffer[1];    					_f18 = _f38;    					if (_fD8 > 29)  						_fD8 = 29;  				}  				else  					_fD8 = 0;    				//----  				for (_ii = _fD8; _ii >= 0; _ii--)  				{  					//{ another bigcycle...}  					_value2 = 31 - _ii;    					_f8 = _ii == 0 ? _series : _buffer[_value2];    					_f28 = _f8 - _f18;  					_f48 = _f8 - _f38;    					_v2 = Math.Max(Math.Abs(_f28)' Math.Abs(_f48));    					_fA0 = _v2;  					_vv = _fA0 + 0.0000000001; //{1.0e-10;}    					//----  					if (_s48 <= 1)  					{  						_s48 = 127;  					}  					else  					{  						_s48 = _s48 - 1;  					}    					if (_s50 <= 1)  					{  						_s50 = 10;  					}  					else  					{  						_s50 = _s50 - 1;  					}    					if (_s70 < 128)  						_s70 = _s70 + 1;    					_s8 = _s8 + _vv - _ring2[_s50];  					_ring2[_s50] = _vv;    					if (_s70 > 10)  					{  						_s20 = _s8 / 10;  					}  					else  						_s20 = _s8 / _s70;    					//----  					if (_s70 > 127)  					{  						_s10 = _ring1[_s48];  						_ring1[_s48] = _s20;  						_s68 = 64;  						_s58 = Convert.ToInt32(_s68);    						while (_s68 > 1)  						{  							if (_list[_s58] < _s10)  							{  								_s68 = _s68 * 0.5;  								_s58 = _s58 + Convert.ToInt32(_s68);  							}  							else  								if (_list[_s58] <= _s10)  								{  									_s68 = 1;  								}  								else  								{  									_s68 = _s68 * 0.5;  									_s58 = _s58 - Convert.ToInt32(_s68);  								}  						}  					}  					else  					{  						_ring1[_s48] = _s20;    						if (_s28 + _s30 > 127)  						{  							_s30 = _s30 - 1;  							_s58 = Convert.ToInt32(_s30);  						}  						else  						{  							_s28 = _s28 + 1;  							_s58 = Convert.ToInt32(_s28);  						}    						_s38 = _s28 > 96 ? 96 : Convert.ToInt32(_s28);  						_s40 = _s30 < 32 ? 32 : Convert.ToInt32(_s30);  					}    					//----  					_s68 = 64;  					_s60 = Convert.ToInt32(_s68);    					while (_s68 > 1)  					{  						if (_list[_s60] >= _s20)  						{  							if (_list[_s60 - 1] <= _s20)  							{  								_s68 = 1;  							}  							else  							{  								_s68 = _s68 * 0.5;  								_s60 = _s60 - Convert.ToInt32(_s68);  							}  						}  						else  						{  							_s68 = _s68 * 0.5;  							_s60 = _s60 + Convert.ToInt32(_s68);  						}    						if ((_s60 == 127) && (_s20 > _list[127]))  							_s60 = 128;  					}    					if (_s70 > 127)  					{  						if (_s58 >= _s60)  						{  							if ((_s38 + 1 > _s60) && (_s40 - 1 < _s60))  							{  								_s18 = _s18 + _s20;  							}  							else  								if ((_s40 > _s60) && (_s40 - 1 < _s58))  									_s18 = _s18 + _list[_s40 - 1];  						}  						else  							if (_s40 >= _s60)  							{  								if ((_s38 + 1 < _s60) && (_s38 + 1 > _s58))  									_s18 = _s18 + _list[_s38 + 1];  							}  							else  								if (_s38 + 2 > _s60)  								{  									_s18 = _s18 + _s20;  								}  								else  									if ((_s38 + 1 < _s60) && (_s38 + 1 > _s58))  										_s18 = _s18 + _list[_s38 + 1];    						if (_s58 > _s60)  						{  							if ((_s40 - 1 < _s58) && (_s38 + 1 > _s58))  							{  								_s18 = _s18 - _list[_s58];  							}  							else  								if ((_s38 < _s58) && (_s38 + 1 > _s60))  									_s18 = _s18 - _list[_s38];  						}  						else  						{  							if ((_s38 + 1 > _s58) && (_s40 - 1 < _s58))  							{  								_s18 = _s18 - _list[_s58];  							}  							else  								if ((_s40 > _s58) && (_s40 < _s60))  									_s18 = _s18 - _list[_s40];  						}  					}    					if (_s58 <= _s60)  					{  						if (_s58 >= _s60)  						{  							_list[_s60] = _s20;  						}  						else  						{  							for (_jj = _s58 + 1; _jj <= _s60 - 1; _jj++)  							{  								_list[_jj - 1] = _list[_jj];  							}  							_list[_s60 - 1] = _s20;  						}  					}  					else  					{  						for (_jj = _s58 - 1; _jj >= _s60; _jj--)  						{  							_list[_jj + 1] = _list[_jj];  						}  						_list[_s60] = _s20;  					}    					if (_s70 <= 127)  					{  						_s18 = 0;  						for (_jj = _s40; _jj <= _s38; _jj++)  						{  							_s18 = _s18 + _list[_jj];  						}  					}    					_f60 = _s18 / (_s38 - _s40 + 1);    					if (_fF8 + 1 > 31)  					{  						_fF8 = 31;  					}  					else  						_fF8 = _fF8 + 1;    					//----  					if (_fF8 <= 30)  					{  						if (_f28 > 0)  						{  							_f18 = _f8;  						}  						else  							_f18 = _f8 - _f28 * _f90;    						if (_f48 < 0)  						{  							_f38 = _f8;  						}  						else  							_f38 = _f8 - _f48 * _f90;    						_fB8 = _series;    						if (_fF8 != 30)  						{  							continue;  						}    						if (_fF8 == 30)  						{  							_fC0 = _series;    							_v4 = Math.Max(Math.Ceiling(_f78)' 1);    							_fE8 = (int)Math.Ceiling(_v4);    							_v2 = Math.Max(Math.Floor(_f78)' 1);    							_fE0 = (int)Math.Ceiling(_v2);    							if (_fE8 == _fE0)  							{  								_f68 = 1;  							}  							else  							{  								_v4 = _fE8 - _fE0;  								_f68 = (_f78 - _fE0) / _v4;  							}    							_v5 = _fE0 <= 29 ? Convert.ToInt32(_fE0) : 29;    							_v6 = _fE8 <= 29 ? Convert.ToInt32(_fE8) : 29;    							_fA8 = (_series - _buffer[_fF0 - _v5]) * (1 - _f68) / _fE0 + (_series - _buffer[_fF0 - _v6]) * _f68 / _fE8;  						}  					}  					else  					{  						_v1 = Math.Min(_f98' Math.Pow(_fA0 / _f60' _f88));    						if (_v1 < 1)  						{  							_v2 = 1;  						}  						else  						{  							_v3 = Math.Min(_f98' Math.Pow(_fA0 / _f60' _f88));    							_v2 = _v3;  						}    						_f58 = _v2;  						_f70 = Math.Pow(_f90' Math.Sqrt(_f58));    						if (_f28 > 0)  						{  							_f18 = _f8;  						}  						else  						{  							_f18 = _f8 - _f28 * _f70;  						}    						if (_f48 < 0)  						{  							_f38 = _f8;  						}  						else  						{  							_f38 = _f8 - _f48 * _f70;  						}  					}  				}    				if (_fF8 > 30)  				{  					_f30 = Math.Pow(_f50' _f58);  					_fC0 = (1 - _f30) * _series + _f30 * _fC0;  					_fC8 = (_series - _fC0) * (1 - _f50) + _f50 * _fC8;  					_fD0 = _f10 * _fC8 + _fC0;  					_f20 = -_f30 * 2;  					_f40 = _f30 * _f30;  					_fB0 = _f20 + _f40 + 1;  					_fA8 = (_fD0 - _fB8) * _fB0 + _f40 * _fA8;  					_fB8 = _fB8 + _fA8;  				}    				lastValue = (decimal)_fB8;  			}
Magic Number,StockSharp.Algo.Indicators,JurikMovingAverage,C:\repos\stocksharp_stocksharp\Algo\Indicators\JurikMovingAverage.cs,OnProcess,The following statement contains a magic number: if (_fF0 > 30)  			{  				if (Length < 1.0000000002)  				{  					_f80 = 0.0000000001; //{1.0e-10}  				}  				else  				{  					_f80 = (Length - 1) / 2.0;  				}    				if (_phase < -100)  				{  					_f10 = 0.5;  				}  				else  				{  					if (_phase > 100)  					{  						_f10 = 2.5;  					}  					else  					{  						_f10 = (double)_phase / 100 + 1.5;  					}  				}    				_v1 = Math.Log(Math.Sqrt(_f80));  				_v2 = _v1;    				if (_v1 / Math.Log(2.0) + 2.0 < 0.0)  				{  					_v3 = 0;  				}  				else  				{  					_v3 = _v2 / Math.Log(2.0) + 2.0;  				}    				_f98 = _v3;    				//----  				if (0.5 <= _f98 - 2.0)  				{  					_f88 = _f98 - 2.0;  				}  				else  				{  					_f88 = 0.5;  				}    				_f78 = Math.Sqrt(_f80) * _f98;  				_f90 = _f78 / (_f78 + 1.0);  				_f80 = _f80 * 0.9;  				_f50 = _f80 / (_f80 + 2.0);    				//----  				if (_f0 != 0)  				{  					_f0 = 0;  					_v5 = 0;    					for (_ii = 1; _ii <= 29; _ii++)  					{  						if (_buffer[_ii + 1] != _buffer[_ii])  						{  							_v5 = 1;  						}  					}    					_fD8 = _v5 * 30;    					_f38 = _fD8 == 0 ? _series : _buffer[1];    					_f18 = _f38;    					if (_fD8 > 29)  						_fD8 = 29;  				}  				else  					_fD8 = 0;    				//----  				for (_ii = _fD8; _ii >= 0; _ii--)  				{  					//{ another bigcycle...}  					_value2 = 31 - _ii;    					_f8 = _ii == 0 ? _series : _buffer[_value2];    					_f28 = _f8 - _f18;  					_f48 = _f8 - _f38;    					_v2 = Math.Max(Math.Abs(_f28)' Math.Abs(_f48));    					_fA0 = _v2;  					_vv = _fA0 + 0.0000000001; //{1.0e-10;}    					//----  					if (_s48 <= 1)  					{  						_s48 = 127;  					}  					else  					{  						_s48 = _s48 - 1;  					}    					if (_s50 <= 1)  					{  						_s50 = 10;  					}  					else  					{  						_s50 = _s50 - 1;  					}    					if (_s70 < 128)  						_s70 = _s70 + 1;    					_s8 = _s8 + _vv - _ring2[_s50];  					_ring2[_s50] = _vv;    					if (_s70 > 10)  					{  						_s20 = _s8 / 10;  					}  					else  						_s20 = _s8 / _s70;    					//----  					if (_s70 > 127)  					{  						_s10 = _ring1[_s48];  						_ring1[_s48] = _s20;  						_s68 = 64;  						_s58 = Convert.ToInt32(_s68);    						while (_s68 > 1)  						{  							if (_list[_s58] < _s10)  							{  								_s68 = _s68 * 0.5;  								_s58 = _s58 + Convert.ToInt32(_s68);  							}  							else  								if (_list[_s58] <= _s10)  								{  									_s68 = 1;  								}  								else  								{  									_s68 = _s68 * 0.5;  									_s58 = _s58 - Convert.ToInt32(_s68);  								}  						}  					}  					else  					{  						_ring1[_s48] = _s20;    						if (_s28 + _s30 > 127)  						{  							_s30 = _s30 - 1;  							_s58 = Convert.ToInt32(_s30);  						}  						else  						{  							_s28 = _s28 + 1;  							_s58 = Convert.ToInt32(_s28);  						}    						_s38 = _s28 > 96 ? 96 : Convert.ToInt32(_s28);  						_s40 = _s30 < 32 ? 32 : Convert.ToInt32(_s30);  					}    					//----  					_s68 = 64;  					_s60 = Convert.ToInt32(_s68);    					while (_s68 > 1)  					{  						if (_list[_s60] >= _s20)  						{  							if (_list[_s60 - 1] <= _s20)  							{  								_s68 = 1;  							}  							else  							{  								_s68 = _s68 * 0.5;  								_s60 = _s60 - Convert.ToInt32(_s68);  							}  						}  						else  						{  							_s68 = _s68 * 0.5;  							_s60 = _s60 + Convert.ToInt32(_s68);  						}    						if ((_s60 == 127) && (_s20 > _list[127]))  							_s60 = 128;  					}    					if (_s70 > 127)  					{  						if (_s58 >= _s60)  						{  							if ((_s38 + 1 > _s60) && (_s40 - 1 < _s60))  							{  								_s18 = _s18 + _s20;  							}  							else  								if ((_s40 > _s60) && (_s40 - 1 < _s58))  									_s18 = _s18 + _list[_s40 - 1];  						}  						else  							if (_s40 >= _s60)  							{  								if ((_s38 + 1 < _s60) && (_s38 + 1 > _s58))  									_s18 = _s18 + _list[_s38 + 1];  							}  							else  								if (_s38 + 2 > _s60)  								{  									_s18 = _s18 + _s20;  								}  								else  									if ((_s38 + 1 < _s60) && (_s38 + 1 > _s58))  										_s18 = _s18 + _list[_s38 + 1];    						if (_s58 > _s60)  						{  							if ((_s40 - 1 < _s58) && (_s38 + 1 > _s58))  							{  								_s18 = _s18 - _list[_s58];  							}  							else  								if ((_s38 < _s58) && (_s38 + 1 > _s60))  									_s18 = _s18 - _list[_s38];  						}  						else  						{  							if ((_s38 + 1 > _s58) && (_s40 - 1 < _s58))  							{  								_s18 = _s18 - _list[_s58];  							}  							else  								if ((_s40 > _s58) && (_s40 < _s60))  									_s18 = _s18 - _list[_s40];  						}  					}    					if (_s58 <= _s60)  					{  						if (_s58 >= _s60)  						{  							_list[_s60] = _s20;  						}  						else  						{  							for (_jj = _s58 + 1; _jj <= _s60 - 1; _jj++)  							{  								_list[_jj - 1] = _list[_jj];  							}  							_list[_s60 - 1] = _s20;  						}  					}  					else  					{  						for (_jj = _s58 - 1; _jj >= _s60; _jj--)  						{  							_list[_jj + 1] = _list[_jj];  						}  						_list[_s60] = _s20;  					}    					if (_s70 <= 127)  					{  						_s18 = 0;  						for (_jj = _s40; _jj <= _s38; _jj++)  						{  							_s18 = _s18 + _list[_jj];  						}  					}    					_f60 = _s18 / (_s38 - _s40 + 1);    					if (_fF8 + 1 > 31)  					{  						_fF8 = 31;  					}  					else  						_fF8 = _fF8 + 1;    					//----  					if (_fF8 <= 30)  					{  						if (_f28 > 0)  						{  							_f18 = _f8;  						}  						else  							_f18 = _f8 - _f28 * _f90;    						if (_f48 < 0)  						{  							_f38 = _f8;  						}  						else  							_f38 = _f8 - _f48 * _f90;    						_fB8 = _series;    						if (_fF8 != 30)  						{  							continue;  						}    						if (_fF8 == 30)  						{  							_fC0 = _series;    							_v4 = Math.Max(Math.Ceiling(_f78)' 1);    							_fE8 = (int)Math.Ceiling(_v4);    							_v2 = Math.Max(Math.Floor(_f78)' 1);    							_fE0 = (int)Math.Ceiling(_v2);    							if (_fE8 == _fE0)  							{  								_f68 = 1;  							}  							else  							{  								_v4 = _fE8 - _fE0;  								_f68 = (_f78 - _fE0) / _v4;  							}    							_v5 = _fE0 <= 29 ? Convert.ToInt32(_fE0) : 29;    							_v6 = _fE8 <= 29 ? Convert.ToInt32(_fE8) : 29;    							_fA8 = (_series - _buffer[_fF0 - _v5]) * (1 - _f68) / _fE0 + (_series - _buffer[_fF0 - _v6]) * _f68 / _fE8;  						}  					}  					else  					{  						_v1 = Math.Min(_f98' Math.Pow(_fA0 / _f60' _f88));    						if (_v1 < 1)  						{  							_v2 = 1;  						}  						else  						{  							_v3 = Math.Min(_f98' Math.Pow(_fA0 / _f60' _f88));    							_v2 = _v3;  						}    						_f58 = _v2;  						_f70 = Math.Pow(_f90' Math.Sqrt(_f58));    						if (_f28 > 0)  						{  							_f18 = _f8;  						}  						else  						{  							_f18 = _f8 - _f28 * _f70;  						}    						if (_f48 < 0)  						{  							_f38 = _f8;  						}  						else  						{  							_f38 = _f8 - _f48 * _f70;  						}  					}  				}    				if (_fF8 > 30)  				{  					_f30 = Math.Pow(_f50' _f58);  					_fC0 = (1 - _f30) * _series + _f30 * _fC0;  					_fC8 = (_series - _fC0) * (1 - _f50) + _f50 * _fC8;  					_fD0 = _f10 * _fC8 + _fC0;  					_f20 = -_f30 * 2;  					_f40 = _f30 * _f30;  					_fB0 = _f20 + _f40 + 1;  					_fA8 = (_fD0 - _fB8) * _fB0 + _f40 * _fA8;  					_fB8 = _fB8 + _fA8;  				}    				lastValue = (decimal)_fB8;  			}
Magic Number,StockSharp.Algo.Indicators,JurikMovingAverage,C:\repos\stocksharp_stocksharp\Algo\Indicators\JurikMovingAverage.cs,OnProcess,The following statement contains a magic number: if (_fF0 > 30)  			{  				if (Length < 1.0000000002)  				{  					_f80 = 0.0000000001; //{1.0e-10}  				}  				else  				{  					_f80 = (Length - 1) / 2.0;  				}    				if (_phase < -100)  				{  					_f10 = 0.5;  				}  				else  				{  					if (_phase > 100)  					{  						_f10 = 2.5;  					}  					else  					{  						_f10 = (double)_phase / 100 + 1.5;  					}  				}    				_v1 = Math.Log(Math.Sqrt(_f80));  				_v2 = _v1;    				if (_v1 / Math.Log(2.0) + 2.0 < 0.0)  				{  					_v3 = 0;  				}  				else  				{  					_v3 = _v2 / Math.Log(2.0) + 2.0;  				}    				_f98 = _v3;    				//----  				if (0.5 <= _f98 - 2.0)  				{  					_f88 = _f98 - 2.0;  				}  				else  				{  					_f88 = 0.5;  				}    				_f78 = Math.Sqrt(_f80) * _f98;  				_f90 = _f78 / (_f78 + 1.0);  				_f80 = _f80 * 0.9;  				_f50 = _f80 / (_f80 + 2.0);    				//----  				if (_f0 != 0)  				{  					_f0 = 0;  					_v5 = 0;    					for (_ii = 1; _ii <= 29; _ii++)  					{  						if (_buffer[_ii + 1] != _buffer[_ii])  						{  							_v5 = 1;  						}  					}    					_fD8 = _v5 * 30;    					_f38 = _fD8 == 0 ? _series : _buffer[1];    					_f18 = _f38;    					if (_fD8 > 29)  						_fD8 = 29;  				}  				else  					_fD8 = 0;    				//----  				for (_ii = _fD8; _ii >= 0; _ii--)  				{  					//{ another bigcycle...}  					_value2 = 31 - _ii;    					_f8 = _ii == 0 ? _series : _buffer[_value2];    					_f28 = _f8 - _f18;  					_f48 = _f8 - _f38;    					_v2 = Math.Max(Math.Abs(_f28)' Math.Abs(_f48));    					_fA0 = _v2;  					_vv = _fA0 + 0.0000000001; //{1.0e-10;}    					//----  					if (_s48 <= 1)  					{  						_s48 = 127;  					}  					else  					{  						_s48 = _s48 - 1;  					}    					if (_s50 <= 1)  					{  						_s50 = 10;  					}  					else  					{  						_s50 = _s50 - 1;  					}    					if (_s70 < 128)  						_s70 = _s70 + 1;    					_s8 = _s8 + _vv - _ring2[_s50];  					_ring2[_s50] = _vv;    					if (_s70 > 10)  					{  						_s20 = _s8 / 10;  					}  					else  						_s20 = _s8 / _s70;    					//----  					if (_s70 > 127)  					{  						_s10 = _ring1[_s48];  						_ring1[_s48] = _s20;  						_s68 = 64;  						_s58 = Convert.ToInt32(_s68);    						while (_s68 > 1)  						{  							if (_list[_s58] < _s10)  							{  								_s68 = _s68 * 0.5;  								_s58 = _s58 + Convert.ToInt32(_s68);  							}  							else  								if (_list[_s58] <= _s10)  								{  									_s68 = 1;  								}  								else  								{  									_s68 = _s68 * 0.5;  									_s58 = _s58 - Convert.ToInt32(_s68);  								}  						}  					}  					else  					{  						_ring1[_s48] = _s20;    						if (_s28 + _s30 > 127)  						{  							_s30 = _s30 - 1;  							_s58 = Convert.ToInt32(_s30);  						}  						else  						{  							_s28 = _s28 + 1;  							_s58 = Convert.ToInt32(_s28);  						}    						_s38 = _s28 > 96 ? 96 : Convert.ToInt32(_s28);  						_s40 = _s30 < 32 ? 32 : Convert.ToInt32(_s30);  					}    					//----  					_s68 = 64;  					_s60 = Convert.ToInt32(_s68);    					while (_s68 > 1)  					{  						if (_list[_s60] >= _s20)  						{  							if (_list[_s60 - 1] <= _s20)  							{  								_s68 = 1;  							}  							else  							{  								_s68 = _s68 * 0.5;  								_s60 = _s60 - Convert.ToInt32(_s68);  							}  						}  						else  						{  							_s68 = _s68 * 0.5;  							_s60 = _s60 + Convert.ToInt32(_s68);  						}    						if ((_s60 == 127) && (_s20 > _list[127]))  							_s60 = 128;  					}    					if (_s70 > 127)  					{  						if (_s58 >= _s60)  						{  							if ((_s38 + 1 > _s60) && (_s40 - 1 < _s60))  							{  								_s18 = _s18 + _s20;  							}  							else  								if ((_s40 > _s60) && (_s40 - 1 < _s58))  									_s18 = _s18 + _list[_s40 - 1];  						}  						else  							if (_s40 >= _s60)  							{  								if ((_s38 + 1 < _s60) && (_s38 + 1 > _s58))  									_s18 = _s18 + _list[_s38 + 1];  							}  							else  								if (_s38 + 2 > _s60)  								{  									_s18 = _s18 + _s20;  								}  								else  									if ((_s38 + 1 < _s60) && (_s38 + 1 > _s58))  										_s18 = _s18 + _list[_s38 + 1];    						if (_s58 > _s60)  						{  							if ((_s40 - 1 < _s58) && (_s38 + 1 > _s58))  							{  								_s18 = _s18 - _list[_s58];  							}  							else  								if ((_s38 < _s58) && (_s38 + 1 > _s60))  									_s18 = _s18 - _list[_s38];  						}  						else  						{  							if ((_s38 + 1 > _s58) && (_s40 - 1 < _s58))  							{  								_s18 = _s18 - _list[_s58];  							}  							else  								if ((_s40 > _s58) && (_s40 < _s60))  									_s18 = _s18 - _list[_s40];  						}  					}    					if (_s58 <= _s60)  					{  						if (_s58 >= _s60)  						{  							_list[_s60] = _s20;  						}  						else  						{  							for (_jj = _s58 + 1; _jj <= _s60 - 1; _jj++)  							{  								_list[_jj - 1] = _list[_jj];  							}  							_list[_s60 - 1] = _s20;  						}  					}  					else  					{  						for (_jj = _s58 - 1; _jj >= _s60; _jj--)  						{  							_list[_jj + 1] = _list[_jj];  						}  						_list[_s60] = _s20;  					}    					if (_s70 <= 127)  					{  						_s18 = 0;  						for (_jj = _s40; _jj <= _s38; _jj++)  						{  							_s18 = _s18 + _list[_jj];  						}  					}    					_f60 = _s18 / (_s38 - _s40 + 1);    					if (_fF8 + 1 > 31)  					{  						_fF8 = 31;  					}  					else  						_fF8 = _fF8 + 1;    					//----  					if (_fF8 <= 30)  					{  						if (_f28 > 0)  						{  							_f18 = _f8;  						}  						else  							_f18 = _f8 - _f28 * _f90;    						if (_f48 < 0)  						{  							_f38 = _f8;  						}  						else  							_f38 = _f8 - _f48 * _f90;    						_fB8 = _series;    						if (_fF8 != 30)  						{  							continue;  						}    						if (_fF8 == 30)  						{  							_fC0 = _series;    							_v4 = Math.Max(Math.Ceiling(_f78)' 1);    							_fE8 = (int)Math.Ceiling(_v4);    							_v2 = Math.Max(Math.Floor(_f78)' 1);    							_fE0 = (int)Math.Ceiling(_v2);    							if (_fE8 == _fE0)  							{  								_f68 = 1;  							}  							else  							{  								_v4 = _fE8 - _fE0;  								_f68 = (_f78 - _fE0) / _v4;  							}    							_v5 = _fE0 <= 29 ? Convert.ToInt32(_fE0) : 29;    							_v6 = _fE8 <= 29 ? Convert.ToInt32(_fE8) : 29;    							_fA8 = (_series - _buffer[_fF0 - _v5]) * (1 - _f68) / _fE0 + (_series - _buffer[_fF0 - _v6]) * _f68 / _fE8;  						}  					}  					else  					{  						_v1 = Math.Min(_f98' Math.Pow(_fA0 / _f60' _f88));    						if (_v1 < 1)  						{  							_v2 = 1;  						}  						else  						{  							_v3 = Math.Min(_f98' Math.Pow(_fA0 / _f60' _f88));    							_v2 = _v3;  						}    						_f58 = _v2;  						_f70 = Math.Pow(_f90' Math.Sqrt(_f58));    						if (_f28 > 0)  						{  							_f18 = _f8;  						}  						else  						{  							_f18 = _f8 - _f28 * _f70;  						}    						if (_f48 < 0)  						{  							_f38 = _f8;  						}  						else  						{  							_f38 = _f8 - _f48 * _f70;  						}  					}  				}    				if (_fF8 > 30)  				{  					_f30 = Math.Pow(_f50' _f58);  					_fC0 = (1 - _f30) * _series + _f30 * _fC0;  					_fC8 = (_series - _fC0) * (1 - _f50) + _f50 * _fC8;  					_fD0 = _f10 * _fC8 + _fC0;  					_f20 = -_f30 * 2;  					_f40 = _f30 * _f30;  					_fB0 = _f20 + _f40 + 1;  					_fA8 = (_fD0 - _fB8) * _fB0 + _f40 * _fA8;  					_fB8 = _fB8 + _fA8;  				}    				lastValue = (decimal)_fB8;  			}
Magic Number,StockSharp.Algo.Indicators,JurikMovingAverage,C:\repos\stocksharp_stocksharp\Algo\Indicators\JurikMovingAverage.cs,OnProcess,The following statement contains a magic number: if (_fF0 <= 30)  			{  				lastValue = newValue;  			}
Magic Number,StockSharp.Algo.Indicators,KaufmannAdaptiveMovingAverage,C:\repos\stocksharp_stocksharp\Algo\Indicators\KaufmannAdaptiveMovingAverage.cs,KaufmannAdaptiveMovingAverage,The following statement contains a magic number: FastSCPeriod = 2;
Magic Number,StockSharp.Algo.Indicators,KaufmannAdaptiveMovingAverage,C:\repos\stocksharp_stocksharp\Algo\Indicators\KaufmannAdaptiveMovingAverage.cs,KaufmannAdaptiveMovingAverage,The following statement contains a magic number: SlowSCPeriod = 30;
Magic Number,StockSharp.Algo.Indicators,NickRypockTrailingReverse,C:\repos\stocksharp_stocksharp\Algo\Indicators\NickRypockTrailingReverse.cs,NickRypockTrailingReverse,The following statement contains a magic number: Multiple = 100;
Magic Number,StockSharp.Algo.Indicators,NickRypockTrailingReverse,C:\repos\stocksharp_stocksharp\Algo\Indicators\NickRypockTrailingReverse.cs,NickRypockTrailingReverse,The following statement contains a magic number: Length = 50;
Magic Number,StockSharp.Algo.Indicators,OptimalTracking,C:\repos\stocksharp_stocksharp\Algo\Indicators\OptimalTracking.cs,OptimalTracking,The following statement contains a magic number: const double x = -0.25;
Magic Number,StockSharp.Algo.Indicators,OptimalTracking,C:\repos\stocksharp_stocksharp\Algo\Indicators\OptimalTracking.cs,OnProcess,The following statement contains a magic number: var average = (candle.HighPrice + candle.LowPrice) / 2;
Magic Number,StockSharp.Algo.Indicators,OptimalTracking,C:\repos\stocksharp_stocksharp\Algo\Indicators\OptimalTracking.cs,OnProcess,The following statement contains a magic number: var halfRange = (candle.HighPrice - candle.LowPrice) / 2;
Magic Number,StockSharp.Algo.Indicators,OptimalTracking,C:\repos\stocksharp_stocksharp\Algo\Indicators\OptimalTracking.cs,OnProcess,The following statement contains a magic number: if (IsFormed)  			{  				if (Buffer.Count > Length)  					Buffer.RemoveAt(0);  				//Сглаженное приращение ****************************************************************************  				var avgDiff = Buffer[Buffer.Count - 1] - Buffer[Buffer.Count - 2];  				var smoothDiff = _smoothConstant * avgDiff + _smoothConstant1 * _value1Old;  				_value1Old = smoothDiff;    				//Сглаженный Half Range *********************************************************************************    				var smoothRng = _smoothConstant * halfRange + _smoothConstant1 * _value2Old;  				_value2Old = smoothRng;    				//Tracking index ***********************************************************************************  				if (smoothRng != 0)  					_lambda = Math.Abs(smoothDiff / smoothRng);    				//Alfa для альфа фильтра ***************************************************************************  				_alpha = (-_lambda * _lambda + (decimal)Math.Sqrt((double)(_lambda * _lambda * _lambda * _lambda + 16 * _lambda * _lambda))) / 8;    				//Smoothed result **********************************************************************************  				var check2 = _alpha * average;  				var check3 = (1 - _alpha) * _resultOld;  				var result = check2 + check3;  				_resultOld = result;    				return new DecimalIndicatorValue(this' result);  			}
Magic Number,StockSharp.Algo.Indicators,OptimalTracking,C:\repos\stocksharp_stocksharp\Algo\Indicators\OptimalTracking.cs,OnProcess,The following statement contains a magic number: if (IsFormed)  			{  				if (Buffer.Count > Length)  					Buffer.RemoveAt(0);  				//Сглаженное приращение ****************************************************************************  				var avgDiff = Buffer[Buffer.Count - 1] - Buffer[Buffer.Count - 2];  				var smoothDiff = _smoothConstant * avgDiff + _smoothConstant1 * _value1Old;  				_value1Old = smoothDiff;    				//Сглаженный Half Range *********************************************************************************    				var smoothRng = _smoothConstant * halfRange + _smoothConstant1 * _value2Old;  				_value2Old = smoothRng;    				//Tracking index ***********************************************************************************  				if (smoothRng != 0)  					_lambda = Math.Abs(smoothDiff / smoothRng);    				//Alfa для альфа фильтра ***************************************************************************  				_alpha = (-_lambda * _lambda + (decimal)Math.Sqrt((double)(_lambda * _lambda * _lambda * _lambda + 16 * _lambda * _lambda))) / 8;    				//Smoothed result **********************************************************************************  				var check2 = _alpha * average;  				var check3 = (1 - _alpha) * _resultOld;  				var result = check2 + check3;  				_resultOld = result;    				return new DecimalIndicatorValue(this' result);  			}
Magic Number,StockSharp.Algo.Indicators,OptimalTracking,C:\repos\stocksharp_stocksharp\Algo\Indicators\OptimalTracking.cs,OnProcess,The following statement contains a magic number: if (IsFormed)  			{  				if (Buffer.Count > Length)  					Buffer.RemoveAt(0);  				//Сглаженное приращение ****************************************************************************  				var avgDiff = Buffer[Buffer.Count - 1] - Buffer[Buffer.Count - 2];  				var smoothDiff = _smoothConstant * avgDiff + _smoothConstant1 * _value1Old;  				_value1Old = smoothDiff;    				//Сглаженный Half Range *********************************************************************************    				var smoothRng = _smoothConstant * halfRange + _smoothConstant1 * _value2Old;  				_value2Old = smoothRng;    				//Tracking index ***********************************************************************************  				if (smoothRng != 0)  					_lambda = Math.Abs(smoothDiff / smoothRng);    				//Alfa для альфа фильтра ***************************************************************************  				_alpha = (-_lambda * _lambda + (decimal)Math.Sqrt((double)(_lambda * _lambda * _lambda * _lambda + 16 * _lambda * _lambda))) / 8;    				//Smoothed result **********************************************************************************  				var check2 = _alpha * average;  				var check3 = (1 - _alpha) * _resultOld;  				var result = check2 + check3;  				_resultOld = result;    				return new DecimalIndicatorValue(this' result);  			}
Magic Number,StockSharp.Algo.Indicators,ParabolicSar,C:\repos\stocksharp_stocksharp\Algo\Indicators\ParabolicSar.cs,OnProcess,The following statement contains a magic number: if (_candles.Count < 3)  				return new DecimalIndicatorValue(this' _prevValue);
Magic Number,StockSharp.Algo.Indicators,ParabolicSar,C:\repos\stocksharp_stocksharp\Algo\Indicators\ParabolicSar.cs,OnProcess,The following statement contains a magic number: if (_candles.Count == 3)  			{  				_longPosition = _candles[_candles.Count - 1].HighPrice > _candles[_candles.Count - 2].HighPrice;  				var max = _candles.Max(t => t.HighPrice);  				var min = _candles.Min(t => t.LowPrice);  				_xp = _longPosition ? max : min;  				_af = Acceleration;  				return new DecimalIndicatorValue(this' _xp + (_longPosition ? -1 : 1) * (max - min) * _af);  			}
Magic Number,StockSharp.Algo.Indicators,ParabolicSar,C:\repos\stocksharp_stocksharp\Algo\Indicators\ParabolicSar.cs,OnProcess,The following statement contains a magic number: if (_candles.Count == 3)  			{  				_longPosition = _candles[_candles.Count - 1].HighPrice > _candles[_candles.Count - 2].HighPrice;  				var max = _candles.Max(t => t.HighPrice);  				var min = _candles.Min(t => t.LowPrice);  				_xp = _longPosition ? max : min;  				_af = Acceleration;  				return new DecimalIndicatorValue(this' _xp + (_longPosition ? -1 : 1) * (max - min) * _af);  			}
Magic Number,StockSharp.Algo.Indicators,ParabolicSar,C:\repos\stocksharp_stocksharp\Algo\Indicators\ParabolicSar.cs,OnProcess,The following statement contains a magic number: if (_reverseBar != _candles.Count)  			{  				_todaySar = TodaySar(_prevValue + _af * (_xp - _prevValue));    				for (var x = 1; x <= 2; x++)  				{  					if (_longPosition)  					{  						if (_todaySar > _candles[_candles.Count - 1 - x].LowPrice)  							_todaySar = _candles[_candles.Count - 1 - x].LowPrice;  					}  					else  					{  						if (_todaySar < _candles[_candles.Count - 1 - x].HighPrice)  							_todaySar = _candles[_candles.Count - 1 - x].HighPrice;  					}  				}    				if ((_longPosition && (_candles[_candles.Count - 1].LowPrice < _todaySar || _candles[_candles.Count - 2].LowPrice < _todaySar))  						|| (!_longPosition && (_candles[_candles.Count - 1].HighPrice > _todaySar || _candles[_candles.Count - 2].HighPrice > _todaySar)))  				{  					return new DecimalIndicatorValue(this' Reverse());  				}    				if (_longPosition)  				{  					if (_prevBar != _candles.Count || _candles[_candles.Count - 1].LowPrice < _prevSar)  					{  						value = _todaySar;  						_prevSar = _todaySar;  					}  					else  						value = _prevSar;    					if (_candles[_candles.Count - 1].HighPrice > _xp)  					{  						_xp = _candles[_candles.Count - 1].HighPrice;  						AfIncrease();  					}  				}  				else if (!_longPosition)  				{  					if (_prevBar != _candles.Count || _candles[_candles.Count - 1].HighPrice > _prevSar)  					{  						value = _todaySar;  						_prevSar = _todaySar;  					}  					else  						value = _prevSar;    					if (_candles[_candles.Count - 1].LowPrice < _xp)  					{  						_xp = _candles[_candles.Count - 1].LowPrice;  						AfIncrease();  					}  				}    			}  			else  			{  				if (_longPosition && _candles[_candles.Count - 1].HighPrice > _xp)  					_xp = _candles[_candles.Count - 1].HighPrice;  				else if (!_longPosition && _candles[_candles.Count - 1].LowPrice < _xp)  					_xp = _candles[_candles.Count - 1].LowPrice;    				value = _prevSar;    				_todaySar = TodaySar(_longPosition ? Math.Min(_reverseValue' _candles[_candles.Count - 1].LowPrice) :  					Math.Max(_reverseValue' _candles[_candles.Count - 1].HighPrice));  			}
Magic Number,StockSharp.Algo.Indicators,ParabolicSar,C:\repos\stocksharp_stocksharp\Algo\Indicators\ParabolicSar.cs,OnProcess,The following statement contains a magic number: if (_reverseBar != _candles.Count)  			{  				_todaySar = TodaySar(_prevValue + _af * (_xp - _prevValue));    				for (var x = 1; x <= 2; x++)  				{  					if (_longPosition)  					{  						if (_todaySar > _candles[_candles.Count - 1 - x].LowPrice)  							_todaySar = _candles[_candles.Count - 1 - x].LowPrice;  					}  					else  					{  						if (_todaySar < _candles[_candles.Count - 1 - x].HighPrice)  							_todaySar = _candles[_candles.Count - 1 - x].HighPrice;  					}  				}    				if ((_longPosition && (_candles[_candles.Count - 1].LowPrice < _todaySar || _candles[_candles.Count - 2].LowPrice < _todaySar))  						|| (!_longPosition && (_candles[_candles.Count - 1].HighPrice > _todaySar || _candles[_candles.Count - 2].HighPrice > _todaySar)))  				{  					return new DecimalIndicatorValue(this' Reverse());  				}    				if (_longPosition)  				{  					if (_prevBar != _candles.Count || _candles[_candles.Count - 1].LowPrice < _prevSar)  					{  						value = _todaySar;  						_prevSar = _todaySar;  					}  					else  						value = _prevSar;    					if (_candles[_candles.Count - 1].HighPrice > _xp)  					{  						_xp = _candles[_candles.Count - 1].HighPrice;  						AfIncrease();  					}  				}  				else if (!_longPosition)  				{  					if (_prevBar != _candles.Count || _candles[_candles.Count - 1].HighPrice > _prevSar)  					{  						value = _todaySar;  						_prevSar = _todaySar;  					}  					else  						value = _prevSar;    					if (_candles[_candles.Count - 1].LowPrice < _xp)  					{  						_xp = _candles[_candles.Count - 1].LowPrice;  						AfIncrease();  					}  				}    			}  			else  			{  				if (_longPosition && _candles[_candles.Count - 1].HighPrice > _xp)  					_xp = _candles[_candles.Count - 1].HighPrice;  				else if (!_longPosition && _candles[_candles.Count - 1].LowPrice < _xp)  					_xp = _candles[_candles.Count - 1].LowPrice;    				value = _prevSar;    				_todaySar = TodaySar(_longPosition ? Math.Min(_reverseValue' _candles[_candles.Count - 1].LowPrice) :  					Math.Max(_reverseValue' _candles[_candles.Count - 1].HighPrice));  			}
Magic Number,StockSharp.Algo.Indicators,ParabolicSar,C:\repos\stocksharp_stocksharp\Algo\Indicators\ParabolicSar.cs,OnProcess,The following statement contains a magic number: if (_reverseBar != _candles.Count)  			{  				_todaySar = TodaySar(_prevValue + _af * (_xp - _prevValue));    				for (var x = 1; x <= 2; x++)  				{  					if (_longPosition)  					{  						if (_todaySar > _candles[_candles.Count - 1 - x].LowPrice)  							_todaySar = _candles[_candles.Count - 1 - x].LowPrice;  					}  					else  					{  						if (_todaySar < _candles[_candles.Count - 1 - x].HighPrice)  							_todaySar = _candles[_candles.Count - 1 - x].HighPrice;  					}  				}    				if ((_longPosition && (_candles[_candles.Count - 1].LowPrice < _todaySar || _candles[_candles.Count - 2].LowPrice < _todaySar))  						|| (!_longPosition && (_candles[_candles.Count - 1].HighPrice > _todaySar || _candles[_candles.Count - 2].HighPrice > _todaySar)))  				{  					return new DecimalIndicatorValue(this' Reverse());  				}    				if (_longPosition)  				{  					if (_prevBar != _candles.Count || _candles[_candles.Count - 1].LowPrice < _prevSar)  					{  						value = _todaySar;  						_prevSar = _todaySar;  					}  					else  						value = _prevSar;    					if (_candles[_candles.Count - 1].HighPrice > _xp)  					{  						_xp = _candles[_candles.Count - 1].HighPrice;  						AfIncrease();  					}  				}  				else if (!_longPosition)  				{  					if (_prevBar != _candles.Count || _candles[_candles.Count - 1].HighPrice > _prevSar)  					{  						value = _todaySar;  						_prevSar = _todaySar;  					}  					else  						value = _prevSar;    					if (_candles[_candles.Count - 1].LowPrice < _xp)  					{  						_xp = _candles[_candles.Count - 1].LowPrice;  						AfIncrease();  					}  				}    			}  			else  			{  				if (_longPosition && _candles[_candles.Count - 1].HighPrice > _xp)  					_xp = _candles[_candles.Count - 1].HighPrice;  				else if (!_longPosition && _candles[_candles.Count - 1].LowPrice < _xp)  					_xp = _candles[_candles.Count - 1].LowPrice;    				value = _prevSar;    				_todaySar = TodaySar(_longPosition ? Math.Min(_reverseValue' _candles[_candles.Count - 1].LowPrice) :  					Math.Max(_reverseValue' _candles[_candles.Count - 1].HighPrice));  			}
Magic Number,StockSharp.Algo.Indicators,ParabolicSar,C:\repos\stocksharp_stocksharp\Algo\Indicators\ParabolicSar.cs,TodaySar,The following statement contains a magic number: if (_longPosition)  			{  				var lowestSar = Math.Min(Math.Min(todaySar' _candles[_candles.Count - 1].LowPrice)' _candles[_candles.Count - 2].LowPrice);  				todaySar = _candles[_candles.Count - 1].LowPrice > lowestSar ? lowestSar : Reverse();  			}  			else  			{  				var highestSar = Math.Max(Math.Max(todaySar' _candles[_candles.Count - 1].HighPrice)' _candles[_candles.Count - 2].HighPrice);  				todaySar = _candles[_candles.Count - 1].HighPrice < highestSar ? highestSar : Reverse();  			}
Magic Number,StockSharp.Algo.Indicators,ParabolicSar,C:\repos\stocksharp_stocksharp\Algo\Indicators\ParabolicSar.cs,TodaySar,The following statement contains a magic number: if (_longPosition)  			{  				var lowestSar = Math.Min(Math.Min(todaySar' _candles[_candles.Count - 1].LowPrice)' _candles[_candles.Count - 2].LowPrice);  				todaySar = _candles[_candles.Count - 1].LowPrice > lowestSar ? lowestSar : Reverse();  			}  			else  			{  				var highestSar = Math.Max(Math.Max(todaySar' _candles[_candles.Count - 1].HighPrice)' _candles[_candles.Count - 2].HighPrice);  				todaySar = _candles[_candles.Count - 1].HighPrice < highestSar ? highestSar : Reverse();  			}
Magic Number,StockSharp.Algo.Indicators,SimpleMovingAverage,C:\repos\stocksharp_stocksharp\Algo\Indicators\SimpleMovingAverage.cs,SimpleMovingAverage,The following statement contains a magic number: Length = 32;
Magic Number,StockSharp.Algo.Indicators,SmoothedMovingAverage,C:\repos\stocksharp_stocksharp\Algo\Indicators\SmoothedMovingAverage.cs,SmoothedMovingAverage,The following statement contains a magic number: Length = 32;
Magic Number,StockSharp.Algo.Indicators,StandardDeviation,C:\repos\stocksharp_stocksharp\Algo\Indicators\StandardDeviation.cs,StandardDeviation,The following statement contains a magic number: Length = 10;
Magic Number,StockSharp.Algo.Indicators,TripleExponentialMovingAverage,C:\repos\stocksharp_stocksharp\Algo\Indicators\TripleExponentialMovingAverage.cs,TripleExponentialMovingAverage,The following statement contains a magic number: Length = 32;
Magic Number,StockSharp.Algo.Indicators,TripleExponentialMovingAverage,C:\repos\stocksharp_stocksharp\Algo\Indicators\TripleExponentialMovingAverage.cs,OnProcess,The following statement contains a magic number: return new DecimalIndicatorValue(this' 3 * ema1Value.GetValue<decimal>() - 3 * ema2Value.GetValue<decimal>() + ema3Value.GetValue<decimal>());
Magic Number,StockSharp.Algo.Indicators,TripleExponentialMovingAverage,C:\repos\stocksharp_stocksharp\Algo\Indicators\TripleExponentialMovingAverage.cs,OnProcess,The following statement contains a magic number: return new DecimalIndicatorValue(this' 3 * ema1Value.GetValue<decimal>() - 3 * ema2Value.GetValue<decimal>() + ema3Value.GetValue<decimal>());
Magic Number,StockSharp.Algo.Indicators,VolumeWeightedMovingAverage,C:\repos\stocksharp_stocksharp\Algo\Indicators\VolumeWeightedMovingAverage.cs,VolumeWeightedMovingAverage,The following statement contains a magic number: Length = 32;
Magic Number,StockSharp.Algo.Indicators,WeightedMovingAverage,C:\repos\stocksharp_stocksharp\Algo\Indicators\WeightedMovingAverage.cs,WeightedMovingAverage,The following statement contains a magic number: Length = 32;
Magic Number,StockSharp.Algo.Indicators,WilderMovingAverage,C:\repos\stocksharp_stocksharp\Algo\Indicators\WilderMovingAverage.cs,WilderMovingAverage,The following statement contains a magic number: Length = 32;
Magic Number,StockSharp.Algo.Indicators,ZigZag,C:\repos\stocksharp_stocksharp\Algo\Indicators\ZigZag.cs,ZigZag,The following statement contains a magic number: BackStep = 3;
Magic Number,StockSharp.Algo.Indicators,ZigZag,C:\repos\stocksharp_stocksharp\Algo\Indicators\ZigZag.cs,ZigZag,The following statement contains a magic number: Depth = 12;
Magic Number,StockSharp.Algo.Indicators,ZigZag,C:\repos\stocksharp_stocksharp\Algo\Indicators\ZigZag.cs,OnProcess,The following statement contains a magic number: const int level = 3;
Magic Number,StockSharp.Algo.Indicators,ZigZag,C:\repos\stocksharp_stocksharp\Algo\Indicators\ZigZag.cs,OnProcess,The following statement contains a magic number: for (var shift = limit; shift >= 0; shift--)  			{  				//--- low  				var val = _buffer.Skip(shift).Take(Depth).Min(v => _lowValue(v));  				if (val == lastLow)  				{  					val = 0.0m;  				}  				else  				{  					lastLow = val;  					if (_lowValue(_buffer[shift]) - val > 0.0m * val / 100)  					{  						val = 0.0m;  					}  					else  					{  						for (var back = 1; back <= BackStep; back++)  						{  							var res = _lowBuffer[shift + back];  							if (res != 0 && res > val)  							{  								_lowBuffer[shift + back] = 0.0m;  							}  						}  					}  				}  				if (_lowValue(_buffer[shift]) == val)  					_lowBuffer[shift] = val;  				else  					_lowBuffer[shift] = 0m;    				//--- high  				val = _buffer.Skip(shift).Take(Depth).Max(v => _highValue(v));  				if (val == lastHigh)  				{  					val = 0.0m;  				}  				else  				{  					lastHigh = val;  					if (val - _highValue(_buffer[shift]) > 0.0m * val / 100)  					{  						val = 0.0m;  					}  					else  					{  						for (var back = 1; back <= BackStep; back++)  						{  							var res = _highBuffer[shift + back];  							if (res != 0 && res < val)  							{  								_highBuffer[shift + back] = 0.0m;  							}  						}  					}  				}  				if (_highValue(_buffer[shift]) == val)  					_highBuffer[shift] = val;  				else  					_highBuffer[shift] = 0m;  			}
Magic Number,StockSharp.Algo.Indicators,ZigZag,C:\repos\stocksharp_stocksharp\Algo\Indicators\ZigZag.cs,OnProcess,The following statement contains a magic number: for (var shift = limit; shift >= 0; shift--)  			{  				//--- low  				var val = _buffer.Skip(shift).Take(Depth).Min(v => _lowValue(v));  				if (val == lastLow)  				{  					val = 0.0m;  				}  				else  				{  					lastLow = val;  					if (_lowValue(_buffer[shift]) - val > 0.0m * val / 100)  					{  						val = 0.0m;  					}  					else  					{  						for (var back = 1; back <= BackStep; back++)  						{  							var res = _lowBuffer[shift + back];  							if (res != 0 && res > val)  							{  								_lowBuffer[shift + back] = 0.0m;  							}  						}  					}  				}  				if (_lowValue(_buffer[shift]) == val)  					_lowBuffer[shift] = val;  				else  					_lowBuffer[shift] = 0m;    				//--- high  				val = _buffer.Skip(shift).Take(Depth).Max(v => _highValue(v));  				if (val == lastHigh)  				{  					val = 0.0m;  				}  				else  				{  					lastHigh = val;  					if (val - _highValue(_buffer[shift]) > 0.0m * val / 100)  					{  						val = 0.0m;  					}  					else  					{  						for (var back = 1; back <= BackStep; back++)  						{  							var res = _highBuffer[shift + back];  							if (res != 0 && res < val)  							{  								_highBuffer[shift + back] = 0.0m;  							}  						}  					}  				}  				if (_highValue(_buffer[shift]) == val)  					_highBuffer[shift] = val;  				else  					_highBuffer[shift] = 0m;  			}
Magic Number,StockSharp.Algo.Indicators,ZigZag,C:\repos\stocksharp_stocksharp\Algo\Indicators\ZigZag.cs,OnProcess,The following statement contains a magic number: for (; valueId < _zigZagBuffer.Count && valuesCount < 2; valueId++)  			{  				if (_zigZagBuffer[valueId] != 0)  					valuesCount++;  			}
Magic Number,StockSharp.Algo.Indicators,ZigZag,C:\repos\stocksharp_stocksharp\Algo\Indicators\ZigZag.cs,OnProcess,The following statement contains a magic number: if (valuesCount != 2)  				return new DecimalIndicatorValue(this);
Magic Number,StockSharp.Algo.Indicators,ZigZagEquis,C:\repos\stocksharp_stocksharp\Algo\Indicators\ZigZagEquis.cs,OnProcess,The following statement contains a magic number: const int level = 3;
Magic Number,StockSharp.Algo.Indicators,ZigZagEquis,C:\repos\stocksharp_stocksharp\Algo\Indicators\ZigZagEquis.cs,OnProcess,The following statement contains a magic number: for (var i = limit + 1; i < _buffer.Count; i++)  			{  				if (_buffer[i] > max)  				{  					max = _buffer[i];  					if (action != 2) //action=1:building the down-point (min) of ZigZag  					{  						if (max - min >= _deviation * min) //min (action!=2) end'max (action=2) begin  						{  							action = 2;  							_zigZagBuffer[i] = max;  							j = i;  							min = max;  						}  						else  							_zigZagBuffer[i] = 0.0m; //max-min=miser'(action!=2) continue  					}  					else //max (action=2) continue  					{  						_zigZagBuffer[j] = 0.0m;  						_zigZagBuffer[i] = max;  						j = i;  						min = max;  					}  				}  				else if (_buffer[i] < min)  				{  					min = _buffer[i];  					if (action != 1) //action=2:building the up-point (max) of ZigZag  					{  						if (max - min >= _deviation * max) //max (action!=1) end'min (action=1) begin  						{  							action = 1;  							_zigZagBuffer[i] = min;  							j = i;  							max = min;  						}  						else  							_zigZagBuffer[i] = 0.0m; //max-min=miser'(action!=1) continue  					}  					else //min (action=1) continue  					{  						_zigZagBuffer[j] = 0.0m;  						_zigZagBuffer[i] = min;  						j = i;  						max = min;  					}  				}  				else  					_zigZagBuffer[i] = 0.0m;  			}
Magic Number,StockSharp.Algo.Indicators,ZigZagEquis,C:\repos\stocksharp_stocksharp\Algo\Indicators\ZigZagEquis.cs,OnProcess,The following statement contains a magic number: for (var i = limit + 1; i < _buffer.Count; i++)  			{  				if (_buffer[i] > max)  				{  					max = _buffer[i];  					if (action != 2) //action=1:building the down-point (min) of ZigZag  					{  						if (max - min >= _deviation * min) //min (action!=2) end'max (action=2) begin  						{  							action = 2;  							_zigZagBuffer[i] = max;  							j = i;  							min = max;  						}  						else  							_zigZagBuffer[i] = 0.0m; //max-min=miser'(action!=2) continue  					}  					else //max (action=2) continue  					{  						_zigZagBuffer[j] = 0.0m;  						_zigZagBuffer[i] = max;  						j = i;  						min = max;  					}  				}  				else if (_buffer[i] < min)  				{  					min = _buffer[i];  					if (action != 1) //action=2:building the up-point (max) of ZigZag  					{  						if (max - min >= _deviation * max) //max (action!=1) end'min (action=1) begin  						{  							action = 1;  							_zigZagBuffer[i] = min;  							j = i;  							max = min;  						}  						else  							_zigZagBuffer[i] = 0.0m; //max-min=miser'(action!=1) continue  					}  					else //min (action=1) continue  					{  						_zigZagBuffer[j] = 0.0m;  						_zigZagBuffer[i] = min;  						j = i;  						max = min;  					}  				}  				else  					_zigZagBuffer[i] = 0.0m;  			}
Magic Number,StockSharp.Algo.Indicators,ZigZagEquis,C:\repos\stocksharp_stocksharp\Algo\Indicators\ZigZagEquis.cs,OnProcess,The following statement contains a magic number: for (var i = _zigZagBuffer.Count - 1; i > 0 && valuesCount < 2; i--' valueId++)  			{  				if (_zigZagBuffer[i] == 0)  					continue;    				valuesCount++;    				if (valuesCount == 1)  					last = _zigZagBuffer[i];  				else  					lastButOne = _zigZagBuffer[i];  			}
Magic Number,StockSharp.Algo.Indicators,ZigZagEquis,C:\repos\stocksharp_stocksharp\Algo\Indicators\ZigZagEquis.cs,OnProcess,The following statement contains a magic number: if (valuesCount != 2)  				return Container.Count > 1 ? this.GetCurrentValue<ShiftedIndicatorValue>() : new ShiftedIndicatorValue(this);
Magic Number,StockSharp.Algo.Indicators,Fractals,C:\repos\stocksharp_stocksharp\Algo\Indicators\Fractals.cs,Fractals,The following statement contains a magic number: if (length % 2 == 0)  			{  				throw new ArgumentOutOfRangeException(nameof(length)' length' LocalizedStrings.Str845);  			}
Magic Number,StockSharp.Algo.Indicators,Fractals,C:\repos\stocksharp_stocksharp\Algo\Indicators\Fractals.cs,Fractals,The following statement contains a magic number: _numCenter = length / 2;
Magic Number,StockSharp.Algo.Storages.Csv,CsvEntityList<T>,C:\repos\stocksharp_stocksharp\Algo\Storages\Csv\CsvEntityList.cs,ReadItems,The following statement contains a magic number: CultureInfo.InvariantCulture.DoInCulture(() =>  			{  				using (var stream = new FileStream(_fileName' FileMode.OpenOrCreate))  				{  					var reader = new FastCsvReader(stream' Registry.Encoding);    					var currErrors = 0;    					while (reader.NextLine())  					{  						try  						{  							var item = Read(reader);  							var key = GetNormalizedKey(item);    							lock (SyncRoot)  							{  								InnerCollection.Add(item);  								AddCache(item);  								_items.Add(key' item);  							}    							currErrors = 0;  						}  						catch (Exception ex)  						{  							errors.Add(ex);    							currErrors++;  							  							if (currErrors >= 10 || errors.Count >= 100)  								break;  						}  					}  				}  			});
Magic Number,StockSharp.Algo.Storages.Csv,CsvEntityList<T>,C:\repos\stocksharp_stocksharp\Algo\Storages\Csv\CsvEntityList.cs,ReadItems,The following statement contains a magic number: CultureInfo.InvariantCulture.DoInCulture(() =>  			{  				using (var stream = new FileStream(_fileName' FileMode.OpenOrCreate))  				{  					var reader = new FastCsvReader(stream' Registry.Encoding);    					var currErrors = 0;    					while (reader.NextLine())  					{  						try  						{  							var item = Read(reader);  							var key = GetNormalizedKey(item);    							lock (SyncRoot)  							{  								InnerCollection.Add(item);  								AddCache(item);  								_items.Add(key' item);  							}    							currErrors = 0;  						}  						catch (Exception ex)  						{  							errors.Add(ex);    							currErrors++;  							  							if (currErrors >= 10 || errors.Count >= 100)  								break;  						}  					}  				}  			});
Magic Number,StockSharp.Algo.Storages.Csv,Level1CsvSerializer,C:\repos\stocksharp_stocksharp\Algo\Storages\Csv\Level1CsvSerializer.cs,Read,The following statement contains a magic number: foreach (var field in _level1Fields)  			{  				// backward compatibility  				if (reader.ColumnCurr == reader.ColumnCount)  					break;    				switch (field)  				{  					case Level1Fields.BestAskTime:  					case Level1Fields.BestBidTime:  					case Level1Fields.LastTradeTime:  					case Level1Fields.BuyBackDate:  						var dtStr = reader.ReadString();    						if (dtStr != null)  						{  							level1.Changes.Add(field' (dtStr.ToDateTime() + reader.ReadString().ToTimeMls()).ToDateTimeOffset(TimeSpan.Parse(reader.ReadString().Remove("+"))));  						}  						else  						{  							reader.Skip(2);  						}                            break;  					case Level1Fields.LastTradeId:  						var id = reader.ReadNullableLong();    						if (id != null)  							level1.Changes.Add(field' id.Value);    						break;  					case Level1Fields.AsksCount:  					case Level1Fields.BidsCount:  					case Level1Fields.TradesCount:  					case Level1Fields.Decimals:  						var count = reader.ReadNullableInt();    						if (count != null)  							level1.Changes.Add(field' count.Value);    						break;  					case Level1Fields.LastTradeUpDown:  					case Level1Fields.IsSystem:  						var flag = reader.ReadNullableBool();    						if (flag != null)  							level1.Changes.Add(field' flag.Value);    						break;  					case Level1Fields.State:  						var state = reader.ReadNullableEnum<SecurityStates>();    						if (state != null)  							level1.Changes.Add(field' state.Value);    						break;  					case Level1Fields.LastTradeOrigin:  						var side = reader.ReadNullableEnum<Sides>();    						if (side != null)  							level1.Changes.Add(field' side.Value);    						break;  					default:  						var value = reader.ReadNullableDecimal();    						if (value != null)  							level1.Changes.Add(field' value.Value);    						break;  				}  			}
Magic Number,StockSharp.Algo.Storages.Csv,TransactionCsvSerializer,C:\repos\stocksharp_stocksharp\Algo\Storages\Csv\TransactionCsvSerializer.cs,Read,The following statement contains a magic number: if (dtStr != null)  			{  				msg.ExpiryDate = (dtStr.ToDateTime() + reader.ReadString().ToTimeMls()).ToDateTimeOffset(TimeSpan.Parse(reader.ReadString().Remove("+")));  			}  			else  				reader.Skip(2);
Magic Number,StockSharp.Algo.Storages,CsvNativeIdStorage,C:\repos\stocksharp_stocksharp\Algo\Storages\INativeIdStorage.cs,LoadFile,The following statement contains a magic number: CultureInfo.InvariantCulture.DoInCulture(() =>  			{  				if (!File.Exists(fileName))  					return;    				var name = Path.GetFileNameWithoutExtension(fileName);    				var pairs = new List<Tuple<SecurityId' object>>();    				using (var stream = new FileStream(fileName' FileMode.Open' FileAccess.Read))  				{  					var reader = new FastCsvReader(stream' Encoding.UTF8);    					reader.NextLine();  					reader.Skip(2);    					var type1 = reader.ReadString().To<Type>();  					var type2 = reader.ReadString().To<Type>();    					var isTuple = type2 != null;    					while (reader.NextLine())  					{  						var securityId = new SecurityId  						{  							SecurityCode = reader.ReadString()'  							BoardCode = reader.ReadString()  						};    						var nativeId = reader.ReadString().To(type1);    						if (isTuple)  						{  							var nativeId2 = reader.ReadString().To(type2);  							nativeId = typeof(Tuple<'>).MakeGenericType(type1' type2).CreateInstance(new[] { nativeId' nativeId2 });  						}  						  						pairs.Add(Tuple.Create(securityId' nativeId));  					}  				}    				lock (_sync)  				{  					var nativeIds = _nativeIds.SafeAdd(name);    					foreach (var tuple in pairs)  					{  						nativeIds.Add(tuple.Item1' tuple.Item2);  					}  				}  			});
Magic Number,StockSharp.Algo.Storages,SnapshotStorage<TMessage>,C:\repos\stocksharp_stocksharp\Algo\Storages\SnapshotStorage.cs,Init,The following statement contains a magic number: if (File.Exists(fileName))  			{  				using (var stream = File.OpenRead(fileName))  				{  					version = new Version(stream.ReadByte()' stream.ReadByte());    					buffer = new byte[_serializer.GetSnapshotSize(version)];    					while (stream.Position < stream.Length)  					{  						stream.ReadBytes(buffer' buffer.Length);    						var message = _serializer.Deserialize(version' buffer);    						_snapshots.Add(_serializer.GetSecurityId(message)' Tuple.Create(stream.Position - buffer.Length' message));  					}    					_maxOffset = stream.Position;  				}  			}  			else  			{  				version = _serializer.Version;  				_maxOffset = 2; // version bytes    				buffer = new byte[_serializer.GetSnapshotSize(version)];  			}
Magic Number,StockSharp.Algo.Storages,SnapshotStorage<TMessage>,C:\repos\stocksharp_stocksharp\Algo\Storages\SnapshotStorage.cs,Init,The following statement contains a magic number: ThreadingHelper.Timer(() =>  			{  				Tuple<long' TMessage>[] changed;    				lock (_snapshots.SyncRoot)  				{  					if (_dirtySecurities.Count == 0)  						return;    					if (isFlushing)  						return;    					isFlushing = true;    					changed = _dirtySecurities.Select(id =>  					{  						var tuple = _snapshots[id];  						return Tuple.Create(tuple.Item1' (TMessage)tuple.Item2.Clone());  					}).OrderBy(t => t.Item1).ToArray();    					_dirtySecurities.Count = 0;  				}    				try  				{  					using (var stream = File.OpenWrite(fileName))  					{  						if (stream.Length == 0)  						{  							stream.WriteByte((byte)version.Major);  							stream.WriteByte((byte)version.Minor);  						}    						foreach (var tuple in changed)  						{  							stream.Seek(tuple.Item1' SeekOrigin.Begin);    							Array.Clear(buffer' 0' buffer.Length);  							_serializer.Serialize(version' tuple.Item2' buffer);    							stream.Write(buffer' 0' buffer.Length);  						}  					}  				}  				catch (Exception ex)  				{  					ex.LogError();  				}    				lock (_snapshots.SyncRoot)  					isFlushing = false;    			}).Interval(TimeSpan.FromSeconds(10));
Magic Number,StockSharp.Algo.Storages,LocalMarketDataDrive,C:\repos\stocksharp_stocksharp\Algo\Storages\LocalMarketDataDrive.cs,GetDataType,The following statement contains a magic number: var arg = type.ToCandleArg(parts[2]);
Magic Number,StockSharp.Algo.Storages,StorageMessageAdapter,C:\repos\stocksharp_stocksharp\Algo\Storages\StorageMessageAdapter.cs,StorageMessageAdapter,The following statement contains a magic number: ThreadingHelper.Timer(() =>  			{  				lock (sync)  				{  					if (isProcessing)  						return;    					isProcessing = true;  				}    				try  				{  					foreach (var pair in GetTicks())  					{  						GetStorage<ExecutionMessage>(pair.Key' ExecutionTypes.Tick).Save(pair.Value);  					}    					foreach (var pair in GetOrderLog())  					{  						GetStorage<ExecutionMessage>(pair.Key' ExecutionTypes.OrderLog).Save(pair.Value);  					}    					foreach (var pair in GetTransactions())  					{  						if (Mode.Contains(StorageModes.Incremental))  							GetStorage<ExecutionMessage>(pair.Key' ExecutionTypes.Transaction).Save(pair.Value);  						  						if (Mode.Contains(StorageModes.Snapshot))  						{  							var snapshotStorage = GetSnapshotStorage(typeof(ExecutionMessage)' ExecutionTypes.Transaction);    							foreach (var message in pair.Value)  								snapshotStorage.Update(message);  						}  					}    					foreach (var pair in GetOrderBooks())  					{  						if (Mode.Contains(StorageModes.Incremental))  							GetStorage<QuoteChangeMessage>(pair.Key' null).Save(pair.Value);  						  						if (Mode.Contains(StorageModes.Snapshot))  						{  							var snapshotStorage = GetSnapshotStorage(typeof(QuoteChangeMessage)' null);    							foreach (var message in pair.Value)  								snapshotStorage.Update(message);  						}  					}    					foreach (var pair in GetLevel1())  					{  						if (Mode.Contains(StorageModes.Incremental))  							GetStorage<Level1ChangeMessage>(pair.Key' null).Save(pair.Value);  						  						if (Mode.Contains(StorageModes.Snapshot))  						{  							var snapshotStorage = GetSnapshotStorage(typeof(Level1ChangeMessage)' null);    							foreach (var message in pair.Value)  								snapshotStorage.Update(message);  						}  					}    					foreach (var pair in GetCandles())  					{  						GetStorage(pair.Key.Item1' pair.Key.Item2' pair.Key.Item3).Save(pair.Value);  					}    					foreach (var pair in GetPositionChanges())  					{  						if (Mode.Contains(StorageModes.Incremental))  							GetStorage<PositionChangeMessage>(pair.Key' null).Save(pair.Value);  						  						if (Mode.Contains(StorageModes.Snapshot))  						{  							var snapshotStorage = GetSnapshotStorage(typeof(PositionChangeMessage)' null);    							foreach (var message in pair.Value)  								snapshotStorage.Update(message);  						}  					}    					var news = GetNews().ToArray();    					if (news.Length > 0)  					{  						_storageRegistry.GetNewsMessageStorage(Drive' Format).Save(news);  					}  				}  				catch (Exception excp)  				{  					excp.LogError();  				}  				finally  				{  					lock (sync)  						isProcessing = false;  				}  			}).Interval(TimeSpan.FromSeconds(10));
Magic Number,StockSharp.Algo.Storages,StorageMessageAdapter,C:\repos\stocksharp_stocksharp\Algo\Storages\StorageMessageAdapter.cs,LoadMessages,The following statement contains a magic number: if (from == null)  			{  				var days = DaysLoad;    				if (typeof(TMessage) == typeof(TimeFrameCandleMessage))  				{  					var tf = (TimeSpan)storage.Arg;    					if (tf.Ticks > 1)  					{  						if (tf.TotalMinutes < 15)  							days = TimeSpan.FromTicks(tf.Ticks * 10000);  						else if (tf.TotalHours < 2)  							days = TimeSpan.FromTicks(tf.Ticks * 1000);  						else if (tf.TotalDays < 2)  							days = TimeSpan.FromTicks(tf.Ticks * 100);  						else  							days = TimeSpan.FromTicks(tf.Ticks * 50);	  					}  				}  				else if (typeof(TMessage) == typeof(QuoteChangeMessage) || typeof(TMessage) == typeof(Level1ChangeMessage))  					days = TimeSpan.Zero;    				from = (to ?? last.Value) - days;  			}
Magic Number,StockSharp.Algo.Storages,StorageMessageAdapter,C:\repos\stocksharp_stocksharp\Algo\Storages\StorageMessageAdapter.cs,LoadMessages,The following statement contains a magic number: if (from == null)  			{  				var days = DaysLoad;    				if (typeof(TMessage) == typeof(TimeFrameCandleMessage))  				{  					var tf = (TimeSpan)storage.Arg;    					if (tf.Ticks > 1)  					{  						if (tf.TotalMinutes < 15)  							days = TimeSpan.FromTicks(tf.Ticks * 10000);  						else if (tf.TotalHours < 2)  							days = TimeSpan.FromTicks(tf.Ticks * 1000);  						else if (tf.TotalDays < 2)  							days = TimeSpan.FromTicks(tf.Ticks * 100);  						else  							days = TimeSpan.FromTicks(tf.Ticks * 50);	  					}  				}  				else if (typeof(TMessage) == typeof(QuoteChangeMessage) || typeof(TMessage) == typeof(Level1ChangeMessage))  					days = TimeSpan.Zero;    				from = (to ?? last.Value) - days;  			}
Magic Number,StockSharp.Algo.Storages,StorageMessageAdapter,C:\repos\stocksharp_stocksharp\Algo\Storages\StorageMessageAdapter.cs,LoadMessages,The following statement contains a magic number: if (from == null)  			{  				var days = DaysLoad;    				if (typeof(TMessage) == typeof(TimeFrameCandleMessage))  				{  					var tf = (TimeSpan)storage.Arg;    					if (tf.Ticks > 1)  					{  						if (tf.TotalMinutes < 15)  							days = TimeSpan.FromTicks(tf.Ticks * 10000);  						else if (tf.TotalHours < 2)  							days = TimeSpan.FromTicks(tf.Ticks * 1000);  						else if (tf.TotalDays < 2)  							days = TimeSpan.FromTicks(tf.Ticks * 100);  						else  							days = TimeSpan.FromTicks(tf.Ticks * 50);	  					}  				}  				else if (typeof(TMessage) == typeof(QuoteChangeMessage) || typeof(TMessage) == typeof(Level1ChangeMessage))  					days = TimeSpan.Zero;    				from = (to ?? last.Value) - days;  			}
Magic Number,StockSharp.Algo.Storages,StorageMessageAdapter,C:\repos\stocksharp_stocksharp\Algo\Storages\StorageMessageAdapter.cs,LoadMessages,The following statement contains a magic number: if (from == null)  			{  				var days = DaysLoad;    				if (typeof(TMessage) == typeof(TimeFrameCandleMessage))  				{  					var tf = (TimeSpan)storage.Arg;    					if (tf.Ticks > 1)  					{  						if (tf.TotalMinutes < 15)  							days = TimeSpan.FromTicks(tf.Ticks * 10000);  						else if (tf.TotalHours < 2)  							days = TimeSpan.FromTicks(tf.Ticks * 1000);  						else if (tf.TotalDays < 2)  							days = TimeSpan.FromTicks(tf.Ticks * 100);  						else  							days = TimeSpan.FromTicks(tf.Ticks * 50);	  					}  				}  				else if (typeof(TMessage) == typeof(QuoteChangeMessage) || typeof(TMessage) == typeof(Level1ChangeMessage))  					days = TimeSpan.Zero;    				from = (to ?? last.Value) - days;  			}
Magic Number,StockSharp.Algo.Storages,StorageMessageAdapter,C:\repos\stocksharp_stocksharp\Algo\Storages\StorageMessageAdapter.cs,LoadMessages,The following statement contains a magic number: if (from == null)  			{  				var days = DaysLoad;    				if (typeof(TMessage) == typeof(TimeFrameCandleMessage))  				{  					var tf = (TimeSpan)storage.Arg;    					if (tf.Ticks > 1)  					{  						if (tf.TotalMinutes < 15)  							days = TimeSpan.FromTicks(tf.Ticks * 10000);  						else if (tf.TotalHours < 2)  							days = TimeSpan.FromTicks(tf.Ticks * 1000);  						else if (tf.TotalDays < 2)  							days = TimeSpan.FromTicks(tf.Ticks * 100);  						else  							days = TimeSpan.FromTicks(tf.Ticks * 50);	  					}  				}  				else if (typeof(TMessage) == typeof(QuoteChangeMessage) || typeof(TMessage) == typeof(Level1ChangeMessage))  					days = TimeSpan.Zero;    				from = (to ?? last.Value) - days;  			}
Magic Number,StockSharp.Algo.Storages,StorageMessageAdapter,C:\repos\stocksharp_stocksharp\Algo\Storages\StorageMessageAdapter.cs,LoadMessages,The following statement contains a magic number: if (from == null)  			{  				var days = DaysLoad;    				if (typeof(TMessage) == typeof(TimeFrameCandleMessage))  				{  					var tf = (TimeSpan)storage.Arg;    					if (tf.Ticks > 1)  					{  						if (tf.TotalMinutes < 15)  							days = TimeSpan.FromTicks(tf.Ticks * 10000);  						else if (tf.TotalHours < 2)  							days = TimeSpan.FromTicks(tf.Ticks * 1000);  						else if (tf.TotalDays < 2)  							days = TimeSpan.FromTicks(tf.Ticks * 100);  						else  							days = TimeSpan.FromTicks(tf.Ticks * 50);	  					}  				}  				else if (typeof(TMessage) == typeof(QuoteChangeMessage) || typeof(TMessage) == typeof(Level1ChangeMessage))  					days = TimeSpan.Zero;    				from = (to ?? last.Value) - days;  			}
Magic Number,StockSharp.Algo.Storages,StorageMessageAdapter,C:\repos\stocksharp_stocksharp\Algo\Storages\StorageMessageAdapter.cs,LoadMessages,The following statement contains a magic number: if (from == null)  			{  				var days = DaysLoad;    				if (typeof(TMessage) == typeof(TimeFrameCandleMessage))  				{  					var tf = (TimeSpan)storage.Arg;    					if (tf.Ticks > 1)  					{  						if (tf.TotalMinutes < 15)  							days = TimeSpan.FromTicks(tf.Ticks * 10000);  						else if (tf.TotalHours < 2)  							days = TimeSpan.FromTicks(tf.Ticks * 1000);  						else if (tf.TotalDays < 2)  							days = TimeSpan.FromTicks(tf.Ticks * 100);  						else  							days = TimeSpan.FromTicks(tf.Ticks * 50);	  					}  				}  				else if (typeof(TMessage) == typeof(QuoteChangeMessage) || typeof(TMessage) == typeof(Level1ChangeMessage))  					days = TimeSpan.Zero;    				from = (to ?? last.Value) - days;  			}
Magic Number,StockSharp.Algo.Storages,StorageHelper,C:\repos\stocksharp_stocksharp\Algo\Storages\StorageHelper.cs,SynchronizeSecurities,The following statement contains a magic number: foreach (var securityPath in securityPaths)  			{  				if (isCancelled())  					break;    				var securityId = Path.GetFileName(securityPath).FolderNameToSecurityId();    				var isNew = false;    				var security = securities.TryGetValue(securityId);    				if (security == null)  				{  					var firstDataFile =  						Directory.EnumerateDirectories(securityPath)  							.SelectMany(d => Directory.EnumerateFiles(d' "*.bin")  								.Concat(Directory.EnumerateFiles(d' "*.csv"))  								.OrderBy(f => Path.GetExtension(f).CompareIgnoreCase(".bin") ? 0 : 1))  							.FirstOrDefault();    					if (firstDataFile != null)  					{  						var id = securityId.ToSecurityId();    						decimal priceStep;    						if (Path.GetExtension(firstDataFile).CompareIgnoreCase(".bin"))  						{  							try  							{  								priceStep = File.ReadAllBytes(firstDataFile).Range(6' 16).To<decimal>();  							}  							catch (Exception ex)  							{  								throw new InvalidOperationException(LocalizedStrings.Str2929Params.Put(firstDataFile)' ex);  							}  						}  						else  							priceStep = 0.01m;    						security = new Security  						{  							Id = securityId'  							PriceStep = priceStep'  							Name = id.SecurityCode'  							Code = id.SecurityCode'  							Board = exchangeInfoProvider.GetOrCreateBoard(id.BoardCode)'  						};    						securities.Add(securityId' security);    						securityStorage.Save(security);  						newSecurity(security);    						isNew = true;  					}  				}    				updateProgress(progress++' iterCount);    				if (isNew)  					logsReceiver.AddInfoLog(LocalizedStrings.Str2930Params' security);  			}
Magic Number,StockSharp.Algo.Storages,StorageHelper,C:\repos\stocksharp_stocksharp\Algo\Storages\StorageHelper.cs,SynchronizeSecurities,The following statement contains a magic number: foreach (var securityPath in securityPaths)  			{  				if (isCancelled())  					break;    				var securityId = Path.GetFileName(securityPath).FolderNameToSecurityId();    				var isNew = false;    				var security = securities.TryGetValue(securityId);    				if (security == null)  				{  					var firstDataFile =  						Directory.EnumerateDirectories(securityPath)  							.SelectMany(d => Directory.EnumerateFiles(d' "*.bin")  								.Concat(Directory.EnumerateFiles(d' "*.csv"))  								.OrderBy(f => Path.GetExtension(f).CompareIgnoreCase(".bin") ? 0 : 1))  							.FirstOrDefault();    					if (firstDataFile != null)  					{  						var id = securityId.ToSecurityId();    						decimal priceStep;    						if (Path.GetExtension(firstDataFile).CompareIgnoreCase(".bin"))  						{  							try  							{  								priceStep = File.ReadAllBytes(firstDataFile).Range(6' 16).To<decimal>();  							}  							catch (Exception ex)  							{  								throw new InvalidOperationException(LocalizedStrings.Str2929Params.Put(firstDataFile)' ex);  							}  						}  						else  							priceStep = 0.01m;    						security = new Security  						{  							Id = securityId'  							PriceStep = priceStep'  							Name = id.SecurityCode'  							Code = id.SecurityCode'  							Board = exchangeInfoProvider.GetOrCreateBoard(id.BoardCode)'  						};    						securities.Add(securityId' security);    						securityStorage.Save(security);  						newSecurity(security);    						isNew = true;  					}  				}    				updateProgress(progress++' iterCount);    				if (isNew)  					logsReceiver.AddInfoLog(LocalizedStrings.Str2930Params' security);  			}
Magic Number,StockSharp.Algo.Storages,SecurityStorage,C:\repos\stocksharp_stocksharp\Algo\Storages\StorageRegistry.cs,Load,The following statement contains a magic number: var proxySet = _format  					.Split(';')  					.Select(s => MemberProxy.Create(typeof(Security)' s.Substring(1' s.Length - 2)))  					.ToArray();
Magic Number,StockSharp.Algo.Storages.Binary,MarketDataEnumerator,C:\repos\stocksharp_stocksharp\Algo\Storages\Binary\BinaryMarketDataSerializer.cs,MoveNext,The following statement contains a magic number: if (Index == (PartSize - 1))  				{  					//Reader.AlignReader();  					if ((Reader.Offset % 8) != 0)  					{  						var shift = ((Reader.Offset / 8) * 8 + 8) - Reader.Offset;  						Reader.Offset += shift;  					}  				}
Magic Number,StockSharp.Algo.Storages.Binary,MarketDataEnumerator,C:\repos\stocksharp_stocksharp\Algo\Storages\Binary\BinaryMarketDataSerializer.cs,MoveNext,The following statement contains a magic number: if (Index == (PartSize - 1))  				{  					//Reader.AlignReader();  					if ((Reader.Offset % 8) != 0)  					{  						var shift = ((Reader.Offset / 8) * 8 + 8) - Reader.Offset;  						Reader.Offset += shift;  					}  				}
Magic Number,StockSharp.Algo.Storages.Binary,MarketDataEnumerator,C:\repos\stocksharp_stocksharp\Algo\Storages\Binary\BinaryMarketDataSerializer.cs,MoveNext,The following statement contains a magic number: if (Index == (PartSize - 1))  				{  					//Reader.AlignReader();  					if ((Reader.Offset % 8) != 0)  					{  						var shift = ((Reader.Offset / 8) * 8 + 8) - Reader.Offset;  						Reader.Offset += shift;  					}  				}
Magic Number,StockSharp.Algo.Storages.Binary,MarketDataEnumerator,C:\repos\stocksharp_stocksharp\Algo\Storages\Binary\BinaryMarketDataSerializer.cs,MoveNext,The following statement contains a magic number: if (Index == (PartSize - 1))  				{  					//Reader.AlignReader();  					if ((Reader.Offset % 8) != 0)  					{  						var shift = ((Reader.Offset / 8) * 8 + 8) - Reader.Offset;  						Reader.Offset += shift;  					}  				}
Magic Number,StockSharp.Algo.Storages.Binary,Level1BinarySerializer,C:\repos\stocksharp_stocksharp\Algo\Storages\Binary\Level1BinarySerializer.cs,OnSave,The following statement contains a magic number: foreach (var message in messages)  			{  				if (metaInfo.Version >= MarketDataVersions.Version49)  				{  					var lastOffset = metaInfo.LastServerOffset;  					metaInfo.LastTime = writer.WriteTime(message.ServerTime' metaInfo.LastTime' "level1"' allowNonOrdered' isUtc' metaInfo.ServerOffset' allowDiffOffsets' isTickPrecision' ref lastOffset);  					metaInfo.LastServerOffset = lastOffset;    					var hasLocalTime = !message.LocalTime.IsDefault() && message.LocalTime != message.ServerTime;    					writer.Write(hasLocalTime);    					if (hasLocalTime)  					{  						lastOffset = metaInfo.LastLocalOffset;  						metaInfo.LastLocalTime = writer.WriteTime(message.LocalTime' metaInfo.LastLocalTime' LocalizedStrings.Str919' allowNonOrdered' isUtc' metaInfo.LocalOffset' allowDiffOffsets' isTickPrecision' ref lastOffset);  						metaInfo.LastLocalOffset = lastOffset;  					}    					var count = message.Changes.Count;    					if (count == 0)  						throw new ArgumentException(LocalizedStrings.Str920' nameof(messages));    					writer.WriteInt(count);  				}    				foreach (var change in message.Changes)  				{  					if (metaInfo.Version < MarketDataVersions.Version49)  					{  						var offset = TimeSpan.Zero;  						metaInfo.LastTime = writer.WriteTime(message.ServerTime' metaInfo.LastTime' "level1"' allowNonOrdered' isUtc' metaInfo.ServerOffset' false' false' ref offset);  					}    					var field = change.Key;  					var value = change.Value;    					writer.WriteInt(MapTo(metaInfo' field));    					if (unkTypes)  					{  						var isKnown = (int)field <= (int)metaInfo.MaxKnownType;  						writer.Write(isKnown);    						if (!isKnown)  						{  							switch (value)  							{  								case decimal d:  									writer.WriteInt(0);  									writer.WriteDecimal(d' 0);  									break;  								case long l:  									writer.WriteInt(1);  									writer.WriteLong(l);  									break;  								case int i:  									writer.WriteInt(2);  									writer.WriteInt(i);  									break;  								default:  									writer.WriteInt(10);  									break;  							}    							continue;  						}  					}    					switch (field)  					{  						case Level1Fields.OpenPrice:  						case Level1Fields.HighPrice:  						case Level1Fields.LowPrice:  						case Level1Fields.ClosePrice:  						{  							SerializePrice(writer' metaInfo' (decimal)value' useLong' nonAdjustPrice);  							break;  						}  						case Level1Fields.MinPrice:  						{  							if (minMaxPrice)  								SerializeChange(writer' metaInfo.MinPrice' (decimal)value);  							else  								SerializePrice(writer' metaInfo' (decimal)value' useLong' nonAdjustPrice);    							break;  						}  						case Level1Fields.MaxPrice:  						{  							var price = (decimal)value;    							if (minMaxPrice)  								SerializeChange(writer' metaInfo.MaxPrice' (decimal)value);  							else  								SerializePrice(writer' metaInfo' price == int.MaxValue ? metaInfo.LastPriceStep : price' useLong' nonAdjustPrice);  							  							break;  						}  						case Level1Fields.BidsVolume:  						case Level1Fields.AsksVolume:  						case Level1Fields.OpenInterest:  						{  							writer.WriteVolume((decimal)value' metaInfo' SecurityId);  							break;  						}  						case Level1Fields.ImpliedVolatility:  						{  							SerializeChange(writer' metaInfo.ImpliedVolatility' (decimal)value);  							break;  						}  						case Level1Fields.HistoricalVolatility:  						{  							SerializeChange(writer' metaInfo.HistoricalVolatility' (decimal)value);  							break;  						}  						case Level1Fields.TheorPrice:  						{  							SerializeChange(writer' metaInfo.TheorPrice' (decimal)value);  							break;  						}  						case Level1Fields.Delta:  						{  							SerializeChange(writer' metaInfo.Delta' (decimal)value);  							break;  						}  						case Level1Fields.Gamma:  						{  							SerializeChange(writer' metaInfo.Gamma' (decimal)value);  							break;  						}  						case Level1Fields.Vega:  						{  							SerializeChange(writer' metaInfo.Vega' (decimal)value);  							break;  						}  						case Level1Fields.Theta:  						{  							SerializeChange(writer' metaInfo.Theta' (decimal)value);  							break;  						}  						case Level1Fields.MarginBuy:  						{  							SerializeChange(writer' metaInfo.MarginBuy' (decimal)value);  							break;  						}  						case Level1Fields.MarginSell:  						{  							SerializeChange(writer' metaInfo.MarginSell' (decimal)value);  							break;  						}  						case Level1Fields.PriceStep:  						{  							if (storeSteps)  								SerializePrice(writer' metaInfo' (decimal)value' useLong' nonAdjustPrice);  							else  							{  								//нет необходимости хранить шаги цены и объема' т.к. они есть в metaInfo  							}    							break;  						}  						case Level1Fields.VolumeStep:  						{  							if (storeSteps)  								writer.WriteVolume((decimal)value' metaInfo' SecurityId);  							else  							{  								//нет необходимости хранить шаги цены и объема' т.к. они есть в metaInfo  							}    							break;  						}  						case Level1Fields.Decimals:  						{  							writer.WriteInt((int)value);  							break;  						}  						case Level1Fields.Multiplier:  						{  							writer.WriteVolume((decimal)value' metaInfo' SecurityId);  							break;  						}  						case Level1Fields.StepPrice:  						{  							SerializeChange(writer' metaInfo.StepPrice' (decimal)value);  							break;  						}  						case Level1Fields.LastTrade:  						{  							var trade = (Trade)value;    							SerializePrice(writer' metaInfo' trade.Price' useLong' nonAdjustPrice);  							writer.WriteVolume(trade.Volume' metaInfo' SecurityId);  							writer.WriteSide(trade.OrderDirection);    							break;  						}  						case Level1Fields.BestBid:  						case Level1Fields.BestAsk:  						{  							var quote = (Quote)value;    							SerializePrice(writer' metaInfo' quote.Price' useLong' nonAdjustPrice);  							writer.WriteVolume(quote.Volume' metaInfo' SecurityId);    							break;  						}  						case Level1Fields.State:  						{  							writer.WriteInt((int)(SecurityStates)value);  							break;  						}  						case Level1Fields.BestBidPrice:  						case Level1Fields.BestAskPrice:  						case Level1Fields.LastTradePrice:  						case Level1Fields.SettlementPrice:  						case Level1Fields.HighBidPrice:  						case Level1Fields.LowAskPrice:  						{  							SerializePrice(writer' metaInfo' (decimal)value' useLong' nonAdjustPrice);  							break;  						}  						case Level1Fields.AveragePrice:  						{  							if (metaInfo.Version < MarketDataVersions.Version51)  								SerializePrice(writer' metaInfo' (decimal)value' false' false);  							else  								SerializeChange(writer' metaInfo.AveragePrice' (decimal)value);    							break;  						}  						case Level1Fields.Volume:  						case Level1Fields.LastTradeVolume:  						case Level1Fields.BestBidVolume:  						case Level1Fields.BestAskVolume:  						{  							writer.WriteVolume((decimal)value' metaInfo' SecurityId);  							break;  						}  						case Level1Fields.Change:  						{  							SerializeChange(writer' metaInfo.Change' (decimal)value);  							break;  						}  						case Level1Fields.Rho:  						{  							SerializeChange(writer' metaInfo.Rho' (decimal)value);  							break;  						}  						case Level1Fields.AccruedCouponIncome:  						{  							SerializeChange(writer' metaInfo.AccruedCouponIncome' (decimal)value);  							break;  						}  						case Level1Fields.Yield:  						{  							SerializeChange(writer' metaInfo.Yield' (decimal)value);  							break;  						}  						case Level1Fields.VWAP:  						{  							SerializeChange(writer' metaInfo.VWAP' (decimal)value);  							break;  						}  						case Level1Fields.LastTradeTime:  						case Level1Fields.BestBidTime:  						case Level1Fields.BestAskTime:  						{  							var timeValue = (DateTimeOffset)value;    							if (metaInfo.FirstFieldTime.IsDefault())  							{  								if (!isTickPrecision)  									timeValue = timeValue.StorageBinaryOldTruncate();    								metaInfo.FirstFieldTime = metaInfo.LastFieldTime = isUtc ? timeValue.UtcDateTime : timeValue.LocalDateTime;  							}    							var lastOffset = metaInfo.LastServerOffset;  							metaInfo.LastFieldTime = writer.WriteTime(timeValue' metaInfo.LastFieldTime' LocalizedStrings.Str921Params.Put(change.Key)' allowNonOrdered' isUtc' metaInfo.ServerOffset' allowDiffOffsets' isTickPrecision' ref lastOffset);  							metaInfo.LastServerOffset = lastOffset;  							break;  						}  						case Level1Fields.BidsCount:  						case Level1Fields.AsksCount:  						{  							if (metaInfo.Version < MarketDataVersions.Version46)  								SerializePrice(writer' metaInfo' (int)value' false' false);  							else  								writer.WriteInt((int)value);    							break;  						}  						case Level1Fields.TradesCount:  						{  							writer.WriteInt((int)value);  							break;  						}  						case Level1Fields.LastTradeId:  						{  							writer.WriteLong((long)value);  							break;  						}  						case Level1Fields.LastTradeUpDown:  						{  							writer.Write((bool)value);  							break;  						}  						case Level1Fields.LastTradeOrigin:  						{  							writer.WriteSide((Sides?)value);  							break;  						}  						case Level1Fields.PriceEarnings:  						{  							SerializeChange(writer' metaInfo.PriceEarnings' (decimal)value);  							break;  						}  						case Level1Fields.ForwardPriceEarnings:  						{  							SerializeChange(writer' metaInfo.ForwardPriceEarnings' (decimal)value);  							break;  						}  						case Level1Fields.PriceEarningsGrowth:  						{  							SerializeChange(writer' metaInfo.PriceEarningsGrowth' (decimal)value);  							break;  						}  						case Level1Fields.PriceSales:  						{  							SerializeChange(writer' metaInfo.PriceSales' (decimal)value);  							break;  						}  						case Level1Fields.PriceBook:  						{  							SerializeChange(writer' metaInfo.PriceBook' (decimal)value);  							break;  						}  						case Level1Fields.PriceCash:  						{  							SerializeChange(writer' metaInfo.PriceCash' (decimal)value);  							break;  						}  						case Level1Fields.PriceFreeCash:  						{  							SerializeChange(writer' metaInfo.PriceFreeCash' (decimal)value);  							break;  						}  						case Level1Fields.Payout:  						{  							SerializeChange(writer' metaInfo.Payout' (decimal)value);  							break;  						}  						case Level1Fields.SharesOutstanding:  						{  							SerializeChange(writer' metaInfo.SharesOutstanding' (decimal)value);  							break;  						}  						case Level1Fields.SharesFloat:  						{  							SerializeChange(writer' metaInfo.SharesFloat' (decimal)value);  							break;  						}  						case Level1Fields.FloatShort:  						{  							SerializeChange(writer' metaInfo.FloatShort' (decimal)value);  							break;  						}  						case Level1Fields.ShortRatio:  						{  							SerializeChange(writer' metaInfo.ShortRatio' (decimal)value);  							break;  						}  						case Level1Fields.ReturnOnAssets:  						{  							SerializeChange(writer' metaInfo.ReturnOnAssets' (decimal)value);  							break;  						}  						case Level1Fields.ReturnOnEquity:  						{  							SerializeChange(writer' metaInfo.ReturnOnEquity' (decimal)value);  							break;  						}  						case Level1Fields.ReturnOnInvestment:  						{  							SerializeChange(writer' metaInfo.ReturnOnInvestment' (decimal)value);  							break;  						}  						case Level1Fields.CurrentRatio:  						{  							SerializeChange(writer' metaInfo.CurrentRatio' (decimal)value);  							break;  						}  						case Level1Fields.QuickRatio:  						{  							SerializeChange(writer' metaInfo.QuickRatio' (decimal)value);  							break;  						}  						case Level1Fields.LongTermDebtEquity:  						{  							SerializeChange(writer' metaInfo.LongTermDebtEquity' (decimal)value);  							break;  						}  						case Level1Fields.TotalDebtEquity:  						{  							SerializeChange(writer' metaInfo.TotalDebtEquity' (decimal)value);  							break;  						}  						case Level1Fields.GrossMargin:  						{  							SerializeChange(writer' metaInfo.GrossMargin' (decimal)value);  							break;  						}  						case Level1Fields.OperatingMargin:  						{  							SerializeChange(writer' metaInfo.OperatingMargin' (decimal)value);  							break;  						}  						case Level1Fields.ProfitMargin:  						{  							SerializeChange(writer' metaInfo.ProfitMargin' (decimal)value);  							break;  						}  						case Level1Fields.Beta:  						{  							SerializeChange(writer' metaInfo.Beta' (decimal)value);  							break;  						}  						case Level1Fields.AverageTrueRange:  						{  							SerializeChange(writer' metaInfo.AverageTrueRange' (decimal)value);  							break;  						}  						case Level1Fields.HistoricalVolatilityWeek:  						{  							SerializeChange(writer' metaInfo.HistoricalVolatilityWeek' (decimal)value);  							break;  						}  						case Level1Fields.HistoricalVolatilityMonth:  						{  							SerializeChange(writer' metaInfo.HistoricalVolatilityMonth' (decimal)value);  							break;  						}  						case Level1Fields.IsSystem:  						{  							writer.Write((bool)value);  							break;  						}  						case Level1Fields.Turnover:  						{  							SerializeChange(writer' metaInfo.Turnover' (decimal)value);  							break;  						}  						case Level1Fields.IssueSize:  						{  							SerializeChange(writer' metaInfo.IssueSize' (decimal)value);  							break;  						}  						case Level1Fields.Duration:  						{  							SerializeChange(writer' metaInfo.Duration' (decimal)value);  							break;  						}  						case Level1Fields.BuyBackDate:  						{  							var timeValue = (DateTimeOffset)value;    							if (metaInfo.FirstBuyBackDateTime.IsDefault())  							{  								if (!isTickPrecision)  									timeValue = timeValue.StorageBinaryOldTruncate();    								metaInfo.FirstBuyBackDateTime = metaInfo.LastBuyBackDateTime = isUtc ? timeValue.UtcDateTime : timeValue.LocalDateTime;  							}    							var lastOffset = metaInfo.LastBuyBackDateOffset;  							metaInfo.LastBuyBackDateTime = writer.WriteTime(timeValue' metaInfo.LastBuyBackDateTime' LocalizedStrings.Str921Params.Put(change.Key)' allowNonOrdered' isUtc' metaInfo.ServerOffset' allowDiffOffsets' isTickPrecision' ref lastOffset);  							metaInfo.LastBuyBackDateOffset = lastOffset;  							break;  						}  						case Level1Fields.BuyBackPrice:  						{  							SerializeChange(writer' metaInfo.BuyBackPrice' (decimal)value);  							break;  						}  						default:  							throw new ArgumentOutOfRangeException(nameof(messages)' change.Key' LocalizedStrings.Str922);  					}  				}  			}
Magic Number,StockSharp.Algo.Storages.Binary,Level1BinarySerializer,C:\repos\stocksharp_stocksharp\Algo\Storages\Binary\Level1BinarySerializer.cs,OnSave,The following statement contains a magic number: foreach (var message in messages)  			{  				if (metaInfo.Version >= MarketDataVersions.Version49)  				{  					var lastOffset = metaInfo.LastServerOffset;  					metaInfo.LastTime = writer.WriteTime(message.ServerTime' metaInfo.LastTime' "level1"' allowNonOrdered' isUtc' metaInfo.ServerOffset' allowDiffOffsets' isTickPrecision' ref lastOffset);  					metaInfo.LastServerOffset = lastOffset;    					var hasLocalTime = !message.LocalTime.IsDefault() && message.LocalTime != message.ServerTime;    					writer.Write(hasLocalTime);    					if (hasLocalTime)  					{  						lastOffset = metaInfo.LastLocalOffset;  						metaInfo.LastLocalTime = writer.WriteTime(message.LocalTime' metaInfo.LastLocalTime' LocalizedStrings.Str919' allowNonOrdered' isUtc' metaInfo.LocalOffset' allowDiffOffsets' isTickPrecision' ref lastOffset);  						metaInfo.LastLocalOffset = lastOffset;  					}    					var count = message.Changes.Count;    					if (count == 0)  						throw new ArgumentException(LocalizedStrings.Str920' nameof(messages));    					writer.WriteInt(count);  				}    				foreach (var change in message.Changes)  				{  					if (metaInfo.Version < MarketDataVersions.Version49)  					{  						var offset = TimeSpan.Zero;  						metaInfo.LastTime = writer.WriteTime(message.ServerTime' metaInfo.LastTime' "level1"' allowNonOrdered' isUtc' metaInfo.ServerOffset' false' false' ref offset);  					}    					var field = change.Key;  					var value = change.Value;    					writer.WriteInt(MapTo(metaInfo' field));    					if (unkTypes)  					{  						var isKnown = (int)field <= (int)metaInfo.MaxKnownType;  						writer.Write(isKnown);    						if (!isKnown)  						{  							switch (value)  							{  								case decimal d:  									writer.WriteInt(0);  									writer.WriteDecimal(d' 0);  									break;  								case long l:  									writer.WriteInt(1);  									writer.WriteLong(l);  									break;  								case int i:  									writer.WriteInt(2);  									writer.WriteInt(i);  									break;  								default:  									writer.WriteInt(10);  									break;  							}    							continue;  						}  					}    					switch (field)  					{  						case Level1Fields.OpenPrice:  						case Level1Fields.HighPrice:  						case Level1Fields.LowPrice:  						case Level1Fields.ClosePrice:  						{  							SerializePrice(writer' metaInfo' (decimal)value' useLong' nonAdjustPrice);  							break;  						}  						case Level1Fields.MinPrice:  						{  							if (minMaxPrice)  								SerializeChange(writer' metaInfo.MinPrice' (decimal)value);  							else  								SerializePrice(writer' metaInfo' (decimal)value' useLong' nonAdjustPrice);    							break;  						}  						case Level1Fields.MaxPrice:  						{  							var price = (decimal)value;    							if (minMaxPrice)  								SerializeChange(writer' metaInfo.MaxPrice' (decimal)value);  							else  								SerializePrice(writer' metaInfo' price == int.MaxValue ? metaInfo.LastPriceStep : price' useLong' nonAdjustPrice);  							  							break;  						}  						case Level1Fields.BidsVolume:  						case Level1Fields.AsksVolume:  						case Level1Fields.OpenInterest:  						{  							writer.WriteVolume((decimal)value' metaInfo' SecurityId);  							break;  						}  						case Level1Fields.ImpliedVolatility:  						{  							SerializeChange(writer' metaInfo.ImpliedVolatility' (decimal)value);  							break;  						}  						case Level1Fields.HistoricalVolatility:  						{  							SerializeChange(writer' metaInfo.HistoricalVolatility' (decimal)value);  							break;  						}  						case Level1Fields.TheorPrice:  						{  							SerializeChange(writer' metaInfo.TheorPrice' (decimal)value);  							break;  						}  						case Level1Fields.Delta:  						{  							SerializeChange(writer' metaInfo.Delta' (decimal)value);  							break;  						}  						case Level1Fields.Gamma:  						{  							SerializeChange(writer' metaInfo.Gamma' (decimal)value);  							break;  						}  						case Level1Fields.Vega:  						{  							SerializeChange(writer' metaInfo.Vega' (decimal)value);  							break;  						}  						case Level1Fields.Theta:  						{  							SerializeChange(writer' metaInfo.Theta' (decimal)value);  							break;  						}  						case Level1Fields.MarginBuy:  						{  							SerializeChange(writer' metaInfo.MarginBuy' (decimal)value);  							break;  						}  						case Level1Fields.MarginSell:  						{  							SerializeChange(writer' metaInfo.MarginSell' (decimal)value);  							break;  						}  						case Level1Fields.PriceStep:  						{  							if (storeSteps)  								SerializePrice(writer' metaInfo' (decimal)value' useLong' nonAdjustPrice);  							else  							{  								//нет необходимости хранить шаги цены и объема' т.к. они есть в metaInfo  							}    							break;  						}  						case Level1Fields.VolumeStep:  						{  							if (storeSteps)  								writer.WriteVolume((decimal)value' metaInfo' SecurityId);  							else  							{  								//нет необходимости хранить шаги цены и объема' т.к. они есть в metaInfo  							}    							break;  						}  						case Level1Fields.Decimals:  						{  							writer.WriteInt((int)value);  							break;  						}  						case Level1Fields.Multiplier:  						{  							writer.WriteVolume((decimal)value' metaInfo' SecurityId);  							break;  						}  						case Level1Fields.StepPrice:  						{  							SerializeChange(writer' metaInfo.StepPrice' (decimal)value);  							break;  						}  						case Level1Fields.LastTrade:  						{  							var trade = (Trade)value;    							SerializePrice(writer' metaInfo' trade.Price' useLong' nonAdjustPrice);  							writer.WriteVolume(trade.Volume' metaInfo' SecurityId);  							writer.WriteSide(trade.OrderDirection);    							break;  						}  						case Level1Fields.BestBid:  						case Level1Fields.BestAsk:  						{  							var quote = (Quote)value;    							SerializePrice(writer' metaInfo' quote.Price' useLong' nonAdjustPrice);  							writer.WriteVolume(quote.Volume' metaInfo' SecurityId);    							break;  						}  						case Level1Fields.State:  						{  							writer.WriteInt((int)(SecurityStates)value);  							break;  						}  						case Level1Fields.BestBidPrice:  						case Level1Fields.BestAskPrice:  						case Level1Fields.LastTradePrice:  						case Level1Fields.SettlementPrice:  						case Level1Fields.HighBidPrice:  						case Level1Fields.LowAskPrice:  						{  							SerializePrice(writer' metaInfo' (decimal)value' useLong' nonAdjustPrice);  							break;  						}  						case Level1Fields.AveragePrice:  						{  							if (metaInfo.Version < MarketDataVersions.Version51)  								SerializePrice(writer' metaInfo' (decimal)value' false' false);  							else  								SerializeChange(writer' metaInfo.AveragePrice' (decimal)value);    							break;  						}  						case Level1Fields.Volume:  						case Level1Fields.LastTradeVolume:  						case Level1Fields.BestBidVolume:  						case Level1Fields.BestAskVolume:  						{  							writer.WriteVolume((decimal)value' metaInfo' SecurityId);  							break;  						}  						case Level1Fields.Change:  						{  							SerializeChange(writer' metaInfo.Change' (decimal)value);  							break;  						}  						case Level1Fields.Rho:  						{  							SerializeChange(writer' metaInfo.Rho' (decimal)value);  							break;  						}  						case Level1Fields.AccruedCouponIncome:  						{  							SerializeChange(writer' metaInfo.AccruedCouponIncome' (decimal)value);  							break;  						}  						case Level1Fields.Yield:  						{  							SerializeChange(writer' metaInfo.Yield' (decimal)value);  							break;  						}  						case Level1Fields.VWAP:  						{  							SerializeChange(writer' metaInfo.VWAP' (decimal)value);  							break;  						}  						case Level1Fields.LastTradeTime:  						case Level1Fields.BestBidTime:  						case Level1Fields.BestAskTime:  						{  							var timeValue = (DateTimeOffset)value;    							if (metaInfo.FirstFieldTime.IsDefault())  							{  								if (!isTickPrecision)  									timeValue = timeValue.StorageBinaryOldTruncate();    								metaInfo.FirstFieldTime = metaInfo.LastFieldTime = isUtc ? timeValue.UtcDateTime : timeValue.LocalDateTime;  							}    							var lastOffset = metaInfo.LastServerOffset;  							metaInfo.LastFieldTime = writer.WriteTime(timeValue' metaInfo.LastFieldTime' LocalizedStrings.Str921Params.Put(change.Key)' allowNonOrdered' isUtc' metaInfo.ServerOffset' allowDiffOffsets' isTickPrecision' ref lastOffset);  							metaInfo.LastServerOffset = lastOffset;  							break;  						}  						case Level1Fields.BidsCount:  						case Level1Fields.AsksCount:  						{  							if (metaInfo.Version < MarketDataVersions.Version46)  								SerializePrice(writer' metaInfo' (int)value' false' false);  							else  								writer.WriteInt((int)value);    							break;  						}  						case Level1Fields.TradesCount:  						{  							writer.WriteInt((int)value);  							break;  						}  						case Level1Fields.LastTradeId:  						{  							writer.WriteLong((long)value);  							break;  						}  						case Level1Fields.LastTradeUpDown:  						{  							writer.Write((bool)value);  							break;  						}  						case Level1Fields.LastTradeOrigin:  						{  							writer.WriteSide((Sides?)value);  							break;  						}  						case Level1Fields.PriceEarnings:  						{  							SerializeChange(writer' metaInfo.PriceEarnings' (decimal)value);  							break;  						}  						case Level1Fields.ForwardPriceEarnings:  						{  							SerializeChange(writer' metaInfo.ForwardPriceEarnings' (decimal)value);  							break;  						}  						case Level1Fields.PriceEarningsGrowth:  						{  							SerializeChange(writer' metaInfo.PriceEarningsGrowth' (decimal)value);  							break;  						}  						case Level1Fields.PriceSales:  						{  							SerializeChange(writer' metaInfo.PriceSales' (decimal)value);  							break;  						}  						case Level1Fields.PriceBook:  						{  							SerializeChange(writer' metaInfo.PriceBook' (decimal)value);  							break;  						}  						case Level1Fields.PriceCash:  						{  							SerializeChange(writer' metaInfo.PriceCash' (decimal)value);  							break;  						}  						case Level1Fields.PriceFreeCash:  						{  							SerializeChange(writer' metaInfo.PriceFreeCash' (decimal)value);  							break;  						}  						case Level1Fields.Payout:  						{  							SerializeChange(writer' metaInfo.Payout' (decimal)value);  							break;  						}  						case Level1Fields.SharesOutstanding:  						{  							SerializeChange(writer' metaInfo.SharesOutstanding' (decimal)value);  							break;  						}  						case Level1Fields.SharesFloat:  						{  							SerializeChange(writer' metaInfo.SharesFloat' (decimal)value);  							break;  						}  						case Level1Fields.FloatShort:  						{  							SerializeChange(writer' metaInfo.FloatShort' (decimal)value);  							break;  						}  						case Level1Fields.ShortRatio:  						{  							SerializeChange(writer' metaInfo.ShortRatio' (decimal)value);  							break;  						}  						case Level1Fields.ReturnOnAssets:  						{  							SerializeChange(writer' metaInfo.ReturnOnAssets' (decimal)value);  							break;  						}  						case Level1Fields.ReturnOnEquity:  						{  							SerializeChange(writer' metaInfo.ReturnOnEquity' (decimal)value);  							break;  						}  						case Level1Fields.ReturnOnInvestment:  						{  							SerializeChange(writer' metaInfo.ReturnOnInvestment' (decimal)value);  							break;  						}  						case Level1Fields.CurrentRatio:  						{  							SerializeChange(writer' metaInfo.CurrentRatio' (decimal)value);  							break;  						}  						case Level1Fields.QuickRatio:  						{  							SerializeChange(writer' metaInfo.QuickRatio' (decimal)value);  							break;  						}  						case Level1Fields.LongTermDebtEquity:  						{  							SerializeChange(writer' metaInfo.LongTermDebtEquity' (decimal)value);  							break;  						}  						case Level1Fields.TotalDebtEquity:  						{  							SerializeChange(writer' metaInfo.TotalDebtEquity' (decimal)value);  							break;  						}  						case Level1Fields.GrossMargin:  						{  							SerializeChange(writer' metaInfo.GrossMargin' (decimal)value);  							break;  						}  						case Level1Fields.OperatingMargin:  						{  							SerializeChange(writer' metaInfo.OperatingMargin' (decimal)value);  							break;  						}  						case Level1Fields.ProfitMargin:  						{  							SerializeChange(writer' metaInfo.ProfitMargin' (decimal)value);  							break;  						}  						case Level1Fields.Beta:  						{  							SerializeChange(writer' metaInfo.Beta' (decimal)value);  							break;  						}  						case Level1Fields.AverageTrueRange:  						{  							SerializeChange(writer' metaInfo.AverageTrueRange' (decimal)value);  							break;  						}  						case Level1Fields.HistoricalVolatilityWeek:  						{  							SerializeChange(writer' metaInfo.HistoricalVolatilityWeek' (decimal)value);  							break;  						}  						case Level1Fields.HistoricalVolatilityMonth:  						{  							SerializeChange(writer' metaInfo.HistoricalVolatilityMonth' (decimal)value);  							break;  						}  						case Level1Fields.IsSystem:  						{  							writer.Write((bool)value);  							break;  						}  						case Level1Fields.Turnover:  						{  							SerializeChange(writer' metaInfo.Turnover' (decimal)value);  							break;  						}  						case Level1Fields.IssueSize:  						{  							SerializeChange(writer' metaInfo.IssueSize' (decimal)value);  							break;  						}  						case Level1Fields.Duration:  						{  							SerializeChange(writer' metaInfo.Duration' (decimal)value);  							break;  						}  						case Level1Fields.BuyBackDate:  						{  							var timeValue = (DateTimeOffset)value;    							if (metaInfo.FirstBuyBackDateTime.IsDefault())  							{  								if (!isTickPrecision)  									timeValue = timeValue.StorageBinaryOldTruncate();    								metaInfo.FirstBuyBackDateTime = metaInfo.LastBuyBackDateTime = isUtc ? timeValue.UtcDateTime : timeValue.LocalDateTime;  							}    							var lastOffset = metaInfo.LastBuyBackDateOffset;  							metaInfo.LastBuyBackDateTime = writer.WriteTime(timeValue' metaInfo.LastBuyBackDateTime' LocalizedStrings.Str921Params.Put(change.Key)' allowNonOrdered' isUtc' metaInfo.ServerOffset' allowDiffOffsets' isTickPrecision' ref lastOffset);  							metaInfo.LastBuyBackDateOffset = lastOffset;  							break;  						}  						case Level1Fields.BuyBackPrice:  						{  							SerializeChange(writer' metaInfo.BuyBackPrice' (decimal)value);  							break;  						}  						default:  							throw new ArgumentOutOfRangeException(nameof(messages)' change.Key' LocalizedStrings.Str922);  					}  				}  			}
Magic Number,StockSharp.Algo.Storages.Binary,Level1BinarySerializer,C:\repos\stocksharp_stocksharp\Algo\Storages\Binary\Level1BinarySerializer.cs,MoveNext,The following statement contains a magic number: for (var i = 0; i < changeCount; i++)  			{  				var field = MapFrom(metaInfo' reader.ReadInt());    				if (unkTypes)  				{  					if (!reader.Read())  					{  						var unkType = reader.ReadInt();  						switch (unkType)  						{  							case 0:  								l1Msg.Add(field' reader.ReadDecimal(0));  								break;    							case 1:  								l1Msg.Add(field' reader.ReadLong());  								break;    							case 2:  								l1Msg.Add(field' reader.ReadInt());  								break;    							case 10:  								break;    							default:  								throw new ArgumentOutOfRangeException(nameof(unkType)' unkType' LocalizedStrings.Str1291);  						}    						continue;  					}  				}    				switch (field)  				{  					case Level1Fields.OpenPrice:  					case Level1Fields.HighPrice:  					case Level1Fields.LowPrice:  					case Level1Fields.ClosePrice:  					{  						var price = DeserializePrice(reader' metaInfo' useLong' nonAdjustPrice);  						l1Msg.Add(field' price);  						break;  					}  					case Level1Fields.MinPrice:  					case Level1Fields.MaxPrice:  					{  						if (minMaxPrice)  						{  							l1Msg.Add(field' DeserializeChange(reader' field == Level1Fields.MinPrice ? metaInfo.MinPrice : metaInfo.MaxPrice));  						}  						else  						{  							var price = DeserializePrice(reader' metaInfo' useLong' nonAdjustPrice);  							l1Msg.Add(field' price);  						}    						break;  					}  					//case Level1Fields.MaxPrice:  					//{  					//	metaInfo.Price.First = reader.ReadPrice(metaInfo.Price.First' metaInfo);  					//	l1Msg.Add(field' metaInfo.Price.First == metaInfo.PriceStep ? int.MaxValue : metaInfo.Price.First);  					//	break;  					//}  					case Level1Fields.BidsVolume:  					case Level1Fields.AsksVolume:  					case Level1Fields.OpenInterest:  					{  						l1Msg.Add(field' reader.ReadVolume(metaInfo));  						break;  					}  					case Level1Fields.ImpliedVolatility:  					{  						l1Msg.Add(field' DeserializeChange(reader' metaInfo.ImpliedVolatility));  						break;  					}  					case Level1Fields.HistoricalVolatility:  					{  						l1Msg.Add(field' DeserializeChange(reader' metaInfo.HistoricalVolatility));  						break;  					}  					case Level1Fields.TheorPrice:  					{  						l1Msg.Add(field' DeserializeChange(reader' metaInfo.TheorPrice));  						break;  					}  					case Level1Fields.Delta:  					{  						l1Msg.Add(field' DeserializeChange(reader' metaInfo.Delta));  						break;  					}  					case Level1Fields.Gamma:  					{  						l1Msg.Add(field' DeserializeChange(reader' metaInfo.Gamma));  						break;  					}  					case Level1Fields.Vega:  					{  						l1Msg.Add(field' DeserializeChange(reader' metaInfo.Vega));  						break;  					}  					case Level1Fields.Theta:  					{  						l1Msg.Add(field' DeserializeChange(reader' metaInfo.Theta));  						break;  					}  					case Level1Fields.MarginBuy:  					{  						l1Msg.Add(field' DeserializeChange(reader' metaInfo.MarginBuy));  						break;  					}  					case Level1Fields.MarginSell:  					{  						l1Msg.Add(field' DeserializeChange(reader' metaInfo.MarginSell));  						break;  					}  					case Level1Fields.PriceStep:  					{  						if (storeSteps)  						{  							var price = DeserializePrice(reader' metaInfo' useLong' nonAdjustPrice);  							l1Msg.Add(field' price);  						}  						else  							l1Msg.Add(field' metaInfo.PriceStep);    						break;  					}  					case Level1Fields.Decimals:  					{  						l1Msg.Add(field' reader.ReadInt());  						break;  					}  					case Level1Fields.VolumeStep:  					{  						if (storeSteps)  							l1Msg.Add(field' reader.ReadVolume(metaInfo));  						else  							l1Msg.Add(field' metaInfo.VolumeStep);    						break;  					}  					case Level1Fields.Multiplier:  					{  						l1Msg.Add(field' reader.ReadVolume(metaInfo));  						break;  					}  					case Level1Fields.StepPrice:  					{  						l1Msg.Add(field' DeserializeChange(reader' metaInfo.StepPrice));  						break;  					}  					case Level1Fields.LastTrade:  					{  						var price = DeserializePrice(reader' metaInfo' useLong' nonAdjustPrice);    						l1Msg.Add(Level1Fields.LastTradePrice' price);  						l1Msg.Add(Level1Fields.LastTradeVolume' reader.ReadVolume(metaInfo));  						l1Msg.Add(Level1Fields.LastTradeTime' metaInfo.FirstTime.ApplyTimeZone(metaInfo.ServerOffset));    						var origin = reader.ReadSide();    						if (origin != null)  							l1Msg.Add(Level1Fields.LastTradeOrigin' origin.Value);    						break;  					}  					case Level1Fields.BestBid:  					{  						var price = DeserializePrice(reader' metaInfo' useLong' nonAdjustPrice);    						l1Msg.Add(Level1Fields.BestBidPrice' price);  						l1Msg.Add(Level1Fields.BestBidVolume' reader.ReadVolume(metaInfo));  						break;  					}  					case Level1Fields.BestAsk:  					{  						var price = DeserializePrice(reader' metaInfo' useLong' nonAdjustPrice);    						l1Msg.Add(Level1Fields.BestAskPrice' price);  						l1Msg.Add(Level1Fields.BestAskVolume' reader.ReadVolume(metaInfo));  						break;  					}  					case Level1Fields.State:  					{  						l1Msg.Add(field' (SecurityStates)reader.ReadInt());  						break;  					}  					case Level1Fields.BestBidPrice:  					case Level1Fields.BestAskPrice:  					case Level1Fields.LastTradePrice:  					case Level1Fields.SettlementPrice:  					case Level1Fields.HighBidPrice:  					case Level1Fields.LowAskPrice:  					{  						var price = DeserializePrice(reader' metaInfo' useLong' nonAdjustPrice);  						l1Msg.Add(field' price);  						break;  					}  					case Level1Fields.AveragePrice:  					{  						if (metaInfo.Version < MarketDataVersions.Version51)  						{  							var price = DeserializePrice(reader' metaInfo' false' false);  							l1Msg.Add(field' price);  						}  						else  							l1Msg.Add(field' DeserializeChange(reader' metaInfo.AveragePrice));    						break;  					}  					case Level1Fields.Volume:  					case Level1Fields.LastTradeVolume:  					case Level1Fields.BestBidVolume:  					case Level1Fields.BestAskVolume:  					{  						l1Msg.Add(field' reader.ReadVolume(metaInfo));  						break;  					}  					case Level1Fields.Change:  					{  						l1Msg.Add(field' DeserializeChange(reader' metaInfo.Change));  						break;  					}  					case Level1Fields.Rho:  					{  						l1Msg.Add(field' DeserializeChange(reader' metaInfo.Rho));  						break;  					}  					case Level1Fields.AccruedCouponIncome:  					{  						l1Msg.Add(field' DeserializeChange(reader' metaInfo.AccruedCouponIncome));  						break;  					}  					case Level1Fields.Yield:  					{  						l1Msg.Add(field' DeserializeChange(reader' metaInfo.Yield));  						break;  					}  					case Level1Fields.VWAP:  					{  						l1Msg.Add(field' DeserializeChange(reader' metaInfo.VWAP));  						break;  					}  					case Level1Fields.LastTradeTime:  					case Level1Fields.BestBidTime:  					case Level1Fields.BestAskTime:  					{  						var prevTime = metaInfo.FirstFieldTime;  						var lastOffset = metaInfo.FirstServerOffset;  						l1Msg.Add(field' reader.ReadTime(ref prevTime' allowNonOrdered' isUtc' metaInfo.GetTimeZone(isUtc' SecurityId' ExchangeInfoProvider)' allowDiffOffsets' isTickPrecision' ref lastOffset));  						metaInfo.FirstFieldTime = prevTime;  						metaInfo.FirstServerOffset = lastOffset;  						break;  					}  					case Level1Fields.BidsCount:  					case Level1Fields.AsksCount:  					{  						l1Msg.Add(field' metaInfo.Version < MarketDataVersions.Version46 ? (int)reader.ReadVolume(metaInfo) : reader.ReadInt());  						break;  					}  					case Level1Fields.TradesCount:  					{  						l1Msg.Add(field' reader.ReadInt());  						break;  					}  					case Level1Fields.LastTradeId:  					{  						l1Msg.Add(field' reader.ReadLong());  						break;  					}  					case Level1Fields.LastTradeUpDown:  					{  						l1Msg.Add(field' reader.Read());  						break;  					}  					case Level1Fields.LastTradeOrigin:  					{  						l1Msg.TryAdd(field' reader.ReadSide());  						break;  					}  					case Level1Fields.PriceEarnings:  					{  						l1Msg.Add(field' DeserializeChange(reader' metaInfo.PriceEarnings));  						break;  					}  					case Level1Fields.ForwardPriceEarnings:  					{  						l1Msg.Add(field' DeserializeChange(reader' metaInfo.ForwardPriceEarnings));  						break;  					}  					case Level1Fields.PriceEarningsGrowth:  					{  						l1Msg.Add(field' DeserializeChange(reader' metaInfo.PriceEarningsGrowth));  						break;  					}  					case Level1Fields.PriceSales:  					{  						l1Msg.Add(field' DeserializeChange(reader' metaInfo.PriceSales));  						break;  					}  					case Level1Fields.PriceBook:  					{  						l1Msg.Add(field' DeserializeChange(reader' metaInfo.PriceBook));  						break;  					}  					case Level1Fields.PriceCash:  					{  						l1Msg.Add(field' DeserializeChange(reader' metaInfo.PriceCash));  						break;  					}  					case Level1Fields.PriceFreeCash:  					{  						l1Msg.Add(field' DeserializeChange(reader' metaInfo.PriceFreeCash));  						break;  					}  					case Level1Fields.Payout:  					{  						l1Msg.Add(field' DeserializeChange(reader' metaInfo.Payout));  						break;  					}  					case Level1Fields.SharesOutstanding:  					{  						l1Msg.Add(field' DeserializeChange(reader' metaInfo.SharesOutstanding));  						break;  					}  					case Level1Fields.SharesFloat:  					{  						l1Msg.Add(field' DeserializeChange(reader' metaInfo.SharesFloat));  						break;  					}  					case Level1Fields.FloatShort:  					{  						l1Msg.Add(field' DeserializeChange(reader' metaInfo.FloatShort));  						break;  					}  					case Level1Fields.ShortRatio:  					{  						l1Msg.Add(field' DeserializeChange(reader' metaInfo.ShortRatio));  						break;  					}  					case Level1Fields.ReturnOnAssets:  					{  						l1Msg.Add(field' DeserializeChange(reader' metaInfo.ReturnOnAssets));  						break;  					}  					case Level1Fields.ReturnOnEquity:  					{  						l1Msg.Add(field' DeserializeChange(reader' metaInfo.ReturnOnEquity));  						break;  					}  					case Level1Fields.ReturnOnInvestment:  					{  						l1Msg.Add(field' DeserializeChange(reader' metaInfo.ReturnOnInvestment));  						break;  					}  					case Level1Fields.CurrentRatio:  					{  						l1Msg.Add(field' DeserializeChange(reader' metaInfo.CurrentRatio));  						break;  					}  					case Level1Fields.QuickRatio:  					{  						l1Msg.Add(field' DeserializeChange(reader' metaInfo.QuickRatio));  						break;  					}  					case Level1Fields.LongTermDebtEquity:  					{  						l1Msg.Add(field' DeserializeChange(reader' metaInfo.LongTermDebtEquity));  						break;  					}  					case Level1Fields.TotalDebtEquity:  					{  						l1Msg.Add(field' DeserializeChange(reader' metaInfo.TotalDebtEquity));  						break;  					}  					case Level1Fields.GrossMargin:  					{  						l1Msg.Add(field' DeserializeChange(reader' metaInfo.GrossMargin));  						break;  					}  					case Level1Fields.OperatingMargin:  					{  						l1Msg.Add(field' DeserializeChange(reader' metaInfo.OperatingMargin));  						break;  					}  					case Level1Fields.ProfitMargin:  					{  						l1Msg.Add(field' DeserializeChange(reader' metaInfo.ProfitMargin));  						break;  					}  					case Level1Fields.Beta:  					{  						l1Msg.Add(field' DeserializeChange(reader' metaInfo.Beta));  						break;  					}  					case Level1Fields.AverageTrueRange:  					{  						l1Msg.Add(field' DeserializeChange(reader' metaInfo.AverageTrueRange));  						break;  					}  					case Level1Fields.HistoricalVolatilityWeek:  					{  						l1Msg.Add(field' DeserializeChange(reader' metaInfo.HistoricalVolatilityWeek));  						break;  					}  					case Level1Fields.HistoricalVolatilityMonth:  					{  						l1Msg.Add(field' DeserializeChange(reader' metaInfo.HistoricalVolatilityMonth));  						break;  					}  					case Level1Fields.IsSystem:  					{  						l1Msg.Add(field' reader.Read());  						break;  					}  					case Level1Fields.Turnover:  					{  						l1Msg.Add(field' DeserializeChange(reader' metaInfo.Turnover));  						break;  					}  					case Level1Fields.IssueSize:  					{  						l1Msg.Add(field' DeserializeChange(reader' metaInfo.IssueSize));  						break;  					}  					case Level1Fields.Duration:  					{  						l1Msg.Add(field' DeserializeChange(reader' metaInfo.Duration));  						break;  					}  					case Level1Fields.BuyBackDate:  					{  						var prevTime = metaInfo.FirstBuyBackDateTime;  						var lastOffset = metaInfo.FirstBuyBackDateOffset;  						l1Msg.Add(field' reader.ReadTime(ref prevTime' allowNonOrdered' isUtc' metaInfo.GetTimeZone(isUtc' SecurityId' ExchangeInfoProvider)' allowDiffOffsets' isTickPrecision' ref lastOffset));  						metaInfo.FirstBuyBackDateTime = prevTime;  						metaInfo.FirstBuyBackDateOffset = lastOffset;  						break;  					}  					case Level1Fields.BuyBackPrice:  					{  						l1Msg.Add(field' DeserializeChange(reader' metaInfo.BuyBackPrice));  						break;  					}  					default:  						throw new InvalidOperationException(LocalizedStrings.Str923Params.Put(field));  				}  			}
Magic Number,StockSharp.Algo.Storages.Binary,Level1BinarySerializer,C:\repos\stocksharp_stocksharp\Algo\Storages\Binary\Level1BinarySerializer.cs,MoveNext,The following statement contains a magic number: for (var i = 0; i < changeCount; i++)  			{  				var field = MapFrom(metaInfo' reader.ReadInt());    				if (unkTypes)  				{  					if (!reader.Read())  					{  						var unkType = reader.ReadInt();  						switch (unkType)  						{  							case 0:  								l1Msg.Add(field' reader.ReadDecimal(0));  								break;    							case 1:  								l1Msg.Add(field' reader.ReadLong());  								break;    							case 2:  								l1Msg.Add(field' reader.ReadInt());  								break;    							case 10:  								break;    							default:  								throw new ArgumentOutOfRangeException(nameof(unkType)' unkType' LocalizedStrings.Str1291);  						}    						continue;  					}  				}    				switch (field)  				{  					case Level1Fields.OpenPrice:  					case Level1Fields.HighPrice:  					case Level1Fields.LowPrice:  					case Level1Fields.ClosePrice:  					{  						var price = DeserializePrice(reader' metaInfo' useLong' nonAdjustPrice);  						l1Msg.Add(field' price);  						break;  					}  					case Level1Fields.MinPrice:  					case Level1Fields.MaxPrice:  					{  						if (minMaxPrice)  						{  							l1Msg.Add(field' DeserializeChange(reader' field == Level1Fields.MinPrice ? metaInfo.MinPrice : metaInfo.MaxPrice));  						}  						else  						{  							var price = DeserializePrice(reader' metaInfo' useLong' nonAdjustPrice);  							l1Msg.Add(field' price);  						}    						break;  					}  					//case Level1Fields.MaxPrice:  					//{  					//	metaInfo.Price.First = reader.ReadPrice(metaInfo.Price.First' metaInfo);  					//	l1Msg.Add(field' metaInfo.Price.First == metaInfo.PriceStep ? int.MaxValue : metaInfo.Price.First);  					//	break;  					//}  					case Level1Fields.BidsVolume:  					case Level1Fields.AsksVolume:  					case Level1Fields.OpenInterest:  					{  						l1Msg.Add(field' reader.ReadVolume(metaInfo));  						break;  					}  					case Level1Fields.ImpliedVolatility:  					{  						l1Msg.Add(field' DeserializeChange(reader' metaInfo.ImpliedVolatility));  						break;  					}  					case Level1Fields.HistoricalVolatility:  					{  						l1Msg.Add(field' DeserializeChange(reader' metaInfo.HistoricalVolatility));  						break;  					}  					case Level1Fields.TheorPrice:  					{  						l1Msg.Add(field' DeserializeChange(reader' metaInfo.TheorPrice));  						break;  					}  					case Level1Fields.Delta:  					{  						l1Msg.Add(field' DeserializeChange(reader' metaInfo.Delta));  						break;  					}  					case Level1Fields.Gamma:  					{  						l1Msg.Add(field' DeserializeChange(reader' metaInfo.Gamma));  						break;  					}  					case Level1Fields.Vega:  					{  						l1Msg.Add(field' DeserializeChange(reader' metaInfo.Vega));  						break;  					}  					case Level1Fields.Theta:  					{  						l1Msg.Add(field' DeserializeChange(reader' metaInfo.Theta));  						break;  					}  					case Level1Fields.MarginBuy:  					{  						l1Msg.Add(field' DeserializeChange(reader' metaInfo.MarginBuy));  						break;  					}  					case Level1Fields.MarginSell:  					{  						l1Msg.Add(field' DeserializeChange(reader' metaInfo.MarginSell));  						break;  					}  					case Level1Fields.PriceStep:  					{  						if (storeSteps)  						{  							var price = DeserializePrice(reader' metaInfo' useLong' nonAdjustPrice);  							l1Msg.Add(field' price);  						}  						else  							l1Msg.Add(field' metaInfo.PriceStep);    						break;  					}  					case Level1Fields.Decimals:  					{  						l1Msg.Add(field' reader.ReadInt());  						break;  					}  					case Level1Fields.VolumeStep:  					{  						if (storeSteps)  							l1Msg.Add(field' reader.ReadVolume(metaInfo));  						else  							l1Msg.Add(field' metaInfo.VolumeStep);    						break;  					}  					case Level1Fields.Multiplier:  					{  						l1Msg.Add(field' reader.ReadVolume(metaInfo));  						break;  					}  					case Level1Fields.StepPrice:  					{  						l1Msg.Add(field' DeserializeChange(reader' metaInfo.StepPrice));  						break;  					}  					case Level1Fields.LastTrade:  					{  						var price = DeserializePrice(reader' metaInfo' useLong' nonAdjustPrice);    						l1Msg.Add(Level1Fields.LastTradePrice' price);  						l1Msg.Add(Level1Fields.LastTradeVolume' reader.ReadVolume(metaInfo));  						l1Msg.Add(Level1Fields.LastTradeTime' metaInfo.FirstTime.ApplyTimeZone(metaInfo.ServerOffset));    						var origin = reader.ReadSide();    						if (origin != null)  							l1Msg.Add(Level1Fields.LastTradeOrigin' origin.Value);    						break;  					}  					case Level1Fields.BestBid:  					{  						var price = DeserializePrice(reader' metaInfo' useLong' nonAdjustPrice);    						l1Msg.Add(Level1Fields.BestBidPrice' price);  						l1Msg.Add(Level1Fields.BestBidVolume' reader.ReadVolume(metaInfo));  						break;  					}  					case Level1Fields.BestAsk:  					{  						var price = DeserializePrice(reader' metaInfo' useLong' nonAdjustPrice);    						l1Msg.Add(Level1Fields.BestAskPrice' price);  						l1Msg.Add(Level1Fields.BestAskVolume' reader.ReadVolume(metaInfo));  						break;  					}  					case Level1Fields.State:  					{  						l1Msg.Add(field' (SecurityStates)reader.ReadInt());  						break;  					}  					case Level1Fields.BestBidPrice:  					case Level1Fields.BestAskPrice:  					case Level1Fields.LastTradePrice:  					case Level1Fields.SettlementPrice:  					case Level1Fields.HighBidPrice:  					case Level1Fields.LowAskPrice:  					{  						var price = DeserializePrice(reader' metaInfo' useLong' nonAdjustPrice);  						l1Msg.Add(field' price);  						break;  					}  					case Level1Fields.AveragePrice:  					{  						if (metaInfo.Version < MarketDataVersions.Version51)  						{  							var price = DeserializePrice(reader' metaInfo' false' false);  							l1Msg.Add(field' price);  						}  						else  							l1Msg.Add(field' DeserializeChange(reader' metaInfo.AveragePrice));    						break;  					}  					case Level1Fields.Volume:  					case Level1Fields.LastTradeVolume:  					case Level1Fields.BestBidVolume:  					case Level1Fields.BestAskVolume:  					{  						l1Msg.Add(field' reader.ReadVolume(metaInfo));  						break;  					}  					case Level1Fields.Change:  					{  						l1Msg.Add(field' DeserializeChange(reader' metaInfo.Change));  						break;  					}  					case Level1Fields.Rho:  					{  						l1Msg.Add(field' DeserializeChange(reader' metaInfo.Rho));  						break;  					}  					case Level1Fields.AccruedCouponIncome:  					{  						l1Msg.Add(field' DeserializeChange(reader' metaInfo.AccruedCouponIncome));  						break;  					}  					case Level1Fields.Yield:  					{  						l1Msg.Add(field' DeserializeChange(reader' metaInfo.Yield));  						break;  					}  					case Level1Fields.VWAP:  					{  						l1Msg.Add(field' DeserializeChange(reader' metaInfo.VWAP));  						break;  					}  					case Level1Fields.LastTradeTime:  					case Level1Fields.BestBidTime:  					case Level1Fields.BestAskTime:  					{  						var prevTime = metaInfo.FirstFieldTime;  						var lastOffset = metaInfo.FirstServerOffset;  						l1Msg.Add(field' reader.ReadTime(ref prevTime' allowNonOrdered' isUtc' metaInfo.GetTimeZone(isUtc' SecurityId' ExchangeInfoProvider)' allowDiffOffsets' isTickPrecision' ref lastOffset));  						metaInfo.FirstFieldTime = prevTime;  						metaInfo.FirstServerOffset = lastOffset;  						break;  					}  					case Level1Fields.BidsCount:  					case Level1Fields.AsksCount:  					{  						l1Msg.Add(field' metaInfo.Version < MarketDataVersions.Version46 ? (int)reader.ReadVolume(metaInfo) : reader.ReadInt());  						break;  					}  					case Level1Fields.TradesCount:  					{  						l1Msg.Add(field' reader.ReadInt());  						break;  					}  					case Level1Fields.LastTradeId:  					{  						l1Msg.Add(field' reader.ReadLong());  						break;  					}  					case Level1Fields.LastTradeUpDown:  					{  						l1Msg.Add(field' reader.Read());  						break;  					}  					case Level1Fields.LastTradeOrigin:  					{  						l1Msg.TryAdd(field' reader.ReadSide());  						break;  					}  					case Level1Fields.PriceEarnings:  					{  						l1Msg.Add(field' DeserializeChange(reader' metaInfo.PriceEarnings));  						break;  					}  					case Level1Fields.ForwardPriceEarnings:  					{  						l1Msg.Add(field' DeserializeChange(reader' metaInfo.ForwardPriceEarnings));  						break;  					}  					case Level1Fields.PriceEarningsGrowth:  					{  						l1Msg.Add(field' DeserializeChange(reader' metaInfo.PriceEarningsGrowth));  						break;  					}  					case Level1Fields.PriceSales:  					{  						l1Msg.Add(field' DeserializeChange(reader' metaInfo.PriceSales));  						break;  					}  					case Level1Fields.PriceBook:  					{  						l1Msg.Add(field' DeserializeChange(reader' metaInfo.PriceBook));  						break;  					}  					case Level1Fields.PriceCash:  					{  						l1Msg.Add(field' DeserializeChange(reader' metaInfo.PriceCash));  						break;  					}  					case Level1Fields.PriceFreeCash:  					{  						l1Msg.Add(field' DeserializeChange(reader' metaInfo.PriceFreeCash));  						break;  					}  					case Level1Fields.Payout:  					{  						l1Msg.Add(field' DeserializeChange(reader' metaInfo.Payout));  						break;  					}  					case Level1Fields.SharesOutstanding:  					{  						l1Msg.Add(field' DeserializeChange(reader' metaInfo.SharesOutstanding));  						break;  					}  					case Level1Fields.SharesFloat:  					{  						l1Msg.Add(field' DeserializeChange(reader' metaInfo.SharesFloat));  						break;  					}  					case Level1Fields.FloatShort:  					{  						l1Msg.Add(field' DeserializeChange(reader' metaInfo.FloatShort));  						break;  					}  					case Level1Fields.ShortRatio:  					{  						l1Msg.Add(field' DeserializeChange(reader' metaInfo.ShortRatio));  						break;  					}  					case Level1Fields.ReturnOnAssets:  					{  						l1Msg.Add(field' DeserializeChange(reader' metaInfo.ReturnOnAssets));  						break;  					}  					case Level1Fields.ReturnOnEquity:  					{  						l1Msg.Add(field' DeserializeChange(reader' metaInfo.ReturnOnEquity));  						break;  					}  					case Level1Fields.ReturnOnInvestment:  					{  						l1Msg.Add(field' DeserializeChange(reader' metaInfo.ReturnOnInvestment));  						break;  					}  					case Level1Fields.CurrentRatio:  					{  						l1Msg.Add(field' DeserializeChange(reader' metaInfo.CurrentRatio));  						break;  					}  					case Level1Fields.QuickRatio:  					{  						l1Msg.Add(field' DeserializeChange(reader' metaInfo.QuickRatio));  						break;  					}  					case Level1Fields.LongTermDebtEquity:  					{  						l1Msg.Add(field' DeserializeChange(reader' metaInfo.LongTermDebtEquity));  						break;  					}  					case Level1Fields.TotalDebtEquity:  					{  						l1Msg.Add(field' DeserializeChange(reader' metaInfo.TotalDebtEquity));  						break;  					}  					case Level1Fields.GrossMargin:  					{  						l1Msg.Add(field' DeserializeChange(reader' metaInfo.GrossMargin));  						break;  					}  					case Level1Fields.OperatingMargin:  					{  						l1Msg.Add(field' DeserializeChange(reader' metaInfo.OperatingMargin));  						break;  					}  					case Level1Fields.ProfitMargin:  					{  						l1Msg.Add(field' DeserializeChange(reader' metaInfo.ProfitMargin));  						break;  					}  					case Level1Fields.Beta:  					{  						l1Msg.Add(field' DeserializeChange(reader' metaInfo.Beta));  						break;  					}  					case Level1Fields.AverageTrueRange:  					{  						l1Msg.Add(field' DeserializeChange(reader' metaInfo.AverageTrueRange));  						break;  					}  					case Level1Fields.HistoricalVolatilityWeek:  					{  						l1Msg.Add(field' DeserializeChange(reader' metaInfo.HistoricalVolatilityWeek));  						break;  					}  					case Level1Fields.HistoricalVolatilityMonth:  					{  						l1Msg.Add(field' DeserializeChange(reader' metaInfo.HistoricalVolatilityMonth));  						break;  					}  					case Level1Fields.IsSystem:  					{  						l1Msg.Add(field' reader.Read());  						break;  					}  					case Level1Fields.Turnover:  					{  						l1Msg.Add(field' DeserializeChange(reader' metaInfo.Turnover));  						break;  					}  					case Level1Fields.IssueSize:  					{  						l1Msg.Add(field' DeserializeChange(reader' metaInfo.IssueSize));  						break;  					}  					case Level1Fields.Duration:  					{  						l1Msg.Add(field' DeserializeChange(reader' metaInfo.Duration));  						break;  					}  					case Level1Fields.BuyBackDate:  					{  						var prevTime = metaInfo.FirstBuyBackDateTime;  						var lastOffset = metaInfo.FirstBuyBackDateOffset;  						l1Msg.Add(field' reader.ReadTime(ref prevTime' allowNonOrdered' isUtc' metaInfo.GetTimeZone(isUtc' SecurityId' ExchangeInfoProvider)' allowDiffOffsets' isTickPrecision' ref lastOffset));  						metaInfo.FirstBuyBackDateTime = prevTime;  						metaInfo.FirstBuyBackDateOffset = lastOffset;  						break;  					}  					case Level1Fields.BuyBackPrice:  					{  						l1Msg.Add(field' DeserializeChange(reader' metaInfo.BuyBackPrice));  						break;  					}  					default:  						throw new InvalidOperationException(LocalizedStrings.Str923Params.Put(field));  				}  			}
Magic Number,StockSharp.Algo.Storages.Binary,BinaryHelper,C:\repos\stocksharp_stocksharp\Algo\Storages\Binary\BinaryHelper.cs,WriteDecimal,The following statement contains a magic number: writer.WriteInt(decBits[2]);
Magic Number,StockSharp.Algo.Storages.Binary,BinaryHelper,C:\repos\stocksharp_stocksharp\Algo\Storages\Binary\BinaryHelper.cs,WriteDecimal,The following statement contains a magic number: writer.WriteInt((decBits[3] >> 16) & 0xff);
Magic Number,StockSharp.Algo.Storages.Binary,BinaryHelper,C:\repos\stocksharp_stocksharp\Algo\Storages\Binary\BinaryHelper.cs,WriteDecimal,The following statement contains a magic number: writer.WriteInt((decBits[3] >> 16) & 0xff);
Magic Number,StockSharp.Algo.Storages.Binary,BinaryHelper,C:\repos\stocksharp_stocksharp\Algo\Storages\Binary\BinaryHelper.cs,ReadDecimal,The following statement contains a magic number: var diff = new decimal(new[] { reader.ReadInt()' reader.ReadInt()' reader.ReadInt()' reader.ReadInt() << 16 });
Magic Number,StockSharp.Algo.Storages.Binary,BinaryHelper,C:\repos\stocksharp_stocksharp\Algo\Storages\Binary\BinaryHelper.cs,WritePrice,The following statement contains a magic number: if ((price % priceStep) != 0)  			{  				if (!nonAdjustPrice)  					throw new ArgumentException(LocalizedStrings.Str1007Params.Put(priceStep' securityId' price)' nameof(info));    				writer.Write(false);    				var priceStepChanged = false;    				if ((price % info.LastPriceStep) != 0)  				{  					var newPriceStep = 1m;    					var found = false;    					for (var i = 0; i < 10; i++)  					{  						if ((price % newPriceStep) == 0)  						{  							found = true;  							break;  						}    						newPriceStep /= 10;  					}    					if (!found)  						throw new ArgumentException(LocalizedStrings.Str1007Params.Put(priceStep' securityId' price)' nameof(info));    					info.LastPriceStep = newPriceStep;    					//if (info.FirstPriceStep == 0)  					//	info.FirstPriceStep = info.LastPriceStep;    					priceStepChanged = true;  				}    				writer.Write(priceStepChanged);    				if (priceStepChanged)  					WriteDecimal(writer' info.LastPriceStep' 0);    				if (info.FirstFractionalPrice == 0)  					info.FirstFractionalPrice = info.LastFractionalPrice = price;    				var stepCount = (long)((price - info.LastFractionalPrice) / info.LastPriceStep);    				if (useLong)  					writer.WriteLong(stepCount);  				else  					writer.WriteInt((int)stepCount);    				info.LastFractionalPrice = price;  				return;  			}
Magic Number,StockSharp.Algo.Storages.Binary,BinaryHelper,C:\repos\stocksharp_stocksharp\Algo\Storages\Binary\BinaryHelper.cs,WritePrice,The following statement contains a magic number: if ((price % priceStep) != 0)  			{  				if (!nonAdjustPrice)  					throw new ArgumentException(LocalizedStrings.Str1007Params.Put(priceStep' securityId' price)' nameof(info));    				writer.Write(false);    				var priceStepChanged = false;    				if ((price % info.LastPriceStep) != 0)  				{  					var newPriceStep = 1m;    					var found = false;    					for (var i = 0; i < 10; i++)  					{  						if ((price % newPriceStep) == 0)  						{  							found = true;  							break;  						}    						newPriceStep /= 10;  					}    					if (!found)  						throw new ArgumentException(LocalizedStrings.Str1007Params.Put(priceStep' securityId' price)' nameof(info));    					info.LastPriceStep = newPriceStep;    					//if (info.FirstPriceStep == 0)  					//	info.FirstPriceStep = info.LastPriceStep;    					priceStepChanged = true;  				}    				writer.Write(priceStepChanged);    				if (priceStepChanged)  					WriteDecimal(writer' info.LastPriceStep' 0);    				if (info.FirstFractionalPrice == 0)  					info.FirstFractionalPrice = info.LastFractionalPrice = price;    				var stepCount = (long)((price - info.LastFractionalPrice) / info.LastPriceStep);    				if (useLong)  					writer.WriteLong(stepCount);  				else  					writer.WriteInt((int)stepCount);    				info.LastFractionalPrice = price;  				return;  			}
Magic Number,StockSharp.Algo.Storages.Binary,BinaryHelper,C:\repos\stocksharp_stocksharp\Algo\Storages\Binary\BinaryHelper.cs,WriteTime,The following statement contains a magic number: if (allowNonOrdered)  			{  				if (timeDiff < TimeSpan.Zero)  				{  					writer.Write(false);  					timeDiff = new TimeSpan(-timeDiff.Ticks);  				}  				else  					writer.Write(true);    				if (timeDiff >= TimeSpan.FromMinutes(1))  				{  					writer.Write(true);    					if (timeDiff <= TimeSpan.FromHours(32))  					{  						writer.Write(true);  						writer.WriteBits(timeDiff.Hours' 5);  					}  					else  					{  						writer.Write(false);  						writer.WriteInt(timeDiff.Hours);    						if (timeDiff.Days > 0)  						{  							if (!bigRange)  								throw new ArgumentOutOfRangeException(nameof(dto)' LocalizedStrings.BigRangeError.Put(prevTime' dto));    							writer.Write(true);  							writer.WriteInt(timeDiff.Days);  						}  						else  							writer.Write(false);  					}    					writer.WriteBits(timeDiff.Minutes' 6);  					writer.WriteBits(timeDiff.Seconds' 6);  				}  				else  				{  					writer.Write(false);    					writer.WriteInt(timeDiff.Seconds);  				}  			}  			else  			{  				if (timeDiff < TimeSpan.Zero)  					throw new ArgumentException(LocalizedStrings.Str1009Params.Put(name' prevTime' time)' nameof(dto));    				if (timeDiff >= TimeSpan.FromMinutes(1))  				{  					writer.Write(true);    					timeDiff = time.TimeOfDay;    					writer.WriteBits(timeDiff.Hours' 5);  					writer.WriteBits(timeDiff.Minutes' 6);  					writer.WriteBits(timeDiff.Seconds' 6);  				}  				else  				{  					writer.Write(false);    					writer.WriteInt(timeDiff.Seconds);  				}  			}
Magic Number,StockSharp.Algo.Storages.Binary,BinaryHelper,C:\repos\stocksharp_stocksharp\Algo\Storages\Binary\BinaryHelper.cs,WriteTime,The following statement contains a magic number: if (allowNonOrdered)  			{  				if (timeDiff < TimeSpan.Zero)  				{  					writer.Write(false);  					timeDiff = new TimeSpan(-timeDiff.Ticks);  				}  				else  					writer.Write(true);    				if (timeDiff >= TimeSpan.FromMinutes(1))  				{  					writer.Write(true);    					if (timeDiff <= TimeSpan.FromHours(32))  					{  						writer.Write(true);  						writer.WriteBits(timeDiff.Hours' 5);  					}  					else  					{  						writer.Write(false);  						writer.WriteInt(timeDiff.Hours);    						if (timeDiff.Days > 0)  						{  							if (!bigRange)  								throw new ArgumentOutOfRangeException(nameof(dto)' LocalizedStrings.BigRangeError.Put(prevTime' dto));    							writer.Write(true);  							writer.WriteInt(timeDiff.Days);  						}  						else  							writer.Write(false);  					}    					writer.WriteBits(timeDiff.Minutes' 6);  					writer.WriteBits(timeDiff.Seconds' 6);  				}  				else  				{  					writer.Write(false);    					writer.WriteInt(timeDiff.Seconds);  				}  			}  			else  			{  				if (timeDiff < TimeSpan.Zero)  					throw new ArgumentException(LocalizedStrings.Str1009Params.Put(name' prevTime' time)' nameof(dto));    				if (timeDiff >= TimeSpan.FromMinutes(1))  				{  					writer.Write(true);    					timeDiff = time.TimeOfDay;    					writer.WriteBits(timeDiff.Hours' 5);  					writer.WriteBits(timeDiff.Minutes' 6);  					writer.WriteBits(timeDiff.Seconds' 6);  				}  				else  				{  					writer.Write(false);    					writer.WriteInt(timeDiff.Seconds);  				}  			}
Magic Number,StockSharp.Algo.Storages.Binary,BinaryHelper,C:\repos\stocksharp_stocksharp\Algo\Storages\Binary\BinaryHelper.cs,WriteTime,The following statement contains a magic number: if (allowNonOrdered)  			{  				if (timeDiff < TimeSpan.Zero)  				{  					writer.Write(false);  					timeDiff = new TimeSpan(-timeDiff.Ticks);  				}  				else  					writer.Write(true);    				if (timeDiff >= TimeSpan.FromMinutes(1))  				{  					writer.Write(true);    					if (timeDiff <= TimeSpan.FromHours(32))  					{  						writer.Write(true);  						writer.WriteBits(timeDiff.Hours' 5);  					}  					else  					{  						writer.Write(false);  						writer.WriteInt(timeDiff.Hours);    						if (timeDiff.Days > 0)  						{  							if (!bigRange)  								throw new ArgumentOutOfRangeException(nameof(dto)' LocalizedStrings.BigRangeError.Put(prevTime' dto));    							writer.Write(true);  							writer.WriteInt(timeDiff.Days);  						}  						else  							writer.Write(false);  					}    					writer.WriteBits(timeDiff.Minutes' 6);  					writer.WriteBits(timeDiff.Seconds' 6);  				}  				else  				{  					writer.Write(false);    					writer.WriteInt(timeDiff.Seconds);  				}  			}  			else  			{  				if (timeDiff < TimeSpan.Zero)  					throw new ArgumentException(LocalizedStrings.Str1009Params.Put(name' prevTime' time)' nameof(dto));    				if (timeDiff >= TimeSpan.FromMinutes(1))  				{  					writer.Write(true);    					timeDiff = time.TimeOfDay;    					writer.WriteBits(timeDiff.Hours' 5);  					writer.WriteBits(timeDiff.Minutes' 6);  					writer.WriteBits(timeDiff.Seconds' 6);  				}  				else  				{  					writer.Write(false);    					writer.WriteInt(timeDiff.Seconds);  				}  			}
Magic Number,StockSharp.Algo.Storages.Binary,BinaryHelper,C:\repos\stocksharp_stocksharp\Algo\Storages\Binary\BinaryHelper.cs,WriteTime,The following statement contains a magic number: if (allowNonOrdered)  			{  				if (timeDiff < TimeSpan.Zero)  				{  					writer.Write(false);  					timeDiff = new TimeSpan(-timeDiff.Ticks);  				}  				else  					writer.Write(true);    				if (timeDiff >= TimeSpan.FromMinutes(1))  				{  					writer.Write(true);    					if (timeDiff <= TimeSpan.FromHours(32))  					{  						writer.Write(true);  						writer.WriteBits(timeDiff.Hours' 5);  					}  					else  					{  						writer.Write(false);  						writer.WriteInt(timeDiff.Hours);    						if (timeDiff.Days > 0)  						{  							if (!bigRange)  								throw new ArgumentOutOfRangeException(nameof(dto)' LocalizedStrings.BigRangeError.Put(prevTime' dto));    							writer.Write(true);  							writer.WriteInt(timeDiff.Days);  						}  						else  							writer.Write(false);  					}    					writer.WriteBits(timeDiff.Minutes' 6);  					writer.WriteBits(timeDiff.Seconds' 6);  				}  				else  				{  					writer.Write(false);    					writer.WriteInt(timeDiff.Seconds);  				}  			}  			else  			{  				if (timeDiff < TimeSpan.Zero)  					throw new ArgumentException(LocalizedStrings.Str1009Params.Put(name' prevTime' time)' nameof(dto));    				if (timeDiff >= TimeSpan.FromMinutes(1))  				{  					writer.Write(true);    					timeDiff = time.TimeOfDay;    					writer.WriteBits(timeDiff.Hours' 5);  					writer.WriteBits(timeDiff.Minutes' 6);  					writer.WriteBits(timeDiff.Seconds' 6);  				}  				else  				{  					writer.Write(false);    					writer.WriteInt(timeDiff.Seconds);  				}  			}
Magic Number,StockSharp.Algo.Storages.Binary,BinaryHelper,C:\repos\stocksharp_stocksharp\Algo\Storages\Binary\BinaryHelper.cs,WriteTime,The following statement contains a magic number: if (allowNonOrdered)  			{  				if (timeDiff < TimeSpan.Zero)  				{  					writer.Write(false);  					timeDiff = new TimeSpan(-timeDiff.Ticks);  				}  				else  					writer.Write(true);    				if (timeDiff >= TimeSpan.FromMinutes(1))  				{  					writer.Write(true);    					if (timeDiff <= TimeSpan.FromHours(32))  					{  						writer.Write(true);  						writer.WriteBits(timeDiff.Hours' 5);  					}  					else  					{  						writer.Write(false);  						writer.WriteInt(timeDiff.Hours);    						if (timeDiff.Days > 0)  						{  							if (!bigRange)  								throw new ArgumentOutOfRangeException(nameof(dto)' LocalizedStrings.BigRangeError.Put(prevTime' dto));    							writer.Write(true);  							writer.WriteInt(timeDiff.Days);  						}  						else  							writer.Write(false);  					}    					writer.WriteBits(timeDiff.Minutes' 6);  					writer.WriteBits(timeDiff.Seconds' 6);  				}  				else  				{  					writer.Write(false);    					writer.WriteInt(timeDiff.Seconds);  				}  			}  			else  			{  				if (timeDiff < TimeSpan.Zero)  					throw new ArgumentException(LocalizedStrings.Str1009Params.Put(name' prevTime' time)' nameof(dto));    				if (timeDiff >= TimeSpan.FromMinutes(1))  				{  					writer.Write(true);    					timeDiff = time.TimeOfDay;    					writer.WriteBits(timeDiff.Hours' 5);  					writer.WriteBits(timeDiff.Minutes' 6);  					writer.WriteBits(timeDiff.Seconds' 6);  				}  				else  				{  					writer.Write(false);    					writer.WriteInt(timeDiff.Seconds);  				}  			}
Magic Number,StockSharp.Algo.Storages.Binary,BinaryHelper,C:\repos\stocksharp_stocksharp\Algo\Storages\Binary\BinaryHelper.cs,WriteTime,The following statement contains a magic number: if (allowNonOrdered)  			{  				if (timeDiff < TimeSpan.Zero)  				{  					writer.Write(false);  					timeDiff = new TimeSpan(-timeDiff.Ticks);  				}  				else  					writer.Write(true);    				if (timeDiff >= TimeSpan.FromMinutes(1))  				{  					writer.Write(true);    					if (timeDiff <= TimeSpan.FromHours(32))  					{  						writer.Write(true);  						writer.WriteBits(timeDiff.Hours' 5);  					}  					else  					{  						writer.Write(false);  						writer.WriteInt(timeDiff.Hours);    						if (timeDiff.Days > 0)  						{  							if (!bigRange)  								throw new ArgumentOutOfRangeException(nameof(dto)' LocalizedStrings.BigRangeError.Put(prevTime' dto));    							writer.Write(true);  							writer.WriteInt(timeDiff.Days);  						}  						else  							writer.Write(false);  					}    					writer.WriteBits(timeDiff.Minutes' 6);  					writer.WriteBits(timeDiff.Seconds' 6);  				}  				else  				{  					writer.Write(false);    					writer.WriteInt(timeDiff.Seconds);  				}  			}  			else  			{  				if (timeDiff < TimeSpan.Zero)  					throw new ArgumentException(LocalizedStrings.Str1009Params.Put(name' prevTime' time)' nameof(dto));    				if (timeDiff >= TimeSpan.FromMinutes(1))  				{  					writer.Write(true);    					timeDiff = time.TimeOfDay;    					writer.WriteBits(timeDiff.Hours' 5);  					writer.WriteBits(timeDiff.Minutes' 6);  					writer.WriteBits(timeDiff.Seconds' 6);  				}  				else  				{  					writer.Write(false);    					writer.WriteInt(timeDiff.Seconds);  				}  			}
Magic Number,StockSharp.Algo.Storages.Binary,BinaryHelper,C:\repos\stocksharp_stocksharp\Algo\Storages\Binary\BinaryHelper.cs,WriteTime,The following statement contains a magic number: if (allowNonOrdered)  			{  				if (timeDiff < TimeSpan.Zero)  				{  					writer.Write(false);  					timeDiff = new TimeSpan(-timeDiff.Ticks);  				}  				else  					writer.Write(true);    				if (timeDiff >= TimeSpan.FromMinutes(1))  				{  					writer.Write(true);    					if (timeDiff <= TimeSpan.FromHours(32))  					{  						writer.Write(true);  						writer.WriteBits(timeDiff.Hours' 5);  					}  					else  					{  						writer.Write(false);  						writer.WriteInt(timeDiff.Hours);    						if (timeDiff.Days > 0)  						{  							if (!bigRange)  								throw new ArgumentOutOfRangeException(nameof(dto)' LocalizedStrings.BigRangeError.Put(prevTime' dto));    							writer.Write(true);  							writer.WriteInt(timeDiff.Days);  						}  						else  							writer.Write(false);  					}    					writer.WriteBits(timeDiff.Minutes' 6);  					writer.WriteBits(timeDiff.Seconds' 6);  				}  				else  				{  					writer.Write(false);    					writer.WriteInt(timeDiff.Seconds);  				}  			}  			else  			{  				if (timeDiff < TimeSpan.Zero)  					throw new ArgumentException(LocalizedStrings.Str1009Params.Put(name' prevTime' time)' nameof(dto));    				if (timeDiff >= TimeSpan.FromMinutes(1))  				{  					writer.Write(true);    					timeDiff = time.TimeOfDay;    					writer.WriteBits(timeDiff.Hours' 5);  					writer.WriteBits(timeDiff.Minutes' 6);  					writer.WriteBits(timeDiff.Seconds' 6);  				}  				else  				{  					writer.Write(false);    					writer.WriteInt(timeDiff.Seconds);  				}  			}
Magic Number,StockSharp.Algo.Storages.Binary,BinaryHelper,C:\repos\stocksharp_stocksharp\Algo\Storages\Binary\BinaryHelper.cs,WriteTime,The following statement contains a magic number: if (isTickPrecision)  			{  				writer.WriteInt((int)(timeDiff.Ticks % 10000));  			}
Magic Number,StockSharp.Algo.Storages.Binary,BinaryHelper,C:\repos\stocksharp_stocksharp\Algo\Storages\Binary\BinaryHelper.cs,ReadTime,The following statement contains a magic number: if (allowNonOrdered)  			{  				time = 0;    				var sign = reader.Read() ? 1 : -1;    				if (reader.Read())  				{  					if (reader.Read())  						time += reader.Read(5) * TimeSpan.TicksPerHour;  					else  					{  						time += reader.ReadInt() * TimeSpan.TicksPerHour;    						if (reader.Read())  							time += reader.ReadInt() * TimeSpan.TicksPerDay;  					}    					time += reader.Read(6) * TimeSpan.TicksPerMinute;  					time += reader.Read(6) * TimeSpan.TicksPerSecond;  				}  				else  				{  					time += reader.ReadInt() * TimeSpan.TicksPerSecond;  				}    				time += reader.ReadInt() * TimeSpan.TicksPerMillisecond;    				if (isTickPrecision)  					time += reader.ReadInt();    				time = prevTime.Ticks + sign * time;  			}  			else  			{  				time = prevTime.Ticks;    				if (reader.Read())  				{  					time -= time % TimeSpan.TicksPerDay;    					time += reader.Read(5) * TimeSpan.TicksPerHour;  					time += reader.Read(6) * TimeSpan.TicksPerMinute;  					time += reader.Read(6) * TimeSpan.TicksPerSecond;  				}  				else  				{  					time += reader.ReadInt() * TimeSpan.TicksPerSecond;  				}    				time += reader.ReadInt() * TimeSpan.TicksPerMillisecond;  			}
Magic Number,StockSharp.Algo.Storages.Binary,BinaryHelper,C:\repos\stocksharp_stocksharp\Algo\Storages\Binary\BinaryHelper.cs,ReadTime,The following statement contains a magic number: if (allowNonOrdered)  			{  				time = 0;    				var sign = reader.Read() ? 1 : -1;    				if (reader.Read())  				{  					if (reader.Read())  						time += reader.Read(5) * TimeSpan.TicksPerHour;  					else  					{  						time += reader.ReadInt() * TimeSpan.TicksPerHour;    						if (reader.Read())  							time += reader.ReadInt() * TimeSpan.TicksPerDay;  					}    					time += reader.Read(6) * TimeSpan.TicksPerMinute;  					time += reader.Read(6) * TimeSpan.TicksPerSecond;  				}  				else  				{  					time += reader.ReadInt() * TimeSpan.TicksPerSecond;  				}    				time += reader.ReadInt() * TimeSpan.TicksPerMillisecond;    				if (isTickPrecision)  					time += reader.ReadInt();    				time = prevTime.Ticks + sign * time;  			}  			else  			{  				time = prevTime.Ticks;    				if (reader.Read())  				{  					time -= time % TimeSpan.TicksPerDay;    					time += reader.Read(5) * TimeSpan.TicksPerHour;  					time += reader.Read(6) * TimeSpan.TicksPerMinute;  					time += reader.Read(6) * TimeSpan.TicksPerSecond;  				}  				else  				{  					time += reader.ReadInt() * TimeSpan.TicksPerSecond;  				}    				time += reader.ReadInt() * TimeSpan.TicksPerMillisecond;  			}
Magic Number,StockSharp.Algo.Storages.Binary,BinaryHelper,C:\repos\stocksharp_stocksharp\Algo\Storages\Binary\BinaryHelper.cs,ReadTime,The following statement contains a magic number: if (allowNonOrdered)  			{  				time = 0;    				var sign = reader.Read() ? 1 : -1;    				if (reader.Read())  				{  					if (reader.Read())  						time += reader.Read(5) * TimeSpan.TicksPerHour;  					else  					{  						time += reader.ReadInt() * TimeSpan.TicksPerHour;    						if (reader.Read())  							time += reader.ReadInt() * TimeSpan.TicksPerDay;  					}    					time += reader.Read(6) * TimeSpan.TicksPerMinute;  					time += reader.Read(6) * TimeSpan.TicksPerSecond;  				}  				else  				{  					time += reader.ReadInt() * TimeSpan.TicksPerSecond;  				}    				time += reader.ReadInt() * TimeSpan.TicksPerMillisecond;    				if (isTickPrecision)  					time += reader.ReadInt();    				time = prevTime.Ticks + sign * time;  			}  			else  			{  				time = prevTime.Ticks;    				if (reader.Read())  				{  					time -= time % TimeSpan.TicksPerDay;    					time += reader.Read(5) * TimeSpan.TicksPerHour;  					time += reader.Read(6) * TimeSpan.TicksPerMinute;  					time += reader.Read(6) * TimeSpan.TicksPerSecond;  				}  				else  				{  					time += reader.ReadInt() * TimeSpan.TicksPerSecond;  				}    				time += reader.ReadInt() * TimeSpan.TicksPerMillisecond;  			}
Magic Number,StockSharp.Algo.Storages.Binary,BinaryHelper,C:\repos\stocksharp_stocksharp\Algo\Storages\Binary\BinaryHelper.cs,ReadTime,The following statement contains a magic number: if (allowNonOrdered)  			{  				time = 0;    				var sign = reader.Read() ? 1 : -1;    				if (reader.Read())  				{  					if (reader.Read())  						time += reader.Read(5) * TimeSpan.TicksPerHour;  					else  					{  						time += reader.ReadInt() * TimeSpan.TicksPerHour;    						if (reader.Read())  							time += reader.ReadInt() * TimeSpan.TicksPerDay;  					}    					time += reader.Read(6) * TimeSpan.TicksPerMinute;  					time += reader.Read(6) * TimeSpan.TicksPerSecond;  				}  				else  				{  					time += reader.ReadInt() * TimeSpan.TicksPerSecond;  				}    				time += reader.ReadInt() * TimeSpan.TicksPerMillisecond;    				if (isTickPrecision)  					time += reader.ReadInt();    				time = prevTime.Ticks + sign * time;  			}  			else  			{  				time = prevTime.Ticks;    				if (reader.Read())  				{  					time -= time % TimeSpan.TicksPerDay;    					time += reader.Read(5) * TimeSpan.TicksPerHour;  					time += reader.Read(6) * TimeSpan.TicksPerMinute;  					time += reader.Read(6) * TimeSpan.TicksPerSecond;  				}  				else  				{  					time += reader.ReadInt() * TimeSpan.TicksPerSecond;  				}    				time += reader.ReadInt() * TimeSpan.TicksPerMillisecond;  			}
Magic Number,StockSharp.Algo.Storages.Binary,BinaryHelper,C:\repos\stocksharp_stocksharp\Algo\Storages\Binary\BinaryHelper.cs,ReadTime,The following statement contains a magic number: if (allowNonOrdered)  			{  				time = 0;    				var sign = reader.Read() ? 1 : -1;    				if (reader.Read())  				{  					if (reader.Read())  						time += reader.Read(5) * TimeSpan.TicksPerHour;  					else  					{  						time += reader.ReadInt() * TimeSpan.TicksPerHour;    						if (reader.Read())  							time += reader.ReadInt() * TimeSpan.TicksPerDay;  					}    					time += reader.Read(6) * TimeSpan.TicksPerMinute;  					time += reader.Read(6) * TimeSpan.TicksPerSecond;  				}  				else  				{  					time += reader.ReadInt() * TimeSpan.TicksPerSecond;  				}    				time += reader.ReadInt() * TimeSpan.TicksPerMillisecond;    				if (isTickPrecision)  					time += reader.ReadInt();    				time = prevTime.Ticks + sign * time;  			}  			else  			{  				time = prevTime.Ticks;    				if (reader.Read())  				{  					time -= time % TimeSpan.TicksPerDay;    					time += reader.Read(5) * TimeSpan.TicksPerHour;  					time += reader.Read(6) * TimeSpan.TicksPerMinute;  					time += reader.Read(6) * TimeSpan.TicksPerSecond;  				}  				else  				{  					time += reader.ReadInt() * TimeSpan.TicksPerSecond;  				}    				time += reader.ReadInt() * TimeSpan.TicksPerMillisecond;  			}
Magic Number,StockSharp.Algo.Storages.Binary,BinaryHelper,C:\repos\stocksharp_stocksharp\Algo\Storages\Binary\BinaryHelper.cs,ReadTime,The following statement contains a magic number: if (allowNonOrdered)  			{  				time = 0;    				var sign = reader.Read() ? 1 : -1;    				if (reader.Read())  				{  					if (reader.Read())  						time += reader.Read(5) * TimeSpan.TicksPerHour;  					else  					{  						time += reader.ReadInt() * TimeSpan.TicksPerHour;    						if (reader.Read())  							time += reader.ReadInt() * TimeSpan.TicksPerDay;  					}    					time += reader.Read(6) * TimeSpan.TicksPerMinute;  					time += reader.Read(6) * TimeSpan.TicksPerSecond;  				}  				else  				{  					time += reader.ReadInt() * TimeSpan.TicksPerSecond;  				}    				time += reader.ReadInt() * TimeSpan.TicksPerMillisecond;    				if (isTickPrecision)  					time += reader.ReadInt();    				time = prevTime.Ticks + sign * time;  			}  			else  			{  				time = prevTime.Ticks;    				if (reader.Read())  				{  					time -= time % TimeSpan.TicksPerDay;    					time += reader.Read(5) * TimeSpan.TicksPerHour;  					time += reader.Read(6) * TimeSpan.TicksPerMinute;  					time += reader.Read(6) * TimeSpan.TicksPerSecond;  				}  				else  				{  					time += reader.ReadInt() * TimeSpan.TicksPerSecond;  				}    				time += reader.ReadInt() * TimeSpan.TicksPerMillisecond;  			}
Magic Number,StockSharp.Algo.Candles,CandleManagerContainer,C:\repos\stocksharp_stocksharp\Algo\Candles\CandleManagerContainer.cs,CandleManagerContainer,The following statement contains a magic number: CandlesKeepTime = TimeSpan.FromDays(2);
Magic Number,StockSharp.Algo.Candles,CandleHelper,C:\repos\stocksharp_stocksharp\Algo\Candles\CandleHelper.cs,ToTrades,The following statement contains a magic number: var vol = MathHelper.Round(candleMsg.TotalVolume / 4' volumeStep' decimals' MidpointRounding.AwayFromZero);
Magic Number,StockSharp.Algo.Candles,CandleHelper,C:\repos\stocksharp_stocksharp\Algo\Candles\CandleHelper.cs,ToTrades,The following statement contains a magic number: if (candleMsg.OpenPrice == candleMsg.ClosePrice &&   				candleMsg.LowPrice == candleMsg.HighPrice &&   				candleMsg.OpenPrice == candleMsg.LowPrice ||  				candleMsg.TotalVolume == 1)  			{  				// все цены в свече равны или объем равен 1 - считаем ее за один тик  				o = CreateTick(candleMsg' Sides.Buy' candleMsg.OpenPrice' candleMsg.TotalVolume' candleMsg.OpenInterest);  			}  			else if (candleMsg.TotalVolume == 2)  			{  				h = CreateTick(candleMsg' Sides.Buy' candleMsg.HighPrice' 1);  				l = CreateTick(candleMsg' Sides.Sell' candleMsg.LowPrice' 1' candleMsg.OpenInterest);  			}  			else if (candleMsg.TotalVolume == 3)  			{  				o = CreateTick(candleMsg' isUptrend ? Sides.Buy : Sides.Sell' candleMsg.OpenPrice' 1);  				h = CreateTick(candleMsg' Sides.Buy' candleMsg.HighPrice' 1);  				l = CreateTick(candleMsg' Sides.Sell' candleMsg.LowPrice' 1' candleMsg.OpenInterest);  			}  			else  			{  				o = CreateTick(candleMsg' isUptrend ? Sides.Buy : Sides.Sell' candleMsg.OpenPrice' vol);  				h = CreateTick(candleMsg' Sides.Buy' candleMsg.HighPrice' vol);  				l = CreateTick(candleMsg' Sides.Sell' candleMsg.LowPrice' vol);  				c = CreateTick(candleMsg' isUptrend ? Sides.Buy : Sides.Sell' candleMsg.ClosePrice' candleMsg.TotalVolume - 3 * vol' candleMsg.OpenInterest);  			}
Magic Number,StockSharp.Algo.Candles,CandleHelper,C:\repos\stocksharp_stocksharp\Algo\Candles\CandleHelper.cs,ToTrades,The following statement contains a magic number: if (candleMsg.OpenPrice == candleMsg.ClosePrice &&   				candleMsg.LowPrice == candleMsg.HighPrice &&   				candleMsg.OpenPrice == candleMsg.LowPrice ||  				candleMsg.TotalVolume == 1)  			{  				// все цены в свече равны или объем равен 1 - считаем ее за один тик  				o = CreateTick(candleMsg' Sides.Buy' candleMsg.OpenPrice' candleMsg.TotalVolume' candleMsg.OpenInterest);  			}  			else if (candleMsg.TotalVolume == 2)  			{  				h = CreateTick(candleMsg' Sides.Buy' candleMsg.HighPrice' 1);  				l = CreateTick(candleMsg' Sides.Sell' candleMsg.LowPrice' 1' candleMsg.OpenInterest);  			}  			else if (candleMsg.TotalVolume == 3)  			{  				o = CreateTick(candleMsg' isUptrend ? Sides.Buy : Sides.Sell' candleMsg.OpenPrice' 1);  				h = CreateTick(candleMsg' Sides.Buy' candleMsg.HighPrice' 1);  				l = CreateTick(candleMsg' Sides.Sell' candleMsg.LowPrice' 1' candleMsg.OpenInterest);  			}  			else  			{  				o = CreateTick(candleMsg' isUptrend ? Sides.Buy : Sides.Sell' candleMsg.OpenPrice' vol);  				h = CreateTick(candleMsg' Sides.Buy' candleMsg.HighPrice' vol);  				l = CreateTick(candleMsg' Sides.Sell' candleMsg.LowPrice' vol);  				c = CreateTick(candleMsg' isUptrend ? Sides.Buy : Sides.Sell' candleMsg.ClosePrice' candleMsg.TotalVolume - 3 * vol' candleMsg.OpenInterest);  			}
Magic Number,StockSharp.Algo.Candles,CandleHelper,C:\repos\stocksharp_stocksharp\Algo\Candles\CandleHelper.cs,ToTrades,The following statement contains a magic number: if (candleMsg.OpenPrice == candleMsg.ClosePrice &&   				candleMsg.LowPrice == candleMsg.HighPrice &&   				candleMsg.OpenPrice == candleMsg.LowPrice ||  				candleMsg.TotalVolume == 1)  			{  				// все цены в свече равны или объем равен 1 - считаем ее за один тик  				o = CreateTick(candleMsg' Sides.Buy' candleMsg.OpenPrice' candleMsg.TotalVolume' candleMsg.OpenInterest);  			}  			else if (candleMsg.TotalVolume == 2)  			{  				h = CreateTick(candleMsg' Sides.Buy' candleMsg.HighPrice' 1);  				l = CreateTick(candleMsg' Sides.Sell' candleMsg.LowPrice' 1' candleMsg.OpenInterest);  			}  			else if (candleMsg.TotalVolume == 3)  			{  				o = CreateTick(candleMsg' isUptrend ? Sides.Buy : Sides.Sell' candleMsg.OpenPrice' 1);  				h = CreateTick(candleMsg' Sides.Buy' candleMsg.HighPrice' 1);  				l = CreateTick(candleMsg' Sides.Sell' candleMsg.LowPrice' 1' candleMsg.OpenInterest);  			}  			else  			{  				o = CreateTick(candleMsg' isUptrend ? Sides.Buy : Sides.Sell' candleMsg.OpenPrice' vol);  				h = CreateTick(candleMsg' Sides.Buy' candleMsg.HighPrice' vol);  				l = CreateTick(candleMsg' Sides.Sell' candleMsg.LowPrice' vol);  				c = CreateTick(candleMsg' isUptrend ? Sides.Buy : Sides.Sell' candleMsg.ClosePrice' candleMsg.TotalVolume - 3 * vol' candleMsg.OpenInterest);  			}
Magic Number,StockSharp.Algo.Derivatives,DerivativesHelper,C:\repos\stocksharp_stocksharp\Algo\Derivatives\DerivativesHelper.cs,DerivativesHelper,The following statement contains a magic number: _futureMonthCodes.Add(2' 'G');
Magic Number,StockSharp.Algo.Derivatives,DerivativesHelper,C:\repos\stocksharp_stocksharp\Algo\Derivatives\DerivativesHelper.cs,DerivativesHelper,The following statement contains a magic number: _futureMonthCodes.Add(3' 'H');
Magic Number,StockSharp.Algo.Derivatives,DerivativesHelper,C:\repos\stocksharp_stocksharp\Algo\Derivatives\DerivativesHelper.cs,DerivativesHelper,The following statement contains a magic number: _futureMonthCodes.Add(4' 'J');
Magic Number,StockSharp.Algo.Derivatives,DerivativesHelper,C:\repos\stocksharp_stocksharp\Algo\Derivatives\DerivativesHelper.cs,DerivativesHelper,The following statement contains a magic number: _futureMonthCodes.Add(5' 'K');
Magic Number,StockSharp.Algo.Derivatives,DerivativesHelper,C:\repos\stocksharp_stocksharp\Algo\Derivatives\DerivativesHelper.cs,DerivativesHelper,The following statement contains a magic number: _futureMonthCodes.Add(6' 'M');
Magic Number,StockSharp.Algo.Derivatives,DerivativesHelper,C:\repos\stocksharp_stocksharp\Algo\Derivatives\DerivativesHelper.cs,DerivativesHelper,The following statement contains a magic number: _futureMonthCodes.Add(7' 'N');
Magic Number,StockSharp.Algo.Derivatives,DerivativesHelper,C:\repos\stocksharp_stocksharp\Algo\Derivatives\DerivativesHelper.cs,DerivativesHelper,The following statement contains a magic number: _futureMonthCodes.Add(8' 'Q');
Magic Number,StockSharp.Algo.Derivatives,DerivativesHelper,C:\repos\stocksharp_stocksharp\Algo\Derivatives\DerivativesHelper.cs,DerivativesHelper,The following statement contains a magic number: _futureMonthCodes.Add(9' 'U');
Magic Number,StockSharp.Algo.Derivatives,DerivativesHelper,C:\repos\stocksharp_stocksharp\Algo\Derivatives\DerivativesHelper.cs,DerivativesHelper,The following statement contains a magic number: _futureMonthCodes.Add(10' 'V');
Magic Number,StockSharp.Algo.Derivatives,DerivativesHelper,C:\repos\stocksharp_stocksharp\Algo\Derivatives\DerivativesHelper.cs,DerivativesHelper,The following statement contains a magic number: _futureMonthCodes.Add(11' 'X');
Magic Number,StockSharp.Algo.Derivatives,DerivativesHelper,C:\repos\stocksharp_stocksharp\Algo\Derivatives\DerivativesHelper.cs,DerivativesHelper,The following statement contains a magic number: _futureMonthCodes.Add(12' 'Z');
Magic Number,StockSharp.Algo.Derivatives,DerivativesHelper,C:\repos\stocksharp_stocksharp\Algo\Derivatives\DerivativesHelper.cs,DerivativesHelper,The following statement contains a magic number: _optionCallMonthCodes.Add(2' 'B');
Magic Number,StockSharp.Algo.Derivatives,DerivativesHelper,C:\repos\stocksharp_stocksharp\Algo\Derivatives\DerivativesHelper.cs,DerivativesHelper,The following statement contains a magic number: _optionCallMonthCodes.Add(3' 'C');
Magic Number,StockSharp.Algo.Derivatives,DerivativesHelper,C:\repos\stocksharp_stocksharp\Algo\Derivatives\DerivativesHelper.cs,DerivativesHelper,The following statement contains a magic number: _optionCallMonthCodes.Add(4' 'D');
Magic Number,StockSharp.Algo.Derivatives,DerivativesHelper,C:\repos\stocksharp_stocksharp\Algo\Derivatives\DerivativesHelper.cs,DerivativesHelper,The following statement contains a magic number: _optionCallMonthCodes.Add(5' 'E');
Magic Number,StockSharp.Algo.Derivatives,DerivativesHelper,C:\repos\stocksharp_stocksharp\Algo\Derivatives\DerivativesHelper.cs,DerivativesHelper,The following statement contains a magic number: _optionCallMonthCodes.Add(6' 'F');
Magic Number,StockSharp.Algo.Derivatives,DerivativesHelper,C:\repos\stocksharp_stocksharp\Algo\Derivatives\DerivativesHelper.cs,DerivativesHelper,The following statement contains a magic number: _optionCallMonthCodes.Add(7' 'G');
Magic Number,StockSharp.Algo.Derivatives,DerivativesHelper,C:\repos\stocksharp_stocksharp\Algo\Derivatives\DerivativesHelper.cs,DerivativesHelper,The following statement contains a magic number: _optionCallMonthCodes.Add(8' 'H');
Magic Number,StockSharp.Algo.Derivatives,DerivativesHelper,C:\repos\stocksharp_stocksharp\Algo\Derivatives\DerivativesHelper.cs,DerivativesHelper,The following statement contains a magic number: _optionCallMonthCodes.Add(9' 'I');
Magic Number,StockSharp.Algo.Derivatives,DerivativesHelper,C:\repos\stocksharp_stocksharp\Algo\Derivatives\DerivativesHelper.cs,DerivativesHelper,The following statement contains a magic number: _optionCallMonthCodes.Add(10' 'J');
Magic Number,StockSharp.Algo.Derivatives,DerivativesHelper,C:\repos\stocksharp_stocksharp\Algo\Derivatives\DerivativesHelper.cs,DerivativesHelper,The following statement contains a magic number: _optionCallMonthCodes.Add(11' 'K');
Magic Number,StockSharp.Algo.Derivatives,DerivativesHelper,C:\repos\stocksharp_stocksharp\Algo\Derivatives\DerivativesHelper.cs,DerivativesHelper,The following statement contains a magic number: _optionCallMonthCodes.Add(12' 'L');
Magic Number,StockSharp.Algo.Derivatives,DerivativesHelper,C:\repos\stocksharp_stocksharp\Algo\Derivatives\DerivativesHelper.cs,DerivativesHelper,The following statement contains a magic number: _optionPutMonthCodes.Add(2' 'N');
Magic Number,StockSharp.Algo.Derivatives,DerivativesHelper,C:\repos\stocksharp_stocksharp\Algo\Derivatives\DerivativesHelper.cs,DerivativesHelper,The following statement contains a magic number: _optionPutMonthCodes.Add(3' 'O');
Magic Number,StockSharp.Algo.Derivatives,DerivativesHelper,C:\repos\stocksharp_stocksharp\Algo\Derivatives\DerivativesHelper.cs,DerivativesHelper,The following statement contains a magic number: _optionPutMonthCodes.Add(4' 'P');
Magic Number,StockSharp.Algo.Derivatives,DerivativesHelper,C:\repos\stocksharp_stocksharp\Algo\Derivatives\DerivativesHelper.cs,DerivativesHelper,The following statement contains a magic number: _optionPutMonthCodes.Add(5' 'Q');
Magic Number,StockSharp.Algo.Derivatives,DerivativesHelper,C:\repos\stocksharp_stocksharp\Algo\Derivatives\DerivativesHelper.cs,DerivativesHelper,The following statement contains a magic number: _optionPutMonthCodes.Add(6' 'R');
Magic Number,StockSharp.Algo.Derivatives,DerivativesHelper,C:\repos\stocksharp_stocksharp\Algo\Derivatives\DerivativesHelper.cs,DerivativesHelper,The following statement contains a magic number: _optionPutMonthCodes.Add(7' 'S');
Magic Number,StockSharp.Algo.Derivatives,DerivativesHelper,C:\repos\stocksharp_stocksharp\Algo\Derivatives\DerivativesHelper.cs,DerivativesHelper,The following statement contains a magic number: _optionPutMonthCodes.Add(8' 'T');
Magic Number,StockSharp.Algo.Derivatives,DerivativesHelper,C:\repos\stocksharp_stocksharp\Algo\Derivatives\DerivativesHelper.cs,DerivativesHelper,The following statement contains a magic number: _optionPutMonthCodes.Add(9' 'U');
Magic Number,StockSharp.Algo.Derivatives,DerivativesHelper,C:\repos\stocksharp_stocksharp\Algo\Derivatives\DerivativesHelper.cs,DerivativesHelper,The following statement contains a magic number: _optionPutMonthCodes.Add(10' 'V');
Magic Number,StockSharp.Algo.Derivatives,DerivativesHelper,C:\repos\stocksharp_stocksharp\Algo\Derivatives\DerivativesHelper.cs,DerivativesHelper,The following statement contains a magic number: _optionPutMonthCodes.Add(11' 'W');
Magic Number,StockSharp.Algo.Derivatives,DerivativesHelper,C:\repos\stocksharp_stocksharp\Algo\Derivatives\DerivativesHelper.cs,DerivativesHelper,The following statement contains a magic number: _optionPutMonthCodes.Add(12' 'X');
Magic Number,StockSharp.Algo.Derivatives,DerivativesHelper,C:\repos\stocksharp_stocksharp\Algo\Derivatives\DerivativesHelper.cs,GetStrikeStep,The following statement contains a magic number: var orderedStrikes = group.OrderBy(s => s.Strike).Take(2).ToArray();
Magic Number,StockSharp.Algo.Derivatives,DerivativesHelper,C:\repos\stocksharp_stocksharp\Algo\Derivatives\DerivativesHelper.cs,GetOptionInfo,The following statement contains a magic number: if (groups.Count == 7)  			{  				return new Security  				{  					UnderlyingSecurityId = groups["code"].Value'  					ExpiryDate = groups["expiryDate"].Value.ToDateTime("ddMMyy").ApplyTimeZone(board.TimeZone)'  					OptionType = groups["optionType"].Value == "C" ? OptionTypes.Call : OptionTypes.Put'  					Strike = decimal.Parse(groups["strike"].Value' CultureInfo.InvariantCulture)'  				};  			}
Magic Number,StockSharp.Algo.Derivatives,DerivativesHelper,C:\repos\stocksharp_stocksharp\Algo\Derivatives\DerivativesHelper.cs,GetFutureInfo,The following statement contains a magic number: if (groups.Count != 4)  				return null;
Magic Number,StockSharp.Algo.Derivatives,DerivativesHelper,C:\repos\stocksharp_stocksharp\Algo\Derivatives\DerivativesHelper.cs,GetFutureInfo,The following statement contains a magic number: return new SecurityMessage  			{  				//Name = groups["code"].Value'  				SecurityId = new SecurityId  				{  					SecurityCode = optionMatch.Groups["code"].Value + _futureMonthCodes[month] + yearStr.Last()'  				}'  				ExpiryDate = new DateTime(2000 + yearStr.To<int>()' month' 1).ApplyTimeZone(board.TimeZone)'  				Name = futureName'  			};
Magic Number,StockSharp.Algo.Derivatives,DerivativesHelper,C:\repos\stocksharp_stocksharp\Algo\Derivatives\DerivativesHelper.cs,GetExpirationTimeLine,The following statement contains a magic number: return GetExpirationTimeLine(expirationTime' currentTime' TimeSpan.FromDays(365));
Magic Number,StockSharp.Algo.Derivatives,DerivativesHelper,C:\repos\stocksharp_stocksharp\Algo\Derivatives\DerivativesHelper.cs,InvertD1,The following statement contains a magic number: return Math.Exp(-d1 * d1 / 2.0) / Math.Sqrt(2 * Math.PI);
Magic Number,StockSharp.Algo.Derivatives,DerivativesHelper,C:\repos\stocksharp_stocksharp\Algo\Derivatives\DerivativesHelper.cs,InvertD1,The following statement contains a magic number: return Math.Exp(-d1 * d1 / 2.0) / Math.Sqrt(2 * Math.PI);
Magic Number,StockSharp.Algo.Derivatives,DerivativesHelper,C:\repos\stocksharp_stocksharp\Algo\Derivatives\DerivativesHelper.cs,Vega,The following statement contains a magic number: return assetPrice * (decimal)(0.01 * InvertD1(d1) * timeToExp.Sqrt());
Magic Number,StockSharp.Algo.Derivatives,DerivativesHelper,C:\repos\stocksharp_stocksharp\Algo\Derivatives\DerivativesHelper.cs,Theta,The following statement contains a magic number: return  				(-(assetPrice * deviation * (decimal)nd1) / (2 * (decimal)timeToExp.Sqrt()) -  				sign * (strike * riskFree * (decimal)(expRate * NormalDistr(sign * D2(d1' deviation' timeToExp))))) / daysInYear;
Magic Number,StockSharp.Algo.Derivatives,DerivativesHelper,C:\repos\stocksharp_stocksharp\Algo\Derivatives\DerivativesHelper.cs,ImpliedVolatility,The following statement contains a magic number: while ((high - low) > min)  			{  				deviation = (high + low) / 2;    				if (getPremium(deviation) > premium)  					high = deviation;  				else  					low = deviation;  			}
Magic Number,StockSharp.Algo.Derivatives,DerivativesHelper,C:\repos\stocksharp_stocksharp\Algo\Derivatives\DerivativesHelper.cs,ImpliedVolatility,The following statement contains a magic number: return ((high + low) / 2) * 100;
Magic Number,StockSharp.Algo.Derivatives,DerivativesHelper,C:\repos\stocksharp_stocksharp\Algo\Derivatives\DerivativesHelper.cs,ImpliedVolatility,The following statement contains a magic number: return ((high + low) / 2) * 100;
Magic Number,StockSharp.Algo.Statistics,BaseStatisticParameter<TValue>,C:\repos\stocksharp_stocksharp\Algo\Statistics\IStatisticParameter.cs,GetReadableName,The following statement contains a magic number: while (index < (name.Length - 1))  			{  				if (char.IsUpper(name[index]))  				{  					name = name.Insert(index' " ");  					index += 2;  				}  				else  					index++;  			}
Magic Number,StockSharp.Algo.Strategies.Analytics,DailyHighestVolumeStrategy,C:\repos\stocksharp_stocksharp\Algo\Strategies\Analytics\DailyHighestVolumeStrategy.cs,DailyHighestVolumeStrategy,The following statement contains a magic number: _timeFrame = this.Param(nameof(TimeFrame)' TimeSpan.FromMinutes(5));
Magic Number,StockSharp.Algo.Strategies.Analytics,DailyHighestVolumeStrategy,C:\repos\stocksharp_stocksharp\Algo\Strategies\Analytics\DailyHighestVolumeStrategy.cs,OnAnalyze,The following statement contains a magic number: switch (ResultType)  			{  				case AnalyticsResultTypes.Grid:  				{  					var grid = Panel.CreateGrid(LocalizedStrings.Str3200);    					grid.AddColumn(nameof(GridRow.Time)' LocalizedStrings.Time).Width = 150;  					var volumeColumn = grid.AddColumn(nameof(GridRow.Volume)' LocalizedStrings.Volume);  					volumeColumn.Width = 100;    					var gridSource = new ObservableCollectionEx<GridRow>();  					grid.ItemsSource = gridSource;  					gridSeries = new ThreadSafeObservableCollection<GridRow>(gridSource);    					grid.SetSort(volumeColumn' ListSortDirection.Descending);  					break;  				}  				case AnalyticsResultTypes.Bubble:  					chart = Panel.CreateBubbleChart(LocalizedStrings.Str3280);  					break;  				case AnalyticsResultTypes.Heatmap:  					chart = Panel.CreateHeatmap(LocalizedStrings.Str3280);  					break;  				case AnalyticsResultTypes.Histogram:  					chart = Panel.CreateHistogramChart(LocalizedStrings.Str3280);  					break;  				default:  					throw new ArgumentOutOfRangeException();  			}
Magic Number,StockSharp.Algo.Strategies.Analytics,DailyHighestVolumeStrategy,C:\repos\stocksharp_stocksharp\Algo\Strategies\Analytics\DailyHighestVolumeStrategy.cs,OnAnalyze,The following statement contains a magic number: switch (ResultType)  			{  				case AnalyticsResultTypes.Grid:  				{  					var grid = Panel.CreateGrid(LocalizedStrings.Str3200);    					grid.AddColumn(nameof(GridRow.Time)' LocalizedStrings.Time).Width = 150;  					var volumeColumn = grid.AddColumn(nameof(GridRow.Volume)' LocalizedStrings.Volume);  					volumeColumn.Width = 100;    					var gridSource = new ObservableCollectionEx<GridRow>();  					grid.ItemsSource = gridSource;  					gridSeries = new ThreadSafeObservableCollection<GridRow>(gridSource);    					grid.SetSort(volumeColumn' ListSortDirection.Descending);  					break;  				}  				case AnalyticsResultTypes.Bubble:  					chart = Panel.CreateBubbleChart(LocalizedStrings.Str3280);  					break;  				case AnalyticsResultTypes.Heatmap:  					chart = Panel.CreateHeatmap(LocalizedStrings.Str3280);  					break;  				case AnalyticsResultTypes.Histogram:  					chart = Panel.CreateHistogramChart(LocalizedStrings.Str3280);  					break;  				default:  					throw new ArgumentOutOfRangeException();  			}
Magic Number,StockSharp.Algo.Strategies.Analytics,DailyHighestVolumeStrategy,C:\repos\stocksharp_stocksharp\Algo\Strategies\Analytics\DailyHighestVolumeStrategy.cs,OnAnalyze,The following statement contains a magic number: if (dates.Length == 0)  			{  				this.AddWarningLog(LocalizedStrings.Str2913);  			}  			else  			{  				var rows = new Dictionary<TimeSpan' GridRow>();    				foreach (var loadDate in dates)  				{  					// check if stopped  					if (ProcessState != ProcessStates.Started)  						break;    					// load candles  					var candles = storage.Load(loadDate);    					// groupping candles by open time  					var groupedCandles = candles.GroupBy(c => c.OpenTime.TimeOfDay.Truncate(TimeSpan.FromHours(1)));    					foreach (var group in groupedCandles.OrderBy(g => g.Key))  					{  						// check if stopped  						if (ProcessState != ProcessStates.Started)  							break;    						var time = group.Key;    						// calc total volume for the specified time frame  						var sumVol = group.Sum(c => c.TotalVolume);    						var row = rows.TryGetValue(time);  						if (row == null)  						{  							// new volume level  							rows.Add(time' row = new GridRow { Time = time' Volume = sumVol });    							// draw on chart  							chart?.Append(DateTime.Today + time' sumVol' sumVol / 1000);    							// draw on table  							gridSeries?.Add(row);  						}  						else  						{  							// update existing volume level  							row.Volume += sumVol;    							// update chart  							chart?.Update(DateTime.Today + time' row.Volume' row.Volume / 1000);  						}  					}  				  					//// scale chart  					//chart?.ZoomExtents();  				}  			}
Magic Number,StockSharp.Algo.Strategies.Analytics,DailyHighestVolumeStrategy,C:\repos\stocksharp_stocksharp\Algo\Strategies\Analytics\DailyHighestVolumeStrategy.cs,OnAnalyze,The following statement contains a magic number: if (dates.Length == 0)  			{  				this.AddWarningLog(LocalizedStrings.Str2913);  			}  			else  			{  				var rows = new Dictionary<TimeSpan' GridRow>();    				foreach (var loadDate in dates)  				{  					// check if stopped  					if (ProcessState != ProcessStates.Started)  						break;    					// load candles  					var candles = storage.Load(loadDate);    					// groupping candles by open time  					var groupedCandles = candles.GroupBy(c => c.OpenTime.TimeOfDay.Truncate(TimeSpan.FromHours(1)));    					foreach (var group in groupedCandles.OrderBy(g => g.Key))  					{  						// check if stopped  						if (ProcessState != ProcessStates.Started)  							break;    						var time = group.Key;    						// calc total volume for the specified time frame  						var sumVol = group.Sum(c => c.TotalVolume);    						var row = rows.TryGetValue(time);  						if (row == null)  						{  							// new volume level  							rows.Add(time' row = new GridRow { Time = time' Volume = sumVol });    							// draw on chart  							chart?.Append(DateTime.Today + time' sumVol' sumVol / 1000);    							// draw on table  							gridSeries?.Add(row);  						}  						else  						{  							// update existing volume level  							row.Volume += sumVol;    							// update chart  							chart?.Update(DateTime.Today + time' row.Volume' row.Volume / 1000);  						}  					}  				  					//// scale chart  					//chart?.ZoomExtents();  				}  			}
Magic Number,StockSharp.Algo.Strategies.Analytics,PriceVolumeDistributionStrategy,C:\repos\stocksharp_stocksharp\Algo\Strategies\Analytics\PriceVolumeDistributionStrategy.cs,PriceVolumeDistributionStrategy,The following statement contains a magic number: _timeFrame = this.Param(nameof(TimeFrame)' TimeSpan.FromMinutes(5));
Magic Number,StockSharp.Algo.Strategies.Analytics,PriceVolumeDistributionStrategy,C:\repos\stocksharp_stocksharp\Algo\Strategies\Analytics\PriceVolumeDistributionStrategy.cs,OnAnalyze,The following statement contains a magic number: switch (ResultType)  			{  				case AnalyticsResultTypes.Grid:  				{  					var grid = Panel.CreateGrid(LocalizedStrings.Str3200);    					grid.AddColumn(nameof(GridRow.Price)' LocalizedStrings.Price).Width = 150;  					var volumeColumn = grid.AddColumn(nameof(GridRow.Volume)' LocalizedStrings.Volume);  					volumeColumn.Width = 100;    					var gridSource = new ObservableCollectionEx<GridRow>();  					grid.ItemsSource = gridSource;  					gridSeries = new ThreadSafeObservableCollection<GridRow>(gridSource);    					grid.SetSort(volumeColumn' ListSortDirection.Descending);  					break;  				}  				case AnalyticsResultTypes.Bubble:  					chart = Panel.CreateBubbleChart(LocalizedStrings.Str3280);  					break;  				case AnalyticsResultTypes.Heatmap:  					chart = Panel.CreateHeatmap(LocalizedStrings.Str3280);  					break;  				case AnalyticsResultTypes.Histogram:  					chart = Panel.CreateHistogramChart(LocalizedStrings.Str3280);  					break;  				default:  					throw new ArgumentOutOfRangeException();  			}
Magic Number,StockSharp.Algo.Strategies.Analytics,PriceVolumeDistributionStrategy,C:\repos\stocksharp_stocksharp\Algo\Strategies\Analytics\PriceVolumeDistributionStrategy.cs,OnAnalyze,The following statement contains a magic number: switch (ResultType)  			{  				case AnalyticsResultTypes.Grid:  				{  					var grid = Panel.CreateGrid(LocalizedStrings.Str3200);    					grid.AddColumn(nameof(GridRow.Price)' LocalizedStrings.Price).Width = 150;  					var volumeColumn = grid.AddColumn(nameof(GridRow.Volume)' LocalizedStrings.Volume);  					volumeColumn.Width = 100;    					var gridSource = new ObservableCollectionEx<GridRow>();  					grid.ItemsSource = gridSource;  					gridSeries = new ThreadSafeObservableCollection<GridRow>(gridSource);    					grid.SetSort(volumeColumn' ListSortDirection.Descending);  					break;  				}  				case AnalyticsResultTypes.Bubble:  					chart = Panel.CreateBubbleChart(LocalizedStrings.Str3280);  					break;  				case AnalyticsResultTypes.Heatmap:  					chart = Panel.CreateHeatmap(LocalizedStrings.Str3280);  					break;  				case AnalyticsResultTypes.Histogram:  					chart = Panel.CreateHistogramChart(LocalizedStrings.Str3280);  					break;  				default:  					throw new ArgumentOutOfRangeException();  			}
Magic Number,StockSharp.Algo.Strategies.Analytics,PriceVolumeDistributionStrategy,C:\repos\stocksharp_stocksharp\Algo\Strategies\Analytics\PriceVolumeDistributionStrategy.cs,OnAnalyze,The following statement contains a magic number: if (dates.Length == 0)  			{  				this.AddWarningLog(LocalizedStrings.Str2913);  			}  			else  			{  				var rows = new Dictionary<decimal' GridRow>();    				foreach (var loadDate in dates)  				{  					// check if stopped  					if (ProcessState != ProcessStates.Started)  						break;    					// load candles  					var candles = storage.Load(loadDate);    					// groupping candles by candle's middle price  					var groupedCandles = candles.GroupBy(c => c.LowPrice + c.GetLength() / 2);    					foreach (var group in groupedCandles.OrderBy(g => g.Key))  					{  						// check if stopped  						if (ProcessState != ProcessStates.Started)  							break;    						var price = group.Key;    						// calc total volume for the specified time frame  						var sumVol = group.Sum(c => c.TotalVolume);    						var row = rows.TryGetValue(price);  						if (row == null)  						{  							// new price level  							rows.Add(price' row = new GridRow { Price = price' Volume = sumVol });    							// draw on chart  							chart?.Append(price' sumVol);    							// draw on table  							gridSeries?.Add(row);  						}  						else  						{  							// update existing price level  							row.Volume += sumVol;    							// update chart  							chart?.Update(price' row.Volume);  						}  					}    					//// scale chart  					//chart?.ZoomExtents();  				}  			}
Magic Number,StockSharp.Algo.Strategies,Strategy,C:\repos\stocksharp_stocksharp\Algo\Strategies\Strategy.cs,InitMaxOrdersKeepTime,The following statement contains a magic number: _maxOrdersKeepTime = TimeSpan.FromTicks((long)(OrdersKeepTime.Ticks * 1.5));
Magic Number,StockSharp.Algo.Strategies.Reporting,ExcelStrategyReport,C:\repos\stocksharp_stocksharp\Algo\Strategies\Reporting\ExcelStrategyReport.cs,ExcelStrategyReport,The following statement contains a magic number: ExcelVersion = 2007;
Magic Number,StockSharp.Algo.Strategies.Reporting,ExcelStrategyReport,C:\repos\stocksharp_stocksharp\Algo\Strategies\Reporting\ExcelStrategyReport.cs,ExcelStrategyReport,The following statement contains a magic number: Decimals = 2;
Magic Number,StockSharp.Algo.Strategies.Reporting,ExcelStrategyReport,C:\repos\stocksharp_stocksharp\Algo\Strategies\Reporting\ExcelStrategyReport.cs,Generate,The following statement contains a magic number: using (var worker = hasTemplate ? new ExcelWorker() : new ExcelWorker(Template))  			{  				foreach (var strategy in Strategies)  				{  					if (Template.IsEmpty())  					{  						worker.RenameSheet(strategy.Name);  					}  					else  					{  						if (worker.ContainsSheet(strategy.Name))  							worker.AddSheet(strategy.Name);  					}    					worker  						.SetCell(0' 0' LocalizedStrings.Str1331)    						.SetCell(0' 1' LocalizedStrings.Security + ":")  						.SetCell(1' 1' strategy.Security != null ? strategy.Security.Id : string.Empty)    						.SetCell(0' 2' LocalizedStrings.Portfolio + ":")  						.SetCell(1' 2' strategy.Portfolio != null ? strategy.Portfolio.Name : string.Empty)    						.SetCell(0' 3' LocalizedStrings.Str1334)  						.SetCell(1' 3' Format(strategy.TotalWorkingTime))    						.SetCell(0' 4' LocalizedStrings.Str1335)  						//.SetCell(1' 4' FormatTime(base.Strategy.TotalCPUTime))    						.SetCell(0' 5' LocalizedStrings.Str862 + ":")  						.SetCell(1' 5' strategy.Position)    						.SetCell(0' 6' LocalizedStrings.PnL + ":")  						.SetCell(1' 6' strategy.PnL)    						.SetCell(0' 7' LocalizedStrings.Str159 + ":")  						.SetCell(1' 7' strategy.Commission)    						.SetCell(0' 8' LocalizedStrings.Str163 + ":")  						.SetCell(1' 8' strategy.Slippage)    						.SetCell(0' 9' LocalizedStrings.Str161 + ":")  						.SetCell(1' 9' Format(strategy.Latency));    					var rowIndex = 11;    					foreach (var parameter in strategy.StatisticManager.Parameters.SyncGet(c => c.ToArray()))  					{  						var value = parameter.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' parameter.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					rowIndex += 2;  					worker.SetCell(0' rowIndex' LocalizedStrings.Str1340);  					rowIndex++;    					foreach (var strategyParam in strategy.Parameters.CachedValues)  					{  						var value = strategyParam.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' strategyParam.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					//rowIndex += 2;  					//worker.SetCell(0' rowIndex' "Комиссия по типам:");  					//rowIndex++;    					//foreach (var group in Strategy.CommissionManager.Rules.SyncGet(c => c.ToArray()).GroupBy(c => c.GetType().GetDisplayName()))  					//{  					//	var commission = group.Sum(r => r.Commission);    					//	if (commission == 0)  					//		continue;    					//	worker  					//		.SetCell(0' rowIndex' group.Key)  					//		.SetCell(1' rowIndex' commission);    					//	rowIndex++;  					//}    					var columnShift = 3;    					worker  						.SetCell(columnShift + 0' 0' LocalizedStrings.Str985)    						.SetCell(columnShift + 0' 1' LocalizedStrings.Str1192).SetStyle(columnShift + 0' typeof(long))  						.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  						.SetCell(columnShift + 2' 1' LocalizedStrings.Time).SetStyle(columnShift + 2' "HH:mm:ss.fff")  						.SetCell(columnShift + 3' 1' LocalizedStrings.Price).SetStyle(columnShift + 3' typeof(decimal))  						.SetCell(columnShift + 4' 1' LocalizedStrings.Str1341).SetStyle(columnShift + 4' typeof(decimal))  						.SetCell(columnShift + 5' 1' LocalizedStrings.Volume).SetStyle(columnShift + 5' typeof(decimal))  						.SetCell(columnShift + 6' 1' LocalizedStrings.Str128)  						.SetCell(columnShift + 7' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 7' typeof(long))  						.SetCell(columnShift + 8' 1' LocalizedStrings.Str163).SetStyle(columnShift + 8' typeof(decimal))  						.SetCell(columnShift + 9' 1' LocalizedStrings.Str135)  						.SetCell(columnShift + 10' 1' LocalizedStrings.Str1342).SetStyle(columnShift + 11' typeof(decimal))  						.SetCell(columnShift + 11' 1' LocalizedStrings.Str1343).SetStyle(columnShift + 12' typeof(decimal))  						.SetCell(columnShift + 12' 1' LocalizedStrings.Str1344).SetStyle(columnShift + 13' typeof(decimal))  						.SetCell(columnShift + 13' 1' LocalizedStrings.Str1345).SetStyle(columnShift + 14' typeof(decimal))  						.SetCell(columnShift + 14' 1' LocalizedStrings.Str862).SetStyle(columnShift + 15' typeof(decimal));    					worker  						.SetConditionalFormatting(columnShift + 10' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 11' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 12' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 13' ComparisonOperator.Less' "0"' null' Colors.Red);    					var totalPnL = 0m;  					var position = 0m;    					var queues = new Dictionary<Security' PnLQueue>();    					rowIndex = 2;  					foreach (var trade in strategy.MyTrades.ToArray())  					{  						var info = strategy.PnLManager.ProcessMessage(trade.ToMessage());    						totalPnL += info.PnL;  						position += trade.GetPosition() ?? 0;    						var queue = queues.SafeAdd(trade.Trade.Security' key => new PnLQueue(key.ToSecurityId()));    						var localInfo = queue.Process(trade.ToMessage());    						worker  							.SetCell(columnShift + 0' rowIndex' trade.Trade.Id)  							.SetCell(columnShift + 1' rowIndex' trade.Order.TransactionId)  							.SetCell(columnShift + 2' rowIndex' Format(trade.Trade.Time))  							.SetCell(columnShift + 3' rowIndex' trade.Trade.Price)  							.SetCell(columnShift + 4' rowIndex' trade.Order.Price)  							.SetCell(columnShift + 5' rowIndex' trade.Trade.Volume)  							.SetCell(columnShift + 6' rowIndex' Format(trade.Order.Direction))  							.SetCell(columnShift + 7' rowIndex' trade.Order.Id)  							.SetCell(columnShift + 8' rowIndex' trade.Slippage)  							.SetCell(columnShift + 9' rowIndex' trade.Order.Comment)  							.SetCell(columnShift + 10' rowIndex' MathHelper.Round(info.PnL' Decimals))  							.SetCell(columnShift + 11' rowIndex' MathHelper.Round(localInfo.PnL' Decimals))  							.SetCell(columnShift + 12' rowIndex' MathHelper.Round(totalPnL' Decimals))  							.SetCell(columnShift + 13' rowIndex' MathHelper.Round(queue.RealizedPnL' Decimals))  							.SetCell(columnShift + 14' rowIndex' position);    						rowIndex++;  					}    					if (IncludeOrders)  					{  						columnShift += 17;    						worker  							.SetCell(columnShift + 0' 0' LocalizedStrings.Orders)    							.SetCell(columnShift + 0' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  							.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  							.SetCell(columnShift + 2' 1' LocalizedStrings.Str128)  							.SetCell(columnShift + 3' 1' LocalizedStrings.Str1346).SetStyle(columnShift + 3' "HH:mm:ss.fff")  							.SetCell(columnShift + 4' 1' LocalizedStrings.Str1347).SetStyle(columnShift + 4' "HH:mm:ss.fff")  							.SetCell(columnShift + 5' 1' LocalizedStrings.Str1348)  							.SetCell(columnShift + 6' 1' LocalizedStrings.Price).SetStyle(columnShift + 6' typeof(decimal))  							.SetCell(columnShift + 7' 1' LocalizedStrings.Str1323).SetStyle(columnShift + 7' typeof(decimal))  							.SetCell(columnShift + 8' 1' LocalizedStrings.Str1324)  							.SetCell(columnShift + 9' 1' LocalizedStrings.State)  							.SetCell(columnShift + 10' 1' LocalizedStrings.Str1325).SetStyle(columnShift + 10' typeof(decimal))  							.SetCell(columnShift + 11' 1' LocalizedStrings.Volume).SetStyle(columnShift + 11' typeof(decimal))  							.SetCell(columnShift + 12' 1' LocalizedStrings.Type)  							.SetCell(columnShift + 13' 1' LocalizedStrings.Str1326)  							.SetCell(columnShift + 14' 1' LocalizedStrings.Str1327)  							.SetCell(columnShift + 15' 1' LocalizedStrings.Str135);    						worker  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str1329)' null' Colors.Green)  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str238)' null' Colors.Red);    						rowIndex = 2;  						foreach (var order in strategy.Orders.ToArray())  						{  							worker  								.SetCell(columnShift + 0' rowIndex' order.Id)  								.SetCell(columnShift + 1' rowIndex' order.TransactionId)  								.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  								.SetCell(columnShift + 3' rowIndex' Format(order.Time))  								.SetCell(columnShift + 4' rowIndex' Format(order.LastChangeTime))  								.SetCell(columnShift + 5' rowIndex' Format(order.LastChangeTime - order.Time))  								.SetCell(columnShift + 6' rowIndex' order.Price)  								.SetCell(columnShift + 7' rowIndex' MathHelper.Round(order.GetAveragePrice(strategy.Connector)' Decimals))  								.SetCell(columnShift + 8' rowIndex' Format(order.State))  								.SetCell(columnShift + 9' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : LocalizedStrings.Str238))  								.SetCell(columnShift + 10' rowIndex' order.Balance)  								.SetCell(columnShift + 11' rowIndex' order.Volume)  								.SetCell(columnShift + 12' rowIndex' Format(order.Type))  								.SetCell(columnShift + 13' rowIndex' Format(order.LatencyRegistration))  								.SetCell(columnShift + 14' rowIndex' Format(order.LatencyCancellation))  								.SetCell(columnShift + 15' rowIndex' order.Comment);    							rowIndex++;  						}    						var stopOrders = strategy.StopOrders.ToArray();    						if (stopOrders.Length > 0)  						{  							rowIndex += 2;    							worker  								.SetCell(columnShift + 0' rowIndex - 1' LocalizedStrings.Str1351)    								.SetCell(columnShift + 0' rowIndex' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  								.SetCell(columnShift + 1' rowIndex' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  								.SetCell(columnShift + 2' rowIndex' LocalizedStrings.Str128)  								.SetCell(columnShift + 3' rowIndex' LocalizedStrings.Time).SetStyle(columnShift + 3' "HH:mm:ss.fff")  								.SetCell(columnShift + 4' rowIndex' LocalizedStrings.Price).SetStyle(columnShift + 4' typeof(decimal))  								.SetCell(columnShift + 5' rowIndex' LocalizedStrings.Str1324)  								.SetCell(columnShift + 6' rowIndex' LocalizedStrings.State)  								.SetCell(columnShift + 7' rowIndex' LocalizedStrings.Volume).SetStyle(columnShift + 7' typeof(decimal))  								.SetCell(columnShift + 8' rowIndex' LocalizedStrings.Str1326)  								.SetCell(columnShift + 9' rowIndex' LocalizedStrings.Str1327)  								//.SetCell(columnShift + 10' rowIndex' LocalizedStrings.Str1352).SetStyle(columnShift + 9' typeof(long))  								;    							var stopParams = stopOrders[0].Condition.Parameters.Keys.ToArray();    							for (var i = 0; i < stopParams.Length; i++)  								worker.SetCell(columnShift + 11 + i' rowIndex' stopParams[i]);    							foreach (var order in stopOrders)  							{  								worker  									.SetCell(columnShift + 0' rowIndex' order.Id)  									.SetCell(columnShift + 1' rowIndex' order.TransactionId)  									.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  									.SetCell(columnShift + 3' rowIndex' Format(order.Time))  									.SetCell(columnShift + 4' rowIndex' order.Price)  									.SetCell(columnShift + 5' rowIndex' Format(order.State))  									.SetCell(columnShift + 6' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : string.Empty))  									.SetCell(columnShift + 7' rowIndex' order.Volume)  									.SetCell(columnShift + 8' rowIndex' Format(order.LatencyRegistration))  									.SetCell(columnShift + 9' rowIndex' Format(order.LatencyCancellation))  									//.SetCell(columnShift + 10' rowIndex' order.DerivedOrder != null ? (object)order.DerivedOrder.Id : string.Empty)  									;    								for (var i = 0; i < stopParams.Length; i++)  									worker.SetCell(columnShift + 11 + i' rowIndex' order.Condition.Parameters[stopParams[i]] ?? string.Empty);    								rowIndex++;  							}  						}  					}  				}    				worker.Save(FileName' true);  			}
Magic Number,StockSharp.Algo.Strategies.Reporting,ExcelStrategyReport,C:\repos\stocksharp_stocksharp\Algo\Strategies\Reporting\ExcelStrategyReport.cs,Generate,The following statement contains a magic number: using (var worker = hasTemplate ? new ExcelWorker() : new ExcelWorker(Template))  			{  				foreach (var strategy in Strategies)  				{  					if (Template.IsEmpty())  					{  						worker.RenameSheet(strategy.Name);  					}  					else  					{  						if (worker.ContainsSheet(strategy.Name))  							worker.AddSheet(strategy.Name);  					}    					worker  						.SetCell(0' 0' LocalizedStrings.Str1331)    						.SetCell(0' 1' LocalizedStrings.Security + ":")  						.SetCell(1' 1' strategy.Security != null ? strategy.Security.Id : string.Empty)    						.SetCell(0' 2' LocalizedStrings.Portfolio + ":")  						.SetCell(1' 2' strategy.Portfolio != null ? strategy.Portfolio.Name : string.Empty)    						.SetCell(0' 3' LocalizedStrings.Str1334)  						.SetCell(1' 3' Format(strategy.TotalWorkingTime))    						.SetCell(0' 4' LocalizedStrings.Str1335)  						//.SetCell(1' 4' FormatTime(base.Strategy.TotalCPUTime))    						.SetCell(0' 5' LocalizedStrings.Str862 + ":")  						.SetCell(1' 5' strategy.Position)    						.SetCell(0' 6' LocalizedStrings.PnL + ":")  						.SetCell(1' 6' strategy.PnL)    						.SetCell(0' 7' LocalizedStrings.Str159 + ":")  						.SetCell(1' 7' strategy.Commission)    						.SetCell(0' 8' LocalizedStrings.Str163 + ":")  						.SetCell(1' 8' strategy.Slippage)    						.SetCell(0' 9' LocalizedStrings.Str161 + ":")  						.SetCell(1' 9' Format(strategy.Latency));    					var rowIndex = 11;    					foreach (var parameter in strategy.StatisticManager.Parameters.SyncGet(c => c.ToArray()))  					{  						var value = parameter.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' parameter.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					rowIndex += 2;  					worker.SetCell(0' rowIndex' LocalizedStrings.Str1340);  					rowIndex++;    					foreach (var strategyParam in strategy.Parameters.CachedValues)  					{  						var value = strategyParam.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' strategyParam.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					//rowIndex += 2;  					//worker.SetCell(0' rowIndex' "Комиссия по типам:");  					//rowIndex++;    					//foreach (var group in Strategy.CommissionManager.Rules.SyncGet(c => c.ToArray()).GroupBy(c => c.GetType().GetDisplayName()))  					//{  					//	var commission = group.Sum(r => r.Commission);    					//	if (commission == 0)  					//		continue;    					//	worker  					//		.SetCell(0' rowIndex' group.Key)  					//		.SetCell(1' rowIndex' commission);    					//	rowIndex++;  					//}    					var columnShift = 3;    					worker  						.SetCell(columnShift + 0' 0' LocalizedStrings.Str985)    						.SetCell(columnShift + 0' 1' LocalizedStrings.Str1192).SetStyle(columnShift + 0' typeof(long))  						.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  						.SetCell(columnShift + 2' 1' LocalizedStrings.Time).SetStyle(columnShift + 2' "HH:mm:ss.fff")  						.SetCell(columnShift + 3' 1' LocalizedStrings.Price).SetStyle(columnShift + 3' typeof(decimal))  						.SetCell(columnShift + 4' 1' LocalizedStrings.Str1341).SetStyle(columnShift + 4' typeof(decimal))  						.SetCell(columnShift + 5' 1' LocalizedStrings.Volume).SetStyle(columnShift + 5' typeof(decimal))  						.SetCell(columnShift + 6' 1' LocalizedStrings.Str128)  						.SetCell(columnShift + 7' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 7' typeof(long))  						.SetCell(columnShift + 8' 1' LocalizedStrings.Str163).SetStyle(columnShift + 8' typeof(decimal))  						.SetCell(columnShift + 9' 1' LocalizedStrings.Str135)  						.SetCell(columnShift + 10' 1' LocalizedStrings.Str1342).SetStyle(columnShift + 11' typeof(decimal))  						.SetCell(columnShift + 11' 1' LocalizedStrings.Str1343).SetStyle(columnShift + 12' typeof(decimal))  						.SetCell(columnShift + 12' 1' LocalizedStrings.Str1344).SetStyle(columnShift + 13' typeof(decimal))  						.SetCell(columnShift + 13' 1' LocalizedStrings.Str1345).SetStyle(columnShift + 14' typeof(decimal))  						.SetCell(columnShift + 14' 1' LocalizedStrings.Str862).SetStyle(columnShift + 15' typeof(decimal));    					worker  						.SetConditionalFormatting(columnShift + 10' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 11' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 12' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 13' ComparisonOperator.Less' "0"' null' Colors.Red);    					var totalPnL = 0m;  					var position = 0m;    					var queues = new Dictionary<Security' PnLQueue>();    					rowIndex = 2;  					foreach (var trade in strategy.MyTrades.ToArray())  					{  						var info = strategy.PnLManager.ProcessMessage(trade.ToMessage());    						totalPnL += info.PnL;  						position += trade.GetPosition() ?? 0;    						var queue = queues.SafeAdd(trade.Trade.Security' key => new PnLQueue(key.ToSecurityId()));    						var localInfo = queue.Process(trade.ToMessage());    						worker  							.SetCell(columnShift + 0' rowIndex' trade.Trade.Id)  							.SetCell(columnShift + 1' rowIndex' trade.Order.TransactionId)  							.SetCell(columnShift + 2' rowIndex' Format(trade.Trade.Time))  							.SetCell(columnShift + 3' rowIndex' trade.Trade.Price)  							.SetCell(columnShift + 4' rowIndex' trade.Order.Price)  							.SetCell(columnShift + 5' rowIndex' trade.Trade.Volume)  							.SetCell(columnShift + 6' rowIndex' Format(trade.Order.Direction))  							.SetCell(columnShift + 7' rowIndex' trade.Order.Id)  							.SetCell(columnShift + 8' rowIndex' trade.Slippage)  							.SetCell(columnShift + 9' rowIndex' trade.Order.Comment)  							.SetCell(columnShift + 10' rowIndex' MathHelper.Round(info.PnL' Decimals))  							.SetCell(columnShift + 11' rowIndex' MathHelper.Round(localInfo.PnL' Decimals))  							.SetCell(columnShift + 12' rowIndex' MathHelper.Round(totalPnL' Decimals))  							.SetCell(columnShift + 13' rowIndex' MathHelper.Round(queue.RealizedPnL' Decimals))  							.SetCell(columnShift + 14' rowIndex' position);    						rowIndex++;  					}    					if (IncludeOrders)  					{  						columnShift += 17;    						worker  							.SetCell(columnShift + 0' 0' LocalizedStrings.Orders)    							.SetCell(columnShift + 0' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  							.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  							.SetCell(columnShift + 2' 1' LocalizedStrings.Str128)  							.SetCell(columnShift + 3' 1' LocalizedStrings.Str1346).SetStyle(columnShift + 3' "HH:mm:ss.fff")  							.SetCell(columnShift + 4' 1' LocalizedStrings.Str1347).SetStyle(columnShift + 4' "HH:mm:ss.fff")  							.SetCell(columnShift + 5' 1' LocalizedStrings.Str1348)  							.SetCell(columnShift + 6' 1' LocalizedStrings.Price).SetStyle(columnShift + 6' typeof(decimal))  							.SetCell(columnShift + 7' 1' LocalizedStrings.Str1323).SetStyle(columnShift + 7' typeof(decimal))  							.SetCell(columnShift + 8' 1' LocalizedStrings.Str1324)  							.SetCell(columnShift + 9' 1' LocalizedStrings.State)  							.SetCell(columnShift + 10' 1' LocalizedStrings.Str1325).SetStyle(columnShift + 10' typeof(decimal))  							.SetCell(columnShift + 11' 1' LocalizedStrings.Volume).SetStyle(columnShift + 11' typeof(decimal))  							.SetCell(columnShift + 12' 1' LocalizedStrings.Type)  							.SetCell(columnShift + 13' 1' LocalizedStrings.Str1326)  							.SetCell(columnShift + 14' 1' LocalizedStrings.Str1327)  							.SetCell(columnShift + 15' 1' LocalizedStrings.Str135);    						worker  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str1329)' null' Colors.Green)  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str238)' null' Colors.Red);    						rowIndex = 2;  						foreach (var order in strategy.Orders.ToArray())  						{  							worker  								.SetCell(columnShift + 0' rowIndex' order.Id)  								.SetCell(columnShift + 1' rowIndex' order.TransactionId)  								.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  								.SetCell(columnShift + 3' rowIndex' Format(order.Time))  								.SetCell(columnShift + 4' rowIndex' Format(order.LastChangeTime))  								.SetCell(columnShift + 5' rowIndex' Format(order.LastChangeTime - order.Time))  								.SetCell(columnShift + 6' rowIndex' order.Price)  								.SetCell(columnShift + 7' rowIndex' MathHelper.Round(order.GetAveragePrice(strategy.Connector)' Decimals))  								.SetCell(columnShift + 8' rowIndex' Format(order.State))  								.SetCell(columnShift + 9' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : LocalizedStrings.Str238))  								.SetCell(columnShift + 10' rowIndex' order.Balance)  								.SetCell(columnShift + 11' rowIndex' order.Volume)  								.SetCell(columnShift + 12' rowIndex' Format(order.Type))  								.SetCell(columnShift + 13' rowIndex' Format(order.LatencyRegistration))  								.SetCell(columnShift + 14' rowIndex' Format(order.LatencyCancellation))  								.SetCell(columnShift + 15' rowIndex' order.Comment);    							rowIndex++;  						}    						var stopOrders = strategy.StopOrders.ToArray();    						if (stopOrders.Length > 0)  						{  							rowIndex += 2;    							worker  								.SetCell(columnShift + 0' rowIndex - 1' LocalizedStrings.Str1351)    								.SetCell(columnShift + 0' rowIndex' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  								.SetCell(columnShift + 1' rowIndex' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  								.SetCell(columnShift + 2' rowIndex' LocalizedStrings.Str128)  								.SetCell(columnShift + 3' rowIndex' LocalizedStrings.Time).SetStyle(columnShift + 3' "HH:mm:ss.fff")  								.SetCell(columnShift + 4' rowIndex' LocalizedStrings.Price).SetStyle(columnShift + 4' typeof(decimal))  								.SetCell(columnShift + 5' rowIndex' LocalizedStrings.Str1324)  								.SetCell(columnShift + 6' rowIndex' LocalizedStrings.State)  								.SetCell(columnShift + 7' rowIndex' LocalizedStrings.Volume).SetStyle(columnShift + 7' typeof(decimal))  								.SetCell(columnShift + 8' rowIndex' LocalizedStrings.Str1326)  								.SetCell(columnShift + 9' rowIndex' LocalizedStrings.Str1327)  								//.SetCell(columnShift + 10' rowIndex' LocalizedStrings.Str1352).SetStyle(columnShift + 9' typeof(long))  								;    							var stopParams = stopOrders[0].Condition.Parameters.Keys.ToArray();    							for (var i = 0; i < stopParams.Length; i++)  								worker.SetCell(columnShift + 11 + i' rowIndex' stopParams[i]);    							foreach (var order in stopOrders)  							{  								worker  									.SetCell(columnShift + 0' rowIndex' order.Id)  									.SetCell(columnShift + 1' rowIndex' order.TransactionId)  									.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  									.SetCell(columnShift + 3' rowIndex' Format(order.Time))  									.SetCell(columnShift + 4' rowIndex' order.Price)  									.SetCell(columnShift + 5' rowIndex' Format(order.State))  									.SetCell(columnShift + 6' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : string.Empty))  									.SetCell(columnShift + 7' rowIndex' order.Volume)  									.SetCell(columnShift + 8' rowIndex' Format(order.LatencyRegistration))  									.SetCell(columnShift + 9' rowIndex' Format(order.LatencyCancellation))  									//.SetCell(columnShift + 10' rowIndex' order.DerivedOrder != null ? (object)order.DerivedOrder.Id : string.Empty)  									;    								for (var i = 0; i < stopParams.Length; i++)  									worker.SetCell(columnShift + 11 + i' rowIndex' order.Condition.Parameters[stopParams[i]] ?? string.Empty);    								rowIndex++;  							}  						}  					}  				}    				worker.Save(FileName' true);  			}
Magic Number,StockSharp.Algo.Strategies.Reporting,ExcelStrategyReport,C:\repos\stocksharp_stocksharp\Algo\Strategies\Reporting\ExcelStrategyReport.cs,Generate,The following statement contains a magic number: using (var worker = hasTemplate ? new ExcelWorker() : new ExcelWorker(Template))  			{  				foreach (var strategy in Strategies)  				{  					if (Template.IsEmpty())  					{  						worker.RenameSheet(strategy.Name);  					}  					else  					{  						if (worker.ContainsSheet(strategy.Name))  							worker.AddSheet(strategy.Name);  					}    					worker  						.SetCell(0' 0' LocalizedStrings.Str1331)    						.SetCell(0' 1' LocalizedStrings.Security + ":")  						.SetCell(1' 1' strategy.Security != null ? strategy.Security.Id : string.Empty)    						.SetCell(0' 2' LocalizedStrings.Portfolio + ":")  						.SetCell(1' 2' strategy.Portfolio != null ? strategy.Portfolio.Name : string.Empty)    						.SetCell(0' 3' LocalizedStrings.Str1334)  						.SetCell(1' 3' Format(strategy.TotalWorkingTime))    						.SetCell(0' 4' LocalizedStrings.Str1335)  						//.SetCell(1' 4' FormatTime(base.Strategy.TotalCPUTime))    						.SetCell(0' 5' LocalizedStrings.Str862 + ":")  						.SetCell(1' 5' strategy.Position)    						.SetCell(0' 6' LocalizedStrings.PnL + ":")  						.SetCell(1' 6' strategy.PnL)    						.SetCell(0' 7' LocalizedStrings.Str159 + ":")  						.SetCell(1' 7' strategy.Commission)    						.SetCell(0' 8' LocalizedStrings.Str163 + ":")  						.SetCell(1' 8' strategy.Slippage)    						.SetCell(0' 9' LocalizedStrings.Str161 + ":")  						.SetCell(1' 9' Format(strategy.Latency));    					var rowIndex = 11;    					foreach (var parameter in strategy.StatisticManager.Parameters.SyncGet(c => c.ToArray()))  					{  						var value = parameter.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' parameter.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					rowIndex += 2;  					worker.SetCell(0' rowIndex' LocalizedStrings.Str1340);  					rowIndex++;    					foreach (var strategyParam in strategy.Parameters.CachedValues)  					{  						var value = strategyParam.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' strategyParam.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					//rowIndex += 2;  					//worker.SetCell(0' rowIndex' "Комиссия по типам:");  					//rowIndex++;    					//foreach (var group in Strategy.CommissionManager.Rules.SyncGet(c => c.ToArray()).GroupBy(c => c.GetType().GetDisplayName()))  					//{  					//	var commission = group.Sum(r => r.Commission);    					//	if (commission == 0)  					//		continue;    					//	worker  					//		.SetCell(0' rowIndex' group.Key)  					//		.SetCell(1' rowIndex' commission);    					//	rowIndex++;  					//}    					var columnShift = 3;    					worker  						.SetCell(columnShift + 0' 0' LocalizedStrings.Str985)    						.SetCell(columnShift + 0' 1' LocalizedStrings.Str1192).SetStyle(columnShift + 0' typeof(long))  						.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  						.SetCell(columnShift + 2' 1' LocalizedStrings.Time).SetStyle(columnShift + 2' "HH:mm:ss.fff")  						.SetCell(columnShift + 3' 1' LocalizedStrings.Price).SetStyle(columnShift + 3' typeof(decimal))  						.SetCell(columnShift + 4' 1' LocalizedStrings.Str1341).SetStyle(columnShift + 4' typeof(decimal))  						.SetCell(columnShift + 5' 1' LocalizedStrings.Volume).SetStyle(columnShift + 5' typeof(decimal))  						.SetCell(columnShift + 6' 1' LocalizedStrings.Str128)  						.SetCell(columnShift + 7' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 7' typeof(long))  						.SetCell(columnShift + 8' 1' LocalizedStrings.Str163).SetStyle(columnShift + 8' typeof(decimal))  						.SetCell(columnShift + 9' 1' LocalizedStrings.Str135)  						.SetCell(columnShift + 10' 1' LocalizedStrings.Str1342).SetStyle(columnShift + 11' typeof(decimal))  						.SetCell(columnShift + 11' 1' LocalizedStrings.Str1343).SetStyle(columnShift + 12' typeof(decimal))  						.SetCell(columnShift + 12' 1' LocalizedStrings.Str1344).SetStyle(columnShift + 13' typeof(decimal))  						.SetCell(columnShift + 13' 1' LocalizedStrings.Str1345).SetStyle(columnShift + 14' typeof(decimal))  						.SetCell(columnShift + 14' 1' LocalizedStrings.Str862).SetStyle(columnShift + 15' typeof(decimal));    					worker  						.SetConditionalFormatting(columnShift + 10' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 11' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 12' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 13' ComparisonOperator.Less' "0"' null' Colors.Red);    					var totalPnL = 0m;  					var position = 0m;    					var queues = new Dictionary<Security' PnLQueue>();    					rowIndex = 2;  					foreach (var trade in strategy.MyTrades.ToArray())  					{  						var info = strategy.PnLManager.ProcessMessage(trade.ToMessage());    						totalPnL += info.PnL;  						position += trade.GetPosition() ?? 0;    						var queue = queues.SafeAdd(trade.Trade.Security' key => new PnLQueue(key.ToSecurityId()));    						var localInfo = queue.Process(trade.ToMessage());    						worker  							.SetCell(columnShift + 0' rowIndex' trade.Trade.Id)  							.SetCell(columnShift + 1' rowIndex' trade.Order.TransactionId)  							.SetCell(columnShift + 2' rowIndex' Format(trade.Trade.Time))  							.SetCell(columnShift + 3' rowIndex' trade.Trade.Price)  							.SetCell(columnShift + 4' rowIndex' trade.Order.Price)  							.SetCell(columnShift + 5' rowIndex' trade.Trade.Volume)  							.SetCell(columnShift + 6' rowIndex' Format(trade.Order.Direction))  							.SetCell(columnShift + 7' rowIndex' trade.Order.Id)  							.SetCell(columnShift + 8' rowIndex' trade.Slippage)  							.SetCell(columnShift + 9' rowIndex' trade.Order.Comment)  							.SetCell(columnShift + 10' rowIndex' MathHelper.Round(info.PnL' Decimals))  							.SetCell(columnShift + 11' rowIndex' MathHelper.Round(localInfo.PnL' Decimals))  							.SetCell(columnShift + 12' rowIndex' MathHelper.Round(totalPnL' Decimals))  							.SetCell(columnShift + 13' rowIndex' MathHelper.Round(queue.RealizedPnL' Decimals))  							.SetCell(columnShift + 14' rowIndex' position);    						rowIndex++;  					}    					if (IncludeOrders)  					{  						columnShift += 17;    						worker  							.SetCell(columnShift + 0' 0' LocalizedStrings.Orders)    							.SetCell(columnShift + 0' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  							.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  							.SetCell(columnShift + 2' 1' LocalizedStrings.Str128)  							.SetCell(columnShift + 3' 1' LocalizedStrings.Str1346).SetStyle(columnShift + 3' "HH:mm:ss.fff")  							.SetCell(columnShift + 4' 1' LocalizedStrings.Str1347).SetStyle(columnShift + 4' "HH:mm:ss.fff")  							.SetCell(columnShift + 5' 1' LocalizedStrings.Str1348)  							.SetCell(columnShift + 6' 1' LocalizedStrings.Price).SetStyle(columnShift + 6' typeof(decimal))  							.SetCell(columnShift + 7' 1' LocalizedStrings.Str1323).SetStyle(columnShift + 7' typeof(decimal))  							.SetCell(columnShift + 8' 1' LocalizedStrings.Str1324)  							.SetCell(columnShift + 9' 1' LocalizedStrings.State)  							.SetCell(columnShift + 10' 1' LocalizedStrings.Str1325).SetStyle(columnShift + 10' typeof(decimal))  							.SetCell(columnShift + 11' 1' LocalizedStrings.Volume).SetStyle(columnShift + 11' typeof(decimal))  							.SetCell(columnShift + 12' 1' LocalizedStrings.Type)  							.SetCell(columnShift + 13' 1' LocalizedStrings.Str1326)  							.SetCell(columnShift + 14' 1' LocalizedStrings.Str1327)  							.SetCell(columnShift + 15' 1' LocalizedStrings.Str135);    						worker  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str1329)' null' Colors.Green)  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str238)' null' Colors.Red);    						rowIndex = 2;  						foreach (var order in strategy.Orders.ToArray())  						{  							worker  								.SetCell(columnShift + 0' rowIndex' order.Id)  								.SetCell(columnShift + 1' rowIndex' order.TransactionId)  								.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  								.SetCell(columnShift + 3' rowIndex' Format(order.Time))  								.SetCell(columnShift + 4' rowIndex' Format(order.LastChangeTime))  								.SetCell(columnShift + 5' rowIndex' Format(order.LastChangeTime - order.Time))  								.SetCell(columnShift + 6' rowIndex' order.Price)  								.SetCell(columnShift + 7' rowIndex' MathHelper.Round(order.GetAveragePrice(strategy.Connector)' Decimals))  								.SetCell(columnShift + 8' rowIndex' Format(order.State))  								.SetCell(columnShift + 9' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : LocalizedStrings.Str238))  								.SetCell(columnShift + 10' rowIndex' order.Balance)  								.SetCell(columnShift + 11' rowIndex' order.Volume)  								.SetCell(columnShift + 12' rowIndex' Format(order.Type))  								.SetCell(columnShift + 13' rowIndex' Format(order.LatencyRegistration))  								.SetCell(columnShift + 14' rowIndex' Format(order.LatencyCancellation))  								.SetCell(columnShift + 15' rowIndex' order.Comment);    							rowIndex++;  						}    						var stopOrders = strategy.StopOrders.ToArray();    						if (stopOrders.Length > 0)  						{  							rowIndex += 2;    							worker  								.SetCell(columnShift + 0' rowIndex - 1' LocalizedStrings.Str1351)    								.SetCell(columnShift + 0' rowIndex' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  								.SetCell(columnShift + 1' rowIndex' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  								.SetCell(columnShift + 2' rowIndex' LocalizedStrings.Str128)  								.SetCell(columnShift + 3' rowIndex' LocalizedStrings.Time).SetStyle(columnShift + 3' "HH:mm:ss.fff")  								.SetCell(columnShift + 4' rowIndex' LocalizedStrings.Price).SetStyle(columnShift + 4' typeof(decimal))  								.SetCell(columnShift + 5' rowIndex' LocalizedStrings.Str1324)  								.SetCell(columnShift + 6' rowIndex' LocalizedStrings.State)  								.SetCell(columnShift + 7' rowIndex' LocalizedStrings.Volume).SetStyle(columnShift + 7' typeof(decimal))  								.SetCell(columnShift + 8' rowIndex' LocalizedStrings.Str1326)  								.SetCell(columnShift + 9' rowIndex' LocalizedStrings.Str1327)  								//.SetCell(columnShift + 10' rowIndex' LocalizedStrings.Str1352).SetStyle(columnShift + 9' typeof(long))  								;    							var stopParams = stopOrders[0].Condition.Parameters.Keys.ToArray();    							for (var i = 0; i < stopParams.Length; i++)  								worker.SetCell(columnShift + 11 + i' rowIndex' stopParams[i]);    							foreach (var order in stopOrders)  							{  								worker  									.SetCell(columnShift + 0' rowIndex' order.Id)  									.SetCell(columnShift + 1' rowIndex' order.TransactionId)  									.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  									.SetCell(columnShift + 3' rowIndex' Format(order.Time))  									.SetCell(columnShift + 4' rowIndex' order.Price)  									.SetCell(columnShift + 5' rowIndex' Format(order.State))  									.SetCell(columnShift + 6' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : string.Empty))  									.SetCell(columnShift + 7' rowIndex' order.Volume)  									.SetCell(columnShift + 8' rowIndex' Format(order.LatencyRegistration))  									.SetCell(columnShift + 9' rowIndex' Format(order.LatencyCancellation))  									//.SetCell(columnShift + 10' rowIndex' order.DerivedOrder != null ? (object)order.DerivedOrder.Id : string.Empty)  									;    								for (var i = 0; i < stopParams.Length; i++)  									worker.SetCell(columnShift + 11 + i' rowIndex' order.Condition.Parameters[stopParams[i]] ?? string.Empty);    								rowIndex++;  							}  						}  					}  				}    				worker.Save(FileName' true);  			}
Magic Number,StockSharp.Algo.Strategies.Reporting,ExcelStrategyReport,C:\repos\stocksharp_stocksharp\Algo\Strategies\Reporting\ExcelStrategyReport.cs,Generate,The following statement contains a magic number: using (var worker = hasTemplate ? new ExcelWorker() : new ExcelWorker(Template))  			{  				foreach (var strategy in Strategies)  				{  					if (Template.IsEmpty())  					{  						worker.RenameSheet(strategy.Name);  					}  					else  					{  						if (worker.ContainsSheet(strategy.Name))  							worker.AddSheet(strategy.Name);  					}    					worker  						.SetCell(0' 0' LocalizedStrings.Str1331)    						.SetCell(0' 1' LocalizedStrings.Security + ":")  						.SetCell(1' 1' strategy.Security != null ? strategy.Security.Id : string.Empty)    						.SetCell(0' 2' LocalizedStrings.Portfolio + ":")  						.SetCell(1' 2' strategy.Portfolio != null ? strategy.Portfolio.Name : string.Empty)    						.SetCell(0' 3' LocalizedStrings.Str1334)  						.SetCell(1' 3' Format(strategy.TotalWorkingTime))    						.SetCell(0' 4' LocalizedStrings.Str1335)  						//.SetCell(1' 4' FormatTime(base.Strategy.TotalCPUTime))    						.SetCell(0' 5' LocalizedStrings.Str862 + ":")  						.SetCell(1' 5' strategy.Position)    						.SetCell(0' 6' LocalizedStrings.PnL + ":")  						.SetCell(1' 6' strategy.PnL)    						.SetCell(0' 7' LocalizedStrings.Str159 + ":")  						.SetCell(1' 7' strategy.Commission)    						.SetCell(0' 8' LocalizedStrings.Str163 + ":")  						.SetCell(1' 8' strategy.Slippage)    						.SetCell(0' 9' LocalizedStrings.Str161 + ":")  						.SetCell(1' 9' Format(strategy.Latency));    					var rowIndex = 11;    					foreach (var parameter in strategy.StatisticManager.Parameters.SyncGet(c => c.ToArray()))  					{  						var value = parameter.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' parameter.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					rowIndex += 2;  					worker.SetCell(0' rowIndex' LocalizedStrings.Str1340);  					rowIndex++;    					foreach (var strategyParam in strategy.Parameters.CachedValues)  					{  						var value = strategyParam.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' strategyParam.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					//rowIndex += 2;  					//worker.SetCell(0' rowIndex' "Комиссия по типам:");  					//rowIndex++;    					//foreach (var group in Strategy.CommissionManager.Rules.SyncGet(c => c.ToArray()).GroupBy(c => c.GetType().GetDisplayName()))  					//{  					//	var commission = group.Sum(r => r.Commission);    					//	if (commission == 0)  					//		continue;    					//	worker  					//		.SetCell(0' rowIndex' group.Key)  					//		.SetCell(1' rowIndex' commission);    					//	rowIndex++;  					//}    					var columnShift = 3;    					worker  						.SetCell(columnShift + 0' 0' LocalizedStrings.Str985)    						.SetCell(columnShift + 0' 1' LocalizedStrings.Str1192).SetStyle(columnShift + 0' typeof(long))  						.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  						.SetCell(columnShift + 2' 1' LocalizedStrings.Time).SetStyle(columnShift + 2' "HH:mm:ss.fff")  						.SetCell(columnShift + 3' 1' LocalizedStrings.Price).SetStyle(columnShift + 3' typeof(decimal))  						.SetCell(columnShift + 4' 1' LocalizedStrings.Str1341).SetStyle(columnShift + 4' typeof(decimal))  						.SetCell(columnShift + 5' 1' LocalizedStrings.Volume).SetStyle(columnShift + 5' typeof(decimal))  						.SetCell(columnShift + 6' 1' LocalizedStrings.Str128)  						.SetCell(columnShift + 7' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 7' typeof(long))  						.SetCell(columnShift + 8' 1' LocalizedStrings.Str163).SetStyle(columnShift + 8' typeof(decimal))  						.SetCell(columnShift + 9' 1' LocalizedStrings.Str135)  						.SetCell(columnShift + 10' 1' LocalizedStrings.Str1342).SetStyle(columnShift + 11' typeof(decimal))  						.SetCell(columnShift + 11' 1' LocalizedStrings.Str1343).SetStyle(columnShift + 12' typeof(decimal))  						.SetCell(columnShift + 12' 1' LocalizedStrings.Str1344).SetStyle(columnShift + 13' typeof(decimal))  						.SetCell(columnShift + 13' 1' LocalizedStrings.Str1345).SetStyle(columnShift + 14' typeof(decimal))  						.SetCell(columnShift + 14' 1' LocalizedStrings.Str862).SetStyle(columnShift + 15' typeof(decimal));    					worker  						.SetConditionalFormatting(columnShift + 10' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 11' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 12' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 13' ComparisonOperator.Less' "0"' null' Colors.Red);    					var totalPnL = 0m;  					var position = 0m;    					var queues = new Dictionary<Security' PnLQueue>();    					rowIndex = 2;  					foreach (var trade in strategy.MyTrades.ToArray())  					{  						var info = strategy.PnLManager.ProcessMessage(trade.ToMessage());    						totalPnL += info.PnL;  						position += trade.GetPosition() ?? 0;    						var queue = queues.SafeAdd(trade.Trade.Security' key => new PnLQueue(key.ToSecurityId()));    						var localInfo = queue.Process(trade.ToMessage());    						worker  							.SetCell(columnShift + 0' rowIndex' trade.Trade.Id)  							.SetCell(columnShift + 1' rowIndex' trade.Order.TransactionId)  							.SetCell(columnShift + 2' rowIndex' Format(trade.Trade.Time))  							.SetCell(columnShift + 3' rowIndex' trade.Trade.Price)  							.SetCell(columnShift + 4' rowIndex' trade.Order.Price)  							.SetCell(columnShift + 5' rowIndex' trade.Trade.Volume)  							.SetCell(columnShift + 6' rowIndex' Format(trade.Order.Direction))  							.SetCell(columnShift + 7' rowIndex' trade.Order.Id)  							.SetCell(columnShift + 8' rowIndex' trade.Slippage)  							.SetCell(columnShift + 9' rowIndex' trade.Order.Comment)  							.SetCell(columnShift + 10' rowIndex' MathHelper.Round(info.PnL' Decimals))  							.SetCell(columnShift + 11' rowIndex' MathHelper.Round(localInfo.PnL' Decimals))  							.SetCell(columnShift + 12' rowIndex' MathHelper.Round(totalPnL' Decimals))  							.SetCell(columnShift + 13' rowIndex' MathHelper.Round(queue.RealizedPnL' Decimals))  							.SetCell(columnShift + 14' rowIndex' position);    						rowIndex++;  					}    					if (IncludeOrders)  					{  						columnShift += 17;    						worker  							.SetCell(columnShift + 0' 0' LocalizedStrings.Orders)    							.SetCell(columnShift + 0' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  							.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  							.SetCell(columnShift + 2' 1' LocalizedStrings.Str128)  							.SetCell(columnShift + 3' 1' LocalizedStrings.Str1346).SetStyle(columnShift + 3' "HH:mm:ss.fff")  							.SetCell(columnShift + 4' 1' LocalizedStrings.Str1347).SetStyle(columnShift + 4' "HH:mm:ss.fff")  							.SetCell(columnShift + 5' 1' LocalizedStrings.Str1348)  							.SetCell(columnShift + 6' 1' LocalizedStrings.Price).SetStyle(columnShift + 6' typeof(decimal))  							.SetCell(columnShift + 7' 1' LocalizedStrings.Str1323).SetStyle(columnShift + 7' typeof(decimal))  							.SetCell(columnShift + 8' 1' LocalizedStrings.Str1324)  							.SetCell(columnShift + 9' 1' LocalizedStrings.State)  							.SetCell(columnShift + 10' 1' LocalizedStrings.Str1325).SetStyle(columnShift + 10' typeof(decimal))  							.SetCell(columnShift + 11' 1' LocalizedStrings.Volume).SetStyle(columnShift + 11' typeof(decimal))  							.SetCell(columnShift + 12' 1' LocalizedStrings.Type)  							.SetCell(columnShift + 13' 1' LocalizedStrings.Str1326)  							.SetCell(columnShift + 14' 1' LocalizedStrings.Str1327)  							.SetCell(columnShift + 15' 1' LocalizedStrings.Str135);    						worker  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str1329)' null' Colors.Green)  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str238)' null' Colors.Red);    						rowIndex = 2;  						foreach (var order in strategy.Orders.ToArray())  						{  							worker  								.SetCell(columnShift + 0' rowIndex' order.Id)  								.SetCell(columnShift + 1' rowIndex' order.TransactionId)  								.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  								.SetCell(columnShift + 3' rowIndex' Format(order.Time))  								.SetCell(columnShift + 4' rowIndex' Format(order.LastChangeTime))  								.SetCell(columnShift + 5' rowIndex' Format(order.LastChangeTime - order.Time))  								.SetCell(columnShift + 6' rowIndex' order.Price)  								.SetCell(columnShift + 7' rowIndex' MathHelper.Round(order.GetAveragePrice(strategy.Connector)' Decimals))  								.SetCell(columnShift + 8' rowIndex' Format(order.State))  								.SetCell(columnShift + 9' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : LocalizedStrings.Str238))  								.SetCell(columnShift + 10' rowIndex' order.Balance)  								.SetCell(columnShift + 11' rowIndex' order.Volume)  								.SetCell(columnShift + 12' rowIndex' Format(order.Type))  								.SetCell(columnShift + 13' rowIndex' Format(order.LatencyRegistration))  								.SetCell(columnShift + 14' rowIndex' Format(order.LatencyCancellation))  								.SetCell(columnShift + 15' rowIndex' order.Comment);    							rowIndex++;  						}    						var stopOrders = strategy.StopOrders.ToArray();    						if (stopOrders.Length > 0)  						{  							rowIndex += 2;    							worker  								.SetCell(columnShift + 0' rowIndex - 1' LocalizedStrings.Str1351)    								.SetCell(columnShift + 0' rowIndex' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  								.SetCell(columnShift + 1' rowIndex' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  								.SetCell(columnShift + 2' rowIndex' LocalizedStrings.Str128)  								.SetCell(columnShift + 3' rowIndex' LocalizedStrings.Time).SetStyle(columnShift + 3' "HH:mm:ss.fff")  								.SetCell(columnShift + 4' rowIndex' LocalizedStrings.Price).SetStyle(columnShift + 4' typeof(decimal))  								.SetCell(columnShift + 5' rowIndex' LocalizedStrings.Str1324)  								.SetCell(columnShift + 6' rowIndex' LocalizedStrings.State)  								.SetCell(columnShift + 7' rowIndex' LocalizedStrings.Volume).SetStyle(columnShift + 7' typeof(decimal))  								.SetCell(columnShift + 8' rowIndex' LocalizedStrings.Str1326)  								.SetCell(columnShift + 9' rowIndex' LocalizedStrings.Str1327)  								//.SetCell(columnShift + 10' rowIndex' LocalizedStrings.Str1352).SetStyle(columnShift + 9' typeof(long))  								;    							var stopParams = stopOrders[0].Condition.Parameters.Keys.ToArray();    							for (var i = 0; i < stopParams.Length; i++)  								worker.SetCell(columnShift + 11 + i' rowIndex' stopParams[i]);    							foreach (var order in stopOrders)  							{  								worker  									.SetCell(columnShift + 0' rowIndex' order.Id)  									.SetCell(columnShift + 1' rowIndex' order.TransactionId)  									.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  									.SetCell(columnShift + 3' rowIndex' Format(order.Time))  									.SetCell(columnShift + 4' rowIndex' order.Price)  									.SetCell(columnShift + 5' rowIndex' Format(order.State))  									.SetCell(columnShift + 6' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : string.Empty))  									.SetCell(columnShift + 7' rowIndex' order.Volume)  									.SetCell(columnShift + 8' rowIndex' Format(order.LatencyRegistration))  									.SetCell(columnShift + 9' rowIndex' Format(order.LatencyCancellation))  									//.SetCell(columnShift + 10' rowIndex' order.DerivedOrder != null ? (object)order.DerivedOrder.Id : string.Empty)  									;    								for (var i = 0; i < stopParams.Length; i++)  									worker.SetCell(columnShift + 11 + i' rowIndex' order.Condition.Parameters[stopParams[i]] ?? string.Empty);    								rowIndex++;  							}  						}  					}  				}    				worker.Save(FileName' true);  			}
Magic Number,StockSharp.Algo.Strategies.Reporting,ExcelStrategyReport,C:\repos\stocksharp_stocksharp\Algo\Strategies\Reporting\ExcelStrategyReport.cs,Generate,The following statement contains a magic number: using (var worker = hasTemplate ? new ExcelWorker() : new ExcelWorker(Template))  			{  				foreach (var strategy in Strategies)  				{  					if (Template.IsEmpty())  					{  						worker.RenameSheet(strategy.Name);  					}  					else  					{  						if (worker.ContainsSheet(strategy.Name))  							worker.AddSheet(strategy.Name);  					}    					worker  						.SetCell(0' 0' LocalizedStrings.Str1331)    						.SetCell(0' 1' LocalizedStrings.Security + ":")  						.SetCell(1' 1' strategy.Security != null ? strategy.Security.Id : string.Empty)    						.SetCell(0' 2' LocalizedStrings.Portfolio + ":")  						.SetCell(1' 2' strategy.Portfolio != null ? strategy.Portfolio.Name : string.Empty)    						.SetCell(0' 3' LocalizedStrings.Str1334)  						.SetCell(1' 3' Format(strategy.TotalWorkingTime))    						.SetCell(0' 4' LocalizedStrings.Str1335)  						//.SetCell(1' 4' FormatTime(base.Strategy.TotalCPUTime))    						.SetCell(0' 5' LocalizedStrings.Str862 + ":")  						.SetCell(1' 5' strategy.Position)    						.SetCell(0' 6' LocalizedStrings.PnL + ":")  						.SetCell(1' 6' strategy.PnL)    						.SetCell(0' 7' LocalizedStrings.Str159 + ":")  						.SetCell(1' 7' strategy.Commission)    						.SetCell(0' 8' LocalizedStrings.Str163 + ":")  						.SetCell(1' 8' strategy.Slippage)    						.SetCell(0' 9' LocalizedStrings.Str161 + ":")  						.SetCell(1' 9' Format(strategy.Latency));    					var rowIndex = 11;    					foreach (var parameter in strategy.StatisticManager.Parameters.SyncGet(c => c.ToArray()))  					{  						var value = parameter.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' parameter.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					rowIndex += 2;  					worker.SetCell(0' rowIndex' LocalizedStrings.Str1340);  					rowIndex++;    					foreach (var strategyParam in strategy.Parameters.CachedValues)  					{  						var value = strategyParam.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' strategyParam.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					//rowIndex += 2;  					//worker.SetCell(0' rowIndex' "Комиссия по типам:");  					//rowIndex++;    					//foreach (var group in Strategy.CommissionManager.Rules.SyncGet(c => c.ToArray()).GroupBy(c => c.GetType().GetDisplayName()))  					//{  					//	var commission = group.Sum(r => r.Commission);    					//	if (commission == 0)  					//		continue;    					//	worker  					//		.SetCell(0' rowIndex' group.Key)  					//		.SetCell(1' rowIndex' commission);    					//	rowIndex++;  					//}    					var columnShift = 3;    					worker  						.SetCell(columnShift + 0' 0' LocalizedStrings.Str985)    						.SetCell(columnShift + 0' 1' LocalizedStrings.Str1192).SetStyle(columnShift + 0' typeof(long))  						.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  						.SetCell(columnShift + 2' 1' LocalizedStrings.Time).SetStyle(columnShift + 2' "HH:mm:ss.fff")  						.SetCell(columnShift + 3' 1' LocalizedStrings.Price).SetStyle(columnShift + 3' typeof(decimal))  						.SetCell(columnShift + 4' 1' LocalizedStrings.Str1341).SetStyle(columnShift + 4' typeof(decimal))  						.SetCell(columnShift + 5' 1' LocalizedStrings.Volume).SetStyle(columnShift + 5' typeof(decimal))  						.SetCell(columnShift + 6' 1' LocalizedStrings.Str128)  						.SetCell(columnShift + 7' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 7' typeof(long))  						.SetCell(columnShift + 8' 1' LocalizedStrings.Str163).SetStyle(columnShift + 8' typeof(decimal))  						.SetCell(columnShift + 9' 1' LocalizedStrings.Str135)  						.SetCell(columnShift + 10' 1' LocalizedStrings.Str1342).SetStyle(columnShift + 11' typeof(decimal))  						.SetCell(columnShift + 11' 1' LocalizedStrings.Str1343).SetStyle(columnShift + 12' typeof(decimal))  						.SetCell(columnShift + 12' 1' LocalizedStrings.Str1344).SetStyle(columnShift + 13' typeof(decimal))  						.SetCell(columnShift + 13' 1' LocalizedStrings.Str1345).SetStyle(columnShift + 14' typeof(decimal))  						.SetCell(columnShift + 14' 1' LocalizedStrings.Str862).SetStyle(columnShift + 15' typeof(decimal));    					worker  						.SetConditionalFormatting(columnShift + 10' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 11' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 12' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 13' ComparisonOperator.Less' "0"' null' Colors.Red);    					var totalPnL = 0m;  					var position = 0m;    					var queues = new Dictionary<Security' PnLQueue>();    					rowIndex = 2;  					foreach (var trade in strategy.MyTrades.ToArray())  					{  						var info = strategy.PnLManager.ProcessMessage(trade.ToMessage());    						totalPnL += info.PnL;  						position += trade.GetPosition() ?? 0;    						var queue = queues.SafeAdd(trade.Trade.Security' key => new PnLQueue(key.ToSecurityId()));    						var localInfo = queue.Process(trade.ToMessage());    						worker  							.SetCell(columnShift + 0' rowIndex' trade.Trade.Id)  							.SetCell(columnShift + 1' rowIndex' trade.Order.TransactionId)  							.SetCell(columnShift + 2' rowIndex' Format(trade.Trade.Time))  							.SetCell(columnShift + 3' rowIndex' trade.Trade.Price)  							.SetCell(columnShift + 4' rowIndex' trade.Order.Price)  							.SetCell(columnShift + 5' rowIndex' trade.Trade.Volume)  							.SetCell(columnShift + 6' rowIndex' Format(trade.Order.Direction))  							.SetCell(columnShift + 7' rowIndex' trade.Order.Id)  							.SetCell(columnShift + 8' rowIndex' trade.Slippage)  							.SetCell(columnShift + 9' rowIndex' trade.Order.Comment)  							.SetCell(columnShift + 10' rowIndex' MathHelper.Round(info.PnL' Decimals))  							.SetCell(columnShift + 11' rowIndex' MathHelper.Round(localInfo.PnL' Decimals))  							.SetCell(columnShift + 12' rowIndex' MathHelper.Round(totalPnL' Decimals))  							.SetCell(columnShift + 13' rowIndex' MathHelper.Round(queue.RealizedPnL' Decimals))  							.SetCell(columnShift + 14' rowIndex' position);    						rowIndex++;  					}    					if (IncludeOrders)  					{  						columnShift += 17;    						worker  							.SetCell(columnShift + 0' 0' LocalizedStrings.Orders)    							.SetCell(columnShift + 0' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  							.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  							.SetCell(columnShift + 2' 1' LocalizedStrings.Str128)  							.SetCell(columnShift + 3' 1' LocalizedStrings.Str1346).SetStyle(columnShift + 3' "HH:mm:ss.fff")  							.SetCell(columnShift + 4' 1' LocalizedStrings.Str1347).SetStyle(columnShift + 4' "HH:mm:ss.fff")  							.SetCell(columnShift + 5' 1' LocalizedStrings.Str1348)  							.SetCell(columnShift + 6' 1' LocalizedStrings.Price).SetStyle(columnShift + 6' typeof(decimal))  							.SetCell(columnShift + 7' 1' LocalizedStrings.Str1323).SetStyle(columnShift + 7' typeof(decimal))  							.SetCell(columnShift + 8' 1' LocalizedStrings.Str1324)  							.SetCell(columnShift + 9' 1' LocalizedStrings.State)  							.SetCell(columnShift + 10' 1' LocalizedStrings.Str1325).SetStyle(columnShift + 10' typeof(decimal))  							.SetCell(columnShift + 11' 1' LocalizedStrings.Volume).SetStyle(columnShift + 11' typeof(decimal))  							.SetCell(columnShift + 12' 1' LocalizedStrings.Type)  							.SetCell(columnShift + 13' 1' LocalizedStrings.Str1326)  							.SetCell(columnShift + 14' 1' LocalizedStrings.Str1327)  							.SetCell(columnShift + 15' 1' LocalizedStrings.Str135);    						worker  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str1329)' null' Colors.Green)  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str238)' null' Colors.Red);    						rowIndex = 2;  						foreach (var order in strategy.Orders.ToArray())  						{  							worker  								.SetCell(columnShift + 0' rowIndex' order.Id)  								.SetCell(columnShift + 1' rowIndex' order.TransactionId)  								.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  								.SetCell(columnShift + 3' rowIndex' Format(order.Time))  								.SetCell(columnShift + 4' rowIndex' Format(order.LastChangeTime))  								.SetCell(columnShift + 5' rowIndex' Format(order.LastChangeTime - order.Time))  								.SetCell(columnShift + 6' rowIndex' order.Price)  								.SetCell(columnShift + 7' rowIndex' MathHelper.Round(order.GetAveragePrice(strategy.Connector)' Decimals))  								.SetCell(columnShift + 8' rowIndex' Format(order.State))  								.SetCell(columnShift + 9' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : LocalizedStrings.Str238))  								.SetCell(columnShift + 10' rowIndex' order.Balance)  								.SetCell(columnShift + 11' rowIndex' order.Volume)  								.SetCell(columnShift + 12' rowIndex' Format(order.Type))  								.SetCell(columnShift + 13' rowIndex' Format(order.LatencyRegistration))  								.SetCell(columnShift + 14' rowIndex' Format(order.LatencyCancellation))  								.SetCell(columnShift + 15' rowIndex' order.Comment);    							rowIndex++;  						}    						var stopOrders = strategy.StopOrders.ToArray();    						if (stopOrders.Length > 0)  						{  							rowIndex += 2;    							worker  								.SetCell(columnShift + 0' rowIndex - 1' LocalizedStrings.Str1351)    								.SetCell(columnShift + 0' rowIndex' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  								.SetCell(columnShift + 1' rowIndex' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  								.SetCell(columnShift + 2' rowIndex' LocalizedStrings.Str128)  								.SetCell(columnShift + 3' rowIndex' LocalizedStrings.Time).SetStyle(columnShift + 3' "HH:mm:ss.fff")  								.SetCell(columnShift + 4' rowIndex' LocalizedStrings.Price).SetStyle(columnShift + 4' typeof(decimal))  								.SetCell(columnShift + 5' rowIndex' LocalizedStrings.Str1324)  								.SetCell(columnShift + 6' rowIndex' LocalizedStrings.State)  								.SetCell(columnShift + 7' rowIndex' LocalizedStrings.Volume).SetStyle(columnShift + 7' typeof(decimal))  								.SetCell(columnShift + 8' rowIndex' LocalizedStrings.Str1326)  								.SetCell(columnShift + 9' rowIndex' LocalizedStrings.Str1327)  								//.SetCell(columnShift + 10' rowIndex' LocalizedStrings.Str1352).SetStyle(columnShift + 9' typeof(long))  								;    							var stopParams = stopOrders[0].Condition.Parameters.Keys.ToArray();    							for (var i = 0; i < stopParams.Length; i++)  								worker.SetCell(columnShift + 11 + i' rowIndex' stopParams[i]);    							foreach (var order in stopOrders)  							{  								worker  									.SetCell(columnShift + 0' rowIndex' order.Id)  									.SetCell(columnShift + 1' rowIndex' order.TransactionId)  									.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  									.SetCell(columnShift + 3' rowIndex' Format(order.Time))  									.SetCell(columnShift + 4' rowIndex' order.Price)  									.SetCell(columnShift + 5' rowIndex' Format(order.State))  									.SetCell(columnShift + 6' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : string.Empty))  									.SetCell(columnShift + 7' rowIndex' order.Volume)  									.SetCell(columnShift + 8' rowIndex' Format(order.LatencyRegistration))  									.SetCell(columnShift + 9' rowIndex' Format(order.LatencyCancellation))  									//.SetCell(columnShift + 10' rowIndex' order.DerivedOrder != null ? (object)order.DerivedOrder.Id : string.Empty)  									;    								for (var i = 0; i < stopParams.Length; i++)  									worker.SetCell(columnShift + 11 + i' rowIndex' order.Condition.Parameters[stopParams[i]] ?? string.Empty);    								rowIndex++;  							}  						}  					}  				}    				worker.Save(FileName' true);  			}
Magic Number,StockSharp.Algo.Strategies.Reporting,ExcelStrategyReport,C:\repos\stocksharp_stocksharp\Algo\Strategies\Reporting\ExcelStrategyReport.cs,Generate,The following statement contains a magic number: using (var worker = hasTemplate ? new ExcelWorker() : new ExcelWorker(Template))  			{  				foreach (var strategy in Strategies)  				{  					if (Template.IsEmpty())  					{  						worker.RenameSheet(strategy.Name);  					}  					else  					{  						if (worker.ContainsSheet(strategy.Name))  							worker.AddSheet(strategy.Name);  					}    					worker  						.SetCell(0' 0' LocalizedStrings.Str1331)    						.SetCell(0' 1' LocalizedStrings.Security + ":")  						.SetCell(1' 1' strategy.Security != null ? strategy.Security.Id : string.Empty)    						.SetCell(0' 2' LocalizedStrings.Portfolio + ":")  						.SetCell(1' 2' strategy.Portfolio != null ? strategy.Portfolio.Name : string.Empty)    						.SetCell(0' 3' LocalizedStrings.Str1334)  						.SetCell(1' 3' Format(strategy.TotalWorkingTime))    						.SetCell(0' 4' LocalizedStrings.Str1335)  						//.SetCell(1' 4' FormatTime(base.Strategy.TotalCPUTime))    						.SetCell(0' 5' LocalizedStrings.Str862 + ":")  						.SetCell(1' 5' strategy.Position)    						.SetCell(0' 6' LocalizedStrings.PnL + ":")  						.SetCell(1' 6' strategy.PnL)    						.SetCell(0' 7' LocalizedStrings.Str159 + ":")  						.SetCell(1' 7' strategy.Commission)    						.SetCell(0' 8' LocalizedStrings.Str163 + ":")  						.SetCell(1' 8' strategy.Slippage)    						.SetCell(0' 9' LocalizedStrings.Str161 + ":")  						.SetCell(1' 9' Format(strategy.Latency));    					var rowIndex = 11;    					foreach (var parameter in strategy.StatisticManager.Parameters.SyncGet(c => c.ToArray()))  					{  						var value = parameter.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' parameter.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					rowIndex += 2;  					worker.SetCell(0' rowIndex' LocalizedStrings.Str1340);  					rowIndex++;    					foreach (var strategyParam in strategy.Parameters.CachedValues)  					{  						var value = strategyParam.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' strategyParam.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					//rowIndex += 2;  					//worker.SetCell(0' rowIndex' "Комиссия по типам:");  					//rowIndex++;    					//foreach (var group in Strategy.CommissionManager.Rules.SyncGet(c => c.ToArray()).GroupBy(c => c.GetType().GetDisplayName()))  					//{  					//	var commission = group.Sum(r => r.Commission);    					//	if (commission == 0)  					//		continue;    					//	worker  					//		.SetCell(0' rowIndex' group.Key)  					//		.SetCell(1' rowIndex' commission);    					//	rowIndex++;  					//}    					var columnShift = 3;    					worker  						.SetCell(columnShift + 0' 0' LocalizedStrings.Str985)    						.SetCell(columnShift + 0' 1' LocalizedStrings.Str1192).SetStyle(columnShift + 0' typeof(long))  						.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  						.SetCell(columnShift + 2' 1' LocalizedStrings.Time).SetStyle(columnShift + 2' "HH:mm:ss.fff")  						.SetCell(columnShift + 3' 1' LocalizedStrings.Price).SetStyle(columnShift + 3' typeof(decimal))  						.SetCell(columnShift + 4' 1' LocalizedStrings.Str1341).SetStyle(columnShift + 4' typeof(decimal))  						.SetCell(columnShift + 5' 1' LocalizedStrings.Volume).SetStyle(columnShift + 5' typeof(decimal))  						.SetCell(columnShift + 6' 1' LocalizedStrings.Str128)  						.SetCell(columnShift + 7' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 7' typeof(long))  						.SetCell(columnShift + 8' 1' LocalizedStrings.Str163).SetStyle(columnShift + 8' typeof(decimal))  						.SetCell(columnShift + 9' 1' LocalizedStrings.Str135)  						.SetCell(columnShift + 10' 1' LocalizedStrings.Str1342).SetStyle(columnShift + 11' typeof(decimal))  						.SetCell(columnShift + 11' 1' LocalizedStrings.Str1343).SetStyle(columnShift + 12' typeof(decimal))  						.SetCell(columnShift + 12' 1' LocalizedStrings.Str1344).SetStyle(columnShift + 13' typeof(decimal))  						.SetCell(columnShift + 13' 1' LocalizedStrings.Str1345).SetStyle(columnShift + 14' typeof(decimal))  						.SetCell(columnShift + 14' 1' LocalizedStrings.Str862).SetStyle(columnShift + 15' typeof(decimal));    					worker  						.SetConditionalFormatting(columnShift + 10' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 11' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 12' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 13' ComparisonOperator.Less' "0"' null' Colors.Red);    					var totalPnL = 0m;  					var position = 0m;    					var queues = new Dictionary<Security' PnLQueue>();    					rowIndex = 2;  					foreach (var trade in strategy.MyTrades.ToArray())  					{  						var info = strategy.PnLManager.ProcessMessage(trade.ToMessage());    						totalPnL += info.PnL;  						position += trade.GetPosition() ?? 0;    						var queue = queues.SafeAdd(trade.Trade.Security' key => new PnLQueue(key.ToSecurityId()));    						var localInfo = queue.Process(trade.ToMessage());    						worker  							.SetCell(columnShift + 0' rowIndex' trade.Trade.Id)  							.SetCell(columnShift + 1' rowIndex' trade.Order.TransactionId)  							.SetCell(columnShift + 2' rowIndex' Format(trade.Trade.Time))  							.SetCell(columnShift + 3' rowIndex' trade.Trade.Price)  							.SetCell(columnShift + 4' rowIndex' trade.Order.Price)  							.SetCell(columnShift + 5' rowIndex' trade.Trade.Volume)  							.SetCell(columnShift + 6' rowIndex' Format(trade.Order.Direction))  							.SetCell(columnShift + 7' rowIndex' trade.Order.Id)  							.SetCell(columnShift + 8' rowIndex' trade.Slippage)  							.SetCell(columnShift + 9' rowIndex' trade.Order.Comment)  							.SetCell(columnShift + 10' rowIndex' MathHelper.Round(info.PnL' Decimals))  							.SetCell(columnShift + 11' rowIndex' MathHelper.Round(localInfo.PnL' Decimals))  							.SetCell(columnShift + 12' rowIndex' MathHelper.Round(totalPnL' Decimals))  							.SetCell(columnShift + 13' rowIndex' MathHelper.Round(queue.RealizedPnL' Decimals))  							.SetCell(columnShift + 14' rowIndex' position);    						rowIndex++;  					}    					if (IncludeOrders)  					{  						columnShift += 17;    						worker  							.SetCell(columnShift + 0' 0' LocalizedStrings.Orders)    							.SetCell(columnShift + 0' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  							.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  							.SetCell(columnShift + 2' 1' LocalizedStrings.Str128)  							.SetCell(columnShift + 3' 1' LocalizedStrings.Str1346).SetStyle(columnShift + 3' "HH:mm:ss.fff")  							.SetCell(columnShift + 4' 1' LocalizedStrings.Str1347).SetStyle(columnShift + 4' "HH:mm:ss.fff")  							.SetCell(columnShift + 5' 1' LocalizedStrings.Str1348)  							.SetCell(columnShift + 6' 1' LocalizedStrings.Price).SetStyle(columnShift + 6' typeof(decimal))  							.SetCell(columnShift + 7' 1' LocalizedStrings.Str1323).SetStyle(columnShift + 7' typeof(decimal))  							.SetCell(columnShift + 8' 1' LocalizedStrings.Str1324)  							.SetCell(columnShift + 9' 1' LocalizedStrings.State)  							.SetCell(columnShift + 10' 1' LocalizedStrings.Str1325).SetStyle(columnShift + 10' typeof(decimal))  							.SetCell(columnShift + 11' 1' LocalizedStrings.Volume).SetStyle(columnShift + 11' typeof(decimal))  							.SetCell(columnShift + 12' 1' LocalizedStrings.Type)  							.SetCell(columnShift + 13' 1' LocalizedStrings.Str1326)  							.SetCell(columnShift + 14' 1' LocalizedStrings.Str1327)  							.SetCell(columnShift + 15' 1' LocalizedStrings.Str135);    						worker  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str1329)' null' Colors.Green)  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str238)' null' Colors.Red);    						rowIndex = 2;  						foreach (var order in strategy.Orders.ToArray())  						{  							worker  								.SetCell(columnShift + 0' rowIndex' order.Id)  								.SetCell(columnShift + 1' rowIndex' order.TransactionId)  								.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  								.SetCell(columnShift + 3' rowIndex' Format(order.Time))  								.SetCell(columnShift + 4' rowIndex' Format(order.LastChangeTime))  								.SetCell(columnShift + 5' rowIndex' Format(order.LastChangeTime - order.Time))  								.SetCell(columnShift + 6' rowIndex' order.Price)  								.SetCell(columnShift + 7' rowIndex' MathHelper.Round(order.GetAveragePrice(strategy.Connector)' Decimals))  								.SetCell(columnShift + 8' rowIndex' Format(order.State))  								.SetCell(columnShift + 9' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : LocalizedStrings.Str238))  								.SetCell(columnShift + 10' rowIndex' order.Balance)  								.SetCell(columnShift + 11' rowIndex' order.Volume)  								.SetCell(columnShift + 12' rowIndex' Format(order.Type))  								.SetCell(columnShift + 13' rowIndex' Format(order.LatencyRegistration))  								.SetCell(columnShift + 14' rowIndex' Format(order.LatencyCancellation))  								.SetCell(columnShift + 15' rowIndex' order.Comment);    							rowIndex++;  						}    						var stopOrders = strategy.StopOrders.ToArray();    						if (stopOrders.Length > 0)  						{  							rowIndex += 2;    							worker  								.SetCell(columnShift + 0' rowIndex - 1' LocalizedStrings.Str1351)    								.SetCell(columnShift + 0' rowIndex' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  								.SetCell(columnShift + 1' rowIndex' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  								.SetCell(columnShift + 2' rowIndex' LocalizedStrings.Str128)  								.SetCell(columnShift + 3' rowIndex' LocalizedStrings.Time).SetStyle(columnShift + 3' "HH:mm:ss.fff")  								.SetCell(columnShift + 4' rowIndex' LocalizedStrings.Price).SetStyle(columnShift + 4' typeof(decimal))  								.SetCell(columnShift + 5' rowIndex' LocalizedStrings.Str1324)  								.SetCell(columnShift + 6' rowIndex' LocalizedStrings.State)  								.SetCell(columnShift + 7' rowIndex' LocalizedStrings.Volume).SetStyle(columnShift + 7' typeof(decimal))  								.SetCell(columnShift + 8' rowIndex' LocalizedStrings.Str1326)  								.SetCell(columnShift + 9' rowIndex' LocalizedStrings.Str1327)  								//.SetCell(columnShift + 10' rowIndex' LocalizedStrings.Str1352).SetStyle(columnShift + 9' typeof(long))  								;    							var stopParams = stopOrders[0].Condition.Parameters.Keys.ToArray();    							for (var i = 0; i < stopParams.Length; i++)  								worker.SetCell(columnShift + 11 + i' rowIndex' stopParams[i]);    							foreach (var order in stopOrders)  							{  								worker  									.SetCell(columnShift + 0' rowIndex' order.Id)  									.SetCell(columnShift + 1' rowIndex' order.TransactionId)  									.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  									.SetCell(columnShift + 3' rowIndex' Format(order.Time))  									.SetCell(columnShift + 4' rowIndex' order.Price)  									.SetCell(columnShift + 5' rowIndex' Format(order.State))  									.SetCell(columnShift + 6' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : string.Empty))  									.SetCell(columnShift + 7' rowIndex' order.Volume)  									.SetCell(columnShift + 8' rowIndex' Format(order.LatencyRegistration))  									.SetCell(columnShift + 9' rowIndex' Format(order.LatencyCancellation))  									//.SetCell(columnShift + 10' rowIndex' order.DerivedOrder != null ? (object)order.DerivedOrder.Id : string.Empty)  									;    								for (var i = 0; i < stopParams.Length; i++)  									worker.SetCell(columnShift + 11 + i' rowIndex' order.Condition.Parameters[stopParams[i]] ?? string.Empty);    								rowIndex++;  							}  						}  					}  				}    				worker.Save(FileName' true);  			}
Magic Number,StockSharp.Algo.Strategies.Reporting,ExcelStrategyReport,C:\repos\stocksharp_stocksharp\Algo\Strategies\Reporting\ExcelStrategyReport.cs,Generate,The following statement contains a magic number: using (var worker = hasTemplate ? new ExcelWorker() : new ExcelWorker(Template))  			{  				foreach (var strategy in Strategies)  				{  					if (Template.IsEmpty())  					{  						worker.RenameSheet(strategy.Name);  					}  					else  					{  						if (worker.ContainsSheet(strategy.Name))  							worker.AddSheet(strategy.Name);  					}    					worker  						.SetCell(0' 0' LocalizedStrings.Str1331)    						.SetCell(0' 1' LocalizedStrings.Security + ":")  						.SetCell(1' 1' strategy.Security != null ? strategy.Security.Id : string.Empty)    						.SetCell(0' 2' LocalizedStrings.Portfolio + ":")  						.SetCell(1' 2' strategy.Portfolio != null ? strategy.Portfolio.Name : string.Empty)    						.SetCell(0' 3' LocalizedStrings.Str1334)  						.SetCell(1' 3' Format(strategy.TotalWorkingTime))    						.SetCell(0' 4' LocalizedStrings.Str1335)  						//.SetCell(1' 4' FormatTime(base.Strategy.TotalCPUTime))    						.SetCell(0' 5' LocalizedStrings.Str862 + ":")  						.SetCell(1' 5' strategy.Position)    						.SetCell(0' 6' LocalizedStrings.PnL + ":")  						.SetCell(1' 6' strategy.PnL)    						.SetCell(0' 7' LocalizedStrings.Str159 + ":")  						.SetCell(1' 7' strategy.Commission)    						.SetCell(0' 8' LocalizedStrings.Str163 + ":")  						.SetCell(1' 8' strategy.Slippage)    						.SetCell(0' 9' LocalizedStrings.Str161 + ":")  						.SetCell(1' 9' Format(strategy.Latency));    					var rowIndex = 11;    					foreach (var parameter in strategy.StatisticManager.Parameters.SyncGet(c => c.ToArray()))  					{  						var value = parameter.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' parameter.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					rowIndex += 2;  					worker.SetCell(0' rowIndex' LocalizedStrings.Str1340);  					rowIndex++;    					foreach (var strategyParam in strategy.Parameters.CachedValues)  					{  						var value = strategyParam.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' strategyParam.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					//rowIndex += 2;  					//worker.SetCell(0' rowIndex' "Комиссия по типам:");  					//rowIndex++;    					//foreach (var group in Strategy.CommissionManager.Rules.SyncGet(c => c.ToArray()).GroupBy(c => c.GetType().GetDisplayName()))  					//{  					//	var commission = group.Sum(r => r.Commission);    					//	if (commission == 0)  					//		continue;    					//	worker  					//		.SetCell(0' rowIndex' group.Key)  					//		.SetCell(1' rowIndex' commission);    					//	rowIndex++;  					//}    					var columnShift = 3;    					worker  						.SetCell(columnShift + 0' 0' LocalizedStrings.Str985)    						.SetCell(columnShift + 0' 1' LocalizedStrings.Str1192).SetStyle(columnShift + 0' typeof(long))  						.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  						.SetCell(columnShift + 2' 1' LocalizedStrings.Time).SetStyle(columnShift + 2' "HH:mm:ss.fff")  						.SetCell(columnShift + 3' 1' LocalizedStrings.Price).SetStyle(columnShift + 3' typeof(decimal))  						.SetCell(columnShift + 4' 1' LocalizedStrings.Str1341).SetStyle(columnShift + 4' typeof(decimal))  						.SetCell(columnShift + 5' 1' LocalizedStrings.Volume).SetStyle(columnShift + 5' typeof(decimal))  						.SetCell(columnShift + 6' 1' LocalizedStrings.Str128)  						.SetCell(columnShift + 7' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 7' typeof(long))  						.SetCell(columnShift + 8' 1' LocalizedStrings.Str163).SetStyle(columnShift + 8' typeof(decimal))  						.SetCell(columnShift + 9' 1' LocalizedStrings.Str135)  						.SetCell(columnShift + 10' 1' LocalizedStrings.Str1342).SetStyle(columnShift + 11' typeof(decimal))  						.SetCell(columnShift + 11' 1' LocalizedStrings.Str1343).SetStyle(columnShift + 12' typeof(decimal))  						.SetCell(columnShift + 12' 1' LocalizedStrings.Str1344).SetStyle(columnShift + 13' typeof(decimal))  						.SetCell(columnShift + 13' 1' LocalizedStrings.Str1345).SetStyle(columnShift + 14' typeof(decimal))  						.SetCell(columnShift + 14' 1' LocalizedStrings.Str862).SetStyle(columnShift + 15' typeof(decimal));    					worker  						.SetConditionalFormatting(columnShift + 10' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 11' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 12' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 13' ComparisonOperator.Less' "0"' null' Colors.Red);    					var totalPnL = 0m;  					var position = 0m;    					var queues = new Dictionary<Security' PnLQueue>();    					rowIndex = 2;  					foreach (var trade in strategy.MyTrades.ToArray())  					{  						var info = strategy.PnLManager.ProcessMessage(trade.ToMessage());    						totalPnL += info.PnL;  						position += trade.GetPosition() ?? 0;    						var queue = queues.SafeAdd(trade.Trade.Security' key => new PnLQueue(key.ToSecurityId()));    						var localInfo = queue.Process(trade.ToMessage());    						worker  							.SetCell(columnShift + 0' rowIndex' trade.Trade.Id)  							.SetCell(columnShift + 1' rowIndex' trade.Order.TransactionId)  							.SetCell(columnShift + 2' rowIndex' Format(trade.Trade.Time))  							.SetCell(columnShift + 3' rowIndex' trade.Trade.Price)  							.SetCell(columnShift + 4' rowIndex' trade.Order.Price)  							.SetCell(columnShift + 5' rowIndex' trade.Trade.Volume)  							.SetCell(columnShift + 6' rowIndex' Format(trade.Order.Direction))  							.SetCell(columnShift + 7' rowIndex' trade.Order.Id)  							.SetCell(columnShift + 8' rowIndex' trade.Slippage)  							.SetCell(columnShift + 9' rowIndex' trade.Order.Comment)  							.SetCell(columnShift + 10' rowIndex' MathHelper.Round(info.PnL' Decimals))  							.SetCell(columnShift + 11' rowIndex' MathHelper.Round(localInfo.PnL' Decimals))  							.SetCell(columnShift + 12' rowIndex' MathHelper.Round(totalPnL' Decimals))  							.SetCell(columnShift + 13' rowIndex' MathHelper.Round(queue.RealizedPnL' Decimals))  							.SetCell(columnShift + 14' rowIndex' position);    						rowIndex++;  					}    					if (IncludeOrders)  					{  						columnShift += 17;    						worker  							.SetCell(columnShift + 0' 0' LocalizedStrings.Orders)    							.SetCell(columnShift + 0' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  							.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  							.SetCell(columnShift + 2' 1' LocalizedStrings.Str128)  							.SetCell(columnShift + 3' 1' LocalizedStrings.Str1346).SetStyle(columnShift + 3' "HH:mm:ss.fff")  							.SetCell(columnShift + 4' 1' LocalizedStrings.Str1347).SetStyle(columnShift + 4' "HH:mm:ss.fff")  							.SetCell(columnShift + 5' 1' LocalizedStrings.Str1348)  							.SetCell(columnShift + 6' 1' LocalizedStrings.Price).SetStyle(columnShift + 6' typeof(decimal))  							.SetCell(columnShift + 7' 1' LocalizedStrings.Str1323).SetStyle(columnShift + 7' typeof(decimal))  							.SetCell(columnShift + 8' 1' LocalizedStrings.Str1324)  							.SetCell(columnShift + 9' 1' LocalizedStrings.State)  							.SetCell(columnShift + 10' 1' LocalizedStrings.Str1325).SetStyle(columnShift + 10' typeof(decimal))  							.SetCell(columnShift + 11' 1' LocalizedStrings.Volume).SetStyle(columnShift + 11' typeof(decimal))  							.SetCell(columnShift + 12' 1' LocalizedStrings.Type)  							.SetCell(columnShift + 13' 1' LocalizedStrings.Str1326)  							.SetCell(columnShift + 14' 1' LocalizedStrings.Str1327)  							.SetCell(columnShift + 15' 1' LocalizedStrings.Str135);    						worker  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str1329)' null' Colors.Green)  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str238)' null' Colors.Red);    						rowIndex = 2;  						foreach (var order in strategy.Orders.ToArray())  						{  							worker  								.SetCell(columnShift + 0' rowIndex' order.Id)  								.SetCell(columnShift + 1' rowIndex' order.TransactionId)  								.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  								.SetCell(columnShift + 3' rowIndex' Format(order.Time))  								.SetCell(columnShift + 4' rowIndex' Format(order.LastChangeTime))  								.SetCell(columnShift + 5' rowIndex' Format(order.LastChangeTime - order.Time))  								.SetCell(columnShift + 6' rowIndex' order.Price)  								.SetCell(columnShift + 7' rowIndex' MathHelper.Round(order.GetAveragePrice(strategy.Connector)' Decimals))  								.SetCell(columnShift + 8' rowIndex' Format(order.State))  								.SetCell(columnShift + 9' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : LocalizedStrings.Str238))  								.SetCell(columnShift + 10' rowIndex' order.Balance)  								.SetCell(columnShift + 11' rowIndex' order.Volume)  								.SetCell(columnShift + 12' rowIndex' Format(order.Type))  								.SetCell(columnShift + 13' rowIndex' Format(order.LatencyRegistration))  								.SetCell(columnShift + 14' rowIndex' Format(order.LatencyCancellation))  								.SetCell(columnShift + 15' rowIndex' order.Comment);    							rowIndex++;  						}    						var stopOrders = strategy.StopOrders.ToArray();    						if (stopOrders.Length > 0)  						{  							rowIndex += 2;    							worker  								.SetCell(columnShift + 0' rowIndex - 1' LocalizedStrings.Str1351)    								.SetCell(columnShift + 0' rowIndex' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  								.SetCell(columnShift + 1' rowIndex' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  								.SetCell(columnShift + 2' rowIndex' LocalizedStrings.Str128)  								.SetCell(columnShift + 3' rowIndex' LocalizedStrings.Time).SetStyle(columnShift + 3' "HH:mm:ss.fff")  								.SetCell(columnShift + 4' rowIndex' LocalizedStrings.Price).SetStyle(columnShift + 4' typeof(decimal))  								.SetCell(columnShift + 5' rowIndex' LocalizedStrings.Str1324)  								.SetCell(columnShift + 6' rowIndex' LocalizedStrings.State)  								.SetCell(columnShift + 7' rowIndex' LocalizedStrings.Volume).SetStyle(columnShift + 7' typeof(decimal))  								.SetCell(columnShift + 8' rowIndex' LocalizedStrings.Str1326)  								.SetCell(columnShift + 9' rowIndex' LocalizedStrings.Str1327)  								//.SetCell(columnShift + 10' rowIndex' LocalizedStrings.Str1352).SetStyle(columnShift + 9' typeof(long))  								;    							var stopParams = stopOrders[0].Condition.Parameters.Keys.ToArray();    							for (var i = 0; i < stopParams.Length; i++)  								worker.SetCell(columnShift + 11 + i' rowIndex' stopParams[i]);    							foreach (var order in stopOrders)  							{  								worker  									.SetCell(columnShift + 0' rowIndex' order.Id)  									.SetCell(columnShift + 1' rowIndex' order.TransactionId)  									.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  									.SetCell(columnShift + 3' rowIndex' Format(order.Time))  									.SetCell(columnShift + 4' rowIndex' order.Price)  									.SetCell(columnShift + 5' rowIndex' Format(order.State))  									.SetCell(columnShift + 6' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : string.Empty))  									.SetCell(columnShift + 7' rowIndex' order.Volume)  									.SetCell(columnShift + 8' rowIndex' Format(order.LatencyRegistration))  									.SetCell(columnShift + 9' rowIndex' Format(order.LatencyCancellation))  									//.SetCell(columnShift + 10' rowIndex' order.DerivedOrder != null ? (object)order.DerivedOrder.Id : string.Empty)  									;    								for (var i = 0; i < stopParams.Length; i++)  									worker.SetCell(columnShift + 11 + i' rowIndex' order.Condition.Parameters[stopParams[i]] ?? string.Empty);    								rowIndex++;  							}  						}  					}  				}    				worker.Save(FileName' true);  			}
Magic Number,StockSharp.Algo.Strategies.Reporting,ExcelStrategyReport,C:\repos\stocksharp_stocksharp\Algo\Strategies\Reporting\ExcelStrategyReport.cs,Generate,The following statement contains a magic number: using (var worker = hasTemplate ? new ExcelWorker() : new ExcelWorker(Template))  			{  				foreach (var strategy in Strategies)  				{  					if (Template.IsEmpty())  					{  						worker.RenameSheet(strategy.Name);  					}  					else  					{  						if (worker.ContainsSheet(strategy.Name))  							worker.AddSheet(strategy.Name);  					}    					worker  						.SetCell(0' 0' LocalizedStrings.Str1331)    						.SetCell(0' 1' LocalizedStrings.Security + ":")  						.SetCell(1' 1' strategy.Security != null ? strategy.Security.Id : string.Empty)    						.SetCell(0' 2' LocalizedStrings.Portfolio + ":")  						.SetCell(1' 2' strategy.Portfolio != null ? strategy.Portfolio.Name : string.Empty)    						.SetCell(0' 3' LocalizedStrings.Str1334)  						.SetCell(1' 3' Format(strategy.TotalWorkingTime))    						.SetCell(0' 4' LocalizedStrings.Str1335)  						//.SetCell(1' 4' FormatTime(base.Strategy.TotalCPUTime))    						.SetCell(0' 5' LocalizedStrings.Str862 + ":")  						.SetCell(1' 5' strategy.Position)    						.SetCell(0' 6' LocalizedStrings.PnL + ":")  						.SetCell(1' 6' strategy.PnL)    						.SetCell(0' 7' LocalizedStrings.Str159 + ":")  						.SetCell(1' 7' strategy.Commission)    						.SetCell(0' 8' LocalizedStrings.Str163 + ":")  						.SetCell(1' 8' strategy.Slippage)    						.SetCell(0' 9' LocalizedStrings.Str161 + ":")  						.SetCell(1' 9' Format(strategy.Latency));    					var rowIndex = 11;    					foreach (var parameter in strategy.StatisticManager.Parameters.SyncGet(c => c.ToArray()))  					{  						var value = parameter.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' parameter.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					rowIndex += 2;  					worker.SetCell(0' rowIndex' LocalizedStrings.Str1340);  					rowIndex++;    					foreach (var strategyParam in strategy.Parameters.CachedValues)  					{  						var value = strategyParam.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' strategyParam.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					//rowIndex += 2;  					//worker.SetCell(0' rowIndex' "Комиссия по типам:");  					//rowIndex++;    					//foreach (var group in Strategy.CommissionManager.Rules.SyncGet(c => c.ToArray()).GroupBy(c => c.GetType().GetDisplayName()))  					//{  					//	var commission = group.Sum(r => r.Commission);    					//	if (commission == 0)  					//		continue;    					//	worker  					//		.SetCell(0' rowIndex' group.Key)  					//		.SetCell(1' rowIndex' commission);    					//	rowIndex++;  					//}    					var columnShift = 3;    					worker  						.SetCell(columnShift + 0' 0' LocalizedStrings.Str985)    						.SetCell(columnShift + 0' 1' LocalizedStrings.Str1192).SetStyle(columnShift + 0' typeof(long))  						.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  						.SetCell(columnShift + 2' 1' LocalizedStrings.Time).SetStyle(columnShift + 2' "HH:mm:ss.fff")  						.SetCell(columnShift + 3' 1' LocalizedStrings.Price).SetStyle(columnShift + 3' typeof(decimal))  						.SetCell(columnShift + 4' 1' LocalizedStrings.Str1341).SetStyle(columnShift + 4' typeof(decimal))  						.SetCell(columnShift + 5' 1' LocalizedStrings.Volume).SetStyle(columnShift + 5' typeof(decimal))  						.SetCell(columnShift + 6' 1' LocalizedStrings.Str128)  						.SetCell(columnShift + 7' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 7' typeof(long))  						.SetCell(columnShift + 8' 1' LocalizedStrings.Str163).SetStyle(columnShift + 8' typeof(decimal))  						.SetCell(columnShift + 9' 1' LocalizedStrings.Str135)  						.SetCell(columnShift + 10' 1' LocalizedStrings.Str1342).SetStyle(columnShift + 11' typeof(decimal))  						.SetCell(columnShift + 11' 1' LocalizedStrings.Str1343).SetStyle(columnShift + 12' typeof(decimal))  						.SetCell(columnShift + 12' 1' LocalizedStrings.Str1344).SetStyle(columnShift + 13' typeof(decimal))  						.SetCell(columnShift + 13' 1' LocalizedStrings.Str1345).SetStyle(columnShift + 14' typeof(decimal))  						.SetCell(columnShift + 14' 1' LocalizedStrings.Str862).SetStyle(columnShift + 15' typeof(decimal));    					worker  						.SetConditionalFormatting(columnShift + 10' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 11' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 12' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 13' ComparisonOperator.Less' "0"' null' Colors.Red);    					var totalPnL = 0m;  					var position = 0m;    					var queues = new Dictionary<Security' PnLQueue>();    					rowIndex = 2;  					foreach (var trade in strategy.MyTrades.ToArray())  					{  						var info = strategy.PnLManager.ProcessMessage(trade.ToMessage());    						totalPnL += info.PnL;  						position += trade.GetPosition() ?? 0;    						var queue = queues.SafeAdd(trade.Trade.Security' key => new PnLQueue(key.ToSecurityId()));    						var localInfo = queue.Process(trade.ToMessage());    						worker  							.SetCell(columnShift + 0' rowIndex' trade.Trade.Id)  							.SetCell(columnShift + 1' rowIndex' trade.Order.TransactionId)  							.SetCell(columnShift + 2' rowIndex' Format(trade.Trade.Time))  							.SetCell(columnShift + 3' rowIndex' trade.Trade.Price)  							.SetCell(columnShift + 4' rowIndex' trade.Order.Price)  							.SetCell(columnShift + 5' rowIndex' trade.Trade.Volume)  							.SetCell(columnShift + 6' rowIndex' Format(trade.Order.Direction))  							.SetCell(columnShift + 7' rowIndex' trade.Order.Id)  							.SetCell(columnShift + 8' rowIndex' trade.Slippage)  							.SetCell(columnShift + 9' rowIndex' trade.Order.Comment)  							.SetCell(columnShift + 10' rowIndex' MathHelper.Round(info.PnL' Decimals))  							.SetCell(columnShift + 11' rowIndex' MathHelper.Round(localInfo.PnL' Decimals))  							.SetCell(columnShift + 12' rowIndex' MathHelper.Round(totalPnL' Decimals))  							.SetCell(columnShift + 13' rowIndex' MathHelper.Round(queue.RealizedPnL' Decimals))  							.SetCell(columnShift + 14' rowIndex' position);    						rowIndex++;  					}    					if (IncludeOrders)  					{  						columnShift += 17;    						worker  							.SetCell(columnShift + 0' 0' LocalizedStrings.Orders)    							.SetCell(columnShift + 0' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  							.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  							.SetCell(columnShift + 2' 1' LocalizedStrings.Str128)  							.SetCell(columnShift + 3' 1' LocalizedStrings.Str1346).SetStyle(columnShift + 3' "HH:mm:ss.fff")  							.SetCell(columnShift + 4' 1' LocalizedStrings.Str1347).SetStyle(columnShift + 4' "HH:mm:ss.fff")  							.SetCell(columnShift + 5' 1' LocalizedStrings.Str1348)  							.SetCell(columnShift + 6' 1' LocalizedStrings.Price).SetStyle(columnShift + 6' typeof(decimal))  							.SetCell(columnShift + 7' 1' LocalizedStrings.Str1323).SetStyle(columnShift + 7' typeof(decimal))  							.SetCell(columnShift + 8' 1' LocalizedStrings.Str1324)  							.SetCell(columnShift + 9' 1' LocalizedStrings.State)  							.SetCell(columnShift + 10' 1' LocalizedStrings.Str1325).SetStyle(columnShift + 10' typeof(decimal))  							.SetCell(columnShift + 11' 1' LocalizedStrings.Volume).SetStyle(columnShift + 11' typeof(decimal))  							.SetCell(columnShift + 12' 1' LocalizedStrings.Type)  							.SetCell(columnShift + 13' 1' LocalizedStrings.Str1326)  							.SetCell(columnShift + 14' 1' LocalizedStrings.Str1327)  							.SetCell(columnShift + 15' 1' LocalizedStrings.Str135);    						worker  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str1329)' null' Colors.Green)  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str238)' null' Colors.Red);    						rowIndex = 2;  						foreach (var order in strategy.Orders.ToArray())  						{  							worker  								.SetCell(columnShift + 0' rowIndex' order.Id)  								.SetCell(columnShift + 1' rowIndex' order.TransactionId)  								.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  								.SetCell(columnShift + 3' rowIndex' Format(order.Time))  								.SetCell(columnShift + 4' rowIndex' Format(order.LastChangeTime))  								.SetCell(columnShift + 5' rowIndex' Format(order.LastChangeTime - order.Time))  								.SetCell(columnShift + 6' rowIndex' order.Price)  								.SetCell(columnShift + 7' rowIndex' MathHelper.Round(order.GetAveragePrice(strategy.Connector)' Decimals))  								.SetCell(columnShift + 8' rowIndex' Format(order.State))  								.SetCell(columnShift + 9' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : LocalizedStrings.Str238))  								.SetCell(columnShift + 10' rowIndex' order.Balance)  								.SetCell(columnShift + 11' rowIndex' order.Volume)  								.SetCell(columnShift + 12' rowIndex' Format(order.Type))  								.SetCell(columnShift + 13' rowIndex' Format(order.LatencyRegistration))  								.SetCell(columnShift + 14' rowIndex' Format(order.LatencyCancellation))  								.SetCell(columnShift + 15' rowIndex' order.Comment);    							rowIndex++;  						}    						var stopOrders = strategy.StopOrders.ToArray();    						if (stopOrders.Length > 0)  						{  							rowIndex += 2;    							worker  								.SetCell(columnShift + 0' rowIndex - 1' LocalizedStrings.Str1351)    								.SetCell(columnShift + 0' rowIndex' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  								.SetCell(columnShift + 1' rowIndex' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  								.SetCell(columnShift + 2' rowIndex' LocalizedStrings.Str128)  								.SetCell(columnShift + 3' rowIndex' LocalizedStrings.Time).SetStyle(columnShift + 3' "HH:mm:ss.fff")  								.SetCell(columnShift + 4' rowIndex' LocalizedStrings.Price).SetStyle(columnShift + 4' typeof(decimal))  								.SetCell(columnShift + 5' rowIndex' LocalizedStrings.Str1324)  								.SetCell(columnShift + 6' rowIndex' LocalizedStrings.State)  								.SetCell(columnShift + 7' rowIndex' LocalizedStrings.Volume).SetStyle(columnShift + 7' typeof(decimal))  								.SetCell(columnShift + 8' rowIndex' LocalizedStrings.Str1326)  								.SetCell(columnShift + 9' rowIndex' LocalizedStrings.Str1327)  								//.SetCell(columnShift + 10' rowIndex' LocalizedStrings.Str1352).SetStyle(columnShift + 9' typeof(long))  								;    							var stopParams = stopOrders[0].Condition.Parameters.Keys.ToArray();    							for (var i = 0; i < stopParams.Length; i++)  								worker.SetCell(columnShift + 11 + i' rowIndex' stopParams[i]);    							foreach (var order in stopOrders)  							{  								worker  									.SetCell(columnShift + 0' rowIndex' order.Id)  									.SetCell(columnShift + 1' rowIndex' order.TransactionId)  									.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  									.SetCell(columnShift + 3' rowIndex' Format(order.Time))  									.SetCell(columnShift + 4' rowIndex' order.Price)  									.SetCell(columnShift + 5' rowIndex' Format(order.State))  									.SetCell(columnShift + 6' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : string.Empty))  									.SetCell(columnShift + 7' rowIndex' order.Volume)  									.SetCell(columnShift + 8' rowIndex' Format(order.LatencyRegistration))  									.SetCell(columnShift + 9' rowIndex' Format(order.LatencyCancellation))  									//.SetCell(columnShift + 10' rowIndex' order.DerivedOrder != null ? (object)order.DerivedOrder.Id : string.Empty)  									;    								for (var i = 0; i < stopParams.Length; i++)  									worker.SetCell(columnShift + 11 + i' rowIndex' order.Condition.Parameters[stopParams[i]] ?? string.Empty);    								rowIndex++;  							}  						}  					}  				}    				worker.Save(FileName' true);  			}
Magic Number,StockSharp.Algo.Strategies.Reporting,ExcelStrategyReport,C:\repos\stocksharp_stocksharp\Algo\Strategies\Reporting\ExcelStrategyReport.cs,Generate,The following statement contains a magic number: using (var worker = hasTemplate ? new ExcelWorker() : new ExcelWorker(Template))  			{  				foreach (var strategy in Strategies)  				{  					if (Template.IsEmpty())  					{  						worker.RenameSheet(strategy.Name);  					}  					else  					{  						if (worker.ContainsSheet(strategy.Name))  							worker.AddSheet(strategy.Name);  					}    					worker  						.SetCell(0' 0' LocalizedStrings.Str1331)    						.SetCell(0' 1' LocalizedStrings.Security + ":")  						.SetCell(1' 1' strategy.Security != null ? strategy.Security.Id : string.Empty)    						.SetCell(0' 2' LocalizedStrings.Portfolio + ":")  						.SetCell(1' 2' strategy.Portfolio != null ? strategy.Portfolio.Name : string.Empty)    						.SetCell(0' 3' LocalizedStrings.Str1334)  						.SetCell(1' 3' Format(strategy.TotalWorkingTime))    						.SetCell(0' 4' LocalizedStrings.Str1335)  						//.SetCell(1' 4' FormatTime(base.Strategy.TotalCPUTime))    						.SetCell(0' 5' LocalizedStrings.Str862 + ":")  						.SetCell(1' 5' strategy.Position)    						.SetCell(0' 6' LocalizedStrings.PnL + ":")  						.SetCell(1' 6' strategy.PnL)    						.SetCell(0' 7' LocalizedStrings.Str159 + ":")  						.SetCell(1' 7' strategy.Commission)    						.SetCell(0' 8' LocalizedStrings.Str163 + ":")  						.SetCell(1' 8' strategy.Slippage)    						.SetCell(0' 9' LocalizedStrings.Str161 + ":")  						.SetCell(1' 9' Format(strategy.Latency));    					var rowIndex = 11;    					foreach (var parameter in strategy.StatisticManager.Parameters.SyncGet(c => c.ToArray()))  					{  						var value = parameter.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' parameter.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					rowIndex += 2;  					worker.SetCell(0' rowIndex' LocalizedStrings.Str1340);  					rowIndex++;    					foreach (var strategyParam in strategy.Parameters.CachedValues)  					{  						var value = strategyParam.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' strategyParam.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					//rowIndex += 2;  					//worker.SetCell(0' rowIndex' "Комиссия по типам:");  					//rowIndex++;    					//foreach (var group in Strategy.CommissionManager.Rules.SyncGet(c => c.ToArray()).GroupBy(c => c.GetType().GetDisplayName()))  					//{  					//	var commission = group.Sum(r => r.Commission);    					//	if (commission == 0)  					//		continue;    					//	worker  					//		.SetCell(0' rowIndex' group.Key)  					//		.SetCell(1' rowIndex' commission);    					//	rowIndex++;  					//}    					var columnShift = 3;    					worker  						.SetCell(columnShift + 0' 0' LocalizedStrings.Str985)    						.SetCell(columnShift + 0' 1' LocalizedStrings.Str1192).SetStyle(columnShift + 0' typeof(long))  						.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  						.SetCell(columnShift + 2' 1' LocalizedStrings.Time).SetStyle(columnShift + 2' "HH:mm:ss.fff")  						.SetCell(columnShift + 3' 1' LocalizedStrings.Price).SetStyle(columnShift + 3' typeof(decimal))  						.SetCell(columnShift + 4' 1' LocalizedStrings.Str1341).SetStyle(columnShift + 4' typeof(decimal))  						.SetCell(columnShift + 5' 1' LocalizedStrings.Volume).SetStyle(columnShift + 5' typeof(decimal))  						.SetCell(columnShift + 6' 1' LocalizedStrings.Str128)  						.SetCell(columnShift + 7' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 7' typeof(long))  						.SetCell(columnShift + 8' 1' LocalizedStrings.Str163).SetStyle(columnShift + 8' typeof(decimal))  						.SetCell(columnShift + 9' 1' LocalizedStrings.Str135)  						.SetCell(columnShift + 10' 1' LocalizedStrings.Str1342).SetStyle(columnShift + 11' typeof(decimal))  						.SetCell(columnShift + 11' 1' LocalizedStrings.Str1343).SetStyle(columnShift + 12' typeof(decimal))  						.SetCell(columnShift + 12' 1' LocalizedStrings.Str1344).SetStyle(columnShift + 13' typeof(decimal))  						.SetCell(columnShift + 13' 1' LocalizedStrings.Str1345).SetStyle(columnShift + 14' typeof(decimal))  						.SetCell(columnShift + 14' 1' LocalizedStrings.Str862).SetStyle(columnShift + 15' typeof(decimal));    					worker  						.SetConditionalFormatting(columnShift + 10' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 11' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 12' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 13' ComparisonOperator.Less' "0"' null' Colors.Red);    					var totalPnL = 0m;  					var position = 0m;    					var queues = new Dictionary<Security' PnLQueue>();    					rowIndex = 2;  					foreach (var trade in strategy.MyTrades.ToArray())  					{  						var info = strategy.PnLManager.ProcessMessage(trade.ToMessage());    						totalPnL += info.PnL;  						position += trade.GetPosition() ?? 0;    						var queue = queues.SafeAdd(trade.Trade.Security' key => new PnLQueue(key.ToSecurityId()));    						var localInfo = queue.Process(trade.ToMessage());    						worker  							.SetCell(columnShift + 0' rowIndex' trade.Trade.Id)  							.SetCell(columnShift + 1' rowIndex' trade.Order.TransactionId)  							.SetCell(columnShift + 2' rowIndex' Format(trade.Trade.Time))  							.SetCell(columnShift + 3' rowIndex' trade.Trade.Price)  							.SetCell(columnShift + 4' rowIndex' trade.Order.Price)  							.SetCell(columnShift + 5' rowIndex' trade.Trade.Volume)  							.SetCell(columnShift + 6' rowIndex' Format(trade.Order.Direction))  							.SetCell(columnShift + 7' rowIndex' trade.Order.Id)  							.SetCell(columnShift + 8' rowIndex' trade.Slippage)  							.SetCell(columnShift + 9' rowIndex' trade.Order.Comment)  							.SetCell(columnShift + 10' rowIndex' MathHelper.Round(info.PnL' Decimals))  							.SetCell(columnShift + 11' rowIndex' MathHelper.Round(localInfo.PnL' Decimals))  							.SetCell(columnShift + 12' rowIndex' MathHelper.Round(totalPnL' Decimals))  							.SetCell(columnShift + 13' rowIndex' MathHelper.Round(queue.RealizedPnL' Decimals))  							.SetCell(columnShift + 14' rowIndex' position);    						rowIndex++;  					}    					if (IncludeOrders)  					{  						columnShift += 17;    						worker  							.SetCell(columnShift + 0' 0' LocalizedStrings.Orders)    							.SetCell(columnShift + 0' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  							.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  							.SetCell(columnShift + 2' 1' LocalizedStrings.Str128)  							.SetCell(columnShift + 3' 1' LocalizedStrings.Str1346).SetStyle(columnShift + 3' "HH:mm:ss.fff")  							.SetCell(columnShift + 4' 1' LocalizedStrings.Str1347).SetStyle(columnShift + 4' "HH:mm:ss.fff")  							.SetCell(columnShift + 5' 1' LocalizedStrings.Str1348)  							.SetCell(columnShift + 6' 1' LocalizedStrings.Price).SetStyle(columnShift + 6' typeof(decimal))  							.SetCell(columnShift + 7' 1' LocalizedStrings.Str1323).SetStyle(columnShift + 7' typeof(decimal))  							.SetCell(columnShift + 8' 1' LocalizedStrings.Str1324)  							.SetCell(columnShift + 9' 1' LocalizedStrings.State)  							.SetCell(columnShift + 10' 1' LocalizedStrings.Str1325).SetStyle(columnShift + 10' typeof(decimal))  							.SetCell(columnShift + 11' 1' LocalizedStrings.Volume).SetStyle(columnShift + 11' typeof(decimal))  							.SetCell(columnShift + 12' 1' LocalizedStrings.Type)  							.SetCell(columnShift + 13' 1' LocalizedStrings.Str1326)  							.SetCell(columnShift + 14' 1' LocalizedStrings.Str1327)  							.SetCell(columnShift + 15' 1' LocalizedStrings.Str135);    						worker  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str1329)' null' Colors.Green)  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str238)' null' Colors.Red);    						rowIndex = 2;  						foreach (var order in strategy.Orders.ToArray())  						{  							worker  								.SetCell(columnShift + 0' rowIndex' order.Id)  								.SetCell(columnShift + 1' rowIndex' order.TransactionId)  								.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  								.SetCell(columnShift + 3' rowIndex' Format(order.Time))  								.SetCell(columnShift + 4' rowIndex' Format(order.LastChangeTime))  								.SetCell(columnShift + 5' rowIndex' Format(order.LastChangeTime - order.Time))  								.SetCell(columnShift + 6' rowIndex' order.Price)  								.SetCell(columnShift + 7' rowIndex' MathHelper.Round(order.GetAveragePrice(strategy.Connector)' Decimals))  								.SetCell(columnShift + 8' rowIndex' Format(order.State))  								.SetCell(columnShift + 9' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : LocalizedStrings.Str238))  								.SetCell(columnShift + 10' rowIndex' order.Balance)  								.SetCell(columnShift + 11' rowIndex' order.Volume)  								.SetCell(columnShift + 12' rowIndex' Format(order.Type))  								.SetCell(columnShift + 13' rowIndex' Format(order.LatencyRegistration))  								.SetCell(columnShift + 14' rowIndex' Format(order.LatencyCancellation))  								.SetCell(columnShift + 15' rowIndex' order.Comment);    							rowIndex++;  						}    						var stopOrders = strategy.StopOrders.ToArray();    						if (stopOrders.Length > 0)  						{  							rowIndex += 2;    							worker  								.SetCell(columnShift + 0' rowIndex - 1' LocalizedStrings.Str1351)    								.SetCell(columnShift + 0' rowIndex' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  								.SetCell(columnShift + 1' rowIndex' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  								.SetCell(columnShift + 2' rowIndex' LocalizedStrings.Str128)  								.SetCell(columnShift + 3' rowIndex' LocalizedStrings.Time).SetStyle(columnShift + 3' "HH:mm:ss.fff")  								.SetCell(columnShift + 4' rowIndex' LocalizedStrings.Price).SetStyle(columnShift + 4' typeof(decimal))  								.SetCell(columnShift + 5' rowIndex' LocalizedStrings.Str1324)  								.SetCell(columnShift + 6' rowIndex' LocalizedStrings.State)  								.SetCell(columnShift + 7' rowIndex' LocalizedStrings.Volume).SetStyle(columnShift + 7' typeof(decimal))  								.SetCell(columnShift + 8' rowIndex' LocalizedStrings.Str1326)  								.SetCell(columnShift + 9' rowIndex' LocalizedStrings.Str1327)  								//.SetCell(columnShift + 10' rowIndex' LocalizedStrings.Str1352).SetStyle(columnShift + 9' typeof(long))  								;    							var stopParams = stopOrders[0].Condition.Parameters.Keys.ToArray();    							for (var i = 0; i < stopParams.Length; i++)  								worker.SetCell(columnShift + 11 + i' rowIndex' stopParams[i]);    							foreach (var order in stopOrders)  							{  								worker  									.SetCell(columnShift + 0' rowIndex' order.Id)  									.SetCell(columnShift + 1' rowIndex' order.TransactionId)  									.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  									.SetCell(columnShift + 3' rowIndex' Format(order.Time))  									.SetCell(columnShift + 4' rowIndex' order.Price)  									.SetCell(columnShift + 5' rowIndex' Format(order.State))  									.SetCell(columnShift + 6' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : string.Empty))  									.SetCell(columnShift + 7' rowIndex' order.Volume)  									.SetCell(columnShift + 8' rowIndex' Format(order.LatencyRegistration))  									.SetCell(columnShift + 9' rowIndex' Format(order.LatencyCancellation))  									//.SetCell(columnShift + 10' rowIndex' order.DerivedOrder != null ? (object)order.DerivedOrder.Id : string.Empty)  									;    								for (var i = 0; i < stopParams.Length; i++)  									worker.SetCell(columnShift + 11 + i' rowIndex' order.Condition.Parameters[stopParams[i]] ?? string.Empty);    								rowIndex++;  							}  						}  					}  				}    				worker.Save(FileName' true);  			}
Magic Number,StockSharp.Algo.Strategies.Reporting,ExcelStrategyReport,C:\repos\stocksharp_stocksharp\Algo\Strategies\Reporting\ExcelStrategyReport.cs,Generate,The following statement contains a magic number: using (var worker = hasTemplate ? new ExcelWorker() : new ExcelWorker(Template))  			{  				foreach (var strategy in Strategies)  				{  					if (Template.IsEmpty())  					{  						worker.RenameSheet(strategy.Name);  					}  					else  					{  						if (worker.ContainsSheet(strategy.Name))  							worker.AddSheet(strategy.Name);  					}    					worker  						.SetCell(0' 0' LocalizedStrings.Str1331)    						.SetCell(0' 1' LocalizedStrings.Security + ":")  						.SetCell(1' 1' strategy.Security != null ? strategy.Security.Id : string.Empty)    						.SetCell(0' 2' LocalizedStrings.Portfolio + ":")  						.SetCell(1' 2' strategy.Portfolio != null ? strategy.Portfolio.Name : string.Empty)    						.SetCell(0' 3' LocalizedStrings.Str1334)  						.SetCell(1' 3' Format(strategy.TotalWorkingTime))    						.SetCell(0' 4' LocalizedStrings.Str1335)  						//.SetCell(1' 4' FormatTime(base.Strategy.TotalCPUTime))    						.SetCell(0' 5' LocalizedStrings.Str862 + ":")  						.SetCell(1' 5' strategy.Position)    						.SetCell(0' 6' LocalizedStrings.PnL + ":")  						.SetCell(1' 6' strategy.PnL)    						.SetCell(0' 7' LocalizedStrings.Str159 + ":")  						.SetCell(1' 7' strategy.Commission)    						.SetCell(0' 8' LocalizedStrings.Str163 + ":")  						.SetCell(1' 8' strategy.Slippage)    						.SetCell(0' 9' LocalizedStrings.Str161 + ":")  						.SetCell(1' 9' Format(strategy.Latency));    					var rowIndex = 11;    					foreach (var parameter in strategy.StatisticManager.Parameters.SyncGet(c => c.ToArray()))  					{  						var value = parameter.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' parameter.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					rowIndex += 2;  					worker.SetCell(0' rowIndex' LocalizedStrings.Str1340);  					rowIndex++;    					foreach (var strategyParam in strategy.Parameters.CachedValues)  					{  						var value = strategyParam.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' strategyParam.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					//rowIndex += 2;  					//worker.SetCell(0' rowIndex' "Комиссия по типам:");  					//rowIndex++;    					//foreach (var group in Strategy.CommissionManager.Rules.SyncGet(c => c.ToArray()).GroupBy(c => c.GetType().GetDisplayName()))  					//{  					//	var commission = group.Sum(r => r.Commission);    					//	if (commission == 0)  					//		continue;    					//	worker  					//		.SetCell(0' rowIndex' group.Key)  					//		.SetCell(1' rowIndex' commission);    					//	rowIndex++;  					//}    					var columnShift = 3;    					worker  						.SetCell(columnShift + 0' 0' LocalizedStrings.Str985)    						.SetCell(columnShift + 0' 1' LocalizedStrings.Str1192).SetStyle(columnShift + 0' typeof(long))  						.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  						.SetCell(columnShift + 2' 1' LocalizedStrings.Time).SetStyle(columnShift + 2' "HH:mm:ss.fff")  						.SetCell(columnShift + 3' 1' LocalizedStrings.Price).SetStyle(columnShift + 3' typeof(decimal))  						.SetCell(columnShift + 4' 1' LocalizedStrings.Str1341).SetStyle(columnShift + 4' typeof(decimal))  						.SetCell(columnShift + 5' 1' LocalizedStrings.Volume).SetStyle(columnShift + 5' typeof(decimal))  						.SetCell(columnShift + 6' 1' LocalizedStrings.Str128)  						.SetCell(columnShift + 7' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 7' typeof(long))  						.SetCell(columnShift + 8' 1' LocalizedStrings.Str163).SetStyle(columnShift + 8' typeof(decimal))  						.SetCell(columnShift + 9' 1' LocalizedStrings.Str135)  						.SetCell(columnShift + 10' 1' LocalizedStrings.Str1342).SetStyle(columnShift + 11' typeof(decimal))  						.SetCell(columnShift + 11' 1' LocalizedStrings.Str1343).SetStyle(columnShift + 12' typeof(decimal))  						.SetCell(columnShift + 12' 1' LocalizedStrings.Str1344).SetStyle(columnShift + 13' typeof(decimal))  						.SetCell(columnShift + 13' 1' LocalizedStrings.Str1345).SetStyle(columnShift + 14' typeof(decimal))  						.SetCell(columnShift + 14' 1' LocalizedStrings.Str862).SetStyle(columnShift + 15' typeof(decimal));    					worker  						.SetConditionalFormatting(columnShift + 10' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 11' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 12' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 13' ComparisonOperator.Less' "0"' null' Colors.Red);    					var totalPnL = 0m;  					var position = 0m;    					var queues = new Dictionary<Security' PnLQueue>();    					rowIndex = 2;  					foreach (var trade in strategy.MyTrades.ToArray())  					{  						var info = strategy.PnLManager.ProcessMessage(trade.ToMessage());    						totalPnL += info.PnL;  						position += trade.GetPosition() ?? 0;    						var queue = queues.SafeAdd(trade.Trade.Security' key => new PnLQueue(key.ToSecurityId()));    						var localInfo = queue.Process(trade.ToMessage());    						worker  							.SetCell(columnShift + 0' rowIndex' trade.Trade.Id)  							.SetCell(columnShift + 1' rowIndex' trade.Order.TransactionId)  							.SetCell(columnShift + 2' rowIndex' Format(trade.Trade.Time))  							.SetCell(columnShift + 3' rowIndex' trade.Trade.Price)  							.SetCell(columnShift + 4' rowIndex' trade.Order.Price)  							.SetCell(columnShift + 5' rowIndex' trade.Trade.Volume)  							.SetCell(columnShift + 6' rowIndex' Format(trade.Order.Direction))  							.SetCell(columnShift + 7' rowIndex' trade.Order.Id)  							.SetCell(columnShift + 8' rowIndex' trade.Slippage)  							.SetCell(columnShift + 9' rowIndex' trade.Order.Comment)  							.SetCell(columnShift + 10' rowIndex' MathHelper.Round(info.PnL' Decimals))  							.SetCell(columnShift + 11' rowIndex' MathHelper.Round(localInfo.PnL' Decimals))  							.SetCell(columnShift + 12' rowIndex' MathHelper.Round(totalPnL' Decimals))  							.SetCell(columnShift + 13' rowIndex' MathHelper.Round(queue.RealizedPnL' Decimals))  							.SetCell(columnShift + 14' rowIndex' position);    						rowIndex++;  					}    					if (IncludeOrders)  					{  						columnShift += 17;    						worker  							.SetCell(columnShift + 0' 0' LocalizedStrings.Orders)    							.SetCell(columnShift + 0' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  							.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  							.SetCell(columnShift + 2' 1' LocalizedStrings.Str128)  							.SetCell(columnShift + 3' 1' LocalizedStrings.Str1346).SetStyle(columnShift + 3' "HH:mm:ss.fff")  							.SetCell(columnShift + 4' 1' LocalizedStrings.Str1347).SetStyle(columnShift + 4' "HH:mm:ss.fff")  							.SetCell(columnShift + 5' 1' LocalizedStrings.Str1348)  							.SetCell(columnShift + 6' 1' LocalizedStrings.Price).SetStyle(columnShift + 6' typeof(decimal))  							.SetCell(columnShift + 7' 1' LocalizedStrings.Str1323).SetStyle(columnShift + 7' typeof(decimal))  							.SetCell(columnShift + 8' 1' LocalizedStrings.Str1324)  							.SetCell(columnShift + 9' 1' LocalizedStrings.State)  							.SetCell(columnShift + 10' 1' LocalizedStrings.Str1325).SetStyle(columnShift + 10' typeof(decimal))  							.SetCell(columnShift + 11' 1' LocalizedStrings.Volume).SetStyle(columnShift + 11' typeof(decimal))  							.SetCell(columnShift + 12' 1' LocalizedStrings.Type)  							.SetCell(columnShift + 13' 1' LocalizedStrings.Str1326)  							.SetCell(columnShift + 14' 1' LocalizedStrings.Str1327)  							.SetCell(columnShift + 15' 1' LocalizedStrings.Str135);    						worker  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str1329)' null' Colors.Green)  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str238)' null' Colors.Red);    						rowIndex = 2;  						foreach (var order in strategy.Orders.ToArray())  						{  							worker  								.SetCell(columnShift + 0' rowIndex' order.Id)  								.SetCell(columnShift + 1' rowIndex' order.TransactionId)  								.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  								.SetCell(columnShift + 3' rowIndex' Format(order.Time))  								.SetCell(columnShift + 4' rowIndex' Format(order.LastChangeTime))  								.SetCell(columnShift + 5' rowIndex' Format(order.LastChangeTime - order.Time))  								.SetCell(columnShift + 6' rowIndex' order.Price)  								.SetCell(columnShift + 7' rowIndex' MathHelper.Round(order.GetAveragePrice(strategy.Connector)' Decimals))  								.SetCell(columnShift + 8' rowIndex' Format(order.State))  								.SetCell(columnShift + 9' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : LocalizedStrings.Str238))  								.SetCell(columnShift + 10' rowIndex' order.Balance)  								.SetCell(columnShift + 11' rowIndex' order.Volume)  								.SetCell(columnShift + 12' rowIndex' Format(order.Type))  								.SetCell(columnShift + 13' rowIndex' Format(order.LatencyRegistration))  								.SetCell(columnShift + 14' rowIndex' Format(order.LatencyCancellation))  								.SetCell(columnShift + 15' rowIndex' order.Comment);    							rowIndex++;  						}    						var stopOrders = strategy.StopOrders.ToArray();    						if (stopOrders.Length > 0)  						{  							rowIndex += 2;    							worker  								.SetCell(columnShift + 0' rowIndex - 1' LocalizedStrings.Str1351)    								.SetCell(columnShift + 0' rowIndex' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  								.SetCell(columnShift + 1' rowIndex' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  								.SetCell(columnShift + 2' rowIndex' LocalizedStrings.Str128)  								.SetCell(columnShift + 3' rowIndex' LocalizedStrings.Time).SetStyle(columnShift + 3' "HH:mm:ss.fff")  								.SetCell(columnShift + 4' rowIndex' LocalizedStrings.Price).SetStyle(columnShift + 4' typeof(decimal))  								.SetCell(columnShift + 5' rowIndex' LocalizedStrings.Str1324)  								.SetCell(columnShift + 6' rowIndex' LocalizedStrings.State)  								.SetCell(columnShift + 7' rowIndex' LocalizedStrings.Volume).SetStyle(columnShift + 7' typeof(decimal))  								.SetCell(columnShift + 8' rowIndex' LocalizedStrings.Str1326)  								.SetCell(columnShift + 9' rowIndex' LocalizedStrings.Str1327)  								//.SetCell(columnShift + 10' rowIndex' LocalizedStrings.Str1352).SetStyle(columnShift + 9' typeof(long))  								;    							var stopParams = stopOrders[0].Condition.Parameters.Keys.ToArray();    							for (var i = 0; i < stopParams.Length; i++)  								worker.SetCell(columnShift + 11 + i' rowIndex' stopParams[i]);    							foreach (var order in stopOrders)  							{  								worker  									.SetCell(columnShift + 0' rowIndex' order.Id)  									.SetCell(columnShift + 1' rowIndex' order.TransactionId)  									.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  									.SetCell(columnShift + 3' rowIndex' Format(order.Time))  									.SetCell(columnShift + 4' rowIndex' order.Price)  									.SetCell(columnShift + 5' rowIndex' Format(order.State))  									.SetCell(columnShift + 6' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : string.Empty))  									.SetCell(columnShift + 7' rowIndex' order.Volume)  									.SetCell(columnShift + 8' rowIndex' Format(order.LatencyRegistration))  									.SetCell(columnShift + 9' rowIndex' Format(order.LatencyCancellation))  									//.SetCell(columnShift + 10' rowIndex' order.DerivedOrder != null ? (object)order.DerivedOrder.Id : string.Empty)  									;    								for (var i = 0; i < stopParams.Length; i++)  									worker.SetCell(columnShift + 11 + i' rowIndex' order.Condition.Parameters[stopParams[i]] ?? string.Empty);    								rowIndex++;  							}  						}  					}  				}    				worker.Save(FileName' true);  			}
Magic Number,StockSharp.Algo.Strategies.Reporting,ExcelStrategyReport,C:\repos\stocksharp_stocksharp\Algo\Strategies\Reporting\ExcelStrategyReport.cs,Generate,The following statement contains a magic number: using (var worker = hasTemplate ? new ExcelWorker() : new ExcelWorker(Template))  			{  				foreach (var strategy in Strategies)  				{  					if (Template.IsEmpty())  					{  						worker.RenameSheet(strategy.Name);  					}  					else  					{  						if (worker.ContainsSheet(strategy.Name))  							worker.AddSheet(strategy.Name);  					}    					worker  						.SetCell(0' 0' LocalizedStrings.Str1331)    						.SetCell(0' 1' LocalizedStrings.Security + ":")  						.SetCell(1' 1' strategy.Security != null ? strategy.Security.Id : string.Empty)    						.SetCell(0' 2' LocalizedStrings.Portfolio + ":")  						.SetCell(1' 2' strategy.Portfolio != null ? strategy.Portfolio.Name : string.Empty)    						.SetCell(0' 3' LocalizedStrings.Str1334)  						.SetCell(1' 3' Format(strategy.TotalWorkingTime))    						.SetCell(0' 4' LocalizedStrings.Str1335)  						//.SetCell(1' 4' FormatTime(base.Strategy.TotalCPUTime))    						.SetCell(0' 5' LocalizedStrings.Str862 + ":")  						.SetCell(1' 5' strategy.Position)    						.SetCell(0' 6' LocalizedStrings.PnL + ":")  						.SetCell(1' 6' strategy.PnL)    						.SetCell(0' 7' LocalizedStrings.Str159 + ":")  						.SetCell(1' 7' strategy.Commission)    						.SetCell(0' 8' LocalizedStrings.Str163 + ":")  						.SetCell(1' 8' strategy.Slippage)    						.SetCell(0' 9' LocalizedStrings.Str161 + ":")  						.SetCell(1' 9' Format(strategy.Latency));    					var rowIndex = 11;    					foreach (var parameter in strategy.StatisticManager.Parameters.SyncGet(c => c.ToArray()))  					{  						var value = parameter.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' parameter.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					rowIndex += 2;  					worker.SetCell(0' rowIndex' LocalizedStrings.Str1340);  					rowIndex++;    					foreach (var strategyParam in strategy.Parameters.CachedValues)  					{  						var value = strategyParam.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' strategyParam.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					//rowIndex += 2;  					//worker.SetCell(0' rowIndex' "Комиссия по типам:");  					//rowIndex++;    					//foreach (var group in Strategy.CommissionManager.Rules.SyncGet(c => c.ToArray()).GroupBy(c => c.GetType().GetDisplayName()))  					//{  					//	var commission = group.Sum(r => r.Commission);    					//	if (commission == 0)  					//		continue;    					//	worker  					//		.SetCell(0' rowIndex' group.Key)  					//		.SetCell(1' rowIndex' commission);    					//	rowIndex++;  					//}    					var columnShift = 3;    					worker  						.SetCell(columnShift + 0' 0' LocalizedStrings.Str985)    						.SetCell(columnShift + 0' 1' LocalizedStrings.Str1192).SetStyle(columnShift + 0' typeof(long))  						.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  						.SetCell(columnShift + 2' 1' LocalizedStrings.Time).SetStyle(columnShift + 2' "HH:mm:ss.fff")  						.SetCell(columnShift + 3' 1' LocalizedStrings.Price).SetStyle(columnShift + 3' typeof(decimal))  						.SetCell(columnShift + 4' 1' LocalizedStrings.Str1341).SetStyle(columnShift + 4' typeof(decimal))  						.SetCell(columnShift + 5' 1' LocalizedStrings.Volume).SetStyle(columnShift + 5' typeof(decimal))  						.SetCell(columnShift + 6' 1' LocalizedStrings.Str128)  						.SetCell(columnShift + 7' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 7' typeof(long))  						.SetCell(columnShift + 8' 1' LocalizedStrings.Str163).SetStyle(columnShift + 8' typeof(decimal))  						.SetCell(columnShift + 9' 1' LocalizedStrings.Str135)  						.SetCell(columnShift + 10' 1' LocalizedStrings.Str1342).SetStyle(columnShift + 11' typeof(decimal))  						.SetCell(columnShift + 11' 1' LocalizedStrings.Str1343).SetStyle(columnShift + 12' typeof(decimal))  						.SetCell(columnShift + 12' 1' LocalizedStrings.Str1344).SetStyle(columnShift + 13' typeof(decimal))  						.SetCell(columnShift + 13' 1' LocalizedStrings.Str1345).SetStyle(columnShift + 14' typeof(decimal))  						.SetCell(columnShift + 14' 1' LocalizedStrings.Str862).SetStyle(columnShift + 15' typeof(decimal));    					worker  						.SetConditionalFormatting(columnShift + 10' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 11' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 12' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 13' ComparisonOperator.Less' "0"' null' Colors.Red);    					var totalPnL = 0m;  					var position = 0m;    					var queues = new Dictionary<Security' PnLQueue>();    					rowIndex = 2;  					foreach (var trade in strategy.MyTrades.ToArray())  					{  						var info = strategy.PnLManager.ProcessMessage(trade.ToMessage());    						totalPnL += info.PnL;  						position += trade.GetPosition() ?? 0;    						var queue = queues.SafeAdd(trade.Trade.Security' key => new PnLQueue(key.ToSecurityId()));    						var localInfo = queue.Process(trade.ToMessage());    						worker  							.SetCell(columnShift + 0' rowIndex' trade.Trade.Id)  							.SetCell(columnShift + 1' rowIndex' trade.Order.TransactionId)  							.SetCell(columnShift + 2' rowIndex' Format(trade.Trade.Time))  							.SetCell(columnShift + 3' rowIndex' trade.Trade.Price)  							.SetCell(columnShift + 4' rowIndex' trade.Order.Price)  							.SetCell(columnShift + 5' rowIndex' trade.Trade.Volume)  							.SetCell(columnShift + 6' rowIndex' Format(trade.Order.Direction))  							.SetCell(columnShift + 7' rowIndex' trade.Order.Id)  							.SetCell(columnShift + 8' rowIndex' trade.Slippage)  							.SetCell(columnShift + 9' rowIndex' trade.Order.Comment)  							.SetCell(columnShift + 10' rowIndex' MathHelper.Round(info.PnL' Decimals))  							.SetCell(columnShift + 11' rowIndex' MathHelper.Round(localInfo.PnL' Decimals))  							.SetCell(columnShift + 12' rowIndex' MathHelper.Round(totalPnL' Decimals))  							.SetCell(columnShift + 13' rowIndex' MathHelper.Round(queue.RealizedPnL' Decimals))  							.SetCell(columnShift + 14' rowIndex' position);    						rowIndex++;  					}    					if (IncludeOrders)  					{  						columnShift += 17;    						worker  							.SetCell(columnShift + 0' 0' LocalizedStrings.Orders)    							.SetCell(columnShift + 0' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  							.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  							.SetCell(columnShift + 2' 1' LocalizedStrings.Str128)  							.SetCell(columnShift + 3' 1' LocalizedStrings.Str1346).SetStyle(columnShift + 3' "HH:mm:ss.fff")  							.SetCell(columnShift + 4' 1' LocalizedStrings.Str1347).SetStyle(columnShift + 4' "HH:mm:ss.fff")  							.SetCell(columnShift + 5' 1' LocalizedStrings.Str1348)  							.SetCell(columnShift + 6' 1' LocalizedStrings.Price).SetStyle(columnShift + 6' typeof(decimal))  							.SetCell(columnShift + 7' 1' LocalizedStrings.Str1323).SetStyle(columnShift + 7' typeof(decimal))  							.SetCell(columnShift + 8' 1' LocalizedStrings.Str1324)  							.SetCell(columnShift + 9' 1' LocalizedStrings.State)  							.SetCell(columnShift + 10' 1' LocalizedStrings.Str1325).SetStyle(columnShift + 10' typeof(decimal))  							.SetCell(columnShift + 11' 1' LocalizedStrings.Volume).SetStyle(columnShift + 11' typeof(decimal))  							.SetCell(columnShift + 12' 1' LocalizedStrings.Type)  							.SetCell(columnShift + 13' 1' LocalizedStrings.Str1326)  							.SetCell(columnShift + 14' 1' LocalizedStrings.Str1327)  							.SetCell(columnShift + 15' 1' LocalizedStrings.Str135);    						worker  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str1329)' null' Colors.Green)  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str238)' null' Colors.Red);    						rowIndex = 2;  						foreach (var order in strategy.Orders.ToArray())  						{  							worker  								.SetCell(columnShift + 0' rowIndex' order.Id)  								.SetCell(columnShift + 1' rowIndex' order.TransactionId)  								.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  								.SetCell(columnShift + 3' rowIndex' Format(order.Time))  								.SetCell(columnShift + 4' rowIndex' Format(order.LastChangeTime))  								.SetCell(columnShift + 5' rowIndex' Format(order.LastChangeTime - order.Time))  								.SetCell(columnShift + 6' rowIndex' order.Price)  								.SetCell(columnShift + 7' rowIndex' MathHelper.Round(order.GetAveragePrice(strategy.Connector)' Decimals))  								.SetCell(columnShift + 8' rowIndex' Format(order.State))  								.SetCell(columnShift + 9' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : LocalizedStrings.Str238))  								.SetCell(columnShift + 10' rowIndex' order.Balance)  								.SetCell(columnShift + 11' rowIndex' order.Volume)  								.SetCell(columnShift + 12' rowIndex' Format(order.Type))  								.SetCell(columnShift + 13' rowIndex' Format(order.LatencyRegistration))  								.SetCell(columnShift + 14' rowIndex' Format(order.LatencyCancellation))  								.SetCell(columnShift + 15' rowIndex' order.Comment);    							rowIndex++;  						}    						var stopOrders = strategy.StopOrders.ToArray();    						if (stopOrders.Length > 0)  						{  							rowIndex += 2;    							worker  								.SetCell(columnShift + 0' rowIndex - 1' LocalizedStrings.Str1351)    								.SetCell(columnShift + 0' rowIndex' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  								.SetCell(columnShift + 1' rowIndex' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  								.SetCell(columnShift + 2' rowIndex' LocalizedStrings.Str128)  								.SetCell(columnShift + 3' rowIndex' LocalizedStrings.Time).SetStyle(columnShift + 3' "HH:mm:ss.fff")  								.SetCell(columnShift + 4' rowIndex' LocalizedStrings.Price).SetStyle(columnShift + 4' typeof(decimal))  								.SetCell(columnShift + 5' rowIndex' LocalizedStrings.Str1324)  								.SetCell(columnShift + 6' rowIndex' LocalizedStrings.State)  								.SetCell(columnShift + 7' rowIndex' LocalizedStrings.Volume).SetStyle(columnShift + 7' typeof(decimal))  								.SetCell(columnShift + 8' rowIndex' LocalizedStrings.Str1326)  								.SetCell(columnShift + 9' rowIndex' LocalizedStrings.Str1327)  								//.SetCell(columnShift + 10' rowIndex' LocalizedStrings.Str1352).SetStyle(columnShift + 9' typeof(long))  								;    							var stopParams = stopOrders[0].Condition.Parameters.Keys.ToArray();    							for (var i = 0; i < stopParams.Length; i++)  								worker.SetCell(columnShift + 11 + i' rowIndex' stopParams[i]);    							foreach (var order in stopOrders)  							{  								worker  									.SetCell(columnShift + 0' rowIndex' order.Id)  									.SetCell(columnShift + 1' rowIndex' order.TransactionId)  									.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  									.SetCell(columnShift + 3' rowIndex' Format(order.Time))  									.SetCell(columnShift + 4' rowIndex' order.Price)  									.SetCell(columnShift + 5' rowIndex' Format(order.State))  									.SetCell(columnShift + 6' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : string.Empty))  									.SetCell(columnShift + 7' rowIndex' order.Volume)  									.SetCell(columnShift + 8' rowIndex' Format(order.LatencyRegistration))  									.SetCell(columnShift + 9' rowIndex' Format(order.LatencyCancellation))  									//.SetCell(columnShift + 10' rowIndex' order.DerivedOrder != null ? (object)order.DerivedOrder.Id : string.Empty)  									;    								for (var i = 0; i < stopParams.Length; i++)  									worker.SetCell(columnShift + 11 + i' rowIndex' order.Condition.Parameters[stopParams[i]] ?? string.Empty);    								rowIndex++;  							}  						}  					}  				}    				worker.Save(FileName' true);  			}
Magic Number,StockSharp.Algo.Strategies.Reporting,ExcelStrategyReport,C:\repos\stocksharp_stocksharp\Algo\Strategies\Reporting\ExcelStrategyReport.cs,Generate,The following statement contains a magic number: using (var worker = hasTemplate ? new ExcelWorker() : new ExcelWorker(Template))  			{  				foreach (var strategy in Strategies)  				{  					if (Template.IsEmpty())  					{  						worker.RenameSheet(strategy.Name);  					}  					else  					{  						if (worker.ContainsSheet(strategy.Name))  							worker.AddSheet(strategy.Name);  					}    					worker  						.SetCell(0' 0' LocalizedStrings.Str1331)    						.SetCell(0' 1' LocalizedStrings.Security + ":")  						.SetCell(1' 1' strategy.Security != null ? strategy.Security.Id : string.Empty)    						.SetCell(0' 2' LocalizedStrings.Portfolio + ":")  						.SetCell(1' 2' strategy.Portfolio != null ? strategy.Portfolio.Name : string.Empty)    						.SetCell(0' 3' LocalizedStrings.Str1334)  						.SetCell(1' 3' Format(strategy.TotalWorkingTime))    						.SetCell(0' 4' LocalizedStrings.Str1335)  						//.SetCell(1' 4' FormatTime(base.Strategy.TotalCPUTime))    						.SetCell(0' 5' LocalizedStrings.Str862 + ":")  						.SetCell(1' 5' strategy.Position)    						.SetCell(0' 6' LocalizedStrings.PnL + ":")  						.SetCell(1' 6' strategy.PnL)    						.SetCell(0' 7' LocalizedStrings.Str159 + ":")  						.SetCell(1' 7' strategy.Commission)    						.SetCell(0' 8' LocalizedStrings.Str163 + ":")  						.SetCell(1' 8' strategy.Slippage)    						.SetCell(0' 9' LocalizedStrings.Str161 + ":")  						.SetCell(1' 9' Format(strategy.Latency));    					var rowIndex = 11;    					foreach (var parameter in strategy.StatisticManager.Parameters.SyncGet(c => c.ToArray()))  					{  						var value = parameter.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' parameter.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					rowIndex += 2;  					worker.SetCell(0' rowIndex' LocalizedStrings.Str1340);  					rowIndex++;    					foreach (var strategyParam in strategy.Parameters.CachedValues)  					{  						var value = strategyParam.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' strategyParam.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					//rowIndex += 2;  					//worker.SetCell(0' rowIndex' "Комиссия по типам:");  					//rowIndex++;    					//foreach (var group in Strategy.CommissionManager.Rules.SyncGet(c => c.ToArray()).GroupBy(c => c.GetType().GetDisplayName()))  					//{  					//	var commission = group.Sum(r => r.Commission);    					//	if (commission == 0)  					//		continue;    					//	worker  					//		.SetCell(0' rowIndex' group.Key)  					//		.SetCell(1' rowIndex' commission);    					//	rowIndex++;  					//}    					var columnShift = 3;    					worker  						.SetCell(columnShift + 0' 0' LocalizedStrings.Str985)    						.SetCell(columnShift + 0' 1' LocalizedStrings.Str1192).SetStyle(columnShift + 0' typeof(long))  						.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  						.SetCell(columnShift + 2' 1' LocalizedStrings.Time).SetStyle(columnShift + 2' "HH:mm:ss.fff")  						.SetCell(columnShift + 3' 1' LocalizedStrings.Price).SetStyle(columnShift + 3' typeof(decimal))  						.SetCell(columnShift + 4' 1' LocalizedStrings.Str1341).SetStyle(columnShift + 4' typeof(decimal))  						.SetCell(columnShift + 5' 1' LocalizedStrings.Volume).SetStyle(columnShift + 5' typeof(decimal))  						.SetCell(columnShift + 6' 1' LocalizedStrings.Str128)  						.SetCell(columnShift + 7' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 7' typeof(long))  						.SetCell(columnShift + 8' 1' LocalizedStrings.Str163).SetStyle(columnShift + 8' typeof(decimal))  						.SetCell(columnShift + 9' 1' LocalizedStrings.Str135)  						.SetCell(columnShift + 10' 1' LocalizedStrings.Str1342).SetStyle(columnShift + 11' typeof(decimal))  						.SetCell(columnShift + 11' 1' LocalizedStrings.Str1343).SetStyle(columnShift + 12' typeof(decimal))  						.SetCell(columnShift + 12' 1' LocalizedStrings.Str1344).SetStyle(columnShift + 13' typeof(decimal))  						.SetCell(columnShift + 13' 1' LocalizedStrings.Str1345).SetStyle(columnShift + 14' typeof(decimal))  						.SetCell(columnShift + 14' 1' LocalizedStrings.Str862).SetStyle(columnShift + 15' typeof(decimal));    					worker  						.SetConditionalFormatting(columnShift + 10' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 11' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 12' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 13' ComparisonOperator.Less' "0"' null' Colors.Red);    					var totalPnL = 0m;  					var position = 0m;    					var queues = new Dictionary<Security' PnLQueue>();    					rowIndex = 2;  					foreach (var trade in strategy.MyTrades.ToArray())  					{  						var info = strategy.PnLManager.ProcessMessage(trade.ToMessage());    						totalPnL += info.PnL;  						position += trade.GetPosition() ?? 0;    						var queue = queues.SafeAdd(trade.Trade.Security' key => new PnLQueue(key.ToSecurityId()));    						var localInfo = queue.Process(trade.ToMessage());    						worker  							.SetCell(columnShift + 0' rowIndex' trade.Trade.Id)  							.SetCell(columnShift + 1' rowIndex' trade.Order.TransactionId)  							.SetCell(columnShift + 2' rowIndex' Format(trade.Trade.Time))  							.SetCell(columnShift + 3' rowIndex' trade.Trade.Price)  							.SetCell(columnShift + 4' rowIndex' trade.Order.Price)  							.SetCell(columnShift + 5' rowIndex' trade.Trade.Volume)  							.SetCell(columnShift + 6' rowIndex' Format(trade.Order.Direction))  							.SetCell(columnShift + 7' rowIndex' trade.Order.Id)  							.SetCell(columnShift + 8' rowIndex' trade.Slippage)  							.SetCell(columnShift + 9' rowIndex' trade.Order.Comment)  							.SetCell(columnShift + 10' rowIndex' MathHelper.Round(info.PnL' Decimals))  							.SetCell(columnShift + 11' rowIndex' MathHelper.Round(localInfo.PnL' Decimals))  							.SetCell(columnShift + 12' rowIndex' MathHelper.Round(totalPnL' Decimals))  							.SetCell(columnShift + 13' rowIndex' MathHelper.Round(queue.RealizedPnL' Decimals))  							.SetCell(columnShift + 14' rowIndex' position);    						rowIndex++;  					}    					if (IncludeOrders)  					{  						columnShift += 17;    						worker  							.SetCell(columnShift + 0' 0' LocalizedStrings.Orders)    							.SetCell(columnShift + 0' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  							.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  							.SetCell(columnShift + 2' 1' LocalizedStrings.Str128)  							.SetCell(columnShift + 3' 1' LocalizedStrings.Str1346).SetStyle(columnShift + 3' "HH:mm:ss.fff")  							.SetCell(columnShift + 4' 1' LocalizedStrings.Str1347).SetStyle(columnShift + 4' "HH:mm:ss.fff")  							.SetCell(columnShift + 5' 1' LocalizedStrings.Str1348)  							.SetCell(columnShift + 6' 1' LocalizedStrings.Price).SetStyle(columnShift + 6' typeof(decimal))  							.SetCell(columnShift + 7' 1' LocalizedStrings.Str1323).SetStyle(columnShift + 7' typeof(decimal))  							.SetCell(columnShift + 8' 1' LocalizedStrings.Str1324)  							.SetCell(columnShift + 9' 1' LocalizedStrings.State)  							.SetCell(columnShift + 10' 1' LocalizedStrings.Str1325).SetStyle(columnShift + 10' typeof(decimal))  							.SetCell(columnShift + 11' 1' LocalizedStrings.Volume).SetStyle(columnShift + 11' typeof(decimal))  							.SetCell(columnShift + 12' 1' LocalizedStrings.Type)  							.SetCell(columnShift + 13' 1' LocalizedStrings.Str1326)  							.SetCell(columnShift + 14' 1' LocalizedStrings.Str1327)  							.SetCell(columnShift + 15' 1' LocalizedStrings.Str135);    						worker  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str1329)' null' Colors.Green)  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str238)' null' Colors.Red);    						rowIndex = 2;  						foreach (var order in strategy.Orders.ToArray())  						{  							worker  								.SetCell(columnShift + 0' rowIndex' order.Id)  								.SetCell(columnShift + 1' rowIndex' order.TransactionId)  								.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  								.SetCell(columnShift + 3' rowIndex' Format(order.Time))  								.SetCell(columnShift + 4' rowIndex' Format(order.LastChangeTime))  								.SetCell(columnShift + 5' rowIndex' Format(order.LastChangeTime - order.Time))  								.SetCell(columnShift + 6' rowIndex' order.Price)  								.SetCell(columnShift + 7' rowIndex' MathHelper.Round(order.GetAveragePrice(strategy.Connector)' Decimals))  								.SetCell(columnShift + 8' rowIndex' Format(order.State))  								.SetCell(columnShift + 9' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : LocalizedStrings.Str238))  								.SetCell(columnShift + 10' rowIndex' order.Balance)  								.SetCell(columnShift + 11' rowIndex' order.Volume)  								.SetCell(columnShift + 12' rowIndex' Format(order.Type))  								.SetCell(columnShift + 13' rowIndex' Format(order.LatencyRegistration))  								.SetCell(columnShift + 14' rowIndex' Format(order.LatencyCancellation))  								.SetCell(columnShift + 15' rowIndex' order.Comment);    							rowIndex++;  						}    						var stopOrders = strategy.StopOrders.ToArray();    						if (stopOrders.Length > 0)  						{  							rowIndex += 2;    							worker  								.SetCell(columnShift + 0' rowIndex - 1' LocalizedStrings.Str1351)    								.SetCell(columnShift + 0' rowIndex' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  								.SetCell(columnShift + 1' rowIndex' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  								.SetCell(columnShift + 2' rowIndex' LocalizedStrings.Str128)  								.SetCell(columnShift + 3' rowIndex' LocalizedStrings.Time).SetStyle(columnShift + 3' "HH:mm:ss.fff")  								.SetCell(columnShift + 4' rowIndex' LocalizedStrings.Price).SetStyle(columnShift + 4' typeof(decimal))  								.SetCell(columnShift + 5' rowIndex' LocalizedStrings.Str1324)  								.SetCell(columnShift + 6' rowIndex' LocalizedStrings.State)  								.SetCell(columnShift + 7' rowIndex' LocalizedStrings.Volume).SetStyle(columnShift + 7' typeof(decimal))  								.SetCell(columnShift + 8' rowIndex' LocalizedStrings.Str1326)  								.SetCell(columnShift + 9' rowIndex' LocalizedStrings.Str1327)  								//.SetCell(columnShift + 10' rowIndex' LocalizedStrings.Str1352).SetStyle(columnShift + 9' typeof(long))  								;    							var stopParams = stopOrders[0].Condition.Parameters.Keys.ToArray();    							for (var i = 0; i < stopParams.Length; i++)  								worker.SetCell(columnShift + 11 + i' rowIndex' stopParams[i]);    							foreach (var order in stopOrders)  							{  								worker  									.SetCell(columnShift + 0' rowIndex' order.Id)  									.SetCell(columnShift + 1' rowIndex' order.TransactionId)  									.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  									.SetCell(columnShift + 3' rowIndex' Format(order.Time))  									.SetCell(columnShift + 4' rowIndex' order.Price)  									.SetCell(columnShift + 5' rowIndex' Format(order.State))  									.SetCell(columnShift + 6' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : string.Empty))  									.SetCell(columnShift + 7' rowIndex' order.Volume)  									.SetCell(columnShift + 8' rowIndex' Format(order.LatencyRegistration))  									.SetCell(columnShift + 9' rowIndex' Format(order.LatencyCancellation))  									//.SetCell(columnShift + 10' rowIndex' order.DerivedOrder != null ? (object)order.DerivedOrder.Id : string.Empty)  									;    								for (var i = 0; i < stopParams.Length; i++)  									worker.SetCell(columnShift + 11 + i' rowIndex' order.Condition.Parameters[stopParams[i]] ?? string.Empty);    								rowIndex++;  							}  						}  					}  				}    				worker.Save(FileName' true);  			}
Magic Number,StockSharp.Algo.Strategies.Reporting,ExcelStrategyReport,C:\repos\stocksharp_stocksharp\Algo\Strategies\Reporting\ExcelStrategyReport.cs,Generate,The following statement contains a magic number: using (var worker = hasTemplate ? new ExcelWorker() : new ExcelWorker(Template))  			{  				foreach (var strategy in Strategies)  				{  					if (Template.IsEmpty())  					{  						worker.RenameSheet(strategy.Name);  					}  					else  					{  						if (worker.ContainsSheet(strategy.Name))  							worker.AddSheet(strategy.Name);  					}    					worker  						.SetCell(0' 0' LocalizedStrings.Str1331)    						.SetCell(0' 1' LocalizedStrings.Security + ":")  						.SetCell(1' 1' strategy.Security != null ? strategy.Security.Id : string.Empty)    						.SetCell(0' 2' LocalizedStrings.Portfolio + ":")  						.SetCell(1' 2' strategy.Portfolio != null ? strategy.Portfolio.Name : string.Empty)    						.SetCell(0' 3' LocalizedStrings.Str1334)  						.SetCell(1' 3' Format(strategy.TotalWorkingTime))    						.SetCell(0' 4' LocalizedStrings.Str1335)  						//.SetCell(1' 4' FormatTime(base.Strategy.TotalCPUTime))    						.SetCell(0' 5' LocalizedStrings.Str862 + ":")  						.SetCell(1' 5' strategy.Position)    						.SetCell(0' 6' LocalizedStrings.PnL + ":")  						.SetCell(1' 6' strategy.PnL)    						.SetCell(0' 7' LocalizedStrings.Str159 + ":")  						.SetCell(1' 7' strategy.Commission)    						.SetCell(0' 8' LocalizedStrings.Str163 + ":")  						.SetCell(1' 8' strategy.Slippage)    						.SetCell(0' 9' LocalizedStrings.Str161 + ":")  						.SetCell(1' 9' Format(strategy.Latency));    					var rowIndex = 11;    					foreach (var parameter in strategy.StatisticManager.Parameters.SyncGet(c => c.ToArray()))  					{  						var value = parameter.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' parameter.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					rowIndex += 2;  					worker.SetCell(0' rowIndex' LocalizedStrings.Str1340);  					rowIndex++;    					foreach (var strategyParam in strategy.Parameters.CachedValues)  					{  						var value = strategyParam.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' strategyParam.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					//rowIndex += 2;  					//worker.SetCell(0' rowIndex' "Комиссия по типам:");  					//rowIndex++;    					//foreach (var group in Strategy.CommissionManager.Rules.SyncGet(c => c.ToArray()).GroupBy(c => c.GetType().GetDisplayName()))  					//{  					//	var commission = group.Sum(r => r.Commission);    					//	if (commission == 0)  					//		continue;    					//	worker  					//		.SetCell(0' rowIndex' group.Key)  					//		.SetCell(1' rowIndex' commission);    					//	rowIndex++;  					//}    					var columnShift = 3;    					worker  						.SetCell(columnShift + 0' 0' LocalizedStrings.Str985)    						.SetCell(columnShift + 0' 1' LocalizedStrings.Str1192).SetStyle(columnShift + 0' typeof(long))  						.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  						.SetCell(columnShift + 2' 1' LocalizedStrings.Time).SetStyle(columnShift + 2' "HH:mm:ss.fff")  						.SetCell(columnShift + 3' 1' LocalizedStrings.Price).SetStyle(columnShift + 3' typeof(decimal))  						.SetCell(columnShift + 4' 1' LocalizedStrings.Str1341).SetStyle(columnShift + 4' typeof(decimal))  						.SetCell(columnShift + 5' 1' LocalizedStrings.Volume).SetStyle(columnShift + 5' typeof(decimal))  						.SetCell(columnShift + 6' 1' LocalizedStrings.Str128)  						.SetCell(columnShift + 7' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 7' typeof(long))  						.SetCell(columnShift + 8' 1' LocalizedStrings.Str163).SetStyle(columnShift + 8' typeof(decimal))  						.SetCell(columnShift + 9' 1' LocalizedStrings.Str135)  						.SetCell(columnShift + 10' 1' LocalizedStrings.Str1342).SetStyle(columnShift + 11' typeof(decimal))  						.SetCell(columnShift + 11' 1' LocalizedStrings.Str1343).SetStyle(columnShift + 12' typeof(decimal))  						.SetCell(columnShift + 12' 1' LocalizedStrings.Str1344).SetStyle(columnShift + 13' typeof(decimal))  						.SetCell(columnShift + 13' 1' LocalizedStrings.Str1345).SetStyle(columnShift + 14' typeof(decimal))  						.SetCell(columnShift + 14' 1' LocalizedStrings.Str862).SetStyle(columnShift + 15' typeof(decimal));    					worker  						.SetConditionalFormatting(columnShift + 10' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 11' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 12' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 13' ComparisonOperator.Less' "0"' null' Colors.Red);    					var totalPnL = 0m;  					var position = 0m;    					var queues = new Dictionary<Security' PnLQueue>();    					rowIndex = 2;  					foreach (var trade in strategy.MyTrades.ToArray())  					{  						var info = strategy.PnLManager.ProcessMessage(trade.ToMessage());    						totalPnL += info.PnL;  						position += trade.GetPosition() ?? 0;    						var queue = queues.SafeAdd(trade.Trade.Security' key => new PnLQueue(key.ToSecurityId()));    						var localInfo = queue.Process(trade.ToMessage());    						worker  							.SetCell(columnShift + 0' rowIndex' trade.Trade.Id)  							.SetCell(columnShift + 1' rowIndex' trade.Order.TransactionId)  							.SetCell(columnShift + 2' rowIndex' Format(trade.Trade.Time))  							.SetCell(columnShift + 3' rowIndex' trade.Trade.Price)  							.SetCell(columnShift + 4' rowIndex' trade.Order.Price)  							.SetCell(columnShift + 5' rowIndex' trade.Trade.Volume)  							.SetCell(columnShift + 6' rowIndex' Format(trade.Order.Direction))  							.SetCell(columnShift + 7' rowIndex' trade.Order.Id)  							.SetCell(columnShift + 8' rowIndex' trade.Slippage)  							.SetCell(columnShift + 9' rowIndex' trade.Order.Comment)  							.SetCell(columnShift + 10' rowIndex' MathHelper.Round(info.PnL' Decimals))  							.SetCell(columnShift + 11' rowIndex' MathHelper.Round(localInfo.PnL' Decimals))  							.SetCell(columnShift + 12' rowIndex' MathHelper.Round(totalPnL' Decimals))  							.SetCell(columnShift + 13' rowIndex' MathHelper.Round(queue.RealizedPnL' Decimals))  							.SetCell(columnShift + 14' rowIndex' position);    						rowIndex++;  					}    					if (IncludeOrders)  					{  						columnShift += 17;    						worker  							.SetCell(columnShift + 0' 0' LocalizedStrings.Orders)    							.SetCell(columnShift + 0' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  							.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  							.SetCell(columnShift + 2' 1' LocalizedStrings.Str128)  							.SetCell(columnShift + 3' 1' LocalizedStrings.Str1346).SetStyle(columnShift + 3' "HH:mm:ss.fff")  							.SetCell(columnShift + 4' 1' LocalizedStrings.Str1347).SetStyle(columnShift + 4' "HH:mm:ss.fff")  							.SetCell(columnShift + 5' 1' LocalizedStrings.Str1348)  							.SetCell(columnShift + 6' 1' LocalizedStrings.Price).SetStyle(columnShift + 6' typeof(decimal))  							.SetCell(columnShift + 7' 1' LocalizedStrings.Str1323).SetStyle(columnShift + 7' typeof(decimal))  							.SetCell(columnShift + 8' 1' LocalizedStrings.Str1324)  							.SetCell(columnShift + 9' 1' LocalizedStrings.State)  							.SetCell(columnShift + 10' 1' LocalizedStrings.Str1325).SetStyle(columnShift + 10' typeof(decimal))  							.SetCell(columnShift + 11' 1' LocalizedStrings.Volume).SetStyle(columnShift + 11' typeof(decimal))  							.SetCell(columnShift + 12' 1' LocalizedStrings.Type)  							.SetCell(columnShift + 13' 1' LocalizedStrings.Str1326)  							.SetCell(columnShift + 14' 1' LocalizedStrings.Str1327)  							.SetCell(columnShift + 15' 1' LocalizedStrings.Str135);    						worker  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str1329)' null' Colors.Green)  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str238)' null' Colors.Red);    						rowIndex = 2;  						foreach (var order in strategy.Orders.ToArray())  						{  							worker  								.SetCell(columnShift + 0' rowIndex' order.Id)  								.SetCell(columnShift + 1' rowIndex' order.TransactionId)  								.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  								.SetCell(columnShift + 3' rowIndex' Format(order.Time))  								.SetCell(columnShift + 4' rowIndex' Format(order.LastChangeTime))  								.SetCell(columnShift + 5' rowIndex' Format(order.LastChangeTime - order.Time))  								.SetCell(columnShift + 6' rowIndex' order.Price)  								.SetCell(columnShift + 7' rowIndex' MathHelper.Round(order.GetAveragePrice(strategy.Connector)' Decimals))  								.SetCell(columnShift + 8' rowIndex' Format(order.State))  								.SetCell(columnShift + 9' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : LocalizedStrings.Str238))  								.SetCell(columnShift + 10' rowIndex' order.Balance)  								.SetCell(columnShift + 11' rowIndex' order.Volume)  								.SetCell(columnShift + 12' rowIndex' Format(order.Type))  								.SetCell(columnShift + 13' rowIndex' Format(order.LatencyRegistration))  								.SetCell(columnShift + 14' rowIndex' Format(order.LatencyCancellation))  								.SetCell(columnShift + 15' rowIndex' order.Comment);    							rowIndex++;  						}    						var stopOrders = strategy.StopOrders.ToArray();    						if (stopOrders.Length > 0)  						{  							rowIndex += 2;    							worker  								.SetCell(columnShift + 0' rowIndex - 1' LocalizedStrings.Str1351)    								.SetCell(columnShift + 0' rowIndex' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  								.SetCell(columnShift + 1' rowIndex' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  								.SetCell(columnShift + 2' rowIndex' LocalizedStrings.Str128)  								.SetCell(columnShift + 3' rowIndex' LocalizedStrings.Time).SetStyle(columnShift + 3' "HH:mm:ss.fff")  								.SetCell(columnShift + 4' rowIndex' LocalizedStrings.Price).SetStyle(columnShift + 4' typeof(decimal))  								.SetCell(columnShift + 5' rowIndex' LocalizedStrings.Str1324)  								.SetCell(columnShift + 6' rowIndex' LocalizedStrings.State)  								.SetCell(columnShift + 7' rowIndex' LocalizedStrings.Volume).SetStyle(columnShift + 7' typeof(decimal))  								.SetCell(columnShift + 8' rowIndex' LocalizedStrings.Str1326)  								.SetCell(columnShift + 9' rowIndex' LocalizedStrings.Str1327)  								//.SetCell(columnShift + 10' rowIndex' LocalizedStrings.Str1352).SetStyle(columnShift + 9' typeof(long))  								;    							var stopParams = stopOrders[0].Condition.Parameters.Keys.ToArray();    							for (var i = 0; i < stopParams.Length; i++)  								worker.SetCell(columnShift + 11 + i' rowIndex' stopParams[i]);    							foreach (var order in stopOrders)  							{  								worker  									.SetCell(columnShift + 0' rowIndex' order.Id)  									.SetCell(columnShift + 1' rowIndex' order.TransactionId)  									.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  									.SetCell(columnShift + 3' rowIndex' Format(order.Time))  									.SetCell(columnShift + 4' rowIndex' order.Price)  									.SetCell(columnShift + 5' rowIndex' Format(order.State))  									.SetCell(columnShift + 6' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : string.Empty))  									.SetCell(columnShift + 7' rowIndex' order.Volume)  									.SetCell(columnShift + 8' rowIndex' Format(order.LatencyRegistration))  									.SetCell(columnShift + 9' rowIndex' Format(order.LatencyCancellation))  									//.SetCell(columnShift + 10' rowIndex' order.DerivedOrder != null ? (object)order.DerivedOrder.Id : string.Empty)  									;    								for (var i = 0; i < stopParams.Length; i++)  									worker.SetCell(columnShift + 11 + i' rowIndex' order.Condition.Parameters[stopParams[i]] ?? string.Empty);    								rowIndex++;  							}  						}  					}  				}    				worker.Save(FileName' true);  			}
Magic Number,StockSharp.Algo.Strategies.Reporting,ExcelStrategyReport,C:\repos\stocksharp_stocksharp\Algo\Strategies\Reporting\ExcelStrategyReport.cs,Generate,The following statement contains a magic number: using (var worker = hasTemplate ? new ExcelWorker() : new ExcelWorker(Template))  			{  				foreach (var strategy in Strategies)  				{  					if (Template.IsEmpty())  					{  						worker.RenameSheet(strategy.Name);  					}  					else  					{  						if (worker.ContainsSheet(strategy.Name))  							worker.AddSheet(strategy.Name);  					}    					worker  						.SetCell(0' 0' LocalizedStrings.Str1331)    						.SetCell(0' 1' LocalizedStrings.Security + ":")  						.SetCell(1' 1' strategy.Security != null ? strategy.Security.Id : string.Empty)    						.SetCell(0' 2' LocalizedStrings.Portfolio + ":")  						.SetCell(1' 2' strategy.Portfolio != null ? strategy.Portfolio.Name : string.Empty)    						.SetCell(0' 3' LocalizedStrings.Str1334)  						.SetCell(1' 3' Format(strategy.TotalWorkingTime))    						.SetCell(0' 4' LocalizedStrings.Str1335)  						//.SetCell(1' 4' FormatTime(base.Strategy.TotalCPUTime))    						.SetCell(0' 5' LocalizedStrings.Str862 + ":")  						.SetCell(1' 5' strategy.Position)    						.SetCell(0' 6' LocalizedStrings.PnL + ":")  						.SetCell(1' 6' strategy.PnL)    						.SetCell(0' 7' LocalizedStrings.Str159 + ":")  						.SetCell(1' 7' strategy.Commission)    						.SetCell(0' 8' LocalizedStrings.Str163 + ":")  						.SetCell(1' 8' strategy.Slippage)    						.SetCell(0' 9' LocalizedStrings.Str161 + ":")  						.SetCell(1' 9' Format(strategy.Latency));    					var rowIndex = 11;    					foreach (var parameter in strategy.StatisticManager.Parameters.SyncGet(c => c.ToArray()))  					{  						var value = parameter.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' parameter.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					rowIndex += 2;  					worker.SetCell(0' rowIndex' LocalizedStrings.Str1340);  					rowIndex++;    					foreach (var strategyParam in strategy.Parameters.CachedValues)  					{  						var value = strategyParam.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' strategyParam.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					//rowIndex += 2;  					//worker.SetCell(0' rowIndex' "Комиссия по типам:");  					//rowIndex++;    					//foreach (var group in Strategy.CommissionManager.Rules.SyncGet(c => c.ToArray()).GroupBy(c => c.GetType().GetDisplayName()))  					//{  					//	var commission = group.Sum(r => r.Commission);    					//	if (commission == 0)  					//		continue;    					//	worker  					//		.SetCell(0' rowIndex' group.Key)  					//		.SetCell(1' rowIndex' commission);    					//	rowIndex++;  					//}    					var columnShift = 3;    					worker  						.SetCell(columnShift + 0' 0' LocalizedStrings.Str985)    						.SetCell(columnShift + 0' 1' LocalizedStrings.Str1192).SetStyle(columnShift + 0' typeof(long))  						.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  						.SetCell(columnShift + 2' 1' LocalizedStrings.Time).SetStyle(columnShift + 2' "HH:mm:ss.fff")  						.SetCell(columnShift + 3' 1' LocalizedStrings.Price).SetStyle(columnShift + 3' typeof(decimal))  						.SetCell(columnShift + 4' 1' LocalizedStrings.Str1341).SetStyle(columnShift + 4' typeof(decimal))  						.SetCell(columnShift + 5' 1' LocalizedStrings.Volume).SetStyle(columnShift + 5' typeof(decimal))  						.SetCell(columnShift + 6' 1' LocalizedStrings.Str128)  						.SetCell(columnShift + 7' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 7' typeof(long))  						.SetCell(columnShift + 8' 1' LocalizedStrings.Str163).SetStyle(columnShift + 8' typeof(decimal))  						.SetCell(columnShift + 9' 1' LocalizedStrings.Str135)  						.SetCell(columnShift + 10' 1' LocalizedStrings.Str1342).SetStyle(columnShift + 11' typeof(decimal))  						.SetCell(columnShift + 11' 1' LocalizedStrings.Str1343).SetStyle(columnShift + 12' typeof(decimal))  						.SetCell(columnShift + 12' 1' LocalizedStrings.Str1344).SetStyle(columnShift + 13' typeof(decimal))  						.SetCell(columnShift + 13' 1' LocalizedStrings.Str1345).SetStyle(columnShift + 14' typeof(decimal))  						.SetCell(columnShift + 14' 1' LocalizedStrings.Str862).SetStyle(columnShift + 15' typeof(decimal));    					worker  						.SetConditionalFormatting(columnShift + 10' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 11' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 12' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 13' ComparisonOperator.Less' "0"' null' Colors.Red);    					var totalPnL = 0m;  					var position = 0m;    					var queues = new Dictionary<Security' PnLQueue>();    					rowIndex = 2;  					foreach (var trade in strategy.MyTrades.ToArray())  					{  						var info = strategy.PnLManager.ProcessMessage(trade.ToMessage());    						totalPnL += info.PnL;  						position += trade.GetPosition() ?? 0;    						var queue = queues.SafeAdd(trade.Trade.Security' key => new PnLQueue(key.ToSecurityId()));    						var localInfo = queue.Process(trade.ToMessage());    						worker  							.SetCell(columnShift + 0' rowIndex' trade.Trade.Id)  							.SetCell(columnShift + 1' rowIndex' trade.Order.TransactionId)  							.SetCell(columnShift + 2' rowIndex' Format(trade.Trade.Time))  							.SetCell(columnShift + 3' rowIndex' trade.Trade.Price)  							.SetCell(columnShift + 4' rowIndex' trade.Order.Price)  							.SetCell(columnShift + 5' rowIndex' trade.Trade.Volume)  							.SetCell(columnShift + 6' rowIndex' Format(trade.Order.Direction))  							.SetCell(columnShift + 7' rowIndex' trade.Order.Id)  							.SetCell(columnShift + 8' rowIndex' trade.Slippage)  							.SetCell(columnShift + 9' rowIndex' trade.Order.Comment)  							.SetCell(columnShift + 10' rowIndex' MathHelper.Round(info.PnL' Decimals))  							.SetCell(columnShift + 11' rowIndex' MathHelper.Round(localInfo.PnL' Decimals))  							.SetCell(columnShift + 12' rowIndex' MathHelper.Round(totalPnL' Decimals))  							.SetCell(columnShift + 13' rowIndex' MathHelper.Round(queue.RealizedPnL' Decimals))  							.SetCell(columnShift + 14' rowIndex' position);    						rowIndex++;  					}    					if (IncludeOrders)  					{  						columnShift += 17;    						worker  							.SetCell(columnShift + 0' 0' LocalizedStrings.Orders)    							.SetCell(columnShift + 0' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  							.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  							.SetCell(columnShift + 2' 1' LocalizedStrings.Str128)  							.SetCell(columnShift + 3' 1' LocalizedStrings.Str1346).SetStyle(columnShift + 3' "HH:mm:ss.fff")  							.SetCell(columnShift + 4' 1' LocalizedStrings.Str1347).SetStyle(columnShift + 4' "HH:mm:ss.fff")  							.SetCell(columnShift + 5' 1' LocalizedStrings.Str1348)  							.SetCell(columnShift + 6' 1' LocalizedStrings.Price).SetStyle(columnShift + 6' typeof(decimal))  							.SetCell(columnShift + 7' 1' LocalizedStrings.Str1323).SetStyle(columnShift + 7' typeof(decimal))  							.SetCell(columnShift + 8' 1' LocalizedStrings.Str1324)  							.SetCell(columnShift + 9' 1' LocalizedStrings.State)  							.SetCell(columnShift + 10' 1' LocalizedStrings.Str1325).SetStyle(columnShift + 10' typeof(decimal))  							.SetCell(columnShift + 11' 1' LocalizedStrings.Volume).SetStyle(columnShift + 11' typeof(decimal))  							.SetCell(columnShift + 12' 1' LocalizedStrings.Type)  							.SetCell(columnShift + 13' 1' LocalizedStrings.Str1326)  							.SetCell(columnShift + 14' 1' LocalizedStrings.Str1327)  							.SetCell(columnShift + 15' 1' LocalizedStrings.Str135);    						worker  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str1329)' null' Colors.Green)  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str238)' null' Colors.Red);    						rowIndex = 2;  						foreach (var order in strategy.Orders.ToArray())  						{  							worker  								.SetCell(columnShift + 0' rowIndex' order.Id)  								.SetCell(columnShift + 1' rowIndex' order.TransactionId)  								.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  								.SetCell(columnShift + 3' rowIndex' Format(order.Time))  								.SetCell(columnShift + 4' rowIndex' Format(order.LastChangeTime))  								.SetCell(columnShift + 5' rowIndex' Format(order.LastChangeTime - order.Time))  								.SetCell(columnShift + 6' rowIndex' order.Price)  								.SetCell(columnShift + 7' rowIndex' MathHelper.Round(order.GetAveragePrice(strategy.Connector)' Decimals))  								.SetCell(columnShift + 8' rowIndex' Format(order.State))  								.SetCell(columnShift + 9' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : LocalizedStrings.Str238))  								.SetCell(columnShift + 10' rowIndex' order.Balance)  								.SetCell(columnShift + 11' rowIndex' order.Volume)  								.SetCell(columnShift + 12' rowIndex' Format(order.Type))  								.SetCell(columnShift + 13' rowIndex' Format(order.LatencyRegistration))  								.SetCell(columnShift + 14' rowIndex' Format(order.LatencyCancellation))  								.SetCell(columnShift + 15' rowIndex' order.Comment);    							rowIndex++;  						}    						var stopOrders = strategy.StopOrders.ToArray();    						if (stopOrders.Length > 0)  						{  							rowIndex += 2;    							worker  								.SetCell(columnShift + 0' rowIndex - 1' LocalizedStrings.Str1351)    								.SetCell(columnShift + 0' rowIndex' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  								.SetCell(columnShift + 1' rowIndex' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  								.SetCell(columnShift + 2' rowIndex' LocalizedStrings.Str128)  								.SetCell(columnShift + 3' rowIndex' LocalizedStrings.Time).SetStyle(columnShift + 3' "HH:mm:ss.fff")  								.SetCell(columnShift + 4' rowIndex' LocalizedStrings.Price).SetStyle(columnShift + 4' typeof(decimal))  								.SetCell(columnShift + 5' rowIndex' LocalizedStrings.Str1324)  								.SetCell(columnShift + 6' rowIndex' LocalizedStrings.State)  								.SetCell(columnShift + 7' rowIndex' LocalizedStrings.Volume).SetStyle(columnShift + 7' typeof(decimal))  								.SetCell(columnShift + 8' rowIndex' LocalizedStrings.Str1326)  								.SetCell(columnShift + 9' rowIndex' LocalizedStrings.Str1327)  								//.SetCell(columnShift + 10' rowIndex' LocalizedStrings.Str1352).SetStyle(columnShift + 9' typeof(long))  								;    							var stopParams = stopOrders[0].Condition.Parameters.Keys.ToArray();    							for (var i = 0; i < stopParams.Length; i++)  								worker.SetCell(columnShift + 11 + i' rowIndex' stopParams[i]);    							foreach (var order in stopOrders)  							{  								worker  									.SetCell(columnShift + 0' rowIndex' order.Id)  									.SetCell(columnShift + 1' rowIndex' order.TransactionId)  									.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  									.SetCell(columnShift + 3' rowIndex' Format(order.Time))  									.SetCell(columnShift + 4' rowIndex' order.Price)  									.SetCell(columnShift + 5' rowIndex' Format(order.State))  									.SetCell(columnShift + 6' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : string.Empty))  									.SetCell(columnShift + 7' rowIndex' order.Volume)  									.SetCell(columnShift + 8' rowIndex' Format(order.LatencyRegistration))  									.SetCell(columnShift + 9' rowIndex' Format(order.LatencyCancellation))  									//.SetCell(columnShift + 10' rowIndex' order.DerivedOrder != null ? (object)order.DerivedOrder.Id : string.Empty)  									;    								for (var i = 0; i < stopParams.Length; i++)  									worker.SetCell(columnShift + 11 + i' rowIndex' order.Condition.Parameters[stopParams[i]] ?? string.Empty);    								rowIndex++;  							}  						}  					}  				}    				worker.Save(FileName' true);  			}
Magic Number,StockSharp.Algo.Strategies.Reporting,ExcelStrategyReport,C:\repos\stocksharp_stocksharp\Algo\Strategies\Reporting\ExcelStrategyReport.cs,Generate,The following statement contains a magic number: using (var worker = hasTemplate ? new ExcelWorker() : new ExcelWorker(Template))  			{  				foreach (var strategy in Strategies)  				{  					if (Template.IsEmpty())  					{  						worker.RenameSheet(strategy.Name);  					}  					else  					{  						if (worker.ContainsSheet(strategy.Name))  							worker.AddSheet(strategy.Name);  					}    					worker  						.SetCell(0' 0' LocalizedStrings.Str1331)    						.SetCell(0' 1' LocalizedStrings.Security + ":")  						.SetCell(1' 1' strategy.Security != null ? strategy.Security.Id : string.Empty)    						.SetCell(0' 2' LocalizedStrings.Portfolio + ":")  						.SetCell(1' 2' strategy.Portfolio != null ? strategy.Portfolio.Name : string.Empty)    						.SetCell(0' 3' LocalizedStrings.Str1334)  						.SetCell(1' 3' Format(strategy.TotalWorkingTime))    						.SetCell(0' 4' LocalizedStrings.Str1335)  						//.SetCell(1' 4' FormatTime(base.Strategy.TotalCPUTime))    						.SetCell(0' 5' LocalizedStrings.Str862 + ":")  						.SetCell(1' 5' strategy.Position)    						.SetCell(0' 6' LocalizedStrings.PnL + ":")  						.SetCell(1' 6' strategy.PnL)    						.SetCell(0' 7' LocalizedStrings.Str159 + ":")  						.SetCell(1' 7' strategy.Commission)    						.SetCell(0' 8' LocalizedStrings.Str163 + ":")  						.SetCell(1' 8' strategy.Slippage)    						.SetCell(0' 9' LocalizedStrings.Str161 + ":")  						.SetCell(1' 9' Format(strategy.Latency));    					var rowIndex = 11;    					foreach (var parameter in strategy.StatisticManager.Parameters.SyncGet(c => c.ToArray()))  					{  						var value = parameter.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' parameter.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					rowIndex += 2;  					worker.SetCell(0' rowIndex' LocalizedStrings.Str1340);  					rowIndex++;    					foreach (var strategyParam in strategy.Parameters.CachedValues)  					{  						var value = strategyParam.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' strategyParam.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					//rowIndex += 2;  					//worker.SetCell(0' rowIndex' "Комиссия по типам:");  					//rowIndex++;    					//foreach (var group in Strategy.CommissionManager.Rules.SyncGet(c => c.ToArray()).GroupBy(c => c.GetType().GetDisplayName()))  					//{  					//	var commission = group.Sum(r => r.Commission);    					//	if (commission == 0)  					//		continue;    					//	worker  					//		.SetCell(0' rowIndex' group.Key)  					//		.SetCell(1' rowIndex' commission);    					//	rowIndex++;  					//}    					var columnShift = 3;    					worker  						.SetCell(columnShift + 0' 0' LocalizedStrings.Str985)    						.SetCell(columnShift + 0' 1' LocalizedStrings.Str1192).SetStyle(columnShift + 0' typeof(long))  						.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  						.SetCell(columnShift + 2' 1' LocalizedStrings.Time).SetStyle(columnShift + 2' "HH:mm:ss.fff")  						.SetCell(columnShift + 3' 1' LocalizedStrings.Price).SetStyle(columnShift + 3' typeof(decimal))  						.SetCell(columnShift + 4' 1' LocalizedStrings.Str1341).SetStyle(columnShift + 4' typeof(decimal))  						.SetCell(columnShift + 5' 1' LocalizedStrings.Volume).SetStyle(columnShift + 5' typeof(decimal))  						.SetCell(columnShift + 6' 1' LocalizedStrings.Str128)  						.SetCell(columnShift + 7' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 7' typeof(long))  						.SetCell(columnShift + 8' 1' LocalizedStrings.Str163).SetStyle(columnShift + 8' typeof(decimal))  						.SetCell(columnShift + 9' 1' LocalizedStrings.Str135)  						.SetCell(columnShift + 10' 1' LocalizedStrings.Str1342).SetStyle(columnShift + 11' typeof(decimal))  						.SetCell(columnShift + 11' 1' LocalizedStrings.Str1343).SetStyle(columnShift + 12' typeof(decimal))  						.SetCell(columnShift + 12' 1' LocalizedStrings.Str1344).SetStyle(columnShift + 13' typeof(decimal))  						.SetCell(columnShift + 13' 1' LocalizedStrings.Str1345).SetStyle(columnShift + 14' typeof(decimal))  						.SetCell(columnShift + 14' 1' LocalizedStrings.Str862).SetStyle(columnShift + 15' typeof(decimal));    					worker  						.SetConditionalFormatting(columnShift + 10' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 11' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 12' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 13' ComparisonOperator.Less' "0"' null' Colors.Red);    					var totalPnL = 0m;  					var position = 0m;    					var queues = new Dictionary<Security' PnLQueue>();    					rowIndex = 2;  					foreach (var trade in strategy.MyTrades.ToArray())  					{  						var info = strategy.PnLManager.ProcessMessage(trade.ToMessage());    						totalPnL += info.PnL;  						position += trade.GetPosition() ?? 0;    						var queue = queues.SafeAdd(trade.Trade.Security' key => new PnLQueue(key.ToSecurityId()));    						var localInfo = queue.Process(trade.ToMessage());    						worker  							.SetCell(columnShift + 0' rowIndex' trade.Trade.Id)  							.SetCell(columnShift + 1' rowIndex' trade.Order.TransactionId)  							.SetCell(columnShift + 2' rowIndex' Format(trade.Trade.Time))  							.SetCell(columnShift + 3' rowIndex' trade.Trade.Price)  							.SetCell(columnShift + 4' rowIndex' trade.Order.Price)  							.SetCell(columnShift + 5' rowIndex' trade.Trade.Volume)  							.SetCell(columnShift + 6' rowIndex' Format(trade.Order.Direction))  							.SetCell(columnShift + 7' rowIndex' trade.Order.Id)  							.SetCell(columnShift + 8' rowIndex' trade.Slippage)  							.SetCell(columnShift + 9' rowIndex' trade.Order.Comment)  							.SetCell(columnShift + 10' rowIndex' MathHelper.Round(info.PnL' Decimals))  							.SetCell(columnShift + 11' rowIndex' MathHelper.Round(localInfo.PnL' Decimals))  							.SetCell(columnShift + 12' rowIndex' MathHelper.Round(totalPnL' Decimals))  							.SetCell(columnShift + 13' rowIndex' MathHelper.Round(queue.RealizedPnL' Decimals))  							.SetCell(columnShift + 14' rowIndex' position);    						rowIndex++;  					}    					if (IncludeOrders)  					{  						columnShift += 17;    						worker  							.SetCell(columnShift + 0' 0' LocalizedStrings.Orders)    							.SetCell(columnShift + 0' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  							.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  							.SetCell(columnShift + 2' 1' LocalizedStrings.Str128)  							.SetCell(columnShift + 3' 1' LocalizedStrings.Str1346).SetStyle(columnShift + 3' "HH:mm:ss.fff")  							.SetCell(columnShift + 4' 1' LocalizedStrings.Str1347).SetStyle(columnShift + 4' "HH:mm:ss.fff")  							.SetCell(columnShift + 5' 1' LocalizedStrings.Str1348)  							.SetCell(columnShift + 6' 1' LocalizedStrings.Price).SetStyle(columnShift + 6' typeof(decimal))  							.SetCell(columnShift + 7' 1' LocalizedStrings.Str1323).SetStyle(columnShift + 7' typeof(decimal))  							.SetCell(columnShift + 8' 1' LocalizedStrings.Str1324)  							.SetCell(columnShift + 9' 1' LocalizedStrings.State)  							.SetCell(columnShift + 10' 1' LocalizedStrings.Str1325).SetStyle(columnShift + 10' typeof(decimal))  							.SetCell(columnShift + 11' 1' LocalizedStrings.Volume).SetStyle(columnShift + 11' typeof(decimal))  							.SetCell(columnShift + 12' 1' LocalizedStrings.Type)  							.SetCell(columnShift + 13' 1' LocalizedStrings.Str1326)  							.SetCell(columnShift + 14' 1' LocalizedStrings.Str1327)  							.SetCell(columnShift + 15' 1' LocalizedStrings.Str135);    						worker  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str1329)' null' Colors.Green)  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str238)' null' Colors.Red);    						rowIndex = 2;  						foreach (var order in strategy.Orders.ToArray())  						{  							worker  								.SetCell(columnShift + 0' rowIndex' order.Id)  								.SetCell(columnShift + 1' rowIndex' order.TransactionId)  								.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  								.SetCell(columnShift + 3' rowIndex' Format(order.Time))  								.SetCell(columnShift + 4' rowIndex' Format(order.LastChangeTime))  								.SetCell(columnShift + 5' rowIndex' Format(order.LastChangeTime - order.Time))  								.SetCell(columnShift + 6' rowIndex' order.Price)  								.SetCell(columnShift + 7' rowIndex' MathHelper.Round(order.GetAveragePrice(strategy.Connector)' Decimals))  								.SetCell(columnShift + 8' rowIndex' Format(order.State))  								.SetCell(columnShift + 9' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : LocalizedStrings.Str238))  								.SetCell(columnShift + 10' rowIndex' order.Balance)  								.SetCell(columnShift + 11' rowIndex' order.Volume)  								.SetCell(columnShift + 12' rowIndex' Format(order.Type))  								.SetCell(columnShift + 13' rowIndex' Format(order.LatencyRegistration))  								.SetCell(columnShift + 14' rowIndex' Format(order.LatencyCancellation))  								.SetCell(columnShift + 15' rowIndex' order.Comment);    							rowIndex++;  						}    						var stopOrders = strategy.StopOrders.ToArray();    						if (stopOrders.Length > 0)  						{  							rowIndex += 2;    							worker  								.SetCell(columnShift + 0' rowIndex - 1' LocalizedStrings.Str1351)    								.SetCell(columnShift + 0' rowIndex' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  								.SetCell(columnShift + 1' rowIndex' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  								.SetCell(columnShift + 2' rowIndex' LocalizedStrings.Str128)  								.SetCell(columnShift + 3' rowIndex' LocalizedStrings.Time).SetStyle(columnShift + 3' "HH:mm:ss.fff")  								.SetCell(columnShift + 4' rowIndex' LocalizedStrings.Price).SetStyle(columnShift + 4' typeof(decimal))  								.SetCell(columnShift + 5' rowIndex' LocalizedStrings.Str1324)  								.SetCell(columnShift + 6' rowIndex' LocalizedStrings.State)  								.SetCell(columnShift + 7' rowIndex' LocalizedStrings.Volume).SetStyle(columnShift + 7' typeof(decimal))  								.SetCell(columnShift + 8' rowIndex' LocalizedStrings.Str1326)  								.SetCell(columnShift + 9' rowIndex' LocalizedStrings.Str1327)  								//.SetCell(columnShift + 10' rowIndex' LocalizedStrings.Str1352).SetStyle(columnShift + 9' typeof(long))  								;    							var stopParams = stopOrders[0].Condition.Parameters.Keys.ToArray();    							for (var i = 0; i < stopParams.Length; i++)  								worker.SetCell(columnShift + 11 + i' rowIndex' stopParams[i]);    							foreach (var order in stopOrders)  							{  								worker  									.SetCell(columnShift + 0' rowIndex' order.Id)  									.SetCell(columnShift + 1' rowIndex' order.TransactionId)  									.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  									.SetCell(columnShift + 3' rowIndex' Format(order.Time))  									.SetCell(columnShift + 4' rowIndex' order.Price)  									.SetCell(columnShift + 5' rowIndex' Format(order.State))  									.SetCell(columnShift + 6' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : string.Empty))  									.SetCell(columnShift + 7' rowIndex' order.Volume)  									.SetCell(columnShift + 8' rowIndex' Format(order.LatencyRegistration))  									.SetCell(columnShift + 9' rowIndex' Format(order.LatencyCancellation))  									//.SetCell(columnShift + 10' rowIndex' order.DerivedOrder != null ? (object)order.DerivedOrder.Id : string.Empty)  									;    								for (var i = 0; i < stopParams.Length; i++)  									worker.SetCell(columnShift + 11 + i' rowIndex' order.Condition.Parameters[stopParams[i]] ?? string.Empty);    								rowIndex++;  							}  						}  					}  				}    				worker.Save(FileName' true);  			}
Magic Number,StockSharp.Algo.Strategies.Reporting,ExcelStrategyReport,C:\repos\stocksharp_stocksharp\Algo\Strategies\Reporting\ExcelStrategyReport.cs,Generate,The following statement contains a magic number: using (var worker = hasTemplate ? new ExcelWorker() : new ExcelWorker(Template))  			{  				foreach (var strategy in Strategies)  				{  					if (Template.IsEmpty())  					{  						worker.RenameSheet(strategy.Name);  					}  					else  					{  						if (worker.ContainsSheet(strategy.Name))  							worker.AddSheet(strategy.Name);  					}    					worker  						.SetCell(0' 0' LocalizedStrings.Str1331)    						.SetCell(0' 1' LocalizedStrings.Security + ":")  						.SetCell(1' 1' strategy.Security != null ? strategy.Security.Id : string.Empty)    						.SetCell(0' 2' LocalizedStrings.Portfolio + ":")  						.SetCell(1' 2' strategy.Portfolio != null ? strategy.Portfolio.Name : string.Empty)    						.SetCell(0' 3' LocalizedStrings.Str1334)  						.SetCell(1' 3' Format(strategy.TotalWorkingTime))    						.SetCell(0' 4' LocalizedStrings.Str1335)  						//.SetCell(1' 4' FormatTime(base.Strategy.TotalCPUTime))    						.SetCell(0' 5' LocalizedStrings.Str862 + ":")  						.SetCell(1' 5' strategy.Position)    						.SetCell(0' 6' LocalizedStrings.PnL + ":")  						.SetCell(1' 6' strategy.PnL)    						.SetCell(0' 7' LocalizedStrings.Str159 + ":")  						.SetCell(1' 7' strategy.Commission)    						.SetCell(0' 8' LocalizedStrings.Str163 + ":")  						.SetCell(1' 8' strategy.Slippage)    						.SetCell(0' 9' LocalizedStrings.Str161 + ":")  						.SetCell(1' 9' Format(strategy.Latency));    					var rowIndex = 11;    					foreach (var parameter in strategy.StatisticManager.Parameters.SyncGet(c => c.ToArray()))  					{  						var value = parameter.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' parameter.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					rowIndex += 2;  					worker.SetCell(0' rowIndex' LocalizedStrings.Str1340);  					rowIndex++;    					foreach (var strategyParam in strategy.Parameters.CachedValues)  					{  						var value = strategyParam.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' strategyParam.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					//rowIndex += 2;  					//worker.SetCell(0' rowIndex' "Комиссия по типам:");  					//rowIndex++;    					//foreach (var group in Strategy.CommissionManager.Rules.SyncGet(c => c.ToArray()).GroupBy(c => c.GetType().GetDisplayName()))  					//{  					//	var commission = group.Sum(r => r.Commission);    					//	if (commission == 0)  					//		continue;    					//	worker  					//		.SetCell(0' rowIndex' group.Key)  					//		.SetCell(1' rowIndex' commission);    					//	rowIndex++;  					//}    					var columnShift = 3;    					worker  						.SetCell(columnShift + 0' 0' LocalizedStrings.Str985)    						.SetCell(columnShift + 0' 1' LocalizedStrings.Str1192).SetStyle(columnShift + 0' typeof(long))  						.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  						.SetCell(columnShift + 2' 1' LocalizedStrings.Time).SetStyle(columnShift + 2' "HH:mm:ss.fff")  						.SetCell(columnShift + 3' 1' LocalizedStrings.Price).SetStyle(columnShift + 3' typeof(decimal))  						.SetCell(columnShift + 4' 1' LocalizedStrings.Str1341).SetStyle(columnShift + 4' typeof(decimal))  						.SetCell(columnShift + 5' 1' LocalizedStrings.Volume).SetStyle(columnShift + 5' typeof(decimal))  						.SetCell(columnShift + 6' 1' LocalizedStrings.Str128)  						.SetCell(columnShift + 7' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 7' typeof(long))  						.SetCell(columnShift + 8' 1' LocalizedStrings.Str163).SetStyle(columnShift + 8' typeof(decimal))  						.SetCell(columnShift + 9' 1' LocalizedStrings.Str135)  						.SetCell(columnShift + 10' 1' LocalizedStrings.Str1342).SetStyle(columnShift + 11' typeof(decimal))  						.SetCell(columnShift + 11' 1' LocalizedStrings.Str1343).SetStyle(columnShift + 12' typeof(decimal))  						.SetCell(columnShift + 12' 1' LocalizedStrings.Str1344).SetStyle(columnShift + 13' typeof(decimal))  						.SetCell(columnShift + 13' 1' LocalizedStrings.Str1345).SetStyle(columnShift + 14' typeof(decimal))  						.SetCell(columnShift + 14' 1' LocalizedStrings.Str862).SetStyle(columnShift + 15' typeof(decimal));    					worker  						.SetConditionalFormatting(columnShift + 10' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 11' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 12' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 13' ComparisonOperator.Less' "0"' null' Colors.Red);    					var totalPnL = 0m;  					var position = 0m;    					var queues = new Dictionary<Security' PnLQueue>();    					rowIndex = 2;  					foreach (var trade in strategy.MyTrades.ToArray())  					{  						var info = strategy.PnLManager.ProcessMessage(trade.ToMessage());    						totalPnL += info.PnL;  						position += trade.GetPosition() ?? 0;    						var queue = queues.SafeAdd(trade.Trade.Security' key => new PnLQueue(key.ToSecurityId()));    						var localInfo = queue.Process(trade.ToMessage());    						worker  							.SetCell(columnShift + 0' rowIndex' trade.Trade.Id)  							.SetCell(columnShift + 1' rowIndex' trade.Order.TransactionId)  							.SetCell(columnShift + 2' rowIndex' Format(trade.Trade.Time))  							.SetCell(columnShift + 3' rowIndex' trade.Trade.Price)  							.SetCell(columnShift + 4' rowIndex' trade.Order.Price)  							.SetCell(columnShift + 5' rowIndex' trade.Trade.Volume)  							.SetCell(columnShift + 6' rowIndex' Format(trade.Order.Direction))  							.SetCell(columnShift + 7' rowIndex' trade.Order.Id)  							.SetCell(columnShift + 8' rowIndex' trade.Slippage)  							.SetCell(columnShift + 9' rowIndex' trade.Order.Comment)  							.SetCell(columnShift + 10' rowIndex' MathHelper.Round(info.PnL' Decimals))  							.SetCell(columnShift + 11' rowIndex' MathHelper.Round(localInfo.PnL' Decimals))  							.SetCell(columnShift + 12' rowIndex' MathHelper.Round(totalPnL' Decimals))  							.SetCell(columnShift + 13' rowIndex' MathHelper.Round(queue.RealizedPnL' Decimals))  							.SetCell(columnShift + 14' rowIndex' position);    						rowIndex++;  					}    					if (IncludeOrders)  					{  						columnShift += 17;    						worker  							.SetCell(columnShift + 0' 0' LocalizedStrings.Orders)    							.SetCell(columnShift + 0' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  							.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  							.SetCell(columnShift + 2' 1' LocalizedStrings.Str128)  							.SetCell(columnShift + 3' 1' LocalizedStrings.Str1346).SetStyle(columnShift + 3' "HH:mm:ss.fff")  							.SetCell(columnShift + 4' 1' LocalizedStrings.Str1347).SetStyle(columnShift + 4' "HH:mm:ss.fff")  							.SetCell(columnShift + 5' 1' LocalizedStrings.Str1348)  							.SetCell(columnShift + 6' 1' LocalizedStrings.Price).SetStyle(columnShift + 6' typeof(decimal))  							.SetCell(columnShift + 7' 1' LocalizedStrings.Str1323).SetStyle(columnShift + 7' typeof(decimal))  							.SetCell(columnShift + 8' 1' LocalizedStrings.Str1324)  							.SetCell(columnShift + 9' 1' LocalizedStrings.State)  							.SetCell(columnShift + 10' 1' LocalizedStrings.Str1325).SetStyle(columnShift + 10' typeof(decimal))  							.SetCell(columnShift + 11' 1' LocalizedStrings.Volume).SetStyle(columnShift + 11' typeof(decimal))  							.SetCell(columnShift + 12' 1' LocalizedStrings.Type)  							.SetCell(columnShift + 13' 1' LocalizedStrings.Str1326)  							.SetCell(columnShift + 14' 1' LocalizedStrings.Str1327)  							.SetCell(columnShift + 15' 1' LocalizedStrings.Str135);    						worker  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str1329)' null' Colors.Green)  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str238)' null' Colors.Red);    						rowIndex = 2;  						foreach (var order in strategy.Orders.ToArray())  						{  							worker  								.SetCell(columnShift + 0' rowIndex' order.Id)  								.SetCell(columnShift + 1' rowIndex' order.TransactionId)  								.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  								.SetCell(columnShift + 3' rowIndex' Format(order.Time))  								.SetCell(columnShift + 4' rowIndex' Format(order.LastChangeTime))  								.SetCell(columnShift + 5' rowIndex' Format(order.LastChangeTime - order.Time))  								.SetCell(columnShift + 6' rowIndex' order.Price)  								.SetCell(columnShift + 7' rowIndex' MathHelper.Round(order.GetAveragePrice(strategy.Connector)' Decimals))  								.SetCell(columnShift + 8' rowIndex' Format(order.State))  								.SetCell(columnShift + 9' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : LocalizedStrings.Str238))  								.SetCell(columnShift + 10' rowIndex' order.Balance)  								.SetCell(columnShift + 11' rowIndex' order.Volume)  								.SetCell(columnShift + 12' rowIndex' Format(order.Type))  								.SetCell(columnShift + 13' rowIndex' Format(order.LatencyRegistration))  								.SetCell(columnShift + 14' rowIndex' Format(order.LatencyCancellation))  								.SetCell(columnShift + 15' rowIndex' order.Comment);    							rowIndex++;  						}    						var stopOrders = strategy.StopOrders.ToArray();    						if (stopOrders.Length > 0)  						{  							rowIndex += 2;    							worker  								.SetCell(columnShift + 0' rowIndex - 1' LocalizedStrings.Str1351)    								.SetCell(columnShift + 0' rowIndex' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  								.SetCell(columnShift + 1' rowIndex' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  								.SetCell(columnShift + 2' rowIndex' LocalizedStrings.Str128)  								.SetCell(columnShift + 3' rowIndex' LocalizedStrings.Time).SetStyle(columnShift + 3' "HH:mm:ss.fff")  								.SetCell(columnShift + 4' rowIndex' LocalizedStrings.Price).SetStyle(columnShift + 4' typeof(decimal))  								.SetCell(columnShift + 5' rowIndex' LocalizedStrings.Str1324)  								.SetCell(columnShift + 6' rowIndex' LocalizedStrings.State)  								.SetCell(columnShift + 7' rowIndex' LocalizedStrings.Volume).SetStyle(columnShift + 7' typeof(decimal))  								.SetCell(columnShift + 8' rowIndex' LocalizedStrings.Str1326)  								.SetCell(columnShift + 9' rowIndex' LocalizedStrings.Str1327)  								//.SetCell(columnShift + 10' rowIndex' LocalizedStrings.Str1352).SetStyle(columnShift + 9' typeof(long))  								;    							var stopParams = stopOrders[0].Condition.Parameters.Keys.ToArray();    							for (var i = 0; i < stopParams.Length; i++)  								worker.SetCell(columnShift + 11 + i' rowIndex' stopParams[i]);    							foreach (var order in stopOrders)  							{  								worker  									.SetCell(columnShift + 0' rowIndex' order.Id)  									.SetCell(columnShift + 1' rowIndex' order.TransactionId)  									.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  									.SetCell(columnShift + 3' rowIndex' Format(order.Time))  									.SetCell(columnShift + 4' rowIndex' order.Price)  									.SetCell(columnShift + 5' rowIndex' Format(order.State))  									.SetCell(columnShift + 6' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : string.Empty))  									.SetCell(columnShift + 7' rowIndex' order.Volume)  									.SetCell(columnShift + 8' rowIndex' Format(order.LatencyRegistration))  									.SetCell(columnShift + 9' rowIndex' Format(order.LatencyCancellation))  									//.SetCell(columnShift + 10' rowIndex' order.DerivedOrder != null ? (object)order.DerivedOrder.Id : string.Empty)  									;    								for (var i = 0; i < stopParams.Length; i++)  									worker.SetCell(columnShift + 11 + i' rowIndex' order.Condition.Parameters[stopParams[i]] ?? string.Empty);    								rowIndex++;  							}  						}  					}  				}    				worker.Save(FileName' true);  			}
Magic Number,StockSharp.Algo.Strategies.Reporting,ExcelStrategyReport,C:\repos\stocksharp_stocksharp\Algo\Strategies\Reporting\ExcelStrategyReport.cs,Generate,The following statement contains a magic number: using (var worker = hasTemplate ? new ExcelWorker() : new ExcelWorker(Template))  			{  				foreach (var strategy in Strategies)  				{  					if (Template.IsEmpty())  					{  						worker.RenameSheet(strategy.Name);  					}  					else  					{  						if (worker.ContainsSheet(strategy.Name))  							worker.AddSheet(strategy.Name);  					}    					worker  						.SetCell(0' 0' LocalizedStrings.Str1331)    						.SetCell(0' 1' LocalizedStrings.Security + ":")  						.SetCell(1' 1' strategy.Security != null ? strategy.Security.Id : string.Empty)    						.SetCell(0' 2' LocalizedStrings.Portfolio + ":")  						.SetCell(1' 2' strategy.Portfolio != null ? strategy.Portfolio.Name : string.Empty)    						.SetCell(0' 3' LocalizedStrings.Str1334)  						.SetCell(1' 3' Format(strategy.TotalWorkingTime))    						.SetCell(0' 4' LocalizedStrings.Str1335)  						//.SetCell(1' 4' FormatTime(base.Strategy.TotalCPUTime))    						.SetCell(0' 5' LocalizedStrings.Str862 + ":")  						.SetCell(1' 5' strategy.Position)    						.SetCell(0' 6' LocalizedStrings.PnL + ":")  						.SetCell(1' 6' strategy.PnL)    						.SetCell(0' 7' LocalizedStrings.Str159 + ":")  						.SetCell(1' 7' strategy.Commission)    						.SetCell(0' 8' LocalizedStrings.Str163 + ":")  						.SetCell(1' 8' strategy.Slippage)    						.SetCell(0' 9' LocalizedStrings.Str161 + ":")  						.SetCell(1' 9' Format(strategy.Latency));    					var rowIndex = 11;    					foreach (var parameter in strategy.StatisticManager.Parameters.SyncGet(c => c.ToArray()))  					{  						var value = parameter.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' parameter.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					rowIndex += 2;  					worker.SetCell(0' rowIndex' LocalizedStrings.Str1340);  					rowIndex++;    					foreach (var strategyParam in strategy.Parameters.CachedValues)  					{  						var value = strategyParam.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' strategyParam.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					//rowIndex += 2;  					//worker.SetCell(0' rowIndex' "Комиссия по типам:");  					//rowIndex++;    					//foreach (var group in Strategy.CommissionManager.Rules.SyncGet(c => c.ToArray()).GroupBy(c => c.GetType().GetDisplayName()))  					//{  					//	var commission = group.Sum(r => r.Commission);    					//	if (commission == 0)  					//		continue;    					//	worker  					//		.SetCell(0' rowIndex' group.Key)  					//		.SetCell(1' rowIndex' commission);    					//	rowIndex++;  					//}    					var columnShift = 3;    					worker  						.SetCell(columnShift + 0' 0' LocalizedStrings.Str985)    						.SetCell(columnShift + 0' 1' LocalizedStrings.Str1192).SetStyle(columnShift + 0' typeof(long))  						.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  						.SetCell(columnShift + 2' 1' LocalizedStrings.Time).SetStyle(columnShift + 2' "HH:mm:ss.fff")  						.SetCell(columnShift + 3' 1' LocalizedStrings.Price).SetStyle(columnShift + 3' typeof(decimal))  						.SetCell(columnShift + 4' 1' LocalizedStrings.Str1341).SetStyle(columnShift + 4' typeof(decimal))  						.SetCell(columnShift + 5' 1' LocalizedStrings.Volume).SetStyle(columnShift + 5' typeof(decimal))  						.SetCell(columnShift + 6' 1' LocalizedStrings.Str128)  						.SetCell(columnShift + 7' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 7' typeof(long))  						.SetCell(columnShift + 8' 1' LocalizedStrings.Str163).SetStyle(columnShift + 8' typeof(decimal))  						.SetCell(columnShift + 9' 1' LocalizedStrings.Str135)  						.SetCell(columnShift + 10' 1' LocalizedStrings.Str1342).SetStyle(columnShift + 11' typeof(decimal))  						.SetCell(columnShift + 11' 1' LocalizedStrings.Str1343).SetStyle(columnShift + 12' typeof(decimal))  						.SetCell(columnShift + 12' 1' LocalizedStrings.Str1344).SetStyle(columnShift + 13' typeof(decimal))  						.SetCell(columnShift + 13' 1' LocalizedStrings.Str1345).SetStyle(columnShift + 14' typeof(decimal))  						.SetCell(columnShift + 14' 1' LocalizedStrings.Str862).SetStyle(columnShift + 15' typeof(decimal));    					worker  						.SetConditionalFormatting(columnShift + 10' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 11' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 12' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 13' ComparisonOperator.Less' "0"' null' Colors.Red);    					var totalPnL = 0m;  					var position = 0m;    					var queues = new Dictionary<Security' PnLQueue>();    					rowIndex = 2;  					foreach (var trade in strategy.MyTrades.ToArray())  					{  						var info = strategy.PnLManager.ProcessMessage(trade.ToMessage());    						totalPnL += info.PnL;  						position += trade.GetPosition() ?? 0;    						var queue = queues.SafeAdd(trade.Trade.Security' key => new PnLQueue(key.ToSecurityId()));    						var localInfo = queue.Process(trade.ToMessage());    						worker  							.SetCell(columnShift + 0' rowIndex' trade.Trade.Id)  							.SetCell(columnShift + 1' rowIndex' trade.Order.TransactionId)  							.SetCell(columnShift + 2' rowIndex' Format(trade.Trade.Time))  							.SetCell(columnShift + 3' rowIndex' trade.Trade.Price)  							.SetCell(columnShift + 4' rowIndex' trade.Order.Price)  							.SetCell(columnShift + 5' rowIndex' trade.Trade.Volume)  							.SetCell(columnShift + 6' rowIndex' Format(trade.Order.Direction))  							.SetCell(columnShift + 7' rowIndex' trade.Order.Id)  							.SetCell(columnShift + 8' rowIndex' trade.Slippage)  							.SetCell(columnShift + 9' rowIndex' trade.Order.Comment)  							.SetCell(columnShift + 10' rowIndex' MathHelper.Round(info.PnL' Decimals))  							.SetCell(columnShift + 11' rowIndex' MathHelper.Round(localInfo.PnL' Decimals))  							.SetCell(columnShift + 12' rowIndex' MathHelper.Round(totalPnL' Decimals))  							.SetCell(columnShift + 13' rowIndex' MathHelper.Round(queue.RealizedPnL' Decimals))  							.SetCell(columnShift + 14' rowIndex' position);    						rowIndex++;  					}    					if (IncludeOrders)  					{  						columnShift += 17;    						worker  							.SetCell(columnShift + 0' 0' LocalizedStrings.Orders)    							.SetCell(columnShift + 0' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  							.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  							.SetCell(columnShift + 2' 1' LocalizedStrings.Str128)  							.SetCell(columnShift + 3' 1' LocalizedStrings.Str1346).SetStyle(columnShift + 3' "HH:mm:ss.fff")  							.SetCell(columnShift + 4' 1' LocalizedStrings.Str1347).SetStyle(columnShift + 4' "HH:mm:ss.fff")  							.SetCell(columnShift + 5' 1' LocalizedStrings.Str1348)  							.SetCell(columnShift + 6' 1' LocalizedStrings.Price).SetStyle(columnShift + 6' typeof(decimal))  							.SetCell(columnShift + 7' 1' LocalizedStrings.Str1323).SetStyle(columnShift + 7' typeof(decimal))  							.SetCell(columnShift + 8' 1' LocalizedStrings.Str1324)  							.SetCell(columnShift + 9' 1' LocalizedStrings.State)  							.SetCell(columnShift + 10' 1' LocalizedStrings.Str1325).SetStyle(columnShift + 10' typeof(decimal))  							.SetCell(columnShift + 11' 1' LocalizedStrings.Volume).SetStyle(columnShift + 11' typeof(decimal))  							.SetCell(columnShift + 12' 1' LocalizedStrings.Type)  							.SetCell(columnShift + 13' 1' LocalizedStrings.Str1326)  							.SetCell(columnShift + 14' 1' LocalizedStrings.Str1327)  							.SetCell(columnShift + 15' 1' LocalizedStrings.Str135);    						worker  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str1329)' null' Colors.Green)  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str238)' null' Colors.Red);    						rowIndex = 2;  						foreach (var order in strategy.Orders.ToArray())  						{  							worker  								.SetCell(columnShift + 0' rowIndex' order.Id)  								.SetCell(columnShift + 1' rowIndex' order.TransactionId)  								.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  								.SetCell(columnShift + 3' rowIndex' Format(order.Time))  								.SetCell(columnShift + 4' rowIndex' Format(order.LastChangeTime))  								.SetCell(columnShift + 5' rowIndex' Format(order.LastChangeTime - order.Time))  								.SetCell(columnShift + 6' rowIndex' order.Price)  								.SetCell(columnShift + 7' rowIndex' MathHelper.Round(order.GetAveragePrice(strategy.Connector)' Decimals))  								.SetCell(columnShift + 8' rowIndex' Format(order.State))  								.SetCell(columnShift + 9' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : LocalizedStrings.Str238))  								.SetCell(columnShift + 10' rowIndex' order.Balance)  								.SetCell(columnShift + 11' rowIndex' order.Volume)  								.SetCell(columnShift + 12' rowIndex' Format(order.Type))  								.SetCell(columnShift + 13' rowIndex' Format(order.LatencyRegistration))  								.SetCell(columnShift + 14' rowIndex' Format(order.LatencyCancellation))  								.SetCell(columnShift + 15' rowIndex' order.Comment);    							rowIndex++;  						}    						var stopOrders = strategy.StopOrders.ToArray();    						if (stopOrders.Length > 0)  						{  							rowIndex += 2;    							worker  								.SetCell(columnShift + 0' rowIndex - 1' LocalizedStrings.Str1351)    								.SetCell(columnShift + 0' rowIndex' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  								.SetCell(columnShift + 1' rowIndex' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  								.SetCell(columnShift + 2' rowIndex' LocalizedStrings.Str128)  								.SetCell(columnShift + 3' rowIndex' LocalizedStrings.Time).SetStyle(columnShift + 3' "HH:mm:ss.fff")  								.SetCell(columnShift + 4' rowIndex' LocalizedStrings.Price).SetStyle(columnShift + 4' typeof(decimal))  								.SetCell(columnShift + 5' rowIndex' LocalizedStrings.Str1324)  								.SetCell(columnShift + 6' rowIndex' LocalizedStrings.State)  								.SetCell(columnShift + 7' rowIndex' LocalizedStrings.Volume).SetStyle(columnShift + 7' typeof(decimal))  								.SetCell(columnShift + 8' rowIndex' LocalizedStrings.Str1326)  								.SetCell(columnShift + 9' rowIndex' LocalizedStrings.Str1327)  								//.SetCell(columnShift + 10' rowIndex' LocalizedStrings.Str1352).SetStyle(columnShift + 9' typeof(long))  								;    							var stopParams = stopOrders[0].Condition.Parameters.Keys.ToArray();    							for (var i = 0; i < stopParams.Length; i++)  								worker.SetCell(columnShift + 11 + i' rowIndex' stopParams[i]);    							foreach (var order in stopOrders)  							{  								worker  									.SetCell(columnShift + 0' rowIndex' order.Id)  									.SetCell(columnShift + 1' rowIndex' order.TransactionId)  									.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  									.SetCell(columnShift + 3' rowIndex' Format(order.Time))  									.SetCell(columnShift + 4' rowIndex' order.Price)  									.SetCell(columnShift + 5' rowIndex' Format(order.State))  									.SetCell(columnShift + 6' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : string.Empty))  									.SetCell(columnShift + 7' rowIndex' order.Volume)  									.SetCell(columnShift + 8' rowIndex' Format(order.LatencyRegistration))  									.SetCell(columnShift + 9' rowIndex' Format(order.LatencyCancellation))  									//.SetCell(columnShift + 10' rowIndex' order.DerivedOrder != null ? (object)order.DerivedOrder.Id : string.Empty)  									;    								for (var i = 0; i < stopParams.Length; i++)  									worker.SetCell(columnShift + 11 + i' rowIndex' order.Condition.Parameters[stopParams[i]] ?? string.Empty);    								rowIndex++;  							}  						}  					}  				}    				worker.Save(FileName' true);  			}
Magic Number,StockSharp.Algo.Strategies.Reporting,ExcelStrategyReport,C:\repos\stocksharp_stocksharp\Algo\Strategies\Reporting\ExcelStrategyReport.cs,Generate,The following statement contains a magic number: using (var worker = hasTemplate ? new ExcelWorker() : new ExcelWorker(Template))  			{  				foreach (var strategy in Strategies)  				{  					if (Template.IsEmpty())  					{  						worker.RenameSheet(strategy.Name);  					}  					else  					{  						if (worker.ContainsSheet(strategy.Name))  							worker.AddSheet(strategy.Name);  					}    					worker  						.SetCell(0' 0' LocalizedStrings.Str1331)    						.SetCell(0' 1' LocalizedStrings.Security + ":")  						.SetCell(1' 1' strategy.Security != null ? strategy.Security.Id : string.Empty)    						.SetCell(0' 2' LocalizedStrings.Portfolio + ":")  						.SetCell(1' 2' strategy.Portfolio != null ? strategy.Portfolio.Name : string.Empty)    						.SetCell(0' 3' LocalizedStrings.Str1334)  						.SetCell(1' 3' Format(strategy.TotalWorkingTime))    						.SetCell(0' 4' LocalizedStrings.Str1335)  						//.SetCell(1' 4' FormatTime(base.Strategy.TotalCPUTime))    						.SetCell(0' 5' LocalizedStrings.Str862 + ":")  						.SetCell(1' 5' strategy.Position)    						.SetCell(0' 6' LocalizedStrings.PnL + ":")  						.SetCell(1' 6' strategy.PnL)    						.SetCell(0' 7' LocalizedStrings.Str159 + ":")  						.SetCell(1' 7' strategy.Commission)    						.SetCell(0' 8' LocalizedStrings.Str163 + ":")  						.SetCell(1' 8' strategy.Slippage)    						.SetCell(0' 9' LocalizedStrings.Str161 + ":")  						.SetCell(1' 9' Format(strategy.Latency));    					var rowIndex = 11;    					foreach (var parameter in strategy.StatisticManager.Parameters.SyncGet(c => c.ToArray()))  					{  						var value = parameter.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' parameter.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					rowIndex += 2;  					worker.SetCell(0' rowIndex' LocalizedStrings.Str1340);  					rowIndex++;    					foreach (var strategyParam in strategy.Parameters.CachedValues)  					{  						var value = strategyParam.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' strategyParam.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					//rowIndex += 2;  					//worker.SetCell(0' rowIndex' "Комиссия по типам:");  					//rowIndex++;    					//foreach (var group in Strategy.CommissionManager.Rules.SyncGet(c => c.ToArray()).GroupBy(c => c.GetType().GetDisplayName()))  					//{  					//	var commission = group.Sum(r => r.Commission);    					//	if (commission == 0)  					//		continue;    					//	worker  					//		.SetCell(0' rowIndex' group.Key)  					//		.SetCell(1' rowIndex' commission);    					//	rowIndex++;  					//}    					var columnShift = 3;    					worker  						.SetCell(columnShift + 0' 0' LocalizedStrings.Str985)    						.SetCell(columnShift + 0' 1' LocalizedStrings.Str1192).SetStyle(columnShift + 0' typeof(long))  						.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  						.SetCell(columnShift + 2' 1' LocalizedStrings.Time).SetStyle(columnShift + 2' "HH:mm:ss.fff")  						.SetCell(columnShift + 3' 1' LocalizedStrings.Price).SetStyle(columnShift + 3' typeof(decimal))  						.SetCell(columnShift + 4' 1' LocalizedStrings.Str1341).SetStyle(columnShift + 4' typeof(decimal))  						.SetCell(columnShift + 5' 1' LocalizedStrings.Volume).SetStyle(columnShift + 5' typeof(decimal))  						.SetCell(columnShift + 6' 1' LocalizedStrings.Str128)  						.SetCell(columnShift + 7' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 7' typeof(long))  						.SetCell(columnShift + 8' 1' LocalizedStrings.Str163).SetStyle(columnShift + 8' typeof(decimal))  						.SetCell(columnShift + 9' 1' LocalizedStrings.Str135)  						.SetCell(columnShift + 10' 1' LocalizedStrings.Str1342).SetStyle(columnShift + 11' typeof(decimal))  						.SetCell(columnShift + 11' 1' LocalizedStrings.Str1343).SetStyle(columnShift + 12' typeof(decimal))  						.SetCell(columnShift + 12' 1' LocalizedStrings.Str1344).SetStyle(columnShift + 13' typeof(decimal))  						.SetCell(columnShift + 13' 1' LocalizedStrings.Str1345).SetStyle(columnShift + 14' typeof(decimal))  						.SetCell(columnShift + 14' 1' LocalizedStrings.Str862).SetStyle(columnShift + 15' typeof(decimal));    					worker  						.SetConditionalFormatting(columnShift + 10' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 11' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 12' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 13' ComparisonOperator.Less' "0"' null' Colors.Red);    					var totalPnL = 0m;  					var position = 0m;    					var queues = new Dictionary<Security' PnLQueue>();    					rowIndex = 2;  					foreach (var trade in strategy.MyTrades.ToArray())  					{  						var info = strategy.PnLManager.ProcessMessage(trade.ToMessage());    						totalPnL += info.PnL;  						position += trade.GetPosition() ?? 0;    						var queue = queues.SafeAdd(trade.Trade.Security' key => new PnLQueue(key.ToSecurityId()));    						var localInfo = queue.Process(trade.ToMessage());    						worker  							.SetCell(columnShift + 0' rowIndex' trade.Trade.Id)  							.SetCell(columnShift + 1' rowIndex' trade.Order.TransactionId)  							.SetCell(columnShift + 2' rowIndex' Format(trade.Trade.Time))  							.SetCell(columnShift + 3' rowIndex' trade.Trade.Price)  							.SetCell(columnShift + 4' rowIndex' trade.Order.Price)  							.SetCell(columnShift + 5' rowIndex' trade.Trade.Volume)  							.SetCell(columnShift + 6' rowIndex' Format(trade.Order.Direction))  							.SetCell(columnShift + 7' rowIndex' trade.Order.Id)  							.SetCell(columnShift + 8' rowIndex' trade.Slippage)  							.SetCell(columnShift + 9' rowIndex' trade.Order.Comment)  							.SetCell(columnShift + 10' rowIndex' MathHelper.Round(info.PnL' Decimals))  							.SetCell(columnShift + 11' rowIndex' MathHelper.Round(localInfo.PnL' Decimals))  							.SetCell(columnShift + 12' rowIndex' MathHelper.Round(totalPnL' Decimals))  							.SetCell(columnShift + 13' rowIndex' MathHelper.Round(queue.RealizedPnL' Decimals))  							.SetCell(columnShift + 14' rowIndex' position);    						rowIndex++;  					}    					if (IncludeOrders)  					{  						columnShift += 17;    						worker  							.SetCell(columnShift + 0' 0' LocalizedStrings.Orders)    							.SetCell(columnShift + 0' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  							.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  							.SetCell(columnShift + 2' 1' LocalizedStrings.Str128)  							.SetCell(columnShift + 3' 1' LocalizedStrings.Str1346).SetStyle(columnShift + 3' "HH:mm:ss.fff")  							.SetCell(columnShift + 4' 1' LocalizedStrings.Str1347).SetStyle(columnShift + 4' "HH:mm:ss.fff")  							.SetCell(columnShift + 5' 1' LocalizedStrings.Str1348)  							.SetCell(columnShift + 6' 1' LocalizedStrings.Price).SetStyle(columnShift + 6' typeof(decimal))  							.SetCell(columnShift + 7' 1' LocalizedStrings.Str1323).SetStyle(columnShift + 7' typeof(decimal))  							.SetCell(columnShift + 8' 1' LocalizedStrings.Str1324)  							.SetCell(columnShift + 9' 1' LocalizedStrings.State)  							.SetCell(columnShift + 10' 1' LocalizedStrings.Str1325).SetStyle(columnShift + 10' typeof(decimal))  							.SetCell(columnShift + 11' 1' LocalizedStrings.Volume).SetStyle(columnShift + 11' typeof(decimal))  							.SetCell(columnShift + 12' 1' LocalizedStrings.Type)  							.SetCell(columnShift + 13' 1' LocalizedStrings.Str1326)  							.SetCell(columnShift + 14' 1' LocalizedStrings.Str1327)  							.SetCell(columnShift + 15' 1' LocalizedStrings.Str135);    						worker  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str1329)' null' Colors.Green)  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str238)' null' Colors.Red);    						rowIndex = 2;  						foreach (var order in strategy.Orders.ToArray())  						{  							worker  								.SetCell(columnShift + 0' rowIndex' order.Id)  								.SetCell(columnShift + 1' rowIndex' order.TransactionId)  								.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  								.SetCell(columnShift + 3' rowIndex' Format(order.Time))  								.SetCell(columnShift + 4' rowIndex' Format(order.LastChangeTime))  								.SetCell(columnShift + 5' rowIndex' Format(order.LastChangeTime - order.Time))  								.SetCell(columnShift + 6' rowIndex' order.Price)  								.SetCell(columnShift + 7' rowIndex' MathHelper.Round(order.GetAveragePrice(strategy.Connector)' Decimals))  								.SetCell(columnShift + 8' rowIndex' Format(order.State))  								.SetCell(columnShift + 9' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : LocalizedStrings.Str238))  								.SetCell(columnShift + 10' rowIndex' order.Balance)  								.SetCell(columnShift + 11' rowIndex' order.Volume)  								.SetCell(columnShift + 12' rowIndex' Format(order.Type))  								.SetCell(columnShift + 13' rowIndex' Format(order.LatencyRegistration))  								.SetCell(columnShift + 14' rowIndex' Format(order.LatencyCancellation))  								.SetCell(columnShift + 15' rowIndex' order.Comment);    							rowIndex++;  						}    						var stopOrders = strategy.StopOrders.ToArray();    						if (stopOrders.Length > 0)  						{  							rowIndex += 2;    							worker  								.SetCell(columnShift + 0' rowIndex - 1' LocalizedStrings.Str1351)    								.SetCell(columnShift + 0' rowIndex' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  								.SetCell(columnShift + 1' rowIndex' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  								.SetCell(columnShift + 2' rowIndex' LocalizedStrings.Str128)  								.SetCell(columnShift + 3' rowIndex' LocalizedStrings.Time).SetStyle(columnShift + 3' "HH:mm:ss.fff")  								.SetCell(columnShift + 4' rowIndex' LocalizedStrings.Price).SetStyle(columnShift + 4' typeof(decimal))  								.SetCell(columnShift + 5' rowIndex' LocalizedStrings.Str1324)  								.SetCell(columnShift + 6' rowIndex' LocalizedStrings.State)  								.SetCell(columnShift + 7' rowIndex' LocalizedStrings.Volume).SetStyle(columnShift + 7' typeof(decimal))  								.SetCell(columnShift + 8' rowIndex' LocalizedStrings.Str1326)  								.SetCell(columnShift + 9' rowIndex' LocalizedStrings.Str1327)  								//.SetCell(columnShift + 10' rowIndex' LocalizedStrings.Str1352).SetStyle(columnShift + 9' typeof(long))  								;    							var stopParams = stopOrders[0].Condition.Parameters.Keys.ToArray();    							for (var i = 0; i < stopParams.Length; i++)  								worker.SetCell(columnShift + 11 + i' rowIndex' stopParams[i]);    							foreach (var order in stopOrders)  							{  								worker  									.SetCell(columnShift + 0' rowIndex' order.Id)  									.SetCell(columnShift + 1' rowIndex' order.TransactionId)  									.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  									.SetCell(columnShift + 3' rowIndex' Format(order.Time))  									.SetCell(columnShift + 4' rowIndex' order.Price)  									.SetCell(columnShift + 5' rowIndex' Format(order.State))  									.SetCell(columnShift + 6' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : string.Empty))  									.SetCell(columnShift + 7' rowIndex' order.Volume)  									.SetCell(columnShift + 8' rowIndex' Format(order.LatencyRegistration))  									.SetCell(columnShift + 9' rowIndex' Format(order.LatencyCancellation))  									//.SetCell(columnShift + 10' rowIndex' order.DerivedOrder != null ? (object)order.DerivedOrder.Id : string.Empty)  									;    								for (var i = 0; i < stopParams.Length; i++)  									worker.SetCell(columnShift + 11 + i' rowIndex' order.Condition.Parameters[stopParams[i]] ?? string.Empty);    								rowIndex++;  							}  						}  					}  				}    				worker.Save(FileName' true);  			}
Magic Number,StockSharp.Algo.Strategies.Reporting,ExcelStrategyReport,C:\repos\stocksharp_stocksharp\Algo\Strategies\Reporting\ExcelStrategyReport.cs,Generate,The following statement contains a magic number: using (var worker = hasTemplate ? new ExcelWorker() : new ExcelWorker(Template))  			{  				foreach (var strategy in Strategies)  				{  					if (Template.IsEmpty())  					{  						worker.RenameSheet(strategy.Name);  					}  					else  					{  						if (worker.ContainsSheet(strategy.Name))  							worker.AddSheet(strategy.Name);  					}    					worker  						.SetCell(0' 0' LocalizedStrings.Str1331)    						.SetCell(0' 1' LocalizedStrings.Security + ":")  						.SetCell(1' 1' strategy.Security != null ? strategy.Security.Id : string.Empty)    						.SetCell(0' 2' LocalizedStrings.Portfolio + ":")  						.SetCell(1' 2' strategy.Portfolio != null ? strategy.Portfolio.Name : string.Empty)    						.SetCell(0' 3' LocalizedStrings.Str1334)  						.SetCell(1' 3' Format(strategy.TotalWorkingTime))    						.SetCell(0' 4' LocalizedStrings.Str1335)  						//.SetCell(1' 4' FormatTime(base.Strategy.TotalCPUTime))    						.SetCell(0' 5' LocalizedStrings.Str862 + ":")  						.SetCell(1' 5' strategy.Position)    						.SetCell(0' 6' LocalizedStrings.PnL + ":")  						.SetCell(1' 6' strategy.PnL)    						.SetCell(0' 7' LocalizedStrings.Str159 + ":")  						.SetCell(1' 7' strategy.Commission)    						.SetCell(0' 8' LocalizedStrings.Str163 + ":")  						.SetCell(1' 8' strategy.Slippage)    						.SetCell(0' 9' LocalizedStrings.Str161 + ":")  						.SetCell(1' 9' Format(strategy.Latency));    					var rowIndex = 11;    					foreach (var parameter in strategy.StatisticManager.Parameters.SyncGet(c => c.ToArray()))  					{  						var value = parameter.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' parameter.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					rowIndex += 2;  					worker.SetCell(0' rowIndex' LocalizedStrings.Str1340);  					rowIndex++;    					foreach (var strategyParam in strategy.Parameters.CachedValues)  					{  						var value = strategyParam.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' strategyParam.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					//rowIndex += 2;  					//worker.SetCell(0' rowIndex' "Комиссия по типам:");  					//rowIndex++;    					//foreach (var group in Strategy.CommissionManager.Rules.SyncGet(c => c.ToArray()).GroupBy(c => c.GetType().GetDisplayName()))  					//{  					//	var commission = group.Sum(r => r.Commission);    					//	if (commission == 0)  					//		continue;    					//	worker  					//		.SetCell(0' rowIndex' group.Key)  					//		.SetCell(1' rowIndex' commission);    					//	rowIndex++;  					//}    					var columnShift = 3;    					worker  						.SetCell(columnShift + 0' 0' LocalizedStrings.Str985)    						.SetCell(columnShift + 0' 1' LocalizedStrings.Str1192).SetStyle(columnShift + 0' typeof(long))  						.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  						.SetCell(columnShift + 2' 1' LocalizedStrings.Time).SetStyle(columnShift + 2' "HH:mm:ss.fff")  						.SetCell(columnShift + 3' 1' LocalizedStrings.Price).SetStyle(columnShift + 3' typeof(decimal))  						.SetCell(columnShift + 4' 1' LocalizedStrings.Str1341).SetStyle(columnShift + 4' typeof(decimal))  						.SetCell(columnShift + 5' 1' LocalizedStrings.Volume).SetStyle(columnShift + 5' typeof(decimal))  						.SetCell(columnShift + 6' 1' LocalizedStrings.Str128)  						.SetCell(columnShift + 7' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 7' typeof(long))  						.SetCell(columnShift + 8' 1' LocalizedStrings.Str163).SetStyle(columnShift + 8' typeof(decimal))  						.SetCell(columnShift + 9' 1' LocalizedStrings.Str135)  						.SetCell(columnShift + 10' 1' LocalizedStrings.Str1342).SetStyle(columnShift + 11' typeof(decimal))  						.SetCell(columnShift + 11' 1' LocalizedStrings.Str1343).SetStyle(columnShift + 12' typeof(decimal))  						.SetCell(columnShift + 12' 1' LocalizedStrings.Str1344).SetStyle(columnShift + 13' typeof(decimal))  						.SetCell(columnShift + 13' 1' LocalizedStrings.Str1345).SetStyle(columnShift + 14' typeof(decimal))  						.SetCell(columnShift + 14' 1' LocalizedStrings.Str862).SetStyle(columnShift + 15' typeof(decimal));    					worker  						.SetConditionalFormatting(columnShift + 10' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 11' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 12' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 13' ComparisonOperator.Less' "0"' null' Colors.Red);    					var totalPnL = 0m;  					var position = 0m;    					var queues = new Dictionary<Security' PnLQueue>();    					rowIndex = 2;  					foreach (var trade in strategy.MyTrades.ToArray())  					{  						var info = strategy.PnLManager.ProcessMessage(trade.ToMessage());    						totalPnL += info.PnL;  						position += trade.GetPosition() ?? 0;    						var queue = queues.SafeAdd(trade.Trade.Security' key => new PnLQueue(key.ToSecurityId()));    						var localInfo = queue.Process(trade.ToMessage());    						worker  							.SetCell(columnShift + 0' rowIndex' trade.Trade.Id)  							.SetCell(columnShift + 1' rowIndex' trade.Order.TransactionId)  							.SetCell(columnShift + 2' rowIndex' Format(trade.Trade.Time))  							.SetCell(columnShift + 3' rowIndex' trade.Trade.Price)  							.SetCell(columnShift + 4' rowIndex' trade.Order.Price)  							.SetCell(columnShift + 5' rowIndex' trade.Trade.Volume)  							.SetCell(columnShift + 6' rowIndex' Format(trade.Order.Direction))  							.SetCell(columnShift + 7' rowIndex' trade.Order.Id)  							.SetCell(columnShift + 8' rowIndex' trade.Slippage)  							.SetCell(columnShift + 9' rowIndex' trade.Order.Comment)  							.SetCell(columnShift + 10' rowIndex' MathHelper.Round(info.PnL' Decimals))  							.SetCell(columnShift + 11' rowIndex' MathHelper.Round(localInfo.PnL' Decimals))  							.SetCell(columnShift + 12' rowIndex' MathHelper.Round(totalPnL' Decimals))  							.SetCell(columnShift + 13' rowIndex' MathHelper.Round(queue.RealizedPnL' Decimals))  							.SetCell(columnShift + 14' rowIndex' position);    						rowIndex++;  					}    					if (IncludeOrders)  					{  						columnShift += 17;    						worker  							.SetCell(columnShift + 0' 0' LocalizedStrings.Orders)    							.SetCell(columnShift + 0' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  							.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  							.SetCell(columnShift + 2' 1' LocalizedStrings.Str128)  							.SetCell(columnShift + 3' 1' LocalizedStrings.Str1346).SetStyle(columnShift + 3' "HH:mm:ss.fff")  							.SetCell(columnShift + 4' 1' LocalizedStrings.Str1347).SetStyle(columnShift + 4' "HH:mm:ss.fff")  							.SetCell(columnShift + 5' 1' LocalizedStrings.Str1348)  							.SetCell(columnShift + 6' 1' LocalizedStrings.Price).SetStyle(columnShift + 6' typeof(decimal))  							.SetCell(columnShift + 7' 1' LocalizedStrings.Str1323).SetStyle(columnShift + 7' typeof(decimal))  							.SetCell(columnShift + 8' 1' LocalizedStrings.Str1324)  							.SetCell(columnShift + 9' 1' LocalizedStrings.State)  							.SetCell(columnShift + 10' 1' LocalizedStrings.Str1325).SetStyle(columnShift + 10' typeof(decimal))  							.SetCell(columnShift + 11' 1' LocalizedStrings.Volume).SetStyle(columnShift + 11' typeof(decimal))  							.SetCell(columnShift + 12' 1' LocalizedStrings.Type)  							.SetCell(columnShift + 13' 1' LocalizedStrings.Str1326)  							.SetCell(columnShift + 14' 1' LocalizedStrings.Str1327)  							.SetCell(columnShift + 15' 1' LocalizedStrings.Str135);    						worker  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str1329)' null' Colors.Green)  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str238)' null' Colors.Red);    						rowIndex = 2;  						foreach (var order in strategy.Orders.ToArray())  						{  							worker  								.SetCell(columnShift + 0' rowIndex' order.Id)  								.SetCell(columnShift + 1' rowIndex' order.TransactionId)  								.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  								.SetCell(columnShift + 3' rowIndex' Format(order.Time))  								.SetCell(columnShift + 4' rowIndex' Format(order.LastChangeTime))  								.SetCell(columnShift + 5' rowIndex' Format(order.LastChangeTime - order.Time))  								.SetCell(columnShift + 6' rowIndex' order.Price)  								.SetCell(columnShift + 7' rowIndex' MathHelper.Round(order.GetAveragePrice(strategy.Connector)' Decimals))  								.SetCell(columnShift + 8' rowIndex' Format(order.State))  								.SetCell(columnShift + 9' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : LocalizedStrings.Str238))  								.SetCell(columnShift + 10' rowIndex' order.Balance)  								.SetCell(columnShift + 11' rowIndex' order.Volume)  								.SetCell(columnShift + 12' rowIndex' Format(order.Type))  								.SetCell(columnShift + 13' rowIndex' Format(order.LatencyRegistration))  								.SetCell(columnShift + 14' rowIndex' Format(order.LatencyCancellation))  								.SetCell(columnShift + 15' rowIndex' order.Comment);    							rowIndex++;  						}    						var stopOrders = strategy.StopOrders.ToArray();    						if (stopOrders.Length > 0)  						{  							rowIndex += 2;    							worker  								.SetCell(columnShift + 0' rowIndex - 1' LocalizedStrings.Str1351)    								.SetCell(columnShift + 0' rowIndex' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  								.SetCell(columnShift + 1' rowIndex' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  								.SetCell(columnShift + 2' rowIndex' LocalizedStrings.Str128)  								.SetCell(columnShift + 3' rowIndex' LocalizedStrings.Time).SetStyle(columnShift + 3' "HH:mm:ss.fff")  								.SetCell(columnShift + 4' rowIndex' LocalizedStrings.Price).SetStyle(columnShift + 4' typeof(decimal))  								.SetCell(columnShift + 5' rowIndex' LocalizedStrings.Str1324)  								.SetCell(columnShift + 6' rowIndex' LocalizedStrings.State)  								.SetCell(columnShift + 7' rowIndex' LocalizedStrings.Volume).SetStyle(columnShift + 7' typeof(decimal))  								.SetCell(columnShift + 8' rowIndex' LocalizedStrings.Str1326)  								.SetCell(columnShift + 9' rowIndex' LocalizedStrings.Str1327)  								//.SetCell(columnShift + 10' rowIndex' LocalizedStrings.Str1352).SetStyle(columnShift + 9' typeof(long))  								;    							var stopParams = stopOrders[0].Condition.Parameters.Keys.ToArray();    							for (var i = 0; i < stopParams.Length; i++)  								worker.SetCell(columnShift + 11 + i' rowIndex' stopParams[i]);    							foreach (var order in stopOrders)  							{  								worker  									.SetCell(columnShift + 0' rowIndex' order.Id)  									.SetCell(columnShift + 1' rowIndex' order.TransactionId)  									.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  									.SetCell(columnShift + 3' rowIndex' Format(order.Time))  									.SetCell(columnShift + 4' rowIndex' order.Price)  									.SetCell(columnShift + 5' rowIndex' Format(order.State))  									.SetCell(columnShift + 6' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : string.Empty))  									.SetCell(columnShift + 7' rowIndex' order.Volume)  									.SetCell(columnShift + 8' rowIndex' Format(order.LatencyRegistration))  									.SetCell(columnShift + 9' rowIndex' Format(order.LatencyCancellation))  									//.SetCell(columnShift + 10' rowIndex' order.DerivedOrder != null ? (object)order.DerivedOrder.Id : string.Empty)  									;    								for (var i = 0; i < stopParams.Length; i++)  									worker.SetCell(columnShift + 11 + i' rowIndex' order.Condition.Parameters[stopParams[i]] ?? string.Empty);    								rowIndex++;  							}  						}  					}  				}    				worker.Save(FileName' true);  			}
Magic Number,StockSharp.Algo.Strategies.Reporting,ExcelStrategyReport,C:\repos\stocksharp_stocksharp\Algo\Strategies\Reporting\ExcelStrategyReport.cs,Generate,The following statement contains a magic number: using (var worker = hasTemplate ? new ExcelWorker() : new ExcelWorker(Template))  			{  				foreach (var strategy in Strategies)  				{  					if (Template.IsEmpty())  					{  						worker.RenameSheet(strategy.Name);  					}  					else  					{  						if (worker.ContainsSheet(strategy.Name))  							worker.AddSheet(strategy.Name);  					}    					worker  						.SetCell(0' 0' LocalizedStrings.Str1331)    						.SetCell(0' 1' LocalizedStrings.Security + ":")  						.SetCell(1' 1' strategy.Security != null ? strategy.Security.Id : string.Empty)    						.SetCell(0' 2' LocalizedStrings.Portfolio + ":")  						.SetCell(1' 2' strategy.Portfolio != null ? strategy.Portfolio.Name : string.Empty)    						.SetCell(0' 3' LocalizedStrings.Str1334)  						.SetCell(1' 3' Format(strategy.TotalWorkingTime))    						.SetCell(0' 4' LocalizedStrings.Str1335)  						//.SetCell(1' 4' FormatTime(base.Strategy.TotalCPUTime))    						.SetCell(0' 5' LocalizedStrings.Str862 + ":")  						.SetCell(1' 5' strategy.Position)    						.SetCell(0' 6' LocalizedStrings.PnL + ":")  						.SetCell(1' 6' strategy.PnL)    						.SetCell(0' 7' LocalizedStrings.Str159 + ":")  						.SetCell(1' 7' strategy.Commission)    						.SetCell(0' 8' LocalizedStrings.Str163 + ":")  						.SetCell(1' 8' strategy.Slippage)    						.SetCell(0' 9' LocalizedStrings.Str161 + ":")  						.SetCell(1' 9' Format(strategy.Latency));    					var rowIndex = 11;    					foreach (var parameter in strategy.StatisticManager.Parameters.SyncGet(c => c.ToArray()))  					{  						var value = parameter.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' parameter.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					rowIndex += 2;  					worker.SetCell(0' rowIndex' LocalizedStrings.Str1340);  					rowIndex++;    					foreach (var strategyParam in strategy.Parameters.CachedValues)  					{  						var value = strategyParam.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' strategyParam.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					//rowIndex += 2;  					//worker.SetCell(0' rowIndex' "Комиссия по типам:");  					//rowIndex++;    					//foreach (var group in Strategy.CommissionManager.Rules.SyncGet(c => c.ToArray()).GroupBy(c => c.GetType().GetDisplayName()))  					//{  					//	var commission = group.Sum(r => r.Commission);    					//	if (commission == 0)  					//		continue;    					//	worker  					//		.SetCell(0' rowIndex' group.Key)  					//		.SetCell(1' rowIndex' commission);    					//	rowIndex++;  					//}    					var columnShift = 3;    					worker  						.SetCell(columnShift + 0' 0' LocalizedStrings.Str985)    						.SetCell(columnShift + 0' 1' LocalizedStrings.Str1192).SetStyle(columnShift + 0' typeof(long))  						.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  						.SetCell(columnShift + 2' 1' LocalizedStrings.Time).SetStyle(columnShift + 2' "HH:mm:ss.fff")  						.SetCell(columnShift + 3' 1' LocalizedStrings.Price).SetStyle(columnShift + 3' typeof(decimal))  						.SetCell(columnShift + 4' 1' LocalizedStrings.Str1341).SetStyle(columnShift + 4' typeof(decimal))  						.SetCell(columnShift + 5' 1' LocalizedStrings.Volume).SetStyle(columnShift + 5' typeof(decimal))  						.SetCell(columnShift + 6' 1' LocalizedStrings.Str128)  						.SetCell(columnShift + 7' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 7' typeof(long))  						.SetCell(columnShift + 8' 1' LocalizedStrings.Str163).SetStyle(columnShift + 8' typeof(decimal))  						.SetCell(columnShift + 9' 1' LocalizedStrings.Str135)  						.SetCell(columnShift + 10' 1' LocalizedStrings.Str1342).SetStyle(columnShift + 11' typeof(decimal))  						.SetCell(columnShift + 11' 1' LocalizedStrings.Str1343).SetStyle(columnShift + 12' typeof(decimal))  						.SetCell(columnShift + 12' 1' LocalizedStrings.Str1344).SetStyle(columnShift + 13' typeof(decimal))  						.SetCell(columnShift + 13' 1' LocalizedStrings.Str1345).SetStyle(columnShift + 14' typeof(decimal))  						.SetCell(columnShift + 14' 1' LocalizedStrings.Str862).SetStyle(columnShift + 15' typeof(decimal));    					worker  						.SetConditionalFormatting(columnShift + 10' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 11' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 12' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 13' ComparisonOperator.Less' "0"' null' Colors.Red);    					var totalPnL = 0m;  					var position = 0m;    					var queues = new Dictionary<Security' PnLQueue>();    					rowIndex = 2;  					foreach (var trade in strategy.MyTrades.ToArray())  					{  						var info = strategy.PnLManager.ProcessMessage(trade.ToMessage());    						totalPnL += info.PnL;  						position += trade.GetPosition() ?? 0;    						var queue = queues.SafeAdd(trade.Trade.Security' key => new PnLQueue(key.ToSecurityId()));    						var localInfo = queue.Process(trade.ToMessage());    						worker  							.SetCell(columnShift + 0' rowIndex' trade.Trade.Id)  							.SetCell(columnShift + 1' rowIndex' trade.Order.TransactionId)  							.SetCell(columnShift + 2' rowIndex' Format(trade.Trade.Time))  							.SetCell(columnShift + 3' rowIndex' trade.Trade.Price)  							.SetCell(columnShift + 4' rowIndex' trade.Order.Price)  							.SetCell(columnShift + 5' rowIndex' trade.Trade.Volume)  							.SetCell(columnShift + 6' rowIndex' Format(trade.Order.Direction))  							.SetCell(columnShift + 7' rowIndex' trade.Order.Id)  							.SetCell(columnShift + 8' rowIndex' trade.Slippage)  							.SetCell(columnShift + 9' rowIndex' trade.Order.Comment)  							.SetCell(columnShift + 10' rowIndex' MathHelper.Round(info.PnL' Decimals))  							.SetCell(columnShift + 11' rowIndex' MathHelper.Round(localInfo.PnL' Decimals))  							.SetCell(columnShift + 12' rowIndex' MathHelper.Round(totalPnL' Decimals))  							.SetCell(columnShift + 13' rowIndex' MathHelper.Round(queue.RealizedPnL' Decimals))  							.SetCell(columnShift + 14' rowIndex' position);    						rowIndex++;  					}    					if (IncludeOrders)  					{  						columnShift += 17;    						worker  							.SetCell(columnShift + 0' 0' LocalizedStrings.Orders)    							.SetCell(columnShift + 0' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  							.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  							.SetCell(columnShift + 2' 1' LocalizedStrings.Str128)  							.SetCell(columnShift + 3' 1' LocalizedStrings.Str1346).SetStyle(columnShift + 3' "HH:mm:ss.fff")  							.SetCell(columnShift + 4' 1' LocalizedStrings.Str1347).SetStyle(columnShift + 4' "HH:mm:ss.fff")  							.SetCell(columnShift + 5' 1' LocalizedStrings.Str1348)  							.SetCell(columnShift + 6' 1' LocalizedStrings.Price).SetStyle(columnShift + 6' typeof(decimal))  							.SetCell(columnShift + 7' 1' LocalizedStrings.Str1323).SetStyle(columnShift + 7' typeof(decimal))  							.SetCell(columnShift + 8' 1' LocalizedStrings.Str1324)  							.SetCell(columnShift + 9' 1' LocalizedStrings.State)  							.SetCell(columnShift + 10' 1' LocalizedStrings.Str1325).SetStyle(columnShift + 10' typeof(decimal))  							.SetCell(columnShift + 11' 1' LocalizedStrings.Volume).SetStyle(columnShift + 11' typeof(decimal))  							.SetCell(columnShift + 12' 1' LocalizedStrings.Type)  							.SetCell(columnShift + 13' 1' LocalizedStrings.Str1326)  							.SetCell(columnShift + 14' 1' LocalizedStrings.Str1327)  							.SetCell(columnShift + 15' 1' LocalizedStrings.Str135);    						worker  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str1329)' null' Colors.Green)  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str238)' null' Colors.Red);    						rowIndex = 2;  						foreach (var order in strategy.Orders.ToArray())  						{  							worker  								.SetCell(columnShift + 0' rowIndex' order.Id)  								.SetCell(columnShift + 1' rowIndex' order.TransactionId)  								.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  								.SetCell(columnShift + 3' rowIndex' Format(order.Time))  								.SetCell(columnShift + 4' rowIndex' Format(order.LastChangeTime))  								.SetCell(columnShift + 5' rowIndex' Format(order.LastChangeTime - order.Time))  								.SetCell(columnShift + 6' rowIndex' order.Price)  								.SetCell(columnShift + 7' rowIndex' MathHelper.Round(order.GetAveragePrice(strategy.Connector)' Decimals))  								.SetCell(columnShift + 8' rowIndex' Format(order.State))  								.SetCell(columnShift + 9' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : LocalizedStrings.Str238))  								.SetCell(columnShift + 10' rowIndex' order.Balance)  								.SetCell(columnShift + 11' rowIndex' order.Volume)  								.SetCell(columnShift + 12' rowIndex' Format(order.Type))  								.SetCell(columnShift + 13' rowIndex' Format(order.LatencyRegistration))  								.SetCell(columnShift + 14' rowIndex' Format(order.LatencyCancellation))  								.SetCell(columnShift + 15' rowIndex' order.Comment);    							rowIndex++;  						}    						var stopOrders = strategy.StopOrders.ToArray();    						if (stopOrders.Length > 0)  						{  							rowIndex += 2;    							worker  								.SetCell(columnShift + 0' rowIndex - 1' LocalizedStrings.Str1351)    								.SetCell(columnShift + 0' rowIndex' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  								.SetCell(columnShift + 1' rowIndex' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  								.SetCell(columnShift + 2' rowIndex' LocalizedStrings.Str128)  								.SetCell(columnShift + 3' rowIndex' LocalizedStrings.Time).SetStyle(columnShift + 3' "HH:mm:ss.fff")  								.SetCell(columnShift + 4' rowIndex' LocalizedStrings.Price).SetStyle(columnShift + 4' typeof(decimal))  								.SetCell(columnShift + 5' rowIndex' LocalizedStrings.Str1324)  								.SetCell(columnShift + 6' rowIndex' LocalizedStrings.State)  								.SetCell(columnShift + 7' rowIndex' LocalizedStrings.Volume).SetStyle(columnShift + 7' typeof(decimal))  								.SetCell(columnShift + 8' rowIndex' LocalizedStrings.Str1326)  								.SetCell(columnShift + 9' rowIndex' LocalizedStrings.Str1327)  								//.SetCell(columnShift + 10' rowIndex' LocalizedStrings.Str1352).SetStyle(columnShift + 9' typeof(long))  								;    							var stopParams = stopOrders[0].Condition.Parameters.Keys.ToArray();    							for (var i = 0; i < stopParams.Length; i++)  								worker.SetCell(columnShift + 11 + i' rowIndex' stopParams[i]);    							foreach (var order in stopOrders)  							{  								worker  									.SetCell(columnShift + 0' rowIndex' order.Id)  									.SetCell(columnShift + 1' rowIndex' order.TransactionId)  									.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  									.SetCell(columnShift + 3' rowIndex' Format(order.Time))  									.SetCell(columnShift + 4' rowIndex' order.Price)  									.SetCell(columnShift + 5' rowIndex' Format(order.State))  									.SetCell(columnShift + 6' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : string.Empty))  									.SetCell(columnShift + 7' rowIndex' order.Volume)  									.SetCell(columnShift + 8' rowIndex' Format(order.LatencyRegistration))  									.SetCell(columnShift + 9' rowIndex' Format(order.LatencyCancellation))  									//.SetCell(columnShift + 10' rowIndex' order.DerivedOrder != null ? (object)order.DerivedOrder.Id : string.Empty)  									;    								for (var i = 0; i < stopParams.Length; i++)  									worker.SetCell(columnShift + 11 + i' rowIndex' order.Condition.Parameters[stopParams[i]] ?? string.Empty);    								rowIndex++;  							}  						}  					}  				}    				worker.Save(FileName' true);  			}
Magic Number,StockSharp.Algo.Strategies.Reporting,ExcelStrategyReport,C:\repos\stocksharp_stocksharp\Algo\Strategies\Reporting\ExcelStrategyReport.cs,Generate,The following statement contains a magic number: using (var worker = hasTemplate ? new ExcelWorker() : new ExcelWorker(Template))  			{  				foreach (var strategy in Strategies)  				{  					if (Template.IsEmpty())  					{  						worker.RenameSheet(strategy.Name);  					}  					else  					{  						if (worker.ContainsSheet(strategy.Name))  							worker.AddSheet(strategy.Name);  					}    					worker  						.SetCell(0' 0' LocalizedStrings.Str1331)    						.SetCell(0' 1' LocalizedStrings.Security + ":")  						.SetCell(1' 1' strategy.Security != null ? strategy.Security.Id : string.Empty)    						.SetCell(0' 2' LocalizedStrings.Portfolio + ":")  						.SetCell(1' 2' strategy.Portfolio != null ? strategy.Portfolio.Name : string.Empty)    						.SetCell(0' 3' LocalizedStrings.Str1334)  						.SetCell(1' 3' Format(strategy.TotalWorkingTime))    						.SetCell(0' 4' LocalizedStrings.Str1335)  						//.SetCell(1' 4' FormatTime(base.Strategy.TotalCPUTime))    						.SetCell(0' 5' LocalizedStrings.Str862 + ":")  						.SetCell(1' 5' strategy.Position)    						.SetCell(0' 6' LocalizedStrings.PnL + ":")  						.SetCell(1' 6' strategy.PnL)    						.SetCell(0' 7' LocalizedStrings.Str159 + ":")  						.SetCell(1' 7' strategy.Commission)    						.SetCell(0' 8' LocalizedStrings.Str163 + ":")  						.SetCell(1' 8' strategy.Slippage)    						.SetCell(0' 9' LocalizedStrings.Str161 + ":")  						.SetCell(1' 9' Format(strategy.Latency));    					var rowIndex = 11;    					foreach (var parameter in strategy.StatisticManager.Parameters.SyncGet(c => c.ToArray()))  					{  						var value = parameter.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' parameter.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					rowIndex += 2;  					worker.SetCell(0' rowIndex' LocalizedStrings.Str1340);  					rowIndex++;    					foreach (var strategyParam in strategy.Parameters.CachedValues)  					{  						var value = strategyParam.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' strategyParam.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					//rowIndex += 2;  					//worker.SetCell(0' rowIndex' "Комиссия по типам:");  					//rowIndex++;    					//foreach (var group in Strategy.CommissionManager.Rules.SyncGet(c => c.ToArray()).GroupBy(c => c.GetType().GetDisplayName()))  					//{  					//	var commission = group.Sum(r => r.Commission);    					//	if (commission == 0)  					//		continue;    					//	worker  					//		.SetCell(0' rowIndex' group.Key)  					//		.SetCell(1' rowIndex' commission);    					//	rowIndex++;  					//}    					var columnShift = 3;    					worker  						.SetCell(columnShift + 0' 0' LocalizedStrings.Str985)    						.SetCell(columnShift + 0' 1' LocalizedStrings.Str1192).SetStyle(columnShift + 0' typeof(long))  						.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  						.SetCell(columnShift + 2' 1' LocalizedStrings.Time).SetStyle(columnShift + 2' "HH:mm:ss.fff")  						.SetCell(columnShift + 3' 1' LocalizedStrings.Price).SetStyle(columnShift + 3' typeof(decimal))  						.SetCell(columnShift + 4' 1' LocalizedStrings.Str1341).SetStyle(columnShift + 4' typeof(decimal))  						.SetCell(columnShift + 5' 1' LocalizedStrings.Volume).SetStyle(columnShift + 5' typeof(decimal))  						.SetCell(columnShift + 6' 1' LocalizedStrings.Str128)  						.SetCell(columnShift + 7' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 7' typeof(long))  						.SetCell(columnShift + 8' 1' LocalizedStrings.Str163).SetStyle(columnShift + 8' typeof(decimal))  						.SetCell(columnShift + 9' 1' LocalizedStrings.Str135)  						.SetCell(columnShift + 10' 1' LocalizedStrings.Str1342).SetStyle(columnShift + 11' typeof(decimal))  						.SetCell(columnShift + 11' 1' LocalizedStrings.Str1343).SetStyle(columnShift + 12' typeof(decimal))  						.SetCell(columnShift + 12' 1' LocalizedStrings.Str1344).SetStyle(columnShift + 13' typeof(decimal))  						.SetCell(columnShift + 13' 1' LocalizedStrings.Str1345).SetStyle(columnShift + 14' typeof(decimal))  						.SetCell(columnShift + 14' 1' LocalizedStrings.Str862).SetStyle(columnShift + 15' typeof(decimal));    					worker  						.SetConditionalFormatting(columnShift + 10' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 11' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 12' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 13' ComparisonOperator.Less' "0"' null' Colors.Red);    					var totalPnL = 0m;  					var position = 0m;    					var queues = new Dictionary<Security' PnLQueue>();    					rowIndex = 2;  					foreach (var trade in strategy.MyTrades.ToArray())  					{  						var info = strategy.PnLManager.ProcessMessage(trade.ToMessage());    						totalPnL += info.PnL;  						position += trade.GetPosition() ?? 0;    						var queue = queues.SafeAdd(trade.Trade.Security' key => new PnLQueue(key.ToSecurityId()));    						var localInfo = queue.Process(trade.ToMessage());    						worker  							.SetCell(columnShift + 0' rowIndex' trade.Trade.Id)  							.SetCell(columnShift + 1' rowIndex' trade.Order.TransactionId)  							.SetCell(columnShift + 2' rowIndex' Format(trade.Trade.Time))  							.SetCell(columnShift + 3' rowIndex' trade.Trade.Price)  							.SetCell(columnShift + 4' rowIndex' trade.Order.Price)  							.SetCell(columnShift + 5' rowIndex' trade.Trade.Volume)  							.SetCell(columnShift + 6' rowIndex' Format(trade.Order.Direction))  							.SetCell(columnShift + 7' rowIndex' trade.Order.Id)  							.SetCell(columnShift + 8' rowIndex' trade.Slippage)  							.SetCell(columnShift + 9' rowIndex' trade.Order.Comment)  							.SetCell(columnShift + 10' rowIndex' MathHelper.Round(info.PnL' Decimals))  							.SetCell(columnShift + 11' rowIndex' MathHelper.Round(localInfo.PnL' Decimals))  							.SetCell(columnShift + 12' rowIndex' MathHelper.Round(totalPnL' Decimals))  							.SetCell(columnShift + 13' rowIndex' MathHelper.Round(queue.RealizedPnL' Decimals))  							.SetCell(columnShift + 14' rowIndex' position);    						rowIndex++;  					}    					if (IncludeOrders)  					{  						columnShift += 17;    						worker  							.SetCell(columnShift + 0' 0' LocalizedStrings.Orders)    							.SetCell(columnShift + 0' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  							.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  							.SetCell(columnShift + 2' 1' LocalizedStrings.Str128)  							.SetCell(columnShift + 3' 1' LocalizedStrings.Str1346).SetStyle(columnShift + 3' "HH:mm:ss.fff")  							.SetCell(columnShift + 4' 1' LocalizedStrings.Str1347).SetStyle(columnShift + 4' "HH:mm:ss.fff")  							.SetCell(columnShift + 5' 1' LocalizedStrings.Str1348)  							.SetCell(columnShift + 6' 1' LocalizedStrings.Price).SetStyle(columnShift + 6' typeof(decimal))  							.SetCell(columnShift + 7' 1' LocalizedStrings.Str1323).SetStyle(columnShift + 7' typeof(decimal))  							.SetCell(columnShift + 8' 1' LocalizedStrings.Str1324)  							.SetCell(columnShift + 9' 1' LocalizedStrings.State)  							.SetCell(columnShift + 10' 1' LocalizedStrings.Str1325).SetStyle(columnShift + 10' typeof(decimal))  							.SetCell(columnShift + 11' 1' LocalizedStrings.Volume).SetStyle(columnShift + 11' typeof(decimal))  							.SetCell(columnShift + 12' 1' LocalizedStrings.Type)  							.SetCell(columnShift + 13' 1' LocalizedStrings.Str1326)  							.SetCell(columnShift + 14' 1' LocalizedStrings.Str1327)  							.SetCell(columnShift + 15' 1' LocalizedStrings.Str135);    						worker  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str1329)' null' Colors.Green)  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str238)' null' Colors.Red);    						rowIndex = 2;  						foreach (var order in strategy.Orders.ToArray())  						{  							worker  								.SetCell(columnShift + 0' rowIndex' order.Id)  								.SetCell(columnShift + 1' rowIndex' order.TransactionId)  								.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  								.SetCell(columnShift + 3' rowIndex' Format(order.Time))  								.SetCell(columnShift + 4' rowIndex' Format(order.LastChangeTime))  								.SetCell(columnShift + 5' rowIndex' Format(order.LastChangeTime - order.Time))  								.SetCell(columnShift + 6' rowIndex' order.Price)  								.SetCell(columnShift + 7' rowIndex' MathHelper.Round(order.GetAveragePrice(strategy.Connector)' Decimals))  								.SetCell(columnShift + 8' rowIndex' Format(order.State))  								.SetCell(columnShift + 9' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : LocalizedStrings.Str238))  								.SetCell(columnShift + 10' rowIndex' order.Balance)  								.SetCell(columnShift + 11' rowIndex' order.Volume)  								.SetCell(columnShift + 12' rowIndex' Format(order.Type))  								.SetCell(columnShift + 13' rowIndex' Format(order.LatencyRegistration))  								.SetCell(columnShift + 14' rowIndex' Format(order.LatencyCancellation))  								.SetCell(columnShift + 15' rowIndex' order.Comment);    							rowIndex++;  						}    						var stopOrders = strategy.StopOrders.ToArray();    						if (stopOrders.Length > 0)  						{  							rowIndex += 2;    							worker  								.SetCell(columnShift + 0' rowIndex - 1' LocalizedStrings.Str1351)    								.SetCell(columnShift + 0' rowIndex' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  								.SetCell(columnShift + 1' rowIndex' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  								.SetCell(columnShift + 2' rowIndex' LocalizedStrings.Str128)  								.SetCell(columnShift + 3' rowIndex' LocalizedStrings.Time).SetStyle(columnShift + 3' "HH:mm:ss.fff")  								.SetCell(columnShift + 4' rowIndex' LocalizedStrings.Price).SetStyle(columnShift + 4' typeof(decimal))  								.SetCell(columnShift + 5' rowIndex' LocalizedStrings.Str1324)  								.SetCell(columnShift + 6' rowIndex' LocalizedStrings.State)  								.SetCell(columnShift + 7' rowIndex' LocalizedStrings.Volume).SetStyle(columnShift + 7' typeof(decimal))  								.SetCell(columnShift + 8' rowIndex' LocalizedStrings.Str1326)  								.SetCell(columnShift + 9' rowIndex' LocalizedStrings.Str1327)  								//.SetCell(columnShift + 10' rowIndex' LocalizedStrings.Str1352).SetStyle(columnShift + 9' typeof(long))  								;    							var stopParams = stopOrders[0].Condition.Parameters.Keys.ToArray();    							for (var i = 0; i < stopParams.Length; i++)  								worker.SetCell(columnShift + 11 + i' rowIndex' stopParams[i]);    							foreach (var order in stopOrders)  							{  								worker  									.SetCell(columnShift + 0' rowIndex' order.Id)  									.SetCell(columnShift + 1' rowIndex' order.TransactionId)  									.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  									.SetCell(columnShift + 3' rowIndex' Format(order.Time))  									.SetCell(columnShift + 4' rowIndex' order.Price)  									.SetCell(columnShift + 5' rowIndex' Format(order.State))  									.SetCell(columnShift + 6' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : string.Empty))  									.SetCell(columnShift + 7' rowIndex' order.Volume)  									.SetCell(columnShift + 8' rowIndex' Format(order.LatencyRegistration))  									.SetCell(columnShift + 9' rowIndex' Format(order.LatencyCancellation))  									//.SetCell(columnShift + 10' rowIndex' order.DerivedOrder != null ? (object)order.DerivedOrder.Id : string.Empty)  									;    								for (var i = 0; i < stopParams.Length; i++)  									worker.SetCell(columnShift + 11 + i' rowIndex' order.Condition.Parameters[stopParams[i]] ?? string.Empty);    								rowIndex++;  							}  						}  					}  				}    				worker.Save(FileName' true);  			}
Magic Number,StockSharp.Algo.Strategies.Reporting,ExcelStrategyReport,C:\repos\stocksharp_stocksharp\Algo\Strategies\Reporting\ExcelStrategyReport.cs,Generate,The following statement contains a magic number: using (var worker = hasTemplate ? new ExcelWorker() : new ExcelWorker(Template))  			{  				foreach (var strategy in Strategies)  				{  					if (Template.IsEmpty())  					{  						worker.RenameSheet(strategy.Name);  					}  					else  					{  						if (worker.ContainsSheet(strategy.Name))  							worker.AddSheet(strategy.Name);  					}    					worker  						.SetCell(0' 0' LocalizedStrings.Str1331)    						.SetCell(0' 1' LocalizedStrings.Security + ":")  						.SetCell(1' 1' strategy.Security != null ? strategy.Security.Id : string.Empty)    						.SetCell(0' 2' LocalizedStrings.Portfolio + ":")  						.SetCell(1' 2' strategy.Portfolio != null ? strategy.Portfolio.Name : string.Empty)    						.SetCell(0' 3' LocalizedStrings.Str1334)  						.SetCell(1' 3' Format(strategy.TotalWorkingTime))    						.SetCell(0' 4' LocalizedStrings.Str1335)  						//.SetCell(1' 4' FormatTime(base.Strategy.TotalCPUTime))    						.SetCell(0' 5' LocalizedStrings.Str862 + ":")  						.SetCell(1' 5' strategy.Position)    						.SetCell(0' 6' LocalizedStrings.PnL + ":")  						.SetCell(1' 6' strategy.PnL)    						.SetCell(0' 7' LocalizedStrings.Str159 + ":")  						.SetCell(1' 7' strategy.Commission)    						.SetCell(0' 8' LocalizedStrings.Str163 + ":")  						.SetCell(1' 8' strategy.Slippage)    						.SetCell(0' 9' LocalizedStrings.Str161 + ":")  						.SetCell(1' 9' Format(strategy.Latency));    					var rowIndex = 11;    					foreach (var parameter in strategy.StatisticManager.Parameters.SyncGet(c => c.ToArray()))  					{  						var value = parameter.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' parameter.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					rowIndex += 2;  					worker.SetCell(0' rowIndex' LocalizedStrings.Str1340);  					rowIndex++;    					foreach (var strategyParam in strategy.Parameters.CachedValues)  					{  						var value = strategyParam.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' strategyParam.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					//rowIndex += 2;  					//worker.SetCell(0' rowIndex' "Комиссия по типам:");  					//rowIndex++;    					//foreach (var group in Strategy.CommissionManager.Rules.SyncGet(c => c.ToArray()).GroupBy(c => c.GetType().GetDisplayName()))  					//{  					//	var commission = group.Sum(r => r.Commission);    					//	if (commission == 0)  					//		continue;    					//	worker  					//		.SetCell(0' rowIndex' group.Key)  					//		.SetCell(1' rowIndex' commission);    					//	rowIndex++;  					//}    					var columnShift = 3;    					worker  						.SetCell(columnShift + 0' 0' LocalizedStrings.Str985)    						.SetCell(columnShift + 0' 1' LocalizedStrings.Str1192).SetStyle(columnShift + 0' typeof(long))  						.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  						.SetCell(columnShift + 2' 1' LocalizedStrings.Time).SetStyle(columnShift + 2' "HH:mm:ss.fff")  						.SetCell(columnShift + 3' 1' LocalizedStrings.Price).SetStyle(columnShift + 3' typeof(decimal))  						.SetCell(columnShift + 4' 1' LocalizedStrings.Str1341).SetStyle(columnShift + 4' typeof(decimal))  						.SetCell(columnShift + 5' 1' LocalizedStrings.Volume).SetStyle(columnShift + 5' typeof(decimal))  						.SetCell(columnShift + 6' 1' LocalizedStrings.Str128)  						.SetCell(columnShift + 7' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 7' typeof(long))  						.SetCell(columnShift + 8' 1' LocalizedStrings.Str163).SetStyle(columnShift + 8' typeof(decimal))  						.SetCell(columnShift + 9' 1' LocalizedStrings.Str135)  						.SetCell(columnShift + 10' 1' LocalizedStrings.Str1342).SetStyle(columnShift + 11' typeof(decimal))  						.SetCell(columnShift + 11' 1' LocalizedStrings.Str1343).SetStyle(columnShift + 12' typeof(decimal))  						.SetCell(columnShift + 12' 1' LocalizedStrings.Str1344).SetStyle(columnShift + 13' typeof(decimal))  						.SetCell(columnShift + 13' 1' LocalizedStrings.Str1345).SetStyle(columnShift + 14' typeof(decimal))  						.SetCell(columnShift + 14' 1' LocalizedStrings.Str862).SetStyle(columnShift + 15' typeof(decimal));    					worker  						.SetConditionalFormatting(columnShift + 10' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 11' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 12' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 13' ComparisonOperator.Less' "0"' null' Colors.Red);    					var totalPnL = 0m;  					var position = 0m;    					var queues = new Dictionary<Security' PnLQueue>();    					rowIndex = 2;  					foreach (var trade in strategy.MyTrades.ToArray())  					{  						var info = strategy.PnLManager.ProcessMessage(trade.ToMessage());    						totalPnL += info.PnL;  						position += trade.GetPosition() ?? 0;    						var queue = queues.SafeAdd(trade.Trade.Security' key => new PnLQueue(key.ToSecurityId()));    						var localInfo = queue.Process(trade.ToMessage());    						worker  							.SetCell(columnShift + 0' rowIndex' trade.Trade.Id)  							.SetCell(columnShift + 1' rowIndex' trade.Order.TransactionId)  							.SetCell(columnShift + 2' rowIndex' Format(trade.Trade.Time))  							.SetCell(columnShift + 3' rowIndex' trade.Trade.Price)  							.SetCell(columnShift + 4' rowIndex' trade.Order.Price)  							.SetCell(columnShift + 5' rowIndex' trade.Trade.Volume)  							.SetCell(columnShift + 6' rowIndex' Format(trade.Order.Direction))  							.SetCell(columnShift + 7' rowIndex' trade.Order.Id)  							.SetCell(columnShift + 8' rowIndex' trade.Slippage)  							.SetCell(columnShift + 9' rowIndex' trade.Order.Comment)  							.SetCell(columnShift + 10' rowIndex' MathHelper.Round(info.PnL' Decimals))  							.SetCell(columnShift + 11' rowIndex' MathHelper.Round(localInfo.PnL' Decimals))  							.SetCell(columnShift + 12' rowIndex' MathHelper.Round(totalPnL' Decimals))  							.SetCell(columnShift + 13' rowIndex' MathHelper.Round(queue.RealizedPnL' Decimals))  							.SetCell(columnShift + 14' rowIndex' position);    						rowIndex++;  					}    					if (IncludeOrders)  					{  						columnShift += 17;    						worker  							.SetCell(columnShift + 0' 0' LocalizedStrings.Orders)    							.SetCell(columnShift + 0' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  							.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  							.SetCell(columnShift + 2' 1' LocalizedStrings.Str128)  							.SetCell(columnShift + 3' 1' LocalizedStrings.Str1346).SetStyle(columnShift + 3' "HH:mm:ss.fff")  							.SetCell(columnShift + 4' 1' LocalizedStrings.Str1347).SetStyle(columnShift + 4' "HH:mm:ss.fff")  							.SetCell(columnShift + 5' 1' LocalizedStrings.Str1348)  							.SetCell(columnShift + 6' 1' LocalizedStrings.Price).SetStyle(columnShift + 6' typeof(decimal))  							.SetCell(columnShift + 7' 1' LocalizedStrings.Str1323).SetStyle(columnShift + 7' typeof(decimal))  							.SetCell(columnShift + 8' 1' LocalizedStrings.Str1324)  							.SetCell(columnShift + 9' 1' LocalizedStrings.State)  							.SetCell(columnShift + 10' 1' LocalizedStrings.Str1325).SetStyle(columnShift + 10' typeof(decimal))  							.SetCell(columnShift + 11' 1' LocalizedStrings.Volume).SetStyle(columnShift + 11' typeof(decimal))  							.SetCell(columnShift + 12' 1' LocalizedStrings.Type)  							.SetCell(columnShift + 13' 1' LocalizedStrings.Str1326)  							.SetCell(columnShift + 14' 1' LocalizedStrings.Str1327)  							.SetCell(columnShift + 15' 1' LocalizedStrings.Str135);    						worker  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str1329)' null' Colors.Green)  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str238)' null' Colors.Red);    						rowIndex = 2;  						foreach (var order in strategy.Orders.ToArray())  						{  							worker  								.SetCell(columnShift + 0' rowIndex' order.Id)  								.SetCell(columnShift + 1' rowIndex' order.TransactionId)  								.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  								.SetCell(columnShift + 3' rowIndex' Format(order.Time))  								.SetCell(columnShift + 4' rowIndex' Format(order.LastChangeTime))  								.SetCell(columnShift + 5' rowIndex' Format(order.LastChangeTime - order.Time))  								.SetCell(columnShift + 6' rowIndex' order.Price)  								.SetCell(columnShift + 7' rowIndex' MathHelper.Round(order.GetAveragePrice(strategy.Connector)' Decimals))  								.SetCell(columnShift + 8' rowIndex' Format(order.State))  								.SetCell(columnShift + 9' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : LocalizedStrings.Str238))  								.SetCell(columnShift + 10' rowIndex' order.Balance)  								.SetCell(columnShift + 11' rowIndex' order.Volume)  								.SetCell(columnShift + 12' rowIndex' Format(order.Type))  								.SetCell(columnShift + 13' rowIndex' Format(order.LatencyRegistration))  								.SetCell(columnShift + 14' rowIndex' Format(order.LatencyCancellation))  								.SetCell(columnShift + 15' rowIndex' order.Comment);    							rowIndex++;  						}    						var stopOrders = strategy.StopOrders.ToArray();    						if (stopOrders.Length > 0)  						{  							rowIndex += 2;    							worker  								.SetCell(columnShift + 0' rowIndex - 1' LocalizedStrings.Str1351)    								.SetCell(columnShift + 0' rowIndex' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  								.SetCell(columnShift + 1' rowIndex' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  								.SetCell(columnShift + 2' rowIndex' LocalizedStrings.Str128)  								.SetCell(columnShift + 3' rowIndex' LocalizedStrings.Time).SetStyle(columnShift + 3' "HH:mm:ss.fff")  								.SetCell(columnShift + 4' rowIndex' LocalizedStrings.Price).SetStyle(columnShift + 4' typeof(decimal))  								.SetCell(columnShift + 5' rowIndex' LocalizedStrings.Str1324)  								.SetCell(columnShift + 6' rowIndex' LocalizedStrings.State)  								.SetCell(columnShift + 7' rowIndex' LocalizedStrings.Volume).SetStyle(columnShift + 7' typeof(decimal))  								.SetCell(columnShift + 8' rowIndex' LocalizedStrings.Str1326)  								.SetCell(columnShift + 9' rowIndex' LocalizedStrings.Str1327)  								//.SetCell(columnShift + 10' rowIndex' LocalizedStrings.Str1352).SetStyle(columnShift + 9' typeof(long))  								;    							var stopParams = stopOrders[0].Condition.Parameters.Keys.ToArray();    							for (var i = 0; i < stopParams.Length; i++)  								worker.SetCell(columnShift + 11 + i' rowIndex' stopParams[i]);    							foreach (var order in stopOrders)  							{  								worker  									.SetCell(columnShift + 0' rowIndex' order.Id)  									.SetCell(columnShift + 1' rowIndex' order.TransactionId)  									.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  									.SetCell(columnShift + 3' rowIndex' Format(order.Time))  									.SetCell(columnShift + 4' rowIndex' order.Price)  									.SetCell(columnShift + 5' rowIndex' Format(order.State))  									.SetCell(columnShift + 6' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : string.Empty))  									.SetCell(columnShift + 7' rowIndex' order.Volume)  									.SetCell(columnShift + 8' rowIndex' Format(order.LatencyRegistration))  									.SetCell(columnShift + 9' rowIndex' Format(order.LatencyCancellation))  									//.SetCell(columnShift + 10' rowIndex' order.DerivedOrder != null ? (object)order.DerivedOrder.Id : string.Empty)  									;    								for (var i = 0; i < stopParams.Length; i++)  									worker.SetCell(columnShift + 11 + i' rowIndex' order.Condition.Parameters[stopParams[i]] ?? string.Empty);    								rowIndex++;  							}  						}  					}  				}    				worker.Save(FileName' true);  			}
Magic Number,StockSharp.Algo.Strategies.Reporting,ExcelStrategyReport,C:\repos\stocksharp_stocksharp\Algo\Strategies\Reporting\ExcelStrategyReport.cs,Generate,The following statement contains a magic number: using (var worker = hasTemplate ? new ExcelWorker() : new ExcelWorker(Template))  			{  				foreach (var strategy in Strategies)  				{  					if (Template.IsEmpty())  					{  						worker.RenameSheet(strategy.Name);  					}  					else  					{  						if (worker.ContainsSheet(strategy.Name))  							worker.AddSheet(strategy.Name);  					}    					worker  						.SetCell(0' 0' LocalizedStrings.Str1331)    						.SetCell(0' 1' LocalizedStrings.Security + ":")  						.SetCell(1' 1' strategy.Security != null ? strategy.Security.Id : string.Empty)    						.SetCell(0' 2' LocalizedStrings.Portfolio + ":")  						.SetCell(1' 2' strategy.Portfolio != null ? strategy.Portfolio.Name : string.Empty)    						.SetCell(0' 3' LocalizedStrings.Str1334)  						.SetCell(1' 3' Format(strategy.TotalWorkingTime))    						.SetCell(0' 4' LocalizedStrings.Str1335)  						//.SetCell(1' 4' FormatTime(base.Strategy.TotalCPUTime))    						.SetCell(0' 5' LocalizedStrings.Str862 + ":")  						.SetCell(1' 5' strategy.Position)    						.SetCell(0' 6' LocalizedStrings.PnL + ":")  						.SetCell(1' 6' strategy.PnL)    						.SetCell(0' 7' LocalizedStrings.Str159 + ":")  						.SetCell(1' 7' strategy.Commission)    						.SetCell(0' 8' LocalizedStrings.Str163 + ":")  						.SetCell(1' 8' strategy.Slippage)    						.SetCell(0' 9' LocalizedStrings.Str161 + ":")  						.SetCell(1' 9' Format(strategy.Latency));    					var rowIndex = 11;    					foreach (var parameter in strategy.StatisticManager.Parameters.SyncGet(c => c.ToArray()))  					{  						var value = parameter.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' parameter.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					rowIndex += 2;  					worker.SetCell(0' rowIndex' LocalizedStrings.Str1340);  					rowIndex++;    					foreach (var strategyParam in strategy.Parameters.CachedValues)  					{  						var value = strategyParam.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' strategyParam.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					//rowIndex += 2;  					//worker.SetCell(0' rowIndex' "Комиссия по типам:");  					//rowIndex++;    					//foreach (var group in Strategy.CommissionManager.Rules.SyncGet(c => c.ToArray()).GroupBy(c => c.GetType().GetDisplayName()))  					//{  					//	var commission = group.Sum(r => r.Commission);    					//	if (commission == 0)  					//		continue;    					//	worker  					//		.SetCell(0' rowIndex' group.Key)  					//		.SetCell(1' rowIndex' commission);    					//	rowIndex++;  					//}    					var columnShift = 3;    					worker  						.SetCell(columnShift + 0' 0' LocalizedStrings.Str985)    						.SetCell(columnShift + 0' 1' LocalizedStrings.Str1192).SetStyle(columnShift + 0' typeof(long))  						.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  						.SetCell(columnShift + 2' 1' LocalizedStrings.Time).SetStyle(columnShift + 2' "HH:mm:ss.fff")  						.SetCell(columnShift + 3' 1' LocalizedStrings.Price).SetStyle(columnShift + 3' typeof(decimal))  						.SetCell(columnShift + 4' 1' LocalizedStrings.Str1341).SetStyle(columnShift + 4' typeof(decimal))  						.SetCell(columnShift + 5' 1' LocalizedStrings.Volume).SetStyle(columnShift + 5' typeof(decimal))  						.SetCell(columnShift + 6' 1' LocalizedStrings.Str128)  						.SetCell(columnShift + 7' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 7' typeof(long))  						.SetCell(columnShift + 8' 1' LocalizedStrings.Str163).SetStyle(columnShift + 8' typeof(decimal))  						.SetCell(columnShift + 9' 1' LocalizedStrings.Str135)  						.SetCell(columnShift + 10' 1' LocalizedStrings.Str1342).SetStyle(columnShift + 11' typeof(decimal))  						.SetCell(columnShift + 11' 1' LocalizedStrings.Str1343).SetStyle(columnShift + 12' typeof(decimal))  						.SetCell(columnShift + 12' 1' LocalizedStrings.Str1344).SetStyle(columnShift + 13' typeof(decimal))  						.SetCell(columnShift + 13' 1' LocalizedStrings.Str1345).SetStyle(columnShift + 14' typeof(decimal))  						.SetCell(columnShift + 14' 1' LocalizedStrings.Str862).SetStyle(columnShift + 15' typeof(decimal));    					worker  						.SetConditionalFormatting(columnShift + 10' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 11' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 12' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 13' ComparisonOperator.Less' "0"' null' Colors.Red);    					var totalPnL = 0m;  					var position = 0m;    					var queues = new Dictionary<Security' PnLQueue>();    					rowIndex = 2;  					foreach (var trade in strategy.MyTrades.ToArray())  					{  						var info = strategy.PnLManager.ProcessMessage(trade.ToMessage());    						totalPnL += info.PnL;  						position += trade.GetPosition() ?? 0;    						var queue = queues.SafeAdd(trade.Trade.Security' key => new PnLQueue(key.ToSecurityId()));    						var localInfo = queue.Process(trade.ToMessage());    						worker  							.SetCell(columnShift + 0' rowIndex' trade.Trade.Id)  							.SetCell(columnShift + 1' rowIndex' trade.Order.TransactionId)  							.SetCell(columnShift + 2' rowIndex' Format(trade.Trade.Time))  							.SetCell(columnShift + 3' rowIndex' trade.Trade.Price)  							.SetCell(columnShift + 4' rowIndex' trade.Order.Price)  							.SetCell(columnShift + 5' rowIndex' trade.Trade.Volume)  							.SetCell(columnShift + 6' rowIndex' Format(trade.Order.Direction))  							.SetCell(columnShift + 7' rowIndex' trade.Order.Id)  							.SetCell(columnShift + 8' rowIndex' trade.Slippage)  							.SetCell(columnShift + 9' rowIndex' trade.Order.Comment)  							.SetCell(columnShift + 10' rowIndex' MathHelper.Round(info.PnL' Decimals))  							.SetCell(columnShift + 11' rowIndex' MathHelper.Round(localInfo.PnL' Decimals))  							.SetCell(columnShift + 12' rowIndex' MathHelper.Round(totalPnL' Decimals))  							.SetCell(columnShift + 13' rowIndex' MathHelper.Round(queue.RealizedPnL' Decimals))  							.SetCell(columnShift + 14' rowIndex' position);    						rowIndex++;  					}    					if (IncludeOrders)  					{  						columnShift += 17;    						worker  							.SetCell(columnShift + 0' 0' LocalizedStrings.Orders)    							.SetCell(columnShift + 0' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  							.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  							.SetCell(columnShift + 2' 1' LocalizedStrings.Str128)  							.SetCell(columnShift + 3' 1' LocalizedStrings.Str1346).SetStyle(columnShift + 3' "HH:mm:ss.fff")  							.SetCell(columnShift + 4' 1' LocalizedStrings.Str1347).SetStyle(columnShift + 4' "HH:mm:ss.fff")  							.SetCell(columnShift + 5' 1' LocalizedStrings.Str1348)  							.SetCell(columnShift + 6' 1' LocalizedStrings.Price).SetStyle(columnShift + 6' typeof(decimal))  							.SetCell(columnShift + 7' 1' LocalizedStrings.Str1323).SetStyle(columnShift + 7' typeof(decimal))  							.SetCell(columnShift + 8' 1' LocalizedStrings.Str1324)  							.SetCell(columnShift + 9' 1' LocalizedStrings.State)  							.SetCell(columnShift + 10' 1' LocalizedStrings.Str1325).SetStyle(columnShift + 10' typeof(decimal))  							.SetCell(columnShift + 11' 1' LocalizedStrings.Volume).SetStyle(columnShift + 11' typeof(decimal))  							.SetCell(columnShift + 12' 1' LocalizedStrings.Type)  							.SetCell(columnShift + 13' 1' LocalizedStrings.Str1326)  							.SetCell(columnShift + 14' 1' LocalizedStrings.Str1327)  							.SetCell(columnShift + 15' 1' LocalizedStrings.Str135);    						worker  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str1329)' null' Colors.Green)  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str238)' null' Colors.Red);    						rowIndex = 2;  						foreach (var order in strategy.Orders.ToArray())  						{  							worker  								.SetCell(columnShift + 0' rowIndex' order.Id)  								.SetCell(columnShift + 1' rowIndex' order.TransactionId)  								.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  								.SetCell(columnShift + 3' rowIndex' Format(order.Time))  								.SetCell(columnShift + 4' rowIndex' Format(order.LastChangeTime))  								.SetCell(columnShift + 5' rowIndex' Format(order.LastChangeTime - order.Time))  								.SetCell(columnShift + 6' rowIndex' order.Price)  								.SetCell(columnShift + 7' rowIndex' MathHelper.Round(order.GetAveragePrice(strategy.Connector)' Decimals))  								.SetCell(columnShift + 8' rowIndex' Format(order.State))  								.SetCell(columnShift + 9' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : LocalizedStrings.Str238))  								.SetCell(columnShift + 10' rowIndex' order.Balance)  								.SetCell(columnShift + 11' rowIndex' order.Volume)  								.SetCell(columnShift + 12' rowIndex' Format(order.Type))  								.SetCell(columnShift + 13' rowIndex' Format(order.LatencyRegistration))  								.SetCell(columnShift + 14' rowIndex' Format(order.LatencyCancellation))  								.SetCell(columnShift + 15' rowIndex' order.Comment);    							rowIndex++;  						}    						var stopOrders = strategy.StopOrders.ToArray();    						if (stopOrders.Length > 0)  						{  							rowIndex += 2;    							worker  								.SetCell(columnShift + 0' rowIndex - 1' LocalizedStrings.Str1351)    								.SetCell(columnShift + 0' rowIndex' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  								.SetCell(columnShift + 1' rowIndex' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  								.SetCell(columnShift + 2' rowIndex' LocalizedStrings.Str128)  								.SetCell(columnShift + 3' rowIndex' LocalizedStrings.Time).SetStyle(columnShift + 3' "HH:mm:ss.fff")  								.SetCell(columnShift + 4' rowIndex' LocalizedStrings.Price).SetStyle(columnShift + 4' typeof(decimal))  								.SetCell(columnShift + 5' rowIndex' LocalizedStrings.Str1324)  								.SetCell(columnShift + 6' rowIndex' LocalizedStrings.State)  								.SetCell(columnShift + 7' rowIndex' LocalizedStrings.Volume).SetStyle(columnShift + 7' typeof(decimal))  								.SetCell(columnShift + 8' rowIndex' LocalizedStrings.Str1326)  								.SetCell(columnShift + 9' rowIndex' LocalizedStrings.Str1327)  								//.SetCell(columnShift + 10' rowIndex' LocalizedStrings.Str1352).SetStyle(columnShift + 9' typeof(long))  								;    							var stopParams = stopOrders[0].Condition.Parameters.Keys.ToArray();    							for (var i = 0; i < stopParams.Length; i++)  								worker.SetCell(columnShift + 11 + i' rowIndex' stopParams[i]);    							foreach (var order in stopOrders)  							{  								worker  									.SetCell(columnShift + 0' rowIndex' order.Id)  									.SetCell(columnShift + 1' rowIndex' order.TransactionId)  									.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  									.SetCell(columnShift + 3' rowIndex' Format(order.Time))  									.SetCell(columnShift + 4' rowIndex' order.Price)  									.SetCell(columnShift + 5' rowIndex' Format(order.State))  									.SetCell(columnShift + 6' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : string.Empty))  									.SetCell(columnShift + 7' rowIndex' order.Volume)  									.SetCell(columnShift + 8' rowIndex' Format(order.LatencyRegistration))  									.SetCell(columnShift + 9' rowIndex' Format(order.LatencyCancellation))  									//.SetCell(columnShift + 10' rowIndex' order.DerivedOrder != null ? (object)order.DerivedOrder.Id : string.Empty)  									;    								for (var i = 0; i < stopParams.Length; i++)  									worker.SetCell(columnShift + 11 + i' rowIndex' order.Condition.Parameters[stopParams[i]] ?? string.Empty);    								rowIndex++;  							}  						}  					}  				}    				worker.Save(FileName' true);  			}
Magic Number,StockSharp.Algo.Strategies.Reporting,ExcelStrategyReport,C:\repos\stocksharp_stocksharp\Algo\Strategies\Reporting\ExcelStrategyReport.cs,Generate,The following statement contains a magic number: using (var worker = hasTemplate ? new ExcelWorker() : new ExcelWorker(Template))  			{  				foreach (var strategy in Strategies)  				{  					if (Template.IsEmpty())  					{  						worker.RenameSheet(strategy.Name);  					}  					else  					{  						if (worker.ContainsSheet(strategy.Name))  							worker.AddSheet(strategy.Name);  					}    					worker  						.SetCell(0' 0' LocalizedStrings.Str1331)    						.SetCell(0' 1' LocalizedStrings.Security + ":")  						.SetCell(1' 1' strategy.Security != null ? strategy.Security.Id : string.Empty)    						.SetCell(0' 2' LocalizedStrings.Portfolio + ":")  						.SetCell(1' 2' strategy.Portfolio != null ? strategy.Portfolio.Name : string.Empty)    						.SetCell(0' 3' LocalizedStrings.Str1334)  						.SetCell(1' 3' Format(strategy.TotalWorkingTime))    						.SetCell(0' 4' LocalizedStrings.Str1335)  						//.SetCell(1' 4' FormatTime(base.Strategy.TotalCPUTime))    						.SetCell(0' 5' LocalizedStrings.Str862 + ":")  						.SetCell(1' 5' strategy.Position)    						.SetCell(0' 6' LocalizedStrings.PnL + ":")  						.SetCell(1' 6' strategy.PnL)    						.SetCell(0' 7' LocalizedStrings.Str159 + ":")  						.SetCell(1' 7' strategy.Commission)    						.SetCell(0' 8' LocalizedStrings.Str163 + ":")  						.SetCell(1' 8' strategy.Slippage)    						.SetCell(0' 9' LocalizedStrings.Str161 + ":")  						.SetCell(1' 9' Format(strategy.Latency));    					var rowIndex = 11;    					foreach (var parameter in strategy.StatisticManager.Parameters.SyncGet(c => c.ToArray()))  					{  						var value = parameter.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' parameter.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					rowIndex += 2;  					worker.SetCell(0' rowIndex' LocalizedStrings.Str1340);  					rowIndex++;    					foreach (var strategyParam in strategy.Parameters.CachedValues)  					{  						var value = strategyParam.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' strategyParam.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					//rowIndex += 2;  					//worker.SetCell(0' rowIndex' "Комиссия по типам:");  					//rowIndex++;    					//foreach (var group in Strategy.CommissionManager.Rules.SyncGet(c => c.ToArray()).GroupBy(c => c.GetType().GetDisplayName()))  					//{  					//	var commission = group.Sum(r => r.Commission);    					//	if (commission == 0)  					//		continue;    					//	worker  					//		.SetCell(0' rowIndex' group.Key)  					//		.SetCell(1' rowIndex' commission);    					//	rowIndex++;  					//}    					var columnShift = 3;    					worker  						.SetCell(columnShift + 0' 0' LocalizedStrings.Str985)    						.SetCell(columnShift + 0' 1' LocalizedStrings.Str1192).SetStyle(columnShift + 0' typeof(long))  						.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  						.SetCell(columnShift + 2' 1' LocalizedStrings.Time).SetStyle(columnShift + 2' "HH:mm:ss.fff")  						.SetCell(columnShift + 3' 1' LocalizedStrings.Price).SetStyle(columnShift + 3' typeof(decimal))  						.SetCell(columnShift + 4' 1' LocalizedStrings.Str1341).SetStyle(columnShift + 4' typeof(decimal))  						.SetCell(columnShift + 5' 1' LocalizedStrings.Volume).SetStyle(columnShift + 5' typeof(decimal))  						.SetCell(columnShift + 6' 1' LocalizedStrings.Str128)  						.SetCell(columnShift + 7' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 7' typeof(long))  						.SetCell(columnShift + 8' 1' LocalizedStrings.Str163).SetStyle(columnShift + 8' typeof(decimal))  						.SetCell(columnShift + 9' 1' LocalizedStrings.Str135)  						.SetCell(columnShift + 10' 1' LocalizedStrings.Str1342).SetStyle(columnShift + 11' typeof(decimal))  						.SetCell(columnShift + 11' 1' LocalizedStrings.Str1343).SetStyle(columnShift + 12' typeof(decimal))  						.SetCell(columnShift + 12' 1' LocalizedStrings.Str1344).SetStyle(columnShift + 13' typeof(decimal))  						.SetCell(columnShift + 13' 1' LocalizedStrings.Str1345).SetStyle(columnShift + 14' typeof(decimal))  						.SetCell(columnShift + 14' 1' LocalizedStrings.Str862).SetStyle(columnShift + 15' typeof(decimal));    					worker  						.SetConditionalFormatting(columnShift + 10' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 11' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 12' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 13' ComparisonOperator.Less' "0"' null' Colors.Red);    					var totalPnL = 0m;  					var position = 0m;    					var queues = new Dictionary<Security' PnLQueue>();    					rowIndex = 2;  					foreach (var trade in strategy.MyTrades.ToArray())  					{  						var info = strategy.PnLManager.ProcessMessage(trade.ToMessage());    						totalPnL += info.PnL;  						position += trade.GetPosition() ?? 0;    						var queue = queues.SafeAdd(trade.Trade.Security' key => new PnLQueue(key.ToSecurityId()));    						var localInfo = queue.Process(trade.ToMessage());    						worker  							.SetCell(columnShift + 0' rowIndex' trade.Trade.Id)  							.SetCell(columnShift + 1' rowIndex' trade.Order.TransactionId)  							.SetCell(columnShift + 2' rowIndex' Format(trade.Trade.Time))  							.SetCell(columnShift + 3' rowIndex' trade.Trade.Price)  							.SetCell(columnShift + 4' rowIndex' trade.Order.Price)  							.SetCell(columnShift + 5' rowIndex' trade.Trade.Volume)  							.SetCell(columnShift + 6' rowIndex' Format(trade.Order.Direction))  							.SetCell(columnShift + 7' rowIndex' trade.Order.Id)  							.SetCell(columnShift + 8' rowIndex' trade.Slippage)  							.SetCell(columnShift + 9' rowIndex' trade.Order.Comment)  							.SetCell(columnShift + 10' rowIndex' MathHelper.Round(info.PnL' Decimals))  							.SetCell(columnShift + 11' rowIndex' MathHelper.Round(localInfo.PnL' Decimals))  							.SetCell(columnShift + 12' rowIndex' MathHelper.Round(totalPnL' Decimals))  							.SetCell(columnShift + 13' rowIndex' MathHelper.Round(queue.RealizedPnL' Decimals))  							.SetCell(columnShift + 14' rowIndex' position);    						rowIndex++;  					}    					if (IncludeOrders)  					{  						columnShift += 17;    						worker  							.SetCell(columnShift + 0' 0' LocalizedStrings.Orders)    							.SetCell(columnShift + 0' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  							.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  							.SetCell(columnShift + 2' 1' LocalizedStrings.Str128)  							.SetCell(columnShift + 3' 1' LocalizedStrings.Str1346).SetStyle(columnShift + 3' "HH:mm:ss.fff")  							.SetCell(columnShift + 4' 1' LocalizedStrings.Str1347).SetStyle(columnShift + 4' "HH:mm:ss.fff")  							.SetCell(columnShift + 5' 1' LocalizedStrings.Str1348)  							.SetCell(columnShift + 6' 1' LocalizedStrings.Price).SetStyle(columnShift + 6' typeof(decimal))  							.SetCell(columnShift + 7' 1' LocalizedStrings.Str1323).SetStyle(columnShift + 7' typeof(decimal))  							.SetCell(columnShift + 8' 1' LocalizedStrings.Str1324)  							.SetCell(columnShift + 9' 1' LocalizedStrings.State)  							.SetCell(columnShift + 10' 1' LocalizedStrings.Str1325).SetStyle(columnShift + 10' typeof(decimal))  							.SetCell(columnShift + 11' 1' LocalizedStrings.Volume).SetStyle(columnShift + 11' typeof(decimal))  							.SetCell(columnShift + 12' 1' LocalizedStrings.Type)  							.SetCell(columnShift + 13' 1' LocalizedStrings.Str1326)  							.SetCell(columnShift + 14' 1' LocalizedStrings.Str1327)  							.SetCell(columnShift + 15' 1' LocalizedStrings.Str135);    						worker  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str1329)' null' Colors.Green)  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str238)' null' Colors.Red);    						rowIndex = 2;  						foreach (var order in strategy.Orders.ToArray())  						{  							worker  								.SetCell(columnShift + 0' rowIndex' order.Id)  								.SetCell(columnShift + 1' rowIndex' order.TransactionId)  								.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  								.SetCell(columnShift + 3' rowIndex' Format(order.Time))  								.SetCell(columnShift + 4' rowIndex' Format(order.LastChangeTime))  								.SetCell(columnShift + 5' rowIndex' Format(order.LastChangeTime - order.Time))  								.SetCell(columnShift + 6' rowIndex' order.Price)  								.SetCell(columnShift + 7' rowIndex' MathHelper.Round(order.GetAveragePrice(strategy.Connector)' Decimals))  								.SetCell(columnShift + 8' rowIndex' Format(order.State))  								.SetCell(columnShift + 9' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : LocalizedStrings.Str238))  								.SetCell(columnShift + 10' rowIndex' order.Balance)  								.SetCell(columnShift + 11' rowIndex' order.Volume)  								.SetCell(columnShift + 12' rowIndex' Format(order.Type))  								.SetCell(columnShift + 13' rowIndex' Format(order.LatencyRegistration))  								.SetCell(columnShift + 14' rowIndex' Format(order.LatencyCancellation))  								.SetCell(columnShift + 15' rowIndex' order.Comment);    							rowIndex++;  						}    						var stopOrders = strategy.StopOrders.ToArray();    						if (stopOrders.Length > 0)  						{  							rowIndex += 2;    							worker  								.SetCell(columnShift + 0' rowIndex - 1' LocalizedStrings.Str1351)    								.SetCell(columnShift + 0' rowIndex' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  								.SetCell(columnShift + 1' rowIndex' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  								.SetCell(columnShift + 2' rowIndex' LocalizedStrings.Str128)  								.SetCell(columnShift + 3' rowIndex' LocalizedStrings.Time).SetStyle(columnShift + 3' "HH:mm:ss.fff")  								.SetCell(columnShift + 4' rowIndex' LocalizedStrings.Price).SetStyle(columnShift + 4' typeof(decimal))  								.SetCell(columnShift + 5' rowIndex' LocalizedStrings.Str1324)  								.SetCell(columnShift + 6' rowIndex' LocalizedStrings.State)  								.SetCell(columnShift + 7' rowIndex' LocalizedStrings.Volume).SetStyle(columnShift + 7' typeof(decimal))  								.SetCell(columnShift + 8' rowIndex' LocalizedStrings.Str1326)  								.SetCell(columnShift + 9' rowIndex' LocalizedStrings.Str1327)  								//.SetCell(columnShift + 10' rowIndex' LocalizedStrings.Str1352).SetStyle(columnShift + 9' typeof(long))  								;    							var stopParams = stopOrders[0].Condition.Parameters.Keys.ToArray();    							for (var i = 0; i < stopParams.Length; i++)  								worker.SetCell(columnShift + 11 + i' rowIndex' stopParams[i]);    							foreach (var order in stopOrders)  							{  								worker  									.SetCell(columnShift + 0' rowIndex' order.Id)  									.SetCell(columnShift + 1' rowIndex' order.TransactionId)  									.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  									.SetCell(columnShift + 3' rowIndex' Format(order.Time))  									.SetCell(columnShift + 4' rowIndex' order.Price)  									.SetCell(columnShift + 5' rowIndex' Format(order.State))  									.SetCell(columnShift + 6' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : string.Empty))  									.SetCell(columnShift + 7' rowIndex' order.Volume)  									.SetCell(columnShift + 8' rowIndex' Format(order.LatencyRegistration))  									.SetCell(columnShift + 9' rowIndex' Format(order.LatencyCancellation))  									//.SetCell(columnShift + 10' rowIndex' order.DerivedOrder != null ? (object)order.DerivedOrder.Id : string.Empty)  									;    								for (var i = 0; i < stopParams.Length; i++)  									worker.SetCell(columnShift + 11 + i' rowIndex' order.Condition.Parameters[stopParams[i]] ?? string.Empty);    								rowIndex++;  							}  						}  					}  				}    				worker.Save(FileName' true);  			}
Magic Number,StockSharp.Algo.Strategies.Reporting,ExcelStrategyReport,C:\repos\stocksharp_stocksharp\Algo\Strategies\Reporting\ExcelStrategyReport.cs,Generate,The following statement contains a magic number: using (var worker = hasTemplate ? new ExcelWorker() : new ExcelWorker(Template))  			{  				foreach (var strategy in Strategies)  				{  					if (Template.IsEmpty())  					{  						worker.RenameSheet(strategy.Name);  					}  					else  					{  						if (worker.ContainsSheet(strategy.Name))  							worker.AddSheet(strategy.Name);  					}    					worker  						.SetCell(0' 0' LocalizedStrings.Str1331)    						.SetCell(0' 1' LocalizedStrings.Security + ":")  						.SetCell(1' 1' strategy.Security != null ? strategy.Security.Id : string.Empty)    						.SetCell(0' 2' LocalizedStrings.Portfolio + ":")  						.SetCell(1' 2' strategy.Portfolio != null ? strategy.Portfolio.Name : string.Empty)    						.SetCell(0' 3' LocalizedStrings.Str1334)  						.SetCell(1' 3' Format(strategy.TotalWorkingTime))    						.SetCell(0' 4' LocalizedStrings.Str1335)  						//.SetCell(1' 4' FormatTime(base.Strategy.TotalCPUTime))    						.SetCell(0' 5' LocalizedStrings.Str862 + ":")  						.SetCell(1' 5' strategy.Position)    						.SetCell(0' 6' LocalizedStrings.PnL + ":")  						.SetCell(1' 6' strategy.PnL)    						.SetCell(0' 7' LocalizedStrings.Str159 + ":")  						.SetCell(1' 7' strategy.Commission)    						.SetCell(0' 8' LocalizedStrings.Str163 + ":")  						.SetCell(1' 8' strategy.Slippage)    						.SetCell(0' 9' LocalizedStrings.Str161 + ":")  						.SetCell(1' 9' Format(strategy.Latency));    					var rowIndex = 11;    					foreach (var parameter in strategy.StatisticManager.Parameters.SyncGet(c => c.ToArray()))  					{  						var value = parameter.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' parameter.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					rowIndex += 2;  					worker.SetCell(0' rowIndex' LocalizedStrings.Str1340);  					rowIndex++;    					foreach (var strategyParam in strategy.Parameters.CachedValues)  					{  						var value = strategyParam.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' strategyParam.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					//rowIndex += 2;  					//worker.SetCell(0' rowIndex' "Комиссия по типам:");  					//rowIndex++;    					//foreach (var group in Strategy.CommissionManager.Rules.SyncGet(c => c.ToArray()).GroupBy(c => c.GetType().GetDisplayName()))  					//{  					//	var commission = group.Sum(r => r.Commission);    					//	if (commission == 0)  					//		continue;    					//	worker  					//		.SetCell(0' rowIndex' group.Key)  					//		.SetCell(1' rowIndex' commission);    					//	rowIndex++;  					//}    					var columnShift = 3;    					worker  						.SetCell(columnShift + 0' 0' LocalizedStrings.Str985)    						.SetCell(columnShift + 0' 1' LocalizedStrings.Str1192).SetStyle(columnShift + 0' typeof(long))  						.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  						.SetCell(columnShift + 2' 1' LocalizedStrings.Time).SetStyle(columnShift + 2' "HH:mm:ss.fff")  						.SetCell(columnShift + 3' 1' LocalizedStrings.Price).SetStyle(columnShift + 3' typeof(decimal))  						.SetCell(columnShift + 4' 1' LocalizedStrings.Str1341).SetStyle(columnShift + 4' typeof(decimal))  						.SetCell(columnShift + 5' 1' LocalizedStrings.Volume).SetStyle(columnShift + 5' typeof(decimal))  						.SetCell(columnShift + 6' 1' LocalizedStrings.Str128)  						.SetCell(columnShift + 7' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 7' typeof(long))  						.SetCell(columnShift + 8' 1' LocalizedStrings.Str163).SetStyle(columnShift + 8' typeof(decimal))  						.SetCell(columnShift + 9' 1' LocalizedStrings.Str135)  						.SetCell(columnShift + 10' 1' LocalizedStrings.Str1342).SetStyle(columnShift + 11' typeof(decimal))  						.SetCell(columnShift + 11' 1' LocalizedStrings.Str1343).SetStyle(columnShift + 12' typeof(decimal))  						.SetCell(columnShift + 12' 1' LocalizedStrings.Str1344).SetStyle(columnShift + 13' typeof(decimal))  						.SetCell(columnShift + 13' 1' LocalizedStrings.Str1345).SetStyle(columnShift + 14' typeof(decimal))  						.SetCell(columnShift + 14' 1' LocalizedStrings.Str862).SetStyle(columnShift + 15' typeof(decimal));    					worker  						.SetConditionalFormatting(columnShift + 10' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 11' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 12' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 13' ComparisonOperator.Less' "0"' null' Colors.Red);    					var totalPnL = 0m;  					var position = 0m;    					var queues = new Dictionary<Security' PnLQueue>();    					rowIndex = 2;  					foreach (var trade in strategy.MyTrades.ToArray())  					{  						var info = strategy.PnLManager.ProcessMessage(trade.ToMessage());    						totalPnL += info.PnL;  						position += trade.GetPosition() ?? 0;    						var queue = queues.SafeAdd(trade.Trade.Security' key => new PnLQueue(key.ToSecurityId()));    						var localInfo = queue.Process(trade.ToMessage());    						worker  							.SetCell(columnShift + 0' rowIndex' trade.Trade.Id)  							.SetCell(columnShift + 1' rowIndex' trade.Order.TransactionId)  							.SetCell(columnShift + 2' rowIndex' Format(trade.Trade.Time))  							.SetCell(columnShift + 3' rowIndex' trade.Trade.Price)  							.SetCell(columnShift + 4' rowIndex' trade.Order.Price)  							.SetCell(columnShift + 5' rowIndex' trade.Trade.Volume)  							.SetCell(columnShift + 6' rowIndex' Format(trade.Order.Direction))  							.SetCell(columnShift + 7' rowIndex' trade.Order.Id)  							.SetCell(columnShift + 8' rowIndex' trade.Slippage)  							.SetCell(columnShift + 9' rowIndex' trade.Order.Comment)  							.SetCell(columnShift + 10' rowIndex' MathHelper.Round(info.PnL' Decimals))  							.SetCell(columnShift + 11' rowIndex' MathHelper.Round(localInfo.PnL' Decimals))  							.SetCell(columnShift + 12' rowIndex' MathHelper.Round(totalPnL' Decimals))  							.SetCell(columnShift + 13' rowIndex' MathHelper.Round(queue.RealizedPnL' Decimals))  							.SetCell(columnShift + 14' rowIndex' position);    						rowIndex++;  					}    					if (IncludeOrders)  					{  						columnShift += 17;    						worker  							.SetCell(columnShift + 0' 0' LocalizedStrings.Orders)    							.SetCell(columnShift + 0' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  							.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  							.SetCell(columnShift + 2' 1' LocalizedStrings.Str128)  							.SetCell(columnShift + 3' 1' LocalizedStrings.Str1346).SetStyle(columnShift + 3' "HH:mm:ss.fff")  							.SetCell(columnShift + 4' 1' LocalizedStrings.Str1347).SetStyle(columnShift + 4' "HH:mm:ss.fff")  							.SetCell(columnShift + 5' 1' LocalizedStrings.Str1348)  							.SetCell(columnShift + 6' 1' LocalizedStrings.Price).SetStyle(columnShift + 6' typeof(decimal))  							.SetCell(columnShift + 7' 1' LocalizedStrings.Str1323).SetStyle(columnShift + 7' typeof(decimal))  							.SetCell(columnShift + 8' 1' LocalizedStrings.Str1324)  							.SetCell(columnShift + 9' 1' LocalizedStrings.State)  							.SetCell(columnShift + 10' 1' LocalizedStrings.Str1325).SetStyle(columnShift + 10' typeof(decimal))  							.SetCell(columnShift + 11' 1' LocalizedStrings.Volume).SetStyle(columnShift + 11' typeof(decimal))  							.SetCell(columnShift + 12' 1' LocalizedStrings.Type)  							.SetCell(columnShift + 13' 1' LocalizedStrings.Str1326)  							.SetCell(columnShift + 14' 1' LocalizedStrings.Str1327)  							.SetCell(columnShift + 15' 1' LocalizedStrings.Str135);    						worker  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str1329)' null' Colors.Green)  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str238)' null' Colors.Red);    						rowIndex = 2;  						foreach (var order in strategy.Orders.ToArray())  						{  							worker  								.SetCell(columnShift + 0' rowIndex' order.Id)  								.SetCell(columnShift + 1' rowIndex' order.TransactionId)  								.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  								.SetCell(columnShift + 3' rowIndex' Format(order.Time))  								.SetCell(columnShift + 4' rowIndex' Format(order.LastChangeTime))  								.SetCell(columnShift + 5' rowIndex' Format(order.LastChangeTime - order.Time))  								.SetCell(columnShift + 6' rowIndex' order.Price)  								.SetCell(columnShift + 7' rowIndex' MathHelper.Round(order.GetAveragePrice(strategy.Connector)' Decimals))  								.SetCell(columnShift + 8' rowIndex' Format(order.State))  								.SetCell(columnShift + 9' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : LocalizedStrings.Str238))  								.SetCell(columnShift + 10' rowIndex' order.Balance)  								.SetCell(columnShift + 11' rowIndex' order.Volume)  								.SetCell(columnShift + 12' rowIndex' Format(order.Type))  								.SetCell(columnShift + 13' rowIndex' Format(order.LatencyRegistration))  								.SetCell(columnShift + 14' rowIndex' Format(order.LatencyCancellation))  								.SetCell(columnShift + 15' rowIndex' order.Comment);    							rowIndex++;  						}    						var stopOrders = strategy.StopOrders.ToArray();    						if (stopOrders.Length > 0)  						{  							rowIndex += 2;    							worker  								.SetCell(columnShift + 0' rowIndex - 1' LocalizedStrings.Str1351)    								.SetCell(columnShift + 0' rowIndex' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  								.SetCell(columnShift + 1' rowIndex' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  								.SetCell(columnShift + 2' rowIndex' LocalizedStrings.Str128)  								.SetCell(columnShift + 3' rowIndex' LocalizedStrings.Time).SetStyle(columnShift + 3' "HH:mm:ss.fff")  								.SetCell(columnShift + 4' rowIndex' LocalizedStrings.Price).SetStyle(columnShift + 4' typeof(decimal))  								.SetCell(columnShift + 5' rowIndex' LocalizedStrings.Str1324)  								.SetCell(columnShift + 6' rowIndex' LocalizedStrings.State)  								.SetCell(columnShift + 7' rowIndex' LocalizedStrings.Volume).SetStyle(columnShift + 7' typeof(decimal))  								.SetCell(columnShift + 8' rowIndex' LocalizedStrings.Str1326)  								.SetCell(columnShift + 9' rowIndex' LocalizedStrings.Str1327)  								//.SetCell(columnShift + 10' rowIndex' LocalizedStrings.Str1352).SetStyle(columnShift + 9' typeof(long))  								;    							var stopParams = stopOrders[0].Condition.Parameters.Keys.ToArray();    							for (var i = 0; i < stopParams.Length; i++)  								worker.SetCell(columnShift + 11 + i' rowIndex' stopParams[i]);    							foreach (var order in stopOrders)  							{  								worker  									.SetCell(columnShift + 0' rowIndex' order.Id)  									.SetCell(columnShift + 1' rowIndex' order.TransactionId)  									.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  									.SetCell(columnShift + 3' rowIndex' Format(order.Time))  									.SetCell(columnShift + 4' rowIndex' order.Price)  									.SetCell(columnShift + 5' rowIndex' Format(order.State))  									.SetCell(columnShift + 6' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : string.Empty))  									.SetCell(columnShift + 7' rowIndex' order.Volume)  									.SetCell(columnShift + 8' rowIndex' Format(order.LatencyRegistration))  									.SetCell(columnShift + 9' rowIndex' Format(order.LatencyCancellation))  									//.SetCell(columnShift + 10' rowIndex' order.DerivedOrder != null ? (object)order.DerivedOrder.Id : string.Empty)  									;    								for (var i = 0; i < stopParams.Length; i++)  									worker.SetCell(columnShift + 11 + i' rowIndex' order.Condition.Parameters[stopParams[i]] ?? string.Empty);    								rowIndex++;  							}  						}  					}  				}    				worker.Save(FileName' true);  			}
Magic Number,StockSharp.Algo.Strategies.Reporting,ExcelStrategyReport,C:\repos\stocksharp_stocksharp\Algo\Strategies\Reporting\ExcelStrategyReport.cs,Generate,The following statement contains a magic number: using (var worker = hasTemplate ? new ExcelWorker() : new ExcelWorker(Template))  			{  				foreach (var strategy in Strategies)  				{  					if (Template.IsEmpty())  					{  						worker.RenameSheet(strategy.Name);  					}  					else  					{  						if (worker.ContainsSheet(strategy.Name))  							worker.AddSheet(strategy.Name);  					}    					worker  						.SetCell(0' 0' LocalizedStrings.Str1331)    						.SetCell(0' 1' LocalizedStrings.Security + ":")  						.SetCell(1' 1' strategy.Security != null ? strategy.Security.Id : string.Empty)    						.SetCell(0' 2' LocalizedStrings.Portfolio + ":")  						.SetCell(1' 2' strategy.Portfolio != null ? strategy.Portfolio.Name : string.Empty)    						.SetCell(0' 3' LocalizedStrings.Str1334)  						.SetCell(1' 3' Format(strategy.TotalWorkingTime))    						.SetCell(0' 4' LocalizedStrings.Str1335)  						//.SetCell(1' 4' FormatTime(base.Strategy.TotalCPUTime))    						.SetCell(0' 5' LocalizedStrings.Str862 + ":")  						.SetCell(1' 5' strategy.Position)    						.SetCell(0' 6' LocalizedStrings.PnL + ":")  						.SetCell(1' 6' strategy.PnL)    						.SetCell(0' 7' LocalizedStrings.Str159 + ":")  						.SetCell(1' 7' strategy.Commission)    						.SetCell(0' 8' LocalizedStrings.Str163 + ":")  						.SetCell(1' 8' strategy.Slippage)    						.SetCell(0' 9' LocalizedStrings.Str161 + ":")  						.SetCell(1' 9' Format(strategy.Latency));    					var rowIndex = 11;    					foreach (var parameter in strategy.StatisticManager.Parameters.SyncGet(c => c.ToArray()))  					{  						var value = parameter.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' parameter.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					rowIndex += 2;  					worker.SetCell(0' rowIndex' LocalizedStrings.Str1340);  					rowIndex++;    					foreach (var strategyParam in strategy.Parameters.CachedValues)  					{  						var value = strategyParam.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' strategyParam.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					//rowIndex += 2;  					//worker.SetCell(0' rowIndex' "Комиссия по типам:");  					//rowIndex++;    					//foreach (var group in Strategy.CommissionManager.Rules.SyncGet(c => c.ToArray()).GroupBy(c => c.GetType().GetDisplayName()))  					//{  					//	var commission = group.Sum(r => r.Commission);    					//	if (commission == 0)  					//		continue;    					//	worker  					//		.SetCell(0' rowIndex' group.Key)  					//		.SetCell(1' rowIndex' commission);    					//	rowIndex++;  					//}    					var columnShift = 3;    					worker  						.SetCell(columnShift + 0' 0' LocalizedStrings.Str985)    						.SetCell(columnShift + 0' 1' LocalizedStrings.Str1192).SetStyle(columnShift + 0' typeof(long))  						.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  						.SetCell(columnShift + 2' 1' LocalizedStrings.Time).SetStyle(columnShift + 2' "HH:mm:ss.fff")  						.SetCell(columnShift + 3' 1' LocalizedStrings.Price).SetStyle(columnShift + 3' typeof(decimal))  						.SetCell(columnShift + 4' 1' LocalizedStrings.Str1341).SetStyle(columnShift + 4' typeof(decimal))  						.SetCell(columnShift + 5' 1' LocalizedStrings.Volume).SetStyle(columnShift + 5' typeof(decimal))  						.SetCell(columnShift + 6' 1' LocalizedStrings.Str128)  						.SetCell(columnShift + 7' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 7' typeof(long))  						.SetCell(columnShift + 8' 1' LocalizedStrings.Str163).SetStyle(columnShift + 8' typeof(decimal))  						.SetCell(columnShift + 9' 1' LocalizedStrings.Str135)  						.SetCell(columnShift + 10' 1' LocalizedStrings.Str1342).SetStyle(columnShift + 11' typeof(decimal))  						.SetCell(columnShift + 11' 1' LocalizedStrings.Str1343).SetStyle(columnShift + 12' typeof(decimal))  						.SetCell(columnShift + 12' 1' LocalizedStrings.Str1344).SetStyle(columnShift + 13' typeof(decimal))  						.SetCell(columnShift + 13' 1' LocalizedStrings.Str1345).SetStyle(columnShift + 14' typeof(decimal))  						.SetCell(columnShift + 14' 1' LocalizedStrings.Str862).SetStyle(columnShift + 15' typeof(decimal));    					worker  						.SetConditionalFormatting(columnShift + 10' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 11' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 12' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 13' ComparisonOperator.Less' "0"' null' Colors.Red);    					var totalPnL = 0m;  					var position = 0m;    					var queues = new Dictionary<Security' PnLQueue>();    					rowIndex = 2;  					foreach (var trade in strategy.MyTrades.ToArray())  					{  						var info = strategy.PnLManager.ProcessMessage(trade.ToMessage());    						totalPnL += info.PnL;  						position += trade.GetPosition() ?? 0;    						var queue = queues.SafeAdd(trade.Trade.Security' key => new PnLQueue(key.ToSecurityId()));    						var localInfo = queue.Process(trade.ToMessage());    						worker  							.SetCell(columnShift + 0' rowIndex' trade.Trade.Id)  							.SetCell(columnShift + 1' rowIndex' trade.Order.TransactionId)  							.SetCell(columnShift + 2' rowIndex' Format(trade.Trade.Time))  							.SetCell(columnShift + 3' rowIndex' trade.Trade.Price)  							.SetCell(columnShift + 4' rowIndex' trade.Order.Price)  							.SetCell(columnShift + 5' rowIndex' trade.Trade.Volume)  							.SetCell(columnShift + 6' rowIndex' Format(trade.Order.Direction))  							.SetCell(columnShift + 7' rowIndex' trade.Order.Id)  							.SetCell(columnShift + 8' rowIndex' trade.Slippage)  							.SetCell(columnShift + 9' rowIndex' trade.Order.Comment)  							.SetCell(columnShift + 10' rowIndex' MathHelper.Round(info.PnL' Decimals))  							.SetCell(columnShift + 11' rowIndex' MathHelper.Round(localInfo.PnL' Decimals))  							.SetCell(columnShift + 12' rowIndex' MathHelper.Round(totalPnL' Decimals))  							.SetCell(columnShift + 13' rowIndex' MathHelper.Round(queue.RealizedPnL' Decimals))  							.SetCell(columnShift + 14' rowIndex' position);    						rowIndex++;  					}    					if (IncludeOrders)  					{  						columnShift += 17;    						worker  							.SetCell(columnShift + 0' 0' LocalizedStrings.Orders)    							.SetCell(columnShift + 0' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  							.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  							.SetCell(columnShift + 2' 1' LocalizedStrings.Str128)  							.SetCell(columnShift + 3' 1' LocalizedStrings.Str1346).SetStyle(columnShift + 3' "HH:mm:ss.fff")  							.SetCell(columnShift + 4' 1' LocalizedStrings.Str1347).SetStyle(columnShift + 4' "HH:mm:ss.fff")  							.SetCell(columnShift + 5' 1' LocalizedStrings.Str1348)  							.SetCell(columnShift + 6' 1' LocalizedStrings.Price).SetStyle(columnShift + 6' typeof(decimal))  							.SetCell(columnShift + 7' 1' LocalizedStrings.Str1323).SetStyle(columnShift + 7' typeof(decimal))  							.SetCell(columnShift + 8' 1' LocalizedStrings.Str1324)  							.SetCell(columnShift + 9' 1' LocalizedStrings.State)  							.SetCell(columnShift + 10' 1' LocalizedStrings.Str1325).SetStyle(columnShift + 10' typeof(decimal))  							.SetCell(columnShift + 11' 1' LocalizedStrings.Volume).SetStyle(columnShift + 11' typeof(decimal))  							.SetCell(columnShift + 12' 1' LocalizedStrings.Type)  							.SetCell(columnShift + 13' 1' LocalizedStrings.Str1326)  							.SetCell(columnShift + 14' 1' LocalizedStrings.Str1327)  							.SetCell(columnShift + 15' 1' LocalizedStrings.Str135);    						worker  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str1329)' null' Colors.Green)  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str238)' null' Colors.Red);    						rowIndex = 2;  						foreach (var order in strategy.Orders.ToArray())  						{  							worker  								.SetCell(columnShift + 0' rowIndex' order.Id)  								.SetCell(columnShift + 1' rowIndex' order.TransactionId)  								.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  								.SetCell(columnShift + 3' rowIndex' Format(order.Time))  								.SetCell(columnShift + 4' rowIndex' Format(order.LastChangeTime))  								.SetCell(columnShift + 5' rowIndex' Format(order.LastChangeTime - order.Time))  								.SetCell(columnShift + 6' rowIndex' order.Price)  								.SetCell(columnShift + 7' rowIndex' MathHelper.Round(order.GetAveragePrice(strategy.Connector)' Decimals))  								.SetCell(columnShift + 8' rowIndex' Format(order.State))  								.SetCell(columnShift + 9' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : LocalizedStrings.Str238))  								.SetCell(columnShift + 10' rowIndex' order.Balance)  								.SetCell(columnShift + 11' rowIndex' order.Volume)  								.SetCell(columnShift + 12' rowIndex' Format(order.Type))  								.SetCell(columnShift + 13' rowIndex' Format(order.LatencyRegistration))  								.SetCell(columnShift + 14' rowIndex' Format(order.LatencyCancellation))  								.SetCell(columnShift + 15' rowIndex' order.Comment);    							rowIndex++;  						}    						var stopOrders = strategy.StopOrders.ToArray();    						if (stopOrders.Length > 0)  						{  							rowIndex += 2;    							worker  								.SetCell(columnShift + 0' rowIndex - 1' LocalizedStrings.Str1351)    								.SetCell(columnShift + 0' rowIndex' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  								.SetCell(columnShift + 1' rowIndex' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  								.SetCell(columnShift + 2' rowIndex' LocalizedStrings.Str128)  								.SetCell(columnShift + 3' rowIndex' LocalizedStrings.Time).SetStyle(columnShift + 3' "HH:mm:ss.fff")  								.SetCell(columnShift + 4' rowIndex' LocalizedStrings.Price).SetStyle(columnShift + 4' typeof(decimal))  								.SetCell(columnShift + 5' rowIndex' LocalizedStrings.Str1324)  								.SetCell(columnShift + 6' rowIndex' LocalizedStrings.State)  								.SetCell(columnShift + 7' rowIndex' LocalizedStrings.Volume).SetStyle(columnShift + 7' typeof(decimal))  								.SetCell(columnShift + 8' rowIndex' LocalizedStrings.Str1326)  								.SetCell(columnShift + 9' rowIndex' LocalizedStrings.Str1327)  								//.SetCell(columnShift + 10' rowIndex' LocalizedStrings.Str1352).SetStyle(columnShift + 9' typeof(long))  								;    							var stopParams = stopOrders[0].Condition.Parameters.Keys.ToArray();    							for (var i = 0; i < stopParams.Length; i++)  								worker.SetCell(columnShift + 11 + i' rowIndex' stopParams[i]);    							foreach (var order in stopOrders)  							{  								worker  									.SetCell(columnShift + 0' rowIndex' order.Id)  									.SetCell(columnShift + 1' rowIndex' order.TransactionId)  									.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  									.SetCell(columnShift + 3' rowIndex' Format(order.Time))  									.SetCell(columnShift + 4' rowIndex' order.Price)  									.SetCell(columnShift + 5' rowIndex' Format(order.State))  									.SetCell(columnShift + 6' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : string.Empty))  									.SetCell(columnShift + 7' rowIndex' order.Volume)  									.SetCell(columnShift + 8' rowIndex' Format(order.LatencyRegistration))  									.SetCell(columnShift + 9' rowIndex' Format(order.LatencyCancellation))  									//.SetCell(columnShift + 10' rowIndex' order.DerivedOrder != null ? (object)order.DerivedOrder.Id : string.Empty)  									;    								for (var i = 0; i < stopParams.Length; i++)  									worker.SetCell(columnShift + 11 + i' rowIndex' order.Condition.Parameters[stopParams[i]] ?? string.Empty);    								rowIndex++;  							}  						}  					}  				}    				worker.Save(FileName' true);  			}
Magic Number,StockSharp.Algo.Strategies.Reporting,ExcelStrategyReport,C:\repos\stocksharp_stocksharp\Algo\Strategies\Reporting\ExcelStrategyReport.cs,Generate,The following statement contains a magic number: using (var worker = hasTemplate ? new ExcelWorker() : new ExcelWorker(Template))  			{  				foreach (var strategy in Strategies)  				{  					if (Template.IsEmpty())  					{  						worker.RenameSheet(strategy.Name);  					}  					else  					{  						if (worker.ContainsSheet(strategy.Name))  							worker.AddSheet(strategy.Name);  					}    					worker  						.SetCell(0' 0' LocalizedStrings.Str1331)    						.SetCell(0' 1' LocalizedStrings.Security + ":")  						.SetCell(1' 1' strategy.Security != null ? strategy.Security.Id : string.Empty)    						.SetCell(0' 2' LocalizedStrings.Portfolio + ":")  						.SetCell(1' 2' strategy.Portfolio != null ? strategy.Portfolio.Name : string.Empty)    						.SetCell(0' 3' LocalizedStrings.Str1334)  						.SetCell(1' 3' Format(strategy.TotalWorkingTime))    						.SetCell(0' 4' LocalizedStrings.Str1335)  						//.SetCell(1' 4' FormatTime(base.Strategy.TotalCPUTime))    						.SetCell(0' 5' LocalizedStrings.Str862 + ":")  						.SetCell(1' 5' strategy.Position)    						.SetCell(0' 6' LocalizedStrings.PnL + ":")  						.SetCell(1' 6' strategy.PnL)    						.SetCell(0' 7' LocalizedStrings.Str159 + ":")  						.SetCell(1' 7' strategy.Commission)    						.SetCell(0' 8' LocalizedStrings.Str163 + ":")  						.SetCell(1' 8' strategy.Slippage)    						.SetCell(0' 9' LocalizedStrings.Str161 + ":")  						.SetCell(1' 9' Format(strategy.Latency));    					var rowIndex = 11;    					foreach (var parameter in strategy.StatisticManager.Parameters.SyncGet(c => c.ToArray()))  					{  						var value = parameter.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' parameter.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					rowIndex += 2;  					worker.SetCell(0' rowIndex' LocalizedStrings.Str1340);  					rowIndex++;    					foreach (var strategyParam in strategy.Parameters.CachedValues)  					{  						var value = strategyParam.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' strategyParam.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					//rowIndex += 2;  					//worker.SetCell(0' rowIndex' "Комиссия по типам:");  					//rowIndex++;    					//foreach (var group in Strategy.CommissionManager.Rules.SyncGet(c => c.ToArray()).GroupBy(c => c.GetType().GetDisplayName()))  					//{  					//	var commission = group.Sum(r => r.Commission);    					//	if (commission == 0)  					//		continue;    					//	worker  					//		.SetCell(0' rowIndex' group.Key)  					//		.SetCell(1' rowIndex' commission);    					//	rowIndex++;  					//}    					var columnShift = 3;    					worker  						.SetCell(columnShift + 0' 0' LocalizedStrings.Str985)    						.SetCell(columnShift + 0' 1' LocalizedStrings.Str1192).SetStyle(columnShift + 0' typeof(long))  						.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  						.SetCell(columnShift + 2' 1' LocalizedStrings.Time).SetStyle(columnShift + 2' "HH:mm:ss.fff")  						.SetCell(columnShift + 3' 1' LocalizedStrings.Price).SetStyle(columnShift + 3' typeof(decimal))  						.SetCell(columnShift + 4' 1' LocalizedStrings.Str1341).SetStyle(columnShift + 4' typeof(decimal))  						.SetCell(columnShift + 5' 1' LocalizedStrings.Volume).SetStyle(columnShift + 5' typeof(decimal))  						.SetCell(columnShift + 6' 1' LocalizedStrings.Str128)  						.SetCell(columnShift + 7' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 7' typeof(long))  						.SetCell(columnShift + 8' 1' LocalizedStrings.Str163).SetStyle(columnShift + 8' typeof(decimal))  						.SetCell(columnShift + 9' 1' LocalizedStrings.Str135)  						.SetCell(columnShift + 10' 1' LocalizedStrings.Str1342).SetStyle(columnShift + 11' typeof(decimal))  						.SetCell(columnShift + 11' 1' LocalizedStrings.Str1343).SetStyle(columnShift + 12' typeof(decimal))  						.SetCell(columnShift + 12' 1' LocalizedStrings.Str1344).SetStyle(columnShift + 13' typeof(decimal))  						.SetCell(columnShift + 13' 1' LocalizedStrings.Str1345).SetStyle(columnShift + 14' typeof(decimal))  						.SetCell(columnShift + 14' 1' LocalizedStrings.Str862).SetStyle(columnShift + 15' typeof(decimal));    					worker  						.SetConditionalFormatting(columnShift + 10' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 11' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 12' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 13' ComparisonOperator.Less' "0"' null' Colors.Red);    					var totalPnL = 0m;  					var position = 0m;    					var queues = new Dictionary<Security' PnLQueue>();    					rowIndex = 2;  					foreach (var trade in strategy.MyTrades.ToArray())  					{  						var info = strategy.PnLManager.ProcessMessage(trade.ToMessage());    						totalPnL += info.PnL;  						position += trade.GetPosition() ?? 0;    						var queue = queues.SafeAdd(trade.Trade.Security' key => new PnLQueue(key.ToSecurityId()));    						var localInfo = queue.Process(trade.ToMessage());    						worker  							.SetCell(columnShift + 0' rowIndex' trade.Trade.Id)  							.SetCell(columnShift + 1' rowIndex' trade.Order.TransactionId)  							.SetCell(columnShift + 2' rowIndex' Format(trade.Trade.Time))  							.SetCell(columnShift + 3' rowIndex' trade.Trade.Price)  							.SetCell(columnShift + 4' rowIndex' trade.Order.Price)  							.SetCell(columnShift + 5' rowIndex' trade.Trade.Volume)  							.SetCell(columnShift + 6' rowIndex' Format(trade.Order.Direction))  							.SetCell(columnShift + 7' rowIndex' trade.Order.Id)  							.SetCell(columnShift + 8' rowIndex' trade.Slippage)  							.SetCell(columnShift + 9' rowIndex' trade.Order.Comment)  							.SetCell(columnShift + 10' rowIndex' MathHelper.Round(info.PnL' Decimals))  							.SetCell(columnShift + 11' rowIndex' MathHelper.Round(localInfo.PnL' Decimals))  							.SetCell(columnShift + 12' rowIndex' MathHelper.Round(totalPnL' Decimals))  							.SetCell(columnShift + 13' rowIndex' MathHelper.Round(queue.RealizedPnL' Decimals))  							.SetCell(columnShift + 14' rowIndex' position);    						rowIndex++;  					}    					if (IncludeOrders)  					{  						columnShift += 17;    						worker  							.SetCell(columnShift + 0' 0' LocalizedStrings.Orders)    							.SetCell(columnShift + 0' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  							.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  							.SetCell(columnShift + 2' 1' LocalizedStrings.Str128)  							.SetCell(columnShift + 3' 1' LocalizedStrings.Str1346).SetStyle(columnShift + 3' "HH:mm:ss.fff")  							.SetCell(columnShift + 4' 1' LocalizedStrings.Str1347).SetStyle(columnShift + 4' "HH:mm:ss.fff")  							.SetCell(columnShift + 5' 1' LocalizedStrings.Str1348)  							.SetCell(columnShift + 6' 1' LocalizedStrings.Price).SetStyle(columnShift + 6' typeof(decimal))  							.SetCell(columnShift + 7' 1' LocalizedStrings.Str1323).SetStyle(columnShift + 7' typeof(decimal))  							.SetCell(columnShift + 8' 1' LocalizedStrings.Str1324)  							.SetCell(columnShift + 9' 1' LocalizedStrings.State)  							.SetCell(columnShift + 10' 1' LocalizedStrings.Str1325).SetStyle(columnShift + 10' typeof(decimal))  							.SetCell(columnShift + 11' 1' LocalizedStrings.Volume).SetStyle(columnShift + 11' typeof(decimal))  							.SetCell(columnShift + 12' 1' LocalizedStrings.Type)  							.SetCell(columnShift + 13' 1' LocalizedStrings.Str1326)  							.SetCell(columnShift + 14' 1' LocalizedStrings.Str1327)  							.SetCell(columnShift + 15' 1' LocalizedStrings.Str135);    						worker  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str1329)' null' Colors.Green)  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str238)' null' Colors.Red);    						rowIndex = 2;  						foreach (var order in strategy.Orders.ToArray())  						{  							worker  								.SetCell(columnShift + 0' rowIndex' order.Id)  								.SetCell(columnShift + 1' rowIndex' order.TransactionId)  								.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  								.SetCell(columnShift + 3' rowIndex' Format(order.Time))  								.SetCell(columnShift + 4' rowIndex' Format(order.LastChangeTime))  								.SetCell(columnShift + 5' rowIndex' Format(order.LastChangeTime - order.Time))  								.SetCell(columnShift + 6' rowIndex' order.Price)  								.SetCell(columnShift + 7' rowIndex' MathHelper.Round(order.GetAveragePrice(strategy.Connector)' Decimals))  								.SetCell(columnShift + 8' rowIndex' Format(order.State))  								.SetCell(columnShift + 9' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : LocalizedStrings.Str238))  								.SetCell(columnShift + 10' rowIndex' order.Balance)  								.SetCell(columnShift + 11' rowIndex' order.Volume)  								.SetCell(columnShift + 12' rowIndex' Format(order.Type))  								.SetCell(columnShift + 13' rowIndex' Format(order.LatencyRegistration))  								.SetCell(columnShift + 14' rowIndex' Format(order.LatencyCancellation))  								.SetCell(columnShift + 15' rowIndex' order.Comment);    							rowIndex++;  						}    						var stopOrders = strategy.StopOrders.ToArray();    						if (stopOrders.Length > 0)  						{  							rowIndex += 2;    							worker  								.SetCell(columnShift + 0' rowIndex - 1' LocalizedStrings.Str1351)    								.SetCell(columnShift + 0' rowIndex' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  								.SetCell(columnShift + 1' rowIndex' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  								.SetCell(columnShift + 2' rowIndex' LocalizedStrings.Str128)  								.SetCell(columnShift + 3' rowIndex' LocalizedStrings.Time).SetStyle(columnShift + 3' "HH:mm:ss.fff")  								.SetCell(columnShift + 4' rowIndex' LocalizedStrings.Price).SetStyle(columnShift + 4' typeof(decimal))  								.SetCell(columnShift + 5' rowIndex' LocalizedStrings.Str1324)  								.SetCell(columnShift + 6' rowIndex' LocalizedStrings.State)  								.SetCell(columnShift + 7' rowIndex' LocalizedStrings.Volume).SetStyle(columnShift + 7' typeof(decimal))  								.SetCell(columnShift + 8' rowIndex' LocalizedStrings.Str1326)  								.SetCell(columnShift + 9' rowIndex' LocalizedStrings.Str1327)  								//.SetCell(columnShift + 10' rowIndex' LocalizedStrings.Str1352).SetStyle(columnShift + 9' typeof(long))  								;    							var stopParams = stopOrders[0].Condition.Parameters.Keys.ToArray();    							for (var i = 0; i < stopParams.Length; i++)  								worker.SetCell(columnShift + 11 + i' rowIndex' stopParams[i]);    							foreach (var order in stopOrders)  							{  								worker  									.SetCell(columnShift + 0' rowIndex' order.Id)  									.SetCell(columnShift + 1' rowIndex' order.TransactionId)  									.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  									.SetCell(columnShift + 3' rowIndex' Format(order.Time))  									.SetCell(columnShift + 4' rowIndex' order.Price)  									.SetCell(columnShift + 5' rowIndex' Format(order.State))  									.SetCell(columnShift + 6' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : string.Empty))  									.SetCell(columnShift + 7' rowIndex' order.Volume)  									.SetCell(columnShift + 8' rowIndex' Format(order.LatencyRegistration))  									.SetCell(columnShift + 9' rowIndex' Format(order.LatencyCancellation))  									//.SetCell(columnShift + 10' rowIndex' order.DerivedOrder != null ? (object)order.DerivedOrder.Id : string.Empty)  									;    								for (var i = 0; i < stopParams.Length; i++)  									worker.SetCell(columnShift + 11 + i' rowIndex' order.Condition.Parameters[stopParams[i]] ?? string.Empty);    								rowIndex++;  							}  						}  					}  				}    				worker.Save(FileName' true);  			}
Magic Number,StockSharp.Algo.Strategies.Reporting,ExcelStrategyReport,C:\repos\stocksharp_stocksharp\Algo\Strategies\Reporting\ExcelStrategyReport.cs,Generate,The following statement contains a magic number: using (var worker = hasTemplate ? new ExcelWorker() : new ExcelWorker(Template))  			{  				foreach (var strategy in Strategies)  				{  					if (Template.IsEmpty())  					{  						worker.RenameSheet(strategy.Name);  					}  					else  					{  						if (worker.ContainsSheet(strategy.Name))  							worker.AddSheet(strategy.Name);  					}    					worker  						.SetCell(0' 0' LocalizedStrings.Str1331)    						.SetCell(0' 1' LocalizedStrings.Security + ":")  						.SetCell(1' 1' strategy.Security != null ? strategy.Security.Id : string.Empty)    						.SetCell(0' 2' LocalizedStrings.Portfolio + ":")  						.SetCell(1' 2' strategy.Portfolio != null ? strategy.Portfolio.Name : string.Empty)    						.SetCell(0' 3' LocalizedStrings.Str1334)  						.SetCell(1' 3' Format(strategy.TotalWorkingTime))    						.SetCell(0' 4' LocalizedStrings.Str1335)  						//.SetCell(1' 4' FormatTime(base.Strategy.TotalCPUTime))    						.SetCell(0' 5' LocalizedStrings.Str862 + ":")  						.SetCell(1' 5' strategy.Position)    						.SetCell(0' 6' LocalizedStrings.PnL + ":")  						.SetCell(1' 6' strategy.PnL)    						.SetCell(0' 7' LocalizedStrings.Str159 + ":")  						.SetCell(1' 7' strategy.Commission)    						.SetCell(0' 8' LocalizedStrings.Str163 + ":")  						.SetCell(1' 8' strategy.Slippage)    						.SetCell(0' 9' LocalizedStrings.Str161 + ":")  						.SetCell(1' 9' Format(strategy.Latency));    					var rowIndex = 11;    					foreach (var parameter in strategy.StatisticManager.Parameters.SyncGet(c => c.ToArray()))  					{  						var value = parameter.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' parameter.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					rowIndex += 2;  					worker.SetCell(0' rowIndex' LocalizedStrings.Str1340);  					rowIndex++;    					foreach (var strategyParam in strategy.Parameters.CachedValues)  					{  						var value = strategyParam.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' strategyParam.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					//rowIndex += 2;  					//worker.SetCell(0' rowIndex' "Комиссия по типам:");  					//rowIndex++;    					//foreach (var group in Strategy.CommissionManager.Rules.SyncGet(c => c.ToArray()).GroupBy(c => c.GetType().GetDisplayName()))  					//{  					//	var commission = group.Sum(r => r.Commission);    					//	if (commission == 0)  					//		continue;    					//	worker  					//		.SetCell(0' rowIndex' group.Key)  					//		.SetCell(1' rowIndex' commission);    					//	rowIndex++;  					//}    					var columnShift = 3;    					worker  						.SetCell(columnShift + 0' 0' LocalizedStrings.Str985)    						.SetCell(columnShift + 0' 1' LocalizedStrings.Str1192).SetStyle(columnShift + 0' typeof(long))  						.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  						.SetCell(columnShift + 2' 1' LocalizedStrings.Time).SetStyle(columnShift + 2' "HH:mm:ss.fff")  						.SetCell(columnShift + 3' 1' LocalizedStrings.Price).SetStyle(columnShift + 3' typeof(decimal))  						.SetCell(columnShift + 4' 1' LocalizedStrings.Str1341).SetStyle(columnShift + 4' typeof(decimal))  						.SetCell(columnShift + 5' 1' LocalizedStrings.Volume).SetStyle(columnShift + 5' typeof(decimal))  						.SetCell(columnShift + 6' 1' LocalizedStrings.Str128)  						.SetCell(columnShift + 7' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 7' typeof(long))  						.SetCell(columnShift + 8' 1' LocalizedStrings.Str163).SetStyle(columnShift + 8' typeof(decimal))  						.SetCell(columnShift + 9' 1' LocalizedStrings.Str135)  						.SetCell(columnShift + 10' 1' LocalizedStrings.Str1342).SetStyle(columnShift + 11' typeof(decimal))  						.SetCell(columnShift + 11' 1' LocalizedStrings.Str1343).SetStyle(columnShift + 12' typeof(decimal))  						.SetCell(columnShift + 12' 1' LocalizedStrings.Str1344).SetStyle(columnShift + 13' typeof(decimal))  						.SetCell(columnShift + 13' 1' LocalizedStrings.Str1345).SetStyle(columnShift + 14' typeof(decimal))  						.SetCell(columnShift + 14' 1' LocalizedStrings.Str862).SetStyle(columnShift + 15' typeof(decimal));    					worker  						.SetConditionalFormatting(columnShift + 10' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 11' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 12' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 13' ComparisonOperator.Less' "0"' null' Colors.Red);    					var totalPnL = 0m;  					var position = 0m;    					var queues = new Dictionary<Security' PnLQueue>();    					rowIndex = 2;  					foreach (var trade in strategy.MyTrades.ToArray())  					{  						var info = strategy.PnLManager.ProcessMessage(trade.ToMessage());    						totalPnL += info.PnL;  						position += trade.GetPosition() ?? 0;    						var queue = queues.SafeAdd(trade.Trade.Security' key => new PnLQueue(key.ToSecurityId()));    						var localInfo = queue.Process(trade.ToMessage());    						worker  							.SetCell(columnShift + 0' rowIndex' trade.Trade.Id)  							.SetCell(columnShift + 1' rowIndex' trade.Order.TransactionId)  							.SetCell(columnShift + 2' rowIndex' Format(trade.Trade.Time))  							.SetCell(columnShift + 3' rowIndex' trade.Trade.Price)  							.SetCell(columnShift + 4' rowIndex' trade.Order.Price)  							.SetCell(columnShift + 5' rowIndex' trade.Trade.Volume)  							.SetCell(columnShift + 6' rowIndex' Format(trade.Order.Direction))  							.SetCell(columnShift + 7' rowIndex' trade.Order.Id)  							.SetCell(columnShift + 8' rowIndex' trade.Slippage)  							.SetCell(columnShift + 9' rowIndex' trade.Order.Comment)  							.SetCell(columnShift + 10' rowIndex' MathHelper.Round(info.PnL' Decimals))  							.SetCell(columnShift + 11' rowIndex' MathHelper.Round(localInfo.PnL' Decimals))  							.SetCell(columnShift + 12' rowIndex' MathHelper.Round(totalPnL' Decimals))  							.SetCell(columnShift + 13' rowIndex' MathHelper.Round(queue.RealizedPnL' Decimals))  							.SetCell(columnShift + 14' rowIndex' position);    						rowIndex++;  					}    					if (IncludeOrders)  					{  						columnShift += 17;    						worker  							.SetCell(columnShift + 0' 0' LocalizedStrings.Orders)    							.SetCell(columnShift + 0' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  							.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  							.SetCell(columnShift + 2' 1' LocalizedStrings.Str128)  							.SetCell(columnShift + 3' 1' LocalizedStrings.Str1346).SetStyle(columnShift + 3' "HH:mm:ss.fff")  							.SetCell(columnShift + 4' 1' LocalizedStrings.Str1347).SetStyle(columnShift + 4' "HH:mm:ss.fff")  							.SetCell(columnShift + 5' 1' LocalizedStrings.Str1348)  							.SetCell(columnShift + 6' 1' LocalizedStrings.Price).SetStyle(columnShift + 6' typeof(decimal))  							.SetCell(columnShift + 7' 1' LocalizedStrings.Str1323).SetStyle(columnShift + 7' typeof(decimal))  							.SetCell(columnShift + 8' 1' LocalizedStrings.Str1324)  							.SetCell(columnShift + 9' 1' LocalizedStrings.State)  							.SetCell(columnShift + 10' 1' LocalizedStrings.Str1325).SetStyle(columnShift + 10' typeof(decimal))  							.SetCell(columnShift + 11' 1' LocalizedStrings.Volume).SetStyle(columnShift + 11' typeof(decimal))  							.SetCell(columnShift + 12' 1' LocalizedStrings.Type)  							.SetCell(columnShift + 13' 1' LocalizedStrings.Str1326)  							.SetCell(columnShift + 14' 1' LocalizedStrings.Str1327)  							.SetCell(columnShift + 15' 1' LocalizedStrings.Str135);    						worker  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str1329)' null' Colors.Green)  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str238)' null' Colors.Red);    						rowIndex = 2;  						foreach (var order in strategy.Orders.ToArray())  						{  							worker  								.SetCell(columnShift + 0' rowIndex' order.Id)  								.SetCell(columnShift + 1' rowIndex' order.TransactionId)  								.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  								.SetCell(columnShift + 3' rowIndex' Format(order.Time))  								.SetCell(columnShift + 4' rowIndex' Format(order.LastChangeTime))  								.SetCell(columnShift + 5' rowIndex' Format(order.LastChangeTime - order.Time))  								.SetCell(columnShift + 6' rowIndex' order.Price)  								.SetCell(columnShift + 7' rowIndex' MathHelper.Round(order.GetAveragePrice(strategy.Connector)' Decimals))  								.SetCell(columnShift + 8' rowIndex' Format(order.State))  								.SetCell(columnShift + 9' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : LocalizedStrings.Str238))  								.SetCell(columnShift + 10' rowIndex' order.Balance)  								.SetCell(columnShift + 11' rowIndex' order.Volume)  								.SetCell(columnShift + 12' rowIndex' Format(order.Type))  								.SetCell(columnShift + 13' rowIndex' Format(order.LatencyRegistration))  								.SetCell(columnShift + 14' rowIndex' Format(order.LatencyCancellation))  								.SetCell(columnShift + 15' rowIndex' order.Comment);    							rowIndex++;  						}    						var stopOrders = strategy.StopOrders.ToArray();    						if (stopOrders.Length > 0)  						{  							rowIndex += 2;    							worker  								.SetCell(columnShift + 0' rowIndex - 1' LocalizedStrings.Str1351)    								.SetCell(columnShift + 0' rowIndex' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  								.SetCell(columnShift + 1' rowIndex' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  								.SetCell(columnShift + 2' rowIndex' LocalizedStrings.Str128)  								.SetCell(columnShift + 3' rowIndex' LocalizedStrings.Time).SetStyle(columnShift + 3' "HH:mm:ss.fff")  								.SetCell(columnShift + 4' rowIndex' LocalizedStrings.Price).SetStyle(columnShift + 4' typeof(decimal))  								.SetCell(columnShift + 5' rowIndex' LocalizedStrings.Str1324)  								.SetCell(columnShift + 6' rowIndex' LocalizedStrings.State)  								.SetCell(columnShift + 7' rowIndex' LocalizedStrings.Volume).SetStyle(columnShift + 7' typeof(decimal))  								.SetCell(columnShift + 8' rowIndex' LocalizedStrings.Str1326)  								.SetCell(columnShift + 9' rowIndex' LocalizedStrings.Str1327)  								//.SetCell(columnShift + 10' rowIndex' LocalizedStrings.Str1352).SetStyle(columnShift + 9' typeof(long))  								;    							var stopParams = stopOrders[0].Condition.Parameters.Keys.ToArray();    							for (var i = 0; i < stopParams.Length; i++)  								worker.SetCell(columnShift + 11 + i' rowIndex' stopParams[i]);    							foreach (var order in stopOrders)  							{  								worker  									.SetCell(columnShift + 0' rowIndex' order.Id)  									.SetCell(columnShift + 1' rowIndex' order.TransactionId)  									.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  									.SetCell(columnShift + 3' rowIndex' Format(order.Time))  									.SetCell(columnShift + 4' rowIndex' order.Price)  									.SetCell(columnShift + 5' rowIndex' Format(order.State))  									.SetCell(columnShift + 6' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : string.Empty))  									.SetCell(columnShift + 7' rowIndex' order.Volume)  									.SetCell(columnShift + 8' rowIndex' Format(order.LatencyRegistration))  									.SetCell(columnShift + 9' rowIndex' Format(order.LatencyCancellation))  									//.SetCell(columnShift + 10' rowIndex' order.DerivedOrder != null ? (object)order.DerivedOrder.Id : string.Empty)  									;    								for (var i = 0; i < stopParams.Length; i++)  									worker.SetCell(columnShift + 11 + i' rowIndex' order.Condition.Parameters[stopParams[i]] ?? string.Empty);    								rowIndex++;  							}  						}  					}  				}    				worker.Save(FileName' true);  			}
Magic Number,StockSharp.Algo.Strategies.Reporting,ExcelStrategyReport,C:\repos\stocksharp_stocksharp\Algo\Strategies\Reporting\ExcelStrategyReport.cs,Generate,The following statement contains a magic number: using (var worker = hasTemplate ? new ExcelWorker() : new ExcelWorker(Template))  			{  				foreach (var strategy in Strategies)  				{  					if (Template.IsEmpty())  					{  						worker.RenameSheet(strategy.Name);  					}  					else  					{  						if (worker.ContainsSheet(strategy.Name))  							worker.AddSheet(strategy.Name);  					}    					worker  						.SetCell(0' 0' LocalizedStrings.Str1331)    						.SetCell(0' 1' LocalizedStrings.Security + ":")  						.SetCell(1' 1' strategy.Security != null ? strategy.Security.Id : string.Empty)    						.SetCell(0' 2' LocalizedStrings.Portfolio + ":")  						.SetCell(1' 2' strategy.Portfolio != null ? strategy.Portfolio.Name : string.Empty)    						.SetCell(0' 3' LocalizedStrings.Str1334)  						.SetCell(1' 3' Format(strategy.TotalWorkingTime))    						.SetCell(0' 4' LocalizedStrings.Str1335)  						//.SetCell(1' 4' FormatTime(base.Strategy.TotalCPUTime))    						.SetCell(0' 5' LocalizedStrings.Str862 + ":")  						.SetCell(1' 5' strategy.Position)    						.SetCell(0' 6' LocalizedStrings.PnL + ":")  						.SetCell(1' 6' strategy.PnL)    						.SetCell(0' 7' LocalizedStrings.Str159 + ":")  						.SetCell(1' 7' strategy.Commission)    						.SetCell(0' 8' LocalizedStrings.Str163 + ":")  						.SetCell(1' 8' strategy.Slippage)    						.SetCell(0' 9' LocalizedStrings.Str161 + ":")  						.SetCell(1' 9' Format(strategy.Latency));    					var rowIndex = 11;    					foreach (var parameter in strategy.StatisticManager.Parameters.SyncGet(c => c.ToArray()))  					{  						var value = parameter.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' parameter.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					rowIndex += 2;  					worker.SetCell(0' rowIndex' LocalizedStrings.Str1340);  					rowIndex++;    					foreach (var strategyParam in strategy.Parameters.CachedValues)  					{  						var value = strategyParam.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' strategyParam.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					//rowIndex += 2;  					//worker.SetCell(0' rowIndex' "Комиссия по типам:");  					//rowIndex++;    					//foreach (var group in Strategy.CommissionManager.Rules.SyncGet(c => c.ToArray()).GroupBy(c => c.GetType().GetDisplayName()))  					//{  					//	var commission = group.Sum(r => r.Commission);    					//	if (commission == 0)  					//		continue;    					//	worker  					//		.SetCell(0' rowIndex' group.Key)  					//		.SetCell(1' rowIndex' commission);    					//	rowIndex++;  					//}    					var columnShift = 3;    					worker  						.SetCell(columnShift + 0' 0' LocalizedStrings.Str985)    						.SetCell(columnShift + 0' 1' LocalizedStrings.Str1192).SetStyle(columnShift + 0' typeof(long))  						.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  						.SetCell(columnShift + 2' 1' LocalizedStrings.Time).SetStyle(columnShift + 2' "HH:mm:ss.fff")  						.SetCell(columnShift + 3' 1' LocalizedStrings.Price).SetStyle(columnShift + 3' typeof(decimal))  						.SetCell(columnShift + 4' 1' LocalizedStrings.Str1341).SetStyle(columnShift + 4' typeof(decimal))  						.SetCell(columnShift + 5' 1' LocalizedStrings.Volume).SetStyle(columnShift + 5' typeof(decimal))  						.SetCell(columnShift + 6' 1' LocalizedStrings.Str128)  						.SetCell(columnShift + 7' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 7' typeof(long))  						.SetCell(columnShift + 8' 1' LocalizedStrings.Str163).SetStyle(columnShift + 8' typeof(decimal))  						.SetCell(columnShift + 9' 1' LocalizedStrings.Str135)  						.SetCell(columnShift + 10' 1' LocalizedStrings.Str1342).SetStyle(columnShift + 11' typeof(decimal))  						.SetCell(columnShift + 11' 1' LocalizedStrings.Str1343).SetStyle(columnShift + 12' typeof(decimal))  						.SetCell(columnShift + 12' 1' LocalizedStrings.Str1344).SetStyle(columnShift + 13' typeof(decimal))  						.SetCell(columnShift + 13' 1' LocalizedStrings.Str1345).SetStyle(columnShift + 14' typeof(decimal))  						.SetCell(columnShift + 14' 1' LocalizedStrings.Str862).SetStyle(columnShift + 15' typeof(decimal));    					worker  						.SetConditionalFormatting(columnShift + 10' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 11' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 12' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 13' ComparisonOperator.Less' "0"' null' Colors.Red);    					var totalPnL = 0m;  					var position = 0m;    					var queues = new Dictionary<Security' PnLQueue>();    					rowIndex = 2;  					foreach (var trade in strategy.MyTrades.ToArray())  					{  						var info = strategy.PnLManager.ProcessMessage(trade.ToMessage());    						totalPnL += info.PnL;  						position += trade.GetPosition() ?? 0;    						var queue = queues.SafeAdd(trade.Trade.Security' key => new PnLQueue(key.ToSecurityId()));    						var localInfo = queue.Process(trade.ToMessage());    						worker  							.SetCell(columnShift + 0' rowIndex' trade.Trade.Id)  							.SetCell(columnShift + 1' rowIndex' trade.Order.TransactionId)  							.SetCell(columnShift + 2' rowIndex' Format(trade.Trade.Time))  							.SetCell(columnShift + 3' rowIndex' trade.Trade.Price)  							.SetCell(columnShift + 4' rowIndex' trade.Order.Price)  							.SetCell(columnShift + 5' rowIndex' trade.Trade.Volume)  							.SetCell(columnShift + 6' rowIndex' Format(trade.Order.Direction))  							.SetCell(columnShift + 7' rowIndex' trade.Order.Id)  							.SetCell(columnShift + 8' rowIndex' trade.Slippage)  							.SetCell(columnShift + 9' rowIndex' trade.Order.Comment)  							.SetCell(columnShift + 10' rowIndex' MathHelper.Round(info.PnL' Decimals))  							.SetCell(columnShift + 11' rowIndex' MathHelper.Round(localInfo.PnL' Decimals))  							.SetCell(columnShift + 12' rowIndex' MathHelper.Round(totalPnL' Decimals))  							.SetCell(columnShift + 13' rowIndex' MathHelper.Round(queue.RealizedPnL' Decimals))  							.SetCell(columnShift + 14' rowIndex' position);    						rowIndex++;  					}    					if (IncludeOrders)  					{  						columnShift += 17;    						worker  							.SetCell(columnShift + 0' 0' LocalizedStrings.Orders)    							.SetCell(columnShift + 0' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  							.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  							.SetCell(columnShift + 2' 1' LocalizedStrings.Str128)  							.SetCell(columnShift + 3' 1' LocalizedStrings.Str1346).SetStyle(columnShift + 3' "HH:mm:ss.fff")  							.SetCell(columnShift + 4' 1' LocalizedStrings.Str1347).SetStyle(columnShift + 4' "HH:mm:ss.fff")  							.SetCell(columnShift + 5' 1' LocalizedStrings.Str1348)  							.SetCell(columnShift + 6' 1' LocalizedStrings.Price).SetStyle(columnShift + 6' typeof(decimal))  							.SetCell(columnShift + 7' 1' LocalizedStrings.Str1323).SetStyle(columnShift + 7' typeof(decimal))  							.SetCell(columnShift + 8' 1' LocalizedStrings.Str1324)  							.SetCell(columnShift + 9' 1' LocalizedStrings.State)  							.SetCell(columnShift + 10' 1' LocalizedStrings.Str1325).SetStyle(columnShift + 10' typeof(decimal))  							.SetCell(columnShift + 11' 1' LocalizedStrings.Volume).SetStyle(columnShift + 11' typeof(decimal))  							.SetCell(columnShift + 12' 1' LocalizedStrings.Type)  							.SetCell(columnShift + 13' 1' LocalizedStrings.Str1326)  							.SetCell(columnShift + 14' 1' LocalizedStrings.Str1327)  							.SetCell(columnShift + 15' 1' LocalizedStrings.Str135);    						worker  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str1329)' null' Colors.Green)  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str238)' null' Colors.Red);    						rowIndex = 2;  						foreach (var order in strategy.Orders.ToArray())  						{  							worker  								.SetCell(columnShift + 0' rowIndex' order.Id)  								.SetCell(columnShift + 1' rowIndex' order.TransactionId)  								.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  								.SetCell(columnShift + 3' rowIndex' Format(order.Time))  								.SetCell(columnShift + 4' rowIndex' Format(order.LastChangeTime))  								.SetCell(columnShift + 5' rowIndex' Format(order.LastChangeTime - order.Time))  								.SetCell(columnShift + 6' rowIndex' order.Price)  								.SetCell(columnShift + 7' rowIndex' MathHelper.Round(order.GetAveragePrice(strategy.Connector)' Decimals))  								.SetCell(columnShift + 8' rowIndex' Format(order.State))  								.SetCell(columnShift + 9' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : LocalizedStrings.Str238))  								.SetCell(columnShift + 10' rowIndex' order.Balance)  								.SetCell(columnShift + 11' rowIndex' order.Volume)  								.SetCell(columnShift + 12' rowIndex' Format(order.Type))  								.SetCell(columnShift + 13' rowIndex' Format(order.LatencyRegistration))  								.SetCell(columnShift + 14' rowIndex' Format(order.LatencyCancellation))  								.SetCell(columnShift + 15' rowIndex' order.Comment);    							rowIndex++;  						}    						var stopOrders = strategy.StopOrders.ToArray();    						if (stopOrders.Length > 0)  						{  							rowIndex += 2;    							worker  								.SetCell(columnShift + 0' rowIndex - 1' LocalizedStrings.Str1351)    								.SetCell(columnShift + 0' rowIndex' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  								.SetCell(columnShift + 1' rowIndex' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  								.SetCell(columnShift + 2' rowIndex' LocalizedStrings.Str128)  								.SetCell(columnShift + 3' rowIndex' LocalizedStrings.Time).SetStyle(columnShift + 3' "HH:mm:ss.fff")  								.SetCell(columnShift + 4' rowIndex' LocalizedStrings.Price).SetStyle(columnShift + 4' typeof(decimal))  								.SetCell(columnShift + 5' rowIndex' LocalizedStrings.Str1324)  								.SetCell(columnShift + 6' rowIndex' LocalizedStrings.State)  								.SetCell(columnShift + 7' rowIndex' LocalizedStrings.Volume).SetStyle(columnShift + 7' typeof(decimal))  								.SetCell(columnShift + 8' rowIndex' LocalizedStrings.Str1326)  								.SetCell(columnShift + 9' rowIndex' LocalizedStrings.Str1327)  								//.SetCell(columnShift + 10' rowIndex' LocalizedStrings.Str1352).SetStyle(columnShift + 9' typeof(long))  								;    							var stopParams = stopOrders[0].Condition.Parameters.Keys.ToArray();    							for (var i = 0; i < stopParams.Length; i++)  								worker.SetCell(columnShift + 11 + i' rowIndex' stopParams[i]);    							foreach (var order in stopOrders)  							{  								worker  									.SetCell(columnShift + 0' rowIndex' order.Id)  									.SetCell(columnShift + 1' rowIndex' order.TransactionId)  									.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  									.SetCell(columnShift + 3' rowIndex' Format(order.Time))  									.SetCell(columnShift + 4' rowIndex' order.Price)  									.SetCell(columnShift + 5' rowIndex' Format(order.State))  									.SetCell(columnShift + 6' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : string.Empty))  									.SetCell(columnShift + 7' rowIndex' order.Volume)  									.SetCell(columnShift + 8' rowIndex' Format(order.LatencyRegistration))  									.SetCell(columnShift + 9' rowIndex' Format(order.LatencyCancellation))  									//.SetCell(columnShift + 10' rowIndex' order.DerivedOrder != null ? (object)order.DerivedOrder.Id : string.Empty)  									;    								for (var i = 0; i < stopParams.Length; i++)  									worker.SetCell(columnShift + 11 + i' rowIndex' order.Condition.Parameters[stopParams[i]] ?? string.Empty);    								rowIndex++;  							}  						}  					}  				}    				worker.Save(FileName' true);  			}
Magic Number,StockSharp.Algo.Strategies.Reporting,ExcelStrategyReport,C:\repos\stocksharp_stocksharp\Algo\Strategies\Reporting\ExcelStrategyReport.cs,Generate,The following statement contains a magic number: using (var worker = hasTemplate ? new ExcelWorker() : new ExcelWorker(Template))  			{  				foreach (var strategy in Strategies)  				{  					if (Template.IsEmpty())  					{  						worker.RenameSheet(strategy.Name);  					}  					else  					{  						if (worker.ContainsSheet(strategy.Name))  							worker.AddSheet(strategy.Name);  					}    					worker  						.SetCell(0' 0' LocalizedStrings.Str1331)    						.SetCell(0' 1' LocalizedStrings.Security + ":")  						.SetCell(1' 1' strategy.Security != null ? strategy.Security.Id : string.Empty)    						.SetCell(0' 2' LocalizedStrings.Portfolio + ":")  						.SetCell(1' 2' strategy.Portfolio != null ? strategy.Portfolio.Name : string.Empty)    						.SetCell(0' 3' LocalizedStrings.Str1334)  						.SetCell(1' 3' Format(strategy.TotalWorkingTime))    						.SetCell(0' 4' LocalizedStrings.Str1335)  						//.SetCell(1' 4' FormatTime(base.Strategy.TotalCPUTime))    						.SetCell(0' 5' LocalizedStrings.Str862 + ":")  						.SetCell(1' 5' strategy.Position)    						.SetCell(0' 6' LocalizedStrings.PnL + ":")  						.SetCell(1' 6' strategy.PnL)    						.SetCell(0' 7' LocalizedStrings.Str159 + ":")  						.SetCell(1' 7' strategy.Commission)    						.SetCell(0' 8' LocalizedStrings.Str163 + ":")  						.SetCell(1' 8' strategy.Slippage)    						.SetCell(0' 9' LocalizedStrings.Str161 + ":")  						.SetCell(1' 9' Format(strategy.Latency));    					var rowIndex = 11;    					foreach (var parameter in strategy.StatisticManager.Parameters.SyncGet(c => c.ToArray()))  					{  						var value = parameter.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' parameter.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					rowIndex += 2;  					worker.SetCell(0' rowIndex' LocalizedStrings.Str1340);  					rowIndex++;    					foreach (var strategyParam in strategy.Parameters.CachedValues)  					{  						var value = strategyParam.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' strategyParam.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					//rowIndex += 2;  					//worker.SetCell(0' rowIndex' "Комиссия по типам:");  					//rowIndex++;    					//foreach (var group in Strategy.CommissionManager.Rules.SyncGet(c => c.ToArray()).GroupBy(c => c.GetType().GetDisplayName()))  					//{  					//	var commission = group.Sum(r => r.Commission);    					//	if (commission == 0)  					//		continue;    					//	worker  					//		.SetCell(0' rowIndex' group.Key)  					//		.SetCell(1' rowIndex' commission);    					//	rowIndex++;  					//}    					var columnShift = 3;    					worker  						.SetCell(columnShift + 0' 0' LocalizedStrings.Str985)    						.SetCell(columnShift + 0' 1' LocalizedStrings.Str1192).SetStyle(columnShift + 0' typeof(long))  						.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  						.SetCell(columnShift + 2' 1' LocalizedStrings.Time).SetStyle(columnShift + 2' "HH:mm:ss.fff")  						.SetCell(columnShift + 3' 1' LocalizedStrings.Price).SetStyle(columnShift + 3' typeof(decimal))  						.SetCell(columnShift + 4' 1' LocalizedStrings.Str1341).SetStyle(columnShift + 4' typeof(decimal))  						.SetCell(columnShift + 5' 1' LocalizedStrings.Volume).SetStyle(columnShift + 5' typeof(decimal))  						.SetCell(columnShift + 6' 1' LocalizedStrings.Str128)  						.SetCell(columnShift + 7' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 7' typeof(long))  						.SetCell(columnShift + 8' 1' LocalizedStrings.Str163).SetStyle(columnShift + 8' typeof(decimal))  						.SetCell(columnShift + 9' 1' LocalizedStrings.Str135)  						.SetCell(columnShift + 10' 1' LocalizedStrings.Str1342).SetStyle(columnShift + 11' typeof(decimal))  						.SetCell(columnShift + 11' 1' LocalizedStrings.Str1343).SetStyle(columnShift + 12' typeof(decimal))  						.SetCell(columnShift + 12' 1' LocalizedStrings.Str1344).SetStyle(columnShift + 13' typeof(decimal))  						.SetCell(columnShift + 13' 1' LocalizedStrings.Str1345).SetStyle(columnShift + 14' typeof(decimal))  						.SetCell(columnShift + 14' 1' LocalizedStrings.Str862).SetStyle(columnShift + 15' typeof(decimal));    					worker  						.SetConditionalFormatting(columnShift + 10' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 11' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 12' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 13' ComparisonOperator.Less' "0"' null' Colors.Red);    					var totalPnL = 0m;  					var position = 0m;    					var queues = new Dictionary<Security' PnLQueue>();    					rowIndex = 2;  					foreach (var trade in strategy.MyTrades.ToArray())  					{  						var info = strategy.PnLManager.ProcessMessage(trade.ToMessage());    						totalPnL += info.PnL;  						position += trade.GetPosition() ?? 0;    						var queue = queues.SafeAdd(trade.Trade.Security' key => new PnLQueue(key.ToSecurityId()));    						var localInfo = queue.Process(trade.ToMessage());    						worker  							.SetCell(columnShift + 0' rowIndex' trade.Trade.Id)  							.SetCell(columnShift + 1' rowIndex' trade.Order.TransactionId)  							.SetCell(columnShift + 2' rowIndex' Format(trade.Trade.Time))  							.SetCell(columnShift + 3' rowIndex' trade.Trade.Price)  							.SetCell(columnShift + 4' rowIndex' trade.Order.Price)  							.SetCell(columnShift + 5' rowIndex' trade.Trade.Volume)  							.SetCell(columnShift + 6' rowIndex' Format(trade.Order.Direction))  							.SetCell(columnShift + 7' rowIndex' trade.Order.Id)  							.SetCell(columnShift + 8' rowIndex' trade.Slippage)  							.SetCell(columnShift + 9' rowIndex' trade.Order.Comment)  							.SetCell(columnShift + 10' rowIndex' MathHelper.Round(info.PnL' Decimals))  							.SetCell(columnShift + 11' rowIndex' MathHelper.Round(localInfo.PnL' Decimals))  							.SetCell(columnShift + 12' rowIndex' MathHelper.Round(totalPnL' Decimals))  							.SetCell(columnShift + 13' rowIndex' MathHelper.Round(queue.RealizedPnL' Decimals))  							.SetCell(columnShift + 14' rowIndex' position);    						rowIndex++;  					}    					if (IncludeOrders)  					{  						columnShift += 17;    						worker  							.SetCell(columnShift + 0' 0' LocalizedStrings.Orders)    							.SetCell(columnShift + 0' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  							.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  							.SetCell(columnShift + 2' 1' LocalizedStrings.Str128)  							.SetCell(columnShift + 3' 1' LocalizedStrings.Str1346).SetStyle(columnShift + 3' "HH:mm:ss.fff")  							.SetCell(columnShift + 4' 1' LocalizedStrings.Str1347).SetStyle(columnShift + 4' "HH:mm:ss.fff")  							.SetCell(columnShift + 5' 1' LocalizedStrings.Str1348)  							.SetCell(columnShift + 6' 1' LocalizedStrings.Price).SetStyle(columnShift + 6' typeof(decimal))  							.SetCell(columnShift + 7' 1' LocalizedStrings.Str1323).SetStyle(columnShift + 7' typeof(decimal))  							.SetCell(columnShift + 8' 1' LocalizedStrings.Str1324)  							.SetCell(columnShift + 9' 1' LocalizedStrings.State)  							.SetCell(columnShift + 10' 1' LocalizedStrings.Str1325).SetStyle(columnShift + 10' typeof(decimal))  							.SetCell(columnShift + 11' 1' LocalizedStrings.Volume).SetStyle(columnShift + 11' typeof(decimal))  							.SetCell(columnShift + 12' 1' LocalizedStrings.Type)  							.SetCell(columnShift + 13' 1' LocalizedStrings.Str1326)  							.SetCell(columnShift + 14' 1' LocalizedStrings.Str1327)  							.SetCell(columnShift + 15' 1' LocalizedStrings.Str135);    						worker  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str1329)' null' Colors.Green)  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str238)' null' Colors.Red);    						rowIndex = 2;  						foreach (var order in strategy.Orders.ToArray())  						{  							worker  								.SetCell(columnShift + 0' rowIndex' order.Id)  								.SetCell(columnShift + 1' rowIndex' order.TransactionId)  								.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  								.SetCell(columnShift + 3' rowIndex' Format(order.Time))  								.SetCell(columnShift + 4' rowIndex' Format(order.LastChangeTime))  								.SetCell(columnShift + 5' rowIndex' Format(order.LastChangeTime - order.Time))  								.SetCell(columnShift + 6' rowIndex' order.Price)  								.SetCell(columnShift + 7' rowIndex' MathHelper.Round(order.GetAveragePrice(strategy.Connector)' Decimals))  								.SetCell(columnShift + 8' rowIndex' Format(order.State))  								.SetCell(columnShift + 9' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : LocalizedStrings.Str238))  								.SetCell(columnShift + 10' rowIndex' order.Balance)  								.SetCell(columnShift + 11' rowIndex' order.Volume)  								.SetCell(columnShift + 12' rowIndex' Format(order.Type))  								.SetCell(columnShift + 13' rowIndex' Format(order.LatencyRegistration))  								.SetCell(columnShift + 14' rowIndex' Format(order.LatencyCancellation))  								.SetCell(columnShift + 15' rowIndex' order.Comment);    							rowIndex++;  						}    						var stopOrders = strategy.StopOrders.ToArray();    						if (stopOrders.Length > 0)  						{  							rowIndex += 2;    							worker  								.SetCell(columnShift + 0' rowIndex - 1' LocalizedStrings.Str1351)    								.SetCell(columnShift + 0' rowIndex' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  								.SetCell(columnShift + 1' rowIndex' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  								.SetCell(columnShift + 2' rowIndex' LocalizedStrings.Str128)  								.SetCell(columnShift + 3' rowIndex' LocalizedStrings.Time).SetStyle(columnShift + 3' "HH:mm:ss.fff")  								.SetCell(columnShift + 4' rowIndex' LocalizedStrings.Price).SetStyle(columnShift + 4' typeof(decimal))  								.SetCell(columnShift + 5' rowIndex' LocalizedStrings.Str1324)  								.SetCell(columnShift + 6' rowIndex' LocalizedStrings.State)  								.SetCell(columnShift + 7' rowIndex' LocalizedStrings.Volume).SetStyle(columnShift + 7' typeof(decimal))  								.SetCell(columnShift + 8' rowIndex' LocalizedStrings.Str1326)  								.SetCell(columnShift + 9' rowIndex' LocalizedStrings.Str1327)  								//.SetCell(columnShift + 10' rowIndex' LocalizedStrings.Str1352).SetStyle(columnShift + 9' typeof(long))  								;    							var stopParams = stopOrders[0].Condition.Parameters.Keys.ToArray();    							for (var i = 0; i < stopParams.Length; i++)  								worker.SetCell(columnShift + 11 + i' rowIndex' stopParams[i]);    							foreach (var order in stopOrders)  							{  								worker  									.SetCell(columnShift + 0' rowIndex' order.Id)  									.SetCell(columnShift + 1' rowIndex' order.TransactionId)  									.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  									.SetCell(columnShift + 3' rowIndex' Format(order.Time))  									.SetCell(columnShift + 4' rowIndex' order.Price)  									.SetCell(columnShift + 5' rowIndex' Format(order.State))  									.SetCell(columnShift + 6' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : string.Empty))  									.SetCell(columnShift + 7' rowIndex' order.Volume)  									.SetCell(columnShift + 8' rowIndex' Format(order.LatencyRegistration))  									.SetCell(columnShift + 9' rowIndex' Format(order.LatencyCancellation))  									//.SetCell(columnShift + 10' rowIndex' order.DerivedOrder != null ? (object)order.DerivedOrder.Id : string.Empty)  									;    								for (var i = 0; i < stopParams.Length; i++)  									worker.SetCell(columnShift + 11 + i' rowIndex' order.Condition.Parameters[stopParams[i]] ?? string.Empty);    								rowIndex++;  							}  						}  					}  				}    				worker.Save(FileName' true);  			}
Magic Number,StockSharp.Algo.Strategies.Reporting,ExcelStrategyReport,C:\repos\stocksharp_stocksharp\Algo\Strategies\Reporting\ExcelStrategyReport.cs,Generate,The following statement contains a magic number: using (var worker = hasTemplate ? new ExcelWorker() : new ExcelWorker(Template))  			{  				foreach (var strategy in Strategies)  				{  					if (Template.IsEmpty())  					{  						worker.RenameSheet(strategy.Name);  					}  					else  					{  						if (worker.ContainsSheet(strategy.Name))  							worker.AddSheet(strategy.Name);  					}    					worker  						.SetCell(0' 0' LocalizedStrings.Str1331)    						.SetCell(0' 1' LocalizedStrings.Security + ":")  						.SetCell(1' 1' strategy.Security != null ? strategy.Security.Id : string.Empty)    						.SetCell(0' 2' LocalizedStrings.Portfolio + ":")  						.SetCell(1' 2' strategy.Portfolio != null ? strategy.Portfolio.Name : string.Empty)    						.SetCell(0' 3' LocalizedStrings.Str1334)  						.SetCell(1' 3' Format(strategy.TotalWorkingTime))    						.SetCell(0' 4' LocalizedStrings.Str1335)  						//.SetCell(1' 4' FormatTime(base.Strategy.TotalCPUTime))    						.SetCell(0' 5' LocalizedStrings.Str862 + ":")  						.SetCell(1' 5' strategy.Position)    						.SetCell(0' 6' LocalizedStrings.PnL + ":")  						.SetCell(1' 6' strategy.PnL)    						.SetCell(0' 7' LocalizedStrings.Str159 + ":")  						.SetCell(1' 7' strategy.Commission)    						.SetCell(0' 8' LocalizedStrings.Str163 + ":")  						.SetCell(1' 8' strategy.Slippage)    						.SetCell(0' 9' LocalizedStrings.Str161 + ":")  						.SetCell(1' 9' Format(strategy.Latency));    					var rowIndex = 11;    					foreach (var parameter in strategy.StatisticManager.Parameters.SyncGet(c => c.ToArray()))  					{  						var value = parameter.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' parameter.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					rowIndex += 2;  					worker.SetCell(0' rowIndex' LocalizedStrings.Str1340);  					rowIndex++;    					foreach (var strategyParam in strategy.Parameters.CachedValues)  					{  						var value = strategyParam.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' strategyParam.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					//rowIndex += 2;  					//worker.SetCell(0' rowIndex' "Комиссия по типам:");  					//rowIndex++;    					//foreach (var group in Strategy.CommissionManager.Rules.SyncGet(c => c.ToArray()).GroupBy(c => c.GetType().GetDisplayName()))  					//{  					//	var commission = group.Sum(r => r.Commission);    					//	if (commission == 0)  					//		continue;    					//	worker  					//		.SetCell(0' rowIndex' group.Key)  					//		.SetCell(1' rowIndex' commission);    					//	rowIndex++;  					//}    					var columnShift = 3;    					worker  						.SetCell(columnShift + 0' 0' LocalizedStrings.Str985)    						.SetCell(columnShift + 0' 1' LocalizedStrings.Str1192).SetStyle(columnShift + 0' typeof(long))  						.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  						.SetCell(columnShift + 2' 1' LocalizedStrings.Time).SetStyle(columnShift + 2' "HH:mm:ss.fff")  						.SetCell(columnShift + 3' 1' LocalizedStrings.Price).SetStyle(columnShift + 3' typeof(decimal))  						.SetCell(columnShift + 4' 1' LocalizedStrings.Str1341).SetStyle(columnShift + 4' typeof(decimal))  						.SetCell(columnShift + 5' 1' LocalizedStrings.Volume).SetStyle(columnShift + 5' typeof(decimal))  						.SetCell(columnShift + 6' 1' LocalizedStrings.Str128)  						.SetCell(columnShift + 7' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 7' typeof(long))  						.SetCell(columnShift + 8' 1' LocalizedStrings.Str163).SetStyle(columnShift + 8' typeof(decimal))  						.SetCell(columnShift + 9' 1' LocalizedStrings.Str135)  						.SetCell(columnShift + 10' 1' LocalizedStrings.Str1342).SetStyle(columnShift + 11' typeof(decimal))  						.SetCell(columnShift + 11' 1' LocalizedStrings.Str1343).SetStyle(columnShift + 12' typeof(decimal))  						.SetCell(columnShift + 12' 1' LocalizedStrings.Str1344).SetStyle(columnShift + 13' typeof(decimal))  						.SetCell(columnShift + 13' 1' LocalizedStrings.Str1345).SetStyle(columnShift + 14' typeof(decimal))  						.SetCell(columnShift + 14' 1' LocalizedStrings.Str862).SetStyle(columnShift + 15' typeof(decimal));    					worker  						.SetConditionalFormatting(columnShift + 10' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 11' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 12' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 13' ComparisonOperator.Less' "0"' null' Colors.Red);    					var totalPnL = 0m;  					var position = 0m;    					var queues = new Dictionary<Security' PnLQueue>();    					rowIndex = 2;  					foreach (var trade in strategy.MyTrades.ToArray())  					{  						var info = strategy.PnLManager.ProcessMessage(trade.ToMessage());    						totalPnL += info.PnL;  						position += trade.GetPosition() ?? 0;    						var queue = queues.SafeAdd(trade.Trade.Security' key => new PnLQueue(key.ToSecurityId()));    						var localInfo = queue.Process(trade.ToMessage());    						worker  							.SetCell(columnShift + 0' rowIndex' trade.Trade.Id)  							.SetCell(columnShift + 1' rowIndex' trade.Order.TransactionId)  							.SetCell(columnShift + 2' rowIndex' Format(trade.Trade.Time))  							.SetCell(columnShift + 3' rowIndex' trade.Trade.Price)  							.SetCell(columnShift + 4' rowIndex' trade.Order.Price)  							.SetCell(columnShift + 5' rowIndex' trade.Trade.Volume)  							.SetCell(columnShift + 6' rowIndex' Format(trade.Order.Direction))  							.SetCell(columnShift + 7' rowIndex' trade.Order.Id)  							.SetCell(columnShift + 8' rowIndex' trade.Slippage)  							.SetCell(columnShift + 9' rowIndex' trade.Order.Comment)  							.SetCell(columnShift + 10' rowIndex' MathHelper.Round(info.PnL' Decimals))  							.SetCell(columnShift + 11' rowIndex' MathHelper.Round(localInfo.PnL' Decimals))  							.SetCell(columnShift + 12' rowIndex' MathHelper.Round(totalPnL' Decimals))  							.SetCell(columnShift + 13' rowIndex' MathHelper.Round(queue.RealizedPnL' Decimals))  							.SetCell(columnShift + 14' rowIndex' position);    						rowIndex++;  					}    					if (IncludeOrders)  					{  						columnShift += 17;    						worker  							.SetCell(columnShift + 0' 0' LocalizedStrings.Orders)    							.SetCell(columnShift + 0' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  							.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  							.SetCell(columnShift + 2' 1' LocalizedStrings.Str128)  							.SetCell(columnShift + 3' 1' LocalizedStrings.Str1346).SetStyle(columnShift + 3' "HH:mm:ss.fff")  							.SetCell(columnShift + 4' 1' LocalizedStrings.Str1347).SetStyle(columnShift + 4' "HH:mm:ss.fff")  							.SetCell(columnShift + 5' 1' LocalizedStrings.Str1348)  							.SetCell(columnShift + 6' 1' LocalizedStrings.Price).SetStyle(columnShift + 6' typeof(decimal))  							.SetCell(columnShift + 7' 1' LocalizedStrings.Str1323).SetStyle(columnShift + 7' typeof(decimal))  							.SetCell(columnShift + 8' 1' LocalizedStrings.Str1324)  							.SetCell(columnShift + 9' 1' LocalizedStrings.State)  							.SetCell(columnShift + 10' 1' LocalizedStrings.Str1325).SetStyle(columnShift + 10' typeof(decimal))  							.SetCell(columnShift + 11' 1' LocalizedStrings.Volume).SetStyle(columnShift + 11' typeof(decimal))  							.SetCell(columnShift + 12' 1' LocalizedStrings.Type)  							.SetCell(columnShift + 13' 1' LocalizedStrings.Str1326)  							.SetCell(columnShift + 14' 1' LocalizedStrings.Str1327)  							.SetCell(columnShift + 15' 1' LocalizedStrings.Str135);    						worker  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str1329)' null' Colors.Green)  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str238)' null' Colors.Red);    						rowIndex = 2;  						foreach (var order in strategy.Orders.ToArray())  						{  							worker  								.SetCell(columnShift + 0' rowIndex' order.Id)  								.SetCell(columnShift + 1' rowIndex' order.TransactionId)  								.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  								.SetCell(columnShift + 3' rowIndex' Format(order.Time))  								.SetCell(columnShift + 4' rowIndex' Format(order.LastChangeTime))  								.SetCell(columnShift + 5' rowIndex' Format(order.LastChangeTime - order.Time))  								.SetCell(columnShift + 6' rowIndex' order.Price)  								.SetCell(columnShift + 7' rowIndex' MathHelper.Round(order.GetAveragePrice(strategy.Connector)' Decimals))  								.SetCell(columnShift + 8' rowIndex' Format(order.State))  								.SetCell(columnShift + 9' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : LocalizedStrings.Str238))  								.SetCell(columnShift + 10' rowIndex' order.Balance)  								.SetCell(columnShift + 11' rowIndex' order.Volume)  								.SetCell(columnShift + 12' rowIndex' Format(order.Type))  								.SetCell(columnShift + 13' rowIndex' Format(order.LatencyRegistration))  								.SetCell(columnShift + 14' rowIndex' Format(order.LatencyCancellation))  								.SetCell(columnShift + 15' rowIndex' order.Comment);    							rowIndex++;  						}    						var stopOrders = strategy.StopOrders.ToArray();    						if (stopOrders.Length > 0)  						{  							rowIndex += 2;    							worker  								.SetCell(columnShift + 0' rowIndex - 1' LocalizedStrings.Str1351)    								.SetCell(columnShift + 0' rowIndex' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  								.SetCell(columnShift + 1' rowIndex' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  								.SetCell(columnShift + 2' rowIndex' LocalizedStrings.Str128)  								.SetCell(columnShift + 3' rowIndex' LocalizedStrings.Time).SetStyle(columnShift + 3' "HH:mm:ss.fff")  								.SetCell(columnShift + 4' rowIndex' LocalizedStrings.Price).SetStyle(columnShift + 4' typeof(decimal))  								.SetCell(columnShift + 5' rowIndex' LocalizedStrings.Str1324)  								.SetCell(columnShift + 6' rowIndex' LocalizedStrings.State)  								.SetCell(columnShift + 7' rowIndex' LocalizedStrings.Volume).SetStyle(columnShift + 7' typeof(decimal))  								.SetCell(columnShift + 8' rowIndex' LocalizedStrings.Str1326)  								.SetCell(columnShift + 9' rowIndex' LocalizedStrings.Str1327)  								//.SetCell(columnShift + 10' rowIndex' LocalizedStrings.Str1352).SetStyle(columnShift + 9' typeof(long))  								;    							var stopParams = stopOrders[0].Condition.Parameters.Keys.ToArray();    							for (var i = 0; i < stopParams.Length; i++)  								worker.SetCell(columnShift + 11 + i' rowIndex' stopParams[i]);    							foreach (var order in stopOrders)  							{  								worker  									.SetCell(columnShift + 0' rowIndex' order.Id)  									.SetCell(columnShift + 1' rowIndex' order.TransactionId)  									.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  									.SetCell(columnShift + 3' rowIndex' Format(order.Time))  									.SetCell(columnShift + 4' rowIndex' order.Price)  									.SetCell(columnShift + 5' rowIndex' Format(order.State))  									.SetCell(columnShift + 6' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : string.Empty))  									.SetCell(columnShift + 7' rowIndex' order.Volume)  									.SetCell(columnShift + 8' rowIndex' Format(order.LatencyRegistration))  									.SetCell(columnShift + 9' rowIndex' Format(order.LatencyCancellation))  									//.SetCell(columnShift + 10' rowIndex' order.DerivedOrder != null ? (object)order.DerivedOrder.Id : string.Empty)  									;    								for (var i = 0; i < stopParams.Length; i++)  									worker.SetCell(columnShift + 11 + i' rowIndex' order.Condition.Parameters[stopParams[i]] ?? string.Empty);    								rowIndex++;  							}  						}  					}  				}    				worker.Save(FileName' true);  			}
Magic Number,StockSharp.Algo.Strategies.Reporting,ExcelStrategyReport,C:\repos\stocksharp_stocksharp\Algo\Strategies\Reporting\ExcelStrategyReport.cs,Generate,The following statement contains a magic number: using (var worker = hasTemplate ? new ExcelWorker() : new ExcelWorker(Template))  			{  				foreach (var strategy in Strategies)  				{  					if (Template.IsEmpty())  					{  						worker.RenameSheet(strategy.Name);  					}  					else  					{  						if (worker.ContainsSheet(strategy.Name))  							worker.AddSheet(strategy.Name);  					}    					worker  						.SetCell(0' 0' LocalizedStrings.Str1331)    						.SetCell(0' 1' LocalizedStrings.Security + ":")  						.SetCell(1' 1' strategy.Security != null ? strategy.Security.Id : string.Empty)    						.SetCell(0' 2' LocalizedStrings.Portfolio + ":")  						.SetCell(1' 2' strategy.Portfolio != null ? strategy.Portfolio.Name : string.Empty)    						.SetCell(0' 3' LocalizedStrings.Str1334)  						.SetCell(1' 3' Format(strategy.TotalWorkingTime))    						.SetCell(0' 4' LocalizedStrings.Str1335)  						//.SetCell(1' 4' FormatTime(base.Strategy.TotalCPUTime))    						.SetCell(0' 5' LocalizedStrings.Str862 + ":")  						.SetCell(1' 5' strategy.Position)    						.SetCell(0' 6' LocalizedStrings.PnL + ":")  						.SetCell(1' 6' strategy.PnL)    						.SetCell(0' 7' LocalizedStrings.Str159 + ":")  						.SetCell(1' 7' strategy.Commission)    						.SetCell(0' 8' LocalizedStrings.Str163 + ":")  						.SetCell(1' 8' strategy.Slippage)    						.SetCell(0' 9' LocalizedStrings.Str161 + ":")  						.SetCell(1' 9' Format(strategy.Latency));    					var rowIndex = 11;    					foreach (var parameter in strategy.StatisticManager.Parameters.SyncGet(c => c.ToArray()))  					{  						var value = parameter.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' parameter.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					rowIndex += 2;  					worker.SetCell(0' rowIndex' LocalizedStrings.Str1340);  					rowIndex++;    					foreach (var strategyParam in strategy.Parameters.CachedValues)  					{  						var value = strategyParam.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' strategyParam.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					//rowIndex += 2;  					//worker.SetCell(0' rowIndex' "Комиссия по типам:");  					//rowIndex++;    					//foreach (var group in Strategy.CommissionManager.Rules.SyncGet(c => c.ToArray()).GroupBy(c => c.GetType().GetDisplayName()))  					//{  					//	var commission = group.Sum(r => r.Commission);    					//	if (commission == 0)  					//		continue;    					//	worker  					//		.SetCell(0' rowIndex' group.Key)  					//		.SetCell(1' rowIndex' commission);    					//	rowIndex++;  					//}    					var columnShift = 3;    					worker  						.SetCell(columnShift + 0' 0' LocalizedStrings.Str985)    						.SetCell(columnShift + 0' 1' LocalizedStrings.Str1192).SetStyle(columnShift + 0' typeof(long))  						.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  						.SetCell(columnShift + 2' 1' LocalizedStrings.Time).SetStyle(columnShift + 2' "HH:mm:ss.fff")  						.SetCell(columnShift + 3' 1' LocalizedStrings.Price).SetStyle(columnShift + 3' typeof(decimal))  						.SetCell(columnShift + 4' 1' LocalizedStrings.Str1341).SetStyle(columnShift + 4' typeof(decimal))  						.SetCell(columnShift + 5' 1' LocalizedStrings.Volume).SetStyle(columnShift + 5' typeof(decimal))  						.SetCell(columnShift + 6' 1' LocalizedStrings.Str128)  						.SetCell(columnShift + 7' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 7' typeof(long))  						.SetCell(columnShift + 8' 1' LocalizedStrings.Str163).SetStyle(columnShift + 8' typeof(decimal))  						.SetCell(columnShift + 9' 1' LocalizedStrings.Str135)  						.SetCell(columnShift + 10' 1' LocalizedStrings.Str1342).SetStyle(columnShift + 11' typeof(decimal))  						.SetCell(columnShift + 11' 1' LocalizedStrings.Str1343).SetStyle(columnShift + 12' typeof(decimal))  						.SetCell(columnShift + 12' 1' LocalizedStrings.Str1344).SetStyle(columnShift + 13' typeof(decimal))  						.SetCell(columnShift + 13' 1' LocalizedStrings.Str1345).SetStyle(columnShift + 14' typeof(decimal))  						.SetCell(columnShift + 14' 1' LocalizedStrings.Str862).SetStyle(columnShift + 15' typeof(decimal));    					worker  						.SetConditionalFormatting(columnShift + 10' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 11' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 12' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 13' ComparisonOperator.Less' "0"' null' Colors.Red);    					var totalPnL = 0m;  					var position = 0m;    					var queues = new Dictionary<Security' PnLQueue>();    					rowIndex = 2;  					foreach (var trade in strategy.MyTrades.ToArray())  					{  						var info = strategy.PnLManager.ProcessMessage(trade.ToMessage());    						totalPnL += info.PnL;  						position += trade.GetPosition() ?? 0;    						var queue = queues.SafeAdd(trade.Trade.Security' key => new PnLQueue(key.ToSecurityId()));    						var localInfo = queue.Process(trade.ToMessage());    						worker  							.SetCell(columnShift + 0' rowIndex' trade.Trade.Id)  							.SetCell(columnShift + 1' rowIndex' trade.Order.TransactionId)  							.SetCell(columnShift + 2' rowIndex' Format(trade.Trade.Time))  							.SetCell(columnShift + 3' rowIndex' trade.Trade.Price)  							.SetCell(columnShift + 4' rowIndex' trade.Order.Price)  							.SetCell(columnShift + 5' rowIndex' trade.Trade.Volume)  							.SetCell(columnShift + 6' rowIndex' Format(trade.Order.Direction))  							.SetCell(columnShift + 7' rowIndex' trade.Order.Id)  							.SetCell(columnShift + 8' rowIndex' trade.Slippage)  							.SetCell(columnShift + 9' rowIndex' trade.Order.Comment)  							.SetCell(columnShift + 10' rowIndex' MathHelper.Round(info.PnL' Decimals))  							.SetCell(columnShift + 11' rowIndex' MathHelper.Round(localInfo.PnL' Decimals))  							.SetCell(columnShift + 12' rowIndex' MathHelper.Round(totalPnL' Decimals))  							.SetCell(columnShift + 13' rowIndex' MathHelper.Round(queue.RealizedPnL' Decimals))  							.SetCell(columnShift + 14' rowIndex' position);    						rowIndex++;  					}    					if (IncludeOrders)  					{  						columnShift += 17;    						worker  							.SetCell(columnShift + 0' 0' LocalizedStrings.Orders)    							.SetCell(columnShift + 0' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  							.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  							.SetCell(columnShift + 2' 1' LocalizedStrings.Str128)  							.SetCell(columnShift + 3' 1' LocalizedStrings.Str1346).SetStyle(columnShift + 3' "HH:mm:ss.fff")  							.SetCell(columnShift + 4' 1' LocalizedStrings.Str1347).SetStyle(columnShift + 4' "HH:mm:ss.fff")  							.SetCell(columnShift + 5' 1' LocalizedStrings.Str1348)  							.SetCell(columnShift + 6' 1' LocalizedStrings.Price).SetStyle(columnShift + 6' typeof(decimal))  							.SetCell(columnShift + 7' 1' LocalizedStrings.Str1323).SetStyle(columnShift + 7' typeof(decimal))  							.SetCell(columnShift + 8' 1' LocalizedStrings.Str1324)  							.SetCell(columnShift + 9' 1' LocalizedStrings.State)  							.SetCell(columnShift + 10' 1' LocalizedStrings.Str1325).SetStyle(columnShift + 10' typeof(decimal))  							.SetCell(columnShift + 11' 1' LocalizedStrings.Volume).SetStyle(columnShift + 11' typeof(decimal))  							.SetCell(columnShift + 12' 1' LocalizedStrings.Type)  							.SetCell(columnShift + 13' 1' LocalizedStrings.Str1326)  							.SetCell(columnShift + 14' 1' LocalizedStrings.Str1327)  							.SetCell(columnShift + 15' 1' LocalizedStrings.Str135);    						worker  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str1329)' null' Colors.Green)  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str238)' null' Colors.Red);    						rowIndex = 2;  						foreach (var order in strategy.Orders.ToArray())  						{  							worker  								.SetCell(columnShift + 0' rowIndex' order.Id)  								.SetCell(columnShift + 1' rowIndex' order.TransactionId)  								.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  								.SetCell(columnShift + 3' rowIndex' Format(order.Time))  								.SetCell(columnShift + 4' rowIndex' Format(order.LastChangeTime))  								.SetCell(columnShift + 5' rowIndex' Format(order.LastChangeTime - order.Time))  								.SetCell(columnShift + 6' rowIndex' order.Price)  								.SetCell(columnShift + 7' rowIndex' MathHelper.Round(order.GetAveragePrice(strategy.Connector)' Decimals))  								.SetCell(columnShift + 8' rowIndex' Format(order.State))  								.SetCell(columnShift + 9' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : LocalizedStrings.Str238))  								.SetCell(columnShift + 10' rowIndex' order.Balance)  								.SetCell(columnShift + 11' rowIndex' order.Volume)  								.SetCell(columnShift + 12' rowIndex' Format(order.Type))  								.SetCell(columnShift + 13' rowIndex' Format(order.LatencyRegistration))  								.SetCell(columnShift + 14' rowIndex' Format(order.LatencyCancellation))  								.SetCell(columnShift + 15' rowIndex' order.Comment);    							rowIndex++;  						}    						var stopOrders = strategy.StopOrders.ToArray();    						if (stopOrders.Length > 0)  						{  							rowIndex += 2;    							worker  								.SetCell(columnShift + 0' rowIndex - 1' LocalizedStrings.Str1351)    								.SetCell(columnShift + 0' rowIndex' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  								.SetCell(columnShift + 1' rowIndex' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  								.SetCell(columnShift + 2' rowIndex' LocalizedStrings.Str128)  								.SetCell(columnShift + 3' rowIndex' LocalizedStrings.Time).SetStyle(columnShift + 3' "HH:mm:ss.fff")  								.SetCell(columnShift + 4' rowIndex' LocalizedStrings.Price).SetStyle(columnShift + 4' typeof(decimal))  								.SetCell(columnShift + 5' rowIndex' LocalizedStrings.Str1324)  								.SetCell(columnShift + 6' rowIndex' LocalizedStrings.State)  								.SetCell(columnShift + 7' rowIndex' LocalizedStrings.Volume).SetStyle(columnShift + 7' typeof(decimal))  								.SetCell(columnShift + 8' rowIndex' LocalizedStrings.Str1326)  								.SetCell(columnShift + 9' rowIndex' LocalizedStrings.Str1327)  								//.SetCell(columnShift + 10' rowIndex' LocalizedStrings.Str1352).SetStyle(columnShift + 9' typeof(long))  								;    							var stopParams = stopOrders[0].Condition.Parameters.Keys.ToArray();    							for (var i = 0; i < stopParams.Length; i++)  								worker.SetCell(columnShift + 11 + i' rowIndex' stopParams[i]);    							foreach (var order in stopOrders)  							{  								worker  									.SetCell(columnShift + 0' rowIndex' order.Id)  									.SetCell(columnShift + 1' rowIndex' order.TransactionId)  									.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  									.SetCell(columnShift + 3' rowIndex' Format(order.Time))  									.SetCell(columnShift + 4' rowIndex' order.Price)  									.SetCell(columnShift + 5' rowIndex' Format(order.State))  									.SetCell(columnShift + 6' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : string.Empty))  									.SetCell(columnShift + 7' rowIndex' order.Volume)  									.SetCell(columnShift + 8' rowIndex' Format(order.LatencyRegistration))  									.SetCell(columnShift + 9' rowIndex' Format(order.LatencyCancellation))  									//.SetCell(columnShift + 10' rowIndex' order.DerivedOrder != null ? (object)order.DerivedOrder.Id : string.Empty)  									;    								for (var i = 0; i < stopParams.Length; i++)  									worker.SetCell(columnShift + 11 + i' rowIndex' order.Condition.Parameters[stopParams[i]] ?? string.Empty);    								rowIndex++;  							}  						}  					}  				}    				worker.Save(FileName' true);  			}
Magic Number,StockSharp.Algo.Strategies.Reporting,ExcelStrategyReport,C:\repos\stocksharp_stocksharp\Algo\Strategies\Reporting\ExcelStrategyReport.cs,Generate,The following statement contains a magic number: using (var worker = hasTemplate ? new ExcelWorker() : new ExcelWorker(Template))  			{  				foreach (var strategy in Strategies)  				{  					if (Template.IsEmpty())  					{  						worker.RenameSheet(strategy.Name);  					}  					else  					{  						if (worker.ContainsSheet(strategy.Name))  							worker.AddSheet(strategy.Name);  					}    					worker  						.SetCell(0' 0' LocalizedStrings.Str1331)    						.SetCell(0' 1' LocalizedStrings.Security + ":")  						.SetCell(1' 1' strategy.Security != null ? strategy.Security.Id : string.Empty)    						.SetCell(0' 2' LocalizedStrings.Portfolio + ":")  						.SetCell(1' 2' strategy.Portfolio != null ? strategy.Portfolio.Name : string.Empty)    						.SetCell(0' 3' LocalizedStrings.Str1334)  						.SetCell(1' 3' Format(strategy.TotalWorkingTime))    						.SetCell(0' 4' LocalizedStrings.Str1335)  						//.SetCell(1' 4' FormatTime(base.Strategy.TotalCPUTime))    						.SetCell(0' 5' LocalizedStrings.Str862 + ":")  						.SetCell(1' 5' strategy.Position)    						.SetCell(0' 6' LocalizedStrings.PnL + ":")  						.SetCell(1' 6' strategy.PnL)    						.SetCell(0' 7' LocalizedStrings.Str159 + ":")  						.SetCell(1' 7' strategy.Commission)    						.SetCell(0' 8' LocalizedStrings.Str163 + ":")  						.SetCell(1' 8' strategy.Slippage)    						.SetCell(0' 9' LocalizedStrings.Str161 + ":")  						.SetCell(1' 9' Format(strategy.Latency));    					var rowIndex = 11;    					foreach (var parameter in strategy.StatisticManager.Parameters.SyncGet(c => c.ToArray()))  					{  						var value = parameter.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' parameter.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					rowIndex += 2;  					worker.SetCell(0' rowIndex' LocalizedStrings.Str1340);  					rowIndex++;    					foreach (var strategyParam in strategy.Parameters.CachedValues)  					{  						var value = strategyParam.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' strategyParam.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					//rowIndex += 2;  					//worker.SetCell(0' rowIndex' "Комиссия по типам:");  					//rowIndex++;    					//foreach (var group in Strategy.CommissionManager.Rules.SyncGet(c => c.ToArray()).GroupBy(c => c.GetType().GetDisplayName()))  					//{  					//	var commission = group.Sum(r => r.Commission);    					//	if (commission == 0)  					//		continue;    					//	worker  					//		.SetCell(0' rowIndex' group.Key)  					//		.SetCell(1' rowIndex' commission);    					//	rowIndex++;  					//}    					var columnShift = 3;    					worker  						.SetCell(columnShift + 0' 0' LocalizedStrings.Str985)    						.SetCell(columnShift + 0' 1' LocalizedStrings.Str1192).SetStyle(columnShift + 0' typeof(long))  						.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  						.SetCell(columnShift + 2' 1' LocalizedStrings.Time).SetStyle(columnShift + 2' "HH:mm:ss.fff")  						.SetCell(columnShift + 3' 1' LocalizedStrings.Price).SetStyle(columnShift + 3' typeof(decimal))  						.SetCell(columnShift + 4' 1' LocalizedStrings.Str1341).SetStyle(columnShift + 4' typeof(decimal))  						.SetCell(columnShift + 5' 1' LocalizedStrings.Volume).SetStyle(columnShift + 5' typeof(decimal))  						.SetCell(columnShift + 6' 1' LocalizedStrings.Str128)  						.SetCell(columnShift + 7' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 7' typeof(long))  						.SetCell(columnShift + 8' 1' LocalizedStrings.Str163).SetStyle(columnShift + 8' typeof(decimal))  						.SetCell(columnShift + 9' 1' LocalizedStrings.Str135)  						.SetCell(columnShift + 10' 1' LocalizedStrings.Str1342).SetStyle(columnShift + 11' typeof(decimal))  						.SetCell(columnShift + 11' 1' LocalizedStrings.Str1343).SetStyle(columnShift + 12' typeof(decimal))  						.SetCell(columnShift + 12' 1' LocalizedStrings.Str1344).SetStyle(columnShift + 13' typeof(decimal))  						.SetCell(columnShift + 13' 1' LocalizedStrings.Str1345).SetStyle(columnShift + 14' typeof(decimal))  						.SetCell(columnShift + 14' 1' LocalizedStrings.Str862).SetStyle(columnShift + 15' typeof(decimal));    					worker  						.SetConditionalFormatting(columnShift + 10' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 11' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 12' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 13' ComparisonOperator.Less' "0"' null' Colors.Red);    					var totalPnL = 0m;  					var position = 0m;    					var queues = new Dictionary<Security' PnLQueue>();    					rowIndex = 2;  					foreach (var trade in strategy.MyTrades.ToArray())  					{  						var info = strategy.PnLManager.ProcessMessage(trade.ToMessage());    						totalPnL += info.PnL;  						position += trade.GetPosition() ?? 0;    						var queue = queues.SafeAdd(trade.Trade.Security' key => new PnLQueue(key.ToSecurityId()));    						var localInfo = queue.Process(trade.ToMessage());    						worker  							.SetCell(columnShift + 0' rowIndex' trade.Trade.Id)  							.SetCell(columnShift + 1' rowIndex' trade.Order.TransactionId)  							.SetCell(columnShift + 2' rowIndex' Format(trade.Trade.Time))  							.SetCell(columnShift + 3' rowIndex' trade.Trade.Price)  							.SetCell(columnShift + 4' rowIndex' trade.Order.Price)  							.SetCell(columnShift + 5' rowIndex' trade.Trade.Volume)  							.SetCell(columnShift + 6' rowIndex' Format(trade.Order.Direction))  							.SetCell(columnShift + 7' rowIndex' trade.Order.Id)  							.SetCell(columnShift + 8' rowIndex' trade.Slippage)  							.SetCell(columnShift + 9' rowIndex' trade.Order.Comment)  							.SetCell(columnShift + 10' rowIndex' MathHelper.Round(info.PnL' Decimals))  							.SetCell(columnShift + 11' rowIndex' MathHelper.Round(localInfo.PnL' Decimals))  							.SetCell(columnShift + 12' rowIndex' MathHelper.Round(totalPnL' Decimals))  							.SetCell(columnShift + 13' rowIndex' MathHelper.Round(queue.RealizedPnL' Decimals))  							.SetCell(columnShift + 14' rowIndex' position);    						rowIndex++;  					}    					if (IncludeOrders)  					{  						columnShift += 17;    						worker  							.SetCell(columnShift + 0' 0' LocalizedStrings.Orders)    							.SetCell(columnShift + 0' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  							.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  							.SetCell(columnShift + 2' 1' LocalizedStrings.Str128)  							.SetCell(columnShift + 3' 1' LocalizedStrings.Str1346).SetStyle(columnShift + 3' "HH:mm:ss.fff")  							.SetCell(columnShift + 4' 1' LocalizedStrings.Str1347).SetStyle(columnShift + 4' "HH:mm:ss.fff")  							.SetCell(columnShift + 5' 1' LocalizedStrings.Str1348)  							.SetCell(columnShift + 6' 1' LocalizedStrings.Price).SetStyle(columnShift + 6' typeof(decimal))  							.SetCell(columnShift + 7' 1' LocalizedStrings.Str1323).SetStyle(columnShift + 7' typeof(decimal))  							.SetCell(columnShift + 8' 1' LocalizedStrings.Str1324)  							.SetCell(columnShift + 9' 1' LocalizedStrings.State)  							.SetCell(columnShift + 10' 1' LocalizedStrings.Str1325).SetStyle(columnShift + 10' typeof(decimal))  							.SetCell(columnShift + 11' 1' LocalizedStrings.Volume).SetStyle(columnShift + 11' typeof(decimal))  							.SetCell(columnShift + 12' 1' LocalizedStrings.Type)  							.SetCell(columnShift + 13' 1' LocalizedStrings.Str1326)  							.SetCell(columnShift + 14' 1' LocalizedStrings.Str1327)  							.SetCell(columnShift + 15' 1' LocalizedStrings.Str135);    						worker  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str1329)' null' Colors.Green)  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str238)' null' Colors.Red);    						rowIndex = 2;  						foreach (var order in strategy.Orders.ToArray())  						{  							worker  								.SetCell(columnShift + 0' rowIndex' order.Id)  								.SetCell(columnShift + 1' rowIndex' order.TransactionId)  								.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  								.SetCell(columnShift + 3' rowIndex' Format(order.Time))  								.SetCell(columnShift + 4' rowIndex' Format(order.LastChangeTime))  								.SetCell(columnShift + 5' rowIndex' Format(order.LastChangeTime - order.Time))  								.SetCell(columnShift + 6' rowIndex' order.Price)  								.SetCell(columnShift + 7' rowIndex' MathHelper.Round(order.GetAveragePrice(strategy.Connector)' Decimals))  								.SetCell(columnShift + 8' rowIndex' Format(order.State))  								.SetCell(columnShift + 9' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : LocalizedStrings.Str238))  								.SetCell(columnShift + 10' rowIndex' order.Balance)  								.SetCell(columnShift + 11' rowIndex' order.Volume)  								.SetCell(columnShift + 12' rowIndex' Format(order.Type))  								.SetCell(columnShift + 13' rowIndex' Format(order.LatencyRegistration))  								.SetCell(columnShift + 14' rowIndex' Format(order.LatencyCancellation))  								.SetCell(columnShift + 15' rowIndex' order.Comment);    							rowIndex++;  						}    						var stopOrders = strategy.StopOrders.ToArray();    						if (stopOrders.Length > 0)  						{  							rowIndex += 2;    							worker  								.SetCell(columnShift + 0' rowIndex - 1' LocalizedStrings.Str1351)    								.SetCell(columnShift + 0' rowIndex' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  								.SetCell(columnShift + 1' rowIndex' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  								.SetCell(columnShift + 2' rowIndex' LocalizedStrings.Str128)  								.SetCell(columnShift + 3' rowIndex' LocalizedStrings.Time).SetStyle(columnShift + 3' "HH:mm:ss.fff")  								.SetCell(columnShift + 4' rowIndex' LocalizedStrings.Price).SetStyle(columnShift + 4' typeof(decimal))  								.SetCell(columnShift + 5' rowIndex' LocalizedStrings.Str1324)  								.SetCell(columnShift + 6' rowIndex' LocalizedStrings.State)  								.SetCell(columnShift + 7' rowIndex' LocalizedStrings.Volume).SetStyle(columnShift + 7' typeof(decimal))  								.SetCell(columnShift + 8' rowIndex' LocalizedStrings.Str1326)  								.SetCell(columnShift + 9' rowIndex' LocalizedStrings.Str1327)  								//.SetCell(columnShift + 10' rowIndex' LocalizedStrings.Str1352).SetStyle(columnShift + 9' typeof(long))  								;    							var stopParams = stopOrders[0].Condition.Parameters.Keys.ToArray();    							for (var i = 0; i < stopParams.Length; i++)  								worker.SetCell(columnShift + 11 + i' rowIndex' stopParams[i]);    							foreach (var order in stopOrders)  							{  								worker  									.SetCell(columnShift + 0' rowIndex' order.Id)  									.SetCell(columnShift + 1' rowIndex' order.TransactionId)  									.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  									.SetCell(columnShift + 3' rowIndex' Format(order.Time))  									.SetCell(columnShift + 4' rowIndex' order.Price)  									.SetCell(columnShift + 5' rowIndex' Format(order.State))  									.SetCell(columnShift + 6' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : string.Empty))  									.SetCell(columnShift + 7' rowIndex' order.Volume)  									.SetCell(columnShift + 8' rowIndex' Format(order.LatencyRegistration))  									.SetCell(columnShift + 9' rowIndex' Format(order.LatencyCancellation))  									//.SetCell(columnShift + 10' rowIndex' order.DerivedOrder != null ? (object)order.DerivedOrder.Id : string.Empty)  									;    								for (var i = 0; i < stopParams.Length; i++)  									worker.SetCell(columnShift + 11 + i' rowIndex' order.Condition.Parameters[stopParams[i]] ?? string.Empty);    								rowIndex++;  							}  						}  					}  				}    				worker.Save(FileName' true);  			}
Magic Number,StockSharp.Algo.Strategies.Reporting,ExcelStrategyReport,C:\repos\stocksharp_stocksharp\Algo\Strategies\Reporting\ExcelStrategyReport.cs,Generate,The following statement contains a magic number: using (var worker = hasTemplate ? new ExcelWorker() : new ExcelWorker(Template))  			{  				foreach (var strategy in Strategies)  				{  					if (Template.IsEmpty())  					{  						worker.RenameSheet(strategy.Name);  					}  					else  					{  						if (worker.ContainsSheet(strategy.Name))  							worker.AddSheet(strategy.Name);  					}    					worker  						.SetCell(0' 0' LocalizedStrings.Str1331)    						.SetCell(0' 1' LocalizedStrings.Security + ":")  						.SetCell(1' 1' strategy.Security != null ? strategy.Security.Id : string.Empty)    						.SetCell(0' 2' LocalizedStrings.Portfolio + ":")  						.SetCell(1' 2' strategy.Portfolio != null ? strategy.Portfolio.Name : string.Empty)    						.SetCell(0' 3' LocalizedStrings.Str1334)  						.SetCell(1' 3' Format(strategy.TotalWorkingTime))    						.SetCell(0' 4' LocalizedStrings.Str1335)  						//.SetCell(1' 4' FormatTime(base.Strategy.TotalCPUTime))    						.SetCell(0' 5' LocalizedStrings.Str862 + ":")  						.SetCell(1' 5' strategy.Position)    						.SetCell(0' 6' LocalizedStrings.PnL + ":")  						.SetCell(1' 6' strategy.PnL)    						.SetCell(0' 7' LocalizedStrings.Str159 + ":")  						.SetCell(1' 7' strategy.Commission)    						.SetCell(0' 8' LocalizedStrings.Str163 + ":")  						.SetCell(1' 8' strategy.Slippage)    						.SetCell(0' 9' LocalizedStrings.Str161 + ":")  						.SetCell(1' 9' Format(strategy.Latency));    					var rowIndex = 11;    					foreach (var parameter in strategy.StatisticManager.Parameters.SyncGet(c => c.ToArray()))  					{  						var value = parameter.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' parameter.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					rowIndex += 2;  					worker.SetCell(0' rowIndex' LocalizedStrings.Str1340);  					rowIndex++;    					foreach (var strategyParam in strategy.Parameters.CachedValues)  					{  						var value = strategyParam.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' strategyParam.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					//rowIndex += 2;  					//worker.SetCell(0' rowIndex' "Комиссия по типам:");  					//rowIndex++;    					//foreach (var group in Strategy.CommissionManager.Rules.SyncGet(c => c.ToArray()).GroupBy(c => c.GetType().GetDisplayName()))  					//{  					//	var commission = group.Sum(r => r.Commission);    					//	if (commission == 0)  					//		continue;    					//	worker  					//		.SetCell(0' rowIndex' group.Key)  					//		.SetCell(1' rowIndex' commission);    					//	rowIndex++;  					//}    					var columnShift = 3;    					worker  						.SetCell(columnShift + 0' 0' LocalizedStrings.Str985)    						.SetCell(columnShift + 0' 1' LocalizedStrings.Str1192).SetStyle(columnShift + 0' typeof(long))  						.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  						.SetCell(columnShift + 2' 1' LocalizedStrings.Time).SetStyle(columnShift + 2' "HH:mm:ss.fff")  						.SetCell(columnShift + 3' 1' LocalizedStrings.Price).SetStyle(columnShift + 3' typeof(decimal))  						.SetCell(columnShift + 4' 1' LocalizedStrings.Str1341).SetStyle(columnShift + 4' typeof(decimal))  						.SetCell(columnShift + 5' 1' LocalizedStrings.Volume).SetStyle(columnShift + 5' typeof(decimal))  						.SetCell(columnShift + 6' 1' LocalizedStrings.Str128)  						.SetCell(columnShift + 7' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 7' typeof(long))  						.SetCell(columnShift + 8' 1' LocalizedStrings.Str163).SetStyle(columnShift + 8' typeof(decimal))  						.SetCell(columnShift + 9' 1' LocalizedStrings.Str135)  						.SetCell(columnShift + 10' 1' LocalizedStrings.Str1342).SetStyle(columnShift + 11' typeof(decimal))  						.SetCell(columnShift + 11' 1' LocalizedStrings.Str1343).SetStyle(columnShift + 12' typeof(decimal))  						.SetCell(columnShift + 12' 1' LocalizedStrings.Str1344).SetStyle(columnShift + 13' typeof(decimal))  						.SetCell(columnShift + 13' 1' LocalizedStrings.Str1345).SetStyle(columnShift + 14' typeof(decimal))  						.SetCell(columnShift + 14' 1' LocalizedStrings.Str862).SetStyle(columnShift + 15' typeof(decimal));    					worker  						.SetConditionalFormatting(columnShift + 10' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 11' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 12' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 13' ComparisonOperator.Less' "0"' null' Colors.Red);    					var totalPnL = 0m;  					var position = 0m;    					var queues = new Dictionary<Security' PnLQueue>();    					rowIndex = 2;  					foreach (var trade in strategy.MyTrades.ToArray())  					{  						var info = strategy.PnLManager.ProcessMessage(trade.ToMessage());    						totalPnL += info.PnL;  						position += trade.GetPosition() ?? 0;    						var queue = queues.SafeAdd(trade.Trade.Security' key => new PnLQueue(key.ToSecurityId()));    						var localInfo = queue.Process(trade.ToMessage());    						worker  							.SetCell(columnShift + 0' rowIndex' trade.Trade.Id)  							.SetCell(columnShift + 1' rowIndex' trade.Order.TransactionId)  							.SetCell(columnShift + 2' rowIndex' Format(trade.Trade.Time))  							.SetCell(columnShift + 3' rowIndex' trade.Trade.Price)  							.SetCell(columnShift + 4' rowIndex' trade.Order.Price)  							.SetCell(columnShift + 5' rowIndex' trade.Trade.Volume)  							.SetCell(columnShift + 6' rowIndex' Format(trade.Order.Direction))  							.SetCell(columnShift + 7' rowIndex' trade.Order.Id)  							.SetCell(columnShift + 8' rowIndex' trade.Slippage)  							.SetCell(columnShift + 9' rowIndex' trade.Order.Comment)  							.SetCell(columnShift + 10' rowIndex' MathHelper.Round(info.PnL' Decimals))  							.SetCell(columnShift + 11' rowIndex' MathHelper.Round(localInfo.PnL' Decimals))  							.SetCell(columnShift + 12' rowIndex' MathHelper.Round(totalPnL' Decimals))  							.SetCell(columnShift + 13' rowIndex' MathHelper.Round(queue.RealizedPnL' Decimals))  							.SetCell(columnShift + 14' rowIndex' position);    						rowIndex++;  					}    					if (IncludeOrders)  					{  						columnShift += 17;    						worker  							.SetCell(columnShift + 0' 0' LocalizedStrings.Orders)    							.SetCell(columnShift + 0' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  							.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  							.SetCell(columnShift + 2' 1' LocalizedStrings.Str128)  							.SetCell(columnShift + 3' 1' LocalizedStrings.Str1346).SetStyle(columnShift + 3' "HH:mm:ss.fff")  							.SetCell(columnShift + 4' 1' LocalizedStrings.Str1347).SetStyle(columnShift + 4' "HH:mm:ss.fff")  							.SetCell(columnShift + 5' 1' LocalizedStrings.Str1348)  							.SetCell(columnShift + 6' 1' LocalizedStrings.Price).SetStyle(columnShift + 6' typeof(decimal))  							.SetCell(columnShift + 7' 1' LocalizedStrings.Str1323).SetStyle(columnShift + 7' typeof(decimal))  							.SetCell(columnShift + 8' 1' LocalizedStrings.Str1324)  							.SetCell(columnShift + 9' 1' LocalizedStrings.State)  							.SetCell(columnShift + 10' 1' LocalizedStrings.Str1325).SetStyle(columnShift + 10' typeof(decimal))  							.SetCell(columnShift + 11' 1' LocalizedStrings.Volume).SetStyle(columnShift + 11' typeof(decimal))  							.SetCell(columnShift + 12' 1' LocalizedStrings.Type)  							.SetCell(columnShift + 13' 1' LocalizedStrings.Str1326)  							.SetCell(columnShift + 14' 1' LocalizedStrings.Str1327)  							.SetCell(columnShift + 15' 1' LocalizedStrings.Str135);    						worker  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str1329)' null' Colors.Green)  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str238)' null' Colors.Red);    						rowIndex = 2;  						foreach (var order in strategy.Orders.ToArray())  						{  							worker  								.SetCell(columnShift + 0' rowIndex' order.Id)  								.SetCell(columnShift + 1' rowIndex' order.TransactionId)  								.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  								.SetCell(columnShift + 3' rowIndex' Format(order.Time))  								.SetCell(columnShift + 4' rowIndex' Format(order.LastChangeTime))  								.SetCell(columnShift + 5' rowIndex' Format(order.LastChangeTime - order.Time))  								.SetCell(columnShift + 6' rowIndex' order.Price)  								.SetCell(columnShift + 7' rowIndex' MathHelper.Round(order.GetAveragePrice(strategy.Connector)' Decimals))  								.SetCell(columnShift + 8' rowIndex' Format(order.State))  								.SetCell(columnShift + 9' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : LocalizedStrings.Str238))  								.SetCell(columnShift + 10' rowIndex' order.Balance)  								.SetCell(columnShift + 11' rowIndex' order.Volume)  								.SetCell(columnShift + 12' rowIndex' Format(order.Type))  								.SetCell(columnShift + 13' rowIndex' Format(order.LatencyRegistration))  								.SetCell(columnShift + 14' rowIndex' Format(order.LatencyCancellation))  								.SetCell(columnShift + 15' rowIndex' order.Comment);    							rowIndex++;  						}    						var stopOrders = strategy.StopOrders.ToArray();    						if (stopOrders.Length > 0)  						{  							rowIndex += 2;    							worker  								.SetCell(columnShift + 0' rowIndex - 1' LocalizedStrings.Str1351)    								.SetCell(columnShift + 0' rowIndex' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  								.SetCell(columnShift + 1' rowIndex' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  								.SetCell(columnShift + 2' rowIndex' LocalizedStrings.Str128)  								.SetCell(columnShift + 3' rowIndex' LocalizedStrings.Time).SetStyle(columnShift + 3' "HH:mm:ss.fff")  								.SetCell(columnShift + 4' rowIndex' LocalizedStrings.Price).SetStyle(columnShift + 4' typeof(decimal))  								.SetCell(columnShift + 5' rowIndex' LocalizedStrings.Str1324)  								.SetCell(columnShift + 6' rowIndex' LocalizedStrings.State)  								.SetCell(columnShift + 7' rowIndex' LocalizedStrings.Volume).SetStyle(columnShift + 7' typeof(decimal))  								.SetCell(columnShift + 8' rowIndex' LocalizedStrings.Str1326)  								.SetCell(columnShift + 9' rowIndex' LocalizedStrings.Str1327)  								//.SetCell(columnShift + 10' rowIndex' LocalizedStrings.Str1352).SetStyle(columnShift + 9' typeof(long))  								;    							var stopParams = stopOrders[0].Condition.Parameters.Keys.ToArray();    							for (var i = 0; i < stopParams.Length; i++)  								worker.SetCell(columnShift + 11 + i' rowIndex' stopParams[i]);    							foreach (var order in stopOrders)  							{  								worker  									.SetCell(columnShift + 0' rowIndex' order.Id)  									.SetCell(columnShift + 1' rowIndex' order.TransactionId)  									.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  									.SetCell(columnShift + 3' rowIndex' Format(order.Time))  									.SetCell(columnShift + 4' rowIndex' order.Price)  									.SetCell(columnShift + 5' rowIndex' Format(order.State))  									.SetCell(columnShift + 6' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : string.Empty))  									.SetCell(columnShift + 7' rowIndex' order.Volume)  									.SetCell(columnShift + 8' rowIndex' Format(order.LatencyRegistration))  									.SetCell(columnShift + 9' rowIndex' Format(order.LatencyCancellation))  									//.SetCell(columnShift + 10' rowIndex' order.DerivedOrder != null ? (object)order.DerivedOrder.Id : string.Empty)  									;    								for (var i = 0; i < stopParams.Length; i++)  									worker.SetCell(columnShift + 11 + i' rowIndex' order.Condition.Parameters[stopParams[i]] ?? string.Empty);    								rowIndex++;  							}  						}  					}  				}    				worker.Save(FileName' true);  			}
Magic Number,StockSharp.Algo.Strategies.Reporting,ExcelStrategyReport,C:\repos\stocksharp_stocksharp\Algo\Strategies\Reporting\ExcelStrategyReport.cs,Generate,The following statement contains a magic number: using (var worker = hasTemplate ? new ExcelWorker() : new ExcelWorker(Template))  			{  				foreach (var strategy in Strategies)  				{  					if (Template.IsEmpty())  					{  						worker.RenameSheet(strategy.Name);  					}  					else  					{  						if (worker.ContainsSheet(strategy.Name))  							worker.AddSheet(strategy.Name);  					}    					worker  						.SetCell(0' 0' LocalizedStrings.Str1331)    						.SetCell(0' 1' LocalizedStrings.Security + ":")  						.SetCell(1' 1' strategy.Security != null ? strategy.Security.Id : string.Empty)    						.SetCell(0' 2' LocalizedStrings.Portfolio + ":")  						.SetCell(1' 2' strategy.Portfolio != null ? strategy.Portfolio.Name : string.Empty)    						.SetCell(0' 3' LocalizedStrings.Str1334)  						.SetCell(1' 3' Format(strategy.TotalWorkingTime))    						.SetCell(0' 4' LocalizedStrings.Str1335)  						//.SetCell(1' 4' FormatTime(base.Strategy.TotalCPUTime))    						.SetCell(0' 5' LocalizedStrings.Str862 + ":")  						.SetCell(1' 5' strategy.Position)    						.SetCell(0' 6' LocalizedStrings.PnL + ":")  						.SetCell(1' 6' strategy.PnL)    						.SetCell(0' 7' LocalizedStrings.Str159 + ":")  						.SetCell(1' 7' strategy.Commission)    						.SetCell(0' 8' LocalizedStrings.Str163 + ":")  						.SetCell(1' 8' strategy.Slippage)    						.SetCell(0' 9' LocalizedStrings.Str161 + ":")  						.SetCell(1' 9' Format(strategy.Latency));    					var rowIndex = 11;    					foreach (var parameter in strategy.StatisticManager.Parameters.SyncGet(c => c.ToArray()))  					{  						var value = parameter.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' parameter.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					rowIndex += 2;  					worker.SetCell(0' rowIndex' LocalizedStrings.Str1340);  					rowIndex++;    					foreach (var strategyParam in strategy.Parameters.CachedValues)  					{  						var value = strategyParam.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' strategyParam.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					//rowIndex += 2;  					//worker.SetCell(0' rowIndex' "Комиссия по типам:");  					//rowIndex++;    					//foreach (var group in Strategy.CommissionManager.Rules.SyncGet(c => c.ToArray()).GroupBy(c => c.GetType().GetDisplayName()))  					//{  					//	var commission = group.Sum(r => r.Commission);    					//	if (commission == 0)  					//		continue;    					//	worker  					//		.SetCell(0' rowIndex' group.Key)  					//		.SetCell(1' rowIndex' commission);    					//	rowIndex++;  					//}    					var columnShift = 3;    					worker  						.SetCell(columnShift + 0' 0' LocalizedStrings.Str985)    						.SetCell(columnShift + 0' 1' LocalizedStrings.Str1192).SetStyle(columnShift + 0' typeof(long))  						.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  						.SetCell(columnShift + 2' 1' LocalizedStrings.Time).SetStyle(columnShift + 2' "HH:mm:ss.fff")  						.SetCell(columnShift + 3' 1' LocalizedStrings.Price).SetStyle(columnShift + 3' typeof(decimal))  						.SetCell(columnShift + 4' 1' LocalizedStrings.Str1341).SetStyle(columnShift + 4' typeof(decimal))  						.SetCell(columnShift + 5' 1' LocalizedStrings.Volume).SetStyle(columnShift + 5' typeof(decimal))  						.SetCell(columnShift + 6' 1' LocalizedStrings.Str128)  						.SetCell(columnShift + 7' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 7' typeof(long))  						.SetCell(columnShift + 8' 1' LocalizedStrings.Str163).SetStyle(columnShift + 8' typeof(decimal))  						.SetCell(columnShift + 9' 1' LocalizedStrings.Str135)  						.SetCell(columnShift + 10' 1' LocalizedStrings.Str1342).SetStyle(columnShift + 11' typeof(decimal))  						.SetCell(columnShift + 11' 1' LocalizedStrings.Str1343).SetStyle(columnShift + 12' typeof(decimal))  						.SetCell(columnShift + 12' 1' LocalizedStrings.Str1344).SetStyle(columnShift + 13' typeof(decimal))  						.SetCell(columnShift + 13' 1' LocalizedStrings.Str1345).SetStyle(columnShift + 14' typeof(decimal))  						.SetCell(columnShift + 14' 1' LocalizedStrings.Str862).SetStyle(columnShift + 15' typeof(decimal));    					worker  						.SetConditionalFormatting(columnShift + 10' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 11' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 12' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 13' ComparisonOperator.Less' "0"' null' Colors.Red);    					var totalPnL = 0m;  					var position = 0m;    					var queues = new Dictionary<Security' PnLQueue>();    					rowIndex = 2;  					foreach (var trade in strategy.MyTrades.ToArray())  					{  						var info = strategy.PnLManager.ProcessMessage(trade.ToMessage());    						totalPnL += info.PnL;  						position += trade.GetPosition() ?? 0;    						var queue = queues.SafeAdd(trade.Trade.Security' key => new PnLQueue(key.ToSecurityId()));    						var localInfo = queue.Process(trade.ToMessage());    						worker  							.SetCell(columnShift + 0' rowIndex' trade.Trade.Id)  							.SetCell(columnShift + 1' rowIndex' trade.Order.TransactionId)  							.SetCell(columnShift + 2' rowIndex' Format(trade.Trade.Time))  							.SetCell(columnShift + 3' rowIndex' trade.Trade.Price)  							.SetCell(columnShift + 4' rowIndex' trade.Order.Price)  							.SetCell(columnShift + 5' rowIndex' trade.Trade.Volume)  							.SetCell(columnShift + 6' rowIndex' Format(trade.Order.Direction))  							.SetCell(columnShift + 7' rowIndex' trade.Order.Id)  							.SetCell(columnShift + 8' rowIndex' trade.Slippage)  							.SetCell(columnShift + 9' rowIndex' trade.Order.Comment)  							.SetCell(columnShift + 10' rowIndex' MathHelper.Round(info.PnL' Decimals))  							.SetCell(columnShift + 11' rowIndex' MathHelper.Round(localInfo.PnL' Decimals))  							.SetCell(columnShift + 12' rowIndex' MathHelper.Round(totalPnL' Decimals))  							.SetCell(columnShift + 13' rowIndex' MathHelper.Round(queue.RealizedPnL' Decimals))  							.SetCell(columnShift + 14' rowIndex' position);    						rowIndex++;  					}    					if (IncludeOrders)  					{  						columnShift += 17;    						worker  							.SetCell(columnShift + 0' 0' LocalizedStrings.Orders)    							.SetCell(columnShift + 0' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  							.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  							.SetCell(columnShift + 2' 1' LocalizedStrings.Str128)  							.SetCell(columnShift + 3' 1' LocalizedStrings.Str1346).SetStyle(columnShift + 3' "HH:mm:ss.fff")  							.SetCell(columnShift + 4' 1' LocalizedStrings.Str1347).SetStyle(columnShift + 4' "HH:mm:ss.fff")  							.SetCell(columnShift + 5' 1' LocalizedStrings.Str1348)  							.SetCell(columnShift + 6' 1' LocalizedStrings.Price).SetStyle(columnShift + 6' typeof(decimal))  							.SetCell(columnShift + 7' 1' LocalizedStrings.Str1323).SetStyle(columnShift + 7' typeof(decimal))  							.SetCell(columnShift + 8' 1' LocalizedStrings.Str1324)  							.SetCell(columnShift + 9' 1' LocalizedStrings.State)  							.SetCell(columnShift + 10' 1' LocalizedStrings.Str1325).SetStyle(columnShift + 10' typeof(decimal))  							.SetCell(columnShift + 11' 1' LocalizedStrings.Volume).SetStyle(columnShift + 11' typeof(decimal))  							.SetCell(columnShift + 12' 1' LocalizedStrings.Type)  							.SetCell(columnShift + 13' 1' LocalizedStrings.Str1326)  							.SetCell(columnShift + 14' 1' LocalizedStrings.Str1327)  							.SetCell(columnShift + 15' 1' LocalizedStrings.Str135);    						worker  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str1329)' null' Colors.Green)  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str238)' null' Colors.Red);    						rowIndex = 2;  						foreach (var order in strategy.Orders.ToArray())  						{  							worker  								.SetCell(columnShift + 0' rowIndex' order.Id)  								.SetCell(columnShift + 1' rowIndex' order.TransactionId)  								.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  								.SetCell(columnShift + 3' rowIndex' Format(order.Time))  								.SetCell(columnShift + 4' rowIndex' Format(order.LastChangeTime))  								.SetCell(columnShift + 5' rowIndex' Format(order.LastChangeTime - order.Time))  								.SetCell(columnShift + 6' rowIndex' order.Price)  								.SetCell(columnShift + 7' rowIndex' MathHelper.Round(order.GetAveragePrice(strategy.Connector)' Decimals))  								.SetCell(columnShift + 8' rowIndex' Format(order.State))  								.SetCell(columnShift + 9' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : LocalizedStrings.Str238))  								.SetCell(columnShift + 10' rowIndex' order.Balance)  								.SetCell(columnShift + 11' rowIndex' order.Volume)  								.SetCell(columnShift + 12' rowIndex' Format(order.Type))  								.SetCell(columnShift + 13' rowIndex' Format(order.LatencyRegistration))  								.SetCell(columnShift + 14' rowIndex' Format(order.LatencyCancellation))  								.SetCell(columnShift + 15' rowIndex' order.Comment);    							rowIndex++;  						}    						var stopOrders = strategy.StopOrders.ToArray();    						if (stopOrders.Length > 0)  						{  							rowIndex += 2;    							worker  								.SetCell(columnShift + 0' rowIndex - 1' LocalizedStrings.Str1351)    								.SetCell(columnShift + 0' rowIndex' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  								.SetCell(columnShift + 1' rowIndex' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  								.SetCell(columnShift + 2' rowIndex' LocalizedStrings.Str128)  								.SetCell(columnShift + 3' rowIndex' LocalizedStrings.Time).SetStyle(columnShift + 3' "HH:mm:ss.fff")  								.SetCell(columnShift + 4' rowIndex' LocalizedStrings.Price).SetStyle(columnShift + 4' typeof(decimal))  								.SetCell(columnShift + 5' rowIndex' LocalizedStrings.Str1324)  								.SetCell(columnShift + 6' rowIndex' LocalizedStrings.State)  								.SetCell(columnShift + 7' rowIndex' LocalizedStrings.Volume).SetStyle(columnShift + 7' typeof(decimal))  								.SetCell(columnShift + 8' rowIndex' LocalizedStrings.Str1326)  								.SetCell(columnShift + 9' rowIndex' LocalizedStrings.Str1327)  								//.SetCell(columnShift + 10' rowIndex' LocalizedStrings.Str1352).SetStyle(columnShift + 9' typeof(long))  								;    							var stopParams = stopOrders[0].Condition.Parameters.Keys.ToArray();    							for (var i = 0; i < stopParams.Length; i++)  								worker.SetCell(columnShift + 11 + i' rowIndex' stopParams[i]);    							foreach (var order in stopOrders)  							{  								worker  									.SetCell(columnShift + 0' rowIndex' order.Id)  									.SetCell(columnShift + 1' rowIndex' order.TransactionId)  									.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  									.SetCell(columnShift + 3' rowIndex' Format(order.Time))  									.SetCell(columnShift + 4' rowIndex' order.Price)  									.SetCell(columnShift + 5' rowIndex' Format(order.State))  									.SetCell(columnShift + 6' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : string.Empty))  									.SetCell(columnShift + 7' rowIndex' order.Volume)  									.SetCell(columnShift + 8' rowIndex' Format(order.LatencyRegistration))  									.SetCell(columnShift + 9' rowIndex' Format(order.LatencyCancellation))  									//.SetCell(columnShift + 10' rowIndex' order.DerivedOrder != null ? (object)order.DerivedOrder.Id : string.Empty)  									;    								for (var i = 0; i < stopParams.Length; i++)  									worker.SetCell(columnShift + 11 + i' rowIndex' order.Condition.Parameters[stopParams[i]] ?? string.Empty);    								rowIndex++;  							}  						}  					}  				}    				worker.Save(FileName' true);  			}
Magic Number,StockSharp.Algo.Strategies.Reporting,ExcelStrategyReport,C:\repos\stocksharp_stocksharp\Algo\Strategies\Reporting\ExcelStrategyReport.cs,Generate,The following statement contains a magic number: using (var worker = hasTemplate ? new ExcelWorker() : new ExcelWorker(Template))  			{  				foreach (var strategy in Strategies)  				{  					if (Template.IsEmpty())  					{  						worker.RenameSheet(strategy.Name);  					}  					else  					{  						if (worker.ContainsSheet(strategy.Name))  							worker.AddSheet(strategy.Name);  					}    					worker  						.SetCell(0' 0' LocalizedStrings.Str1331)    						.SetCell(0' 1' LocalizedStrings.Security + ":")  						.SetCell(1' 1' strategy.Security != null ? strategy.Security.Id : string.Empty)    						.SetCell(0' 2' LocalizedStrings.Portfolio + ":")  						.SetCell(1' 2' strategy.Portfolio != null ? strategy.Portfolio.Name : string.Empty)    						.SetCell(0' 3' LocalizedStrings.Str1334)  						.SetCell(1' 3' Format(strategy.TotalWorkingTime))    						.SetCell(0' 4' LocalizedStrings.Str1335)  						//.SetCell(1' 4' FormatTime(base.Strategy.TotalCPUTime))    						.SetCell(0' 5' LocalizedStrings.Str862 + ":")  						.SetCell(1' 5' strategy.Position)    						.SetCell(0' 6' LocalizedStrings.PnL + ":")  						.SetCell(1' 6' strategy.PnL)    						.SetCell(0' 7' LocalizedStrings.Str159 + ":")  						.SetCell(1' 7' strategy.Commission)    						.SetCell(0' 8' LocalizedStrings.Str163 + ":")  						.SetCell(1' 8' strategy.Slippage)    						.SetCell(0' 9' LocalizedStrings.Str161 + ":")  						.SetCell(1' 9' Format(strategy.Latency));    					var rowIndex = 11;    					foreach (var parameter in strategy.StatisticManager.Parameters.SyncGet(c => c.ToArray()))  					{  						var value = parameter.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' parameter.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					rowIndex += 2;  					worker.SetCell(0' rowIndex' LocalizedStrings.Str1340);  					rowIndex++;    					foreach (var strategyParam in strategy.Parameters.CachedValues)  					{  						var value = strategyParam.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' strategyParam.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					//rowIndex += 2;  					//worker.SetCell(0' rowIndex' "Комиссия по типам:");  					//rowIndex++;    					//foreach (var group in Strategy.CommissionManager.Rules.SyncGet(c => c.ToArray()).GroupBy(c => c.GetType().GetDisplayName()))  					//{  					//	var commission = group.Sum(r => r.Commission);    					//	if (commission == 0)  					//		continue;    					//	worker  					//		.SetCell(0' rowIndex' group.Key)  					//		.SetCell(1' rowIndex' commission);    					//	rowIndex++;  					//}    					var columnShift = 3;    					worker  						.SetCell(columnShift + 0' 0' LocalizedStrings.Str985)    						.SetCell(columnShift + 0' 1' LocalizedStrings.Str1192).SetStyle(columnShift + 0' typeof(long))  						.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  						.SetCell(columnShift + 2' 1' LocalizedStrings.Time).SetStyle(columnShift + 2' "HH:mm:ss.fff")  						.SetCell(columnShift + 3' 1' LocalizedStrings.Price).SetStyle(columnShift + 3' typeof(decimal))  						.SetCell(columnShift + 4' 1' LocalizedStrings.Str1341).SetStyle(columnShift + 4' typeof(decimal))  						.SetCell(columnShift + 5' 1' LocalizedStrings.Volume).SetStyle(columnShift + 5' typeof(decimal))  						.SetCell(columnShift + 6' 1' LocalizedStrings.Str128)  						.SetCell(columnShift + 7' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 7' typeof(long))  						.SetCell(columnShift + 8' 1' LocalizedStrings.Str163).SetStyle(columnShift + 8' typeof(decimal))  						.SetCell(columnShift + 9' 1' LocalizedStrings.Str135)  						.SetCell(columnShift + 10' 1' LocalizedStrings.Str1342).SetStyle(columnShift + 11' typeof(decimal))  						.SetCell(columnShift + 11' 1' LocalizedStrings.Str1343).SetStyle(columnShift + 12' typeof(decimal))  						.SetCell(columnShift + 12' 1' LocalizedStrings.Str1344).SetStyle(columnShift + 13' typeof(decimal))  						.SetCell(columnShift + 13' 1' LocalizedStrings.Str1345).SetStyle(columnShift + 14' typeof(decimal))  						.SetCell(columnShift + 14' 1' LocalizedStrings.Str862).SetStyle(columnShift + 15' typeof(decimal));    					worker  						.SetConditionalFormatting(columnShift + 10' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 11' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 12' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 13' ComparisonOperator.Less' "0"' null' Colors.Red);    					var totalPnL = 0m;  					var position = 0m;    					var queues = new Dictionary<Security' PnLQueue>();    					rowIndex = 2;  					foreach (var trade in strategy.MyTrades.ToArray())  					{  						var info = strategy.PnLManager.ProcessMessage(trade.ToMessage());    						totalPnL += info.PnL;  						position += trade.GetPosition() ?? 0;    						var queue = queues.SafeAdd(trade.Trade.Security' key => new PnLQueue(key.ToSecurityId()));    						var localInfo = queue.Process(trade.ToMessage());    						worker  							.SetCell(columnShift + 0' rowIndex' trade.Trade.Id)  							.SetCell(columnShift + 1' rowIndex' trade.Order.TransactionId)  							.SetCell(columnShift + 2' rowIndex' Format(trade.Trade.Time))  							.SetCell(columnShift + 3' rowIndex' trade.Trade.Price)  							.SetCell(columnShift + 4' rowIndex' trade.Order.Price)  							.SetCell(columnShift + 5' rowIndex' trade.Trade.Volume)  							.SetCell(columnShift + 6' rowIndex' Format(trade.Order.Direction))  							.SetCell(columnShift + 7' rowIndex' trade.Order.Id)  							.SetCell(columnShift + 8' rowIndex' trade.Slippage)  							.SetCell(columnShift + 9' rowIndex' trade.Order.Comment)  							.SetCell(columnShift + 10' rowIndex' MathHelper.Round(info.PnL' Decimals))  							.SetCell(columnShift + 11' rowIndex' MathHelper.Round(localInfo.PnL' Decimals))  							.SetCell(columnShift + 12' rowIndex' MathHelper.Round(totalPnL' Decimals))  							.SetCell(columnShift + 13' rowIndex' MathHelper.Round(queue.RealizedPnL' Decimals))  							.SetCell(columnShift + 14' rowIndex' position);    						rowIndex++;  					}    					if (IncludeOrders)  					{  						columnShift += 17;    						worker  							.SetCell(columnShift + 0' 0' LocalizedStrings.Orders)    							.SetCell(columnShift + 0' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  							.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  							.SetCell(columnShift + 2' 1' LocalizedStrings.Str128)  							.SetCell(columnShift + 3' 1' LocalizedStrings.Str1346).SetStyle(columnShift + 3' "HH:mm:ss.fff")  							.SetCell(columnShift + 4' 1' LocalizedStrings.Str1347).SetStyle(columnShift + 4' "HH:mm:ss.fff")  							.SetCell(columnShift + 5' 1' LocalizedStrings.Str1348)  							.SetCell(columnShift + 6' 1' LocalizedStrings.Price).SetStyle(columnShift + 6' typeof(decimal))  							.SetCell(columnShift + 7' 1' LocalizedStrings.Str1323).SetStyle(columnShift + 7' typeof(decimal))  							.SetCell(columnShift + 8' 1' LocalizedStrings.Str1324)  							.SetCell(columnShift + 9' 1' LocalizedStrings.State)  							.SetCell(columnShift + 10' 1' LocalizedStrings.Str1325).SetStyle(columnShift + 10' typeof(decimal))  							.SetCell(columnShift + 11' 1' LocalizedStrings.Volume).SetStyle(columnShift + 11' typeof(decimal))  							.SetCell(columnShift + 12' 1' LocalizedStrings.Type)  							.SetCell(columnShift + 13' 1' LocalizedStrings.Str1326)  							.SetCell(columnShift + 14' 1' LocalizedStrings.Str1327)  							.SetCell(columnShift + 15' 1' LocalizedStrings.Str135);    						worker  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str1329)' null' Colors.Green)  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str238)' null' Colors.Red);    						rowIndex = 2;  						foreach (var order in strategy.Orders.ToArray())  						{  							worker  								.SetCell(columnShift + 0' rowIndex' order.Id)  								.SetCell(columnShift + 1' rowIndex' order.TransactionId)  								.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  								.SetCell(columnShift + 3' rowIndex' Format(order.Time))  								.SetCell(columnShift + 4' rowIndex' Format(order.LastChangeTime))  								.SetCell(columnShift + 5' rowIndex' Format(order.LastChangeTime - order.Time))  								.SetCell(columnShift + 6' rowIndex' order.Price)  								.SetCell(columnShift + 7' rowIndex' MathHelper.Round(order.GetAveragePrice(strategy.Connector)' Decimals))  								.SetCell(columnShift + 8' rowIndex' Format(order.State))  								.SetCell(columnShift + 9' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : LocalizedStrings.Str238))  								.SetCell(columnShift + 10' rowIndex' order.Balance)  								.SetCell(columnShift + 11' rowIndex' order.Volume)  								.SetCell(columnShift + 12' rowIndex' Format(order.Type))  								.SetCell(columnShift + 13' rowIndex' Format(order.LatencyRegistration))  								.SetCell(columnShift + 14' rowIndex' Format(order.LatencyCancellation))  								.SetCell(columnShift + 15' rowIndex' order.Comment);    							rowIndex++;  						}    						var stopOrders = strategy.StopOrders.ToArray();    						if (stopOrders.Length > 0)  						{  							rowIndex += 2;    							worker  								.SetCell(columnShift + 0' rowIndex - 1' LocalizedStrings.Str1351)    								.SetCell(columnShift + 0' rowIndex' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  								.SetCell(columnShift + 1' rowIndex' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  								.SetCell(columnShift + 2' rowIndex' LocalizedStrings.Str128)  								.SetCell(columnShift + 3' rowIndex' LocalizedStrings.Time).SetStyle(columnShift + 3' "HH:mm:ss.fff")  								.SetCell(columnShift + 4' rowIndex' LocalizedStrings.Price).SetStyle(columnShift + 4' typeof(decimal))  								.SetCell(columnShift + 5' rowIndex' LocalizedStrings.Str1324)  								.SetCell(columnShift + 6' rowIndex' LocalizedStrings.State)  								.SetCell(columnShift + 7' rowIndex' LocalizedStrings.Volume).SetStyle(columnShift + 7' typeof(decimal))  								.SetCell(columnShift + 8' rowIndex' LocalizedStrings.Str1326)  								.SetCell(columnShift + 9' rowIndex' LocalizedStrings.Str1327)  								//.SetCell(columnShift + 10' rowIndex' LocalizedStrings.Str1352).SetStyle(columnShift + 9' typeof(long))  								;    							var stopParams = stopOrders[0].Condition.Parameters.Keys.ToArray();    							for (var i = 0; i < stopParams.Length; i++)  								worker.SetCell(columnShift + 11 + i' rowIndex' stopParams[i]);    							foreach (var order in stopOrders)  							{  								worker  									.SetCell(columnShift + 0' rowIndex' order.Id)  									.SetCell(columnShift + 1' rowIndex' order.TransactionId)  									.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  									.SetCell(columnShift + 3' rowIndex' Format(order.Time))  									.SetCell(columnShift + 4' rowIndex' order.Price)  									.SetCell(columnShift + 5' rowIndex' Format(order.State))  									.SetCell(columnShift + 6' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : string.Empty))  									.SetCell(columnShift + 7' rowIndex' order.Volume)  									.SetCell(columnShift + 8' rowIndex' Format(order.LatencyRegistration))  									.SetCell(columnShift + 9' rowIndex' Format(order.LatencyCancellation))  									//.SetCell(columnShift + 10' rowIndex' order.DerivedOrder != null ? (object)order.DerivedOrder.Id : string.Empty)  									;    								for (var i = 0; i < stopParams.Length; i++)  									worker.SetCell(columnShift + 11 + i' rowIndex' order.Condition.Parameters[stopParams[i]] ?? string.Empty);    								rowIndex++;  							}  						}  					}  				}    				worker.Save(FileName' true);  			}
Magic Number,StockSharp.Algo.Strategies.Reporting,ExcelStrategyReport,C:\repos\stocksharp_stocksharp\Algo\Strategies\Reporting\ExcelStrategyReport.cs,Generate,The following statement contains a magic number: using (var worker = hasTemplate ? new ExcelWorker() : new ExcelWorker(Template))  			{  				foreach (var strategy in Strategies)  				{  					if (Template.IsEmpty())  					{  						worker.RenameSheet(strategy.Name);  					}  					else  					{  						if (worker.ContainsSheet(strategy.Name))  							worker.AddSheet(strategy.Name);  					}    					worker  						.SetCell(0' 0' LocalizedStrings.Str1331)    						.SetCell(0' 1' LocalizedStrings.Security + ":")  						.SetCell(1' 1' strategy.Security != null ? strategy.Security.Id : string.Empty)    						.SetCell(0' 2' LocalizedStrings.Portfolio + ":")  						.SetCell(1' 2' strategy.Portfolio != null ? strategy.Portfolio.Name : string.Empty)    						.SetCell(0' 3' LocalizedStrings.Str1334)  						.SetCell(1' 3' Format(strategy.TotalWorkingTime))    						.SetCell(0' 4' LocalizedStrings.Str1335)  						//.SetCell(1' 4' FormatTime(base.Strategy.TotalCPUTime))    						.SetCell(0' 5' LocalizedStrings.Str862 + ":")  						.SetCell(1' 5' strategy.Position)    						.SetCell(0' 6' LocalizedStrings.PnL + ":")  						.SetCell(1' 6' strategy.PnL)    						.SetCell(0' 7' LocalizedStrings.Str159 + ":")  						.SetCell(1' 7' strategy.Commission)    						.SetCell(0' 8' LocalizedStrings.Str163 + ":")  						.SetCell(1' 8' strategy.Slippage)    						.SetCell(0' 9' LocalizedStrings.Str161 + ":")  						.SetCell(1' 9' Format(strategy.Latency));    					var rowIndex = 11;    					foreach (var parameter in strategy.StatisticManager.Parameters.SyncGet(c => c.ToArray()))  					{  						var value = parameter.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' parameter.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					rowIndex += 2;  					worker.SetCell(0' rowIndex' LocalizedStrings.Str1340);  					rowIndex++;    					foreach (var strategyParam in strategy.Parameters.CachedValues)  					{  						var value = strategyParam.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' strategyParam.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					//rowIndex += 2;  					//worker.SetCell(0' rowIndex' "Комиссия по типам:");  					//rowIndex++;    					//foreach (var group in Strategy.CommissionManager.Rules.SyncGet(c => c.ToArray()).GroupBy(c => c.GetType().GetDisplayName()))  					//{  					//	var commission = group.Sum(r => r.Commission);    					//	if (commission == 0)  					//		continue;    					//	worker  					//		.SetCell(0' rowIndex' group.Key)  					//		.SetCell(1' rowIndex' commission);    					//	rowIndex++;  					//}    					var columnShift = 3;    					worker  						.SetCell(columnShift + 0' 0' LocalizedStrings.Str985)    						.SetCell(columnShift + 0' 1' LocalizedStrings.Str1192).SetStyle(columnShift + 0' typeof(long))  						.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  						.SetCell(columnShift + 2' 1' LocalizedStrings.Time).SetStyle(columnShift + 2' "HH:mm:ss.fff")  						.SetCell(columnShift + 3' 1' LocalizedStrings.Price).SetStyle(columnShift + 3' typeof(decimal))  						.SetCell(columnShift + 4' 1' LocalizedStrings.Str1341).SetStyle(columnShift + 4' typeof(decimal))  						.SetCell(columnShift + 5' 1' LocalizedStrings.Volume).SetStyle(columnShift + 5' typeof(decimal))  						.SetCell(columnShift + 6' 1' LocalizedStrings.Str128)  						.SetCell(columnShift + 7' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 7' typeof(long))  						.SetCell(columnShift + 8' 1' LocalizedStrings.Str163).SetStyle(columnShift + 8' typeof(decimal))  						.SetCell(columnShift + 9' 1' LocalizedStrings.Str135)  						.SetCell(columnShift + 10' 1' LocalizedStrings.Str1342).SetStyle(columnShift + 11' typeof(decimal))  						.SetCell(columnShift + 11' 1' LocalizedStrings.Str1343).SetStyle(columnShift + 12' typeof(decimal))  						.SetCell(columnShift + 12' 1' LocalizedStrings.Str1344).SetStyle(columnShift + 13' typeof(decimal))  						.SetCell(columnShift + 13' 1' LocalizedStrings.Str1345).SetStyle(columnShift + 14' typeof(decimal))  						.SetCell(columnShift + 14' 1' LocalizedStrings.Str862).SetStyle(columnShift + 15' typeof(decimal));    					worker  						.SetConditionalFormatting(columnShift + 10' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 11' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 12' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 13' ComparisonOperator.Less' "0"' null' Colors.Red);    					var totalPnL = 0m;  					var position = 0m;    					var queues = new Dictionary<Security' PnLQueue>();    					rowIndex = 2;  					foreach (var trade in strategy.MyTrades.ToArray())  					{  						var info = strategy.PnLManager.ProcessMessage(trade.ToMessage());    						totalPnL += info.PnL;  						position += trade.GetPosition() ?? 0;    						var queue = queues.SafeAdd(trade.Trade.Security' key => new PnLQueue(key.ToSecurityId()));    						var localInfo = queue.Process(trade.ToMessage());    						worker  							.SetCell(columnShift + 0' rowIndex' trade.Trade.Id)  							.SetCell(columnShift + 1' rowIndex' trade.Order.TransactionId)  							.SetCell(columnShift + 2' rowIndex' Format(trade.Trade.Time))  							.SetCell(columnShift + 3' rowIndex' trade.Trade.Price)  							.SetCell(columnShift + 4' rowIndex' trade.Order.Price)  							.SetCell(columnShift + 5' rowIndex' trade.Trade.Volume)  							.SetCell(columnShift + 6' rowIndex' Format(trade.Order.Direction))  							.SetCell(columnShift + 7' rowIndex' trade.Order.Id)  							.SetCell(columnShift + 8' rowIndex' trade.Slippage)  							.SetCell(columnShift + 9' rowIndex' trade.Order.Comment)  							.SetCell(columnShift + 10' rowIndex' MathHelper.Round(info.PnL' Decimals))  							.SetCell(columnShift + 11' rowIndex' MathHelper.Round(localInfo.PnL' Decimals))  							.SetCell(columnShift + 12' rowIndex' MathHelper.Round(totalPnL' Decimals))  							.SetCell(columnShift + 13' rowIndex' MathHelper.Round(queue.RealizedPnL' Decimals))  							.SetCell(columnShift + 14' rowIndex' position);    						rowIndex++;  					}    					if (IncludeOrders)  					{  						columnShift += 17;    						worker  							.SetCell(columnShift + 0' 0' LocalizedStrings.Orders)    							.SetCell(columnShift + 0' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  							.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  							.SetCell(columnShift + 2' 1' LocalizedStrings.Str128)  							.SetCell(columnShift + 3' 1' LocalizedStrings.Str1346).SetStyle(columnShift + 3' "HH:mm:ss.fff")  							.SetCell(columnShift + 4' 1' LocalizedStrings.Str1347).SetStyle(columnShift + 4' "HH:mm:ss.fff")  							.SetCell(columnShift + 5' 1' LocalizedStrings.Str1348)  							.SetCell(columnShift + 6' 1' LocalizedStrings.Price).SetStyle(columnShift + 6' typeof(decimal))  							.SetCell(columnShift + 7' 1' LocalizedStrings.Str1323).SetStyle(columnShift + 7' typeof(decimal))  							.SetCell(columnShift + 8' 1' LocalizedStrings.Str1324)  							.SetCell(columnShift + 9' 1' LocalizedStrings.State)  							.SetCell(columnShift + 10' 1' LocalizedStrings.Str1325).SetStyle(columnShift + 10' typeof(decimal))  							.SetCell(columnShift + 11' 1' LocalizedStrings.Volume).SetStyle(columnShift + 11' typeof(decimal))  							.SetCell(columnShift + 12' 1' LocalizedStrings.Type)  							.SetCell(columnShift + 13' 1' LocalizedStrings.Str1326)  							.SetCell(columnShift + 14' 1' LocalizedStrings.Str1327)  							.SetCell(columnShift + 15' 1' LocalizedStrings.Str135);    						worker  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str1329)' null' Colors.Green)  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str238)' null' Colors.Red);    						rowIndex = 2;  						foreach (var order in strategy.Orders.ToArray())  						{  							worker  								.SetCell(columnShift + 0' rowIndex' order.Id)  								.SetCell(columnShift + 1' rowIndex' order.TransactionId)  								.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  								.SetCell(columnShift + 3' rowIndex' Format(order.Time))  								.SetCell(columnShift + 4' rowIndex' Format(order.LastChangeTime))  								.SetCell(columnShift + 5' rowIndex' Format(order.LastChangeTime - order.Time))  								.SetCell(columnShift + 6' rowIndex' order.Price)  								.SetCell(columnShift + 7' rowIndex' MathHelper.Round(order.GetAveragePrice(strategy.Connector)' Decimals))  								.SetCell(columnShift + 8' rowIndex' Format(order.State))  								.SetCell(columnShift + 9' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : LocalizedStrings.Str238))  								.SetCell(columnShift + 10' rowIndex' order.Balance)  								.SetCell(columnShift + 11' rowIndex' order.Volume)  								.SetCell(columnShift + 12' rowIndex' Format(order.Type))  								.SetCell(columnShift + 13' rowIndex' Format(order.LatencyRegistration))  								.SetCell(columnShift + 14' rowIndex' Format(order.LatencyCancellation))  								.SetCell(columnShift + 15' rowIndex' order.Comment);    							rowIndex++;  						}    						var stopOrders = strategy.StopOrders.ToArray();    						if (stopOrders.Length > 0)  						{  							rowIndex += 2;    							worker  								.SetCell(columnShift + 0' rowIndex - 1' LocalizedStrings.Str1351)    								.SetCell(columnShift + 0' rowIndex' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  								.SetCell(columnShift + 1' rowIndex' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  								.SetCell(columnShift + 2' rowIndex' LocalizedStrings.Str128)  								.SetCell(columnShift + 3' rowIndex' LocalizedStrings.Time).SetStyle(columnShift + 3' "HH:mm:ss.fff")  								.SetCell(columnShift + 4' rowIndex' LocalizedStrings.Price).SetStyle(columnShift + 4' typeof(decimal))  								.SetCell(columnShift + 5' rowIndex' LocalizedStrings.Str1324)  								.SetCell(columnShift + 6' rowIndex' LocalizedStrings.State)  								.SetCell(columnShift + 7' rowIndex' LocalizedStrings.Volume).SetStyle(columnShift + 7' typeof(decimal))  								.SetCell(columnShift + 8' rowIndex' LocalizedStrings.Str1326)  								.SetCell(columnShift + 9' rowIndex' LocalizedStrings.Str1327)  								//.SetCell(columnShift + 10' rowIndex' LocalizedStrings.Str1352).SetStyle(columnShift + 9' typeof(long))  								;    							var stopParams = stopOrders[0].Condition.Parameters.Keys.ToArray();    							for (var i = 0; i < stopParams.Length; i++)  								worker.SetCell(columnShift + 11 + i' rowIndex' stopParams[i]);    							foreach (var order in stopOrders)  							{  								worker  									.SetCell(columnShift + 0' rowIndex' order.Id)  									.SetCell(columnShift + 1' rowIndex' order.TransactionId)  									.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  									.SetCell(columnShift + 3' rowIndex' Format(order.Time))  									.SetCell(columnShift + 4' rowIndex' order.Price)  									.SetCell(columnShift + 5' rowIndex' Format(order.State))  									.SetCell(columnShift + 6' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : string.Empty))  									.SetCell(columnShift + 7' rowIndex' order.Volume)  									.SetCell(columnShift + 8' rowIndex' Format(order.LatencyRegistration))  									.SetCell(columnShift + 9' rowIndex' Format(order.LatencyCancellation))  									//.SetCell(columnShift + 10' rowIndex' order.DerivedOrder != null ? (object)order.DerivedOrder.Id : string.Empty)  									;    								for (var i = 0; i < stopParams.Length; i++)  									worker.SetCell(columnShift + 11 + i' rowIndex' order.Condition.Parameters[stopParams[i]] ?? string.Empty);    								rowIndex++;  							}  						}  					}  				}    				worker.Save(FileName' true);  			}
Magic Number,StockSharp.Algo.Strategies.Reporting,ExcelStrategyReport,C:\repos\stocksharp_stocksharp\Algo\Strategies\Reporting\ExcelStrategyReport.cs,Generate,The following statement contains a magic number: using (var worker = hasTemplate ? new ExcelWorker() : new ExcelWorker(Template))  			{  				foreach (var strategy in Strategies)  				{  					if (Template.IsEmpty())  					{  						worker.RenameSheet(strategy.Name);  					}  					else  					{  						if (worker.ContainsSheet(strategy.Name))  							worker.AddSheet(strategy.Name);  					}    					worker  						.SetCell(0' 0' LocalizedStrings.Str1331)    						.SetCell(0' 1' LocalizedStrings.Security + ":")  						.SetCell(1' 1' strategy.Security != null ? strategy.Security.Id : string.Empty)    						.SetCell(0' 2' LocalizedStrings.Portfolio + ":")  						.SetCell(1' 2' strategy.Portfolio != null ? strategy.Portfolio.Name : string.Empty)    						.SetCell(0' 3' LocalizedStrings.Str1334)  						.SetCell(1' 3' Format(strategy.TotalWorkingTime))    						.SetCell(0' 4' LocalizedStrings.Str1335)  						//.SetCell(1' 4' FormatTime(base.Strategy.TotalCPUTime))    						.SetCell(0' 5' LocalizedStrings.Str862 + ":")  						.SetCell(1' 5' strategy.Position)    						.SetCell(0' 6' LocalizedStrings.PnL + ":")  						.SetCell(1' 6' strategy.PnL)    						.SetCell(0' 7' LocalizedStrings.Str159 + ":")  						.SetCell(1' 7' strategy.Commission)    						.SetCell(0' 8' LocalizedStrings.Str163 + ":")  						.SetCell(1' 8' strategy.Slippage)    						.SetCell(0' 9' LocalizedStrings.Str161 + ":")  						.SetCell(1' 9' Format(strategy.Latency));    					var rowIndex = 11;    					foreach (var parameter in strategy.StatisticManager.Parameters.SyncGet(c => c.ToArray()))  					{  						var value = parameter.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' parameter.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					rowIndex += 2;  					worker.SetCell(0' rowIndex' LocalizedStrings.Str1340);  					rowIndex++;    					foreach (var strategyParam in strategy.Parameters.CachedValues)  					{  						var value = strategyParam.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' strategyParam.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					//rowIndex += 2;  					//worker.SetCell(0' rowIndex' "Комиссия по типам:");  					//rowIndex++;    					//foreach (var group in Strategy.CommissionManager.Rules.SyncGet(c => c.ToArray()).GroupBy(c => c.GetType().GetDisplayName()))  					//{  					//	var commission = group.Sum(r => r.Commission);    					//	if (commission == 0)  					//		continue;    					//	worker  					//		.SetCell(0' rowIndex' group.Key)  					//		.SetCell(1' rowIndex' commission);    					//	rowIndex++;  					//}    					var columnShift = 3;    					worker  						.SetCell(columnShift + 0' 0' LocalizedStrings.Str985)    						.SetCell(columnShift + 0' 1' LocalizedStrings.Str1192).SetStyle(columnShift + 0' typeof(long))  						.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  						.SetCell(columnShift + 2' 1' LocalizedStrings.Time).SetStyle(columnShift + 2' "HH:mm:ss.fff")  						.SetCell(columnShift + 3' 1' LocalizedStrings.Price).SetStyle(columnShift + 3' typeof(decimal))  						.SetCell(columnShift + 4' 1' LocalizedStrings.Str1341).SetStyle(columnShift + 4' typeof(decimal))  						.SetCell(columnShift + 5' 1' LocalizedStrings.Volume).SetStyle(columnShift + 5' typeof(decimal))  						.SetCell(columnShift + 6' 1' LocalizedStrings.Str128)  						.SetCell(columnShift + 7' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 7' typeof(long))  						.SetCell(columnShift + 8' 1' LocalizedStrings.Str163).SetStyle(columnShift + 8' typeof(decimal))  						.SetCell(columnShift + 9' 1' LocalizedStrings.Str135)  						.SetCell(columnShift + 10' 1' LocalizedStrings.Str1342).SetStyle(columnShift + 11' typeof(decimal))  						.SetCell(columnShift + 11' 1' LocalizedStrings.Str1343).SetStyle(columnShift + 12' typeof(decimal))  						.SetCell(columnShift + 12' 1' LocalizedStrings.Str1344).SetStyle(columnShift + 13' typeof(decimal))  						.SetCell(columnShift + 13' 1' LocalizedStrings.Str1345).SetStyle(columnShift + 14' typeof(decimal))  						.SetCell(columnShift + 14' 1' LocalizedStrings.Str862).SetStyle(columnShift + 15' typeof(decimal));    					worker  						.SetConditionalFormatting(columnShift + 10' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 11' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 12' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 13' ComparisonOperator.Less' "0"' null' Colors.Red);    					var totalPnL = 0m;  					var position = 0m;    					var queues = new Dictionary<Security' PnLQueue>();    					rowIndex = 2;  					foreach (var trade in strategy.MyTrades.ToArray())  					{  						var info = strategy.PnLManager.ProcessMessage(trade.ToMessage());    						totalPnL += info.PnL;  						position += trade.GetPosition() ?? 0;    						var queue = queues.SafeAdd(trade.Trade.Security' key => new PnLQueue(key.ToSecurityId()));    						var localInfo = queue.Process(trade.ToMessage());    						worker  							.SetCell(columnShift + 0' rowIndex' trade.Trade.Id)  							.SetCell(columnShift + 1' rowIndex' trade.Order.TransactionId)  							.SetCell(columnShift + 2' rowIndex' Format(trade.Trade.Time))  							.SetCell(columnShift + 3' rowIndex' trade.Trade.Price)  							.SetCell(columnShift + 4' rowIndex' trade.Order.Price)  							.SetCell(columnShift + 5' rowIndex' trade.Trade.Volume)  							.SetCell(columnShift + 6' rowIndex' Format(trade.Order.Direction))  							.SetCell(columnShift + 7' rowIndex' trade.Order.Id)  							.SetCell(columnShift + 8' rowIndex' trade.Slippage)  							.SetCell(columnShift + 9' rowIndex' trade.Order.Comment)  							.SetCell(columnShift + 10' rowIndex' MathHelper.Round(info.PnL' Decimals))  							.SetCell(columnShift + 11' rowIndex' MathHelper.Round(localInfo.PnL' Decimals))  							.SetCell(columnShift + 12' rowIndex' MathHelper.Round(totalPnL' Decimals))  							.SetCell(columnShift + 13' rowIndex' MathHelper.Round(queue.RealizedPnL' Decimals))  							.SetCell(columnShift + 14' rowIndex' position);    						rowIndex++;  					}    					if (IncludeOrders)  					{  						columnShift += 17;    						worker  							.SetCell(columnShift + 0' 0' LocalizedStrings.Orders)    							.SetCell(columnShift + 0' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  							.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  							.SetCell(columnShift + 2' 1' LocalizedStrings.Str128)  							.SetCell(columnShift + 3' 1' LocalizedStrings.Str1346).SetStyle(columnShift + 3' "HH:mm:ss.fff")  							.SetCell(columnShift + 4' 1' LocalizedStrings.Str1347).SetStyle(columnShift + 4' "HH:mm:ss.fff")  							.SetCell(columnShift + 5' 1' LocalizedStrings.Str1348)  							.SetCell(columnShift + 6' 1' LocalizedStrings.Price).SetStyle(columnShift + 6' typeof(decimal))  							.SetCell(columnShift + 7' 1' LocalizedStrings.Str1323).SetStyle(columnShift + 7' typeof(decimal))  							.SetCell(columnShift + 8' 1' LocalizedStrings.Str1324)  							.SetCell(columnShift + 9' 1' LocalizedStrings.State)  							.SetCell(columnShift + 10' 1' LocalizedStrings.Str1325).SetStyle(columnShift + 10' typeof(decimal))  							.SetCell(columnShift + 11' 1' LocalizedStrings.Volume).SetStyle(columnShift + 11' typeof(decimal))  							.SetCell(columnShift + 12' 1' LocalizedStrings.Type)  							.SetCell(columnShift + 13' 1' LocalizedStrings.Str1326)  							.SetCell(columnShift + 14' 1' LocalizedStrings.Str1327)  							.SetCell(columnShift + 15' 1' LocalizedStrings.Str135);    						worker  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str1329)' null' Colors.Green)  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str238)' null' Colors.Red);    						rowIndex = 2;  						foreach (var order in strategy.Orders.ToArray())  						{  							worker  								.SetCell(columnShift + 0' rowIndex' order.Id)  								.SetCell(columnShift + 1' rowIndex' order.TransactionId)  								.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  								.SetCell(columnShift + 3' rowIndex' Format(order.Time))  								.SetCell(columnShift + 4' rowIndex' Format(order.LastChangeTime))  								.SetCell(columnShift + 5' rowIndex' Format(order.LastChangeTime - order.Time))  								.SetCell(columnShift + 6' rowIndex' order.Price)  								.SetCell(columnShift + 7' rowIndex' MathHelper.Round(order.GetAveragePrice(strategy.Connector)' Decimals))  								.SetCell(columnShift + 8' rowIndex' Format(order.State))  								.SetCell(columnShift + 9' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : LocalizedStrings.Str238))  								.SetCell(columnShift + 10' rowIndex' order.Balance)  								.SetCell(columnShift + 11' rowIndex' order.Volume)  								.SetCell(columnShift + 12' rowIndex' Format(order.Type))  								.SetCell(columnShift + 13' rowIndex' Format(order.LatencyRegistration))  								.SetCell(columnShift + 14' rowIndex' Format(order.LatencyCancellation))  								.SetCell(columnShift + 15' rowIndex' order.Comment);    							rowIndex++;  						}    						var stopOrders = strategy.StopOrders.ToArray();    						if (stopOrders.Length > 0)  						{  							rowIndex += 2;    							worker  								.SetCell(columnShift + 0' rowIndex - 1' LocalizedStrings.Str1351)    								.SetCell(columnShift + 0' rowIndex' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  								.SetCell(columnShift + 1' rowIndex' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  								.SetCell(columnShift + 2' rowIndex' LocalizedStrings.Str128)  								.SetCell(columnShift + 3' rowIndex' LocalizedStrings.Time).SetStyle(columnShift + 3' "HH:mm:ss.fff")  								.SetCell(columnShift + 4' rowIndex' LocalizedStrings.Price).SetStyle(columnShift + 4' typeof(decimal))  								.SetCell(columnShift + 5' rowIndex' LocalizedStrings.Str1324)  								.SetCell(columnShift + 6' rowIndex' LocalizedStrings.State)  								.SetCell(columnShift + 7' rowIndex' LocalizedStrings.Volume).SetStyle(columnShift + 7' typeof(decimal))  								.SetCell(columnShift + 8' rowIndex' LocalizedStrings.Str1326)  								.SetCell(columnShift + 9' rowIndex' LocalizedStrings.Str1327)  								//.SetCell(columnShift + 10' rowIndex' LocalizedStrings.Str1352).SetStyle(columnShift + 9' typeof(long))  								;    							var stopParams = stopOrders[0].Condition.Parameters.Keys.ToArray();    							for (var i = 0; i < stopParams.Length; i++)  								worker.SetCell(columnShift + 11 + i' rowIndex' stopParams[i]);    							foreach (var order in stopOrders)  							{  								worker  									.SetCell(columnShift + 0' rowIndex' order.Id)  									.SetCell(columnShift + 1' rowIndex' order.TransactionId)  									.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  									.SetCell(columnShift + 3' rowIndex' Format(order.Time))  									.SetCell(columnShift + 4' rowIndex' order.Price)  									.SetCell(columnShift + 5' rowIndex' Format(order.State))  									.SetCell(columnShift + 6' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : string.Empty))  									.SetCell(columnShift + 7' rowIndex' order.Volume)  									.SetCell(columnShift + 8' rowIndex' Format(order.LatencyRegistration))  									.SetCell(columnShift + 9' rowIndex' Format(order.LatencyCancellation))  									//.SetCell(columnShift + 10' rowIndex' order.DerivedOrder != null ? (object)order.DerivedOrder.Id : string.Empty)  									;    								for (var i = 0; i < stopParams.Length; i++)  									worker.SetCell(columnShift + 11 + i' rowIndex' order.Condition.Parameters[stopParams[i]] ?? string.Empty);    								rowIndex++;  							}  						}  					}  				}    				worker.Save(FileName' true);  			}
Magic Number,StockSharp.Algo.Strategies.Reporting,ExcelStrategyReport,C:\repos\stocksharp_stocksharp\Algo\Strategies\Reporting\ExcelStrategyReport.cs,Generate,The following statement contains a magic number: using (var worker = hasTemplate ? new ExcelWorker() : new ExcelWorker(Template))  			{  				foreach (var strategy in Strategies)  				{  					if (Template.IsEmpty())  					{  						worker.RenameSheet(strategy.Name);  					}  					else  					{  						if (worker.ContainsSheet(strategy.Name))  							worker.AddSheet(strategy.Name);  					}    					worker  						.SetCell(0' 0' LocalizedStrings.Str1331)    						.SetCell(0' 1' LocalizedStrings.Security + ":")  						.SetCell(1' 1' strategy.Security != null ? strategy.Security.Id : string.Empty)    						.SetCell(0' 2' LocalizedStrings.Portfolio + ":")  						.SetCell(1' 2' strategy.Portfolio != null ? strategy.Portfolio.Name : string.Empty)    						.SetCell(0' 3' LocalizedStrings.Str1334)  						.SetCell(1' 3' Format(strategy.TotalWorkingTime))    						.SetCell(0' 4' LocalizedStrings.Str1335)  						//.SetCell(1' 4' FormatTime(base.Strategy.TotalCPUTime))    						.SetCell(0' 5' LocalizedStrings.Str862 + ":")  						.SetCell(1' 5' strategy.Position)    						.SetCell(0' 6' LocalizedStrings.PnL + ":")  						.SetCell(1' 6' strategy.PnL)    						.SetCell(0' 7' LocalizedStrings.Str159 + ":")  						.SetCell(1' 7' strategy.Commission)    						.SetCell(0' 8' LocalizedStrings.Str163 + ":")  						.SetCell(1' 8' strategy.Slippage)    						.SetCell(0' 9' LocalizedStrings.Str161 + ":")  						.SetCell(1' 9' Format(strategy.Latency));    					var rowIndex = 11;    					foreach (var parameter in strategy.StatisticManager.Parameters.SyncGet(c => c.ToArray()))  					{  						var value = parameter.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' parameter.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					rowIndex += 2;  					worker.SetCell(0' rowIndex' LocalizedStrings.Str1340);  					rowIndex++;    					foreach (var strategyParam in strategy.Parameters.CachedValues)  					{  						var value = strategyParam.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' strategyParam.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					//rowIndex += 2;  					//worker.SetCell(0' rowIndex' "Комиссия по типам:");  					//rowIndex++;    					//foreach (var group in Strategy.CommissionManager.Rules.SyncGet(c => c.ToArray()).GroupBy(c => c.GetType().GetDisplayName()))  					//{  					//	var commission = group.Sum(r => r.Commission);    					//	if (commission == 0)  					//		continue;    					//	worker  					//		.SetCell(0' rowIndex' group.Key)  					//		.SetCell(1' rowIndex' commission);    					//	rowIndex++;  					//}    					var columnShift = 3;    					worker  						.SetCell(columnShift + 0' 0' LocalizedStrings.Str985)    						.SetCell(columnShift + 0' 1' LocalizedStrings.Str1192).SetStyle(columnShift + 0' typeof(long))  						.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  						.SetCell(columnShift + 2' 1' LocalizedStrings.Time).SetStyle(columnShift + 2' "HH:mm:ss.fff")  						.SetCell(columnShift + 3' 1' LocalizedStrings.Price).SetStyle(columnShift + 3' typeof(decimal))  						.SetCell(columnShift + 4' 1' LocalizedStrings.Str1341).SetStyle(columnShift + 4' typeof(decimal))  						.SetCell(columnShift + 5' 1' LocalizedStrings.Volume).SetStyle(columnShift + 5' typeof(decimal))  						.SetCell(columnShift + 6' 1' LocalizedStrings.Str128)  						.SetCell(columnShift + 7' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 7' typeof(long))  						.SetCell(columnShift + 8' 1' LocalizedStrings.Str163).SetStyle(columnShift + 8' typeof(decimal))  						.SetCell(columnShift + 9' 1' LocalizedStrings.Str135)  						.SetCell(columnShift + 10' 1' LocalizedStrings.Str1342).SetStyle(columnShift + 11' typeof(decimal))  						.SetCell(columnShift + 11' 1' LocalizedStrings.Str1343).SetStyle(columnShift + 12' typeof(decimal))  						.SetCell(columnShift + 12' 1' LocalizedStrings.Str1344).SetStyle(columnShift + 13' typeof(decimal))  						.SetCell(columnShift + 13' 1' LocalizedStrings.Str1345).SetStyle(columnShift + 14' typeof(decimal))  						.SetCell(columnShift + 14' 1' LocalizedStrings.Str862).SetStyle(columnShift + 15' typeof(decimal));    					worker  						.SetConditionalFormatting(columnShift + 10' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 11' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 12' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 13' ComparisonOperator.Less' "0"' null' Colors.Red);    					var totalPnL = 0m;  					var position = 0m;    					var queues = new Dictionary<Security' PnLQueue>();    					rowIndex = 2;  					foreach (var trade in strategy.MyTrades.ToArray())  					{  						var info = strategy.PnLManager.ProcessMessage(trade.ToMessage());    						totalPnL += info.PnL;  						position += trade.GetPosition() ?? 0;    						var queue = queues.SafeAdd(trade.Trade.Security' key => new PnLQueue(key.ToSecurityId()));    						var localInfo = queue.Process(trade.ToMessage());    						worker  							.SetCell(columnShift + 0' rowIndex' trade.Trade.Id)  							.SetCell(columnShift + 1' rowIndex' trade.Order.TransactionId)  							.SetCell(columnShift + 2' rowIndex' Format(trade.Trade.Time))  							.SetCell(columnShift + 3' rowIndex' trade.Trade.Price)  							.SetCell(columnShift + 4' rowIndex' trade.Order.Price)  							.SetCell(columnShift + 5' rowIndex' trade.Trade.Volume)  							.SetCell(columnShift + 6' rowIndex' Format(trade.Order.Direction))  							.SetCell(columnShift + 7' rowIndex' trade.Order.Id)  							.SetCell(columnShift + 8' rowIndex' trade.Slippage)  							.SetCell(columnShift + 9' rowIndex' trade.Order.Comment)  							.SetCell(columnShift + 10' rowIndex' MathHelper.Round(info.PnL' Decimals))  							.SetCell(columnShift + 11' rowIndex' MathHelper.Round(localInfo.PnL' Decimals))  							.SetCell(columnShift + 12' rowIndex' MathHelper.Round(totalPnL' Decimals))  							.SetCell(columnShift + 13' rowIndex' MathHelper.Round(queue.RealizedPnL' Decimals))  							.SetCell(columnShift + 14' rowIndex' position);    						rowIndex++;  					}    					if (IncludeOrders)  					{  						columnShift += 17;    						worker  							.SetCell(columnShift + 0' 0' LocalizedStrings.Orders)    							.SetCell(columnShift + 0' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  							.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  							.SetCell(columnShift + 2' 1' LocalizedStrings.Str128)  							.SetCell(columnShift + 3' 1' LocalizedStrings.Str1346).SetStyle(columnShift + 3' "HH:mm:ss.fff")  							.SetCell(columnShift + 4' 1' LocalizedStrings.Str1347).SetStyle(columnShift + 4' "HH:mm:ss.fff")  							.SetCell(columnShift + 5' 1' LocalizedStrings.Str1348)  							.SetCell(columnShift + 6' 1' LocalizedStrings.Price).SetStyle(columnShift + 6' typeof(decimal))  							.SetCell(columnShift + 7' 1' LocalizedStrings.Str1323).SetStyle(columnShift + 7' typeof(decimal))  							.SetCell(columnShift + 8' 1' LocalizedStrings.Str1324)  							.SetCell(columnShift + 9' 1' LocalizedStrings.State)  							.SetCell(columnShift + 10' 1' LocalizedStrings.Str1325).SetStyle(columnShift + 10' typeof(decimal))  							.SetCell(columnShift + 11' 1' LocalizedStrings.Volume).SetStyle(columnShift + 11' typeof(decimal))  							.SetCell(columnShift + 12' 1' LocalizedStrings.Type)  							.SetCell(columnShift + 13' 1' LocalizedStrings.Str1326)  							.SetCell(columnShift + 14' 1' LocalizedStrings.Str1327)  							.SetCell(columnShift + 15' 1' LocalizedStrings.Str135);    						worker  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str1329)' null' Colors.Green)  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str238)' null' Colors.Red);    						rowIndex = 2;  						foreach (var order in strategy.Orders.ToArray())  						{  							worker  								.SetCell(columnShift + 0' rowIndex' order.Id)  								.SetCell(columnShift + 1' rowIndex' order.TransactionId)  								.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  								.SetCell(columnShift + 3' rowIndex' Format(order.Time))  								.SetCell(columnShift + 4' rowIndex' Format(order.LastChangeTime))  								.SetCell(columnShift + 5' rowIndex' Format(order.LastChangeTime - order.Time))  								.SetCell(columnShift + 6' rowIndex' order.Price)  								.SetCell(columnShift + 7' rowIndex' MathHelper.Round(order.GetAveragePrice(strategy.Connector)' Decimals))  								.SetCell(columnShift + 8' rowIndex' Format(order.State))  								.SetCell(columnShift + 9' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : LocalizedStrings.Str238))  								.SetCell(columnShift + 10' rowIndex' order.Balance)  								.SetCell(columnShift + 11' rowIndex' order.Volume)  								.SetCell(columnShift + 12' rowIndex' Format(order.Type))  								.SetCell(columnShift + 13' rowIndex' Format(order.LatencyRegistration))  								.SetCell(columnShift + 14' rowIndex' Format(order.LatencyCancellation))  								.SetCell(columnShift + 15' rowIndex' order.Comment);    							rowIndex++;  						}    						var stopOrders = strategy.StopOrders.ToArray();    						if (stopOrders.Length > 0)  						{  							rowIndex += 2;    							worker  								.SetCell(columnShift + 0' rowIndex - 1' LocalizedStrings.Str1351)    								.SetCell(columnShift + 0' rowIndex' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  								.SetCell(columnShift + 1' rowIndex' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  								.SetCell(columnShift + 2' rowIndex' LocalizedStrings.Str128)  								.SetCell(columnShift + 3' rowIndex' LocalizedStrings.Time).SetStyle(columnShift + 3' "HH:mm:ss.fff")  								.SetCell(columnShift + 4' rowIndex' LocalizedStrings.Price).SetStyle(columnShift + 4' typeof(decimal))  								.SetCell(columnShift + 5' rowIndex' LocalizedStrings.Str1324)  								.SetCell(columnShift + 6' rowIndex' LocalizedStrings.State)  								.SetCell(columnShift + 7' rowIndex' LocalizedStrings.Volume).SetStyle(columnShift + 7' typeof(decimal))  								.SetCell(columnShift + 8' rowIndex' LocalizedStrings.Str1326)  								.SetCell(columnShift + 9' rowIndex' LocalizedStrings.Str1327)  								//.SetCell(columnShift + 10' rowIndex' LocalizedStrings.Str1352).SetStyle(columnShift + 9' typeof(long))  								;    							var stopParams = stopOrders[0].Condition.Parameters.Keys.ToArray();    							for (var i = 0; i < stopParams.Length; i++)  								worker.SetCell(columnShift + 11 + i' rowIndex' stopParams[i]);    							foreach (var order in stopOrders)  							{  								worker  									.SetCell(columnShift + 0' rowIndex' order.Id)  									.SetCell(columnShift + 1' rowIndex' order.TransactionId)  									.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  									.SetCell(columnShift + 3' rowIndex' Format(order.Time))  									.SetCell(columnShift + 4' rowIndex' order.Price)  									.SetCell(columnShift + 5' rowIndex' Format(order.State))  									.SetCell(columnShift + 6' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : string.Empty))  									.SetCell(columnShift + 7' rowIndex' order.Volume)  									.SetCell(columnShift + 8' rowIndex' Format(order.LatencyRegistration))  									.SetCell(columnShift + 9' rowIndex' Format(order.LatencyCancellation))  									//.SetCell(columnShift + 10' rowIndex' order.DerivedOrder != null ? (object)order.DerivedOrder.Id : string.Empty)  									;    								for (var i = 0; i < stopParams.Length; i++)  									worker.SetCell(columnShift + 11 + i' rowIndex' order.Condition.Parameters[stopParams[i]] ?? string.Empty);    								rowIndex++;  							}  						}  					}  				}    				worker.Save(FileName' true);  			}
Magic Number,StockSharp.Algo.Strategies.Reporting,ExcelStrategyReport,C:\repos\stocksharp_stocksharp\Algo\Strategies\Reporting\ExcelStrategyReport.cs,Generate,The following statement contains a magic number: using (var worker = hasTemplate ? new ExcelWorker() : new ExcelWorker(Template))  			{  				foreach (var strategy in Strategies)  				{  					if (Template.IsEmpty())  					{  						worker.RenameSheet(strategy.Name);  					}  					else  					{  						if (worker.ContainsSheet(strategy.Name))  							worker.AddSheet(strategy.Name);  					}    					worker  						.SetCell(0' 0' LocalizedStrings.Str1331)    						.SetCell(0' 1' LocalizedStrings.Security + ":")  						.SetCell(1' 1' strategy.Security != null ? strategy.Security.Id : string.Empty)    						.SetCell(0' 2' LocalizedStrings.Portfolio + ":")  						.SetCell(1' 2' strategy.Portfolio != null ? strategy.Portfolio.Name : string.Empty)    						.SetCell(0' 3' LocalizedStrings.Str1334)  						.SetCell(1' 3' Format(strategy.TotalWorkingTime))    						.SetCell(0' 4' LocalizedStrings.Str1335)  						//.SetCell(1' 4' FormatTime(base.Strategy.TotalCPUTime))    						.SetCell(0' 5' LocalizedStrings.Str862 + ":")  						.SetCell(1' 5' strategy.Position)    						.SetCell(0' 6' LocalizedStrings.PnL + ":")  						.SetCell(1' 6' strategy.PnL)    						.SetCell(0' 7' LocalizedStrings.Str159 + ":")  						.SetCell(1' 7' strategy.Commission)    						.SetCell(0' 8' LocalizedStrings.Str163 + ":")  						.SetCell(1' 8' strategy.Slippage)    						.SetCell(0' 9' LocalizedStrings.Str161 + ":")  						.SetCell(1' 9' Format(strategy.Latency));    					var rowIndex = 11;    					foreach (var parameter in strategy.StatisticManager.Parameters.SyncGet(c => c.ToArray()))  					{  						var value = parameter.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' parameter.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					rowIndex += 2;  					worker.SetCell(0' rowIndex' LocalizedStrings.Str1340);  					rowIndex++;    					foreach (var strategyParam in strategy.Parameters.CachedValues)  					{  						var value = strategyParam.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' strategyParam.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					//rowIndex += 2;  					//worker.SetCell(0' rowIndex' "Комиссия по типам:");  					//rowIndex++;    					//foreach (var group in Strategy.CommissionManager.Rules.SyncGet(c => c.ToArray()).GroupBy(c => c.GetType().GetDisplayName()))  					//{  					//	var commission = group.Sum(r => r.Commission);    					//	if (commission == 0)  					//		continue;    					//	worker  					//		.SetCell(0' rowIndex' group.Key)  					//		.SetCell(1' rowIndex' commission);    					//	rowIndex++;  					//}    					var columnShift = 3;    					worker  						.SetCell(columnShift + 0' 0' LocalizedStrings.Str985)    						.SetCell(columnShift + 0' 1' LocalizedStrings.Str1192).SetStyle(columnShift + 0' typeof(long))  						.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  						.SetCell(columnShift + 2' 1' LocalizedStrings.Time).SetStyle(columnShift + 2' "HH:mm:ss.fff")  						.SetCell(columnShift + 3' 1' LocalizedStrings.Price).SetStyle(columnShift + 3' typeof(decimal))  						.SetCell(columnShift + 4' 1' LocalizedStrings.Str1341).SetStyle(columnShift + 4' typeof(decimal))  						.SetCell(columnShift + 5' 1' LocalizedStrings.Volume).SetStyle(columnShift + 5' typeof(decimal))  						.SetCell(columnShift + 6' 1' LocalizedStrings.Str128)  						.SetCell(columnShift + 7' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 7' typeof(long))  						.SetCell(columnShift + 8' 1' LocalizedStrings.Str163).SetStyle(columnShift + 8' typeof(decimal))  						.SetCell(columnShift + 9' 1' LocalizedStrings.Str135)  						.SetCell(columnShift + 10' 1' LocalizedStrings.Str1342).SetStyle(columnShift + 11' typeof(decimal))  						.SetCell(columnShift + 11' 1' LocalizedStrings.Str1343).SetStyle(columnShift + 12' typeof(decimal))  						.SetCell(columnShift + 12' 1' LocalizedStrings.Str1344).SetStyle(columnShift + 13' typeof(decimal))  						.SetCell(columnShift + 13' 1' LocalizedStrings.Str1345).SetStyle(columnShift + 14' typeof(decimal))  						.SetCell(columnShift + 14' 1' LocalizedStrings.Str862).SetStyle(columnShift + 15' typeof(decimal));    					worker  						.SetConditionalFormatting(columnShift + 10' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 11' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 12' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 13' ComparisonOperator.Less' "0"' null' Colors.Red);    					var totalPnL = 0m;  					var position = 0m;    					var queues = new Dictionary<Security' PnLQueue>();    					rowIndex = 2;  					foreach (var trade in strategy.MyTrades.ToArray())  					{  						var info = strategy.PnLManager.ProcessMessage(trade.ToMessage());    						totalPnL += info.PnL;  						position += trade.GetPosition() ?? 0;    						var queue = queues.SafeAdd(trade.Trade.Security' key => new PnLQueue(key.ToSecurityId()));    						var localInfo = queue.Process(trade.ToMessage());    						worker  							.SetCell(columnShift + 0' rowIndex' trade.Trade.Id)  							.SetCell(columnShift + 1' rowIndex' trade.Order.TransactionId)  							.SetCell(columnShift + 2' rowIndex' Format(trade.Trade.Time))  							.SetCell(columnShift + 3' rowIndex' trade.Trade.Price)  							.SetCell(columnShift + 4' rowIndex' trade.Order.Price)  							.SetCell(columnShift + 5' rowIndex' trade.Trade.Volume)  							.SetCell(columnShift + 6' rowIndex' Format(trade.Order.Direction))  							.SetCell(columnShift + 7' rowIndex' trade.Order.Id)  							.SetCell(columnShift + 8' rowIndex' trade.Slippage)  							.SetCell(columnShift + 9' rowIndex' trade.Order.Comment)  							.SetCell(columnShift + 10' rowIndex' MathHelper.Round(info.PnL' Decimals))  							.SetCell(columnShift + 11' rowIndex' MathHelper.Round(localInfo.PnL' Decimals))  							.SetCell(columnShift + 12' rowIndex' MathHelper.Round(totalPnL' Decimals))  							.SetCell(columnShift + 13' rowIndex' MathHelper.Round(queue.RealizedPnL' Decimals))  							.SetCell(columnShift + 14' rowIndex' position);    						rowIndex++;  					}    					if (IncludeOrders)  					{  						columnShift += 17;    						worker  							.SetCell(columnShift + 0' 0' LocalizedStrings.Orders)    							.SetCell(columnShift + 0' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  							.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  							.SetCell(columnShift + 2' 1' LocalizedStrings.Str128)  							.SetCell(columnShift + 3' 1' LocalizedStrings.Str1346).SetStyle(columnShift + 3' "HH:mm:ss.fff")  							.SetCell(columnShift + 4' 1' LocalizedStrings.Str1347).SetStyle(columnShift + 4' "HH:mm:ss.fff")  							.SetCell(columnShift + 5' 1' LocalizedStrings.Str1348)  							.SetCell(columnShift + 6' 1' LocalizedStrings.Price).SetStyle(columnShift + 6' typeof(decimal))  							.SetCell(columnShift + 7' 1' LocalizedStrings.Str1323).SetStyle(columnShift + 7' typeof(decimal))  							.SetCell(columnShift + 8' 1' LocalizedStrings.Str1324)  							.SetCell(columnShift + 9' 1' LocalizedStrings.State)  							.SetCell(columnShift + 10' 1' LocalizedStrings.Str1325).SetStyle(columnShift + 10' typeof(decimal))  							.SetCell(columnShift + 11' 1' LocalizedStrings.Volume).SetStyle(columnShift + 11' typeof(decimal))  							.SetCell(columnShift + 12' 1' LocalizedStrings.Type)  							.SetCell(columnShift + 13' 1' LocalizedStrings.Str1326)  							.SetCell(columnShift + 14' 1' LocalizedStrings.Str1327)  							.SetCell(columnShift + 15' 1' LocalizedStrings.Str135);    						worker  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str1329)' null' Colors.Green)  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str238)' null' Colors.Red);    						rowIndex = 2;  						foreach (var order in strategy.Orders.ToArray())  						{  							worker  								.SetCell(columnShift + 0' rowIndex' order.Id)  								.SetCell(columnShift + 1' rowIndex' order.TransactionId)  								.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  								.SetCell(columnShift + 3' rowIndex' Format(order.Time))  								.SetCell(columnShift + 4' rowIndex' Format(order.LastChangeTime))  								.SetCell(columnShift + 5' rowIndex' Format(order.LastChangeTime - order.Time))  								.SetCell(columnShift + 6' rowIndex' order.Price)  								.SetCell(columnShift + 7' rowIndex' MathHelper.Round(order.GetAveragePrice(strategy.Connector)' Decimals))  								.SetCell(columnShift + 8' rowIndex' Format(order.State))  								.SetCell(columnShift + 9' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : LocalizedStrings.Str238))  								.SetCell(columnShift + 10' rowIndex' order.Balance)  								.SetCell(columnShift + 11' rowIndex' order.Volume)  								.SetCell(columnShift + 12' rowIndex' Format(order.Type))  								.SetCell(columnShift + 13' rowIndex' Format(order.LatencyRegistration))  								.SetCell(columnShift + 14' rowIndex' Format(order.LatencyCancellation))  								.SetCell(columnShift + 15' rowIndex' order.Comment);    							rowIndex++;  						}    						var stopOrders = strategy.StopOrders.ToArray();    						if (stopOrders.Length > 0)  						{  							rowIndex += 2;    							worker  								.SetCell(columnShift + 0' rowIndex - 1' LocalizedStrings.Str1351)    								.SetCell(columnShift + 0' rowIndex' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  								.SetCell(columnShift + 1' rowIndex' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  								.SetCell(columnShift + 2' rowIndex' LocalizedStrings.Str128)  								.SetCell(columnShift + 3' rowIndex' LocalizedStrings.Time).SetStyle(columnShift + 3' "HH:mm:ss.fff")  								.SetCell(columnShift + 4' rowIndex' LocalizedStrings.Price).SetStyle(columnShift + 4' typeof(decimal))  								.SetCell(columnShift + 5' rowIndex' LocalizedStrings.Str1324)  								.SetCell(columnShift + 6' rowIndex' LocalizedStrings.State)  								.SetCell(columnShift + 7' rowIndex' LocalizedStrings.Volume).SetStyle(columnShift + 7' typeof(decimal))  								.SetCell(columnShift + 8' rowIndex' LocalizedStrings.Str1326)  								.SetCell(columnShift + 9' rowIndex' LocalizedStrings.Str1327)  								//.SetCell(columnShift + 10' rowIndex' LocalizedStrings.Str1352).SetStyle(columnShift + 9' typeof(long))  								;    							var stopParams = stopOrders[0].Condition.Parameters.Keys.ToArray();    							for (var i = 0; i < stopParams.Length; i++)  								worker.SetCell(columnShift + 11 + i' rowIndex' stopParams[i]);    							foreach (var order in stopOrders)  							{  								worker  									.SetCell(columnShift + 0' rowIndex' order.Id)  									.SetCell(columnShift + 1' rowIndex' order.TransactionId)  									.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  									.SetCell(columnShift + 3' rowIndex' Format(order.Time))  									.SetCell(columnShift + 4' rowIndex' order.Price)  									.SetCell(columnShift + 5' rowIndex' Format(order.State))  									.SetCell(columnShift + 6' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : string.Empty))  									.SetCell(columnShift + 7' rowIndex' order.Volume)  									.SetCell(columnShift + 8' rowIndex' Format(order.LatencyRegistration))  									.SetCell(columnShift + 9' rowIndex' Format(order.LatencyCancellation))  									//.SetCell(columnShift + 10' rowIndex' order.DerivedOrder != null ? (object)order.DerivedOrder.Id : string.Empty)  									;    								for (var i = 0; i < stopParams.Length; i++)  									worker.SetCell(columnShift + 11 + i' rowIndex' order.Condition.Parameters[stopParams[i]] ?? string.Empty);    								rowIndex++;  							}  						}  					}  				}    				worker.Save(FileName' true);  			}
Magic Number,StockSharp.Algo.Strategies.Reporting,ExcelStrategyReport,C:\repos\stocksharp_stocksharp\Algo\Strategies\Reporting\ExcelStrategyReport.cs,Generate,The following statement contains a magic number: using (var worker = hasTemplate ? new ExcelWorker() : new ExcelWorker(Template))  			{  				foreach (var strategy in Strategies)  				{  					if (Template.IsEmpty())  					{  						worker.RenameSheet(strategy.Name);  					}  					else  					{  						if (worker.ContainsSheet(strategy.Name))  							worker.AddSheet(strategy.Name);  					}    					worker  						.SetCell(0' 0' LocalizedStrings.Str1331)    						.SetCell(0' 1' LocalizedStrings.Security + ":")  						.SetCell(1' 1' strategy.Security != null ? strategy.Security.Id : string.Empty)    						.SetCell(0' 2' LocalizedStrings.Portfolio + ":")  						.SetCell(1' 2' strategy.Portfolio != null ? strategy.Portfolio.Name : string.Empty)    						.SetCell(0' 3' LocalizedStrings.Str1334)  						.SetCell(1' 3' Format(strategy.TotalWorkingTime))    						.SetCell(0' 4' LocalizedStrings.Str1335)  						//.SetCell(1' 4' FormatTime(base.Strategy.TotalCPUTime))    						.SetCell(0' 5' LocalizedStrings.Str862 + ":")  						.SetCell(1' 5' strategy.Position)    						.SetCell(0' 6' LocalizedStrings.PnL + ":")  						.SetCell(1' 6' strategy.PnL)    						.SetCell(0' 7' LocalizedStrings.Str159 + ":")  						.SetCell(1' 7' strategy.Commission)    						.SetCell(0' 8' LocalizedStrings.Str163 + ":")  						.SetCell(1' 8' strategy.Slippage)    						.SetCell(0' 9' LocalizedStrings.Str161 + ":")  						.SetCell(1' 9' Format(strategy.Latency));    					var rowIndex = 11;    					foreach (var parameter in strategy.StatisticManager.Parameters.SyncGet(c => c.ToArray()))  					{  						var value = parameter.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' parameter.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					rowIndex += 2;  					worker.SetCell(0' rowIndex' LocalizedStrings.Str1340);  					rowIndex++;    					foreach (var strategyParam in strategy.Parameters.CachedValues)  					{  						var value = strategyParam.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' strategyParam.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					//rowIndex += 2;  					//worker.SetCell(0' rowIndex' "Комиссия по типам:");  					//rowIndex++;    					//foreach (var group in Strategy.CommissionManager.Rules.SyncGet(c => c.ToArray()).GroupBy(c => c.GetType().GetDisplayName()))  					//{  					//	var commission = group.Sum(r => r.Commission);    					//	if (commission == 0)  					//		continue;    					//	worker  					//		.SetCell(0' rowIndex' group.Key)  					//		.SetCell(1' rowIndex' commission);    					//	rowIndex++;  					//}    					var columnShift = 3;    					worker  						.SetCell(columnShift + 0' 0' LocalizedStrings.Str985)    						.SetCell(columnShift + 0' 1' LocalizedStrings.Str1192).SetStyle(columnShift + 0' typeof(long))  						.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  						.SetCell(columnShift + 2' 1' LocalizedStrings.Time).SetStyle(columnShift + 2' "HH:mm:ss.fff")  						.SetCell(columnShift + 3' 1' LocalizedStrings.Price).SetStyle(columnShift + 3' typeof(decimal))  						.SetCell(columnShift + 4' 1' LocalizedStrings.Str1341).SetStyle(columnShift + 4' typeof(decimal))  						.SetCell(columnShift + 5' 1' LocalizedStrings.Volume).SetStyle(columnShift + 5' typeof(decimal))  						.SetCell(columnShift + 6' 1' LocalizedStrings.Str128)  						.SetCell(columnShift + 7' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 7' typeof(long))  						.SetCell(columnShift + 8' 1' LocalizedStrings.Str163).SetStyle(columnShift + 8' typeof(decimal))  						.SetCell(columnShift + 9' 1' LocalizedStrings.Str135)  						.SetCell(columnShift + 10' 1' LocalizedStrings.Str1342).SetStyle(columnShift + 11' typeof(decimal))  						.SetCell(columnShift + 11' 1' LocalizedStrings.Str1343).SetStyle(columnShift + 12' typeof(decimal))  						.SetCell(columnShift + 12' 1' LocalizedStrings.Str1344).SetStyle(columnShift + 13' typeof(decimal))  						.SetCell(columnShift + 13' 1' LocalizedStrings.Str1345).SetStyle(columnShift + 14' typeof(decimal))  						.SetCell(columnShift + 14' 1' LocalizedStrings.Str862).SetStyle(columnShift + 15' typeof(decimal));    					worker  						.SetConditionalFormatting(columnShift + 10' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 11' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 12' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 13' ComparisonOperator.Less' "0"' null' Colors.Red);    					var totalPnL = 0m;  					var position = 0m;    					var queues = new Dictionary<Security' PnLQueue>();    					rowIndex = 2;  					foreach (var trade in strategy.MyTrades.ToArray())  					{  						var info = strategy.PnLManager.ProcessMessage(trade.ToMessage());    						totalPnL += info.PnL;  						position += trade.GetPosition() ?? 0;    						var queue = queues.SafeAdd(trade.Trade.Security' key => new PnLQueue(key.ToSecurityId()));    						var localInfo = queue.Process(trade.ToMessage());    						worker  							.SetCell(columnShift + 0' rowIndex' trade.Trade.Id)  							.SetCell(columnShift + 1' rowIndex' trade.Order.TransactionId)  							.SetCell(columnShift + 2' rowIndex' Format(trade.Trade.Time))  							.SetCell(columnShift + 3' rowIndex' trade.Trade.Price)  							.SetCell(columnShift + 4' rowIndex' trade.Order.Price)  							.SetCell(columnShift + 5' rowIndex' trade.Trade.Volume)  							.SetCell(columnShift + 6' rowIndex' Format(trade.Order.Direction))  							.SetCell(columnShift + 7' rowIndex' trade.Order.Id)  							.SetCell(columnShift + 8' rowIndex' trade.Slippage)  							.SetCell(columnShift + 9' rowIndex' trade.Order.Comment)  							.SetCell(columnShift + 10' rowIndex' MathHelper.Round(info.PnL' Decimals))  							.SetCell(columnShift + 11' rowIndex' MathHelper.Round(localInfo.PnL' Decimals))  							.SetCell(columnShift + 12' rowIndex' MathHelper.Round(totalPnL' Decimals))  							.SetCell(columnShift + 13' rowIndex' MathHelper.Round(queue.RealizedPnL' Decimals))  							.SetCell(columnShift + 14' rowIndex' position);    						rowIndex++;  					}    					if (IncludeOrders)  					{  						columnShift += 17;    						worker  							.SetCell(columnShift + 0' 0' LocalizedStrings.Orders)    							.SetCell(columnShift + 0' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  							.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  							.SetCell(columnShift + 2' 1' LocalizedStrings.Str128)  							.SetCell(columnShift + 3' 1' LocalizedStrings.Str1346).SetStyle(columnShift + 3' "HH:mm:ss.fff")  							.SetCell(columnShift + 4' 1' LocalizedStrings.Str1347).SetStyle(columnShift + 4' "HH:mm:ss.fff")  							.SetCell(columnShift + 5' 1' LocalizedStrings.Str1348)  							.SetCell(columnShift + 6' 1' LocalizedStrings.Price).SetStyle(columnShift + 6' typeof(decimal))  							.SetCell(columnShift + 7' 1' LocalizedStrings.Str1323).SetStyle(columnShift + 7' typeof(decimal))  							.SetCell(columnShift + 8' 1' LocalizedStrings.Str1324)  							.SetCell(columnShift + 9' 1' LocalizedStrings.State)  							.SetCell(columnShift + 10' 1' LocalizedStrings.Str1325).SetStyle(columnShift + 10' typeof(decimal))  							.SetCell(columnShift + 11' 1' LocalizedStrings.Volume).SetStyle(columnShift + 11' typeof(decimal))  							.SetCell(columnShift + 12' 1' LocalizedStrings.Type)  							.SetCell(columnShift + 13' 1' LocalizedStrings.Str1326)  							.SetCell(columnShift + 14' 1' LocalizedStrings.Str1327)  							.SetCell(columnShift + 15' 1' LocalizedStrings.Str135);    						worker  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str1329)' null' Colors.Green)  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str238)' null' Colors.Red);    						rowIndex = 2;  						foreach (var order in strategy.Orders.ToArray())  						{  							worker  								.SetCell(columnShift + 0' rowIndex' order.Id)  								.SetCell(columnShift + 1' rowIndex' order.TransactionId)  								.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  								.SetCell(columnShift + 3' rowIndex' Format(order.Time))  								.SetCell(columnShift + 4' rowIndex' Format(order.LastChangeTime))  								.SetCell(columnShift + 5' rowIndex' Format(order.LastChangeTime - order.Time))  								.SetCell(columnShift + 6' rowIndex' order.Price)  								.SetCell(columnShift + 7' rowIndex' MathHelper.Round(order.GetAveragePrice(strategy.Connector)' Decimals))  								.SetCell(columnShift + 8' rowIndex' Format(order.State))  								.SetCell(columnShift + 9' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : LocalizedStrings.Str238))  								.SetCell(columnShift + 10' rowIndex' order.Balance)  								.SetCell(columnShift + 11' rowIndex' order.Volume)  								.SetCell(columnShift + 12' rowIndex' Format(order.Type))  								.SetCell(columnShift + 13' rowIndex' Format(order.LatencyRegistration))  								.SetCell(columnShift + 14' rowIndex' Format(order.LatencyCancellation))  								.SetCell(columnShift + 15' rowIndex' order.Comment);    							rowIndex++;  						}    						var stopOrders = strategy.StopOrders.ToArray();    						if (stopOrders.Length > 0)  						{  							rowIndex += 2;    							worker  								.SetCell(columnShift + 0' rowIndex - 1' LocalizedStrings.Str1351)    								.SetCell(columnShift + 0' rowIndex' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  								.SetCell(columnShift + 1' rowIndex' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  								.SetCell(columnShift + 2' rowIndex' LocalizedStrings.Str128)  								.SetCell(columnShift + 3' rowIndex' LocalizedStrings.Time).SetStyle(columnShift + 3' "HH:mm:ss.fff")  								.SetCell(columnShift + 4' rowIndex' LocalizedStrings.Price).SetStyle(columnShift + 4' typeof(decimal))  								.SetCell(columnShift + 5' rowIndex' LocalizedStrings.Str1324)  								.SetCell(columnShift + 6' rowIndex' LocalizedStrings.State)  								.SetCell(columnShift + 7' rowIndex' LocalizedStrings.Volume).SetStyle(columnShift + 7' typeof(decimal))  								.SetCell(columnShift + 8' rowIndex' LocalizedStrings.Str1326)  								.SetCell(columnShift + 9' rowIndex' LocalizedStrings.Str1327)  								//.SetCell(columnShift + 10' rowIndex' LocalizedStrings.Str1352).SetStyle(columnShift + 9' typeof(long))  								;    							var stopParams = stopOrders[0].Condition.Parameters.Keys.ToArray();    							for (var i = 0; i < stopParams.Length; i++)  								worker.SetCell(columnShift + 11 + i' rowIndex' stopParams[i]);    							foreach (var order in stopOrders)  							{  								worker  									.SetCell(columnShift + 0' rowIndex' order.Id)  									.SetCell(columnShift + 1' rowIndex' order.TransactionId)  									.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  									.SetCell(columnShift + 3' rowIndex' Format(order.Time))  									.SetCell(columnShift + 4' rowIndex' order.Price)  									.SetCell(columnShift + 5' rowIndex' Format(order.State))  									.SetCell(columnShift + 6' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : string.Empty))  									.SetCell(columnShift + 7' rowIndex' order.Volume)  									.SetCell(columnShift + 8' rowIndex' Format(order.LatencyRegistration))  									.SetCell(columnShift + 9' rowIndex' Format(order.LatencyCancellation))  									//.SetCell(columnShift + 10' rowIndex' order.DerivedOrder != null ? (object)order.DerivedOrder.Id : string.Empty)  									;    								for (var i = 0; i < stopParams.Length; i++)  									worker.SetCell(columnShift + 11 + i' rowIndex' order.Condition.Parameters[stopParams[i]] ?? string.Empty);    								rowIndex++;  							}  						}  					}  				}    				worker.Save(FileName' true);  			}
Magic Number,StockSharp.Algo.Strategies.Reporting,ExcelStrategyReport,C:\repos\stocksharp_stocksharp\Algo\Strategies\Reporting\ExcelStrategyReport.cs,Generate,The following statement contains a magic number: using (var worker = hasTemplate ? new ExcelWorker() : new ExcelWorker(Template))  			{  				foreach (var strategy in Strategies)  				{  					if (Template.IsEmpty())  					{  						worker.RenameSheet(strategy.Name);  					}  					else  					{  						if (worker.ContainsSheet(strategy.Name))  							worker.AddSheet(strategy.Name);  					}    					worker  						.SetCell(0' 0' LocalizedStrings.Str1331)    						.SetCell(0' 1' LocalizedStrings.Security + ":")  						.SetCell(1' 1' strategy.Security != null ? strategy.Security.Id : string.Empty)    						.SetCell(0' 2' LocalizedStrings.Portfolio + ":")  						.SetCell(1' 2' strategy.Portfolio != null ? strategy.Portfolio.Name : string.Empty)    						.SetCell(0' 3' LocalizedStrings.Str1334)  						.SetCell(1' 3' Format(strategy.TotalWorkingTime))    						.SetCell(0' 4' LocalizedStrings.Str1335)  						//.SetCell(1' 4' FormatTime(base.Strategy.TotalCPUTime))    						.SetCell(0' 5' LocalizedStrings.Str862 + ":")  						.SetCell(1' 5' strategy.Position)    						.SetCell(0' 6' LocalizedStrings.PnL + ":")  						.SetCell(1' 6' strategy.PnL)    						.SetCell(0' 7' LocalizedStrings.Str159 + ":")  						.SetCell(1' 7' strategy.Commission)    						.SetCell(0' 8' LocalizedStrings.Str163 + ":")  						.SetCell(1' 8' strategy.Slippage)    						.SetCell(0' 9' LocalizedStrings.Str161 + ":")  						.SetCell(1' 9' Format(strategy.Latency));    					var rowIndex = 11;    					foreach (var parameter in strategy.StatisticManager.Parameters.SyncGet(c => c.ToArray()))  					{  						var value = parameter.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' parameter.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					rowIndex += 2;  					worker.SetCell(0' rowIndex' LocalizedStrings.Str1340);  					rowIndex++;    					foreach (var strategyParam in strategy.Parameters.CachedValues)  					{  						var value = strategyParam.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' strategyParam.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					//rowIndex += 2;  					//worker.SetCell(0' rowIndex' "Комиссия по типам:");  					//rowIndex++;    					//foreach (var group in Strategy.CommissionManager.Rules.SyncGet(c => c.ToArray()).GroupBy(c => c.GetType().GetDisplayName()))  					//{  					//	var commission = group.Sum(r => r.Commission);    					//	if (commission == 0)  					//		continue;    					//	worker  					//		.SetCell(0' rowIndex' group.Key)  					//		.SetCell(1' rowIndex' commission);    					//	rowIndex++;  					//}    					var columnShift = 3;    					worker  						.SetCell(columnShift + 0' 0' LocalizedStrings.Str985)    						.SetCell(columnShift + 0' 1' LocalizedStrings.Str1192).SetStyle(columnShift + 0' typeof(long))  						.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  						.SetCell(columnShift + 2' 1' LocalizedStrings.Time).SetStyle(columnShift + 2' "HH:mm:ss.fff")  						.SetCell(columnShift + 3' 1' LocalizedStrings.Price).SetStyle(columnShift + 3' typeof(decimal))  						.SetCell(columnShift + 4' 1' LocalizedStrings.Str1341).SetStyle(columnShift + 4' typeof(decimal))  						.SetCell(columnShift + 5' 1' LocalizedStrings.Volume).SetStyle(columnShift + 5' typeof(decimal))  						.SetCell(columnShift + 6' 1' LocalizedStrings.Str128)  						.SetCell(columnShift + 7' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 7' typeof(long))  						.SetCell(columnShift + 8' 1' LocalizedStrings.Str163).SetStyle(columnShift + 8' typeof(decimal))  						.SetCell(columnShift + 9' 1' LocalizedStrings.Str135)  						.SetCell(columnShift + 10' 1' LocalizedStrings.Str1342).SetStyle(columnShift + 11' typeof(decimal))  						.SetCell(columnShift + 11' 1' LocalizedStrings.Str1343).SetStyle(columnShift + 12' typeof(decimal))  						.SetCell(columnShift + 12' 1' LocalizedStrings.Str1344).SetStyle(columnShift + 13' typeof(decimal))  						.SetCell(columnShift + 13' 1' LocalizedStrings.Str1345).SetStyle(columnShift + 14' typeof(decimal))  						.SetCell(columnShift + 14' 1' LocalizedStrings.Str862).SetStyle(columnShift + 15' typeof(decimal));    					worker  						.SetConditionalFormatting(columnShift + 10' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 11' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 12' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 13' ComparisonOperator.Less' "0"' null' Colors.Red);    					var totalPnL = 0m;  					var position = 0m;    					var queues = new Dictionary<Security' PnLQueue>();    					rowIndex = 2;  					foreach (var trade in strategy.MyTrades.ToArray())  					{  						var info = strategy.PnLManager.ProcessMessage(trade.ToMessage());    						totalPnL += info.PnL;  						position += trade.GetPosition() ?? 0;    						var queue = queues.SafeAdd(trade.Trade.Security' key => new PnLQueue(key.ToSecurityId()));    						var localInfo = queue.Process(trade.ToMessage());    						worker  							.SetCell(columnShift + 0' rowIndex' trade.Trade.Id)  							.SetCell(columnShift + 1' rowIndex' trade.Order.TransactionId)  							.SetCell(columnShift + 2' rowIndex' Format(trade.Trade.Time))  							.SetCell(columnShift + 3' rowIndex' trade.Trade.Price)  							.SetCell(columnShift + 4' rowIndex' trade.Order.Price)  							.SetCell(columnShift + 5' rowIndex' trade.Trade.Volume)  							.SetCell(columnShift + 6' rowIndex' Format(trade.Order.Direction))  							.SetCell(columnShift + 7' rowIndex' trade.Order.Id)  							.SetCell(columnShift + 8' rowIndex' trade.Slippage)  							.SetCell(columnShift + 9' rowIndex' trade.Order.Comment)  							.SetCell(columnShift + 10' rowIndex' MathHelper.Round(info.PnL' Decimals))  							.SetCell(columnShift + 11' rowIndex' MathHelper.Round(localInfo.PnL' Decimals))  							.SetCell(columnShift + 12' rowIndex' MathHelper.Round(totalPnL' Decimals))  							.SetCell(columnShift + 13' rowIndex' MathHelper.Round(queue.RealizedPnL' Decimals))  							.SetCell(columnShift + 14' rowIndex' position);    						rowIndex++;  					}    					if (IncludeOrders)  					{  						columnShift += 17;    						worker  							.SetCell(columnShift + 0' 0' LocalizedStrings.Orders)    							.SetCell(columnShift + 0' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  							.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  							.SetCell(columnShift + 2' 1' LocalizedStrings.Str128)  							.SetCell(columnShift + 3' 1' LocalizedStrings.Str1346).SetStyle(columnShift + 3' "HH:mm:ss.fff")  							.SetCell(columnShift + 4' 1' LocalizedStrings.Str1347).SetStyle(columnShift + 4' "HH:mm:ss.fff")  							.SetCell(columnShift + 5' 1' LocalizedStrings.Str1348)  							.SetCell(columnShift + 6' 1' LocalizedStrings.Price).SetStyle(columnShift + 6' typeof(decimal))  							.SetCell(columnShift + 7' 1' LocalizedStrings.Str1323).SetStyle(columnShift + 7' typeof(decimal))  							.SetCell(columnShift + 8' 1' LocalizedStrings.Str1324)  							.SetCell(columnShift + 9' 1' LocalizedStrings.State)  							.SetCell(columnShift + 10' 1' LocalizedStrings.Str1325).SetStyle(columnShift + 10' typeof(decimal))  							.SetCell(columnShift + 11' 1' LocalizedStrings.Volume).SetStyle(columnShift + 11' typeof(decimal))  							.SetCell(columnShift + 12' 1' LocalizedStrings.Type)  							.SetCell(columnShift + 13' 1' LocalizedStrings.Str1326)  							.SetCell(columnShift + 14' 1' LocalizedStrings.Str1327)  							.SetCell(columnShift + 15' 1' LocalizedStrings.Str135);    						worker  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str1329)' null' Colors.Green)  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str238)' null' Colors.Red);    						rowIndex = 2;  						foreach (var order in strategy.Orders.ToArray())  						{  							worker  								.SetCell(columnShift + 0' rowIndex' order.Id)  								.SetCell(columnShift + 1' rowIndex' order.TransactionId)  								.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  								.SetCell(columnShift + 3' rowIndex' Format(order.Time))  								.SetCell(columnShift + 4' rowIndex' Format(order.LastChangeTime))  								.SetCell(columnShift + 5' rowIndex' Format(order.LastChangeTime - order.Time))  								.SetCell(columnShift + 6' rowIndex' order.Price)  								.SetCell(columnShift + 7' rowIndex' MathHelper.Round(order.GetAveragePrice(strategy.Connector)' Decimals))  								.SetCell(columnShift + 8' rowIndex' Format(order.State))  								.SetCell(columnShift + 9' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : LocalizedStrings.Str238))  								.SetCell(columnShift + 10' rowIndex' order.Balance)  								.SetCell(columnShift + 11' rowIndex' order.Volume)  								.SetCell(columnShift + 12' rowIndex' Format(order.Type))  								.SetCell(columnShift + 13' rowIndex' Format(order.LatencyRegistration))  								.SetCell(columnShift + 14' rowIndex' Format(order.LatencyCancellation))  								.SetCell(columnShift + 15' rowIndex' order.Comment);    							rowIndex++;  						}    						var stopOrders = strategy.StopOrders.ToArray();    						if (stopOrders.Length > 0)  						{  							rowIndex += 2;    							worker  								.SetCell(columnShift + 0' rowIndex - 1' LocalizedStrings.Str1351)    								.SetCell(columnShift + 0' rowIndex' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  								.SetCell(columnShift + 1' rowIndex' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  								.SetCell(columnShift + 2' rowIndex' LocalizedStrings.Str128)  								.SetCell(columnShift + 3' rowIndex' LocalizedStrings.Time).SetStyle(columnShift + 3' "HH:mm:ss.fff")  								.SetCell(columnShift + 4' rowIndex' LocalizedStrings.Price).SetStyle(columnShift + 4' typeof(decimal))  								.SetCell(columnShift + 5' rowIndex' LocalizedStrings.Str1324)  								.SetCell(columnShift + 6' rowIndex' LocalizedStrings.State)  								.SetCell(columnShift + 7' rowIndex' LocalizedStrings.Volume).SetStyle(columnShift + 7' typeof(decimal))  								.SetCell(columnShift + 8' rowIndex' LocalizedStrings.Str1326)  								.SetCell(columnShift + 9' rowIndex' LocalizedStrings.Str1327)  								//.SetCell(columnShift + 10' rowIndex' LocalizedStrings.Str1352).SetStyle(columnShift + 9' typeof(long))  								;    							var stopParams = stopOrders[0].Condition.Parameters.Keys.ToArray();    							for (var i = 0; i < stopParams.Length; i++)  								worker.SetCell(columnShift + 11 + i' rowIndex' stopParams[i]);    							foreach (var order in stopOrders)  							{  								worker  									.SetCell(columnShift + 0' rowIndex' order.Id)  									.SetCell(columnShift + 1' rowIndex' order.TransactionId)  									.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  									.SetCell(columnShift + 3' rowIndex' Format(order.Time))  									.SetCell(columnShift + 4' rowIndex' order.Price)  									.SetCell(columnShift + 5' rowIndex' Format(order.State))  									.SetCell(columnShift + 6' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : string.Empty))  									.SetCell(columnShift + 7' rowIndex' order.Volume)  									.SetCell(columnShift + 8' rowIndex' Format(order.LatencyRegistration))  									.SetCell(columnShift + 9' rowIndex' Format(order.LatencyCancellation))  									//.SetCell(columnShift + 10' rowIndex' order.DerivedOrder != null ? (object)order.DerivedOrder.Id : string.Empty)  									;    								for (var i = 0; i < stopParams.Length; i++)  									worker.SetCell(columnShift + 11 + i' rowIndex' order.Condition.Parameters[stopParams[i]] ?? string.Empty);    								rowIndex++;  							}  						}  					}  				}    				worker.Save(FileName' true);  			}
Magic Number,StockSharp.Algo.Strategies.Reporting,ExcelStrategyReport,C:\repos\stocksharp_stocksharp\Algo\Strategies\Reporting\ExcelStrategyReport.cs,Generate,The following statement contains a magic number: using (var worker = hasTemplate ? new ExcelWorker() : new ExcelWorker(Template))  			{  				foreach (var strategy in Strategies)  				{  					if (Template.IsEmpty())  					{  						worker.RenameSheet(strategy.Name);  					}  					else  					{  						if (worker.ContainsSheet(strategy.Name))  							worker.AddSheet(strategy.Name);  					}    					worker  						.SetCell(0' 0' LocalizedStrings.Str1331)    						.SetCell(0' 1' LocalizedStrings.Security + ":")  						.SetCell(1' 1' strategy.Security != null ? strategy.Security.Id : string.Empty)    						.SetCell(0' 2' LocalizedStrings.Portfolio + ":")  						.SetCell(1' 2' strategy.Portfolio != null ? strategy.Portfolio.Name : string.Empty)    						.SetCell(0' 3' LocalizedStrings.Str1334)  						.SetCell(1' 3' Format(strategy.TotalWorkingTime))    						.SetCell(0' 4' LocalizedStrings.Str1335)  						//.SetCell(1' 4' FormatTime(base.Strategy.TotalCPUTime))    						.SetCell(0' 5' LocalizedStrings.Str862 + ":")  						.SetCell(1' 5' strategy.Position)    						.SetCell(0' 6' LocalizedStrings.PnL + ":")  						.SetCell(1' 6' strategy.PnL)    						.SetCell(0' 7' LocalizedStrings.Str159 + ":")  						.SetCell(1' 7' strategy.Commission)    						.SetCell(0' 8' LocalizedStrings.Str163 + ":")  						.SetCell(1' 8' strategy.Slippage)    						.SetCell(0' 9' LocalizedStrings.Str161 + ":")  						.SetCell(1' 9' Format(strategy.Latency));    					var rowIndex = 11;    					foreach (var parameter in strategy.StatisticManager.Parameters.SyncGet(c => c.ToArray()))  					{  						var value = parameter.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' parameter.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					rowIndex += 2;  					worker.SetCell(0' rowIndex' LocalizedStrings.Str1340);  					rowIndex++;    					foreach (var strategyParam in strategy.Parameters.CachedValues)  					{  						var value = strategyParam.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' strategyParam.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					//rowIndex += 2;  					//worker.SetCell(0' rowIndex' "Комиссия по типам:");  					//rowIndex++;    					//foreach (var group in Strategy.CommissionManager.Rules.SyncGet(c => c.ToArray()).GroupBy(c => c.GetType().GetDisplayName()))  					//{  					//	var commission = group.Sum(r => r.Commission);    					//	if (commission == 0)  					//		continue;    					//	worker  					//		.SetCell(0' rowIndex' group.Key)  					//		.SetCell(1' rowIndex' commission);    					//	rowIndex++;  					//}    					var columnShift = 3;    					worker  						.SetCell(columnShift + 0' 0' LocalizedStrings.Str985)    						.SetCell(columnShift + 0' 1' LocalizedStrings.Str1192).SetStyle(columnShift + 0' typeof(long))  						.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  						.SetCell(columnShift + 2' 1' LocalizedStrings.Time).SetStyle(columnShift + 2' "HH:mm:ss.fff")  						.SetCell(columnShift + 3' 1' LocalizedStrings.Price).SetStyle(columnShift + 3' typeof(decimal))  						.SetCell(columnShift + 4' 1' LocalizedStrings.Str1341).SetStyle(columnShift + 4' typeof(decimal))  						.SetCell(columnShift + 5' 1' LocalizedStrings.Volume).SetStyle(columnShift + 5' typeof(decimal))  						.SetCell(columnShift + 6' 1' LocalizedStrings.Str128)  						.SetCell(columnShift + 7' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 7' typeof(long))  						.SetCell(columnShift + 8' 1' LocalizedStrings.Str163).SetStyle(columnShift + 8' typeof(decimal))  						.SetCell(columnShift + 9' 1' LocalizedStrings.Str135)  						.SetCell(columnShift + 10' 1' LocalizedStrings.Str1342).SetStyle(columnShift + 11' typeof(decimal))  						.SetCell(columnShift + 11' 1' LocalizedStrings.Str1343).SetStyle(columnShift + 12' typeof(decimal))  						.SetCell(columnShift + 12' 1' LocalizedStrings.Str1344).SetStyle(columnShift + 13' typeof(decimal))  						.SetCell(columnShift + 13' 1' LocalizedStrings.Str1345).SetStyle(columnShift + 14' typeof(decimal))  						.SetCell(columnShift + 14' 1' LocalizedStrings.Str862).SetStyle(columnShift + 15' typeof(decimal));    					worker  						.SetConditionalFormatting(columnShift + 10' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 11' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 12' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 13' ComparisonOperator.Less' "0"' null' Colors.Red);    					var totalPnL = 0m;  					var position = 0m;    					var queues = new Dictionary<Security' PnLQueue>();    					rowIndex = 2;  					foreach (var trade in strategy.MyTrades.ToArray())  					{  						var info = strategy.PnLManager.ProcessMessage(trade.ToMessage());    						totalPnL += info.PnL;  						position += trade.GetPosition() ?? 0;    						var queue = queues.SafeAdd(trade.Trade.Security' key => new PnLQueue(key.ToSecurityId()));    						var localInfo = queue.Process(trade.ToMessage());    						worker  							.SetCell(columnShift + 0' rowIndex' trade.Trade.Id)  							.SetCell(columnShift + 1' rowIndex' trade.Order.TransactionId)  							.SetCell(columnShift + 2' rowIndex' Format(trade.Trade.Time))  							.SetCell(columnShift + 3' rowIndex' trade.Trade.Price)  							.SetCell(columnShift + 4' rowIndex' trade.Order.Price)  							.SetCell(columnShift + 5' rowIndex' trade.Trade.Volume)  							.SetCell(columnShift + 6' rowIndex' Format(trade.Order.Direction))  							.SetCell(columnShift + 7' rowIndex' trade.Order.Id)  							.SetCell(columnShift + 8' rowIndex' trade.Slippage)  							.SetCell(columnShift + 9' rowIndex' trade.Order.Comment)  							.SetCell(columnShift + 10' rowIndex' MathHelper.Round(info.PnL' Decimals))  							.SetCell(columnShift + 11' rowIndex' MathHelper.Round(localInfo.PnL' Decimals))  							.SetCell(columnShift + 12' rowIndex' MathHelper.Round(totalPnL' Decimals))  							.SetCell(columnShift + 13' rowIndex' MathHelper.Round(queue.RealizedPnL' Decimals))  							.SetCell(columnShift + 14' rowIndex' position);    						rowIndex++;  					}    					if (IncludeOrders)  					{  						columnShift += 17;    						worker  							.SetCell(columnShift + 0' 0' LocalizedStrings.Orders)    							.SetCell(columnShift + 0' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  							.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  							.SetCell(columnShift + 2' 1' LocalizedStrings.Str128)  							.SetCell(columnShift + 3' 1' LocalizedStrings.Str1346).SetStyle(columnShift + 3' "HH:mm:ss.fff")  							.SetCell(columnShift + 4' 1' LocalizedStrings.Str1347).SetStyle(columnShift + 4' "HH:mm:ss.fff")  							.SetCell(columnShift + 5' 1' LocalizedStrings.Str1348)  							.SetCell(columnShift + 6' 1' LocalizedStrings.Price).SetStyle(columnShift + 6' typeof(decimal))  							.SetCell(columnShift + 7' 1' LocalizedStrings.Str1323).SetStyle(columnShift + 7' typeof(decimal))  							.SetCell(columnShift + 8' 1' LocalizedStrings.Str1324)  							.SetCell(columnShift + 9' 1' LocalizedStrings.State)  							.SetCell(columnShift + 10' 1' LocalizedStrings.Str1325).SetStyle(columnShift + 10' typeof(decimal))  							.SetCell(columnShift + 11' 1' LocalizedStrings.Volume).SetStyle(columnShift + 11' typeof(decimal))  							.SetCell(columnShift + 12' 1' LocalizedStrings.Type)  							.SetCell(columnShift + 13' 1' LocalizedStrings.Str1326)  							.SetCell(columnShift + 14' 1' LocalizedStrings.Str1327)  							.SetCell(columnShift + 15' 1' LocalizedStrings.Str135);    						worker  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str1329)' null' Colors.Green)  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str238)' null' Colors.Red);    						rowIndex = 2;  						foreach (var order in strategy.Orders.ToArray())  						{  							worker  								.SetCell(columnShift + 0' rowIndex' order.Id)  								.SetCell(columnShift + 1' rowIndex' order.TransactionId)  								.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  								.SetCell(columnShift + 3' rowIndex' Format(order.Time))  								.SetCell(columnShift + 4' rowIndex' Format(order.LastChangeTime))  								.SetCell(columnShift + 5' rowIndex' Format(order.LastChangeTime - order.Time))  								.SetCell(columnShift + 6' rowIndex' order.Price)  								.SetCell(columnShift + 7' rowIndex' MathHelper.Round(order.GetAveragePrice(strategy.Connector)' Decimals))  								.SetCell(columnShift + 8' rowIndex' Format(order.State))  								.SetCell(columnShift + 9' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : LocalizedStrings.Str238))  								.SetCell(columnShift + 10' rowIndex' order.Balance)  								.SetCell(columnShift + 11' rowIndex' order.Volume)  								.SetCell(columnShift + 12' rowIndex' Format(order.Type))  								.SetCell(columnShift + 13' rowIndex' Format(order.LatencyRegistration))  								.SetCell(columnShift + 14' rowIndex' Format(order.LatencyCancellation))  								.SetCell(columnShift + 15' rowIndex' order.Comment);    							rowIndex++;  						}    						var stopOrders = strategy.StopOrders.ToArray();    						if (stopOrders.Length > 0)  						{  							rowIndex += 2;    							worker  								.SetCell(columnShift + 0' rowIndex - 1' LocalizedStrings.Str1351)    								.SetCell(columnShift + 0' rowIndex' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  								.SetCell(columnShift + 1' rowIndex' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  								.SetCell(columnShift + 2' rowIndex' LocalizedStrings.Str128)  								.SetCell(columnShift + 3' rowIndex' LocalizedStrings.Time).SetStyle(columnShift + 3' "HH:mm:ss.fff")  								.SetCell(columnShift + 4' rowIndex' LocalizedStrings.Price).SetStyle(columnShift + 4' typeof(decimal))  								.SetCell(columnShift + 5' rowIndex' LocalizedStrings.Str1324)  								.SetCell(columnShift + 6' rowIndex' LocalizedStrings.State)  								.SetCell(columnShift + 7' rowIndex' LocalizedStrings.Volume).SetStyle(columnShift + 7' typeof(decimal))  								.SetCell(columnShift + 8' rowIndex' LocalizedStrings.Str1326)  								.SetCell(columnShift + 9' rowIndex' LocalizedStrings.Str1327)  								//.SetCell(columnShift + 10' rowIndex' LocalizedStrings.Str1352).SetStyle(columnShift + 9' typeof(long))  								;    							var stopParams = stopOrders[0].Condition.Parameters.Keys.ToArray();    							for (var i = 0; i < stopParams.Length; i++)  								worker.SetCell(columnShift + 11 + i' rowIndex' stopParams[i]);    							foreach (var order in stopOrders)  							{  								worker  									.SetCell(columnShift + 0' rowIndex' order.Id)  									.SetCell(columnShift + 1' rowIndex' order.TransactionId)  									.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  									.SetCell(columnShift + 3' rowIndex' Format(order.Time))  									.SetCell(columnShift + 4' rowIndex' order.Price)  									.SetCell(columnShift + 5' rowIndex' Format(order.State))  									.SetCell(columnShift + 6' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : string.Empty))  									.SetCell(columnShift + 7' rowIndex' order.Volume)  									.SetCell(columnShift + 8' rowIndex' Format(order.LatencyRegistration))  									.SetCell(columnShift + 9' rowIndex' Format(order.LatencyCancellation))  									//.SetCell(columnShift + 10' rowIndex' order.DerivedOrder != null ? (object)order.DerivedOrder.Id : string.Empty)  									;    								for (var i = 0; i < stopParams.Length; i++)  									worker.SetCell(columnShift + 11 + i' rowIndex' order.Condition.Parameters[stopParams[i]] ?? string.Empty);    								rowIndex++;  							}  						}  					}  				}    				worker.Save(FileName' true);  			}
Magic Number,StockSharp.Algo.Strategies.Reporting,ExcelStrategyReport,C:\repos\stocksharp_stocksharp\Algo\Strategies\Reporting\ExcelStrategyReport.cs,Generate,The following statement contains a magic number: using (var worker = hasTemplate ? new ExcelWorker() : new ExcelWorker(Template))  			{  				foreach (var strategy in Strategies)  				{  					if (Template.IsEmpty())  					{  						worker.RenameSheet(strategy.Name);  					}  					else  					{  						if (worker.ContainsSheet(strategy.Name))  							worker.AddSheet(strategy.Name);  					}    					worker  						.SetCell(0' 0' LocalizedStrings.Str1331)    						.SetCell(0' 1' LocalizedStrings.Security + ":")  						.SetCell(1' 1' strategy.Security != null ? strategy.Security.Id : string.Empty)    						.SetCell(0' 2' LocalizedStrings.Portfolio + ":")  						.SetCell(1' 2' strategy.Portfolio != null ? strategy.Portfolio.Name : string.Empty)    						.SetCell(0' 3' LocalizedStrings.Str1334)  						.SetCell(1' 3' Format(strategy.TotalWorkingTime))    						.SetCell(0' 4' LocalizedStrings.Str1335)  						//.SetCell(1' 4' FormatTime(base.Strategy.TotalCPUTime))    						.SetCell(0' 5' LocalizedStrings.Str862 + ":")  						.SetCell(1' 5' strategy.Position)    						.SetCell(0' 6' LocalizedStrings.PnL + ":")  						.SetCell(1' 6' strategy.PnL)    						.SetCell(0' 7' LocalizedStrings.Str159 + ":")  						.SetCell(1' 7' strategy.Commission)    						.SetCell(0' 8' LocalizedStrings.Str163 + ":")  						.SetCell(1' 8' strategy.Slippage)    						.SetCell(0' 9' LocalizedStrings.Str161 + ":")  						.SetCell(1' 9' Format(strategy.Latency));    					var rowIndex = 11;    					foreach (var parameter in strategy.StatisticManager.Parameters.SyncGet(c => c.ToArray()))  					{  						var value = parameter.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' parameter.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					rowIndex += 2;  					worker.SetCell(0' rowIndex' LocalizedStrings.Str1340);  					rowIndex++;    					foreach (var strategyParam in strategy.Parameters.CachedValues)  					{  						var value = strategyParam.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' strategyParam.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					//rowIndex += 2;  					//worker.SetCell(0' rowIndex' "Комиссия по типам:");  					//rowIndex++;    					//foreach (var group in Strategy.CommissionManager.Rules.SyncGet(c => c.ToArray()).GroupBy(c => c.GetType().GetDisplayName()))  					//{  					//	var commission = group.Sum(r => r.Commission);    					//	if (commission == 0)  					//		continue;    					//	worker  					//		.SetCell(0' rowIndex' group.Key)  					//		.SetCell(1' rowIndex' commission);    					//	rowIndex++;  					//}    					var columnShift = 3;    					worker  						.SetCell(columnShift + 0' 0' LocalizedStrings.Str985)    						.SetCell(columnShift + 0' 1' LocalizedStrings.Str1192).SetStyle(columnShift + 0' typeof(long))  						.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  						.SetCell(columnShift + 2' 1' LocalizedStrings.Time).SetStyle(columnShift + 2' "HH:mm:ss.fff")  						.SetCell(columnShift + 3' 1' LocalizedStrings.Price).SetStyle(columnShift + 3' typeof(decimal))  						.SetCell(columnShift + 4' 1' LocalizedStrings.Str1341).SetStyle(columnShift + 4' typeof(decimal))  						.SetCell(columnShift + 5' 1' LocalizedStrings.Volume).SetStyle(columnShift + 5' typeof(decimal))  						.SetCell(columnShift + 6' 1' LocalizedStrings.Str128)  						.SetCell(columnShift + 7' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 7' typeof(long))  						.SetCell(columnShift + 8' 1' LocalizedStrings.Str163).SetStyle(columnShift + 8' typeof(decimal))  						.SetCell(columnShift + 9' 1' LocalizedStrings.Str135)  						.SetCell(columnShift + 10' 1' LocalizedStrings.Str1342).SetStyle(columnShift + 11' typeof(decimal))  						.SetCell(columnShift + 11' 1' LocalizedStrings.Str1343).SetStyle(columnShift + 12' typeof(decimal))  						.SetCell(columnShift + 12' 1' LocalizedStrings.Str1344).SetStyle(columnShift + 13' typeof(decimal))  						.SetCell(columnShift + 13' 1' LocalizedStrings.Str1345).SetStyle(columnShift + 14' typeof(decimal))  						.SetCell(columnShift + 14' 1' LocalizedStrings.Str862).SetStyle(columnShift + 15' typeof(decimal));    					worker  						.SetConditionalFormatting(columnShift + 10' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 11' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 12' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 13' ComparisonOperator.Less' "0"' null' Colors.Red);    					var totalPnL = 0m;  					var position = 0m;    					var queues = new Dictionary<Security' PnLQueue>();    					rowIndex = 2;  					foreach (var trade in strategy.MyTrades.ToArray())  					{  						var info = strategy.PnLManager.ProcessMessage(trade.ToMessage());    						totalPnL += info.PnL;  						position += trade.GetPosition() ?? 0;    						var queue = queues.SafeAdd(trade.Trade.Security' key => new PnLQueue(key.ToSecurityId()));    						var localInfo = queue.Process(trade.ToMessage());    						worker  							.SetCell(columnShift + 0' rowIndex' trade.Trade.Id)  							.SetCell(columnShift + 1' rowIndex' trade.Order.TransactionId)  							.SetCell(columnShift + 2' rowIndex' Format(trade.Trade.Time))  							.SetCell(columnShift + 3' rowIndex' trade.Trade.Price)  							.SetCell(columnShift + 4' rowIndex' trade.Order.Price)  							.SetCell(columnShift + 5' rowIndex' trade.Trade.Volume)  							.SetCell(columnShift + 6' rowIndex' Format(trade.Order.Direction))  							.SetCell(columnShift + 7' rowIndex' trade.Order.Id)  							.SetCell(columnShift + 8' rowIndex' trade.Slippage)  							.SetCell(columnShift + 9' rowIndex' trade.Order.Comment)  							.SetCell(columnShift + 10' rowIndex' MathHelper.Round(info.PnL' Decimals))  							.SetCell(columnShift + 11' rowIndex' MathHelper.Round(localInfo.PnL' Decimals))  							.SetCell(columnShift + 12' rowIndex' MathHelper.Round(totalPnL' Decimals))  							.SetCell(columnShift + 13' rowIndex' MathHelper.Round(queue.RealizedPnL' Decimals))  							.SetCell(columnShift + 14' rowIndex' position);    						rowIndex++;  					}    					if (IncludeOrders)  					{  						columnShift += 17;    						worker  							.SetCell(columnShift + 0' 0' LocalizedStrings.Orders)    							.SetCell(columnShift + 0' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  							.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  							.SetCell(columnShift + 2' 1' LocalizedStrings.Str128)  							.SetCell(columnShift + 3' 1' LocalizedStrings.Str1346).SetStyle(columnShift + 3' "HH:mm:ss.fff")  							.SetCell(columnShift + 4' 1' LocalizedStrings.Str1347).SetStyle(columnShift + 4' "HH:mm:ss.fff")  							.SetCell(columnShift + 5' 1' LocalizedStrings.Str1348)  							.SetCell(columnShift + 6' 1' LocalizedStrings.Price).SetStyle(columnShift + 6' typeof(decimal))  							.SetCell(columnShift + 7' 1' LocalizedStrings.Str1323).SetStyle(columnShift + 7' typeof(decimal))  							.SetCell(columnShift + 8' 1' LocalizedStrings.Str1324)  							.SetCell(columnShift + 9' 1' LocalizedStrings.State)  							.SetCell(columnShift + 10' 1' LocalizedStrings.Str1325).SetStyle(columnShift + 10' typeof(decimal))  							.SetCell(columnShift + 11' 1' LocalizedStrings.Volume).SetStyle(columnShift + 11' typeof(decimal))  							.SetCell(columnShift + 12' 1' LocalizedStrings.Type)  							.SetCell(columnShift + 13' 1' LocalizedStrings.Str1326)  							.SetCell(columnShift + 14' 1' LocalizedStrings.Str1327)  							.SetCell(columnShift + 15' 1' LocalizedStrings.Str135);    						worker  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str1329)' null' Colors.Green)  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str238)' null' Colors.Red);    						rowIndex = 2;  						foreach (var order in strategy.Orders.ToArray())  						{  							worker  								.SetCell(columnShift + 0' rowIndex' order.Id)  								.SetCell(columnShift + 1' rowIndex' order.TransactionId)  								.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  								.SetCell(columnShift + 3' rowIndex' Format(order.Time))  								.SetCell(columnShift + 4' rowIndex' Format(order.LastChangeTime))  								.SetCell(columnShift + 5' rowIndex' Format(order.LastChangeTime - order.Time))  								.SetCell(columnShift + 6' rowIndex' order.Price)  								.SetCell(columnShift + 7' rowIndex' MathHelper.Round(order.GetAveragePrice(strategy.Connector)' Decimals))  								.SetCell(columnShift + 8' rowIndex' Format(order.State))  								.SetCell(columnShift + 9' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : LocalizedStrings.Str238))  								.SetCell(columnShift + 10' rowIndex' order.Balance)  								.SetCell(columnShift + 11' rowIndex' order.Volume)  								.SetCell(columnShift + 12' rowIndex' Format(order.Type))  								.SetCell(columnShift + 13' rowIndex' Format(order.LatencyRegistration))  								.SetCell(columnShift + 14' rowIndex' Format(order.LatencyCancellation))  								.SetCell(columnShift + 15' rowIndex' order.Comment);    							rowIndex++;  						}    						var stopOrders = strategy.StopOrders.ToArray();    						if (stopOrders.Length > 0)  						{  							rowIndex += 2;    							worker  								.SetCell(columnShift + 0' rowIndex - 1' LocalizedStrings.Str1351)    								.SetCell(columnShift + 0' rowIndex' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  								.SetCell(columnShift + 1' rowIndex' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  								.SetCell(columnShift + 2' rowIndex' LocalizedStrings.Str128)  								.SetCell(columnShift + 3' rowIndex' LocalizedStrings.Time).SetStyle(columnShift + 3' "HH:mm:ss.fff")  								.SetCell(columnShift + 4' rowIndex' LocalizedStrings.Price).SetStyle(columnShift + 4' typeof(decimal))  								.SetCell(columnShift + 5' rowIndex' LocalizedStrings.Str1324)  								.SetCell(columnShift + 6' rowIndex' LocalizedStrings.State)  								.SetCell(columnShift + 7' rowIndex' LocalizedStrings.Volume).SetStyle(columnShift + 7' typeof(decimal))  								.SetCell(columnShift + 8' rowIndex' LocalizedStrings.Str1326)  								.SetCell(columnShift + 9' rowIndex' LocalizedStrings.Str1327)  								//.SetCell(columnShift + 10' rowIndex' LocalizedStrings.Str1352).SetStyle(columnShift + 9' typeof(long))  								;    							var stopParams = stopOrders[0].Condition.Parameters.Keys.ToArray();    							for (var i = 0; i < stopParams.Length; i++)  								worker.SetCell(columnShift + 11 + i' rowIndex' stopParams[i]);    							foreach (var order in stopOrders)  							{  								worker  									.SetCell(columnShift + 0' rowIndex' order.Id)  									.SetCell(columnShift + 1' rowIndex' order.TransactionId)  									.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  									.SetCell(columnShift + 3' rowIndex' Format(order.Time))  									.SetCell(columnShift + 4' rowIndex' order.Price)  									.SetCell(columnShift + 5' rowIndex' Format(order.State))  									.SetCell(columnShift + 6' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : string.Empty))  									.SetCell(columnShift + 7' rowIndex' order.Volume)  									.SetCell(columnShift + 8' rowIndex' Format(order.LatencyRegistration))  									.SetCell(columnShift + 9' rowIndex' Format(order.LatencyCancellation))  									//.SetCell(columnShift + 10' rowIndex' order.DerivedOrder != null ? (object)order.DerivedOrder.Id : string.Empty)  									;    								for (var i = 0; i < stopParams.Length; i++)  									worker.SetCell(columnShift + 11 + i' rowIndex' order.Condition.Parameters[stopParams[i]] ?? string.Empty);    								rowIndex++;  							}  						}  					}  				}    				worker.Save(FileName' true);  			}
Magic Number,StockSharp.Algo.Strategies.Reporting,ExcelStrategyReport,C:\repos\stocksharp_stocksharp\Algo\Strategies\Reporting\ExcelStrategyReport.cs,Generate,The following statement contains a magic number: using (var worker = hasTemplate ? new ExcelWorker() : new ExcelWorker(Template))  			{  				foreach (var strategy in Strategies)  				{  					if (Template.IsEmpty())  					{  						worker.RenameSheet(strategy.Name);  					}  					else  					{  						if (worker.ContainsSheet(strategy.Name))  							worker.AddSheet(strategy.Name);  					}    					worker  						.SetCell(0' 0' LocalizedStrings.Str1331)    						.SetCell(0' 1' LocalizedStrings.Security + ":")  						.SetCell(1' 1' strategy.Security != null ? strategy.Security.Id : string.Empty)    						.SetCell(0' 2' LocalizedStrings.Portfolio + ":")  						.SetCell(1' 2' strategy.Portfolio != null ? strategy.Portfolio.Name : string.Empty)    						.SetCell(0' 3' LocalizedStrings.Str1334)  						.SetCell(1' 3' Format(strategy.TotalWorkingTime))    						.SetCell(0' 4' LocalizedStrings.Str1335)  						//.SetCell(1' 4' FormatTime(base.Strategy.TotalCPUTime))    						.SetCell(0' 5' LocalizedStrings.Str862 + ":")  						.SetCell(1' 5' strategy.Position)    						.SetCell(0' 6' LocalizedStrings.PnL + ":")  						.SetCell(1' 6' strategy.PnL)    						.SetCell(0' 7' LocalizedStrings.Str159 + ":")  						.SetCell(1' 7' strategy.Commission)    						.SetCell(0' 8' LocalizedStrings.Str163 + ":")  						.SetCell(1' 8' strategy.Slippage)    						.SetCell(0' 9' LocalizedStrings.Str161 + ":")  						.SetCell(1' 9' Format(strategy.Latency));    					var rowIndex = 11;    					foreach (var parameter in strategy.StatisticManager.Parameters.SyncGet(c => c.ToArray()))  					{  						var value = parameter.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' parameter.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					rowIndex += 2;  					worker.SetCell(0' rowIndex' LocalizedStrings.Str1340);  					rowIndex++;    					foreach (var strategyParam in strategy.Parameters.CachedValues)  					{  						var value = strategyParam.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' strategyParam.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					//rowIndex += 2;  					//worker.SetCell(0' rowIndex' "Комиссия по типам:");  					//rowIndex++;    					//foreach (var group in Strategy.CommissionManager.Rules.SyncGet(c => c.ToArray()).GroupBy(c => c.GetType().GetDisplayName()))  					//{  					//	var commission = group.Sum(r => r.Commission);    					//	if (commission == 0)  					//		continue;    					//	worker  					//		.SetCell(0' rowIndex' group.Key)  					//		.SetCell(1' rowIndex' commission);    					//	rowIndex++;  					//}    					var columnShift = 3;    					worker  						.SetCell(columnShift + 0' 0' LocalizedStrings.Str985)    						.SetCell(columnShift + 0' 1' LocalizedStrings.Str1192).SetStyle(columnShift + 0' typeof(long))  						.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  						.SetCell(columnShift + 2' 1' LocalizedStrings.Time).SetStyle(columnShift + 2' "HH:mm:ss.fff")  						.SetCell(columnShift + 3' 1' LocalizedStrings.Price).SetStyle(columnShift + 3' typeof(decimal))  						.SetCell(columnShift + 4' 1' LocalizedStrings.Str1341).SetStyle(columnShift + 4' typeof(decimal))  						.SetCell(columnShift + 5' 1' LocalizedStrings.Volume).SetStyle(columnShift + 5' typeof(decimal))  						.SetCell(columnShift + 6' 1' LocalizedStrings.Str128)  						.SetCell(columnShift + 7' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 7' typeof(long))  						.SetCell(columnShift + 8' 1' LocalizedStrings.Str163).SetStyle(columnShift + 8' typeof(decimal))  						.SetCell(columnShift + 9' 1' LocalizedStrings.Str135)  						.SetCell(columnShift + 10' 1' LocalizedStrings.Str1342).SetStyle(columnShift + 11' typeof(decimal))  						.SetCell(columnShift + 11' 1' LocalizedStrings.Str1343).SetStyle(columnShift + 12' typeof(decimal))  						.SetCell(columnShift + 12' 1' LocalizedStrings.Str1344).SetStyle(columnShift + 13' typeof(decimal))  						.SetCell(columnShift + 13' 1' LocalizedStrings.Str1345).SetStyle(columnShift + 14' typeof(decimal))  						.SetCell(columnShift + 14' 1' LocalizedStrings.Str862).SetStyle(columnShift + 15' typeof(decimal));    					worker  						.SetConditionalFormatting(columnShift + 10' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 11' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 12' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 13' ComparisonOperator.Less' "0"' null' Colors.Red);    					var totalPnL = 0m;  					var position = 0m;    					var queues = new Dictionary<Security' PnLQueue>();    					rowIndex = 2;  					foreach (var trade in strategy.MyTrades.ToArray())  					{  						var info = strategy.PnLManager.ProcessMessage(trade.ToMessage());    						totalPnL += info.PnL;  						position += trade.GetPosition() ?? 0;    						var queue = queues.SafeAdd(trade.Trade.Security' key => new PnLQueue(key.ToSecurityId()));    						var localInfo = queue.Process(trade.ToMessage());    						worker  							.SetCell(columnShift + 0' rowIndex' trade.Trade.Id)  							.SetCell(columnShift + 1' rowIndex' trade.Order.TransactionId)  							.SetCell(columnShift + 2' rowIndex' Format(trade.Trade.Time))  							.SetCell(columnShift + 3' rowIndex' trade.Trade.Price)  							.SetCell(columnShift + 4' rowIndex' trade.Order.Price)  							.SetCell(columnShift + 5' rowIndex' trade.Trade.Volume)  							.SetCell(columnShift + 6' rowIndex' Format(trade.Order.Direction))  							.SetCell(columnShift + 7' rowIndex' trade.Order.Id)  							.SetCell(columnShift + 8' rowIndex' trade.Slippage)  							.SetCell(columnShift + 9' rowIndex' trade.Order.Comment)  							.SetCell(columnShift + 10' rowIndex' MathHelper.Round(info.PnL' Decimals))  							.SetCell(columnShift + 11' rowIndex' MathHelper.Round(localInfo.PnL' Decimals))  							.SetCell(columnShift + 12' rowIndex' MathHelper.Round(totalPnL' Decimals))  							.SetCell(columnShift + 13' rowIndex' MathHelper.Round(queue.RealizedPnL' Decimals))  							.SetCell(columnShift + 14' rowIndex' position);    						rowIndex++;  					}    					if (IncludeOrders)  					{  						columnShift += 17;    						worker  							.SetCell(columnShift + 0' 0' LocalizedStrings.Orders)    							.SetCell(columnShift + 0' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  							.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  							.SetCell(columnShift + 2' 1' LocalizedStrings.Str128)  							.SetCell(columnShift + 3' 1' LocalizedStrings.Str1346).SetStyle(columnShift + 3' "HH:mm:ss.fff")  							.SetCell(columnShift + 4' 1' LocalizedStrings.Str1347).SetStyle(columnShift + 4' "HH:mm:ss.fff")  							.SetCell(columnShift + 5' 1' LocalizedStrings.Str1348)  							.SetCell(columnShift + 6' 1' LocalizedStrings.Price).SetStyle(columnShift + 6' typeof(decimal))  							.SetCell(columnShift + 7' 1' LocalizedStrings.Str1323).SetStyle(columnShift + 7' typeof(decimal))  							.SetCell(columnShift + 8' 1' LocalizedStrings.Str1324)  							.SetCell(columnShift + 9' 1' LocalizedStrings.State)  							.SetCell(columnShift + 10' 1' LocalizedStrings.Str1325).SetStyle(columnShift + 10' typeof(decimal))  							.SetCell(columnShift + 11' 1' LocalizedStrings.Volume).SetStyle(columnShift + 11' typeof(decimal))  							.SetCell(columnShift + 12' 1' LocalizedStrings.Type)  							.SetCell(columnShift + 13' 1' LocalizedStrings.Str1326)  							.SetCell(columnShift + 14' 1' LocalizedStrings.Str1327)  							.SetCell(columnShift + 15' 1' LocalizedStrings.Str135);    						worker  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str1329)' null' Colors.Green)  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str238)' null' Colors.Red);    						rowIndex = 2;  						foreach (var order in strategy.Orders.ToArray())  						{  							worker  								.SetCell(columnShift + 0' rowIndex' order.Id)  								.SetCell(columnShift + 1' rowIndex' order.TransactionId)  								.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  								.SetCell(columnShift + 3' rowIndex' Format(order.Time))  								.SetCell(columnShift + 4' rowIndex' Format(order.LastChangeTime))  								.SetCell(columnShift + 5' rowIndex' Format(order.LastChangeTime - order.Time))  								.SetCell(columnShift + 6' rowIndex' order.Price)  								.SetCell(columnShift + 7' rowIndex' MathHelper.Round(order.GetAveragePrice(strategy.Connector)' Decimals))  								.SetCell(columnShift + 8' rowIndex' Format(order.State))  								.SetCell(columnShift + 9' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : LocalizedStrings.Str238))  								.SetCell(columnShift + 10' rowIndex' order.Balance)  								.SetCell(columnShift + 11' rowIndex' order.Volume)  								.SetCell(columnShift + 12' rowIndex' Format(order.Type))  								.SetCell(columnShift + 13' rowIndex' Format(order.LatencyRegistration))  								.SetCell(columnShift + 14' rowIndex' Format(order.LatencyCancellation))  								.SetCell(columnShift + 15' rowIndex' order.Comment);    							rowIndex++;  						}    						var stopOrders = strategy.StopOrders.ToArray();    						if (stopOrders.Length > 0)  						{  							rowIndex += 2;    							worker  								.SetCell(columnShift + 0' rowIndex - 1' LocalizedStrings.Str1351)    								.SetCell(columnShift + 0' rowIndex' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  								.SetCell(columnShift + 1' rowIndex' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  								.SetCell(columnShift + 2' rowIndex' LocalizedStrings.Str128)  								.SetCell(columnShift + 3' rowIndex' LocalizedStrings.Time).SetStyle(columnShift + 3' "HH:mm:ss.fff")  								.SetCell(columnShift + 4' rowIndex' LocalizedStrings.Price).SetStyle(columnShift + 4' typeof(decimal))  								.SetCell(columnShift + 5' rowIndex' LocalizedStrings.Str1324)  								.SetCell(columnShift + 6' rowIndex' LocalizedStrings.State)  								.SetCell(columnShift + 7' rowIndex' LocalizedStrings.Volume).SetStyle(columnShift + 7' typeof(decimal))  								.SetCell(columnShift + 8' rowIndex' LocalizedStrings.Str1326)  								.SetCell(columnShift + 9' rowIndex' LocalizedStrings.Str1327)  								//.SetCell(columnShift + 10' rowIndex' LocalizedStrings.Str1352).SetStyle(columnShift + 9' typeof(long))  								;    							var stopParams = stopOrders[0].Condition.Parameters.Keys.ToArray();    							for (var i = 0; i < stopParams.Length; i++)  								worker.SetCell(columnShift + 11 + i' rowIndex' stopParams[i]);    							foreach (var order in stopOrders)  							{  								worker  									.SetCell(columnShift + 0' rowIndex' order.Id)  									.SetCell(columnShift + 1' rowIndex' order.TransactionId)  									.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  									.SetCell(columnShift + 3' rowIndex' Format(order.Time))  									.SetCell(columnShift + 4' rowIndex' order.Price)  									.SetCell(columnShift + 5' rowIndex' Format(order.State))  									.SetCell(columnShift + 6' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : string.Empty))  									.SetCell(columnShift + 7' rowIndex' order.Volume)  									.SetCell(columnShift + 8' rowIndex' Format(order.LatencyRegistration))  									.SetCell(columnShift + 9' rowIndex' Format(order.LatencyCancellation))  									//.SetCell(columnShift + 10' rowIndex' order.DerivedOrder != null ? (object)order.DerivedOrder.Id : string.Empty)  									;    								for (var i = 0; i < stopParams.Length; i++)  									worker.SetCell(columnShift + 11 + i' rowIndex' order.Condition.Parameters[stopParams[i]] ?? string.Empty);    								rowIndex++;  							}  						}  					}  				}    				worker.Save(FileName' true);  			}
Magic Number,StockSharp.Algo.Strategies.Reporting,ExcelStrategyReport,C:\repos\stocksharp_stocksharp\Algo\Strategies\Reporting\ExcelStrategyReport.cs,Generate,The following statement contains a magic number: using (var worker = hasTemplate ? new ExcelWorker() : new ExcelWorker(Template))  			{  				foreach (var strategy in Strategies)  				{  					if (Template.IsEmpty())  					{  						worker.RenameSheet(strategy.Name);  					}  					else  					{  						if (worker.ContainsSheet(strategy.Name))  							worker.AddSheet(strategy.Name);  					}    					worker  						.SetCell(0' 0' LocalizedStrings.Str1331)    						.SetCell(0' 1' LocalizedStrings.Security + ":")  						.SetCell(1' 1' strategy.Security != null ? strategy.Security.Id : string.Empty)    						.SetCell(0' 2' LocalizedStrings.Portfolio + ":")  						.SetCell(1' 2' strategy.Portfolio != null ? strategy.Portfolio.Name : string.Empty)    						.SetCell(0' 3' LocalizedStrings.Str1334)  						.SetCell(1' 3' Format(strategy.TotalWorkingTime))    						.SetCell(0' 4' LocalizedStrings.Str1335)  						//.SetCell(1' 4' FormatTime(base.Strategy.TotalCPUTime))    						.SetCell(0' 5' LocalizedStrings.Str862 + ":")  						.SetCell(1' 5' strategy.Position)    						.SetCell(0' 6' LocalizedStrings.PnL + ":")  						.SetCell(1' 6' strategy.PnL)    						.SetCell(0' 7' LocalizedStrings.Str159 + ":")  						.SetCell(1' 7' strategy.Commission)    						.SetCell(0' 8' LocalizedStrings.Str163 + ":")  						.SetCell(1' 8' strategy.Slippage)    						.SetCell(0' 9' LocalizedStrings.Str161 + ":")  						.SetCell(1' 9' Format(strategy.Latency));    					var rowIndex = 11;    					foreach (var parameter in strategy.StatisticManager.Parameters.SyncGet(c => c.ToArray()))  					{  						var value = parameter.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' parameter.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					rowIndex += 2;  					worker.SetCell(0' rowIndex' LocalizedStrings.Str1340);  					rowIndex++;    					foreach (var strategyParam in strategy.Parameters.CachedValues)  					{  						var value = strategyParam.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' strategyParam.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					//rowIndex += 2;  					//worker.SetCell(0' rowIndex' "Комиссия по типам:");  					//rowIndex++;    					//foreach (var group in Strategy.CommissionManager.Rules.SyncGet(c => c.ToArray()).GroupBy(c => c.GetType().GetDisplayName()))  					//{  					//	var commission = group.Sum(r => r.Commission);    					//	if (commission == 0)  					//		continue;    					//	worker  					//		.SetCell(0' rowIndex' group.Key)  					//		.SetCell(1' rowIndex' commission);    					//	rowIndex++;  					//}    					var columnShift = 3;    					worker  						.SetCell(columnShift + 0' 0' LocalizedStrings.Str985)    						.SetCell(columnShift + 0' 1' LocalizedStrings.Str1192).SetStyle(columnShift + 0' typeof(long))  						.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  						.SetCell(columnShift + 2' 1' LocalizedStrings.Time).SetStyle(columnShift + 2' "HH:mm:ss.fff")  						.SetCell(columnShift + 3' 1' LocalizedStrings.Price).SetStyle(columnShift + 3' typeof(decimal))  						.SetCell(columnShift + 4' 1' LocalizedStrings.Str1341).SetStyle(columnShift + 4' typeof(decimal))  						.SetCell(columnShift + 5' 1' LocalizedStrings.Volume).SetStyle(columnShift + 5' typeof(decimal))  						.SetCell(columnShift + 6' 1' LocalizedStrings.Str128)  						.SetCell(columnShift + 7' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 7' typeof(long))  						.SetCell(columnShift + 8' 1' LocalizedStrings.Str163).SetStyle(columnShift + 8' typeof(decimal))  						.SetCell(columnShift + 9' 1' LocalizedStrings.Str135)  						.SetCell(columnShift + 10' 1' LocalizedStrings.Str1342).SetStyle(columnShift + 11' typeof(decimal))  						.SetCell(columnShift + 11' 1' LocalizedStrings.Str1343).SetStyle(columnShift + 12' typeof(decimal))  						.SetCell(columnShift + 12' 1' LocalizedStrings.Str1344).SetStyle(columnShift + 13' typeof(decimal))  						.SetCell(columnShift + 13' 1' LocalizedStrings.Str1345).SetStyle(columnShift + 14' typeof(decimal))  						.SetCell(columnShift + 14' 1' LocalizedStrings.Str862).SetStyle(columnShift + 15' typeof(decimal));    					worker  						.SetConditionalFormatting(columnShift + 10' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 11' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 12' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 13' ComparisonOperator.Less' "0"' null' Colors.Red);    					var totalPnL = 0m;  					var position = 0m;    					var queues = new Dictionary<Security' PnLQueue>();    					rowIndex = 2;  					foreach (var trade in strategy.MyTrades.ToArray())  					{  						var info = strategy.PnLManager.ProcessMessage(trade.ToMessage());    						totalPnL += info.PnL;  						position += trade.GetPosition() ?? 0;    						var queue = queues.SafeAdd(trade.Trade.Security' key => new PnLQueue(key.ToSecurityId()));    						var localInfo = queue.Process(trade.ToMessage());    						worker  							.SetCell(columnShift + 0' rowIndex' trade.Trade.Id)  							.SetCell(columnShift + 1' rowIndex' trade.Order.TransactionId)  							.SetCell(columnShift + 2' rowIndex' Format(trade.Trade.Time))  							.SetCell(columnShift + 3' rowIndex' trade.Trade.Price)  							.SetCell(columnShift + 4' rowIndex' trade.Order.Price)  							.SetCell(columnShift + 5' rowIndex' trade.Trade.Volume)  							.SetCell(columnShift + 6' rowIndex' Format(trade.Order.Direction))  							.SetCell(columnShift + 7' rowIndex' trade.Order.Id)  							.SetCell(columnShift + 8' rowIndex' trade.Slippage)  							.SetCell(columnShift + 9' rowIndex' trade.Order.Comment)  							.SetCell(columnShift + 10' rowIndex' MathHelper.Round(info.PnL' Decimals))  							.SetCell(columnShift + 11' rowIndex' MathHelper.Round(localInfo.PnL' Decimals))  							.SetCell(columnShift + 12' rowIndex' MathHelper.Round(totalPnL' Decimals))  							.SetCell(columnShift + 13' rowIndex' MathHelper.Round(queue.RealizedPnL' Decimals))  							.SetCell(columnShift + 14' rowIndex' position);    						rowIndex++;  					}    					if (IncludeOrders)  					{  						columnShift += 17;    						worker  							.SetCell(columnShift + 0' 0' LocalizedStrings.Orders)    							.SetCell(columnShift + 0' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  							.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  							.SetCell(columnShift + 2' 1' LocalizedStrings.Str128)  							.SetCell(columnShift + 3' 1' LocalizedStrings.Str1346).SetStyle(columnShift + 3' "HH:mm:ss.fff")  							.SetCell(columnShift + 4' 1' LocalizedStrings.Str1347).SetStyle(columnShift + 4' "HH:mm:ss.fff")  							.SetCell(columnShift + 5' 1' LocalizedStrings.Str1348)  							.SetCell(columnShift + 6' 1' LocalizedStrings.Price).SetStyle(columnShift + 6' typeof(decimal))  							.SetCell(columnShift + 7' 1' LocalizedStrings.Str1323).SetStyle(columnShift + 7' typeof(decimal))  							.SetCell(columnShift + 8' 1' LocalizedStrings.Str1324)  							.SetCell(columnShift + 9' 1' LocalizedStrings.State)  							.SetCell(columnShift + 10' 1' LocalizedStrings.Str1325).SetStyle(columnShift + 10' typeof(decimal))  							.SetCell(columnShift + 11' 1' LocalizedStrings.Volume).SetStyle(columnShift + 11' typeof(decimal))  							.SetCell(columnShift + 12' 1' LocalizedStrings.Type)  							.SetCell(columnShift + 13' 1' LocalizedStrings.Str1326)  							.SetCell(columnShift + 14' 1' LocalizedStrings.Str1327)  							.SetCell(columnShift + 15' 1' LocalizedStrings.Str135);    						worker  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str1329)' null' Colors.Green)  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str238)' null' Colors.Red);    						rowIndex = 2;  						foreach (var order in strategy.Orders.ToArray())  						{  							worker  								.SetCell(columnShift + 0' rowIndex' order.Id)  								.SetCell(columnShift + 1' rowIndex' order.TransactionId)  								.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  								.SetCell(columnShift + 3' rowIndex' Format(order.Time))  								.SetCell(columnShift + 4' rowIndex' Format(order.LastChangeTime))  								.SetCell(columnShift + 5' rowIndex' Format(order.LastChangeTime - order.Time))  								.SetCell(columnShift + 6' rowIndex' order.Price)  								.SetCell(columnShift + 7' rowIndex' MathHelper.Round(order.GetAveragePrice(strategy.Connector)' Decimals))  								.SetCell(columnShift + 8' rowIndex' Format(order.State))  								.SetCell(columnShift + 9' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : LocalizedStrings.Str238))  								.SetCell(columnShift + 10' rowIndex' order.Balance)  								.SetCell(columnShift + 11' rowIndex' order.Volume)  								.SetCell(columnShift + 12' rowIndex' Format(order.Type))  								.SetCell(columnShift + 13' rowIndex' Format(order.LatencyRegistration))  								.SetCell(columnShift + 14' rowIndex' Format(order.LatencyCancellation))  								.SetCell(columnShift + 15' rowIndex' order.Comment);    							rowIndex++;  						}    						var stopOrders = strategy.StopOrders.ToArray();    						if (stopOrders.Length > 0)  						{  							rowIndex += 2;    							worker  								.SetCell(columnShift + 0' rowIndex - 1' LocalizedStrings.Str1351)    								.SetCell(columnShift + 0' rowIndex' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  								.SetCell(columnShift + 1' rowIndex' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  								.SetCell(columnShift + 2' rowIndex' LocalizedStrings.Str128)  								.SetCell(columnShift + 3' rowIndex' LocalizedStrings.Time).SetStyle(columnShift + 3' "HH:mm:ss.fff")  								.SetCell(columnShift + 4' rowIndex' LocalizedStrings.Price).SetStyle(columnShift + 4' typeof(decimal))  								.SetCell(columnShift + 5' rowIndex' LocalizedStrings.Str1324)  								.SetCell(columnShift + 6' rowIndex' LocalizedStrings.State)  								.SetCell(columnShift + 7' rowIndex' LocalizedStrings.Volume).SetStyle(columnShift + 7' typeof(decimal))  								.SetCell(columnShift + 8' rowIndex' LocalizedStrings.Str1326)  								.SetCell(columnShift + 9' rowIndex' LocalizedStrings.Str1327)  								//.SetCell(columnShift + 10' rowIndex' LocalizedStrings.Str1352).SetStyle(columnShift + 9' typeof(long))  								;    							var stopParams = stopOrders[0].Condition.Parameters.Keys.ToArray();    							for (var i = 0; i < stopParams.Length; i++)  								worker.SetCell(columnShift + 11 + i' rowIndex' stopParams[i]);    							foreach (var order in stopOrders)  							{  								worker  									.SetCell(columnShift + 0' rowIndex' order.Id)  									.SetCell(columnShift + 1' rowIndex' order.TransactionId)  									.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  									.SetCell(columnShift + 3' rowIndex' Format(order.Time))  									.SetCell(columnShift + 4' rowIndex' order.Price)  									.SetCell(columnShift + 5' rowIndex' Format(order.State))  									.SetCell(columnShift + 6' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : string.Empty))  									.SetCell(columnShift + 7' rowIndex' order.Volume)  									.SetCell(columnShift + 8' rowIndex' Format(order.LatencyRegistration))  									.SetCell(columnShift + 9' rowIndex' Format(order.LatencyCancellation))  									//.SetCell(columnShift + 10' rowIndex' order.DerivedOrder != null ? (object)order.DerivedOrder.Id : string.Empty)  									;    								for (var i = 0; i < stopParams.Length; i++)  									worker.SetCell(columnShift + 11 + i' rowIndex' order.Condition.Parameters[stopParams[i]] ?? string.Empty);    								rowIndex++;  							}  						}  					}  				}    				worker.Save(FileName' true);  			}
Magic Number,StockSharp.Algo.Strategies.Reporting,ExcelStrategyReport,C:\repos\stocksharp_stocksharp\Algo\Strategies\Reporting\ExcelStrategyReport.cs,Generate,The following statement contains a magic number: using (var worker = hasTemplate ? new ExcelWorker() : new ExcelWorker(Template))  			{  				foreach (var strategy in Strategies)  				{  					if (Template.IsEmpty())  					{  						worker.RenameSheet(strategy.Name);  					}  					else  					{  						if (worker.ContainsSheet(strategy.Name))  							worker.AddSheet(strategy.Name);  					}    					worker  						.SetCell(0' 0' LocalizedStrings.Str1331)    						.SetCell(0' 1' LocalizedStrings.Security + ":")  						.SetCell(1' 1' strategy.Security != null ? strategy.Security.Id : string.Empty)    						.SetCell(0' 2' LocalizedStrings.Portfolio + ":")  						.SetCell(1' 2' strategy.Portfolio != null ? strategy.Portfolio.Name : string.Empty)    						.SetCell(0' 3' LocalizedStrings.Str1334)  						.SetCell(1' 3' Format(strategy.TotalWorkingTime))    						.SetCell(0' 4' LocalizedStrings.Str1335)  						//.SetCell(1' 4' FormatTime(base.Strategy.TotalCPUTime))    						.SetCell(0' 5' LocalizedStrings.Str862 + ":")  						.SetCell(1' 5' strategy.Position)    						.SetCell(0' 6' LocalizedStrings.PnL + ":")  						.SetCell(1' 6' strategy.PnL)    						.SetCell(0' 7' LocalizedStrings.Str159 + ":")  						.SetCell(1' 7' strategy.Commission)    						.SetCell(0' 8' LocalizedStrings.Str163 + ":")  						.SetCell(1' 8' strategy.Slippage)    						.SetCell(0' 9' LocalizedStrings.Str161 + ":")  						.SetCell(1' 9' Format(strategy.Latency));    					var rowIndex = 11;    					foreach (var parameter in strategy.StatisticManager.Parameters.SyncGet(c => c.ToArray()))  					{  						var value = parameter.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' parameter.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					rowIndex += 2;  					worker.SetCell(0' rowIndex' LocalizedStrings.Str1340);  					rowIndex++;    					foreach (var strategyParam in strategy.Parameters.CachedValues)  					{  						var value = strategyParam.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' strategyParam.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					//rowIndex += 2;  					//worker.SetCell(0' rowIndex' "Комиссия по типам:");  					//rowIndex++;    					//foreach (var group in Strategy.CommissionManager.Rules.SyncGet(c => c.ToArray()).GroupBy(c => c.GetType().GetDisplayName()))  					//{  					//	var commission = group.Sum(r => r.Commission);    					//	if (commission == 0)  					//		continue;    					//	worker  					//		.SetCell(0' rowIndex' group.Key)  					//		.SetCell(1' rowIndex' commission);    					//	rowIndex++;  					//}    					var columnShift = 3;    					worker  						.SetCell(columnShift + 0' 0' LocalizedStrings.Str985)    						.SetCell(columnShift + 0' 1' LocalizedStrings.Str1192).SetStyle(columnShift + 0' typeof(long))  						.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  						.SetCell(columnShift + 2' 1' LocalizedStrings.Time).SetStyle(columnShift + 2' "HH:mm:ss.fff")  						.SetCell(columnShift + 3' 1' LocalizedStrings.Price).SetStyle(columnShift + 3' typeof(decimal))  						.SetCell(columnShift + 4' 1' LocalizedStrings.Str1341).SetStyle(columnShift + 4' typeof(decimal))  						.SetCell(columnShift + 5' 1' LocalizedStrings.Volume).SetStyle(columnShift + 5' typeof(decimal))  						.SetCell(columnShift + 6' 1' LocalizedStrings.Str128)  						.SetCell(columnShift + 7' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 7' typeof(long))  						.SetCell(columnShift + 8' 1' LocalizedStrings.Str163).SetStyle(columnShift + 8' typeof(decimal))  						.SetCell(columnShift + 9' 1' LocalizedStrings.Str135)  						.SetCell(columnShift + 10' 1' LocalizedStrings.Str1342).SetStyle(columnShift + 11' typeof(decimal))  						.SetCell(columnShift + 11' 1' LocalizedStrings.Str1343).SetStyle(columnShift + 12' typeof(decimal))  						.SetCell(columnShift + 12' 1' LocalizedStrings.Str1344).SetStyle(columnShift + 13' typeof(decimal))  						.SetCell(columnShift + 13' 1' LocalizedStrings.Str1345).SetStyle(columnShift + 14' typeof(decimal))  						.SetCell(columnShift + 14' 1' LocalizedStrings.Str862).SetStyle(columnShift + 15' typeof(decimal));    					worker  						.SetConditionalFormatting(columnShift + 10' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 11' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 12' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 13' ComparisonOperator.Less' "0"' null' Colors.Red);    					var totalPnL = 0m;  					var position = 0m;    					var queues = new Dictionary<Security' PnLQueue>();    					rowIndex = 2;  					foreach (var trade in strategy.MyTrades.ToArray())  					{  						var info = strategy.PnLManager.ProcessMessage(trade.ToMessage());    						totalPnL += info.PnL;  						position += trade.GetPosition() ?? 0;    						var queue = queues.SafeAdd(trade.Trade.Security' key => new PnLQueue(key.ToSecurityId()));    						var localInfo = queue.Process(trade.ToMessage());    						worker  							.SetCell(columnShift + 0' rowIndex' trade.Trade.Id)  							.SetCell(columnShift + 1' rowIndex' trade.Order.TransactionId)  							.SetCell(columnShift + 2' rowIndex' Format(trade.Trade.Time))  							.SetCell(columnShift + 3' rowIndex' trade.Trade.Price)  							.SetCell(columnShift + 4' rowIndex' trade.Order.Price)  							.SetCell(columnShift + 5' rowIndex' trade.Trade.Volume)  							.SetCell(columnShift + 6' rowIndex' Format(trade.Order.Direction))  							.SetCell(columnShift + 7' rowIndex' trade.Order.Id)  							.SetCell(columnShift + 8' rowIndex' trade.Slippage)  							.SetCell(columnShift + 9' rowIndex' trade.Order.Comment)  							.SetCell(columnShift + 10' rowIndex' MathHelper.Round(info.PnL' Decimals))  							.SetCell(columnShift + 11' rowIndex' MathHelper.Round(localInfo.PnL' Decimals))  							.SetCell(columnShift + 12' rowIndex' MathHelper.Round(totalPnL' Decimals))  							.SetCell(columnShift + 13' rowIndex' MathHelper.Round(queue.RealizedPnL' Decimals))  							.SetCell(columnShift + 14' rowIndex' position);    						rowIndex++;  					}    					if (IncludeOrders)  					{  						columnShift += 17;    						worker  							.SetCell(columnShift + 0' 0' LocalizedStrings.Orders)    							.SetCell(columnShift + 0' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  							.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  							.SetCell(columnShift + 2' 1' LocalizedStrings.Str128)  							.SetCell(columnShift + 3' 1' LocalizedStrings.Str1346).SetStyle(columnShift + 3' "HH:mm:ss.fff")  							.SetCell(columnShift + 4' 1' LocalizedStrings.Str1347).SetStyle(columnShift + 4' "HH:mm:ss.fff")  							.SetCell(columnShift + 5' 1' LocalizedStrings.Str1348)  							.SetCell(columnShift + 6' 1' LocalizedStrings.Price).SetStyle(columnShift + 6' typeof(decimal))  							.SetCell(columnShift + 7' 1' LocalizedStrings.Str1323).SetStyle(columnShift + 7' typeof(decimal))  							.SetCell(columnShift + 8' 1' LocalizedStrings.Str1324)  							.SetCell(columnShift + 9' 1' LocalizedStrings.State)  							.SetCell(columnShift + 10' 1' LocalizedStrings.Str1325).SetStyle(columnShift + 10' typeof(decimal))  							.SetCell(columnShift + 11' 1' LocalizedStrings.Volume).SetStyle(columnShift + 11' typeof(decimal))  							.SetCell(columnShift + 12' 1' LocalizedStrings.Type)  							.SetCell(columnShift + 13' 1' LocalizedStrings.Str1326)  							.SetCell(columnShift + 14' 1' LocalizedStrings.Str1327)  							.SetCell(columnShift + 15' 1' LocalizedStrings.Str135);    						worker  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str1329)' null' Colors.Green)  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str238)' null' Colors.Red);    						rowIndex = 2;  						foreach (var order in strategy.Orders.ToArray())  						{  							worker  								.SetCell(columnShift + 0' rowIndex' order.Id)  								.SetCell(columnShift + 1' rowIndex' order.TransactionId)  								.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  								.SetCell(columnShift + 3' rowIndex' Format(order.Time))  								.SetCell(columnShift + 4' rowIndex' Format(order.LastChangeTime))  								.SetCell(columnShift + 5' rowIndex' Format(order.LastChangeTime - order.Time))  								.SetCell(columnShift + 6' rowIndex' order.Price)  								.SetCell(columnShift + 7' rowIndex' MathHelper.Round(order.GetAveragePrice(strategy.Connector)' Decimals))  								.SetCell(columnShift + 8' rowIndex' Format(order.State))  								.SetCell(columnShift + 9' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : LocalizedStrings.Str238))  								.SetCell(columnShift + 10' rowIndex' order.Balance)  								.SetCell(columnShift + 11' rowIndex' order.Volume)  								.SetCell(columnShift + 12' rowIndex' Format(order.Type))  								.SetCell(columnShift + 13' rowIndex' Format(order.LatencyRegistration))  								.SetCell(columnShift + 14' rowIndex' Format(order.LatencyCancellation))  								.SetCell(columnShift + 15' rowIndex' order.Comment);    							rowIndex++;  						}    						var stopOrders = strategy.StopOrders.ToArray();    						if (stopOrders.Length > 0)  						{  							rowIndex += 2;    							worker  								.SetCell(columnShift + 0' rowIndex - 1' LocalizedStrings.Str1351)    								.SetCell(columnShift + 0' rowIndex' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  								.SetCell(columnShift + 1' rowIndex' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  								.SetCell(columnShift + 2' rowIndex' LocalizedStrings.Str128)  								.SetCell(columnShift + 3' rowIndex' LocalizedStrings.Time).SetStyle(columnShift + 3' "HH:mm:ss.fff")  								.SetCell(columnShift + 4' rowIndex' LocalizedStrings.Price).SetStyle(columnShift + 4' typeof(decimal))  								.SetCell(columnShift + 5' rowIndex' LocalizedStrings.Str1324)  								.SetCell(columnShift + 6' rowIndex' LocalizedStrings.State)  								.SetCell(columnShift + 7' rowIndex' LocalizedStrings.Volume).SetStyle(columnShift + 7' typeof(decimal))  								.SetCell(columnShift + 8' rowIndex' LocalizedStrings.Str1326)  								.SetCell(columnShift + 9' rowIndex' LocalizedStrings.Str1327)  								//.SetCell(columnShift + 10' rowIndex' LocalizedStrings.Str1352).SetStyle(columnShift + 9' typeof(long))  								;    							var stopParams = stopOrders[0].Condition.Parameters.Keys.ToArray();    							for (var i = 0; i < stopParams.Length; i++)  								worker.SetCell(columnShift + 11 + i' rowIndex' stopParams[i]);    							foreach (var order in stopOrders)  							{  								worker  									.SetCell(columnShift + 0' rowIndex' order.Id)  									.SetCell(columnShift + 1' rowIndex' order.TransactionId)  									.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  									.SetCell(columnShift + 3' rowIndex' Format(order.Time))  									.SetCell(columnShift + 4' rowIndex' order.Price)  									.SetCell(columnShift + 5' rowIndex' Format(order.State))  									.SetCell(columnShift + 6' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : string.Empty))  									.SetCell(columnShift + 7' rowIndex' order.Volume)  									.SetCell(columnShift + 8' rowIndex' Format(order.LatencyRegistration))  									.SetCell(columnShift + 9' rowIndex' Format(order.LatencyCancellation))  									//.SetCell(columnShift + 10' rowIndex' order.DerivedOrder != null ? (object)order.DerivedOrder.Id : string.Empty)  									;    								for (var i = 0; i < stopParams.Length; i++)  									worker.SetCell(columnShift + 11 + i' rowIndex' order.Condition.Parameters[stopParams[i]] ?? string.Empty);    								rowIndex++;  							}  						}  					}  				}    				worker.Save(FileName' true);  			}
Magic Number,StockSharp.Algo.Strategies.Reporting,ExcelStrategyReport,C:\repos\stocksharp_stocksharp\Algo\Strategies\Reporting\ExcelStrategyReport.cs,Generate,The following statement contains a magic number: using (var worker = hasTemplate ? new ExcelWorker() : new ExcelWorker(Template))  			{  				foreach (var strategy in Strategies)  				{  					if (Template.IsEmpty())  					{  						worker.RenameSheet(strategy.Name);  					}  					else  					{  						if (worker.ContainsSheet(strategy.Name))  							worker.AddSheet(strategy.Name);  					}    					worker  						.SetCell(0' 0' LocalizedStrings.Str1331)    						.SetCell(0' 1' LocalizedStrings.Security + ":")  						.SetCell(1' 1' strategy.Security != null ? strategy.Security.Id : string.Empty)    						.SetCell(0' 2' LocalizedStrings.Portfolio + ":")  						.SetCell(1' 2' strategy.Portfolio != null ? strategy.Portfolio.Name : string.Empty)    						.SetCell(0' 3' LocalizedStrings.Str1334)  						.SetCell(1' 3' Format(strategy.TotalWorkingTime))    						.SetCell(0' 4' LocalizedStrings.Str1335)  						//.SetCell(1' 4' FormatTime(base.Strategy.TotalCPUTime))    						.SetCell(0' 5' LocalizedStrings.Str862 + ":")  						.SetCell(1' 5' strategy.Position)    						.SetCell(0' 6' LocalizedStrings.PnL + ":")  						.SetCell(1' 6' strategy.PnL)    						.SetCell(0' 7' LocalizedStrings.Str159 + ":")  						.SetCell(1' 7' strategy.Commission)    						.SetCell(0' 8' LocalizedStrings.Str163 + ":")  						.SetCell(1' 8' strategy.Slippage)    						.SetCell(0' 9' LocalizedStrings.Str161 + ":")  						.SetCell(1' 9' Format(strategy.Latency));    					var rowIndex = 11;    					foreach (var parameter in strategy.StatisticManager.Parameters.SyncGet(c => c.ToArray()))  					{  						var value = parameter.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' parameter.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					rowIndex += 2;  					worker.SetCell(0' rowIndex' LocalizedStrings.Str1340);  					rowIndex++;    					foreach (var strategyParam in strategy.Parameters.CachedValues)  					{  						var value = strategyParam.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' strategyParam.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					//rowIndex += 2;  					//worker.SetCell(0' rowIndex' "Комиссия по типам:");  					//rowIndex++;    					//foreach (var group in Strategy.CommissionManager.Rules.SyncGet(c => c.ToArray()).GroupBy(c => c.GetType().GetDisplayName()))  					//{  					//	var commission = group.Sum(r => r.Commission);    					//	if (commission == 0)  					//		continue;    					//	worker  					//		.SetCell(0' rowIndex' group.Key)  					//		.SetCell(1' rowIndex' commission);    					//	rowIndex++;  					//}    					var columnShift = 3;    					worker  						.SetCell(columnShift + 0' 0' LocalizedStrings.Str985)    						.SetCell(columnShift + 0' 1' LocalizedStrings.Str1192).SetStyle(columnShift + 0' typeof(long))  						.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  						.SetCell(columnShift + 2' 1' LocalizedStrings.Time).SetStyle(columnShift + 2' "HH:mm:ss.fff")  						.SetCell(columnShift + 3' 1' LocalizedStrings.Price).SetStyle(columnShift + 3' typeof(decimal))  						.SetCell(columnShift + 4' 1' LocalizedStrings.Str1341).SetStyle(columnShift + 4' typeof(decimal))  						.SetCell(columnShift + 5' 1' LocalizedStrings.Volume).SetStyle(columnShift + 5' typeof(decimal))  						.SetCell(columnShift + 6' 1' LocalizedStrings.Str128)  						.SetCell(columnShift + 7' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 7' typeof(long))  						.SetCell(columnShift + 8' 1' LocalizedStrings.Str163).SetStyle(columnShift + 8' typeof(decimal))  						.SetCell(columnShift + 9' 1' LocalizedStrings.Str135)  						.SetCell(columnShift + 10' 1' LocalizedStrings.Str1342).SetStyle(columnShift + 11' typeof(decimal))  						.SetCell(columnShift + 11' 1' LocalizedStrings.Str1343).SetStyle(columnShift + 12' typeof(decimal))  						.SetCell(columnShift + 12' 1' LocalizedStrings.Str1344).SetStyle(columnShift + 13' typeof(decimal))  						.SetCell(columnShift + 13' 1' LocalizedStrings.Str1345).SetStyle(columnShift + 14' typeof(decimal))  						.SetCell(columnShift + 14' 1' LocalizedStrings.Str862).SetStyle(columnShift + 15' typeof(decimal));    					worker  						.SetConditionalFormatting(columnShift + 10' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 11' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 12' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 13' ComparisonOperator.Less' "0"' null' Colors.Red);    					var totalPnL = 0m;  					var position = 0m;    					var queues = new Dictionary<Security' PnLQueue>();    					rowIndex = 2;  					foreach (var trade in strategy.MyTrades.ToArray())  					{  						var info = strategy.PnLManager.ProcessMessage(trade.ToMessage());    						totalPnL += info.PnL;  						position += trade.GetPosition() ?? 0;    						var queue = queues.SafeAdd(trade.Trade.Security' key => new PnLQueue(key.ToSecurityId()));    						var localInfo = queue.Process(trade.ToMessage());    						worker  							.SetCell(columnShift + 0' rowIndex' trade.Trade.Id)  							.SetCell(columnShift + 1' rowIndex' trade.Order.TransactionId)  							.SetCell(columnShift + 2' rowIndex' Format(trade.Trade.Time))  							.SetCell(columnShift + 3' rowIndex' trade.Trade.Price)  							.SetCell(columnShift + 4' rowIndex' trade.Order.Price)  							.SetCell(columnShift + 5' rowIndex' trade.Trade.Volume)  							.SetCell(columnShift + 6' rowIndex' Format(trade.Order.Direction))  							.SetCell(columnShift + 7' rowIndex' trade.Order.Id)  							.SetCell(columnShift + 8' rowIndex' trade.Slippage)  							.SetCell(columnShift + 9' rowIndex' trade.Order.Comment)  							.SetCell(columnShift + 10' rowIndex' MathHelper.Round(info.PnL' Decimals))  							.SetCell(columnShift + 11' rowIndex' MathHelper.Round(localInfo.PnL' Decimals))  							.SetCell(columnShift + 12' rowIndex' MathHelper.Round(totalPnL' Decimals))  							.SetCell(columnShift + 13' rowIndex' MathHelper.Round(queue.RealizedPnL' Decimals))  							.SetCell(columnShift + 14' rowIndex' position);    						rowIndex++;  					}    					if (IncludeOrders)  					{  						columnShift += 17;    						worker  							.SetCell(columnShift + 0' 0' LocalizedStrings.Orders)    							.SetCell(columnShift + 0' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  							.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  							.SetCell(columnShift + 2' 1' LocalizedStrings.Str128)  							.SetCell(columnShift + 3' 1' LocalizedStrings.Str1346).SetStyle(columnShift + 3' "HH:mm:ss.fff")  							.SetCell(columnShift + 4' 1' LocalizedStrings.Str1347).SetStyle(columnShift + 4' "HH:mm:ss.fff")  							.SetCell(columnShift + 5' 1' LocalizedStrings.Str1348)  							.SetCell(columnShift + 6' 1' LocalizedStrings.Price).SetStyle(columnShift + 6' typeof(decimal))  							.SetCell(columnShift + 7' 1' LocalizedStrings.Str1323).SetStyle(columnShift + 7' typeof(decimal))  							.SetCell(columnShift + 8' 1' LocalizedStrings.Str1324)  							.SetCell(columnShift + 9' 1' LocalizedStrings.State)  							.SetCell(columnShift + 10' 1' LocalizedStrings.Str1325).SetStyle(columnShift + 10' typeof(decimal))  							.SetCell(columnShift + 11' 1' LocalizedStrings.Volume).SetStyle(columnShift + 11' typeof(decimal))  							.SetCell(columnShift + 12' 1' LocalizedStrings.Type)  							.SetCell(columnShift + 13' 1' LocalizedStrings.Str1326)  							.SetCell(columnShift + 14' 1' LocalizedStrings.Str1327)  							.SetCell(columnShift + 15' 1' LocalizedStrings.Str135);    						worker  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str1329)' null' Colors.Green)  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str238)' null' Colors.Red);    						rowIndex = 2;  						foreach (var order in strategy.Orders.ToArray())  						{  							worker  								.SetCell(columnShift + 0' rowIndex' order.Id)  								.SetCell(columnShift + 1' rowIndex' order.TransactionId)  								.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  								.SetCell(columnShift + 3' rowIndex' Format(order.Time))  								.SetCell(columnShift + 4' rowIndex' Format(order.LastChangeTime))  								.SetCell(columnShift + 5' rowIndex' Format(order.LastChangeTime - order.Time))  								.SetCell(columnShift + 6' rowIndex' order.Price)  								.SetCell(columnShift + 7' rowIndex' MathHelper.Round(order.GetAveragePrice(strategy.Connector)' Decimals))  								.SetCell(columnShift + 8' rowIndex' Format(order.State))  								.SetCell(columnShift + 9' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : LocalizedStrings.Str238))  								.SetCell(columnShift + 10' rowIndex' order.Balance)  								.SetCell(columnShift + 11' rowIndex' order.Volume)  								.SetCell(columnShift + 12' rowIndex' Format(order.Type))  								.SetCell(columnShift + 13' rowIndex' Format(order.LatencyRegistration))  								.SetCell(columnShift + 14' rowIndex' Format(order.LatencyCancellation))  								.SetCell(columnShift + 15' rowIndex' order.Comment);    							rowIndex++;  						}    						var stopOrders = strategy.StopOrders.ToArray();    						if (stopOrders.Length > 0)  						{  							rowIndex += 2;    							worker  								.SetCell(columnShift + 0' rowIndex - 1' LocalizedStrings.Str1351)    								.SetCell(columnShift + 0' rowIndex' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  								.SetCell(columnShift + 1' rowIndex' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  								.SetCell(columnShift + 2' rowIndex' LocalizedStrings.Str128)  								.SetCell(columnShift + 3' rowIndex' LocalizedStrings.Time).SetStyle(columnShift + 3' "HH:mm:ss.fff")  								.SetCell(columnShift + 4' rowIndex' LocalizedStrings.Price).SetStyle(columnShift + 4' typeof(decimal))  								.SetCell(columnShift + 5' rowIndex' LocalizedStrings.Str1324)  								.SetCell(columnShift + 6' rowIndex' LocalizedStrings.State)  								.SetCell(columnShift + 7' rowIndex' LocalizedStrings.Volume).SetStyle(columnShift + 7' typeof(decimal))  								.SetCell(columnShift + 8' rowIndex' LocalizedStrings.Str1326)  								.SetCell(columnShift + 9' rowIndex' LocalizedStrings.Str1327)  								//.SetCell(columnShift + 10' rowIndex' LocalizedStrings.Str1352).SetStyle(columnShift + 9' typeof(long))  								;    							var stopParams = stopOrders[0].Condition.Parameters.Keys.ToArray();    							for (var i = 0; i < stopParams.Length; i++)  								worker.SetCell(columnShift + 11 + i' rowIndex' stopParams[i]);    							foreach (var order in stopOrders)  							{  								worker  									.SetCell(columnShift + 0' rowIndex' order.Id)  									.SetCell(columnShift + 1' rowIndex' order.TransactionId)  									.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  									.SetCell(columnShift + 3' rowIndex' Format(order.Time))  									.SetCell(columnShift + 4' rowIndex' order.Price)  									.SetCell(columnShift + 5' rowIndex' Format(order.State))  									.SetCell(columnShift + 6' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : string.Empty))  									.SetCell(columnShift + 7' rowIndex' order.Volume)  									.SetCell(columnShift + 8' rowIndex' Format(order.LatencyRegistration))  									.SetCell(columnShift + 9' rowIndex' Format(order.LatencyCancellation))  									//.SetCell(columnShift + 10' rowIndex' order.DerivedOrder != null ? (object)order.DerivedOrder.Id : string.Empty)  									;    								for (var i = 0; i < stopParams.Length; i++)  									worker.SetCell(columnShift + 11 + i' rowIndex' order.Condition.Parameters[stopParams[i]] ?? string.Empty);    								rowIndex++;  							}  						}  					}  				}    				worker.Save(FileName' true);  			}
Magic Number,StockSharp.Algo.Strategies.Reporting,ExcelStrategyReport,C:\repos\stocksharp_stocksharp\Algo\Strategies\Reporting\ExcelStrategyReport.cs,Generate,The following statement contains a magic number: using (var worker = hasTemplate ? new ExcelWorker() : new ExcelWorker(Template))  			{  				foreach (var strategy in Strategies)  				{  					if (Template.IsEmpty())  					{  						worker.RenameSheet(strategy.Name);  					}  					else  					{  						if (worker.ContainsSheet(strategy.Name))  							worker.AddSheet(strategy.Name);  					}    					worker  						.SetCell(0' 0' LocalizedStrings.Str1331)    						.SetCell(0' 1' LocalizedStrings.Security + ":")  						.SetCell(1' 1' strategy.Security != null ? strategy.Security.Id : string.Empty)    						.SetCell(0' 2' LocalizedStrings.Portfolio + ":")  						.SetCell(1' 2' strategy.Portfolio != null ? strategy.Portfolio.Name : string.Empty)    						.SetCell(0' 3' LocalizedStrings.Str1334)  						.SetCell(1' 3' Format(strategy.TotalWorkingTime))    						.SetCell(0' 4' LocalizedStrings.Str1335)  						//.SetCell(1' 4' FormatTime(base.Strategy.TotalCPUTime))    						.SetCell(0' 5' LocalizedStrings.Str862 + ":")  						.SetCell(1' 5' strategy.Position)    						.SetCell(0' 6' LocalizedStrings.PnL + ":")  						.SetCell(1' 6' strategy.PnL)    						.SetCell(0' 7' LocalizedStrings.Str159 + ":")  						.SetCell(1' 7' strategy.Commission)    						.SetCell(0' 8' LocalizedStrings.Str163 + ":")  						.SetCell(1' 8' strategy.Slippage)    						.SetCell(0' 9' LocalizedStrings.Str161 + ":")  						.SetCell(1' 9' Format(strategy.Latency));    					var rowIndex = 11;    					foreach (var parameter in strategy.StatisticManager.Parameters.SyncGet(c => c.ToArray()))  					{  						var value = parameter.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' parameter.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					rowIndex += 2;  					worker.SetCell(0' rowIndex' LocalizedStrings.Str1340);  					rowIndex++;    					foreach (var strategyParam in strategy.Parameters.CachedValues)  					{  						var value = strategyParam.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' strategyParam.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					//rowIndex += 2;  					//worker.SetCell(0' rowIndex' "Комиссия по типам:");  					//rowIndex++;    					//foreach (var group in Strategy.CommissionManager.Rules.SyncGet(c => c.ToArray()).GroupBy(c => c.GetType().GetDisplayName()))  					//{  					//	var commission = group.Sum(r => r.Commission);    					//	if (commission == 0)  					//		continue;    					//	worker  					//		.SetCell(0' rowIndex' group.Key)  					//		.SetCell(1' rowIndex' commission);    					//	rowIndex++;  					//}    					var columnShift = 3;    					worker  						.SetCell(columnShift + 0' 0' LocalizedStrings.Str985)    						.SetCell(columnShift + 0' 1' LocalizedStrings.Str1192).SetStyle(columnShift + 0' typeof(long))  						.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  						.SetCell(columnShift + 2' 1' LocalizedStrings.Time).SetStyle(columnShift + 2' "HH:mm:ss.fff")  						.SetCell(columnShift + 3' 1' LocalizedStrings.Price).SetStyle(columnShift + 3' typeof(decimal))  						.SetCell(columnShift + 4' 1' LocalizedStrings.Str1341).SetStyle(columnShift + 4' typeof(decimal))  						.SetCell(columnShift + 5' 1' LocalizedStrings.Volume).SetStyle(columnShift + 5' typeof(decimal))  						.SetCell(columnShift + 6' 1' LocalizedStrings.Str128)  						.SetCell(columnShift + 7' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 7' typeof(long))  						.SetCell(columnShift + 8' 1' LocalizedStrings.Str163).SetStyle(columnShift + 8' typeof(decimal))  						.SetCell(columnShift + 9' 1' LocalizedStrings.Str135)  						.SetCell(columnShift + 10' 1' LocalizedStrings.Str1342).SetStyle(columnShift + 11' typeof(decimal))  						.SetCell(columnShift + 11' 1' LocalizedStrings.Str1343).SetStyle(columnShift + 12' typeof(decimal))  						.SetCell(columnShift + 12' 1' LocalizedStrings.Str1344).SetStyle(columnShift + 13' typeof(decimal))  						.SetCell(columnShift + 13' 1' LocalizedStrings.Str1345).SetStyle(columnShift + 14' typeof(decimal))  						.SetCell(columnShift + 14' 1' LocalizedStrings.Str862).SetStyle(columnShift + 15' typeof(decimal));    					worker  						.SetConditionalFormatting(columnShift + 10' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 11' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 12' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 13' ComparisonOperator.Less' "0"' null' Colors.Red);    					var totalPnL = 0m;  					var position = 0m;    					var queues = new Dictionary<Security' PnLQueue>();    					rowIndex = 2;  					foreach (var trade in strategy.MyTrades.ToArray())  					{  						var info = strategy.PnLManager.ProcessMessage(trade.ToMessage());    						totalPnL += info.PnL;  						position += trade.GetPosition() ?? 0;    						var queue = queues.SafeAdd(trade.Trade.Security' key => new PnLQueue(key.ToSecurityId()));    						var localInfo = queue.Process(trade.ToMessage());    						worker  							.SetCell(columnShift + 0' rowIndex' trade.Trade.Id)  							.SetCell(columnShift + 1' rowIndex' trade.Order.TransactionId)  							.SetCell(columnShift + 2' rowIndex' Format(trade.Trade.Time))  							.SetCell(columnShift + 3' rowIndex' trade.Trade.Price)  							.SetCell(columnShift + 4' rowIndex' trade.Order.Price)  							.SetCell(columnShift + 5' rowIndex' trade.Trade.Volume)  							.SetCell(columnShift + 6' rowIndex' Format(trade.Order.Direction))  							.SetCell(columnShift + 7' rowIndex' trade.Order.Id)  							.SetCell(columnShift + 8' rowIndex' trade.Slippage)  							.SetCell(columnShift + 9' rowIndex' trade.Order.Comment)  							.SetCell(columnShift + 10' rowIndex' MathHelper.Round(info.PnL' Decimals))  							.SetCell(columnShift + 11' rowIndex' MathHelper.Round(localInfo.PnL' Decimals))  							.SetCell(columnShift + 12' rowIndex' MathHelper.Round(totalPnL' Decimals))  							.SetCell(columnShift + 13' rowIndex' MathHelper.Round(queue.RealizedPnL' Decimals))  							.SetCell(columnShift + 14' rowIndex' position);    						rowIndex++;  					}    					if (IncludeOrders)  					{  						columnShift += 17;    						worker  							.SetCell(columnShift + 0' 0' LocalizedStrings.Orders)    							.SetCell(columnShift + 0' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  							.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  							.SetCell(columnShift + 2' 1' LocalizedStrings.Str128)  							.SetCell(columnShift + 3' 1' LocalizedStrings.Str1346).SetStyle(columnShift + 3' "HH:mm:ss.fff")  							.SetCell(columnShift + 4' 1' LocalizedStrings.Str1347).SetStyle(columnShift + 4' "HH:mm:ss.fff")  							.SetCell(columnShift + 5' 1' LocalizedStrings.Str1348)  							.SetCell(columnShift + 6' 1' LocalizedStrings.Price).SetStyle(columnShift + 6' typeof(decimal))  							.SetCell(columnShift + 7' 1' LocalizedStrings.Str1323).SetStyle(columnShift + 7' typeof(decimal))  							.SetCell(columnShift + 8' 1' LocalizedStrings.Str1324)  							.SetCell(columnShift + 9' 1' LocalizedStrings.State)  							.SetCell(columnShift + 10' 1' LocalizedStrings.Str1325).SetStyle(columnShift + 10' typeof(decimal))  							.SetCell(columnShift + 11' 1' LocalizedStrings.Volume).SetStyle(columnShift + 11' typeof(decimal))  							.SetCell(columnShift + 12' 1' LocalizedStrings.Type)  							.SetCell(columnShift + 13' 1' LocalizedStrings.Str1326)  							.SetCell(columnShift + 14' 1' LocalizedStrings.Str1327)  							.SetCell(columnShift + 15' 1' LocalizedStrings.Str135);    						worker  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str1329)' null' Colors.Green)  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str238)' null' Colors.Red);    						rowIndex = 2;  						foreach (var order in strategy.Orders.ToArray())  						{  							worker  								.SetCell(columnShift + 0' rowIndex' order.Id)  								.SetCell(columnShift + 1' rowIndex' order.TransactionId)  								.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  								.SetCell(columnShift + 3' rowIndex' Format(order.Time))  								.SetCell(columnShift + 4' rowIndex' Format(order.LastChangeTime))  								.SetCell(columnShift + 5' rowIndex' Format(order.LastChangeTime - order.Time))  								.SetCell(columnShift + 6' rowIndex' order.Price)  								.SetCell(columnShift + 7' rowIndex' MathHelper.Round(order.GetAveragePrice(strategy.Connector)' Decimals))  								.SetCell(columnShift + 8' rowIndex' Format(order.State))  								.SetCell(columnShift + 9' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : LocalizedStrings.Str238))  								.SetCell(columnShift + 10' rowIndex' order.Balance)  								.SetCell(columnShift + 11' rowIndex' order.Volume)  								.SetCell(columnShift + 12' rowIndex' Format(order.Type))  								.SetCell(columnShift + 13' rowIndex' Format(order.LatencyRegistration))  								.SetCell(columnShift + 14' rowIndex' Format(order.LatencyCancellation))  								.SetCell(columnShift + 15' rowIndex' order.Comment);    							rowIndex++;  						}    						var stopOrders = strategy.StopOrders.ToArray();    						if (stopOrders.Length > 0)  						{  							rowIndex += 2;    							worker  								.SetCell(columnShift + 0' rowIndex - 1' LocalizedStrings.Str1351)    								.SetCell(columnShift + 0' rowIndex' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  								.SetCell(columnShift + 1' rowIndex' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  								.SetCell(columnShift + 2' rowIndex' LocalizedStrings.Str128)  								.SetCell(columnShift + 3' rowIndex' LocalizedStrings.Time).SetStyle(columnShift + 3' "HH:mm:ss.fff")  								.SetCell(columnShift + 4' rowIndex' LocalizedStrings.Price).SetStyle(columnShift + 4' typeof(decimal))  								.SetCell(columnShift + 5' rowIndex' LocalizedStrings.Str1324)  								.SetCell(columnShift + 6' rowIndex' LocalizedStrings.State)  								.SetCell(columnShift + 7' rowIndex' LocalizedStrings.Volume).SetStyle(columnShift + 7' typeof(decimal))  								.SetCell(columnShift + 8' rowIndex' LocalizedStrings.Str1326)  								.SetCell(columnShift + 9' rowIndex' LocalizedStrings.Str1327)  								//.SetCell(columnShift + 10' rowIndex' LocalizedStrings.Str1352).SetStyle(columnShift + 9' typeof(long))  								;    							var stopParams = stopOrders[0].Condition.Parameters.Keys.ToArray();    							for (var i = 0; i < stopParams.Length; i++)  								worker.SetCell(columnShift + 11 + i' rowIndex' stopParams[i]);    							foreach (var order in stopOrders)  							{  								worker  									.SetCell(columnShift + 0' rowIndex' order.Id)  									.SetCell(columnShift + 1' rowIndex' order.TransactionId)  									.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  									.SetCell(columnShift + 3' rowIndex' Format(order.Time))  									.SetCell(columnShift + 4' rowIndex' order.Price)  									.SetCell(columnShift + 5' rowIndex' Format(order.State))  									.SetCell(columnShift + 6' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : string.Empty))  									.SetCell(columnShift + 7' rowIndex' order.Volume)  									.SetCell(columnShift + 8' rowIndex' Format(order.LatencyRegistration))  									.SetCell(columnShift + 9' rowIndex' Format(order.LatencyCancellation))  									//.SetCell(columnShift + 10' rowIndex' order.DerivedOrder != null ? (object)order.DerivedOrder.Id : string.Empty)  									;    								for (var i = 0; i < stopParams.Length; i++)  									worker.SetCell(columnShift + 11 + i' rowIndex' order.Condition.Parameters[stopParams[i]] ?? string.Empty);    								rowIndex++;  							}  						}  					}  				}    				worker.Save(FileName' true);  			}
Magic Number,StockSharp.Algo.Strategies.Reporting,ExcelStrategyReport,C:\repos\stocksharp_stocksharp\Algo\Strategies\Reporting\ExcelStrategyReport.cs,Generate,The following statement contains a magic number: using (var worker = hasTemplate ? new ExcelWorker() : new ExcelWorker(Template))  			{  				foreach (var strategy in Strategies)  				{  					if (Template.IsEmpty())  					{  						worker.RenameSheet(strategy.Name);  					}  					else  					{  						if (worker.ContainsSheet(strategy.Name))  							worker.AddSheet(strategy.Name);  					}    					worker  						.SetCell(0' 0' LocalizedStrings.Str1331)    						.SetCell(0' 1' LocalizedStrings.Security + ":")  						.SetCell(1' 1' strategy.Security != null ? strategy.Security.Id : string.Empty)    						.SetCell(0' 2' LocalizedStrings.Portfolio + ":")  						.SetCell(1' 2' strategy.Portfolio != null ? strategy.Portfolio.Name : string.Empty)    						.SetCell(0' 3' LocalizedStrings.Str1334)  						.SetCell(1' 3' Format(strategy.TotalWorkingTime))    						.SetCell(0' 4' LocalizedStrings.Str1335)  						//.SetCell(1' 4' FormatTime(base.Strategy.TotalCPUTime))    						.SetCell(0' 5' LocalizedStrings.Str862 + ":")  						.SetCell(1' 5' strategy.Position)    						.SetCell(0' 6' LocalizedStrings.PnL + ":")  						.SetCell(1' 6' strategy.PnL)    						.SetCell(0' 7' LocalizedStrings.Str159 + ":")  						.SetCell(1' 7' strategy.Commission)    						.SetCell(0' 8' LocalizedStrings.Str163 + ":")  						.SetCell(1' 8' strategy.Slippage)    						.SetCell(0' 9' LocalizedStrings.Str161 + ":")  						.SetCell(1' 9' Format(strategy.Latency));    					var rowIndex = 11;    					foreach (var parameter in strategy.StatisticManager.Parameters.SyncGet(c => c.ToArray()))  					{  						var value = parameter.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' parameter.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					rowIndex += 2;  					worker.SetCell(0' rowIndex' LocalizedStrings.Str1340);  					rowIndex++;    					foreach (var strategyParam in strategy.Parameters.CachedValues)  					{  						var value = strategyParam.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' strategyParam.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					//rowIndex += 2;  					//worker.SetCell(0' rowIndex' "Комиссия по типам:");  					//rowIndex++;    					//foreach (var group in Strategy.CommissionManager.Rules.SyncGet(c => c.ToArray()).GroupBy(c => c.GetType().GetDisplayName()))  					//{  					//	var commission = group.Sum(r => r.Commission);    					//	if (commission == 0)  					//		continue;    					//	worker  					//		.SetCell(0' rowIndex' group.Key)  					//		.SetCell(1' rowIndex' commission);    					//	rowIndex++;  					//}    					var columnShift = 3;    					worker  						.SetCell(columnShift + 0' 0' LocalizedStrings.Str985)    						.SetCell(columnShift + 0' 1' LocalizedStrings.Str1192).SetStyle(columnShift + 0' typeof(long))  						.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  						.SetCell(columnShift + 2' 1' LocalizedStrings.Time).SetStyle(columnShift + 2' "HH:mm:ss.fff")  						.SetCell(columnShift + 3' 1' LocalizedStrings.Price).SetStyle(columnShift + 3' typeof(decimal))  						.SetCell(columnShift + 4' 1' LocalizedStrings.Str1341).SetStyle(columnShift + 4' typeof(decimal))  						.SetCell(columnShift + 5' 1' LocalizedStrings.Volume).SetStyle(columnShift + 5' typeof(decimal))  						.SetCell(columnShift + 6' 1' LocalizedStrings.Str128)  						.SetCell(columnShift + 7' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 7' typeof(long))  						.SetCell(columnShift + 8' 1' LocalizedStrings.Str163).SetStyle(columnShift + 8' typeof(decimal))  						.SetCell(columnShift + 9' 1' LocalizedStrings.Str135)  						.SetCell(columnShift + 10' 1' LocalizedStrings.Str1342).SetStyle(columnShift + 11' typeof(decimal))  						.SetCell(columnShift + 11' 1' LocalizedStrings.Str1343).SetStyle(columnShift + 12' typeof(decimal))  						.SetCell(columnShift + 12' 1' LocalizedStrings.Str1344).SetStyle(columnShift + 13' typeof(decimal))  						.SetCell(columnShift + 13' 1' LocalizedStrings.Str1345).SetStyle(columnShift + 14' typeof(decimal))  						.SetCell(columnShift + 14' 1' LocalizedStrings.Str862).SetStyle(columnShift + 15' typeof(decimal));    					worker  						.SetConditionalFormatting(columnShift + 10' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 11' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 12' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 13' ComparisonOperator.Less' "0"' null' Colors.Red);    					var totalPnL = 0m;  					var position = 0m;    					var queues = new Dictionary<Security' PnLQueue>();    					rowIndex = 2;  					foreach (var trade in strategy.MyTrades.ToArray())  					{  						var info = strategy.PnLManager.ProcessMessage(trade.ToMessage());    						totalPnL += info.PnL;  						position += trade.GetPosition() ?? 0;    						var queue = queues.SafeAdd(trade.Trade.Security' key => new PnLQueue(key.ToSecurityId()));    						var localInfo = queue.Process(trade.ToMessage());    						worker  							.SetCell(columnShift + 0' rowIndex' trade.Trade.Id)  							.SetCell(columnShift + 1' rowIndex' trade.Order.TransactionId)  							.SetCell(columnShift + 2' rowIndex' Format(trade.Trade.Time))  							.SetCell(columnShift + 3' rowIndex' trade.Trade.Price)  							.SetCell(columnShift + 4' rowIndex' trade.Order.Price)  							.SetCell(columnShift + 5' rowIndex' trade.Trade.Volume)  							.SetCell(columnShift + 6' rowIndex' Format(trade.Order.Direction))  							.SetCell(columnShift + 7' rowIndex' trade.Order.Id)  							.SetCell(columnShift + 8' rowIndex' trade.Slippage)  							.SetCell(columnShift + 9' rowIndex' trade.Order.Comment)  							.SetCell(columnShift + 10' rowIndex' MathHelper.Round(info.PnL' Decimals))  							.SetCell(columnShift + 11' rowIndex' MathHelper.Round(localInfo.PnL' Decimals))  							.SetCell(columnShift + 12' rowIndex' MathHelper.Round(totalPnL' Decimals))  							.SetCell(columnShift + 13' rowIndex' MathHelper.Round(queue.RealizedPnL' Decimals))  							.SetCell(columnShift + 14' rowIndex' position);    						rowIndex++;  					}    					if (IncludeOrders)  					{  						columnShift += 17;    						worker  							.SetCell(columnShift + 0' 0' LocalizedStrings.Orders)    							.SetCell(columnShift + 0' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  							.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  							.SetCell(columnShift + 2' 1' LocalizedStrings.Str128)  							.SetCell(columnShift + 3' 1' LocalizedStrings.Str1346).SetStyle(columnShift + 3' "HH:mm:ss.fff")  							.SetCell(columnShift + 4' 1' LocalizedStrings.Str1347).SetStyle(columnShift + 4' "HH:mm:ss.fff")  							.SetCell(columnShift + 5' 1' LocalizedStrings.Str1348)  							.SetCell(columnShift + 6' 1' LocalizedStrings.Price).SetStyle(columnShift + 6' typeof(decimal))  							.SetCell(columnShift + 7' 1' LocalizedStrings.Str1323).SetStyle(columnShift + 7' typeof(decimal))  							.SetCell(columnShift + 8' 1' LocalizedStrings.Str1324)  							.SetCell(columnShift + 9' 1' LocalizedStrings.State)  							.SetCell(columnShift + 10' 1' LocalizedStrings.Str1325).SetStyle(columnShift + 10' typeof(decimal))  							.SetCell(columnShift + 11' 1' LocalizedStrings.Volume).SetStyle(columnShift + 11' typeof(decimal))  							.SetCell(columnShift + 12' 1' LocalizedStrings.Type)  							.SetCell(columnShift + 13' 1' LocalizedStrings.Str1326)  							.SetCell(columnShift + 14' 1' LocalizedStrings.Str1327)  							.SetCell(columnShift + 15' 1' LocalizedStrings.Str135);    						worker  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str1329)' null' Colors.Green)  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str238)' null' Colors.Red);    						rowIndex = 2;  						foreach (var order in strategy.Orders.ToArray())  						{  							worker  								.SetCell(columnShift + 0' rowIndex' order.Id)  								.SetCell(columnShift + 1' rowIndex' order.TransactionId)  								.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  								.SetCell(columnShift + 3' rowIndex' Format(order.Time))  								.SetCell(columnShift + 4' rowIndex' Format(order.LastChangeTime))  								.SetCell(columnShift + 5' rowIndex' Format(order.LastChangeTime - order.Time))  								.SetCell(columnShift + 6' rowIndex' order.Price)  								.SetCell(columnShift + 7' rowIndex' MathHelper.Round(order.GetAveragePrice(strategy.Connector)' Decimals))  								.SetCell(columnShift + 8' rowIndex' Format(order.State))  								.SetCell(columnShift + 9' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : LocalizedStrings.Str238))  								.SetCell(columnShift + 10' rowIndex' order.Balance)  								.SetCell(columnShift + 11' rowIndex' order.Volume)  								.SetCell(columnShift + 12' rowIndex' Format(order.Type))  								.SetCell(columnShift + 13' rowIndex' Format(order.LatencyRegistration))  								.SetCell(columnShift + 14' rowIndex' Format(order.LatencyCancellation))  								.SetCell(columnShift + 15' rowIndex' order.Comment);    							rowIndex++;  						}    						var stopOrders = strategy.StopOrders.ToArray();    						if (stopOrders.Length > 0)  						{  							rowIndex += 2;    							worker  								.SetCell(columnShift + 0' rowIndex - 1' LocalizedStrings.Str1351)    								.SetCell(columnShift + 0' rowIndex' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  								.SetCell(columnShift + 1' rowIndex' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  								.SetCell(columnShift + 2' rowIndex' LocalizedStrings.Str128)  								.SetCell(columnShift + 3' rowIndex' LocalizedStrings.Time).SetStyle(columnShift + 3' "HH:mm:ss.fff")  								.SetCell(columnShift + 4' rowIndex' LocalizedStrings.Price).SetStyle(columnShift + 4' typeof(decimal))  								.SetCell(columnShift + 5' rowIndex' LocalizedStrings.Str1324)  								.SetCell(columnShift + 6' rowIndex' LocalizedStrings.State)  								.SetCell(columnShift + 7' rowIndex' LocalizedStrings.Volume).SetStyle(columnShift + 7' typeof(decimal))  								.SetCell(columnShift + 8' rowIndex' LocalizedStrings.Str1326)  								.SetCell(columnShift + 9' rowIndex' LocalizedStrings.Str1327)  								//.SetCell(columnShift + 10' rowIndex' LocalizedStrings.Str1352).SetStyle(columnShift + 9' typeof(long))  								;    							var stopParams = stopOrders[0].Condition.Parameters.Keys.ToArray();    							for (var i = 0; i < stopParams.Length; i++)  								worker.SetCell(columnShift + 11 + i' rowIndex' stopParams[i]);    							foreach (var order in stopOrders)  							{  								worker  									.SetCell(columnShift + 0' rowIndex' order.Id)  									.SetCell(columnShift + 1' rowIndex' order.TransactionId)  									.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  									.SetCell(columnShift + 3' rowIndex' Format(order.Time))  									.SetCell(columnShift + 4' rowIndex' order.Price)  									.SetCell(columnShift + 5' rowIndex' Format(order.State))  									.SetCell(columnShift + 6' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : string.Empty))  									.SetCell(columnShift + 7' rowIndex' order.Volume)  									.SetCell(columnShift + 8' rowIndex' Format(order.LatencyRegistration))  									.SetCell(columnShift + 9' rowIndex' Format(order.LatencyCancellation))  									//.SetCell(columnShift + 10' rowIndex' order.DerivedOrder != null ? (object)order.DerivedOrder.Id : string.Empty)  									;    								for (var i = 0; i < stopParams.Length; i++)  									worker.SetCell(columnShift + 11 + i' rowIndex' order.Condition.Parameters[stopParams[i]] ?? string.Empty);    								rowIndex++;  							}  						}  					}  				}    				worker.Save(FileName' true);  			}
Magic Number,StockSharp.Algo.Strategies.Reporting,ExcelStrategyReport,C:\repos\stocksharp_stocksharp\Algo\Strategies\Reporting\ExcelStrategyReport.cs,Generate,The following statement contains a magic number: using (var worker = hasTemplate ? new ExcelWorker() : new ExcelWorker(Template))  			{  				foreach (var strategy in Strategies)  				{  					if (Template.IsEmpty())  					{  						worker.RenameSheet(strategy.Name);  					}  					else  					{  						if (worker.ContainsSheet(strategy.Name))  							worker.AddSheet(strategy.Name);  					}    					worker  						.SetCell(0' 0' LocalizedStrings.Str1331)    						.SetCell(0' 1' LocalizedStrings.Security + ":")  						.SetCell(1' 1' strategy.Security != null ? strategy.Security.Id : string.Empty)    						.SetCell(0' 2' LocalizedStrings.Portfolio + ":")  						.SetCell(1' 2' strategy.Portfolio != null ? strategy.Portfolio.Name : string.Empty)    						.SetCell(0' 3' LocalizedStrings.Str1334)  						.SetCell(1' 3' Format(strategy.TotalWorkingTime))    						.SetCell(0' 4' LocalizedStrings.Str1335)  						//.SetCell(1' 4' FormatTime(base.Strategy.TotalCPUTime))    						.SetCell(0' 5' LocalizedStrings.Str862 + ":")  						.SetCell(1' 5' strategy.Position)    						.SetCell(0' 6' LocalizedStrings.PnL + ":")  						.SetCell(1' 6' strategy.PnL)    						.SetCell(0' 7' LocalizedStrings.Str159 + ":")  						.SetCell(1' 7' strategy.Commission)    						.SetCell(0' 8' LocalizedStrings.Str163 + ":")  						.SetCell(1' 8' strategy.Slippage)    						.SetCell(0' 9' LocalizedStrings.Str161 + ":")  						.SetCell(1' 9' Format(strategy.Latency));    					var rowIndex = 11;    					foreach (var parameter in strategy.StatisticManager.Parameters.SyncGet(c => c.ToArray()))  					{  						var value = parameter.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' parameter.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					rowIndex += 2;  					worker.SetCell(0' rowIndex' LocalizedStrings.Str1340);  					rowIndex++;    					foreach (var strategyParam in strategy.Parameters.CachedValues)  					{  						var value = strategyParam.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' strategyParam.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					//rowIndex += 2;  					//worker.SetCell(0' rowIndex' "Комиссия по типам:");  					//rowIndex++;    					//foreach (var group in Strategy.CommissionManager.Rules.SyncGet(c => c.ToArray()).GroupBy(c => c.GetType().GetDisplayName()))  					//{  					//	var commission = group.Sum(r => r.Commission);    					//	if (commission == 0)  					//		continue;    					//	worker  					//		.SetCell(0' rowIndex' group.Key)  					//		.SetCell(1' rowIndex' commission);    					//	rowIndex++;  					//}    					var columnShift = 3;    					worker  						.SetCell(columnShift + 0' 0' LocalizedStrings.Str985)    						.SetCell(columnShift + 0' 1' LocalizedStrings.Str1192).SetStyle(columnShift + 0' typeof(long))  						.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  						.SetCell(columnShift + 2' 1' LocalizedStrings.Time).SetStyle(columnShift + 2' "HH:mm:ss.fff")  						.SetCell(columnShift + 3' 1' LocalizedStrings.Price).SetStyle(columnShift + 3' typeof(decimal))  						.SetCell(columnShift + 4' 1' LocalizedStrings.Str1341).SetStyle(columnShift + 4' typeof(decimal))  						.SetCell(columnShift + 5' 1' LocalizedStrings.Volume).SetStyle(columnShift + 5' typeof(decimal))  						.SetCell(columnShift + 6' 1' LocalizedStrings.Str128)  						.SetCell(columnShift + 7' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 7' typeof(long))  						.SetCell(columnShift + 8' 1' LocalizedStrings.Str163).SetStyle(columnShift + 8' typeof(decimal))  						.SetCell(columnShift + 9' 1' LocalizedStrings.Str135)  						.SetCell(columnShift + 10' 1' LocalizedStrings.Str1342).SetStyle(columnShift + 11' typeof(decimal))  						.SetCell(columnShift + 11' 1' LocalizedStrings.Str1343).SetStyle(columnShift + 12' typeof(decimal))  						.SetCell(columnShift + 12' 1' LocalizedStrings.Str1344).SetStyle(columnShift + 13' typeof(decimal))  						.SetCell(columnShift + 13' 1' LocalizedStrings.Str1345).SetStyle(columnShift + 14' typeof(decimal))  						.SetCell(columnShift + 14' 1' LocalizedStrings.Str862).SetStyle(columnShift + 15' typeof(decimal));    					worker  						.SetConditionalFormatting(columnShift + 10' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 11' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 12' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 13' ComparisonOperator.Less' "0"' null' Colors.Red);    					var totalPnL = 0m;  					var position = 0m;    					var queues = new Dictionary<Security' PnLQueue>();    					rowIndex = 2;  					foreach (var trade in strategy.MyTrades.ToArray())  					{  						var info = strategy.PnLManager.ProcessMessage(trade.ToMessage());    						totalPnL += info.PnL;  						position += trade.GetPosition() ?? 0;    						var queue = queues.SafeAdd(trade.Trade.Security' key => new PnLQueue(key.ToSecurityId()));    						var localInfo = queue.Process(trade.ToMessage());    						worker  							.SetCell(columnShift + 0' rowIndex' trade.Trade.Id)  							.SetCell(columnShift + 1' rowIndex' trade.Order.TransactionId)  							.SetCell(columnShift + 2' rowIndex' Format(trade.Trade.Time))  							.SetCell(columnShift + 3' rowIndex' trade.Trade.Price)  							.SetCell(columnShift + 4' rowIndex' trade.Order.Price)  							.SetCell(columnShift + 5' rowIndex' trade.Trade.Volume)  							.SetCell(columnShift + 6' rowIndex' Format(trade.Order.Direction))  							.SetCell(columnShift + 7' rowIndex' trade.Order.Id)  							.SetCell(columnShift + 8' rowIndex' trade.Slippage)  							.SetCell(columnShift + 9' rowIndex' trade.Order.Comment)  							.SetCell(columnShift + 10' rowIndex' MathHelper.Round(info.PnL' Decimals))  							.SetCell(columnShift + 11' rowIndex' MathHelper.Round(localInfo.PnL' Decimals))  							.SetCell(columnShift + 12' rowIndex' MathHelper.Round(totalPnL' Decimals))  							.SetCell(columnShift + 13' rowIndex' MathHelper.Round(queue.RealizedPnL' Decimals))  							.SetCell(columnShift + 14' rowIndex' position);    						rowIndex++;  					}    					if (IncludeOrders)  					{  						columnShift += 17;    						worker  							.SetCell(columnShift + 0' 0' LocalizedStrings.Orders)    							.SetCell(columnShift + 0' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  							.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  							.SetCell(columnShift + 2' 1' LocalizedStrings.Str128)  							.SetCell(columnShift + 3' 1' LocalizedStrings.Str1346).SetStyle(columnShift + 3' "HH:mm:ss.fff")  							.SetCell(columnShift + 4' 1' LocalizedStrings.Str1347).SetStyle(columnShift + 4' "HH:mm:ss.fff")  							.SetCell(columnShift + 5' 1' LocalizedStrings.Str1348)  							.SetCell(columnShift + 6' 1' LocalizedStrings.Price).SetStyle(columnShift + 6' typeof(decimal))  							.SetCell(columnShift + 7' 1' LocalizedStrings.Str1323).SetStyle(columnShift + 7' typeof(decimal))  							.SetCell(columnShift + 8' 1' LocalizedStrings.Str1324)  							.SetCell(columnShift + 9' 1' LocalizedStrings.State)  							.SetCell(columnShift + 10' 1' LocalizedStrings.Str1325).SetStyle(columnShift + 10' typeof(decimal))  							.SetCell(columnShift + 11' 1' LocalizedStrings.Volume).SetStyle(columnShift + 11' typeof(decimal))  							.SetCell(columnShift + 12' 1' LocalizedStrings.Type)  							.SetCell(columnShift + 13' 1' LocalizedStrings.Str1326)  							.SetCell(columnShift + 14' 1' LocalizedStrings.Str1327)  							.SetCell(columnShift + 15' 1' LocalizedStrings.Str135);    						worker  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str1329)' null' Colors.Green)  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str238)' null' Colors.Red);    						rowIndex = 2;  						foreach (var order in strategy.Orders.ToArray())  						{  							worker  								.SetCell(columnShift + 0' rowIndex' order.Id)  								.SetCell(columnShift + 1' rowIndex' order.TransactionId)  								.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  								.SetCell(columnShift + 3' rowIndex' Format(order.Time))  								.SetCell(columnShift + 4' rowIndex' Format(order.LastChangeTime))  								.SetCell(columnShift + 5' rowIndex' Format(order.LastChangeTime - order.Time))  								.SetCell(columnShift + 6' rowIndex' order.Price)  								.SetCell(columnShift + 7' rowIndex' MathHelper.Round(order.GetAveragePrice(strategy.Connector)' Decimals))  								.SetCell(columnShift + 8' rowIndex' Format(order.State))  								.SetCell(columnShift + 9' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : LocalizedStrings.Str238))  								.SetCell(columnShift + 10' rowIndex' order.Balance)  								.SetCell(columnShift + 11' rowIndex' order.Volume)  								.SetCell(columnShift + 12' rowIndex' Format(order.Type))  								.SetCell(columnShift + 13' rowIndex' Format(order.LatencyRegistration))  								.SetCell(columnShift + 14' rowIndex' Format(order.LatencyCancellation))  								.SetCell(columnShift + 15' rowIndex' order.Comment);    							rowIndex++;  						}    						var stopOrders = strategy.StopOrders.ToArray();    						if (stopOrders.Length > 0)  						{  							rowIndex += 2;    							worker  								.SetCell(columnShift + 0' rowIndex - 1' LocalizedStrings.Str1351)    								.SetCell(columnShift + 0' rowIndex' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  								.SetCell(columnShift + 1' rowIndex' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  								.SetCell(columnShift + 2' rowIndex' LocalizedStrings.Str128)  								.SetCell(columnShift + 3' rowIndex' LocalizedStrings.Time).SetStyle(columnShift + 3' "HH:mm:ss.fff")  								.SetCell(columnShift + 4' rowIndex' LocalizedStrings.Price).SetStyle(columnShift + 4' typeof(decimal))  								.SetCell(columnShift + 5' rowIndex' LocalizedStrings.Str1324)  								.SetCell(columnShift + 6' rowIndex' LocalizedStrings.State)  								.SetCell(columnShift + 7' rowIndex' LocalizedStrings.Volume).SetStyle(columnShift + 7' typeof(decimal))  								.SetCell(columnShift + 8' rowIndex' LocalizedStrings.Str1326)  								.SetCell(columnShift + 9' rowIndex' LocalizedStrings.Str1327)  								//.SetCell(columnShift + 10' rowIndex' LocalizedStrings.Str1352).SetStyle(columnShift + 9' typeof(long))  								;    							var stopParams = stopOrders[0].Condition.Parameters.Keys.ToArray();    							for (var i = 0; i < stopParams.Length; i++)  								worker.SetCell(columnShift + 11 + i' rowIndex' stopParams[i]);    							foreach (var order in stopOrders)  							{  								worker  									.SetCell(columnShift + 0' rowIndex' order.Id)  									.SetCell(columnShift + 1' rowIndex' order.TransactionId)  									.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  									.SetCell(columnShift + 3' rowIndex' Format(order.Time))  									.SetCell(columnShift + 4' rowIndex' order.Price)  									.SetCell(columnShift + 5' rowIndex' Format(order.State))  									.SetCell(columnShift + 6' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : string.Empty))  									.SetCell(columnShift + 7' rowIndex' order.Volume)  									.SetCell(columnShift + 8' rowIndex' Format(order.LatencyRegistration))  									.SetCell(columnShift + 9' rowIndex' Format(order.LatencyCancellation))  									//.SetCell(columnShift + 10' rowIndex' order.DerivedOrder != null ? (object)order.DerivedOrder.Id : string.Empty)  									;    								for (var i = 0; i < stopParams.Length; i++)  									worker.SetCell(columnShift + 11 + i' rowIndex' order.Condition.Parameters[stopParams[i]] ?? string.Empty);    								rowIndex++;  							}  						}  					}  				}    				worker.Save(FileName' true);  			}
Magic Number,StockSharp.Algo.Strategies.Reporting,ExcelStrategyReport,C:\repos\stocksharp_stocksharp\Algo\Strategies\Reporting\ExcelStrategyReport.cs,Generate,The following statement contains a magic number: using (var worker = hasTemplate ? new ExcelWorker() : new ExcelWorker(Template))  			{  				foreach (var strategy in Strategies)  				{  					if (Template.IsEmpty())  					{  						worker.RenameSheet(strategy.Name);  					}  					else  					{  						if (worker.ContainsSheet(strategy.Name))  							worker.AddSheet(strategy.Name);  					}    					worker  						.SetCell(0' 0' LocalizedStrings.Str1331)    						.SetCell(0' 1' LocalizedStrings.Security + ":")  						.SetCell(1' 1' strategy.Security != null ? strategy.Security.Id : string.Empty)    						.SetCell(0' 2' LocalizedStrings.Portfolio + ":")  						.SetCell(1' 2' strategy.Portfolio != null ? strategy.Portfolio.Name : string.Empty)    						.SetCell(0' 3' LocalizedStrings.Str1334)  						.SetCell(1' 3' Format(strategy.TotalWorkingTime))    						.SetCell(0' 4' LocalizedStrings.Str1335)  						//.SetCell(1' 4' FormatTime(base.Strategy.TotalCPUTime))    						.SetCell(0' 5' LocalizedStrings.Str862 + ":")  						.SetCell(1' 5' strategy.Position)    						.SetCell(0' 6' LocalizedStrings.PnL + ":")  						.SetCell(1' 6' strategy.PnL)    						.SetCell(0' 7' LocalizedStrings.Str159 + ":")  						.SetCell(1' 7' strategy.Commission)    						.SetCell(0' 8' LocalizedStrings.Str163 + ":")  						.SetCell(1' 8' strategy.Slippage)    						.SetCell(0' 9' LocalizedStrings.Str161 + ":")  						.SetCell(1' 9' Format(strategy.Latency));    					var rowIndex = 11;    					foreach (var parameter in strategy.StatisticManager.Parameters.SyncGet(c => c.ToArray()))  					{  						var value = parameter.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' parameter.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					rowIndex += 2;  					worker.SetCell(0' rowIndex' LocalizedStrings.Str1340);  					rowIndex++;    					foreach (var strategyParam in strategy.Parameters.CachedValues)  					{  						var value = strategyParam.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' strategyParam.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					//rowIndex += 2;  					//worker.SetCell(0' rowIndex' "Комиссия по типам:");  					//rowIndex++;    					//foreach (var group in Strategy.CommissionManager.Rules.SyncGet(c => c.ToArray()).GroupBy(c => c.GetType().GetDisplayName()))  					//{  					//	var commission = group.Sum(r => r.Commission);    					//	if (commission == 0)  					//		continue;    					//	worker  					//		.SetCell(0' rowIndex' group.Key)  					//		.SetCell(1' rowIndex' commission);    					//	rowIndex++;  					//}    					var columnShift = 3;    					worker  						.SetCell(columnShift + 0' 0' LocalizedStrings.Str985)    						.SetCell(columnShift + 0' 1' LocalizedStrings.Str1192).SetStyle(columnShift + 0' typeof(long))  						.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  						.SetCell(columnShift + 2' 1' LocalizedStrings.Time).SetStyle(columnShift + 2' "HH:mm:ss.fff")  						.SetCell(columnShift + 3' 1' LocalizedStrings.Price).SetStyle(columnShift + 3' typeof(decimal))  						.SetCell(columnShift + 4' 1' LocalizedStrings.Str1341).SetStyle(columnShift + 4' typeof(decimal))  						.SetCell(columnShift + 5' 1' LocalizedStrings.Volume).SetStyle(columnShift + 5' typeof(decimal))  						.SetCell(columnShift + 6' 1' LocalizedStrings.Str128)  						.SetCell(columnShift + 7' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 7' typeof(long))  						.SetCell(columnShift + 8' 1' LocalizedStrings.Str163).SetStyle(columnShift + 8' typeof(decimal))  						.SetCell(columnShift + 9' 1' LocalizedStrings.Str135)  						.SetCell(columnShift + 10' 1' LocalizedStrings.Str1342).SetStyle(columnShift + 11' typeof(decimal))  						.SetCell(columnShift + 11' 1' LocalizedStrings.Str1343).SetStyle(columnShift + 12' typeof(decimal))  						.SetCell(columnShift + 12' 1' LocalizedStrings.Str1344).SetStyle(columnShift + 13' typeof(decimal))  						.SetCell(columnShift + 13' 1' LocalizedStrings.Str1345).SetStyle(columnShift + 14' typeof(decimal))  						.SetCell(columnShift + 14' 1' LocalizedStrings.Str862).SetStyle(columnShift + 15' typeof(decimal));    					worker  						.SetConditionalFormatting(columnShift + 10' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 11' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 12' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 13' ComparisonOperator.Less' "0"' null' Colors.Red);    					var totalPnL = 0m;  					var position = 0m;    					var queues = new Dictionary<Security' PnLQueue>();    					rowIndex = 2;  					foreach (var trade in strategy.MyTrades.ToArray())  					{  						var info = strategy.PnLManager.ProcessMessage(trade.ToMessage());    						totalPnL += info.PnL;  						position += trade.GetPosition() ?? 0;    						var queue = queues.SafeAdd(trade.Trade.Security' key => new PnLQueue(key.ToSecurityId()));    						var localInfo = queue.Process(trade.ToMessage());    						worker  							.SetCell(columnShift + 0' rowIndex' trade.Trade.Id)  							.SetCell(columnShift + 1' rowIndex' trade.Order.TransactionId)  							.SetCell(columnShift + 2' rowIndex' Format(trade.Trade.Time))  							.SetCell(columnShift + 3' rowIndex' trade.Trade.Price)  							.SetCell(columnShift + 4' rowIndex' trade.Order.Price)  							.SetCell(columnShift + 5' rowIndex' trade.Trade.Volume)  							.SetCell(columnShift + 6' rowIndex' Format(trade.Order.Direction))  							.SetCell(columnShift + 7' rowIndex' trade.Order.Id)  							.SetCell(columnShift + 8' rowIndex' trade.Slippage)  							.SetCell(columnShift + 9' rowIndex' trade.Order.Comment)  							.SetCell(columnShift + 10' rowIndex' MathHelper.Round(info.PnL' Decimals))  							.SetCell(columnShift + 11' rowIndex' MathHelper.Round(localInfo.PnL' Decimals))  							.SetCell(columnShift + 12' rowIndex' MathHelper.Round(totalPnL' Decimals))  							.SetCell(columnShift + 13' rowIndex' MathHelper.Round(queue.RealizedPnL' Decimals))  							.SetCell(columnShift + 14' rowIndex' position);    						rowIndex++;  					}    					if (IncludeOrders)  					{  						columnShift += 17;    						worker  							.SetCell(columnShift + 0' 0' LocalizedStrings.Orders)    							.SetCell(columnShift + 0' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  							.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  							.SetCell(columnShift + 2' 1' LocalizedStrings.Str128)  							.SetCell(columnShift + 3' 1' LocalizedStrings.Str1346).SetStyle(columnShift + 3' "HH:mm:ss.fff")  							.SetCell(columnShift + 4' 1' LocalizedStrings.Str1347).SetStyle(columnShift + 4' "HH:mm:ss.fff")  							.SetCell(columnShift + 5' 1' LocalizedStrings.Str1348)  							.SetCell(columnShift + 6' 1' LocalizedStrings.Price).SetStyle(columnShift + 6' typeof(decimal))  							.SetCell(columnShift + 7' 1' LocalizedStrings.Str1323).SetStyle(columnShift + 7' typeof(decimal))  							.SetCell(columnShift + 8' 1' LocalizedStrings.Str1324)  							.SetCell(columnShift + 9' 1' LocalizedStrings.State)  							.SetCell(columnShift + 10' 1' LocalizedStrings.Str1325).SetStyle(columnShift + 10' typeof(decimal))  							.SetCell(columnShift + 11' 1' LocalizedStrings.Volume).SetStyle(columnShift + 11' typeof(decimal))  							.SetCell(columnShift + 12' 1' LocalizedStrings.Type)  							.SetCell(columnShift + 13' 1' LocalizedStrings.Str1326)  							.SetCell(columnShift + 14' 1' LocalizedStrings.Str1327)  							.SetCell(columnShift + 15' 1' LocalizedStrings.Str135);    						worker  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str1329)' null' Colors.Green)  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str238)' null' Colors.Red);    						rowIndex = 2;  						foreach (var order in strategy.Orders.ToArray())  						{  							worker  								.SetCell(columnShift + 0' rowIndex' order.Id)  								.SetCell(columnShift + 1' rowIndex' order.TransactionId)  								.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  								.SetCell(columnShift + 3' rowIndex' Format(order.Time))  								.SetCell(columnShift + 4' rowIndex' Format(order.LastChangeTime))  								.SetCell(columnShift + 5' rowIndex' Format(order.LastChangeTime - order.Time))  								.SetCell(columnShift + 6' rowIndex' order.Price)  								.SetCell(columnShift + 7' rowIndex' MathHelper.Round(order.GetAveragePrice(strategy.Connector)' Decimals))  								.SetCell(columnShift + 8' rowIndex' Format(order.State))  								.SetCell(columnShift + 9' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : LocalizedStrings.Str238))  								.SetCell(columnShift + 10' rowIndex' order.Balance)  								.SetCell(columnShift + 11' rowIndex' order.Volume)  								.SetCell(columnShift + 12' rowIndex' Format(order.Type))  								.SetCell(columnShift + 13' rowIndex' Format(order.LatencyRegistration))  								.SetCell(columnShift + 14' rowIndex' Format(order.LatencyCancellation))  								.SetCell(columnShift + 15' rowIndex' order.Comment);    							rowIndex++;  						}    						var stopOrders = strategy.StopOrders.ToArray();    						if (stopOrders.Length > 0)  						{  							rowIndex += 2;    							worker  								.SetCell(columnShift + 0' rowIndex - 1' LocalizedStrings.Str1351)    								.SetCell(columnShift + 0' rowIndex' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  								.SetCell(columnShift + 1' rowIndex' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  								.SetCell(columnShift + 2' rowIndex' LocalizedStrings.Str128)  								.SetCell(columnShift + 3' rowIndex' LocalizedStrings.Time).SetStyle(columnShift + 3' "HH:mm:ss.fff")  								.SetCell(columnShift + 4' rowIndex' LocalizedStrings.Price).SetStyle(columnShift + 4' typeof(decimal))  								.SetCell(columnShift + 5' rowIndex' LocalizedStrings.Str1324)  								.SetCell(columnShift + 6' rowIndex' LocalizedStrings.State)  								.SetCell(columnShift + 7' rowIndex' LocalizedStrings.Volume).SetStyle(columnShift + 7' typeof(decimal))  								.SetCell(columnShift + 8' rowIndex' LocalizedStrings.Str1326)  								.SetCell(columnShift + 9' rowIndex' LocalizedStrings.Str1327)  								//.SetCell(columnShift + 10' rowIndex' LocalizedStrings.Str1352).SetStyle(columnShift + 9' typeof(long))  								;    							var stopParams = stopOrders[0].Condition.Parameters.Keys.ToArray();    							for (var i = 0; i < stopParams.Length; i++)  								worker.SetCell(columnShift + 11 + i' rowIndex' stopParams[i]);    							foreach (var order in stopOrders)  							{  								worker  									.SetCell(columnShift + 0' rowIndex' order.Id)  									.SetCell(columnShift + 1' rowIndex' order.TransactionId)  									.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  									.SetCell(columnShift + 3' rowIndex' Format(order.Time))  									.SetCell(columnShift + 4' rowIndex' order.Price)  									.SetCell(columnShift + 5' rowIndex' Format(order.State))  									.SetCell(columnShift + 6' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : string.Empty))  									.SetCell(columnShift + 7' rowIndex' order.Volume)  									.SetCell(columnShift + 8' rowIndex' Format(order.LatencyRegistration))  									.SetCell(columnShift + 9' rowIndex' Format(order.LatencyCancellation))  									//.SetCell(columnShift + 10' rowIndex' order.DerivedOrder != null ? (object)order.DerivedOrder.Id : string.Empty)  									;    								for (var i = 0; i < stopParams.Length; i++)  									worker.SetCell(columnShift + 11 + i' rowIndex' order.Condition.Parameters[stopParams[i]] ?? string.Empty);    								rowIndex++;  							}  						}  					}  				}    				worker.Save(FileName' true);  			}
Magic Number,StockSharp.Algo.Strategies.Reporting,ExcelStrategyReport,C:\repos\stocksharp_stocksharp\Algo\Strategies\Reporting\ExcelStrategyReport.cs,Generate,The following statement contains a magic number: using (var worker = hasTemplate ? new ExcelWorker() : new ExcelWorker(Template))  			{  				foreach (var strategy in Strategies)  				{  					if (Template.IsEmpty())  					{  						worker.RenameSheet(strategy.Name);  					}  					else  					{  						if (worker.ContainsSheet(strategy.Name))  							worker.AddSheet(strategy.Name);  					}    					worker  						.SetCell(0' 0' LocalizedStrings.Str1331)    						.SetCell(0' 1' LocalizedStrings.Security + ":")  						.SetCell(1' 1' strategy.Security != null ? strategy.Security.Id : string.Empty)    						.SetCell(0' 2' LocalizedStrings.Portfolio + ":")  						.SetCell(1' 2' strategy.Portfolio != null ? strategy.Portfolio.Name : string.Empty)    						.SetCell(0' 3' LocalizedStrings.Str1334)  						.SetCell(1' 3' Format(strategy.TotalWorkingTime))    						.SetCell(0' 4' LocalizedStrings.Str1335)  						//.SetCell(1' 4' FormatTime(base.Strategy.TotalCPUTime))    						.SetCell(0' 5' LocalizedStrings.Str862 + ":")  						.SetCell(1' 5' strategy.Position)    						.SetCell(0' 6' LocalizedStrings.PnL + ":")  						.SetCell(1' 6' strategy.PnL)    						.SetCell(0' 7' LocalizedStrings.Str159 + ":")  						.SetCell(1' 7' strategy.Commission)    						.SetCell(0' 8' LocalizedStrings.Str163 + ":")  						.SetCell(1' 8' strategy.Slippage)    						.SetCell(0' 9' LocalizedStrings.Str161 + ":")  						.SetCell(1' 9' Format(strategy.Latency));    					var rowIndex = 11;    					foreach (var parameter in strategy.StatisticManager.Parameters.SyncGet(c => c.ToArray()))  					{  						var value = parameter.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' parameter.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					rowIndex += 2;  					worker.SetCell(0' rowIndex' LocalizedStrings.Str1340);  					rowIndex++;    					foreach (var strategyParam in strategy.Parameters.CachedValues)  					{  						var value = strategyParam.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' strategyParam.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					//rowIndex += 2;  					//worker.SetCell(0' rowIndex' "Комиссия по типам:");  					//rowIndex++;    					//foreach (var group in Strategy.CommissionManager.Rules.SyncGet(c => c.ToArray()).GroupBy(c => c.GetType().GetDisplayName()))  					//{  					//	var commission = group.Sum(r => r.Commission);    					//	if (commission == 0)  					//		continue;    					//	worker  					//		.SetCell(0' rowIndex' group.Key)  					//		.SetCell(1' rowIndex' commission);    					//	rowIndex++;  					//}    					var columnShift = 3;    					worker  						.SetCell(columnShift + 0' 0' LocalizedStrings.Str985)    						.SetCell(columnShift + 0' 1' LocalizedStrings.Str1192).SetStyle(columnShift + 0' typeof(long))  						.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  						.SetCell(columnShift + 2' 1' LocalizedStrings.Time).SetStyle(columnShift + 2' "HH:mm:ss.fff")  						.SetCell(columnShift + 3' 1' LocalizedStrings.Price).SetStyle(columnShift + 3' typeof(decimal))  						.SetCell(columnShift + 4' 1' LocalizedStrings.Str1341).SetStyle(columnShift + 4' typeof(decimal))  						.SetCell(columnShift + 5' 1' LocalizedStrings.Volume).SetStyle(columnShift + 5' typeof(decimal))  						.SetCell(columnShift + 6' 1' LocalizedStrings.Str128)  						.SetCell(columnShift + 7' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 7' typeof(long))  						.SetCell(columnShift + 8' 1' LocalizedStrings.Str163).SetStyle(columnShift + 8' typeof(decimal))  						.SetCell(columnShift + 9' 1' LocalizedStrings.Str135)  						.SetCell(columnShift + 10' 1' LocalizedStrings.Str1342).SetStyle(columnShift + 11' typeof(decimal))  						.SetCell(columnShift + 11' 1' LocalizedStrings.Str1343).SetStyle(columnShift + 12' typeof(decimal))  						.SetCell(columnShift + 12' 1' LocalizedStrings.Str1344).SetStyle(columnShift + 13' typeof(decimal))  						.SetCell(columnShift + 13' 1' LocalizedStrings.Str1345).SetStyle(columnShift + 14' typeof(decimal))  						.SetCell(columnShift + 14' 1' LocalizedStrings.Str862).SetStyle(columnShift + 15' typeof(decimal));    					worker  						.SetConditionalFormatting(columnShift + 10' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 11' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 12' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 13' ComparisonOperator.Less' "0"' null' Colors.Red);    					var totalPnL = 0m;  					var position = 0m;    					var queues = new Dictionary<Security' PnLQueue>();    					rowIndex = 2;  					foreach (var trade in strategy.MyTrades.ToArray())  					{  						var info = strategy.PnLManager.ProcessMessage(trade.ToMessage());    						totalPnL += info.PnL;  						position += trade.GetPosition() ?? 0;    						var queue = queues.SafeAdd(trade.Trade.Security' key => new PnLQueue(key.ToSecurityId()));    						var localInfo = queue.Process(trade.ToMessage());    						worker  							.SetCell(columnShift + 0' rowIndex' trade.Trade.Id)  							.SetCell(columnShift + 1' rowIndex' trade.Order.TransactionId)  							.SetCell(columnShift + 2' rowIndex' Format(trade.Trade.Time))  							.SetCell(columnShift + 3' rowIndex' trade.Trade.Price)  							.SetCell(columnShift + 4' rowIndex' trade.Order.Price)  							.SetCell(columnShift + 5' rowIndex' trade.Trade.Volume)  							.SetCell(columnShift + 6' rowIndex' Format(trade.Order.Direction))  							.SetCell(columnShift + 7' rowIndex' trade.Order.Id)  							.SetCell(columnShift + 8' rowIndex' trade.Slippage)  							.SetCell(columnShift + 9' rowIndex' trade.Order.Comment)  							.SetCell(columnShift + 10' rowIndex' MathHelper.Round(info.PnL' Decimals))  							.SetCell(columnShift + 11' rowIndex' MathHelper.Round(localInfo.PnL' Decimals))  							.SetCell(columnShift + 12' rowIndex' MathHelper.Round(totalPnL' Decimals))  							.SetCell(columnShift + 13' rowIndex' MathHelper.Round(queue.RealizedPnL' Decimals))  							.SetCell(columnShift + 14' rowIndex' position);    						rowIndex++;  					}    					if (IncludeOrders)  					{  						columnShift += 17;    						worker  							.SetCell(columnShift + 0' 0' LocalizedStrings.Orders)    							.SetCell(columnShift + 0' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  							.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  							.SetCell(columnShift + 2' 1' LocalizedStrings.Str128)  							.SetCell(columnShift + 3' 1' LocalizedStrings.Str1346).SetStyle(columnShift + 3' "HH:mm:ss.fff")  							.SetCell(columnShift + 4' 1' LocalizedStrings.Str1347).SetStyle(columnShift + 4' "HH:mm:ss.fff")  							.SetCell(columnShift + 5' 1' LocalizedStrings.Str1348)  							.SetCell(columnShift + 6' 1' LocalizedStrings.Price).SetStyle(columnShift + 6' typeof(decimal))  							.SetCell(columnShift + 7' 1' LocalizedStrings.Str1323).SetStyle(columnShift + 7' typeof(decimal))  							.SetCell(columnShift + 8' 1' LocalizedStrings.Str1324)  							.SetCell(columnShift + 9' 1' LocalizedStrings.State)  							.SetCell(columnShift + 10' 1' LocalizedStrings.Str1325).SetStyle(columnShift + 10' typeof(decimal))  							.SetCell(columnShift + 11' 1' LocalizedStrings.Volume).SetStyle(columnShift + 11' typeof(decimal))  							.SetCell(columnShift + 12' 1' LocalizedStrings.Type)  							.SetCell(columnShift + 13' 1' LocalizedStrings.Str1326)  							.SetCell(columnShift + 14' 1' LocalizedStrings.Str1327)  							.SetCell(columnShift + 15' 1' LocalizedStrings.Str135);    						worker  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str1329)' null' Colors.Green)  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str238)' null' Colors.Red);    						rowIndex = 2;  						foreach (var order in strategy.Orders.ToArray())  						{  							worker  								.SetCell(columnShift + 0' rowIndex' order.Id)  								.SetCell(columnShift + 1' rowIndex' order.TransactionId)  								.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  								.SetCell(columnShift + 3' rowIndex' Format(order.Time))  								.SetCell(columnShift + 4' rowIndex' Format(order.LastChangeTime))  								.SetCell(columnShift + 5' rowIndex' Format(order.LastChangeTime - order.Time))  								.SetCell(columnShift + 6' rowIndex' order.Price)  								.SetCell(columnShift + 7' rowIndex' MathHelper.Round(order.GetAveragePrice(strategy.Connector)' Decimals))  								.SetCell(columnShift + 8' rowIndex' Format(order.State))  								.SetCell(columnShift + 9' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : LocalizedStrings.Str238))  								.SetCell(columnShift + 10' rowIndex' order.Balance)  								.SetCell(columnShift + 11' rowIndex' order.Volume)  								.SetCell(columnShift + 12' rowIndex' Format(order.Type))  								.SetCell(columnShift + 13' rowIndex' Format(order.LatencyRegistration))  								.SetCell(columnShift + 14' rowIndex' Format(order.LatencyCancellation))  								.SetCell(columnShift + 15' rowIndex' order.Comment);    							rowIndex++;  						}    						var stopOrders = strategy.StopOrders.ToArray();    						if (stopOrders.Length > 0)  						{  							rowIndex += 2;    							worker  								.SetCell(columnShift + 0' rowIndex - 1' LocalizedStrings.Str1351)    								.SetCell(columnShift + 0' rowIndex' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  								.SetCell(columnShift + 1' rowIndex' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  								.SetCell(columnShift + 2' rowIndex' LocalizedStrings.Str128)  								.SetCell(columnShift + 3' rowIndex' LocalizedStrings.Time).SetStyle(columnShift + 3' "HH:mm:ss.fff")  								.SetCell(columnShift + 4' rowIndex' LocalizedStrings.Price).SetStyle(columnShift + 4' typeof(decimal))  								.SetCell(columnShift + 5' rowIndex' LocalizedStrings.Str1324)  								.SetCell(columnShift + 6' rowIndex' LocalizedStrings.State)  								.SetCell(columnShift + 7' rowIndex' LocalizedStrings.Volume).SetStyle(columnShift + 7' typeof(decimal))  								.SetCell(columnShift + 8' rowIndex' LocalizedStrings.Str1326)  								.SetCell(columnShift + 9' rowIndex' LocalizedStrings.Str1327)  								//.SetCell(columnShift + 10' rowIndex' LocalizedStrings.Str1352).SetStyle(columnShift + 9' typeof(long))  								;    							var stopParams = stopOrders[0].Condition.Parameters.Keys.ToArray();    							for (var i = 0; i < stopParams.Length; i++)  								worker.SetCell(columnShift + 11 + i' rowIndex' stopParams[i]);    							foreach (var order in stopOrders)  							{  								worker  									.SetCell(columnShift + 0' rowIndex' order.Id)  									.SetCell(columnShift + 1' rowIndex' order.TransactionId)  									.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  									.SetCell(columnShift + 3' rowIndex' Format(order.Time))  									.SetCell(columnShift + 4' rowIndex' order.Price)  									.SetCell(columnShift + 5' rowIndex' Format(order.State))  									.SetCell(columnShift + 6' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : string.Empty))  									.SetCell(columnShift + 7' rowIndex' order.Volume)  									.SetCell(columnShift + 8' rowIndex' Format(order.LatencyRegistration))  									.SetCell(columnShift + 9' rowIndex' Format(order.LatencyCancellation))  									//.SetCell(columnShift + 10' rowIndex' order.DerivedOrder != null ? (object)order.DerivedOrder.Id : string.Empty)  									;    								for (var i = 0; i < stopParams.Length; i++)  									worker.SetCell(columnShift + 11 + i' rowIndex' order.Condition.Parameters[stopParams[i]] ?? string.Empty);    								rowIndex++;  							}  						}  					}  				}    				worker.Save(FileName' true);  			}
Magic Number,StockSharp.Algo.Strategies.Reporting,ExcelStrategyReport,C:\repos\stocksharp_stocksharp\Algo\Strategies\Reporting\ExcelStrategyReport.cs,Generate,The following statement contains a magic number: using (var worker = hasTemplate ? new ExcelWorker() : new ExcelWorker(Template))  			{  				foreach (var strategy in Strategies)  				{  					if (Template.IsEmpty())  					{  						worker.RenameSheet(strategy.Name);  					}  					else  					{  						if (worker.ContainsSheet(strategy.Name))  							worker.AddSheet(strategy.Name);  					}    					worker  						.SetCell(0' 0' LocalizedStrings.Str1331)    						.SetCell(0' 1' LocalizedStrings.Security + ":")  						.SetCell(1' 1' strategy.Security != null ? strategy.Security.Id : string.Empty)    						.SetCell(0' 2' LocalizedStrings.Portfolio + ":")  						.SetCell(1' 2' strategy.Portfolio != null ? strategy.Portfolio.Name : string.Empty)    						.SetCell(0' 3' LocalizedStrings.Str1334)  						.SetCell(1' 3' Format(strategy.TotalWorkingTime))    						.SetCell(0' 4' LocalizedStrings.Str1335)  						//.SetCell(1' 4' FormatTime(base.Strategy.TotalCPUTime))    						.SetCell(0' 5' LocalizedStrings.Str862 + ":")  						.SetCell(1' 5' strategy.Position)    						.SetCell(0' 6' LocalizedStrings.PnL + ":")  						.SetCell(1' 6' strategy.PnL)    						.SetCell(0' 7' LocalizedStrings.Str159 + ":")  						.SetCell(1' 7' strategy.Commission)    						.SetCell(0' 8' LocalizedStrings.Str163 + ":")  						.SetCell(1' 8' strategy.Slippage)    						.SetCell(0' 9' LocalizedStrings.Str161 + ":")  						.SetCell(1' 9' Format(strategy.Latency));    					var rowIndex = 11;    					foreach (var parameter in strategy.StatisticManager.Parameters.SyncGet(c => c.ToArray()))  					{  						var value = parameter.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' parameter.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					rowIndex += 2;  					worker.SetCell(0' rowIndex' LocalizedStrings.Str1340);  					rowIndex++;    					foreach (var strategyParam in strategy.Parameters.CachedValues)  					{  						var value = strategyParam.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' strategyParam.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					//rowIndex += 2;  					//worker.SetCell(0' rowIndex' "Комиссия по типам:");  					//rowIndex++;    					//foreach (var group in Strategy.CommissionManager.Rules.SyncGet(c => c.ToArray()).GroupBy(c => c.GetType().GetDisplayName()))  					//{  					//	var commission = group.Sum(r => r.Commission);    					//	if (commission == 0)  					//		continue;    					//	worker  					//		.SetCell(0' rowIndex' group.Key)  					//		.SetCell(1' rowIndex' commission);    					//	rowIndex++;  					//}    					var columnShift = 3;    					worker  						.SetCell(columnShift + 0' 0' LocalizedStrings.Str985)    						.SetCell(columnShift + 0' 1' LocalizedStrings.Str1192).SetStyle(columnShift + 0' typeof(long))  						.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  						.SetCell(columnShift + 2' 1' LocalizedStrings.Time).SetStyle(columnShift + 2' "HH:mm:ss.fff")  						.SetCell(columnShift + 3' 1' LocalizedStrings.Price).SetStyle(columnShift + 3' typeof(decimal))  						.SetCell(columnShift + 4' 1' LocalizedStrings.Str1341).SetStyle(columnShift + 4' typeof(decimal))  						.SetCell(columnShift + 5' 1' LocalizedStrings.Volume).SetStyle(columnShift + 5' typeof(decimal))  						.SetCell(columnShift + 6' 1' LocalizedStrings.Str128)  						.SetCell(columnShift + 7' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 7' typeof(long))  						.SetCell(columnShift + 8' 1' LocalizedStrings.Str163).SetStyle(columnShift + 8' typeof(decimal))  						.SetCell(columnShift + 9' 1' LocalizedStrings.Str135)  						.SetCell(columnShift + 10' 1' LocalizedStrings.Str1342).SetStyle(columnShift + 11' typeof(decimal))  						.SetCell(columnShift + 11' 1' LocalizedStrings.Str1343).SetStyle(columnShift + 12' typeof(decimal))  						.SetCell(columnShift + 12' 1' LocalizedStrings.Str1344).SetStyle(columnShift + 13' typeof(decimal))  						.SetCell(columnShift + 13' 1' LocalizedStrings.Str1345).SetStyle(columnShift + 14' typeof(decimal))  						.SetCell(columnShift + 14' 1' LocalizedStrings.Str862).SetStyle(columnShift + 15' typeof(decimal));    					worker  						.SetConditionalFormatting(columnShift + 10' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 11' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 12' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 13' ComparisonOperator.Less' "0"' null' Colors.Red);    					var totalPnL = 0m;  					var position = 0m;    					var queues = new Dictionary<Security' PnLQueue>();    					rowIndex = 2;  					foreach (var trade in strategy.MyTrades.ToArray())  					{  						var info = strategy.PnLManager.ProcessMessage(trade.ToMessage());    						totalPnL += info.PnL;  						position += trade.GetPosition() ?? 0;    						var queue = queues.SafeAdd(trade.Trade.Security' key => new PnLQueue(key.ToSecurityId()));    						var localInfo = queue.Process(trade.ToMessage());    						worker  							.SetCell(columnShift + 0' rowIndex' trade.Trade.Id)  							.SetCell(columnShift + 1' rowIndex' trade.Order.TransactionId)  							.SetCell(columnShift + 2' rowIndex' Format(trade.Trade.Time))  							.SetCell(columnShift + 3' rowIndex' trade.Trade.Price)  							.SetCell(columnShift + 4' rowIndex' trade.Order.Price)  							.SetCell(columnShift + 5' rowIndex' trade.Trade.Volume)  							.SetCell(columnShift + 6' rowIndex' Format(trade.Order.Direction))  							.SetCell(columnShift + 7' rowIndex' trade.Order.Id)  							.SetCell(columnShift + 8' rowIndex' trade.Slippage)  							.SetCell(columnShift + 9' rowIndex' trade.Order.Comment)  							.SetCell(columnShift + 10' rowIndex' MathHelper.Round(info.PnL' Decimals))  							.SetCell(columnShift + 11' rowIndex' MathHelper.Round(localInfo.PnL' Decimals))  							.SetCell(columnShift + 12' rowIndex' MathHelper.Round(totalPnL' Decimals))  							.SetCell(columnShift + 13' rowIndex' MathHelper.Round(queue.RealizedPnL' Decimals))  							.SetCell(columnShift + 14' rowIndex' position);    						rowIndex++;  					}    					if (IncludeOrders)  					{  						columnShift += 17;    						worker  							.SetCell(columnShift + 0' 0' LocalizedStrings.Orders)    							.SetCell(columnShift + 0' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  							.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  							.SetCell(columnShift + 2' 1' LocalizedStrings.Str128)  							.SetCell(columnShift + 3' 1' LocalizedStrings.Str1346).SetStyle(columnShift + 3' "HH:mm:ss.fff")  							.SetCell(columnShift + 4' 1' LocalizedStrings.Str1347).SetStyle(columnShift + 4' "HH:mm:ss.fff")  							.SetCell(columnShift + 5' 1' LocalizedStrings.Str1348)  							.SetCell(columnShift + 6' 1' LocalizedStrings.Price).SetStyle(columnShift + 6' typeof(decimal))  							.SetCell(columnShift + 7' 1' LocalizedStrings.Str1323).SetStyle(columnShift + 7' typeof(decimal))  							.SetCell(columnShift + 8' 1' LocalizedStrings.Str1324)  							.SetCell(columnShift + 9' 1' LocalizedStrings.State)  							.SetCell(columnShift + 10' 1' LocalizedStrings.Str1325).SetStyle(columnShift + 10' typeof(decimal))  							.SetCell(columnShift + 11' 1' LocalizedStrings.Volume).SetStyle(columnShift + 11' typeof(decimal))  							.SetCell(columnShift + 12' 1' LocalizedStrings.Type)  							.SetCell(columnShift + 13' 1' LocalizedStrings.Str1326)  							.SetCell(columnShift + 14' 1' LocalizedStrings.Str1327)  							.SetCell(columnShift + 15' 1' LocalizedStrings.Str135);    						worker  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str1329)' null' Colors.Green)  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str238)' null' Colors.Red);    						rowIndex = 2;  						foreach (var order in strategy.Orders.ToArray())  						{  							worker  								.SetCell(columnShift + 0' rowIndex' order.Id)  								.SetCell(columnShift + 1' rowIndex' order.TransactionId)  								.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  								.SetCell(columnShift + 3' rowIndex' Format(order.Time))  								.SetCell(columnShift + 4' rowIndex' Format(order.LastChangeTime))  								.SetCell(columnShift + 5' rowIndex' Format(order.LastChangeTime - order.Time))  								.SetCell(columnShift + 6' rowIndex' order.Price)  								.SetCell(columnShift + 7' rowIndex' MathHelper.Round(order.GetAveragePrice(strategy.Connector)' Decimals))  								.SetCell(columnShift + 8' rowIndex' Format(order.State))  								.SetCell(columnShift + 9' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : LocalizedStrings.Str238))  								.SetCell(columnShift + 10' rowIndex' order.Balance)  								.SetCell(columnShift + 11' rowIndex' order.Volume)  								.SetCell(columnShift + 12' rowIndex' Format(order.Type))  								.SetCell(columnShift + 13' rowIndex' Format(order.LatencyRegistration))  								.SetCell(columnShift + 14' rowIndex' Format(order.LatencyCancellation))  								.SetCell(columnShift + 15' rowIndex' order.Comment);    							rowIndex++;  						}    						var stopOrders = strategy.StopOrders.ToArray();    						if (stopOrders.Length > 0)  						{  							rowIndex += 2;    							worker  								.SetCell(columnShift + 0' rowIndex - 1' LocalizedStrings.Str1351)    								.SetCell(columnShift + 0' rowIndex' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  								.SetCell(columnShift + 1' rowIndex' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  								.SetCell(columnShift + 2' rowIndex' LocalizedStrings.Str128)  								.SetCell(columnShift + 3' rowIndex' LocalizedStrings.Time).SetStyle(columnShift + 3' "HH:mm:ss.fff")  								.SetCell(columnShift + 4' rowIndex' LocalizedStrings.Price).SetStyle(columnShift + 4' typeof(decimal))  								.SetCell(columnShift + 5' rowIndex' LocalizedStrings.Str1324)  								.SetCell(columnShift + 6' rowIndex' LocalizedStrings.State)  								.SetCell(columnShift + 7' rowIndex' LocalizedStrings.Volume).SetStyle(columnShift + 7' typeof(decimal))  								.SetCell(columnShift + 8' rowIndex' LocalizedStrings.Str1326)  								.SetCell(columnShift + 9' rowIndex' LocalizedStrings.Str1327)  								//.SetCell(columnShift + 10' rowIndex' LocalizedStrings.Str1352).SetStyle(columnShift + 9' typeof(long))  								;    							var stopParams = stopOrders[0].Condition.Parameters.Keys.ToArray();    							for (var i = 0; i < stopParams.Length; i++)  								worker.SetCell(columnShift + 11 + i' rowIndex' stopParams[i]);    							foreach (var order in stopOrders)  							{  								worker  									.SetCell(columnShift + 0' rowIndex' order.Id)  									.SetCell(columnShift + 1' rowIndex' order.TransactionId)  									.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  									.SetCell(columnShift + 3' rowIndex' Format(order.Time))  									.SetCell(columnShift + 4' rowIndex' order.Price)  									.SetCell(columnShift + 5' rowIndex' Format(order.State))  									.SetCell(columnShift + 6' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : string.Empty))  									.SetCell(columnShift + 7' rowIndex' order.Volume)  									.SetCell(columnShift + 8' rowIndex' Format(order.LatencyRegistration))  									.SetCell(columnShift + 9' rowIndex' Format(order.LatencyCancellation))  									//.SetCell(columnShift + 10' rowIndex' order.DerivedOrder != null ? (object)order.DerivedOrder.Id : string.Empty)  									;    								for (var i = 0; i < stopParams.Length; i++)  									worker.SetCell(columnShift + 11 + i' rowIndex' order.Condition.Parameters[stopParams[i]] ?? string.Empty);    								rowIndex++;  							}  						}  					}  				}    				worker.Save(FileName' true);  			}
Magic Number,StockSharp.Algo.Strategies.Reporting,ExcelStrategyReport,C:\repos\stocksharp_stocksharp\Algo\Strategies\Reporting\ExcelStrategyReport.cs,Generate,The following statement contains a magic number: using (var worker = hasTemplate ? new ExcelWorker() : new ExcelWorker(Template))  			{  				foreach (var strategy in Strategies)  				{  					if (Template.IsEmpty())  					{  						worker.RenameSheet(strategy.Name);  					}  					else  					{  						if (worker.ContainsSheet(strategy.Name))  							worker.AddSheet(strategy.Name);  					}    					worker  						.SetCell(0' 0' LocalizedStrings.Str1331)    						.SetCell(0' 1' LocalizedStrings.Security + ":")  						.SetCell(1' 1' strategy.Security != null ? strategy.Security.Id : string.Empty)    						.SetCell(0' 2' LocalizedStrings.Portfolio + ":")  						.SetCell(1' 2' strategy.Portfolio != null ? strategy.Portfolio.Name : string.Empty)    						.SetCell(0' 3' LocalizedStrings.Str1334)  						.SetCell(1' 3' Format(strategy.TotalWorkingTime))    						.SetCell(0' 4' LocalizedStrings.Str1335)  						//.SetCell(1' 4' FormatTime(base.Strategy.TotalCPUTime))    						.SetCell(0' 5' LocalizedStrings.Str862 + ":")  						.SetCell(1' 5' strategy.Position)    						.SetCell(0' 6' LocalizedStrings.PnL + ":")  						.SetCell(1' 6' strategy.PnL)    						.SetCell(0' 7' LocalizedStrings.Str159 + ":")  						.SetCell(1' 7' strategy.Commission)    						.SetCell(0' 8' LocalizedStrings.Str163 + ":")  						.SetCell(1' 8' strategy.Slippage)    						.SetCell(0' 9' LocalizedStrings.Str161 + ":")  						.SetCell(1' 9' Format(strategy.Latency));    					var rowIndex = 11;    					foreach (var parameter in strategy.StatisticManager.Parameters.SyncGet(c => c.ToArray()))  					{  						var value = parameter.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' parameter.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					rowIndex += 2;  					worker.SetCell(0' rowIndex' LocalizedStrings.Str1340);  					rowIndex++;    					foreach (var strategyParam in strategy.Parameters.CachedValues)  					{  						var value = strategyParam.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' strategyParam.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					//rowIndex += 2;  					//worker.SetCell(0' rowIndex' "Комиссия по типам:");  					//rowIndex++;    					//foreach (var group in Strategy.CommissionManager.Rules.SyncGet(c => c.ToArray()).GroupBy(c => c.GetType().GetDisplayName()))  					//{  					//	var commission = group.Sum(r => r.Commission);    					//	if (commission == 0)  					//		continue;    					//	worker  					//		.SetCell(0' rowIndex' group.Key)  					//		.SetCell(1' rowIndex' commission);    					//	rowIndex++;  					//}    					var columnShift = 3;    					worker  						.SetCell(columnShift + 0' 0' LocalizedStrings.Str985)    						.SetCell(columnShift + 0' 1' LocalizedStrings.Str1192).SetStyle(columnShift + 0' typeof(long))  						.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  						.SetCell(columnShift + 2' 1' LocalizedStrings.Time).SetStyle(columnShift + 2' "HH:mm:ss.fff")  						.SetCell(columnShift + 3' 1' LocalizedStrings.Price).SetStyle(columnShift + 3' typeof(decimal))  						.SetCell(columnShift + 4' 1' LocalizedStrings.Str1341).SetStyle(columnShift + 4' typeof(decimal))  						.SetCell(columnShift + 5' 1' LocalizedStrings.Volume).SetStyle(columnShift + 5' typeof(decimal))  						.SetCell(columnShift + 6' 1' LocalizedStrings.Str128)  						.SetCell(columnShift + 7' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 7' typeof(long))  						.SetCell(columnShift + 8' 1' LocalizedStrings.Str163).SetStyle(columnShift + 8' typeof(decimal))  						.SetCell(columnShift + 9' 1' LocalizedStrings.Str135)  						.SetCell(columnShift + 10' 1' LocalizedStrings.Str1342).SetStyle(columnShift + 11' typeof(decimal))  						.SetCell(columnShift + 11' 1' LocalizedStrings.Str1343).SetStyle(columnShift + 12' typeof(decimal))  						.SetCell(columnShift + 12' 1' LocalizedStrings.Str1344).SetStyle(columnShift + 13' typeof(decimal))  						.SetCell(columnShift + 13' 1' LocalizedStrings.Str1345).SetStyle(columnShift + 14' typeof(decimal))  						.SetCell(columnShift + 14' 1' LocalizedStrings.Str862).SetStyle(columnShift + 15' typeof(decimal));    					worker  						.SetConditionalFormatting(columnShift + 10' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 11' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 12' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 13' ComparisonOperator.Less' "0"' null' Colors.Red);    					var totalPnL = 0m;  					var position = 0m;    					var queues = new Dictionary<Security' PnLQueue>();    					rowIndex = 2;  					foreach (var trade in strategy.MyTrades.ToArray())  					{  						var info = strategy.PnLManager.ProcessMessage(trade.ToMessage());    						totalPnL += info.PnL;  						position += trade.GetPosition() ?? 0;    						var queue = queues.SafeAdd(trade.Trade.Security' key => new PnLQueue(key.ToSecurityId()));    						var localInfo = queue.Process(trade.ToMessage());    						worker  							.SetCell(columnShift + 0' rowIndex' trade.Trade.Id)  							.SetCell(columnShift + 1' rowIndex' trade.Order.TransactionId)  							.SetCell(columnShift + 2' rowIndex' Format(trade.Trade.Time))  							.SetCell(columnShift + 3' rowIndex' trade.Trade.Price)  							.SetCell(columnShift + 4' rowIndex' trade.Order.Price)  							.SetCell(columnShift + 5' rowIndex' trade.Trade.Volume)  							.SetCell(columnShift + 6' rowIndex' Format(trade.Order.Direction))  							.SetCell(columnShift + 7' rowIndex' trade.Order.Id)  							.SetCell(columnShift + 8' rowIndex' trade.Slippage)  							.SetCell(columnShift + 9' rowIndex' trade.Order.Comment)  							.SetCell(columnShift + 10' rowIndex' MathHelper.Round(info.PnL' Decimals))  							.SetCell(columnShift + 11' rowIndex' MathHelper.Round(localInfo.PnL' Decimals))  							.SetCell(columnShift + 12' rowIndex' MathHelper.Round(totalPnL' Decimals))  							.SetCell(columnShift + 13' rowIndex' MathHelper.Round(queue.RealizedPnL' Decimals))  							.SetCell(columnShift + 14' rowIndex' position);    						rowIndex++;  					}    					if (IncludeOrders)  					{  						columnShift += 17;    						worker  							.SetCell(columnShift + 0' 0' LocalizedStrings.Orders)    							.SetCell(columnShift + 0' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  							.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  							.SetCell(columnShift + 2' 1' LocalizedStrings.Str128)  							.SetCell(columnShift + 3' 1' LocalizedStrings.Str1346).SetStyle(columnShift + 3' "HH:mm:ss.fff")  							.SetCell(columnShift + 4' 1' LocalizedStrings.Str1347).SetStyle(columnShift + 4' "HH:mm:ss.fff")  							.SetCell(columnShift + 5' 1' LocalizedStrings.Str1348)  							.SetCell(columnShift + 6' 1' LocalizedStrings.Price).SetStyle(columnShift + 6' typeof(decimal))  							.SetCell(columnShift + 7' 1' LocalizedStrings.Str1323).SetStyle(columnShift + 7' typeof(decimal))  							.SetCell(columnShift + 8' 1' LocalizedStrings.Str1324)  							.SetCell(columnShift + 9' 1' LocalizedStrings.State)  							.SetCell(columnShift + 10' 1' LocalizedStrings.Str1325).SetStyle(columnShift + 10' typeof(decimal))  							.SetCell(columnShift + 11' 1' LocalizedStrings.Volume).SetStyle(columnShift + 11' typeof(decimal))  							.SetCell(columnShift + 12' 1' LocalizedStrings.Type)  							.SetCell(columnShift + 13' 1' LocalizedStrings.Str1326)  							.SetCell(columnShift + 14' 1' LocalizedStrings.Str1327)  							.SetCell(columnShift + 15' 1' LocalizedStrings.Str135);    						worker  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str1329)' null' Colors.Green)  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str238)' null' Colors.Red);    						rowIndex = 2;  						foreach (var order in strategy.Orders.ToArray())  						{  							worker  								.SetCell(columnShift + 0' rowIndex' order.Id)  								.SetCell(columnShift + 1' rowIndex' order.TransactionId)  								.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  								.SetCell(columnShift + 3' rowIndex' Format(order.Time))  								.SetCell(columnShift + 4' rowIndex' Format(order.LastChangeTime))  								.SetCell(columnShift + 5' rowIndex' Format(order.LastChangeTime - order.Time))  								.SetCell(columnShift + 6' rowIndex' order.Price)  								.SetCell(columnShift + 7' rowIndex' MathHelper.Round(order.GetAveragePrice(strategy.Connector)' Decimals))  								.SetCell(columnShift + 8' rowIndex' Format(order.State))  								.SetCell(columnShift + 9' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : LocalizedStrings.Str238))  								.SetCell(columnShift + 10' rowIndex' order.Balance)  								.SetCell(columnShift + 11' rowIndex' order.Volume)  								.SetCell(columnShift + 12' rowIndex' Format(order.Type))  								.SetCell(columnShift + 13' rowIndex' Format(order.LatencyRegistration))  								.SetCell(columnShift + 14' rowIndex' Format(order.LatencyCancellation))  								.SetCell(columnShift + 15' rowIndex' order.Comment);    							rowIndex++;  						}    						var stopOrders = strategy.StopOrders.ToArray();    						if (stopOrders.Length > 0)  						{  							rowIndex += 2;    							worker  								.SetCell(columnShift + 0' rowIndex - 1' LocalizedStrings.Str1351)    								.SetCell(columnShift + 0' rowIndex' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  								.SetCell(columnShift + 1' rowIndex' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  								.SetCell(columnShift + 2' rowIndex' LocalizedStrings.Str128)  								.SetCell(columnShift + 3' rowIndex' LocalizedStrings.Time).SetStyle(columnShift + 3' "HH:mm:ss.fff")  								.SetCell(columnShift + 4' rowIndex' LocalizedStrings.Price).SetStyle(columnShift + 4' typeof(decimal))  								.SetCell(columnShift + 5' rowIndex' LocalizedStrings.Str1324)  								.SetCell(columnShift + 6' rowIndex' LocalizedStrings.State)  								.SetCell(columnShift + 7' rowIndex' LocalizedStrings.Volume).SetStyle(columnShift + 7' typeof(decimal))  								.SetCell(columnShift + 8' rowIndex' LocalizedStrings.Str1326)  								.SetCell(columnShift + 9' rowIndex' LocalizedStrings.Str1327)  								//.SetCell(columnShift + 10' rowIndex' LocalizedStrings.Str1352).SetStyle(columnShift + 9' typeof(long))  								;    							var stopParams = stopOrders[0].Condition.Parameters.Keys.ToArray();    							for (var i = 0; i < stopParams.Length; i++)  								worker.SetCell(columnShift + 11 + i' rowIndex' stopParams[i]);    							foreach (var order in stopOrders)  							{  								worker  									.SetCell(columnShift + 0' rowIndex' order.Id)  									.SetCell(columnShift + 1' rowIndex' order.TransactionId)  									.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  									.SetCell(columnShift + 3' rowIndex' Format(order.Time))  									.SetCell(columnShift + 4' rowIndex' order.Price)  									.SetCell(columnShift + 5' rowIndex' Format(order.State))  									.SetCell(columnShift + 6' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : string.Empty))  									.SetCell(columnShift + 7' rowIndex' order.Volume)  									.SetCell(columnShift + 8' rowIndex' Format(order.LatencyRegistration))  									.SetCell(columnShift + 9' rowIndex' Format(order.LatencyCancellation))  									//.SetCell(columnShift + 10' rowIndex' order.DerivedOrder != null ? (object)order.DerivedOrder.Id : string.Empty)  									;    								for (var i = 0; i < stopParams.Length; i++)  									worker.SetCell(columnShift + 11 + i' rowIndex' order.Condition.Parameters[stopParams[i]] ?? string.Empty);    								rowIndex++;  							}  						}  					}  				}    				worker.Save(FileName' true);  			}
Magic Number,StockSharp.Algo.Strategies.Reporting,ExcelStrategyReport,C:\repos\stocksharp_stocksharp\Algo\Strategies\Reporting\ExcelStrategyReport.cs,Generate,The following statement contains a magic number: using (var worker = hasTemplate ? new ExcelWorker() : new ExcelWorker(Template))  			{  				foreach (var strategy in Strategies)  				{  					if (Template.IsEmpty())  					{  						worker.RenameSheet(strategy.Name);  					}  					else  					{  						if (worker.ContainsSheet(strategy.Name))  							worker.AddSheet(strategy.Name);  					}    					worker  						.SetCell(0' 0' LocalizedStrings.Str1331)    						.SetCell(0' 1' LocalizedStrings.Security + ":")  						.SetCell(1' 1' strategy.Security != null ? strategy.Security.Id : string.Empty)    						.SetCell(0' 2' LocalizedStrings.Portfolio + ":")  						.SetCell(1' 2' strategy.Portfolio != null ? strategy.Portfolio.Name : string.Empty)    						.SetCell(0' 3' LocalizedStrings.Str1334)  						.SetCell(1' 3' Format(strategy.TotalWorkingTime))    						.SetCell(0' 4' LocalizedStrings.Str1335)  						//.SetCell(1' 4' FormatTime(base.Strategy.TotalCPUTime))    						.SetCell(0' 5' LocalizedStrings.Str862 + ":")  						.SetCell(1' 5' strategy.Position)    						.SetCell(0' 6' LocalizedStrings.PnL + ":")  						.SetCell(1' 6' strategy.PnL)    						.SetCell(0' 7' LocalizedStrings.Str159 + ":")  						.SetCell(1' 7' strategy.Commission)    						.SetCell(0' 8' LocalizedStrings.Str163 + ":")  						.SetCell(1' 8' strategy.Slippage)    						.SetCell(0' 9' LocalizedStrings.Str161 + ":")  						.SetCell(1' 9' Format(strategy.Latency));    					var rowIndex = 11;    					foreach (var parameter in strategy.StatisticManager.Parameters.SyncGet(c => c.ToArray()))  					{  						var value = parameter.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' parameter.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					rowIndex += 2;  					worker.SetCell(0' rowIndex' LocalizedStrings.Str1340);  					rowIndex++;    					foreach (var strategyParam in strategy.Parameters.CachedValues)  					{  						var value = strategyParam.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' strategyParam.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					//rowIndex += 2;  					//worker.SetCell(0' rowIndex' "Комиссия по типам:");  					//rowIndex++;    					//foreach (var group in Strategy.CommissionManager.Rules.SyncGet(c => c.ToArray()).GroupBy(c => c.GetType().GetDisplayName()))  					//{  					//	var commission = group.Sum(r => r.Commission);    					//	if (commission == 0)  					//		continue;    					//	worker  					//		.SetCell(0' rowIndex' group.Key)  					//		.SetCell(1' rowIndex' commission);    					//	rowIndex++;  					//}    					var columnShift = 3;    					worker  						.SetCell(columnShift + 0' 0' LocalizedStrings.Str985)    						.SetCell(columnShift + 0' 1' LocalizedStrings.Str1192).SetStyle(columnShift + 0' typeof(long))  						.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  						.SetCell(columnShift + 2' 1' LocalizedStrings.Time).SetStyle(columnShift + 2' "HH:mm:ss.fff")  						.SetCell(columnShift + 3' 1' LocalizedStrings.Price).SetStyle(columnShift + 3' typeof(decimal))  						.SetCell(columnShift + 4' 1' LocalizedStrings.Str1341).SetStyle(columnShift + 4' typeof(decimal))  						.SetCell(columnShift + 5' 1' LocalizedStrings.Volume).SetStyle(columnShift + 5' typeof(decimal))  						.SetCell(columnShift + 6' 1' LocalizedStrings.Str128)  						.SetCell(columnShift + 7' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 7' typeof(long))  						.SetCell(columnShift + 8' 1' LocalizedStrings.Str163).SetStyle(columnShift + 8' typeof(decimal))  						.SetCell(columnShift + 9' 1' LocalizedStrings.Str135)  						.SetCell(columnShift + 10' 1' LocalizedStrings.Str1342).SetStyle(columnShift + 11' typeof(decimal))  						.SetCell(columnShift + 11' 1' LocalizedStrings.Str1343).SetStyle(columnShift + 12' typeof(decimal))  						.SetCell(columnShift + 12' 1' LocalizedStrings.Str1344).SetStyle(columnShift + 13' typeof(decimal))  						.SetCell(columnShift + 13' 1' LocalizedStrings.Str1345).SetStyle(columnShift + 14' typeof(decimal))  						.SetCell(columnShift + 14' 1' LocalizedStrings.Str862).SetStyle(columnShift + 15' typeof(decimal));    					worker  						.SetConditionalFormatting(columnShift + 10' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 11' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 12' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 13' ComparisonOperator.Less' "0"' null' Colors.Red);    					var totalPnL = 0m;  					var position = 0m;    					var queues = new Dictionary<Security' PnLQueue>();    					rowIndex = 2;  					foreach (var trade in strategy.MyTrades.ToArray())  					{  						var info = strategy.PnLManager.ProcessMessage(trade.ToMessage());    						totalPnL += info.PnL;  						position += trade.GetPosition() ?? 0;    						var queue = queues.SafeAdd(trade.Trade.Security' key => new PnLQueue(key.ToSecurityId()));    						var localInfo = queue.Process(trade.ToMessage());    						worker  							.SetCell(columnShift + 0' rowIndex' trade.Trade.Id)  							.SetCell(columnShift + 1' rowIndex' trade.Order.TransactionId)  							.SetCell(columnShift + 2' rowIndex' Format(trade.Trade.Time))  							.SetCell(columnShift + 3' rowIndex' trade.Trade.Price)  							.SetCell(columnShift + 4' rowIndex' trade.Order.Price)  							.SetCell(columnShift + 5' rowIndex' trade.Trade.Volume)  							.SetCell(columnShift + 6' rowIndex' Format(trade.Order.Direction))  							.SetCell(columnShift + 7' rowIndex' trade.Order.Id)  							.SetCell(columnShift + 8' rowIndex' trade.Slippage)  							.SetCell(columnShift + 9' rowIndex' trade.Order.Comment)  							.SetCell(columnShift + 10' rowIndex' MathHelper.Round(info.PnL' Decimals))  							.SetCell(columnShift + 11' rowIndex' MathHelper.Round(localInfo.PnL' Decimals))  							.SetCell(columnShift + 12' rowIndex' MathHelper.Round(totalPnL' Decimals))  							.SetCell(columnShift + 13' rowIndex' MathHelper.Round(queue.RealizedPnL' Decimals))  							.SetCell(columnShift + 14' rowIndex' position);    						rowIndex++;  					}    					if (IncludeOrders)  					{  						columnShift += 17;    						worker  							.SetCell(columnShift + 0' 0' LocalizedStrings.Orders)    							.SetCell(columnShift + 0' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  							.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  							.SetCell(columnShift + 2' 1' LocalizedStrings.Str128)  							.SetCell(columnShift + 3' 1' LocalizedStrings.Str1346).SetStyle(columnShift + 3' "HH:mm:ss.fff")  							.SetCell(columnShift + 4' 1' LocalizedStrings.Str1347).SetStyle(columnShift + 4' "HH:mm:ss.fff")  							.SetCell(columnShift + 5' 1' LocalizedStrings.Str1348)  							.SetCell(columnShift + 6' 1' LocalizedStrings.Price).SetStyle(columnShift + 6' typeof(decimal))  							.SetCell(columnShift + 7' 1' LocalizedStrings.Str1323).SetStyle(columnShift + 7' typeof(decimal))  							.SetCell(columnShift + 8' 1' LocalizedStrings.Str1324)  							.SetCell(columnShift + 9' 1' LocalizedStrings.State)  							.SetCell(columnShift + 10' 1' LocalizedStrings.Str1325).SetStyle(columnShift + 10' typeof(decimal))  							.SetCell(columnShift + 11' 1' LocalizedStrings.Volume).SetStyle(columnShift + 11' typeof(decimal))  							.SetCell(columnShift + 12' 1' LocalizedStrings.Type)  							.SetCell(columnShift + 13' 1' LocalizedStrings.Str1326)  							.SetCell(columnShift + 14' 1' LocalizedStrings.Str1327)  							.SetCell(columnShift + 15' 1' LocalizedStrings.Str135);    						worker  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str1329)' null' Colors.Green)  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str238)' null' Colors.Red);    						rowIndex = 2;  						foreach (var order in strategy.Orders.ToArray())  						{  							worker  								.SetCell(columnShift + 0' rowIndex' order.Id)  								.SetCell(columnShift + 1' rowIndex' order.TransactionId)  								.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  								.SetCell(columnShift + 3' rowIndex' Format(order.Time))  								.SetCell(columnShift + 4' rowIndex' Format(order.LastChangeTime))  								.SetCell(columnShift + 5' rowIndex' Format(order.LastChangeTime - order.Time))  								.SetCell(columnShift + 6' rowIndex' order.Price)  								.SetCell(columnShift + 7' rowIndex' MathHelper.Round(order.GetAveragePrice(strategy.Connector)' Decimals))  								.SetCell(columnShift + 8' rowIndex' Format(order.State))  								.SetCell(columnShift + 9' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : LocalizedStrings.Str238))  								.SetCell(columnShift + 10' rowIndex' order.Balance)  								.SetCell(columnShift + 11' rowIndex' order.Volume)  								.SetCell(columnShift + 12' rowIndex' Format(order.Type))  								.SetCell(columnShift + 13' rowIndex' Format(order.LatencyRegistration))  								.SetCell(columnShift + 14' rowIndex' Format(order.LatencyCancellation))  								.SetCell(columnShift + 15' rowIndex' order.Comment);    							rowIndex++;  						}    						var stopOrders = strategy.StopOrders.ToArray();    						if (stopOrders.Length > 0)  						{  							rowIndex += 2;    							worker  								.SetCell(columnShift + 0' rowIndex - 1' LocalizedStrings.Str1351)    								.SetCell(columnShift + 0' rowIndex' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  								.SetCell(columnShift + 1' rowIndex' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  								.SetCell(columnShift + 2' rowIndex' LocalizedStrings.Str128)  								.SetCell(columnShift + 3' rowIndex' LocalizedStrings.Time).SetStyle(columnShift + 3' "HH:mm:ss.fff")  								.SetCell(columnShift + 4' rowIndex' LocalizedStrings.Price).SetStyle(columnShift + 4' typeof(decimal))  								.SetCell(columnShift + 5' rowIndex' LocalizedStrings.Str1324)  								.SetCell(columnShift + 6' rowIndex' LocalizedStrings.State)  								.SetCell(columnShift + 7' rowIndex' LocalizedStrings.Volume).SetStyle(columnShift + 7' typeof(decimal))  								.SetCell(columnShift + 8' rowIndex' LocalizedStrings.Str1326)  								.SetCell(columnShift + 9' rowIndex' LocalizedStrings.Str1327)  								//.SetCell(columnShift + 10' rowIndex' LocalizedStrings.Str1352).SetStyle(columnShift + 9' typeof(long))  								;    							var stopParams = stopOrders[0].Condition.Parameters.Keys.ToArray();    							for (var i = 0; i < stopParams.Length; i++)  								worker.SetCell(columnShift + 11 + i' rowIndex' stopParams[i]);    							foreach (var order in stopOrders)  							{  								worker  									.SetCell(columnShift + 0' rowIndex' order.Id)  									.SetCell(columnShift + 1' rowIndex' order.TransactionId)  									.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  									.SetCell(columnShift + 3' rowIndex' Format(order.Time))  									.SetCell(columnShift + 4' rowIndex' order.Price)  									.SetCell(columnShift + 5' rowIndex' Format(order.State))  									.SetCell(columnShift + 6' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : string.Empty))  									.SetCell(columnShift + 7' rowIndex' order.Volume)  									.SetCell(columnShift + 8' rowIndex' Format(order.LatencyRegistration))  									.SetCell(columnShift + 9' rowIndex' Format(order.LatencyCancellation))  									//.SetCell(columnShift + 10' rowIndex' order.DerivedOrder != null ? (object)order.DerivedOrder.Id : string.Empty)  									;    								for (var i = 0; i < stopParams.Length; i++)  									worker.SetCell(columnShift + 11 + i' rowIndex' order.Condition.Parameters[stopParams[i]] ?? string.Empty);    								rowIndex++;  							}  						}  					}  				}    				worker.Save(FileName' true);  			}
Magic Number,StockSharp.Algo.Strategies.Reporting,ExcelStrategyReport,C:\repos\stocksharp_stocksharp\Algo\Strategies\Reporting\ExcelStrategyReport.cs,Generate,The following statement contains a magic number: using (var worker = hasTemplate ? new ExcelWorker() : new ExcelWorker(Template))  			{  				foreach (var strategy in Strategies)  				{  					if (Template.IsEmpty())  					{  						worker.RenameSheet(strategy.Name);  					}  					else  					{  						if (worker.ContainsSheet(strategy.Name))  							worker.AddSheet(strategy.Name);  					}    					worker  						.SetCell(0' 0' LocalizedStrings.Str1331)    						.SetCell(0' 1' LocalizedStrings.Security + ":")  						.SetCell(1' 1' strategy.Security != null ? strategy.Security.Id : string.Empty)    						.SetCell(0' 2' LocalizedStrings.Portfolio + ":")  						.SetCell(1' 2' strategy.Portfolio != null ? strategy.Portfolio.Name : string.Empty)    						.SetCell(0' 3' LocalizedStrings.Str1334)  						.SetCell(1' 3' Format(strategy.TotalWorkingTime))    						.SetCell(0' 4' LocalizedStrings.Str1335)  						//.SetCell(1' 4' FormatTime(base.Strategy.TotalCPUTime))    						.SetCell(0' 5' LocalizedStrings.Str862 + ":")  						.SetCell(1' 5' strategy.Position)    						.SetCell(0' 6' LocalizedStrings.PnL + ":")  						.SetCell(1' 6' strategy.PnL)    						.SetCell(0' 7' LocalizedStrings.Str159 + ":")  						.SetCell(1' 7' strategy.Commission)    						.SetCell(0' 8' LocalizedStrings.Str163 + ":")  						.SetCell(1' 8' strategy.Slippage)    						.SetCell(0' 9' LocalizedStrings.Str161 + ":")  						.SetCell(1' 9' Format(strategy.Latency));    					var rowIndex = 11;    					foreach (var parameter in strategy.StatisticManager.Parameters.SyncGet(c => c.ToArray()))  					{  						var value = parameter.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' parameter.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					rowIndex += 2;  					worker.SetCell(0' rowIndex' LocalizedStrings.Str1340);  					rowIndex++;    					foreach (var strategyParam in strategy.Parameters.CachedValues)  					{  						var value = strategyParam.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' strategyParam.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					//rowIndex += 2;  					//worker.SetCell(0' rowIndex' "Комиссия по типам:");  					//rowIndex++;    					//foreach (var group in Strategy.CommissionManager.Rules.SyncGet(c => c.ToArray()).GroupBy(c => c.GetType().GetDisplayName()))  					//{  					//	var commission = group.Sum(r => r.Commission);    					//	if (commission == 0)  					//		continue;    					//	worker  					//		.SetCell(0' rowIndex' group.Key)  					//		.SetCell(1' rowIndex' commission);    					//	rowIndex++;  					//}    					var columnShift = 3;    					worker  						.SetCell(columnShift + 0' 0' LocalizedStrings.Str985)    						.SetCell(columnShift + 0' 1' LocalizedStrings.Str1192).SetStyle(columnShift + 0' typeof(long))  						.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  						.SetCell(columnShift + 2' 1' LocalizedStrings.Time).SetStyle(columnShift + 2' "HH:mm:ss.fff")  						.SetCell(columnShift + 3' 1' LocalizedStrings.Price).SetStyle(columnShift + 3' typeof(decimal))  						.SetCell(columnShift + 4' 1' LocalizedStrings.Str1341).SetStyle(columnShift + 4' typeof(decimal))  						.SetCell(columnShift + 5' 1' LocalizedStrings.Volume).SetStyle(columnShift + 5' typeof(decimal))  						.SetCell(columnShift + 6' 1' LocalizedStrings.Str128)  						.SetCell(columnShift + 7' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 7' typeof(long))  						.SetCell(columnShift + 8' 1' LocalizedStrings.Str163).SetStyle(columnShift + 8' typeof(decimal))  						.SetCell(columnShift + 9' 1' LocalizedStrings.Str135)  						.SetCell(columnShift + 10' 1' LocalizedStrings.Str1342).SetStyle(columnShift + 11' typeof(decimal))  						.SetCell(columnShift + 11' 1' LocalizedStrings.Str1343).SetStyle(columnShift + 12' typeof(decimal))  						.SetCell(columnShift + 12' 1' LocalizedStrings.Str1344).SetStyle(columnShift + 13' typeof(decimal))  						.SetCell(columnShift + 13' 1' LocalizedStrings.Str1345).SetStyle(columnShift + 14' typeof(decimal))  						.SetCell(columnShift + 14' 1' LocalizedStrings.Str862).SetStyle(columnShift + 15' typeof(decimal));    					worker  						.SetConditionalFormatting(columnShift + 10' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 11' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 12' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 13' ComparisonOperator.Less' "0"' null' Colors.Red);    					var totalPnL = 0m;  					var position = 0m;    					var queues = new Dictionary<Security' PnLQueue>();    					rowIndex = 2;  					foreach (var trade in strategy.MyTrades.ToArray())  					{  						var info = strategy.PnLManager.ProcessMessage(trade.ToMessage());    						totalPnL += info.PnL;  						position += trade.GetPosition() ?? 0;    						var queue = queues.SafeAdd(trade.Trade.Security' key => new PnLQueue(key.ToSecurityId()));    						var localInfo = queue.Process(trade.ToMessage());    						worker  							.SetCell(columnShift + 0' rowIndex' trade.Trade.Id)  							.SetCell(columnShift + 1' rowIndex' trade.Order.TransactionId)  							.SetCell(columnShift + 2' rowIndex' Format(trade.Trade.Time))  							.SetCell(columnShift + 3' rowIndex' trade.Trade.Price)  							.SetCell(columnShift + 4' rowIndex' trade.Order.Price)  							.SetCell(columnShift + 5' rowIndex' trade.Trade.Volume)  							.SetCell(columnShift + 6' rowIndex' Format(trade.Order.Direction))  							.SetCell(columnShift + 7' rowIndex' trade.Order.Id)  							.SetCell(columnShift + 8' rowIndex' trade.Slippage)  							.SetCell(columnShift + 9' rowIndex' trade.Order.Comment)  							.SetCell(columnShift + 10' rowIndex' MathHelper.Round(info.PnL' Decimals))  							.SetCell(columnShift + 11' rowIndex' MathHelper.Round(localInfo.PnL' Decimals))  							.SetCell(columnShift + 12' rowIndex' MathHelper.Round(totalPnL' Decimals))  							.SetCell(columnShift + 13' rowIndex' MathHelper.Round(queue.RealizedPnL' Decimals))  							.SetCell(columnShift + 14' rowIndex' position);    						rowIndex++;  					}    					if (IncludeOrders)  					{  						columnShift += 17;    						worker  							.SetCell(columnShift + 0' 0' LocalizedStrings.Orders)    							.SetCell(columnShift + 0' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  							.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  							.SetCell(columnShift + 2' 1' LocalizedStrings.Str128)  							.SetCell(columnShift + 3' 1' LocalizedStrings.Str1346).SetStyle(columnShift + 3' "HH:mm:ss.fff")  							.SetCell(columnShift + 4' 1' LocalizedStrings.Str1347).SetStyle(columnShift + 4' "HH:mm:ss.fff")  							.SetCell(columnShift + 5' 1' LocalizedStrings.Str1348)  							.SetCell(columnShift + 6' 1' LocalizedStrings.Price).SetStyle(columnShift + 6' typeof(decimal))  							.SetCell(columnShift + 7' 1' LocalizedStrings.Str1323).SetStyle(columnShift + 7' typeof(decimal))  							.SetCell(columnShift + 8' 1' LocalizedStrings.Str1324)  							.SetCell(columnShift + 9' 1' LocalizedStrings.State)  							.SetCell(columnShift + 10' 1' LocalizedStrings.Str1325).SetStyle(columnShift + 10' typeof(decimal))  							.SetCell(columnShift + 11' 1' LocalizedStrings.Volume).SetStyle(columnShift + 11' typeof(decimal))  							.SetCell(columnShift + 12' 1' LocalizedStrings.Type)  							.SetCell(columnShift + 13' 1' LocalizedStrings.Str1326)  							.SetCell(columnShift + 14' 1' LocalizedStrings.Str1327)  							.SetCell(columnShift + 15' 1' LocalizedStrings.Str135);    						worker  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str1329)' null' Colors.Green)  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str238)' null' Colors.Red);    						rowIndex = 2;  						foreach (var order in strategy.Orders.ToArray())  						{  							worker  								.SetCell(columnShift + 0' rowIndex' order.Id)  								.SetCell(columnShift + 1' rowIndex' order.TransactionId)  								.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  								.SetCell(columnShift + 3' rowIndex' Format(order.Time))  								.SetCell(columnShift + 4' rowIndex' Format(order.LastChangeTime))  								.SetCell(columnShift + 5' rowIndex' Format(order.LastChangeTime - order.Time))  								.SetCell(columnShift + 6' rowIndex' order.Price)  								.SetCell(columnShift + 7' rowIndex' MathHelper.Round(order.GetAveragePrice(strategy.Connector)' Decimals))  								.SetCell(columnShift + 8' rowIndex' Format(order.State))  								.SetCell(columnShift + 9' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : LocalizedStrings.Str238))  								.SetCell(columnShift + 10' rowIndex' order.Balance)  								.SetCell(columnShift + 11' rowIndex' order.Volume)  								.SetCell(columnShift + 12' rowIndex' Format(order.Type))  								.SetCell(columnShift + 13' rowIndex' Format(order.LatencyRegistration))  								.SetCell(columnShift + 14' rowIndex' Format(order.LatencyCancellation))  								.SetCell(columnShift + 15' rowIndex' order.Comment);    							rowIndex++;  						}    						var stopOrders = strategy.StopOrders.ToArray();    						if (stopOrders.Length > 0)  						{  							rowIndex += 2;    							worker  								.SetCell(columnShift + 0' rowIndex - 1' LocalizedStrings.Str1351)    								.SetCell(columnShift + 0' rowIndex' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  								.SetCell(columnShift + 1' rowIndex' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  								.SetCell(columnShift + 2' rowIndex' LocalizedStrings.Str128)  								.SetCell(columnShift + 3' rowIndex' LocalizedStrings.Time).SetStyle(columnShift + 3' "HH:mm:ss.fff")  								.SetCell(columnShift + 4' rowIndex' LocalizedStrings.Price).SetStyle(columnShift + 4' typeof(decimal))  								.SetCell(columnShift + 5' rowIndex' LocalizedStrings.Str1324)  								.SetCell(columnShift + 6' rowIndex' LocalizedStrings.State)  								.SetCell(columnShift + 7' rowIndex' LocalizedStrings.Volume).SetStyle(columnShift + 7' typeof(decimal))  								.SetCell(columnShift + 8' rowIndex' LocalizedStrings.Str1326)  								.SetCell(columnShift + 9' rowIndex' LocalizedStrings.Str1327)  								//.SetCell(columnShift + 10' rowIndex' LocalizedStrings.Str1352).SetStyle(columnShift + 9' typeof(long))  								;    							var stopParams = stopOrders[0].Condition.Parameters.Keys.ToArray();    							for (var i = 0; i < stopParams.Length; i++)  								worker.SetCell(columnShift + 11 + i' rowIndex' stopParams[i]);    							foreach (var order in stopOrders)  							{  								worker  									.SetCell(columnShift + 0' rowIndex' order.Id)  									.SetCell(columnShift + 1' rowIndex' order.TransactionId)  									.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  									.SetCell(columnShift + 3' rowIndex' Format(order.Time))  									.SetCell(columnShift + 4' rowIndex' order.Price)  									.SetCell(columnShift + 5' rowIndex' Format(order.State))  									.SetCell(columnShift + 6' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : string.Empty))  									.SetCell(columnShift + 7' rowIndex' order.Volume)  									.SetCell(columnShift + 8' rowIndex' Format(order.LatencyRegistration))  									.SetCell(columnShift + 9' rowIndex' Format(order.LatencyCancellation))  									//.SetCell(columnShift + 10' rowIndex' order.DerivedOrder != null ? (object)order.DerivedOrder.Id : string.Empty)  									;    								for (var i = 0; i < stopParams.Length; i++)  									worker.SetCell(columnShift + 11 + i' rowIndex' order.Condition.Parameters[stopParams[i]] ?? string.Empty);    								rowIndex++;  							}  						}  					}  				}    				worker.Save(FileName' true);  			}
Magic Number,StockSharp.Algo.Strategies.Reporting,ExcelStrategyReport,C:\repos\stocksharp_stocksharp\Algo\Strategies\Reporting\ExcelStrategyReport.cs,Generate,The following statement contains a magic number: using (var worker = hasTemplate ? new ExcelWorker() : new ExcelWorker(Template))  			{  				foreach (var strategy in Strategies)  				{  					if (Template.IsEmpty())  					{  						worker.RenameSheet(strategy.Name);  					}  					else  					{  						if (worker.ContainsSheet(strategy.Name))  							worker.AddSheet(strategy.Name);  					}    					worker  						.SetCell(0' 0' LocalizedStrings.Str1331)    						.SetCell(0' 1' LocalizedStrings.Security + ":")  						.SetCell(1' 1' strategy.Security != null ? strategy.Security.Id : string.Empty)    						.SetCell(0' 2' LocalizedStrings.Portfolio + ":")  						.SetCell(1' 2' strategy.Portfolio != null ? strategy.Portfolio.Name : string.Empty)    						.SetCell(0' 3' LocalizedStrings.Str1334)  						.SetCell(1' 3' Format(strategy.TotalWorkingTime))    						.SetCell(0' 4' LocalizedStrings.Str1335)  						//.SetCell(1' 4' FormatTime(base.Strategy.TotalCPUTime))    						.SetCell(0' 5' LocalizedStrings.Str862 + ":")  						.SetCell(1' 5' strategy.Position)    						.SetCell(0' 6' LocalizedStrings.PnL + ":")  						.SetCell(1' 6' strategy.PnL)    						.SetCell(0' 7' LocalizedStrings.Str159 + ":")  						.SetCell(1' 7' strategy.Commission)    						.SetCell(0' 8' LocalizedStrings.Str163 + ":")  						.SetCell(1' 8' strategy.Slippage)    						.SetCell(0' 9' LocalizedStrings.Str161 + ":")  						.SetCell(1' 9' Format(strategy.Latency));    					var rowIndex = 11;    					foreach (var parameter in strategy.StatisticManager.Parameters.SyncGet(c => c.ToArray()))  					{  						var value = parameter.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' parameter.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					rowIndex += 2;  					worker.SetCell(0' rowIndex' LocalizedStrings.Str1340);  					rowIndex++;    					foreach (var strategyParam in strategy.Parameters.CachedValues)  					{  						var value = strategyParam.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' strategyParam.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					//rowIndex += 2;  					//worker.SetCell(0' rowIndex' "Комиссия по типам:");  					//rowIndex++;    					//foreach (var group in Strategy.CommissionManager.Rules.SyncGet(c => c.ToArray()).GroupBy(c => c.GetType().GetDisplayName()))  					//{  					//	var commission = group.Sum(r => r.Commission);    					//	if (commission == 0)  					//		continue;    					//	worker  					//		.SetCell(0' rowIndex' group.Key)  					//		.SetCell(1' rowIndex' commission);    					//	rowIndex++;  					//}    					var columnShift = 3;    					worker  						.SetCell(columnShift + 0' 0' LocalizedStrings.Str985)    						.SetCell(columnShift + 0' 1' LocalizedStrings.Str1192).SetStyle(columnShift + 0' typeof(long))  						.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  						.SetCell(columnShift + 2' 1' LocalizedStrings.Time).SetStyle(columnShift + 2' "HH:mm:ss.fff")  						.SetCell(columnShift + 3' 1' LocalizedStrings.Price).SetStyle(columnShift + 3' typeof(decimal))  						.SetCell(columnShift + 4' 1' LocalizedStrings.Str1341).SetStyle(columnShift + 4' typeof(decimal))  						.SetCell(columnShift + 5' 1' LocalizedStrings.Volume).SetStyle(columnShift + 5' typeof(decimal))  						.SetCell(columnShift + 6' 1' LocalizedStrings.Str128)  						.SetCell(columnShift + 7' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 7' typeof(long))  						.SetCell(columnShift + 8' 1' LocalizedStrings.Str163).SetStyle(columnShift + 8' typeof(decimal))  						.SetCell(columnShift + 9' 1' LocalizedStrings.Str135)  						.SetCell(columnShift + 10' 1' LocalizedStrings.Str1342).SetStyle(columnShift + 11' typeof(decimal))  						.SetCell(columnShift + 11' 1' LocalizedStrings.Str1343).SetStyle(columnShift + 12' typeof(decimal))  						.SetCell(columnShift + 12' 1' LocalizedStrings.Str1344).SetStyle(columnShift + 13' typeof(decimal))  						.SetCell(columnShift + 13' 1' LocalizedStrings.Str1345).SetStyle(columnShift + 14' typeof(decimal))  						.SetCell(columnShift + 14' 1' LocalizedStrings.Str862).SetStyle(columnShift + 15' typeof(decimal));    					worker  						.SetConditionalFormatting(columnShift + 10' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 11' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 12' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 13' ComparisonOperator.Less' "0"' null' Colors.Red);    					var totalPnL = 0m;  					var position = 0m;    					var queues = new Dictionary<Security' PnLQueue>();    					rowIndex = 2;  					foreach (var trade in strategy.MyTrades.ToArray())  					{  						var info = strategy.PnLManager.ProcessMessage(trade.ToMessage());    						totalPnL += info.PnL;  						position += trade.GetPosition() ?? 0;    						var queue = queues.SafeAdd(trade.Trade.Security' key => new PnLQueue(key.ToSecurityId()));    						var localInfo = queue.Process(trade.ToMessage());    						worker  							.SetCell(columnShift + 0' rowIndex' trade.Trade.Id)  							.SetCell(columnShift + 1' rowIndex' trade.Order.TransactionId)  							.SetCell(columnShift + 2' rowIndex' Format(trade.Trade.Time))  							.SetCell(columnShift + 3' rowIndex' trade.Trade.Price)  							.SetCell(columnShift + 4' rowIndex' trade.Order.Price)  							.SetCell(columnShift + 5' rowIndex' trade.Trade.Volume)  							.SetCell(columnShift + 6' rowIndex' Format(trade.Order.Direction))  							.SetCell(columnShift + 7' rowIndex' trade.Order.Id)  							.SetCell(columnShift + 8' rowIndex' trade.Slippage)  							.SetCell(columnShift + 9' rowIndex' trade.Order.Comment)  							.SetCell(columnShift + 10' rowIndex' MathHelper.Round(info.PnL' Decimals))  							.SetCell(columnShift + 11' rowIndex' MathHelper.Round(localInfo.PnL' Decimals))  							.SetCell(columnShift + 12' rowIndex' MathHelper.Round(totalPnL' Decimals))  							.SetCell(columnShift + 13' rowIndex' MathHelper.Round(queue.RealizedPnL' Decimals))  							.SetCell(columnShift + 14' rowIndex' position);    						rowIndex++;  					}    					if (IncludeOrders)  					{  						columnShift += 17;    						worker  							.SetCell(columnShift + 0' 0' LocalizedStrings.Orders)    							.SetCell(columnShift + 0' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  							.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  							.SetCell(columnShift + 2' 1' LocalizedStrings.Str128)  							.SetCell(columnShift + 3' 1' LocalizedStrings.Str1346).SetStyle(columnShift + 3' "HH:mm:ss.fff")  							.SetCell(columnShift + 4' 1' LocalizedStrings.Str1347).SetStyle(columnShift + 4' "HH:mm:ss.fff")  							.SetCell(columnShift + 5' 1' LocalizedStrings.Str1348)  							.SetCell(columnShift + 6' 1' LocalizedStrings.Price).SetStyle(columnShift + 6' typeof(decimal))  							.SetCell(columnShift + 7' 1' LocalizedStrings.Str1323).SetStyle(columnShift + 7' typeof(decimal))  							.SetCell(columnShift + 8' 1' LocalizedStrings.Str1324)  							.SetCell(columnShift + 9' 1' LocalizedStrings.State)  							.SetCell(columnShift + 10' 1' LocalizedStrings.Str1325).SetStyle(columnShift + 10' typeof(decimal))  							.SetCell(columnShift + 11' 1' LocalizedStrings.Volume).SetStyle(columnShift + 11' typeof(decimal))  							.SetCell(columnShift + 12' 1' LocalizedStrings.Type)  							.SetCell(columnShift + 13' 1' LocalizedStrings.Str1326)  							.SetCell(columnShift + 14' 1' LocalizedStrings.Str1327)  							.SetCell(columnShift + 15' 1' LocalizedStrings.Str135);    						worker  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str1329)' null' Colors.Green)  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str238)' null' Colors.Red);    						rowIndex = 2;  						foreach (var order in strategy.Orders.ToArray())  						{  							worker  								.SetCell(columnShift + 0' rowIndex' order.Id)  								.SetCell(columnShift + 1' rowIndex' order.TransactionId)  								.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  								.SetCell(columnShift + 3' rowIndex' Format(order.Time))  								.SetCell(columnShift + 4' rowIndex' Format(order.LastChangeTime))  								.SetCell(columnShift + 5' rowIndex' Format(order.LastChangeTime - order.Time))  								.SetCell(columnShift + 6' rowIndex' order.Price)  								.SetCell(columnShift + 7' rowIndex' MathHelper.Round(order.GetAveragePrice(strategy.Connector)' Decimals))  								.SetCell(columnShift + 8' rowIndex' Format(order.State))  								.SetCell(columnShift + 9' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : LocalizedStrings.Str238))  								.SetCell(columnShift + 10' rowIndex' order.Balance)  								.SetCell(columnShift + 11' rowIndex' order.Volume)  								.SetCell(columnShift + 12' rowIndex' Format(order.Type))  								.SetCell(columnShift + 13' rowIndex' Format(order.LatencyRegistration))  								.SetCell(columnShift + 14' rowIndex' Format(order.LatencyCancellation))  								.SetCell(columnShift + 15' rowIndex' order.Comment);    							rowIndex++;  						}    						var stopOrders = strategy.StopOrders.ToArray();    						if (stopOrders.Length > 0)  						{  							rowIndex += 2;    							worker  								.SetCell(columnShift + 0' rowIndex - 1' LocalizedStrings.Str1351)    								.SetCell(columnShift + 0' rowIndex' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  								.SetCell(columnShift + 1' rowIndex' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  								.SetCell(columnShift + 2' rowIndex' LocalizedStrings.Str128)  								.SetCell(columnShift + 3' rowIndex' LocalizedStrings.Time).SetStyle(columnShift + 3' "HH:mm:ss.fff")  								.SetCell(columnShift + 4' rowIndex' LocalizedStrings.Price).SetStyle(columnShift + 4' typeof(decimal))  								.SetCell(columnShift + 5' rowIndex' LocalizedStrings.Str1324)  								.SetCell(columnShift + 6' rowIndex' LocalizedStrings.State)  								.SetCell(columnShift + 7' rowIndex' LocalizedStrings.Volume).SetStyle(columnShift + 7' typeof(decimal))  								.SetCell(columnShift + 8' rowIndex' LocalizedStrings.Str1326)  								.SetCell(columnShift + 9' rowIndex' LocalizedStrings.Str1327)  								//.SetCell(columnShift + 10' rowIndex' LocalizedStrings.Str1352).SetStyle(columnShift + 9' typeof(long))  								;    							var stopParams = stopOrders[0].Condition.Parameters.Keys.ToArray();    							for (var i = 0; i < stopParams.Length; i++)  								worker.SetCell(columnShift + 11 + i' rowIndex' stopParams[i]);    							foreach (var order in stopOrders)  							{  								worker  									.SetCell(columnShift + 0' rowIndex' order.Id)  									.SetCell(columnShift + 1' rowIndex' order.TransactionId)  									.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  									.SetCell(columnShift + 3' rowIndex' Format(order.Time))  									.SetCell(columnShift + 4' rowIndex' order.Price)  									.SetCell(columnShift + 5' rowIndex' Format(order.State))  									.SetCell(columnShift + 6' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : string.Empty))  									.SetCell(columnShift + 7' rowIndex' order.Volume)  									.SetCell(columnShift + 8' rowIndex' Format(order.LatencyRegistration))  									.SetCell(columnShift + 9' rowIndex' Format(order.LatencyCancellation))  									//.SetCell(columnShift + 10' rowIndex' order.DerivedOrder != null ? (object)order.DerivedOrder.Id : string.Empty)  									;    								for (var i = 0; i < stopParams.Length; i++)  									worker.SetCell(columnShift + 11 + i' rowIndex' order.Condition.Parameters[stopParams[i]] ?? string.Empty);    								rowIndex++;  							}  						}  					}  				}    				worker.Save(FileName' true);  			}
Magic Number,StockSharp.Algo.Strategies.Reporting,ExcelStrategyReport,C:\repos\stocksharp_stocksharp\Algo\Strategies\Reporting\ExcelStrategyReport.cs,Generate,The following statement contains a magic number: using (var worker = hasTemplate ? new ExcelWorker() : new ExcelWorker(Template))  			{  				foreach (var strategy in Strategies)  				{  					if (Template.IsEmpty())  					{  						worker.RenameSheet(strategy.Name);  					}  					else  					{  						if (worker.ContainsSheet(strategy.Name))  							worker.AddSheet(strategy.Name);  					}    					worker  						.SetCell(0' 0' LocalizedStrings.Str1331)    						.SetCell(0' 1' LocalizedStrings.Security + ":")  						.SetCell(1' 1' strategy.Security != null ? strategy.Security.Id : string.Empty)    						.SetCell(0' 2' LocalizedStrings.Portfolio + ":")  						.SetCell(1' 2' strategy.Portfolio != null ? strategy.Portfolio.Name : string.Empty)    						.SetCell(0' 3' LocalizedStrings.Str1334)  						.SetCell(1' 3' Format(strategy.TotalWorkingTime))    						.SetCell(0' 4' LocalizedStrings.Str1335)  						//.SetCell(1' 4' FormatTime(base.Strategy.TotalCPUTime))    						.SetCell(0' 5' LocalizedStrings.Str862 + ":")  						.SetCell(1' 5' strategy.Position)    						.SetCell(0' 6' LocalizedStrings.PnL + ":")  						.SetCell(1' 6' strategy.PnL)    						.SetCell(0' 7' LocalizedStrings.Str159 + ":")  						.SetCell(1' 7' strategy.Commission)    						.SetCell(0' 8' LocalizedStrings.Str163 + ":")  						.SetCell(1' 8' strategy.Slippage)    						.SetCell(0' 9' LocalizedStrings.Str161 + ":")  						.SetCell(1' 9' Format(strategy.Latency));    					var rowIndex = 11;    					foreach (var parameter in strategy.StatisticManager.Parameters.SyncGet(c => c.ToArray()))  					{  						var value = parameter.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' parameter.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					rowIndex += 2;  					worker.SetCell(0' rowIndex' LocalizedStrings.Str1340);  					rowIndex++;    					foreach (var strategyParam in strategy.Parameters.CachedValues)  					{  						var value = strategyParam.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' strategyParam.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					//rowIndex += 2;  					//worker.SetCell(0' rowIndex' "Комиссия по типам:");  					//rowIndex++;    					//foreach (var group in Strategy.CommissionManager.Rules.SyncGet(c => c.ToArray()).GroupBy(c => c.GetType().GetDisplayName()))  					//{  					//	var commission = group.Sum(r => r.Commission);    					//	if (commission == 0)  					//		continue;    					//	worker  					//		.SetCell(0' rowIndex' group.Key)  					//		.SetCell(1' rowIndex' commission);    					//	rowIndex++;  					//}    					var columnShift = 3;    					worker  						.SetCell(columnShift + 0' 0' LocalizedStrings.Str985)    						.SetCell(columnShift + 0' 1' LocalizedStrings.Str1192).SetStyle(columnShift + 0' typeof(long))  						.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  						.SetCell(columnShift + 2' 1' LocalizedStrings.Time).SetStyle(columnShift + 2' "HH:mm:ss.fff")  						.SetCell(columnShift + 3' 1' LocalizedStrings.Price).SetStyle(columnShift + 3' typeof(decimal))  						.SetCell(columnShift + 4' 1' LocalizedStrings.Str1341).SetStyle(columnShift + 4' typeof(decimal))  						.SetCell(columnShift + 5' 1' LocalizedStrings.Volume).SetStyle(columnShift + 5' typeof(decimal))  						.SetCell(columnShift + 6' 1' LocalizedStrings.Str128)  						.SetCell(columnShift + 7' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 7' typeof(long))  						.SetCell(columnShift + 8' 1' LocalizedStrings.Str163).SetStyle(columnShift + 8' typeof(decimal))  						.SetCell(columnShift + 9' 1' LocalizedStrings.Str135)  						.SetCell(columnShift + 10' 1' LocalizedStrings.Str1342).SetStyle(columnShift + 11' typeof(decimal))  						.SetCell(columnShift + 11' 1' LocalizedStrings.Str1343).SetStyle(columnShift + 12' typeof(decimal))  						.SetCell(columnShift + 12' 1' LocalizedStrings.Str1344).SetStyle(columnShift + 13' typeof(decimal))  						.SetCell(columnShift + 13' 1' LocalizedStrings.Str1345).SetStyle(columnShift + 14' typeof(decimal))  						.SetCell(columnShift + 14' 1' LocalizedStrings.Str862).SetStyle(columnShift + 15' typeof(decimal));    					worker  						.SetConditionalFormatting(columnShift + 10' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 11' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 12' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 13' ComparisonOperator.Less' "0"' null' Colors.Red);    					var totalPnL = 0m;  					var position = 0m;    					var queues = new Dictionary<Security' PnLQueue>();    					rowIndex = 2;  					foreach (var trade in strategy.MyTrades.ToArray())  					{  						var info = strategy.PnLManager.ProcessMessage(trade.ToMessage());    						totalPnL += info.PnL;  						position += trade.GetPosition() ?? 0;    						var queue = queues.SafeAdd(trade.Trade.Security' key => new PnLQueue(key.ToSecurityId()));    						var localInfo = queue.Process(trade.ToMessage());    						worker  							.SetCell(columnShift + 0' rowIndex' trade.Trade.Id)  							.SetCell(columnShift + 1' rowIndex' trade.Order.TransactionId)  							.SetCell(columnShift + 2' rowIndex' Format(trade.Trade.Time))  							.SetCell(columnShift + 3' rowIndex' trade.Trade.Price)  							.SetCell(columnShift + 4' rowIndex' trade.Order.Price)  							.SetCell(columnShift + 5' rowIndex' trade.Trade.Volume)  							.SetCell(columnShift + 6' rowIndex' Format(trade.Order.Direction))  							.SetCell(columnShift + 7' rowIndex' trade.Order.Id)  							.SetCell(columnShift + 8' rowIndex' trade.Slippage)  							.SetCell(columnShift + 9' rowIndex' trade.Order.Comment)  							.SetCell(columnShift + 10' rowIndex' MathHelper.Round(info.PnL' Decimals))  							.SetCell(columnShift + 11' rowIndex' MathHelper.Round(localInfo.PnL' Decimals))  							.SetCell(columnShift + 12' rowIndex' MathHelper.Round(totalPnL' Decimals))  							.SetCell(columnShift + 13' rowIndex' MathHelper.Round(queue.RealizedPnL' Decimals))  							.SetCell(columnShift + 14' rowIndex' position);    						rowIndex++;  					}    					if (IncludeOrders)  					{  						columnShift += 17;    						worker  							.SetCell(columnShift + 0' 0' LocalizedStrings.Orders)    							.SetCell(columnShift + 0' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  							.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  							.SetCell(columnShift + 2' 1' LocalizedStrings.Str128)  							.SetCell(columnShift + 3' 1' LocalizedStrings.Str1346).SetStyle(columnShift + 3' "HH:mm:ss.fff")  							.SetCell(columnShift + 4' 1' LocalizedStrings.Str1347).SetStyle(columnShift + 4' "HH:mm:ss.fff")  							.SetCell(columnShift + 5' 1' LocalizedStrings.Str1348)  							.SetCell(columnShift + 6' 1' LocalizedStrings.Price).SetStyle(columnShift + 6' typeof(decimal))  							.SetCell(columnShift + 7' 1' LocalizedStrings.Str1323).SetStyle(columnShift + 7' typeof(decimal))  							.SetCell(columnShift + 8' 1' LocalizedStrings.Str1324)  							.SetCell(columnShift + 9' 1' LocalizedStrings.State)  							.SetCell(columnShift + 10' 1' LocalizedStrings.Str1325).SetStyle(columnShift + 10' typeof(decimal))  							.SetCell(columnShift + 11' 1' LocalizedStrings.Volume).SetStyle(columnShift + 11' typeof(decimal))  							.SetCell(columnShift + 12' 1' LocalizedStrings.Type)  							.SetCell(columnShift + 13' 1' LocalizedStrings.Str1326)  							.SetCell(columnShift + 14' 1' LocalizedStrings.Str1327)  							.SetCell(columnShift + 15' 1' LocalizedStrings.Str135);    						worker  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str1329)' null' Colors.Green)  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str238)' null' Colors.Red);    						rowIndex = 2;  						foreach (var order in strategy.Orders.ToArray())  						{  							worker  								.SetCell(columnShift + 0' rowIndex' order.Id)  								.SetCell(columnShift + 1' rowIndex' order.TransactionId)  								.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  								.SetCell(columnShift + 3' rowIndex' Format(order.Time))  								.SetCell(columnShift + 4' rowIndex' Format(order.LastChangeTime))  								.SetCell(columnShift + 5' rowIndex' Format(order.LastChangeTime - order.Time))  								.SetCell(columnShift + 6' rowIndex' order.Price)  								.SetCell(columnShift + 7' rowIndex' MathHelper.Round(order.GetAveragePrice(strategy.Connector)' Decimals))  								.SetCell(columnShift + 8' rowIndex' Format(order.State))  								.SetCell(columnShift + 9' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : LocalizedStrings.Str238))  								.SetCell(columnShift + 10' rowIndex' order.Balance)  								.SetCell(columnShift + 11' rowIndex' order.Volume)  								.SetCell(columnShift + 12' rowIndex' Format(order.Type))  								.SetCell(columnShift + 13' rowIndex' Format(order.LatencyRegistration))  								.SetCell(columnShift + 14' rowIndex' Format(order.LatencyCancellation))  								.SetCell(columnShift + 15' rowIndex' order.Comment);    							rowIndex++;  						}    						var stopOrders = strategy.StopOrders.ToArray();    						if (stopOrders.Length > 0)  						{  							rowIndex += 2;    							worker  								.SetCell(columnShift + 0' rowIndex - 1' LocalizedStrings.Str1351)    								.SetCell(columnShift + 0' rowIndex' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  								.SetCell(columnShift + 1' rowIndex' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  								.SetCell(columnShift + 2' rowIndex' LocalizedStrings.Str128)  								.SetCell(columnShift + 3' rowIndex' LocalizedStrings.Time).SetStyle(columnShift + 3' "HH:mm:ss.fff")  								.SetCell(columnShift + 4' rowIndex' LocalizedStrings.Price).SetStyle(columnShift + 4' typeof(decimal))  								.SetCell(columnShift + 5' rowIndex' LocalizedStrings.Str1324)  								.SetCell(columnShift + 6' rowIndex' LocalizedStrings.State)  								.SetCell(columnShift + 7' rowIndex' LocalizedStrings.Volume).SetStyle(columnShift + 7' typeof(decimal))  								.SetCell(columnShift + 8' rowIndex' LocalizedStrings.Str1326)  								.SetCell(columnShift + 9' rowIndex' LocalizedStrings.Str1327)  								//.SetCell(columnShift + 10' rowIndex' LocalizedStrings.Str1352).SetStyle(columnShift + 9' typeof(long))  								;    							var stopParams = stopOrders[0].Condition.Parameters.Keys.ToArray();    							for (var i = 0; i < stopParams.Length; i++)  								worker.SetCell(columnShift + 11 + i' rowIndex' stopParams[i]);    							foreach (var order in stopOrders)  							{  								worker  									.SetCell(columnShift + 0' rowIndex' order.Id)  									.SetCell(columnShift + 1' rowIndex' order.TransactionId)  									.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  									.SetCell(columnShift + 3' rowIndex' Format(order.Time))  									.SetCell(columnShift + 4' rowIndex' order.Price)  									.SetCell(columnShift + 5' rowIndex' Format(order.State))  									.SetCell(columnShift + 6' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : string.Empty))  									.SetCell(columnShift + 7' rowIndex' order.Volume)  									.SetCell(columnShift + 8' rowIndex' Format(order.LatencyRegistration))  									.SetCell(columnShift + 9' rowIndex' Format(order.LatencyCancellation))  									//.SetCell(columnShift + 10' rowIndex' order.DerivedOrder != null ? (object)order.DerivedOrder.Id : string.Empty)  									;    								for (var i = 0; i < stopParams.Length; i++)  									worker.SetCell(columnShift + 11 + i' rowIndex' order.Condition.Parameters[stopParams[i]] ?? string.Empty);    								rowIndex++;  							}  						}  					}  				}    				worker.Save(FileName' true);  			}
Magic Number,StockSharp.Algo.Strategies.Reporting,ExcelStrategyReport,C:\repos\stocksharp_stocksharp\Algo\Strategies\Reporting\ExcelStrategyReport.cs,Generate,The following statement contains a magic number: using (var worker = hasTemplate ? new ExcelWorker() : new ExcelWorker(Template))  			{  				foreach (var strategy in Strategies)  				{  					if (Template.IsEmpty())  					{  						worker.RenameSheet(strategy.Name);  					}  					else  					{  						if (worker.ContainsSheet(strategy.Name))  							worker.AddSheet(strategy.Name);  					}    					worker  						.SetCell(0' 0' LocalizedStrings.Str1331)    						.SetCell(0' 1' LocalizedStrings.Security + ":")  						.SetCell(1' 1' strategy.Security != null ? strategy.Security.Id : string.Empty)    						.SetCell(0' 2' LocalizedStrings.Portfolio + ":")  						.SetCell(1' 2' strategy.Portfolio != null ? strategy.Portfolio.Name : string.Empty)    						.SetCell(0' 3' LocalizedStrings.Str1334)  						.SetCell(1' 3' Format(strategy.TotalWorkingTime))    						.SetCell(0' 4' LocalizedStrings.Str1335)  						//.SetCell(1' 4' FormatTime(base.Strategy.TotalCPUTime))    						.SetCell(0' 5' LocalizedStrings.Str862 + ":")  						.SetCell(1' 5' strategy.Position)    						.SetCell(0' 6' LocalizedStrings.PnL + ":")  						.SetCell(1' 6' strategy.PnL)    						.SetCell(0' 7' LocalizedStrings.Str159 + ":")  						.SetCell(1' 7' strategy.Commission)    						.SetCell(0' 8' LocalizedStrings.Str163 + ":")  						.SetCell(1' 8' strategy.Slippage)    						.SetCell(0' 9' LocalizedStrings.Str161 + ":")  						.SetCell(1' 9' Format(strategy.Latency));    					var rowIndex = 11;    					foreach (var parameter in strategy.StatisticManager.Parameters.SyncGet(c => c.ToArray()))  					{  						var value = parameter.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' parameter.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					rowIndex += 2;  					worker.SetCell(0' rowIndex' LocalizedStrings.Str1340);  					rowIndex++;    					foreach (var strategyParam in strategy.Parameters.CachedValues)  					{  						var value = strategyParam.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' strategyParam.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					//rowIndex += 2;  					//worker.SetCell(0' rowIndex' "Комиссия по типам:");  					//rowIndex++;    					//foreach (var group in Strategy.CommissionManager.Rules.SyncGet(c => c.ToArray()).GroupBy(c => c.GetType().GetDisplayName()))  					//{  					//	var commission = group.Sum(r => r.Commission);    					//	if (commission == 0)  					//		continue;    					//	worker  					//		.SetCell(0' rowIndex' group.Key)  					//		.SetCell(1' rowIndex' commission);    					//	rowIndex++;  					//}    					var columnShift = 3;    					worker  						.SetCell(columnShift + 0' 0' LocalizedStrings.Str985)    						.SetCell(columnShift + 0' 1' LocalizedStrings.Str1192).SetStyle(columnShift + 0' typeof(long))  						.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  						.SetCell(columnShift + 2' 1' LocalizedStrings.Time).SetStyle(columnShift + 2' "HH:mm:ss.fff")  						.SetCell(columnShift + 3' 1' LocalizedStrings.Price).SetStyle(columnShift + 3' typeof(decimal))  						.SetCell(columnShift + 4' 1' LocalizedStrings.Str1341).SetStyle(columnShift + 4' typeof(decimal))  						.SetCell(columnShift + 5' 1' LocalizedStrings.Volume).SetStyle(columnShift + 5' typeof(decimal))  						.SetCell(columnShift + 6' 1' LocalizedStrings.Str128)  						.SetCell(columnShift + 7' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 7' typeof(long))  						.SetCell(columnShift + 8' 1' LocalizedStrings.Str163).SetStyle(columnShift + 8' typeof(decimal))  						.SetCell(columnShift + 9' 1' LocalizedStrings.Str135)  						.SetCell(columnShift + 10' 1' LocalizedStrings.Str1342).SetStyle(columnShift + 11' typeof(decimal))  						.SetCell(columnShift + 11' 1' LocalizedStrings.Str1343).SetStyle(columnShift + 12' typeof(decimal))  						.SetCell(columnShift + 12' 1' LocalizedStrings.Str1344).SetStyle(columnShift + 13' typeof(decimal))  						.SetCell(columnShift + 13' 1' LocalizedStrings.Str1345).SetStyle(columnShift + 14' typeof(decimal))  						.SetCell(columnShift + 14' 1' LocalizedStrings.Str862).SetStyle(columnShift + 15' typeof(decimal));    					worker  						.SetConditionalFormatting(columnShift + 10' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 11' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 12' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 13' ComparisonOperator.Less' "0"' null' Colors.Red);    					var totalPnL = 0m;  					var position = 0m;    					var queues = new Dictionary<Security' PnLQueue>();    					rowIndex = 2;  					foreach (var trade in strategy.MyTrades.ToArray())  					{  						var info = strategy.PnLManager.ProcessMessage(trade.ToMessage());    						totalPnL += info.PnL;  						position += trade.GetPosition() ?? 0;    						var queue = queues.SafeAdd(trade.Trade.Security' key => new PnLQueue(key.ToSecurityId()));    						var localInfo = queue.Process(trade.ToMessage());    						worker  							.SetCell(columnShift + 0' rowIndex' trade.Trade.Id)  							.SetCell(columnShift + 1' rowIndex' trade.Order.TransactionId)  							.SetCell(columnShift + 2' rowIndex' Format(trade.Trade.Time))  							.SetCell(columnShift + 3' rowIndex' trade.Trade.Price)  							.SetCell(columnShift + 4' rowIndex' trade.Order.Price)  							.SetCell(columnShift + 5' rowIndex' trade.Trade.Volume)  							.SetCell(columnShift + 6' rowIndex' Format(trade.Order.Direction))  							.SetCell(columnShift + 7' rowIndex' trade.Order.Id)  							.SetCell(columnShift + 8' rowIndex' trade.Slippage)  							.SetCell(columnShift + 9' rowIndex' trade.Order.Comment)  							.SetCell(columnShift + 10' rowIndex' MathHelper.Round(info.PnL' Decimals))  							.SetCell(columnShift + 11' rowIndex' MathHelper.Round(localInfo.PnL' Decimals))  							.SetCell(columnShift + 12' rowIndex' MathHelper.Round(totalPnL' Decimals))  							.SetCell(columnShift + 13' rowIndex' MathHelper.Round(queue.RealizedPnL' Decimals))  							.SetCell(columnShift + 14' rowIndex' position);    						rowIndex++;  					}    					if (IncludeOrders)  					{  						columnShift += 17;    						worker  							.SetCell(columnShift + 0' 0' LocalizedStrings.Orders)    							.SetCell(columnShift + 0' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  							.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  							.SetCell(columnShift + 2' 1' LocalizedStrings.Str128)  							.SetCell(columnShift + 3' 1' LocalizedStrings.Str1346).SetStyle(columnShift + 3' "HH:mm:ss.fff")  							.SetCell(columnShift + 4' 1' LocalizedStrings.Str1347).SetStyle(columnShift + 4' "HH:mm:ss.fff")  							.SetCell(columnShift + 5' 1' LocalizedStrings.Str1348)  							.SetCell(columnShift + 6' 1' LocalizedStrings.Price).SetStyle(columnShift + 6' typeof(decimal))  							.SetCell(columnShift + 7' 1' LocalizedStrings.Str1323).SetStyle(columnShift + 7' typeof(decimal))  							.SetCell(columnShift + 8' 1' LocalizedStrings.Str1324)  							.SetCell(columnShift + 9' 1' LocalizedStrings.State)  							.SetCell(columnShift + 10' 1' LocalizedStrings.Str1325).SetStyle(columnShift + 10' typeof(decimal))  							.SetCell(columnShift + 11' 1' LocalizedStrings.Volume).SetStyle(columnShift + 11' typeof(decimal))  							.SetCell(columnShift + 12' 1' LocalizedStrings.Type)  							.SetCell(columnShift + 13' 1' LocalizedStrings.Str1326)  							.SetCell(columnShift + 14' 1' LocalizedStrings.Str1327)  							.SetCell(columnShift + 15' 1' LocalizedStrings.Str135);    						worker  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str1329)' null' Colors.Green)  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str238)' null' Colors.Red);    						rowIndex = 2;  						foreach (var order in strategy.Orders.ToArray())  						{  							worker  								.SetCell(columnShift + 0' rowIndex' order.Id)  								.SetCell(columnShift + 1' rowIndex' order.TransactionId)  								.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  								.SetCell(columnShift + 3' rowIndex' Format(order.Time))  								.SetCell(columnShift + 4' rowIndex' Format(order.LastChangeTime))  								.SetCell(columnShift + 5' rowIndex' Format(order.LastChangeTime - order.Time))  								.SetCell(columnShift + 6' rowIndex' order.Price)  								.SetCell(columnShift + 7' rowIndex' MathHelper.Round(order.GetAveragePrice(strategy.Connector)' Decimals))  								.SetCell(columnShift + 8' rowIndex' Format(order.State))  								.SetCell(columnShift + 9' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : LocalizedStrings.Str238))  								.SetCell(columnShift + 10' rowIndex' order.Balance)  								.SetCell(columnShift + 11' rowIndex' order.Volume)  								.SetCell(columnShift + 12' rowIndex' Format(order.Type))  								.SetCell(columnShift + 13' rowIndex' Format(order.LatencyRegistration))  								.SetCell(columnShift + 14' rowIndex' Format(order.LatencyCancellation))  								.SetCell(columnShift + 15' rowIndex' order.Comment);    							rowIndex++;  						}    						var stopOrders = strategy.StopOrders.ToArray();    						if (stopOrders.Length > 0)  						{  							rowIndex += 2;    							worker  								.SetCell(columnShift + 0' rowIndex - 1' LocalizedStrings.Str1351)    								.SetCell(columnShift + 0' rowIndex' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  								.SetCell(columnShift + 1' rowIndex' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  								.SetCell(columnShift + 2' rowIndex' LocalizedStrings.Str128)  								.SetCell(columnShift + 3' rowIndex' LocalizedStrings.Time).SetStyle(columnShift + 3' "HH:mm:ss.fff")  								.SetCell(columnShift + 4' rowIndex' LocalizedStrings.Price).SetStyle(columnShift + 4' typeof(decimal))  								.SetCell(columnShift + 5' rowIndex' LocalizedStrings.Str1324)  								.SetCell(columnShift + 6' rowIndex' LocalizedStrings.State)  								.SetCell(columnShift + 7' rowIndex' LocalizedStrings.Volume).SetStyle(columnShift + 7' typeof(decimal))  								.SetCell(columnShift + 8' rowIndex' LocalizedStrings.Str1326)  								.SetCell(columnShift + 9' rowIndex' LocalizedStrings.Str1327)  								//.SetCell(columnShift + 10' rowIndex' LocalizedStrings.Str1352).SetStyle(columnShift + 9' typeof(long))  								;    							var stopParams = stopOrders[0].Condition.Parameters.Keys.ToArray();    							for (var i = 0; i < stopParams.Length; i++)  								worker.SetCell(columnShift + 11 + i' rowIndex' stopParams[i]);    							foreach (var order in stopOrders)  							{  								worker  									.SetCell(columnShift + 0' rowIndex' order.Id)  									.SetCell(columnShift + 1' rowIndex' order.TransactionId)  									.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  									.SetCell(columnShift + 3' rowIndex' Format(order.Time))  									.SetCell(columnShift + 4' rowIndex' order.Price)  									.SetCell(columnShift + 5' rowIndex' Format(order.State))  									.SetCell(columnShift + 6' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : string.Empty))  									.SetCell(columnShift + 7' rowIndex' order.Volume)  									.SetCell(columnShift + 8' rowIndex' Format(order.LatencyRegistration))  									.SetCell(columnShift + 9' rowIndex' Format(order.LatencyCancellation))  									//.SetCell(columnShift + 10' rowIndex' order.DerivedOrder != null ? (object)order.DerivedOrder.Id : string.Empty)  									;    								for (var i = 0; i < stopParams.Length; i++)  									worker.SetCell(columnShift + 11 + i' rowIndex' order.Condition.Parameters[stopParams[i]] ?? string.Empty);    								rowIndex++;  							}  						}  					}  				}    				worker.Save(FileName' true);  			}
Magic Number,StockSharp.Algo.Strategies.Reporting,ExcelStrategyReport,C:\repos\stocksharp_stocksharp\Algo\Strategies\Reporting\ExcelStrategyReport.cs,Generate,The following statement contains a magic number: using (var worker = hasTemplate ? new ExcelWorker() : new ExcelWorker(Template))  			{  				foreach (var strategy in Strategies)  				{  					if (Template.IsEmpty())  					{  						worker.RenameSheet(strategy.Name);  					}  					else  					{  						if (worker.ContainsSheet(strategy.Name))  							worker.AddSheet(strategy.Name);  					}    					worker  						.SetCell(0' 0' LocalizedStrings.Str1331)    						.SetCell(0' 1' LocalizedStrings.Security + ":")  						.SetCell(1' 1' strategy.Security != null ? strategy.Security.Id : string.Empty)    						.SetCell(0' 2' LocalizedStrings.Portfolio + ":")  						.SetCell(1' 2' strategy.Portfolio != null ? strategy.Portfolio.Name : string.Empty)    						.SetCell(0' 3' LocalizedStrings.Str1334)  						.SetCell(1' 3' Format(strategy.TotalWorkingTime))    						.SetCell(0' 4' LocalizedStrings.Str1335)  						//.SetCell(1' 4' FormatTime(base.Strategy.TotalCPUTime))    						.SetCell(0' 5' LocalizedStrings.Str862 + ":")  						.SetCell(1' 5' strategy.Position)    						.SetCell(0' 6' LocalizedStrings.PnL + ":")  						.SetCell(1' 6' strategy.PnL)    						.SetCell(0' 7' LocalizedStrings.Str159 + ":")  						.SetCell(1' 7' strategy.Commission)    						.SetCell(0' 8' LocalizedStrings.Str163 + ":")  						.SetCell(1' 8' strategy.Slippage)    						.SetCell(0' 9' LocalizedStrings.Str161 + ":")  						.SetCell(1' 9' Format(strategy.Latency));    					var rowIndex = 11;    					foreach (var parameter in strategy.StatisticManager.Parameters.SyncGet(c => c.ToArray()))  					{  						var value = parameter.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' parameter.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					rowIndex += 2;  					worker.SetCell(0' rowIndex' LocalizedStrings.Str1340);  					rowIndex++;    					foreach (var strategyParam in strategy.Parameters.CachedValues)  					{  						var value = strategyParam.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' strategyParam.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					//rowIndex += 2;  					//worker.SetCell(0' rowIndex' "Комиссия по типам:");  					//rowIndex++;    					//foreach (var group in Strategy.CommissionManager.Rules.SyncGet(c => c.ToArray()).GroupBy(c => c.GetType().GetDisplayName()))  					//{  					//	var commission = group.Sum(r => r.Commission);    					//	if (commission == 0)  					//		continue;    					//	worker  					//		.SetCell(0' rowIndex' group.Key)  					//		.SetCell(1' rowIndex' commission);    					//	rowIndex++;  					//}    					var columnShift = 3;    					worker  						.SetCell(columnShift + 0' 0' LocalizedStrings.Str985)    						.SetCell(columnShift + 0' 1' LocalizedStrings.Str1192).SetStyle(columnShift + 0' typeof(long))  						.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  						.SetCell(columnShift + 2' 1' LocalizedStrings.Time).SetStyle(columnShift + 2' "HH:mm:ss.fff")  						.SetCell(columnShift + 3' 1' LocalizedStrings.Price).SetStyle(columnShift + 3' typeof(decimal))  						.SetCell(columnShift + 4' 1' LocalizedStrings.Str1341).SetStyle(columnShift + 4' typeof(decimal))  						.SetCell(columnShift + 5' 1' LocalizedStrings.Volume).SetStyle(columnShift + 5' typeof(decimal))  						.SetCell(columnShift + 6' 1' LocalizedStrings.Str128)  						.SetCell(columnShift + 7' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 7' typeof(long))  						.SetCell(columnShift + 8' 1' LocalizedStrings.Str163).SetStyle(columnShift + 8' typeof(decimal))  						.SetCell(columnShift + 9' 1' LocalizedStrings.Str135)  						.SetCell(columnShift + 10' 1' LocalizedStrings.Str1342).SetStyle(columnShift + 11' typeof(decimal))  						.SetCell(columnShift + 11' 1' LocalizedStrings.Str1343).SetStyle(columnShift + 12' typeof(decimal))  						.SetCell(columnShift + 12' 1' LocalizedStrings.Str1344).SetStyle(columnShift + 13' typeof(decimal))  						.SetCell(columnShift + 13' 1' LocalizedStrings.Str1345).SetStyle(columnShift + 14' typeof(decimal))  						.SetCell(columnShift + 14' 1' LocalizedStrings.Str862).SetStyle(columnShift + 15' typeof(decimal));    					worker  						.SetConditionalFormatting(columnShift + 10' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 11' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 12' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 13' ComparisonOperator.Less' "0"' null' Colors.Red);    					var totalPnL = 0m;  					var position = 0m;    					var queues = new Dictionary<Security' PnLQueue>();    					rowIndex = 2;  					foreach (var trade in strategy.MyTrades.ToArray())  					{  						var info = strategy.PnLManager.ProcessMessage(trade.ToMessage());    						totalPnL += info.PnL;  						position += trade.GetPosition() ?? 0;    						var queue = queues.SafeAdd(trade.Trade.Security' key => new PnLQueue(key.ToSecurityId()));    						var localInfo = queue.Process(trade.ToMessage());    						worker  							.SetCell(columnShift + 0' rowIndex' trade.Trade.Id)  							.SetCell(columnShift + 1' rowIndex' trade.Order.TransactionId)  							.SetCell(columnShift + 2' rowIndex' Format(trade.Trade.Time))  							.SetCell(columnShift + 3' rowIndex' trade.Trade.Price)  							.SetCell(columnShift + 4' rowIndex' trade.Order.Price)  							.SetCell(columnShift + 5' rowIndex' trade.Trade.Volume)  							.SetCell(columnShift + 6' rowIndex' Format(trade.Order.Direction))  							.SetCell(columnShift + 7' rowIndex' trade.Order.Id)  							.SetCell(columnShift + 8' rowIndex' trade.Slippage)  							.SetCell(columnShift + 9' rowIndex' trade.Order.Comment)  							.SetCell(columnShift + 10' rowIndex' MathHelper.Round(info.PnL' Decimals))  							.SetCell(columnShift + 11' rowIndex' MathHelper.Round(localInfo.PnL' Decimals))  							.SetCell(columnShift + 12' rowIndex' MathHelper.Round(totalPnL' Decimals))  							.SetCell(columnShift + 13' rowIndex' MathHelper.Round(queue.RealizedPnL' Decimals))  							.SetCell(columnShift + 14' rowIndex' position);    						rowIndex++;  					}    					if (IncludeOrders)  					{  						columnShift += 17;    						worker  							.SetCell(columnShift + 0' 0' LocalizedStrings.Orders)    							.SetCell(columnShift + 0' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  							.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  							.SetCell(columnShift + 2' 1' LocalizedStrings.Str128)  							.SetCell(columnShift + 3' 1' LocalizedStrings.Str1346).SetStyle(columnShift + 3' "HH:mm:ss.fff")  							.SetCell(columnShift + 4' 1' LocalizedStrings.Str1347).SetStyle(columnShift + 4' "HH:mm:ss.fff")  							.SetCell(columnShift + 5' 1' LocalizedStrings.Str1348)  							.SetCell(columnShift + 6' 1' LocalizedStrings.Price).SetStyle(columnShift + 6' typeof(decimal))  							.SetCell(columnShift + 7' 1' LocalizedStrings.Str1323).SetStyle(columnShift + 7' typeof(decimal))  							.SetCell(columnShift + 8' 1' LocalizedStrings.Str1324)  							.SetCell(columnShift + 9' 1' LocalizedStrings.State)  							.SetCell(columnShift + 10' 1' LocalizedStrings.Str1325).SetStyle(columnShift + 10' typeof(decimal))  							.SetCell(columnShift + 11' 1' LocalizedStrings.Volume).SetStyle(columnShift + 11' typeof(decimal))  							.SetCell(columnShift + 12' 1' LocalizedStrings.Type)  							.SetCell(columnShift + 13' 1' LocalizedStrings.Str1326)  							.SetCell(columnShift + 14' 1' LocalizedStrings.Str1327)  							.SetCell(columnShift + 15' 1' LocalizedStrings.Str135);    						worker  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str1329)' null' Colors.Green)  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str238)' null' Colors.Red);    						rowIndex = 2;  						foreach (var order in strategy.Orders.ToArray())  						{  							worker  								.SetCell(columnShift + 0' rowIndex' order.Id)  								.SetCell(columnShift + 1' rowIndex' order.TransactionId)  								.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  								.SetCell(columnShift + 3' rowIndex' Format(order.Time))  								.SetCell(columnShift + 4' rowIndex' Format(order.LastChangeTime))  								.SetCell(columnShift + 5' rowIndex' Format(order.LastChangeTime - order.Time))  								.SetCell(columnShift + 6' rowIndex' order.Price)  								.SetCell(columnShift + 7' rowIndex' MathHelper.Round(order.GetAveragePrice(strategy.Connector)' Decimals))  								.SetCell(columnShift + 8' rowIndex' Format(order.State))  								.SetCell(columnShift + 9' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : LocalizedStrings.Str238))  								.SetCell(columnShift + 10' rowIndex' order.Balance)  								.SetCell(columnShift + 11' rowIndex' order.Volume)  								.SetCell(columnShift + 12' rowIndex' Format(order.Type))  								.SetCell(columnShift + 13' rowIndex' Format(order.LatencyRegistration))  								.SetCell(columnShift + 14' rowIndex' Format(order.LatencyCancellation))  								.SetCell(columnShift + 15' rowIndex' order.Comment);    							rowIndex++;  						}    						var stopOrders = strategy.StopOrders.ToArray();    						if (stopOrders.Length > 0)  						{  							rowIndex += 2;    							worker  								.SetCell(columnShift + 0' rowIndex - 1' LocalizedStrings.Str1351)    								.SetCell(columnShift + 0' rowIndex' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  								.SetCell(columnShift + 1' rowIndex' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  								.SetCell(columnShift + 2' rowIndex' LocalizedStrings.Str128)  								.SetCell(columnShift + 3' rowIndex' LocalizedStrings.Time).SetStyle(columnShift + 3' "HH:mm:ss.fff")  								.SetCell(columnShift + 4' rowIndex' LocalizedStrings.Price).SetStyle(columnShift + 4' typeof(decimal))  								.SetCell(columnShift + 5' rowIndex' LocalizedStrings.Str1324)  								.SetCell(columnShift + 6' rowIndex' LocalizedStrings.State)  								.SetCell(columnShift + 7' rowIndex' LocalizedStrings.Volume).SetStyle(columnShift + 7' typeof(decimal))  								.SetCell(columnShift + 8' rowIndex' LocalizedStrings.Str1326)  								.SetCell(columnShift + 9' rowIndex' LocalizedStrings.Str1327)  								//.SetCell(columnShift + 10' rowIndex' LocalizedStrings.Str1352).SetStyle(columnShift + 9' typeof(long))  								;    							var stopParams = stopOrders[0].Condition.Parameters.Keys.ToArray();    							for (var i = 0; i < stopParams.Length; i++)  								worker.SetCell(columnShift + 11 + i' rowIndex' stopParams[i]);    							foreach (var order in stopOrders)  							{  								worker  									.SetCell(columnShift + 0' rowIndex' order.Id)  									.SetCell(columnShift + 1' rowIndex' order.TransactionId)  									.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  									.SetCell(columnShift + 3' rowIndex' Format(order.Time))  									.SetCell(columnShift + 4' rowIndex' order.Price)  									.SetCell(columnShift + 5' rowIndex' Format(order.State))  									.SetCell(columnShift + 6' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : string.Empty))  									.SetCell(columnShift + 7' rowIndex' order.Volume)  									.SetCell(columnShift + 8' rowIndex' Format(order.LatencyRegistration))  									.SetCell(columnShift + 9' rowIndex' Format(order.LatencyCancellation))  									//.SetCell(columnShift + 10' rowIndex' order.DerivedOrder != null ? (object)order.DerivedOrder.Id : string.Empty)  									;    								for (var i = 0; i < stopParams.Length; i++)  									worker.SetCell(columnShift + 11 + i' rowIndex' order.Condition.Parameters[stopParams[i]] ?? string.Empty);    								rowIndex++;  							}  						}  					}  				}    				worker.Save(FileName' true);  			}
Magic Number,StockSharp.Algo.Strategies.Reporting,ExcelStrategyReport,C:\repos\stocksharp_stocksharp\Algo\Strategies\Reporting\ExcelStrategyReport.cs,Generate,The following statement contains a magic number: using (var worker = hasTemplate ? new ExcelWorker() : new ExcelWorker(Template))  			{  				foreach (var strategy in Strategies)  				{  					if (Template.IsEmpty())  					{  						worker.RenameSheet(strategy.Name);  					}  					else  					{  						if (worker.ContainsSheet(strategy.Name))  							worker.AddSheet(strategy.Name);  					}    					worker  						.SetCell(0' 0' LocalizedStrings.Str1331)    						.SetCell(0' 1' LocalizedStrings.Security + ":")  						.SetCell(1' 1' strategy.Security != null ? strategy.Security.Id : string.Empty)    						.SetCell(0' 2' LocalizedStrings.Portfolio + ":")  						.SetCell(1' 2' strategy.Portfolio != null ? strategy.Portfolio.Name : string.Empty)    						.SetCell(0' 3' LocalizedStrings.Str1334)  						.SetCell(1' 3' Format(strategy.TotalWorkingTime))    						.SetCell(0' 4' LocalizedStrings.Str1335)  						//.SetCell(1' 4' FormatTime(base.Strategy.TotalCPUTime))    						.SetCell(0' 5' LocalizedStrings.Str862 + ":")  						.SetCell(1' 5' strategy.Position)    						.SetCell(0' 6' LocalizedStrings.PnL + ":")  						.SetCell(1' 6' strategy.PnL)    						.SetCell(0' 7' LocalizedStrings.Str159 + ":")  						.SetCell(1' 7' strategy.Commission)    						.SetCell(0' 8' LocalizedStrings.Str163 + ":")  						.SetCell(1' 8' strategy.Slippage)    						.SetCell(0' 9' LocalizedStrings.Str161 + ":")  						.SetCell(1' 9' Format(strategy.Latency));    					var rowIndex = 11;    					foreach (var parameter in strategy.StatisticManager.Parameters.SyncGet(c => c.ToArray()))  					{  						var value = parameter.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' parameter.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					rowIndex += 2;  					worker.SetCell(0' rowIndex' LocalizedStrings.Str1340);  					rowIndex++;    					foreach (var strategyParam in strategy.Parameters.CachedValues)  					{  						var value = strategyParam.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' strategyParam.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					//rowIndex += 2;  					//worker.SetCell(0' rowIndex' "Комиссия по типам:");  					//rowIndex++;    					//foreach (var group in Strategy.CommissionManager.Rules.SyncGet(c => c.ToArray()).GroupBy(c => c.GetType().GetDisplayName()))  					//{  					//	var commission = group.Sum(r => r.Commission);    					//	if (commission == 0)  					//		continue;    					//	worker  					//		.SetCell(0' rowIndex' group.Key)  					//		.SetCell(1' rowIndex' commission);    					//	rowIndex++;  					//}    					var columnShift = 3;    					worker  						.SetCell(columnShift + 0' 0' LocalizedStrings.Str985)    						.SetCell(columnShift + 0' 1' LocalizedStrings.Str1192).SetStyle(columnShift + 0' typeof(long))  						.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  						.SetCell(columnShift + 2' 1' LocalizedStrings.Time).SetStyle(columnShift + 2' "HH:mm:ss.fff")  						.SetCell(columnShift + 3' 1' LocalizedStrings.Price).SetStyle(columnShift + 3' typeof(decimal))  						.SetCell(columnShift + 4' 1' LocalizedStrings.Str1341).SetStyle(columnShift + 4' typeof(decimal))  						.SetCell(columnShift + 5' 1' LocalizedStrings.Volume).SetStyle(columnShift + 5' typeof(decimal))  						.SetCell(columnShift + 6' 1' LocalizedStrings.Str128)  						.SetCell(columnShift + 7' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 7' typeof(long))  						.SetCell(columnShift + 8' 1' LocalizedStrings.Str163).SetStyle(columnShift + 8' typeof(decimal))  						.SetCell(columnShift + 9' 1' LocalizedStrings.Str135)  						.SetCell(columnShift + 10' 1' LocalizedStrings.Str1342).SetStyle(columnShift + 11' typeof(decimal))  						.SetCell(columnShift + 11' 1' LocalizedStrings.Str1343).SetStyle(columnShift + 12' typeof(decimal))  						.SetCell(columnShift + 12' 1' LocalizedStrings.Str1344).SetStyle(columnShift + 13' typeof(decimal))  						.SetCell(columnShift + 13' 1' LocalizedStrings.Str1345).SetStyle(columnShift + 14' typeof(decimal))  						.SetCell(columnShift + 14' 1' LocalizedStrings.Str862).SetStyle(columnShift + 15' typeof(decimal));    					worker  						.SetConditionalFormatting(columnShift + 10' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 11' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 12' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 13' ComparisonOperator.Less' "0"' null' Colors.Red);    					var totalPnL = 0m;  					var position = 0m;    					var queues = new Dictionary<Security' PnLQueue>();    					rowIndex = 2;  					foreach (var trade in strategy.MyTrades.ToArray())  					{  						var info = strategy.PnLManager.ProcessMessage(trade.ToMessage());    						totalPnL += info.PnL;  						position += trade.GetPosition() ?? 0;    						var queue = queues.SafeAdd(trade.Trade.Security' key => new PnLQueue(key.ToSecurityId()));    						var localInfo = queue.Process(trade.ToMessage());    						worker  							.SetCell(columnShift + 0' rowIndex' trade.Trade.Id)  							.SetCell(columnShift + 1' rowIndex' trade.Order.TransactionId)  							.SetCell(columnShift + 2' rowIndex' Format(trade.Trade.Time))  							.SetCell(columnShift + 3' rowIndex' trade.Trade.Price)  							.SetCell(columnShift + 4' rowIndex' trade.Order.Price)  							.SetCell(columnShift + 5' rowIndex' trade.Trade.Volume)  							.SetCell(columnShift + 6' rowIndex' Format(trade.Order.Direction))  							.SetCell(columnShift + 7' rowIndex' trade.Order.Id)  							.SetCell(columnShift + 8' rowIndex' trade.Slippage)  							.SetCell(columnShift + 9' rowIndex' trade.Order.Comment)  							.SetCell(columnShift + 10' rowIndex' MathHelper.Round(info.PnL' Decimals))  							.SetCell(columnShift + 11' rowIndex' MathHelper.Round(localInfo.PnL' Decimals))  							.SetCell(columnShift + 12' rowIndex' MathHelper.Round(totalPnL' Decimals))  							.SetCell(columnShift + 13' rowIndex' MathHelper.Round(queue.RealizedPnL' Decimals))  							.SetCell(columnShift + 14' rowIndex' position);    						rowIndex++;  					}    					if (IncludeOrders)  					{  						columnShift += 17;    						worker  							.SetCell(columnShift + 0' 0' LocalizedStrings.Orders)    							.SetCell(columnShift + 0' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  							.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  							.SetCell(columnShift + 2' 1' LocalizedStrings.Str128)  							.SetCell(columnShift + 3' 1' LocalizedStrings.Str1346).SetStyle(columnShift + 3' "HH:mm:ss.fff")  							.SetCell(columnShift + 4' 1' LocalizedStrings.Str1347).SetStyle(columnShift + 4' "HH:mm:ss.fff")  							.SetCell(columnShift + 5' 1' LocalizedStrings.Str1348)  							.SetCell(columnShift + 6' 1' LocalizedStrings.Price).SetStyle(columnShift + 6' typeof(decimal))  							.SetCell(columnShift + 7' 1' LocalizedStrings.Str1323).SetStyle(columnShift + 7' typeof(decimal))  							.SetCell(columnShift + 8' 1' LocalizedStrings.Str1324)  							.SetCell(columnShift + 9' 1' LocalizedStrings.State)  							.SetCell(columnShift + 10' 1' LocalizedStrings.Str1325).SetStyle(columnShift + 10' typeof(decimal))  							.SetCell(columnShift + 11' 1' LocalizedStrings.Volume).SetStyle(columnShift + 11' typeof(decimal))  							.SetCell(columnShift + 12' 1' LocalizedStrings.Type)  							.SetCell(columnShift + 13' 1' LocalizedStrings.Str1326)  							.SetCell(columnShift + 14' 1' LocalizedStrings.Str1327)  							.SetCell(columnShift + 15' 1' LocalizedStrings.Str135);    						worker  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str1329)' null' Colors.Green)  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str238)' null' Colors.Red);    						rowIndex = 2;  						foreach (var order in strategy.Orders.ToArray())  						{  							worker  								.SetCell(columnShift + 0' rowIndex' order.Id)  								.SetCell(columnShift + 1' rowIndex' order.TransactionId)  								.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  								.SetCell(columnShift + 3' rowIndex' Format(order.Time))  								.SetCell(columnShift + 4' rowIndex' Format(order.LastChangeTime))  								.SetCell(columnShift + 5' rowIndex' Format(order.LastChangeTime - order.Time))  								.SetCell(columnShift + 6' rowIndex' order.Price)  								.SetCell(columnShift + 7' rowIndex' MathHelper.Round(order.GetAveragePrice(strategy.Connector)' Decimals))  								.SetCell(columnShift + 8' rowIndex' Format(order.State))  								.SetCell(columnShift + 9' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : LocalizedStrings.Str238))  								.SetCell(columnShift + 10' rowIndex' order.Balance)  								.SetCell(columnShift + 11' rowIndex' order.Volume)  								.SetCell(columnShift + 12' rowIndex' Format(order.Type))  								.SetCell(columnShift + 13' rowIndex' Format(order.LatencyRegistration))  								.SetCell(columnShift + 14' rowIndex' Format(order.LatencyCancellation))  								.SetCell(columnShift + 15' rowIndex' order.Comment);    							rowIndex++;  						}    						var stopOrders = strategy.StopOrders.ToArray();    						if (stopOrders.Length > 0)  						{  							rowIndex += 2;    							worker  								.SetCell(columnShift + 0' rowIndex - 1' LocalizedStrings.Str1351)    								.SetCell(columnShift + 0' rowIndex' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  								.SetCell(columnShift + 1' rowIndex' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  								.SetCell(columnShift + 2' rowIndex' LocalizedStrings.Str128)  								.SetCell(columnShift + 3' rowIndex' LocalizedStrings.Time).SetStyle(columnShift + 3' "HH:mm:ss.fff")  								.SetCell(columnShift + 4' rowIndex' LocalizedStrings.Price).SetStyle(columnShift + 4' typeof(decimal))  								.SetCell(columnShift + 5' rowIndex' LocalizedStrings.Str1324)  								.SetCell(columnShift + 6' rowIndex' LocalizedStrings.State)  								.SetCell(columnShift + 7' rowIndex' LocalizedStrings.Volume).SetStyle(columnShift + 7' typeof(decimal))  								.SetCell(columnShift + 8' rowIndex' LocalizedStrings.Str1326)  								.SetCell(columnShift + 9' rowIndex' LocalizedStrings.Str1327)  								//.SetCell(columnShift + 10' rowIndex' LocalizedStrings.Str1352).SetStyle(columnShift + 9' typeof(long))  								;    							var stopParams = stopOrders[0].Condition.Parameters.Keys.ToArray();    							for (var i = 0; i < stopParams.Length; i++)  								worker.SetCell(columnShift + 11 + i' rowIndex' stopParams[i]);    							foreach (var order in stopOrders)  							{  								worker  									.SetCell(columnShift + 0' rowIndex' order.Id)  									.SetCell(columnShift + 1' rowIndex' order.TransactionId)  									.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  									.SetCell(columnShift + 3' rowIndex' Format(order.Time))  									.SetCell(columnShift + 4' rowIndex' order.Price)  									.SetCell(columnShift + 5' rowIndex' Format(order.State))  									.SetCell(columnShift + 6' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : string.Empty))  									.SetCell(columnShift + 7' rowIndex' order.Volume)  									.SetCell(columnShift + 8' rowIndex' Format(order.LatencyRegistration))  									.SetCell(columnShift + 9' rowIndex' Format(order.LatencyCancellation))  									//.SetCell(columnShift + 10' rowIndex' order.DerivedOrder != null ? (object)order.DerivedOrder.Id : string.Empty)  									;    								for (var i = 0; i < stopParams.Length; i++)  									worker.SetCell(columnShift + 11 + i' rowIndex' order.Condition.Parameters[stopParams[i]] ?? string.Empty);    								rowIndex++;  							}  						}  					}  				}    				worker.Save(FileName' true);  			}
Magic Number,StockSharp.Algo.Strategies.Reporting,ExcelStrategyReport,C:\repos\stocksharp_stocksharp\Algo\Strategies\Reporting\ExcelStrategyReport.cs,Generate,The following statement contains a magic number: using (var worker = hasTemplate ? new ExcelWorker() : new ExcelWorker(Template))  			{  				foreach (var strategy in Strategies)  				{  					if (Template.IsEmpty())  					{  						worker.RenameSheet(strategy.Name);  					}  					else  					{  						if (worker.ContainsSheet(strategy.Name))  							worker.AddSheet(strategy.Name);  					}    					worker  						.SetCell(0' 0' LocalizedStrings.Str1331)    						.SetCell(0' 1' LocalizedStrings.Security + ":")  						.SetCell(1' 1' strategy.Security != null ? strategy.Security.Id : string.Empty)    						.SetCell(0' 2' LocalizedStrings.Portfolio + ":")  						.SetCell(1' 2' strategy.Portfolio != null ? strategy.Portfolio.Name : string.Empty)    						.SetCell(0' 3' LocalizedStrings.Str1334)  						.SetCell(1' 3' Format(strategy.TotalWorkingTime))    						.SetCell(0' 4' LocalizedStrings.Str1335)  						//.SetCell(1' 4' FormatTime(base.Strategy.TotalCPUTime))    						.SetCell(0' 5' LocalizedStrings.Str862 + ":")  						.SetCell(1' 5' strategy.Position)    						.SetCell(0' 6' LocalizedStrings.PnL + ":")  						.SetCell(1' 6' strategy.PnL)    						.SetCell(0' 7' LocalizedStrings.Str159 + ":")  						.SetCell(1' 7' strategy.Commission)    						.SetCell(0' 8' LocalizedStrings.Str163 + ":")  						.SetCell(1' 8' strategy.Slippage)    						.SetCell(0' 9' LocalizedStrings.Str161 + ":")  						.SetCell(1' 9' Format(strategy.Latency));    					var rowIndex = 11;    					foreach (var parameter in strategy.StatisticManager.Parameters.SyncGet(c => c.ToArray()))  					{  						var value = parameter.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' parameter.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					rowIndex += 2;  					worker.SetCell(0' rowIndex' LocalizedStrings.Str1340);  					rowIndex++;    					foreach (var strategyParam in strategy.Parameters.CachedValues)  					{  						var value = strategyParam.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' strategyParam.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					//rowIndex += 2;  					//worker.SetCell(0' rowIndex' "Комиссия по типам:");  					//rowIndex++;    					//foreach (var group in Strategy.CommissionManager.Rules.SyncGet(c => c.ToArray()).GroupBy(c => c.GetType().GetDisplayName()))  					//{  					//	var commission = group.Sum(r => r.Commission);    					//	if (commission == 0)  					//		continue;    					//	worker  					//		.SetCell(0' rowIndex' group.Key)  					//		.SetCell(1' rowIndex' commission);    					//	rowIndex++;  					//}    					var columnShift = 3;    					worker  						.SetCell(columnShift + 0' 0' LocalizedStrings.Str985)    						.SetCell(columnShift + 0' 1' LocalizedStrings.Str1192).SetStyle(columnShift + 0' typeof(long))  						.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  						.SetCell(columnShift + 2' 1' LocalizedStrings.Time).SetStyle(columnShift + 2' "HH:mm:ss.fff")  						.SetCell(columnShift + 3' 1' LocalizedStrings.Price).SetStyle(columnShift + 3' typeof(decimal))  						.SetCell(columnShift + 4' 1' LocalizedStrings.Str1341).SetStyle(columnShift + 4' typeof(decimal))  						.SetCell(columnShift + 5' 1' LocalizedStrings.Volume).SetStyle(columnShift + 5' typeof(decimal))  						.SetCell(columnShift + 6' 1' LocalizedStrings.Str128)  						.SetCell(columnShift + 7' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 7' typeof(long))  						.SetCell(columnShift + 8' 1' LocalizedStrings.Str163).SetStyle(columnShift + 8' typeof(decimal))  						.SetCell(columnShift + 9' 1' LocalizedStrings.Str135)  						.SetCell(columnShift + 10' 1' LocalizedStrings.Str1342).SetStyle(columnShift + 11' typeof(decimal))  						.SetCell(columnShift + 11' 1' LocalizedStrings.Str1343).SetStyle(columnShift + 12' typeof(decimal))  						.SetCell(columnShift + 12' 1' LocalizedStrings.Str1344).SetStyle(columnShift + 13' typeof(decimal))  						.SetCell(columnShift + 13' 1' LocalizedStrings.Str1345).SetStyle(columnShift + 14' typeof(decimal))  						.SetCell(columnShift + 14' 1' LocalizedStrings.Str862).SetStyle(columnShift + 15' typeof(decimal));    					worker  						.SetConditionalFormatting(columnShift + 10' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 11' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 12' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 13' ComparisonOperator.Less' "0"' null' Colors.Red);    					var totalPnL = 0m;  					var position = 0m;    					var queues = new Dictionary<Security' PnLQueue>();    					rowIndex = 2;  					foreach (var trade in strategy.MyTrades.ToArray())  					{  						var info = strategy.PnLManager.ProcessMessage(trade.ToMessage());    						totalPnL += info.PnL;  						position += trade.GetPosition() ?? 0;    						var queue = queues.SafeAdd(trade.Trade.Security' key => new PnLQueue(key.ToSecurityId()));    						var localInfo = queue.Process(trade.ToMessage());    						worker  							.SetCell(columnShift + 0' rowIndex' trade.Trade.Id)  							.SetCell(columnShift + 1' rowIndex' trade.Order.TransactionId)  							.SetCell(columnShift + 2' rowIndex' Format(trade.Trade.Time))  							.SetCell(columnShift + 3' rowIndex' trade.Trade.Price)  							.SetCell(columnShift + 4' rowIndex' trade.Order.Price)  							.SetCell(columnShift + 5' rowIndex' trade.Trade.Volume)  							.SetCell(columnShift + 6' rowIndex' Format(trade.Order.Direction))  							.SetCell(columnShift + 7' rowIndex' trade.Order.Id)  							.SetCell(columnShift + 8' rowIndex' trade.Slippage)  							.SetCell(columnShift + 9' rowIndex' trade.Order.Comment)  							.SetCell(columnShift + 10' rowIndex' MathHelper.Round(info.PnL' Decimals))  							.SetCell(columnShift + 11' rowIndex' MathHelper.Round(localInfo.PnL' Decimals))  							.SetCell(columnShift + 12' rowIndex' MathHelper.Round(totalPnL' Decimals))  							.SetCell(columnShift + 13' rowIndex' MathHelper.Round(queue.RealizedPnL' Decimals))  							.SetCell(columnShift + 14' rowIndex' position);    						rowIndex++;  					}    					if (IncludeOrders)  					{  						columnShift += 17;    						worker  							.SetCell(columnShift + 0' 0' LocalizedStrings.Orders)    							.SetCell(columnShift + 0' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  							.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  							.SetCell(columnShift + 2' 1' LocalizedStrings.Str128)  							.SetCell(columnShift + 3' 1' LocalizedStrings.Str1346).SetStyle(columnShift + 3' "HH:mm:ss.fff")  							.SetCell(columnShift + 4' 1' LocalizedStrings.Str1347).SetStyle(columnShift + 4' "HH:mm:ss.fff")  							.SetCell(columnShift + 5' 1' LocalizedStrings.Str1348)  							.SetCell(columnShift + 6' 1' LocalizedStrings.Price).SetStyle(columnShift + 6' typeof(decimal))  							.SetCell(columnShift + 7' 1' LocalizedStrings.Str1323).SetStyle(columnShift + 7' typeof(decimal))  							.SetCell(columnShift + 8' 1' LocalizedStrings.Str1324)  							.SetCell(columnShift + 9' 1' LocalizedStrings.State)  							.SetCell(columnShift + 10' 1' LocalizedStrings.Str1325).SetStyle(columnShift + 10' typeof(decimal))  							.SetCell(columnShift + 11' 1' LocalizedStrings.Volume).SetStyle(columnShift + 11' typeof(decimal))  							.SetCell(columnShift + 12' 1' LocalizedStrings.Type)  							.SetCell(columnShift + 13' 1' LocalizedStrings.Str1326)  							.SetCell(columnShift + 14' 1' LocalizedStrings.Str1327)  							.SetCell(columnShift + 15' 1' LocalizedStrings.Str135);    						worker  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str1329)' null' Colors.Green)  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str238)' null' Colors.Red);    						rowIndex = 2;  						foreach (var order in strategy.Orders.ToArray())  						{  							worker  								.SetCell(columnShift + 0' rowIndex' order.Id)  								.SetCell(columnShift + 1' rowIndex' order.TransactionId)  								.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  								.SetCell(columnShift + 3' rowIndex' Format(order.Time))  								.SetCell(columnShift + 4' rowIndex' Format(order.LastChangeTime))  								.SetCell(columnShift + 5' rowIndex' Format(order.LastChangeTime - order.Time))  								.SetCell(columnShift + 6' rowIndex' order.Price)  								.SetCell(columnShift + 7' rowIndex' MathHelper.Round(order.GetAveragePrice(strategy.Connector)' Decimals))  								.SetCell(columnShift + 8' rowIndex' Format(order.State))  								.SetCell(columnShift + 9' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : LocalizedStrings.Str238))  								.SetCell(columnShift + 10' rowIndex' order.Balance)  								.SetCell(columnShift + 11' rowIndex' order.Volume)  								.SetCell(columnShift + 12' rowIndex' Format(order.Type))  								.SetCell(columnShift + 13' rowIndex' Format(order.LatencyRegistration))  								.SetCell(columnShift + 14' rowIndex' Format(order.LatencyCancellation))  								.SetCell(columnShift + 15' rowIndex' order.Comment);    							rowIndex++;  						}    						var stopOrders = strategy.StopOrders.ToArray();    						if (stopOrders.Length > 0)  						{  							rowIndex += 2;    							worker  								.SetCell(columnShift + 0' rowIndex - 1' LocalizedStrings.Str1351)    								.SetCell(columnShift + 0' rowIndex' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  								.SetCell(columnShift + 1' rowIndex' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  								.SetCell(columnShift + 2' rowIndex' LocalizedStrings.Str128)  								.SetCell(columnShift + 3' rowIndex' LocalizedStrings.Time).SetStyle(columnShift + 3' "HH:mm:ss.fff")  								.SetCell(columnShift + 4' rowIndex' LocalizedStrings.Price).SetStyle(columnShift + 4' typeof(decimal))  								.SetCell(columnShift + 5' rowIndex' LocalizedStrings.Str1324)  								.SetCell(columnShift + 6' rowIndex' LocalizedStrings.State)  								.SetCell(columnShift + 7' rowIndex' LocalizedStrings.Volume).SetStyle(columnShift + 7' typeof(decimal))  								.SetCell(columnShift + 8' rowIndex' LocalizedStrings.Str1326)  								.SetCell(columnShift + 9' rowIndex' LocalizedStrings.Str1327)  								//.SetCell(columnShift + 10' rowIndex' LocalizedStrings.Str1352).SetStyle(columnShift + 9' typeof(long))  								;    							var stopParams = stopOrders[0].Condition.Parameters.Keys.ToArray();    							for (var i = 0; i < stopParams.Length; i++)  								worker.SetCell(columnShift + 11 + i' rowIndex' stopParams[i]);    							foreach (var order in stopOrders)  							{  								worker  									.SetCell(columnShift + 0' rowIndex' order.Id)  									.SetCell(columnShift + 1' rowIndex' order.TransactionId)  									.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  									.SetCell(columnShift + 3' rowIndex' Format(order.Time))  									.SetCell(columnShift + 4' rowIndex' order.Price)  									.SetCell(columnShift + 5' rowIndex' Format(order.State))  									.SetCell(columnShift + 6' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : string.Empty))  									.SetCell(columnShift + 7' rowIndex' order.Volume)  									.SetCell(columnShift + 8' rowIndex' Format(order.LatencyRegistration))  									.SetCell(columnShift + 9' rowIndex' Format(order.LatencyCancellation))  									//.SetCell(columnShift + 10' rowIndex' order.DerivedOrder != null ? (object)order.DerivedOrder.Id : string.Empty)  									;    								for (var i = 0; i < stopParams.Length; i++)  									worker.SetCell(columnShift + 11 + i' rowIndex' order.Condition.Parameters[stopParams[i]] ?? string.Empty);    								rowIndex++;  							}  						}  					}  				}    				worker.Save(FileName' true);  			}
Magic Number,StockSharp.Algo.Strategies.Reporting,ExcelStrategyReport,C:\repos\stocksharp_stocksharp\Algo\Strategies\Reporting\ExcelStrategyReport.cs,Generate,The following statement contains a magic number: using (var worker = hasTemplate ? new ExcelWorker() : new ExcelWorker(Template))  			{  				foreach (var strategy in Strategies)  				{  					if (Template.IsEmpty())  					{  						worker.RenameSheet(strategy.Name);  					}  					else  					{  						if (worker.ContainsSheet(strategy.Name))  							worker.AddSheet(strategy.Name);  					}    					worker  						.SetCell(0' 0' LocalizedStrings.Str1331)    						.SetCell(0' 1' LocalizedStrings.Security + ":")  						.SetCell(1' 1' strategy.Security != null ? strategy.Security.Id : string.Empty)    						.SetCell(0' 2' LocalizedStrings.Portfolio + ":")  						.SetCell(1' 2' strategy.Portfolio != null ? strategy.Portfolio.Name : string.Empty)    						.SetCell(0' 3' LocalizedStrings.Str1334)  						.SetCell(1' 3' Format(strategy.TotalWorkingTime))    						.SetCell(0' 4' LocalizedStrings.Str1335)  						//.SetCell(1' 4' FormatTime(base.Strategy.TotalCPUTime))    						.SetCell(0' 5' LocalizedStrings.Str862 + ":")  						.SetCell(1' 5' strategy.Position)    						.SetCell(0' 6' LocalizedStrings.PnL + ":")  						.SetCell(1' 6' strategy.PnL)    						.SetCell(0' 7' LocalizedStrings.Str159 + ":")  						.SetCell(1' 7' strategy.Commission)    						.SetCell(0' 8' LocalizedStrings.Str163 + ":")  						.SetCell(1' 8' strategy.Slippage)    						.SetCell(0' 9' LocalizedStrings.Str161 + ":")  						.SetCell(1' 9' Format(strategy.Latency));    					var rowIndex = 11;    					foreach (var parameter in strategy.StatisticManager.Parameters.SyncGet(c => c.ToArray()))  					{  						var value = parameter.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' parameter.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					rowIndex += 2;  					worker.SetCell(0' rowIndex' LocalizedStrings.Str1340);  					rowIndex++;    					foreach (var strategyParam in strategy.Parameters.CachedValues)  					{  						var value = strategyParam.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' strategyParam.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					//rowIndex += 2;  					//worker.SetCell(0' rowIndex' "Комиссия по типам:");  					//rowIndex++;    					//foreach (var group in Strategy.CommissionManager.Rules.SyncGet(c => c.ToArray()).GroupBy(c => c.GetType().GetDisplayName()))  					//{  					//	var commission = group.Sum(r => r.Commission);    					//	if (commission == 0)  					//		continue;    					//	worker  					//		.SetCell(0' rowIndex' group.Key)  					//		.SetCell(1' rowIndex' commission);    					//	rowIndex++;  					//}    					var columnShift = 3;    					worker  						.SetCell(columnShift + 0' 0' LocalizedStrings.Str985)    						.SetCell(columnShift + 0' 1' LocalizedStrings.Str1192).SetStyle(columnShift + 0' typeof(long))  						.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  						.SetCell(columnShift + 2' 1' LocalizedStrings.Time).SetStyle(columnShift + 2' "HH:mm:ss.fff")  						.SetCell(columnShift + 3' 1' LocalizedStrings.Price).SetStyle(columnShift + 3' typeof(decimal))  						.SetCell(columnShift + 4' 1' LocalizedStrings.Str1341).SetStyle(columnShift + 4' typeof(decimal))  						.SetCell(columnShift + 5' 1' LocalizedStrings.Volume).SetStyle(columnShift + 5' typeof(decimal))  						.SetCell(columnShift + 6' 1' LocalizedStrings.Str128)  						.SetCell(columnShift + 7' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 7' typeof(long))  						.SetCell(columnShift + 8' 1' LocalizedStrings.Str163).SetStyle(columnShift + 8' typeof(decimal))  						.SetCell(columnShift + 9' 1' LocalizedStrings.Str135)  						.SetCell(columnShift + 10' 1' LocalizedStrings.Str1342).SetStyle(columnShift + 11' typeof(decimal))  						.SetCell(columnShift + 11' 1' LocalizedStrings.Str1343).SetStyle(columnShift + 12' typeof(decimal))  						.SetCell(columnShift + 12' 1' LocalizedStrings.Str1344).SetStyle(columnShift + 13' typeof(decimal))  						.SetCell(columnShift + 13' 1' LocalizedStrings.Str1345).SetStyle(columnShift + 14' typeof(decimal))  						.SetCell(columnShift + 14' 1' LocalizedStrings.Str862).SetStyle(columnShift + 15' typeof(decimal));    					worker  						.SetConditionalFormatting(columnShift + 10' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 11' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 12' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 13' ComparisonOperator.Less' "0"' null' Colors.Red);    					var totalPnL = 0m;  					var position = 0m;    					var queues = new Dictionary<Security' PnLQueue>();    					rowIndex = 2;  					foreach (var trade in strategy.MyTrades.ToArray())  					{  						var info = strategy.PnLManager.ProcessMessage(trade.ToMessage());    						totalPnL += info.PnL;  						position += trade.GetPosition() ?? 0;    						var queue = queues.SafeAdd(trade.Trade.Security' key => new PnLQueue(key.ToSecurityId()));    						var localInfo = queue.Process(trade.ToMessage());    						worker  							.SetCell(columnShift + 0' rowIndex' trade.Trade.Id)  							.SetCell(columnShift + 1' rowIndex' trade.Order.TransactionId)  							.SetCell(columnShift + 2' rowIndex' Format(trade.Trade.Time))  							.SetCell(columnShift + 3' rowIndex' trade.Trade.Price)  							.SetCell(columnShift + 4' rowIndex' trade.Order.Price)  							.SetCell(columnShift + 5' rowIndex' trade.Trade.Volume)  							.SetCell(columnShift + 6' rowIndex' Format(trade.Order.Direction))  							.SetCell(columnShift + 7' rowIndex' trade.Order.Id)  							.SetCell(columnShift + 8' rowIndex' trade.Slippage)  							.SetCell(columnShift + 9' rowIndex' trade.Order.Comment)  							.SetCell(columnShift + 10' rowIndex' MathHelper.Round(info.PnL' Decimals))  							.SetCell(columnShift + 11' rowIndex' MathHelper.Round(localInfo.PnL' Decimals))  							.SetCell(columnShift + 12' rowIndex' MathHelper.Round(totalPnL' Decimals))  							.SetCell(columnShift + 13' rowIndex' MathHelper.Round(queue.RealizedPnL' Decimals))  							.SetCell(columnShift + 14' rowIndex' position);    						rowIndex++;  					}    					if (IncludeOrders)  					{  						columnShift += 17;    						worker  							.SetCell(columnShift + 0' 0' LocalizedStrings.Orders)    							.SetCell(columnShift + 0' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  							.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  							.SetCell(columnShift + 2' 1' LocalizedStrings.Str128)  							.SetCell(columnShift + 3' 1' LocalizedStrings.Str1346).SetStyle(columnShift + 3' "HH:mm:ss.fff")  							.SetCell(columnShift + 4' 1' LocalizedStrings.Str1347).SetStyle(columnShift + 4' "HH:mm:ss.fff")  							.SetCell(columnShift + 5' 1' LocalizedStrings.Str1348)  							.SetCell(columnShift + 6' 1' LocalizedStrings.Price).SetStyle(columnShift + 6' typeof(decimal))  							.SetCell(columnShift + 7' 1' LocalizedStrings.Str1323).SetStyle(columnShift + 7' typeof(decimal))  							.SetCell(columnShift + 8' 1' LocalizedStrings.Str1324)  							.SetCell(columnShift + 9' 1' LocalizedStrings.State)  							.SetCell(columnShift + 10' 1' LocalizedStrings.Str1325).SetStyle(columnShift + 10' typeof(decimal))  							.SetCell(columnShift + 11' 1' LocalizedStrings.Volume).SetStyle(columnShift + 11' typeof(decimal))  							.SetCell(columnShift + 12' 1' LocalizedStrings.Type)  							.SetCell(columnShift + 13' 1' LocalizedStrings.Str1326)  							.SetCell(columnShift + 14' 1' LocalizedStrings.Str1327)  							.SetCell(columnShift + 15' 1' LocalizedStrings.Str135);    						worker  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str1329)' null' Colors.Green)  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str238)' null' Colors.Red);    						rowIndex = 2;  						foreach (var order in strategy.Orders.ToArray())  						{  							worker  								.SetCell(columnShift + 0' rowIndex' order.Id)  								.SetCell(columnShift + 1' rowIndex' order.TransactionId)  								.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  								.SetCell(columnShift + 3' rowIndex' Format(order.Time))  								.SetCell(columnShift + 4' rowIndex' Format(order.LastChangeTime))  								.SetCell(columnShift + 5' rowIndex' Format(order.LastChangeTime - order.Time))  								.SetCell(columnShift + 6' rowIndex' order.Price)  								.SetCell(columnShift + 7' rowIndex' MathHelper.Round(order.GetAveragePrice(strategy.Connector)' Decimals))  								.SetCell(columnShift + 8' rowIndex' Format(order.State))  								.SetCell(columnShift + 9' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : LocalizedStrings.Str238))  								.SetCell(columnShift + 10' rowIndex' order.Balance)  								.SetCell(columnShift + 11' rowIndex' order.Volume)  								.SetCell(columnShift + 12' rowIndex' Format(order.Type))  								.SetCell(columnShift + 13' rowIndex' Format(order.LatencyRegistration))  								.SetCell(columnShift + 14' rowIndex' Format(order.LatencyCancellation))  								.SetCell(columnShift + 15' rowIndex' order.Comment);    							rowIndex++;  						}    						var stopOrders = strategy.StopOrders.ToArray();    						if (stopOrders.Length > 0)  						{  							rowIndex += 2;    							worker  								.SetCell(columnShift + 0' rowIndex - 1' LocalizedStrings.Str1351)    								.SetCell(columnShift + 0' rowIndex' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  								.SetCell(columnShift + 1' rowIndex' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  								.SetCell(columnShift + 2' rowIndex' LocalizedStrings.Str128)  								.SetCell(columnShift + 3' rowIndex' LocalizedStrings.Time).SetStyle(columnShift + 3' "HH:mm:ss.fff")  								.SetCell(columnShift + 4' rowIndex' LocalizedStrings.Price).SetStyle(columnShift + 4' typeof(decimal))  								.SetCell(columnShift + 5' rowIndex' LocalizedStrings.Str1324)  								.SetCell(columnShift + 6' rowIndex' LocalizedStrings.State)  								.SetCell(columnShift + 7' rowIndex' LocalizedStrings.Volume).SetStyle(columnShift + 7' typeof(decimal))  								.SetCell(columnShift + 8' rowIndex' LocalizedStrings.Str1326)  								.SetCell(columnShift + 9' rowIndex' LocalizedStrings.Str1327)  								//.SetCell(columnShift + 10' rowIndex' LocalizedStrings.Str1352).SetStyle(columnShift + 9' typeof(long))  								;    							var stopParams = stopOrders[0].Condition.Parameters.Keys.ToArray();    							for (var i = 0; i < stopParams.Length; i++)  								worker.SetCell(columnShift + 11 + i' rowIndex' stopParams[i]);    							foreach (var order in stopOrders)  							{  								worker  									.SetCell(columnShift + 0' rowIndex' order.Id)  									.SetCell(columnShift + 1' rowIndex' order.TransactionId)  									.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  									.SetCell(columnShift + 3' rowIndex' Format(order.Time))  									.SetCell(columnShift + 4' rowIndex' order.Price)  									.SetCell(columnShift + 5' rowIndex' Format(order.State))  									.SetCell(columnShift + 6' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : string.Empty))  									.SetCell(columnShift + 7' rowIndex' order.Volume)  									.SetCell(columnShift + 8' rowIndex' Format(order.LatencyRegistration))  									.SetCell(columnShift + 9' rowIndex' Format(order.LatencyCancellation))  									//.SetCell(columnShift + 10' rowIndex' order.DerivedOrder != null ? (object)order.DerivedOrder.Id : string.Empty)  									;    								for (var i = 0; i < stopParams.Length; i++)  									worker.SetCell(columnShift + 11 + i' rowIndex' order.Condition.Parameters[stopParams[i]] ?? string.Empty);    								rowIndex++;  							}  						}  					}  				}    				worker.Save(FileName' true);  			}
Magic Number,StockSharp.Algo.Strategies.Reporting,ExcelStrategyReport,C:\repos\stocksharp_stocksharp\Algo\Strategies\Reporting\ExcelStrategyReport.cs,Generate,The following statement contains a magic number: using (var worker = hasTemplate ? new ExcelWorker() : new ExcelWorker(Template))  			{  				foreach (var strategy in Strategies)  				{  					if (Template.IsEmpty())  					{  						worker.RenameSheet(strategy.Name);  					}  					else  					{  						if (worker.ContainsSheet(strategy.Name))  							worker.AddSheet(strategy.Name);  					}    					worker  						.SetCell(0' 0' LocalizedStrings.Str1331)    						.SetCell(0' 1' LocalizedStrings.Security + ":")  						.SetCell(1' 1' strategy.Security != null ? strategy.Security.Id : string.Empty)    						.SetCell(0' 2' LocalizedStrings.Portfolio + ":")  						.SetCell(1' 2' strategy.Portfolio != null ? strategy.Portfolio.Name : string.Empty)    						.SetCell(0' 3' LocalizedStrings.Str1334)  						.SetCell(1' 3' Format(strategy.TotalWorkingTime))    						.SetCell(0' 4' LocalizedStrings.Str1335)  						//.SetCell(1' 4' FormatTime(base.Strategy.TotalCPUTime))    						.SetCell(0' 5' LocalizedStrings.Str862 + ":")  						.SetCell(1' 5' strategy.Position)    						.SetCell(0' 6' LocalizedStrings.PnL + ":")  						.SetCell(1' 6' strategy.PnL)    						.SetCell(0' 7' LocalizedStrings.Str159 + ":")  						.SetCell(1' 7' strategy.Commission)    						.SetCell(0' 8' LocalizedStrings.Str163 + ":")  						.SetCell(1' 8' strategy.Slippage)    						.SetCell(0' 9' LocalizedStrings.Str161 + ":")  						.SetCell(1' 9' Format(strategy.Latency));    					var rowIndex = 11;    					foreach (var parameter in strategy.StatisticManager.Parameters.SyncGet(c => c.ToArray()))  					{  						var value = parameter.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' parameter.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					rowIndex += 2;  					worker.SetCell(0' rowIndex' LocalizedStrings.Str1340);  					rowIndex++;    					foreach (var strategyParam in strategy.Parameters.CachedValues)  					{  						var value = strategyParam.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' strategyParam.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					//rowIndex += 2;  					//worker.SetCell(0' rowIndex' "Комиссия по типам:");  					//rowIndex++;    					//foreach (var group in Strategy.CommissionManager.Rules.SyncGet(c => c.ToArray()).GroupBy(c => c.GetType().GetDisplayName()))  					//{  					//	var commission = group.Sum(r => r.Commission);    					//	if (commission == 0)  					//		continue;    					//	worker  					//		.SetCell(0' rowIndex' group.Key)  					//		.SetCell(1' rowIndex' commission);    					//	rowIndex++;  					//}    					var columnShift = 3;    					worker  						.SetCell(columnShift + 0' 0' LocalizedStrings.Str985)    						.SetCell(columnShift + 0' 1' LocalizedStrings.Str1192).SetStyle(columnShift + 0' typeof(long))  						.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  						.SetCell(columnShift + 2' 1' LocalizedStrings.Time).SetStyle(columnShift + 2' "HH:mm:ss.fff")  						.SetCell(columnShift + 3' 1' LocalizedStrings.Price).SetStyle(columnShift + 3' typeof(decimal))  						.SetCell(columnShift + 4' 1' LocalizedStrings.Str1341).SetStyle(columnShift + 4' typeof(decimal))  						.SetCell(columnShift + 5' 1' LocalizedStrings.Volume).SetStyle(columnShift + 5' typeof(decimal))  						.SetCell(columnShift + 6' 1' LocalizedStrings.Str128)  						.SetCell(columnShift + 7' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 7' typeof(long))  						.SetCell(columnShift + 8' 1' LocalizedStrings.Str163).SetStyle(columnShift + 8' typeof(decimal))  						.SetCell(columnShift + 9' 1' LocalizedStrings.Str135)  						.SetCell(columnShift + 10' 1' LocalizedStrings.Str1342).SetStyle(columnShift + 11' typeof(decimal))  						.SetCell(columnShift + 11' 1' LocalizedStrings.Str1343).SetStyle(columnShift + 12' typeof(decimal))  						.SetCell(columnShift + 12' 1' LocalizedStrings.Str1344).SetStyle(columnShift + 13' typeof(decimal))  						.SetCell(columnShift + 13' 1' LocalizedStrings.Str1345).SetStyle(columnShift + 14' typeof(decimal))  						.SetCell(columnShift + 14' 1' LocalizedStrings.Str862).SetStyle(columnShift + 15' typeof(decimal));    					worker  						.SetConditionalFormatting(columnShift + 10' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 11' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 12' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 13' ComparisonOperator.Less' "0"' null' Colors.Red);    					var totalPnL = 0m;  					var position = 0m;    					var queues = new Dictionary<Security' PnLQueue>();    					rowIndex = 2;  					foreach (var trade in strategy.MyTrades.ToArray())  					{  						var info = strategy.PnLManager.ProcessMessage(trade.ToMessage());    						totalPnL += info.PnL;  						position += trade.GetPosition() ?? 0;    						var queue = queues.SafeAdd(trade.Trade.Security' key => new PnLQueue(key.ToSecurityId()));    						var localInfo = queue.Process(trade.ToMessage());    						worker  							.SetCell(columnShift + 0' rowIndex' trade.Trade.Id)  							.SetCell(columnShift + 1' rowIndex' trade.Order.TransactionId)  							.SetCell(columnShift + 2' rowIndex' Format(trade.Trade.Time))  							.SetCell(columnShift + 3' rowIndex' trade.Trade.Price)  							.SetCell(columnShift + 4' rowIndex' trade.Order.Price)  							.SetCell(columnShift + 5' rowIndex' trade.Trade.Volume)  							.SetCell(columnShift + 6' rowIndex' Format(trade.Order.Direction))  							.SetCell(columnShift + 7' rowIndex' trade.Order.Id)  							.SetCell(columnShift + 8' rowIndex' trade.Slippage)  							.SetCell(columnShift + 9' rowIndex' trade.Order.Comment)  							.SetCell(columnShift + 10' rowIndex' MathHelper.Round(info.PnL' Decimals))  							.SetCell(columnShift + 11' rowIndex' MathHelper.Round(localInfo.PnL' Decimals))  							.SetCell(columnShift + 12' rowIndex' MathHelper.Round(totalPnL' Decimals))  							.SetCell(columnShift + 13' rowIndex' MathHelper.Round(queue.RealizedPnL' Decimals))  							.SetCell(columnShift + 14' rowIndex' position);    						rowIndex++;  					}    					if (IncludeOrders)  					{  						columnShift += 17;    						worker  							.SetCell(columnShift + 0' 0' LocalizedStrings.Orders)    							.SetCell(columnShift + 0' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  							.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  							.SetCell(columnShift + 2' 1' LocalizedStrings.Str128)  							.SetCell(columnShift + 3' 1' LocalizedStrings.Str1346).SetStyle(columnShift + 3' "HH:mm:ss.fff")  							.SetCell(columnShift + 4' 1' LocalizedStrings.Str1347).SetStyle(columnShift + 4' "HH:mm:ss.fff")  							.SetCell(columnShift + 5' 1' LocalizedStrings.Str1348)  							.SetCell(columnShift + 6' 1' LocalizedStrings.Price).SetStyle(columnShift + 6' typeof(decimal))  							.SetCell(columnShift + 7' 1' LocalizedStrings.Str1323).SetStyle(columnShift + 7' typeof(decimal))  							.SetCell(columnShift + 8' 1' LocalizedStrings.Str1324)  							.SetCell(columnShift + 9' 1' LocalizedStrings.State)  							.SetCell(columnShift + 10' 1' LocalizedStrings.Str1325).SetStyle(columnShift + 10' typeof(decimal))  							.SetCell(columnShift + 11' 1' LocalizedStrings.Volume).SetStyle(columnShift + 11' typeof(decimal))  							.SetCell(columnShift + 12' 1' LocalizedStrings.Type)  							.SetCell(columnShift + 13' 1' LocalizedStrings.Str1326)  							.SetCell(columnShift + 14' 1' LocalizedStrings.Str1327)  							.SetCell(columnShift + 15' 1' LocalizedStrings.Str135);    						worker  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str1329)' null' Colors.Green)  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str238)' null' Colors.Red);    						rowIndex = 2;  						foreach (var order in strategy.Orders.ToArray())  						{  							worker  								.SetCell(columnShift + 0' rowIndex' order.Id)  								.SetCell(columnShift + 1' rowIndex' order.TransactionId)  								.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  								.SetCell(columnShift + 3' rowIndex' Format(order.Time))  								.SetCell(columnShift + 4' rowIndex' Format(order.LastChangeTime))  								.SetCell(columnShift + 5' rowIndex' Format(order.LastChangeTime - order.Time))  								.SetCell(columnShift + 6' rowIndex' order.Price)  								.SetCell(columnShift + 7' rowIndex' MathHelper.Round(order.GetAveragePrice(strategy.Connector)' Decimals))  								.SetCell(columnShift + 8' rowIndex' Format(order.State))  								.SetCell(columnShift + 9' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : LocalizedStrings.Str238))  								.SetCell(columnShift + 10' rowIndex' order.Balance)  								.SetCell(columnShift + 11' rowIndex' order.Volume)  								.SetCell(columnShift + 12' rowIndex' Format(order.Type))  								.SetCell(columnShift + 13' rowIndex' Format(order.LatencyRegistration))  								.SetCell(columnShift + 14' rowIndex' Format(order.LatencyCancellation))  								.SetCell(columnShift + 15' rowIndex' order.Comment);    							rowIndex++;  						}    						var stopOrders = strategy.StopOrders.ToArray();    						if (stopOrders.Length > 0)  						{  							rowIndex += 2;    							worker  								.SetCell(columnShift + 0' rowIndex - 1' LocalizedStrings.Str1351)    								.SetCell(columnShift + 0' rowIndex' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  								.SetCell(columnShift + 1' rowIndex' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  								.SetCell(columnShift + 2' rowIndex' LocalizedStrings.Str128)  								.SetCell(columnShift + 3' rowIndex' LocalizedStrings.Time).SetStyle(columnShift + 3' "HH:mm:ss.fff")  								.SetCell(columnShift + 4' rowIndex' LocalizedStrings.Price).SetStyle(columnShift + 4' typeof(decimal))  								.SetCell(columnShift + 5' rowIndex' LocalizedStrings.Str1324)  								.SetCell(columnShift + 6' rowIndex' LocalizedStrings.State)  								.SetCell(columnShift + 7' rowIndex' LocalizedStrings.Volume).SetStyle(columnShift + 7' typeof(decimal))  								.SetCell(columnShift + 8' rowIndex' LocalizedStrings.Str1326)  								.SetCell(columnShift + 9' rowIndex' LocalizedStrings.Str1327)  								//.SetCell(columnShift + 10' rowIndex' LocalizedStrings.Str1352).SetStyle(columnShift + 9' typeof(long))  								;    							var stopParams = stopOrders[0].Condition.Parameters.Keys.ToArray();    							for (var i = 0; i < stopParams.Length; i++)  								worker.SetCell(columnShift + 11 + i' rowIndex' stopParams[i]);    							foreach (var order in stopOrders)  							{  								worker  									.SetCell(columnShift + 0' rowIndex' order.Id)  									.SetCell(columnShift + 1' rowIndex' order.TransactionId)  									.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  									.SetCell(columnShift + 3' rowIndex' Format(order.Time))  									.SetCell(columnShift + 4' rowIndex' order.Price)  									.SetCell(columnShift + 5' rowIndex' Format(order.State))  									.SetCell(columnShift + 6' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : string.Empty))  									.SetCell(columnShift + 7' rowIndex' order.Volume)  									.SetCell(columnShift + 8' rowIndex' Format(order.LatencyRegistration))  									.SetCell(columnShift + 9' rowIndex' Format(order.LatencyCancellation))  									//.SetCell(columnShift + 10' rowIndex' order.DerivedOrder != null ? (object)order.DerivedOrder.Id : string.Empty)  									;    								for (var i = 0; i < stopParams.Length; i++)  									worker.SetCell(columnShift + 11 + i' rowIndex' order.Condition.Parameters[stopParams[i]] ?? string.Empty);    								rowIndex++;  							}  						}  					}  				}    				worker.Save(FileName' true);  			}
Magic Number,StockSharp.Algo.Strategies.Reporting,ExcelStrategyReport,C:\repos\stocksharp_stocksharp\Algo\Strategies\Reporting\ExcelStrategyReport.cs,Generate,The following statement contains a magic number: using (var worker = hasTemplate ? new ExcelWorker() : new ExcelWorker(Template))  			{  				foreach (var strategy in Strategies)  				{  					if (Template.IsEmpty())  					{  						worker.RenameSheet(strategy.Name);  					}  					else  					{  						if (worker.ContainsSheet(strategy.Name))  							worker.AddSheet(strategy.Name);  					}    					worker  						.SetCell(0' 0' LocalizedStrings.Str1331)    						.SetCell(0' 1' LocalizedStrings.Security + ":")  						.SetCell(1' 1' strategy.Security != null ? strategy.Security.Id : string.Empty)    						.SetCell(0' 2' LocalizedStrings.Portfolio + ":")  						.SetCell(1' 2' strategy.Portfolio != null ? strategy.Portfolio.Name : string.Empty)    						.SetCell(0' 3' LocalizedStrings.Str1334)  						.SetCell(1' 3' Format(strategy.TotalWorkingTime))    						.SetCell(0' 4' LocalizedStrings.Str1335)  						//.SetCell(1' 4' FormatTime(base.Strategy.TotalCPUTime))    						.SetCell(0' 5' LocalizedStrings.Str862 + ":")  						.SetCell(1' 5' strategy.Position)    						.SetCell(0' 6' LocalizedStrings.PnL + ":")  						.SetCell(1' 6' strategy.PnL)    						.SetCell(0' 7' LocalizedStrings.Str159 + ":")  						.SetCell(1' 7' strategy.Commission)    						.SetCell(0' 8' LocalizedStrings.Str163 + ":")  						.SetCell(1' 8' strategy.Slippage)    						.SetCell(0' 9' LocalizedStrings.Str161 + ":")  						.SetCell(1' 9' Format(strategy.Latency));    					var rowIndex = 11;    					foreach (var parameter in strategy.StatisticManager.Parameters.SyncGet(c => c.ToArray()))  					{  						var value = parameter.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' parameter.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					rowIndex += 2;  					worker.SetCell(0' rowIndex' LocalizedStrings.Str1340);  					rowIndex++;    					foreach (var strategyParam in strategy.Parameters.CachedValues)  					{  						var value = strategyParam.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' strategyParam.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					//rowIndex += 2;  					//worker.SetCell(0' rowIndex' "Комиссия по типам:");  					//rowIndex++;    					//foreach (var group in Strategy.CommissionManager.Rules.SyncGet(c => c.ToArray()).GroupBy(c => c.GetType().GetDisplayName()))  					//{  					//	var commission = group.Sum(r => r.Commission);    					//	if (commission == 0)  					//		continue;    					//	worker  					//		.SetCell(0' rowIndex' group.Key)  					//		.SetCell(1' rowIndex' commission);    					//	rowIndex++;  					//}    					var columnShift = 3;    					worker  						.SetCell(columnShift + 0' 0' LocalizedStrings.Str985)    						.SetCell(columnShift + 0' 1' LocalizedStrings.Str1192).SetStyle(columnShift + 0' typeof(long))  						.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  						.SetCell(columnShift + 2' 1' LocalizedStrings.Time).SetStyle(columnShift + 2' "HH:mm:ss.fff")  						.SetCell(columnShift + 3' 1' LocalizedStrings.Price).SetStyle(columnShift + 3' typeof(decimal))  						.SetCell(columnShift + 4' 1' LocalizedStrings.Str1341).SetStyle(columnShift + 4' typeof(decimal))  						.SetCell(columnShift + 5' 1' LocalizedStrings.Volume).SetStyle(columnShift + 5' typeof(decimal))  						.SetCell(columnShift + 6' 1' LocalizedStrings.Str128)  						.SetCell(columnShift + 7' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 7' typeof(long))  						.SetCell(columnShift + 8' 1' LocalizedStrings.Str163).SetStyle(columnShift + 8' typeof(decimal))  						.SetCell(columnShift + 9' 1' LocalizedStrings.Str135)  						.SetCell(columnShift + 10' 1' LocalizedStrings.Str1342).SetStyle(columnShift + 11' typeof(decimal))  						.SetCell(columnShift + 11' 1' LocalizedStrings.Str1343).SetStyle(columnShift + 12' typeof(decimal))  						.SetCell(columnShift + 12' 1' LocalizedStrings.Str1344).SetStyle(columnShift + 13' typeof(decimal))  						.SetCell(columnShift + 13' 1' LocalizedStrings.Str1345).SetStyle(columnShift + 14' typeof(decimal))  						.SetCell(columnShift + 14' 1' LocalizedStrings.Str862).SetStyle(columnShift + 15' typeof(decimal));    					worker  						.SetConditionalFormatting(columnShift + 10' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 11' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 12' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 13' ComparisonOperator.Less' "0"' null' Colors.Red);    					var totalPnL = 0m;  					var position = 0m;    					var queues = new Dictionary<Security' PnLQueue>();    					rowIndex = 2;  					foreach (var trade in strategy.MyTrades.ToArray())  					{  						var info = strategy.PnLManager.ProcessMessage(trade.ToMessage());    						totalPnL += info.PnL;  						position += trade.GetPosition() ?? 0;    						var queue = queues.SafeAdd(trade.Trade.Security' key => new PnLQueue(key.ToSecurityId()));    						var localInfo = queue.Process(trade.ToMessage());    						worker  							.SetCell(columnShift + 0' rowIndex' trade.Trade.Id)  							.SetCell(columnShift + 1' rowIndex' trade.Order.TransactionId)  							.SetCell(columnShift + 2' rowIndex' Format(trade.Trade.Time))  							.SetCell(columnShift + 3' rowIndex' trade.Trade.Price)  							.SetCell(columnShift + 4' rowIndex' trade.Order.Price)  							.SetCell(columnShift + 5' rowIndex' trade.Trade.Volume)  							.SetCell(columnShift + 6' rowIndex' Format(trade.Order.Direction))  							.SetCell(columnShift + 7' rowIndex' trade.Order.Id)  							.SetCell(columnShift + 8' rowIndex' trade.Slippage)  							.SetCell(columnShift + 9' rowIndex' trade.Order.Comment)  							.SetCell(columnShift + 10' rowIndex' MathHelper.Round(info.PnL' Decimals))  							.SetCell(columnShift + 11' rowIndex' MathHelper.Round(localInfo.PnL' Decimals))  							.SetCell(columnShift + 12' rowIndex' MathHelper.Round(totalPnL' Decimals))  							.SetCell(columnShift + 13' rowIndex' MathHelper.Round(queue.RealizedPnL' Decimals))  							.SetCell(columnShift + 14' rowIndex' position);    						rowIndex++;  					}    					if (IncludeOrders)  					{  						columnShift += 17;    						worker  							.SetCell(columnShift + 0' 0' LocalizedStrings.Orders)    							.SetCell(columnShift + 0' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  							.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  							.SetCell(columnShift + 2' 1' LocalizedStrings.Str128)  							.SetCell(columnShift + 3' 1' LocalizedStrings.Str1346).SetStyle(columnShift + 3' "HH:mm:ss.fff")  							.SetCell(columnShift + 4' 1' LocalizedStrings.Str1347).SetStyle(columnShift + 4' "HH:mm:ss.fff")  							.SetCell(columnShift + 5' 1' LocalizedStrings.Str1348)  							.SetCell(columnShift + 6' 1' LocalizedStrings.Price).SetStyle(columnShift + 6' typeof(decimal))  							.SetCell(columnShift + 7' 1' LocalizedStrings.Str1323).SetStyle(columnShift + 7' typeof(decimal))  							.SetCell(columnShift + 8' 1' LocalizedStrings.Str1324)  							.SetCell(columnShift + 9' 1' LocalizedStrings.State)  							.SetCell(columnShift + 10' 1' LocalizedStrings.Str1325).SetStyle(columnShift + 10' typeof(decimal))  							.SetCell(columnShift + 11' 1' LocalizedStrings.Volume).SetStyle(columnShift + 11' typeof(decimal))  							.SetCell(columnShift + 12' 1' LocalizedStrings.Type)  							.SetCell(columnShift + 13' 1' LocalizedStrings.Str1326)  							.SetCell(columnShift + 14' 1' LocalizedStrings.Str1327)  							.SetCell(columnShift + 15' 1' LocalizedStrings.Str135);    						worker  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str1329)' null' Colors.Green)  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str238)' null' Colors.Red);    						rowIndex = 2;  						foreach (var order in strategy.Orders.ToArray())  						{  							worker  								.SetCell(columnShift + 0' rowIndex' order.Id)  								.SetCell(columnShift + 1' rowIndex' order.TransactionId)  								.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  								.SetCell(columnShift + 3' rowIndex' Format(order.Time))  								.SetCell(columnShift + 4' rowIndex' Format(order.LastChangeTime))  								.SetCell(columnShift + 5' rowIndex' Format(order.LastChangeTime - order.Time))  								.SetCell(columnShift + 6' rowIndex' order.Price)  								.SetCell(columnShift + 7' rowIndex' MathHelper.Round(order.GetAveragePrice(strategy.Connector)' Decimals))  								.SetCell(columnShift + 8' rowIndex' Format(order.State))  								.SetCell(columnShift + 9' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : LocalizedStrings.Str238))  								.SetCell(columnShift + 10' rowIndex' order.Balance)  								.SetCell(columnShift + 11' rowIndex' order.Volume)  								.SetCell(columnShift + 12' rowIndex' Format(order.Type))  								.SetCell(columnShift + 13' rowIndex' Format(order.LatencyRegistration))  								.SetCell(columnShift + 14' rowIndex' Format(order.LatencyCancellation))  								.SetCell(columnShift + 15' rowIndex' order.Comment);    							rowIndex++;  						}    						var stopOrders = strategy.StopOrders.ToArray();    						if (stopOrders.Length > 0)  						{  							rowIndex += 2;    							worker  								.SetCell(columnShift + 0' rowIndex - 1' LocalizedStrings.Str1351)    								.SetCell(columnShift + 0' rowIndex' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  								.SetCell(columnShift + 1' rowIndex' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  								.SetCell(columnShift + 2' rowIndex' LocalizedStrings.Str128)  								.SetCell(columnShift + 3' rowIndex' LocalizedStrings.Time).SetStyle(columnShift + 3' "HH:mm:ss.fff")  								.SetCell(columnShift + 4' rowIndex' LocalizedStrings.Price).SetStyle(columnShift + 4' typeof(decimal))  								.SetCell(columnShift + 5' rowIndex' LocalizedStrings.Str1324)  								.SetCell(columnShift + 6' rowIndex' LocalizedStrings.State)  								.SetCell(columnShift + 7' rowIndex' LocalizedStrings.Volume).SetStyle(columnShift + 7' typeof(decimal))  								.SetCell(columnShift + 8' rowIndex' LocalizedStrings.Str1326)  								.SetCell(columnShift + 9' rowIndex' LocalizedStrings.Str1327)  								//.SetCell(columnShift + 10' rowIndex' LocalizedStrings.Str1352).SetStyle(columnShift + 9' typeof(long))  								;    							var stopParams = stopOrders[0].Condition.Parameters.Keys.ToArray();    							for (var i = 0; i < stopParams.Length; i++)  								worker.SetCell(columnShift + 11 + i' rowIndex' stopParams[i]);    							foreach (var order in stopOrders)  							{  								worker  									.SetCell(columnShift + 0' rowIndex' order.Id)  									.SetCell(columnShift + 1' rowIndex' order.TransactionId)  									.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  									.SetCell(columnShift + 3' rowIndex' Format(order.Time))  									.SetCell(columnShift + 4' rowIndex' order.Price)  									.SetCell(columnShift + 5' rowIndex' Format(order.State))  									.SetCell(columnShift + 6' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : string.Empty))  									.SetCell(columnShift + 7' rowIndex' order.Volume)  									.SetCell(columnShift + 8' rowIndex' Format(order.LatencyRegistration))  									.SetCell(columnShift + 9' rowIndex' Format(order.LatencyCancellation))  									//.SetCell(columnShift + 10' rowIndex' order.DerivedOrder != null ? (object)order.DerivedOrder.Id : string.Empty)  									;    								for (var i = 0; i < stopParams.Length; i++)  									worker.SetCell(columnShift + 11 + i' rowIndex' order.Condition.Parameters[stopParams[i]] ?? string.Empty);    								rowIndex++;  							}  						}  					}  				}    				worker.Save(FileName' true);  			}
Magic Number,StockSharp.Algo.Strategies.Reporting,ExcelStrategyReport,C:\repos\stocksharp_stocksharp\Algo\Strategies\Reporting\ExcelStrategyReport.cs,Generate,The following statement contains a magic number: using (var worker = hasTemplate ? new ExcelWorker() : new ExcelWorker(Template))  			{  				foreach (var strategy in Strategies)  				{  					if (Template.IsEmpty())  					{  						worker.RenameSheet(strategy.Name);  					}  					else  					{  						if (worker.ContainsSheet(strategy.Name))  							worker.AddSheet(strategy.Name);  					}    					worker  						.SetCell(0' 0' LocalizedStrings.Str1331)    						.SetCell(0' 1' LocalizedStrings.Security + ":")  						.SetCell(1' 1' strategy.Security != null ? strategy.Security.Id : string.Empty)    						.SetCell(0' 2' LocalizedStrings.Portfolio + ":")  						.SetCell(1' 2' strategy.Portfolio != null ? strategy.Portfolio.Name : string.Empty)    						.SetCell(0' 3' LocalizedStrings.Str1334)  						.SetCell(1' 3' Format(strategy.TotalWorkingTime))    						.SetCell(0' 4' LocalizedStrings.Str1335)  						//.SetCell(1' 4' FormatTime(base.Strategy.TotalCPUTime))    						.SetCell(0' 5' LocalizedStrings.Str862 + ":")  						.SetCell(1' 5' strategy.Position)    						.SetCell(0' 6' LocalizedStrings.PnL + ":")  						.SetCell(1' 6' strategy.PnL)    						.SetCell(0' 7' LocalizedStrings.Str159 + ":")  						.SetCell(1' 7' strategy.Commission)    						.SetCell(0' 8' LocalizedStrings.Str163 + ":")  						.SetCell(1' 8' strategy.Slippage)    						.SetCell(0' 9' LocalizedStrings.Str161 + ":")  						.SetCell(1' 9' Format(strategy.Latency));    					var rowIndex = 11;    					foreach (var parameter in strategy.StatisticManager.Parameters.SyncGet(c => c.ToArray()))  					{  						var value = parameter.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' parameter.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					rowIndex += 2;  					worker.SetCell(0' rowIndex' LocalizedStrings.Str1340);  					rowIndex++;    					foreach (var strategyParam in strategy.Parameters.CachedValues)  					{  						var value = strategyParam.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' strategyParam.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					//rowIndex += 2;  					//worker.SetCell(0' rowIndex' "Комиссия по типам:");  					//rowIndex++;    					//foreach (var group in Strategy.CommissionManager.Rules.SyncGet(c => c.ToArray()).GroupBy(c => c.GetType().GetDisplayName()))  					//{  					//	var commission = group.Sum(r => r.Commission);    					//	if (commission == 0)  					//		continue;    					//	worker  					//		.SetCell(0' rowIndex' group.Key)  					//		.SetCell(1' rowIndex' commission);    					//	rowIndex++;  					//}    					var columnShift = 3;    					worker  						.SetCell(columnShift + 0' 0' LocalizedStrings.Str985)    						.SetCell(columnShift + 0' 1' LocalizedStrings.Str1192).SetStyle(columnShift + 0' typeof(long))  						.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  						.SetCell(columnShift + 2' 1' LocalizedStrings.Time).SetStyle(columnShift + 2' "HH:mm:ss.fff")  						.SetCell(columnShift + 3' 1' LocalizedStrings.Price).SetStyle(columnShift + 3' typeof(decimal))  						.SetCell(columnShift + 4' 1' LocalizedStrings.Str1341).SetStyle(columnShift + 4' typeof(decimal))  						.SetCell(columnShift + 5' 1' LocalizedStrings.Volume).SetStyle(columnShift + 5' typeof(decimal))  						.SetCell(columnShift + 6' 1' LocalizedStrings.Str128)  						.SetCell(columnShift + 7' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 7' typeof(long))  						.SetCell(columnShift + 8' 1' LocalizedStrings.Str163).SetStyle(columnShift + 8' typeof(decimal))  						.SetCell(columnShift + 9' 1' LocalizedStrings.Str135)  						.SetCell(columnShift + 10' 1' LocalizedStrings.Str1342).SetStyle(columnShift + 11' typeof(decimal))  						.SetCell(columnShift + 11' 1' LocalizedStrings.Str1343).SetStyle(columnShift + 12' typeof(decimal))  						.SetCell(columnShift + 12' 1' LocalizedStrings.Str1344).SetStyle(columnShift + 13' typeof(decimal))  						.SetCell(columnShift + 13' 1' LocalizedStrings.Str1345).SetStyle(columnShift + 14' typeof(decimal))  						.SetCell(columnShift + 14' 1' LocalizedStrings.Str862).SetStyle(columnShift + 15' typeof(decimal));    					worker  						.SetConditionalFormatting(columnShift + 10' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 11' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 12' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 13' ComparisonOperator.Less' "0"' null' Colors.Red);    					var totalPnL = 0m;  					var position = 0m;    					var queues = new Dictionary<Security' PnLQueue>();    					rowIndex = 2;  					foreach (var trade in strategy.MyTrades.ToArray())  					{  						var info = strategy.PnLManager.ProcessMessage(trade.ToMessage());    						totalPnL += info.PnL;  						position += trade.GetPosition() ?? 0;    						var queue = queues.SafeAdd(trade.Trade.Security' key => new PnLQueue(key.ToSecurityId()));    						var localInfo = queue.Process(trade.ToMessage());    						worker  							.SetCell(columnShift + 0' rowIndex' trade.Trade.Id)  							.SetCell(columnShift + 1' rowIndex' trade.Order.TransactionId)  							.SetCell(columnShift + 2' rowIndex' Format(trade.Trade.Time))  							.SetCell(columnShift + 3' rowIndex' trade.Trade.Price)  							.SetCell(columnShift + 4' rowIndex' trade.Order.Price)  							.SetCell(columnShift + 5' rowIndex' trade.Trade.Volume)  							.SetCell(columnShift + 6' rowIndex' Format(trade.Order.Direction))  							.SetCell(columnShift + 7' rowIndex' trade.Order.Id)  							.SetCell(columnShift + 8' rowIndex' trade.Slippage)  							.SetCell(columnShift + 9' rowIndex' trade.Order.Comment)  							.SetCell(columnShift + 10' rowIndex' MathHelper.Round(info.PnL' Decimals))  							.SetCell(columnShift + 11' rowIndex' MathHelper.Round(localInfo.PnL' Decimals))  							.SetCell(columnShift + 12' rowIndex' MathHelper.Round(totalPnL' Decimals))  							.SetCell(columnShift + 13' rowIndex' MathHelper.Round(queue.RealizedPnL' Decimals))  							.SetCell(columnShift + 14' rowIndex' position);    						rowIndex++;  					}    					if (IncludeOrders)  					{  						columnShift += 17;    						worker  							.SetCell(columnShift + 0' 0' LocalizedStrings.Orders)    							.SetCell(columnShift + 0' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  							.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  							.SetCell(columnShift + 2' 1' LocalizedStrings.Str128)  							.SetCell(columnShift + 3' 1' LocalizedStrings.Str1346).SetStyle(columnShift + 3' "HH:mm:ss.fff")  							.SetCell(columnShift + 4' 1' LocalizedStrings.Str1347).SetStyle(columnShift + 4' "HH:mm:ss.fff")  							.SetCell(columnShift + 5' 1' LocalizedStrings.Str1348)  							.SetCell(columnShift + 6' 1' LocalizedStrings.Price).SetStyle(columnShift + 6' typeof(decimal))  							.SetCell(columnShift + 7' 1' LocalizedStrings.Str1323).SetStyle(columnShift + 7' typeof(decimal))  							.SetCell(columnShift + 8' 1' LocalizedStrings.Str1324)  							.SetCell(columnShift + 9' 1' LocalizedStrings.State)  							.SetCell(columnShift + 10' 1' LocalizedStrings.Str1325).SetStyle(columnShift + 10' typeof(decimal))  							.SetCell(columnShift + 11' 1' LocalizedStrings.Volume).SetStyle(columnShift + 11' typeof(decimal))  							.SetCell(columnShift + 12' 1' LocalizedStrings.Type)  							.SetCell(columnShift + 13' 1' LocalizedStrings.Str1326)  							.SetCell(columnShift + 14' 1' LocalizedStrings.Str1327)  							.SetCell(columnShift + 15' 1' LocalizedStrings.Str135);    						worker  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str1329)' null' Colors.Green)  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str238)' null' Colors.Red);    						rowIndex = 2;  						foreach (var order in strategy.Orders.ToArray())  						{  							worker  								.SetCell(columnShift + 0' rowIndex' order.Id)  								.SetCell(columnShift + 1' rowIndex' order.TransactionId)  								.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  								.SetCell(columnShift + 3' rowIndex' Format(order.Time))  								.SetCell(columnShift + 4' rowIndex' Format(order.LastChangeTime))  								.SetCell(columnShift + 5' rowIndex' Format(order.LastChangeTime - order.Time))  								.SetCell(columnShift + 6' rowIndex' order.Price)  								.SetCell(columnShift + 7' rowIndex' MathHelper.Round(order.GetAveragePrice(strategy.Connector)' Decimals))  								.SetCell(columnShift + 8' rowIndex' Format(order.State))  								.SetCell(columnShift + 9' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : LocalizedStrings.Str238))  								.SetCell(columnShift + 10' rowIndex' order.Balance)  								.SetCell(columnShift + 11' rowIndex' order.Volume)  								.SetCell(columnShift + 12' rowIndex' Format(order.Type))  								.SetCell(columnShift + 13' rowIndex' Format(order.LatencyRegistration))  								.SetCell(columnShift + 14' rowIndex' Format(order.LatencyCancellation))  								.SetCell(columnShift + 15' rowIndex' order.Comment);    							rowIndex++;  						}    						var stopOrders = strategy.StopOrders.ToArray();    						if (stopOrders.Length > 0)  						{  							rowIndex += 2;    							worker  								.SetCell(columnShift + 0' rowIndex - 1' LocalizedStrings.Str1351)    								.SetCell(columnShift + 0' rowIndex' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  								.SetCell(columnShift + 1' rowIndex' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  								.SetCell(columnShift + 2' rowIndex' LocalizedStrings.Str128)  								.SetCell(columnShift + 3' rowIndex' LocalizedStrings.Time).SetStyle(columnShift + 3' "HH:mm:ss.fff")  								.SetCell(columnShift + 4' rowIndex' LocalizedStrings.Price).SetStyle(columnShift + 4' typeof(decimal))  								.SetCell(columnShift + 5' rowIndex' LocalizedStrings.Str1324)  								.SetCell(columnShift + 6' rowIndex' LocalizedStrings.State)  								.SetCell(columnShift + 7' rowIndex' LocalizedStrings.Volume).SetStyle(columnShift + 7' typeof(decimal))  								.SetCell(columnShift + 8' rowIndex' LocalizedStrings.Str1326)  								.SetCell(columnShift + 9' rowIndex' LocalizedStrings.Str1327)  								//.SetCell(columnShift + 10' rowIndex' LocalizedStrings.Str1352).SetStyle(columnShift + 9' typeof(long))  								;    							var stopParams = stopOrders[0].Condition.Parameters.Keys.ToArray();    							for (var i = 0; i < stopParams.Length; i++)  								worker.SetCell(columnShift + 11 + i' rowIndex' stopParams[i]);    							foreach (var order in stopOrders)  							{  								worker  									.SetCell(columnShift + 0' rowIndex' order.Id)  									.SetCell(columnShift + 1' rowIndex' order.TransactionId)  									.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  									.SetCell(columnShift + 3' rowIndex' Format(order.Time))  									.SetCell(columnShift + 4' rowIndex' order.Price)  									.SetCell(columnShift + 5' rowIndex' Format(order.State))  									.SetCell(columnShift + 6' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : string.Empty))  									.SetCell(columnShift + 7' rowIndex' order.Volume)  									.SetCell(columnShift + 8' rowIndex' Format(order.LatencyRegistration))  									.SetCell(columnShift + 9' rowIndex' Format(order.LatencyCancellation))  									//.SetCell(columnShift + 10' rowIndex' order.DerivedOrder != null ? (object)order.DerivedOrder.Id : string.Empty)  									;    								for (var i = 0; i < stopParams.Length; i++)  									worker.SetCell(columnShift + 11 + i' rowIndex' order.Condition.Parameters[stopParams[i]] ?? string.Empty);    								rowIndex++;  							}  						}  					}  				}    				worker.Save(FileName' true);  			}
Magic Number,StockSharp.Algo.Strategies.Reporting,ExcelStrategyReport,C:\repos\stocksharp_stocksharp\Algo\Strategies\Reporting\ExcelStrategyReport.cs,Generate,The following statement contains a magic number: using (var worker = hasTemplate ? new ExcelWorker() : new ExcelWorker(Template))  			{  				foreach (var strategy in Strategies)  				{  					if (Template.IsEmpty())  					{  						worker.RenameSheet(strategy.Name);  					}  					else  					{  						if (worker.ContainsSheet(strategy.Name))  							worker.AddSheet(strategy.Name);  					}    					worker  						.SetCell(0' 0' LocalizedStrings.Str1331)    						.SetCell(0' 1' LocalizedStrings.Security + ":")  						.SetCell(1' 1' strategy.Security != null ? strategy.Security.Id : string.Empty)    						.SetCell(0' 2' LocalizedStrings.Portfolio + ":")  						.SetCell(1' 2' strategy.Portfolio != null ? strategy.Portfolio.Name : string.Empty)    						.SetCell(0' 3' LocalizedStrings.Str1334)  						.SetCell(1' 3' Format(strategy.TotalWorkingTime))    						.SetCell(0' 4' LocalizedStrings.Str1335)  						//.SetCell(1' 4' FormatTime(base.Strategy.TotalCPUTime))    						.SetCell(0' 5' LocalizedStrings.Str862 + ":")  						.SetCell(1' 5' strategy.Position)    						.SetCell(0' 6' LocalizedStrings.PnL + ":")  						.SetCell(1' 6' strategy.PnL)    						.SetCell(0' 7' LocalizedStrings.Str159 + ":")  						.SetCell(1' 7' strategy.Commission)    						.SetCell(0' 8' LocalizedStrings.Str163 + ":")  						.SetCell(1' 8' strategy.Slippage)    						.SetCell(0' 9' LocalizedStrings.Str161 + ":")  						.SetCell(1' 9' Format(strategy.Latency));    					var rowIndex = 11;    					foreach (var parameter in strategy.StatisticManager.Parameters.SyncGet(c => c.ToArray()))  					{  						var value = parameter.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' parameter.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					rowIndex += 2;  					worker.SetCell(0' rowIndex' LocalizedStrings.Str1340);  					rowIndex++;    					foreach (var strategyParam in strategy.Parameters.CachedValues)  					{  						var value = strategyParam.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' strategyParam.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					//rowIndex += 2;  					//worker.SetCell(0' rowIndex' "Комиссия по типам:");  					//rowIndex++;    					//foreach (var group in Strategy.CommissionManager.Rules.SyncGet(c => c.ToArray()).GroupBy(c => c.GetType().GetDisplayName()))  					//{  					//	var commission = group.Sum(r => r.Commission);    					//	if (commission == 0)  					//		continue;    					//	worker  					//		.SetCell(0' rowIndex' group.Key)  					//		.SetCell(1' rowIndex' commission);    					//	rowIndex++;  					//}    					var columnShift = 3;    					worker  						.SetCell(columnShift + 0' 0' LocalizedStrings.Str985)    						.SetCell(columnShift + 0' 1' LocalizedStrings.Str1192).SetStyle(columnShift + 0' typeof(long))  						.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  						.SetCell(columnShift + 2' 1' LocalizedStrings.Time).SetStyle(columnShift + 2' "HH:mm:ss.fff")  						.SetCell(columnShift + 3' 1' LocalizedStrings.Price).SetStyle(columnShift + 3' typeof(decimal))  						.SetCell(columnShift + 4' 1' LocalizedStrings.Str1341).SetStyle(columnShift + 4' typeof(decimal))  						.SetCell(columnShift + 5' 1' LocalizedStrings.Volume).SetStyle(columnShift + 5' typeof(decimal))  						.SetCell(columnShift + 6' 1' LocalizedStrings.Str128)  						.SetCell(columnShift + 7' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 7' typeof(long))  						.SetCell(columnShift + 8' 1' LocalizedStrings.Str163).SetStyle(columnShift + 8' typeof(decimal))  						.SetCell(columnShift + 9' 1' LocalizedStrings.Str135)  						.SetCell(columnShift + 10' 1' LocalizedStrings.Str1342).SetStyle(columnShift + 11' typeof(decimal))  						.SetCell(columnShift + 11' 1' LocalizedStrings.Str1343).SetStyle(columnShift + 12' typeof(decimal))  						.SetCell(columnShift + 12' 1' LocalizedStrings.Str1344).SetStyle(columnShift + 13' typeof(decimal))  						.SetCell(columnShift + 13' 1' LocalizedStrings.Str1345).SetStyle(columnShift + 14' typeof(decimal))  						.SetCell(columnShift + 14' 1' LocalizedStrings.Str862).SetStyle(columnShift + 15' typeof(decimal));    					worker  						.SetConditionalFormatting(columnShift + 10' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 11' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 12' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 13' ComparisonOperator.Less' "0"' null' Colors.Red);    					var totalPnL = 0m;  					var position = 0m;    					var queues = new Dictionary<Security' PnLQueue>();    					rowIndex = 2;  					foreach (var trade in strategy.MyTrades.ToArray())  					{  						var info = strategy.PnLManager.ProcessMessage(trade.ToMessage());    						totalPnL += info.PnL;  						position += trade.GetPosition() ?? 0;    						var queue = queues.SafeAdd(trade.Trade.Security' key => new PnLQueue(key.ToSecurityId()));    						var localInfo = queue.Process(trade.ToMessage());    						worker  							.SetCell(columnShift + 0' rowIndex' trade.Trade.Id)  							.SetCell(columnShift + 1' rowIndex' trade.Order.TransactionId)  							.SetCell(columnShift + 2' rowIndex' Format(trade.Trade.Time))  							.SetCell(columnShift + 3' rowIndex' trade.Trade.Price)  							.SetCell(columnShift + 4' rowIndex' trade.Order.Price)  							.SetCell(columnShift + 5' rowIndex' trade.Trade.Volume)  							.SetCell(columnShift + 6' rowIndex' Format(trade.Order.Direction))  							.SetCell(columnShift + 7' rowIndex' trade.Order.Id)  							.SetCell(columnShift + 8' rowIndex' trade.Slippage)  							.SetCell(columnShift + 9' rowIndex' trade.Order.Comment)  							.SetCell(columnShift + 10' rowIndex' MathHelper.Round(info.PnL' Decimals))  							.SetCell(columnShift + 11' rowIndex' MathHelper.Round(localInfo.PnL' Decimals))  							.SetCell(columnShift + 12' rowIndex' MathHelper.Round(totalPnL' Decimals))  							.SetCell(columnShift + 13' rowIndex' MathHelper.Round(queue.RealizedPnL' Decimals))  							.SetCell(columnShift + 14' rowIndex' position);    						rowIndex++;  					}    					if (IncludeOrders)  					{  						columnShift += 17;    						worker  							.SetCell(columnShift + 0' 0' LocalizedStrings.Orders)    							.SetCell(columnShift + 0' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  							.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  							.SetCell(columnShift + 2' 1' LocalizedStrings.Str128)  							.SetCell(columnShift + 3' 1' LocalizedStrings.Str1346).SetStyle(columnShift + 3' "HH:mm:ss.fff")  							.SetCell(columnShift + 4' 1' LocalizedStrings.Str1347).SetStyle(columnShift + 4' "HH:mm:ss.fff")  							.SetCell(columnShift + 5' 1' LocalizedStrings.Str1348)  							.SetCell(columnShift + 6' 1' LocalizedStrings.Price).SetStyle(columnShift + 6' typeof(decimal))  							.SetCell(columnShift + 7' 1' LocalizedStrings.Str1323).SetStyle(columnShift + 7' typeof(decimal))  							.SetCell(columnShift + 8' 1' LocalizedStrings.Str1324)  							.SetCell(columnShift + 9' 1' LocalizedStrings.State)  							.SetCell(columnShift + 10' 1' LocalizedStrings.Str1325).SetStyle(columnShift + 10' typeof(decimal))  							.SetCell(columnShift + 11' 1' LocalizedStrings.Volume).SetStyle(columnShift + 11' typeof(decimal))  							.SetCell(columnShift + 12' 1' LocalizedStrings.Type)  							.SetCell(columnShift + 13' 1' LocalizedStrings.Str1326)  							.SetCell(columnShift + 14' 1' LocalizedStrings.Str1327)  							.SetCell(columnShift + 15' 1' LocalizedStrings.Str135);    						worker  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str1329)' null' Colors.Green)  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str238)' null' Colors.Red);    						rowIndex = 2;  						foreach (var order in strategy.Orders.ToArray())  						{  							worker  								.SetCell(columnShift + 0' rowIndex' order.Id)  								.SetCell(columnShift + 1' rowIndex' order.TransactionId)  								.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  								.SetCell(columnShift + 3' rowIndex' Format(order.Time))  								.SetCell(columnShift + 4' rowIndex' Format(order.LastChangeTime))  								.SetCell(columnShift + 5' rowIndex' Format(order.LastChangeTime - order.Time))  								.SetCell(columnShift + 6' rowIndex' order.Price)  								.SetCell(columnShift + 7' rowIndex' MathHelper.Round(order.GetAveragePrice(strategy.Connector)' Decimals))  								.SetCell(columnShift + 8' rowIndex' Format(order.State))  								.SetCell(columnShift + 9' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : LocalizedStrings.Str238))  								.SetCell(columnShift + 10' rowIndex' order.Balance)  								.SetCell(columnShift + 11' rowIndex' order.Volume)  								.SetCell(columnShift + 12' rowIndex' Format(order.Type))  								.SetCell(columnShift + 13' rowIndex' Format(order.LatencyRegistration))  								.SetCell(columnShift + 14' rowIndex' Format(order.LatencyCancellation))  								.SetCell(columnShift + 15' rowIndex' order.Comment);    							rowIndex++;  						}    						var stopOrders = strategy.StopOrders.ToArray();    						if (stopOrders.Length > 0)  						{  							rowIndex += 2;    							worker  								.SetCell(columnShift + 0' rowIndex - 1' LocalizedStrings.Str1351)    								.SetCell(columnShift + 0' rowIndex' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  								.SetCell(columnShift + 1' rowIndex' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  								.SetCell(columnShift + 2' rowIndex' LocalizedStrings.Str128)  								.SetCell(columnShift + 3' rowIndex' LocalizedStrings.Time).SetStyle(columnShift + 3' "HH:mm:ss.fff")  								.SetCell(columnShift + 4' rowIndex' LocalizedStrings.Price).SetStyle(columnShift + 4' typeof(decimal))  								.SetCell(columnShift + 5' rowIndex' LocalizedStrings.Str1324)  								.SetCell(columnShift + 6' rowIndex' LocalizedStrings.State)  								.SetCell(columnShift + 7' rowIndex' LocalizedStrings.Volume).SetStyle(columnShift + 7' typeof(decimal))  								.SetCell(columnShift + 8' rowIndex' LocalizedStrings.Str1326)  								.SetCell(columnShift + 9' rowIndex' LocalizedStrings.Str1327)  								//.SetCell(columnShift + 10' rowIndex' LocalizedStrings.Str1352).SetStyle(columnShift + 9' typeof(long))  								;    							var stopParams = stopOrders[0].Condition.Parameters.Keys.ToArray();    							for (var i = 0; i < stopParams.Length; i++)  								worker.SetCell(columnShift + 11 + i' rowIndex' stopParams[i]);    							foreach (var order in stopOrders)  							{  								worker  									.SetCell(columnShift + 0' rowIndex' order.Id)  									.SetCell(columnShift + 1' rowIndex' order.TransactionId)  									.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  									.SetCell(columnShift + 3' rowIndex' Format(order.Time))  									.SetCell(columnShift + 4' rowIndex' order.Price)  									.SetCell(columnShift + 5' rowIndex' Format(order.State))  									.SetCell(columnShift + 6' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : string.Empty))  									.SetCell(columnShift + 7' rowIndex' order.Volume)  									.SetCell(columnShift + 8' rowIndex' Format(order.LatencyRegistration))  									.SetCell(columnShift + 9' rowIndex' Format(order.LatencyCancellation))  									//.SetCell(columnShift + 10' rowIndex' order.DerivedOrder != null ? (object)order.DerivedOrder.Id : string.Empty)  									;    								for (var i = 0; i < stopParams.Length; i++)  									worker.SetCell(columnShift + 11 + i' rowIndex' order.Condition.Parameters[stopParams[i]] ?? string.Empty);    								rowIndex++;  							}  						}  					}  				}    				worker.Save(FileName' true);  			}
Magic Number,StockSharp.Algo.Strategies.Reporting,ExcelStrategyReport,C:\repos\stocksharp_stocksharp\Algo\Strategies\Reporting\ExcelStrategyReport.cs,Generate,The following statement contains a magic number: using (var worker = hasTemplate ? new ExcelWorker() : new ExcelWorker(Template))  			{  				foreach (var strategy in Strategies)  				{  					if (Template.IsEmpty())  					{  						worker.RenameSheet(strategy.Name);  					}  					else  					{  						if (worker.ContainsSheet(strategy.Name))  							worker.AddSheet(strategy.Name);  					}    					worker  						.SetCell(0' 0' LocalizedStrings.Str1331)    						.SetCell(0' 1' LocalizedStrings.Security + ":")  						.SetCell(1' 1' strategy.Security != null ? strategy.Security.Id : string.Empty)    						.SetCell(0' 2' LocalizedStrings.Portfolio + ":")  						.SetCell(1' 2' strategy.Portfolio != null ? strategy.Portfolio.Name : string.Empty)    						.SetCell(0' 3' LocalizedStrings.Str1334)  						.SetCell(1' 3' Format(strategy.TotalWorkingTime))    						.SetCell(0' 4' LocalizedStrings.Str1335)  						//.SetCell(1' 4' FormatTime(base.Strategy.TotalCPUTime))    						.SetCell(0' 5' LocalizedStrings.Str862 + ":")  						.SetCell(1' 5' strategy.Position)    						.SetCell(0' 6' LocalizedStrings.PnL + ":")  						.SetCell(1' 6' strategy.PnL)    						.SetCell(0' 7' LocalizedStrings.Str159 + ":")  						.SetCell(1' 7' strategy.Commission)    						.SetCell(0' 8' LocalizedStrings.Str163 + ":")  						.SetCell(1' 8' strategy.Slippage)    						.SetCell(0' 9' LocalizedStrings.Str161 + ":")  						.SetCell(1' 9' Format(strategy.Latency));    					var rowIndex = 11;    					foreach (var parameter in strategy.StatisticManager.Parameters.SyncGet(c => c.ToArray()))  					{  						var value = parameter.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' parameter.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					rowIndex += 2;  					worker.SetCell(0' rowIndex' LocalizedStrings.Str1340);  					rowIndex++;    					foreach (var strategyParam in strategy.Parameters.CachedValues)  					{  						var value = strategyParam.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' strategyParam.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					//rowIndex += 2;  					//worker.SetCell(0' rowIndex' "Комиссия по типам:");  					//rowIndex++;    					//foreach (var group in Strategy.CommissionManager.Rules.SyncGet(c => c.ToArray()).GroupBy(c => c.GetType().GetDisplayName()))  					//{  					//	var commission = group.Sum(r => r.Commission);    					//	if (commission == 0)  					//		continue;    					//	worker  					//		.SetCell(0' rowIndex' group.Key)  					//		.SetCell(1' rowIndex' commission);    					//	rowIndex++;  					//}    					var columnShift = 3;    					worker  						.SetCell(columnShift + 0' 0' LocalizedStrings.Str985)    						.SetCell(columnShift + 0' 1' LocalizedStrings.Str1192).SetStyle(columnShift + 0' typeof(long))  						.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  						.SetCell(columnShift + 2' 1' LocalizedStrings.Time).SetStyle(columnShift + 2' "HH:mm:ss.fff")  						.SetCell(columnShift + 3' 1' LocalizedStrings.Price).SetStyle(columnShift + 3' typeof(decimal))  						.SetCell(columnShift + 4' 1' LocalizedStrings.Str1341).SetStyle(columnShift + 4' typeof(decimal))  						.SetCell(columnShift + 5' 1' LocalizedStrings.Volume).SetStyle(columnShift + 5' typeof(decimal))  						.SetCell(columnShift + 6' 1' LocalizedStrings.Str128)  						.SetCell(columnShift + 7' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 7' typeof(long))  						.SetCell(columnShift + 8' 1' LocalizedStrings.Str163).SetStyle(columnShift + 8' typeof(decimal))  						.SetCell(columnShift + 9' 1' LocalizedStrings.Str135)  						.SetCell(columnShift + 10' 1' LocalizedStrings.Str1342).SetStyle(columnShift + 11' typeof(decimal))  						.SetCell(columnShift + 11' 1' LocalizedStrings.Str1343).SetStyle(columnShift + 12' typeof(decimal))  						.SetCell(columnShift + 12' 1' LocalizedStrings.Str1344).SetStyle(columnShift + 13' typeof(decimal))  						.SetCell(columnShift + 13' 1' LocalizedStrings.Str1345).SetStyle(columnShift + 14' typeof(decimal))  						.SetCell(columnShift + 14' 1' LocalizedStrings.Str862).SetStyle(columnShift + 15' typeof(decimal));    					worker  						.SetConditionalFormatting(columnShift + 10' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 11' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 12' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 13' ComparisonOperator.Less' "0"' null' Colors.Red);    					var totalPnL = 0m;  					var position = 0m;    					var queues = new Dictionary<Security' PnLQueue>();    					rowIndex = 2;  					foreach (var trade in strategy.MyTrades.ToArray())  					{  						var info = strategy.PnLManager.ProcessMessage(trade.ToMessage());    						totalPnL += info.PnL;  						position += trade.GetPosition() ?? 0;    						var queue = queues.SafeAdd(trade.Trade.Security' key => new PnLQueue(key.ToSecurityId()));    						var localInfo = queue.Process(trade.ToMessage());    						worker  							.SetCell(columnShift + 0' rowIndex' trade.Trade.Id)  							.SetCell(columnShift + 1' rowIndex' trade.Order.TransactionId)  							.SetCell(columnShift + 2' rowIndex' Format(trade.Trade.Time))  							.SetCell(columnShift + 3' rowIndex' trade.Trade.Price)  							.SetCell(columnShift + 4' rowIndex' trade.Order.Price)  							.SetCell(columnShift + 5' rowIndex' trade.Trade.Volume)  							.SetCell(columnShift + 6' rowIndex' Format(trade.Order.Direction))  							.SetCell(columnShift + 7' rowIndex' trade.Order.Id)  							.SetCell(columnShift + 8' rowIndex' trade.Slippage)  							.SetCell(columnShift + 9' rowIndex' trade.Order.Comment)  							.SetCell(columnShift + 10' rowIndex' MathHelper.Round(info.PnL' Decimals))  							.SetCell(columnShift + 11' rowIndex' MathHelper.Round(localInfo.PnL' Decimals))  							.SetCell(columnShift + 12' rowIndex' MathHelper.Round(totalPnL' Decimals))  							.SetCell(columnShift + 13' rowIndex' MathHelper.Round(queue.RealizedPnL' Decimals))  							.SetCell(columnShift + 14' rowIndex' position);    						rowIndex++;  					}    					if (IncludeOrders)  					{  						columnShift += 17;    						worker  							.SetCell(columnShift + 0' 0' LocalizedStrings.Orders)    							.SetCell(columnShift + 0' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  							.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  							.SetCell(columnShift + 2' 1' LocalizedStrings.Str128)  							.SetCell(columnShift + 3' 1' LocalizedStrings.Str1346).SetStyle(columnShift + 3' "HH:mm:ss.fff")  							.SetCell(columnShift + 4' 1' LocalizedStrings.Str1347).SetStyle(columnShift + 4' "HH:mm:ss.fff")  							.SetCell(columnShift + 5' 1' LocalizedStrings.Str1348)  							.SetCell(columnShift + 6' 1' LocalizedStrings.Price).SetStyle(columnShift + 6' typeof(decimal))  							.SetCell(columnShift + 7' 1' LocalizedStrings.Str1323).SetStyle(columnShift + 7' typeof(decimal))  							.SetCell(columnShift + 8' 1' LocalizedStrings.Str1324)  							.SetCell(columnShift + 9' 1' LocalizedStrings.State)  							.SetCell(columnShift + 10' 1' LocalizedStrings.Str1325).SetStyle(columnShift + 10' typeof(decimal))  							.SetCell(columnShift + 11' 1' LocalizedStrings.Volume).SetStyle(columnShift + 11' typeof(decimal))  							.SetCell(columnShift + 12' 1' LocalizedStrings.Type)  							.SetCell(columnShift + 13' 1' LocalizedStrings.Str1326)  							.SetCell(columnShift + 14' 1' LocalizedStrings.Str1327)  							.SetCell(columnShift + 15' 1' LocalizedStrings.Str135);    						worker  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str1329)' null' Colors.Green)  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str238)' null' Colors.Red);    						rowIndex = 2;  						foreach (var order in strategy.Orders.ToArray())  						{  							worker  								.SetCell(columnShift + 0' rowIndex' order.Id)  								.SetCell(columnShift + 1' rowIndex' order.TransactionId)  								.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  								.SetCell(columnShift + 3' rowIndex' Format(order.Time))  								.SetCell(columnShift + 4' rowIndex' Format(order.LastChangeTime))  								.SetCell(columnShift + 5' rowIndex' Format(order.LastChangeTime - order.Time))  								.SetCell(columnShift + 6' rowIndex' order.Price)  								.SetCell(columnShift + 7' rowIndex' MathHelper.Round(order.GetAveragePrice(strategy.Connector)' Decimals))  								.SetCell(columnShift + 8' rowIndex' Format(order.State))  								.SetCell(columnShift + 9' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : LocalizedStrings.Str238))  								.SetCell(columnShift + 10' rowIndex' order.Balance)  								.SetCell(columnShift + 11' rowIndex' order.Volume)  								.SetCell(columnShift + 12' rowIndex' Format(order.Type))  								.SetCell(columnShift + 13' rowIndex' Format(order.LatencyRegistration))  								.SetCell(columnShift + 14' rowIndex' Format(order.LatencyCancellation))  								.SetCell(columnShift + 15' rowIndex' order.Comment);    							rowIndex++;  						}    						var stopOrders = strategy.StopOrders.ToArray();    						if (stopOrders.Length > 0)  						{  							rowIndex += 2;    							worker  								.SetCell(columnShift + 0' rowIndex - 1' LocalizedStrings.Str1351)    								.SetCell(columnShift + 0' rowIndex' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  								.SetCell(columnShift + 1' rowIndex' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  								.SetCell(columnShift + 2' rowIndex' LocalizedStrings.Str128)  								.SetCell(columnShift + 3' rowIndex' LocalizedStrings.Time).SetStyle(columnShift + 3' "HH:mm:ss.fff")  								.SetCell(columnShift + 4' rowIndex' LocalizedStrings.Price).SetStyle(columnShift + 4' typeof(decimal))  								.SetCell(columnShift + 5' rowIndex' LocalizedStrings.Str1324)  								.SetCell(columnShift + 6' rowIndex' LocalizedStrings.State)  								.SetCell(columnShift + 7' rowIndex' LocalizedStrings.Volume).SetStyle(columnShift + 7' typeof(decimal))  								.SetCell(columnShift + 8' rowIndex' LocalizedStrings.Str1326)  								.SetCell(columnShift + 9' rowIndex' LocalizedStrings.Str1327)  								//.SetCell(columnShift + 10' rowIndex' LocalizedStrings.Str1352).SetStyle(columnShift + 9' typeof(long))  								;    							var stopParams = stopOrders[0].Condition.Parameters.Keys.ToArray();    							for (var i = 0; i < stopParams.Length; i++)  								worker.SetCell(columnShift + 11 + i' rowIndex' stopParams[i]);    							foreach (var order in stopOrders)  							{  								worker  									.SetCell(columnShift + 0' rowIndex' order.Id)  									.SetCell(columnShift + 1' rowIndex' order.TransactionId)  									.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  									.SetCell(columnShift + 3' rowIndex' Format(order.Time))  									.SetCell(columnShift + 4' rowIndex' order.Price)  									.SetCell(columnShift + 5' rowIndex' Format(order.State))  									.SetCell(columnShift + 6' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : string.Empty))  									.SetCell(columnShift + 7' rowIndex' order.Volume)  									.SetCell(columnShift + 8' rowIndex' Format(order.LatencyRegistration))  									.SetCell(columnShift + 9' rowIndex' Format(order.LatencyCancellation))  									//.SetCell(columnShift + 10' rowIndex' order.DerivedOrder != null ? (object)order.DerivedOrder.Id : string.Empty)  									;    								for (var i = 0; i < stopParams.Length; i++)  									worker.SetCell(columnShift + 11 + i' rowIndex' order.Condition.Parameters[stopParams[i]] ?? string.Empty);    								rowIndex++;  							}  						}  					}  				}    				worker.Save(FileName' true);  			}
Magic Number,StockSharp.Algo.Strategies.Reporting,ExcelStrategyReport,C:\repos\stocksharp_stocksharp\Algo\Strategies\Reporting\ExcelStrategyReport.cs,Generate,The following statement contains a magic number: using (var worker = hasTemplate ? new ExcelWorker() : new ExcelWorker(Template))  			{  				foreach (var strategy in Strategies)  				{  					if (Template.IsEmpty())  					{  						worker.RenameSheet(strategy.Name);  					}  					else  					{  						if (worker.ContainsSheet(strategy.Name))  							worker.AddSheet(strategy.Name);  					}    					worker  						.SetCell(0' 0' LocalizedStrings.Str1331)    						.SetCell(0' 1' LocalizedStrings.Security + ":")  						.SetCell(1' 1' strategy.Security != null ? strategy.Security.Id : string.Empty)    						.SetCell(0' 2' LocalizedStrings.Portfolio + ":")  						.SetCell(1' 2' strategy.Portfolio != null ? strategy.Portfolio.Name : string.Empty)    						.SetCell(0' 3' LocalizedStrings.Str1334)  						.SetCell(1' 3' Format(strategy.TotalWorkingTime))    						.SetCell(0' 4' LocalizedStrings.Str1335)  						//.SetCell(1' 4' FormatTime(base.Strategy.TotalCPUTime))    						.SetCell(0' 5' LocalizedStrings.Str862 + ":")  						.SetCell(1' 5' strategy.Position)    						.SetCell(0' 6' LocalizedStrings.PnL + ":")  						.SetCell(1' 6' strategy.PnL)    						.SetCell(0' 7' LocalizedStrings.Str159 + ":")  						.SetCell(1' 7' strategy.Commission)    						.SetCell(0' 8' LocalizedStrings.Str163 + ":")  						.SetCell(1' 8' strategy.Slippage)    						.SetCell(0' 9' LocalizedStrings.Str161 + ":")  						.SetCell(1' 9' Format(strategy.Latency));    					var rowIndex = 11;    					foreach (var parameter in strategy.StatisticManager.Parameters.SyncGet(c => c.ToArray()))  					{  						var value = parameter.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' parameter.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					rowIndex += 2;  					worker.SetCell(0' rowIndex' LocalizedStrings.Str1340);  					rowIndex++;    					foreach (var strategyParam in strategy.Parameters.CachedValues)  					{  						var value = strategyParam.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' strategyParam.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					//rowIndex += 2;  					//worker.SetCell(0' rowIndex' "Комиссия по типам:");  					//rowIndex++;    					//foreach (var group in Strategy.CommissionManager.Rules.SyncGet(c => c.ToArray()).GroupBy(c => c.GetType().GetDisplayName()))  					//{  					//	var commission = group.Sum(r => r.Commission);    					//	if (commission == 0)  					//		continue;    					//	worker  					//		.SetCell(0' rowIndex' group.Key)  					//		.SetCell(1' rowIndex' commission);    					//	rowIndex++;  					//}    					var columnShift = 3;    					worker  						.SetCell(columnShift + 0' 0' LocalizedStrings.Str985)    						.SetCell(columnShift + 0' 1' LocalizedStrings.Str1192).SetStyle(columnShift + 0' typeof(long))  						.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  						.SetCell(columnShift + 2' 1' LocalizedStrings.Time).SetStyle(columnShift + 2' "HH:mm:ss.fff")  						.SetCell(columnShift + 3' 1' LocalizedStrings.Price).SetStyle(columnShift + 3' typeof(decimal))  						.SetCell(columnShift + 4' 1' LocalizedStrings.Str1341).SetStyle(columnShift + 4' typeof(decimal))  						.SetCell(columnShift + 5' 1' LocalizedStrings.Volume).SetStyle(columnShift + 5' typeof(decimal))  						.SetCell(columnShift + 6' 1' LocalizedStrings.Str128)  						.SetCell(columnShift + 7' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 7' typeof(long))  						.SetCell(columnShift + 8' 1' LocalizedStrings.Str163).SetStyle(columnShift + 8' typeof(decimal))  						.SetCell(columnShift + 9' 1' LocalizedStrings.Str135)  						.SetCell(columnShift + 10' 1' LocalizedStrings.Str1342).SetStyle(columnShift + 11' typeof(decimal))  						.SetCell(columnShift + 11' 1' LocalizedStrings.Str1343).SetStyle(columnShift + 12' typeof(decimal))  						.SetCell(columnShift + 12' 1' LocalizedStrings.Str1344).SetStyle(columnShift + 13' typeof(decimal))  						.SetCell(columnShift + 13' 1' LocalizedStrings.Str1345).SetStyle(columnShift + 14' typeof(decimal))  						.SetCell(columnShift + 14' 1' LocalizedStrings.Str862).SetStyle(columnShift + 15' typeof(decimal));    					worker  						.SetConditionalFormatting(columnShift + 10' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 11' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 12' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 13' ComparisonOperator.Less' "0"' null' Colors.Red);    					var totalPnL = 0m;  					var position = 0m;    					var queues = new Dictionary<Security' PnLQueue>();    					rowIndex = 2;  					foreach (var trade in strategy.MyTrades.ToArray())  					{  						var info = strategy.PnLManager.ProcessMessage(trade.ToMessage());    						totalPnL += info.PnL;  						position += trade.GetPosition() ?? 0;    						var queue = queues.SafeAdd(trade.Trade.Security' key => new PnLQueue(key.ToSecurityId()));    						var localInfo = queue.Process(trade.ToMessage());    						worker  							.SetCell(columnShift + 0' rowIndex' trade.Trade.Id)  							.SetCell(columnShift + 1' rowIndex' trade.Order.TransactionId)  							.SetCell(columnShift + 2' rowIndex' Format(trade.Trade.Time))  							.SetCell(columnShift + 3' rowIndex' trade.Trade.Price)  							.SetCell(columnShift + 4' rowIndex' trade.Order.Price)  							.SetCell(columnShift + 5' rowIndex' trade.Trade.Volume)  							.SetCell(columnShift + 6' rowIndex' Format(trade.Order.Direction))  							.SetCell(columnShift + 7' rowIndex' trade.Order.Id)  							.SetCell(columnShift + 8' rowIndex' trade.Slippage)  							.SetCell(columnShift + 9' rowIndex' trade.Order.Comment)  							.SetCell(columnShift + 10' rowIndex' MathHelper.Round(info.PnL' Decimals))  							.SetCell(columnShift + 11' rowIndex' MathHelper.Round(localInfo.PnL' Decimals))  							.SetCell(columnShift + 12' rowIndex' MathHelper.Round(totalPnL' Decimals))  							.SetCell(columnShift + 13' rowIndex' MathHelper.Round(queue.RealizedPnL' Decimals))  							.SetCell(columnShift + 14' rowIndex' position);    						rowIndex++;  					}    					if (IncludeOrders)  					{  						columnShift += 17;    						worker  							.SetCell(columnShift + 0' 0' LocalizedStrings.Orders)    							.SetCell(columnShift + 0' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  							.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  							.SetCell(columnShift + 2' 1' LocalizedStrings.Str128)  							.SetCell(columnShift + 3' 1' LocalizedStrings.Str1346).SetStyle(columnShift + 3' "HH:mm:ss.fff")  							.SetCell(columnShift + 4' 1' LocalizedStrings.Str1347).SetStyle(columnShift + 4' "HH:mm:ss.fff")  							.SetCell(columnShift + 5' 1' LocalizedStrings.Str1348)  							.SetCell(columnShift + 6' 1' LocalizedStrings.Price).SetStyle(columnShift + 6' typeof(decimal))  							.SetCell(columnShift + 7' 1' LocalizedStrings.Str1323).SetStyle(columnShift + 7' typeof(decimal))  							.SetCell(columnShift + 8' 1' LocalizedStrings.Str1324)  							.SetCell(columnShift + 9' 1' LocalizedStrings.State)  							.SetCell(columnShift + 10' 1' LocalizedStrings.Str1325).SetStyle(columnShift + 10' typeof(decimal))  							.SetCell(columnShift + 11' 1' LocalizedStrings.Volume).SetStyle(columnShift + 11' typeof(decimal))  							.SetCell(columnShift + 12' 1' LocalizedStrings.Type)  							.SetCell(columnShift + 13' 1' LocalizedStrings.Str1326)  							.SetCell(columnShift + 14' 1' LocalizedStrings.Str1327)  							.SetCell(columnShift + 15' 1' LocalizedStrings.Str135);    						worker  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str1329)' null' Colors.Green)  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str238)' null' Colors.Red);    						rowIndex = 2;  						foreach (var order in strategy.Orders.ToArray())  						{  							worker  								.SetCell(columnShift + 0' rowIndex' order.Id)  								.SetCell(columnShift + 1' rowIndex' order.TransactionId)  								.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  								.SetCell(columnShift + 3' rowIndex' Format(order.Time))  								.SetCell(columnShift + 4' rowIndex' Format(order.LastChangeTime))  								.SetCell(columnShift + 5' rowIndex' Format(order.LastChangeTime - order.Time))  								.SetCell(columnShift + 6' rowIndex' order.Price)  								.SetCell(columnShift + 7' rowIndex' MathHelper.Round(order.GetAveragePrice(strategy.Connector)' Decimals))  								.SetCell(columnShift + 8' rowIndex' Format(order.State))  								.SetCell(columnShift + 9' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : LocalizedStrings.Str238))  								.SetCell(columnShift + 10' rowIndex' order.Balance)  								.SetCell(columnShift + 11' rowIndex' order.Volume)  								.SetCell(columnShift + 12' rowIndex' Format(order.Type))  								.SetCell(columnShift + 13' rowIndex' Format(order.LatencyRegistration))  								.SetCell(columnShift + 14' rowIndex' Format(order.LatencyCancellation))  								.SetCell(columnShift + 15' rowIndex' order.Comment);    							rowIndex++;  						}    						var stopOrders = strategy.StopOrders.ToArray();    						if (stopOrders.Length > 0)  						{  							rowIndex += 2;    							worker  								.SetCell(columnShift + 0' rowIndex - 1' LocalizedStrings.Str1351)    								.SetCell(columnShift + 0' rowIndex' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  								.SetCell(columnShift + 1' rowIndex' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  								.SetCell(columnShift + 2' rowIndex' LocalizedStrings.Str128)  								.SetCell(columnShift + 3' rowIndex' LocalizedStrings.Time).SetStyle(columnShift + 3' "HH:mm:ss.fff")  								.SetCell(columnShift + 4' rowIndex' LocalizedStrings.Price).SetStyle(columnShift + 4' typeof(decimal))  								.SetCell(columnShift + 5' rowIndex' LocalizedStrings.Str1324)  								.SetCell(columnShift + 6' rowIndex' LocalizedStrings.State)  								.SetCell(columnShift + 7' rowIndex' LocalizedStrings.Volume).SetStyle(columnShift + 7' typeof(decimal))  								.SetCell(columnShift + 8' rowIndex' LocalizedStrings.Str1326)  								.SetCell(columnShift + 9' rowIndex' LocalizedStrings.Str1327)  								//.SetCell(columnShift + 10' rowIndex' LocalizedStrings.Str1352).SetStyle(columnShift + 9' typeof(long))  								;    							var stopParams = stopOrders[0].Condition.Parameters.Keys.ToArray();    							for (var i = 0; i < stopParams.Length; i++)  								worker.SetCell(columnShift + 11 + i' rowIndex' stopParams[i]);    							foreach (var order in stopOrders)  							{  								worker  									.SetCell(columnShift + 0' rowIndex' order.Id)  									.SetCell(columnShift + 1' rowIndex' order.TransactionId)  									.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  									.SetCell(columnShift + 3' rowIndex' Format(order.Time))  									.SetCell(columnShift + 4' rowIndex' order.Price)  									.SetCell(columnShift + 5' rowIndex' Format(order.State))  									.SetCell(columnShift + 6' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : string.Empty))  									.SetCell(columnShift + 7' rowIndex' order.Volume)  									.SetCell(columnShift + 8' rowIndex' Format(order.LatencyRegistration))  									.SetCell(columnShift + 9' rowIndex' Format(order.LatencyCancellation))  									//.SetCell(columnShift + 10' rowIndex' order.DerivedOrder != null ? (object)order.DerivedOrder.Id : string.Empty)  									;    								for (var i = 0; i < stopParams.Length; i++)  									worker.SetCell(columnShift + 11 + i' rowIndex' order.Condition.Parameters[stopParams[i]] ?? string.Empty);    								rowIndex++;  							}  						}  					}  				}    				worker.Save(FileName' true);  			}
Magic Number,StockSharp.Algo.Strategies.Reporting,ExcelStrategyReport,C:\repos\stocksharp_stocksharp\Algo\Strategies\Reporting\ExcelStrategyReport.cs,Generate,The following statement contains a magic number: using (var worker = hasTemplate ? new ExcelWorker() : new ExcelWorker(Template))  			{  				foreach (var strategy in Strategies)  				{  					if (Template.IsEmpty())  					{  						worker.RenameSheet(strategy.Name);  					}  					else  					{  						if (worker.ContainsSheet(strategy.Name))  							worker.AddSheet(strategy.Name);  					}    					worker  						.SetCell(0' 0' LocalizedStrings.Str1331)    						.SetCell(0' 1' LocalizedStrings.Security + ":")  						.SetCell(1' 1' strategy.Security != null ? strategy.Security.Id : string.Empty)    						.SetCell(0' 2' LocalizedStrings.Portfolio + ":")  						.SetCell(1' 2' strategy.Portfolio != null ? strategy.Portfolio.Name : string.Empty)    						.SetCell(0' 3' LocalizedStrings.Str1334)  						.SetCell(1' 3' Format(strategy.TotalWorkingTime))    						.SetCell(0' 4' LocalizedStrings.Str1335)  						//.SetCell(1' 4' FormatTime(base.Strategy.TotalCPUTime))    						.SetCell(0' 5' LocalizedStrings.Str862 + ":")  						.SetCell(1' 5' strategy.Position)    						.SetCell(0' 6' LocalizedStrings.PnL + ":")  						.SetCell(1' 6' strategy.PnL)    						.SetCell(0' 7' LocalizedStrings.Str159 + ":")  						.SetCell(1' 7' strategy.Commission)    						.SetCell(0' 8' LocalizedStrings.Str163 + ":")  						.SetCell(1' 8' strategy.Slippage)    						.SetCell(0' 9' LocalizedStrings.Str161 + ":")  						.SetCell(1' 9' Format(strategy.Latency));    					var rowIndex = 11;    					foreach (var parameter in strategy.StatisticManager.Parameters.SyncGet(c => c.ToArray()))  					{  						var value = parameter.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' parameter.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					rowIndex += 2;  					worker.SetCell(0' rowIndex' LocalizedStrings.Str1340);  					rowIndex++;    					foreach (var strategyParam in strategy.Parameters.CachedValues)  					{  						var value = strategyParam.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' strategyParam.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					//rowIndex += 2;  					//worker.SetCell(0' rowIndex' "Комиссия по типам:");  					//rowIndex++;    					//foreach (var group in Strategy.CommissionManager.Rules.SyncGet(c => c.ToArray()).GroupBy(c => c.GetType().GetDisplayName()))  					//{  					//	var commission = group.Sum(r => r.Commission);    					//	if (commission == 0)  					//		continue;    					//	worker  					//		.SetCell(0' rowIndex' group.Key)  					//		.SetCell(1' rowIndex' commission);    					//	rowIndex++;  					//}    					var columnShift = 3;    					worker  						.SetCell(columnShift + 0' 0' LocalizedStrings.Str985)    						.SetCell(columnShift + 0' 1' LocalizedStrings.Str1192).SetStyle(columnShift + 0' typeof(long))  						.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  						.SetCell(columnShift + 2' 1' LocalizedStrings.Time).SetStyle(columnShift + 2' "HH:mm:ss.fff")  						.SetCell(columnShift + 3' 1' LocalizedStrings.Price).SetStyle(columnShift + 3' typeof(decimal))  						.SetCell(columnShift + 4' 1' LocalizedStrings.Str1341).SetStyle(columnShift + 4' typeof(decimal))  						.SetCell(columnShift + 5' 1' LocalizedStrings.Volume).SetStyle(columnShift + 5' typeof(decimal))  						.SetCell(columnShift + 6' 1' LocalizedStrings.Str128)  						.SetCell(columnShift + 7' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 7' typeof(long))  						.SetCell(columnShift + 8' 1' LocalizedStrings.Str163).SetStyle(columnShift + 8' typeof(decimal))  						.SetCell(columnShift + 9' 1' LocalizedStrings.Str135)  						.SetCell(columnShift + 10' 1' LocalizedStrings.Str1342).SetStyle(columnShift + 11' typeof(decimal))  						.SetCell(columnShift + 11' 1' LocalizedStrings.Str1343).SetStyle(columnShift + 12' typeof(decimal))  						.SetCell(columnShift + 12' 1' LocalizedStrings.Str1344).SetStyle(columnShift + 13' typeof(decimal))  						.SetCell(columnShift + 13' 1' LocalizedStrings.Str1345).SetStyle(columnShift + 14' typeof(decimal))  						.SetCell(columnShift + 14' 1' LocalizedStrings.Str862).SetStyle(columnShift + 15' typeof(decimal));    					worker  						.SetConditionalFormatting(columnShift + 10' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 11' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 12' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 13' ComparisonOperator.Less' "0"' null' Colors.Red);    					var totalPnL = 0m;  					var position = 0m;    					var queues = new Dictionary<Security' PnLQueue>();    					rowIndex = 2;  					foreach (var trade in strategy.MyTrades.ToArray())  					{  						var info = strategy.PnLManager.ProcessMessage(trade.ToMessage());    						totalPnL += info.PnL;  						position += trade.GetPosition() ?? 0;    						var queue = queues.SafeAdd(trade.Trade.Security' key => new PnLQueue(key.ToSecurityId()));    						var localInfo = queue.Process(trade.ToMessage());    						worker  							.SetCell(columnShift + 0' rowIndex' trade.Trade.Id)  							.SetCell(columnShift + 1' rowIndex' trade.Order.TransactionId)  							.SetCell(columnShift + 2' rowIndex' Format(trade.Trade.Time))  							.SetCell(columnShift + 3' rowIndex' trade.Trade.Price)  							.SetCell(columnShift + 4' rowIndex' trade.Order.Price)  							.SetCell(columnShift + 5' rowIndex' trade.Trade.Volume)  							.SetCell(columnShift + 6' rowIndex' Format(trade.Order.Direction))  							.SetCell(columnShift + 7' rowIndex' trade.Order.Id)  							.SetCell(columnShift + 8' rowIndex' trade.Slippage)  							.SetCell(columnShift + 9' rowIndex' trade.Order.Comment)  							.SetCell(columnShift + 10' rowIndex' MathHelper.Round(info.PnL' Decimals))  							.SetCell(columnShift + 11' rowIndex' MathHelper.Round(localInfo.PnL' Decimals))  							.SetCell(columnShift + 12' rowIndex' MathHelper.Round(totalPnL' Decimals))  							.SetCell(columnShift + 13' rowIndex' MathHelper.Round(queue.RealizedPnL' Decimals))  							.SetCell(columnShift + 14' rowIndex' position);    						rowIndex++;  					}    					if (IncludeOrders)  					{  						columnShift += 17;    						worker  							.SetCell(columnShift + 0' 0' LocalizedStrings.Orders)    							.SetCell(columnShift + 0' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  							.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  							.SetCell(columnShift + 2' 1' LocalizedStrings.Str128)  							.SetCell(columnShift + 3' 1' LocalizedStrings.Str1346).SetStyle(columnShift + 3' "HH:mm:ss.fff")  							.SetCell(columnShift + 4' 1' LocalizedStrings.Str1347).SetStyle(columnShift + 4' "HH:mm:ss.fff")  							.SetCell(columnShift + 5' 1' LocalizedStrings.Str1348)  							.SetCell(columnShift + 6' 1' LocalizedStrings.Price).SetStyle(columnShift + 6' typeof(decimal))  							.SetCell(columnShift + 7' 1' LocalizedStrings.Str1323).SetStyle(columnShift + 7' typeof(decimal))  							.SetCell(columnShift + 8' 1' LocalizedStrings.Str1324)  							.SetCell(columnShift + 9' 1' LocalizedStrings.State)  							.SetCell(columnShift + 10' 1' LocalizedStrings.Str1325).SetStyle(columnShift + 10' typeof(decimal))  							.SetCell(columnShift + 11' 1' LocalizedStrings.Volume).SetStyle(columnShift + 11' typeof(decimal))  							.SetCell(columnShift + 12' 1' LocalizedStrings.Type)  							.SetCell(columnShift + 13' 1' LocalizedStrings.Str1326)  							.SetCell(columnShift + 14' 1' LocalizedStrings.Str1327)  							.SetCell(columnShift + 15' 1' LocalizedStrings.Str135);    						worker  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str1329)' null' Colors.Green)  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str238)' null' Colors.Red);    						rowIndex = 2;  						foreach (var order in strategy.Orders.ToArray())  						{  							worker  								.SetCell(columnShift + 0' rowIndex' order.Id)  								.SetCell(columnShift + 1' rowIndex' order.TransactionId)  								.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  								.SetCell(columnShift + 3' rowIndex' Format(order.Time))  								.SetCell(columnShift + 4' rowIndex' Format(order.LastChangeTime))  								.SetCell(columnShift + 5' rowIndex' Format(order.LastChangeTime - order.Time))  								.SetCell(columnShift + 6' rowIndex' order.Price)  								.SetCell(columnShift + 7' rowIndex' MathHelper.Round(order.GetAveragePrice(strategy.Connector)' Decimals))  								.SetCell(columnShift + 8' rowIndex' Format(order.State))  								.SetCell(columnShift + 9' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : LocalizedStrings.Str238))  								.SetCell(columnShift + 10' rowIndex' order.Balance)  								.SetCell(columnShift + 11' rowIndex' order.Volume)  								.SetCell(columnShift + 12' rowIndex' Format(order.Type))  								.SetCell(columnShift + 13' rowIndex' Format(order.LatencyRegistration))  								.SetCell(columnShift + 14' rowIndex' Format(order.LatencyCancellation))  								.SetCell(columnShift + 15' rowIndex' order.Comment);    							rowIndex++;  						}    						var stopOrders = strategy.StopOrders.ToArray();    						if (stopOrders.Length > 0)  						{  							rowIndex += 2;    							worker  								.SetCell(columnShift + 0' rowIndex - 1' LocalizedStrings.Str1351)    								.SetCell(columnShift + 0' rowIndex' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  								.SetCell(columnShift + 1' rowIndex' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  								.SetCell(columnShift + 2' rowIndex' LocalizedStrings.Str128)  								.SetCell(columnShift + 3' rowIndex' LocalizedStrings.Time).SetStyle(columnShift + 3' "HH:mm:ss.fff")  								.SetCell(columnShift + 4' rowIndex' LocalizedStrings.Price).SetStyle(columnShift + 4' typeof(decimal))  								.SetCell(columnShift + 5' rowIndex' LocalizedStrings.Str1324)  								.SetCell(columnShift + 6' rowIndex' LocalizedStrings.State)  								.SetCell(columnShift + 7' rowIndex' LocalizedStrings.Volume).SetStyle(columnShift + 7' typeof(decimal))  								.SetCell(columnShift + 8' rowIndex' LocalizedStrings.Str1326)  								.SetCell(columnShift + 9' rowIndex' LocalizedStrings.Str1327)  								//.SetCell(columnShift + 10' rowIndex' LocalizedStrings.Str1352).SetStyle(columnShift + 9' typeof(long))  								;    							var stopParams = stopOrders[0].Condition.Parameters.Keys.ToArray();    							for (var i = 0; i < stopParams.Length; i++)  								worker.SetCell(columnShift + 11 + i' rowIndex' stopParams[i]);    							foreach (var order in stopOrders)  							{  								worker  									.SetCell(columnShift + 0' rowIndex' order.Id)  									.SetCell(columnShift + 1' rowIndex' order.TransactionId)  									.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  									.SetCell(columnShift + 3' rowIndex' Format(order.Time))  									.SetCell(columnShift + 4' rowIndex' order.Price)  									.SetCell(columnShift + 5' rowIndex' Format(order.State))  									.SetCell(columnShift + 6' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : string.Empty))  									.SetCell(columnShift + 7' rowIndex' order.Volume)  									.SetCell(columnShift + 8' rowIndex' Format(order.LatencyRegistration))  									.SetCell(columnShift + 9' rowIndex' Format(order.LatencyCancellation))  									//.SetCell(columnShift + 10' rowIndex' order.DerivedOrder != null ? (object)order.DerivedOrder.Id : string.Empty)  									;    								for (var i = 0; i < stopParams.Length; i++)  									worker.SetCell(columnShift + 11 + i' rowIndex' order.Condition.Parameters[stopParams[i]] ?? string.Empty);    								rowIndex++;  							}  						}  					}  				}    				worker.Save(FileName' true);  			}
Magic Number,StockSharp.Algo.Strategies.Reporting,ExcelStrategyReport,C:\repos\stocksharp_stocksharp\Algo\Strategies\Reporting\ExcelStrategyReport.cs,Generate,The following statement contains a magic number: using (var worker = hasTemplate ? new ExcelWorker() : new ExcelWorker(Template))  			{  				foreach (var strategy in Strategies)  				{  					if (Template.IsEmpty())  					{  						worker.RenameSheet(strategy.Name);  					}  					else  					{  						if (worker.ContainsSheet(strategy.Name))  							worker.AddSheet(strategy.Name);  					}    					worker  						.SetCell(0' 0' LocalizedStrings.Str1331)    						.SetCell(0' 1' LocalizedStrings.Security + ":")  						.SetCell(1' 1' strategy.Security != null ? strategy.Security.Id : string.Empty)    						.SetCell(0' 2' LocalizedStrings.Portfolio + ":")  						.SetCell(1' 2' strategy.Portfolio != null ? strategy.Portfolio.Name : string.Empty)    						.SetCell(0' 3' LocalizedStrings.Str1334)  						.SetCell(1' 3' Format(strategy.TotalWorkingTime))    						.SetCell(0' 4' LocalizedStrings.Str1335)  						//.SetCell(1' 4' FormatTime(base.Strategy.TotalCPUTime))    						.SetCell(0' 5' LocalizedStrings.Str862 + ":")  						.SetCell(1' 5' strategy.Position)    						.SetCell(0' 6' LocalizedStrings.PnL + ":")  						.SetCell(1' 6' strategy.PnL)    						.SetCell(0' 7' LocalizedStrings.Str159 + ":")  						.SetCell(1' 7' strategy.Commission)    						.SetCell(0' 8' LocalizedStrings.Str163 + ":")  						.SetCell(1' 8' strategy.Slippage)    						.SetCell(0' 9' LocalizedStrings.Str161 + ":")  						.SetCell(1' 9' Format(strategy.Latency));    					var rowIndex = 11;    					foreach (var parameter in strategy.StatisticManager.Parameters.SyncGet(c => c.ToArray()))  					{  						var value = parameter.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' parameter.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					rowIndex += 2;  					worker.SetCell(0' rowIndex' LocalizedStrings.Str1340);  					rowIndex++;    					foreach (var strategyParam in strategy.Parameters.CachedValues)  					{  						var value = strategyParam.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' strategyParam.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					//rowIndex += 2;  					//worker.SetCell(0' rowIndex' "Комиссия по типам:");  					//rowIndex++;    					//foreach (var group in Strategy.CommissionManager.Rules.SyncGet(c => c.ToArray()).GroupBy(c => c.GetType().GetDisplayName()))  					//{  					//	var commission = group.Sum(r => r.Commission);    					//	if (commission == 0)  					//		continue;    					//	worker  					//		.SetCell(0' rowIndex' group.Key)  					//		.SetCell(1' rowIndex' commission);    					//	rowIndex++;  					//}    					var columnShift = 3;    					worker  						.SetCell(columnShift + 0' 0' LocalizedStrings.Str985)    						.SetCell(columnShift + 0' 1' LocalizedStrings.Str1192).SetStyle(columnShift + 0' typeof(long))  						.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  						.SetCell(columnShift + 2' 1' LocalizedStrings.Time).SetStyle(columnShift + 2' "HH:mm:ss.fff")  						.SetCell(columnShift + 3' 1' LocalizedStrings.Price).SetStyle(columnShift + 3' typeof(decimal))  						.SetCell(columnShift + 4' 1' LocalizedStrings.Str1341).SetStyle(columnShift + 4' typeof(decimal))  						.SetCell(columnShift + 5' 1' LocalizedStrings.Volume).SetStyle(columnShift + 5' typeof(decimal))  						.SetCell(columnShift + 6' 1' LocalizedStrings.Str128)  						.SetCell(columnShift + 7' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 7' typeof(long))  						.SetCell(columnShift + 8' 1' LocalizedStrings.Str163).SetStyle(columnShift + 8' typeof(decimal))  						.SetCell(columnShift + 9' 1' LocalizedStrings.Str135)  						.SetCell(columnShift + 10' 1' LocalizedStrings.Str1342).SetStyle(columnShift + 11' typeof(decimal))  						.SetCell(columnShift + 11' 1' LocalizedStrings.Str1343).SetStyle(columnShift + 12' typeof(decimal))  						.SetCell(columnShift + 12' 1' LocalizedStrings.Str1344).SetStyle(columnShift + 13' typeof(decimal))  						.SetCell(columnShift + 13' 1' LocalizedStrings.Str1345).SetStyle(columnShift + 14' typeof(decimal))  						.SetCell(columnShift + 14' 1' LocalizedStrings.Str862).SetStyle(columnShift + 15' typeof(decimal));    					worker  						.SetConditionalFormatting(columnShift + 10' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 11' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 12' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 13' ComparisonOperator.Less' "0"' null' Colors.Red);    					var totalPnL = 0m;  					var position = 0m;    					var queues = new Dictionary<Security' PnLQueue>();    					rowIndex = 2;  					foreach (var trade in strategy.MyTrades.ToArray())  					{  						var info = strategy.PnLManager.ProcessMessage(trade.ToMessage());    						totalPnL += info.PnL;  						position += trade.GetPosition() ?? 0;    						var queue = queues.SafeAdd(trade.Trade.Security' key => new PnLQueue(key.ToSecurityId()));    						var localInfo = queue.Process(trade.ToMessage());    						worker  							.SetCell(columnShift + 0' rowIndex' trade.Trade.Id)  							.SetCell(columnShift + 1' rowIndex' trade.Order.TransactionId)  							.SetCell(columnShift + 2' rowIndex' Format(trade.Trade.Time))  							.SetCell(columnShift + 3' rowIndex' trade.Trade.Price)  							.SetCell(columnShift + 4' rowIndex' trade.Order.Price)  							.SetCell(columnShift + 5' rowIndex' trade.Trade.Volume)  							.SetCell(columnShift + 6' rowIndex' Format(trade.Order.Direction))  							.SetCell(columnShift + 7' rowIndex' trade.Order.Id)  							.SetCell(columnShift + 8' rowIndex' trade.Slippage)  							.SetCell(columnShift + 9' rowIndex' trade.Order.Comment)  							.SetCell(columnShift + 10' rowIndex' MathHelper.Round(info.PnL' Decimals))  							.SetCell(columnShift + 11' rowIndex' MathHelper.Round(localInfo.PnL' Decimals))  							.SetCell(columnShift + 12' rowIndex' MathHelper.Round(totalPnL' Decimals))  							.SetCell(columnShift + 13' rowIndex' MathHelper.Round(queue.RealizedPnL' Decimals))  							.SetCell(columnShift + 14' rowIndex' position);    						rowIndex++;  					}    					if (IncludeOrders)  					{  						columnShift += 17;    						worker  							.SetCell(columnShift + 0' 0' LocalizedStrings.Orders)    							.SetCell(columnShift + 0' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  							.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  							.SetCell(columnShift + 2' 1' LocalizedStrings.Str128)  							.SetCell(columnShift + 3' 1' LocalizedStrings.Str1346).SetStyle(columnShift + 3' "HH:mm:ss.fff")  							.SetCell(columnShift + 4' 1' LocalizedStrings.Str1347).SetStyle(columnShift + 4' "HH:mm:ss.fff")  							.SetCell(columnShift + 5' 1' LocalizedStrings.Str1348)  							.SetCell(columnShift + 6' 1' LocalizedStrings.Price).SetStyle(columnShift + 6' typeof(decimal))  							.SetCell(columnShift + 7' 1' LocalizedStrings.Str1323).SetStyle(columnShift + 7' typeof(decimal))  							.SetCell(columnShift + 8' 1' LocalizedStrings.Str1324)  							.SetCell(columnShift + 9' 1' LocalizedStrings.State)  							.SetCell(columnShift + 10' 1' LocalizedStrings.Str1325).SetStyle(columnShift + 10' typeof(decimal))  							.SetCell(columnShift + 11' 1' LocalizedStrings.Volume).SetStyle(columnShift + 11' typeof(decimal))  							.SetCell(columnShift + 12' 1' LocalizedStrings.Type)  							.SetCell(columnShift + 13' 1' LocalizedStrings.Str1326)  							.SetCell(columnShift + 14' 1' LocalizedStrings.Str1327)  							.SetCell(columnShift + 15' 1' LocalizedStrings.Str135);    						worker  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str1329)' null' Colors.Green)  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str238)' null' Colors.Red);    						rowIndex = 2;  						foreach (var order in strategy.Orders.ToArray())  						{  							worker  								.SetCell(columnShift + 0' rowIndex' order.Id)  								.SetCell(columnShift + 1' rowIndex' order.TransactionId)  								.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  								.SetCell(columnShift + 3' rowIndex' Format(order.Time))  								.SetCell(columnShift + 4' rowIndex' Format(order.LastChangeTime))  								.SetCell(columnShift + 5' rowIndex' Format(order.LastChangeTime - order.Time))  								.SetCell(columnShift + 6' rowIndex' order.Price)  								.SetCell(columnShift + 7' rowIndex' MathHelper.Round(order.GetAveragePrice(strategy.Connector)' Decimals))  								.SetCell(columnShift + 8' rowIndex' Format(order.State))  								.SetCell(columnShift + 9' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : LocalizedStrings.Str238))  								.SetCell(columnShift + 10' rowIndex' order.Balance)  								.SetCell(columnShift + 11' rowIndex' order.Volume)  								.SetCell(columnShift + 12' rowIndex' Format(order.Type))  								.SetCell(columnShift + 13' rowIndex' Format(order.LatencyRegistration))  								.SetCell(columnShift + 14' rowIndex' Format(order.LatencyCancellation))  								.SetCell(columnShift + 15' rowIndex' order.Comment);    							rowIndex++;  						}    						var stopOrders = strategy.StopOrders.ToArray();    						if (stopOrders.Length > 0)  						{  							rowIndex += 2;    							worker  								.SetCell(columnShift + 0' rowIndex - 1' LocalizedStrings.Str1351)    								.SetCell(columnShift + 0' rowIndex' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  								.SetCell(columnShift + 1' rowIndex' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  								.SetCell(columnShift + 2' rowIndex' LocalizedStrings.Str128)  								.SetCell(columnShift + 3' rowIndex' LocalizedStrings.Time).SetStyle(columnShift + 3' "HH:mm:ss.fff")  								.SetCell(columnShift + 4' rowIndex' LocalizedStrings.Price).SetStyle(columnShift + 4' typeof(decimal))  								.SetCell(columnShift + 5' rowIndex' LocalizedStrings.Str1324)  								.SetCell(columnShift + 6' rowIndex' LocalizedStrings.State)  								.SetCell(columnShift + 7' rowIndex' LocalizedStrings.Volume).SetStyle(columnShift + 7' typeof(decimal))  								.SetCell(columnShift + 8' rowIndex' LocalizedStrings.Str1326)  								.SetCell(columnShift + 9' rowIndex' LocalizedStrings.Str1327)  								//.SetCell(columnShift + 10' rowIndex' LocalizedStrings.Str1352).SetStyle(columnShift + 9' typeof(long))  								;    							var stopParams = stopOrders[0].Condition.Parameters.Keys.ToArray();    							for (var i = 0; i < stopParams.Length; i++)  								worker.SetCell(columnShift + 11 + i' rowIndex' stopParams[i]);    							foreach (var order in stopOrders)  							{  								worker  									.SetCell(columnShift + 0' rowIndex' order.Id)  									.SetCell(columnShift + 1' rowIndex' order.TransactionId)  									.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  									.SetCell(columnShift + 3' rowIndex' Format(order.Time))  									.SetCell(columnShift + 4' rowIndex' order.Price)  									.SetCell(columnShift + 5' rowIndex' Format(order.State))  									.SetCell(columnShift + 6' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : string.Empty))  									.SetCell(columnShift + 7' rowIndex' order.Volume)  									.SetCell(columnShift + 8' rowIndex' Format(order.LatencyRegistration))  									.SetCell(columnShift + 9' rowIndex' Format(order.LatencyCancellation))  									//.SetCell(columnShift + 10' rowIndex' order.DerivedOrder != null ? (object)order.DerivedOrder.Id : string.Empty)  									;    								for (var i = 0; i < stopParams.Length; i++)  									worker.SetCell(columnShift + 11 + i' rowIndex' order.Condition.Parameters[stopParams[i]] ?? string.Empty);    								rowIndex++;  							}  						}  					}  				}    				worker.Save(FileName' true);  			}
Magic Number,StockSharp.Algo.Strategies.Reporting,ExcelStrategyReport,C:\repos\stocksharp_stocksharp\Algo\Strategies\Reporting\ExcelStrategyReport.cs,Generate,The following statement contains a magic number: using (var worker = hasTemplate ? new ExcelWorker() : new ExcelWorker(Template))  			{  				foreach (var strategy in Strategies)  				{  					if (Template.IsEmpty())  					{  						worker.RenameSheet(strategy.Name);  					}  					else  					{  						if (worker.ContainsSheet(strategy.Name))  							worker.AddSheet(strategy.Name);  					}    					worker  						.SetCell(0' 0' LocalizedStrings.Str1331)    						.SetCell(0' 1' LocalizedStrings.Security + ":")  						.SetCell(1' 1' strategy.Security != null ? strategy.Security.Id : string.Empty)    						.SetCell(0' 2' LocalizedStrings.Portfolio + ":")  						.SetCell(1' 2' strategy.Portfolio != null ? strategy.Portfolio.Name : string.Empty)    						.SetCell(0' 3' LocalizedStrings.Str1334)  						.SetCell(1' 3' Format(strategy.TotalWorkingTime))    						.SetCell(0' 4' LocalizedStrings.Str1335)  						//.SetCell(1' 4' FormatTime(base.Strategy.TotalCPUTime))    						.SetCell(0' 5' LocalizedStrings.Str862 + ":")  						.SetCell(1' 5' strategy.Position)    						.SetCell(0' 6' LocalizedStrings.PnL + ":")  						.SetCell(1' 6' strategy.PnL)    						.SetCell(0' 7' LocalizedStrings.Str159 + ":")  						.SetCell(1' 7' strategy.Commission)    						.SetCell(0' 8' LocalizedStrings.Str163 + ":")  						.SetCell(1' 8' strategy.Slippage)    						.SetCell(0' 9' LocalizedStrings.Str161 + ":")  						.SetCell(1' 9' Format(strategy.Latency));    					var rowIndex = 11;    					foreach (var parameter in strategy.StatisticManager.Parameters.SyncGet(c => c.ToArray()))  					{  						var value = parameter.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' parameter.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					rowIndex += 2;  					worker.SetCell(0' rowIndex' LocalizedStrings.Str1340);  					rowIndex++;    					foreach (var strategyParam in strategy.Parameters.CachedValues)  					{  						var value = strategyParam.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' strategyParam.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					//rowIndex += 2;  					//worker.SetCell(0' rowIndex' "Комиссия по типам:");  					//rowIndex++;    					//foreach (var group in Strategy.CommissionManager.Rules.SyncGet(c => c.ToArray()).GroupBy(c => c.GetType().GetDisplayName()))  					//{  					//	var commission = group.Sum(r => r.Commission);    					//	if (commission == 0)  					//		continue;    					//	worker  					//		.SetCell(0' rowIndex' group.Key)  					//		.SetCell(1' rowIndex' commission);    					//	rowIndex++;  					//}    					var columnShift = 3;    					worker  						.SetCell(columnShift + 0' 0' LocalizedStrings.Str985)    						.SetCell(columnShift + 0' 1' LocalizedStrings.Str1192).SetStyle(columnShift + 0' typeof(long))  						.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  						.SetCell(columnShift + 2' 1' LocalizedStrings.Time).SetStyle(columnShift + 2' "HH:mm:ss.fff")  						.SetCell(columnShift + 3' 1' LocalizedStrings.Price).SetStyle(columnShift + 3' typeof(decimal))  						.SetCell(columnShift + 4' 1' LocalizedStrings.Str1341).SetStyle(columnShift + 4' typeof(decimal))  						.SetCell(columnShift + 5' 1' LocalizedStrings.Volume).SetStyle(columnShift + 5' typeof(decimal))  						.SetCell(columnShift + 6' 1' LocalizedStrings.Str128)  						.SetCell(columnShift + 7' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 7' typeof(long))  						.SetCell(columnShift + 8' 1' LocalizedStrings.Str163).SetStyle(columnShift + 8' typeof(decimal))  						.SetCell(columnShift + 9' 1' LocalizedStrings.Str135)  						.SetCell(columnShift + 10' 1' LocalizedStrings.Str1342).SetStyle(columnShift + 11' typeof(decimal))  						.SetCell(columnShift + 11' 1' LocalizedStrings.Str1343).SetStyle(columnShift + 12' typeof(decimal))  						.SetCell(columnShift + 12' 1' LocalizedStrings.Str1344).SetStyle(columnShift + 13' typeof(decimal))  						.SetCell(columnShift + 13' 1' LocalizedStrings.Str1345).SetStyle(columnShift + 14' typeof(decimal))  						.SetCell(columnShift + 14' 1' LocalizedStrings.Str862).SetStyle(columnShift + 15' typeof(decimal));    					worker  						.SetConditionalFormatting(columnShift + 10' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 11' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 12' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 13' ComparisonOperator.Less' "0"' null' Colors.Red);    					var totalPnL = 0m;  					var position = 0m;    					var queues = new Dictionary<Security' PnLQueue>();    					rowIndex = 2;  					foreach (var trade in strategy.MyTrades.ToArray())  					{  						var info = strategy.PnLManager.ProcessMessage(trade.ToMessage());    						totalPnL += info.PnL;  						position += trade.GetPosition() ?? 0;    						var queue = queues.SafeAdd(trade.Trade.Security' key => new PnLQueue(key.ToSecurityId()));    						var localInfo = queue.Process(trade.ToMessage());    						worker  							.SetCell(columnShift + 0' rowIndex' trade.Trade.Id)  							.SetCell(columnShift + 1' rowIndex' trade.Order.TransactionId)  							.SetCell(columnShift + 2' rowIndex' Format(trade.Trade.Time))  							.SetCell(columnShift + 3' rowIndex' trade.Trade.Price)  							.SetCell(columnShift + 4' rowIndex' trade.Order.Price)  							.SetCell(columnShift + 5' rowIndex' trade.Trade.Volume)  							.SetCell(columnShift + 6' rowIndex' Format(trade.Order.Direction))  							.SetCell(columnShift + 7' rowIndex' trade.Order.Id)  							.SetCell(columnShift + 8' rowIndex' trade.Slippage)  							.SetCell(columnShift + 9' rowIndex' trade.Order.Comment)  							.SetCell(columnShift + 10' rowIndex' MathHelper.Round(info.PnL' Decimals))  							.SetCell(columnShift + 11' rowIndex' MathHelper.Round(localInfo.PnL' Decimals))  							.SetCell(columnShift + 12' rowIndex' MathHelper.Round(totalPnL' Decimals))  							.SetCell(columnShift + 13' rowIndex' MathHelper.Round(queue.RealizedPnL' Decimals))  							.SetCell(columnShift + 14' rowIndex' position);    						rowIndex++;  					}    					if (IncludeOrders)  					{  						columnShift += 17;    						worker  							.SetCell(columnShift + 0' 0' LocalizedStrings.Orders)    							.SetCell(columnShift + 0' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  							.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  							.SetCell(columnShift + 2' 1' LocalizedStrings.Str128)  							.SetCell(columnShift + 3' 1' LocalizedStrings.Str1346).SetStyle(columnShift + 3' "HH:mm:ss.fff")  							.SetCell(columnShift + 4' 1' LocalizedStrings.Str1347).SetStyle(columnShift + 4' "HH:mm:ss.fff")  							.SetCell(columnShift + 5' 1' LocalizedStrings.Str1348)  							.SetCell(columnShift + 6' 1' LocalizedStrings.Price).SetStyle(columnShift + 6' typeof(decimal))  							.SetCell(columnShift + 7' 1' LocalizedStrings.Str1323).SetStyle(columnShift + 7' typeof(decimal))  							.SetCell(columnShift + 8' 1' LocalizedStrings.Str1324)  							.SetCell(columnShift + 9' 1' LocalizedStrings.State)  							.SetCell(columnShift + 10' 1' LocalizedStrings.Str1325).SetStyle(columnShift + 10' typeof(decimal))  							.SetCell(columnShift + 11' 1' LocalizedStrings.Volume).SetStyle(columnShift + 11' typeof(decimal))  							.SetCell(columnShift + 12' 1' LocalizedStrings.Type)  							.SetCell(columnShift + 13' 1' LocalizedStrings.Str1326)  							.SetCell(columnShift + 14' 1' LocalizedStrings.Str1327)  							.SetCell(columnShift + 15' 1' LocalizedStrings.Str135);    						worker  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str1329)' null' Colors.Green)  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str238)' null' Colors.Red);    						rowIndex = 2;  						foreach (var order in strategy.Orders.ToArray())  						{  							worker  								.SetCell(columnShift + 0' rowIndex' order.Id)  								.SetCell(columnShift + 1' rowIndex' order.TransactionId)  								.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  								.SetCell(columnShift + 3' rowIndex' Format(order.Time))  								.SetCell(columnShift + 4' rowIndex' Format(order.LastChangeTime))  								.SetCell(columnShift + 5' rowIndex' Format(order.LastChangeTime - order.Time))  								.SetCell(columnShift + 6' rowIndex' order.Price)  								.SetCell(columnShift + 7' rowIndex' MathHelper.Round(order.GetAveragePrice(strategy.Connector)' Decimals))  								.SetCell(columnShift + 8' rowIndex' Format(order.State))  								.SetCell(columnShift + 9' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : LocalizedStrings.Str238))  								.SetCell(columnShift + 10' rowIndex' order.Balance)  								.SetCell(columnShift + 11' rowIndex' order.Volume)  								.SetCell(columnShift + 12' rowIndex' Format(order.Type))  								.SetCell(columnShift + 13' rowIndex' Format(order.LatencyRegistration))  								.SetCell(columnShift + 14' rowIndex' Format(order.LatencyCancellation))  								.SetCell(columnShift + 15' rowIndex' order.Comment);    							rowIndex++;  						}    						var stopOrders = strategy.StopOrders.ToArray();    						if (stopOrders.Length > 0)  						{  							rowIndex += 2;    							worker  								.SetCell(columnShift + 0' rowIndex - 1' LocalizedStrings.Str1351)    								.SetCell(columnShift + 0' rowIndex' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  								.SetCell(columnShift + 1' rowIndex' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  								.SetCell(columnShift + 2' rowIndex' LocalizedStrings.Str128)  								.SetCell(columnShift + 3' rowIndex' LocalizedStrings.Time).SetStyle(columnShift + 3' "HH:mm:ss.fff")  								.SetCell(columnShift + 4' rowIndex' LocalizedStrings.Price).SetStyle(columnShift + 4' typeof(decimal))  								.SetCell(columnShift + 5' rowIndex' LocalizedStrings.Str1324)  								.SetCell(columnShift + 6' rowIndex' LocalizedStrings.State)  								.SetCell(columnShift + 7' rowIndex' LocalizedStrings.Volume).SetStyle(columnShift + 7' typeof(decimal))  								.SetCell(columnShift + 8' rowIndex' LocalizedStrings.Str1326)  								.SetCell(columnShift + 9' rowIndex' LocalizedStrings.Str1327)  								//.SetCell(columnShift + 10' rowIndex' LocalizedStrings.Str1352).SetStyle(columnShift + 9' typeof(long))  								;    							var stopParams = stopOrders[0].Condition.Parameters.Keys.ToArray();    							for (var i = 0; i < stopParams.Length; i++)  								worker.SetCell(columnShift + 11 + i' rowIndex' stopParams[i]);    							foreach (var order in stopOrders)  							{  								worker  									.SetCell(columnShift + 0' rowIndex' order.Id)  									.SetCell(columnShift + 1' rowIndex' order.TransactionId)  									.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  									.SetCell(columnShift + 3' rowIndex' Format(order.Time))  									.SetCell(columnShift + 4' rowIndex' order.Price)  									.SetCell(columnShift + 5' rowIndex' Format(order.State))  									.SetCell(columnShift + 6' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : string.Empty))  									.SetCell(columnShift + 7' rowIndex' order.Volume)  									.SetCell(columnShift + 8' rowIndex' Format(order.LatencyRegistration))  									.SetCell(columnShift + 9' rowIndex' Format(order.LatencyCancellation))  									//.SetCell(columnShift + 10' rowIndex' order.DerivedOrder != null ? (object)order.DerivedOrder.Id : string.Empty)  									;    								for (var i = 0; i < stopParams.Length; i++)  									worker.SetCell(columnShift + 11 + i' rowIndex' order.Condition.Parameters[stopParams[i]] ?? string.Empty);    								rowIndex++;  							}  						}  					}  				}    				worker.Save(FileName' true);  			}
Magic Number,StockSharp.Algo.Strategies.Reporting,ExcelStrategyReport,C:\repos\stocksharp_stocksharp\Algo\Strategies\Reporting\ExcelStrategyReport.cs,Generate,The following statement contains a magic number: using (var worker = hasTemplate ? new ExcelWorker() : new ExcelWorker(Template))  			{  				foreach (var strategy in Strategies)  				{  					if (Template.IsEmpty())  					{  						worker.RenameSheet(strategy.Name);  					}  					else  					{  						if (worker.ContainsSheet(strategy.Name))  							worker.AddSheet(strategy.Name);  					}    					worker  						.SetCell(0' 0' LocalizedStrings.Str1331)    						.SetCell(0' 1' LocalizedStrings.Security + ":")  						.SetCell(1' 1' strategy.Security != null ? strategy.Security.Id : string.Empty)    						.SetCell(0' 2' LocalizedStrings.Portfolio + ":")  						.SetCell(1' 2' strategy.Portfolio != null ? strategy.Portfolio.Name : string.Empty)    						.SetCell(0' 3' LocalizedStrings.Str1334)  						.SetCell(1' 3' Format(strategy.TotalWorkingTime))    						.SetCell(0' 4' LocalizedStrings.Str1335)  						//.SetCell(1' 4' FormatTime(base.Strategy.TotalCPUTime))    						.SetCell(0' 5' LocalizedStrings.Str862 + ":")  						.SetCell(1' 5' strategy.Position)    						.SetCell(0' 6' LocalizedStrings.PnL + ":")  						.SetCell(1' 6' strategy.PnL)    						.SetCell(0' 7' LocalizedStrings.Str159 + ":")  						.SetCell(1' 7' strategy.Commission)    						.SetCell(0' 8' LocalizedStrings.Str163 + ":")  						.SetCell(1' 8' strategy.Slippage)    						.SetCell(0' 9' LocalizedStrings.Str161 + ":")  						.SetCell(1' 9' Format(strategy.Latency));    					var rowIndex = 11;    					foreach (var parameter in strategy.StatisticManager.Parameters.SyncGet(c => c.ToArray()))  					{  						var value = parameter.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' parameter.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					rowIndex += 2;  					worker.SetCell(0' rowIndex' LocalizedStrings.Str1340);  					rowIndex++;    					foreach (var strategyParam in strategy.Parameters.CachedValues)  					{  						var value = strategyParam.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' strategyParam.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					//rowIndex += 2;  					//worker.SetCell(0' rowIndex' "Комиссия по типам:");  					//rowIndex++;    					//foreach (var group in Strategy.CommissionManager.Rules.SyncGet(c => c.ToArray()).GroupBy(c => c.GetType().GetDisplayName()))  					//{  					//	var commission = group.Sum(r => r.Commission);    					//	if (commission == 0)  					//		continue;    					//	worker  					//		.SetCell(0' rowIndex' group.Key)  					//		.SetCell(1' rowIndex' commission);    					//	rowIndex++;  					//}    					var columnShift = 3;    					worker  						.SetCell(columnShift + 0' 0' LocalizedStrings.Str985)    						.SetCell(columnShift + 0' 1' LocalizedStrings.Str1192).SetStyle(columnShift + 0' typeof(long))  						.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  						.SetCell(columnShift + 2' 1' LocalizedStrings.Time).SetStyle(columnShift + 2' "HH:mm:ss.fff")  						.SetCell(columnShift + 3' 1' LocalizedStrings.Price).SetStyle(columnShift + 3' typeof(decimal))  						.SetCell(columnShift + 4' 1' LocalizedStrings.Str1341).SetStyle(columnShift + 4' typeof(decimal))  						.SetCell(columnShift + 5' 1' LocalizedStrings.Volume).SetStyle(columnShift + 5' typeof(decimal))  						.SetCell(columnShift + 6' 1' LocalizedStrings.Str128)  						.SetCell(columnShift + 7' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 7' typeof(long))  						.SetCell(columnShift + 8' 1' LocalizedStrings.Str163).SetStyle(columnShift + 8' typeof(decimal))  						.SetCell(columnShift + 9' 1' LocalizedStrings.Str135)  						.SetCell(columnShift + 10' 1' LocalizedStrings.Str1342).SetStyle(columnShift + 11' typeof(decimal))  						.SetCell(columnShift + 11' 1' LocalizedStrings.Str1343).SetStyle(columnShift + 12' typeof(decimal))  						.SetCell(columnShift + 12' 1' LocalizedStrings.Str1344).SetStyle(columnShift + 13' typeof(decimal))  						.SetCell(columnShift + 13' 1' LocalizedStrings.Str1345).SetStyle(columnShift + 14' typeof(decimal))  						.SetCell(columnShift + 14' 1' LocalizedStrings.Str862).SetStyle(columnShift + 15' typeof(decimal));    					worker  						.SetConditionalFormatting(columnShift + 10' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 11' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 12' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 13' ComparisonOperator.Less' "0"' null' Colors.Red);    					var totalPnL = 0m;  					var position = 0m;    					var queues = new Dictionary<Security' PnLQueue>();    					rowIndex = 2;  					foreach (var trade in strategy.MyTrades.ToArray())  					{  						var info = strategy.PnLManager.ProcessMessage(trade.ToMessage());    						totalPnL += info.PnL;  						position += trade.GetPosition() ?? 0;    						var queue = queues.SafeAdd(trade.Trade.Security' key => new PnLQueue(key.ToSecurityId()));    						var localInfo = queue.Process(trade.ToMessage());    						worker  							.SetCell(columnShift + 0' rowIndex' trade.Trade.Id)  							.SetCell(columnShift + 1' rowIndex' trade.Order.TransactionId)  							.SetCell(columnShift + 2' rowIndex' Format(trade.Trade.Time))  							.SetCell(columnShift + 3' rowIndex' trade.Trade.Price)  							.SetCell(columnShift + 4' rowIndex' trade.Order.Price)  							.SetCell(columnShift + 5' rowIndex' trade.Trade.Volume)  							.SetCell(columnShift + 6' rowIndex' Format(trade.Order.Direction))  							.SetCell(columnShift + 7' rowIndex' trade.Order.Id)  							.SetCell(columnShift + 8' rowIndex' trade.Slippage)  							.SetCell(columnShift + 9' rowIndex' trade.Order.Comment)  							.SetCell(columnShift + 10' rowIndex' MathHelper.Round(info.PnL' Decimals))  							.SetCell(columnShift + 11' rowIndex' MathHelper.Round(localInfo.PnL' Decimals))  							.SetCell(columnShift + 12' rowIndex' MathHelper.Round(totalPnL' Decimals))  							.SetCell(columnShift + 13' rowIndex' MathHelper.Round(queue.RealizedPnL' Decimals))  							.SetCell(columnShift + 14' rowIndex' position);    						rowIndex++;  					}    					if (IncludeOrders)  					{  						columnShift += 17;    						worker  							.SetCell(columnShift + 0' 0' LocalizedStrings.Orders)    							.SetCell(columnShift + 0' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  							.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  							.SetCell(columnShift + 2' 1' LocalizedStrings.Str128)  							.SetCell(columnShift + 3' 1' LocalizedStrings.Str1346).SetStyle(columnShift + 3' "HH:mm:ss.fff")  							.SetCell(columnShift + 4' 1' LocalizedStrings.Str1347).SetStyle(columnShift + 4' "HH:mm:ss.fff")  							.SetCell(columnShift + 5' 1' LocalizedStrings.Str1348)  							.SetCell(columnShift + 6' 1' LocalizedStrings.Price).SetStyle(columnShift + 6' typeof(decimal))  							.SetCell(columnShift + 7' 1' LocalizedStrings.Str1323).SetStyle(columnShift + 7' typeof(decimal))  							.SetCell(columnShift + 8' 1' LocalizedStrings.Str1324)  							.SetCell(columnShift + 9' 1' LocalizedStrings.State)  							.SetCell(columnShift + 10' 1' LocalizedStrings.Str1325).SetStyle(columnShift + 10' typeof(decimal))  							.SetCell(columnShift + 11' 1' LocalizedStrings.Volume).SetStyle(columnShift + 11' typeof(decimal))  							.SetCell(columnShift + 12' 1' LocalizedStrings.Type)  							.SetCell(columnShift + 13' 1' LocalizedStrings.Str1326)  							.SetCell(columnShift + 14' 1' LocalizedStrings.Str1327)  							.SetCell(columnShift + 15' 1' LocalizedStrings.Str135);    						worker  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str1329)' null' Colors.Green)  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str238)' null' Colors.Red);    						rowIndex = 2;  						foreach (var order in strategy.Orders.ToArray())  						{  							worker  								.SetCell(columnShift + 0' rowIndex' order.Id)  								.SetCell(columnShift + 1' rowIndex' order.TransactionId)  								.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  								.SetCell(columnShift + 3' rowIndex' Format(order.Time))  								.SetCell(columnShift + 4' rowIndex' Format(order.LastChangeTime))  								.SetCell(columnShift + 5' rowIndex' Format(order.LastChangeTime - order.Time))  								.SetCell(columnShift + 6' rowIndex' order.Price)  								.SetCell(columnShift + 7' rowIndex' MathHelper.Round(order.GetAveragePrice(strategy.Connector)' Decimals))  								.SetCell(columnShift + 8' rowIndex' Format(order.State))  								.SetCell(columnShift + 9' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : LocalizedStrings.Str238))  								.SetCell(columnShift + 10' rowIndex' order.Balance)  								.SetCell(columnShift + 11' rowIndex' order.Volume)  								.SetCell(columnShift + 12' rowIndex' Format(order.Type))  								.SetCell(columnShift + 13' rowIndex' Format(order.LatencyRegistration))  								.SetCell(columnShift + 14' rowIndex' Format(order.LatencyCancellation))  								.SetCell(columnShift + 15' rowIndex' order.Comment);    							rowIndex++;  						}    						var stopOrders = strategy.StopOrders.ToArray();    						if (stopOrders.Length > 0)  						{  							rowIndex += 2;    							worker  								.SetCell(columnShift + 0' rowIndex - 1' LocalizedStrings.Str1351)    								.SetCell(columnShift + 0' rowIndex' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  								.SetCell(columnShift + 1' rowIndex' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  								.SetCell(columnShift + 2' rowIndex' LocalizedStrings.Str128)  								.SetCell(columnShift + 3' rowIndex' LocalizedStrings.Time).SetStyle(columnShift + 3' "HH:mm:ss.fff")  								.SetCell(columnShift + 4' rowIndex' LocalizedStrings.Price).SetStyle(columnShift + 4' typeof(decimal))  								.SetCell(columnShift + 5' rowIndex' LocalizedStrings.Str1324)  								.SetCell(columnShift + 6' rowIndex' LocalizedStrings.State)  								.SetCell(columnShift + 7' rowIndex' LocalizedStrings.Volume).SetStyle(columnShift + 7' typeof(decimal))  								.SetCell(columnShift + 8' rowIndex' LocalizedStrings.Str1326)  								.SetCell(columnShift + 9' rowIndex' LocalizedStrings.Str1327)  								//.SetCell(columnShift + 10' rowIndex' LocalizedStrings.Str1352).SetStyle(columnShift + 9' typeof(long))  								;    							var stopParams = stopOrders[0].Condition.Parameters.Keys.ToArray();    							for (var i = 0; i < stopParams.Length; i++)  								worker.SetCell(columnShift + 11 + i' rowIndex' stopParams[i]);    							foreach (var order in stopOrders)  							{  								worker  									.SetCell(columnShift + 0' rowIndex' order.Id)  									.SetCell(columnShift + 1' rowIndex' order.TransactionId)  									.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  									.SetCell(columnShift + 3' rowIndex' Format(order.Time))  									.SetCell(columnShift + 4' rowIndex' order.Price)  									.SetCell(columnShift + 5' rowIndex' Format(order.State))  									.SetCell(columnShift + 6' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : string.Empty))  									.SetCell(columnShift + 7' rowIndex' order.Volume)  									.SetCell(columnShift + 8' rowIndex' Format(order.LatencyRegistration))  									.SetCell(columnShift + 9' rowIndex' Format(order.LatencyCancellation))  									//.SetCell(columnShift + 10' rowIndex' order.DerivedOrder != null ? (object)order.DerivedOrder.Id : string.Empty)  									;    								for (var i = 0; i < stopParams.Length; i++)  									worker.SetCell(columnShift + 11 + i' rowIndex' order.Condition.Parameters[stopParams[i]] ?? string.Empty);    								rowIndex++;  							}  						}  					}  				}    				worker.Save(FileName' true);  			}
Magic Number,StockSharp.Algo.Strategies.Reporting,ExcelStrategyReport,C:\repos\stocksharp_stocksharp\Algo\Strategies\Reporting\ExcelStrategyReport.cs,Generate,The following statement contains a magic number: using (var worker = hasTemplate ? new ExcelWorker() : new ExcelWorker(Template))  			{  				foreach (var strategy in Strategies)  				{  					if (Template.IsEmpty())  					{  						worker.RenameSheet(strategy.Name);  					}  					else  					{  						if (worker.ContainsSheet(strategy.Name))  							worker.AddSheet(strategy.Name);  					}    					worker  						.SetCell(0' 0' LocalizedStrings.Str1331)    						.SetCell(0' 1' LocalizedStrings.Security + ":")  						.SetCell(1' 1' strategy.Security != null ? strategy.Security.Id : string.Empty)    						.SetCell(0' 2' LocalizedStrings.Portfolio + ":")  						.SetCell(1' 2' strategy.Portfolio != null ? strategy.Portfolio.Name : string.Empty)    						.SetCell(0' 3' LocalizedStrings.Str1334)  						.SetCell(1' 3' Format(strategy.TotalWorkingTime))    						.SetCell(0' 4' LocalizedStrings.Str1335)  						//.SetCell(1' 4' FormatTime(base.Strategy.TotalCPUTime))    						.SetCell(0' 5' LocalizedStrings.Str862 + ":")  						.SetCell(1' 5' strategy.Position)    						.SetCell(0' 6' LocalizedStrings.PnL + ":")  						.SetCell(1' 6' strategy.PnL)    						.SetCell(0' 7' LocalizedStrings.Str159 + ":")  						.SetCell(1' 7' strategy.Commission)    						.SetCell(0' 8' LocalizedStrings.Str163 + ":")  						.SetCell(1' 8' strategy.Slippage)    						.SetCell(0' 9' LocalizedStrings.Str161 + ":")  						.SetCell(1' 9' Format(strategy.Latency));    					var rowIndex = 11;    					foreach (var parameter in strategy.StatisticManager.Parameters.SyncGet(c => c.ToArray()))  					{  						var value = parameter.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' parameter.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					rowIndex += 2;  					worker.SetCell(0' rowIndex' LocalizedStrings.Str1340);  					rowIndex++;    					foreach (var strategyParam in strategy.Parameters.CachedValues)  					{  						var value = strategyParam.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' strategyParam.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					//rowIndex += 2;  					//worker.SetCell(0' rowIndex' "Комиссия по типам:");  					//rowIndex++;    					//foreach (var group in Strategy.CommissionManager.Rules.SyncGet(c => c.ToArray()).GroupBy(c => c.GetType().GetDisplayName()))  					//{  					//	var commission = group.Sum(r => r.Commission);    					//	if (commission == 0)  					//		continue;    					//	worker  					//		.SetCell(0' rowIndex' group.Key)  					//		.SetCell(1' rowIndex' commission);    					//	rowIndex++;  					//}    					var columnShift = 3;    					worker  						.SetCell(columnShift + 0' 0' LocalizedStrings.Str985)    						.SetCell(columnShift + 0' 1' LocalizedStrings.Str1192).SetStyle(columnShift + 0' typeof(long))  						.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  						.SetCell(columnShift + 2' 1' LocalizedStrings.Time).SetStyle(columnShift + 2' "HH:mm:ss.fff")  						.SetCell(columnShift + 3' 1' LocalizedStrings.Price).SetStyle(columnShift + 3' typeof(decimal))  						.SetCell(columnShift + 4' 1' LocalizedStrings.Str1341).SetStyle(columnShift + 4' typeof(decimal))  						.SetCell(columnShift + 5' 1' LocalizedStrings.Volume).SetStyle(columnShift + 5' typeof(decimal))  						.SetCell(columnShift + 6' 1' LocalizedStrings.Str128)  						.SetCell(columnShift + 7' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 7' typeof(long))  						.SetCell(columnShift + 8' 1' LocalizedStrings.Str163).SetStyle(columnShift + 8' typeof(decimal))  						.SetCell(columnShift + 9' 1' LocalizedStrings.Str135)  						.SetCell(columnShift + 10' 1' LocalizedStrings.Str1342).SetStyle(columnShift + 11' typeof(decimal))  						.SetCell(columnShift + 11' 1' LocalizedStrings.Str1343).SetStyle(columnShift + 12' typeof(decimal))  						.SetCell(columnShift + 12' 1' LocalizedStrings.Str1344).SetStyle(columnShift + 13' typeof(decimal))  						.SetCell(columnShift + 13' 1' LocalizedStrings.Str1345).SetStyle(columnShift + 14' typeof(decimal))  						.SetCell(columnShift + 14' 1' LocalizedStrings.Str862).SetStyle(columnShift + 15' typeof(decimal));    					worker  						.SetConditionalFormatting(columnShift + 10' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 11' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 12' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 13' ComparisonOperator.Less' "0"' null' Colors.Red);    					var totalPnL = 0m;  					var position = 0m;    					var queues = new Dictionary<Security' PnLQueue>();    					rowIndex = 2;  					foreach (var trade in strategy.MyTrades.ToArray())  					{  						var info = strategy.PnLManager.ProcessMessage(trade.ToMessage());    						totalPnL += info.PnL;  						position += trade.GetPosition() ?? 0;    						var queue = queues.SafeAdd(trade.Trade.Security' key => new PnLQueue(key.ToSecurityId()));    						var localInfo = queue.Process(trade.ToMessage());    						worker  							.SetCell(columnShift + 0' rowIndex' trade.Trade.Id)  							.SetCell(columnShift + 1' rowIndex' trade.Order.TransactionId)  							.SetCell(columnShift + 2' rowIndex' Format(trade.Trade.Time))  							.SetCell(columnShift + 3' rowIndex' trade.Trade.Price)  							.SetCell(columnShift + 4' rowIndex' trade.Order.Price)  							.SetCell(columnShift + 5' rowIndex' trade.Trade.Volume)  							.SetCell(columnShift + 6' rowIndex' Format(trade.Order.Direction))  							.SetCell(columnShift + 7' rowIndex' trade.Order.Id)  							.SetCell(columnShift + 8' rowIndex' trade.Slippage)  							.SetCell(columnShift + 9' rowIndex' trade.Order.Comment)  							.SetCell(columnShift + 10' rowIndex' MathHelper.Round(info.PnL' Decimals))  							.SetCell(columnShift + 11' rowIndex' MathHelper.Round(localInfo.PnL' Decimals))  							.SetCell(columnShift + 12' rowIndex' MathHelper.Round(totalPnL' Decimals))  							.SetCell(columnShift + 13' rowIndex' MathHelper.Round(queue.RealizedPnL' Decimals))  							.SetCell(columnShift + 14' rowIndex' position);    						rowIndex++;  					}    					if (IncludeOrders)  					{  						columnShift += 17;    						worker  							.SetCell(columnShift + 0' 0' LocalizedStrings.Orders)    							.SetCell(columnShift + 0' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  							.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  							.SetCell(columnShift + 2' 1' LocalizedStrings.Str128)  							.SetCell(columnShift + 3' 1' LocalizedStrings.Str1346).SetStyle(columnShift + 3' "HH:mm:ss.fff")  							.SetCell(columnShift + 4' 1' LocalizedStrings.Str1347).SetStyle(columnShift + 4' "HH:mm:ss.fff")  							.SetCell(columnShift + 5' 1' LocalizedStrings.Str1348)  							.SetCell(columnShift + 6' 1' LocalizedStrings.Price).SetStyle(columnShift + 6' typeof(decimal))  							.SetCell(columnShift + 7' 1' LocalizedStrings.Str1323).SetStyle(columnShift + 7' typeof(decimal))  							.SetCell(columnShift + 8' 1' LocalizedStrings.Str1324)  							.SetCell(columnShift + 9' 1' LocalizedStrings.State)  							.SetCell(columnShift + 10' 1' LocalizedStrings.Str1325).SetStyle(columnShift + 10' typeof(decimal))  							.SetCell(columnShift + 11' 1' LocalizedStrings.Volume).SetStyle(columnShift + 11' typeof(decimal))  							.SetCell(columnShift + 12' 1' LocalizedStrings.Type)  							.SetCell(columnShift + 13' 1' LocalizedStrings.Str1326)  							.SetCell(columnShift + 14' 1' LocalizedStrings.Str1327)  							.SetCell(columnShift + 15' 1' LocalizedStrings.Str135);    						worker  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str1329)' null' Colors.Green)  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str238)' null' Colors.Red);    						rowIndex = 2;  						foreach (var order in strategy.Orders.ToArray())  						{  							worker  								.SetCell(columnShift + 0' rowIndex' order.Id)  								.SetCell(columnShift + 1' rowIndex' order.TransactionId)  								.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  								.SetCell(columnShift + 3' rowIndex' Format(order.Time))  								.SetCell(columnShift + 4' rowIndex' Format(order.LastChangeTime))  								.SetCell(columnShift + 5' rowIndex' Format(order.LastChangeTime - order.Time))  								.SetCell(columnShift + 6' rowIndex' order.Price)  								.SetCell(columnShift + 7' rowIndex' MathHelper.Round(order.GetAveragePrice(strategy.Connector)' Decimals))  								.SetCell(columnShift + 8' rowIndex' Format(order.State))  								.SetCell(columnShift + 9' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : LocalizedStrings.Str238))  								.SetCell(columnShift + 10' rowIndex' order.Balance)  								.SetCell(columnShift + 11' rowIndex' order.Volume)  								.SetCell(columnShift + 12' rowIndex' Format(order.Type))  								.SetCell(columnShift + 13' rowIndex' Format(order.LatencyRegistration))  								.SetCell(columnShift + 14' rowIndex' Format(order.LatencyCancellation))  								.SetCell(columnShift + 15' rowIndex' order.Comment);    							rowIndex++;  						}    						var stopOrders = strategy.StopOrders.ToArray();    						if (stopOrders.Length > 0)  						{  							rowIndex += 2;    							worker  								.SetCell(columnShift + 0' rowIndex - 1' LocalizedStrings.Str1351)    								.SetCell(columnShift + 0' rowIndex' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  								.SetCell(columnShift + 1' rowIndex' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  								.SetCell(columnShift + 2' rowIndex' LocalizedStrings.Str128)  								.SetCell(columnShift + 3' rowIndex' LocalizedStrings.Time).SetStyle(columnShift + 3' "HH:mm:ss.fff")  								.SetCell(columnShift + 4' rowIndex' LocalizedStrings.Price).SetStyle(columnShift + 4' typeof(decimal))  								.SetCell(columnShift + 5' rowIndex' LocalizedStrings.Str1324)  								.SetCell(columnShift + 6' rowIndex' LocalizedStrings.State)  								.SetCell(columnShift + 7' rowIndex' LocalizedStrings.Volume).SetStyle(columnShift + 7' typeof(decimal))  								.SetCell(columnShift + 8' rowIndex' LocalizedStrings.Str1326)  								.SetCell(columnShift + 9' rowIndex' LocalizedStrings.Str1327)  								//.SetCell(columnShift + 10' rowIndex' LocalizedStrings.Str1352).SetStyle(columnShift + 9' typeof(long))  								;    							var stopParams = stopOrders[0].Condition.Parameters.Keys.ToArray();    							for (var i = 0; i < stopParams.Length; i++)  								worker.SetCell(columnShift + 11 + i' rowIndex' stopParams[i]);    							foreach (var order in stopOrders)  							{  								worker  									.SetCell(columnShift + 0' rowIndex' order.Id)  									.SetCell(columnShift + 1' rowIndex' order.TransactionId)  									.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  									.SetCell(columnShift + 3' rowIndex' Format(order.Time))  									.SetCell(columnShift + 4' rowIndex' order.Price)  									.SetCell(columnShift + 5' rowIndex' Format(order.State))  									.SetCell(columnShift + 6' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : string.Empty))  									.SetCell(columnShift + 7' rowIndex' order.Volume)  									.SetCell(columnShift + 8' rowIndex' Format(order.LatencyRegistration))  									.SetCell(columnShift + 9' rowIndex' Format(order.LatencyCancellation))  									//.SetCell(columnShift + 10' rowIndex' order.DerivedOrder != null ? (object)order.DerivedOrder.Id : string.Empty)  									;    								for (var i = 0; i < stopParams.Length; i++)  									worker.SetCell(columnShift + 11 + i' rowIndex' order.Condition.Parameters[stopParams[i]] ?? string.Empty);    								rowIndex++;  							}  						}  					}  				}    				worker.Save(FileName' true);  			}
Magic Number,StockSharp.Algo.Strategies.Reporting,ExcelStrategyReport,C:\repos\stocksharp_stocksharp\Algo\Strategies\Reporting\ExcelStrategyReport.cs,Generate,The following statement contains a magic number: using (var worker = hasTemplate ? new ExcelWorker() : new ExcelWorker(Template))  			{  				foreach (var strategy in Strategies)  				{  					if (Template.IsEmpty())  					{  						worker.RenameSheet(strategy.Name);  					}  					else  					{  						if (worker.ContainsSheet(strategy.Name))  							worker.AddSheet(strategy.Name);  					}    					worker  						.SetCell(0' 0' LocalizedStrings.Str1331)    						.SetCell(0' 1' LocalizedStrings.Security + ":")  						.SetCell(1' 1' strategy.Security != null ? strategy.Security.Id : string.Empty)    						.SetCell(0' 2' LocalizedStrings.Portfolio + ":")  						.SetCell(1' 2' strategy.Portfolio != null ? strategy.Portfolio.Name : string.Empty)    						.SetCell(0' 3' LocalizedStrings.Str1334)  						.SetCell(1' 3' Format(strategy.TotalWorkingTime))    						.SetCell(0' 4' LocalizedStrings.Str1335)  						//.SetCell(1' 4' FormatTime(base.Strategy.TotalCPUTime))    						.SetCell(0' 5' LocalizedStrings.Str862 + ":")  						.SetCell(1' 5' strategy.Position)    						.SetCell(0' 6' LocalizedStrings.PnL + ":")  						.SetCell(1' 6' strategy.PnL)    						.SetCell(0' 7' LocalizedStrings.Str159 + ":")  						.SetCell(1' 7' strategy.Commission)    						.SetCell(0' 8' LocalizedStrings.Str163 + ":")  						.SetCell(1' 8' strategy.Slippage)    						.SetCell(0' 9' LocalizedStrings.Str161 + ":")  						.SetCell(1' 9' Format(strategy.Latency));    					var rowIndex = 11;    					foreach (var parameter in strategy.StatisticManager.Parameters.SyncGet(c => c.ToArray()))  					{  						var value = parameter.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' parameter.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					rowIndex += 2;  					worker.SetCell(0' rowIndex' LocalizedStrings.Str1340);  					rowIndex++;    					foreach (var strategyParam in strategy.Parameters.CachedValues)  					{  						var value = strategyParam.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' strategyParam.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					//rowIndex += 2;  					//worker.SetCell(0' rowIndex' "Комиссия по типам:");  					//rowIndex++;    					//foreach (var group in Strategy.CommissionManager.Rules.SyncGet(c => c.ToArray()).GroupBy(c => c.GetType().GetDisplayName()))  					//{  					//	var commission = group.Sum(r => r.Commission);    					//	if (commission == 0)  					//		continue;    					//	worker  					//		.SetCell(0' rowIndex' group.Key)  					//		.SetCell(1' rowIndex' commission);    					//	rowIndex++;  					//}    					var columnShift = 3;    					worker  						.SetCell(columnShift + 0' 0' LocalizedStrings.Str985)    						.SetCell(columnShift + 0' 1' LocalizedStrings.Str1192).SetStyle(columnShift + 0' typeof(long))  						.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  						.SetCell(columnShift + 2' 1' LocalizedStrings.Time).SetStyle(columnShift + 2' "HH:mm:ss.fff")  						.SetCell(columnShift + 3' 1' LocalizedStrings.Price).SetStyle(columnShift + 3' typeof(decimal))  						.SetCell(columnShift + 4' 1' LocalizedStrings.Str1341).SetStyle(columnShift + 4' typeof(decimal))  						.SetCell(columnShift + 5' 1' LocalizedStrings.Volume).SetStyle(columnShift + 5' typeof(decimal))  						.SetCell(columnShift + 6' 1' LocalizedStrings.Str128)  						.SetCell(columnShift + 7' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 7' typeof(long))  						.SetCell(columnShift + 8' 1' LocalizedStrings.Str163).SetStyle(columnShift + 8' typeof(decimal))  						.SetCell(columnShift + 9' 1' LocalizedStrings.Str135)  						.SetCell(columnShift + 10' 1' LocalizedStrings.Str1342).SetStyle(columnShift + 11' typeof(decimal))  						.SetCell(columnShift + 11' 1' LocalizedStrings.Str1343).SetStyle(columnShift + 12' typeof(decimal))  						.SetCell(columnShift + 12' 1' LocalizedStrings.Str1344).SetStyle(columnShift + 13' typeof(decimal))  						.SetCell(columnShift + 13' 1' LocalizedStrings.Str1345).SetStyle(columnShift + 14' typeof(decimal))  						.SetCell(columnShift + 14' 1' LocalizedStrings.Str862).SetStyle(columnShift + 15' typeof(decimal));    					worker  						.SetConditionalFormatting(columnShift + 10' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 11' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 12' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 13' ComparisonOperator.Less' "0"' null' Colors.Red);    					var totalPnL = 0m;  					var position = 0m;    					var queues = new Dictionary<Security' PnLQueue>();    					rowIndex = 2;  					foreach (var trade in strategy.MyTrades.ToArray())  					{  						var info = strategy.PnLManager.ProcessMessage(trade.ToMessage());    						totalPnL += info.PnL;  						position += trade.GetPosition() ?? 0;    						var queue = queues.SafeAdd(trade.Trade.Security' key => new PnLQueue(key.ToSecurityId()));    						var localInfo = queue.Process(trade.ToMessage());    						worker  							.SetCell(columnShift + 0' rowIndex' trade.Trade.Id)  							.SetCell(columnShift + 1' rowIndex' trade.Order.TransactionId)  							.SetCell(columnShift + 2' rowIndex' Format(trade.Trade.Time))  							.SetCell(columnShift + 3' rowIndex' trade.Trade.Price)  							.SetCell(columnShift + 4' rowIndex' trade.Order.Price)  							.SetCell(columnShift + 5' rowIndex' trade.Trade.Volume)  							.SetCell(columnShift + 6' rowIndex' Format(trade.Order.Direction))  							.SetCell(columnShift + 7' rowIndex' trade.Order.Id)  							.SetCell(columnShift + 8' rowIndex' trade.Slippage)  							.SetCell(columnShift + 9' rowIndex' trade.Order.Comment)  							.SetCell(columnShift + 10' rowIndex' MathHelper.Round(info.PnL' Decimals))  							.SetCell(columnShift + 11' rowIndex' MathHelper.Round(localInfo.PnL' Decimals))  							.SetCell(columnShift + 12' rowIndex' MathHelper.Round(totalPnL' Decimals))  							.SetCell(columnShift + 13' rowIndex' MathHelper.Round(queue.RealizedPnL' Decimals))  							.SetCell(columnShift + 14' rowIndex' position);    						rowIndex++;  					}    					if (IncludeOrders)  					{  						columnShift += 17;    						worker  							.SetCell(columnShift + 0' 0' LocalizedStrings.Orders)    							.SetCell(columnShift + 0' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  							.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  							.SetCell(columnShift + 2' 1' LocalizedStrings.Str128)  							.SetCell(columnShift + 3' 1' LocalizedStrings.Str1346).SetStyle(columnShift + 3' "HH:mm:ss.fff")  							.SetCell(columnShift + 4' 1' LocalizedStrings.Str1347).SetStyle(columnShift + 4' "HH:mm:ss.fff")  							.SetCell(columnShift + 5' 1' LocalizedStrings.Str1348)  							.SetCell(columnShift + 6' 1' LocalizedStrings.Price).SetStyle(columnShift + 6' typeof(decimal))  							.SetCell(columnShift + 7' 1' LocalizedStrings.Str1323).SetStyle(columnShift + 7' typeof(decimal))  							.SetCell(columnShift + 8' 1' LocalizedStrings.Str1324)  							.SetCell(columnShift + 9' 1' LocalizedStrings.State)  							.SetCell(columnShift + 10' 1' LocalizedStrings.Str1325).SetStyle(columnShift + 10' typeof(decimal))  							.SetCell(columnShift + 11' 1' LocalizedStrings.Volume).SetStyle(columnShift + 11' typeof(decimal))  							.SetCell(columnShift + 12' 1' LocalizedStrings.Type)  							.SetCell(columnShift + 13' 1' LocalizedStrings.Str1326)  							.SetCell(columnShift + 14' 1' LocalizedStrings.Str1327)  							.SetCell(columnShift + 15' 1' LocalizedStrings.Str135);    						worker  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str1329)' null' Colors.Green)  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str238)' null' Colors.Red);    						rowIndex = 2;  						foreach (var order in strategy.Orders.ToArray())  						{  							worker  								.SetCell(columnShift + 0' rowIndex' order.Id)  								.SetCell(columnShift + 1' rowIndex' order.TransactionId)  								.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  								.SetCell(columnShift + 3' rowIndex' Format(order.Time))  								.SetCell(columnShift + 4' rowIndex' Format(order.LastChangeTime))  								.SetCell(columnShift + 5' rowIndex' Format(order.LastChangeTime - order.Time))  								.SetCell(columnShift + 6' rowIndex' order.Price)  								.SetCell(columnShift + 7' rowIndex' MathHelper.Round(order.GetAveragePrice(strategy.Connector)' Decimals))  								.SetCell(columnShift + 8' rowIndex' Format(order.State))  								.SetCell(columnShift + 9' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : LocalizedStrings.Str238))  								.SetCell(columnShift + 10' rowIndex' order.Balance)  								.SetCell(columnShift + 11' rowIndex' order.Volume)  								.SetCell(columnShift + 12' rowIndex' Format(order.Type))  								.SetCell(columnShift + 13' rowIndex' Format(order.LatencyRegistration))  								.SetCell(columnShift + 14' rowIndex' Format(order.LatencyCancellation))  								.SetCell(columnShift + 15' rowIndex' order.Comment);    							rowIndex++;  						}    						var stopOrders = strategy.StopOrders.ToArray();    						if (stopOrders.Length > 0)  						{  							rowIndex += 2;    							worker  								.SetCell(columnShift + 0' rowIndex - 1' LocalizedStrings.Str1351)    								.SetCell(columnShift + 0' rowIndex' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  								.SetCell(columnShift + 1' rowIndex' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  								.SetCell(columnShift + 2' rowIndex' LocalizedStrings.Str128)  								.SetCell(columnShift + 3' rowIndex' LocalizedStrings.Time).SetStyle(columnShift + 3' "HH:mm:ss.fff")  								.SetCell(columnShift + 4' rowIndex' LocalizedStrings.Price).SetStyle(columnShift + 4' typeof(decimal))  								.SetCell(columnShift + 5' rowIndex' LocalizedStrings.Str1324)  								.SetCell(columnShift + 6' rowIndex' LocalizedStrings.State)  								.SetCell(columnShift + 7' rowIndex' LocalizedStrings.Volume).SetStyle(columnShift + 7' typeof(decimal))  								.SetCell(columnShift + 8' rowIndex' LocalizedStrings.Str1326)  								.SetCell(columnShift + 9' rowIndex' LocalizedStrings.Str1327)  								//.SetCell(columnShift + 10' rowIndex' LocalizedStrings.Str1352).SetStyle(columnShift + 9' typeof(long))  								;    							var stopParams = stopOrders[0].Condition.Parameters.Keys.ToArray();    							for (var i = 0; i < stopParams.Length; i++)  								worker.SetCell(columnShift + 11 + i' rowIndex' stopParams[i]);    							foreach (var order in stopOrders)  							{  								worker  									.SetCell(columnShift + 0' rowIndex' order.Id)  									.SetCell(columnShift + 1' rowIndex' order.TransactionId)  									.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  									.SetCell(columnShift + 3' rowIndex' Format(order.Time))  									.SetCell(columnShift + 4' rowIndex' order.Price)  									.SetCell(columnShift + 5' rowIndex' Format(order.State))  									.SetCell(columnShift + 6' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : string.Empty))  									.SetCell(columnShift + 7' rowIndex' order.Volume)  									.SetCell(columnShift + 8' rowIndex' Format(order.LatencyRegistration))  									.SetCell(columnShift + 9' rowIndex' Format(order.LatencyCancellation))  									//.SetCell(columnShift + 10' rowIndex' order.DerivedOrder != null ? (object)order.DerivedOrder.Id : string.Empty)  									;    								for (var i = 0; i < stopParams.Length; i++)  									worker.SetCell(columnShift + 11 + i' rowIndex' order.Condition.Parameters[stopParams[i]] ?? string.Empty);    								rowIndex++;  							}  						}  					}  				}    				worker.Save(FileName' true);  			}
Magic Number,StockSharp.Algo.Strategies.Reporting,ExcelStrategyReport,C:\repos\stocksharp_stocksharp\Algo\Strategies\Reporting\ExcelStrategyReport.cs,Generate,The following statement contains a magic number: using (var worker = hasTemplate ? new ExcelWorker() : new ExcelWorker(Template))  			{  				foreach (var strategy in Strategies)  				{  					if (Template.IsEmpty())  					{  						worker.RenameSheet(strategy.Name);  					}  					else  					{  						if (worker.ContainsSheet(strategy.Name))  							worker.AddSheet(strategy.Name);  					}    					worker  						.SetCell(0' 0' LocalizedStrings.Str1331)    						.SetCell(0' 1' LocalizedStrings.Security + ":")  						.SetCell(1' 1' strategy.Security != null ? strategy.Security.Id : string.Empty)    						.SetCell(0' 2' LocalizedStrings.Portfolio + ":")  						.SetCell(1' 2' strategy.Portfolio != null ? strategy.Portfolio.Name : string.Empty)    						.SetCell(0' 3' LocalizedStrings.Str1334)  						.SetCell(1' 3' Format(strategy.TotalWorkingTime))    						.SetCell(0' 4' LocalizedStrings.Str1335)  						//.SetCell(1' 4' FormatTime(base.Strategy.TotalCPUTime))    						.SetCell(0' 5' LocalizedStrings.Str862 + ":")  						.SetCell(1' 5' strategy.Position)    						.SetCell(0' 6' LocalizedStrings.PnL + ":")  						.SetCell(1' 6' strategy.PnL)    						.SetCell(0' 7' LocalizedStrings.Str159 + ":")  						.SetCell(1' 7' strategy.Commission)    						.SetCell(0' 8' LocalizedStrings.Str163 + ":")  						.SetCell(1' 8' strategy.Slippage)    						.SetCell(0' 9' LocalizedStrings.Str161 + ":")  						.SetCell(1' 9' Format(strategy.Latency));    					var rowIndex = 11;    					foreach (var parameter in strategy.StatisticManager.Parameters.SyncGet(c => c.ToArray()))  					{  						var value = parameter.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' parameter.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					rowIndex += 2;  					worker.SetCell(0' rowIndex' LocalizedStrings.Str1340);  					rowIndex++;    					foreach (var strategyParam in strategy.Parameters.CachedValues)  					{  						var value = strategyParam.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' strategyParam.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					//rowIndex += 2;  					//worker.SetCell(0' rowIndex' "Комиссия по типам:");  					//rowIndex++;    					//foreach (var group in Strategy.CommissionManager.Rules.SyncGet(c => c.ToArray()).GroupBy(c => c.GetType().GetDisplayName()))  					//{  					//	var commission = group.Sum(r => r.Commission);    					//	if (commission == 0)  					//		continue;    					//	worker  					//		.SetCell(0' rowIndex' group.Key)  					//		.SetCell(1' rowIndex' commission);    					//	rowIndex++;  					//}    					var columnShift = 3;    					worker  						.SetCell(columnShift + 0' 0' LocalizedStrings.Str985)    						.SetCell(columnShift + 0' 1' LocalizedStrings.Str1192).SetStyle(columnShift + 0' typeof(long))  						.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  						.SetCell(columnShift + 2' 1' LocalizedStrings.Time).SetStyle(columnShift + 2' "HH:mm:ss.fff")  						.SetCell(columnShift + 3' 1' LocalizedStrings.Price).SetStyle(columnShift + 3' typeof(decimal))  						.SetCell(columnShift + 4' 1' LocalizedStrings.Str1341).SetStyle(columnShift + 4' typeof(decimal))  						.SetCell(columnShift + 5' 1' LocalizedStrings.Volume).SetStyle(columnShift + 5' typeof(decimal))  						.SetCell(columnShift + 6' 1' LocalizedStrings.Str128)  						.SetCell(columnShift + 7' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 7' typeof(long))  						.SetCell(columnShift + 8' 1' LocalizedStrings.Str163).SetStyle(columnShift + 8' typeof(decimal))  						.SetCell(columnShift + 9' 1' LocalizedStrings.Str135)  						.SetCell(columnShift + 10' 1' LocalizedStrings.Str1342).SetStyle(columnShift + 11' typeof(decimal))  						.SetCell(columnShift + 11' 1' LocalizedStrings.Str1343).SetStyle(columnShift + 12' typeof(decimal))  						.SetCell(columnShift + 12' 1' LocalizedStrings.Str1344).SetStyle(columnShift + 13' typeof(decimal))  						.SetCell(columnShift + 13' 1' LocalizedStrings.Str1345).SetStyle(columnShift + 14' typeof(decimal))  						.SetCell(columnShift + 14' 1' LocalizedStrings.Str862).SetStyle(columnShift + 15' typeof(decimal));    					worker  						.SetConditionalFormatting(columnShift + 10' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 11' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 12' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 13' ComparisonOperator.Less' "0"' null' Colors.Red);    					var totalPnL = 0m;  					var position = 0m;    					var queues = new Dictionary<Security' PnLQueue>();    					rowIndex = 2;  					foreach (var trade in strategy.MyTrades.ToArray())  					{  						var info = strategy.PnLManager.ProcessMessage(trade.ToMessage());    						totalPnL += info.PnL;  						position += trade.GetPosition() ?? 0;    						var queue = queues.SafeAdd(trade.Trade.Security' key => new PnLQueue(key.ToSecurityId()));    						var localInfo = queue.Process(trade.ToMessage());    						worker  							.SetCell(columnShift + 0' rowIndex' trade.Trade.Id)  							.SetCell(columnShift + 1' rowIndex' trade.Order.TransactionId)  							.SetCell(columnShift + 2' rowIndex' Format(trade.Trade.Time))  							.SetCell(columnShift + 3' rowIndex' trade.Trade.Price)  							.SetCell(columnShift + 4' rowIndex' trade.Order.Price)  							.SetCell(columnShift + 5' rowIndex' trade.Trade.Volume)  							.SetCell(columnShift + 6' rowIndex' Format(trade.Order.Direction))  							.SetCell(columnShift + 7' rowIndex' trade.Order.Id)  							.SetCell(columnShift + 8' rowIndex' trade.Slippage)  							.SetCell(columnShift + 9' rowIndex' trade.Order.Comment)  							.SetCell(columnShift + 10' rowIndex' MathHelper.Round(info.PnL' Decimals))  							.SetCell(columnShift + 11' rowIndex' MathHelper.Round(localInfo.PnL' Decimals))  							.SetCell(columnShift + 12' rowIndex' MathHelper.Round(totalPnL' Decimals))  							.SetCell(columnShift + 13' rowIndex' MathHelper.Round(queue.RealizedPnL' Decimals))  							.SetCell(columnShift + 14' rowIndex' position);    						rowIndex++;  					}    					if (IncludeOrders)  					{  						columnShift += 17;    						worker  							.SetCell(columnShift + 0' 0' LocalizedStrings.Orders)    							.SetCell(columnShift + 0' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  							.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  							.SetCell(columnShift + 2' 1' LocalizedStrings.Str128)  							.SetCell(columnShift + 3' 1' LocalizedStrings.Str1346).SetStyle(columnShift + 3' "HH:mm:ss.fff")  							.SetCell(columnShift + 4' 1' LocalizedStrings.Str1347).SetStyle(columnShift + 4' "HH:mm:ss.fff")  							.SetCell(columnShift + 5' 1' LocalizedStrings.Str1348)  							.SetCell(columnShift + 6' 1' LocalizedStrings.Price).SetStyle(columnShift + 6' typeof(decimal))  							.SetCell(columnShift + 7' 1' LocalizedStrings.Str1323).SetStyle(columnShift + 7' typeof(decimal))  							.SetCell(columnShift + 8' 1' LocalizedStrings.Str1324)  							.SetCell(columnShift + 9' 1' LocalizedStrings.State)  							.SetCell(columnShift + 10' 1' LocalizedStrings.Str1325).SetStyle(columnShift + 10' typeof(decimal))  							.SetCell(columnShift + 11' 1' LocalizedStrings.Volume).SetStyle(columnShift + 11' typeof(decimal))  							.SetCell(columnShift + 12' 1' LocalizedStrings.Type)  							.SetCell(columnShift + 13' 1' LocalizedStrings.Str1326)  							.SetCell(columnShift + 14' 1' LocalizedStrings.Str1327)  							.SetCell(columnShift + 15' 1' LocalizedStrings.Str135);    						worker  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str1329)' null' Colors.Green)  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str238)' null' Colors.Red);    						rowIndex = 2;  						foreach (var order in strategy.Orders.ToArray())  						{  							worker  								.SetCell(columnShift + 0' rowIndex' order.Id)  								.SetCell(columnShift + 1' rowIndex' order.TransactionId)  								.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  								.SetCell(columnShift + 3' rowIndex' Format(order.Time))  								.SetCell(columnShift + 4' rowIndex' Format(order.LastChangeTime))  								.SetCell(columnShift + 5' rowIndex' Format(order.LastChangeTime - order.Time))  								.SetCell(columnShift + 6' rowIndex' order.Price)  								.SetCell(columnShift + 7' rowIndex' MathHelper.Round(order.GetAveragePrice(strategy.Connector)' Decimals))  								.SetCell(columnShift + 8' rowIndex' Format(order.State))  								.SetCell(columnShift + 9' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : LocalizedStrings.Str238))  								.SetCell(columnShift + 10' rowIndex' order.Balance)  								.SetCell(columnShift + 11' rowIndex' order.Volume)  								.SetCell(columnShift + 12' rowIndex' Format(order.Type))  								.SetCell(columnShift + 13' rowIndex' Format(order.LatencyRegistration))  								.SetCell(columnShift + 14' rowIndex' Format(order.LatencyCancellation))  								.SetCell(columnShift + 15' rowIndex' order.Comment);    							rowIndex++;  						}    						var stopOrders = strategy.StopOrders.ToArray();    						if (stopOrders.Length > 0)  						{  							rowIndex += 2;    							worker  								.SetCell(columnShift + 0' rowIndex - 1' LocalizedStrings.Str1351)    								.SetCell(columnShift + 0' rowIndex' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  								.SetCell(columnShift + 1' rowIndex' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  								.SetCell(columnShift + 2' rowIndex' LocalizedStrings.Str128)  								.SetCell(columnShift + 3' rowIndex' LocalizedStrings.Time).SetStyle(columnShift + 3' "HH:mm:ss.fff")  								.SetCell(columnShift + 4' rowIndex' LocalizedStrings.Price).SetStyle(columnShift + 4' typeof(decimal))  								.SetCell(columnShift + 5' rowIndex' LocalizedStrings.Str1324)  								.SetCell(columnShift + 6' rowIndex' LocalizedStrings.State)  								.SetCell(columnShift + 7' rowIndex' LocalizedStrings.Volume).SetStyle(columnShift + 7' typeof(decimal))  								.SetCell(columnShift + 8' rowIndex' LocalizedStrings.Str1326)  								.SetCell(columnShift + 9' rowIndex' LocalizedStrings.Str1327)  								//.SetCell(columnShift + 10' rowIndex' LocalizedStrings.Str1352).SetStyle(columnShift + 9' typeof(long))  								;    							var stopParams = stopOrders[0].Condition.Parameters.Keys.ToArray();    							for (var i = 0; i < stopParams.Length; i++)  								worker.SetCell(columnShift + 11 + i' rowIndex' stopParams[i]);    							foreach (var order in stopOrders)  							{  								worker  									.SetCell(columnShift + 0' rowIndex' order.Id)  									.SetCell(columnShift + 1' rowIndex' order.TransactionId)  									.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  									.SetCell(columnShift + 3' rowIndex' Format(order.Time))  									.SetCell(columnShift + 4' rowIndex' order.Price)  									.SetCell(columnShift + 5' rowIndex' Format(order.State))  									.SetCell(columnShift + 6' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : string.Empty))  									.SetCell(columnShift + 7' rowIndex' order.Volume)  									.SetCell(columnShift + 8' rowIndex' Format(order.LatencyRegistration))  									.SetCell(columnShift + 9' rowIndex' Format(order.LatencyCancellation))  									//.SetCell(columnShift + 10' rowIndex' order.DerivedOrder != null ? (object)order.DerivedOrder.Id : string.Empty)  									;    								for (var i = 0; i < stopParams.Length; i++)  									worker.SetCell(columnShift + 11 + i' rowIndex' order.Condition.Parameters[stopParams[i]] ?? string.Empty);    								rowIndex++;  							}  						}  					}  				}    				worker.Save(FileName' true);  			}
Magic Number,StockSharp.Algo.Strategies.Reporting,ExcelStrategyReport,C:\repos\stocksharp_stocksharp\Algo\Strategies\Reporting\ExcelStrategyReport.cs,Generate,The following statement contains a magic number: using (var worker = hasTemplate ? new ExcelWorker() : new ExcelWorker(Template))  			{  				foreach (var strategy in Strategies)  				{  					if (Template.IsEmpty())  					{  						worker.RenameSheet(strategy.Name);  					}  					else  					{  						if (worker.ContainsSheet(strategy.Name))  							worker.AddSheet(strategy.Name);  					}    					worker  						.SetCell(0' 0' LocalizedStrings.Str1331)    						.SetCell(0' 1' LocalizedStrings.Security + ":")  						.SetCell(1' 1' strategy.Security != null ? strategy.Security.Id : string.Empty)    						.SetCell(0' 2' LocalizedStrings.Portfolio + ":")  						.SetCell(1' 2' strategy.Portfolio != null ? strategy.Portfolio.Name : string.Empty)    						.SetCell(0' 3' LocalizedStrings.Str1334)  						.SetCell(1' 3' Format(strategy.TotalWorkingTime))    						.SetCell(0' 4' LocalizedStrings.Str1335)  						//.SetCell(1' 4' FormatTime(base.Strategy.TotalCPUTime))    						.SetCell(0' 5' LocalizedStrings.Str862 + ":")  						.SetCell(1' 5' strategy.Position)    						.SetCell(0' 6' LocalizedStrings.PnL + ":")  						.SetCell(1' 6' strategy.PnL)    						.SetCell(0' 7' LocalizedStrings.Str159 + ":")  						.SetCell(1' 7' strategy.Commission)    						.SetCell(0' 8' LocalizedStrings.Str163 + ":")  						.SetCell(1' 8' strategy.Slippage)    						.SetCell(0' 9' LocalizedStrings.Str161 + ":")  						.SetCell(1' 9' Format(strategy.Latency));    					var rowIndex = 11;    					foreach (var parameter in strategy.StatisticManager.Parameters.SyncGet(c => c.ToArray()))  					{  						var value = parameter.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' parameter.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					rowIndex += 2;  					worker.SetCell(0' rowIndex' LocalizedStrings.Str1340);  					rowIndex++;    					foreach (var strategyParam in strategy.Parameters.CachedValues)  					{  						var value = strategyParam.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' strategyParam.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					//rowIndex += 2;  					//worker.SetCell(0' rowIndex' "Комиссия по типам:");  					//rowIndex++;    					//foreach (var group in Strategy.CommissionManager.Rules.SyncGet(c => c.ToArray()).GroupBy(c => c.GetType().GetDisplayName()))  					//{  					//	var commission = group.Sum(r => r.Commission);    					//	if (commission == 0)  					//		continue;    					//	worker  					//		.SetCell(0' rowIndex' group.Key)  					//		.SetCell(1' rowIndex' commission);    					//	rowIndex++;  					//}    					var columnShift = 3;    					worker  						.SetCell(columnShift + 0' 0' LocalizedStrings.Str985)    						.SetCell(columnShift + 0' 1' LocalizedStrings.Str1192).SetStyle(columnShift + 0' typeof(long))  						.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  						.SetCell(columnShift + 2' 1' LocalizedStrings.Time).SetStyle(columnShift + 2' "HH:mm:ss.fff")  						.SetCell(columnShift + 3' 1' LocalizedStrings.Price).SetStyle(columnShift + 3' typeof(decimal))  						.SetCell(columnShift + 4' 1' LocalizedStrings.Str1341).SetStyle(columnShift + 4' typeof(decimal))  						.SetCell(columnShift + 5' 1' LocalizedStrings.Volume).SetStyle(columnShift + 5' typeof(decimal))  						.SetCell(columnShift + 6' 1' LocalizedStrings.Str128)  						.SetCell(columnShift + 7' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 7' typeof(long))  						.SetCell(columnShift + 8' 1' LocalizedStrings.Str163).SetStyle(columnShift + 8' typeof(decimal))  						.SetCell(columnShift + 9' 1' LocalizedStrings.Str135)  						.SetCell(columnShift + 10' 1' LocalizedStrings.Str1342).SetStyle(columnShift + 11' typeof(decimal))  						.SetCell(columnShift + 11' 1' LocalizedStrings.Str1343).SetStyle(columnShift + 12' typeof(decimal))  						.SetCell(columnShift + 12' 1' LocalizedStrings.Str1344).SetStyle(columnShift + 13' typeof(decimal))  						.SetCell(columnShift + 13' 1' LocalizedStrings.Str1345).SetStyle(columnShift + 14' typeof(decimal))  						.SetCell(columnShift + 14' 1' LocalizedStrings.Str862).SetStyle(columnShift + 15' typeof(decimal));    					worker  						.SetConditionalFormatting(columnShift + 10' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 11' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 12' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 13' ComparisonOperator.Less' "0"' null' Colors.Red);    					var totalPnL = 0m;  					var position = 0m;    					var queues = new Dictionary<Security' PnLQueue>();    					rowIndex = 2;  					foreach (var trade in strategy.MyTrades.ToArray())  					{  						var info = strategy.PnLManager.ProcessMessage(trade.ToMessage());    						totalPnL += info.PnL;  						position += trade.GetPosition() ?? 0;    						var queue = queues.SafeAdd(trade.Trade.Security' key => new PnLQueue(key.ToSecurityId()));    						var localInfo = queue.Process(trade.ToMessage());    						worker  							.SetCell(columnShift + 0' rowIndex' trade.Trade.Id)  							.SetCell(columnShift + 1' rowIndex' trade.Order.TransactionId)  							.SetCell(columnShift + 2' rowIndex' Format(trade.Trade.Time))  							.SetCell(columnShift + 3' rowIndex' trade.Trade.Price)  							.SetCell(columnShift + 4' rowIndex' trade.Order.Price)  							.SetCell(columnShift + 5' rowIndex' trade.Trade.Volume)  							.SetCell(columnShift + 6' rowIndex' Format(trade.Order.Direction))  							.SetCell(columnShift + 7' rowIndex' trade.Order.Id)  							.SetCell(columnShift + 8' rowIndex' trade.Slippage)  							.SetCell(columnShift + 9' rowIndex' trade.Order.Comment)  							.SetCell(columnShift + 10' rowIndex' MathHelper.Round(info.PnL' Decimals))  							.SetCell(columnShift + 11' rowIndex' MathHelper.Round(localInfo.PnL' Decimals))  							.SetCell(columnShift + 12' rowIndex' MathHelper.Round(totalPnL' Decimals))  							.SetCell(columnShift + 13' rowIndex' MathHelper.Round(queue.RealizedPnL' Decimals))  							.SetCell(columnShift + 14' rowIndex' position);    						rowIndex++;  					}    					if (IncludeOrders)  					{  						columnShift += 17;    						worker  							.SetCell(columnShift + 0' 0' LocalizedStrings.Orders)    							.SetCell(columnShift + 0' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  							.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  							.SetCell(columnShift + 2' 1' LocalizedStrings.Str128)  							.SetCell(columnShift + 3' 1' LocalizedStrings.Str1346).SetStyle(columnShift + 3' "HH:mm:ss.fff")  							.SetCell(columnShift + 4' 1' LocalizedStrings.Str1347).SetStyle(columnShift + 4' "HH:mm:ss.fff")  							.SetCell(columnShift + 5' 1' LocalizedStrings.Str1348)  							.SetCell(columnShift + 6' 1' LocalizedStrings.Price).SetStyle(columnShift + 6' typeof(decimal))  							.SetCell(columnShift + 7' 1' LocalizedStrings.Str1323).SetStyle(columnShift + 7' typeof(decimal))  							.SetCell(columnShift + 8' 1' LocalizedStrings.Str1324)  							.SetCell(columnShift + 9' 1' LocalizedStrings.State)  							.SetCell(columnShift + 10' 1' LocalizedStrings.Str1325).SetStyle(columnShift + 10' typeof(decimal))  							.SetCell(columnShift + 11' 1' LocalizedStrings.Volume).SetStyle(columnShift + 11' typeof(decimal))  							.SetCell(columnShift + 12' 1' LocalizedStrings.Type)  							.SetCell(columnShift + 13' 1' LocalizedStrings.Str1326)  							.SetCell(columnShift + 14' 1' LocalizedStrings.Str1327)  							.SetCell(columnShift + 15' 1' LocalizedStrings.Str135);    						worker  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str1329)' null' Colors.Green)  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str238)' null' Colors.Red);    						rowIndex = 2;  						foreach (var order in strategy.Orders.ToArray())  						{  							worker  								.SetCell(columnShift + 0' rowIndex' order.Id)  								.SetCell(columnShift + 1' rowIndex' order.TransactionId)  								.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  								.SetCell(columnShift + 3' rowIndex' Format(order.Time))  								.SetCell(columnShift + 4' rowIndex' Format(order.LastChangeTime))  								.SetCell(columnShift + 5' rowIndex' Format(order.LastChangeTime - order.Time))  								.SetCell(columnShift + 6' rowIndex' order.Price)  								.SetCell(columnShift + 7' rowIndex' MathHelper.Round(order.GetAveragePrice(strategy.Connector)' Decimals))  								.SetCell(columnShift + 8' rowIndex' Format(order.State))  								.SetCell(columnShift + 9' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : LocalizedStrings.Str238))  								.SetCell(columnShift + 10' rowIndex' order.Balance)  								.SetCell(columnShift + 11' rowIndex' order.Volume)  								.SetCell(columnShift + 12' rowIndex' Format(order.Type))  								.SetCell(columnShift + 13' rowIndex' Format(order.LatencyRegistration))  								.SetCell(columnShift + 14' rowIndex' Format(order.LatencyCancellation))  								.SetCell(columnShift + 15' rowIndex' order.Comment);    							rowIndex++;  						}    						var stopOrders = strategy.StopOrders.ToArray();    						if (stopOrders.Length > 0)  						{  							rowIndex += 2;    							worker  								.SetCell(columnShift + 0' rowIndex - 1' LocalizedStrings.Str1351)    								.SetCell(columnShift + 0' rowIndex' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  								.SetCell(columnShift + 1' rowIndex' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  								.SetCell(columnShift + 2' rowIndex' LocalizedStrings.Str128)  								.SetCell(columnShift + 3' rowIndex' LocalizedStrings.Time).SetStyle(columnShift + 3' "HH:mm:ss.fff")  								.SetCell(columnShift + 4' rowIndex' LocalizedStrings.Price).SetStyle(columnShift + 4' typeof(decimal))  								.SetCell(columnShift + 5' rowIndex' LocalizedStrings.Str1324)  								.SetCell(columnShift + 6' rowIndex' LocalizedStrings.State)  								.SetCell(columnShift + 7' rowIndex' LocalizedStrings.Volume).SetStyle(columnShift + 7' typeof(decimal))  								.SetCell(columnShift + 8' rowIndex' LocalizedStrings.Str1326)  								.SetCell(columnShift + 9' rowIndex' LocalizedStrings.Str1327)  								//.SetCell(columnShift + 10' rowIndex' LocalizedStrings.Str1352).SetStyle(columnShift + 9' typeof(long))  								;    							var stopParams = stopOrders[0].Condition.Parameters.Keys.ToArray();    							for (var i = 0; i < stopParams.Length; i++)  								worker.SetCell(columnShift + 11 + i' rowIndex' stopParams[i]);    							foreach (var order in stopOrders)  							{  								worker  									.SetCell(columnShift + 0' rowIndex' order.Id)  									.SetCell(columnShift + 1' rowIndex' order.TransactionId)  									.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  									.SetCell(columnShift + 3' rowIndex' Format(order.Time))  									.SetCell(columnShift + 4' rowIndex' order.Price)  									.SetCell(columnShift + 5' rowIndex' Format(order.State))  									.SetCell(columnShift + 6' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : string.Empty))  									.SetCell(columnShift + 7' rowIndex' order.Volume)  									.SetCell(columnShift + 8' rowIndex' Format(order.LatencyRegistration))  									.SetCell(columnShift + 9' rowIndex' Format(order.LatencyCancellation))  									//.SetCell(columnShift + 10' rowIndex' order.DerivedOrder != null ? (object)order.DerivedOrder.Id : string.Empty)  									;    								for (var i = 0; i < stopParams.Length; i++)  									worker.SetCell(columnShift + 11 + i' rowIndex' order.Condition.Parameters[stopParams[i]] ?? string.Empty);    								rowIndex++;  							}  						}  					}  				}    				worker.Save(FileName' true);  			}
Magic Number,StockSharp.Algo.Strategies.Reporting,ExcelStrategyReport,C:\repos\stocksharp_stocksharp\Algo\Strategies\Reporting\ExcelStrategyReport.cs,Generate,The following statement contains a magic number: using (var worker = hasTemplate ? new ExcelWorker() : new ExcelWorker(Template))  			{  				foreach (var strategy in Strategies)  				{  					if (Template.IsEmpty())  					{  						worker.RenameSheet(strategy.Name);  					}  					else  					{  						if (worker.ContainsSheet(strategy.Name))  							worker.AddSheet(strategy.Name);  					}    					worker  						.SetCell(0' 0' LocalizedStrings.Str1331)    						.SetCell(0' 1' LocalizedStrings.Security + ":")  						.SetCell(1' 1' strategy.Security != null ? strategy.Security.Id : string.Empty)    						.SetCell(0' 2' LocalizedStrings.Portfolio + ":")  						.SetCell(1' 2' strategy.Portfolio != null ? strategy.Portfolio.Name : string.Empty)    						.SetCell(0' 3' LocalizedStrings.Str1334)  						.SetCell(1' 3' Format(strategy.TotalWorkingTime))    						.SetCell(0' 4' LocalizedStrings.Str1335)  						//.SetCell(1' 4' FormatTime(base.Strategy.TotalCPUTime))    						.SetCell(0' 5' LocalizedStrings.Str862 + ":")  						.SetCell(1' 5' strategy.Position)    						.SetCell(0' 6' LocalizedStrings.PnL + ":")  						.SetCell(1' 6' strategy.PnL)    						.SetCell(0' 7' LocalizedStrings.Str159 + ":")  						.SetCell(1' 7' strategy.Commission)    						.SetCell(0' 8' LocalizedStrings.Str163 + ":")  						.SetCell(1' 8' strategy.Slippage)    						.SetCell(0' 9' LocalizedStrings.Str161 + ":")  						.SetCell(1' 9' Format(strategy.Latency));    					var rowIndex = 11;    					foreach (var parameter in strategy.StatisticManager.Parameters.SyncGet(c => c.ToArray()))  					{  						var value = parameter.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' parameter.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					rowIndex += 2;  					worker.SetCell(0' rowIndex' LocalizedStrings.Str1340);  					rowIndex++;    					foreach (var strategyParam in strategy.Parameters.CachedValues)  					{  						var value = strategyParam.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' strategyParam.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					//rowIndex += 2;  					//worker.SetCell(0' rowIndex' "Комиссия по типам:");  					//rowIndex++;    					//foreach (var group in Strategy.CommissionManager.Rules.SyncGet(c => c.ToArray()).GroupBy(c => c.GetType().GetDisplayName()))  					//{  					//	var commission = group.Sum(r => r.Commission);    					//	if (commission == 0)  					//		continue;    					//	worker  					//		.SetCell(0' rowIndex' group.Key)  					//		.SetCell(1' rowIndex' commission);    					//	rowIndex++;  					//}    					var columnShift = 3;    					worker  						.SetCell(columnShift + 0' 0' LocalizedStrings.Str985)    						.SetCell(columnShift + 0' 1' LocalizedStrings.Str1192).SetStyle(columnShift + 0' typeof(long))  						.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  						.SetCell(columnShift + 2' 1' LocalizedStrings.Time).SetStyle(columnShift + 2' "HH:mm:ss.fff")  						.SetCell(columnShift + 3' 1' LocalizedStrings.Price).SetStyle(columnShift + 3' typeof(decimal))  						.SetCell(columnShift + 4' 1' LocalizedStrings.Str1341).SetStyle(columnShift + 4' typeof(decimal))  						.SetCell(columnShift + 5' 1' LocalizedStrings.Volume).SetStyle(columnShift + 5' typeof(decimal))  						.SetCell(columnShift + 6' 1' LocalizedStrings.Str128)  						.SetCell(columnShift + 7' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 7' typeof(long))  						.SetCell(columnShift + 8' 1' LocalizedStrings.Str163).SetStyle(columnShift + 8' typeof(decimal))  						.SetCell(columnShift + 9' 1' LocalizedStrings.Str135)  						.SetCell(columnShift + 10' 1' LocalizedStrings.Str1342).SetStyle(columnShift + 11' typeof(decimal))  						.SetCell(columnShift + 11' 1' LocalizedStrings.Str1343).SetStyle(columnShift + 12' typeof(decimal))  						.SetCell(columnShift + 12' 1' LocalizedStrings.Str1344).SetStyle(columnShift + 13' typeof(decimal))  						.SetCell(columnShift + 13' 1' LocalizedStrings.Str1345).SetStyle(columnShift + 14' typeof(decimal))  						.SetCell(columnShift + 14' 1' LocalizedStrings.Str862).SetStyle(columnShift + 15' typeof(decimal));    					worker  						.SetConditionalFormatting(columnShift + 10' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 11' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 12' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 13' ComparisonOperator.Less' "0"' null' Colors.Red);    					var totalPnL = 0m;  					var position = 0m;    					var queues = new Dictionary<Security' PnLQueue>();    					rowIndex = 2;  					foreach (var trade in strategy.MyTrades.ToArray())  					{  						var info = strategy.PnLManager.ProcessMessage(trade.ToMessage());    						totalPnL += info.PnL;  						position += trade.GetPosition() ?? 0;    						var queue = queues.SafeAdd(trade.Trade.Security' key => new PnLQueue(key.ToSecurityId()));    						var localInfo = queue.Process(trade.ToMessage());    						worker  							.SetCell(columnShift + 0' rowIndex' trade.Trade.Id)  							.SetCell(columnShift + 1' rowIndex' trade.Order.TransactionId)  							.SetCell(columnShift + 2' rowIndex' Format(trade.Trade.Time))  							.SetCell(columnShift + 3' rowIndex' trade.Trade.Price)  							.SetCell(columnShift + 4' rowIndex' trade.Order.Price)  							.SetCell(columnShift + 5' rowIndex' trade.Trade.Volume)  							.SetCell(columnShift + 6' rowIndex' Format(trade.Order.Direction))  							.SetCell(columnShift + 7' rowIndex' trade.Order.Id)  							.SetCell(columnShift + 8' rowIndex' trade.Slippage)  							.SetCell(columnShift + 9' rowIndex' trade.Order.Comment)  							.SetCell(columnShift + 10' rowIndex' MathHelper.Round(info.PnL' Decimals))  							.SetCell(columnShift + 11' rowIndex' MathHelper.Round(localInfo.PnL' Decimals))  							.SetCell(columnShift + 12' rowIndex' MathHelper.Round(totalPnL' Decimals))  							.SetCell(columnShift + 13' rowIndex' MathHelper.Round(queue.RealizedPnL' Decimals))  							.SetCell(columnShift + 14' rowIndex' position);    						rowIndex++;  					}    					if (IncludeOrders)  					{  						columnShift += 17;    						worker  							.SetCell(columnShift + 0' 0' LocalizedStrings.Orders)    							.SetCell(columnShift + 0' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  							.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  							.SetCell(columnShift + 2' 1' LocalizedStrings.Str128)  							.SetCell(columnShift + 3' 1' LocalizedStrings.Str1346).SetStyle(columnShift + 3' "HH:mm:ss.fff")  							.SetCell(columnShift + 4' 1' LocalizedStrings.Str1347).SetStyle(columnShift + 4' "HH:mm:ss.fff")  							.SetCell(columnShift + 5' 1' LocalizedStrings.Str1348)  							.SetCell(columnShift + 6' 1' LocalizedStrings.Price).SetStyle(columnShift + 6' typeof(decimal))  							.SetCell(columnShift + 7' 1' LocalizedStrings.Str1323).SetStyle(columnShift + 7' typeof(decimal))  							.SetCell(columnShift + 8' 1' LocalizedStrings.Str1324)  							.SetCell(columnShift + 9' 1' LocalizedStrings.State)  							.SetCell(columnShift + 10' 1' LocalizedStrings.Str1325).SetStyle(columnShift + 10' typeof(decimal))  							.SetCell(columnShift + 11' 1' LocalizedStrings.Volume).SetStyle(columnShift + 11' typeof(decimal))  							.SetCell(columnShift + 12' 1' LocalizedStrings.Type)  							.SetCell(columnShift + 13' 1' LocalizedStrings.Str1326)  							.SetCell(columnShift + 14' 1' LocalizedStrings.Str1327)  							.SetCell(columnShift + 15' 1' LocalizedStrings.Str135);    						worker  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str1329)' null' Colors.Green)  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str238)' null' Colors.Red);    						rowIndex = 2;  						foreach (var order in strategy.Orders.ToArray())  						{  							worker  								.SetCell(columnShift + 0' rowIndex' order.Id)  								.SetCell(columnShift + 1' rowIndex' order.TransactionId)  								.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  								.SetCell(columnShift + 3' rowIndex' Format(order.Time))  								.SetCell(columnShift + 4' rowIndex' Format(order.LastChangeTime))  								.SetCell(columnShift + 5' rowIndex' Format(order.LastChangeTime - order.Time))  								.SetCell(columnShift + 6' rowIndex' order.Price)  								.SetCell(columnShift + 7' rowIndex' MathHelper.Round(order.GetAveragePrice(strategy.Connector)' Decimals))  								.SetCell(columnShift + 8' rowIndex' Format(order.State))  								.SetCell(columnShift + 9' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : LocalizedStrings.Str238))  								.SetCell(columnShift + 10' rowIndex' order.Balance)  								.SetCell(columnShift + 11' rowIndex' order.Volume)  								.SetCell(columnShift + 12' rowIndex' Format(order.Type))  								.SetCell(columnShift + 13' rowIndex' Format(order.LatencyRegistration))  								.SetCell(columnShift + 14' rowIndex' Format(order.LatencyCancellation))  								.SetCell(columnShift + 15' rowIndex' order.Comment);    							rowIndex++;  						}    						var stopOrders = strategy.StopOrders.ToArray();    						if (stopOrders.Length > 0)  						{  							rowIndex += 2;    							worker  								.SetCell(columnShift + 0' rowIndex - 1' LocalizedStrings.Str1351)    								.SetCell(columnShift + 0' rowIndex' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  								.SetCell(columnShift + 1' rowIndex' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  								.SetCell(columnShift + 2' rowIndex' LocalizedStrings.Str128)  								.SetCell(columnShift + 3' rowIndex' LocalizedStrings.Time).SetStyle(columnShift + 3' "HH:mm:ss.fff")  								.SetCell(columnShift + 4' rowIndex' LocalizedStrings.Price).SetStyle(columnShift + 4' typeof(decimal))  								.SetCell(columnShift + 5' rowIndex' LocalizedStrings.Str1324)  								.SetCell(columnShift + 6' rowIndex' LocalizedStrings.State)  								.SetCell(columnShift + 7' rowIndex' LocalizedStrings.Volume).SetStyle(columnShift + 7' typeof(decimal))  								.SetCell(columnShift + 8' rowIndex' LocalizedStrings.Str1326)  								.SetCell(columnShift + 9' rowIndex' LocalizedStrings.Str1327)  								//.SetCell(columnShift + 10' rowIndex' LocalizedStrings.Str1352).SetStyle(columnShift + 9' typeof(long))  								;    							var stopParams = stopOrders[0].Condition.Parameters.Keys.ToArray();    							for (var i = 0; i < stopParams.Length; i++)  								worker.SetCell(columnShift + 11 + i' rowIndex' stopParams[i]);    							foreach (var order in stopOrders)  							{  								worker  									.SetCell(columnShift + 0' rowIndex' order.Id)  									.SetCell(columnShift + 1' rowIndex' order.TransactionId)  									.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  									.SetCell(columnShift + 3' rowIndex' Format(order.Time))  									.SetCell(columnShift + 4' rowIndex' order.Price)  									.SetCell(columnShift + 5' rowIndex' Format(order.State))  									.SetCell(columnShift + 6' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : string.Empty))  									.SetCell(columnShift + 7' rowIndex' order.Volume)  									.SetCell(columnShift + 8' rowIndex' Format(order.LatencyRegistration))  									.SetCell(columnShift + 9' rowIndex' Format(order.LatencyCancellation))  									//.SetCell(columnShift + 10' rowIndex' order.DerivedOrder != null ? (object)order.DerivedOrder.Id : string.Empty)  									;    								for (var i = 0; i < stopParams.Length; i++)  									worker.SetCell(columnShift + 11 + i' rowIndex' order.Condition.Parameters[stopParams[i]] ?? string.Empty);    								rowIndex++;  							}  						}  					}  				}    				worker.Save(FileName' true);  			}
Magic Number,StockSharp.Algo.Strategies.Reporting,ExcelStrategyReport,C:\repos\stocksharp_stocksharp\Algo\Strategies\Reporting\ExcelStrategyReport.cs,Generate,The following statement contains a magic number: using (var worker = hasTemplate ? new ExcelWorker() : new ExcelWorker(Template))  			{  				foreach (var strategy in Strategies)  				{  					if (Template.IsEmpty())  					{  						worker.RenameSheet(strategy.Name);  					}  					else  					{  						if (worker.ContainsSheet(strategy.Name))  							worker.AddSheet(strategy.Name);  					}    					worker  						.SetCell(0' 0' LocalizedStrings.Str1331)    						.SetCell(0' 1' LocalizedStrings.Security + ":")  						.SetCell(1' 1' strategy.Security != null ? strategy.Security.Id : string.Empty)    						.SetCell(0' 2' LocalizedStrings.Portfolio + ":")  						.SetCell(1' 2' strategy.Portfolio != null ? strategy.Portfolio.Name : string.Empty)    						.SetCell(0' 3' LocalizedStrings.Str1334)  						.SetCell(1' 3' Format(strategy.TotalWorkingTime))    						.SetCell(0' 4' LocalizedStrings.Str1335)  						//.SetCell(1' 4' FormatTime(base.Strategy.TotalCPUTime))    						.SetCell(0' 5' LocalizedStrings.Str862 + ":")  						.SetCell(1' 5' strategy.Position)    						.SetCell(0' 6' LocalizedStrings.PnL + ":")  						.SetCell(1' 6' strategy.PnL)    						.SetCell(0' 7' LocalizedStrings.Str159 + ":")  						.SetCell(1' 7' strategy.Commission)    						.SetCell(0' 8' LocalizedStrings.Str163 + ":")  						.SetCell(1' 8' strategy.Slippage)    						.SetCell(0' 9' LocalizedStrings.Str161 + ":")  						.SetCell(1' 9' Format(strategy.Latency));    					var rowIndex = 11;    					foreach (var parameter in strategy.StatisticManager.Parameters.SyncGet(c => c.ToArray()))  					{  						var value = parameter.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' parameter.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					rowIndex += 2;  					worker.SetCell(0' rowIndex' LocalizedStrings.Str1340);  					rowIndex++;    					foreach (var strategyParam in strategy.Parameters.CachedValues)  					{  						var value = strategyParam.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' strategyParam.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					//rowIndex += 2;  					//worker.SetCell(0' rowIndex' "Комиссия по типам:");  					//rowIndex++;    					//foreach (var group in Strategy.CommissionManager.Rules.SyncGet(c => c.ToArray()).GroupBy(c => c.GetType().GetDisplayName()))  					//{  					//	var commission = group.Sum(r => r.Commission);    					//	if (commission == 0)  					//		continue;    					//	worker  					//		.SetCell(0' rowIndex' group.Key)  					//		.SetCell(1' rowIndex' commission);    					//	rowIndex++;  					//}    					var columnShift = 3;    					worker  						.SetCell(columnShift + 0' 0' LocalizedStrings.Str985)    						.SetCell(columnShift + 0' 1' LocalizedStrings.Str1192).SetStyle(columnShift + 0' typeof(long))  						.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  						.SetCell(columnShift + 2' 1' LocalizedStrings.Time).SetStyle(columnShift + 2' "HH:mm:ss.fff")  						.SetCell(columnShift + 3' 1' LocalizedStrings.Price).SetStyle(columnShift + 3' typeof(decimal))  						.SetCell(columnShift + 4' 1' LocalizedStrings.Str1341).SetStyle(columnShift + 4' typeof(decimal))  						.SetCell(columnShift + 5' 1' LocalizedStrings.Volume).SetStyle(columnShift + 5' typeof(decimal))  						.SetCell(columnShift + 6' 1' LocalizedStrings.Str128)  						.SetCell(columnShift + 7' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 7' typeof(long))  						.SetCell(columnShift + 8' 1' LocalizedStrings.Str163).SetStyle(columnShift + 8' typeof(decimal))  						.SetCell(columnShift + 9' 1' LocalizedStrings.Str135)  						.SetCell(columnShift + 10' 1' LocalizedStrings.Str1342).SetStyle(columnShift + 11' typeof(decimal))  						.SetCell(columnShift + 11' 1' LocalizedStrings.Str1343).SetStyle(columnShift + 12' typeof(decimal))  						.SetCell(columnShift + 12' 1' LocalizedStrings.Str1344).SetStyle(columnShift + 13' typeof(decimal))  						.SetCell(columnShift + 13' 1' LocalizedStrings.Str1345).SetStyle(columnShift + 14' typeof(decimal))  						.SetCell(columnShift + 14' 1' LocalizedStrings.Str862).SetStyle(columnShift + 15' typeof(decimal));    					worker  						.SetConditionalFormatting(columnShift + 10' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 11' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 12' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 13' ComparisonOperator.Less' "0"' null' Colors.Red);    					var totalPnL = 0m;  					var position = 0m;    					var queues = new Dictionary<Security' PnLQueue>();    					rowIndex = 2;  					foreach (var trade in strategy.MyTrades.ToArray())  					{  						var info = strategy.PnLManager.ProcessMessage(trade.ToMessage());    						totalPnL += info.PnL;  						position += trade.GetPosition() ?? 0;    						var queue = queues.SafeAdd(trade.Trade.Security' key => new PnLQueue(key.ToSecurityId()));    						var localInfo = queue.Process(trade.ToMessage());    						worker  							.SetCell(columnShift + 0' rowIndex' trade.Trade.Id)  							.SetCell(columnShift + 1' rowIndex' trade.Order.TransactionId)  							.SetCell(columnShift + 2' rowIndex' Format(trade.Trade.Time))  							.SetCell(columnShift + 3' rowIndex' trade.Trade.Price)  							.SetCell(columnShift + 4' rowIndex' trade.Order.Price)  							.SetCell(columnShift + 5' rowIndex' trade.Trade.Volume)  							.SetCell(columnShift + 6' rowIndex' Format(trade.Order.Direction))  							.SetCell(columnShift + 7' rowIndex' trade.Order.Id)  							.SetCell(columnShift + 8' rowIndex' trade.Slippage)  							.SetCell(columnShift + 9' rowIndex' trade.Order.Comment)  							.SetCell(columnShift + 10' rowIndex' MathHelper.Round(info.PnL' Decimals))  							.SetCell(columnShift + 11' rowIndex' MathHelper.Round(localInfo.PnL' Decimals))  							.SetCell(columnShift + 12' rowIndex' MathHelper.Round(totalPnL' Decimals))  							.SetCell(columnShift + 13' rowIndex' MathHelper.Round(queue.RealizedPnL' Decimals))  							.SetCell(columnShift + 14' rowIndex' position);    						rowIndex++;  					}    					if (IncludeOrders)  					{  						columnShift += 17;    						worker  							.SetCell(columnShift + 0' 0' LocalizedStrings.Orders)    							.SetCell(columnShift + 0' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  							.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  							.SetCell(columnShift + 2' 1' LocalizedStrings.Str128)  							.SetCell(columnShift + 3' 1' LocalizedStrings.Str1346).SetStyle(columnShift + 3' "HH:mm:ss.fff")  							.SetCell(columnShift + 4' 1' LocalizedStrings.Str1347).SetStyle(columnShift + 4' "HH:mm:ss.fff")  							.SetCell(columnShift + 5' 1' LocalizedStrings.Str1348)  							.SetCell(columnShift + 6' 1' LocalizedStrings.Price).SetStyle(columnShift + 6' typeof(decimal))  							.SetCell(columnShift + 7' 1' LocalizedStrings.Str1323).SetStyle(columnShift + 7' typeof(decimal))  							.SetCell(columnShift + 8' 1' LocalizedStrings.Str1324)  							.SetCell(columnShift + 9' 1' LocalizedStrings.State)  							.SetCell(columnShift + 10' 1' LocalizedStrings.Str1325).SetStyle(columnShift + 10' typeof(decimal))  							.SetCell(columnShift + 11' 1' LocalizedStrings.Volume).SetStyle(columnShift + 11' typeof(decimal))  							.SetCell(columnShift + 12' 1' LocalizedStrings.Type)  							.SetCell(columnShift + 13' 1' LocalizedStrings.Str1326)  							.SetCell(columnShift + 14' 1' LocalizedStrings.Str1327)  							.SetCell(columnShift + 15' 1' LocalizedStrings.Str135);    						worker  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str1329)' null' Colors.Green)  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str238)' null' Colors.Red);    						rowIndex = 2;  						foreach (var order in strategy.Orders.ToArray())  						{  							worker  								.SetCell(columnShift + 0' rowIndex' order.Id)  								.SetCell(columnShift + 1' rowIndex' order.TransactionId)  								.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  								.SetCell(columnShift + 3' rowIndex' Format(order.Time))  								.SetCell(columnShift + 4' rowIndex' Format(order.LastChangeTime))  								.SetCell(columnShift + 5' rowIndex' Format(order.LastChangeTime - order.Time))  								.SetCell(columnShift + 6' rowIndex' order.Price)  								.SetCell(columnShift + 7' rowIndex' MathHelper.Round(order.GetAveragePrice(strategy.Connector)' Decimals))  								.SetCell(columnShift + 8' rowIndex' Format(order.State))  								.SetCell(columnShift + 9' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : LocalizedStrings.Str238))  								.SetCell(columnShift + 10' rowIndex' order.Balance)  								.SetCell(columnShift + 11' rowIndex' order.Volume)  								.SetCell(columnShift + 12' rowIndex' Format(order.Type))  								.SetCell(columnShift + 13' rowIndex' Format(order.LatencyRegistration))  								.SetCell(columnShift + 14' rowIndex' Format(order.LatencyCancellation))  								.SetCell(columnShift + 15' rowIndex' order.Comment);    							rowIndex++;  						}    						var stopOrders = strategy.StopOrders.ToArray();    						if (stopOrders.Length > 0)  						{  							rowIndex += 2;    							worker  								.SetCell(columnShift + 0' rowIndex - 1' LocalizedStrings.Str1351)    								.SetCell(columnShift + 0' rowIndex' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  								.SetCell(columnShift + 1' rowIndex' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  								.SetCell(columnShift + 2' rowIndex' LocalizedStrings.Str128)  								.SetCell(columnShift + 3' rowIndex' LocalizedStrings.Time).SetStyle(columnShift + 3' "HH:mm:ss.fff")  								.SetCell(columnShift + 4' rowIndex' LocalizedStrings.Price).SetStyle(columnShift + 4' typeof(decimal))  								.SetCell(columnShift + 5' rowIndex' LocalizedStrings.Str1324)  								.SetCell(columnShift + 6' rowIndex' LocalizedStrings.State)  								.SetCell(columnShift + 7' rowIndex' LocalizedStrings.Volume).SetStyle(columnShift + 7' typeof(decimal))  								.SetCell(columnShift + 8' rowIndex' LocalizedStrings.Str1326)  								.SetCell(columnShift + 9' rowIndex' LocalizedStrings.Str1327)  								//.SetCell(columnShift + 10' rowIndex' LocalizedStrings.Str1352).SetStyle(columnShift + 9' typeof(long))  								;    							var stopParams = stopOrders[0].Condition.Parameters.Keys.ToArray();    							for (var i = 0; i < stopParams.Length; i++)  								worker.SetCell(columnShift + 11 + i' rowIndex' stopParams[i]);    							foreach (var order in stopOrders)  							{  								worker  									.SetCell(columnShift + 0' rowIndex' order.Id)  									.SetCell(columnShift + 1' rowIndex' order.TransactionId)  									.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  									.SetCell(columnShift + 3' rowIndex' Format(order.Time))  									.SetCell(columnShift + 4' rowIndex' order.Price)  									.SetCell(columnShift + 5' rowIndex' Format(order.State))  									.SetCell(columnShift + 6' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : string.Empty))  									.SetCell(columnShift + 7' rowIndex' order.Volume)  									.SetCell(columnShift + 8' rowIndex' Format(order.LatencyRegistration))  									.SetCell(columnShift + 9' rowIndex' Format(order.LatencyCancellation))  									//.SetCell(columnShift + 10' rowIndex' order.DerivedOrder != null ? (object)order.DerivedOrder.Id : string.Empty)  									;    								for (var i = 0; i < stopParams.Length; i++)  									worker.SetCell(columnShift + 11 + i' rowIndex' order.Condition.Parameters[stopParams[i]] ?? string.Empty);    								rowIndex++;  							}  						}  					}  				}    				worker.Save(FileName' true);  			}
Magic Number,StockSharp.Algo.Strategies.Reporting,ExcelStrategyReport,C:\repos\stocksharp_stocksharp\Algo\Strategies\Reporting\ExcelStrategyReport.cs,Generate,The following statement contains a magic number: using (var worker = hasTemplate ? new ExcelWorker() : new ExcelWorker(Template))  			{  				foreach (var strategy in Strategies)  				{  					if (Template.IsEmpty())  					{  						worker.RenameSheet(strategy.Name);  					}  					else  					{  						if (worker.ContainsSheet(strategy.Name))  							worker.AddSheet(strategy.Name);  					}    					worker  						.SetCell(0' 0' LocalizedStrings.Str1331)    						.SetCell(0' 1' LocalizedStrings.Security + ":")  						.SetCell(1' 1' strategy.Security != null ? strategy.Security.Id : string.Empty)    						.SetCell(0' 2' LocalizedStrings.Portfolio + ":")  						.SetCell(1' 2' strategy.Portfolio != null ? strategy.Portfolio.Name : string.Empty)    						.SetCell(0' 3' LocalizedStrings.Str1334)  						.SetCell(1' 3' Format(strategy.TotalWorkingTime))    						.SetCell(0' 4' LocalizedStrings.Str1335)  						//.SetCell(1' 4' FormatTime(base.Strategy.TotalCPUTime))    						.SetCell(0' 5' LocalizedStrings.Str862 + ":")  						.SetCell(1' 5' strategy.Position)    						.SetCell(0' 6' LocalizedStrings.PnL + ":")  						.SetCell(1' 6' strategy.PnL)    						.SetCell(0' 7' LocalizedStrings.Str159 + ":")  						.SetCell(1' 7' strategy.Commission)    						.SetCell(0' 8' LocalizedStrings.Str163 + ":")  						.SetCell(1' 8' strategy.Slippage)    						.SetCell(0' 9' LocalizedStrings.Str161 + ":")  						.SetCell(1' 9' Format(strategy.Latency));    					var rowIndex = 11;    					foreach (var parameter in strategy.StatisticManager.Parameters.SyncGet(c => c.ToArray()))  					{  						var value = parameter.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' parameter.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					rowIndex += 2;  					worker.SetCell(0' rowIndex' LocalizedStrings.Str1340);  					rowIndex++;    					foreach (var strategyParam in strategy.Parameters.CachedValues)  					{  						var value = strategyParam.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' strategyParam.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					//rowIndex += 2;  					//worker.SetCell(0' rowIndex' "Комиссия по типам:");  					//rowIndex++;    					//foreach (var group in Strategy.CommissionManager.Rules.SyncGet(c => c.ToArray()).GroupBy(c => c.GetType().GetDisplayName()))  					//{  					//	var commission = group.Sum(r => r.Commission);    					//	if (commission == 0)  					//		continue;    					//	worker  					//		.SetCell(0' rowIndex' group.Key)  					//		.SetCell(1' rowIndex' commission);    					//	rowIndex++;  					//}    					var columnShift = 3;    					worker  						.SetCell(columnShift + 0' 0' LocalizedStrings.Str985)    						.SetCell(columnShift + 0' 1' LocalizedStrings.Str1192).SetStyle(columnShift + 0' typeof(long))  						.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  						.SetCell(columnShift + 2' 1' LocalizedStrings.Time).SetStyle(columnShift + 2' "HH:mm:ss.fff")  						.SetCell(columnShift + 3' 1' LocalizedStrings.Price).SetStyle(columnShift + 3' typeof(decimal))  						.SetCell(columnShift + 4' 1' LocalizedStrings.Str1341).SetStyle(columnShift + 4' typeof(decimal))  						.SetCell(columnShift + 5' 1' LocalizedStrings.Volume).SetStyle(columnShift + 5' typeof(decimal))  						.SetCell(columnShift + 6' 1' LocalizedStrings.Str128)  						.SetCell(columnShift + 7' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 7' typeof(long))  						.SetCell(columnShift + 8' 1' LocalizedStrings.Str163).SetStyle(columnShift + 8' typeof(decimal))  						.SetCell(columnShift + 9' 1' LocalizedStrings.Str135)  						.SetCell(columnShift + 10' 1' LocalizedStrings.Str1342).SetStyle(columnShift + 11' typeof(decimal))  						.SetCell(columnShift + 11' 1' LocalizedStrings.Str1343).SetStyle(columnShift + 12' typeof(decimal))  						.SetCell(columnShift + 12' 1' LocalizedStrings.Str1344).SetStyle(columnShift + 13' typeof(decimal))  						.SetCell(columnShift + 13' 1' LocalizedStrings.Str1345).SetStyle(columnShift + 14' typeof(decimal))  						.SetCell(columnShift + 14' 1' LocalizedStrings.Str862).SetStyle(columnShift + 15' typeof(decimal));    					worker  						.SetConditionalFormatting(columnShift + 10' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 11' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 12' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 13' ComparisonOperator.Less' "0"' null' Colors.Red);    					var totalPnL = 0m;  					var position = 0m;    					var queues = new Dictionary<Security' PnLQueue>();    					rowIndex = 2;  					foreach (var trade in strategy.MyTrades.ToArray())  					{  						var info = strategy.PnLManager.ProcessMessage(trade.ToMessage());    						totalPnL += info.PnL;  						position += trade.GetPosition() ?? 0;    						var queue = queues.SafeAdd(trade.Trade.Security' key => new PnLQueue(key.ToSecurityId()));    						var localInfo = queue.Process(trade.ToMessage());    						worker  							.SetCell(columnShift + 0' rowIndex' trade.Trade.Id)  							.SetCell(columnShift + 1' rowIndex' trade.Order.TransactionId)  							.SetCell(columnShift + 2' rowIndex' Format(trade.Trade.Time))  							.SetCell(columnShift + 3' rowIndex' trade.Trade.Price)  							.SetCell(columnShift + 4' rowIndex' trade.Order.Price)  							.SetCell(columnShift + 5' rowIndex' trade.Trade.Volume)  							.SetCell(columnShift + 6' rowIndex' Format(trade.Order.Direction))  							.SetCell(columnShift + 7' rowIndex' trade.Order.Id)  							.SetCell(columnShift + 8' rowIndex' trade.Slippage)  							.SetCell(columnShift + 9' rowIndex' trade.Order.Comment)  							.SetCell(columnShift + 10' rowIndex' MathHelper.Round(info.PnL' Decimals))  							.SetCell(columnShift + 11' rowIndex' MathHelper.Round(localInfo.PnL' Decimals))  							.SetCell(columnShift + 12' rowIndex' MathHelper.Round(totalPnL' Decimals))  							.SetCell(columnShift + 13' rowIndex' MathHelper.Round(queue.RealizedPnL' Decimals))  							.SetCell(columnShift + 14' rowIndex' position);    						rowIndex++;  					}    					if (IncludeOrders)  					{  						columnShift += 17;    						worker  							.SetCell(columnShift + 0' 0' LocalizedStrings.Orders)    							.SetCell(columnShift + 0' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  							.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  							.SetCell(columnShift + 2' 1' LocalizedStrings.Str128)  							.SetCell(columnShift + 3' 1' LocalizedStrings.Str1346).SetStyle(columnShift + 3' "HH:mm:ss.fff")  							.SetCell(columnShift + 4' 1' LocalizedStrings.Str1347).SetStyle(columnShift + 4' "HH:mm:ss.fff")  							.SetCell(columnShift + 5' 1' LocalizedStrings.Str1348)  							.SetCell(columnShift + 6' 1' LocalizedStrings.Price).SetStyle(columnShift + 6' typeof(decimal))  							.SetCell(columnShift + 7' 1' LocalizedStrings.Str1323).SetStyle(columnShift + 7' typeof(decimal))  							.SetCell(columnShift + 8' 1' LocalizedStrings.Str1324)  							.SetCell(columnShift + 9' 1' LocalizedStrings.State)  							.SetCell(columnShift + 10' 1' LocalizedStrings.Str1325).SetStyle(columnShift + 10' typeof(decimal))  							.SetCell(columnShift + 11' 1' LocalizedStrings.Volume).SetStyle(columnShift + 11' typeof(decimal))  							.SetCell(columnShift + 12' 1' LocalizedStrings.Type)  							.SetCell(columnShift + 13' 1' LocalizedStrings.Str1326)  							.SetCell(columnShift + 14' 1' LocalizedStrings.Str1327)  							.SetCell(columnShift + 15' 1' LocalizedStrings.Str135);    						worker  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str1329)' null' Colors.Green)  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str238)' null' Colors.Red);    						rowIndex = 2;  						foreach (var order in strategy.Orders.ToArray())  						{  							worker  								.SetCell(columnShift + 0' rowIndex' order.Id)  								.SetCell(columnShift + 1' rowIndex' order.TransactionId)  								.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  								.SetCell(columnShift + 3' rowIndex' Format(order.Time))  								.SetCell(columnShift + 4' rowIndex' Format(order.LastChangeTime))  								.SetCell(columnShift + 5' rowIndex' Format(order.LastChangeTime - order.Time))  								.SetCell(columnShift + 6' rowIndex' order.Price)  								.SetCell(columnShift + 7' rowIndex' MathHelper.Round(order.GetAveragePrice(strategy.Connector)' Decimals))  								.SetCell(columnShift + 8' rowIndex' Format(order.State))  								.SetCell(columnShift + 9' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : LocalizedStrings.Str238))  								.SetCell(columnShift + 10' rowIndex' order.Balance)  								.SetCell(columnShift + 11' rowIndex' order.Volume)  								.SetCell(columnShift + 12' rowIndex' Format(order.Type))  								.SetCell(columnShift + 13' rowIndex' Format(order.LatencyRegistration))  								.SetCell(columnShift + 14' rowIndex' Format(order.LatencyCancellation))  								.SetCell(columnShift + 15' rowIndex' order.Comment);    							rowIndex++;  						}    						var stopOrders = strategy.StopOrders.ToArray();    						if (stopOrders.Length > 0)  						{  							rowIndex += 2;    							worker  								.SetCell(columnShift + 0' rowIndex - 1' LocalizedStrings.Str1351)    								.SetCell(columnShift + 0' rowIndex' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  								.SetCell(columnShift + 1' rowIndex' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  								.SetCell(columnShift + 2' rowIndex' LocalizedStrings.Str128)  								.SetCell(columnShift + 3' rowIndex' LocalizedStrings.Time).SetStyle(columnShift + 3' "HH:mm:ss.fff")  								.SetCell(columnShift + 4' rowIndex' LocalizedStrings.Price).SetStyle(columnShift + 4' typeof(decimal))  								.SetCell(columnShift + 5' rowIndex' LocalizedStrings.Str1324)  								.SetCell(columnShift + 6' rowIndex' LocalizedStrings.State)  								.SetCell(columnShift + 7' rowIndex' LocalizedStrings.Volume).SetStyle(columnShift + 7' typeof(decimal))  								.SetCell(columnShift + 8' rowIndex' LocalizedStrings.Str1326)  								.SetCell(columnShift + 9' rowIndex' LocalizedStrings.Str1327)  								//.SetCell(columnShift + 10' rowIndex' LocalizedStrings.Str1352).SetStyle(columnShift + 9' typeof(long))  								;    							var stopParams = stopOrders[0].Condition.Parameters.Keys.ToArray();    							for (var i = 0; i < stopParams.Length; i++)  								worker.SetCell(columnShift + 11 + i' rowIndex' stopParams[i]);    							foreach (var order in stopOrders)  							{  								worker  									.SetCell(columnShift + 0' rowIndex' order.Id)  									.SetCell(columnShift + 1' rowIndex' order.TransactionId)  									.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  									.SetCell(columnShift + 3' rowIndex' Format(order.Time))  									.SetCell(columnShift + 4' rowIndex' order.Price)  									.SetCell(columnShift + 5' rowIndex' Format(order.State))  									.SetCell(columnShift + 6' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : string.Empty))  									.SetCell(columnShift + 7' rowIndex' order.Volume)  									.SetCell(columnShift + 8' rowIndex' Format(order.LatencyRegistration))  									.SetCell(columnShift + 9' rowIndex' Format(order.LatencyCancellation))  									//.SetCell(columnShift + 10' rowIndex' order.DerivedOrder != null ? (object)order.DerivedOrder.Id : string.Empty)  									;    								for (var i = 0; i < stopParams.Length; i++)  									worker.SetCell(columnShift + 11 + i' rowIndex' order.Condition.Parameters[stopParams[i]] ?? string.Empty);    								rowIndex++;  							}  						}  					}  				}    				worker.Save(FileName' true);  			}
Magic Number,StockSharp.Algo.Strategies.Reporting,ExcelStrategyReport,C:\repos\stocksharp_stocksharp\Algo\Strategies\Reporting\ExcelStrategyReport.cs,Generate,The following statement contains a magic number: using (var worker = hasTemplate ? new ExcelWorker() : new ExcelWorker(Template))  			{  				foreach (var strategy in Strategies)  				{  					if (Template.IsEmpty())  					{  						worker.RenameSheet(strategy.Name);  					}  					else  					{  						if (worker.ContainsSheet(strategy.Name))  							worker.AddSheet(strategy.Name);  					}    					worker  						.SetCell(0' 0' LocalizedStrings.Str1331)    						.SetCell(0' 1' LocalizedStrings.Security + ":")  						.SetCell(1' 1' strategy.Security != null ? strategy.Security.Id : string.Empty)    						.SetCell(0' 2' LocalizedStrings.Portfolio + ":")  						.SetCell(1' 2' strategy.Portfolio != null ? strategy.Portfolio.Name : string.Empty)    						.SetCell(0' 3' LocalizedStrings.Str1334)  						.SetCell(1' 3' Format(strategy.TotalWorkingTime))    						.SetCell(0' 4' LocalizedStrings.Str1335)  						//.SetCell(1' 4' FormatTime(base.Strategy.TotalCPUTime))    						.SetCell(0' 5' LocalizedStrings.Str862 + ":")  						.SetCell(1' 5' strategy.Position)    						.SetCell(0' 6' LocalizedStrings.PnL + ":")  						.SetCell(1' 6' strategy.PnL)    						.SetCell(0' 7' LocalizedStrings.Str159 + ":")  						.SetCell(1' 7' strategy.Commission)    						.SetCell(0' 8' LocalizedStrings.Str163 + ":")  						.SetCell(1' 8' strategy.Slippage)    						.SetCell(0' 9' LocalizedStrings.Str161 + ":")  						.SetCell(1' 9' Format(strategy.Latency));    					var rowIndex = 11;    					foreach (var parameter in strategy.StatisticManager.Parameters.SyncGet(c => c.ToArray()))  					{  						var value = parameter.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' parameter.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					rowIndex += 2;  					worker.SetCell(0' rowIndex' LocalizedStrings.Str1340);  					rowIndex++;    					foreach (var strategyParam in strategy.Parameters.CachedValues)  					{  						var value = strategyParam.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' strategyParam.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					//rowIndex += 2;  					//worker.SetCell(0' rowIndex' "Комиссия по типам:");  					//rowIndex++;    					//foreach (var group in Strategy.CommissionManager.Rules.SyncGet(c => c.ToArray()).GroupBy(c => c.GetType().GetDisplayName()))  					//{  					//	var commission = group.Sum(r => r.Commission);    					//	if (commission == 0)  					//		continue;    					//	worker  					//		.SetCell(0' rowIndex' group.Key)  					//		.SetCell(1' rowIndex' commission);    					//	rowIndex++;  					//}    					var columnShift = 3;    					worker  						.SetCell(columnShift + 0' 0' LocalizedStrings.Str985)    						.SetCell(columnShift + 0' 1' LocalizedStrings.Str1192).SetStyle(columnShift + 0' typeof(long))  						.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  						.SetCell(columnShift + 2' 1' LocalizedStrings.Time).SetStyle(columnShift + 2' "HH:mm:ss.fff")  						.SetCell(columnShift + 3' 1' LocalizedStrings.Price).SetStyle(columnShift + 3' typeof(decimal))  						.SetCell(columnShift + 4' 1' LocalizedStrings.Str1341).SetStyle(columnShift + 4' typeof(decimal))  						.SetCell(columnShift + 5' 1' LocalizedStrings.Volume).SetStyle(columnShift + 5' typeof(decimal))  						.SetCell(columnShift + 6' 1' LocalizedStrings.Str128)  						.SetCell(columnShift + 7' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 7' typeof(long))  						.SetCell(columnShift + 8' 1' LocalizedStrings.Str163).SetStyle(columnShift + 8' typeof(decimal))  						.SetCell(columnShift + 9' 1' LocalizedStrings.Str135)  						.SetCell(columnShift + 10' 1' LocalizedStrings.Str1342).SetStyle(columnShift + 11' typeof(decimal))  						.SetCell(columnShift + 11' 1' LocalizedStrings.Str1343).SetStyle(columnShift + 12' typeof(decimal))  						.SetCell(columnShift + 12' 1' LocalizedStrings.Str1344).SetStyle(columnShift + 13' typeof(decimal))  						.SetCell(columnShift + 13' 1' LocalizedStrings.Str1345).SetStyle(columnShift + 14' typeof(decimal))  						.SetCell(columnShift + 14' 1' LocalizedStrings.Str862).SetStyle(columnShift + 15' typeof(decimal));    					worker  						.SetConditionalFormatting(columnShift + 10' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 11' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 12' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 13' ComparisonOperator.Less' "0"' null' Colors.Red);    					var totalPnL = 0m;  					var position = 0m;    					var queues = new Dictionary<Security' PnLQueue>();    					rowIndex = 2;  					foreach (var trade in strategy.MyTrades.ToArray())  					{  						var info = strategy.PnLManager.ProcessMessage(trade.ToMessage());    						totalPnL += info.PnL;  						position += trade.GetPosition() ?? 0;    						var queue = queues.SafeAdd(trade.Trade.Security' key => new PnLQueue(key.ToSecurityId()));    						var localInfo = queue.Process(trade.ToMessage());    						worker  							.SetCell(columnShift + 0' rowIndex' trade.Trade.Id)  							.SetCell(columnShift + 1' rowIndex' trade.Order.TransactionId)  							.SetCell(columnShift + 2' rowIndex' Format(trade.Trade.Time))  							.SetCell(columnShift + 3' rowIndex' trade.Trade.Price)  							.SetCell(columnShift + 4' rowIndex' trade.Order.Price)  							.SetCell(columnShift + 5' rowIndex' trade.Trade.Volume)  							.SetCell(columnShift + 6' rowIndex' Format(trade.Order.Direction))  							.SetCell(columnShift + 7' rowIndex' trade.Order.Id)  							.SetCell(columnShift + 8' rowIndex' trade.Slippage)  							.SetCell(columnShift + 9' rowIndex' trade.Order.Comment)  							.SetCell(columnShift + 10' rowIndex' MathHelper.Round(info.PnL' Decimals))  							.SetCell(columnShift + 11' rowIndex' MathHelper.Round(localInfo.PnL' Decimals))  							.SetCell(columnShift + 12' rowIndex' MathHelper.Round(totalPnL' Decimals))  							.SetCell(columnShift + 13' rowIndex' MathHelper.Round(queue.RealizedPnL' Decimals))  							.SetCell(columnShift + 14' rowIndex' position);    						rowIndex++;  					}    					if (IncludeOrders)  					{  						columnShift += 17;    						worker  							.SetCell(columnShift + 0' 0' LocalizedStrings.Orders)    							.SetCell(columnShift + 0' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  							.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  							.SetCell(columnShift + 2' 1' LocalizedStrings.Str128)  							.SetCell(columnShift + 3' 1' LocalizedStrings.Str1346).SetStyle(columnShift + 3' "HH:mm:ss.fff")  							.SetCell(columnShift + 4' 1' LocalizedStrings.Str1347).SetStyle(columnShift + 4' "HH:mm:ss.fff")  							.SetCell(columnShift + 5' 1' LocalizedStrings.Str1348)  							.SetCell(columnShift + 6' 1' LocalizedStrings.Price).SetStyle(columnShift + 6' typeof(decimal))  							.SetCell(columnShift + 7' 1' LocalizedStrings.Str1323).SetStyle(columnShift + 7' typeof(decimal))  							.SetCell(columnShift + 8' 1' LocalizedStrings.Str1324)  							.SetCell(columnShift + 9' 1' LocalizedStrings.State)  							.SetCell(columnShift + 10' 1' LocalizedStrings.Str1325).SetStyle(columnShift + 10' typeof(decimal))  							.SetCell(columnShift + 11' 1' LocalizedStrings.Volume).SetStyle(columnShift + 11' typeof(decimal))  							.SetCell(columnShift + 12' 1' LocalizedStrings.Type)  							.SetCell(columnShift + 13' 1' LocalizedStrings.Str1326)  							.SetCell(columnShift + 14' 1' LocalizedStrings.Str1327)  							.SetCell(columnShift + 15' 1' LocalizedStrings.Str135);    						worker  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str1329)' null' Colors.Green)  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str238)' null' Colors.Red);    						rowIndex = 2;  						foreach (var order in strategy.Orders.ToArray())  						{  							worker  								.SetCell(columnShift + 0' rowIndex' order.Id)  								.SetCell(columnShift + 1' rowIndex' order.TransactionId)  								.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  								.SetCell(columnShift + 3' rowIndex' Format(order.Time))  								.SetCell(columnShift + 4' rowIndex' Format(order.LastChangeTime))  								.SetCell(columnShift + 5' rowIndex' Format(order.LastChangeTime - order.Time))  								.SetCell(columnShift + 6' rowIndex' order.Price)  								.SetCell(columnShift + 7' rowIndex' MathHelper.Round(order.GetAveragePrice(strategy.Connector)' Decimals))  								.SetCell(columnShift + 8' rowIndex' Format(order.State))  								.SetCell(columnShift + 9' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : LocalizedStrings.Str238))  								.SetCell(columnShift + 10' rowIndex' order.Balance)  								.SetCell(columnShift + 11' rowIndex' order.Volume)  								.SetCell(columnShift + 12' rowIndex' Format(order.Type))  								.SetCell(columnShift + 13' rowIndex' Format(order.LatencyRegistration))  								.SetCell(columnShift + 14' rowIndex' Format(order.LatencyCancellation))  								.SetCell(columnShift + 15' rowIndex' order.Comment);    							rowIndex++;  						}    						var stopOrders = strategy.StopOrders.ToArray();    						if (stopOrders.Length > 0)  						{  							rowIndex += 2;    							worker  								.SetCell(columnShift + 0' rowIndex - 1' LocalizedStrings.Str1351)    								.SetCell(columnShift + 0' rowIndex' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  								.SetCell(columnShift + 1' rowIndex' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  								.SetCell(columnShift + 2' rowIndex' LocalizedStrings.Str128)  								.SetCell(columnShift + 3' rowIndex' LocalizedStrings.Time).SetStyle(columnShift + 3' "HH:mm:ss.fff")  								.SetCell(columnShift + 4' rowIndex' LocalizedStrings.Price).SetStyle(columnShift + 4' typeof(decimal))  								.SetCell(columnShift + 5' rowIndex' LocalizedStrings.Str1324)  								.SetCell(columnShift + 6' rowIndex' LocalizedStrings.State)  								.SetCell(columnShift + 7' rowIndex' LocalizedStrings.Volume).SetStyle(columnShift + 7' typeof(decimal))  								.SetCell(columnShift + 8' rowIndex' LocalizedStrings.Str1326)  								.SetCell(columnShift + 9' rowIndex' LocalizedStrings.Str1327)  								//.SetCell(columnShift + 10' rowIndex' LocalizedStrings.Str1352).SetStyle(columnShift + 9' typeof(long))  								;    							var stopParams = stopOrders[0].Condition.Parameters.Keys.ToArray();    							for (var i = 0; i < stopParams.Length; i++)  								worker.SetCell(columnShift + 11 + i' rowIndex' stopParams[i]);    							foreach (var order in stopOrders)  							{  								worker  									.SetCell(columnShift + 0' rowIndex' order.Id)  									.SetCell(columnShift + 1' rowIndex' order.TransactionId)  									.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  									.SetCell(columnShift + 3' rowIndex' Format(order.Time))  									.SetCell(columnShift + 4' rowIndex' order.Price)  									.SetCell(columnShift + 5' rowIndex' Format(order.State))  									.SetCell(columnShift + 6' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : string.Empty))  									.SetCell(columnShift + 7' rowIndex' order.Volume)  									.SetCell(columnShift + 8' rowIndex' Format(order.LatencyRegistration))  									.SetCell(columnShift + 9' rowIndex' Format(order.LatencyCancellation))  									//.SetCell(columnShift + 10' rowIndex' order.DerivedOrder != null ? (object)order.DerivedOrder.Id : string.Empty)  									;    								for (var i = 0; i < stopParams.Length; i++)  									worker.SetCell(columnShift + 11 + i' rowIndex' order.Condition.Parameters[stopParams[i]] ?? string.Empty);    								rowIndex++;  							}  						}  					}  				}    				worker.Save(FileName' true);  			}
Magic Number,StockSharp.Algo.Strategies.Reporting,ExcelStrategyReport,C:\repos\stocksharp_stocksharp\Algo\Strategies\Reporting\ExcelStrategyReport.cs,Generate,The following statement contains a magic number: using (var worker = hasTemplate ? new ExcelWorker() : new ExcelWorker(Template))  			{  				foreach (var strategy in Strategies)  				{  					if (Template.IsEmpty())  					{  						worker.RenameSheet(strategy.Name);  					}  					else  					{  						if (worker.ContainsSheet(strategy.Name))  							worker.AddSheet(strategy.Name);  					}    					worker  						.SetCell(0' 0' LocalizedStrings.Str1331)    						.SetCell(0' 1' LocalizedStrings.Security + ":")  						.SetCell(1' 1' strategy.Security != null ? strategy.Security.Id : string.Empty)    						.SetCell(0' 2' LocalizedStrings.Portfolio + ":")  						.SetCell(1' 2' strategy.Portfolio != null ? strategy.Portfolio.Name : string.Empty)    						.SetCell(0' 3' LocalizedStrings.Str1334)  						.SetCell(1' 3' Format(strategy.TotalWorkingTime))    						.SetCell(0' 4' LocalizedStrings.Str1335)  						//.SetCell(1' 4' FormatTime(base.Strategy.TotalCPUTime))    						.SetCell(0' 5' LocalizedStrings.Str862 + ":")  						.SetCell(1' 5' strategy.Position)    						.SetCell(0' 6' LocalizedStrings.PnL + ":")  						.SetCell(1' 6' strategy.PnL)    						.SetCell(0' 7' LocalizedStrings.Str159 + ":")  						.SetCell(1' 7' strategy.Commission)    						.SetCell(0' 8' LocalizedStrings.Str163 + ":")  						.SetCell(1' 8' strategy.Slippage)    						.SetCell(0' 9' LocalizedStrings.Str161 + ":")  						.SetCell(1' 9' Format(strategy.Latency));    					var rowIndex = 11;    					foreach (var parameter in strategy.StatisticManager.Parameters.SyncGet(c => c.ToArray()))  					{  						var value = parameter.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' parameter.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					rowIndex += 2;  					worker.SetCell(0' rowIndex' LocalizedStrings.Str1340);  					rowIndex++;    					foreach (var strategyParam in strategy.Parameters.CachedValues)  					{  						var value = strategyParam.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' strategyParam.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					//rowIndex += 2;  					//worker.SetCell(0' rowIndex' "Комиссия по типам:");  					//rowIndex++;    					//foreach (var group in Strategy.CommissionManager.Rules.SyncGet(c => c.ToArray()).GroupBy(c => c.GetType().GetDisplayName()))  					//{  					//	var commission = group.Sum(r => r.Commission);    					//	if (commission == 0)  					//		continue;    					//	worker  					//		.SetCell(0' rowIndex' group.Key)  					//		.SetCell(1' rowIndex' commission);    					//	rowIndex++;  					//}    					var columnShift = 3;    					worker  						.SetCell(columnShift + 0' 0' LocalizedStrings.Str985)    						.SetCell(columnShift + 0' 1' LocalizedStrings.Str1192).SetStyle(columnShift + 0' typeof(long))  						.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  						.SetCell(columnShift + 2' 1' LocalizedStrings.Time).SetStyle(columnShift + 2' "HH:mm:ss.fff")  						.SetCell(columnShift + 3' 1' LocalizedStrings.Price).SetStyle(columnShift + 3' typeof(decimal))  						.SetCell(columnShift + 4' 1' LocalizedStrings.Str1341).SetStyle(columnShift + 4' typeof(decimal))  						.SetCell(columnShift + 5' 1' LocalizedStrings.Volume).SetStyle(columnShift + 5' typeof(decimal))  						.SetCell(columnShift + 6' 1' LocalizedStrings.Str128)  						.SetCell(columnShift + 7' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 7' typeof(long))  						.SetCell(columnShift + 8' 1' LocalizedStrings.Str163).SetStyle(columnShift + 8' typeof(decimal))  						.SetCell(columnShift + 9' 1' LocalizedStrings.Str135)  						.SetCell(columnShift + 10' 1' LocalizedStrings.Str1342).SetStyle(columnShift + 11' typeof(decimal))  						.SetCell(columnShift + 11' 1' LocalizedStrings.Str1343).SetStyle(columnShift + 12' typeof(decimal))  						.SetCell(columnShift + 12' 1' LocalizedStrings.Str1344).SetStyle(columnShift + 13' typeof(decimal))  						.SetCell(columnShift + 13' 1' LocalizedStrings.Str1345).SetStyle(columnShift + 14' typeof(decimal))  						.SetCell(columnShift + 14' 1' LocalizedStrings.Str862).SetStyle(columnShift + 15' typeof(decimal));    					worker  						.SetConditionalFormatting(columnShift + 10' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 11' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 12' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 13' ComparisonOperator.Less' "0"' null' Colors.Red);    					var totalPnL = 0m;  					var position = 0m;    					var queues = new Dictionary<Security' PnLQueue>();    					rowIndex = 2;  					foreach (var trade in strategy.MyTrades.ToArray())  					{  						var info = strategy.PnLManager.ProcessMessage(trade.ToMessage());    						totalPnL += info.PnL;  						position += trade.GetPosition() ?? 0;    						var queue = queues.SafeAdd(trade.Trade.Security' key => new PnLQueue(key.ToSecurityId()));    						var localInfo = queue.Process(trade.ToMessage());    						worker  							.SetCell(columnShift + 0' rowIndex' trade.Trade.Id)  							.SetCell(columnShift + 1' rowIndex' trade.Order.TransactionId)  							.SetCell(columnShift + 2' rowIndex' Format(trade.Trade.Time))  							.SetCell(columnShift + 3' rowIndex' trade.Trade.Price)  							.SetCell(columnShift + 4' rowIndex' trade.Order.Price)  							.SetCell(columnShift + 5' rowIndex' trade.Trade.Volume)  							.SetCell(columnShift + 6' rowIndex' Format(trade.Order.Direction))  							.SetCell(columnShift + 7' rowIndex' trade.Order.Id)  							.SetCell(columnShift + 8' rowIndex' trade.Slippage)  							.SetCell(columnShift + 9' rowIndex' trade.Order.Comment)  							.SetCell(columnShift + 10' rowIndex' MathHelper.Round(info.PnL' Decimals))  							.SetCell(columnShift + 11' rowIndex' MathHelper.Round(localInfo.PnL' Decimals))  							.SetCell(columnShift + 12' rowIndex' MathHelper.Round(totalPnL' Decimals))  							.SetCell(columnShift + 13' rowIndex' MathHelper.Round(queue.RealizedPnL' Decimals))  							.SetCell(columnShift + 14' rowIndex' position);    						rowIndex++;  					}    					if (IncludeOrders)  					{  						columnShift += 17;    						worker  							.SetCell(columnShift + 0' 0' LocalizedStrings.Orders)    							.SetCell(columnShift + 0' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  							.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  							.SetCell(columnShift + 2' 1' LocalizedStrings.Str128)  							.SetCell(columnShift + 3' 1' LocalizedStrings.Str1346).SetStyle(columnShift + 3' "HH:mm:ss.fff")  							.SetCell(columnShift + 4' 1' LocalizedStrings.Str1347).SetStyle(columnShift + 4' "HH:mm:ss.fff")  							.SetCell(columnShift + 5' 1' LocalizedStrings.Str1348)  							.SetCell(columnShift + 6' 1' LocalizedStrings.Price).SetStyle(columnShift + 6' typeof(decimal))  							.SetCell(columnShift + 7' 1' LocalizedStrings.Str1323).SetStyle(columnShift + 7' typeof(decimal))  							.SetCell(columnShift + 8' 1' LocalizedStrings.Str1324)  							.SetCell(columnShift + 9' 1' LocalizedStrings.State)  							.SetCell(columnShift + 10' 1' LocalizedStrings.Str1325).SetStyle(columnShift + 10' typeof(decimal))  							.SetCell(columnShift + 11' 1' LocalizedStrings.Volume).SetStyle(columnShift + 11' typeof(decimal))  							.SetCell(columnShift + 12' 1' LocalizedStrings.Type)  							.SetCell(columnShift + 13' 1' LocalizedStrings.Str1326)  							.SetCell(columnShift + 14' 1' LocalizedStrings.Str1327)  							.SetCell(columnShift + 15' 1' LocalizedStrings.Str135);    						worker  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str1329)' null' Colors.Green)  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str238)' null' Colors.Red);    						rowIndex = 2;  						foreach (var order in strategy.Orders.ToArray())  						{  							worker  								.SetCell(columnShift + 0' rowIndex' order.Id)  								.SetCell(columnShift + 1' rowIndex' order.TransactionId)  								.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  								.SetCell(columnShift + 3' rowIndex' Format(order.Time))  								.SetCell(columnShift + 4' rowIndex' Format(order.LastChangeTime))  								.SetCell(columnShift + 5' rowIndex' Format(order.LastChangeTime - order.Time))  								.SetCell(columnShift + 6' rowIndex' order.Price)  								.SetCell(columnShift + 7' rowIndex' MathHelper.Round(order.GetAveragePrice(strategy.Connector)' Decimals))  								.SetCell(columnShift + 8' rowIndex' Format(order.State))  								.SetCell(columnShift + 9' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : LocalizedStrings.Str238))  								.SetCell(columnShift + 10' rowIndex' order.Balance)  								.SetCell(columnShift + 11' rowIndex' order.Volume)  								.SetCell(columnShift + 12' rowIndex' Format(order.Type))  								.SetCell(columnShift + 13' rowIndex' Format(order.LatencyRegistration))  								.SetCell(columnShift + 14' rowIndex' Format(order.LatencyCancellation))  								.SetCell(columnShift + 15' rowIndex' order.Comment);    							rowIndex++;  						}    						var stopOrders = strategy.StopOrders.ToArray();    						if (stopOrders.Length > 0)  						{  							rowIndex += 2;    							worker  								.SetCell(columnShift + 0' rowIndex - 1' LocalizedStrings.Str1351)    								.SetCell(columnShift + 0' rowIndex' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  								.SetCell(columnShift + 1' rowIndex' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  								.SetCell(columnShift + 2' rowIndex' LocalizedStrings.Str128)  								.SetCell(columnShift + 3' rowIndex' LocalizedStrings.Time).SetStyle(columnShift + 3' "HH:mm:ss.fff")  								.SetCell(columnShift + 4' rowIndex' LocalizedStrings.Price).SetStyle(columnShift + 4' typeof(decimal))  								.SetCell(columnShift + 5' rowIndex' LocalizedStrings.Str1324)  								.SetCell(columnShift + 6' rowIndex' LocalizedStrings.State)  								.SetCell(columnShift + 7' rowIndex' LocalizedStrings.Volume).SetStyle(columnShift + 7' typeof(decimal))  								.SetCell(columnShift + 8' rowIndex' LocalizedStrings.Str1326)  								.SetCell(columnShift + 9' rowIndex' LocalizedStrings.Str1327)  								//.SetCell(columnShift + 10' rowIndex' LocalizedStrings.Str1352).SetStyle(columnShift + 9' typeof(long))  								;    							var stopParams = stopOrders[0].Condition.Parameters.Keys.ToArray();    							for (var i = 0; i < stopParams.Length; i++)  								worker.SetCell(columnShift + 11 + i' rowIndex' stopParams[i]);    							foreach (var order in stopOrders)  							{  								worker  									.SetCell(columnShift + 0' rowIndex' order.Id)  									.SetCell(columnShift + 1' rowIndex' order.TransactionId)  									.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  									.SetCell(columnShift + 3' rowIndex' Format(order.Time))  									.SetCell(columnShift + 4' rowIndex' order.Price)  									.SetCell(columnShift + 5' rowIndex' Format(order.State))  									.SetCell(columnShift + 6' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : string.Empty))  									.SetCell(columnShift + 7' rowIndex' order.Volume)  									.SetCell(columnShift + 8' rowIndex' Format(order.LatencyRegistration))  									.SetCell(columnShift + 9' rowIndex' Format(order.LatencyCancellation))  									//.SetCell(columnShift + 10' rowIndex' order.DerivedOrder != null ? (object)order.DerivedOrder.Id : string.Empty)  									;    								for (var i = 0; i < stopParams.Length; i++)  									worker.SetCell(columnShift + 11 + i' rowIndex' order.Condition.Parameters[stopParams[i]] ?? string.Empty);    								rowIndex++;  							}  						}  					}  				}    				worker.Save(FileName' true);  			}
Magic Number,StockSharp.Algo.Strategies.Reporting,ExcelStrategyReport,C:\repos\stocksharp_stocksharp\Algo\Strategies\Reporting\ExcelStrategyReport.cs,Generate,The following statement contains a magic number: using (var worker = hasTemplate ? new ExcelWorker() : new ExcelWorker(Template))  			{  				foreach (var strategy in Strategies)  				{  					if (Template.IsEmpty())  					{  						worker.RenameSheet(strategy.Name);  					}  					else  					{  						if (worker.ContainsSheet(strategy.Name))  							worker.AddSheet(strategy.Name);  					}    					worker  						.SetCell(0' 0' LocalizedStrings.Str1331)    						.SetCell(0' 1' LocalizedStrings.Security + ":")  						.SetCell(1' 1' strategy.Security != null ? strategy.Security.Id : string.Empty)    						.SetCell(0' 2' LocalizedStrings.Portfolio + ":")  						.SetCell(1' 2' strategy.Portfolio != null ? strategy.Portfolio.Name : string.Empty)    						.SetCell(0' 3' LocalizedStrings.Str1334)  						.SetCell(1' 3' Format(strategy.TotalWorkingTime))    						.SetCell(0' 4' LocalizedStrings.Str1335)  						//.SetCell(1' 4' FormatTime(base.Strategy.TotalCPUTime))    						.SetCell(0' 5' LocalizedStrings.Str862 + ":")  						.SetCell(1' 5' strategy.Position)    						.SetCell(0' 6' LocalizedStrings.PnL + ":")  						.SetCell(1' 6' strategy.PnL)    						.SetCell(0' 7' LocalizedStrings.Str159 + ":")  						.SetCell(1' 7' strategy.Commission)    						.SetCell(0' 8' LocalizedStrings.Str163 + ":")  						.SetCell(1' 8' strategy.Slippage)    						.SetCell(0' 9' LocalizedStrings.Str161 + ":")  						.SetCell(1' 9' Format(strategy.Latency));    					var rowIndex = 11;    					foreach (var parameter in strategy.StatisticManager.Parameters.SyncGet(c => c.ToArray()))  					{  						var value = parameter.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' parameter.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					rowIndex += 2;  					worker.SetCell(0' rowIndex' LocalizedStrings.Str1340);  					rowIndex++;    					foreach (var strategyParam in strategy.Parameters.CachedValues)  					{  						var value = strategyParam.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' strategyParam.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					//rowIndex += 2;  					//worker.SetCell(0' rowIndex' "Комиссия по типам:");  					//rowIndex++;    					//foreach (var group in Strategy.CommissionManager.Rules.SyncGet(c => c.ToArray()).GroupBy(c => c.GetType().GetDisplayName()))  					//{  					//	var commission = group.Sum(r => r.Commission);    					//	if (commission == 0)  					//		continue;    					//	worker  					//		.SetCell(0' rowIndex' group.Key)  					//		.SetCell(1' rowIndex' commission);    					//	rowIndex++;  					//}    					var columnShift = 3;    					worker  						.SetCell(columnShift + 0' 0' LocalizedStrings.Str985)    						.SetCell(columnShift + 0' 1' LocalizedStrings.Str1192).SetStyle(columnShift + 0' typeof(long))  						.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  						.SetCell(columnShift + 2' 1' LocalizedStrings.Time).SetStyle(columnShift + 2' "HH:mm:ss.fff")  						.SetCell(columnShift + 3' 1' LocalizedStrings.Price).SetStyle(columnShift + 3' typeof(decimal))  						.SetCell(columnShift + 4' 1' LocalizedStrings.Str1341).SetStyle(columnShift + 4' typeof(decimal))  						.SetCell(columnShift + 5' 1' LocalizedStrings.Volume).SetStyle(columnShift + 5' typeof(decimal))  						.SetCell(columnShift + 6' 1' LocalizedStrings.Str128)  						.SetCell(columnShift + 7' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 7' typeof(long))  						.SetCell(columnShift + 8' 1' LocalizedStrings.Str163).SetStyle(columnShift + 8' typeof(decimal))  						.SetCell(columnShift + 9' 1' LocalizedStrings.Str135)  						.SetCell(columnShift + 10' 1' LocalizedStrings.Str1342).SetStyle(columnShift + 11' typeof(decimal))  						.SetCell(columnShift + 11' 1' LocalizedStrings.Str1343).SetStyle(columnShift + 12' typeof(decimal))  						.SetCell(columnShift + 12' 1' LocalizedStrings.Str1344).SetStyle(columnShift + 13' typeof(decimal))  						.SetCell(columnShift + 13' 1' LocalizedStrings.Str1345).SetStyle(columnShift + 14' typeof(decimal))  						.SetCell(columnShift + 14' 1' LocalizedStrings.Str862).SetStyle(columnShift + 15' typeof(decimal));    					worker  						.SetConditionalFormatting(columnShift + 10' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 11' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 12' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 13' ComparisonOperator.Less' "0"' null' Colors.Red);    					var totalPnL = 0m;  					var position = 0m;    					var queues = new Dictionary<Security' PnLQueue>();    					rowIndex = 2;  					foreach (var trade in strategy.MyTrades.ToArray())  					{  						var info = strategy.PnLManager.ProcessMessage(trade.ToMessage());    						totalPnL += info.PnL;  						position += trade.GetPosition() ?? 0;    						var queue = queues.SafeAdd(trade.Trade.Security' key => new PnLQueue(key.ToSecurityId()));    						var localInfo = queue.Process(trade.ToMessage());    						worker  							.SetCell(columnShift + 0' rowIndex' trade.Trade.Id)  							.SetCell(columnShift + 1' rowIndex' trade.Order.TransactionId)  							.SetCell(columnShift + 2' rowIndex' Format(trade.Trade.Time))  							.SetCell(columnShift + 3' rowIndex' trade.Trade.Price)  							.SetCell(columnShift + 4' rowIndex' trade.Order.Price)  							.SetCell(columnShift + 5' rowIndex' trade.Trade.Volume)  							.SetCell(columnShift + 6' rowIndex' Format(trade.Order.Direction))  							.SetCell(columnShift + 7' rowIndex' trade.Order.Id)  							.SetCell(columnShift + 8' rowIndex' trade.Slippage)  							.SetCell(columnShift + 9' rowIndex' trade.Order.Comment)  							.SetCell(columnShift + 10' rowIndex' MathHelper.Round(info.PnL' Decimals))  							.SetCell(columnShift + 11' rowIndex' MathHelper.Round(localInfo.PnL' Decimals))  							.SetCell(columnShift + 12' rowIndex' MathHelper.Round(totalPnL' Decimals))  							.SetCell(columnShift + 13' rowIndex' MathHelper.Round(queue.RealizedPnL' Decimals))  							.SetCell(columnShift + 14' rowIndex' position);    						rowIndex++;  					}    					if (IncludeOrders)  					{  						columnShift += 17;    						worker  							.SetCell(columnShift + 0' 0' LocalizedStrings.Orders)    							.SetCell(columnShift + 0' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  							.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  							.SetCell(columnShift + 2' 1' LocalizedStrings.Str128)  							.SetCell(columnShift + 3' 1' LocalizedStrings.Str1346).SetStyle(columnShift + 3' "HH:mm:ss.fff")  							.SetCell(columnShift + 4' 1' LocalizedStrings.Str1347).SetStyle(columnShift + 4' "HH:mm:ss.fff")  							.SetCell(columnShift + 5' 1' LocalizedStrings.Str1348)  							.SetCell(columnShift + 6' 1' LocalizedStrings.Price).SetStyle(columnShift + 6' typeof(decimal))  							.SetCell(columnShift + 7' 1' LocalizedStrings.Str1323).SetStyle(columnShift + 7' typeof(decimal))  							.SetCell(columnShift + 8' 1' LocalizedStrings.Str1324)  							.SetCell(columnShift + 9' 1' LocalizedStrings.State)  							.SetCell(columnShift + 10' 1' LocalizedStrings.Str1325).SetStyle(columnShift + 10' typeof(decimal))  							.SetCell(columnShift + 11' 1' LocalizedStrings.Volume).SetStyle(columnShift + 11' typeof(decimal))  							.SetCell(columnShift + 12' 1' LocalizedStrings.Type)  							.SetCell(columnShift + 13' 1' LocalizedStrings.Str1326)  							.SetCell(columnShift + 14' 1' LocalizedStrings.Str1327)  							.SetCell(columnShift + 15' 1' LocalizedStrings.Str135);    						worker  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str1329)' null' Colors.Green)  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str238)' null' Colors.Red);    						rowIndex = 2;  						foreach (var order in strategy.Orders.ToArray())  						{  							worker  								.SetCell(columnShift + 0' rowIndex' order.Id)  								.SetCell(columnShift + 1' rowIndex' order.TransactionId)  								.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  								.SetCell(columnShift + 3' rowIndex' Format(order.Time))  								.SetCell(columnShift + 4' rowIndex' Format(order.LastChangeTime))  								.SetCell(columnShift + 5' rowIndex' Format(order.LastChangeTime - order.Time))  								.SetCell(columnShift + 6' rowIndex' order.Price)  								.SetCell(columnShift + 7' rowIndex' MathHelper.Round(order.GetAveragePrice(strategy.Connector)' Decimals))  								.SetCell(columnShift + 8' rowIndex' Format(order.State))  								.SetCell(columnShift + 9' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : LocalizedStrings.Str238))  								.SetCell(columnShift + 10' rowIndex' order.Balance)  								.SetCell(columnShift + 11' rowIndex' order.Volume)  								.SetCell(columnShift + 12' rowIndex' Format(order.Type))  								.SetCell(columnShift + 13' rowIndex' Format(order.LatencyRegistration))  								.SetCell(columnShift + 14' rowIndex' Format(order.LatencyCancellation))  								.SetCell(columnShift + 15' rowIndex' order.Comment);    							rowIndex++;  						}    						var stopOrders = strategy.StopOrders.ToArray();    						if (stopOrders.Length > 0)  						{  							rowIndex += 2;    							worker  								.SetCell(columnShift + 0' rowIndex - 1' LocalizedStrings.Str1351)    								.SetCell(columnShift + 0' rowIndex' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  								.SetCell(columnShift + 1' rowIndex' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  								.SetCell(columnShift + 2' rowIndex' LocalizedStrings.Str128)  								.SetCell(columnShift + 3' rowIndex' LocalizedStrings.Time).SetStyle(columnShift + 3' "HH:mm:ss.fff")  								.SetCell(columnShift + 4' rowIndex' LocalizedStrings.Price).SetStyle(columnShift + 4' typeof(decimal))  								.SetCell(columnShift + 5' rowIndex' LocalizedStrings.Str1324)  								.SetCell(columnShift + 6' rowIndex' LocalizedStrings.State)  								.SetCell(columnShift + 7' rowIndex' LocalizedStrings.Volume).SetStyle(columnShift + 7' typeof(decimal))  								.SetCell(columnShift + 8' rowIndex' LocalizedStrings.Str1326)  								.SetCell(columnShift + 9' rowIndex' LocalizedStrings.Str1327)  								//.SetCell(columnShift + 10' rowIndex' LocalizedStrings.Str1352).SetStyle(columnShift + 9' typeof(long))  								;    							var stopParams = stopOrders[0].Condition.Parameters.Keys.ToArray();    							for (var i = 0; i < stopParams.Length; i++)  								worker.SetCell(columnShift + 11 + i' rowIndex' stopParams[i]);    							foreach (var order in stopOrders)  							{  								worker  									.SetCell(columnShift + 0' rowIndex' order.Id)  									.SetCell(columnShift + 1' rowIndex' order.TransactionId)  									.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  									.SetCell(columnShift + 3' rowIndex' Format(order.Time))  									.SetCell(columnShift + 4' rowIndex' order.Price)  									.SetCell(columnShift + 5' rowIndex' Format(order.State))  									.SetCell(columnShift + 6' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : string.Empty))  									.SetCell(columnShift + 7' rowIndex' order.Volume)  									.SetCell(columnShift + 8' rowIndex' Format(order.LatencyRegistration))  									.SetCell(columnShift + 9' rowIndex' Format(order.LatencyCancellation))  									//.SetCell(columnShift + 10' rowIndex' order.DerivedOrder != null ? (object)order.DerivedOrder.Id : string.Empty)  									;    								for (var i = 0; i < stopParams.Length; i++)  									worker.SetCell(columnShift + 11 + i' rowIndex' order.Condition.Parameters[stopParams[i]] ?? string.Empty);    								rowIndex++;  							}  						}  					}  				}    				worker.Save(FileName' true);  			}
Magic Number,StockSharp.Algo.Strategies.Reporting,ExcelStrategyReport,C:\repos\stocksharp_stocksharp\Algo\Strategies\Reporting\ExcelStrategyReport.cs,Generate,The following statement contains a magic number: using (var worker = hasTemplate ? new ExcelWorker() : new ExcelWorker(Template))  			{  				foreach (var strategy in Strategies)  				{  					if (Template.IsEmpty())  					{  						worker.RenameSheet(strategy.Name);  					}  					else  					{  						if (worker.ContainsSheet(strategy.Name))  							worker.AddSheet(strategy.Name);  					}    					worker  						.SetCell(0' 0' LocalizedStrings.Str1331)    						.SetCell(0' 1' LocalizedStrings.Security + ":")  						.SetCell(1' 1' strategy.Security != null ? strategy.Security.Id : string.Empty)    						.SetCell(0' 2' LocalizedStrings.Portfolio + ":")  						.SetCell(1' 2' strategy.Portfolio != null ? strategy.Portfolio.Name : string.Empty)    						.SetCell(0' 3' LocalizedStrings.Str1334)  						.SetCell(1' 3' Format(strategy.TotalWorkingTime))    						.SetCell(0' 4' LocalizedStrings.Str1335)  						//.SetCell(1' 4' FormatTime(base.Strategy.TotalCPUTime))    						.SetCell(0' 5' LocalizedStrings.Str862 + ":")  						.SetCell(1' 5' strategy.Position)    						.SetCell(0' 6' LocalizedStrings.PnL + ":")  						.SetCell(1' 6' strategy.PnL)    						.SetCell(0' 7' LocalizedStrings.Str159 + ":")  						.SetCell(1' 7' strategy.Commission)    						.SetCell(0' 8' LocalizedStrings.Str163 + ":")  						.SetCell(1' 8' strategy.Slippage)    						.SetCell(0' 9' LocalizedStrings.Str161 + ":")  						.SetCell(1' 9' Format(strategy.Latency));    					var rowIndex = 11;    					foreach (var parameter in strategy.StatisticManager.Parameters.SyncGet(c => c.ToArray()))  					{  						var value = parameter.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' parameter.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					rowIndex += 2;  					worker.SetCell(0' rowIndex' LocalizedStrings.Str1340);  					rowIndex++;    					foreach (var strategyParam in strategy.Parameters.CachedValues)  					{  						var value = strategyParam.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' strategyParam.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					//rowIndex += 2;  					//worker.SetCell(0' rowIndex' "Комиссия по типам:");  					//rowIndex++;    					//foreach (var group in Strategy.CommissionManager.Rules.SyncGet(c => c.ToArray()).GroupBy(c => c.GetType().GetDisplayName()))  					//{  					//	var commission = group.Sum(r => r.Commission);    					//	if (commission == 0)  					//		continue;    					//	worker  					//		.SetCell(0' rowIndex' group.Key)  					//		.SetCell(1' rowIndex' commission);    					//	rowIndex++;  					//}    					var columnShift = 3;    					worker  						.SetCell(columnShift + 0' 0' LocalizedStrings.Str985)    						.SetCell(columnShift + 0' 1' LocalizedStrings.Str1192).SetStyle(columnShift + 0' typeof(long))  						.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  						.SetCell(columnShift + 2' 1' LocalizedStrings.Time).SetStyle(columnShift + 2' "HH:mm:ss.fff")  						.SetCell(columnShift + 3' 1' LocalizedStrings.Price).SetStyle(columnShift + 3' typeof(decimal))  						.SetCell(columnShift + 4' 1' LocalizedStrings.Str1341).SetStyle(columnShift + 4' typeof(decimal))  						.SetCell(columnShift + 5' 1' LocalizedStrings.Volume).SetStyle(columnShift + 5' typeof(decimal))  						.SetCell(columnShift + 6' 1' LocalizedStrings.Str128)  						.SetCell(columnShift + 7' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 7' typeof(long))  						.SetCell(columnShift + 8' 1' LocalizedStrings.Str163).SetStyle(columnShift + 8' typeof(decimal))  						.SetCell(columnShift + 9' 1' LocalizedStrings.Str135)  						.SetCell(columnShift + 10' 1' LocalizedStrings.Str1342).SetStyle(columnShift + 11' typeof(decimal))  						.SetCell(columnShift + 11' 1' LocalizedStrings.Str1343).SetStyle(columnShift + 12' typeof(decimal))  						.SetCell(columnShift + 12' 1' LocalizedStrings.Str1344).SetStyle(columnShift + 13' typeof(decimal))  						.SetCell(columnShift + 13' 1' LocalizedStrings.Str1345).SetStyle(columnShift + 14' typeof(decimal))  						.SetCell(columnShift + 14' 1' LocalizedStrings.Str862).SetStyle(columnShift + 15' typeof(decimal));    					worker  						.SetConditionalFormatting(columnShift + 10' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 11' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 12' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 13' ComparisonOperator.Less' "0"' null' Colors.Red);    					var totalPnL = 0m;  					var position = 0m;    					var queues = new Dictionary<Security' PnLQueue>();    					rowIndex = 2;  					foreach (var trade in strategy.MyTrades.ToArray())  					{  						var info = strategy.PnLManager.ProcessMessage(trade.ToMessage());    						totalPnL += info.PnL;  						position += trade.GetPosition() ?? 0;    						var queue = queues.SafeAdd(trade.Trade.Security' key => new PnLQueue(key.ToSecurityId()));    						var localInfo = queue.Process(trade.ToMessage());    						worker  							.SetCell(columnShift + 0' rowIndex' trade.Trade.Id)  							.SetCell(columnShift + 1' rowIndex' trade.Order.TransactionId)  							.SetCell(columnShift + 2' rowIndex' Format(trade.Trade.Time))  							.SetCell(columnShift + 3' rowIndex' trade.Trade.Price)  							.SetCell(columnShift + 4' rowIndex' trade.Order.Price)  							.SetCell(columnShift + 5' rowIndex' trade.Trade.Volume)  							.SetCell(columnShift + 6' rowIndex' Format(trade.Order.Direction))  							.SetCell(columnShift + 7' rowIndex' trade.Order.Id)  							.SetCell(columnShift + 8' rowIndex' trade.Slippage)  							.SetCell(columnShift + 9' rowIndex' trade.Order.Comment)  							.SetCell(columnShift + 10' rowIndex' MathHelper.Round(info.PnL' Decimals))  							.SetCell(columnShift + 11' rowIndex' MathHelper.Round(localInfo.PnL' Decimals))  							.SetCell(columnShift + 12' rowIndex' MathHelper.Round(totalPnL' Decimals))  							.SetCell(columnShift + 13' rowIndex' MathHelper.Round(queue.RealizedPnL' Decimals))  							.SetCell(columnShift + 14' rowIndex' position);    						rowIndex++;  					}    					if (IncludeOrders)  					{  						columnShift += 17;    						worker  							.SetCell(columnShift + 0' 0' LocalizedStrings.Orders)    							.SetCell(columnShift + 0' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  							.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  							.SetCell(columnShift + 2' 1' LocalizedStrings.Str128)  							.SetCell(columnShift + 3' 1' LocalizedStrings.Str1346).SetStyle(columnShift + 3' "HH:mm:ss.fff")  							.SetCell(columnShift + 4' 1' LocalizedStrings.Str1347).SetStyle(columnShift + 4' "HH:mm:ss.fff")  							.SetCell(columnShift + 5' 1' LocalizedStrings.Str1348)  							.SetCell(columnShift + 6' 1' LocalizedStrings.Price).SetStyle(columnShift + 6' typeof(decimal))  							.SetCell(columnShift + 7' 1' LocalizedStrings.Str1323).SetStyle(columnShift + 7' typeof(decimal))  							.SetCell(columnShift + 8' 1' LocalizedStrings.Str1324)  							.SetCell(columnShift + 9' 1' LocalizedStrings.State)  							.SetCell(columnShift + 10' 1' LocalizedStrings.Str1325).SetStyle(columnShift + 10' typeof(decimal))  							.SetCell(columnShift + 11' 1' LocalizedStrings.Volume).SetStyle(columnShift + 11' typeof(decimal))  							.SetCell(columnShift + 12' 1' LocalizedStrings.Type)  							.SetCell(columnShift + 13' 1' LocalizedStrings.Str1326)  							.SetCell(columnShift + 14' 1' LocalizedStrings.Str1327)  							.SetCell(columnShift + 15' 1' LocalizedStrings.Str135);    						worker  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str1329)' null' Colors.Green)  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str238)' null' Colors.Red);    						rowIndex = 2;  						foreach (var order in strategy.Orders.ToArray())  						{  							worker  								.SetCell(columnShift + 0' rowIndex' order.Id)  								.SetCell(columnShift + 1' rowIndex' order.TransactionId)  								.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  								.SetCell(columnShift + 3' rowIndex' Format(order.Time))  								.SetCell(columnShift + 4' rowIndex' Format(order.LastChangeTime))  								.SetCell(columnShift + 5' rowIndex' Format(order.LastChangeTime - order.Time))  								.SetCell(columnShift + 6' rowIndex' order.Price)  								.SetCell(columnShift + 7' rowIndex' MathHelper.Round(order.GetAveragePrice(strategy.Connector)' Decimals))  								.SetCell(columnShift + 8' rowIndex' Format(order.State))  								.SetCell(columnShift + 9' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : LocalizedStrings.Str238))  								.SetCell(columnShift + 10' rowIndex' order.Balance)  								.SetCell(columnShift + 11' rowIndex' order.Volume)  								.SetCell(columnShift + 12' rowIndex' Format(order.Type))  								.SetCell(columnShift + 13' rowIndex' Format(order.LatencyRegistration))  								.SetCell(columnShift + 14' rowIndex' Format(order.LatencyCancellation))  								.SetCell(columnShift + 15' rowIndex' order.Comment);    							rowIndex++;  						}    						var stopOrders = strategy.StopOrders.ToArray();    						if (stopOrders.Length > 0)  						{  							rowIndex += 2;    							worker  								.SetCell(columnShift + 0' rowIndex - 1' LocalizedStrings.Str1351)    								.SetCell(columnShift + 0' rowIndex' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  								.SetCell(columnShift + 1' rowIndex' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  								.SetCell(columnShift + 2' rowIndex' LocalizedStrings.Str128)  								.SetCell(columnShift + 3' rowIndex' LocalizedStrings.Time).SetStyle(columnShift + 3' "HH:mm:ss.fff")  								.SetCell(columnShift + 4' rowIndex' LocalizedStrings.Price).SetStyle(columnShift + 4' typeof(decimal))  								.SetCell(columnShift + 5' rowIndex' LocalizedStrings.Str1324)  								.SetCell(columnShift + 6' rowIndex' LocalizedStrings.State)  								.SetCell(columnShift + 7' rowIndex' LocalizedStrings.Volume).SetStyle(columnShift + 7' typeof(decimal))  								.SetCell(columnShift + 8' rowIndex' LocalizedStrings.Str1326)  								.SetCell(columnShift + 9' rowIndex' LocalizedStrings.Str1327)  								//.SetCell(columnShift + 10' rowIndex' LocalizedStrings.Str1352).SetStyle(columnShift + 9' typeof(long))  								;    							var stopParams = stopOrders[0].Condition.Parameters.Keys.ToArray();    							for (var i = 0; i < stopParams.Length; i++)  								worker.SetCell(columnShift + 11 + i' rowIndex' stopParams[i]);    							foreach (var order in stopOrders)  							{  								worker  									.SetCell(columnShift + 0' rowIndex' order.Id)  									.SetCell(columnShift + 1' rowIndex' order.TransactionId)  									.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  									.SetCell(columnShift + 3' rowIndex' Format(order.Time))  									.SetCell(columnShift + 4' rowIndex' order.Price)  									.SetCell(columnShift + 5' rowIndex' Format(order.State))  									.SetCell(columnShift + 6' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : string.Empty))  									.SetCell(columnShift + 7' rowIndex' order.Volume)  									.SetCell(columnShift + 8' rowIndex' Format(order.LatencyRegistration))  									.SetCell(columnShift + 9' rowIndex' Format(order.LatencyCancellation))  									//.SetCell(columnShift + 10' rowIndex' order.DerivedOrder != null ? (object)order.DerivedOrder.Id : string.Empty)  									;    								for (var i = 0; i < stopParams.Length; i++)  									worker.SetCell(columnShift + 11 + i' rowIndex' order.Condition.Parameters[stopParams[i]] ?? string.Empty);    								rowIndex++;  							}  						}  					}  				}    				worker.Save(FileName' true);  			}
Magic Number,StockSharp.Algo.Strategies.Reporting,ExcelStrategyReport,C:\repos\stocksharp_stocksharp\Algo\Strategies\Reporting\ExcelStrategyReport.cs,Generate,The following statement contains a magic number: using (var worker = hasTemplate ? new ExcelWorker() : new ExcelWorker(Template))  			{  				foreach (var strategy in Strategies)  				{  					if (Template.IsEmpty())  					{  						worker.RenameSheet(strategy.Name);  					}  					else  					{  						if (worker.ContainsSheet(strategy.Name))  							worker.AddSheet(strategy.Name);  					}    					worker  						.SetCell(0' 0' LocalizedStrings.Str1331)    						.SetCell(0' 1' LocalizedStrings.Security + ":")  						.SetCell(1' 1' strategy.Security != null ? strategy.Security.Id : string.Empty)    						.SetCell(0' 2' LocalizedStrings.Portfolio + ":")  						.SetCell(1' 2' strategy.Portfolio != null ? strategy.Portfolio.Name : string.Empty)    						.SetCell(0' 3' LocalizedStrings.Str1334)  						.SetCell(1' 3' Format(strategy.TotalWorkingTime))    						.SetCell(0' 4' LocalizedStrings.Str1335)  						//.SetCell(1' 4' FormatTime(base.Strategy.TotalCPUTime))    						.SetCell(0' 5' LocalizedStrings.Str862 + ":")  						.SetCell(1' 5' strategy.Position)    						.SetCell(0' 6' LocalizedStrings.PnL + ":")  						.SetCell(1' 6' strategy.PnL)    						.SetCell(0' 7' LocalizedStrings.Str159 + ":")  						.SetCell(1' 7' strategy.Commission)    						.SetCell(0' 8' LocalizedStrings.Str163 + ":")  						.SetCell(1' 8' strategy.Slippage)    						.SetCell(0' 9' LocalizedStrings.Str161 + ":")  						.SetCell(1' 9' Format(strategy.Latency));    					var rowIndex = 11;    					foreach (var parameter in strategy.StatisticManager.Parameters.SyncGet(c => c.ToArray()))  					{  						var value = parameter.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' parameter.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					rowIndex += 2;  					worker.SetCell(0' rowIndex' LocalizedStrings.Str1340);  					rowIndex++;    					foreach (var strategyParam in strategy.Parameters.CachedValues)  					{  						var value = strategyParam.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' strategyParam.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					//rowIndex += 2;  					//worker.SetCell(0' rowIndex' "Комиссия по типам:");  					//rowIndex++;    					//foreach (var group in Strategy.CommissionManager.Rules.SyncGet(c => c.ToArray()).GroupBy(c => c.GetType().GetDisplayName()))  					//{  					//	var commission = group.Sum(r => r.Commission);    					//	if (commission == 0)  					//		continue;    					//	worker  					//		.SetCell(0' rowIndex' group.Key)  					//		.SetCell(1' rowIndex' commission);    					//	rowIndex++;  					//}    					var columnShift = 3;    					worker  						.SetCell(columnShift + 0' 0' LocalizedStrings.Str985)    						.SetCell(columnShift + 0' 1' LocalizedStrings.Str1192).SetStyle(columnShift + 0' typeof(long))  						.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  						.SetCell(columnShift + 2' 1' LocalizedStrings.Time).SetStyle(columnShift + 2' "HH:mm:ss.fff")  						.SetCell(columnShift + 3' 1' LocalizedStrings.Price).SetStyle(columnShift + 3' typeof(decimal))  						.SetCell(columnShift + 4' 1' LocalizedStrings.Str1341).SetStyle(columnShift + 4' typeof(decimal))  						.SetCell(columnShift + 5' 1' LocalizedStrings.Volume).SetStyle(columnShift + 5' typeof(decimal))  						.SetCell(columnShift + 6' 1' LocalizedStrings.Str128)  						.SetCell(columnShift + 7' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 7' typeof(long))  						.SetCell(columnShift + 8' 1' LocalizedStrings.Str163).SetStyle(columnShift + 8' typeof(decimal))  						.SetCell(columnShift + 9' 1' LocalizedStrings.Str135)  						.SetCell(columnShift + 10' 1' LocalizedStrings.Str1342).SetStyle(columnShift + 11' typeof(decimal))  						.SetCell(columnShift + 11' 1' LocalizedStrings.Str1343).SetStyle(columnShift + 12' typeof(decimal))  						.SetCell(columnShift + 12' 1' LocalizedStrings.Str1344).SetStyle(columnShift + 13' typeof(decimal))  						.SetCell(columnShift + 13' 1' LocalizedStrings.Str1345).SetStyle(columnShift + 14' typeof(decimal))  						.SetCell(columnShift + 14' 1' LocalizedStrings.Str862).SetStyle(columnShift + 15' typeof(decimal));    					worker  						.SetConditionalFormatting(columnShift + 10' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 11' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 12' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 13' ComparisonOperator.Less' "0"' null' Colors.Red);    					var totalPnL = 0m;  					var position = 0m;    					var queues = new Dictionary<Security' PnLQueue>();    					rowIndex = 2;  					foreach (var trade in strategy.MyTrades.ToArray())  					{  						var info = strategy.PnLManager.ProcessMessage(trade.ToMessage());    						totalPnL += info.PnL;  						position += trade.GetPosition() ?? 0;    						var queue = queues.SafeAdd(trade.Trade.Security' key => new PnLQueue(key.ToSecurityId()));    						var localInfo = queue.Process(trade.ToMessage());    						worker  							.SetCell(columnShift + 0' rowIndex' trade.Trade.Id)  							.SetCell(columnShift + 1' rowIndex' trade.Order.TransactionId)  							.SetCell(columnShift + 2' rowIndex' Format(trade.Trade.Time))  							.SetCell(columnShift + 3' rowIndex' trade.Trade.Price)  							.SetCell(columnShift + 4' rowIndex' trade.Order.Price)  							.SetCell(columnShift + 5' rowIndex' trade.Trade.Volume)  							.SetCell(columnShift + 6' rowIndex' Format(trade.Order.Direction))  							.SetCell(columnShift + 7' rowIndex' trade.Order.Id)  							.SetCell(columnShift + 8' rowIndex' trade.Slippage)  							.SetCell(columnShift + 9' rowIndex' trade.Order.Comment)  							.SetCell(columnShift + 10' rowIndex' MathHelper.Round(info.PnL' Decimals))  							.SetCell(columnShift + 11' rowIndex' MathHelper.Round(localInfo.PnL' Decimals))  							.SetCell(columnShift + 12' rowIndex' MathHelper.Round(totalPnL' Decimals))  							.SetCell(columnShift + 13' rowIndex' MathHelper.Round(queue.RealizedPnL' Decimals))  							.SetCell(columnShift + 14' rowIndex' position);    						rowIndex++;  					}    					if (IncludeOrders)  					{  						columnShift += 17;    						worker  							.SetCell(columnShift + 0' 0' LocalizedStrings.Orders)    							.SetCell(columnShift + 0' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  							.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  							.SetCell(columnShift + 2' 1' LocalizedStrings.Str128)  							.SetCell(columnShift + 3' 1' LocalizedStrings.Str1346).SetStyle(columnShift + 3' "HH:mm:ss.fff")  							.SetCell(columnShift + 4' 1' LocalizedStrings.Str1347).SetStyle(columnShift + 4' "HH:mm:ss.fff")  							.SetCell(columnShift + 5' 1' LocalizedStrings.Str1348)  							.SetCell(columnShift + 6' 1' LocalizedStrings.Price).SetStyle(columnShift + 6' typeof(decimal))  							.SetCell(columnShift + 7' 1' LocalizedStrings.Str1323).SetStyle(columnShift + 7' typeof(decimal))  							.SetCell(columnShift + 8' 1' LocalizedStrings.Str1324)  							.SetCell(columnShift + 9' 1' LocalizedStrings.State)  							.SetCell(columnShift + 10' 1' LocalizedStrings.Str1325).SetStyle(columnShift + 10' typeof(decimal))  							.SetCell(columnShift + 11' 1' LocalizedStrings.Volume).SetStyle(columnShift + 11' typeof(decimal))  							.SetCell(columnShift + 12' 1' LocalizedStrings.Type)  							.SetCell(columnShift + 13' 1' LocalizedStrings.Str1326)  							.SetCell(columnShift + 14' 1' LocalizedStrings.Str1327)  							.SetCell(columnShift + 15' 1' LocalizedStrings.Str135);    						worker  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str1329)' null' Colors.Green)  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str238)' null' Colors.Red);    						rowIndex = 2;  						foreach (var order in strategy.Orders.ToArray())  						{  							worker  								.SetCell(columnShift + 0' rowIndex' order.Id)  								.SetCell(columnShift + 1' rowIndex' order.TransactionId)  								.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  								.SetCell(columnShift + 3' rowIndex' Format(order.Time))  								.SetCell(columnShift + 4' rowIndex' Format(order.LastChangeTime))  								.SetCell(columnShift + 5' rowIndex' Format(order.LastChangeTime - order.Time))  								.SetCell(columnShift + 6' rowIndex' order.Price)  								.SetCell(columnShift + 7' rowIndex' MathHelper.Round(order.GetAveragePrice(strategy.Connector)' Decimals))  								.SetCell(columnShift + 8' rowIndex' Format(order.State))  								.SetCell(columnShift + 9' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : LocalizedStrings.Str238))  								.SetCell(columnShift + 10' rowIndex' order.Balance)  								.SetCell(columnShift + 11' rowIndex' order.Volume)  								.SetCell(columnShift + 12' rowIndex' Format(order.Type))  								.SetCell(columnShift + 13' rowIndex' Format(order.LatencyRegistration))  								.SetCell(columnShift + 14' rowIndex' Format(order.LatencyCancellation))  								.SetCell(columnShift + 15' rowIndex' order.Comment);    							rowIndex++;  						}    						var stopOrders = strategy.StopOrders.ToArray();    						if (stopOrders.Length > 0)  						{  							rowIndex += 2;    							worker  								.SetCell(columnShift + 0' rowIndex - 1' LocalizedStrings.Str1351)    								.SetCell(columnShift + 0' rowIndex' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  								.SetCell(columnShift + 1' rowIndex' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  								.SetCell(columnShift + 2' rowIndex' LocalizedStrings.Str128)  								.SetCell(columnShift + 3' rowIndex' LocalizedStrings.Time).SetStyle(columnShift + 3' "HH:mm:ss.fff")  								.SetCell(columnShift + 4' rowIndex' LocalizedStrings.Price).SetStyle(columnShift + 4' typeof(decimal))  								.SetCell(columnShift + 5' rowIndex' LocalizedStrings.Str1324)  								.SetCell(columnShift + 6' rowIndex' LocalizedStrings.State)  								.SetCell(columnShift + 7' rowIndex' LocalizedStrings.Volume).SetStyle(columnShift + 7' typeof(decimal))  								.SetCell(columnShift + 8' rowIndex' LocalizedStrings.Str1326)  								.SetCell(columnShift + 9' rowIndex' LocalizedStrings.Str1327)  								//.SetCell(columnShift + 10' rowIndex' LocalizedStrings.Str1352).SetStyle(columnShift + 9' typeof(long))  								;    							var stopParams = stopOrders[0].Condition.Parameters.Keys.ToArray();    							for (var i = 0; i < stopParams.Length; i++)  								worker.SetCell(columnShift + 11 + i' rowIndex' stopParams[i]);    							foreach (var order in stopOrders)  							{  								worker  									.SetCell(columnShift + 0' rowIndex' order.Id)  									.SetCell(columnShift + 1' rowIndex' order.TransactionId)  									.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  									.SetCell(columnShift + 3' rowIndex' Format(order.Time))  									.SetCell(columnShift + 4' rowIndex' order.Price)  									.SetCell(columnShift + 5' rowIndex' Format(order.State))  									.SetCell(columnShift + 6' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : string.Empty))  									.SetCell(columnShift + 7' rowIndex' order.Volume)  									.SetCell(columnShift + 8' rowIndex' Format(order.LatencyRegistration))  									.SetCell(columnShift + 9' rowIndex' Format(order.LatencyCancellation))  									//.SetCell(columnShift + 10' rowIndex' order.DerivedOrder != null ? (object)order.DerivedOrder.Id : string.Empty)  									;    								for (var i = 0; i < stopParams.Length; i++)  									worker.SetCell(columnShift + 11 + i' rowIndex' order.Condition.Parameters[stopParams[i]] ?? string.Empty);    								rowIndex++;  							}  						}  					}  				}    				worker.Save(FileName' true);  			}
Magic Number,StockSharp.Algo.Strategies.Reporting,ExcelStrategyReport,C:\repos\stocksharp_stocksharp\Algo\Strategies\Reporting\ExcelStrategyReport.cs,Generate,The following statement contains a magic number: using (var worker = hasTemplate ? new ExcelWorker() : new ExcelWorker(Template))  			{  				foreach (var strategy in Strategies)  				{  					if (Template.IsEmpty())  					{  						worker.RenameSheet(strategy.Name);  					}  					else  					{  						if (worker.ContainsSheet(strategy.Name))  							worker.AddSheet(strategy.Name);  					}    					worker  						.SetCell(0' 0' LocalizedStrings.Str1331)    						.SetCell(0' 1' LocalizedStrings.Security + ":")  						.SetCell(1' 1' strategy.Security != null ? strategy.Security.Id : string.Empty)    						.SetCell(0' 2' LocalizedStrings.Portfolio + ":")  						.SetCell(1' 2' strategy.Portfolio != null ? strategy.Portfolio.Name : string.Empty)    						.SetCell(0' 3' LocalizedStrings.Str1334)  						.SetCell(1' 3' Format(strategy.TotalWorkingTime))    						.SetCell(0' 4' LocalizedStrings.Str1335)  						//.SetCell(1' 4' FormatTime(base.Strategy.TotalCPUTime))    						.SetCell(0' 5' LocalizedStrings.Str862 + ":")  						.SetCell(1' 5' strategy.Position)    						.SetCell(0' 6' LocalizedStrings.PnL + ":")  						.SetCell(1' 6' strategy.PnL)    						.SetCell(0' 7' LocalizedStrings.Str159 + ":")  						.SetCell(1' 7' strategy.Commission)    						.SetCell(0' 8' LocalizedStrings.Str163 + ":")  						.SetCell(1' 8' strategy.Slippage)    						.SetCell(0' 9' LocalizedStrings.Str161 + ":")  						.SetCell(1' 9' Format(strategy.Latency));    					var rowIndex = 11;    					foreach (var parameter in strategy.StatisticManager.Parameters.SyncGet(c => c.ToArray()))  					{  						var value = parameter.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' parameter.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					rowIndex += 2;  					worker.SetCell(0' rowIndex' LocalizedStrings.Str1340);  					rowIndex++;    					foreach (var strategyParam in strategy.Parameters.CachedValues)  					{  						var value = strategyParam.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' strategyParam.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					//rowIndex += 2;  					//worker.SetCell(0' rowIndex' "Комиссия по типам:");  					//rowIndex++;    					//foreach (var group in Strategy.CommissionManager.Rules.SyncGet(c => c.ToArray()).GroupBy(c => c.GetType().GetDisplayName()))  					//{  					//	var commission = group.Sum(r => r.Commission);    					//	if (commission == 0)  					//		continue;    					//	worker  					//		.SetCell(0' rowIndex' group.Key)  					//		.SetCell(1' rowIndex' commission);    					//	rowIndex++;  					//}    					var columnShift = 3;    					worker  						.SetCell(columnShift + 0' 0' LocalizedStrings.Str985)    						.SetCell(columnShift + 0' 1' LocalizedStrings.Str1192).SetStyle(columnShift + 0' typeof(long))  						.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  						.SetCell(columnShift + 2' 1' LocalizedStrings.Time).SetStyle(columnShift + 2' "HH:mm:ss.fff")  						.SetCell(columnShift + 3' 1' LocalizedStrings.Price).SetStyle(columnShift + 3' typeof(decimal))  						.SetCell(columnShift + 4' 1' LocalizedStrings.Str1341).SetStyle(columnShift + 4' typeof(decimal))  						.SetCell(columnShift + 5' 1' LocalizedStrings.Volume).SetStyle(columnShift + 5' typeof(decimal))  						.SetCell(columnShift + 6' 1' LocalizedStrings.Str128)  						.SetCell(columnShift + 7' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 7' typeof(long))  						.SetCell(columnShift + 8' 1' LocalizedStrings.Str163).SetStyle(columnShift + 8' typeof(decimal))  						.SetCell(columnShift + 9' 1' LocalizedStrings.Str135)  						.SetCell(columnShift + 10' 1' LocalizedStrings.Str1342).SetStyle(columnShift + 11' typeof(decimal))  						.SetCell(columnShift + 11' 1' LocalizedStrings.Str1343).SetStyle(columnShift + 12' typeof(decimal))  						.SetCell(columnShift + 12' 1' LocalizedStrings.Str1344).SetStyle(columnShift + 13' typeof(decimal))  						.SetCell(columnShift + 13' 1' LocalizedStrings.Str1345).SetStyle(columnShift + 14' typeof(decimal))  						.SetCell(columnShift + 14' 1' LocalizedStrings.Str862).SetStyle(columnShift + 15' typeof(decimal));    					worker  						.SetConditionalFormatting(columnShift + 10' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 11' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 12' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 13' ComparisonOperator.Less' "0"' null' Colors.Red);    					var totalPnL = 0m;  					var position = 0m;    					var queues = new Dictionary<Security' PnLQueue>();    					rowIndex = 2;  					foreach (var trade in strategy.MyTrades.ToArray())  					{  						var info = strategy.PnLManager.ProcessMessage(trade.ToMessage());    						totalPnL += info.PnL;  						position += trade.GetPosition() ?? 0;    						var queue = queues.SafeAdd(trade.Trade.Security' key => new PnLQueue(key.ToSecurityId()));    						var localInfo = queue.Process(trade.ToMessage());    						worker  							.SetCell(columnShift + 0' rowIndex' trade.Trade.Id)  							.SetCell(columnShift + 1' rowIndex' trade.Order.TransactionId)  							.SetCell(columnShift + 2' rowIndex' Format(trade.Trade.Time))  							.SetCell(columnShift + 3' rowIndex' trade.Trade.Price)  							.SetCell(columnShift + 4' rowIndex' trade.Order.Price)  							.SetCell(columnShift + 5' rowIndex' trade.Trade.Volume)  							.SetCell(columnShift + 6' rowIndex' Format(trade.Order.Direction))  							.SetCell(columnShift + 7' rowIndex' trade.Order.Id)  							.SetCell(columnShift + 8' rowIndex' trade.Slippage)  							.SetCell(columnShift + 9' rowIndex' trade.Order.Comment)  							.SetCell(columnShift + 10' rowIndex' MathHelper.Round(info.PnL' Decimals))  							.SetCell(columnShift + 11' rowIndex' MathHelper.Round(localInfo.PnL' Decimals))  							.SetCell(columnShift + 12' rowIndex' MathHelper.Round(totalPnL' Decimals))  							.SetCell(columnShift + 13' rowIndex' MathHelper.Round(queue.RealizedPnL' Decimals))  							.SetCell(columnShift + 14' rowIndex' position);    						rowIndex++;  					}    					if (IncludeOrders)  					{  						columnShift += 17;    						worker  							.SetCell(columnShift + 0' 0' LocalizedStrings.Orders)    							.SetCell(columnShift + 0' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  							.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  							.SetCell(columnShift + 2' 1' LocalizedStrings.Str128)  							.SetCell(columnShift + 3' 1' LocalizedStrings.Str1346).SetStyle(columnShift + 3' "HH:mm:ss.fff")  							.SetCell(columnShift + 4' 1' LocalizedStrings.Str1347).SetStyle(columnShift + 4' "HH:mm:ss.fff")  							.SetCell(columnShift + 5' 1' LocalizedStrings.Str1348)  							.SetCell(columnShift + 6' 1' LocalizedStrings.Price).SetStyle(columnShift + 6' typeof(decimal))  							.SetCell(columnShift + 7' 1' LocalizedStrings.Str1323).SetStyle(columnShift + 7' typeof(decimal))  							.SetCell(columnShift + 8' 1' LocalizedStrings.Str1324)  							.SetCell(columnShift + 9' 1' LocalizedStrings.State)  							.SetCell(columnShift + 10' 1' LocalizedStrings.Str1325).SetStyle(columnShift + 10' typeof(decimal))  							.SetCell(columnShift + 11' 1' LocalizedStrings.Volume).SetStyle(columnShift + 11' typeof(decimal))  							.SetCell(columnShift + 12' 1' LocalizedStrings.Type)  							.SetCell(columnShift + 13' 1' LocalizedStrings.Str1326)  							.SetCell(columnShift + 14' 1' LocalizedStrings.Str1327)  							.SetCell(columnShift + 15' 1' LocalizedStrings.Str135);    						worker  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str1329)' null' Colors.Green)  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str238)' null' Colors.Red);    						rowIndex = 2;  						foreach (var order in strategy.Orders.ToArray())  						{  							worker  								.SetCell(columnShift + 0' rowIndex' order.Id)  								.SetCell(columnShift + 1' rowIndex' order.TransactionId)  								.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  								.SetCell(columnShift + 3' rowIndex' Format(order.Time))  								.SetCell(columnShift + 4' rowIndex' Format(order.LastChangeTime))  								.SetCell(columnShift + 5' rowIndex' Format(order.LastChangeTime - order.Time))  								.SetCell(columnShift + 6' rowIndex' order.Price)  								.SetCell(columnShift + 7' rowIndex' MathHelper.Round(order.GetAveragePrice(strategy.Connector)' Decimals))  								.SetCell(columnShift + 8' rowIndex' Format(order.State))  								.SetCell(columnShift + 9' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : LocalizedStrings.Str238))  								.SetCell(columnShift + 10' rowIndex' order.Balance)  								.SetCell(columnShift + 11' rowIndex' order.Volume)  								.SetCell(columnShift + 12' rowIndex' Format(order.Type))  								.SetCell(columnShift + 13' rowIndex' Format(order.LatencyRegistration))  								.SetCell(columnShift + 14' rowIndex' Format(order.LatencyCancellation))  								.SetCell(columnShift + 15' rowIndex' order.Comment);    							rowIndex++;  						}    						var stopOrders = strategy.StopOrders.ToArray();    						if (stopOrders.Length > 0)  						{  							rowIndex += 2;    							worker  								.SetCell(columnShift + 0' rowIndex - 1' LocalizedStrings.Str1351)    								.SetCell(columnShift + 0' rowIndex' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  								.SetCell(columnShift + 1' rowIndex' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  								.SetCell(columnShift + 2' rowIndex' LocalizedStrings.Str128)  								.SetCell(columnShift + 3' rowIndex' LocalizedStrings.Time).SetStyle(columnShift + 3' "HH:mm:ss.fff")  								.SetCell(columnShift + 4' rowIndex' LocalizedStrings.Price).SetStyle(columnShift + 4' typeof(decimal))  								.SetCell(columnShift + 5' rowIndex' LocalizedStrings.Str1324)  								.SetCell(columnShift + 6' rowIndex' LocalizedStrings.State)  								.SetCell(columnShift + 7' rowIndex' LocalizedStrings.Volume).SetStyle(columnShift + 7' typeof(decimal))  								.SetCell(columnShift + 8' rowIndex' LocalizedStrings.Str1326)  								.SetCell(columnShift + 9' rowIndex' LocalizedStrings.Str1327)  								//.SetCell(columnShift + 10' rowIndex' LocalizedStrings.Str1352).SetStyle(columnShift + 9' typeof(long))  								;    							var stopParams = stopOrders[0].Condition.Parameters.Keys.ToArray();    							for (var i = 0; i < stopParams.Length; i++)  								worker.SetCell(columnShift + 11 + i' rowIndex' stopParams[i]);    							foreach (var order in stopOrders)  							{  								worker  									.SetCell(columnShift + 0' rowIndex' order.Id)  									.SetCell(columnShift + 1' rowIndex' order.TransactionId)  									.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  									.SetCell(columnShift + 3' rowIndex' Format(order.Time))  									.SetCell(columnShift + 4' rowIndex' order.Price)  									.SetCell(columnShift + 5' rowIndex' Format(order.State))  									.SetCell(columnShift + 6' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : string.Empty))  									.SetCell(columnShift + 7' rowIndex' order.Volume)  									.SetCell(columnShift + 8' rowIndex' Format(order.LatencyRegistration))  									.SetCell(columnShift + 9' rowIndex' Format(order.LatencyCancellation))  									//.SetCell(columnShift + 10' rowIndex' order.DerivedOrder != null ? (object)order.DerivedOrder.Id : string.Empty)  									;    								for (var i = 0; i < stopParams.Length; i++)  									worker.SetCell(columnShift + 11 + i' rowIndex' order.Condition.Parameters[stopParams[i]] ?? string.Empty);    								rowIndex++;  							}  						}  					}  				}    				worker.Save(FileName' true);  			}
Magic Number,StockSharp.Algo.Strategies.Reporting,ExcelStrategyReport,C:\repos\stocksharp_stocksharp\Algo\Strategies\Reporting\ExcelStrategyReport.cs,Generate,The following statement contains a magic number: using (var worker = hasTemplate ? new ExcelWorker() : new ExcelWorker(Template))  			{  				foreach (var strategy in Strategies)  				{  					if (Template.IsEmpty())  					{  						worker.RenameSheet(strategy.Name);  					}  					else  					{  						if (worker.ContainsSheet(strategy.Name))  							worker.AddSheet(strategy.Name);  					}    					worker  						.SetCell(0' 0' LocalizedStrings.Str1331)    						.SetCell(0' 1' LocalizedStrings.Security + ":")  						.SetCell(1' 1' strategy.Security != null ? strategy.Security.Id : string.Empty)    						.SetCell(0' 2' LocalizedStrings.Portfolio + ":")  						.SetCell(1' 2' strategy.Portfolio != null ? strategy.Portfolio.Name : string.Empty)    						.SetCell(0' 3' LocalizedStrings.Str1334)  						.SetCell(1' 3' Format(strategy.TotalWorkingTime))    						.SetCell(0' 4' LocalizedStrings.Str1335)  						//.SetCell(1' 4' FormatTime(base.Strategy.TotalCPUTime))    						.SetCell(0' 5' LocalizedStrings.Str862 + ":")  						.SetCell(1' 5' strategy.Position)    						.SetCell(0' 6' LocalizedStrings.PnL + ":")  						.SetCell(1' 6' strategy.PnL)    						.SetCell(0' 7' LocalizedStrings.Str159 + ":")  						.SetCell(1' 7' strategy.Commission)    						.SetCell(0' 8' LocalizedStrings.Str163 + ":")  						.SetCell(1' 8' strategy.Slippage)    						.SetCell(0' 9' LocalizedStrings.Str161 + ":")  						.SetCell(1' 9' Format(strategy.Latency));    					var rowIndex = 11;    					foreach (var parameter in strategy.StatisticManager.Parameters.SyncGet(c => c.ToArray()))  					{  						var value = parameter.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' parameter.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					rowIndex += 2;  					worker.SetCell(0' rowIndex' LocalizedStrings.Str1340);  					rowIndex++;    					foreach (var strategyParam in strategy.Parameters.CachedValues)  					{  						var value = strategyParam.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' strategyParam.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					//rowIndex += 2;  					//worker.SetCell(0' rowIndex' "Комиссия по типам:");  					//rowIndex++;    					//foreach (var group in Strategy.CommissionManager.Rules.SyncGet(c => c.ToArray()).GroupBy(c => c.GetType().GetDisplayName()))  					//{  					//	var commission = group.Sum(r => r.Commission);    					//	if (commission == 0)  					//		continue;    					//	worker  					//		.SetCell(0' rowIndex' group.Key)  					//		.SetCell(1' rowIndex' commission);    					//	rowIndex++;  					//}    					var columnShift = 3;    					worker  						.SetCell(columnShift + 0' 0' LocalizedStrings.Str985)    						.SetCell(columnShift + 0' 1' LocalizedStrings.Str1192).SetStyle(columnShift + 0' typeof(long))  						.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  						.SetCell(columnShift + 2' 1' LocalizedStrings.Time).SetStyle(columnShift + 2' "HH:mm:ss.fff")  						.SetCell(columnShift + 3' 1' LocalizedStrings.Price).SetStyle(columnShift + 3' typeof(decimal))  						.SetCell(columnShift + 4' 1' LocalizedStrings.Str1341).SetStyle(columnShift + 4' typeof(decimal))  						.SetCell(columnShift + 5' 1' LocalizedStrings.Volume).SetStyle(columnShift + 5' typeof(decimal))  						.SetCell(columnShift + 6' 1' LocalizedStrings.Str128)  						.SetCell(columnShift + 7' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 7' typeof(long))  						.SetCell(columnShift + 8' 1' LocalizedStrings.Str163).SetStyle(columnShift + 8' typeof(decimal))  						.SetCell(columnShift + 9' 1' LocalizedStrings.Str135)  						.SetCell(columnShift + 10' 1' LocalizedStrings.Str1342).SetStyle(columnShift + 11' typeof(decimal))  						.SetCell(columnShift + 11' 1' LocalizedStrings.Str1343).SetStyle(columnShift + 12' typeof(decimal))  						.SetCell(columnShift + 12' 1' LocalizedStrings.Str1344).SetStyle(columnShift + 13' typeof(decimal))  						.SetCell(columnShift + 13' 1' LocalizedStrings.Str1345).SetStyle(columnShift + 14' typeof(decimal))  						.SetCell(columnShift + 14' 1' LocalizedStrings.Str862).SetStyle(columnShift + 15' typeof(decimal));    					worker  						.SetConditionalFormatting(columnShift + 10' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 11' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 12' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 13' ComparisonOperator.Less' "0"' null' Colors.Red);    					var totalPnL = 0m;  					var position = 0m;    					var queues = new Dictionary<Security' PnLQueue>();    					rowIndex = 2;  					foreach (var trade in strategy.MyTrades.ToArray())  					{  						var info = strategy.PnLManager.ProcessMessage(trade.ToMessage());    						totalPnL += info.PnL;  						position += trade.GetPosition() ?? 0;    						var queue = queues.SafeAdd(trade.Trade.Security' key => new PnLQueue(key.ToSecurityId()));    						var localInfo = queue.Process(trade.ToMessage());    						worker  							.SetCell(columnShift + 0' rowIndex' trade.Trade.Id)  							.SetCell(columnShift + 1' rowIndex' trade.Order.TransactionId)  							.SetCell(columnShift + 2' rowIndex' Format(trade.Trade.Time))  							.SetCell(columnShift + 3' rowIndex' trade.Trade.Price)  							.SetCell(columnShift + 4' rowIndex' trade.Order.Price)  							.SetCell(columnShift + 5' rowIndex' trade.Trade.Volume)  							.SetCell(columnShift + 6' rowIndex' Format(trade.Order.Direction))  							.SetCell(columnShift + 7' rowIndex' trade.Order.Id)  							.SetCell(columnShift + 8' rowIndex' trade.Slippage)  							.SetCell(columnShift + 9' rowIndex' trade.Order.Comment)  							.SetCell(columnShift + 10' rowIndex' MathHelper.Round(info.PnL' Decimals))  							.SetCell(columnShift + 11' rowIndex' MathHelper.Round(localInfo.PnL' Decimals))  							.SetCell(columnShift + 12' rowIndex' MathHelper.Round(totalPnL' Decimals))  							.SetCell(columnShift + 13' rowIndex' MathHelper.Round(queue.RealizedPnL' Decimals))  							.SetCell(columnShift + 14' rowIndex' position);    						rowIndex++;  					}    					if (IncludeOrders)  					{  						columnShift += 17;    						worker  							.SetCell(columnShift + 0' 0' LocalizedStrings.Orders)    							.SetCell(columnShift + 0' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  							.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  							.SetCell(columnShift + 2' 1' LocalizedStrings.Str128)  							.SetCell(columnShift + 3' 1' LocalizedStrings.Str1346).SetStyle(columnShift + 3' "HH:mm:ss.fff")  							.SetCell(columnShift + 4' 1' LocalizedStrings.Str1347).SetStyle(columnShift + 4' "HH:mm:ss.fff")  							.SetCell(columnShift + 5' 1' LocalizedStrings.Str1348)  							.SetCell(columnShift + 6' 1' LocalizedStrings.Price).SetStyle(columnShift + 6' typeof(decimal))  							.SetCell(columnShift + 7' 1' LocalizedStrings.Str1323).SetStyle(columnShift + 7' typeof(decimal))  							.SetCell(columnShift + 8' 1' LocalizedStrings.Str1324)  							.SetCell(columnShift + 9' 1' LocalizedStrings.State)  							.SetCell(columnShift + 10' 1' LocalizedStrings.Str1325).SetStyle(columnShift + 10' typeof(decimal))  							.SetCell(columnShift + 11' 1' LocalizedStrings.Volume).SetStyle(columnShift + 11' typeof(decimal))  							.SetCell(columnShift + 12' 1' LocalizedStrings.Type)  							.SetCell(columnShift + 13' 1' LocalizedStrings.Str1326)  							.SetCell(columnShift + 14' 1' LocalizedStrings.Str1327)  							.SetCell(columnShift + 15' 1' LocalizedStrings.Str135);    						worker  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str1329)' null' Colors.Green)  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str238)' null' Colors.Red);    						rowIndex = 2;  						foreach (var order in strategy.Orders.ToArray())  						{  							worker  								.SetCell(columnShift + 0' rowIndex' order.Id)  								.SetCell(columnShift + 1' rowIndex' order.TransactionId)  								.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  								.SetCell(columnShift + 3' rowIndex' Format(order.Time))  								.SetCell(columnShift + 4' rowIndex' Format(order.LastChangeTime))  								.SetCell(columnShift + 5' rowIndex' Format(order.LastChangeTime - order.Time))  								.SetCell(columnShift + 6' rowIndex' order.Price)  								.SetCell(columnShift + 7' rowIndex' MathHelper.Round(order.GetAveragePrice(strategy.Connector)' Decimals))  								.SetCell(columnShift + 8' rowIndex' Format(order.State))  								.SetCell(columnShift + 9' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : LocalizedStrings.Str238))  								.SetCell(columnShift + 10' rowIndex' order.Balance)  								.SetCell(columnShift + 11' rowIndex' order.Volume)  								.SetCell(columnShift + 12' rowIndex' Format(order.Type))  								.SetCell(columnShift + 13' rowIndex' Format(order.LatencyRegistration))  								.SetCell(columnShift + 14' rowIndex' Format(order.LatencyCancellation))  								.SetCell(columnShift + 15' rowIndex' order.Comment);    							rowIndex++;  						}    						var stopOrders = strategy.StopOrders.ToArray();    						if (stopOrders.Length > 0)  						{  							rowIndex += 2;    							worker  								.SetCell(columnShift + 0' rowIndex - 1' LocalizedStrings.Str1351)    								.SetCell(columnShift + 0' rowIndex' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  								.SetCell(columnShift + 1' rowIndex' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  								.SetCell(columnShift + 2' rowIndex' LocalizedStrings.Str128)  								.SetCell(columnShift + 3' rowIndex' LocalizedStrings.Time).SetStyle(columnShift + 3' "HH:mm:ss.fff")  								.SetCell(columnShift + 4' rowIndex' LocalizedStrings.Price).SetStyle(columnShift + 4' typeof(decimal))  								.SetCell(columnShift + 5' rowIndex' LocalizedStrings.Str1324)  								.SetCell(columnShift + 6' rowIndex' LocalizedStrings.State)  								.SetCell(columnShift + 7' rowIndex' LocalizedStrings.Volume).SetStyle(columnShift + 7' typeof(decimal))  								.SetCell(columnShift + 8' rowIndex' LocalizedStrings.Str1326)  								.SetCell(columnShift + 9' rowIndex' LocalizedStrings.Str1327)  								//.SetCell(columnShift + 10' rowIndex' LocalizedStrings.Str1352).SetStyle(columnShift + 9' typeof(long))  								;    							var stopParams = stopOrders[0].Condition.Parameters.Keys.ToArray();    							for (var i = 0; i < stopParams.Length; i++)  								worker.SetCell(columnShift + 11 + i' rowIndex' stopParams[i]);    							foreach (var order in stopOrders)  							{  								worker  									.SetCell(columnShift + 0' rowIndex' order.Id)  									.SetCell(columnShift + 1' rowIndex' order.TransactionId)  									.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  									.SetCell(columnShift + 3' rowIndex' Format(order.Time))  									.SetCell(columnShift + 4' rowIndex' order.Price)  									.SetCell(columnShift + 5' rowIndex' Format(order.State))  									.SetCell(columnShift + 6' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : string.Empty))  									.SetCell(columnShift + 7' rowIndex' order.Volume)  									.SetCell(columnShift + 8' rowIndex' Format(order.LatencyRegistration))  									.SetCell(columnShift + 9' rowIndex' Format(order.LatencyCancellation))  									//.SetCell(columnShift + 10' rowIndex' order.DerivedOrder != null ? (object)order.DerivedOrder.Id : string.Empty)  									;    								for (var i = 0; i < stopParams.Length; i++)  									worker.SetCell(columnShift + 11 + i' rowIndex' order.Condition.Parameters[stopParams[i]] ?? string.Empty);    								rowIndex++;  							}  						}  					}  				}    				worker.Save(FileName' true);  			}
Magic Number,StockSharp.Algo.Strategies.Reporting,ExcelStrategyReport,C:\repos\stocksharp_stocksharp\Algo\Strategies\Reporting\ExcelStrategyReport.cs,Generate,The following statement contains a magic number: using (var worker = hasTemplate ? new ExcelWorker() : new ExcelWorker(Template))  			{  				foreach (var strategy in Strategies)  				{  					if (Template.IsEmpty())  					{  						worker.RenameSheet(strategy.Name);  					}  					else  					{  						if (worker.ContainsSheet(strategy.Name))  							worker.AddSheet(strategy.Name);  					}    					worker  						.SetCell(0' 0' LocalizedStrings.Str1331)    						.SetCell(0' 1' LocalizedStrings.Security + ":")  						.SetCell(1' 1' strategy.Security != null ? strategy.Security.Id : string.Empty)    						.SetCell(0' 2' LocalizedStrings.Portfolio + ":")  						.SetCell(1' 2' strategy.Portfolio != null ? strategy.Portfolio.Name : string.Empty)    						.SetCell(0' 3' LocalizedStrings.Str1334)  						.SetCell(1' 3' Format(strategy.TotalWorkingTime))    						.SetCell(0' 4' LocalizedStrings.Str1335)  						//.SetCell(1' 4' FormatTime(base.Strategy.TotalCPUTime))    						.SetCell(0' 5' LocalizedStrings.Str862 + ":")  						.SetCell(1' 5' strategy.Position)    						.SetCell(0' 6' LocalizedStrings.PnL + ":")  						.SetCell(1' 6' strategy.PnL)    						.SetCell(0' 7' LocalizedStrings.Str159 + ":")  						.SetCell(1' 7' strategy.Commission)    						.SetCell(0' 8' LocalizedStrings.Str163 + ":")  						.SetCell(1' 8' strategy.Slippage)    						.SetCell(0' 9' LocalizedStrings.Str161 + ":")  						.SetCell(1' 9' Format(strategy.Latency));    					var rowIndex = 11;    					foreach (var parameter in strategy.StatisticManager.Parameters.SyncGet(c => c.ToArray()))  					{  						var value = parameter.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' parameter.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					rowIndex += 2;  					worker.SetCell(0' rowIndex' LocalizedStrings.Str1340);  					rowIndex++;    					foreach (var strategyParam in strategy.Parameters.CachedValues)  					{  						var value = strategyParam.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' strategyParam.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					//rowIndex += 2;  					//worker.SetCell(0' rowIndex' "Комиссия по типам:");  					//rowIndex++;    					//foreach (var group in Strategy.CommissionManager.Rules.SyncGet(c => c.ToArray()).GroupBy(c => c.GetType().GetDisplayName()))  					//{  					//	var commission = group.Sum(r => r.Commission);    					//	if (commission == 0)  					//		continue;    					//	worker  					//		.SetCell(0' rowIndex' group.Key)  					//		.SetCell(1' rowIndex' commission);    					//	rowIndex++;  					//}    					var columnShift = 3;    					worker  						.SetCell(columnShift + 0' 0' LocalizedStrings.Str985)    						.SetCell(columnShift + 0' 1' LocalizedStrings.Str1192).SetStyle(columnShift + 0' typeof(long))  						.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  						.SetCell(columnShift + 2' 1' LocalizedStrings.Time).SetStyle(columnShift + 2' "HH:mm:ss.fff")  						.SetCell(columnShift + 3' 1' LocalizedStrings.Price).SetStyle(columnShift + 3' typeof(decimal))  						.SetCell(columnShift + 4' 1' LocalizedStrings.Str1341).SetStyle(columnShift + 4' typeof(decimal))  						.SetCell(columnShift + 5' 1' LocalizedStrings.Volume).SetStyle(columnShift + 5' typeof(decimal))  						.SetCell(columnShift + 6' 1' LocalizedStrings.Str128)  						.SetCell(columnShift + 7' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 7' typeof(long))  						.SetCell(columnShift + 8' 1' LocalizedStrings.Str163).SetStyle(columnShift + 8' typeof(decimal))  						.SetCell(columnShift + 9' 1' LocalizedStrings.Str135)  						.SetCell(columnShift + 10' 1' LocalizedStrings.Str1342).SetStyle(columnShift + 11' typeof(decimal))  						.SetCell(columnShift + 11' 1' LocalizedStrings.Str1343).SetStyle(columnShift + 12' typeof(decimal))  						.SetCell(columnShift + 12' 1' LocalizedStrings.Str1344).SetStyle(columnShift + 13' typeof(decimal))  						.SetCell(columnShift + 13' 1' LocalizedStrings.Str1345).SetStyle(columnShift + 14' typeof(decimal))  						.SetCell(columnShift + 14' 1' LocalizedStrings.Str862).SetStyle(columnShift + 15' typeof(decimal));    					worker  						.SetConditionalFormatting(columnShift + 10' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 11' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 12' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 13' ComparisonOperator.Less' "0"' null' Colors.Red);    					var totalPnL = 0m;  					var position = 0m;    					var queues = new Dictionary<Security' PnLQueue>();    					rowIndex = 2;  					foreach (var trade in strategy.MyTrades.ToArray())  					{  						var info = strategy.PnLManager.ProcessMessage(trade.ToMessage());    						totalPnL += info.PnL;  						position += trade.GetPosition() ?? 0;    						var queue = queues.SafeAdd(trade.Trade.Security' key => new PnLQueue(key.ToSecurityId()));    						var localInfo = queue.Process(trade.ToMessage());    						worker  							.SetCell(columnShift + 0' rowIndex' trade.Trade.Id)  							.SetCell(columnShift + 1' rowIndex' trade.Order.TransactionId)  							.SetCell(columnShift + 2' rowIndex' Format(trade.Trade.Time))  							.SetCell(columnShift + 3' rowIndex' trade.Trade.Price)  							.SetCell(columnShift + 4' rowIndex' trade.Order.Price)  							.SetCell(columnShift + 5' rowIndex' trade.Trade.Volume)  							.SetCell(columnShift + 6' rowIndex' Format(trade.Order.Direction))  							.SetCell(columnShift + 7' rowIndex' trade.Order.Id)  							.SetCell(columnShift + 8' rowIndex' trade.Slippage)  							.SetCell(columnShift + 9' rowIndex' trade.Order.Comment)  							.SetCell(columnShift + 10' rowIndex' MathHelper.Round(info.PnL' Decimals))  							.SetCell(columnShift + 11' rowIndex' MathHelper.Round(localInfo.PnL' Decimals))  							.SetCell(columnShift + 12' rowIndex' MathHelper.Round(totalPnL' Decimals))  							.SetCell(columnShift + 13' rowIndex' MathHelper.Round(queue.RealizedPnL' Decimals))  							.SetCell(columnShift + 14' rowIndex' position);    						rowIndex++;  					}    					if (IncludeOrders)  					{  						columnShift += 17;    						worker  							.SetCell(columnShift + 0' 0' LocalizedStrings.Orders)    							.SetCell(columnShift + 0' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  							.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  							.SetCell(columnShift + 2' 1' LocalizedStrings.Str128)  							.SetCell(columnShift + 3' 1' LocalizedStrings.Str1346).SetStyle(columnShift + 3' "HH:mm:ss.fff")  							.SetCell(columnShift + 4' 1' LocalizedStrings.Str1347).SetStyle(columnShift + 4' "HH:mm:ss.fff")  							.SetCell(columnShift + 5' 1' LocalizedStrings.Str1348)  							.SetCell(columnShift + 6' 1' LocalizedStrings.Price).SetStyle(columnShift + 6' typeof(decimal))  							.SetCell(columnShift + 7' 1' LocalizedStrings.Str1323).SetStyle(columnShift + 7' typeof(decimal))  							.SetCell(columnShift + 8' 1' LocalizedStrings.Str1324)  							.SetCell(columnShift + 9' 1' LocalizedStrings.State)  							.SetCell(columnShift + 10' 1' LocalizedStrings.Str1325).SetStyle(columnShift + 10' typeof(decimal))  							.SetCell(columnShift + 11' 1' LocalizedStrings.Volume).SetStyle(columnShift + 11' typeof(decimal))  							.SetCell(columnShift + 12' 1' LocalizedStrings.Type)  							.SetCell(columnShift + 13' 1' LocalizedStrings.Str1326)  							.SetCell(columnShift + 14' 1' LocalizedStrings.Str1327)  							.SetCell(columnShift + 15' 1' LocalizedStrings.Str135);    						worker  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str1329)' null' Colors.Green)  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str238)' null' Colors.Red);    						rowIndex = 2;  						foreach (var order in strategy.Orders.ToArray())  						{  							worker  								.SetCell(columnShift + 0' rowIndex' order.Id)  								.SetCell(columnShift + 1' rowIndex' order.TransactionId)  								.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  								.SetCell(columnShift + 3' rowIndex' Format(order.Time))  								.SetCell(columnShift + 4' rowIndex' Format(order.LastChangeTime))  								.SetCell(columnShift + 5' rowIndex' Format(order.LastChangeTime - order.Time))  								.SetCell(columnShift + 6' rowIndex' order.Price)  								.SetCell(columnShift + 7' rowIndex' MathHelper.Round(order.GetAveragePrice(strategy.Connector)' Decimals))  								.SetCell(columnShift + 8' rowIndex' Format(order.State))  								.SetCell(columnShift + 9' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : LocalizedStrings.Str238))  								.SetCell(columnShift + 10' rowIndex' order.Balance)  								.SetCell(columnShift + 11' rowIndex' order.Volume)  								.SetCell(columnShift + 12' rowIndex' Format(order.Type))  								.SetCell(columnShift + 13' rowIndex' Format(order.LatencyRegistration))  								.SetCell(columnShift + 14' rowIndex' Format(order.LatencyCancellation))  								.SetCell(columnShift + 15' rowIndex' order.Comment);    							rowIndex++;  						}    						var stopOrders = strategy.StopOrders.ToArray();    						if (stopOrders.Length > 0)  						{  							rowIndex += 2;    							worker  								.SetCell(columnShift + 0' rowIndex - 1' LocalizedStrings.Str1351)    								.SetCell(columnShift + 0' rowIndex' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  								.SetCell(columnShift + 1' rowIndex' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  								.SetCell(columnShift + 2' rowIndex' LocalizedStrings.Str128)  								.SetCell(columnShift + 3' rowIndex' LocalizedStrings.Time).SetStyle(columnShift + 3' "HH:mm:ss.fff")  								.SetCell(columnShift + 4' rowIndex' LocalizedStrings.Price).SetStyle(columnShift + 4' typeof(decimal))  								.SetCell(columnShift + 5' rowIndex' LocalizedStrings.Str1324)  								.SetCell(columnShift + 6' rowIndex' LocalizedStrings.State)  								.SetCell(columnShift + 7' rowIndex' LocalizedStrings.Volume).SetStyle(columnShift + 7' typeof(decimal))  								.SetCell(columnShift + 8' rowIndex' LocalizedStrings.Str1326)  								.SetCell(columnShift + 9' rowIndex' LocalizedStrings.Str1327)  								//.SetCell(columnShift + 10' rowIndex' LocalizedStrings.Str1352).SetStyle(columnShift + 9' typeof(long))  								;    							var stopParams = stopOrders[0].Condition.Parameters.Keys.ToArray();    							for (var i = 0; i < stopParams.Length; i++)  								worker.SetCell(columnShift + 11 + i' rowIndex' stopParams[i]);    							foreach (var order in stopOrders)  							{  								worker  									.SetCell(columnShift + 0' rowIndex' order.Id)  									.SetCell(columnShift + 1' rowIndex' order.TransactionId)  									.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  									.SetCell(columnShift + 3' rowIndex' Format(order.Time))  									.SetCell(columnShift + 4' rowIndex' order.Price)  									.SetCell(columnShift + 5' rowIndex' Format(order.State))  									.SetCell(columnShift + 6' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : string.Empty))  									.SetCell(columnShift + 7' rowIndex' order.Volume)  									.SetCell(columnShift + 8' rowIndex' Format(order.LatencyRegistration))  									.SetCell(columnShift + 9' rowIndex' Format(order.LatencyCancellation))  									//.SetCell(columnShift + 10' rowIndex' order.DerivedOrder != null ? (object)order.DerivedOrder.Id : string.Empty)  									;    								for (var i = 0; i < stopParams.Length; i++)  									worker.SetCell(columnShift + 11 + i' rowIndex' order.Condition.Parameters[stopParams[i]] ?? string.Empty);    								rowIndex++;  							}  						}  					}  				}    				worker.Save(FileName' true);  			}
Magic Number,StockSharp.Algo.Strategies.Reporting,ExcelStrategyReport,C:\repos\stocksharp_stocksharp\Algo\Strategies\Reporting\ExcelStrategyReport.cs,Generate,The following statement contains a magic number: using (var worker = hasTemplate ? new ExcelWorker() : new ExcelWorker(Template))  			{  				foreach (var strategy in Strategies)  				{  					if (Template.IsEmpty())  					{  						worker.RenameSheet(strategy.Name);  					}  					else  					{  						if (worker.ContainsSheet(strategy.Name))  							worker.AddSheet(strategy.Name);  					}    					worker  						.SetCell(0' 0' LocalizedStrings.Str1331)    						.SetCell(0' 1' LocalizedStrings.Security + ":")  						.SetCell(1' 1' strategy.Security != null ? strategy.Security.Id : string.Empty)    						.SetCell(0' 2' LocalizedStrings.Portfolio + ":")  						.SetCell(1' 2' strategy.Portfolio != null ? strategy.Portfolio.Name : string.Empty)    						.SetCell(0' 3' LocalizedStrings.Str1334)  						.SetCell(1' 3' Format(strategy.TotalWorkingTime))    						.SetCell(0' 4' LocalizedStrings.Str1335)  						//.SetCell(1' 4' FormatTime(base.Strategy.TotalCPUTime))    						.SetCell(0' 5' LocalizedStrings.Str862 + ":")  						.SetCell(1' 5' strategy.Position)    						.SetCell(0' 6' LocalizedStrings.PnL + ":")  						.SetCell(1' 6' strategy.PnL)    						.SetCell(0' 7' LocalizedStrings.Str159 + ":")  						.SetCell(1' 7' strategy.Commission)    						.SetCell(0' 8' LocalizedStrings.Str163 + ":")  						.SetCell(1' 8' strategy.Slippage)    						.SetCell(0' 9' LocalizedStrings.Str161 + ":")  						.SetCell(1' 9' Format(strategy.Latency));    					var rowIndex = 11;    					foreach (var parameter in strategy.StatisticManager.Parameters.SyncGet(c => c.ToArray()))  					{  						var value = parameter.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' parameter.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					rowIndex += 2;  					worker.SetCell(0' rowIndex' LocalizedStrings.Str1340);  					rowIndex++;    					foreach (var strategyParam in strategy.Parameters.CachedValues)  					{  						var value = strategyParam.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' strategyParam.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					//rowIndex += 2;  					//worker.SetCell(0' rowIndex' "Комиссия по типам:");  					//rowIndex++;    					//foreach (var group in Strategy.CommissionManager.Rules.SyncGet(c => c.ToArray()).GroupBy(c => c.GetType().GetDisplayName()))  					//{  					//	var commission = group.Sum(r => r.Commission);    					//	if (commission == 0)  					//		continue;    					//	worker  					//		.SetCell(0' rowIndex' group.Key)  					//		.SetCell(1' rowIndex' commission);    					//	rowIndex++;  					//}    					var columnShift = 3;    					worker  						.SetCell(columnShift + 0' 0' LocalizedStrings.Str985)    						.SetCell(columnShift + 0' 1' LocalizedStrings.Str1192).SetStyle(columnShift + 0' typeof(long))  						.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  						.SetCell(columnShift + 2' 1' LocalizedStrings.Time).SetStyle(columnShift + 2' "HH:mm:ss.fff")  						.SetCell(columnShift + 3' 1' LocalizedStrings.Price).SetStyle(columnShift + 3' typeof(decimal))  						.SetCell(columnShift + 4' 1' LocalizedStrings.Str1341).SetStyle(columnShift + 4' typeof(decimal))  						.SetCell(columnShift + 5' 1' LocalizedStrings.Volume).SetStyle(columnShift + 5' typeof(decimal))  						.SetCell(columnShift + 6' 1' LocalizedStrings.Str128)  						.SetCell(columnShift + 7' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 7' typeof(long))  						.SetCell(columnShift + 8' 1' LocalizedStrings.Str163).SetStyle(columnShift + 8' typeof(decimal))  						.SetCell(columnShift + 9' 1' LocalizedStrings.Str135)  						.SetCell(columnShift + 10' 1' LocalizedStrings.Str1342).SetStyle(columnShift + 11' typeof(decimal))  						.SetCell(columnShift + 11' 1' LocalizedStrings.Str1343).SetStyle(columnShift + 12' typeof(decimal))  						.SetCell(columnShift + 12' 1' LocalizedStrings.Str1344).SetStyle(columnShift + 13' typeof(decimal))  						.SetCell(columnShift + 13' 1' LocalizedStrings.Str1345).SetStyle(columnShift + 14' typeof(decimal))  						.SetCell(columnShift + 14' 1' LocalizedStrings.Str862).SetStyle(columnShift + 15' typeof(decimal));    					worker  						.SetConditionalFormatting(columnShift + 10' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 11' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 12' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 13' ComparisonOperator.Less' "0"' null' Colors.Red);    					var totalPnL = 0m;  					var position = 0m;    					var queues = new Dictionary<Security' PnLQueue>();    					rowIndex = 2;  					foreach (var trade in strategy.MyTrades.ToArray())  					{  						var info = strategy.PnLManager.ProcessMessage(trade.ToMessage());    						totalPnL += info.PnL;  						position += trade.GetPosition() ?? 0;    						var queue = queues.SafeAdd(trade.Trade.Security' key => new PnLQueue(key.ToSecurityId()));    						var localInfo = queue.Process(trade.ToMessage());    						worker  							.SetCell(columnShift + 0' rowIndex' trade.Trade.Id)  							.SetCell(columnShift + 1' rowIndex' trade.Order.TransactionId)  							.SetCell(columnShift + 2' rowIndex' Format(trade.Trade.Time))  							.SetCell(columnShift + 3' rowIndex' trade.Trade.Price)  							.SetCell(columnShift + 4' rowIndex' trade.Order.Price)  							.SetCell(columnShift + 5' rowIndex' trade.Trade.Volume)  							.SetCell(columnShift + 6' rowIndex' Format(trade.Order.Direction))  							.SetCell(columnShift + 7' rowIndex' trade.Order.Id)  							.SetCell(columnShift + 8' rowIndex' trade.Slippage)  							.SetCell(columnShift + 9' rowIndex' trade.Order.Comment)  							.SetCell(columnShift + 10' rowIndex' MathHelper.Round(info.PnL' Decimals))  							.SetCell(columnShift + 11' rowIndex' MathHelper.Round(localInfo.PnL' Decimals))  							.SetCell(columnShift + 12' rowIndex' MathHelper.Round(totalPnL' Decimals))  							.SetCell(columnShift + 13' rowIndex' MathHelper.Round(queue.RealizedPnL' Decimals))  							.SetCell(columnShift + 14' rowIndex' position);    						rowIndex++;  					}    					if (IncludeOrders)  					{  						columnShift += 17;    						worker  							.SetCell(columnShift + 0' 0' LocalizedStrings.Orders)    							.SetCell(columnShift + 0' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  							.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  							.SetCell(columnShift + 2' 1' LocalizedStrings.Str128)  							.SetCell(columnShift + 3' 1' LocalizedStrings.Str1346).SetStyle(columnShift + 3' "HH:mm:ss.fff")  							.SetCell(columnShift + 4' 1' LocalizedStrings.Str1347).SetStyle(columnShift + 4' "HH:mm:ss.fff")  							.SetCell(columnShift + 5' 1' LocalizedStrings.Str1348)  							.SetCell(columnShift + 6' 1' LocalizedStrings.Price).SetStyle(columnShift + 6' typeof(decimal))  							.SetCell(columnShift + 7' 1' LocalizedStrings.Str1323).SetStyle(columnShift + 7' typeof(decimal))  							.SetCell(columnShift + 8' 1' LocalizedStrings.Str1324)  							.SetCell(columnShift + 9' 1' LocalizedStrings.State)  							.SetCell(columnShift + 10' 1' LocalizedStrings.Str1325).SetStyle(columnShift + 10' typeof(decimal))  							.SetCell(columnShift + 11' 1' LocalizedStrings.Volume).SetStyle(columnShift + 11' typeof(decimal))  							.SetCell(columnShift + 12' 1' LocalizedStrings.Type)  							.SetCell(columnShift + 13' 1' LocalizedStrings.Str1326)  							.SetCell(columnShift + 14' 1' LocalizedStrings.Str1327)  							.SetCell(columnShift + 15' 1' LocalizedStrings.Str135);    						worker  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str1329)' null' Colors.Green)  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str238)' null' Colors.Red);    						rowIndex = 2;  						foreach (var order in strategy.Orders.ToArray())  						{  							worker  								.SetCell(columnShift + 0' rowIndex' order.Id)  								.SetCell(columnShift + 1' rowIndex' order.TransactionId)  								.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  								.SetCell(columnShift + 3' rowIndex' Format(order.Time))  								.SetCell(columnShift + 4' rowIndex' Format(order.LastChangeTime))  								.SetCell(columnShift + 5' rowIndex' Format(order.LastChangeTime - order.Time))  								.SetCell(columnShift + 6' rowIndex' order.Price)  								.SetCell(columnShift + 7' rowIndex' MathHelper.Round(order.GetAveragePrice(strategy.Connector)' Decimals))  								.SetCell(columnShift + 8' rowIndex' Format(order.State))  								.SetCell(columnShift + 9' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : LocalizedStrings.Str238))  								.SetCell(columnShift + 10' rowIndex' order.Balance)  								.SetCell(columnShift + 11' rowIndex' order.Volume)  								.SetCell(columnShift + 12' rowIndex' Format(order.Type))  								.SetCell(columnShift + 13' rowIndex' Format(order.LatencyRegistration))  								.SetCell(columnShift + 14' rowIndex' Format(order.LatencyCancellation))  								.SetCell(columnShift + 15' rowIndex' order.Comment);    							rowIndex++;  						}    						var stopOrders = strategy.StopOrders.ToArray();    						if (stopOrders.Length > 0)  						{  							rowIndex += 2;    							worker  								.SetCell(columnShift + 0' rowIndex - 1' LocalizedStrings.Str1351)    								.SetCell(columnShift + 0' rowIndex' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  								.SetCell(columnShift + 1' rowIndex' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  								.SetCell(columnShift + 2' rowIndex' LocalizedStrings.Str128)  								.SetCell(columnShift + 3' rowIndex' LocalizedStrings.Time).SetStyle(columnShift + 3' "HH:mm:ss.fff")  								.SetCell(columnShift + 4' rowIndex' LocalizedStrings.Price).SetStyle(columnShift + 4' typeof(decimal))  								.SetCell(columnShift + 5' rowIndex' LocalizedStrings.Str1324)  								.SetCell(columnShift + 6' rowIndex' LocalizedStrings.State)  								.SetCell(columnShift + 7' rowIndex' LocalizedStrings.Volume).SetStyle(columnShift + 7' typeof(decimal))  								.SetCell(columnShift + 8' rowIndex' LocalizedStrings.Str1326)  								.SetCell(columnShift + 9' rowIndex' LocalizedStrings.Str1327)  								//.SetCell(columnShift + 10' rowIndex' LocalizedStrings.Str1352).SetStyle(columnShift + 9' typeof(long))  								;    							var stopParams = stopOrders[0].Condition.Parameters.Keys.ToArray();    							for (var i = 0; i < stopParams.Length; i++)  								worker.SetCell(columnShift + 11 + i' rowIndex' stopParams[i]);    							foreach (var order in stopOrders)  							{  								worker  									.SetCell(columnShift + 0' rowIndex' order.Id)  									.SetCell(columnShift + 1' rowIndex' order.TransactionId)  									.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  									.SetCell(columnShift + 3' rowIndex' Format(order.Time))  									.SetCell(columnShift + 4' rowIndex' order.Price)  									.SetCell(columnShift + 5' rowIndex' Format(order.State))  									.SetCell(columnShift + 6' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : string.Empty))  									.SetCell(columnShift + 7' rowIndex' order.Volume)  									.SetCell(columnShift + 8' rowIndex' Format(order.LatencyRegistration))  									.SetCell(columnShift + 9' rowIndex' Format(order.LatencyCancellation))  									//.SetCell(columnShift + 10' rowIndex' order.DerivedOrder != null ? (object)order.DerivedOrder.Id : string.Empty)  									;    								for (var i = 0; i < stopParams.Length; i++)  									worker.SetCell(columnShift + 11 + i' rowIndex' order.Condition.Parameters[stopParams[i]] ?? string.Empty);    								rowIndex++;  							}  						}  					}  				}    				worker.Save(FileName' true);  			}
Magic Number,StockSharp.Algo.Strategies.Reporting,ExcelStrategyReport,C:\repos\stocksharp_stocksharp\Algo\Strategies\Reporting\ExcelStrategyReport.cs,Generate,The following statement contains a magic number: using (var worker = hasTemplate ? new ExcelWorker() : new ExcelWorker(Template))  			{  				foreach (var strategy in Strategies)  				{  					if (Template.IsEmpty())  					{  						worker.RenameSheet(strategy.Name);  					}  					else  					{  						if (worker.ContainsSheet(strategy.Name))  							worker.AddSheet(strategy.Name);  					}    					worker  						.SetCell(0' 0' LocalizedStrings.Str1331)    						.SetCell(0' 1' LocalizedStrings.Security + ":")  						.SetCell(1' 1' strategy.Security != null ? strategy.Security.Id : string.Empty)    						.SetCell(0' 2' LocalizedStrings.Portfolio + ":")  						.SetCell(1' 2' strategy.Portfolio != null ? strategy.Portfolio.Name : string.Empty)    						.SetCell(0' 3' LocalizedStrings.Str1334)  						.SetCell(1' 3' Format(strategy.TotalWorkingTime))    						.SetCell(0' 4' LocalizedStrings.Str1335)  						//.SetCell(1' 4' FormatTime(base.Strategy.TotalCPUTime))    						.SetCell(0' 5' LocalizedStrings.Str862 + ":")  						.SetCell(1' 5' strategy.Position)    						.SetCell(0' 6' LocalizedStrings.PnL + ":")  						.SetCell(1' 6' strategy.PnL)    						.SetCell(0' 7' LocalizedStrings.Str159 + ":")  						.SetCell(1' 7' strategy.Commission)    						.SetCell(0' 8' LocalizedStrings.Str163 + ":")  						.SetCell(1' 8' strategy.Slippage)    						.SetCell(0' 9' LocalizedStrings.Str161 + ":")  						.SetCell(1' 9' Format(strategy.Latency));    					var rowIndex = 11;    					foreach (var parameter in strategy.StatisticManager.Parameters.SyncGet(c => c.ToArray()))  					{  						var value = parameter.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' parameter.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					rowIndex += 2;  					worker.SetCell(0' rowIndex' LocalizedStrings.Str1340);  					rowIndex++;    					foreach (var strategyParam in strategy.Parameters.CachedValues)  					{  						var value = strategyParam.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' strategyParam.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					//rowIndex += 2;  					//worker.SetCell(0' rowIndex' "Комиссия по типам:");  					//rowIndex++;    					//foreach (var group in Strategy.CommissionManager.Rules.SyncGet(c => c.ToArray()).GroupBy(c => c.GetType().GetDisplayName()))  					//{  					//	var commission = group.Sum(r => r.Commission);    					//	if (commission == 0)  					//		continue;    					//	worker  					//		.SetCell(0' rowIndex' group.Key)  					//		.SetCell(1' rowIndex' commission);    					//	rowIndex++;  					//}    					var columnShift = 3;    					worker  						.SetCell(columnShift + 0' 0' LocalizedStrings.Str985)    						.SetCell(columnShift + 0' 1' LocalizedStrings.Str1192).SetStyle(columnShift + 0' typeof(long))  						.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  						.SetCell(columnShift + 2' 1' LocalizedStrings.Time).SetStyle(columnShift + 2' "HH:mm:ss.fff")  						.SetCell(columnShift + 3' 1' LocalizedStrings.Price).SetStyle(columnShift + 3' typeof(decimal))  						.SetCell(columnShift + 4' 1' LocalizedStrings.Str1341).SetStyle(columnShift + 4' typeof(decimal))  						.SetCell(columnShift + 5' 1' LocalizedStrings.Volume).SetStyle(columnShift + 5' typeof(decimal))  						.SetCell(columnShift + 6' 1' LocalizedStrings.Str128)  						.SetCell(columnShift + 7' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 7' typeof(long))  						.SetCell(columnShift + 8' 1' LocalizedStrings.Str163).SetStyle(columnShift + 8' typeof(decimal))  						.SetCell(columnShift + 9' 1' LocalizedStrings.Str135)  						.SetCell(columnShift + 10' 1' LocalizedStrings.Str1342).SetStyle(columnShift + 11' typeof(decimal))  						.SetCell(columnShift + 11' 1' LocalizedStrings.Str1343).SetStyle(columnShift + 12' typeof(decimal))  						.SetCell(columnShift + 12' 1' LocalizedStrings.Str1344).SetStyle(columnShift + 13' typeof(decimal))  						.SetCell(columnShift + 13' 1' LocalizedStrings.Str1345).SetStyle(columnShift + 14' typeof(decimal))  						.SetCell(columnShift + 14' 1' LocalizedStrings.Str862).SetStyle(columnShift + 15' typeof(decimal));    					worker  						.SetConditionalFormatting(columnShift + 10' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 11' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 12' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 13' ComparisonOperator.Less' "0"' null' Colors.Red);    					var totalPnL = 0m;  					var position = 0m;    					var queues = new Dictionary<Security' PnLQueue>();    					rowIndex = 2;  					foreach (var trade in strategy.MyTrades.ToArray())  					{  						var info = strategy.PnLManager.ProcessMessage(trade.ToMessage());    						totalPnL += info.PnL;  						position += trade.GetPosition() ?? 0;    						var queue = queues.SafeAdd(trade.Trade.Security' key => new PnLQueue(key.ToSecurityId()));    						var localInfo = queue.Process(trade.ToMessage());    						worker  							.SetCell(columnShift + 0' rowIndex' trade.Trade.Id)  							.SetCell(columnShift + 1' rowIndex' trade.Order.TransactionId)  							.SetCell(columnShift + 2' rowIndex' Format(trade.Trade.Time))  							.SetCell(columnShift + 3' rowIndex' trade.Trade.Price)  							.SetCell(columnShift + 4' rowIndex' trade.Order.Price)  							.SetCell(columnShift + 5' rowIndex' trade.Trade.Volume)  							.SetCell(columnShift + 6' rowIndex' Format(trade.Order.Direction))  							.SetCell(columnShift + 7' rowIndex' trade.Order.Id)  							.SetCell(columnShift + 8' rowIndex' trade.Slippage)  							.SetCell(columnShift + 9' rowIndex' trade.Order.Comment)  							.SetCell(columnShift + 10' rowIndex' MathHelper.Round(info.PnL' Decimals))  							.SetCell(columnShift + 11' rowIndex' MathHelper.Round(localInfo.PnL' Decimals))  							.SetCell(columnShift + 12' rowIndex' MathHelper.Round(totalPnL' Decimals))  							.SetCell(columnShift + 13' rowIndex' MathHelper.Round(queue.RealizedPnL' Decimals))  							.SetCell(columnShift + 14' rowIndex' position);    						rowIndex++;  					}    					if (IncludeOrders)  					{  						columnShift += 17;    						worker  							.SetCell(columnShift + 0' 0' LocalizedStrings.Orders)    							.SetCell(columnShift + 0' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  							.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  							.SetCell(columnShift + 2' 1' LocalizedStrings.Str128)  							.SetCell(columnShift + 3' 1' LocalizedStrings.Str1346).SetStyle(columnShift + 3' "HH:mm:ss.fff")  							.SetCell(columnShift + 4' 1' LocalizedStrings.Str1347).SetStyle(columnShift + 4' "HH:mm:ss.fff")  							.SetCell(columnShift + 5' 1' LocalizedStrings.Str1348)  							.SetCell(columnShift + 6' 1' LocalizedStrings.Price).SetStyle(columnShift + 6' typeof(decimal))  							.SetCell(columnShift + 7' 1' LocalizedStrings.Str1323).SetStyle(columnShift + 7' typeof(decimal))  							.SetCell(columnShift + 8' 1' LocalizedStrings.Str1324)  							.SetCell(columnShift + 9' 1' LocalizedStrings.State)  							.SetCell(columnShift + 10' 1' LocalizedStrings.Str1325).SetStyle(columnShift + 10' typeof(decimal))  							.SetCell(columnShift + 11' 1' LocalizedStrings.Volume).SetStyle(columnShift + 11' typeof(decimal))  							.SetCell(columnShift + 12' 1' LocalizedStrings.Type)  							.SetCell(columnShift + 13' 1' LocalizedStrings.Str1326)  							.SetCell(columnShift + 14' 1' LocalizedStrings.Str1327)  							.SetCell(columnShift + 15' 1' LocalizedStrings.Str135);    						worker  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str1329)' null' Colors.Green)  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str238)' null' Colors.Red);    						rowIndex = 2;  						foreach (var order in strategy.Orders.ToArray())  						{  							worker  								.SetCell(columnShift + 0' rowIndex' order.Id)  								.SetCell(columnShift + 1' rowIndex' order.TransactionId)  								.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  								.SetCell(columnShift + 3' rowIndex' Format(order.Time))  								.SetCell(columnShift + 4' rowIndex' Format(order.LastChangeTime))  								.SetCell(columnShift + 5' rowIndex' Format(order.LastChangeTime - order.Time))  								.SetCell(columnShift + 6' rowIndex' order.Price)  								.SetCell(columnShift + 7' rowIndex' MathHelper.Round(order.GetAveragePrice(strategy.Connector)' Decimals))  								.SetCell(columnShift + 8' rowIndex' Format(order.State))  								.SetCell(columnShift + 9' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : LocalizedStrings.Str238))  								.SetCell(columnShift + 10' rowIndex' order.Balance)  								.SetCell(columnShift + 11' rowIndex' order.Volume)  								.SetCell(columnShift + 12' rowIndex' Format(order.Type))  								.SetCell(columnShift + 13' rowIndex' Format(order.LatencyRegistration))  								.SetCell(columnShift + 14' rowIndex' Format(order.LatencyCancellation))  								.SetCell(columnShift + 15' rowIndex' order.Comment);    							rowIndex++;  						}    						var stopOrders = strategy.StopOrders.ToArray();    						if (stopOrders.Length > 0)  						{  							rowIndex += 2;    							worker  								.SetCell(columnShift + 0' rowIndex - 1' LocalizedStrings.Str1351)    								.SetCell(columnShift + 0' rowIndex' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  								.SetCell(columnShift + 1' rowIndex' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  								.SetCell(columnShift + 2' rowIndex' LocalizedStrings.Str128)  								.SetCell(columnShift + 3' rowIndex' LocalizedStrings.Time).SetStyle(columnShift + 3' "HH:mm:ss.fff")  								.SetCell(columnShift + 4' rowIndex' LocalizedStrings.Price).SetStyle(columnShift + 4' typeof(decimal))  								.SetCell(columnShift + 5' rowIndex' LocalizedStrings.Str1324)  								.SetCell(columnShift + 6' rowIndex' LocalizedStrings.State)  								.SetCell(columnShift + 7' rowIndex' LocalizedStrings.Volume).SetStyle(columnShift + 7' typeof(decimal))  								.SetCell(columnShift + 8' rowIndex' LocalizedStrings.Str1326)  								.SetCell(columnShift + 9' rowIndex' LocalizedStrings.Str1327)  								//.SetCell(columnShift + 10' rowIndex' LocalizedStrings.Str1352).SetStyle(columnShift + 9' typeof(long))  								;    							var stopParams = stopOrders[0].Condition.Parameters.Keys.ToArray();    							for (var i = 0; i < stopParams.Length; i++)  								worker.SetCell(columnShift + 11 + i' rowIndex' stopParams[i]);    							foreach (var order in stopOrders)  							{  								worker  									.SetCell(columnShift + 0' rowIndex' order.Id)  									.SetCell(columnShift + 1' rowIndex' order.TransactionId)  									.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  									.SetCell(columnShift + 3' rowIndex' Format(order.Time))  									.SetCell(columnShift + 4' rowIndex' order.Price)  									.SetCell(columnShift + 5' rowIndex' Format(order.State))  									.SetCell(columnShift + 6' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : string.Empty))  									.SetCell(columnShift + 7' rowIndex' order.Volume)  									.SetCell(columnShift + 8' rowIndex' Format(order.LatencyRegistration))  									.SetCell(columnShift + 9' rowIndex' Format(order.LatencyCancellation))  									//.SetCell(columnShift + 10' rowIndex' order.DerivedOrder != null ? (object)order.DerivedOrder.Id : string.Empty)  									;    								for (var i = 0; i < stopParams.Length; i++)  									worker.SetCell(columnShift + 11 + i' rowIndex' order.Condition.Parameters[stopParams[i]] ?? string.Empty);    								rowIndex++;  							}  						}  					}  				}    				worker.Save(FileName' true);  			}
Magic Number,StockSharp.Algo.Strategies.Reporting,ExcelStrategyReport,C:\repos\stocksharp_stocksharp\Algo\Strategies\Reporting\ExcelStrategyReport.cs,Generate,The following statement contains a magic number: using (var worker = hasTemplate ? new ExcelWorker() : new ExcelWorker(Template))  			{  				foreach (var strategy in Strategies)  				{  					if (Template.IsEmpty())  					{  						worker.RenameSheet(strategy.Name);  					}  					else  					{  						if (worker.ContainsSheet(strategy.Name))  							worker.AddSheet(strategy.Name);  					}    					worker  						.SetCell(0' 0' LocalizedStrings.Str1331)    						.SetCell(0' 1' LocalizedStrings.Security + ":")  						.SetCell(1' 1' strategy.Security != null ? strategy.Security.Id : string.Empty)    						.SetCell(0' 2' LocalizedStrings.Portfolio + ":")  						.SetCell(1' 2' strategy.Portfolio != null ? strategy.Portfolio.Name : string.Empty)    						.SetCell(0' 3' LocalizedStrings.Str1334)  						.SetCell(1' 3' Format(strategy.TotalWorkingTime))    						.SetCell(0' 4' LocalizedStrings.Str1335)  						//.SetCell(1' 4' FormatTime(base.Strategy.TotalCPUTime))    						.SetCell(0' 5' LocalizedStrings.Str862 + ":")  						.SetCell(1' 5' strategy.Position)    						.SetCell(0' 6' LocalizedStrings.PnL + ":")  						.SetCell(1' 6' strategy.PnL)    						.SetCell(0' 7' LocalizedStrings.Str159 + ":")  						.SetCell(1' 7' strategy.Commission)    						.SetCell(0' 8' LocalizedStrings.Str163 + ":")  						.SetCell(1' 8' strategy.Slippage)    						.SetCell(0' 9' LocalizedStrings.Str161 + ":")  						.SetCell(1' 9' Format(strategy.Latency));    					var rowIndex = 11;    					foreach (var parameter in strategy.StatisticManager.Parameters.SyncGet(c => c.ToArray()))  					{  						var value = parameter.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' parameter.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					rowIndex += 2;  					worker.SetCell(0' rowIndex' LocalizedStrings.Str1340);  					rowIndex++;    					foreach (var strategyParam in strategy.Parameters.CachedValues)  					{  						var value = strategyParam.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' strategyParam.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					//rowIndex += 2;  					//worker.SetCell(0' rowIndex' "Комиссия по типам:");  					//rowIndex++;    					//foreach (var group in Strategy.CommissionManager.Rules.SyncGet(c => c.ToArray()).GroupBy(c => c.GetType().GetDisplayName()))  					//{  					//	var commission = group.Sum(r => r.Commission);    					//	if (commission == 0)  					//		continue;    					//	worker  					//		.SetCell(0' rowIndex' group.Key)  					//		.SetCell(1' rowIndex' commission);    					//	rowIndex++;  					//}    					var columnShift = 3;    					worker  						.SetCell(columnShift + 0' 0' LocalizedStrings.Str985)    						.SetCell(columnShift + 0' 1' LocalizedStrings.Str1192).SetStyle(columnShift + 0' typeof(long))  						.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  						.SetCell(columnShift + 2' 1' LocalizedStrings.Time).SetStyle(columnShift + 2' "HH:mm:ss.fff")  						.SetCell(columnShift + 3' 1' LocalizedStrings.Price).SetStyle(columnShift + 3' typeof(decimal))  						.SetCell(columnShift + 4' 1' LocalizedStrings.Str1341).SetStyle(columnShift + 4' typeof(decimal))  						.SetCell(columnShift + 5' 1' LocalizedStrings.Volume).SetStyle(columnShift + 5' typeof(decimal))  						.SetCell(columnShift + 6' 1' LocalizedStrings.Str128)  						.SetCell(columnShift + 7' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 7' typeof(long))  						.SetCell(columnShift + 8' 1' LocalizedStrings.Str163).SetStyle(columnShift + 8' typeof(decimal))  						.SetCell(columnShift + 9' 1' LocalizedStrings.Str135)  						.SetCell(columnShift + 10' 1' LocalizedStrings.Str1342).SetStyle(columnShift + 11' typeof(decimal))  						.SetCell(columnShift + 11' 1' LocalizedStrings.Str1343).SetStyle(columnShift + 12' typeof(decimal))  						.SetCell(columnShift + 12' 1' LocalizedStrings.Str1344).SetStyle(columnShift + 13' typeof(decimal))  						.SetCell(columnShift + 13' 1' LocalizedStrings.Str1345).SetStyle(columnShift + 14' typeof(decimal))  						.SetCell(columnShift + 14' 1' LocalizedStrings.Str862).SetStyle(columnShift + 15' typeof(decimal));    					worker  						.SetConditionalFormatting(columnShift + 10' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 11' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 12' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 13' ComparisonOperator.Less' "0"' null' Colors.Red);    					var totalPnL = 0m;  					var position = 0m;    					var queues = new Dictionary<Security' PnLQueue>();    					rowIndex = 2;  					foreach (var trade in strategy.MyTrades.ToArray())  					{  						var info = strategy.PnLManager.ProcessMessage(trade.ToMessage());    						totalPnL += info.PnL;  						position += trade.GetPosition() ?? 0;    						var queue = queues.SafeAdd(trade.Trade.Security' key => new PnLQueue(key.ToSecurityId()));    						var localInfo = queue.Process(trade.ToMessage());    						worker  							.SetCell(columnShift + 0' rowIndex' trade.Trade.Id)  							.SetCell(columnShift + 1' rowIndex' trade.Order.TransactionId)  							.SetCell(columnShift + 2' rowIndex' Format(trade.Trade.Time))  							.SetCell(columnShift + 3' rowIndex' trade.Trade.Price)  							.SetCell(columnShift + 4' rowIndex' trade.Order.Price)  							.SetCell(columnShift + 5' rowIndex' trade.Trade.Volume)  							.SetCell(columnShift + 6' rowIndex' Format(trade.Order.Direction))  							.SetCell(columnShift + 7' rowIndex' trade.Order.Id)  							.SetCell(columnShift + 8' rowIndex' trade.Slippage)  							.SetCell(columnShift + 9' rowIndex' trade.Order.Comment)  							.SetCell(columnShift + 10' rowIndex' MathHelper.Round(info.PnL' Decimals))  							.SetCell(columnShift + 11' rowIndex' MathHelper.Round(localInfo.PnL' Decimals))  							.SetCell(columnShift + 12' rowIndex' MathHelper.Round(totalPnL' Decimals))  							.SetCell(columnShift + 13' rowIndex' MathHelper.Round(queue.RealizedPnL' Decimals))  							.SetCell(columnShift + 14' rowIndex' position);    						rowIndex++;  					}    					if (IncludeOrders)  					{  						columnShift += 17;    						worker  							.SetCell(columnShift + 0' 0' LocalizedStrings.Orders)    							.SetCell(columnShift + 0' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  							.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  							.SetCell(columnShift + 2' 1' LocalizedStrings.Str128)  							.SetCell(columnShift + 3' 1' LocalizedStrings.Str1346).SetStyle(columnShift + 3' "HH:mm:ss.fff")  							.SetCell(columnShift + 4' 1' LocalizedStrings.Str1347).SetStyle(columnShift + 4' "HH:mm:ss.fff")  							.SetCell(columnShift + 5' 1' LocalizedStrings.Str1348)  							.SetCell(columnShift + 6' 1' LocalizedStrings.Price).SetStyle(columnShift + 6' typeof(decimal))  							.SetCell(columnShift + 7' 1' LocalizedStrings.Str1323).SetStyle(columnShift + 7' typeof(decimal))  							.SetCell(columnShift + 8' 1' LocalizedStrings.Str1324)  							.SetCell(columnShift + 9' 1' LocalizedStrings.State)  							.SetCell(columnShift + 10' 1' LocalizedStrings.Str1325).SetStyle(columnShift + 10' typeof(decimal))  							.SetCell(columnShift + 11' 1' LocalizedStrings.Volume).SetStyle(columnShift + 11' typeof(decimal))  							.SetCell(columnShift + 12' 1' LocalizedStrings.Type)  							.SetCell(columnShift + 13' 1' LocalizedStrings.Str1326)  							.SetCell(columnShift + 14' 1' LocalizedStrings.Str1327)  							.SetCell(columnShift + 15' 1' LocalizedStrings.Str135);    						worker  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str1329)' null' Colors.Green)  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str238)' null' Colors.Red);    						rowIndex = 2;  						foreach (var order in strategy.Orders.ToArray())  						{  							worker  								.SetCell(columnShift + 0' rowIndex' order.Id)  								.SetCell(columnShift + 1' rowIndex' order.TransactionId)  								.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  								.SetCell(columnShift + 3' rowIndex' Format(order.Time))  								.SetCell(columnShift + 4' rowIndex' Format(order.LastChangeTime))  								.SetCell(columnShift + 5' rowIndex' Format(order.LastChangeTime - order.Time))  								.SetCell(columnShift + 6' rowIndex' order.Price)  								.SetCell(columnShift + 7' rowIndex' MathHelper.Round(order.GetAveragePrice(strategy.Connector)' Decimals))  								.SetCell(columnShift + 8' rowIndex' Format(order.State))  								.SetCell(columnShift + 9' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : LocalizedStrings.Str238))  								.SetCell(columnShift + 10' rowIndex' order.Balance)  								.SetCell(columnShift + 11' rowIndex' order.Volume)  								.SetCell(columnShift + 12' rowIndex' Format(order.Type))  								.SetCell(columnShift + 13' rowIndex' Format(order.LatencyRegistration))  								.SetCell(columnShift + 14' rowIndex' Format(order.LatencyCancellation))  								.SetCell(columnShift + 15' rowIndex' order.Comment);    							rowIndex++;  						}    						var stopOrders = strategy.StopOrders.ToArray();    						if (stopOrders.Length > 0)  						{  							rowIndex += 2;    							worker  								.SetCell(columnShift + 0' rowIndex - 1' LocalizedStrings.Str1351)    								.SetCell(columnShift + 0' rowIndex' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  								.SetCell(columnShift + 1' rowIndex' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  								.SetCell(columnShift + 2' rowIndex' LocalizedStrings.Str128)  								.SetCell(columnShift + 3' rowIndex' LocalizedStrings.Time).SetStyle(columnShift + 3' "HH:mm:ss.fff")  								.SetCell(columnShift + 4' rowIndex' LocalizedStrings.Price).SetStyle(columnShift + 4' typeof(decimal))  								.SetCell(columnShift + 5' rowIndex' LocalizedStrings.Str1324)  								.SetCell(columnShift + 6' rowIndex' LocalizedStrings.State)  								.SetCell(columnShift + 7' rowIndex' LocalizedStrings.Volume).SetStyle(columnShift + 7' typeof(decimal))  								.SetCell(columnShift + 8' rowIndex' LocalizedStrings.Str1326)  								.SetCell(columnShift + 9' rowIndex' LocalizedStrings.Str1327)  								//.SetCell(columnShift + 10' rowIndex' LocalizedStrings.Str1352).SetStyle(columnShift + 9' typeof(long))  								;    							var stopParams = stopOrders[0].Condition.Parameters.Keys.ToArray();    							for (var i = 0; i < stopParams.Length; i++)  								worker.SetCell(columnShift + 11 + i' rowIndex' stopParams[i]);    							foreach (var order in stopOrders)  							{  								worker  									.SetCell(columnShift + 0' rowIndex' order.Id)  									.SetCell(columnShift + 1' rowIndex' order.TransactionId)  									.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  									.SetCell(columnShift + 3' rowIndex' Format(order.Time))  									.SetCell(columnShift + 4' rowIndex' order.Price)  									.SetCell(columnShift + 5' rowIndex' Format(order.State))  									.SetCell(columnShift + 6' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : string.Empty))  									.SetCell(columnShift + 7' rowIndex' order.Volume)  									.SetCell(columnShift + 8' rowIndex' Format(order.LatencyRegistration))  									.SetCell(columnShift + 9' rowIndex' Format(order.LatencyCancellation))  									//.SetCell(columnShift + 10' rowIndex' order.DerivedOrder != null ? (object)order.DerivedOrder.Id : string.Empty)  									;    								for (var i = 0; i < stopParams.Length; i++)  									worker.SetCell(columnShift + 11 + i' rowIndex' order.Condition.Parameters[stopParams[i]] ?? string.Empty);    								rowIndex++;  							}  						}  					}  				}    				worker.Save(FileName' true);  			}
Magic Number,StockSharp.Algo.Strategies.Reporting,ExcelStrategyReport,C:\repos\stocksharp_stocksharp\Algo\Strategies\Reporting\ExcelStrategyReport.cs,Generate,The following statement contains a magic number: using (var worker = hasTemplate ? new ExcelWorker() : new ExcelWorker(Template))  			{  				foreach (var strategy in Strategies)  				{  					if (Template.IsEmpty())  					{  						worker.RenameSheet(strategy.Name);  					}  					else  					{  						if (worker.ContainsSheet(strategy.Name))  							worker.AddSheet(strategy.Name);  					}    					worker  						.SetCell(0' 0' LocalizedStrings.Str1331)    						.SetCell(0' 1' LocalizedStrings.Security + ":")  						.SetCell(1' 1' strategy.Security != null ? strategy.Security.Id : string.Empty)    						.SetCell(0' 2' LocalizedStrings.Portfolio + ":")  						.SetCell(1' 2' strategy.Portfolio != null ? strategy.Portfolio.Name : string.Empty)    						.SetCell(0' 3' LocalizedStrings.Str1334)  						.SetCell(1' 3' Format(strategy.TotalWorkingTime))    						.SetCell(0' 4' LocalizedStrings.Str1335)  						//.SetCell(1' 4' FormatTime(base.Strategy.TotalCPUTime))    						.SetCell(0' 5' LocalizedStrings.Str862 + ":")  						.SetCell(1' 5' strategy.Position)    						.SetCell(0' 6' LocalizedStrings.PnL + ":")  						.SetCell(1' 6' strategy.PnL)    						.SetCell(0' 7' LocalizedStrings.Str159 + ":")  						.SetCell(1' 7' strategy.Commission)    						.SetCell(0' 8' LocalizedStrings.Str163 + ":")  						.SetCell(1' 8' strategy.Slippage)    						.SetCell(0' 9' LocalizedStrings.Str161 + ":")  						.SetCell(1' 9' Format(strategy.Latency));    					var rowIndex = 11;    					foreach (var parameter in strategy.StatisticManager.Parameters.SyncGet(c => c.ToArray()))  					{  						var value = parameter.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' parameter.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					rowIndex += 2;  					worker.SetCell(0' rowIndex' LocalizedStrings.Str1340);  					rowIndex++;    					foreach (var strategyParam in strategy.Parameters.CachedValues)  					{  						var value = strategyParam.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' strategyParam.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					//rowIndex += 2;  					//worker.SetCell(0' rowIndex' "Комиссия по типам:");  					//rowIndex++;    					//foreach (var group in Strategy.CommissionManager.Rules.SyncGet(c => c.ToArray()).GroupBy(c => c.GetType().GetDisplayName()))  					//{  					//	var commission = group.Sum(r => r.Commission);    					//	if (commission == 0)  					//		continue;    					//	worker  					//		.SetCell(0' rowIndex' group.Key)  					//		.SetCell(1' rowIndex' commission);    					//	rowIndex++;  					//}    					var columnShift = 3;    					worker  						.SetCell(columnShift + 0' 0' LocalizedStrings.Str985)    						.SetCell(columnShift + 0' 1' LocalizedStrings.Str1192).SetStyle(columnShift + 0' typeof(long))  						.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  						.SetCell(columnShift + 2' 1' LocalizedStrings.Time).SetStyle(columnShift + 2' "HH:mm:ss.fff")  						.SetCell(columnShift + 3' 1' LocalizedStrings.Price).SetStyle(columnShift + 3' typeof(decimal))  						.SetCell(columnShift + 4' 1' LocalizedStrings.Str1341).SetStyle(columnShift + 4' typeof(decimal))  						.SetCell(columnShift + 5' 1' LocalizedStrings.Volume).SetStyle(columnShift + 5' typeof(decimal))  						.SetCell(columnShift + 6' 1' LocalizedStrings.Str128)  						.SetCell(columnShift + 7' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 7' typeof(long))  						.SetCell(columnShift + 8' 1' LocalizedStrings.Str163).SetStyle(columnShift + 8' typeof(decimal))  						.SetCell(columnShift + 9' 1' LocalizedStrings.Str135)  						.SetCell(columnShift + 10' 1' LocalizedStrings.Str1342).SetStyle(columnShift + 11' typeof(decimal))  						.SetCell(columnShift + 11' 1' LocalizedStrings.Str1343).SetStyle(columnShift + 12' typeof(decimal))  						.SetCell(columnShift + 12' 1' LocalizedStrings.Str1344).SetStyle(columnShift + 13' typeof(decimal))  						.SetCell(columnShift + 13' 1' LocalizedStrings.Str1345).SetStyle(columnShift + 14' typeof(decimal))  						.SetCell(columnShift + 14' 1' LocalizedStrings.Str862).SetStyle(columnShift + 15' typeof(decimal));    					worker  						.SetConditionalFormatting(columnShift + 10' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 11' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 12' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 13' ComparisonOperator.Less' "0"' null' Colors.Red);    					var totalPnL = 0m;  					var position = 0m;    					var queues = new Dictionary<Security' PnLQueue>();    					rowIndex = 2;  					foreach (var trade in strategy.MyTrades.ToArray())  					{  						var info = strategy.PnLManager.ProcessMessage(trade.ToMessage());    						totalPnL += info.PnL;  						position += trade.GetPosition() ?? 0;    						var queue = queues.SafeAdd(trade.Trade.Security' key => new PnLQueue(key.ToSecurityId()));    						var localInfo = queue.Process(trade.ToMessage());    						worker  							.SetCell(columnShift + 0' rowIndex' trade.Trade.Id)  							.SetCell(columnShift + 1' rowIndex' trade.Order.TransactionId)  							.SetCell(columnShift + 2' rowIndex' Format(trade.Trade.Time))  							.SetCell(columnShift + 3' rowIndex' trade.Trade.Price)  							.SetCell(columnShift + 4' rowIndex' trade.Order.Price)  							.SetCell(columnShift + 5' rowIndex' trade.Trade.Volume)  							.SetCell(columnShift + 6' rowIndex' Format(trade.Order.Direction))  							.SetCell(columnShift + 7' rowIndex' trade.Order.Id)  							.SetCell(columnShift + 8' rowIndex' trade.Slippage)  							.SetCell(columnShift + 9' rowIndex' trade.Order.Comment)  							.SetCell(columnShift + 10' rowIndex' MathHelper.Round(info.PnL' Decimals))  							.SetCell(columnShift + 11' rowIndex' MathHelper.Round(localInfo.PnL' Decimals))  							.SetCell(columnShift + 12' rowIndex' MathHelper.Round(totalPnL' Decimals))  							.SetCell(columnShift + 13' rowIndex' MathHelper.Round(queue.RealizedPnL' Decimals))  							.SetCell(columnShift + 14' rowIndex' position);    						rowIndex++;  					}    					if (IncludeOrders)  					{  						columnShift += 17;    						worker  							.SetCell(columnShift + 0' 0' LocalizedStrings.Orders)    							.SetCell(columnShift + 0' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  							.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  							.SetCell(columnShift + 2' 1' LocalizedStrings.Str128)  							.SetCell(columnShift + 3' 1' LocalizedStrings.Str1346).SetStyle(columnShift + 3' "HH:mm:ss.fff")  							.SetCell(columnShift + 4' 1' LocalizedStrings.Str1347).SetStyle(columnShift + 4' "HH:mm:ss.fff")  							.SetCell(columnShift + 5' 1' LocalizedStrings.Str1348)  							.SetCell(columnShift + 6' 1' LocalizedStrings.Price).SetStyle(columnShift + 6' typeof(decimal))  							.SetCell(columnShift + 7' 1' LocalizedStrings.Str1323).SetStyle(columnShift + 7' typeof(decimal))  							.SetCell(columnShift + 8' 1' LocalizedStrings.Str1324)  							.SetCell(columnShift + 9' 1' LocalizedStrings.State)  							.SetCell(columnShift + 10' 1' LocalizedStrings.Str1325).SetStyle(columnShift + 10' typeof(decimal))  							.SetCell(columnShift + 11' 1' LocalizedStrings.Volume).SetStyle(columnShift + 11' typeof(decimal))  							.SetCell(columnShift + 12' 1' LocalizedStrings.Type)  							.SetCell(columnShift + 13' 1' LocalizedStrings.Str1326)  							.SetCell(columnShift + 14' 1' LocalizedStrings.Str1327)  							.SetCell(columnShift + 15' 1' LocalizedStrings.Str135);    						worker  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str1329)' null' Colors.Green)  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str238)' null' Colors.Red);    						rowIndex = 2;  						foreach (var order in strategy.Orders.ToArray())  						{  							worker  								.SetCell(columnShift + 0' rowIndex' order.Id)  								.SetCell(columnShift + 1' rowIndex' order.TransactionId)  								.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  								.SetCell(columnShift + 3' rowIndex' Format(order.Time))  								.SetCell(columnShift + 4' rowIndex' Format(order.LastChangeTime))  								.SetCell(columnShift + 5' rowIndex' Format(order.LastChangeTime - order.Time))  								.SetCell(columnShift + 6' rowIndex' order.Price)  								.SetCell(columnShift + 7' rowIndex' MathHelper.Round(order.GetAveragePrice(strategy.Connector)' Decimals))  								.SetCell(columnShift + 8' rowIndex' Format(order.State))  								.SetCell(columnShift + 9' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : LocalizedStrings.Str238))  								.SetCell(columnShift + 10' rowIndex' order.Balance)  								.SetCell(columnShift + 11' rowIndex' order.Volume)  								.SetCell(columnShift + 12' rowIndex' Format(order.Type))  								.SetCell(columnShift + 13' rowIndex' Format(order.LatencyRegistration))  								.SetCell(columnShift + 14' rowIndex' Format(order.LatencyCancellation))  								.SetCell(columnShift + 15' rowIndex' order.Comment);    							rowIndex++;  						}    						var stopOrders = strategy.StopOrders.ToArray();    						if (stopOrders.Length > 0)  						{  							rowIndex += 2;    							worker  								.SetCell(columnShift + 0' rowIndex - 1' LocalizedStrings.Str1351)    								.SetCell(columnShift + 0' rowIndex' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  								.SetCell(columnShift + 1' rowIndex' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  								.SetCell(columnShift + 2' rowIndex' LocalizedStrings.Str128)  								.SetCell(columnShift + 3' rowIndex' LocalizedStrings.Time).SetStyle(columnShift + 3' "HH:mm:ss.fff")  								.SetCell(columnShift + 4' rowIndex' LocalizedStrings.Price).SetStyle(columnShift + 4' typeof(decimal))  								.SetCell(columnShift + 5' rowIndex' LocalizedStrings.Str1324)  								.SetCell(columnShift + 6' rowIndex' LocalizedStrings.State)  								.SetCell(columnShift + 7' rowIndex' LocalizedStrings.Volume).SetStyle(columnShift + 7' typeof(decimal))  								.SetCell(columnShift + 8' rowIndex' LocalizedStrings.Str1326)  								.SetCell(columnShift + 9' rowIndex' LocalizedStrings.Str1327)  								//.SetCell(columnShift + 10' rowIndex' LocalizedStrings.Str1352).SetStyle(columnShift + 9' typeof(long))  								;    							var stopParams = stopOrders[0].Condition.Parameters.Keys.ToArray();    							for (var i = 0; i < stopParams.Length; i++)  								worker.SetCell(columnShift + 11 + i' rowIndex' stopParams[i]);    							foreach (var order in stopOrders)  							{  								worker  									.SetCell(columnShift + 0' rowIndex' order.Id)  									.SetCell(columnShift + 1' rowIndex' order.TransactionId)  									.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  									.SetCell(columnShift + 3' rowIndex' Format(order.Time))  									.SetCell(columnShift + 4' rowIndex' order.Price)  									.SetCell(columnShift + 5' rowIndex' Format(order.State))  									.SetCell(columnShift + 6' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : string.Empty))  									.SetCell(columnShift + 7' rowIndex' order.Volume)  									.SetCell(columnShift + 8' rowIndex' Format(order.LatencyRegistration))  									.SetCell(columnShift + 9' rowIndex' Format(order.LatencyCancellation))  									//.SetCell(columnShift + 10' rowIndex' order.DerivedOrder != null ? (object)order.DerivedOrder.Id : string.Empty)  									;    								for (var i = 0; i < stopParams.Length; i++)  									worker.SetCell(columnShift + 11 + i' rowIndex' order.Condition.Parameters[stopParams[i]] ?? string.Empty);    								rowIndex++;  							}  						}  					}  				}    				worker.Save(FileName' true);  			}
Magic Number,StockSharp.Algo.Strategies.Reporting,ExcelStrategyReport,C:\repos\stocksharp_stocksharp\Algo\Strategies\Reporting\ExcelStrategyReport.cs,Generate,The following statement contains a magic number: using (var worker = hasTemplate ? new ExcelWorker() : new ExcelWorker(Template))  			{  				foreach (var strategy in Strategies)  				{  					if (Template.IsEmpty())  					{  						worker.RenameSheet(strategy.Name);  					}  					else  					{  						if (worker.ContainsSheet(strategy.Name))  							worker.AddSheet(strategy.Name);  					}    					worker  						.SetCell(0' 0' LocalizedStrings.Str1331)    						.SetCell(0' 1' LocalizedStrings.Security + ":")  						.SetCell(1' 1' strategy.Security != null ? strategy.Security.Id : string.Empty)    						.SetCell(0' 2' LocalizedStrings.Portfolio + ":")  						.SetCell(1' 2' strategy.Portfolio != null ? strategy.Portfolio.Name : string.Empty)    						.SetCell(0' 3' LocalizedStrings.Str1334)  						.SetCell(1' 3' Format(strategy.TotalWorkingTime))    						.SetCell(0' 4' LocalizedStrings.Str1335)  						//.SetCell(1' 4' FormatTime(base.Strategy.TotalCPUTime))    						.SetCell(0' 5' LocalizedStrings.Str862 + ":")  						.SetCell(1' 5' strategy.Position)    						.SetCell(0' 6' LocalizedStrings.PnL + ":")  						.SetCell(1' 6' strategy.PnL)    						.SetCell(0' 7' LocalizedStrings.Str159 + ":")  						.SetCell(1' 7' strategy.Commission)    						.SetCell(0' 8' LocalizedStrings.Str163 + ":")  						.SetCell(1' 8' strategy.Slippage)    						.SetCell(0' 9' LocalizedStrings.Str161 + ":")  						.SetCell(1' 9' Format(strategy.Latency));    					var rowIndex = 11;    					foreach (var parameter in strategy.StatisticManager.Parameters.SyncGet(c => c.ToArray()))  					{  						var value = parameter.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' parameter.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					rowIndex += 2;  					worker.SetCell(0' rowIndex' LocalizedStrings.Str1340);  					rowIndex++;    					foreach (var strategyParam in strategy.Parameters.CachedValues)  					{  						var value = strategyParam.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' strategyParam.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					//rowIndex += 2;  					//worker.SetCell(0' rowIndex' "Комиссия по типам:");  					//rowIndex++;    					//foreach (var group in Strategy.CommissionManager.Rules.SyncGet(c => c.ToArray()).GroupBy(c => c.GetType().GetDisplayName()))  					//{  					//	var commission = group.Sum(r => r.Commission);    					//	if (commission == 0)  					//		continue;    					//	worker  					//		.SetCell(0' rowIndex' group.Key)  					//		.SetCell(1' rowIndex' commission);    					//	rowIndex++;  					//}    					var columnShift = 3;    					worker  						.SetCell(columnShift + 0' 0' LocalizedStrings.Str985)    						.SetCell(columnShift + 0' 1' LocalizedStrings.Str1192).SetStyle(columnShift + 0' typeof(long))  						.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  						.SetCell(columnShift + 2' 1' LocalizedStrings.Time).SetStyle(columnShift + 2' "HH:mm:ss.fff")  						.SetCell(columnShift + 3' 1' LocalizedStrings.Price).SetStyle(columnShift + 3' typeof(decimal))  						.SetCell(columnShift + 4' 1' LocalizedStrings.Str1341).SetStyle(columnShift + 4' typeof(decimal))  						.SetCell(columnShift + 5' 1' LocalizedStrings.Volume).SetStyle(columnShift + 5' typeof(decimal))  						.SetCell(columnShift + 6' 1' LocalizedStrings.Str128)  						.SetCell(columnShift + 7' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 7' typeof(long))  						.SetCell(columnShift + 8' 1' LocalizedStrings.Str163).SetStyle(columnShift + 8' typeof(decimal))  						.SetCell(columnShift + 9' 1' LocalizedStrings.Str135)  						.SetCell(columnShift + 10' 1' LocalizedStrings.Str1342).SetStyle(columnShift + 11' typeof(decimal))  						.SetCell(columnShift + 11' 1' LocalizedStrings.Str1343).SetStyle(columnShift + 12' typeof(decimal))  						.SetCell(columnShift + 12' 1' LocalizedStrings.Str1344).SetStyle(columnShift + 13' typeof(decimal))  						.SetCell(columnShift + 13' 1' LocalizedStrings.Str1345).SetStyle(columnShift + 14' typeof(decimal))  						.SetCell(columnShift + 14' 1' LocalizedStrings.Str862).SetStyle(columnShift + 15' typeof(decimal));    					worker  						.SetConditionalFormatting(columnShift + 10' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 11' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 12' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 13' ComparisonOperator.Less' "0"' null' Colors.Red);    					var totalPnL = 0m;  					var position = 0m;    					var queues = new Dictionary<Security' PnLQueue>();    					rowIndex = 2;  					foreach (var trade in strategy.MyTrades.ToArray())  					{  						var info = strategy.PnLManager.ProcessMessage(trade.ToMessage());    						totalPnL += info.PnL;  						position += trade.GetPosition() ?? 0;    						var queue = queues.SafeAdd(trade.Trade.Security' key => new PnLQueue(key.ToSecurityId()));    						var localInfo = queue.Process(trade.ToMessage());    						worker  							.SetCell(columnShift + 0' rowIndex' trade.Trade.Id)  							.SetCell(columnShift + 1' rowIndex' trade.Order.TransactionId)  							.SetCell(columnShift + 2' rowIndex' Format(trade.Trade.Time))  							.SetCell(columnShift + 3' rowIndex' trade.Trade.Price)  							.SetCell(columnShift + 4' rowIndex' trade.Order.Price)  							.SetCell(columnShift + 5' rowIndex' trade.Trade.Volume)  							.SetCell(columnShift + 6' rowIndex' Format(trade.Order.Direction))  							.SetCell(columnShift + 7' rowIndex' trade.Order.Id)  							.SetCell(columnShift + 8' rowIndex' trade.Slippage)  							.SetCell(columnShift + 9' rowIndex' trade.Order.Comment)  							.SetCell(columnShift + 10' rowIndex' MathHelper.Round(info.PnL' Decimals))  							.SetCell(columnShift + 11' rowIndex' MathHelper.Round(localInfo.PnL' Decimals))  							.SetCell(columnShift + 12' rowIndex' MathHelper.Round(totalPnL' Decimals))  							.SetCell(columnShift + 13' rowIndex' MathHelper.Round(queue.RealizedPnL' Decimals))  							.SetCell(columnShift + 14' rowIndex' position);    						rowIndex++;  					}    					if (IncludeOrders)  					{  						columnShift += 17;    						worker  							.SetCell(columnShift + 0' 0' LocalizedStrings.Orders)    							.SetCell(columnShift + 0' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  							.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  							.SetCell(columnShift + 2' 1' LocalizedStrings.Str128)  							.SetCell(columnShift + 3' 1' LocalizedStrings.Str1346).SetStyle(columnShift + 3' "HH:mm:ss.fff")  							.SetCell(columnShift + 4' 1' LocalizedStrings.Str1347).SetStyle(columnShift + 4' "HH:mm:ss.fff")  							.SetCell(columnShift + 5' 1' LocalizedStrings.Str1348)  							.SetCell(columnShift + 6' 1' LocalizedStrings.Price).SetStyle(columnShift + 6' typeof(decimal))  							.SetCell(columnShift + 7' 1' LocalizedStrings.Str1323).SetStyle(columnShift + 7' typeof(decimal))  							.SetCell(columnShift + 8' 1' LocalizedStrings.Str1324)  							.SetCell(columnShift + 9' 1' LocalizedStrings.State)  							.SetCell(columnShift + 10' 1' LocalizedStrings.Str1325).SetStyle(columnShift + 10' typeof(decimal))  							.SetCell(columnShift + 11' 1' LocalizedStrings.Volume).SetStyle(columnShift + 11' typeof(decimal))  							.SetCell(columnShift + 12' 1' LocalizedStrings.Type)  							.SetCell(columnShift + 13' 1' LocalizedStrings.Str1326)  							.SetCell(columnShift + 14' 1' LocalizedStrings.Str1327)  							.SetCell(columnShift + 15' 1' LocalizedStrings.Str135);    						worker  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str1329)' null' Colors.Green)  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str238)' null' Colors.Red);    						rowIndex = 2;  						foreach (var order in strategy.Orders.ToArray())  						{  							worker  								.SetCell(columnShift + 0' rowIndex' order.Id)  								.SetCell(columnShift + 1' rowIndex' order.TransactionId)  								.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  								.SetCell(columnShift + 3' rowIndex' Format(order.Time))  								.SetCell(columnShift + 4' rowIndex' Format(order.LastChangeTime))  								.SetCell(columnShift + 5' rowIndex' Format(order.LastChangeTime - order.Time))  								.SetCell(columnShift + 6' rowIndex' order.Price)  								.SetCell(columnShift + 7' rowIndex' MathHelper.Round(order.GetAveragePrice(strategy.Connector)' Decimals))  								.SetCell(columnShift + 8' rowIndex' Format(order.State))  								.SetCell(columnShift + 9' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : LocalizedStrings.Str238))  								.SetCell(columnShift + 10' rowIndex' order.Balance)  								.SetCell(columnShift + 11' rowIndex' order.Volume)  								.SetCell(columnShift + 12' rowIndex' Format(order.Type))  								.SetCell(columnShift + 13' rowIndex' Format(order.LatencyRegistration))  								.SetCell(columnShift + 14' rowIndex' Format(order.LatencyCancellation))  								.SetCell(columnShift + 15' rowIndex' order.Comment);    							rowIndex++;  						}    						var stopOrders = strategy.StopOrders.ToArray();    						if (stopOrders.Length > 0)  						{  							rowIndex += 2;    							worker  								.SetCell(columnShift + 0' rowIndex - 1' LocalizedStrings.Str1351)    								.SetCell(columnShift + 0' rowIndex' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  								.SetCell(columnShift + 1' rowIndex' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  								.SetCell(columnShift + 2' rowIndex' LocalizedStrings.Str128)  								.SetCell(columnShift + 3' rowIndex' LocalizedStrings.Time).SetStyle(columnShift + 3' "HH:mm:ss.fff")  								.SetCell(columnShift + 4' rowIndex' LocalizedStrings.Price).SetStyle(columnShift + 4' typeof(decimal))  								.SetCell(columnShift + 5' rowIndex' LocalizedStrings.Str1324)  								.SetCell(columnShift + 6' rowIndex' LocalizedStrings.State)  								.SetCell(columnShift + 7' rowIndex' LocalizedStrings.Volume).SetStyle(columnShift + 7' typeof(decimal))  								.SetCell(columnShift + 8' rowIndex' LocalizedStrings.Str1326)  								.SetCell(columnShift + 9' rowIndex' LocalizedStrings.Str1327)  								//.SetCell(columnShift + 10' rowIndex' LocalizedStrings.Str1352).SetStyle(columnShift + 9' typeof(long))  								;    							var stopParams = stopOrders[0].Condition.Parameters.Keys.ToArray();    							for (var i = 0; i < stopParams.Length; i++)  								worker.SetCell(columnShift + 11 + i' rowIndex' stopParams[i]);    							foreach (var order in stopOrders)  							{  								worker  									.SetCell(columnShift + 0' rowIndex' order.Id)  									.SetCell(columnShift + 1' rowIndex' order.TransactionId)  									.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  									.SetCell(columnShift + 3' rowIndex' Format(order.Time))  									.SetCell(columnShift + 4' rowIndex' order.Price)  									.SetCell(columnShift + 5' rowIndex' Format(order.State))  									.SetCell(columnShift + 6' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : string.Empty))  									.SetCell(columnShift + 7' rowIndex' order.Volume)  									.SetCell(columnShift + 8' rowIndex' Format(order.LatencyRegistration))  									.SetCell(columnShift + 9' rowIndex' Format(order.LatencyCancellation))  									//.SetCell(columnShift + 10' rowIndex' order.DerivedOrder != null ? (object)order.DerivedOrder.Id : string.Empty)  									;    								for (var i = 0; i < stopParams.Length; i++)  									worker.SetCell(columnShift + 11 + i' rowIndex' order.Condition.Parameters[stopParams[i]] ?? string.Empty);    								rowIndex++;  							}  						}  					}  				}    				worker.Save(FileName' true);  			}
Magic Number,StockSharp.Algo.Strategies.Reporting,ExcelStrategyReport,C:\repos\stocksharp_stocksharp\Algo\Strategies\Reporting\ExcelStrategyReport.cs,Generate,The following statement contains a magic number: using (var worker = hasTemplate ? new ExcelWorker() : new ExcelWorker(Template))  			{  				foreach (var strategy in Strategies)  				{  					if (Template.IsEmpty())  					{  						worker.RenameSheet(strategy.Name);  					}  					else  					{  						if (worker.ContainsSheet(strategy.Name))  							worker.AddSheet(strategy.Name);  					}    					worker  						.SetCell(0' 0' LocalizedStrings.Str1331)    						.SetCell(0' 1' LocalizedStrings.Security + ":")  						.SetCell(1' 1' strategy.Security != null ? strategy.Security.Id : string.Empty)    						.SetCell(0' 2' LocalizedStrings.Portfolio + ":")  						.SetCell(1' 2' strategy.Portfolio != null ? strategy.Portfolio.Name : string.Empty)    						.SetCell(0' 3' LocalizedStrings.Str1334)  						.SetCell(1' 3' Format(strategy.TotalWorkingTime))    						.SetCell(0' 4' LocalizedStrings.Str1335)  						//.SetCell(1' 4' FormatTime(base.Strategy.TotalCPUTime))    						.SetCell(0' 5' LocalizedStrings.Str862 + ":")  						.SetCell(1' 5' strategy.Position)    						.SetCell(0' 6' LocalizedStrings.PnL + ":")  						.SetCell(1' 6' strategy.PnL)    						.SetCell(0' 7' LocalizedStrings.Str159 + ":")  						.SetCell(1' 7' strategy.Commission)    						.SetCell(0' 8' LocalizedStrings.Str163 + ":")  						.SetCell(1' 8' strategy.Slippage)    						.SetCell(0' 9' LocalizedStrings.Str161 + ":")  						.SetCell(1' 9' Format(strategy.Latency));    					var rowIndex = 11;    					foreach (var parameter in strategy.StatisticManager.Parameters.SyncGet(c => c.ToArray()))  					{  						var value = parameter.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' parameter.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					rowIndex += 2;  					worker.SetCell(0' rowIndex' LocalizedStrings.Str1340);  					rowIndex++;    					foreach (var strategyParam in strategy.Parameters.CachedValues)  					{  						var value = strategyParam.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' strategyParam.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					//rowIndex += 2;  					//worker.SetCell(0' rowIndex' "Комиссия по типам:");  					//rowIndex++;    					//foreach (var group in Strategy.CommissionManager.Rules.SyncGet(c => c.ToArray()).GroupBy(c => c.GetType().GetDisplayName()))  					//{  					//	var commission = group.Sum(r => r.Commission);    					//	if (commission == 0)  					//		continue;    					//	worker  					//		.SetCell(0' rowIndex' group.Key)  					//		.SetCell(1' rowIndex' commission);    					//	rowIndex++;  					//}    					var columnShift = 3;    					worker  						.SetCell(columnShift + 0' 0' LocalizedStrings.Str985)    						.SetCell(columnShift + 0' 1' LocalizedStrings.Str1192).SetStyle(columnShift + 0' typeof(long))  						.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  						.SetCell(columnShift + 2' 1' LocalizedStrings.Time).SetStyle(columnShift + 2' "HH:mm:ss.fff")  						.SetCell(columnShift + 3' 1' LocalizedStrings.Price).SetStyle(columnShift + 3' typeof(decimal))  						.SetCell(columnShift + 4' 1' LocalizedStrings.Str1341).SetStyle(columnShift + 4' typeof(decimal))  						.SetCell(columnShift + 5' 1' LocalizedStrings.Volume).SetStyle(columnShift + 5' typeof(decimal))  						.SetCell(columnShift + 6' 1' LocalizedStrings.Str128)  						.SetCell(columnShift + 7' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 7' typeof(long))  						.SetCell(columnShift + 8' 1' LocalizedStrings.Str163).SetStyle(columnShift + 8' typeof(decimal))  						.SetCell(columnShift + 9' 1' LocalizedStrings.Str135)  						.SetCell(columnShift + 10' 1' LocalizedStrings.Str1342).SetStyle(columnShift + 11' typeof(decimal))  						.SetCell(columnShift + 11' 1' LocalizedStrings.Str1343).SetStyle(columnShift + 12' typeof(decimal))  						.SetCell(columnShift + 12' 1' LocalizedStrings.Str1344).SetStyle(columnShift + 13' typeof(decimal))  						.SetCell(columnShift + 13' 1' LocalizedStrings.Str1345).SetStyle(columnShift + 14' typeof(decimal))  						.SetCell(columnShift + 14' 1' LocalizedStrings.Str862).SetStyle(columnShift + 15' typeof(decimal));    					worker  						.SetConditionalFormatting(columnShift + 10' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 11' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 12' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 13' ComparisonOperator.Less' "0"' null' Colors.Red);    					var totalPnL = 0m;  					var position = 0m;    					var queues = new Dictionary<Security' PnLQueue>();    					rowIndex = 2;  					foreach (var trade in strategy.MyTrades.ToArray())  					{  						var info = strategy.PnLManager.ProcessMessage(trade.ToMessage());    						totalPnL += info.PnL;  						position += trade.GetPosition() ?? 0;    						var queue = queues.SafeAdd(trade.Trade.Security' key => new PnLQueue(key.ToSecurityId()));    						var localInfo = queue.Process(trade.ToMessage());    						worker  							.SetCell(columnShift + 0' rowIndex' trade.Trade.Id)  							.SetCell(columnShift + 1' rowIndex' trade.Order.TransactionId)  							.SetCell(columnShift + 2' rowIndex' Format(trade.Trade.Time))  							.SetCell(columnShift + 3' rowIndex' trade.Trade.Price)  							.SetCell(columnShift + 4' rowIndex' trade.Order.Price)  							.SetCell(columnShift + 5' rowIndex' trade.Trade.Volume)  							.SetCell(columnShift + 6' rowIndex' Format(trade.Order.Direction))  							.SetCell(columnShift + 7' rowIndex' trade.Order.Id)  							.SetCell(columnShift + 8' rowIndex' trade.Slippage)  							.SetCell(columnShift + 9' rowIndex' trade.Order.Comment)  							.SetCell(columnShift + 10' rowIndex' MathHelper.Round(info.PnL' Decimals))  							.SetCell(columnShift + 11' rowIndex' MathHelper.Round(localInfo.PnL' Decimals))  							.SetCell(columnShift + 12' rowIndex' MathHelper.Round(totalPnL' Decimals))  							.SetCell(columnShift + 13' rowIndex' MathHelper.Round(queue.RealizedPnL' Decimals))  							.SetCell(columnShift + 14' rowIndex' position);    						rowIndex++;  					}    					if (IncludeOrders)  					{  						columnShift += 17;    						worker  							.SetCell(columnShift + 0' 0' LocalizedStrings.Orders)    							.SetCell(columnShift + 0' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  							.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  							.SetCell(columnShift + 2' 1' LocalizedStrings.Str128)  							.SetCell(columnShift + 3' 1' LocalizedStrings.Str1346).SetStyle(columnShift + 3' "HH:mm:ss.fff")  							.SetCell(columnShift + 4' 1' LocalizedStrings.Str1347).SetStyle(columnShift + 4' "HH:mm:ss.fff")  							.SetCell(columnShift + 5' 1' LocalizedStrings.Str1348)  							.SetCell(columnShift + 6' 1' LocalizedStrings.Price).SetStyle(columnShift + 6' typeof(decimal))  							.SetCell(columnShift + 7' 1' LocalizedStrings.Str1323).SetStyle(columnShift + 7' typeof(decimal))  							.SetCell(columnShift + 8' 1' LocalizedStrings.Str1324)  							.SetCell(columnShift + 9' 1' LocalizedStrings.State)  							.SetCell(columnShift + 10' 1' LocalizedStrings.Str1325).SetStyle(columnShift + 10' typeof(decimal))  							.SetCell(columnShift + 11' 1' LocalizedStrings.Volume).SetStyle(columnShift + 11' typeof(decimal))  							.SetCell(columnShift + 12' 1' LocalizedStrings.Type)  							.SetCell(columnShift + 13' 1' LocalizedStrings.Str1326)  							.SetCell(columnShift + 14' 1' LocalizedStrings.Str1327)  							.SetCell(columnShift + 15' 1' LocalizedStrings.Str135);    						worker  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str1329)' null' Colors.Green)  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str238)' null' Colors.Red);    						rowIndex = 2;  						foreach (var order in strategy.Orders.ToArray())  						{  							worker  								.SetCell(columnShift + 0' rowIndex' order.Id)  								.SetCell(columnShift + 1' rowIndex' order.TransactionId)  								.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  								.SetCell(columnShift + 3' rowIndex' Format(order.Time))  								.SetCell(columnShift + 4' rowIndex' Format(order.LastChangeTime))  								.SetCell(columnShift + 5' rowIndex' Format(order.LastChangeTime - order.Time))  								.SetCell(columnShift + 6' rowIndex' order.Price)  								.SetCell(columnShift + 7' rowIndex' MathHelper.Round(order.GetAveragePrice(strategy.Connector)' Decimals))  								.SetCell(columnShift + 8' rowIndex' Format(order.State))  								.SetCell(columnShift + 9' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : LocalizedStrings.Str238))  								.SetCell(columnShift + 10' rowIndex' order.Balance)  								.SetCell(columnShift + 11' rowIndex' order.Volume)  								.SetCell(columnShift + 12' rowIndex' Format(order.Type))  								.SetCell(columnShift + 13' rowIndex' Format(order.LatencyRegistration))  								.SetCell(columnShift + 14' rowIndex' Format(order.LatencyCancellation))  								.SetCell(columnShift + 15' rowIndex' order.Comment);    							rowIndex++;  						}    						var stopOrders = strategy.StopOrders.ToArray();    						if (stopOrders.Length > 0)  						{  							rowIndex += 2;    							worker  								.SetCell(columnShift + 0' rowIndex - 1' LocalizedStrings.Str1351)    								.SetCell(columnShift + 0' rowIndex' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  								.SetCell(columnShift + 1' rowIndex' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  								.SetCell(columnShift + 2' rowIndex' LocalizedStrings.Str128)  								.SetCell(columnShift + 3' rowIndex' LocalizedStrings.Time).SetStyle(columnShift + 3' "HH:mm:ss.fff")  								.SetCell(columnShift + 4' rowIndex' LocalizedStrings.Price).SetStyle(columnShift + 4' typeof(decimal))  								.SetCell(columnShift + 5' rowIndex' LocalizedStrings.Str1324)  								.SetCell(columnShift + 6' rowIndex' LocalizedStrings.State)  								.SetCell(columnShift + 7' rowIndex' LocalizedStrings.Volume).SetStyle(columnShift + 7' typeof(decimal))  								.SetCell(columnShift + 8' rowIndex' LocalizedStrings.Str1326)  								.SetCell(columnShift + 9' rowIndex' LocalizedStrings.Str1327)  								//.SetCell(columnShift + 10' rowIndex' LocalizedStrings.Str1352).SetStyle(columnShift + 9' typeof(long))  								;    							var stopParams = stopOrders[0].Condition.Parameters.Keys.ToArray();    							for (var i = 0; i < stopParams.Length; i++)  								worker.SetCell(columnShift + 11 + i' rowIndex' stopParams[i]);    							foreach (var order in stopOrders)  							{  								worker  									.SetCell(columnShift + 0' rowIndex' order.Id)  									.SetCell(columnShift + 1' rowIndex' order.TransactionId)  									.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  									.SetCell(columnShift + 3' rowIndex' Format(order.Time))  									.SetCell(columnShift + 4' rowIndex' order.Price)  									.SetCell(columnShift + 5' rowIndex' Format(order.State))  									.SetCell(columnShift + 6' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : string.Empty))  									.SetCell(columnShift + 7' rowIndex' order.Volume)  									.SetCell(columnShift + 8' rowIndex' Format(order.LatencyRegistration))  									.SetCell(columnShift + 9' rowIndex' Format(order.LatencyCancellation))  									//.SetCell(columnShift + 10' rowIndex' order.DerivedOrder != null ? (object)order.DerivedOrder.Id : string.Empty)  									;    								for (var i = 0; i < stopParams.Length; i++)  									worker.SetCell(columnShift + 11 + i' rowIndex' order.Condition.Parameters[stopParams[i]] ?? string.Empty);    								rowIndex++;  							}  						}  					}  				}    				worker.Save(FileName' true);  			}
Magic Number,StockSharp.Algo.Strategies.Reporting,ExcelStrategyReport,C:\repos\stocksharp_stocksharp\Algo\Strategies\Reporting\ExcelStrategyReport.cs,Generate,The following statement contains a magic number: using (var worker = hasTemplate ? new ExcelWorker() : new ExcelWorker(Template))  			{  				foreach (var strategy in Strategies)  				{  					if (Template.IsEmpty())  					{  						worker.RenameSheet(strategy.Name);  					}  					else  					{  						if (worker.ContainsSheet(strategy.Name))  							worker.AddSheet(strategy.Name);  					}    					worker  						.SetCell(0' 0' LocalizedStrings.Str1331)    						.SetCell(0' 1' LocalizedStrings.Security + ":")  						.SetCell(1' 1' strategy.Security != null ? strategy.Security.Id : string.Empty)    						.SetCell(0' 2' LocalizedStrings.Portfolio + ":")  						.SetCell(1' 2' strategy.Portfolio != null ? strategy.Portfolio.Name : string.Empty)    						.SetCell(0' 3' LocalizedStrings.Str1334)  						.SetCell(1' 3' Format(strategy.TotalWorkingTime))    						.SetCell(0' 4' LocalizedStrings.Str1335)  						//.SetCell(1' 4' FormatTime(base.Strategy.TotalCPUTime))    						.SetCell(0' 5' LocalizedStrings.Str862 + ":")  						.SetCell(1' 5' strategy.Position)    						.SetCell(0' 6' LocalizedStrings.PnL + ":")  						.SetCell(1' 6' strategy.PnL)    						.SetCell(0' 7' LocalizedStrings.Str159 + ":")  						.SetCell(1' 7' strategy.Commission)    						.SetCell(0' 8' LocalizedStrings.Str163 + ":")  						.SetCell(1' 8' strategy.Slippage)    						.SetCell(0' 9' LocalizedStrings.Str161 + ":")  						.SetCell(1' 9' Format(strategy.Latency));    					var rowIndex = 11;    					foreach (var parameter in strategy.StatisticManager.Parameters.SyncGet(c => c.ToArray()))  					{  						var value = parameter.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' parameter.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					rowIndex += 2;  					worker.SetCell(0' rowIndex' LocalizedStrings.Str1340);  					rowIndex++;    					foreach (var strategyParam in strategy.Parameters.CachedValues)  					{  						var value = strategyParam.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' strategyParam.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					//rowIndex += 2;  					//worker.SetCell(0' rowIndex' "Комиссия по типам:");  					//rowIndex++;    					//foreach (var group in Strategy.CommissionManager.Rules.SyncGet(c => c.ToArray()).GroupBy(c => c.GetType().GetDisplayName()))  					//{  					//	var commission = group.Sum(r => r.Commission);    					//	if (commission == 0)  					//		continue;    					//	worker  					//		.SetCell(0' rowIndex' group.Key)  					//		.SetCell(1' rowIndex' commission);    					//	rowIndex++;  					//}    					var columnShift = 3;    					worker  						.SetCell(columnShift + 0' 0' LocalizedStrings.Str985)    						.SetCell(columnShift + 0' 1' LocalizedStrings.Str1192).SetStyle(columnShift + 0' typeof(long))  						.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  						.SetCell(columnShift + 2' 1' LocalizedStrings.Time).SetStyle(columnShift + 2' "HH:mm:ss.fff")  						.SetCell(columnShift + 3' 1' LocalizedStrings.Price).SetStyle(columnShift + 3' typeof(decimal))  						.SetCell(columnShift + 4' 1' LocalizedStrings.Str1341).SetStyle(columnShift + 4' typeof(decimal))  						.SetCell(columnShift + 5' 1' LocalizedStrings.Volume).SetStyle(columnShift + 5' typeof(decimal))  						.SetCell(columnShift + 6' 1' LocalizedStrings.Str128)  						.SetCell(columnShift + 7' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 7' typeof(long))  						.SetCell(columnShift + 8' 1' LocalizedStrings.Str163).SetStyle(columnShift + 8' typeof(decimal))  						.SetCell(columnShift + 9' 1' LocalizedStrings.Str135)  						.SetCell(columnShift + 10' 1' LocalizedStrings.Str1342).SetStyle(columnShift + 11' typeof(decimal))  						.SetCell(columnShift + 11' 1' LocalizedStrings.Str1343).SetStyle(columnShift + 12' typeof(decimal))  						.SetCell(columnShift + 12' 1' LocalizedStrings.Str1344).SetStyle(columnShift + 13' typeof(decimal))  						.SetCell(columnShift + 13' 1' LocalizedStrings.Str1345).SetStyle(columnShift + 14' typeof(decimal))  						.SetCell(columnShift + 14' 1' LocalizedStrings.Str862).SetStyle(columnShift + 15' typeof(decimal));    					worker  						.SetConditionalFormatting(columnShift + 10' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 11' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 12' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 13' ComparisonOperator.Less' "0"' null' Colors.Red);    					var totalPnL = 0m;  					var position = 0m;    					var queues = new Dictionary<Security' PnLQueue>();    					rowIndex = 2;  					foreach (var trade in strategy.MyTrades.ToArray())  					{  						var info = strategy.PnLManager.ProcessMessage(trade.ToMessage());    						totalPnL += info.PnL;  						position += trade.GetPosition() ?? 0;    						var queue = queues.SafeAdd(trade.Trade.Security' key => new PnLQueue(key.ToSecurityId()));    						var localInfo = queue.Process(trade.ToMessage());    						worker  							.SetCell(columnShift + 0' rowIndex' trade.Trade.Id)  							.SetCell(columnShift + 1' rowIndex' trade.Order.TransactionId)  							.SetCell(columnShift + 2' rowIndex' Format(trade.Trade.Time))  							.SetCell(columnShift + 3' rowIndex' trade.Trade.Price)  							.SetCell(columnShift + 4' rowIndex' trade.Order.Price)  							.SetCell(columnShift + 5' rowIndex' trade.Trade.Volume)  							.SetCell(columnShift + 6' rowIndex' Format(trade.Order.Direction))  							.SetCell(columnShift + 7' rowIndex' trade.Order.Id)  							.SetCell(columnShift + 8' rowIndex' trade.Slippage)  							.SetCell(columnShift + 9' rowIndex' trade.Order.Comment)  							.SetCell(columnShift + 10' rowIndex' MathHelper.Round(info.PnL' Decimals))  							.SetCell(columnShift + 11' rowIndex' MathHelper.Round(localInfo.PnL' Decimals))  							.SetCell(columnShift + 12' rowIndex' MathHelper.Round(totalPnL' Decimals))  							.SetCell(columnShift + 13' rowIndex' MathHelper.Round(queue.RealizedPnL' Decimals))  							.SetCell(columnShift + 14' rowIndex' position);    						rowIndex++;  					}    					if (IncludeOrders)  					{  						columnShift += 17;    						worker  							.SetCell(columnShift + 0' 0' LocalizedStrings.Orders)    							.SetCell(columnShift + 0' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  							.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  							.SetCell(columnShift + 2' 1' LocalizedStrings.Str128)  							.SetCell(columnShift + 3' 1' LocalizedStrings.Str1346).SetStyle(columnShift + 3' "HH:mm:ss.fff")  							.SetCell(columnShift + 4' 1' LocalizedStrings.Str1347).SetStyle(columnShift + 4' "HH:mm:ss.fff")  							.SetCell(columnShift + 5' 1' LocalizedStrings.Str1348)  							.SetCell(columnShift + 6' 1' LocalizedStrings.Price).SetStyle(columnShift + 6' typeof(decimal))  							.SetCell(columnShift + 7' 1' LocalizedStrings.Str1323).SetStyle(columnShift + 7' typeof(decimal))  							.SetCell(columnShift + 8' 1' LocalizedStrings.Str1324)  							.SetCell(columnShift + 9' 1' LocalizedStrings.State)  							.SetCell(columnShift + 10' 1' LocalizedStrings.Str1325).SetStyle(columnShift + 10' typeof(decimal))  							.SetCell(columnShift + 11' 1' LocalizedStrings.Volume).SetStyle(columnShift + 11' typeof(decimal))  							.SetCell(columnShift + 12' 1' LocalizedStrings.Type)  							.SetCell(columnShift + 13' 1' LocalizedStrings.Str1326)  							.SetCell(columnShift + 14' 1' LocalizedStrings.Str1327)  							.SetCell(columnShift + 15' 1' LocalizedStrings.Str135);    						worker  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str1329)' null' Colors.Green)  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str238)' null' Colors.Red);    						rowIndex = 2;  						foreach (var order in strategy.Orders.ToArray())  						{  							worker  								.SetCell(columnShift + 0' rowIndex' order.Id)  								.SetCell(columnShift + 1' rowIndex' order.TransactionId)  								.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  								.SetCell(columnShift + 3' rowIndex' Format(order.Time))  								.SetCell(columnShift + 4' rowIndex' Format(order.LastChangeTime))  								.SetCell(columnShift + 5' rowIndex' Format(order.LastChangeTime - order.Time))  								.SetCell(columnShift + 6' rowIndex' order.Price)  								.SetCell(columnShift + 7' rowIndex' MathHelper.Round(order.GetAveragePrice(strategy.Connector)' Decimals))  								.SetCell(columnShift + 8' rowIndex' Format(order.State))  								.SetCell(columnShift + 9' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : LocalizedStrings.Str238))  								.SetCell(columnShift + 10' rowIndex' order.Balance)  								.SetCell(columnShift + 11' rowIndex' order.Volume)  								.SetCell(columnShift + 12' rowIndex' Format(order.Type))  								.SetCell(columnShift + 13' rowIndex' Format(order.LatencyRegistration))  								.SetCell(columnShift + 14' rowIndex' Format(order.LatencyCancellation))  								.SetCell(columnShift + 15' rowIndex' order.Comment);    							rowIndex++;  						}    						var stopOrders = strategy.StopOrders.ToArray();    						if (stopOrders.Length > 0)  						{  							rowIndex += 2;    							worker  								.SetCell(columnShift + 0' rowIndex - 1' LocalizedStrings.Str1351)    								.SetCell(columnShift + 0' rowIndex' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  								.SetCell(columnShift + 1' rowIndex' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  								.SetCell(columnShift + 2' rowIndex' LocalizedStrings.Str128)  								.SetCell(columnShift + 3' rowIndex' LocalizedStrings.Time).SetStyle(columnShift + 3' "HH:mm:ss.fff")  								.SetCell(columnShift + 4' rowIndex' LocalizedStrings.Price).SetStyle(columnShift + 4' typeof(decimal))  								.SetCell(columnShift + 5' rowIndex' LocalizedStrings.Str1324)  								.SetCell(columnShift + 6' rowIndex' LocalizedStrings.State)  								.SetCell(columnShift + 7' rowIndex' LocalizedStrings.Volume).SetStyle(columnShift + 7' typeof(decimal))  								.SetCell(columnShift + 8' rowIndex' LocalizedStrings.Str1326)  								.SetCell(columnShift + 9' rowIndex' LocalizedStrings.Str1327)  								//.SetCell(columnShift + 10' rowIndex' LocalizedStrings.Str1352).SetStyle(columnShift + 9' typeof(long))  								;    							var stopParams = stopOrders[0].Condition.Parameters.Keys.ToArray();    							for (var i = 0; i < stopParams.Length; i++)  								worker.SetCell(columnShift + 11 + i' rowIndex' stopParams[i]);    							foreach (var order in stopOrders)  							{  								worker  									.SetCell(columnShift + 0' rowIndex' order.Id)  									.SetCell(columnShift + 1' rowIndex' order.TransactionId)  									.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  									.SetCell(columnShift + 3' rowIndex' Format(order.Time))  									.SetCell(columnShift + 4' rowIndex' order.Price)  									.SetCell(columnShift + 5' rowIndex' Format(order.State))  									.SetCell(columnShift + 6' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : string.Empty))  									.SetCell(columnShift + 7' rowIndex' order.Volume)  									.SetCell(columnShift + 8' rowIndex' Format(order.LatencyRegistration))  									.SetCell(columnShift + 9' rowIndex' Format(order.LatencyCancellation))  									//.SetCell(columnShift + 10' rowIndex' order.DerivedOrder != null ? (object)order.DerivedOrder.Id : string.Empty)  									;    								for (var i = 0; i < stopParams.Length; i++)  									worker.SetCell(columnShift + 11 + i' rowIndex' order.Condition.Parameters[stopParams[i]] ?? string.Empty);    								rowIndex++;  							}  						}  					}  				}    				worker.Save(FileName' true);  			}
Magic Number,StockSharp.Algo.Strategies.Reporting,ExcelStrategyReport,C:\repos\stocksharp_stocksharp\Algo\Strategies\Reporting\ExcelStrategyReport.cs,Generate,The following statement contains a magic number: using (var worker = hasTemplate ? new ExcelWorker() : new ExcelWorker(Template))  			{  				foreach (var strategy in Strategies)  				{  					if (Template.IsEmpty())  					{  						worker.RenameSheet(strategy.Name);  					}  					else  					{  						if (worker.ContainsSheet(strategy.Name))  							worker.AddSheet(strategy.Name);  					}    					worker  						.SetCell(0' 0' LocalizedStrings.Str1331)    						.SetCell(0' 1' LocalizedStrings.Security + ":")  						.SetCell(1' 1' strategy.Security != null ? strategy.Security.Id : string.Empty)    						.SetCell(0' 2' LocalizedStrings.Portfolio + ":")  						.SetCell(1' 2' strategy.Portfolio != null ? strategy.Portfolio.Name : string.Empty)    						.SetCell(0' 3' LocalizedStrings.Str1334)  						.SetCell(1' 3' Format(strategy.TotalWorkingTime))    						.SetCell(0' 4' LocalizedStrings.Str1335)  						//.SetCell(1' 4' FormatTime(base.Strategy.TotalCPUTime))    						.SetCell(0' 5' LocalizedStrings.Str862 + ":")  						.SetCell(1' 5' strategy.Position)    						.SetCell(0' 6' LocalizedStrings.PnL + ":")  						.SetCell(1' 6' strategy.PnL)    						.SetCell(0' 7' LocalizedStrings.Str159 + ":")  						.SetCell(1' 7' strategy.Commission)    						.SetCell(0' 8' LocalizedStrings.Str163 + ":")  						.SetCell(1' 8' strategy.Slippage)    						.SetCell(0' 9' LocalizedStrings.Str161 + ":")  						.SetCell(1' 9' Format(strategy.Latency));    					var rowIndex = 11;    					foreach (var parameter in strategy.StatisticManager.Parameters.SyncGet(c => c.ToArray()))  					{  						var value = parameter.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' parameter.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					rowIndex += 2;  					worker.SetCell(0' rowIndex' LocalizedStrings.Str1340);  					rowIndex++;    					foreach (var strategyParam in strategy.Parameters.CachedValues)  					{  						var value = strategyParam.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' strategyParam.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					//rowIndex += 2;  					//worker.SetCell(0' rowIndex' "Комиссия по типам:");  					//rowIndex++;    					//foreach (var group in Strategy.CommissionManager.Rules.SyncGet(c => c.ToArray()).GroupBy(c => c.GetType().GetDisplayName()))  					//{  					//	var commission = group.Sum(r => r.Commission);    					//	if (commission == 0)  					//		continue;    					//	worker  					//		.SetCell(0' rowIndex' group.Key)  					//		.SetCell(1' rowIndex' commission);    					//	rowIndex++;  					//}    					var columnShift = 3;    					worker  						.SetCell(columnShift + 0' 0' LocalizedStrings.Str985)    						.SetCell(columnShift + 0' 1' LocalizedStrings.Str1192).SetStyle(columnShift + 0' typeof(long))  						.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  						.SetCell(columnShift + 2' 1' LocalizedStrings.Time).SetStyle(columnShift + 2' "HH:mm:ss.fff")  						.SetCell(columnShift + 3' 1' LocalizedStrings.Price).SetStyle(columnShift + 3' typeof(decimal))  						.SetCell(columnShift + 4' 1' LocalizedStrings.Str1341).SetStyle(columnShift + 4' typeof(decimal))  						.SetCell(columnShift + 5' 1' LocalizedStrings.Volume).SetStyle(columnShift + 5' typeof(decimal))  						.SetCell(columnShift + 6' 1' LocalizedStrings.Str128)  						.SetCell(columnShift + 7' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 7' typeof(long))  						.SetCell(columnShift + 8' 1' LocalizedStrings.Str163).SetStyle(columnShift + 8' typeof(decimal))  						.SetCell(columnShift + 9' 1' LocalizedStrings.Str135)  						.SetCell(columnShift + 10' 1' LocalizedStrings.Str1342).SetStyle(columnShift + 11' typeof(decimal))  						.SetCell(columnShift + 11' 1' LocalizedStrings.Str1343).SetStyle(columnShift + 12' typeof(decimal))  						.SetCell(columnShift + 12' 1' LocalizedStrings.Str1344).SetStyle(columnShift + 13' typeof(decimal))  						.SetCell(columnShift + 13' 1' LocalizedStrings.Str1345).SetStyle(columnShift + 14' typeof(decimal))  						.SetCell(columnShift + 14' 1' LocalizedStrings.Str862).SetStyle(columnShift + 15' typeof(decimal));    					worker  						.SetConditionalFormatting(columnShift + 10' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 11' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 12' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 13' ComparisonOperator.Less' "0"' null' Colors.Red);    					var totalPnL = 0m;  					var position = 0m;    					var queues = new Dictionary<Security' PnLQueue>();    					rowIndex = 2;  					foreach (var trade in strategy.MyTrades.ToArray())  					{  						var info = strategy.PnLManager.ProcessMessage(trade.ToMessage());    						totalPnL += info.PnL;  						position += trade.GetPosition() ?? 0;    						var queue = queues.SafeAdd(trade.Trade.Security' key => new PnLQueue(key.ToSecurityId()));    						var localInfo = queue.Process(trade.ToMessage());    						worker  							.SetCell(columnShift + 0' rowIndex' trade.Trade.Id)  							.SetCell(columnShift + 1' rowIndex' trade.Order.TransactionId)  							.SetCell(columnShift + 2' rowIndex' Format(trade.Trade.Time))  							.SetCell(columnShift + 3' rowIndex' trade.Trade.Price)  							.SetCell(columnShift + 4' rowIndex' trade.Order.Price)  							.SetCell(columnShift + 5' rowIndex' trade.Trade.Volume)  							.SetCell(columnShift + 6' rowIndex' Format(trade.Order.Direction))  							.SetCell(columnShift + 7' rowIndex' trade.Order.Id)  							.SetCell(columnShift + 8' rowIndex' trade.Slippage)  							.SetCell(columnShift + 9' rowIndex' trade.Order.Comment)  							.SetCell(columnShift + 10' rowIndex' MathHelper.Round(info.PnL' Decimals))  							.SetCell(columnShift + 11' rowIndex' MathHelper.Round(localInfo.PnL' Decimals))  							.SetCell(columnShift + 12' rowIndex' MathHelper.Round(totalPnL' Decimals))  							.SetCell(columnShift + 13' rowIndex' MathHelper.Round(queue.RealizedPnL' Decimals))  							.SetCell(columnShift + 14' rowIndex' position);    						rowIndex++;  					}    					if (IncludeOrders)  					{  						columnShift += 17;    						worker  							.SetCell(columnShift + 0' 0' LocalizedStrings.Orders)    							.SetCell(columnShift + 0' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  							.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  							.SetCell(columnShift + 2' 1' LocalizedStrings.Str128)  							.SetCell(columnShift + 3' 1' LocalizedStrings.Str1346).SetStyle(columnShift + 3' "HH:mm:ss.fff")  							.SetCell(columnShift + 4' 1' LocalizedStrings.Str1347).SetStyle(columnShift + 4' "HH:mm:ss.fff")  							.SetCell(columnShift + 5' 1' LocalizedStrings.Str1348)  							.SetCell(columnShift + 6' 1' LocalizedStrings.Price).SetStyle(columnShift + 6' typeof(decimal))  							.SetCell(columnShift + 7' 1' LocalizedStrings.Str1323).SetStyle(columnShift + 7' typeof(decimal))  							.SetCell(columnShift + 8' 1' LocalizedStrings.Str1324)  							.SetCell(columnShift + 9' 1' LocalizedStrings.State)  							.SetCell(columnShift + 10' 1' LocalizedStrings.Str1325).SetStyle(columnShift + 10' typeof(decimal))  							.SetCell(columnShift + 11' 1' LocalizedStrings.Volume).SetStyle(columnShift + 11' typeof(decimal))  							.SetCell(columnShift + 12' 1' LocalizedStrings.Type)  							.SetCell(columnShift + 13' 1' LocalizedStrings.Str1326)  							.SetCell(columnShift + 14' 1' LocalizedStrings.Str1327)  							.SetCell(columnShift + 15' 1' LocalizedStrings.Str135);    						worker  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str1329)' null' Colors.Green)  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str238)' null' Colors.Red);    						rowIndex = 2;  						foreach (var order in strategy.Orders.ToArray())  						{  							worker  								.SetCell(columnShift + 0' rowIndex' order.Id)  								.SetCell(columnShift + 1' rowIndex' order.TransactionId)  								.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  								.SetCell(columnShift + 3' rowIndex' Format(order.Time))  								.SetCell(columnShift + 4' rowIndex' Format(order.LastChangeTime))  								.SetCell(columnShift + 5' rowIndex' Format(order.LastChangeTime - order.Time))  								.SetCell(columnShift + 6' rowIndex' order.Price)  								.SetCell(columnShift + 7' rowIndex' MathHelper.Round(order.GetAveragePrice(strategy.Connector)' Decimals))  								.SetCell(columnShift + 8' rowIndex' Format(order.State))  								.SetCell(columnShift + 9' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : LocalizedStrings.Str238))  								.SetCell(columnShift + 10' rowIndex' order.Balance)  								.SetCell(columnShift + 11' rowIndex' order.Volume)  								.SetCell(columnShift + 12' rowIndex' Format(order.Type))  								.SetCell(columnShift + 13' rowIndex' Format(order.LatencyRegistration))  								.SetCell(columnShift + 14' rowIndex' Format(order.LatencyCancellation))  								.SetCell(columnShift + 15' rowIndex' order.Comment);    							rowIndex++;  						}    						var stopOrders = strategy.StopOrders.ToArray();    						if (stopOrders.Length > 0)  						{  							rowIndex += 2;    							worker  								.SetCell(columnShift + 0' rowIndex - 1' LocalizedStrings.Str1351)    								.SetCell(columnShift + 0' rowIndex' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  								.SetCell(columnShift + 1' rowIndex' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  								.SetCell(columnShift + 2' rowIndex' LocalizedStrings.Str128)  								.SetCell(columnShift + 3' rowIndex' LocalizedStrings.Time).SetStyle(columnShift + 3' "HH:mm:ss.fff")  								.SetCell(columnShift + 4' rowIndex' LocalizedStrings.Price).SetStyle(columnShift + 4' typeof(decimal))  								.SetCell(columnShift + 5' rowIndex' LocalizedStrings.Str1324)  								.SetCell(columnShift + 6' rowIndex' LocalizedStrings.State)  								.SetCell(columnShift + 7' rowIndex' LocalizedStrings.Volume).SetStyle(columnShift + 7' typeof(decimal))  								.SetCell(columnShift + 8' rowIndex' LocalizedStrings.Str1326)  								.SetCell(columnShift + 9' rowIndex' LocalizedStrings.Str1327)  								//.SetCell(columnShift + 10' rowIndex' LocalizedStrings.Str1352).SetStyle(columnShift + 9' typeof(long))  								;    							var stopParams = stopOrders[0].Condition.Parameters.Keys.ToArray();    							for (var i = 0; i < stopParams.Length; i++)  								worker.SetCell(columnShift + 11 + i' rowIndex' stopParams[i]);    							foreach (var order in stopOrders)  							{  								worker  									.SetCell(columnShift + 0' rowIndex' order.Id)  									.SetCell(columnShift + 1' rowIndex' order.TransactionId)  									.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  									.SetCell(columnShift + 3' rowIndex' Format(order.Time))  									.SetCell(columnShift + 4' rowIndex' order.Price)  									.SetCell(columnShift + 5' rowIndex' Format(order.State))  									.SetCell(columnShift + 6' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : string.Empty))  									.SetCell(columnShift + 7' rowIndex' order.Volume)  									.SetCell(columnShift + 8' rowIndex' Format(order.LatencyRegistration))  									.SetCell(columnShift + 9' rowIndex' Format(order.LatencyCancellation))  									//.SetCell(columnShift + 10' rowIndex' order.DerivedOrder != null ? (object)order.DerivedOrder.Id : string.Empty)  									;    								for (var i = 0; i < stopParams.Length; i++)  									worker.SetCell(columnShift + 11 + i' rowIndex' order.Condition.Parameters[stopParams[i]] ?? string.Empty);    								rowIndex++;  							}  						}  					}  				}    				worker.Save(FileName' true);  			}
Magic Number,StockSharp.Algo.Strategies.Reporting,ExcelStrategyReport,C:\repos\stocksharp_stocksharp\Algo\Strategies\Reporting\ExcelStrategyReport.cs,Generate,The following statement contains a magic number: using (var worker = hasTemplate ? new ExcelWorker() : new ExcelWorker(Template))  			{  				foreach (var strategy in Strategies)  				{  					if (Template.IsEmpty())  					{  						worker.RenameSheet(strategy.Name);  					}  					else  					{  						if (worker.ContainsSheet(strategy.Name))  							worker.AddSheet(strategy.Name);  					}    					worker  						.SetCell(0' 0' LocalizedStrings.Str1331)    						.SetCell(0' 1' LocalizedStrings.Security + ":")  						.SetCell(1' 1' strategy.Security != null ? strategy.Security.Id : string.Empty)    						.SetCell(0' 2' LocalizedStrings.Portfolio + ":")  						.SetCell(1' 2' strategy.Portfolio != null ? strategy.Portfolio.Name : string.Empty)    						.SetCell(0' 3' LocalizedStrings.Str1334)  						.SetCell(1' 3' Format(strategy.TotalWorkingTime))    						.SetCell(0' 4' LocalizedStrings.Str1335)  						//.SetCell(1' 4' FormatTime(base.Strategy.TotalCPUTime))    						.SetCell(0' 5' LocalizedStrings.Str862 + ":")  						.SetCell(1' 5' strategy.Position)    						.SetCell(0' 6' LocalizedStrings.PnL + ":")  						.SetCell(1' 6' strategy.PnL)    						.SetCell(0' 7' LocalizedStrings.Str159 + ":")  						.SetCell(1' 7' strategy.Commission)    						.SetCell(0' 8' LocalizedStrings.Str163 + ":")  						.SetCell(1' 8' strategy.Slippage)    						.SetCell(0' 9' LocalizedStrings.Str161 + ":")  						.SetCell(1' 9' Format(strategy.Latency));    					var rowIndex = 11;    					foreach (var parameter in strategy.StatisticManager.Parameters.SyncGet(c => c.ToArray()))  					{  						var value = parameter.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' parameter.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					rowIndex += 2;  					worker.SetCell(0' rowIndex' LocalizedStrings.Str1340);  					rowIndex++;    					foreach (var strategyParam in strategy.Parameters.CachedValues)  					{  						var value = strategyParam.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' strategyParam.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					//rowIndex += 2;  					//worker.SetCell(0' rowIndex' "Комиссия по типам:");  					//rowIndex++;    					//foreach (var group in Strategy.CommissionManager.Rules.SyncGet(c => c.ToArray()).GroupBy(c => c.GetType().GetDisplayName()))  					//{  					//	var commission = group.Sum(r => r.Commission);    					//	if (commission == 0)  					//		continue;    					//	worker  					//		.SetCell(0' rowIndex' group.Key)  					//		.SetCell(1' rowIndex' commission);    					//	rowIndex++;  					//}    					var columnShift = 3;    					worker  						.SetCell(columnShift + 0' 0' LocalizedStrings.Str985)    						.SetCell(columnShift + 0' 1' LocalizedStrings.Str1192).SetStyle(columnShift + 0' typeof(long))  						.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  						.SetCell(columnShift + 2' 1' LocalizedStrings.Time).SetStyle(columnShift + 2' "HH:mm:ss.fff")  						.SetCell(columnShift + 3' 1' LocalizedStrings.Price).SetStyle(columnShift + 3' typeof(decimal))  						.SetCell(columnShift + 4' 1' LocalizedStrings.Str1341).SetStyle(columnShift + 4' typeof(decimal))  						.SetCell(columnShift + 5' 1' LocalizedStrings.Volume).SetStyle(columnShift + 5' typeof(decimal))  						.SetCell(columnShift + 6' 1' LocalizedStrings.Str128)  						.SetCell(columnShift + 7' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 7' typeof(long))  						.SetCell(columnShift + 8' 1' LocalizedStrings.Str163).SetStyle(columnShift + 8' typeof(decimal))  						.SetCell(columnShift + 9' 1' LocalizedStrings.Str135)  						.SetCell(columnShift + 10' 1' LocalizedStrings.Str1342).SetStyle(columnShift + 11' typeof(decimal))  						.SetCell(columnShift + 11' 1' LocalizedStrings.Str1343).SetStyle(columnShift + 12' typeof(decimal))  						.SetCell(columnShift + 12' 1' LocalizedStrings.Str1344).SetStyle(columnShift + 13' typeof(decimal))  						.SetCell(columnShift + 13' 1' LocalizedStrings.Str1345).SetStyle(columnShift + 14' typeof(decimal))  						.SetCell(columnShift + 14' 1' LocalizedStrings.Str862).SetStyle(columnShift + 15' typeof(decimal));    					worker  						.SetConditionalFormatting(columnShift + 10' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 11' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 12' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 13' ComparisonOperator.Less' "0"' null' Colors.Red);    					var totalPnL = 0m;  					var position = 0m;    					var queues = new Dictionary<Security' PnLQueue>();    					rowIndex = 2;  					foreach (var trade in strategy.MyTrades.ToArray())  					{  						var info = strategy.PnLManager.ProcessMessage(trade.ToMessage());    						totalPnL += info.PnL;  						position += trade.GetPosition() ?? 0;    						var queue = queues.SafeAdd(trade.Trade.Security' key => new PnLQueue(key.ToSecurityId()));    						var localInfo = queue.Process(trade.ToMessage());    						worker  							.SetCell(columnShift + 0' rowIndex' trade.Trade.Id)  							.SetCell(columnShift + 1' rowIndex' trade.Order.TransactionId)  							.SetCell(columnShift + 2' rowIndex' Format(trade.Trade.Time))  							.SetCell(columnShift + 3' rowIndex' trade.Trade.Price)  							.SetCell(columnShift + 4' rowIndex' trade.Order.Price)  							.SetCell(columnShift + 5' rowIndex' trade.Trade.Volume)  							.SetCell(columnShift + 6' rowIndex' Format(trade.Order.Direction))  							.SetCell(columnShift + 7' rowIndex' trade.Order.Id)  							.SetCell(columnShift + 8' rowIndex' trade.Slippage)  							.SetCell(columnShift + 9' rowIndex' trade.Order.Comment)  							.SetCell(columnShift + 10' rowIndex' MathHelper.Round(info.PnL' Decimals))  							.SetCell(columnShift + 11' rowIndex' MathHelper.Round(localInfo.PnL' Decimals))  							.SetCell(columnShift + 12' rowIndex' MathHelper.Round(totalPnL' Decimals))  							.SetCell(columnShift + 13' rowIndex' MathHelper.Round(queue.RealizedPnL' Decimals))  							.SetCell(columnShift + 14' rowIndex' position);    						rowIndex++;  					}    					if (IncludeOrders)  					{  						columnShift += 17;    						worker  							.SetCell(columnShift + 0' 0' LocalizedStrings.Orders)    							.SetCell(columnShift + 0' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  							.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  							.SetCell(columnShift + 2' 1' LocalizedStrings.Str128)  							.SetCell(columnShift + 3' 1' LocalizedStrings.Str1346).SetStyle(columnShift + 3' "HH:mm:ss.fff")  							.SetCell(columnShift + 4' 1' LocalizedStrings.Str1347).SetStyle(columnShift + 4' "HH:mm:ss.fff")  							.SetCell(columnShift + 5' 1' LocalizedStrings.Str1348)  							.SetCell(columnShift + 6' 1' LocalizedStrings.Price).SetStyle(columnShift + 6' typeof(decimal))  							.SetCell(columnShift + 7' 1' LocalizedStrings.Str1323).SetStyle(columnShift + 7' typeof(decimal))  							.SetCell(columnShift + 8' 1' LocalizedStrings.Str1324)  							.SetCell(columnShift + 9' 1' LocalizedStrings.State)  							.SetCell(columnShift + 10' 1' LocalizedStrings.Str1325).SetStyle(columnShift + 10' typeof(decimal))  							.SetCell(columnShift + 11' 1' LocalizedStrings.Volume).SetStyle(columnShift + 11' typeof(decimal))  							.SetCell(columnShift + 12' 1' LocalizedStrings.Type)  							.SetCell(columnShift + 13' 1' LocalizedStrings.Str1326)  							.SetCell(columnShift + 14' 1' LocalizedStrings.Str1327)  							.SetCell(columnShift + 15' 1' LocalizedStrings.Str135);    						worker  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str1329)' null' Colors.Green)  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str238)' null' Colors.Red);    						rowIndex = 2;  						foreach (var order in strategy.Orders.ToArray())  						{  							worker  								.SetCell(columnShift + 0' rowIndex' order.Id)  								.SetCell(columnShift + 1' rowIndex' order.TransactionId)  								.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  								.SetCell(columnShift + 3' rowIndex' Format(order.Time))  								.SetCell(columnShift + 4' rowIndex' Format(order.LastChangeTime))  								.SetCell(columnShift + 5' rowIndex' Format(order.LastChangeTime - order.Time))  								.SetCell(columnShift + 6' rowIndex' order.Price)  								.SetCell(columnShift + 7' rowIndex' MathHelper.Round(order.GetAveragePrice(strategy.Connector)' Decimals))  								.SetCell(columnShift + 8' rowIndex' Format(order.State))  								.SetCell(columnShift + 9' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : LocalizedStrings.Str238))  								.SetCell(columnShift + 10' rowIndex' order.Balance)  								.SetCell(columnShift + 11' rowIndex' order.Volume)  								.SetCell(columnShift + 12' rowIndex' Format(order.Type))  								.SetCell(columnShift + 13' rowIndex' Format(order.LatencyRegistration))  								.SetCell(columnShift + 14' rowIndex' Format(order.LatencyCancellation))  								.SetCell(columnShift + 15' rowIndex' order.Comment);    							rowIndex++;  						}    						var stopOrders = strategy.StopOrders.ToArray();    						if (stopOrders.Length > 0)  						{  							rowIndex += 2;    							worker  								.SetCell(columnShift + 0' rowIndex - 1' LocalizedStrings.Str1351)    								.SetCell(columnShift + 0' rowIndex' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  								.SetCell(columnShift + 1' rowIndex' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  								.SetCell(columnShift + 2' rowIndex' LocalizedStrings.Str128)  								.SetCell(columnShift + 3' rowIndex' LocalizedStrings.Time).SetStyle(columnShift + 3' "HH:mm:ss.fff")  								.SetCell(columnShift + 4' rowIndex' LocalizedStrings.Price).SetStyle(columnShift + 4' typeof(decimal))  								.SetCell(columnShift + 5' rowIndex' LocalizedStrings.Str1324)  								.SetCell(columnShift + 6' rowIndex' LocalizedStrings.State)  								.SetCell(columnShift + 7' rowIndex' LocalizedStrings.Volume).SetStyle(columnShift + 7' typeof(decimal))  								.SetCell(columnShift + 8' rowIndex' LocalizedStrings.Str1326)  								.SetCell(columnShift + 9' rowIndex' LocalizedStrings.Str1327)  								//.SetCell(columnShift + 10' rowIndex' LocalizedStrings.Str1352).SetStyle(columnShift + 9' typeof(long))  								;    							var stopParams = stopOrders[0].Condition.Parameters.Keys.ToArray();    							for (var i = 0; i < stopParams.Length; i++)  								worker.SetCell(columnShift + 11 + i' rowIndex' stopParams[i]);    							foreach (var order in stopOrders)  							{  								worker  									.SetCell(columnShift + 0' rowIndex' order.Id)  									.SetCell(columnShift + 1' rowIndex' order.TransactionId)  									.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  									.SetCell(columnShift + 3' rowIndex' Format(order.Time))  									.SetCell(columnShift + 4' rowIndex' order.Price)  									.SetCell(columnShift + 5' rowIndex' Format(order.State))  									.SetCell(columnShift + 6' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : string.Empty))  									.SetCell(columnShift + 7' rowIndex' order.Volume)  									.SetCell(columnShift + 8' rowIndex' Format(order.LatencyRegistration))  									.SetCell(columnShift + 9' rowIndex' Format(order.LatencyCancellation))  									//.SetCell(columnShift + 10' rowIndex' order.DerivedOrder != null ? (object)order.DerivedOrder.Id : string.Empty)  									;    								for (var i = 0; i < stopParams.Length; i++)  									worker.SetCell(columnShift + 11 + i' rowIndex' order.Condition.Parameters[stopParams[i]] ?? string.Empty);    								rowIndex++;  							}  						}  					}  				}    				worker.Save(FileName' true);  			}
Magic Number,StockSharp.Algo.Strategies.Reporting,ExcelStrategyReport,C:\repos\stocksharp_stocksharp\Algo\Strategies\Reporting\ExcelStrategyReport.cs,Generate,The following statement contains a magic number: using (var worker = hasTemplate ? new ExcelWorker() : new ExcelWorker(Template))  			{  				foreach (var strategy in Strategies)  				{  					if (Template.IsEmpty())  					{  						worker.RenameSheet(strategy.Name);  					}  					else  					{  						if (worker.ContainsSheet(strategy.Name))  							worker.AddSheet(strategy.Name);  					}    					worker  						.SetCell(0' 0' LocalizedStrings.Str1331)    						.SetCell(0' 1' LocalizedStrings.Security + ":")  						.SetCell(1' 1' strategy.Security != null ? strategy.Security.Id : string.Empty)    						.SetCell(0' 2' LocalizedStrings.Portfolio + ":")  						.SetCell(1' 2' strategy.Portfolio != null ? strategy.Portfolio.Name : string.Empty)    						.SetCell(0' 3' LocalizedStrings.Str1334)  						.SetCell(1' 3' Format(strategy.TotalWorkingTime))    						.SetCell(0' 4' LocalizedStrings.Str1335)  						//.SetCell(1' 4' FormatTime(base.Strategy.TotalCPUTime))    						.SetCell(0' 5' LocalizedStrings.Str862 + ":")  						.SetCell(1' 5' strategy.Position)    						.SetCell(0' 6' LocalizedStrings.PnL + ":")  						.SetCell(1' 6' strategy.PnL)    						.SetCell(0' 7' LocalizedStrings.Str159 + ":")  						.SetCell(1' 7' strategy.Commission)    						.SetCell(0' 8' LocalizedStrings.Str163 + ":")  						.SetCell(1' 8' strategy.Slippage)    						.SetCell(0' 9' LocalizedStrings.Str161 + ":")  						.SetCell(1' 9' Format(strategy.Latency));    					var rowIndex = 11;    					foreach (var parameter in strategy.StatisticManager.Parameters.SyncGet(c => c.ToArray()))  					{  						var value = parameter.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' parameter.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					rowIndex += 2;  					worker.SetCell(0' rowIndex' LocalizedStrings.Str1340);  					rowIndex++;    					foreach (var strategyParam in strategy.Parameters.CachedValues)  					{  						var value = strategyParam.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' strategyParam.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					//rowIndex += 2;  					//worker.SetCell(0' rowIndex' "Комиссия по типам:");  					//rowIndex++;    					//foreach (var group in Strategy.CommissionManager.Rules.SyncGet(c => c.ToArray()).GroupBy(c => c.GetType().GetDisplayName()))  					//{  					//	var commission = group.Sum(r => r.Commission);    					//	if (commission == 0)  					//		continue;    					//	worker  					//		.SetCell(0' rowIndex' group.Key)  					//		.SetCell(1' rowIndex' commission);    					//	rowIndex++;  					//}    					var columnShift = 3;    					worker  						.SetCell(columnShift + 0' 0' LocalizedStrings.Str985)    						.SetCell(columnShift + 0' 1' LocalizedStrings.Str1192).SetStyle(columnShift + 0' typeof(long))  						.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  						.SetCell(columnShift + 2' 1' LocalizedStrings.Time).SetStyle(columnShift + 2' "HH:mm:ss.fff")  						.SetCell(columnShift + 3' 1' LocalizedStrings.Price).SetStyle(columnShift + 3' typeof(decimal))  						.SetCell(columnShift + 4' 1' LocalizedStrings.Str1341).SetStyle(columnShift + 4' typeof(decimal))  						.SetCell(columnShift + 5' 1' LocalizedStrings.Volume).SetStyle(columnShift + 5' typeof(decimal))  						.SetCell(columnShift + 6' 1' LocalizedStrings.Str128)  						.SetCell(columnShift + 7' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 7' typeof(long))  						.SetCell(columnShift + 8' 1' LocalizedStrings.Str163).SetStyle(columnShift + 8' typeof(decimal))  						.SetCell(columnShift + 9' 1' LocalizedStrings.Str135)  						.SetCell(columnShift + 10' 1' LocalizedStrings.Str1342).SetStyle(columnShift + 11' typeof(decimal))  						.SetCell(columnShift + 11' 1' LocalizedStrings.Str1343).SetStyle(columnShift + 12' typeof(decimal))  						.SetCell(columnShift + 12' 1' LocalizedStrings.Str1344).SetStyle(columnShift + 13' typeof(decimal))  						.SetCell(columnShift + 13' 1' LocalizedStrings.Str1345).SetStyle(columnShift + 14' typeof(decimal))  						.SetCell(columnShift + 14' 1' LocalizedStrings.Str862).SetStyle(columnShift + 15' typeof(decimal));    					worker  						.SetConditionalFormatting(columnShift + 10' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 11' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 12' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 13' ComparisonOperator.Less' "0"' null' Colors.Red);    					var totalPnL = 0m;  					var position = 0m;    					var queues = new Dictionary<Security' PnLQueue>();    					rowIndex = 2;  					foreach (var trade in strategy.MyTrades.ToArray())  					{  						var info = strategy.PnLManager.ProcessMessage(trade.ToMessage());    						totalPnL += info.PnL;  						position += trade.GetPosition() ?? 0;    						var queue = queues.SafeAdd(trade.Trade.Security' key => new PnLQueue(key.ToSecurityId()));    						var localInfo = queue.Process(trade.ToMessage());    						worker  							.SetCell(columnShift + 0' rowIndex' trade.Trade.Id)  							.SetCell(columnShift + 1' rowIndex' trade.Order.TransactionId)  							.SetCell(columnShift + 2' rowIndex' Format(trade.Trade.Time))  							.SetCell(columnShift + 3' rowIndex' trade.Trade.Price)  							.SetCell(columnShift + 4' rowIndex' trade.Order.Price)  							.SetCell(columnShift + 5' rowIndex' trade.Trade.Volume)  							.SetCell(columnShift + 6' rowIndex' Format(trade.Order.Direction))  							.SetCell(columnShift + 7' rowIndex' trade.Order.Id)  							.SetCell(columnShift + 8' rowIndex' trade.Slippage)  							.SetCell(columnShift + 9' rowIndex' trade.Order.Comment)  							.SetCell(columnShift + 10' rowIndex' MathHelper.Round(info.PnL' Decimals))  							.SetCell(columnShift + 11' rowIndex' MathHelper.Round(localInfo.PnL' Decimals))  							.SetCell(columnShift + 12' rowIndex' MathHelper.Round(totalPnL' Decimals))  							.SetCell(columnShift + 13' rowIndex' MathHelper.Round(queue.RealizedPnL' Decimals))  							.SetCell(columnShift + 14' rowIndex' position);    						rowIndex++;  					}    					if (IncludeOrders)  					{  						columnShift += 17;    						worker  							.SetCell(columnShift + 0' 0' LocalizedStrings.Orders)    							.SetCell(columnShift + 0' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  							.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  							.SetCell(columnShift + 2' 1' LocalizedStrings.Str128)  							.SetCell(columnShift + 3' 1' LocalizedStrings.Str1346).SetStyle(columnShift + 3' "HH:mm:ss.fff")  							.SetCell(columnShift + 4' 1' LocalizedStrings.Str1347).SetStyle(columnShift + 4' "HH:mm:ss.fff")  							.SetCell(columnShift + 5' 1' LocalizedStrings.Str1348)  							.SetCell(columnShift + 6' 1' LocalizedStrings.Price).SetStyle(columnShift + 6' typeof(decimal))  							.SetCell(columnShift + 7' 1' LocalizedStrings.Str1323).SetStyle(columnShift + 7' typeof(decimal))  							.SetCell(columnShift + 8' 1' LocalizedStrings.Str1324)  							.SetCell(columnShift + 9' 1' LocalizedStrings.State)  							.SetCell(columnShift + 10' 1' LocalizedStrings.Str1325).SetStyle(columnShift + 10' typeof(decimal))  							.SetCell(columnShift + 11' 1' LocalizedStrings.Volume).SetStyle(columnShift + 11' typeof(decimal))  							.SetCell(columnShift + 12' 1' LocalizedStrings.Type)  							.SetCell(columnShift + 13' 1' LocalizedStrings.Str1326)  							.SetCell(columnShift + 14' 1' LocalizedStrings.Str1327)  							.SetCell(columnShift + 15' 1' LocalizedStrings.Str135);    						worker  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str1329)' null' Colors.Green)  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str238)' null' Colors.Red);    						rowIndex = 2;  						foreach (var order in strategy.Orders.ToArray())  						{  							worker  								.SetCell(columnShift + 0' rowIndex' order.Id)  								.SetCell(columnShift + 1' rowIndex' order.TransactionId)  								.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  								.SetCell(columnShift + 3' rowIndex' Format(order.Time))  								.SetCell(columnShift + 4' rowIndex' Format(order.LastChangeTime))  								.SetCell(columnShift + 5' rowIndex' Format(order.LastChangeTime - order.Time))  								.SetCell(columnShift + 6' rowIndex' order.Price)  								.SetCell(columnShift + 7' rowIndex' MathHelper.Round(order.GetAveragePrice(strategy.Connector)' Decimals))  								.SetCell(columnShift + 8' rowIndex' Format(order.State))  								.SetCell(columnShift + 9' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : LocalizedStrings.Str238))  								.SetCell(columnShift + 10' rowIndex' order.Balance)  								.SetCell(columnShift + 11' rowIndex' order.Volume)  								.SetCell(columnShift + 12' rowIndex' Format(order.Type))  								.SetCell(columnShift + 13' rowIndex' Format(order.LatencyRegistration))  								.SetCell(columnShift + 14' rowIndex' Format(order.LatencyCancellation))  								.SetCell(columnShift + 15' rowIndex' order.Comment);    							rowIndex++;  						}    						var stopOrders = strategy.StopOrders.ToArray();    						if (stopOrders.Length > 0)  						{  							rowIndex += 2;    							worker  								.SetCell(columnShift + 0' rowIndex - 1' LocalizedStrings.Str1351)    								.SetCell(columnShift + 0' rowIndex' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  								.SetCell(columnShift + 1' rowIndex' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  								.SetCell(columnShift + 2' rowIndex' LocalizedStrings.Str128)  								.SetCell(columnShift + 3' rowIndex' LocalizedStrings.Time).SetStyle(columnShift + 3' "HH:mm:ss.fff")  								.SetCell(columnShift + 4' rowIndex' LocalizedStrings.Price).SetStyle(columnShift + 4' typeof(decimal))  								.SetCell(columnShift + 5' rowIndex' LocalizedStrings.Str1324)  								.SetCell(columnShift + 6' rowIndex' LocalizedStrings.State)  								.SetCell(columnShift + 7' rowIndex' LocalizedStrings.Volume).SetStyle(columnShift + 7' typeof(decimal))  								.SetCell(columnShift + 8' rowIndex' LocalizedStrings.Str1326)  								.SetCell(columnShift + 9' rowIndex' LocalizedStrings.Str1327)  								//.SetCell(columnShift + 10' rowIndex' LocalizedStrings.Str1352).SetStyle(columnShift + 9' typeof(long))  								;    							var stopParams = stopOrders[0].Condition.Parameters.Keys.ToArray();    							for (var i = 0; i < stopParams.Length; i++)  								worker.SetCell(columnShift + 11 + i' rowIndex' stopParams[i]);    							foreach (var order in stopOrders)  							{  								worker  									.SetCell(columnShift + 0' rowIndex' order.Id)  									.SetCell(columnShift + 1' rowIndex' order.TransactionId)  									.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  									.SetCell(columnShift + 3' rowIndex' Format(order.Time))  									.SetCell(columnShift + 4' rowIndex' order.Price)  									.SetCell(columnShift + 5' rowIndex' Format(order.State))  									.SetCell(columnShift + 6' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : string.Empty))  									.SetCell(columnShift + 7' rowIndex' order.Volume)  									.SetCell(columnShift + 8' rowIndex' Format(order.LatencyRegistration))  									.SetCell(columnShift + 9' rowIndex' Format(order.LatencyCancellation))  									//.SetCell(columnShift + 10' rowIndex' order.DerivedOrder != null ? (object)order.DerivedOrder.Id : string.Empty)  									;    								for (var i = 0; i < stopParams.Length; i++)  									worker.SetCell(columnShift + 11 + i' rowIndex' order.Condition.Parameters[stopParams[i]] ?? string.Empty);    								rowIndex++;  							}  						}  					}  				}    				worker.Save(FileName' true);  			}
Magic Number,StockSharp.Algo.Strategies.Reporting,ExcelStrategyReport,C:\repos\stocksharp_stocksharp\Algo\Strategies\Reporting\ExcelStrategyReport.cs,Generate,The following statement contains a magic number: using (var worker = hasTemplate ? new ExcelWorker() : new ExcelWorker(Template))  			{  				foreach (var strategy in Strategies)  				{  					if (Template.IsEmpty())  					{  						worker.RenameSheet(strategy.Name);  					}  					else  					{  						if (worker.ContainsSheet(strategy.Name))  							worker.AddSheet(strategy.Name);  					}    					worker  						.SetCell(0' 0' LocalizedStrings.Str1331)    						.SetCell(0' 1' LocalizedStrings.Security + ":")  						.SetCell(1' 1' strategy.Security != null ? strategy.Security.Id : string.Empty)    						.SetCell(0' 2' LocalizedStrings.Portfolio + ":")  						.SetCell(1' 2' strategy.Portfolio != null ? strategy.Portfolio.Name : string.Empty)    						.SetCell(0' 3' LocalizedStrings.Str1334)  						.SetCell(1' 3' Format(strategy.TotalWorkingTime))    						.SetCell(0' 4' LocalizedStrings.Str1335)  						//.SetCell(1' 4' FormatTime(base.Strategy.TotalCPUTime))    						.SetCell(0' 5' LocalizedStrings.Str862 + ":")  						.SetCell(1' 5' strategy.Position)    						.SetCell(0' 6' LocalizedStrings.PnL + ":")  						.SetCell(1' 6' strategy.PnL)    						.SetCell(0' 7' LocalizedStrings.Str159 + ":")  						.SetCell(1' 7' strategy.Commission)    						.SetCell(0' 8' LocalizedStrings.Str163 + ":")  						.SetCell(1' 8' strategy.Slippage)    						.SetCell(0' 9' LocalizedStrings.Str161 + ":")  						.SetCell(1' 9' Format(strategy.Latency));    					var rowIndex = 11;    					foreach (var parameter in strategy.StatisticManager.Parameters.SyncGet(c => c.ToArray()))  					{  						var value = parameter.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' parameter.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					rowIndex += 2;  					worker.SetCell(0' rowIndex' LocalizedStrings.Str1340);  					rowIndex++;    					foreach (var strategyParam in strategy.Parameters.CachedValues)  					{  						var value = strategyParam.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' strategyParam.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					//rowIndex += 2;  					//worker.SetCell(0' rowIndex' "Комиссия по типам:");  					//rowIndex++;    					//foreach (var group in Strategy.CommissionManager.Rules.SyncGet(c => c.ToArray()).GroupBy(c => c.GetType().GetDisplayName()))  					//{  					//	var commission = group.Sum(r => r.Commission);    					//	if (commission == 0)  					//		continue;    					//	worker  					//		.SetCell(0' rowIndex' group.Key)  					//		.SetCell(1' rowIndex' commission);    					//	rowIndex++;  					//}    					var columnShift = 3;    					worker  						.SetCell(columnShift + 0' 0' LocalizedStrings.Str985)    						.SetCell(columnShift + 0' 1' LocalizedStrings.Str1192).SetStyle(columnShift + 0' typeof(long))  						.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  						.SetCell(columnShift + 2' 1' LocalizedStrings.Time).SetStyle(columnShift + 2' "HH:mm:ss.fff")  						.SetCell(columnShift + 3' 1' LocalizedStrings.Price).SetStyle(columnShift + 3' typeof(decimal))  						.SetCell(columnShift + 4' 1' LocalizedStrings.Str1341).SetStyle(columnShift + 4' typeof(decimal))  						.SetCell(columnShift + 5' 1' LocalizedStrings.Volume).SetStyle(columnShift + 5' typeof(decimal))  						.SetCell(columnShift + 6' 1' LocalizedStrings.Str128)  						.SetCell(columnShift + 7' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 7' typeof(long))  						.SetCell(columnShift + 8' 1' LocalizedStrings.Str163).SetStyle(columnShift + 8' typeof(decimal))  						.SetCell(columnShift + 9' 1' LocalizedStrings.Str135)  						.SetCell(columnShift + 10' 1' LocalizedStrings.Str1342).SetStyle(columnShift + 11' typeof(decimal))  						.SetCell(columnShift + 11' 1' LocalizedStrings.Str1343).SetStyle(columnShift + 12' typeof(decimal))  						.SetCell(columnShift + 12' 1' LocalizedStrings.Str1344).SetStyle(columnShift + 13' typeof(decimal))  						.SetCell(columnShift + 13' 1' LocalizedStrings.Str1345).SetStyle(columnShift + 14' typeof(decimal))  						.SetCell(columnShift + 14' 1' LocalizedStrings.Str862).SetStyle(columnShift + 15' typeof(decimal));    					worker  						.SetConditionalFormatting(columnShift + 10' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 11' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 12' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 13' ComparisonOperator.Less' "0"' null' Colors.Red);    					var totalPnL = 0m;  					var position = 0m;    					var queues = new Dictionary<Security' PnLQueue>();    					rowIndex = 2;  					foreach (var trade in strategy.MyTrades.ToArray())  					{  						var info = strategy.PnLManager.ProcessMessage(trade.ToMessage());    						totalPnL += info.PnL;  						position += trade.GetPosition() ?? 0;    						var queue = queues.SafeAdd(trade.Trade.Security' key => new PnLQueue(key.ToSecurityId()));    						var localInfo = queue.Process(trade.ToMessage());    						worker  							.SetCell(columnShift + 0' rowIndex' trade.Trade.Id)  							.SetCell(columnShift + 1' rowIndex' trade.Order.TransactionId)  							.SetCell(columnShift + 2' rowIndex' Format(trade.Trade.Time))  							.SetCell(columnShift + 3' rowIndex' trade.Trade.Price)  							.SetCell(columnShift + 4' rowIndex' trade.Order.Price)  							.SetCell(columnShift + 5' rowIndex' trade.Trade.Volume)  							.SetCell(columnShift + 6' rowIndex' Format(trade.Order.Direction))  							.SetCell(columnShift + 7' rowIndex' trade.Order.Id)  							.SetCell(columnShift + 8' rowIndex' trade.Slippage)  							.SetCell(columnShift + 9' rowIndex' trade.Order.Comment)  							.SetCell(columnShift + 10' rowIndex' MathHelper.Round(info.PnL' Decimals))  							.SetCell(columnShift + 11' rowIndex' MathHelper.Round(localInfo.PnL' Decimals))  							.SetCell(columnShift + 12' rowIndex' MathHelper.Round(totalPnL' Decimals))  							.SetCell(columnShift + 13' rowIndex' MathHelper.Round(queue.RealizedPnL' Decimals))  							.SetCell(columnShift + 14' rowIndex' position);    						rowIndex++;  					}    					if (IncludeOrders)  					{  						columnShift += 17;    						worker  							.SetCell(columnShift + 0' 0' LocalizedStrings.Orders)    							.SetCell(columnShift + 0' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  							.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  							.SetCell(columnShift + 2' 1' LocalizedStrings.Str128)  							.SetCell(columnShift + 3' 1' LocalizedStrings.Str1346).SetStyle(columnShift + 3' "HH:mm:ss.fff")  							.SetCell(columnShift + 4' 1' LocalizedStrings.Str1347).SetStyle(columnShift + 4' "HH:mm:ss.fff")  							.SetCell(columnShift + 5' 1' LocalizedStrings.Str1348)  							.SetCell(columnShift + 6' 1' LocalizedStrings.Price).SetStyle(columnShift + 6' typeof(decimal))  							.SetCell(columnShift + 7' 1' LocalizedStrings.Str1323).SetStyle(columnShift + 7' typeof(decimal))  							.SetCell(columnShift + 8' 1' LocalizedStrings.Str1324)  							.SetCell(columnShift + 9' 1' LocalizedStrings.State)  							.SetCell(columnShift + 10' 1' LocalizedStrings.Str1325).SetStyle(columnShift + 10' typeof(decimal))  							.SetCell(columnShift + 11' 1' LocalizedStrings.Volume).SetStyle(columnShift + 11' typeof(decimal))  							.SetCell(columnShift + 12' 1' LocalizedStrings.Type)  							.SetCell(columnShift + 13' 1' LocalizedStrings.Str1326)  							.SetCell(columnShift + 14' 1' LocalizedStrings.Str1327)  							.SetCell(columnShift + 15' 1' LocalizedStrings.Str135);    						worker  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str1329)' null' Colors.Green)  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str238)' null' Colors.Red);    						rowIndex = 2;  						foreach (var order in strategy.Orders.ToArray())  						{  							worker  								.SetCell(columnShift + 0' rowIndex' order.Id)  								.SetCell(columnShift + 1' rowIndex' order.TransactionId)  								.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  								.SetCell(columnShift + 3' rowIndex' Format(order.Time))  								.SetCell(columnShift + 4' rowIndex' Format(order.LastChangeTime))  								.SetCell(columnShift + 5' rowIndex' Format(order.LastChangeTime - order.Time))  								.SetCell(columnShift + 6' rowIndex' order.Price)  								.SetCell(columnShift + 7' rowIndex' MathHelper.Round(order.GetAveragePrice(strategy.Connector)' Decimals))  								.SetCell(columnShift + 8' rowIndex' Format(order.State))  								.SetCell(columnShift + 9' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : LocalizedStrings.Str238))  								.SetCell(columnShift + 10' rowIndex' order.Balance)  								.SetCell(columnShift + 11' rowIndex' order.Volume)  								.SetCell(columnShift + 12' rowIndex' Format(order.Type))  								.SetCell(columnShift + 13' rowIndex' Format(order.LatencyRegistration))  								.SetCell(columnShift + 14' rowIndex' Format(order.LatencyCancellation))  								.SetCell(columnShift + 15' rowIndex' order.Comment);    							rowIndex++;  						}    						var stopOrders = strategy.StopOrders.ToArray();    						if (stopOrders.Length > 0)  						{  							rowIndex += 2;    							worker  								.SetCell(columnShift + 0' rowIndex - 1' LocalizedStrings.Str1351)    								.SetCell(columnShift + 0' rowIndex' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  								.SetCell(columnShift + 1' rowIndex' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  								.SetCell(columnShift + 2' rowIndex' LocalizedStrings.Str128)  								.SetCell(columnShift + 3' rowIndex' LocalizedStrings.Time).SetStyle(columnShift + 3' "HH:mm:ss.fff")  								.SetCell(columnShift + 4' rowIndex' LocalizedStrings.Price).SetStyle(columnShift + 4' typeof(decimal))  								.SetCell(columnShift + 5' rowIndex' LocalizedStrings.Str1324)  								.SetCell(columnShift + 6' rowIndex' LocalizedStrings.State)  								.SetCell(columnShift + 7' rowIndex' LocalizedStrings.Volume).SetStyle(columnShift + 7' typeof(decimal))  								.SetCell(columnShift + 8' rowIndex' LocalizedStrings.Str1326)  								.SetCell(columnShift + 9' rowIndex' LocalizedStrings.Str1327)  								//.SetCell(columnShift + 10' rowIndex' LocalizedStrings.Str1352).SetStyle(columnShift + 9' typeof(long))  								;    							var stopParams = stopOrders[0].Condition.Parameters.Keys.ToArray();    							for (var i = 0; i < stopParams.Length; i++)  								worker.SetCell(columnShift + 11 + i' rowIndex' stopParams[i]);    							foreach (var order in stopOrders)  							{  								worker  									.SetCell(columnShift + 0' rowIndex' order.Id)  									.SetCell(columnShift + 1' rowIndex' order.TransactionId)  									.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  									.SetCell(columnShift + 3' rowIndex' Format(order.Time))  									.SetCell(columnShift + 4' rowIndex' order.Price)  									.SetCell(columnShift + 5' rowIndex' Format(order.State))  									.SetCell(columnShift + 6' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : string.Empty))  									.SetCell(columnShift + 7' rowIndex' order.Volume)  									.SetCell(columnShift + 8' rowIndex' Format(order.LatencyRegistration))  									.SetCell(columnShift + 9' rowIndex' Format(order.LatencyCancellation))  									//.SetCell(columnShift + 10' rowIndex' order.DerivedOrder != null ? (object)order.DerivedOrder.Id : string.Empty)  									;    								for (var i = 0; i < stopParams.Length; i++)  									worker.SetCell(columnShift + 11 + i' rowIndex' order.Condition.Parameters[stopParams[i]] ?? string.Empty);    								rowIndex++;  							}  						}  					}  				}    				worker.Save(FileName' true);  			}
Magic Number,StockSharp.Algo.Strategies.Reporting,ExcelStrategyReport,C:\repos\stocksharp_stocksharp\Algo\Strategies\Reporting\ExcelStrategyReport.cs,Generate,The following statement contains a magic number: using (var worker = hasTemplate ? new ExcelWorker() : new ExcelWorker(Template))  			{  				foreach (var strategy in Strategies)  				{  					if (Template.IsEmpty())  					{  						worker.RenameSheet(strategy.Name);  					}  					else  					{  						if (worker.ContainsSheet(strategy.Name))  							worker.AddSheet(strategy.Name);  					}    					worker  						.SetCell(0' 0' LocalizedStrings.Str1331)    						.SetCell(0' 1' LocalizedStrings.Security + ":")  						.SetCell(1' 1' strategy.Security != null ? strategy.Security.Id : string.Empty)    						.SetCell(0' 2' LocalizedStrings.Portfolio + ":")  						.SetCell(1' 2' strategy.Portfolio != null ? strategy.Portfolio.Name : string.Empty)    						.SetCell(0' 3' LocalizedStrings.Str1334)  						.SetCell(1' 3' Format(strategy.TotalWorkingTime))    						.SetCell(0' 4' LocalizedStrings.Str1335)  						//.SetCell(1' 4' FormatTime(base.Strategy.TotalCPUTime))    						.SetCell(0' 5' LocalizedStrings.Str862 + ":")  						.SetCell(1' 5' strategy.Position)    						.SetCell(0' 6' LocalizedStrings.PnL + ":")  						.SetCell(1' 6' strategy.PnL)    						.SetCell(0' 7' LocalizedStrings.Str159 + ":")  						.SetCell(1' 7' strategy.Commission)    						.SetCell(0' 8' LocalizedStrings.Str163 + ":")  						.SetCell(1' 8' strategy.Slippage)    						.SetCell(0' 9' LocalizedStrings.Str161 + ":")  						.SetCell(1' 9' Format(strategy.Latency));    					var rowIndex = 11;    					foreach (var parameter in strategy.StatisticManager.Parameters.SyncGet(c => c.ToArray()))  					{  						var value = parameter.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' parameter.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					rowIndex += 2;  					worker.SetCell(0' rowIndex' LocalizedStrings.Str1340);  					rowIndex++;    					foreach (var strategyParam in strategy.Parameters.CachedValues)  					{  						var value = strategyParam.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' strategyParam.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					//rowIndex += 2;  					//worker.SetCell(0' rowIndex' "Комиссия по типам:");  					//rowIndex++;    					//foreach (var group in Strategy.CommissionManager.Rules.SyncGet(c => c.ToArray()).GroupBy(c => c.GetType().GetDisplayName()))  					//{  					//	var commission = group.Sum(r => r.Commission);    					//	if (commission == 0)  					//		continue;    					//	worker  					//		.SetCell(0' rowIndex' group.Key)  					//		.SetCell(1' rowIndex' commission);    					//	rowIndex++;  					//}    					var columnShift = 3;    					worker  						.SetCell(columnShift + 0' 0' LocalizedStrings.Str985)    						.SetCell(columnShift + 0' 1' LocalizedStrings.Str1192).SetStyle(columnShift + 0' typeof(long))  						.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  						.SetCell(columnShift + 2' 1' LocalizedStrings.Time).SetStyle(columnShift + 2' "HH:mm:ss.fff")  						.SetCell(columnShift + 3' 1' LocalizedStrings.Price).SetStyle(columnShift + 3' typeof(decimal))  						.SetCell(columnShift + 4' 1' LocalizedStrings.Str1341).SetStyle(columnShift + 4' typeof(decimal))  						.SetCell(columnShift + 5' 1' LocalizedStrings.Volume).SetStyle(columnShift + 5' typeof(decimal))  						.SetCell(columnShift + 6' 1' LocalizedStrings.Str128)  						.SetCell(columnShift + 7' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 7' typeof(long))  						.SetCell(columnShift + 8' 1' LocalizedStrings.Str163).SetStyle(columnShift + 8' typeof(decimal))  						.SetCell(columnShift + 9' 1' LocalizedStrings.Str135)  						.SetCell(columnShift + 10' 1' LocalizedStrings.Str1342).SetStyle(columnShift + 11' typeof(decimal))  						.SetCell(columnShift + 11' 1' LocalizedStrings.Str1343).SetStyle(columnShift + 12' typeof(decimal))  						.SetCell(columnShift + 12' 1' LocalizedStrings.Str1344).SetStyle(columnShift + 13' typeof(decimal))  						.SetCell(columnShift + 13' 1' LocalizedStrings.Str1345).SetStyle(columnShift + 14' typeof(decimal))  						.SetCell(columnShift + 14' 1' LocalizedStrings.Str862).SetStyle(columnShift + 15' typeof(decimal));    					worker  						.SetConditionalFormatting(columnShift + 10' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 11' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 12' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 13' ComparisonOperator.Less' "0"' null' Colors.Red);    					var totalPnL = 0m;  					var position = 0m;    					var queues = new Dictionary<Security' PnLQueue>();    					rowIndex = 2;  					foreach (var trade in strategy.MyTrades.ToArray())  					{  						var info = strategy.PnLManager.ProcessMessage(trade.ToMessage());    						totalPnL += info.PnL;  						position += trade.GetPosition() ?? 0;    						var queue = queues.SafeAdd(trade.Trade.Security' key => new PnLQueue(key.ToSecurityId()));    						var localInfo = queue.Process(trade.ToMessage());    						worker  							.SetCell(columnShift + 0' rowIndex' trade.Trade.Id)  							.SetCell(columnShift + 1' rowIndex' trade.Order.TransactionId)  							.SetCell(columnShift + 2' rowIndex' Format(trade.Trade.Time))  							.SetCell(columnShift + 3' rowIndex' trade.Trade.Price)  							.SetCell(columnShift + 4' rowIndex' trade.Order.Price)  							.SetCell(columnShift + 5' rowIndex' trade.Trade.Volume)  							.SetCell(columnShift + 6' rowIndex' Format(trade.Order.Direction))  							.SetCell(columnShift + 7' rowIndex' trade.Order.Id)  							.SetCell(columnShift + 8' rowIndex' trade.Slippage)  							.SetCell(columnShift + 9' rowIndex' trade.Order.Comment)  							.SetCell(columnShift + 10' rowIndex' MathHelper.Round(info.PnL' Decimals))  							.SetCell(columnShift + 11' rowIndex' MathHelper.Round(localInfo.PnL' Decimals))  							.SetCell(columnShift + 12' rowIndex' MathHelper.Round(totalPnL' Decimals))  							.SetCell(columnShift + 13' rowIndex' MathHelper.Round(queue.RealizedPnL' Decimals))  							.SetCell(columnShift + 14' rowIndex' position);    						rowIndex++;  					}    					if (IncludeOrders)  					{  						columnShift += 17;    						worker  							.SetCell(columnShift + 0' 0' LocalizedStrings.Orders)    							.SetCell(columnShift + 0' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  							.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  							.SetCell(columnShift + 2' 1' LocalizedStrings.Str128)  							.SetCell(columnShift + 3' 1' LocalizedStrings.Str1346).SetStyle(columnShift + 3' "HH:mm:ss.fff")  							.SetCell(columnShift + 4' 1' LocalizedStrings.Str1347).SetStyle(columnShift + 4' "HH:mm:ss.fff")  							.SetCell(columnShift + 5' 1' LocalizedStrings.Str1348)  							.SetCell(columnShift + 6' 1' LocalizedStrings.Price).SetStyle(columnShift + 6' typeof(decimal))  							.SetCell(columnShift + 7' 1' LocalizedStrings.Str1323).SetStyle(columnShift + 7' typeof(decimal))  							.SetCell(columnShift + 8' 1' LocalizedStrings.Str1324)  							.SetCell(columnShift + 9' 1' LocalizedStrings.State)  							.SetCell(columnShift + 10' 1' LocalizedStrings.Str1325).SetStyle(columnShift + 10' typeof(decimal))  							.SetCell(columnShift + 11' 1' LocalizedStrings.Volume).SetStyle(columnShift + 11' typeof(decimal))  							.SetCell(columnShift + 12' 1' LocalizedStrings.Type)  							.SetCell(columnShift + 13' 1' LocalizedStrings.Str1326)  							.SetCell(columnShift + 14' 1' LocalizedStrings.Str1327)  							.SetCell(columnShift + 15' 1' LocalizedStrings.Str135);    						worker  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str1329)' null' Colors.Green)  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str238)' null' Colors.Red);    						rowIndex = 2;  						foreach (var order in strategy.Orders.ToArray())  						{  							worker  								.SetCell(columnShift + 0' rowIndex' order.Id)  								.SetCell(columnShift + 1' rowIndex' order.TransactionId)  								.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  								.SetCell(columnShift + 3' rowIndex' Format(order.Time))  								.SetCell(columnShift + 4' rowIndex' Format(order.LastChangeTime))  								.SetCell(columnShift + 5' rowIndex' Format(order.LastChangeTime - order.Time))  								.SetCell(columnShift + 6' rowIndex' order.Price)  								.SetCell(columnShift + 7' rowIndex' MathHelper.Round(order.GetAveragePrice(strategy.Connector)' Decimals))  								.SetCell(columnShift + 8' rowIndex' Format(order.State))  								.SetCell(columnShift + 9' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : LocalizedStrings.Str238))  								.SetCell(columnShift + 10' rowIndex' order.Balance)  								.SetCell(columnShift + 11' rowIndex' order.Volume)  								.SetCell(columnShift + 12' rowIndex' Format(order.Type))  								.SetCell(columnShift + 13' rowIndex' Format(order.LatencyRegistration))  								.SetCell(columnShift + 14' rowIndex' Format(order.LatencyCancellation))  								.SetCell(columnShift + 15' rowIndex' order.Comment);    							rowIndex++;  						}    						var stopOrders = strategy.StopOrders.ToArray();    						if (stopOrders.Length > 0)  						{  							rowIndex += 2;    							worker  								.SetCell(columnShift + 0' rowIndex - 1' LocalizedStrings.Str1351)    								.SetCell(columnShift + 0' rowIndex' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  								.SetCell(columnShift + 1' rowIndex' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  								.SetCell(columnShift + 2' rowIndex' LocalizedStrings.Str128)  								.SetCell(columnShift + 3' rowIndex' LocalizedStrings.Time).SetStyle(columnShift + 3' "HH:mm:ss.fff")  								.SetCell(columnShift + 4' rowIndex' LocalizedStrings.Price).SetStyle(columnShift + 4' typeof(decimal))  								.SetCell(columnShift + 5' rowIndex' LocalizedStrings.Str1324)  								.SetCell(columnShift + 6' rowIndex' LocalizedStrings.State)  								.SetCell(columnShift + 7' rowIndex' LocalizedStrings.Volume).SetStyle(columnShift + 7' typeof(decimal))  								.SetCell(columnShift + 8' rowIndex' LocalizedStrings.Str1326)  								.SetCell(columnShift + 9' rowIndex' LocalizedStrings.Str1327)  								//.SetCell(columnShift + 10' rowIndex' LocalizedStrings.Str1352).SetStyle(columnShift + 9' typeof(long))  								;    							var stopParams = stopOrders[0].Condition.Parameters.Keys.ToArray();    							for (var i = 0; i < stopParams.Length; i++)  								worker.SetCell(columnShift + 11 + i' rowIndex' stopParams[i]);    							foreach (var order in stopOrders)  							{  								worker  									.SetCell(columnShift + 0' rowIndex' order.Id)  									.SetCell(columnShift + 1' rowIndex' order.TransactionId)  									.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  									.SetCell(columnShift + 3' rowIndex' Format(order.Time))  									.SetCell(columnShift + 4' rowIndex' order.Price)  									.SetCell(columnShift + 5' rowIndex' Format(order.State))  									.SetCell(columnShift + 6' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : string.Empty))  									.SetCell(columnShift + 7' rowIndex' order.Volume)  									.SetCell(columnShift + 8' rowIndex' Format(order.LatencyRegistration))  									.SetCell(columnShift + 9' rowIndex' Format(order.LatencyCancellation))  									//.SetCell(columnShift + 10' rowIndex' order.DerivedOrder != null ? (object)order.DerivedOrder.Id : string.Empty)  									;    								for (var i = 0; i < stopParams.Length; i++)  									worker.SetCell(columnShift + 11 + i' rowIndex' order.Condition.Parameters[stopParams[i]] ?? string.Empty);    								rowIndex++;  							}  						}  					}  				}    				worker.Save(FileName' true);  			}
Magic Number,StockSharp.Algo.Strategies.Reporting,ExcelStrategyReport,C:\repos\stocksharp_stocksharp\Algo\Strategies\Reporting\ExcelStrategyReport.cs,Generate,The following statement contains a magic number: using (var worker = hasTemplate ? new ExcelWorker() : new ExcelWorker(Template))  			{  				foreach (var strategy in Strategies)  				{  					if (Template.IsEmpty())  					{  						worker.RenameSheet(strategy.Name);  					}  					else  					{  						if (worker.ContainsSheet(strategy.Name))  							worker.AddSheet(strategy.Name);  					}    					worker  						.SetCell(0' 0' LocalizedStrings.Str1331)    						.SetCell(0' 1' LocalizedStrings.Security + ":")  						.SetCell(1' 1' strategy.Security != null ? strategy.Security.Id : string.Empty)    						.SetCell(0' 2' LocalizedStrings.Portfolio + ":")  						.SetCell(1' 2' strategy.Portfolio != null ? strategy.Portfolio.Name : string.Empty)    						.SetCell(0' 3' LocalizedStrings.Str1334)  						.SetCell(1' 3' Format(strategy.TotalWorkingTime))    						.SetCell(0' 4' LocalizedStrings.Str1335)  						//.SetCell(1' 4' FormatTime(base.Strategy.TotalCPUTime))    						.SetCell(0' 5' LocalizedStrings.Str862 + ":")  						.SetCell(1' 5' strategy.Position)    						.SetCell(0' 6' LocalizedStrings.PnL + ":")  						.SetCell(1' 6' strategy.PnL)    						.SetCell(0' 7' LocalizedStrings.Str159 + ":")  						.SetCell(1' 7' strategy.Commission)    						.SetCell(0' 8' LocalizedStrings.Str163 + ":")  						.SetCell(1' 8' strategy.Slippage)    						.SetCell(0' 9' LocalizedStrings.Str161 + ":")  						.SetCell(1' 9' Format(strategy.Latency));    					var rowIndex = 11;    					foreach (var parameter in strategy.StatisticManager.Parameters.SyncGet(c => c.ToArray()))  					{  						var value = parameter.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' parameter.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					rowIndex += 2;  					worker.SetCell(0' rowIndex' LocalizedStrings.Str1340);  					rowIndex++;    					foreach (var strategyParam in strategy.Parameters.CachedValues)  					{  						var value = strategyParam.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' strategyParam.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					//rowIndex += 2;  					//worker.SetCell(0' rowIndex' "Комиссия по типам:");  					//rowIndex++;    					//foreach (var group in Strategy.CommissionManager.Rules.SyncGet(c => c.ToArray()).GroupBy(c => c.GetType().GetDisplayName()))  					//{  					//	var commission = group.Sum(r => r.Commission);    					//	if (commission == 0)  					//		continue;    					//	worker  					//		.SetCell(0' rowIndex' group.Key)  					//		.SetCell(1' rowIndex' commission);    					//	rowIndex++;  					//}    					var columnShift = 3;    					worker  						.SetCell(columnShift + 0' 0' LocalizedStrings.Str985)    						.SetCell(columnShift + 0' 1' LocalizedStrings.Str1192).SetStyle(columnShift + 0' typeof(long))  						.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  						.SetCell(columnShift + 2' 1' LocalizedStrings.Time).SetStyle(columnShift + 2' "HH:mm:ss.fff")  						.SetCell(columnShift + 3' 1' LocalizedStrings.Price).SetStyle(columnShift + 3' typeof(decimal))  						.SetCell(columnShift + 4' 1' LocalizedStrings.Str1341).SetStyle(columnShift + 4' typeof(decimal))  						.SetCell(columnShift + 5' 1' LocalizedStrings.Volume).SetStyle(columnShift + 5' typeof(decimal))  						.SetCell(columnShift + 6' 1' LocalizedStrings.Str128)  						.SetCell(columnShift + 7' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 7' typeof(long))  						.SetCell(columnShift + 8' 1' LocalizedStrings.Str163).SetStyle(columnShift + 8' typeof(decimal))  						.SetCell(columnShift + 9' 1' LocalizedStrings.Str135)  						.SetCell(columnShift + 10' 1' LocalizedStrings.Str1342).SetStyle(columnShift + 11' typeof(decimal))  						.SetCell(columnShift + 11' 1' LocalizedStrings.Str1343).SetStyle(columnShift + 12' typeof(decimal))  						.SetCell(columnShift + 12' 1' LocalizedStrings.Str1344).SetStyle(columnShift + 13' typeof(decimal))  						.SetCell(columnShift + 13' 1' LocalizedStrings.Str1345).SetStyle(columnShift + 14' typeof(decimal))  						.SetCell(columnShift + 14' 1' LocalizedStrings.Str862).SetStyle(columnShift + 15' typeof(decimal));    					worker  						.SetConditionalFormatting(columnShift + 10' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 11' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 12' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 13' ComparisonOperator.Less' "0"' null' Colors.Red);    					var totalPnL = 0m;  					var position = 0m;    					var queues = new Dictionary<Security' PnLQueue>();    					rowIndex = 2;  					foreach (var trade in strategy.MyTrades.ToArray())  					{  						var info = strategy.PnLManager.ProcessMessage(trade.ToMessage());    						totalPnL += info.PnL;  						position += trade.GetPosition() ?? 0;    						var queue = queues.SafeAdd(trade.Trade.Security' key => new PnLQueue(key.ToSecurityId()));    						var localInfo = queue.Process(trade.ToMessage());    						worker  							.SetCell(columnShift + 0' rowIndex' trade.Trade.Id)  							.SetCell(columnShift + 1' rowIndex' trade.Order.TransactionId)  							.SetCell(columnShift + 2' rowIndex' Format(trade.Trade.Time))  							.SetCell(columnShift + 3' rowIndex' trade.Trade.Price)  							.SetCell(columnShift + 4' rowIndex' trade.Order.Price)  							.SetCell(columnShift + 5' rowIndex' trade.Trade.Volume)  							.SetCell(columnShift + 6' rowIndex' Format(trade.Order.Direction))  							.SetCell(columnShift + 7' rowIndex' trade.Order.Id)  							.SetCell(columnShift + 8' rowIndex' trade.Slippage)  							.SetCell(columnShift + 9' rowIndex' trade.Order.Comment)  							.SetCell(columnShift + 10' rowIndex' MathHelper.Round(info.PnL' Decimals))  							.SetCell(columnShift + 11' rowIndex' MathHelper.Round(localInfo.PnL' Decimals))  							.SetCell(columnShift + 12' rowIndex' MathHelper.Round(totalPnL' Decimals))  							.SetCell(columnShift + 13' rowIndex' MathHelper.Round(queue.RealizedPnL' Decimals))  							.SetCell(columnShift + 14' rowIndex' position);    						rowIndex++;  					}    					if (IncludeOrders)  					{  						columnShift += 17;    						worker  							.SetCell(columnShift + 0' 0' LocalizedStrings.Orders)    							.SetCell(columnShift + 0' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  							.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  							.SetCell(columnShift + 2' 1' LocalizedStrings.Str128)  							.SetCell(columnShift + 3' 1' LocalizedStrings.Str1346).SetStyle(columnShift + 3' "HH:mm:ss.fff")  							.SetCell(columnShift + 4' 1' LocalizedStrings.Str1347).SetStyle(columnShift + 4' "HH:mm:ss.fff")  							.SetCell(columnShift + 5' 1' LocalizedStrings.Str1348)  							.SetCell(columnShift + 6' 1' LocalizedStrings.Price).SetStyle(columnShift + 6' typeof(decimal))  							.SetCell(columnShift + 7' 1' LocalizedStrings.Str1323).SetStyle(columnShift + 7' typeof(decimal))  							.SetCell(columnShift + 8' 1' LocalizedStrings.Str1324)  							.SetCell(columnShift + 9' 1' LocalizedStrings.State)  							.SetCell(columnShift + 10' 1' LocalizedStrings.Str1325).SetStyle(columnShift + 10' typeof(decimal))  							.SetCell(columnShift + 11' 1' LocalizedStrings.Volume).SetStyle(columnShift + 11' typeof(decimal))  							.SetCell(columnShift + 12' 1' LocalizedStrings.Type)  							.SetCell(columnShift + 13' 1' LocalizedStrings.Str1326)  							.SetCell(columnShift + 14' 1' LocalizedStrings.Str1327)  							.SetCell(columnShift + 15' 1' LocalizedStrings.Str135);    						worker  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str1329)' null' Colors.Green)  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str238)' null' Colors.Red);    						rowIndex = 2;  						foreach (var order in strategy.Orders.ToArray())  						{  							worker  								.SetCell(columnShift + 0' rowIndex' order.Id)  								.SetCell(columnShift + 1' rowIndex' order.TransactionId)  								.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  								.SetCell(columnShift + 3' rowIndex' Format(order.Time))  								.SetCell(columnShift + 4' rowIndex' Format(order.LastChangeTime))  								.SetCell(columnShift + 5' rowIndex' Format(order.LastChangeTime - order.Time))  								.SetCell(columnShift + 6' rowIndex' order.Price)  								.SetCell(columnShift + 7' rowIndex' MathHelper.Round(order.GetAveragePrice(strategy.Connector)' Decimals))  								.SetCell(columnShift + 8' rowIndex' Format(order.State))  								.SetCell(columnShift + 9' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : LocalizedStrings.Str238))  								.SetCell(columnShift + 10' rowIndex' order.Balance)  								.SetCell(columnShift + 11' rowIndex' order.Volume)  								.SetCell(columnShift + 12' rowIndex' Format(order.Type))  								.SetCell(columnShift + 13' rowIndex' Format(order.LatencyRegistration))  								.SetCell(columnShift + 14' rowIndex' Format(order.LatencyCancellation))  								.SetCell(columnShift + 15' rowIndex' order.Comment);    							rowIndex++;  						}    						var stopOrders = strategy.StopOrders.ToArray();    						if (stopOrders.Length > 0)  						{  							rowIndex += 2;    							worker  								.SetCell(columnShift + 0' rowIndex - 1' LocalizedStrings.Str1351)    								.SetCell(columnShift + 0' rowIndex' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  								.SetCell(columnShift + 1' rowIndex' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  								.SetCell(columnShift + 2' rowIndex' LocalizedStrings.Str128)  								.SetCell(columnShift + 3' rowIndex' LocalizedStrings.Time).SetStyle(columnShift + 3' "HH:mm:ss.fff")  								.SetCell(columnShift + 4' rowIndex' LocalizedStrings.Price).SetStyle(columnShift + 4' typeof(decimal))  								.SetCell(columnShift + 5' rowIndex' LocalizedStrings.Str1324)  								.SetCell(columnShift + 6' rowIndex' LocalizedStrings.State)  								.SetCell(columnShift + 7' rowIndex' LocalizedStrings.Volume).SetStyle(columnShift + 7' typeof(decimal))  								.SetCell(columnShift + 8' rowIndex' LocalizedStrings.Str1326)  								.SetCell(columnShift + 9' rowIndex' LocalizedStrings.Str1327)  								//.SetCell(columnShift + 10' rowIndex' LocalizedStrings.Str1352).SetStyle(columnShift + 9' typeof(long))  								;    							var stopParams = stopOrders[0].Condition.Parameters.Keys.ToArray();    							for (var i = 0; i < stopParams.Length; i++)  								worker.SetCell(columnShift + 11 + i' rowIndex' stopParams[i]);    							foreach (var order in stopOrders)  							{  								worker  									.SetCell(columnShift + 0' rowIndex' order.Id)  									.SetCell(columnShift + 1' rowIndex' order.TransactionId)  									.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  									.SetCell(columnShift + 3' rowIndex' Format(order.Time))  									.SetCell(columnShift + 4' rowIndex' order.Price)  									.SetCell(columnShift + 5' rowIndex' Format(order.State))  									.SetCell(columnShift + 6' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : string.Empty))  									.SetCell(columnShift + 7' rowIndex' order.Volume)  									.SetCell(columnShift + 8' rowIndex' Format(order.LatencyRegistration))  									.SetCell(columnShift + 9' rowIndex' Format(order.LatencyCancellation))  									//.SetCell(columnShift + 10' rowIndex' order.DerivedOrder != null ? (object)order.DerivedOrder.Id : string.Empty)  									;    								for (var i = 0; i < stopParams.Length; i++)  									worker.SetCell(columnShift + 11 + i' rowIndex' order.Condition.Parameters[stopParams[i]] ?? string.Empty);    								rowIndex++;  							}  						}  					}  				}    				worker.Save(FileName' true);  			}
Magic Number,StockSharp.Algo.Strategies.Reporting,ExcelStrategyReport,C:\repos\stocksharp_stocksharp\Algo\Strategies\Reporting\ExcelStrategyReport.cs,Generate,The following statement contains a magic number: using (var worker = hasTemplate ? new ExcelWorker() : new ExcelWorker(Template))  			{  				foreach (var strategy in Strategies)  				{  					if (Template.IsEmpty())  					{  						worker.RenameSheet(strategy.Name);  					}  					else  					{  						if (worker.ContainsSheet(strategy.Name))  							worker.AddSheet(strategy.Name);  					}    					worker  						.SetCell(0' 0' LocalizedStrings.Str1331)    						.SetCell(0' 1' LocalizedStrings.Security + ":")  						.SetCell(1' 1' strategy.Security != null ? strategy.Security.Id : string.Empty)    						.SetCell(0' 2' LocalizedStrings.Portfolio + ":")  						.SetCell(1' 2' strategy.Portfolio != null ? strategy.Portfolio.Name : string.Empty)    						.SetCell(0' 3' LocalizedStrings.Str1334)  						.SetCell(1' 3' Format(strategy.TotalWorkingTime))    						.SetCell(0' 4' LocalizedStrings.Str1335)  						//.SetCell(1' 4' FormatTime(base.Strategy.TotalCPUTime))    						.SetCell(0' 5' LocalizedStrings.Str862 + ":")  						.SetCell(1' 5' strategy.Position)    						.SetCell(0' 6' LocalizedStrings.PnL + ":")  						.SetCell(1' 6' strategy.PnL)    						.SetCell(0' 7' LocalizedStrings.Str159 + ":")  						.SetCell(1' 7' strategy.Commission)    						.SetCell(0' 8' LocalizedStrings.Str163 + ":")  						.SetCell(1' 8' strategy.Slippage)    						.SetCell(0' 9' LocalizedStrings.Str161 + ":")  						.SetCell(1' 9' Format(strategy.Latency));    					var rowIndex = 11;    					foreach (var parameter in strategy.StatisticManager.Parameters.SyncGet(c => c.ToArray()))  					{  						var value = parameter.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' parameter.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					rowIndex += 2;  					worker.SetCell(0' rowIndex' LocalizedStrings.Str1340);  					rowIndex++;    					foreach (var strategyParam in strategy.Parameters.CachedValues)  					{  						var value = strategyParam.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' strategyParam.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					//rowIndex += 2;  					//worker.SetCell(0' rowIndex' "Комиссия по типам:");  					//rowIndex++;    					//foreach (var group in Strategy.CommissionManager.Rules.SyncGet(c => c.ToArray()).GroupBy(c => c.GetType().GetDisplayName()))  					//{  					//	var commission = group.Sum(r => r.Commission);    					//	if (commission == 0)  					//		continue;    					//	worker  					//		.SetCell(0' rowIndex' group.Key)  					//		.SetCell(1' rowIndex' commission);    					//	rowIndex++;  					//}    					var columnShift = 3;    					worker  						.SetCell(columnShift + 0' 0' LocalizedStrings.Str985)    						.SetCell(columnShift + 0' 1' LocalizedStrings.Str1192).SetStyle(columnShift + 0' typeof(long))  						.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  						.SetCell(columnShift + 2' 1' LocalizedStrings.Time).SetStyle(columnShift + 2' "HH:mm:ss.fff")  						.SetCell(columnShift + 3' 1' LocalizedStrings.Price).SetStyle(columnShift + 3' typeof(decimal))  						.SetCell(columnShift + 4' 1' LocalizedStrings.Str1341).SetStyle(columnShift + 4' typeof(decimal))  						.SetCell(columnShift + 5' 1' LocalizedStrings.Volume).SetStyle(columnShift + 5' typeof(decimal))  						.SetCell(columnShift + 6' 1' LocalizedStrings.Str128)  						.SetCell(columnShift + 7' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 7' typeof(long))  						.SetCell(columnShift + 8' 1' LocalizedStrings.Str163).SetStyle(columnShift + 8' typeof(decimal))  						.SetCell(columnShift + 9' 1' LocalizedStrings.Str135)  						.SetCell(columnShift + 10' 1' LocalizedStrings.Str1342).SetStyle(columnShift + 11' typeof(decimal))  						.SetCell(columnShift + 11' 1' LocalizedStrings.Str1343).SetStyle(columnShift + 12' typeof(decimal))  						.SetCell(columnShift + 12' 1' LocalizedStrings.Str1344).SetStyle(columnShift + 13' typeof(decimal))  						.SetCell(columnShift + 13' 1' LocalizedStrings.Str1345).SetStyle(columnShift + 14' typeof(decimal))  						.SetCell(columnShift + 14' 1' LocalizedStrings.Str862).SetStyle(columnShift + 15' typeof(decimal));    					worker  						.SetConditionalFormatting(columnShift + 10' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 11' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 12' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 13' ComparisonOperator.Less' "0"' null' Colors.Red);    					var totalPnL = 0m;  					var position = 0m;    					var queues = new Dictionary<Security' PnLQueue>();    					rowIndex = 2;  					foreach (var trade in strategy.MyTrades.ToArray())  					{  						var info = strategy.PnLManager.ProcessMessage(trade.ToMessage());    						totalPnL += info.PnL;  						position += trade.GetPosition() ?? 0;    						var queue = queues.SafeAdd(trade.Trade.Security' key => new PnLQueue(key.ToSecurityId()));    						var localInfo = queue.Process(trade.ToMessage());    						worker  							.SetCell(columnShift + 0' rowIndex' trade.Trade.Id)  							.SetCell(columnShift + 1' rowIndex' trade.Order.TransactionId)  							.SetCell(columnShift + 2' rowIndex' Format(trade.Trade.Time))  							.SetCell(columnShift + 3' rowIndex' trade.Trade.Price)  							.SetCell(columnShift + 4' rowIndex' trade.Order.Price)  							.SetCell(columnShift + 5' rowIndex' trade.Trade.Volume)  							.SetCell(columnShift + 6' rowIndex' Format(trade.Order.Direction))  							.SetCell(columnShift + 7' rowIndex' trade.Order.Id)  							.SetCell(columnShift + 8' rowIndex' trade.Slippage)  							.SetCell(columnShift + 9' rowIndex' trade.Order.Comment)  							.SetCell(columnShift + 10' rowIndex' MathHelper.Round(info.PnL' Decimals))  							.SetCell(columnShift + 11' rowIndex' MathHelper.Round(localInfo.PnL' Decimals))  							.SetCell(columnShift + 12' rowIndex' MathHelper.Round(totalPnL' Decimals))  							.SetCell(columnShift + 13' rowIndex' MathHelper.Round(queue.RealizedPnL' Decimals))  							.SetCell(columnShift + 14' rowIndex' position);    						rowIndex++;  					}    					if (IncludeOrders)  					{  						columnShift += 17;    						worker  							.SetCell(columnShift + 0' 0' LocalizedStrings.Orders)    							.SetCell(columnShift + 0' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  							.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  							.SetCell(columnShift + 2' 1' LocalizedStrings.Str128)  							.SetCell(columnShift + 3' 1' LocalizedStrings.Str1346).SetStyle(columnShift + 3' "HH:mm:ss.fff")  							.SetCell(columnShift + 4' 1' LocalizedStrings.Str1347).SetStyle(columnShift + 4' "HH:mm:ss.fff")  							.SetCell(columnShift + 5' 1' LocalizedStrings.Str1348)  							.SetCell(columnShift + 6' 1' LocalizedStrings.Price).SetStyle(columnShift + 6' typeof(decimal))  							.SetCell(columnShift + 7' 1' LocalizedStrings.Str1323).SetStyle(columnShift + 7' typeof(decimal))  							.SetCell(columnShift + 8' 1' LocalizedStrings.Str1324)  							.SetCell(columnShift + 9' 1' LocalizedStrings.State)  							.SetCell(columnShift + 10' 1' LocalizedStrings.Str1325).SetStyle(columnShift + 10' typeof(decimal))  							.SetCell(columnShift + 11' 1' LocalizedStrings.Volume).SetStyle(columnShift + 11' typeof(decimal))  							.SetCell(columnShift + 12' 1' LocalizedStrings.Type)  							.SetCell(columnShift + 13' 1' LocalizedStrings.Str1326)  							.SetCell(columnShift + 14' 1' LocalizedStrings.Str1327)  							.SetCell(columnShift + 15' 1' LocalizedStrings.Str135);    						worker  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str1329)' null' Colors.Green)  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str238)' null' Colors.Red);    						rowIndex = 2;  						foreach (var order in strategy.Orders.ToArray())  						{  							worker  								.SetCell(columnShift + 0' rowIndex' order.Id)  								.SetCell(columnShift + 1' rowIndex' order.TransactionId)  								.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  								.SetCell(columnShift + 3' rowIndex' Format(order.Time))  								.SetCell(columnShift + 4' rowIndex' Format(order.LastChangeTime))  								.SetCell(columnShift + 5' rowIndex' Format(order.LastChangeTime - order.Time))  								.SetCell(columnShift + 6' rowIndex' order.Price)  								.SetCell(columnShift + 7' rowIndex' MathHelper.Round(order.GetAveragePrice(strategy.Connector)' Decimals))  								.SetCell(columnShift + 8' rowIndex' Format(order.State))  								.SetCell(columnShift + 9' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : LocalizedStrings.Str238))  								.SetCell(columnShift + 10' rowIndex' order.Balance)  								.SetCell(columnShift + 11' rowIndex' order.Volume)  								.SetCell(columnShift + 12' rowIndex' Format(order.Type))  								.SetCell(columnShift + 13' rowIndex' Format(order.LatencyRegistration))  								.SetCell(columnShift + 14' rowIndex' Format(order.LatencyCancellation))  								.SetCell(columnShift + 15' rowIndex' order.Comment);    							rowIndex++;  						}    						var stopOrders = strategy.StopOrders.ToArray();    						if (stopOrders.Length > 0)  						{  							rowIndex += 2;    							worker  								.SetCell(columnShift + 0' rowIndex - 1' LocalizedStrings.Str1351)    								.SetCell(columnShift + 0' rowIndex' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  								.SetCell(columnShift + 1' rowIndex' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  								.SetCell(columnShift + 2' rowIndex' LocalizedStrings.Str128)  								.SetCell(columnShift + 3' rowIndex' LocalizedStrings.Time).SetStyle(columnShift + 3' "HH:mm:ss.fff")  								.SetCell(columnShift + 4' rowIndex' LocalizedStrings.Price).SetStyle(columnShift + 4' typeof(decimal))  								.SetCell(columnShift + 5' rowIndex' LocalizedStrings.Str1324)  								.SetCell(columnShift + 6' rowIndex' LocalizedStrings.State)  								.SetCell(columnShift + 7' rowIndex' LocalizedStrings.Volume).SetStyle(columnShift + 7' typeof(decimal))  								.SetCell(columnShift + 8' rowIndex' LocalizedStrings.Str1326)  								.SetCell(columnShift + 9' rowIndex' LocalizedStrings.Str1327)  								//.SetCell(columnShift + 10' rowIndex' LocalizedStrings.Str1352).SetStyle(columnShift + 9' typeof(long))  								;    							var stopParams = stopOrders[0].Condition.Parameters.Keys.ToArray();    							for (var i = 0; i < stopParams.Length; i++)  								worker.SetCell(columnShift + 11 + i' rowIndex' stopParams[i]);    							foreach (var order in stopOrders)  							{  								worker  									.SetCell(columnShift + 0' rowIndex' order.Id)  									.SetCell(columnShift + 1' rowIndex' order.TransactionId)  									.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  									.SetCell(columnShift + 3' rowIndex' Format(order.Time))  									.SetCell(columnShift + 4' rowIndex' order.Price)  									.SetCell(columnShift + 5' rowIndex' Format(order.State))  									.SetCell(columnShift + 6' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : string.Empty))  									.SetCell(columnShift + 7' rowIndex' order.Volume)  									.SetCell(columnShift + 8' rowIndex' Format(order.LatencyRegistration))  									.SetCell(columnShift + 9' rowIndex' Format(order.LatencyCancellation))  									//.SetCell(columnShift + 10' rowIndex' order.DerivedOrder != null ? (object)order.DerivedOrder.Id : string.Empty)  									;    								for (var i = 0; i < stopParams.Length; i++)  									worker.SetCell(columnShift + 11 + i' rowIndex' order.Condition.Parameters[stopParams[i]] ?? string.Empty);    								rowIndex++;  							}  						}  					}  				}    				worker.Save(FileName' true);  			}
Magic Number,StockSharp.Algo.Strategies.Reporting,ExcelStrategyReport,C:\repos\stocksharp_stocksharp\Algo\Strategies\Reporting\ExcelStrategyReport.cs,Generate,The following statement contains a magic number: using (var worker = hasTemplate ? new ExcelWorker() : new ExcelWorker(Template))  			{  				foreach (var strategy in Strategies)  				{  					if (Template.IsEmpty())  					{  						worker.RenameSheet(strategy.Name);  					}  					else  					{  						if (worker.ContainsSheet(strategy.Name))  							worker.AddSheet(strategy.Name);  					}    					worker  						.SetCell(0' 0' LocalizedStrings.Str1331)    						.SetCell(0' 1' LocalizedStrings.Security + ":")  						.SetCell(1' 1' strategy.Security != null ? strategy.Security.Id : string.Empty)    						.SetCell(0' 2' LocalizedStrings.Portfolio + ":")  						.SetCell(1' 2' strategy.Portfolio != null ? strategy.Portfolio.Name : string.Empty)    						.SetCell(0' 3' LocalizedStrings.Str1334)  						.SetCell(1' 3' Format(strategy.TotalWorkingTime))    						.SetCell(0' 4' LocalizedStrings.Str1335)  						//.SetCell(1' 4' FormatTime(base.Strategy.TotalCPUTime))    						.SetCell(0' 5' LocalizedStrings.Str862 + ":")  						.SetCell(1' 5' strategy.Position)    						.SetCell(0' 6' LocalizedStrings.PnL + ":")  						.SetCell(1' 6' strategy.PnL)    						.SetCell(0' 7' LocalizedStrings.Str159 + ":")  						.SetCell(1' 7' strategy.Commission)    						.SetCell(0' 8' LocalizedStrings.Str163 + ":")  						.SetCell(1' 8' strategy.Slippage)    						.SetCell(0' 9' LocalizedStrings.Str161 + ":")  						.SetCell(1' 9' Format(strategy.Latency));    					var rowIndex = 11;    					foreach (var parameter in strategy.StatisticManager.Parameters.SyncGet(c => c.ToArray()))  					{  						var value = parameter.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' parameter.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					rowIndex += 2;  					worker.SetCell(0' rowIndex' LocalizedStrings.Str1340);  					rowIndex++;    					foreach (var strategyParam in strategy.Parameters.CachedValues)  					{  						var value = strategyParam.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' strategyParam.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					//rowIndex += 2;  					//worker.SetCell(0' rowIndex' "Комиссия по типам:");  					//rowIndex++;    					//foreach (var group in Strategy.CommissionManager.Rules.SyncGet(c => c.ToArray()).GroupBy(c => c.GetType().GetDisplayName()))  					//{  					//	var commission = group.Sum(r => r.Commission);    					//	if (commission == 0)  					//		continue;    					//	worker  					//		.SetCell(0' rowIndex' group.Key)  					//		.SetCell(1' rowIndex' commission);    					//	rowIndex++;  					//}    					var columnShift = 3;    					worker  						.SetCell(columnShift + 0' 0' LocalizedStrings.Str985)    						.SetCell(columnShift + 0' 1' LocalizedStrings.Str1192).SetStyle(columnShift + 0' typeof(long))  						.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  						.SetCell(columnShift + 2' 1' LocalizedStrings.Time).SetStyle(columnShift + 2' "HH:mm:ss.fff")  						.SetCell(columnShift + 3' 1' LocalizedStrings.Price).SetStyle(columnShift + 3' typeof(decimal))  						.SetCell(columnShift + 4' 1' LocalizedStrings.Str1341).SetStyle(columnShift + 4' typeof(decimal))  						.SetCell(columnShift + 5' 1' LocalizedStrings.Volume).SetStyle(columnShift + 5' typeof(decimal))  						.SetCell(columnShift + 6' 1' LocalizedStrings.Str128)  						.SetCell(columnShift + 7' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 7' typeof(long))  						.SetCell(columnShift + 8' 1' LocalizedStrings.Str163).SetStyle(columnShift + 8' typeof(decimal))  						.SetCell(columnShift + 9' 1' LocalizedStrings.Str135)  						.SetCell(columnShift + 10' 1' LocalizedStrings.Str1342).SetStyle(columnShift + 11' typeof(decimal))  						.SetCell(columnShift + 11' 1' LocalizedStrings.Str1343).SetStyle(columnShift + 12' typeof(decimal))  						.SetCell(columnShift + 12' 1' LocalizedStrings.Str1344).SetStyle(columnShift + 13' typeof(decimal))  						.SetCell(columnShift + 13' 1' LocalizedStrings.Str1345).SetStyle(columnShift + 14' typeof(decimal))  						.SetCell(columnShift + 14' 1' LocalizedStrings.Str862).SetStyle(columnShift + 15' typeof(decimal));    					worker  						.SetConditionalFormatting(columnShift + 10' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 11' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 12' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 13' ComparisonOperator.Less' "0"' null' Colors.Red);    					var totalPnL = 0m;  					var position = 0m;    					var queues = new Dictionary<Security' PnLQueue>();    					rowIndex = 2;  					foreach (var trade in strategy.MyTrades.ToArray())  					{  						var info = strategy.PnLManager.ProcessMessage(trade.ToMessage());    						totalPnL += info.PnL;  						position += trade.GetPosition() ?? 0;    						var queue = queues.SafeAdd(trade.Trade.Security' key => new PnLQueue(key.ToSecurityId()));    						var localInfo = queue.Process(trade.ToMessage());    						worker  							.SetCell(columnShift + 0' rowIndex' trade.Trade.Id)  							.SetCell(columnShift + 1' rowIndex' trade.Order.TransactionId)  							.SetCell(columnShift + 2' rowIndex' Format(trade.Trade.Time))  							.SetCell(columnShift + 3' rowIndex' trade.Trade.Price)  							.SetCell(columnShift + 4' rowIndex' trade.Order.Price)  							.SetCell(columnShift + 5' rowIndex' trade.Trade.Volume)  							.SetCell(columnShift + 6' rowIndex' Format(trade.Order.Direction))  							.SetCell(columnShift + 7' rowIndex' trade.Order.Id)  							.SetCell(columnShift + 8' rowIndex' trade.Slippage)  							.SetCell(columnShift + 9' rowIndex' trade.Order.Comment)  							.SetCell(columnShift + 10' rowIndex' MathHelper.Round(info.PnL' Decimals))  							.SetCell(columnShift + 11' rowIndex' MathHelper.Round(localInfo.PnL' Decimals))  							.SetCell(columnShift + 12' rowIndex' MathHelper.Round(totalPnL' Decimals))  							.SetCell(columnShift + 13' rowIndex' MathHelper.Round(queue.RealizedPnL' Decimals))  							.SetCell(columnShift + 14' rowIndex' position);    						rowIndex++;  					}    					if (IncludeOrders)  					{  						columnShift += 17;    						worker  							.SetCell(columnShift + 0' 0' LocalizedStrings.Orders)    							.SetCell(columnShift + 0' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  							.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  							.SetCell(columnShift + 2' 1' LocalizedStrings.Str128)  							.SetCell(columnShift + 3' 1' LocalizedStrings.Str1346).SetStyle(columnShift + 3' "HH:mm:ss.fff")  							.SetCell(columnShift + 4' 1' LocalizedStrings.Str1347).SetStyle(columnShift + 4' "HH:mm:ss.fff")  							.SetCell(columnShift + 5' 1' LocalizedStrings.Str1348)  							.SetCell(columnShift + 6' 1' LocalizedStrings.Price).SetStyle(columnShift + 6' typeof(decimal))  							.SetCell(columnShift + 7' 1' LocalizedStrings.Str1323).SetStyle(columnShift + 7' typeof(decimal))  							.SetCell(columnShift + 8' 1' LocalizedStrings.Str1324)  							.SetCell(columnShift + 9' 1' LocalizedStrings.State)  							.SetCell(columnShift + 10' 1' LocalizedStrings.Str1325).SetStyle(columnShift + 10' typeof(decimal))  							.SetCell(columnShift + 11' 1' LocalizedStrings.Volume).SetStyle(columnShift + 11' typeof(decimal))  							.SetCell(columnShift + 12' 1' LocalizedStrings.Type)  							.SetCell(columnShift + 13' 1' LocalizedStrings.Str1326)  							.SetCell(columnShift + 14' 1' LocalizedStrings.Str1327)  							.SetCell(columnShift + 15' 1' LocalizedStrings.Str135);    						worker  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str1329)' null' Colors.Green)  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str238)' null' Colors.Red);    						rowIndex = 2;  						foreach (var order in strategy.Orders.ToArray())  						{  							worker  								.SetCell(columnShift + 0' rowIndex' order.Id)  								.SetCell(columnShift + 1' rowIndex' order.TransactionId)  								.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  								.SetCell(columnShift + 3' rowIndex' Format(order.Time))  								.SetCell(columnShift + 4' rowIndex' Format(order.LastChangeTime))  								.SetCell(columnShift + 5' rowIndex' Format(order.LastChangeTime - order.Time))  								.SetCell(columnShift + 6' rowIndex' order.Price)  								.SetCell(columnShift + 7' rowIndex' MathHelper.Round(order.GetAveragePrice(strategy.Connector)' Decimals))  								.SetCell(columnShift + 8' rowIndex' Format(order.State))  								.SetCell(columnShift + 9' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : LocalizedStrings.Str238))  								.SetCell(columnShift + 10' rowIndex' order.Balance)  								.SetCell(columnShift + 11' rowIndex' order.Volume)  								.SetCell(columnShift + 12' rowIndex' Format(order.Type))  								.SetCell(columnShift + 13' rowIndex' Format(order.LatencyRegistration))  								.SetCell(columnShift + 14' rowIndex' Format(order.LatencyCancellation))  								.SetCell(columnShift + 15' rowIndex' order.Comment);    							rowIndex++;  						}    						var stopOrders = strategy.StopOrders.ToArray();    						if (stopOrders.Length > 0)  						{  							rowIndex += 2;    							worker  								.SetCell(columnShift + 0' rowIndex - 1' LocalizedStrings.Str1351)    								.SetCell(columnShift + 0' rowIndex' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  								.SetCell(columnShift + 1' rowIndex' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  								.SetCell(columnShift + 2' rowIndex' LocalizedStrings.Str128)  								.SetCell(columnShift + 3' rowIndex' LocalizedStrings.Time).SetStyle(columnShift + 3' "HH:mm:ss.fff")  								.SetCell(columnShift + 4' rowIndex' LocalizedStrings.Price).SetStyle(columnShift + 4' typeof(decimal))  								.SetCell(columnShift + 5' rowIndex' LocalizedStrings.Str1324)  								.SetCell(columnShift + 6' rowIndex' LocalizedStrings.State)  								.SetCell(columnShift + 7' rowIndex' LocalizedStrings.Volume).SetStyle(columnShift + 7' typeof(decimal))  								.SetCell(columnShift + 8' rowIndex' LocalizedStrings.Str1326)  								.SetCell(columnShift + 9' rowIndex' LocalizedStrings.Str1327)  								//.SetCell(columnShift + 10' rowIndex' LocalizedStrings.Str1352).SetStyle(columnShift + 9' typeof(long))  								;    							var stopParams = stopOrders[0].Condition.Parameters.Keys.ToArray();    							for (var i = 0; i < stopParams.Length; i++)  								worker.SetCell(columnShift + 11 + i' rowIndex' stopParams[i]);    							foreach (var order in stopOrders)  							{  								worker  									.SetCell(columnShift + 0' rowIndex' order.Id)  									.SetCell(columnShift + 1' rowIndex' order.TransactionId)  									.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  									.SetCell(columnShift + 3' rowIndex' Format(order.Time))  									.SetCell(columnShift + 4' rowIndex' order.Price)  									.SetCell(columnShift + 5' rowIndex' Format(order.State))  									.SetCell(columnShift + 6' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : string.Empty))  									.SetCell(columnShift + 7' rowIndex' order.Volume)  									.SetCell(columnShift + 8' rowIndex' Format(order.LatencyRegistration))  									.SetCell(columnShift + 9' rowIndex' Format(order.LatencyCancellation))  									//.SetCell(columnShift + 10' rowIndex' order.DerivedOrder != null ? (object)order.DerivedOrder.Id : string.Empty)  									;    								for (var i = 0; i < stopParams.Length; i++)  									worker.SetCell(columnShift + 11 + i' rowIndex' order.Condition.Parameters[stopParams[i]] ?? string.Empty);    								rowIndex++;  							}  						}  					}  				}    				worker.Save(FileName' true);  			}
Magic Number,StockSharp.Algo.Strategies.Reporting,ExcelStrategyReport,C:\repos\stocksharp_stocksharp\Algo\Strategies\Reporting\ExcelStrategyReport.cs,Generate,The following statement contains a magic number: using (var worker = hasTemplate ? new ExcelWorker() : new ExcelWorker(Template))  			{  				foreach (var strategy in Strategies)  				{  					if (Template.IsEmpty())  					{  						worker.RenameSheet(strategy.Name);  					}  					else  					{  						if (worker.ContainsSheet(strategy.Name))  							worker.AddSheet(strategy.Name);  					}    					worker  						.SetCell(0' 0' LocalizedStrings.Str1331)    						.SetCell(0' 1' LocalizedStrings.Security + ":")  						.SetCell(1' 1' strategy.Security != null ? strategy.Security.Id : string.Empty)    						.SetCell(0' 2' LocalizedStrings.Portfolio + ":")  						.SetCell(1' 2' strategy.Portfolio != null ? strategy.Portfolio.Name : string.Empty)    						.SetCell(0' 3' LocalizedStrings.Str1334)  						.SetCell(1' 3' Format(strategy.TotalWorkingTime))    						.SetCell(0' 4' LocalizedStrings.Str1335)  						//.SetCell(1' 4' FormatTime(base.Strategy.TotalCPUTime))    						.SetCell(0' 5' LocalizedStrings.Str862 + ":")  						.SetCell(1' 5' strategy.Position)    						.SetCell(0' 6' LocalizedStrings.PnL + ":")  						.SetCell(1' 6' strategy.PnL)    						.SetCell(0' 7' LocalizedStrings.Str159 + ":")  						.SetCell(1' 7' strategy.Commission)    						.SetCell(0' 8' LocalizedStrings.Str163 + ":")  						.SetCell(1' 8' strategy.Slippage)    						.SetCell(0' 9' LocalizedStrings.Str161 + ":")  						.SetCell(1' 9' Format(strategy.Latency));    					var rowIndex = 11;    					foreach (var parameter in strategy.StatisticManager.Parameters.SyncGet(c => c.ToArray()))  					{  						var value = parameter.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' parameter.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					rowIndex += 2;  					worker.SetCell(0' rowIndex' LocalizedStrings.Str1340);  					rowIndex++;    					foreach (var strategyParam in strategy.Parameters.CachedValues)  					{  						var value = strategyParam.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' strategyParam.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					//rowIndex += 2;  					//worker.SetCell(0' rowIndex' "Комиссия по типам:");  					//rowIndex++;    					//foreach (var group in Strategy.CommissionManager.Rules.SyncGet(c => c.ToArray()).GroupBy(c => c.GetType().GetDisplayName()))  					//{  					//	var commission = group.Sum(r => r.Commission);    					//	if (commission == 0)  					//		continue;    					//	worker  					//		.SetCell(0' rowIndex' group.Key)  					//		.SetCell(1' rowIndex' commission);    					//	rowIndex++;  					//}    					var columnShift = 3;    					worker  						.SetCell(columnShift + 0' 0' LocalizedStrings.Str985)    						.SetCell(columnShift + 0' 1' LocalizedStrings.Str1192).SetStyle(columnShift + 0' typeof(long))  						.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  						.SetCell(columnShift + 2' 1' LocalizedStrings.Time).SetStyle(columnShift + 2' "HH:mm:ss.fff")  						.SetCell(columnShift + 3' 1' LocalizedStrings.Price).SetStyle(columnShift + 3' typeof(decimal))  						.SetCell(columnShift + 4' 1' LocalizedStrings.Str1341).SetStyle(columnShift + 4' typeof(decimal))  						.SetCell(columnShift + 5' 1' LocalizedStrings.Volume).SetStyle(columnShift + 5' typeof(decimal))  						.SetCell(columnShift + 6' 1' LocalizedStrings.Str128)  						.SetCell(columnShift + 7' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 7' typeof(long))  						.SetCell(columnShift + 8' 1' LocalizedStrings.Str163).SetStyle(columnShift + 8' typeof(decimal))  						.SetCell(columnShift + 9' 1' LocalizedStrings.Str135)  						.SetCell(columnShift + 10' 1' LocalizedStrings.Str1342).SetStyle(columnShift + 11' typeof(decimal))  						.SetCell(columnShift + 11' 1' LocalizedStrings.Str1343).SetStyle(columnShift + 12' typeof(decimal))  						.SetCell(columnShift + 12' 1' LocalizedStrings.Str1344).SetStyle(columnShift + 13' typeof(decimal))  						.SetCell(columnShift + 13' 1' LocalizedStrings.Str1345).SetStyle(columnShift + 14' typeof(decimal))  						.SetCell(columnShift + 14' 1' LocalizedStrings.Str862).SetStyle(columnShift + 15' typeof(decimal));    					worker  						.SetConditionalFormatting(columnShift + 10' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 11' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 12' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 13' ComparisonOperator.Less' "0"' null' Colors.Red);    					var totalPnL = 0m;  					var position = 0m;    					var queues = new Dictionary<Security' PnLQueue>();    					rowIndex = 2;  					foreach (var trade in strategy.MyTrades.ToArray())  					{  						var info = strategy.PnLManager.ProcessMessage(trade.ToMessage());    						totalPnL += info.PnL;  						position += trade.GetPosition() ?? 0;    						var queue = queues.SafeAdd(trade.Trade.Security' key => new PnLQueue(key.ToSecurityId()));    						var localInfo = queue.Process(trade.ToMessage());    						worker  							.SetCell(columnShift + 0' rowIndex' trade.Trade.Id)  							.SetCell(columnShift + 1' rowIndex' trade.Order.TransactionId)  							.SetCell(columnShift + 2' rowIndex' Format(trade.Trade.Time))  							.SetCell(columnShift + 3' rowIndex' trade.Trade.Price)  							.SetCell(columnShift + 4' rowIndex' trade.Order.Price)  							.SetCell(columnShift + 5' rowIndex' trade.Trade.Volume)  							.SetCell(columnShift + 6' rowIndex' Format(trade.Order.Direction))  							.SetCell(columnShift + 7' rowIndex' trade.Order.Id)  							.SetCell(columnShift + 8' rowIndex' trade.Slippage)  							.SetCell(columnShift + 9' rowIndex' trade.Order.Comment)  							.SetCell(columnShift + 10' rowIndex' MathHelper.Round(info.PnL' Decimals))  							.SetCell(columnShift + 11' rowIndex' MathHelper.Round(localInfo.PnL' Decimals))  							.SetCell(columnShift + 12' rowIndex' MathHelper.Round(totalPnL' Decimals))  							.SetCell(columnShift + 13' rowIndex' MathHelper.Round(queue.RealizedPnL' Decimals))  							.SetCell(columnShift + 14' rowIndex' position);    						rowIndex++;  					}    					if (IncludeOrders)  					{  						columnShift += 17;    						worker  							.SetCell(columnShift + 0' 0' LocalizedStrings.Orders)    							.SetCell(columnShift + 0' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  							.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  							.SetCell(columnShift + 2' 1' LocalizedStrings.Str128)  							.SetCell(columnShift + 3' 1' LocalizedStrings.Str1346).SetStyle(columnShift + 3' "HH:mm:ss.fff")  							.SetCell(columnShift + 4' 1' LocalizedStrings.Str1347).SetStyle(columnShift + 4' "HH:mm:ss.fff")  							.SetCell(columnShift + 5' 1' LocalizedStrings.Str1348)  							.SetCell(columnShift + 6' 1' LocalizedStrings.Price).SetStyle(columnShift + 6' typeof(decimal))  							.SetCell(columnShift + 7' 1' LocalizedStrings.Str1323).SetStyle(columnShift + 7' typeof(decimal))  							.SetCell(columnShift + 8' 1' LocalizedStrings.Str1324)  							.SetCell(columnShift + 9' 1' LocalizedStrings.State)  							.SetCell(columnShift + 10' 1' LocalizedStrings.Str1325).SetStyle(columnShift + 10' typeof(decimal))  							.SetCell(columnShift + 11' 1' LocalizedStrings.Volume).SetStyle(columnShift + 11' typeof(decimal))  							.SetCell(columnShift + 12' 1' LocalizedStrings.Type)  							.SetCell(columnShift + 13' 1' LocalizedStrings.Str1326)  							.SetCell(columnShift + 14' 1' LocalizedStrings.Str1327)  							.SetCell(columnShift + 15' 1' LocalizedStrings.Str135);    						worker  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str1329)' null' Colors.Green)  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str238)' null' Colors.Red);    						rowIndex = 2;  						foreach (var order in strategy.Orders.ToArray())  						{  							worker  								.SetCell(columnShift + 0' rowIndex' order.Id)  								.SetCell(columnShift + 1' rowIndex' order.TransactionId)  								.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  								.SetCell(columnShift + 3' rowIndex' Format(order.Time))  								.SetCell(columnShift + 4' rowIndex' Format(order.LastChangeTime))  								.SetCell(columnShift + 5' rowIndex' Format(order.LastChangeTime - order.Time))  								.SetCell(columnShift + 6' rowIndex' order.Price)  								.SetCell(columnShift + 7' rowIndex' MathHelper.Round(order.GetAveragePrice(strategy.Connector)' Decimals))  								.SetCell(columnShift + 8' rowIndex' Format(order.State))  								.SetCell(columnShift + 9' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : LocalizedStrings.Str238))  								.SetCell(columnShift + 10' rowIndex' order.Balance)  								.SetCell(columnShift + 11' rowIndex' order.Volume)  								.SetCell(columnShift + 12' rowIndex' Format(order.Type))  								.SetCell(columnShift + 13' rowIndex' Format(order.LatencyRegistration))  								.SetCell(columnShift + 14' rowIndex' Format(order.LatencyCancellation))  								.SetCell(columnShift + 15' rowIndex' order.Comment);    							rowIndex++;  						}    						var stopOrders = strategy.StopOrders.ToArray();    						if (stopOrders.Length > 0)  						{  							rowIndex += 2;    							worker  								.SetCell(columnShift + 0' rowIndex - 1' LocalizedStrings.Str1351)    								.SetCell(columnShift + 0' rowIndex' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  								.SetCell(columnShift + 1' rowIndex' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  								.SetCell(columnShift + 2' rowIndex' LocalizedStrings.Str128)  								.SetCell(columnShift + 3' rowIndex' LocalizedStrings.Time).SetStyle(columnShift + 3' "HH:mm:ss.fff")  								.SetCell(columnShift + 4' rowIndex' LocalizedStrings.Price).SetStyle(columnShift + 4' typeof(decimal))  								.SetCell(columnShift + 5' rowIndex' LocalizedStrings.Str1324)  								.SetCell(columnShift + 6' rowIndex' LocalizedStrings.State)  								.SetCell(columnShift + 7' rowIndex' LocalizedStrings.Volume).SetStyle(columnShift + 7' typeof(decimal))  								.SetCell(columnShift + 8' rowIndex' LocalizedStrings.Str1326)  								.SetCell(columnShift + 9' rowIndex' LocalizedStrings.Str1327)  								//.SetCell(columnShift + 10' rowIndex' LocalizedStrings.Str1352).SetStyle(columnShift + 9' typeof(long))  								;    							var stopParams = stopOrders[0].Condition.Parameters.Keys.ToArray();    							for (var i = 0; i < stopParams.Length; i++)  								worker.SetCell(columnShift + 11 + i' rowIndex' stopParams[i]);    							foreach (var order in stopOrders)  							{  								worker  									.SetCell(columnShift + 0' rowIndex' order.Id)  									.SetCell(columnShift + 1' rowIndex' order.TransactionId)  									.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  									.SetCell(columnShift + 3' rowIndex' Format(order.Time))  									.SetCell(columnShift + 4' rowIndex' order.Price)  									.SetCell(columnShift + 5' rowIndex' Format(order.State))  									.SetCell(columnShift + 6' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : string.Empty))  									.SetCell(columnShift + 7' rowIndex' order.Volume)  									.SetCell(columnShift + 8' rowIndex' Format(order.LatencyRegistration))  									.SetCell(columnShift + 9' rowIndex' Format(order.LatencyCancellation))  									//.SetCell(columnShift + 10' rowIndex' order.DerivedOrder != null ? (object)order.DerivedOrder.Id : string.Empty)  									;    								for (var i = 0; i < stopParams.Length; i++)  									worker.SetCell(columnShift + 11 + i' rowIndex' order.Condition.Parameters[stopParams[i]] ?? string.Empty);    								rowIndex++;  							}  						}  					}  				}    				worker.Save(FileName' true);  			}
Magic Number,StockSharp.Algo.Strategies.Reporting,ExcelStrategyReport,C:\repos\stocksharp_stocksharp\Algo\Strategies\Reporting\ExcelStrategyReport.cs,Generate,The following statement contains a magic number: using (var worker = hasTemplate ? new ExcelWorker() : new ExcelWorker(Template))  			{  				foreach (var strategy in Strategies)  				{  					if (Template.IsEmpty())  					{  						worker.RenameSheet(strategy.Name);  					}  					else  					{  						if (worker.ContainsSheet(strategy.Name))  							worker.AddSheet(strategy.Name);  					}    					worker  						.SetCell(0' 0' LocalizedStrings.Str1331)    						.SetCell(0' 1' LocalizedStrings.Security + ":")  						.SetCell(1' 1' strategy.Security != null ? strategy.Security.Id : string.Empty)    						.SetCell(0' 2' LocalizedStrings.Portfolio + ":")  						.SetCell(1' 2' strategy.Portfolio != null ? strategy.Portfolio.Name : string.Empty)    						.SetCell(0' 3' LocalizedStrings.Str1334)  						.SetCell(1' 3' Format(strategy.TotalWorkingTime))    						.SetCell(0' 4' LocalizedStrings.Str1335)  						//.SetCell(1' 4' FormatTime(base.Strategy.TotalCPUTime))    						.SetCell(0' 5' LocalizedStrings.Str862 + ":")  						.SetCell(1' 5' strategy.Position)    						.SetCell(0' 6' LocalizedStrings.PnL + ":")  						.SetCell(1' 6' strategy.PnL)    						.SetCell(0' 7' LocalizedStrings.Str159 + ":")  						.SetCell(1' 7' strategy.Commission)    						.SetCell(0' 8' LocalizedStrings.Str163 + ":")  						.SetCell(1' 8' strategy.Slippage)    						.SetCell(0' 9' LocalizedStrings.Str161 + ":")  						.SetCell(1' 9' Format(strategy.Latency));    					var rowIndex = 11;    					foreach (var parameter in strategy.StatisticManager.Parameters.SyncGet(c => c.ToArray()))  					{  						var value = parameter.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' parameter.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					rowIndex += 2;  					worker.SetCell(0' rowIndex' LocalizedStrings.Str1340);  					rowIndex++;    					foreach (var strategyParam in strategy.Parameters.CachedValues)  					{  						var value = strategyParam.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' strategyParam.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					//rowIndex += 2;  					//worker.SetCell(0' rowIndex' "Комиссия по типам:");  					//rowIndex++;    					//foreach (var group in Strategy.CommissionManager.Rules.SyncGet(c => c.ToArray()).GroupBy(c => c.GetType().GetDisplayName()))  					//{  					//	var commission = group.Sum(r => r.Commission);    					//	if (commission == 0)  					//		continue;    					//	worker  					//		.SetCell(0' rowIndex' group.Key)  					//		.SetCell(1' rowIndex' commission);    					//	rowIndex++;  					//}    					var columnShift = 3;    					worker  						.SetCell(columnShift + 0' 0' LocalizedStrings.Str985)    						.SetCell(columnShift + 0' 1' LocalizedStrings.Str1192).SetStyle(columnShift + 0' typeof(long))  						.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  						.SetCell(columnShift + 2' 1' LocalizedStrings.Time).SetStyle(columnShift + 2' "HH:mm:ss.fff")  						.SetCell(columnShift + 3' 1' LocalizedStrings.Price).SetStyle(columnShift + 3' typeof(decimal))  						.SetCell(columnShift + 4' 1' LocalizedStrings.Str1341).SetStyle(columnShift + 4' typeof(decimal))  						.SetCell(columnShift + 5' 1' LocalizedStrings.Volume).SetStyle(columnShift + 5' typeof(decimal))  						.SetCell(columnShift + 6' 1' LocalizedStrings.Str128)  						.SetCell(columnShift + 7' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 7' typeof(long))  						.SetCell(columnShift + 8' 1' LocalizedStrings.Str163).SetStyle(columnShift + 8' typeof(decimal))  						.SetCell(columnShift + 9' 1' LocalizedStrings.Str135)  						.SetCell(columnShift + 10' 1' LocalizedStrings.Str1342).SetStyle(columnShift + 11' typeof(decimal))  						.SetCell(columnShift + 11' 1' LocalizedStrings.Str1343).SetStyle(columnShift + 12' typeof(decimal))  						.SetCell(columnShift + 12' 1' LocalizedStrings.Str1344).SetStyle(columnShift + 13' typeof(decimal))  						.SetCell(columnShift + 13' 1' LocalizedStrings.Str1345).SetStyle(columnShift + 14' typeof(decimal))  						.SetCell(columnShift + 14' 1' LocalizedStrings.Str862).SetStyle(columnShift + 15' typeof(decimal));    					worker  						.SetConditionalFormatting(columnShift + 10' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 11' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 12' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 13' ComparisonOperator.Less' "0"' null' Colors.Red);    					var totalPnL = 0m;  					var position = 0m;    					var queues = new Dictionary<Security' PnLQueue>();    					rowIndex = 2;  					foreach (var trade in strategy.MyTrades.ToArray())  					{  						var info = strategy.PnLManager.ProcessMessage(trade.ToMessage());    						totalPnL += info.PnL;  						position += trade.GetPosition() ?? 0;    						var queue = queues.SafeAdd(trade.Trade.Security' key => new PnLQueue(key.ToSecurityId()));    						var localInfo = queue.Process(trade.ToMessage());    						worker  							.SetCell(columnShift + 0' rowIndex' trade.Trade.Id)  							.SetCell(columnShift + 1' rowIndex' trade.Order.TransactionId)  							.SetCell(columnShift + 2' rowIndex' Format(trade.Trade.Time))  							.SetCell(columnShift + 3' rowIndex' trade.Trade.Price)  							.SetCell(columnShift + 4' rowIndex' trade.Order.Price)  							.SetCell(columnShift + 5' rowIndex' trade.Trade.Volume)  							.SetCell(columnShift + 6' rowIndex' Format(trade.Order.Direction))  							.SetCell(columnShift + 7' rowIndex' trade.Order.Id)  							.SetCell(columnShift + 8' rowIndex' trade.Slippage)  							.SetCell(columnShift + 9' rowIndex' trade.Order.Comment)  							.SetCell(columnShift + 10' rowIndex' MathHelper.Round(info.PnL' Decimals))  							.SetCell(columnShift + 11' rowIndex' MathHelper.Round(localInfo.PnL' Decimals))  							.SetCell(columnShift + 12' rowIndex' MathHelper.Round(totalPnL' Decimals))  							.SetCell(columnShift + 13' rowIndex' MathHelper.Round(queue.RealizedPnL' Decimals))  							.SetCell(columnShift + 14' rowIndex' position);    						rowIndex++;  					}    					if (IncludeOrders)  					{  						columnShift += 17;    						worker  							.SetCell(columnShift + 0' 0' LocalizedStrings.Orders)    							.SetCell(columnShift + 0' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  							.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  							.SetCell(columnShift + 2' 1' LocalizedStrings.Str128)  							.SetCell(columnShift + 3' 1' LocalizedStrings.Str1346).SetStyle(columnShift + 3' "HH:mm:ss.fff")  							.SetCell(columnShift + 4' 1' LocalizedStrings.Str1347).SetStyle(columnShift + 4' "HH:mm:ss.fff")  							.SetCell(columnShift + 5' 1' LocalizedStrings.Str1348)  							.SetCell(columnShift + 6' 1' LocalizedStrings.Price).SetStyle(columnShift + 6' typeof(decimal))  							.SetCell(columnShift + 7' 1' LocalizedStrings.Str1323).SetStyle(columnShift + 7' typeof(decimal))  							.SetCell(columnShift + 8' 1' LocalizedStrings.Str1324)  							.SetCell(columnShift + 9' 1' LocalizedStrings.State)  							.SetCell(columnShift + 10' 1' LocalizedStrings.Str1325).SetStyle(columnShift + 10' typeof(decimal))  							.SetCell(columnShift + 11' 1' LocalizedStrings.Volume).SetStyle(columnShift + 11' typeof(decimal))  							.SetCell(columnShift + 12' 1' LocalizedStrings.Type)  							.SetCell(columnShift + 13' 1' LocalizedStrings.Str1326)  							.SetCell(columnShift + 14' 1' LocalizedStrings.Str1327)  							.SetCell(columnShift + 15' 1' LocalizedStrings.Str135);    						worker  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str1329)' null' Colors.Green)  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str238)' null' Colors.Red);    						rowIndex = 2;  						foreach (var order in strategy.Orders.ToArray())  						{  							worker  								.SetCell(columnShift + 0' rowIndex' order.Id)  								.SetCell(columnShift + 1' rowIndex' order.TransactionId)  								.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  								.SetCell(columnShift + 3' rowIndex' Format(order.Time))  								.SetCell(columnShift + 4' rowIndex' Format(order.LastChangeTime))  								.SetCell(columnShift + 5' rowIndex' Format(order.LastChangeTime - order.Time))  								.SetCell(columnShift + 6' rowIndex' order.Price)  								.SetCell(columnShift + 7' rowIndex' MathHelper.Round(order.GetAveragePrice(strategy.Connector)' Decimals))  								.SetCell(columnShift + 8' rowIndex' Format(order.State))  								.SetCell(columnShift + 9' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : LocalizedStrings.Str238))  								.SetCell(columnShift + 10' rowIndex' order.Balance)  								.SetCell(columnShift + 11' rowIndex' order.Volume)  								.SetCell(columnShift + 12' rowIndex' Format(order.Type))  								.SetCell(columnShift + 13' rowIndex' Format(order.LatencyRegistration))  								.SetCell(columnShift + 14' rowIndex' Format(order.LatencyCancellation))  								.SetCell(columnShift + 15' rowIndex' order.Comment);    							rowIndex++;  						}    						var stopOrders = strategy.StopOrders.ToArray();    						if (stopOrders.Length > 0)  						{  							rowIndex += 2;    							worker  								.SetCell(columnShift + 0' rowIndex - 1' LocalizedStrings.Str1351)    								.SetCell(columnShift + 0' rowIndex' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  								.SetCell(columnShift + 1' rowIndex' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  								.SetCell(columnShift + 2' rowIndex' LocalizedStrings.Str128)  								.SetCell(columnShift + 3' rowIndex' LocalizedStrings.Time).SetStyle(columnShift + 3' "HH:mm:ss.fff")  								.SetCell(columnShift + 4' rowIndex' LocalizedStrings.Price).SetStyle(columnShift + 4' typeof(decimal))  								.SetCell(columnShift + 5' rowIndex' LocalizedStrings.Str1324)  								.SetCell(columnShift + 6' rowIndex' LocalizedStrings.State)  								.SetCell(columnShift + 7' rowIndex' LocalizedStrings.Volume).SetStyle(columnShift + 7' typeof(decimal))  								.SetCell(columnShift + 8' rowIndex' LocalizedStrings.Str1326)  								.SetCell(columnShift + 9' rowIndex' LocalizedStrings.Str1327)  								//.SetCell(columnShift + 10' rowIndex' LocalizedStrings.Str1352).SetStyle(columnShift + 9' typeof(long))  								;    							var stopParams = stopOrders[0].Condition.Parameters.Keys.ToArray();    							for (var i = 0; i < stopParams.Length; i++)  								worker.SetCell(columnShift + 11 + i' rowIndex' stopParams[i]);    							foreach (var order in stopOrders)  							{  								worker  									.SetCell(columnShift + 0' rowIndex' order.Id)  									.SetCell(columnShift + 1' rowIndex' order.TransactionId)  									.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  									.SetCell(columnShift + 3' rowIndex' Format(order.Time))  									.SetCell(columnShift + 4' rowIndex' order.Price)  									.SetCell(columnShift + 5' rowIndex' Format(order.State))  									.SetCell(columnShift + 6' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : string.Empty))  									.SetCell(columnShift + 7' rowIndex' order.Volume)  									.SetCell(columnShift + 8' rowIndex' Format(order.LatencyRegistration))  									.SetCell(columnShift + 9' rowIndex' Format(order.LatencyCancellation))  									//.SetCell(columnShift + 10' rowIndex' order.DerivedOrder != null ? (object)order.DerivedOrder.Id : string.Empty)  									;    								for (var i = 0; i < stopParams.Length; i++)  									worker.SetCell(columnShift + 11 + i' rowIndex' order.Condition.Parameters[stopParams[i]] ?? string.Empty);    								rowIndex++;  							}  						}  					}  				}    				worker.Save(FileName' true);  			}
Magic Number,StockSharp.Algo.Strategies.Reporting,ExcelStrategyReport,C:\repos\stocksharp_stocksharp\Algo\Strategies\Reporting\ExcelStrategyReport.cs,Generate,The following statement contains a magic number: using (var worker = hasTemplate ? new ExcelWorker() : new ExcelWorker(Template))  			{  				foreach (var strategy in Strategies)  				{  					if (Template.IsEmpty())  					{  						worker.RenameSheet(strategy.Name);  					}  					else  					{  						if (worker.ContainsSheet(strategy.Name))  							worker.AddSheet(strategy.Name);  					}    					worker  						.SetCell(0' 0' LocalizedStrings.Str1331)    						.SetCell(0' 1' LocalizedStrings.Security + ":")  						.SetCell(1' 1' strategy.Security != null ? strategy.Security.Id : string.Empty)    						.SetCell(0' 2' LocalizedStrings.Portfolio + ":")  						.SetCell(1' 2' strategy.Portfolio != null ? strategy.Portfolio.Name : string.Empty)    						.SetCell(0' 3' LocalizedStrings.Str1334)  						.SetCell(1' 3' Format(strategy.TotalWorkingTime))    						.SetCell(0' 4' LocalizedStrings.Str1335)  						//.SetCell(1' 4' FormatTime(base.Strategy.TotalCPUTime))    						.SetCell(0' 5' LocalizedStrings.Str862 + ":")  						.SetCell(1' 5' strategy.Position)    						.SetCell(0' 6' LocalizedStrings.PnL + ":")  						.SetCell(1' 6' strategy.PnL)    						.SetCell(0' 7' LocalizedStrings.Str159 + ":")  						.SetCell(1' 7' strategy.Commission)    						.SetCell(0' 8' LocalizedStrings.Str163 + ":")  						.SetCell(1' 8' strategy.Slippage)    						.SetCell(0' 9' LocalizedStrings.Str161 + ":")  						.SetCell(1' 9' Format(strategy.Latency));    					var rowIndex = 11;    					foreach (var parameter in strategy.StatisticManager.Parameters.SyncGet(c => c.ToArray()))  					{  						var value = parameter.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' parameter.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					rowIndex += 2;  					worker.SetCell(0' rowIndex' LocalizedStrings.Str1340);  					rowIndex++;    					foreach (var strategyParam in strategy.Parameters.CachedValues)  					{  						var value = strategyParam.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' strategyParam.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					//rowIndex += 2;  					//worker.SetCell(0' rowIndex' "Комиссия по типам:");  					//rowIndex++;    					//foreach (var group in Strategy.CommissionManager.Rules.SyncGet(c => c.ToArray()).GroupBy(c => c.GetType().GetDisplayName()))  					//{  					//	var commission = group.Sum(r => r.Commission);    					//	if (commission == 0)  					//		continue;    					//	worker  					//		.SetCell(0' rowIndex' group.Key)  					//		.SetCell(1' rowIndex' commission);    					//	rowIndex++;  					//}    					var columnShift = 3;    					worker  						.SetCell(columnShift + 0' 0' LocalizedStrings.Str985)    						.SetCell(columnShift + 0' 1' LocalizedStrings.Str1192).SetStyle(columnShift + 0' typeof(long))  						.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  						.SetCell(columnShift + 2' 1' LocalizedStrings.Time).SetStyle(columnShift + 2' "HH:mm:ss.fff")  						.SetCell(columnShift + 3' 1' LocalizedStrings.Price).SetStyle(columnShift + 3' typeof(decimal))  						.SetCell(columnShift + 4' 1' LocalizedStrings.Str1341).SetStyle(columnShift + 4' typeof(decimal))  						.SetCell(columnShift + 5' 1' LocalizedStrings.Volume).SetStyle(columnShift + 5' typeof(decimal))  						.SetCell(columnShift + 6' 1' LocalizedStrings.Str128)  						.SetCell(columnShift + 7' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 7' typeof(long))  						.SetCell(columnShift + 8' 1' LocalizedStrings.Str163).SetStyle(columnShift + 8' typeof(decimal))  						.SetCell(columnShift + 9' 1' LocalizedStrings.Str135)  						.SetCell(columnShift + 10' 1' LocalizedStrings.Str1342).SetStyle(columnShift + 11' typeof(decimal))  						.SetCell(columnShift + 11' 1' LocalizedStrings.Str1343).SetStyle(columnShift + 12' typeof(decimal))  						.SetCell(columnShift + 12' 1' LocalizedStrings.Str1344).SetStyle(columnShift + 13' typeof(decimal))  						.SetCell(columnShift + 13' 1' LocalizedStrings.Str1345).SetStyle(columnShift + 14' typeof(decimal))  						.SetCell(columnShift + 14' 1' LocalizedStrings.Str862).SetStyle(columnShift + 15' typeof(decimal));    					worker  						.SetConditionalFormatting(columnShift + 10' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 11' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 12' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 13' ComparisonOperator.Less' "0"' null' Colors.Red);    					var totalPnL = 0m;  					var position = 0m;    					var queues = new Dictionary<Security' PnLQueue>();    					rowIndex = 2;  					foreach (var trade in strategy.MyTrades.ToArray())  					{  						var info = strategy.PnLManager.ProcessMessage(trade.ToMessage());    						totalPnL += info.PnL;  						position += trade.GetPosition() ?? 0;    						var queue = queues.SafeAdd(trade.Trade.Security' key => new PnLQueue(key.ToSecurityId()));    						var localInfo = queue.Process(trade.ToMessage());    						worker  							.SetCell(columnShift + 0' rowIndex' trade.Trade.Id)  							.SetCell(columnShift + 1' rowIndex' trade.Order.TransactionId)  							.SetCell(columnShift + 2' rowIndex' Format(trade.Trade.Time))  							.SetCell(columnShift + 3' rowIndex' trade.Trade.Price)  							.SetCell(columnShift + 4' rowIndex' trade.Order.Price)  							.SetCell(columnShift + 5' rowIndex' trade.Trade.Volume)  							.SetCell(columnShift + 6' rowIndex' Format(trade.Order.Direction))  							.SetCell(columnShift + 7' rowIndex' trade.Order.Id)  							.SetCell(columnShift + 8' rowIndex' trade.Slippage)  							.SetCell(columnShift + 9' rowIndex' trade.Order.Comment)  							.SetCell(columnShift + 10' rowIndex' MathHelper.Round(info.PnL' Decimals))  							.SetCell(columnShift + 11' rowIndex' MathHelper.Round(localInfo.PnL' Decimals))  							.SetCell(columnShift + 12' rowIndex' MathHelper.Round(totalPnL' Decimals))  							.SetCell(columnShift + 13' rowIndex' MathHelper.Round(queue.RealizedPnL' Decimals))  							.SetCell(columnShift + 14' rowIndex' position);    						rowIndex++;  					}    					if (IncludeOrders)  					{  						columnShift += 17;    						worker  							.SetCell(columnShift + 0' 0' LocalizedStrings.Orders)    							.SetCell(columnShift + 0' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  							.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  							.SetCell(columnShift + 2' 1' LocalizedStrings.Str128)  							.SetCell(columnShift + 3' 1' LocalizedStrings.Str1346).SetStyle(columnShift + 3' "HH:mm:ss.fff")  							.SetCell(columnShift + 4' 1' LocalizedStrings.Str1347).SetStyle(columnShift + 4' "HH:mm:ss.fff")  							.SetCell(columnShift + 5' 1' LocalizedStrings.Str1348)  							.SetCell(columnShift + 6' 1' LocalizedStrings.Price).SetStyle(columnShift + 6' typeof(decimal))  							.SetCell(columnShift + 7' 1' LocalizedStrings.Str1323).SetStyle(columnShift + 7' typeof(decimal))  							.SetCell(columnShift + 8' 1' LocalizedStrings.Str1324)  							.SetCell(columnShift + 9' 1' LocalizedStrings.State)  							.SetCell(columnShift + 10' 1' LocalizedStrings.Str1325).SetStyle(columnShift + 10' typeof(decimal))  							.SetCell(columnShift + 11' 1' LocalizedStrings.Volume).SetStyle(columnShift + 11' typeof(decimal))  							.SetCell(columnShift + 12' 1' LocalizedStrings.Type)  							.SetCell(columnShift + 13' 1' LocalizedStrings.Str1326)  							.SetCell(columnShift + 14' 1' LocalizedStrings.Str1327)  							.SetCell(columnShift + 15' 1' LocalizedStrings.Str135);    						worker  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str1329)' null' Colors.Green)  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str238)' null' Colors.Red);    						rowIndex = 2;  						foreach (var order in strategy.Orders.ToArray())  						{  							worker  								.SetCell(columnShift + 0' rowIndex' order.Id)  								.SetCell(columnShift + 1' rowIndex' order.TransactionId)  								.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  								.SetCell(columnShift + 3' rowIndex' Format(order.Time))  								.SetCell(columnShift + 4' rowIndex' Format(order.LastChangeTime))  								.SetCell(columnShift + 5' rowIndex' Format(order.LastChangeTime - order.Time))  								.SetCell(columnShift + 6' rowIndex' order.Price)  								.SetCell(columnShift + 7' rowIndex' MathHelper.Round(order.GetAveragePrice(strategy.Connector)' Decimals))  								.SetCell(columnShift + 8' rowIndex' Format(order.State))  								.SetCell(columnShift + 9' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : LocalizedStrings.Str238))  								.SetCell(columnShift + 10' rowIndex' order.Balance)  								.SetCell(columnShift + 11' rowIndex' order.Volume)  								.SetCell(columnShift + 12' rowIndex' Format(order.Type))  								.SetCell(columnShift + 13' rowIndex' Format(order.LatencyRegistration))  								.SetCell(columnShift + 14' rowIndex' Format(order.LatencyCancellation))  								.SetCell(columnShift + 15' rowIndex' order.Comment);    							rowIndex++;  						}    						var stopOrders = strategy.StopOrders.ToArray();    						if (stopOrders.Length > 0)  						{  							rowIndex += 2;    							worker  								.SetCell(columnShift + 0' rowIndex - 1' LocalizedStrings.Str1351)    								.SetCell(columnShift + 0' rowIndex' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  								.SetCell(columnShift + 1' rowIndex' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  								.SetCell(columnShift + 2' rowIndex' LocalizedStrings.Str128)  								.SetCell(columnShift + 3' rowIndex' LocalizedStrings.Time).SetStyle(columnShift + 3' "HH:mm:ss.fff")  								.SetCell(columnShift + 4' rowIndex' LocalizedStrings.Price).SetStyle(columnShift + 4' typeof(decimal))  								.SetCell(columnShift + 5' rowIndex' LocalizedStrings.Str1324)  								.SetCell(columnShift + 6' rowIndex' LocalizedStrings.State)  								.SetCell(columnShift + 7' rowIndex' LocalizedStrings.Volume).SetStyle(columnShift + 7' typeof(decimal))  								.SetCell(columnShift + 8' rowIndex' LocalizedStrings.Str1326)  								.SetCell(columnShift + 9' rowIndex' LocalizedStrings.Str1327)  								//.SetCell(columnShift + 10' rowIndex' LocalizedStrings.Str1352).SetStyle(columnShift + 9' typeof(long))  								;    							var stopParams = stopOrders[0].Condition.Parameters.Keys.ToArray();    							for (var i = 0; i < stopParams.Length; i++)  								worker.SetCell(columnShift + 11 + i' rowIndex' stopParams[i]);    							foreach (var order in stopOrders)  							{  								worker  									.SetCell(columnShift + 0' rowIndex' order.Id)  									.SetCell(columnShift + 1' rowIndex' order.TransactionId)  									.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  									.SetCell(columnShift + 3' rowIndex' Format(order.Time))  									.SetCell(columnShift + 4' rowIndex' order.Price)  									.SetCell(columnShift + 5' rowIndex' Format(order.State))  									.SetCell(columnShift + 6' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : string.Empty))  									.SetCell(columnShift + 7' rowIndex' order.Volume)  									.SetCell(columnShift + 8' rowIndex' Format(order.LatencyRegistration))  									.SetCell(columnShift + 9' rowIndex' Format(order.LatencyCancellation))  									//.SetCell(columnShift + 10' rowIndex' order.DerivedOrder != null ? (object)order.DerivedOrder.Id : string.Empty)  									;    								for (var i = 0; i < stopParams.Length; i++)  									worker.SetCell(columnShift + 11 + i' rowIndex' order.Condition.Parameters[stopParams[i]] ?? string.Empty);    								rowIndex++;  							}  						}  					}  				}    				worker.Save(FileName' true);  			}
Magic Number,StockSharp.Algo.Strategies.Reporting,ExcelStrategyReport,C:\repos\stocksharp_stocksharp\Algo\Strategies\Reporting\ExcelStrategyReport.cs,Generate,The following statement contains a magic number: using (var worker = hasTemplate ? new ExcelWorker() : new ExcelWorker(Template))  			{  				foreach (var strategy in Strategies)  				{  					if (Template.IsEmpty())  					{  						worker.RenameSheet(strategy.Name);  					}  					else  					{  						if (worker.ContainsSheet(strategy.Name))  							worker.AddSheet(strategy.Name);  					}    					worker  						.SetCell(0' 0' LocalizedStrings.Str1331)    						.SetCell(0' 1' LocalizedStrings.Security + ":")  						.SetCell(1' 1' strategy.Security != null ? strategy.Security.Id : string.Empty)    						.SetCell(0' 2' LocalizedStrings.Portfolio + ":")  						.SetCell(1' 2' strategy.Portfolio != null ? strategy.Portfolio.Name : string.Empty)    						.SetCell(0' 3' LocalizedStrings.Str1334)  						.SetCell(1' 3' Format(strategy.TotalWorkingTime))    						.SetCell(0' 4' LocalizedStrings.Str1335)  						//.SetCell(1' 4' FormatTime(base.Strategy.TotalCPUTime))    						.SetCell(0' 5' LocalizedStrings.Str862 + ":")  						.SetCell(1' 5' strategy.Position)    						.SetCell(0' 6' LocalizedStrings.PnL + ":")  						.SetCell(1' 6' strategy.PnL)    						.SetCell(0' 7' LocalizedStrings.Str159 + ":")  						.SetCell(1' 7' strategy.Commission)    						.SetCell(0' 8' LocalizedStrings.Str163 + ":")  						.SetCell(1' 8' strategy.Slippage)    						.SetCell(0' 9' LocalizedStrings.Str161 + ":")  						.SetCell(1' 9' Format(strategy.Latency));    					var rowIndex = 11;    					foreach (var parameter in strategy.StatisticManager.Parameters.SyncGet(c => c.ToArray()))  					{  						var value = parameter.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' parameter.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					rowIndex += 2;  					worker.SetCell(0' rowIndex' LocalizedStrings.Str1340);  					rowIndex++;    					foreach (var strategyParam in strategy.Parameters.CachedValues)  					{  						var value = strategyParam.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' strategyParam.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					//rowIndex += 2;  					//worker.SetCell(0' rowIndex' "Комиссия по типам:");  					//rowIndex++;    					//foreach (var group in Strategy.CommissionManager.Rules.SyncGet(c => c.ToArray()).GroupBy(c => c.GetType().GetDisplayName()))  					//{  					//	var commission = group.Sum(r => r.Commission);    					//	if (commission == 0)  					//		continue;    					//	worker  					//		.SetCell(0' rowIndex' group.Key)  					//		.SetCell(1' rowIndex' commission);    					//	rowIndex++;  					//}    					var columnShift = 3;    					worker  						.SetCell(columnShift + 0' 0' LocalizedStrings.Str985)    						.SetCell(columnShift + 0' 1' LocalizedStrings.Str1192).SetStyle(columnShift + 0' typeof(long))  						.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  						.SetCell(columnShift + 2' 1' LocalizedStrings.Time).SetStyle(columnShift + 2' "HH:mm:ss.fff")  						.SetCell(columnShift + 3' 1' LocalizedStrings.Price).SetStyle(columnShift + 3' typeof(decimal))  						.SetCell(columnShift + 4' 1' LocalizedStrings.Str1341).SetStyle(columnShift + 4' typeof(decimal))  						.SetCell(columnShift + 5' 1' LocalizedStrings.Volume).SetStyle(columnShift + 5' typeof(decimal))  						.SetCell(columnShift + 6' 1' LocalizedStrings.Str128)  						.SetCell(columnShift + 7' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 7' typeof(long))  						.SetCell(columnShift + 8' 1' LocalizedStrings.Str163).SetStyle(columnShift + 8' typeof(decimal))  						.SetCell(columnShift + 9' 1' LocalizedStrings.Str135)  						.SetCell(columnShift + 10' 1' LocalizedStrings.Str1342).SetStyle(columnShift + 11' typeof(decimal))  						.SetCell(columnShift + 11' 1' LocalizedStrings.Str1343).SetStyle(columnShift + 12' typeof(decimal))  						.SetCell(columnShift + 12' 1' LocalizedStrings.Str1344).SetStyle(columnShift + 13' typeof(decimal))  						.SetCell(columnShift + 13' 1' LocalizedStrings.Str1345).SetStyle(columnShift + 14' typeof(decimal))  						.SetCell(columnShift + 14' 1' LocalizedStrings.Str862).SetStyle(columnShift + 15' typeof(decimal));    					worker  						.SetConditionalFormatting(columnShift + 10' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 11' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 12' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 13' ComparisonOperator.Less' "0"' null' Colors.Red);    					var totalPnL = 0m;  					var position = 0m;    					var queues = new Dictionary<Security' PnLQueue>();    					rowIndex = 2;  					foreach (var trade in strategy.MyTrades.ToArray())  					{  						var info = strategy.PnLManager.ProcessMessage(trade.ToMessage());    						totalPnL += info.PnL;  						position += trade.GetPosition() ?? 0;    						var queue = queues.SafeAdd(trade.Trade.Security' key => new PnLQueue(key.ToSecurityId()));    						var localInfo = queue.Process(trade.ToMessage());    						worker  							.SetCell(columnShift + 0' rowIndex' trade.Trade.Id)  							.SetCell(columnShift + 1' rowIndex' trade.Order.TransactionId)  							.SetCell(columnShift + 2' rowIndex' Format(trade.Trade.Time))  							.SetCell(columnShift + 3' rowIndex' trade.Trade.Price)  							.SetCell(columnShift + 4' rowIndex' trade.Order.Price)  							.SetCell(columnShift + 5' rowIndex' trade.Trade.Volume)  							.SetCell(columnShift + 6' rowIndex' Format(trade.Order.Direction))  							.SetCell(columnShift + 7' rowIndex' trade.Order.Id)  							.SetCell(columnShift + 8' rowIndex' trade.Slippage)  							.SetCell(columnShift + 9' rowIndex' trade.Order.Comment)  							.SetCell(columnShift + 10' rowIndex' MathHelper.Round(info.PnL' Decimals))  							.SetCell(columnShift + 11' rowIndex' MathHelper.Round(localInfo.PnL' Decimals))  							.SetCell(columnShift + 12' rowIndex' MathHelper.Round(totalPnL' Decimals))  							.SetCell(columnShift + 13' rowIndex' MathHelper.Round(queue.RealizedPnL' Decimals))  							.SetCell(columnShift + 14' rowIndex' position);    						rowIndex++;  					}    					if (IncludeOrders)  					{  						columnShift += 17;    						worker  							.SetCell(columnShift + 0' 0' LocalizedStrings.Orders)    							.SetCell(columnShift + 0' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  							.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  							.SetCell(columnShift + 2' 1' LocalizedStrings.Str128)  							.SetCell(columnShift + 3' 1' LocalizedStrings.Str1346).SetStyle(columnShift + 3' "HH:mm:ss.fff")  							.SetCell(columnShift + 4' 1' LocalizedStrings.Str1347).SetStyle(columnShift + 4' "HH:mm:ss.fff")  							.SetCell(columnShift + 5' 1' LocalizedStrings.Str1348)  							.SetCell(columnShift + 6' 1' LocalizedStrings.Price).SetStyle(columnShift + 6' typeof(decimal))  							.SetCell(columnShift + 7' 1' LocalizedStrings.Str1323).SetStyle(columnShift + 7' typeof(decimal))  							.SetCell(columnShift + 8' 1' LocalizedStrings.Str1324)  							.SetCell(columnShift + 9' 1' LocalizedStrings.State)  							.SetCell(columnShift + 10' 1' LocalizedStrings.Str1325).SetStyle(columnShift + 10' typeof(decimal))  							.SetCell(columnShift + 11' 1' LocalizedStrings.Volume).SetStyle(columnShift + 11' typeof(decimal))  							.SetCell(columnShift + 12' 1' LocalizedStrings.Type)  							.SetCell(columnShift + 13' 1' LocalizedStrings.Str1326)  							.SetCell(columnShift + 14' 1' LocalizedStrings.Str1327)  							.SetCell(columnShift + 15' 1' LocalizedStrings.Str135);    						worker  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str1329)' null' Colors.Green)  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str238)' null' Colors.Red);    						rowIndex = 2;  						foreach (var order in strategy.Orders.ToArray())  						{  							worker  								.SetCell(columnShift + 0' rowIndex' order.Id)  								.SetCell(columnShift + 1' rowIndex' order.TransactionId)  								.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  								.SetCell(columnShift + 3' rowIndex' Format(order.Time))  								.SetCell(columnShift + 4' rowIndex' Format(order.LastChangeTime))  								.SetCell(columnShift + 5' rowIndex' Format(order.LastChangeTime - order.Time))  								.SetCell(columnShift + 6' rowIndex' order.Price)  								.SetCell(columnShift + 7' rowIndex' MathHelper.Round(order.GetAveragePrice(strategy.Connector)' Decimals))  								.SetCell(columnShift + 8' rowIndex' Format(order.State))  								.SetCell(columnShift + 9' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : LocalizedStrings.Str238))  								.SetCell(columnShift + 10' rowIndex' order.Balance)  								.SetCell(columnShift + 11' rowIndex' order.Volume)  								.SetCell(columnShift + 12' rowIndex' Format(order.Type))  								.SetCell(columnShift + 13' rowIndex' Format(order.LatencyRegistration))  								.SetCell(columnShift + 14' rowIndex' Format(order.LatencyCancellation))  								.SetCell(columnShift + 15' rowIndex' order.Comment);    							rowIndex++;  						}    						var stopOrders = strategy.StopOrders.ToArray();    						if (stopOrders.Length > 0)  						{  							rowIndex += 2;    							worker  								.SetCell(columnShift + 0' rowIndex - 1' LocalizedStrings.Str1351)    								.SetCell(columnShift + 0' rowIndex' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  								.SetCell(columnShift + 1' rowIndex' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  								.SetCell(columnShift + 2' rowIndex' LocalizedStrings.Str128)  								.SetCell(columnShift + 3' rowIndex' LocalizedStrings.Time).SetStyle(columnShift + 3' "HH:mm:ss.fff")  								.SetCell(columnShift + 4' rowIndex' LocalizedStrings.Price).SetStyle(columnShift + 4' typeof(decimal))  								.SetCell(columnShift + 5' rowIndex' LocalizedStrings.Str1324)  								.SetCell(columnShift + 6' rowIndex' LocalizedStrings.State)  								.SetCell(columnShift + 7' rowIndex' LocalizedStrings.Volume).SetStyle(columnShift + 7' typeof(decimal))  								.SetCell(columnShift + 8' rowIndex' LocalizedStrings.Str1326)  								.SetCell(columnShift + 9' rowIndex' LocalizedStrings.Str1327)  								//.SetCell(columnShift + 10' rowIndex' LocalizedStrings.Str1352).SetStyle(columnShift + 9' typeof(long))  								;    							var stopParams = stopOrders[0].Condition.Parameters.Keys.ToArray();    							for (var i = 0; i < stopParams.Length; i++)  								worker.SetCell(columnShift + 11 + i' rowIndex' stopParams[i]);    							foreach (var order in stopOrders)  							{  								worker  									.SetCell(columnShift + 0' rowIndex' order.Id)  									.SetCell(columnShift + 1' rowIndex' order.TransactionId)  									.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  									.SetCell(columnShift + 3' rowIndex' Format(order.Time))  									.SetCell(columnShift + 4' rowIndex' order.Price)  									.SetCell(columnShift + 5' rowIndex' Format(order.State))  									.SetCell(columnShift + 6' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : string.Empty))  									.SetCell(columnShift + 7' rowIndex' order.Volume)  									.SetCell(columnShift + 8' rowIndex' Format(order.LatencyRegistration))  									.SetCell(columnShift + 9' rowIndex' Format(order.LatencyCancellation))  									//.SetCell(columnShift + 10' rowIndex' order.DerivedOrder != null ? (object)order.DerivedOrder.Id : string.Empty)  									;    								for (var i = 0; i < stopParams.Length; i++)  									worker.SetCell(columnShift + 11 + i' rowIndex' order.Condition.Parameters[stopParams[i]] ?? string.Empty);    								rowIndex++;  							}  						}  					}  				}    				worker.Save(FileName' true);  			}
Magic Number,StockSharp.Algo.Strategies.Reporting,ExcelStrategyReport,C:\repos\stocksharp_stocksharp\Algo\Strategies\Reporting\ExcelStrategyReport.cs,Generate,The following statement contains a magic number: using (var worker = hasTemplate ? new ExcelWorker() : new ExcelWorker(Template))  			{  				foreach (var strategy in Strategies)  				{  					if (Template.IsEmpty())  					{  						worker.RenameSheet(strategy.Name);  					}  					else  					{  						if (worker.ContainsSheet(strategy.Name))  							worker.AddSheet(strategy.Name);  					}    					worker  						.SetCell(0' 0' LocalizedStrings.Str1331)    						.SetCell(0' 1' LocalizedStrings.Security + ":")  						.SetCell(1' 1' strategy.Security != null ? strategy.Security.Id : string.Empty)    						.SetCell(0' 2' LocalizedStrings.Portfolio + ":")  						.SetCell(1' 2' strategy.Portfolio != null ? strategy.Portfolio.Name : string.Empty)    						.SetCell(0' 3' LocalizedStrings.Str1334)  						.SetCell(1' 3' Format(strategy.TotalWorkingTime))    						.SetCell(0' 4' LocalizedStrings.Str1335)  						//.SetCell(1' 4' FormatTime(base.Strategy.TotalCPUTime))    						.SetCell(0' 5' LocalizedStrings.Str862 + ":")  						.SetCell(1' 5' strategy.Position)    						.SetCell(0' 6' LocalizedStrings.PnL + ":")  						.SetCell(1' 6' strategy.PnL)    						.SetCell(0' 7' LocalizedStrings.Str159 + ":")  						.SetCell(1' 7' strategy.Commission)    						.SetCell(0' 8' LocalizedStrings.Str163 + ":")  						.SetCell(1' 8' strategy.Slippage)    						.SetCell(0' 9' LocalizedStrings.Str161 + ":")  						.SetCell(1' 9' Format(strategy.Latency));    					var rowIndex = 11;    					foreach (var parameter in strategy.StatisticManager.Parameters.SyncGet(c => c.ToArray()))  					{  						var value = parameter.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' parameter.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					rowIndex += 2;  					worker.SetCell(0' rowIndex' LocalizedStrings.Str1340);  					rowIndex++;    					foreach (var strategyParam in strategy.Parameters.CachedValues)  					{  						var value = strategyParam.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' strategyParam.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					//rowIndex += 2;  					//worker.SetCell(0' rowIndex' "Комиссия по типам:");  					//rowIndex++;    					//foreach (var group in Strategy.CommissionManager.Rules.SyncGet(c => c.ToArray()).GroupBy(c => c.GetType().GetDisplayName()))  					//{  					//	var commission = group.Sum(r => r.Commission);    					//	if (commission == 0)  					//		continue;    					//	worker  					//		.SetCell(0' rowIndex' group.Key)  					//		.SetCell(1' rowIndex' commission);    					//	rowIndex++;  					//}    					var columnShift = 3;    					worker  						.SetCell(columnShift + 0' 0' LocalizedStrings.Str985)    						.SetCell(columnShift + 0' 1' LocalizedStrings.Str1192).SetStyle(columnShift + 0' typeof(long))  						.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  						.SetCell(columnShift + 2' 1' LocalizedStrings.Time).SetStyle(columnShift + 2' "HH:mm:ss.fff")  						.SetCell(columnShift + 3' 1' LocalizedStrings.Price).SetStyle(columnShift + 3' typeof(decimal))  						.SetCell(columnShift + 4' 1' LocalizedStrings.Str1341).SetStyle(columnShift + 4' typeof(decimal))  						.SetCell(columnShift + 5' 1' LocalizedStrings.Volume).SetStyle(columnShift + 5' typeof(decimal))  						.SetCell(columnShift + 6' 1' LocalizedStrings.Str128)  						.SetCell(columnShift + 7' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 7' typeof(long))  						.SetCell(columnShift + 8' 1' LocalizedStrings.Str163).SetStyle(columnShift + 8' typeof(decimal))  						.SetCell(columnShift + 9' 1' LocalizedStrings.Str135)  						.SetCell(columnShift + 10' 1' LocalizedStrings.Str1342).SetStyle(columnShift + 11' typeof(decimal))  						.SetCell(columnShift + 11' 1' LocalizedStrings.Str1343).SetStyle(columnShift + 12' typeof(decimal))  						.SetCell(columnShift + 12' 1' LocalizedStrings.Str1344).SetStyle(columnShift + 13' typeof(decimal))  						.SetCell(columnShift + 13' 1' LocalizedStrings.Str1345).SetStyle(columnShift + 14' typeof(decimal))  						.SetCell(columnShift + 14' 1' LocalizedStrings.Str862).SetStyle(columnShift + 15' typeof(decimal));    					worker  						.SetConditionalFormatting(columnShift + 10' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 11' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 12' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 13' ComparisonOperator.Less' "0"' null' Colors.Red);    					var totalPnL = 0m;  					var position = 0m;    					var queues = new Dictionary<Security' PnLQueue>();    					rowIndex = 2;  					foreach (var trade in strategy.MyTrades.ToArray())  					{  						var info = strategy.PnLManager.ProcessMessage(trade.ToMessage());    						totalPnL += info.PnL;  						position += trade.GetPosition() ?? 0;    						var queue = queues.SafeAdd(trade.Trade.Security' key => new PnLQueue(key.ToSecurityId()));    						var localInfo = queue.Process(trade.ToMessage());    						worker  							.SetCell(columnShift + 0' rowIndex' trade.Trade.Id)  							.SetCell(columnShift + 1' rowIndex' trade.Order.TransactionId)  							.SetCell(columnShift + 2' rowIndex' Format(trade.Trade.Time))  							.SetCell(columnShift + 3' rowIndex' trade.Trade.Price)  							.SetCell(columnShift + 4' rowIndex' trade.Order.Price)  							.SetCell(columnShift + 5' rowIndex' trade.Trade.Volume)  							.SetCell(columnShift + 6' rowIndex' Format(trade.Order.Direction))  							.SetCell(columnShift + 7' rowIndex' trade.Order.Id)  							.SetCell(columnShift + 8' rowIndex' trade.Slippage)  							.SetCell(columnShift + 9' rowIndex' trade.Order.Comment)  							.SetCell(columnShift + 10' rowIndex' MathHelper.Round(info.PnL' Decimals))  							.SetCell(columnShift + 11' rowIndex' MathHelper.Round(localInfo.PnL' Decimals))  							.SetCell(columnShift + 12' rowIndex' MathHelper.Round(totalPnL' Decimals))  							.SetCell(columnShift + 13' rowIndex' MathHelper.Round(queue.RealizedPnL' Decimals))  							.SetCell(columnShift + 14' rowIndex' position);    						rowIndex++;  					}    					if (IncludeOrders)  					{  						columnShift += 17;    						worker  							.SetCell(columnShift + 0' 0' LocalizedStrings.Orders)    							.SetCell(columnShift + 0' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  							.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  							.SetCell(columnShift + 2' 1' LocalizedStrings.Str128)  							.SetCell(columnShift + 3' 1' LocalizedStrings.Str1346).SetStyle(columnShift + 3' "HH:mm:ss.fff")  							.SetCell(columnShift + 4' 1' LocalizedStrings.Str1347).SetStyle(columnShift + 4' "HH:mm:ss.fff")  							.SetCell(columnShift + 5' 1' LocalizedStrings.Str1348)  							.SetCell(columnShift + 6' 1' LocalizedStrings.Price).SetStyle(columnShift + 6' typeof(decimal))  							.SetCell(columnShift + 7' 1' LocalizedStrings.Str1323).SetStyle(columnShift + 7' typeof(decimal))  							.SetCell(columnShift + 8' 1' LocalizedStrings.Str1324)  							.SetCell(columnShift + 9' 1' LocalizedStrings.State)  							.SetCell(columnShift + 10' 1' LocalizedStrings.Str1325).SetStyle(columnShift + 10' typeof(decimal))  							.SetCell(columnShift + 11' 1' LocalizedStrings.Volume).SetStyle(columnShift + 11' typeof(decimal))  							.SetCell(columnShift + 12' 1' LocalizedStrings.Type)  							.SetCell(columnShift + 13' 1' LocalizedStrings.Str1326)  							.SetCell(columnShift + 14' 1' LocalizedStrings.Str1327)  							.SetCell(columnShift + 15' 1' LocalizedStrings.Str135);    						worker  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str1329)' null' Colors.Green)  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str238)' null' Colors.Red);    						rowIndex = 2;  						foreach (var order in strategy.Orders.ToArray())  						{  							worker  								.SetCell(columnShift + 0' rowIndex' order.Id)  								.SetCell(columnShift + 1' rowIndex' order.TransactionId)  								.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  								.SetCell(columnShift + 3' rowIndex' Format(order.Time))  								.SetCell(columnShift + 4' rowIndex' Format(order.LastChangeTime))  								.SetCell(columnShift + 5' rowIndex' Format(order.LastChangeTime - order.Time))  								.SetCell(columnShift + 6' rowIndex' order.Price)  								.SetCell(columnShift + 7' rowIndex' MathHelper.Round(order.GetAveragePrice(strategy.Connector)' Decimals))  								.SetCell(columnShift + 8' rowIndex' Format(order.State))  								.SetCell(columnShift + 9' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : LocalizedStrings.Str238))  								.SetCell(columnShift + 10' rowIndex' order.Balance)  								.SetCell(columnShift + 11' rowIndex' order.Volume)  								.SetCell(columnShift + 12' rowIndex' Format(order.Type))  								.SetCell(columnShift + 13' rowIndex' Format(order.LatencyRegistration))  								.SetCell(columnShift + 14' rowIndex' Format(order.LatencyCancellation))  								.SetCell(columnShift + 15' rowIndex' order.Comment);    							rowIndex++;  						}    						var stopOrders = strategy.StopOrders.ToArray();    						if (stopOrders.Length > 0)  						{  							rowIndex += 2;    							worker  								.SetCell(columnShift + 0' rowIndex - 1' LocalizedStrings.Str1351)    								.SetCell(columnShift + 0' rowIndex' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  								.SetCell(columnShift + 1' rowIndex' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  								.SetCell(columnShift + 2' rowIndex' LocalizedStrings.Str128)  								.SetCell(columnShift + 3' rowIndex' LocalizedStrings.Time).SetStyle(columnShift + 3' "HH:mm:ss.fff")  								.SetCell(columnShift + 4' rowIndex' LocalizedStrings.Price).SetStyle(columnShift + 4' typeof(decimal))  								.SetCell(columnShift + 5' rowIndex' LocalizedStrings.Str1324)  								.SetCell(columnShift + 6' rowIndex' LocalizedStrings.State)  								.SetCell(columnShift + 7' rowIndex' LocalizedStrings.Volume).SetStyle(columnShift + 7' typeof(decimal))  								.SetCell(columnShift + 8' rowIndex' LocalizedStrings.Str1326)  								.SetCell(columnShift + 9' rowIndex' LocalizedStrings.Str1327)  								//.SetCell(columnShift + 10' rowIndex' LocalizedStrings.Str1352).SetStyle(columnShift + 9' typeof(long))  								;    							var stopParams = stopOrders[0].Condition.Parameters.Keys.ToArray();    							for (var i = 0; i < stopParams.Length; i++)  								worker.SetCell(columnShift + 11 + i' rowIndex' stopParams[i]);    							foreach (var order in stopOrders)  							{  								worker  									.SetCell(columnShift + 0' rowIndex' order.Id)  									.SetCell(columnShift + 1' rowIndex' order.TransactionId)  									.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  									.SetCell(columnShift + 3' rowIndex' Format(order.Time))  									.SetCell(columnShift + 4' rowIndex' order.Price)  									.SetCell(columnShift + 5' rowIndex' Format(order.State))  									.SetCell(columnShift + 6' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : string.Empty))  									.SetCell(columnShift + 7' rowIndex' order.Volume)  									.SetCell(columnShift + 8' rowIndex' Format(order.LatencyRegistration))  									.SetCell(columnShift + 9' rowIndex' Format(order.LatencyCancellation))  									//.SetCell(columnShift + 10' rowIndex' order.DerivedOrder != null ? (object)order.DerivedOrder.Id : string.Empty)  									;    								for (var i = 0; i < stopParams.Length; i++)  									worker.SetCell(columnShift + 11 + i' rowIndex' order.Condition.Parameters[stopParams[i]] ?? string.Empty);    								rowIndex++;  							}  						}  					}  				}    				worker.Save(FileName' true);  			}
Magic Number,StockSharp.Algo.Strategies.Reporting,ExcelStrategyReport,C:\repos\stocksharp_stocksharp\Algo\Strategies\Reporting\ExcelStrategyReport.cs,Generate,The following statement contains a magic number: using (var worker = hasTemplate ? new ExcelWorker() : new ExcelWorker(Template))  			{  				foreach (var strategy in Strategies)  				{  					if (Template.IsEmpty())  					{  						worker.RenameSheet(strategy.Name);  					}  					else  					{  						if (worker.ContainsSheet(strategy.Name))  							worker.AddSheet(strategy.Name);  					}    					worker  						.SetCell(0' 0' LocalizedStrings.Str1331)    						.SetCell(0' 1' LocalizedStrings.Security + ":")  						.SetCell(1' 1' strategy.Security != null ? strategy.Security.Id : string.Empty)    						.SetCell(0' 2' LocalizedStrings.Portfolio + ":")  						.SetCell(1' 2' strategy.Portfolio != null ? strategy.Portfolio.Name : string.Empty)    						.SetCell(0' 3' LocalizedStrings.Str1334)  						.SetCell(1' 3' Format(strategy.TotalWorkingTime))    						.SetCell(0' 4' LocalizedStrings.Str1335)  						//.SetCell(1' 4' FormatTime(base.Strategy.TotalCPUTime))    						.SetCell(0' 5' LocalizedStrings.Str862 + ":")  						.SetCell(1' 5' strategy.Position)    						.SetCell(0' 6' LocalizedStrings.PnL + ":")  						.SetCell(1' 6' strategy.PnL)    						.SetCell(0' 7' LocalizedStrings.Str159 + ":")  						.SetCell(1' 7' strategy.Commission)    						.SetCell(0' 8' LocalizedStrings.Str163 + ":")  						.SetCell(1' 8' strategy.Slippage)    						.SetCell(0' 9' LocalizedStrings.Str161 + ":")  						.SetCell(1' 9' Format(strategy.Latency));    					var rowIndex = 11;    					foreach (var parameter in strategy.StatisticManager.Parameters.SyncGet(c => c.ToArray()))  					{  						var value = parameter.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' parameter.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					rowIndex += 2;  					worker.SetCell(0' rowIndex' LocalizedStrings.Str1340);  					rowIndex++;    					foreach (var strategyParam in strategy.Parameters.CachedValues)  					{  						var value = strategyParam.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' strategyParam.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					//rowIndex += 2;  					//worker.SetCell(0' rowIndex' "Комиссия по типам:");  					//rowIndex++;    					//foreach (var group in Strategy.CommissionManager.Rules.SyncGet(c => c.ToArray()).GroupBy(c => c.GetType().GetDisplayName()))  					//{  					//	var commission = group.Sum(r => r.Commission);    					//	if (commission == 0)  					//		continue;    					//	worker  					//		.SetCell(0' rowIndex' group.Key)  					//		.SetCell(1' rowIndex' commission);    					//	rowIndex++;  					//}    					var columnShift = 3;    					worker  						.SetCell(columnShift + 0' 0' LocalizedStrings.Str985)    						.SetCell(columnShift + 0' 1' LocalizedStrings.Str1192).SetStyle(columnShift + 0' typeof(long))  						.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  						.SetCell(columnShift + 2' 1' LocalizedStrings.Time).SetStyle(columnShift + 2' "HH:mm:ss.fff")  						.SetCell(columnShift + 3' 1' LocalizedStrings.Price).SetStyle(columnShift + 3' typeof(decimal))  						.SetCell(columnShift + 4' 1' LocalizedStrings.Str1341).SetStyle(columnShift + 4' typeof(decimal))  						.SetCell(columnShift + 5' 1' LocalizedStrings.Volume).SetStyle(columnShift + 5' typeof(decimal))  						.SetCell(columnShift + 6' 1' LocalizedStrings.Str128)  						.SetCell(columnShift + 7' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 7' typeof(long))  						.SetCell(columnShift + 8' 1' LocalizedStrings.Str163).SetStyle(columnShift + 8' typeof(decimal))  						.SetCell(columnShift + 9' 1' LocalizedStrings.Str135)  						.SetCell(columnShift + 10' 1' LocalizedStrings.Str1342).SetStyle(columnShift + 11' typeof(decimal))  						.SetCell(columnShift + 11' 1' LocalizedStrings.Str1343).SetStyle(columnShift + 12' typeof(decimal))  						.SetCell(columnShift + 12' 1' LocalizedStrings.Str1344).SetStyle(columnShift + 13' typeof(decimal))  						.SetCell(columnShift + 13' 1' LocalizedStrings.Str1345).SetStyle(columnShift + 14' typeof(decimal))  						.SetCell(columnShift + 14' 1' LocalizedStrings.Str862).SetStyle(columnShift + 15' typeof(decimal));    					worker  						.SetConditionalFormatting(columnShift + 10' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 11' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 12' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 13' ComparisonOperator.Less' "0"' null' Colors.Red);    					var totalPnL = 0m;  					var position = 0m;    					var queues = new Dictionary<Security' PnLQueue>();    					rowIndex = 2;  					foreach (var trade in strategy.MyTrades.ToArray())  					{  						var info = strategy.PnLManager.ProcessMessage(trade.ToMessage());    						totalPnL += info.PnL;  						position += trade.GetPosition() ?? 0;    						var queue = queues.SafeAdd(trade.Trade.Security' key => new PnLQueue(key.ToSecurityId()));    						var localInfo = queue.Process(trade.ToMessage());    						worker  							.SetCell(columnShift + 0' rowIndex' trade.Trade.Id)  							.SetCell(columnShift + 1' rowIndex' trade.Order.TransactionId)  							.SetCell(columnShift + 2' rowIndex' Format(trade.Trade.Time))  							.SetCell(columnShift + 3' rowIndex' trade.Trade.Price)  							.SetCell(columnShift + 4' rowIndex' trade.Order.Price)  							.SetCell(columnShift + 5' rowIndex' trade.Trade.Volume)  							.SetCell(columnShift + 6' rowIndex' Format(trade.Order.Direction))  							.SetCell(columnShift + 7' rowIndex' trade.Order.Id)  							.SetCell(columnShift + 8' rowIndex' trade.Slippage)  							.SetCell(columnShift + 9' rowIndex' trade.Order.Comment)  							.SetCell(columnShift + 10' rowIndex' MathHelper.Round(info.PnL' Decimals))  							.SetCell(columnShift + 11' rowIndex' MathHelper.Round(localInfo.PnL' Decimals))  							.SetCell(columnShift + 12' rowIndex' MathHelper.Round(totalPnL' Decimals))  							.SetCell(columnShift + 13' rowIndex' MathHelper.Round(queue.RealizedPnL' Decimals))  							.SetCell(columnShift + 14' rowIndex' position);    						rowIndex++;  					}    					if (IncludeOrders)  					{  						columnShift += 17;    						worker  							.SetCell(columnShift + 0' 0' LocalizedStrings.Orders)    							.SetCell(columnShift + 0' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  							.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  							.SetCell(columnShift + 2' 1' LocalizedStrings.Str128)  							.SetCell(columnShift + 3' 1' LocalizedStrings.Str1346).SetStyle(columnShift + 3' "HH:mm:ss.fff")  							.SetCell(columnShift + 4' 1' LocalizedStrings.Str1347).SetStyle(columnShift + 4' "HH:mm:ss.fff")  							.SetCell(columnShift + 5' 1' LocalizedStrings.Str1348)  							.SetCell(columnShift + 6' 1' LocalizedStrings.Price).SetStyle(columnShift + 6' typeof(decimal))  							.SetCell(columnShift + 7' 1' LocalizedStrings.Str1323).SetStyle(columnShift + 7' typeof(decimal))  							.SetCell(columnShift + 8' 1' LocalizedStrings.Str1324)  							.SetCell(columnShift + 9' 1' LocalizedStrings.State)  							.SetCell(columnShift + 10' 1' LocalizedStrings.Str1325).SetStyle(columnShift + 10' typeof(decimal))  							.SetCell(columnShift + 11' 1' LocalizedStrings.Volume).SetStyle(columnShift + 11' typeof(decimal))  							.SetCell(columnShift + 12' 1' LocalizedStrings.Type)  							.SetCell(columnShift + 13' 1' LocalizedStrings.Str1326)  							.SetCell(columnShift + 14' 1' LocalizedStrings.Str1327)  							.SetCell(columnShift + 15' 1' LocalizedStrings.Str135);    						worker  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str1329)' null' Colors.Green)  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str238)' null' Colors.Red);    						rowIndex = 2;  						foreach (var order in strategy.Orders.ToArray())  						{  							worker  								.SetCell(columnShift + 0' rowIndex' order.Id)  								.SetCell(columnShift + 1' rowIndex' order.TransactionId)  								.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  								.SetCell(columnShift + 3' rowIndex' Format(order.Time))  								.SetCell(columnShift + 4' rowIndex' Format(order.LastChangeTime))  								.SetCell(columnShift + 5' rowIndex' Format(order.LastChangeTime - order.Time))  								.SetCell(columnShift + 6' rowIndex' order.Price)  								.SetCell(columnShift + 7' rowIndex' MathHelper.Round(order.GetAveragePrice(strategy.Connector)' Decimals))  								.SetCell(columnShift + 8' rowIndex' Format(order.State))  								.SetCell(columnShift + 9' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : LocalizedStrings.Str238))  								.SetCell(columnShift + 10' rowIndex' order.Balance)  								.SetCell(columnShift + 11' rowIndex' order.Volume)  								.SetCell(columnShift + 12' rowIndex' Format(order.Type))  								.SetCell(columnShift + 13' rowIndex' Format(order.LatencyRegistration))  								.SetCell(columnShift + 14' rowIndex' Format(order.LatencyCancellation))  								.SetCell(columnShift + 15' rowIndex' order.Comment);    							rowIndex++;  						}    						var stopOrders = strategy.StopOrders.ToArray();    						if (stopOrders.Length > 0)  						{  							rowIndex += 2;    							worker  								.SetCell(columnShift + 0' rowIndex - 1' LocalizedStrings.Str1351)    								.SetCell(columnShift + 0' rowIndex' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  								.SetCell(columnShift + 1' rowIndex' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  								.SetCell(columnShift + 2' rowIndex' LocalizedStrings.Str128)  								.SetCell(columnShift + 3' rowIndex' LocalizedStrings.Time).SetStyle(columnShift + 3' "HH:mm:ss.fff")  								.SetCell(columnShift + 4' rowIndex' LocalizedStrings.Price).SetStyle(columnShift + 4' typeof(decimal))  								.SetCell(columnShift + 5' rowIndex' LocalizedStrings.Str1324)  								.SetCell(columnShift + 6' rowIndex' LocalizedStrings.State)  								.SetCell(columnShift + 7' rowIndex' LocalizedStrings.Volume).SetStyle(columnShift + 7' typeof(decimal))  								.SetCell(columnShift + 8' rowIndex' LocalizedStrings.Str1326)  								.SetCell(columnShift + 9' rowIndex' LocalizedStrings.Str1327)  								//.SetCell(columnShift + 10' rowIndex' LocalizedStrings.Str1352).SetStyle(columnShift + 9' typeof(long))  								;    							var stopParams = stopOrders[0].Condition.Parameters.Keys.ToArray();    							for (var i = 0; i < stopParams.Length; i++)  								worker.SetCell(columnShift + 11 + i' rowIndex' stopParams[i]);    							foreach (var order in stopOrders)  							{  								worker  									.SetCell(columnShift + 0' rowIndex' order.Id)  									.SetCell(columnShift + 1' rowIndex' order.TransactionId)  									.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  									.SetCell(columnShift + 3' rowIndex' Format(order.Time))  									.SetCell(columnShift + 4' rowIndex' order.Price)  									.SetCell(columnShift + 5' rowIndex' Format(order.State))  									.SetCell(columnShift + 6' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : string.Empty))  									.SetCell(columnShift + 7' rowIndex' order.Volume)  									.SetCell(columnShift + 8' rowIndex' Format(order.LatencyRegistration))  									.SetCell(columnShift + 9' rowIndex' Format(order.LatencyCancellation))  									//.SetCell(columnShift + 10' rowIndex' order.DerivedOrder != null ? (object)order.DerivedOrder.Id : string.Empty)  									;    								for (var i = 0; i < stopParams.Length; i++)  									worker.SetCell(columnShift + 11 + i' rowIndex' order.Condition.Parameters[stopParams[i]] ?? string.Empty);    								rowIndex++;  							}  						}  					}  				}    				worker.Save(FileName' true);  			}
Magic Number,StockSharp.Algo.Strategies.Reporting,ExcelStrategyReport,C:\repos\stocksharp_stocksharp\Algo\Strategies\Reporting\ExcelStrategyReport.cs,Generate,The following statement contains a magic number: using (var worker = hasTemplate ? new ExcelWorker() : new ExcelWorker(Template))  			{  				foreach (var strategy in Strategies)  				{  					if (Template.IsEmpty())  					{  						worker.RenameSheet(strategy.Name);  					}  					else  					{  						if (worker.ContainsSheet(strategy.Name))  							worker.AddSheet(strategy.Name);  					}    					worker  						.SetCell(0' 0' LocalizedStrings.Str1331)    						.SetCell(0' 1' LocalizedStrings.Security + ":")  						.SetCell(1' 1' strategy.Security != null ? strategy.Security.Id : string.Empty)    						.SetCell(0' 2' LocalizedStrings.Portfolio + ":")  						.SetCell(1' 2' strategy.Portfolio != null ? strategy.Portfolio.Name : string.Empty)    						.SetCell(0' 3' LocalizedStrings.Str1334)  						.SetCell(1' 3' Format(strategy.TotalWorkingTime))    						.SetCell(0' 4' LocalizedStrings.Str1335)  						//.SetCell(1' 4' FormatTime(base.Strategy.TotalCPUTime))    						.SetCell(0' 5' LocalizedStrings.Str862 + ":")  						.SetCell(1' 5' strategy.Position)    						.SetCell(0' 6' LocalizedStrings.PnL + ":")  						.SetCell(1' 6' strategy.PnL)    						.SetCell(0' 7' LocalizedStrings.Str159 + ":")  						.SetCell(1' 7' strategy.Commission)    						.SetCell(0' 8' LocalizedStrings.Str163 + ":")  						.SetCell(1' 8' strategy.Slippage)    						.SetCell(0' 9' LocalizedStrings.Str161 + ":")  						.SetCell(1' 9' Format(strategy.Latency));    					var rowIndex = 11;    					foreach (var parameter in strategy.StatisticManager.Parameters.SyncGet(c => c.ToArray()))  					{  						var value = parameter.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' parameter.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					rowIndex += 2;  					worker.SetCell(0' rowIndex' LocalizedStrings.Str1340);  					rowIndex++;    					foreach (var strategyParam in strategy.Parameters.CachedValues)  					{  						var value = strategyParam.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' strategyParam.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					//rowIndex += 2;  					//worker.SetCell(0' rowIndex' "Комиссия по типам:");  					//rowIndex++;    					//foreach (var group in Strategy.CommissionManager.Rules.SyncGet(c => c.ToArray()).GroupBy(c => c.GetType().GetDisplayName()))  					//{  					//	var commission = group.Sum(r => r.Commission);    					//	if (commission == 0)  					//		continue;    					//	worker  					//		.SetCell(0' rowIndex' group.Key)  					//		.SetCell(1' rowIndex' commission);    					//	rowIndex++;  					//}    					var columnShift = 3;    					worker  						.SetCell(columnShift + 0' 0' LocalizedStrings.Str985)    						.SetCell(columnShift + 0' 1' LocalizedStrings.Str1192).SetStyle(columnShift + 0' typeof(long))  						.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  						.SetCell(columnShift + 2' 1' LocalizedStrings.Time).SetStyle(columnShift + 2' "HH:mm:ss.fff")  						.SetCell(columnShift + 3' 1' LocalizedStrings.Price).SetStyle(columnShift + 3' typeof(decimal))  						.SetCell(columnShift + 4' 1' LocalizedStrings.Str1341).SetStyle(columnShift + 4' typeof(decimal))  						.SetCell(columnShift + 5' 1' LocalizedStrings.Volume).SetStyle(columnShift + 5' typeof(decimal))  						.SetCell(columnShift + 6' 1' LocalizedStrings.Str128)  						.SetCell(columnShift + 7' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 7' typeof(long))  						.SetCell(columnShift + 8' 1' LocalizedStrings.Str163).SetStyle(columnShift + 8' typeof(decimal))  						.SetCell(columnShift + 9' 1' LocalizedStrings.Str135)  						.SetCell(columnShift + 10' 1' LocalizedStrings.Str1342).SetStyle(columnShift + 11' typeof(decimal))  						.SetCell(columnShift + 11' 1' LocalizedStrings.Str1343).SetStyle(columnShift + 12' typeof(decimal))  						.SetCell(columnShift + 12' 1' LocalizedStrings.Str1344).SetStyle(columnShift + 13' typeof(decimal))  						.SetCell(columnShift + 13' 1' LocalizedStrings.Str1345).SetStyle(columnShift + 14' typeof(decimal))  						.SetCell(columnShift + 14' 1' LocalizedStrings.Str862).SetStyle(columnShift + 15' typeof(decimal));    					worker  						.SetConditionalFormatting(columnShift + 10' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 11' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 12' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 13' ComparisonOperator.Less' "0"' null' Colors.Red);    					var totalPnL = 0m;  					var position = 0m;    					var queues = new Dictionary<Security' PnLQueue>();    					rowIndex = 2;  					foreach (var trade in strategy.MyTrades.ToArray())  					{  						var info = strategy.PnLManager.ProcessMessage(trade.ToMessage());    						totalPnL += info.PnL;  						position += trade.GetPosition() ?? 0;    						var queue = queues.SafeAdd(trade.Trade.Security' key => new PnLQueue(key.ToSecurityId()));    						var localInfo = queue.Process(trade.ToMessage());    						worker  							.SetCell(columnShift + 0' rowIndex' trade.Trade.Id)  							.SetCell(columnShift + 1' rowIndex' trade.Order.TransactionId)  							.SetCell(columnShift + 2' rowIndex' Format(trade.Trade.Time))  							.SetCell(columnShift + 3' rowIndex' trade.Trade.Price)  							.SetCell(columnShift + 4' rowIndex' trade.Order.Price)  							.SetCell(columnShift + 5' rowIndex' trade.Trade.Volume)  							.SetCell(columnShift + 6' rowIndex' Format(trade.Order.Direction))  							.SetCell(columnShift + 7' rowIndex' trade.Order.Id)  							.SetCell(columnShift + 8' rowIndex' trade.Slippage)  							.SetCell(columnShift + 9' rowIndex' trade.Order.Comment)  							.SetCell(columnShift + 10' rowIndex' MathHelper.Round(info.PnL' Decimals))  							.SetCell(columnShift + 11' rowIndex' MathHelper.Round(localInfo.PnL' Decimals))  							.SetCell(columnShift + 12' rowIndex' MathHelper.Round(totalPnL' Decimals))  							.SetCell(columnShift + 13' rowIndex' MathHelper.Round(queue.RealizedPnL' Decimals))  							.SetCell(columnShift + 14' rowIndex' position);    						rowIndex++;  					}    					if (IncludeOrders)  					{  						columnShift += 17;    						worker  							.SetCell(columnShift + 0' 0' LocalizedStrings.Orders)    							.SetCell(columnShift + 0' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  							.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  							.SetCell(columnShift + 2' 1' LocalizedStrings.Str128)  							.SetCell(columnShift + 3' 1' LocalizedStrings.Str1346).SetStyle(columnShift + 3' "HH:mm:ss.fff")  							.SetCell(columnShift + 4' 1' LocalizedStrings.Str1347).SetStyle(columnShift + 4' "HH:mm:ss.fff")  							.SetCell(columnShift + 5' 1' LocalizedStrings.Str1348)  							.SetCell(columnShift + 6' 1' LocalizedStrings.Price).SetStyle(columnShift + 6' typeof(decimal))  							.SetCell(columnShift + 7' 1' LocalizedStrings.Str1323).SetStyle(columnShift + 7' typeof(decimal))  							.SetCell(columnShift + 8' 1' LocalizedStrings.Str1324)  							.SetCell(columnShift + 9' 1' LocalizedStrings.State)  							.SetCell(columnShift + 10' 1' LocalizedStrings.Str1325).SetStyle(columnShift + 10' typeof(decimal))  							.SetCell(columnShift + 11' 1' LocalizedStrings.Volume).SetStyle(columnShift + 11' typeof(decimal))  							.SetCell(columnShift + 12' 1' LocalizedStrings.Type)  							.SetCell(columnShift + 13' 1' LocalizedStrings.Str1326)  							.SetCell(columnShift + 14' 1' LocalizedStrings.Str1327)  							.SetCell(columnShift + 15' 1' LocalizedStrings.Str135);    						worker  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str1329)' null' Colors.Green)  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str238)' null' Colors.Red);    						rowIndex = 2;  						foreach (var order in strategy.Orders.ToArray())  						{  							worker  								.SetCell(columnShift + 0' rowIndex' order.Id)  								.SetCell(columnShift + 1' rowIndex' order.TransactionId)  								.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  								.SetCell(columnShift + 3' rowIndex' Format(order.Time))  								.SetCell(columnShift + 4' rowIndex' Format(order.LastChangeTime))  								.SetCell(columnShift + 5' rowIndex' Format(order.LastChangeTime - order.Time))  								.SetCell(columnShift + 6' rowIndex' order.Price)  								.SetCell(columnShift + 7' rowIndex' MathHelper.Round(order.GetAveragePrice(strategy.Connector)' Decimals))  								.SetCell(columnShift + 8' rowIndex' Format(order.State))  								.SetCell(columnShift + 9' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : LocalizedStrings.Str238))  								.SetCell(columnShift + 10' rowIndex' order.Balance)  								.SetCell(columnShift + 11' rowIndex' order.Volume)  								.SetCell(columnShift + 12' rowIndex' Format(order.Type))  								.SetCell(columnShift + 13' rowIndex' Format(order.LatencyRegistration))  								.SetCell(columnShift + 14' rowIndex' Format(order.LatencyCancellation))  								.SetCell(columnShift + 15' rowIndex' order.Comment);    							rowIndex++;  						}    						var stopOrders = strategy.StopOrders.ToArray();    						if (stopOrders.Length > 0)  						{  							rowIndex += 2;    							worker  								.SetCell(columnShift + 0' rowIndex - 1' LocalizedStrings.Str1351)    								.SetCell(columnShift + 0' rowIndex' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  								.SetCell(columnShift + 1' rowIndex' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  								.SetCell(columnShift + 2' rowIndex' LocalizedStrings.Str128)  								.SetCell(columnShift + 3' rowIndex' LocalizedStrings.Time).SetStyle(columnShift + 3' "HH:mm:ss.fff")  								.SetCell(columnShift + 4' rowIndex' LocalizedStrings.Price).SetStyle(columnShift + 4' typeof(decimal))  								.SetCell(columnShift + 5' rowIndex' LocalizedStrings.Str1324)  								.SetCell(columnShift + 6' rowIndex' LocalizedStrings.State)  								.SetCell(columnShift + 7' rowIndex' LocalizedStrings.Volume).SetStyle(columnShift + 7' typeof(decimal))  								.SetCell(columnShift + 8' rowIndex' LocalizedStrings.Str1326)  								.SetCell(columnShift + 9' rowIndex' LocalizedStrings.Str1327)  								//.SetCell(columnShift + 10' rowIndex' LocalizedStrings.Str1352).SetStyle(columnShift + 9' typeof(long))  								;    							var stopParams = stopOrders[0].Condition.Parameters.Keys.ToArray();    							for (var i = 0; i < stopParams.Length; i++)  								worker.SetCell(columnShift + 11 + i' rowIndex' stopParams[i]);    							foreach (var order in stopOrders)  							{  								worker  									.SetCell(columnShift + 0' rowIndex' order.Id)  									.SetCell(columnShift + 1' rowIndex' order.TransactionId)  									.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  									.SetCell(columnShift + 3' rowIndex' Format(order.Time))  									.SetCell(columnShift + 4' rowIndex' order.Price)  									.SetCell(columnShift + 5' rowIndex' Format(order.State))  									.SetCell(columnShift + 6' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : string.Empty))  									.SetCell(columnShift + 7' rowIndex' order.Volume)  									.SetCell(columnShift + 8' rowIndex' Format(order.LatencyRegistration))  									.SetCell(columnShift + 9' rowIndex' Format(order.LatencyCancellation))  									//.SetCell(columnShift + 10' rowIndex' order.DerivedOrder != null ? (object)order.DerivedOrder.Id : string.Empty)  									;    								for (var i = 0; i < stopParams.Length; i++)  									worker.SetCell(columnShift + 11 + i' rowIndex' order.Condition.Parameters[stopParams[i]] ?? string.Empty);    								rowIndex++;  							}  						}  					}  				}    				worker.Save(FileName' true);  			}
Magic Number,StockSharp.Algo.Strategies.Reporting,ExcelStrategyReport,C:\repos\stocksharp_stocksharp\Algo\Strategies\Reporting\ExcelStrategyReport.cs,Generate,The following statement contains a magic number: using (var worker = hasTemplate ? new ExcelWorker() : new ExcelWorker(Template))  			{  				foreach (var strategy in Strategies)  				{  					if (Template.IsEmpty())  					{  						worker.RenameSheet(strategy.Name);  					}  					else  					{  						if (worker.ContainsSheet(strategy.Name))  							worker.AddSheet(strategy.Name);  					}    					worker  						.SetCell(0' 0' LocalizedStrings.Str1331)    						.SetCell(0' 1' LocalizedStrings.Security + ":")  						.SetCell(1' 1' strategy.Security != null ? strategy.Security.Id : string.Empty)    						.SetCell(0' 2' LocalizedStrings.Portfolio + ":")  						.SetCell(1' 2' strategy.Portfolio != null ? strategy.Portfolio.Name : string.Empty)    						.SetCell(0' 3' LocalizedStrings.Str1334)  						.SetCell(1' 3' Format(strategy.TotalWorkingTime))    						.SetCell(0' 4' LocalizedStrings.Str1335)  						//.SetCell(1' 4' FormatTime(base.Strategy.TotalCPUTime))    						.SetCell(0' 5' LocalizedStrings.Str862 + ":")  						.SetCell(1' 5' strategy.Position)    						.SetCell(0' 6' LocalizedStrings.PnL + ":")  						.SetCell(1' 6' strategy.PnL)    						.SetCell(0' 7' LocalizedStrings.Str159 + ":")  						.SetCell(1' 7' strategy.Commission)    						.SetCell(0' 8' LocalizedStrings.Str163 + ":")  						.SetCell(1' 8' strategy.Slippage)    						.SetCell(0' 9' LocalizedStrings.Str161 + ":")  						.SetCell(1' 9' Format(strategy.Latency));    					var rowIndex = 11;    					foreach (var parameter in strategy.StatisticManager.Parameters.SyncGet(c => c.ToArray()))  					{  						var value = parameter.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' parameter.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					rowIndex += 2;  					worker.SetCell(0' rowIndex' LocalizedStrings.Str1340);  					rowIndex++;    					foreach (var strategyParam in strategy.Parameters.CachedValues)  					{  						var value = strategyParam.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' strategyParam.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					//rowIndex += 2;  					//worker.SetCell(0' rowIndex' "Комиссия по типам:");  					//rowIndex++;    					//foreach (var group in Strategy.CommissionManager.Rules.SyncGet(c => c.ToArray()).GroupBy(c => c.GetType().GetDisplayName()))  					//{  					//	var commission = group.Sum(r => r.Commission);    					//	if (commission == 0)  					//		continue;    					//	worker  					//		.SetCell(0' rowIndex' group.Key)  					//		.SetCell(1' rowIndex' commission);    					//	rowIndex++;  					//}    					var columnShift = 3;    					worker  						.SetCell(columnShift + 0' 0' LocalizedStrings.Str985)    						.SetCell(columnShift + 0' 1' LocalizedStrings.Str1192).SetStyle(columnShift + 0' typeof(long))  						.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  						.SetCell(columnShift + 2' 1' LocalizedStrings.Time).SetStyle(columnShift + 2' "HH:mm:ss.fff")  						.SetCell(columnShift + 3' 1' LocalizedStrings.Price).SetStyle(columnShift + 3' typeof(decimal))  						.SetCell(columnShift + 4' 1' LocalizedStrings.Str1341).SetStyle(columnShift + 4' typeof(decimal))  						.SetCell(columnShift + 5' 1' LocalizedStrings.Volume).SetStyle(columnShift + 5' typeof(decimal))  						.SetCell(columnShift + 6' 1' LocalizedStrings.Str128)  						.SetCell(columnShift + 7' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 7' typeof(long))  						.SetCell(columnShift + 8' 1' LocalizedStrings.Str163).SetStyle(columnShift + 8' typeof(decimal))  						.SetCell(columnShift + 9' 1' LocalizedStrings.Str135)  						.SetCell(columnShift + 10' 1' LocalizedStrings.Str1342).SetStyle(columnShift + 11' typeof(decimal))  						.SetCell(columnShift + 11' 1' LocalizedStrings.Str1343).SetStyle(columnShift + 12' typeof(decimal))  						.SetCell(columnShift + 12' 1' LocalizedStrings.Str1344).SetStyle(columnShift + 13' typeof(decimal))  						.SetCell(columnShift + 13' 1' LocalizedStrings.Str1345).SetStyle(columnShift + 14' typeof(decimal))  						.SetCell(columnShift + 14' 1' LocalizedStrings.Str862).SetStyle(columnShift + 15' typeof(decimal));    					worker  						.SetConditionalFormatting(columnShift + 10' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 11' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 12' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 13' ComparisonOperator.Less' "0"' null' Colors.Red);    					var totalPnL = 0m;  					var position = 0m;    					var queues = new Dictionary<Security' PnLQueue>();    					rowIndex = 2;  					foreach (var trade in strategy.MyTrades.ToArray())  					{  						var info = strategy.PnLManager.ProcessMessage(trade.ToMessage());    						totalPnL += info.PnL;  						position += trade.GetPosition() ?? 0;    						var queue = queues.SafeAdd(trade.Trade.Security' key => new PnLQueue(key.ToSecurityId()));    						var localInfo = queue.Process(trade.ToMessage());    						worker  							.SetCell(columnShift + 0' rowIndex' trade.Trade.Id)  							.SetCell(columnShift + 1' rowIndex' trade.Order.TransactionId)  							.SetCell(columnShift + 2' rowIndex' Format(trade.Trade.Time))  							.SetCell(columnShift + 3' rowIndex' trade.Trade.Price)  							.SetCell(columnShift + 4' rowIndex' trade.Order.Price)  							.SetCell(columnShift + 5' rowIndex' trade.Trade.Volume)  							.SetCell(columnShift + 6' rowIndex' Format(trade.Order.Direction))  							.SetCell(columnShift + 7' rowIndex' trade.Order.Id)  							.SetCell(columnShift + 8' rowIndex' trade.Slippage)  							.SetCell(columnShift + 9' rowIndex' trade.Order.Comment)  							.SetCell(columnShift + 10' rowIndex' MathHelper.Round(info.PnL' Decimals))  							.SetCell(columnShift + 11' rowIndex' MathHelper.Round(localInfo.PnL' Decimals))  							.SetCell(columnShift + 12' rowIndex' MathHelper.Round(totalPnL' Decimals))  							.SetCell(columnShift + 13' rowIndex' MathHelper.Round(queue.RealizedPnL' Decimals))  							.SetCell(columnShift + 14' rowIndex' position);    						rowIndex++;  					}    					if (IncludeOrders)  					{  						columnShift += 17;    						worker  							.SetCell(columnShift + 0' 0' LocalizedStrings.Orders)    							.SetCell(columnShift + 0' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  							.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  							.SetCell(columnShift + 2' 1' LocalizedStrings.Str128)  							.SetCell(columnShift + 3' 1' LocalizedStrings.Str1346).SetStyle(columnShift + 3' "HH:mm:ss.fff")  							.SetCell(columnShift + 4' 1' LocalizedStrings.Str1347).SetStyle(columnShift + 4' "HH:mm:ss.fff")  							.SetCell(columnShift + 5' 1' LocalizedStrings.Str1348)  							.SetCell(columnShift + 6' 1' LocalizedStrings.Price).SetStyle(columnShift + 6' typeof(decimal))  							.SetCell(columnShift + 7' 1' LocalizedStrings.Str1323).SetStyle(columnShift + 7' typeof(decimal))  							.SetCell(columnShift + 8' 1' LocalizedStrings.Str1324)  							.SetCell(columnShift + 9' 1' LocalizedStrings.State)  							.SetCell(columnShift + 10' 1' LocalizedStrings.Str1325).SetStyle(columnShift + 10' typeof(decimal))  							.SetCell(columnShift + 11' 1' LocalizedStrings.Volume).SetStyle(columnShift + 11' typeof(decimal))  							.SetCell(columnShift + 12' 1' LocalizedStrings.Type)  							.SetCell(columnShift + 13' 1' LocalizedStrings.Str1326)  							.SetCell(columnShift + 14' 1' LocalizedStrings.Str1327)  							.SetCell(columnShift + 15' 1' LocalizedStrings.Str135);    						worker  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str1329)' null' Colors.Green)  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str238)' null' Colors.Red);    						rowIndex = 2;  						foreach (var order in strategy.Orders.ToArray())  						{  							worker  								.SetCell(columnShift + 0' rowIndex' order.Id)  								.SetCell(columnShift + 1' rowIndex' order.TransactionId)  								.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  								.SetCell(columnShift + 3' rowIndex' Format(order.Time))  								.SetCell(columnShift + 4' rowIndex' Format(order.LastChangeTime))  								.SetCell(columnShift + 5' rowIndex' Format(order.LastChangeTime - order.Time))  								.SetCell(columnShift + 6' rowIndex' order.Price)  								.SetCell(columnShift + 7' rowIndex' MathHelper.Round(order.GetAveragePrice(strategy.Connector)' Decimals))  								.SetCell(columnShift + 8' rowIndex' Format(order.State))  								.SetCell(columnShift + 9' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : LocalizedStrings.Str238))  								.SetCell(columnShift + 10' rowIndex' order.Balance)  								.SetCell(columnShift + 11' rowIndex' order.Volume)  								.SetCell(columnShift + 12' rowIndex' Format(order.Type))  								.SetCell(columnShift + 13' rowIndex' Format(order.LatencyRegistration))  								.SetCell(columnShift + 14' rowIndex' Format(order.LatencyCancellation))  								.SetCell(columnShift + 15' rowIndex' order.Comment);    							rowIndex++;  						}    						var stopOrders = strategy.StopOrders.ToArray();    						if (stopOrders.Length > 0)  						{  							rowIndex += 2;    							worker  								.SetCell(columnShift + 0' rowIndex - 1' LocalizedStrings.Str1351)    								.SetCell(columnShift + 0' rowIndex' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  								.SetCell(columnShift + 1' rowIndex' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  								.SetCell(columnShift + 2' rowIndex' LocalizedStrings.Str128)  								.SetCell(columnShift + 3' rowIndex' LocalizedStrings.Time).SetStyle(columnShift + 3' "HH:mm:ss.fff")  								.SetCell(columnShift + 4' rowIndex' LocalizedStrings.Price).SetStyle(columnShift + 4' typeof(decimal))  								.SetCell(columnShift + 5' rowIndex' LocalizedStrings.Str1324)  								.SetCell(columnShift + 6' rowIndex' LocalizedStrings.State)  								.SetCell(columnShift + 7' rowIndex' LocalizedStrings.Volume).SetStyle(columnShift + 7' typeof(decimal))  								.SetCell(columnShift + 8' rowIndex' LocalizedStrings.Str1326)  								.SetCell(columnShift + 9' rowIndex' LocalizedStrings.Str1327)  								//.SetCell(columnShift + 10' rowIndex' LocalizedStrings.Str1352).SetStyle(columnShift + 9' typeof(long))  								;    							var stopParams = stopOrders[0].Condition.Parameters.Keys.ToArray();    							for (var i = 0; i < stopParams.Length; i++)  								worker.SetCell(columnShift + 11 + i' rowIndex' stopParams[i]);    							foreach (var order in stopOrders)  							{  								worker  									.SetCell(columnShift + 0' rowIndex' order.Id)  									.SetCell(columnShift + 1' rowIndex' order.TransactionId)  									.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  									.SetCell(columnShift + 3' rowIndex' Format(order.Time))  									.SetCell(columnShift + 4' rowIndex' order.Price)  									.SetCell(columnShift + 5' rowIndex' Format(order.State))  									.SetCell(columnShift + 6' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : string.Empty))  									.SetCell(columnShift + 7' rowIndex' order.Volume)  									.SetCell(columnShift + 8' rowIndex' Format(order.LatencyRegistration))  									.SetCell(columnShift + 9' rowIndex' Format(order.LatencyCancellation))  									//.SetCell(columnShift + 10' rowIndex' order.DerivedOrder != null ? (object)order.DerivedOrder.Id : string.Empty)  									;    								for (var i = 0; i < stopParams.Length; i++)  									worker.SetCell(columnShift + 11 + i' rowIndex' order.Condition.Parameters[stopParams[i]] ?? string.Empty);    								rowIndex++;  							}  						}  					}  				}    				worker.Save(FileName' true);  			}
Magic Number,StockSharp.Algo.Strategies.Reporting,ExcelStrategyReport,C:\repos\stocksharp_stocksharp\Algo\Strategies\Reporting\ExcelStrategyReport.cs,Generate,The following statement contains a magic number: using (var worker = hasTemplate ? new ExcelWorker() : new ExcelWorker(Template))  			{  				foreach (var strategy in Strategies)  				{  					if (Template.IsEmpty())  					{  						worker.RenameSheet(strategy.Name);  					}  					else  					{  						if (worker.ContainsSheet(strategy.Name))  							worker.AddSheet(strategy.Name);  					}    					worker  						.SetCell(0' 0' LocalizedStrings.Str1331)    						.SetCell(0' 1' LocalizedStrings.Security + ":")  						.SetCell(1' 1' strategy.Security != null ? strategy.Security.Id : string.Empty)    						.SetCell(0' 2' LocalizedStrings.Portfolio + ":")  						.SetCell(1' 2' strategy.Portfolio != null ? strategy.Portfolio.Name : string.Empty)    						.SetCell(0' 3' LocalizedStrings.Str1334)  						.SetCell(1' 3' Format(strategy.TotalWorkingTime))    						.SetCell(0' 4' LocalizedStrings.Str1335)  						//.SetCell(1' 4' FormatTime(base.Strategy.TotalCPUTime))    						.SetCell(0' 5' LocalizedStrings.Str862 + ":")  						.SetCell(1' 5' strategy.Position)    						.SetCell(0' 6' LocalizedStrings.PnL + ":")  						.SetCell(1' 6' strategy.PnL)    						.SetCell(0' 7' LocalizedStrings.Str159 + ":")  						.SetCell(1' 7' strategy.Commission)    						.SetCell(0' 8' LocalizedStrings.Str163 + ":")  						.SetCell(1' 8' strategy.Slippage)    						.SetCell(0' 9' LocalizedStrings.Str161 + ":")  						.SetCell(1' 9' Format(strategy.Latency));    					var rowIndex = 11;    					foreach (var parameter in strategy.StatisticManager.Parameters.SyncGet(c => c.ToArray()))  					{  						var value = parameter.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' parameter.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					rowIndex += 2;  					worker.SetCell(0' rowIndex' LocalizedStrings.Str1340);  					rowIndex++;    					foreach (var strategyParam in strategy.Parameters.CachedValues)  					{  						var value = strategyParam.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' strategyParam.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					//rowIndex += 2;  					//worker.SetCell(0' rowIndex' "Комиссия по типам:");  					//rowIndex++;    					//foreach (var group in Strategy.CommissionManager.Rules.SyncGet(c => c.ToArray()).GroupBy(c => c.GetType().GetDisplayName()))  					//{  					//	var commission = group.Sum(r => r.Commission);    					//	if (commission == 0)  					//		continue;    					//	worker  					//		.SetCell(0' rowIndex' group.Key)  					//		.SetCell(1' rowIndex' commission);    					//	rowIndex++;  					//}    					var columnShift = 3;    					worker  						.SetCell(columnShift + 0' 0' LocalizedStrings.Str985)    						.SetCell(columnShift + 0' 1' LocalizedStrings.Str1192).SetStyle(columnShift + 0' typeof(long))  						.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  						.SetCell(columnShift + 2' 1' LocalizedStrings.Time).SetStyle(columnShift + 2' "HH:mm:ss.fff")  						.SetCell(columnShift + 3' 1' LocalizedStrings.Price).SetStyle(columnShift + 3' typeof(decimal))  						.SetCell(columnShift + 4' 1' LocalizedStrings.Str1341).SetStyle(columnShift + 4' typeof(decimal))  						.SetCell(columnShift + 5' 1' LocalizedStrings.Volume).SetStyle(columnShift + 5' typeof(decimal))  						.SetCell(columnShift + 6' 1' LocalizedStrings.Str128)  						.SetCell(columnShift + 7' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 7' typeof(long))  						.SetCell(columnShift + 8' 1' LocalizedStrings.Str163).SetStyle(columnShift + 8' typeof(decimal))  						.SetCell(columnShift + 9' 1' LocalizedStrings.Str135)  						.SetCell(columnShift + 10' 1' LocalizedStrings.Str1342).SetStyle(columnShift + 11' typeof(decimal))  						.SetCell(columnShift + 11' 1' LocalizedStrings.Str1343).SetStyle(columnShift + 12' typeof(decimal))  						.SetCell(columnShift + 12' 1' LocalizedStrings.Str1344).SetStyle(columnShift + 13' typeof(decimal))  						.SetCell(columnShift + 13' 1' LocalizedStrings.Str1345).SetStyle(columnShift + 14' typeof(decimal))  						.SetCell(columnShift + 14' 1' LocalizedStrings.Str862).SetStyle(columnShift + 15' typeof(decimal));    					worker  						.SetConditionalFormatting(columnShift + 10' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 11' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 12' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 13' ComparisonOperator.Less' "0"' null' Colors.Red);    					var totalPnL = 0m;  					var position = 0m;    					var queues = new Dictionary<Security' PnLQueue>();    					rowIndex = 2;  					foreach (var trade in strategy.MyTrades.ToArray())  					{  						var info = strategy.PnLManager.ProcessMessage(trade.ToMessage());    						totalPnL += info.PnL;  						position += trade.GetPosition() ?? 0;    						var queue = queues.SafeAdd(trade.Trade.Security' key => new PnLQueue(key.ToSecurityId()));    						var localInfo = queue.Process(trade.ToMessage());    						worker  							.SetCell(columnShift + 0' rowIndex' trade.Trade.Id)  							.SetCell(columnShift + 1' rowIndex' trade.Order.TransactionId)  							.SetCell(columnShift + 2' rowIndex' Format(trade.Trade.Time))  							.SetCell(columnShift + 3' rowIndex' trade.Trade.Price)  							.SetCell(columnShift + 4' rowIndex' trade.Order.Price)  							.SetCell(columnShift + 5' rowIndex' trade.Trade.Volume)  							.SetCell(columnShift + 6' rowIndex' Format(trade.Order.Direction))  							.SetCell(columnShift + 7' rowIndex' trade.Order.Id)  							.SetCell(columnShift + 8' rowIndex' trade.Slippage)  							.SetCell(columnShift + 9' rowIndex' trade.Order.Comment)  							.SetCell(columnShift + 10' rowIndex' MathHelper.Round(info.PnL' Decimals))  							.SetCell(columnShift + 11' rowIndex' MathHelper.Round(localInfo.PnL' Decimals))  							.SetCell(columnShift + 12' rowIndex' MathHelper.Round(totalPnL' Decimals))  							.SetCell(columnShift + 13' rowIndex' MathHelper.Round(queue.RealizedPnL' Decimals))  							.SetCell(columnShift + 14' rowIndex' position);    						rowIndex++;  					}    					if (IncludeOrders)  					{  						columnShift += 17;    						worker  							.SetCell(columnShift + 0' 0' LocalizedStrings.Orders)    							.SetCell(columnShift + 0' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  							.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  							.SetCell(columnShift + 2' 1' LocalizedStrings.Str128)  							.SetCell(columnShift + 3' 1' LocalizedStrings.Str1346).SetStyle(columnShift + 3' "HH:mm:ss.fff")  							.SetCell(columnShift + 4' 1' LocalizedStrings.Str1347).SetStyle(columnShift + 4' "HH:mm:ss.fff")  							.SetCell(columnShift + 5' 1' LocalizedStrings.Str1348)  							.SetCell(columnShift + 6' 1' LocalizedStrings.Price).SetStyle(columnShift + 6' typeof(decimal))  							.SetCell(columnShift + 7' 1' LocalizedStrings.Str1323).SetStyle(columnShift + 7' typeof(decimal))  							.SetCell(columnShift + 8' 1' LocalizedStrings.Str1324)  							.SetCell(columnShift + 9' 1' LocalizedStrings.State)  							.SetCell(columnShift + 10' 1' LocalizedStrings.Str1325).SetStyle(columnShift + 10' typeof(decimal))  							.SetCell(columnShift + 11' 1' LocalizedStrings.Volume).SetStyle(columnShift + 11' typeof(decimal))  							.SetCell(columnShift + 12' 1' LocalizedStrings.Type)  							.SetCell(columnShift + 13' 1' LocalizedStrings.Str1326)  							.SetCell(columnShift + 14' 1' LocalizedStrings.Str1327)  							.SetCell(columnShift + 15' 1' LocalizedStrings.Str135);    						worker  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str1329)' null' Colors.Green)  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str238)' null' Colors.Red);    						rowIndex = 2;  						foreach (var order in strategy.Orders.ToArray())  						{  							worker  								.SetCell(columnShift + 0' rowIndex' order.Id)  								.SetCell(columnShift + 1' rowIndex' order.TransactionId)  								.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  								.SetCell(columnShift + 3' rowIndex' Format(order.Time))  								.SetCell(columnShift + 4' rowIndex' Format(order.LastChangeTime))  								.SetCell(columnShift + 5' rowIndex' Format(order.LastChangeTime - order.Time))  								.SetCell(columnShift + 6' rowIndex' order.Price)  								.SetCell(columnShift + 7' rowIndex' MathHelper.Round(order.GetAveragePrice(strategy.Connector)' Decimals))  								.SetCell(columnShift + 8' rowIndex' Format(order.State))  								.SetCell(columnShift + 9' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : LocalizedStrings.Str238))  								.SetCell(columnShift + 10' rowIndex' order.Balance)  								.SetCell(columnShift + 11' rowIndex' order.Volume)  								.SetCell(columnShift + 12' rowIndex' Format(order.Type))  								.SetCell(columnShift + 13' rowIndex' Format(order.LatencyRegistration))  								.SetCell(columnShift + 14' rowIndex' Format(order.LatencyCancellation))  								.SetCell(columnShift + 15' rowIndex' order.Comment);    							rowIndex++;  						}    						var stopOrders = strategy.StopOrders.ToArray();    						if (stopOrders.Length > 0)  						{  							rowIndex += 2;    							worker  								.SetCell(columnShift + 0' rowIndex - 1' LocalizedStrings.Str1351)    								.SetCell(columnShift + 0' rowIndex' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  								.SetCell(columnShift + 1' rowIndex' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  								.SetCell(columnShift + 2' rowIndex' LocalizedStrings.Str128)  								.SetCell(columnShift + 3' rowIndex' LocalizedStrings.Time).SetStyle(columnShift + 3' "HH:mm:ss.fff")  								.SetCell(columnShift + 4' rowIndex' LocalizedStrings.Price).SetStyle(columnShift + 4' typeof(decimal))  								.SetCell(columnShift + 5' rowIndex' LocalizedStrings.Str1324)  								.SetCell(columnShift + 6' rowIndex' LocalizedStrings.State)  								.SetCell(columnShift + 7' rowIndex' LocalizedStrings.Volume).SetStyle(columnShift + 7' typeof(decimal))  								.SetCell(columnShift + 8' rowIndex' LocalizedStrings.Str1326)  								.SetCell(columnShift + 9' rowIndex' LocalizedStrings.Str1327)  								//.SetCell(columnShift + 10' rowIndex' LocalizedStrings.Str1352).SetStyle(columnShift + 9' typeof(long))  								;    							var stopParams = stopOrders[0].Condition.Parameters.Keys.ToArray();    							for (var i = 0; i < stopParams.Length; i++)  								worker.SetCell(columnShift + 11 + i' rowIndex' stopParams[i]);    							foreach (var order in stopOrders)  							{  								worker  									.SetCell(columnShift + 0' rowIndex' order.Id)  									.SetCell(columnShift + 1' rowIndex' order.TransactionId)  									.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  									.SetCell(columnShift + 3' rowIndex' Format(order.Time))  									.SetCell(columnShift + 4' rowIndex' order.Price)  									.SetCell(columnShift + 5' rowIndex' Format(order.State))  									.SetCell(columnShift + 6' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : string.Empty))  									.SetCell(columnShift + 7' rowIndex' order.Volume)  									.SetCell(columnShift + 8' rowIndex' Format(order.LatencyRegistration))  									.SetCell(columnShift + 9' rowIndex' Format(order.LatencyCancellation))  									//.SetCell(columnShift + 10' rowIndex' order.DerivedOrder != null ? (object)order.DerivedOrder.Id : string.Empty)  									;    								for (var i = 0; i < stopParams.Length; i++)  									worker.SetCell(columnShift + 11 + i' rowIndex' order.Condition.Parameters[stopParams[i]] ?? string.Empty);    								rowIndex++;  							}  						}  					}  				}    				worker.Save(FileName' true);  			}
Magic Number,StockSharp.Algo.Strategies.Reporting,ExcelStrategyReport,C:\repos\stocksharp_stocksharp\Algo\Strategies\Reporting\ExcelStrategyReport.cs,Generate,The following statement contains a magic number: using (var worker = hasTemplate ? new ExcelWorker() : new ExcelWorker(Template))  			{  				foreach (var strategy in Strategies)  				{  					if (Template.IsEmpty())  					{  						worker.RenameSheet(strategy.Name);  					}  					else  					{  						if (worker.ContainsSheet(strategy.Name))  							worker.AddSheet(strategy.Name);  					}    					worker  						.SetCell(0' 0' LocalizedStrings.Str1331)    						.SetCell(0' 1' LocalizedStrings.Security + ":")  						.SetCell(1' 1' strategy.Security != null ? strategy.Security.Id : string.Empty)    						.SetCell(0' 2' LocalizedStrings.Portfolio + ":")  						.SetCell(1' 2' strategy.Portfolio != null ? strategy.Portfolio.Name : string.Empty)    						.SetCell(0' 3' LocalizedStrings.Str1334)  						.SetCell(1' 3' Format(strategy.TotalWorkingTime))    						.SetCell(0' 4' LocalizedStrings.Str1335)  						//.SetCell(1' 4' FormatTime(base.Strategy.TotalCPUTime))    						.SetCell(0' 5' LocalizedStrings.Str862 + ":")  						.SetCell(1' 5' strategy.Position)    						.SetCell(0' 6' LocalizedStrings.PnL + ":")  						.SetCell(1' 6' strategy.PnL)    						.SetCell(0' 7' LocalizedStrings.Str159 + ":")  						.SetCell(1' 7' strategy.Commission)    						.SetCell(0' 8' LocalizedStrings.Str163 + ":")  						.SetCell(1' 8' strategy.Slippage)    						.SetCell(0' 9' LocalizedStrings.Str161 + ":")  						.SetCell(1' 9' Format(strategy.Latency));    					var rowIndex = 11;    					foreach (var parameter in strategy.StatisticManager.Parameters.SyncGet(c => c.ToArray()))  					{  						var value = parameter.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' parameter.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					rowIndex += 2;  					worker.SetCell(0' rowIndex' LocalizedStrings.Str1340);  					rowIndex++;    					foreach (var strategyParam in strategy.Parameters.CachedValues)  					{  						var value = strategyParam.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' strategyParam.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					//rowIndex += 2;  					//worker.SetCell(0' rowIndex' "Комиссия по типам:");  					//rowIndex++;    					//foreach (var group in Strategy.CommissionManager.Rules.SyncGet(c => c.ToArray()).GroupBy(c => c.GetType().GetDisplayName()))  					//{  					//	var commission = group.Sum(r => r.Commission);    					//	if (commission == 0)  					//		continue;    					//	worker  					//		.SetCell(0' rowIndex' group.Key)  					//		.SetCell(1' rowIndex' commission);    					//	rowIndex++;  					//}    					var columnShift = 3;    					worker  						.SetCell(columnShift + 0' 0' LocalizedStrings.Str985)    						.SetCell(columnShift + 0' 1' LocalizedStrings.Str1192).SetStyle(columnShift + 0' typeof(long))  						.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  						.SetCell(columnShift + 2' 1' LocalizedStrings.Time).SetStyle(columnShift + 2' "HH:mm:ss.fff")  						.SetCell(columnShift + 3' 1' LocalizedStrings.Price).SetStyle(columnShift + 3' typeof(decimal))  						.SetCell(columnShift + 4' 1' LocalizedStrings.Str1341).SetStyle(columnShift + 4' typeof(decimal))  						.SetCell(columnShift + 5' 1' LocalizedStrings.Volume).SetStyle(columnShift + 5' typeof(decimal))  						.SetCell(columnShift + 6' 1' LocalizedStrings.Str128)  						.SetCell(columnShift + 7' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 7' typeof(long))  						.SetCell(columnShift + 8' 1' LocalizedStrings.Str163).SetStyle(columnShift + 8' typeof(decimal))  						.SetCell(columnShift + 9' 1' LocalizedStrings.Str135)  						.SetCell(columnShift + 10' 1' LocalizedStrings.Str1342).SetStyle(columnShift + 11' typeof(decimal))  						.SetCell(columnShift + 11' 1' LocalizedStrings.Str1343).SetStyle(columnShift + 12' typeof(decimal))  						.SetCell(columnShift + 12' 1' LocalizedStrings.Str1344).SetStyle(columnShift + 13' typeof(decimal))  						.SetCell(columnShift + 13' 1' LocalizedStrings.Str1345).SetStyle(columnShift + 14' typeof(decimal))  						.SetCell(columnShift + 14' 1' LocalizedStrings.Str862).SetStyle(columnShift + 15' typeof(decimal));    					worker  						.SetConditionalFormatting(columnShift + 10' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 11' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 12' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 13' ComparisonOperator.Less' "0"' null' Colors.Red);    					var totalPnL = 0m;  					var position = 0m;    					var queues = new Dictionary<Security' PnLQueue>();    					rowIndex = 2;  					foreach (var trade in strategy.MyTrades.ToArray())  					{  						var info = strategy.PnLManager.ProcessMessage(trade.ToMessage());    						totalPnL += info.PnL;  						position += trade.GetPosition() ?? 0;    						var queue = queues.SafeAdd(trade.Trade.Security' key => new PnLQueue(key.ToSecurityId()));    						var localInfo = queue.Process(trade.ToMessage());    						worker  							.SetCell(columnShift + 0' rowIndex' trade.Trade.Id)  							.SetCell(columnShift + 1' rowIndex' trade.Order.TransactionId)  							.SetCell(columnShift + 2' rowIndex' Format(trade.Trade.Time))  							.SetCell(columnShift + 3' rowIndex' trade.Trade.Price)  							.SetCell(columnShift + 4' rowIndex' trade.Order.Price)  							.SetCell(columnShift + 5' rowIndex' trade.Trade.Volume)  							.SetCell(columnShift + 6' rowIndex' Format(trade.Order.Direction))  							.SetCell(columnShift + 7' rowIndex' trade.Order.Id)  							.SetCell(columnShift + 8' rowIndex' trade.Slippage)  							.SetCell(columnShift + 9' rowIndex' trade.Order.Comment)  							.SetCell(columnShift + 10' rowIndex' MathHelper.Round(info.PnL' Decimals))  							.SetCell(columnShift + 11' rowIndex' MathHelper.Round(localInfo.PnL' Decimals))  							.SetCell(columnShift + 12' rowIndex' MathHelper.Round(totalPnL' Decimals))  							.SetCell(columnShift + 13' rowIndex' MathHelper.Round(queue.RealizedPnL' Decimals))  							.SetCell(columnShift + 14' rowIndex' position);    						rowIndex++;  					}    					if (IncludeOrders)  					{  						columnShift += 17;    						worker  							.SetCell(columnShift + 0' 0' LocalizedStrings.Orders)    							.SetCell(columnShift + 0' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  							.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  							.SetCell(columnShift + 2' 1' LocalizedStrings.Str128)  							.SetCell(columnShift + 3' 1' LocalizedStrings.Str1346).SetStyle(columnShift + 3' "HH:mm:ss.fff")  							.SetCell(columnShift + 4' 1' LocalizedStrings.Str1347).SetStyle(columnShift + 4' "HH:mm:ss.fff")  							.SetCell(columnShift + 5' 1' LocalizedStrings.Str1348)  							.SetCell(columnShift + 6' 1' LocalizedStrings.Price).SetStyle(columnShift + 6' typeof(decimal))  							.SetCell(columnShift + 7' 1' LocalizedStrings.Str1323).SetStyle(columnShift + 7' typeof(decimal))  							.SetCell(columnShift + 8' 1' LocalizedStrings.Str1324)  							.SetCell(columnShift + 9' 1' LocalizedStrings.State)  							.SetCell(columnShift + 10' 1' LocalizedStrings.Str1325).SetStyle(columnShift + 10' typeof(decimal))  							.SetCell(columnShift + 11' 1' LocalizedStrings.Volume).SetStyle(columnShift + 11' typeof(decimal))  							.SetCell(columnShift + 12' 1' LocalizedStrings.Type)  							.SetCell(columnShift + 13' 1' LocalizedStrings.Str1326)  							.SetCell(columnShift + 14' 1' LocalizedStrings.Str1327)  							.SetCell(columnShift + 15' 1' LocalizedStrings.Str135);    						worker  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str1329)' null' Colors.Green)  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str238)' null' Colors.Red);    						rowIndex = 2;  						foreach (var order in strategy.Orders.ToArray())  						{  							worker  								.SetCell(columnShift + 0' rowIndex' order.Id)  								.SetCell(columnShift + 1' rowIndex' order.TransactionId)  								.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  								.SetCell(columnShift + 3' rowIndex' Format(order.Time))  								.SetCell(columnShift + 4' rowIndex' Format(order.LastChangeTime))  								.SetCell(columnShift + 5' rowIndex' Format(order.LastChangeTime - order.Time))  								.SetCell(columnShift + 6' rowIndex' order.Price)  								.SetCell(columnShift + 7' rowIndex' MathHelper.Round(order.GetAveragePrice(strategy.Connector)' Decimals))  								.SetCell(columnShift + 8' rowIndex' Format(order.State))  								.SetCell(columnShift + 9' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : LocalizedStrings.Str238))  								.SetCell(columnShift + 10' rowIndex' order.Balance)  								.SetCell(columnShift + 11' rowIndex' order.Volume)  								.SetCell(columnShift + 12' rowIndex' Format(order.Type))  								.SetCell(columnShift + 13' rowIndex' Format(order.LatencyRegistration))  								.SetCell(columnShift + 14' rowIndex' Format(order.LatencyCancellation))  								.SetCell(columnShift + 15' rowIndex' order.Comment);    							rowIndex++;  						}    						var stopOrders = strategy.StopOrders.ToArray();    						if (stopOrders.Length > 0)  						{  							rowIndex += 2;    							worker  								.SetCell(columnShift + 0' rowIndex - 1' LocalizedStrings.Str1351)    								.SetCell(columnShift + 0' rowIndex' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  								.SetCell(columnShift + 1' rowIndex' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  								.SetCell(columnShift + 2' rowIndex' LocalizedStrings.Str128)  								.SetCell(columnShift + 3' rowIndex' LocalizedStrings.Time).SetStyle(columnShift + 3' "HH:mm:ss.fff")  								.SetCell(columnShift + 4' rowIndex' LocalizedStrings.Price).SetStyle(columnShift + 4' typeof(decimal))  								.SetCell(columnShift + 5' rowIndex' LocalizedStrings.Str1324)  								.SetCell(columnShift + 6' rowIndex' LocalizedStrings.State)  								.SetCell(columnShift + 7' rowIndex' LocalizedStrings.Volume).SetStyle(columnShift + 7' typeof(decimal))  								.SetCell(columnShift + 8' rowIndex' LocalizedStrings.Str1326)  								.SetCell(columnShift + 9' rowIndex' LocalizedStrings.Str1327)  								//.SetCell(columnShift + 10' rowIndex' LocalizedStrings.Str1352).SetStyle(columnShift + 9' typeof(long))  								;    							var stopParams = stopOrders[0].Condition.Parameters.Keys.ToArray();    							for (var i = 0; i < stopParams.Length; i++)  								worker.SetCell(columnShift + 11 + i' rowIndex' stopParams[i]);    							foreach (var order in stopOrders)  							{  								worker  									.SetCell(columnShift + 0' rowIndex' order.Id)  									.SetCell(columnShift + 1' rowIndex' order.TransactionId)  									.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  									.SetCell(columnShift + 3' rowIndex' Format(order.Time))  									.SetCell(columnShift + 4' rowIndex' order.Price)  									.SetCell(columnShift + 5' rowIndex' Format(order.State))  									.SetCell(columnShift + 6' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : string.Empty))  									.SetCell(columnShift + 7' rowIndex' order.Volume)  									.SetCell(columnShift + 8' rowIndex' Format(order.LatencyRegistration))  									.SetCell(columnShift + 9' rowIndex' Format(order.LatencyCancellation))  									//.SetCell(columnShift + 10' rowIndex' order.DerivedOrder != null ? (object)order.DerivedOrder.Id : string.Empty)  									;    								for (var i = 0; i < stopParams.Length; i++)  									worker.SetCell(columnShift + 11 + i' rowIndex' order.Condition.Parameters[stopParams[i]] ?? string.Empty);    								rowIndex++;  							}  						}  					}  				}    				worker.Save(FileName' true);  			}
Magic Number,StockSharp.Algo.Strategies.Reporting,ExcelStrategyReport,C:\repos\stocksharp_stocksharp\Algo\Strategies\Reporting\ExcelStrategyReport.cs,Generate,The following statement contains a magic number: using (var worker = hasTemplate ? new ExcelWorker() : new ExcelWorker(Template))  			{  				foreach (var strategy in Strategies)  				{  					if (Template.IsEmpty())  					{  						worker.RenameSheet(strategy.Name);  					}  					else  					{  						if (worker.ContainsSheet(strategy.Name))  							worker.AddSheet(strategy.Name);  					}    					worker  						.SetCell(0' 0' LocalizedStrings.Str1331)    						.SetCell(0' 1' LocalizedStrings.Security + ":")  						.SetCell(1' 1' strategy.Security != null ? strategy.Security.Id : string.Empty)    						.SetCell(0' 2' LocalizedStrings.Portfolio + ":")  						.SetCell(1' 2' strategy.Portfolio != null ? strategy.Portfolio.Name : string.Empty)    						.SetCell(0' 3' LocalizedStrings.Str1334)  						.SetCell(1' 3' Format(strategy.TotalWorkingTime))    						.SetCell(0' 4' LocalizedStrings.Str1335)  						//.SetCell(1' 4' FormatTime(base.Strategy.TotalCPUTime))    						.SetCell(0' 5' LocalizedStrings.Str862 + ":")  						.SetCell(1' 5' strategy.Position)    						.SetCell(0' 6' LocalizedStrings.PnL + ":")  						.SetCell(1' 6' strategy.PnL)    						.SetCell(0' 7' LocalizedStrings.Str159 + ":")  						.SetCell(1' 7' strategy.Commission)    						.SetCell(0' 8' LocalizedStrings.Str163 + ":")  						.SetCell(1' 8' strategy.Slippage)    						.SetCell(0' 9' LocalizedStrings.Str161 + ":")  						.SetCell(1' 9' Format(strategy.Latency));    					var rowIndex = 11;    					foreach (var parameter in strategy.StatisticManager.Parameters.SyncGet(c => c.ToArray()))  					{  						var value = parameter.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' parameter.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					rowIndex += 2;  					worker.SetCell(0' rowIndex' LocalizedStrings.Str1340);  					rowIndex++;    					foreach (var strategyParam in strategy.Parameters.CachedValues)  					{  						var value = strategyParam.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' strategyParam.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					//rowIndex += 2;  					//worker.SetCell(0' rowIndex' "Комиссия по типам:");  					//rowIndex++;    					//foreach (var group in Strategy.CommissionManager.Rules.SyncGet(c => c.ToArray()).GroupBy(c => c.GetType().GetDisplayName()))  					//{  					//	var commission = group.Sum(r => r.Commission);    					//	if (commission == 0)  					//		continue;    					//	worker  					//		.SetCell(0' rowIndex' group.Key)  					//		.SetCell(1' rowIndex' commission);    					//	rowIndex++;  					//}    					var columnShift = 3;    					worker  						.SetCell(columnShift + 0' 0' LocalizedStrings.Str985)    						.SetCell(columnShift + 0' 1' LocalizedStrings.Str1192).SetStyle(columnShift + 0' typeof(long))  						.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  						.SetCell(columnShift + 2' 1' LocalizedStrings.Time).SetStyle(columnShift + 2' "HH:mm:ss.fff")  						.SetCell(columnShift + 3' 1' LocalizedStrings.Price).SetStyle(columnShift + 3' typeof(decimal))  						.SetCell(columnShift + 4' 1' LocalizedStrings.Str1341).SetStyle(columnShift + 4' typeof(decimal))  						.SetCell(columnShift + 5' 1' LocalizedStrings.Volume).SetStyle(columnShift + 5' typeof(decimal))  						.SetCell(columnShift + 6' 1' LocalizedStrings.Str128)  						.SetCell(columnShift + 7' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 7' typeof(long))  						.SetCell(columnShift + 8' 1' LocalizedStrings.Str163).SetStyle(columnShift + 8' typeof(decimal))  						.SetCell(columnShift + 9' 1' LocalizedStrings.Str135)  						.SetCell(columnShift + 10' 1' LocalizedStrings.Str1342).SetStyle(columnShift + 11' typeof(decimal))  						.SetCell(columnShift + 11' 1' LocalizedStrings.Str1343).SetStyle(columnShift + 12' typeof(decimal))  						.SetCell(columnShift + 12' 1' LocalizedStrings.Str1344).SetStyle(columnShift + 13' typeof(decimal))  						.SetCell(columnShift + 13' 1' LocalizedStrings.Str1345).SetStyle(columnShift + 14' typeof(decimal))  						.SetCell(columnShift + 14' 1' LocalizedStrings.Str862).SetStyle(columnShift + 15' typeof(decimal));    					worker  						.SetConditionalFormatting(columnShift + 10' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 11' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 12' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 13' ComparisonOperator.Less' "0"' null' Colors.Red);    					var totalPnL = 0m;  					var position = 0m;    					var queues = new Dictionary<Security' PnLQueue>();    					rowIndex = 2;  					foreach (var trade in strategy.MyTrades.ToArray())  					{  						var info = strategy.PnLManager.ProcessMessage(trade.ToMessage());    						totalPnL += info.PnL;  						position += trade.GetPosition() ?? 0;    						var queue = queues.SafeAdd(trade.Trade.Security' key => new PnLQueue(key.ToSecurityId()));    						var localInfo = queue.Process(trade.ToMessage());    						worker  							.SetCell(columnShift + 0' rowIndex' trade.Trade.Id)  							.SetCell(columnShift + 1' rowIndex' trade.Order.TransactionId)  							.SetCell(columnShift + 2' rowIndex' Format(trade.Trade.Time))  							.SetCell(columnShift + 3' rowIndex' trade.Trade.Price)  							.SetCell(columnShift + 4' rowIndex' trade.Order.Price)  							.SetCell(columnShift + 5' rowIndex' trade.Trade.Volume)  							.SetCell(columnShift + 6' rowIndex' Format(trade.Order.Direction))  							.SetCell(columnShift + 7' rowIndex' trade.Order.Id)  							.SetCell(columnShift + 8' rowIndex' trade.Slippage)  							.SetCell(columnShift + 9' rowIndex' trade.Order.Comment)  							.SetCell(columnShift + 10' rowIndex' MathHelper.Round(info.PnL' Decimals))  							.SetCell(columnShift + 11' rowIndex' MathHelper.Round(localInfo.PnL' Decimals))  							.SetCell(columnShift + 12' rowIndex' MathHelper.Round(totalPnL' Decimals))  							.SetCell(columnShift + 13' rowIndex' MathHelper.Round(queue.RealizedPnL' Decimals))  							.SetCell(columnShift + 14' rowIndex' position);    						rowIndex++;  					}    					if (IncludeOrders)  					{  						columnShift += 17;    						worker  							.SetCell(columnShift + 0' 0' LocalizedStrings.Orders)    							.SetCell(columnShift + 0' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  							.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  							.SetCell(columnShift + 2' 1' LocalizedStrings.Str128)  							.SetCell(columnShift + 3' 1' LocalizedStrings.Str1346).SetStyle(columnShift + 3' "HH:mm:ss.fff")  							.SetCell(columnShift + 4' 1' LocalizedStrings.Str1347).SetStyle(columnShift + 4' "HH:mm:ss.fff")  							.SetCell(columnShift + 5' 1' LocalizedStrings.Str1348)  							.SetCell(columnShift + 6' 1' LocalizedStrings.Price).SetStyle(columnShift + 6' typeof(decimal))  							.SetCell(columnShift + 7' 1' LocalizedStrings.Str1323).SetStyle(columnShift + 7' typeof(decimal))  							.SetCell(columnShift + 8' 1' LocalizedStrings.Str1324)  							.SetCell(columnShift + 9' 1' LocalizedStrings.State)  							.SetCell(columnShift + 10' 1' LocalizedStrings.Str1325).SetStyle(columnShift + 10' typeof(decimal))  							.SetCell(columnShift + 11' 1' LocalizedStrings.Volume).SetStyle(columnShift + 11' typeof(decimal))  							.SetCell(columnShift + 12' 1' LocalizedStrings.Type)  							.SetCell(columnShift + 13' 1' LocalizedStrings.Str1326)  							.SetCell(columnShift + 14' 1' LocalizedStrings.Str1327)  							.SetCell(columnShift + 15' 1' LocalizedStrings.Str135);    						worker  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str1329)' null' Colors.Green)  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str238)' null' Colors.Red);    						rowIndex = 2;  						foreach (var order in strategy.Orders.ToArray())  						{  							worker  								.SetCell(columnShift + 0' rowIndex' order.Id)  								.SetCell(columnShift + 1' rowIndex' order.TransactionId)  								.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  								.SetCell(columnShift + 3' rowIndex' Format(order.Time))  								.SetCell(columnShift + 4' rowIndex' Format(order.LastChangeTime))  								.SetCell(columnShift + 5' rowIndex' Format(order.LastChangeTime - order.Time))  								.SetCell(columnShift + 6' rowIndex' order.Price)  								.SetCell(columnShift + 7' rowIndex' MathHelper.Round(order.GetAveragePrice(strategy.Connector)' Decimals))  								.SetCell(columnShift + 8' rowIndex' Format(order.State))  								.SetCell(columnShift + 9' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : LocalizedStrings.Str238))  								.SetCell(columnShift + 10' rowIndex' order.Balance)  								.SetCell(columnShift + 11' rowIndex' order.Volume)  								.SetCell(columnShift + 12' rowIndex' Format(order.Type))  								.SetCell(columnShift + 13' rowIndex' Format(order.LatencyRegistration))  								.SetCell(columnShift + 14' rowIndex' Format(order.LatencyCancellation))  								.SetCell(columnShift + 15' rowIndex' order.Comment);    							rowIndex++;  						}    						var stopOrders = strategy.StopOrders.ToArray();    						if (stopOrders.Length > 0)  						{  							rowIndex += 2;    							worker  								.SetCell(columnShift + 0' rowIndex - 1' LocalizedStrings.Str1351)    								.SetCell(columnShift + 0' rowIndex' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  								.SetCell(columnShift + 1' rowIndex' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  								.SetCell(columnShift + 2' rowIndex' LocalizedStrings.Str128)  								.SetCell(columnShift + 3' rowIndex' LocalizedStrings.Time).SetStyle(columnShift + 3' "HH:mm:ss.fff")  								.SetCell(columnShift + 4' rowIndex' LocalizedStrings.Price).SetStyle(columnShift + 4' typeof(decimal))  								.SetCell(columnShift + 5' rowIndex' LocalizedStrings.Str1324)  								.SetCell(columnShift + 6' rowIndex' LocalizedStrings.State)  								.SetCell(columnShift + 7' rowIndex' LocalizedStrings.Volume).SetStyle(columnShift + 7' typeof(decimal))  								.SetCell(columnShift + 8' rowIndex' LocalizedStrings.Str1326)  								.SetCell(columnShift + 9' rowIndex' LocalizedStrings.Str1327)  								//.SetCell(columnShift + 10' rowIndex' LocalizedStrings.Str1352).SetStyle(columnShift + 9' typeof(long))  								;    							var stopParams = stopOrders[0].Condition.Parameters.Keys.ToArray();    							for (var i = 0; i < stopParams.Length; i++)  								worker.SetCell(columnShift + 11 + i' rowIndex' stopParams[i]);    							foreach (var order in stopOrders)  							{  								worker  									.SetCell(columnShift + 0' rowIndex' order.Id)  									.SetCell(columnShift + 1' rowIndex' order.TransactionId)  									.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  									.SetCell(columnShift + 3' rowIndex' Format(order.Time))  									.SetCell(columnShift + 4' rowIndex' order.Price)  									.SetCell(columnShift + 5' rowIndex' Format(order.State))  									.SetCell(columnShift + 6' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : string.Empty))  									.SetCell(columnShift + 7' rowIndex' order.Volume)  									.SetCell(columnShift + 8' rowIndex' Format(order.LatencyRegistration))  									.SetCell(columnShift + 9' rowIndex' Format(order.LatencyCancellation))  									//.SetCell(columnShift + 10' rowIndex' order.DerivedOrder != null ? (object)order.DerivedOrder.Id : string.Empty)  									;    								for (var i = 0; i < stopParams.Length; i++)  									worker.SetCell(columnShift + 11 + i' rowIndex' order.Condition.Parameters[stopParams[i]] ?? string.Empty);    								rowIndex++;  							}  						}  					}  				}    				worker.Save(FileName' true);  			}
Magic Number,StockSharp.Algo.Strategies.Reporting,ExcelStrategyReport,C:\repos\stocksharp_stocksharp\Algo\Strategies\Reporting\ExcelStrategyReport.cs,Generate,The following statement contains a magic number: using (var worker = hasTemplate ? new ExcelWorker() : new ExcelWorker(Template))  			{  				foreach (var strategy in Strategies)  				{  					if (Template.IsEmpty())  					{  						worker.RenameSheet(strategy.Name);  					}  					else  					{  						if (worker.ContainsSheet(strategy.Name))  							worker.AddSheet(strategy.Name);  					}    					worker  						.SetCell(0' 0' LocalizedStrings.Str1331)    						.SetCell(0' 1' LocalizedStrings.Security + ":")  						.SetCell(1' 1' strategy.Security != null ? strategy.Security.Id : string.Empty)    						.SetCell(0' 2' LocalizedStrings.Portfolio + ":")  						.SetCell(1' 2' strategy.Portfolio != null ? strategy.Portfolio.Name : string.Empty)    						.SetCell(0' 3' LocalizedStrings.Str1334)  						.SetCell(1' 3' Format(strategy.TotalWorkingTime))    						.SetCell(0' 4' LocalizedStrings.Str1335)  						//.SetCell(1' 4' FormatTime(base.Strategy.TotalCPUTime))    						.SetCell(0' 5' LocalizedStrings.Str862 + ":")  						.SetCell(1' 5' strategy.Position)    						.SetCell(0' 6' LocalizedStrings.PnL + ":")  						.SetCell(1' 6' strategy.PnL)    						.SetCell(0' 7' LocalizedStrings.Str159 + ":")  						.SetCell(1' 7' strategy.Commission)    						.SetCell(0' 8' LocalizedStrings.Str163 + ":")  						.SetCell(1' 8' strategy.Slippage)    						.SetCell(0' 9' LocalizedStrings.Str161 + ":")  						.SetCell(1' 9' Format(strategy.Latency));    					var rowIndex = 11;    					foreach (var parameter in strategy.StatisticManager.Parameters.SyncGet(c => c.ToArray()))  					{  						var value = parameter.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' parameter.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					rowIndex += 2;  					worker.SetCell(0' rowIndex' LocalizedStrings.Str1340);  					rowIndex++;    					foreach (var strategyParam in strategy.Parameters.CachedValues)  					{  						var value = strategyParam.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' strategyParam.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					//rowIndex += 2;  					//worker.SetCell(0' rowIndex' "Комиссия по типам:");  					//rowIndex++;    					//foreach (var group in Strategy.CommissionManager.Rules.SyncGet(c => c.ToArray()).GroupBy(c => c.GetType().GetDisplayName()))  					//{  					//	var commission = group.Sum(r => r.Commission);    					//	if (commission == 0)  					//		continue;    					//	worker  					//		.SetCell(0' rowIndex' group.Key)  					//		.SetCell(1' rowIndex' commission);    					//	rowIndex++;  					//}    					var columnShift = 3;    					worker  						.SetCell(columnShift + 0' 0' LocalizedStrings.Str985)    						.SetCell(columnShift + 0' 1' LocalizedStrings.Str1192).SetStyle(columnShift + 0' typeof(long))  						.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  						.SetCell(columnShift + 2' 1' LocalizedStrings.Time).SetStyle(columnShift + 2' "HH:mm:ss.fff")  						.SetCell(columnShift + 3' 1' LocalizedStrings.Price).SetStyle(columnShift + 3' typeof(decimal))  						.SetCell(columnShift + 4' 1' LocalizedStrings.Str1341).SetStyle(columnShift + 4' typeof(decimal))  						.SetCell(columnShift + 5' 1' LocalizedStrings.Volume).SetStyle(columnShift + 5' typeof(decimal))  						.SetCell(columnShift + 6' 1' LocalizedStrings.Str128)  						.SetCell(columnShift + 7' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 7' typeof(long))  						.SetCell(columnShift + 8' 1' LocalizedStrings.Str163).SetStyle(columnShift + 8' typeof(decimal))  						.SetCell(columnShift + 9' 1' LocalizedStrings.Str135)  						.SetCell(columnShift + 10' 1' LocalizedStrings.Str1342).SetStyle(columnShift + 11' typeof(decimal))  						.SetCell(columnShift + 11' 1' LocalizedStrings.Str1343).SetStyle(columnShift + 12' typeof(decimal))  						.SetCell(columnShift + 12' 1' LocalizedStrings.Str1344).SetStyle(columnShift + 13' typeof(decimal))  						.SetCell(columnShift + 13' 1' LocalizedStrings.Str1345).SetStyle(columnShift + 14' typeof(decimal))  						.SetCell(columnShift + 14' 1' LocalizedStrings.Str862).SetStyle(columnShift + 15' typeof(decimal));    					worker  						.SetConditionalFormatting(columnShift + 10' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 11' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 12' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 13' ComparisonOperator.Less' "0"' null' Colors.Red);    					var totalPnL = 0m;  					var position = 0m;    					var queues = new Dictionary<Security' PnLQueue>();    					rowIndex = 2;  					foreach (var trade in strategy.MyTrades.ToArray())  					{  						var info = strategy.PnLManager.ProcessMessage(trade.ToMessage());    						totalPnL += info.PnL;  						position += trade.GetPosition() ?? 0;    						var queue = queues.SafeAdd(trade.Trade.Security' key => new PnLQueue(key.ToSecurityId()));    						var localInfo = queue.Process(trade.ToMessage());    						worker  							.SetCell(columnShift + 0' rowIndex' trade.Trade.Id)  							.SetCell(columnShift + 1' rowIndex' trade.Order.TransactionId)  							.SetCell(columnShift + 2' rowIndex' Format(trade.Trade.Time))  							.SetCell(columnShift + 3' rowIndex' trade.Trade.Price)  							.SetCell(columnShift + 4' rowIndex' trade.Order.Price)  							.SetCell(columnShift + 5' rowIndex' trade.Trade.Volume)  							.SetCell(columnShift + 6' rowIndex' Format(trade.Order.Direction))  							.SetCell(columnShift + 7' rowIndex' trade.Order.Id)  							.SetCell(columnShift + 8' rowIndex' trade.Slippage)  							.SetCell(columnShift + 9' rowIndex' trade.Order.Comment)  							.SetCell(columnShift + 10' rowIndex' MathHelper.Round(info.PnL' Decimals))  							.SetCell(columnShift + 11' rowIndex' MathHelper.Round(localInfo.PnL' Decimals))  							.SetCell(columnShift + 12' rowIndex' MathHelper.Round(totalPnL' Decimals))  							.SetCell(columnShift + 13' rowIndex' MathHelper.Round(queue.RealizedPnL' Decimals))  							.SetCell(columnShift + 14' rowIndex' position);    						rowIndex++;  					}    					if (IncludeOrders)  					{  						columnShift += 17;    						worker  							.SetCell(columnShift + 0' 0' LocalizedStrings.Orders)    							.SetCell(columnShift + 0' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  							.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  							.SetCell(columnShift + 2' 1' LocalizedStrings.Str128)  							.SetCell(columnShift + 3' 1' LocalizedStrings.Str1346).SetStyle(columnShift + 3' "HH:mm:ss.fff")  							.SetCell(columnShift + 4' 1' LocalizedStrings.Str1347).SetStyle(columnShift + 4' "HH:mm:ss.fff")  							.SetCell(columnShift + 5' 1' LocalizedStrings.Str1348)  							.SetCell(columnShift + 6' 1' LocalizedStrings.Price).SetStyle(columnShift + 6' typeof(decimal))  							.SetCell(columnShift + 7' 1' LocalizedStrings.Str1323).SetStyle(columnShift + 7' typeof(decimal))  							.SetCell(columnShift + 8' 1' LocalizedStrings.Str1324)  							.SetCell(columnShift + 9' 1' LocalizedStrings.State)  							.SetCell(columnShift + 10' 1' LocalizedStrings.Str1325).SetStyle(columnShift + 10' typeof(decimal))  							.SetCell(columnShift + 11' 1' LocalizedStrings.Volume).SetStyle(columnShift + 11' typeof(decimal))  							.SetCell(columnShift + 12' 1' LocalizedStrings.Type)  							.SetCell(columnShift + 13' 1' LocalizedStrings.Str1326)  							.SetCell(columnShift + 14' 1' LocalizedStrings.Str1327)  							.SetCell(columnShift + 15' 1' LocalizedStrings.Str135);    						worker  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str1329)' null' Colors.Green)  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str238)' null' Colors.Red);    						rowIndex = 2;  						foreach (var order in strategy.Orders.ToArray())  						{  							worker  								.SetCell(columnShift + 0' rowIndex' order.Id)  								.SetCell(columnShift + 1' rowIndex' order.TransactionId)  								.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  								.SetCell(columnShift + 3' rowIndex' Format(order.Time))  								.SetCell(columnShift + 4' rowIndex' Format(order.LastChangeTime))  								.SetCell(columnShift + 5' rowIndex' Format(order.LastChangeTime - order.Time))  								.SetCell(columnShift + 6' rowIndex' order.Price)  								.SetCell(columnShift + 7' rowIndex' MathHelper.Round(order.GetAveragePrice(strategy.Connector)' Decimals))  								.SetCell(columnShift + 8' rowIndex' Format(order.State))  								.SetCell(columnShift + 9' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : LocalizedStrings.Str238))  								.SetCell(columnShift + 10' rowIndex' order.Balance)  								.SetCell(columnShift + 11' rowIndex' order.Volume)  								.SetCell(columnShift + 12' rowIndex' Format(order.Type))  								.SetCell(columnShift + 13' rowIndex' Format(order.LatencyRegistration))  								.SetCell(columnShift + 14' rowIndex' Format(order.LatencyCancellation))  								.SetCell(columnShift + 15' rowIndex' order.Comment);    							rowIndex++;  						}    						var stopOrders = strategy.StopOrders.ToArray();    						if (stopOrders.Length > 0)  						{  							rowIndex += 2;    							worker  								.SetCell(columnShift + 0' rowIndex - 1' LocalizedStrings.Str1351)    								.SetCell(columnShift + 0' rowIndex' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  								.SetCell(columnShift + 1' rowIndex' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  								.SetCell(columnShift + 2' rowIndex' LocalizedStrings.Str128)  								.SetCell(columnShift + 3' rowIndex' LocalizedStrings.Time).SetStyle(columnShift + 3' "HH:mm:ss.fff")  								.SetCell(columnShift + 4' rowIndex' LocalizedStrings.Price).SetStyle(columnShift + 4' typeof(decimal))  								.SetCell(columnShift + 5' rowIndex' LocalizedStrings.Str1324)  								.SetCell(columnShift + 6' rowIndex' LocalizedStrings.State)  								.SetCell(columnShift + 7' rowIndex' LocalizedStrings.Volume).SetStyle(columnShift + 7' typeof(decimal))  								.SetCell(columnShift + 8' rowIndex' LocalizedStrings.Str1326)  								.SetCell(columnShift + 9' rowIndex' LocalizedStrings.Str1327)  								//.SetCell(columnShift + 10' rowIndex' LocalizedStrings.Str1352).SetStyle(columnShift + 9' typeof(long))  								;    							var stopParams = stopOrders[0].Condition.Parameters.Keys.ToArray();    							for (var i = 0; i < stopParams.Length; i++)  								worker.SetCell(columnShift + 11 + i' rowIndex' stopParams[i]);    							foreach (var order in stopOrders)  							{  								worker  									.SetCell(columnShift + 0' rowIndex' order.Id)  									.SetCell(columnShift + 1' rowIndex' order.TransactionId)  									.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  									.SetCell(columnShift + 3' rowIndex' Format(order.Time))  									.SetCell(columnShift + 4' rowIndex' order.Price)  									.SetCell(columnShift + 5' rowIndex' Format(order.State))  									.SetCell(columnShift + 6' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : string.Empty))  									.SetCell(columnShift + 7' rowIndex' order.Volume)  									.SetCell(columnShift + 8' rowIndex' Format(order.LatencyRegistration))  									.SetCell(columnShift + 9' rowIndex' Format(order.LatencyCancellation))  									//.SetCell(columnShift + 10' rowIndex' order.DerivedOrder != null ? (object)order.DerivedOrder.Id : string.Empty)  									;    								for (var i = 0; i < stopParams.Length; i++)  									worker.SetCell(columnShift + 11 + i' rowIndex' order.Condition.Parameters[stopParams[i]] ?? string.Empty);    								rowIndex++;  							}  						}  					}  				}    				worker.Save(FileName' true);  			}
Magic Number,StockSharp.Algo.Strategies.Reporting,ExcelStrategyReport,C:\repos\stocksharp_stocksharp\Algo\Strategies\Reporting\ExcelStrategyReport.cs,Generate,The following statement contains a magic number: using (var worker = hasTemplate ? new ExcelWorker() : new ExcelWorker(Template))  			{  				foreach (var strategy in Strategies)  				{  					if (Template.IsEmpty())  					{  						worker.RenameSheet(strategy.Name);  					}  					else  					{  						if (worker.ContainsSheet(strategy.Name))  							worker.AddSheet(strategy.Name);  					}    					worker  						.SetCell(0' 0' LocalizedStrings.Str1331)    						.SetCell(0' 1' LocalizedStrings.Security + ":")  						.SetCell(1' 1' strategy.Security != null ? strategy.Security.Id : string.Empty)    						.SetCell(0' 2' LocalizedStrings.Portfolio + ":")  						.SetCell(1' 2' strategy.Portfolio != null ? strategy.Portfolio.Name : string.Empty)    						.SetCell(0' 3' LocalizedStrings.Str1334)  						.SetCell(1' 3' Format(strategy.TotalWorkingTime))    						.SetCell(0' 4' LocalizedStrings.Str1335)  						//.SetCell(1' 4' FormatTime(base.Strategy.TotalCPUTime))    						.SetCell(0' 5' LocalizedStrings.Str862 + ":")  						.SetCell(1' 5' strategy.Position)    						.SetCell(0' 6' LocalizedStrings.PnL + ":")  						.SetCell(1' 6' strategy.PnL)    						.SetCell(0' 7' LocalizedStrings.Str159 + ":")  						.SetCell(1' 7' strategy.Commission)    						.SetCell(0' 8' LocalizedStrings.Str163 + ":")  						.SetCell(1' 8' strategy.Slippage)    						.SetCell(0' 9' LocalizedStrings.Str161 + ":")  						.SetCell(1' 9' Format(strategy.Latency));    					var rowIndex = 11;    					foreach (var parameter in strategy.StatisticManager.Parameters.SyncGet(c => c.ToArray()))  					{  						var value = parameter.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' parameter.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					rowIndex += 2;  					worker.SetCell(0' rowIndex' LocalizedStrings.Str1340);  					rowIndex++;    					foreach (var strategyParam in strategy.Parameters.CachedValues)  					{  						var value = strategyParam.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' strategyParam.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					//rowIndex += 2;  					//worker.SetCell(0' rowIndex' "Комиссия по типам:");  					//rowIndex++;    					//foreach (var group in Strategy.CommissionManager.Rules.SyncGet(c => c.ToArray()).GroupBy(c => c.GetType().GetDisplayName()))  					//{  					//	var commission = group.Sum(r => r.Commission);    					//	if (commission == 0)  					//		continue;    					//	worker  					//		.SetCell(0' rowIndex' group.Key)  					//		.SetCell(1' rowIndex' commission);    					//	rowIndex++;  					//}    					var columnShift = 3;    					worker  						.SetCell(columnShift + 0' 0' LocalizedStrings.Str985)    						.SetCell(columnShift + 0' 1' LocalizedStrings.Str1192).SetStyle(columnShift + 0' typeof(long))  						.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  						.SetCell(columnShift + 2' 1' LocalizedStrings.Time).SetStyle(columnShift + 2' "HH:mm:ss.fff")  						.SetCell(columnShift + 3' 1' LocalizedStrings.Price).SetStyle(columnShift + 3' typeof(decimal))  						.SetCell(columnShift + 4' 1' LocalizedStrings.Str1341).SetStyle(columnShift + 4' typeof(decimal))  						.SetCell(columnShift + 5' 1' LocalizedStrings.Volume).SetStyle(columnShift + 5' typeof(decimal))  						.SetCell(columnShift + 6' 1' LocalizedStrings.Str128)  						.SetCell(columnShift + 7' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 7' typeof(long))  						.SetCell(columnShift + 8' 1' LocalizedStrings.Str163).SetStyle(columnShift + 8' typeof(decimal))  						.SetCell(columnShift + 9' 1' LocalizedStrings.Str135)  						.SetCell(columnShift + 10' 1' LocalizedStrings.Str1342).SetStyle(columnShift + 11' typeof(decimal))  						.SetCell(columnShift + 11' 1' LocalizedStrings.Str1343).SetStyle(columnShift + 12' typeof(decimal))  						.SetCell(columnShift + 12' 1' LocalizedStrings.Str1344).SetStyle(columnShift + 13' typeof(decimal))  						.SetCell(columnShift + 13' 1' LocalizedStrings.Str1345).SetStyle(columnShift + 14' typeof(decimal))  						.SetCell(columnShift + 14' 1' LocalizedStrings.Str862).SetStyle(columnShift + 15' typeof(decimal));    					worker  						.SetConditionalFormatting(columnShift + 10' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 11' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 12' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 13' ComparisonOperator.Less' "0"' null' Colors.Red);    					var totalPnL = 0m;  					var position = 0m;    					var queues = new Dictionary<Security' PnLQueue>();    					rowIndex = 2;  					foreach (var trade in strategy.MyTrades.ToArray())  					{  						var info = strategy.PnLManager.ProcessMessage(trade.ToMessage());    						totalPnL += info.PnL;  						position += trade.GetPosition() ?? 0;    						var queue = queues.SafeAdd(trade.Trade.Security' key => new PnLQueue(key.ToSecurityId()));    						var localInfo = queue.Process(trade.ToMessage());    						worker  							.SetCell(columnShift + 0' rowIndex' trade.Trade.Id)  							.SetCell(columnShift + 1' rowIndex' trade.Order.TransactionId)  							.SetCell(columnShift + 2' rowIndex' Format(trade.Trade.Time))  							.SetCell(columnShift + 3' rowIndex' trade.Trade.Price)  							.SetCell(columnShift + 4' rowIndex' trade.Order.Price)  							.SetCell(columnShift + 5' rowIndex' trade.Trade.Volume)  							.SetCell(columnShift + 6' rowIndex' Format(trade.Order.Direction))  							.SetCell(columnShift + 7' rowIndex' trade.Order.Id)  							.SetCell(columnShift + 8' rowIndex' trade.Slippage)  							.SetCell(columnShift + 9' rowIndex' trade.Order.Comment)  							.SetCell(columnShift + 10' rowIndex' MathHelper.Round(info.PnL' Decimals))  							.SetCell(columnShift + 11' rowIndex' MathHelper.Round(localInfo.PnL' Decimals))  							.SetCell(columnShift + 12' rowIndex' MathHelper.Round(totalPnL' Decimals))  							.SetCell(columnShift + 13' rowIndex' MathHelper.Round(queue.RealizedPnL' Decimals))  							.SetCell(columnShift + 14' rowIndex' position);    						rowIndex++;  					}    					if (IncludeOrders)  					{  						columnShift += 17;    						worker  							.SetCell(columnShift + 0' 0' LocalizedStrings.Orders)    							.SetCell(columnShift + 0' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  							.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  							.SetCell(columnShift + 2' 1' LocalizedStrings.Str128)  							.SetCell(columnShift + 3' 1' LocalizedStrings.Str1346).SetStyle(columnShift + 3' "HH:mm:ss.fff")  							.SetCell(columnShift + 4' 1' LocalizedStrings.Str1347).SetStyle(columnShift + 4' "HH:mm:ss.fff")  							.SetCell(columnShift + 5' 1' LocalizedStrings.Str1348)  							.SetCell(columnShift + 6' 1' LocalizedStrings.Price).SetStyle(columnShift + 6' typeof(decimal))  							.SetCell(columnShift + 7' 1' LocalizedStrings.Str1323).SetStyle(columnShift + 7' typeof(decimal))  							.SetCell(columnShift + 8' 1' LocalizedStrings.Str1324)  							.SetCell(columnShift + 9' 1' LocalizedStrings.State)  							.SetCell(columnShift + 10' 1' LocalizedStrings.Str1325).SetStyle(columnShift + 10' typeof(decimal))  							.SetCell(columnShift + 11' 1' LocalizedStrings.Volume).SetStyle(columnShift + 11' typeof(decimal))  							.SetCell(columnShift + 12' 1' LocalizedStrings.Type)  							.SetCell(columnShift + 13' 1' LocalizedStrings.Str1326)  							.SetCell(columnShift + 14' 1' LocalizedStrings.Str1327)  							.SetCell(columnShift + 15' 1' LocalizedStrings.Str135);    						worker  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str1329)' null' Colors.Green)  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str238)' null' Colors.Red);    						rowIndex = 2;  						foreach (var order in strategy.Orders.ToArray())  						{  							worker  								.SetCell(columnShift + 0' rowIndex' order.Id)  								.SetCell(columnShift + 1' rowIndex' order.TransactionId)  								.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  								.SetCell(columnShift + 3' rowIndex' Format(order.Time))  								.SetCell(columnShift + 4' rowIndex' Format(order.LastChangeTime))  								.SetCell(columnShift + 5' rowIndex' Format(order.LastChangeTime - order.Time))  								.SetCell(columnShift + 6' rowIndex' order.Price)  								.SetCell(columnShift + 7' rowIndex' MathHelper.Round(order.GetAveragePrice(strategy.Connector)' Decimals))  								.SetCell(columnShift + 8' rowIndex' Format(order.State))  								.SetCell(columnShift + 9' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : LocalizedStrings.Str238))  								.SetCell(columnShift + 10' rowIndex' order.Balance)  								.SetCell(columnShift + 11' rowIndex' order.Volume)  								.SetCell(columnShift + 12' rowIndex' Format(order.Type))  								.SetCell(columnShift + 13' rowIndex' Format(order.LatencyRegistration))  								.SetCell(columnShift + 14' rowIndex' Format(order.LatencyCancellation))  								.SetCell(columnShift + 15' rowIndex' order.Comment);    							rowIndex++;  						}    						var stopOrders = strategy.StopOrders.ToArray();    						if (stopOrders.Length > 0)  						{  							rowIndex += 2;    							worker  								.SetCell(columnShift + 0' rowIndex - 1' LocalizedStrings.Str1351)    								.SetCell(columnShift + 0' rowIndex' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  								.SetCell(columnShift + 1' rowIndex' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  								.SetCell(columnShift + 2' rowIndex' LocalizedStrings.Str128)  								.SetCell(columnShift + 3' rowIndex' LocalizedStrings.Time).SetStyle(columnShift + 3' "HH:mm:ss.fff")  								.SetCell(columnShift + 4' rowIndex' LocalizedStrings.Price).SetStyle(columnShift + 4' typeof(decimal))  								.SetCell(columnShift + 5' rowIndex' LocalizedStrings.Str1324)  								.SetCell(columnShift + 6' rowIndex' LocalizedStrings.State)  								.SetCell(columnShift + 7' rowIndex' LocalizedStrings.Volume).SetStyle(columnShift + 7' typeof(decimal))  								.SetCell(columnShift + 8' rowIndex' LocalizedStrings.Str1326)  								.SetCell(columnShift + 9' rowIndex' LocalizedStrings.Str1327)  								//.SetCell(columnShift + 10' rowIndex' LocalizedStrings.Str1352).SetStyle(columnShift + 9' typeof(long))  								;    							var stopParams = stopOrders[0].Condition.Parameters.Keys.ToArray();    							for (var i = 0; i < stopParams.Length; i++)  								worker.SetCell(columnShift + 11 + i' rowIndex' stopParams[i]);    							foreach (var order in stopOrders)  							{  								worker  									.SetCell(columnShift + 0' rowIndex' order.Id)  									.SetCell(columnShift + 1' rowIndex' order.TransactionId)  									.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  									.SetCell(columnShift + 3' rowIndex' Format(order.Time))  									.SetCell(columnShift + 4' rowIndex' order.Price)  									.SetCell(columnShift + 5' rowIndex' Format(order.State))  									.SetCell(columnShift + 6' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : string.Empty))  									.SetCell(columnShift + 7' rowIndex' order.Volume)  									.SetCell(columnShift + 8' rowIndex' Format(order.LatencyRegistration))  									.SetCell(columnShift + 9' rowIndex' Format(order.LatencyCancellation))  									//.SetCell(columnShift + 10' rowIndex' order.DerivedOrder != null ? (object)order.DerivedOrder.Id : string.Empty)  									;    								for (var i = 0; i < stopParams.Length; i++)  									worker.SetCell(columnShift + 11 + i' rowIndex' order.Condition.Parameters[stopParams[i]] ?? string.Empty);    								rowIndex++;  							}  						}  					}  				}    				worker.Save(FileName' true);  			}
Magic Number,StockSharp.Algo.Strategies.Reporting,ExcelStrategyReport,C:\repos\stocksharp_stocksharp\Algo\Strategies\Reporting\ExcelStrategyReport.cs,Generate,The following statement contains a magic number: using (var worker = hasTemplate ? new ExcelWorker() : new ExcelWorker(Template))  			{  				foreach (var strategy in Strategies)  				{  					if (Template.IsEmpty())  					{  						worker.RenameSheet(strategy.Name);  					}  					else  					{  						if (worker.ContainsSheet(strategy.Name))  							worker.AddSheet(strategy.Name);  					}    					worker  						.SetCell(0' 0' LocalizedStrings.Str1331)    						.SetCell(0' 1' LocalizedStrings.Security + ":")  						.SetCell(1' 1' strategy.Security != null ? strategy.Security.Id : string.Empty)    						.SetCell(0' 2' LocalizedStrings.Portfolio + ":")  						.SetCell(1' 2' strategy.Portfolio != null ? strategy.Portfolio.Name : string.Empty)    						.SetCell(0' 3' LocalizedStrings.Str1334)  						.SetCell(1' 3' Format(strategy.TotalWorkingTime))    						.SetCell(0' 4' LocalizedStrings.Str1335)  						//.SetCell(1' 4' FormatTime(base.Strategy.TotalCPUTime))    						.SetCell(0' 5' LocalizedStrings.Str862 + ":")  						.SetCell(1' 5' strategy.Position)    						.SetCell(0' 6' LocalizedStrings.PnL + ":")  						.SetCell(1' 6' strategy.PnL)    						.SetCell(0' 7' LocalizedStrings.Str159 + ":")  						.SetCell(1' 7' strategy.Commission)    						.SetCell(0' 8' LocalizedStrings.Str163 + ":")  						.SetCell(1' 8' strategy.Slippage)    						.SetCell(0' 9' LocalizedStrings.Str161 + ":")  						.SetCell(1' 9' Format(strategy.Latency));    					var rowIndex = 11;    					foreach (var parameter in strategy.StatisticManager.Parameters.SyncGet(c => c.ToArray()))  					{  						var value = parameter.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' parameter.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					rowIndex += 2;  					worker.SetCell(0' rowIndex' LocalizedStrings.Str1340);  					rowIndex++;    					foreach (var strategyParam in strategy.Parameters.CachedValues)  					{  						var value = strategyParam.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' strategyParam.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					//rowIndex += 2;  					//worker.SetCell(0' rowIndex' "Комиссия по типам:");  					//rowIndex++;    					//foreach (var group in Strategy.CommissionManager.Rules.SyncGet(c => c.ToArray()).GroupBy(c => c.GetType().GetDisplayName()))  					//{  					//	var commission = group.Sum(r => r.Commission);    					//	if (commission == 0)  					//		continue;    					//	worker  					//		.SetCell(0' rowIndex' group.Key)  					//		.SetCell(1' rowIndex' commission);    					//	rowIndex++;  					//}    					var columnShift = 3;    					worker  						.SetCell(columnShift + 0' 0' LocalizedStrings.Str985)    						.SetCell(columnShift + 0' 1' LocalizedStrings.Str1192).SetStyle(columnShift + 0' typeof(long))  						.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  						.SetCell(columnShift + 2' 1' LocalizedStrings.Time).SetStyle(columnShift + 2' "HH:mm:ss.fff")  						.SetCell(columnShift + 3' 1' LocalizedStrings.Price).SetStyle(columnShift + 3' typeof(decimal))  						.SetCell(columnShift + 4' 1' LocalizedStrings.Str1341).SetStyle(columnShift + 4' typeof(decimal))  						.SetCell(columnShift + 5' 1' LocalizedStrings.Volume).SetStyle(columnShift + 5' typeof(decimal))  						.SetCell(columnShift + 6' 1' LocalizedStrings.Str128)  						.SetCell(columnShift + 7' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 7' typeof(long))  						.SetCell(columnShift + 8' 1' LocalizedStrings.Str163).SetStyle(columnShift + 8' typeof(decimal))  						.SetCell(columnShift + 9' 1' LocalizedStrings.Str135)  						.SetCell(columnShift + 10' 1' LocalizedStrings.Str1342).SetStyle(columnShift + 11' typeof(decimal))  						.SetCell(columnShift + 11' 1' LocalizedStrings.Str1343).SetStyle(columnShift + 12' typeof(decimal))  						.SetCell(columnShift + 12' 1' LocalizedStrings.Str1344).SetStyle(columnShift + 13' typeof(decimal))  						.SetCell(columnShift + 13' 1' LocalizedStrings.Str1345).SetStyle(columnShift + 14' typeof(decimal))  						.SetCell(columnShift + 14' 1' LocalizedStrings.Str862).SetStyle(columnShift + 15' typeof(decimal));    					worker  						.SetConditionalFormatting(columnShift + 10' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 11' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 12' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 13' ComparisonOperator.Less' "0"' null' Colors.Red);    					var totalPnL = 0m;  					var position = 0m;    					var queues = new Dictionary<Security' PnLQueue>();    					rowIndex = 2;  					foreach (var trade in strategy.MyTrades.ToArray())  					{  						var info = strategy.PnLManager.ProcessMessage(trade.ToMessage());    						totalPnL += info.PnL;  						position += trade.GetPosition() ?? 0;    						var queue = queues.SafeAdd(trade.Trade.Security' key => new PnLQueue(key.ToSecurityId()));    						var localInfo = queue.Process(trade.ToMessage());    						worker  							.SetCell(columnShift + 0' rowIndex' trade.Trade.Id)  							.SetCell(columnShift + 1' rowIndex' trade.Order.TransactionId)  							.SetCell(columnShift + 2' rowIndex' Format(trade.Trade.Time))  							.SetCell(columnShift + 3' rowIndex' trade.Trade.Price)  							.SetCell(columnShift + 4' rowIndex' trade.Order.Price)  							.SetCell(columnShift + 5' rowIndex' trade.Trade.Volume)  							.SetCell(columnShift + 6' rowIndex' Format(trade.Order.Direction))  							.SetCell(columnShift + 7' rowIndex' trade.Order.Id)  							.SetCell(columnShift + 8' rowIndex' trade.Slippage)  							.SetCell(columnShift + 9' rowIndex' trade.Order.Comment)  							.SetCell(columnShift + 10' rowIndex' MathHelper.Round(info.PnL' Decimals))  							.SetCell(columnShift + 11' rowIndex' MathHelper.Round(localInfo.PnL' Decimals))  							.SetCell(columnShift + 12' rowIndex' MathHelper.Round(totalPnL' Decimals))  							.SetCell(columnShift + 13' rowIndex' MathHelper.Round(queue.RealizedPnL' Decimals))  							.SetCell(columnShift + 14' rowIndex' position);    						rowIndex++;  					}    					if (IncludeOrders)  					{  						columnShift += 17;    						worker  							.SetCell(columnShift + 0' 0' LocalizedStrings.Orders)    							.SetCell(columnShift + 0' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  							.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  							.SetCell(columnShift + 2' 1' LocalizedStrings.Str128)  							.SetCell(columnShift + 3' 1' LocalizedStrings.Str1346).SetStyle(columnShift + 3' "HH:mm:ss.fff")  							.SetCell(columnShift + 4' 1' LocalizedStrings.Str1347).SetStyle(columnShift + 4' "HH:mm:ss.fff")  							.SetCell(columnShift + 5' 1' LocalizedStrings.Str1348)  							.SetCell(columnShift + 6' 1' LocalizedStrings.Price).SetStyle(columnShift + 6' typeof(decimal))  							.SetCell(columnShift + 7' 1' LocalizedStrings.Str1323).SetStyle(columnShift + 7' typeof(decimal))  							.SetCell(columnShift + 8' 1' LocalizedStrings.Str1324)  							.SetCell(columnShift + 9' 1' LocalizedStrings.State)  							.SetCell(columnShift + 10' 1' LocalizedStrings.Str1325).SetStyle(columnShift + 10' typeof(decimal))  							.SetCell(columnShift + 11' 1' LocalizedStrings.Volume).SetStyle(columnShift + 11' typeof(decimal))  							.SetCell(columnShift + 12' 1' LocalizedStrings.Type)  							.SetCell(columnShift + 13' 1' LocalizedStrings.Str1326)  							.SetCell(columnShift + 14' 1' LocalizedStrings.Str1327)  							.SetCell(columnShift + 15' 1' LocalizedStrings.Str135);    						worker  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str1329)' null' Colors.Green)  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str238)' null' Colors.Red);    						rowIndex = 2;  						foreach (var order in strategy.Orders.ToArray())  						{  							worker  								.SetCell(columnShift + 0' rowIndex' order.Id)  								.SetCell(columnShift + 1' rowIndex' order.TransactionId)  								.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  								.SetCell(columnShift + 3' rowIndex' Format(order.Time))  								.SetCell(columnShift + 4' rowIndex' Format(order.LastChangeTime))  								.SetCell(columnShift + 5' rowIndex' Format(order.LastChangeTime - order.Time))  								.SetCell(columnShift + 6' rowIndex' order.Price)  								.SetCell(columnShift + 7' rowIndex' MathHelper.Round(order.GetAveragePrice(strategy.Connector)' Decimals))  								.SetCell(columnShift + 8' rowIndex' Format(order.State))  								.SetCell(columnShift + 9' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : LocalizedStrings.Str238))  								.SetCell(columnShift + 10' rowIndex' order.Balance)  								.SetCell(columnShift + 11' rowIndex' order.Volume)  								.SetCell(columnShift + 12' rowIndex' Format(order.Type))  								.SetCell(columnShift + 13' rowIndex' Format(order.LatencyRegistration))  								.SetCell(columnShift + 14' rowIndex' Format(order.LatencyCancellation))  								.SetCell(columnShift + 15' rowIndex' order.Comment);    							rowIndex++;  						}    						var stopOrders = strategy.StopOrders.ToArray();    						if (stopOrders.Length > 0)  						{  							rowIndex += 2;    							worker  								.SetCell(columnShift + 0' rowIndex - 1' LocalizedStrings.Str1351)    								.SetCell(columnShift + 0' rowIndex' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  								.SetCell(columnShift + 1' rowIndex' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  								.SetCell(columnShift + 2' rowIndex' LocalizedStrings.Str128)  								.SetCell(columnShift + 3' rowIndex' LocalizedStrings.Time).SetStyle(columnShift + 3' "HH:mm:ss.fff")  								.SetCell(columnShift + 4' rowIndex' LocalizedStrings.Price).SetStyle(columnShift + 4' typeof(decimal))  								.SetCell(columnShift + 5' rowIndex' LocalizedStrings.Str1324)  								.SetCell(columnShift + 6' rowIndex' LocalizedStrings.State)  								.SetCell(columnShift + 7' rowIndex' LocalizedStrings.Volume).SetStyle(columnShift + 7' typeof(decimal))  								.SetCell(columnShift + 8' rowIndex' LocalizedStrings.Str1326)  								.SetCell(columnShift + 9' rowIndex' LocalizedStrings.Str1327)  								//.SetCell(columnShift + 10' rowIndex' LocalizedStrings.Str1352).SetStyle(columnShift + 9' typeof(long))  								;    							var stopParams = stopOrders[0].Condition.Parameters.Keys.ToArray();    							for (var i = 0; i < stopParams.Length; i++)  								worker.SetCell(columnShift + 11 + i' rowIndex' stopParams[i]);    							foreach (var order in stopOrders)  							{  								worker  									.SetCell(columnShift + 0' rowIndex' order.Id)  									.SetCell(columnShift + 1' rowIndex' order.TransactionId)  									.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  									.SetCell(columnShift + 3' rowIndex' Format(order.Time))  									.SetCell(columnShift + 4' rowIndex' order.Price)  									.SetCell(columnShift + 5' rowIndex' Format(order.State))  									.SetCell(columnShift + 6' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : string.Empty))  									.SetCell(columnShift + 7' rowIndex' order.Volume)  									.SetCell(columnShift + 8' rowIndex' Format(order.LatencyRegistration))  									.SetCell(columnShift + 9' rowIndex' Format(order.LatencyCancellation))  									//.SetCell(columnShift + 10' rowIndex' order.DerivedOrder != null ? (object)order.DerivedOrder.Id : string.Empty)  									;    								for (var i = 0; i < stopParams.Length; i++)  									worker.SetCell(columnShift + 11 + i' rowIndex' order.Condition.Parameters[stopParams[i]] ?? string.Empty);    								rowIndex++;  							}  						}  					}  				}    				worker.Save(FileName' true);  			}
Magic Number,StockSharp.Algo.Strategies.Reporting,ExcelStrategyReport,C:\repos\stocksharp_stocksharp\Algo\Strategies\Reporting\ExcelStrategyReport.cs,Generate,The following statement contains a magic number: using (var worker = hasTemplate ? new ExcelWorker() : new ExcelWorker(Template))  			{  				foreach (var strategy in Strategies)  				{  					if (Template.IsEmpty())  					{  						worker.RenameSheet(strategy.Name);  					}  					else  					{  						if (worker.ContainsSheet(strategy.Name))  							worker.AddSheet(strategy.Name);  					}    					worker  						.SetCell(0' 0' LocalizedStrings.Str1331)    						.SetCell(0' 1' LocalizedStrings.Security + ":")  						.SetCell(1' 1' strategy.Security != null ? strategy.Security.Id : string.Empty)    						.SetCell(0' 2' LocalizedStrings.Portfolio + ":")  						.SetCell(1' 2' strategy.Portfolio != null ? strategy.Portfolio.Name : string.Empty)    						.SetCell(0' 3' LocalizedStrings.Str1334)  						.SetCell(1' 3' Format(strategy.TotalWorkingTime))    						.SetCell(0' 4' LocalizedStrings.Str1335)  						//.SetCell(1' 4' FormatTime(base.Strategy.TotalCPUTime))    						.SetCell(0' 5' LocalizedStrings.Str862 + ":")  						.SetCell(1' 5' strategy.Position)    						.SetCell(0' 6' LocalizedStrings.PnL + ":")  						.SetCell(1' 6' strategy.PnL)    						.SetCell(0' 7' LocalizedStrings.Str159 + ":")  						.SetCell(1' 7' strategy.Commission)    						.SetCell(0' 8' LocalizedStrings.Str163 + ":")  						.SetCell(1' 8' strategy.Slippage)    						.SetCell(0' 9' LocalizedStrings.Str161 + ":")  						.SetCell(1' 9' Format(strategy.Latency));    					var rowIndex = 11;    					foreach (var parameter in strategy.StatisticManager.Parameters.SyncGet(c => c.ToArray()))  					{  						var value = parameter.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' parameter.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					rowIndex += 2;  					worker.SetCell(0' rowIndex' LocalizedStrings.Str1340);  					rowIndex++;    					foreach (var strategyParam in strategy.Parameters.CachedValues)  					{  						var value = strategyParam.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' strategyParam.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					//rowIndex += 2;  					//worker.SetCell(0' rowIndex' "Комиссия по типам:");  					//rowIndex++;    					//foreach (var group in Strategy.CommissionManager.Rules.SyncGet(c => c.ToArray()).GroupBy(c => c.GetType().GetDisplayName()))  					//{  					//	var commission = group.Sum(r => r.Commission);    					//	if (commission == 0)  					//		continue;    					//	worker  					//		.SetCell(0' rowIndex' group.Key)  					//		.SetCell(1' rowIndex' commission);    					//	rowIndex++;  					//}    					var columnShift = 3;    					worker  						.SetCell(columnShift + 0' 0' LocalizedStrings.Str985)    						.SetCell(columnShift + 0' 1' LocalizedStrings.Str1192).SetStyle(columnShift + 0' typeof(long))  						.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  						.SetCell(columnShift + 2' 1' LocalizedStrings.Time).SetStyle(columnShift + 2' "HH:mm:ss.fff")  						.SetCell(columnShift + 3' 1' LocalizedStrings.Price).SetStyle(columnShift + 3' typeof(decimal))  						.SetCell(columnShift + 4' 1' LocalizedStrings.Str1341).SetStyle(columnShift + 4' typeof(decimal))  						.SetCell(columnShift + 5' 1' LocalizedStrings.Volume).SetStyle(columnShift + 5' typeof(decimal))  						.SetCell(columnShift + 6' 1' LocalizedStrings.Str128)  						.SetCell(columnShift + 7' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 7' typeof(long))  						.SetCell(columnShift + 8' 1' LocalizedStrings.Str163).SetStyle(columnShift + 8' typeof(decimal))  						.SetCell(columnShift + 9' 1' LocalizedStrings.Str135)  						.SetCell(columnShift + 10' 1' LocalizedStrings.Str1342).SetStyle(columnShift + 11' typeof(decimal))  						.SetCell(columnShift + 11' 1' LocalizedStrings.Str1343).SetStyle(columnShift + 12' typeof(decimal))  						.SetCell(columnShift + 12' 1' LocalizedStrings.Str1344).SetStyle(columnShift + 13' typeof(decimal))  						.SetCell(columnShift + 13' 1' LocalizedStrings.Str1345).SetStyle(columnShift + 14' typeof(decimal))  						.SetCell(columnShift + 14' 1' LocalizedStrings.Str862).SetStyle(columnShift + 15' typeof(decimal));    					worker  						.SetConditionalFormatting(columnShift + 10' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 11' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 12' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 13' ComparisonOperator.Less' "0"' null' Colors.Red);    					var totalPnL = 0m;  					var position = 0m;    					var queues = new Dictionary<Security' PnLQueue>();    					rowIndex = 2;  					foreach (var trade in strategy.MyTrades.ToArray())  					{  						var info = strategy.PnLManager.ProcessMessage(trade.ToMessage());    						totalPnL += info.PnL;  						position += trade.GetPosition() ?? 0;    						var queue = queues.SafeAdd(trade.Trade.Security' key => new PnLQueue(key.ToSecurityId()));    						var localInfo = queue.Process(trade.ToMessage());    						worker  							.SetCell(columnShift + 0' rowIndex' trade.Trade.Id)  							.SetCell(columnShift + 1' rowIndex' trade.Order.TransactionId)  							.SetCell(columnShift + 2' rowIndex' Format(trade.Trade.Time))  							.SetCell(columnShift + 3' rowIndex' trade.Trade.Price)  							.SetCell(columnShift + 4' rowIndex' trade.Order.Price)  							.SetCell(columnShift + 5' rowIndex' trade.Trade.Volume)  							.SetCell(columnShift + 6' rowIndex' Format(trade.Order.Direction))  							.SetCell(columnShift + 7' rowIndex' trade.Order.Id)  							.SetCell(columnShift + 8' rowIndex' trade.Slippage)  							.SetCell(columnShift + 9' rowIndex' trade.Order.Comment)  							.SetCell(columnShift + 10' rowIndex' MathHelper.Round(info.PnL' Decimals))  							.SetCell(columnShift + 11' rowIndex' MathHelper.Round(localInfo.PnL' Decimals))  							.SetCell(columnShift + 12' rowIndex' MathHelper.Round(totalPnL' Decimals))  							.SetCell(columnShift + 13' rowIndex' MathHelper.Round(queue.RealizedPnL' Decimals))  							.SetCell(columnShift + 14' rowIndex' position);    						rowIndex++;  					}    					if (IncludeOrders)  					{  						columnShift += 17;    						worker  							.SetCell(columnShift + 0' 0' LocalizedStrings.Orders)    							.SetCell(columnShift + 0' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  							.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  							.SetCell(columnShift + 2' 1' LocalizedStrings.Str128)  							.SetCell(columnShift + 3' 1' LocalizedStrings.Str1346).SetStyle(columnShift + 3' "HH:mm:ss.fff")  							.SetCell(columnShift + 4' 1' LocalizedStrings.Str1347).SetStyle(columnShift + 4' "HH:mm:ss.fff")  							.SetCell(columnShift + 5' 1' LocalizedStrings.Str1348)  							.SetCell(columnShift + 6' 1' LocalizedStrings.Price).SetStyle(columnShift + 6' typeof(decimal))  							.SetCell(columnShift + 7' 1' LocalizedStrings.Str1323).SetStyle(columnShift + 7' typeof(decimal))  							.SetCell(columnShift + 8' 1' LocalizedStrings.Str1324)  							.SetCell(columnShift + 9' 1' LocalizedStrings.State)  							.SetCell(columnShift + 10' 1' LocalizedStrings.Str1325).SetStyle(columnShift + 10' typeof(decimal))  							.SetCell(columnShift + 11' 1' LocalizedStrings.Volume).SetStyle(columnShift + 11' typeof(decimal))  							.SetCell(columnShift + 12' 1' LocalizedStrings.Type)  							.SetCell(columnShift + 13' 1' LocalizedStrings.Str1326)  							.SetCell(columnShift + 14' 1' LocalizedStrings.Str1327)  							.SetCell(columnShift + 15' 1' LocalizedStrings.Str135);    						worker  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str1329)' null' Colors.Green)  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str238)' null' Colors.Red);    						rowIndex = 2;  						foreach (var order in strategy.Orders.ToArray())  						{  							worker  								.SetCell(columnShift + 0' rowIndex' order.Id)  								.SetCell(columnShift + 1' rowIndex' order.TransactionId)  								.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  								.SetCell(columnShift + 3' rowIndex' Format(order.Time))  								.SetCell(columnShift + 4' rowIndex' Format(order.LastChangeTime))  								.SetCell(columnShift + 5' rowIndex' Format(order.LastChangeTime - order.Time))  								.SetCell(columnShift + 6' rowIndex' order.Price)  								.SetCell(columnShift + 7' rowIndex' MathHelper.Round(order.GetAveragePrice(strategy.Connector)' Decimals))  								.SetCell(columnShift + 8' rowIndex' Format(order.State))  								.SetCell(columnShift + 9' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : LocalizedStrings.Str238))  								.SetCell(columnShift + 10' rowIndex' order.Balance)  								.SetCell(columnShift + 11' rowIndex' order.Volume)  								.SetCell(columnShift + 12' rowIndex' Format(order.Type))  								.SetCell(columnShift + 13' rowIndex' Format(order.LatencyRegistration))  								.SetCell(columnShift + 14' rowIndex' Format(order.LatencyCancellation))  								.SetCell(columnShift + 15' rowIndex' order.Comment);    							rowIndex++;  						}    						var stopOrders = strategy.StopOrders.ToArray();    						if (stopOrders.Length > 0)  						{  							rowIndex += 2;    							worker  								.SetCell(columnShift + 0' rowIndex - 1' LocalizedStrings.Str1351)    								.SetCell(columnShift + 0' rowIndex' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  								.SetCell(columnShift + 1' rowIndex' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  								.SetCell(columnShift + 2' rowIndex' LocalizedStrings.Str128)  								.SetCell(columnShift + 3' rowIndex' LocalizedStrings.Time).SetStyle(columnShift + 3' "HH:mm:ss.fff")  								.SetCell(columnShift + 4' rowIndex' LocalizedStrings.Price).SetStyle(columnShift + 4' typeof(decimal))  								.SetCell(columnShift + 5' rowIndex' LocalizedStrings.Str1324)  								.SetCell(columnShift + 6' rowIndex' LocalizedStrings.State)  								.SetCell(columnShift + 7' rowIndex' LocalizedStrings.Volume).SetStyle(columnShift + 7' typeof(decimal))  								.SetCell(columnShift + 8' rowIndex' LocalizedStrings.Str1326)  								.SetCell(columnShift + 9' rowIndex' LocalizedStrings.Str1327)  								//.SetCell(columnShift + 10' rowIndex' LocalizedStrings.Str1352).SetStyle(columnShift + 9' typeof(long))  								;    							var stopParams = stopOrders[0].Condition.Parameters.Keys.ToArray();    							for (var i = 0; i < stopParams.Length; i++)  								worker.SetCell(columnShift + 11 + i' rowIndex' stopParams[i]);    							foreach (var order in stopOrders)  							{  								worker  									.SetCell(columnShift + 0' rowIndex' order.Id)  									.SetCell(columnShift + 1' rowIndex' order.TransactionId)  									.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  									.SetCell(columnShift + 3' rowIndex' Format(order.Time))  									.SetCell(columnShift + 4' rowIndex' order.Price)  									.SetCell(columnShift + 5' rowIndex' Format(order.State))  									.SetCell(columnShift + 6' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : string.Empty))  									.SetCell(columnShift + 7' rowIndex' order.Volume)  									.SetCell(columnShift + 8' rowIndex' Format(order.LatencyRegistration))  									.SetCell(columnShift + 9' rowIndex' Format(order.LatencyCancellation))  									//.SetCell(columnShift + 10' rowIndex' order.DerivedOrder != null ? (object)order.DerivedOrder.Id : string.Empty)  									;    								for (var i = 0; i < stopParams.Length; i++)  									worker.SetCell(columnShift + 11 + i' rowIndex' order.Condition.Parameters[stopParams[i]] ?? string.Empty);    								rowIndex++;  							}  						}  					}  				}    				worker.Save(FileName' true);  			}
Magic Number,StockSharp.Algo.Strategies.Reporting,ExcelStrategyReport,C:\repos\stocksharp_stocksharp\Algo\Strategies\Reporting\ExcelStrategyReport.cs,Generate,The following statement contains a magic number: using (var worker = hasTemplate ? new ExcelWorker() : new ExcelWorker(Template))  			{  				foreach (var strategy in Strategies)  				{  					if (Template.IsEmpty())  					{  						worker.RenameSheet(strategy.Name);  					}  					else  					{  						if (worker.ContainsSheet(strategy.Name))  							worker.AddSheet(strategy.Name);  					}    					worker  						.SetCell(0' 0' LocalizedStrings.Str1331)    						.SetCell(0' 1' LocalizedStrings.Security + ":")  						.SetCell(1' 1' strategy.Security != null ? strategy.Security.Id : string.Empty)    						.SetCell(0' 2' LocalizedStrings.Portfolio + ":")  						.SetCell(1' 2' strategy.Portfolio != null ? strategy.Portfolio.Name : string.Empty)    						.SetCell(0' 3' LocalizedStrings.Str1334)  						.SetCell(1' 3' Format(strategy.TotalWorkingTime))    						.SetCell(0' 4' LocalizedStrings.Str1335)  						//.SetCell(1' 4' FormatTime(base.Strategy.TotalCPUTime))    						.SetCell(0' 5' LocalizedStrings.Str862 + ":")  						.SetCell(1' 5' strategy.Position)    						.SetCell(0' 6' LocalizedStrings.PnL + ":")  						.SetCell(1' 6' strategy.PnL)    						.SetCell(0' 7' LocalizedStrings.Str159 + ":")  						.SetCell(1' 7' strategy.Commission)    						.SetCell(0' 8' LocalizedStrings.Str163 + ":")  						.SetCell(1' 8' strategy.Slippage)    						.SetCell(0' 9' LocalizedStrings.Str161 + ":")  						.SetCell(1' 9' Format(strategy.Latency));    					var rowIndex = 11;    					foreach (var parameter in strategy.StatisticManager.Parameters.SyncGet(c => c.ToArray()))  					{  						var value = parameter.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' parameter.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					rowIndex += 2;  					worker.SetCell(0' rowIndex' LocalizedStrings.Str1340);  					rowIndex++;    					foreach (var strategyParam in strategy.Parameters.CachedValues)  					{  						var value = strategyParam.Value;    						if (value is TimeSpan)  							value = Format((TimeSpan)value);  						else if (value is decimal)  							value = MathHelper.Round((decimal)value' Decimals);    						worker  							.SetCell(0' rowIndex' strategyParam.Name)  							.SetCell(1' rowIndex' value);    						rowIndex++;  					}    					//rowIndex += 2;  					//worker.SetCell(0' rowIndex' "Комиссия по типам:");  					//rowIndex++;    					//foreach (var group in Strategy.CommissionManager.Rules.SyncGet(c => c.ToArray()).GroupBy(c => c.GetType().GetDisplayName()))  					//{  					//	var commission = group.Sum(r => r.Commission);    					//	if (commission == 0)  					//		continue;    					//	worker  					//		.SetCell(0' rowIndex' group.Key)  					//		.SetCell(1' rowIndex' commission);    					//	rowIndex++;  					//}    					var columnShift = 3;    					worker  						.SetCell(columnShift + 0' 0' LocalizedStrings.Str985)    						.SetCell(columnShift + 0' 1' LocalizedStrings.Str1192).SetStyle(columnShift + 0' typeof(long))  						.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  						.SetCell(columnShift + 2' 1' LocalizedStrings.Time).SetStyle(columnShift + 2' "HH:mm:ss.fff")  						.SetCell(columnShift + 3' 1' LocalizedStrings.Price).SetStyle(columnShift + 3' typeof(decimal))  						.SetCell(columnShift + 4' 1' LocalizedStrings.Str1341).SetStyle(columnShift + 4' typeof(decimal))  						.SetCell(columnShift + 5' 1' LocalizedStrings.Volume).SetStyle(columnShift + 5' typeof(decimal))  						.SetCell(columnShift + 6' 1' LocalizedStrings.Str128)  						.SetCell(columnShift + 7' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 7' typeof(long))  						.SetCell(columnShift + 8' 1' LocalizedStrings.Str163).SetStyle(columnShift + 8' typeof(decimal))  						.SetCell(columnShift + 9' 1' LocalizedStrings.Str135)  						.SetCell(columnShift + 10' 1' LocalizedStrings.Str1342).SetStyle(columnShift + 11' typeof(decimal))  						.SetCell(columnShift + 11' 1' LocalizedStrings.Str1343).SetStyle(columnShift + 12' typeof(decimal))  						.SetCell(columnShift + 12' 1' LocalizedStrings.Str1344).SetStyle(columnShift + 13' typeof(decimal))  						.SetCell(columnShift + 13' 1' LocalizedStrings.Str1345).SetStyle(columnShift + 14' typeof(decimal))  						.SetCell(columnShift + 14' 1' LocalizedStrings.Str862).SetStyle(columnShift + 15' typeof(decimal));    					worker  						.SetConditionalFormatting(columnShift + 10' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 11' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 12' ComparisonOperator.Less' "0"' null' Colors.Red)  						.SetConditionalFormatting(columnShift + 13' ComparisonOperator.Less' "0"' null' Colors.Red);    					var totalPnL = 0m;  					var position = 0m;    					var queues = new Dictionary<Security' PnLQueue>();    					rowIndex = 2;  					foreach (var trade in strategy.MyTrades.ToArray())  					{  						var info = strategy.PnLManager.ProcessMessage(trade.ToMessage());    						totalPnL += info.PnL;  						position += trade.GetPosition() ?? 0;    						var queue = queues.SafeAdd(trade.Trade.Security' key => new PnLQueue(key.ToSecurityId()));    						var localInfo = queue.Process(trade.ToMessage());    						worker  							.SetCell(columnShift + 0' rowIndex' trade.Trade.Id)  							.SetCell(columnShift + 1' rowIndex' trade.Order.TransactionId)  							.SetCell(columnShift + 2' rowIndex' Format(trade.Trade.Time))  							.SetCell(columnShift + 3' rowIndex' trade.Trade.Price)  							.SetCell(columnShift + 4' rowIndex' trade.Order.Price)  							.SetCell(columnShift + 5' rowIndex' trade.Trade.Volume)  							.SetCell(columnShift + 6' rowIndex' Format(trade.Order.Direction))  							.SetCell(columnShift + 7' rowIndex' trade.Order.Id)  							.SetCell(columnShift + 8' rowIndex' trade.Slippage)  							.SetCell(columnShift + 9' rowIndex' trade.Order.Comment)  							.SetCell(columnShift + 10' rowIndex' MathHelper.Round(info.PnL' Decimals))  							.SetCell(columnShift + 11' rowIndex' MathHelper.Round(localInfo.PnL' Decimals))  							.SetCell(columnShift + 12' rowIndex' MathHelper.Round(totalPnL' Decimals))  							.SetCell(columnShift + 13' rowIndex' MathHelper.Round(queue.RealizedPnL' Decimals))  							.SetCell(columnShift + 14' rowIndex' position);    						rowIndex++;  					}    					if (IncludeOrders)  					{  						columnShift += 17;    						worker  							.SetCell(columnShift + 0' 0' LocalizedStrings.Orders)    							.SetCell(columnShift + 0' 1' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  							.SetCell(columnShift + 1' 1' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  							.SetCell(columnShift + 2' 1' LocalizedStrings.Str128)  							.SetCell(columnShift + 3' 1' LocalizedStrings.Str1346).SetStyle(columnShift + 3' "HH:mm:ss.fff")  							.SetCell(columnShift + 4' 1' LocalizedStrings.Str1347).SetStyle(columnShift + 4' "HH:mm:ss.fff")  							.SetCell(columnShift + 5' 1' LocalizedStrings.Str1348)  							.SetCell(columnShift + 6' 1' LocalizedStrings.Price).SetStyle(columnShift + 6' typeof(decimal))  							.SetCell(columnShift + 7' 1' LocalizedStrings.Str1323).SetStyle(columnShift + 7' typeof(decimal))  							.SetCell(columnShift + 8' 1' LocalizedStrings.Str1324)  							.SetCell(columnShift + 9' 1' LocalizedStrings.State)  							.SetCell(columnShift + 10' 1' LocalizedStrings.Str1325).SetStyle(columnShift + 10' typeof(decimal))  							.SetCell(columnShift + 11' 1' LocalizedStrings.Volume).SetStyle(columnShift + 11' typeof(decimal))  							.SetCell(columnShift + 12' 1' LocalizedStrings.Type)  							.SetCell(columnShift + 13' 1' LocalizedStrings.Str1326)  							.SetCell(columnShift + 14' 1' LocalizedStrings.Str1327)  							.SetCell(columnShift + 15' 1' LocalizedStrings.Str135);    						worker  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str1329)' null' Colors.Green)  							.SetConditionalFormatting(columnShift + 9' ComparisonOperator.Equal' "\"{0}\"".Put(LocalizedStrings.Str238)' null' Colors.Red);    						rowIndex = 2;  						foreach (var order in strategy.Orders.ToArray())  						{  							worker  								.SetCell(columnShift + 0' rowIndex' order.Id)  								.SetCell(columnShift + 1' rowIndex' order.TransactionId)  								.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  								.SetCell(columnShift + 3' rowIndex' Format(order.Time))  								.SetCell(columnShift + 4' rowIndex' Format(order.LastChangeTime))  								.SetCell(columnShift + 5' rowIndex' Format(order.LastChangeTime - order.Time))  								.SetCell(columnShift + 6' rowIndex' order.Price)  								.SetCell(columnShift + 7' rowIndex' MathHelper.Round(order.GetAveragePrice(strategy.Connector)' Decimals))  								.SetCell(columnShift + 8' rowIndex' Format(order.State))  								.SetCell(columnShift + 9' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : LocalizedStrings.Str238))  								.SetCell(columnShift + 10' rowIndex' order.Balance)  								.SetCell(columnShift + 11' rowIndex' order.Volume)  								.SetCell(columnShift + 12' rowIndex' Format(order.Type))  								.SetCell(columnShift + 13' rowIndex' Format(order.LatencyRegistration))  								.SetCell(columnShift + 14' rowIndex' Format(order.LatencyCancellation))  								.SetCell(columnShift + 15' rowIndex' order.Comment);    							rowIndex++;  						}    						var stopOrders = strategy.StopOrders.ToArray();    						if (stopOrders.Length > 0)  						{  							rowIndex += 2;    							worker  								.SetCell(columnShift + 0' rowIndex - 1' LocalizedStrings.Str1351)    								.SetCell(columnShift + 0' rowIndex' LocalizedStrings.Str1190).SetStyle(columnShift + 0' typeof(long))  								.SetCell(columnShift + 1' rowIndex' LocalizedStrings.Transaction).SetStyle(columnShift + 1' typeof(long))  								.SetCell(columnShift + 2' rowIndex' LocalizedStrings.Str128)  								.SetCell(columnShift + 3' rowIndex' LocalizedStrings.Time).SetStyle(columnShift + 3' "HH:mm:ss.fff")  								.SetCell(columnShift + 4' rowIndex' LocalizedStrings.Price).SetStyle(columnShift + 4' typeof(decimal))  								.SetCell(columnShift + 5' rowIndex' LocalizedStrings.Str1324)  								.SetCell(columnShift + 6' rowIndex' LocalizedStrings.State)  								.SetCell(columnShift + 7' rowIndex' LocalizedStrings.Volume).SetStyle(columnShift + 7' typeof(decimal))  								.SetCell(columnShift + 8' rowIndex' LocalizedStrings.Str1326)  								.SetCell(columnShift + 9' rowIndex' LocalizedStrings.Str1327)  								//.SetCell(columnShift + 10' rowIndex' LocalizedStrings.Str1352).SetStyle(columnShift + 9' typeof(long))  								;    							var stopParams = stopOrders[0].Condition.Parameters.Keys.ToArray();    							for (var i = 0; i < stopParams.Length; i++)  								worker.SetCell(columnShift + 11 + i' rowIndex' stopParams[i]);    							foreach (var order in stopOrders)  							{  								worker  									.SetCell(columnShift + 0' rowIndex' order.Id)  									.SetCell(columnShift + 1' rowIndex' order.TransactionId)  									.SetCell(columnShift + 2' rowIndex' Format(order.Direction))  									.SetCell(columnShift + 3' rowIndex' Format(order.Time))  									.SetCell(columnShift + 4' rowIndex' order.Price)  									.SetCell(columnShift + 5' rowIndex' Format(order.State))  									.SetCell(columnShift + 6' rowIndex' order.IsMatched() ? LocalizedStrings.Str1328 : (order.IsCanceled() ? LocalizedStrings.Str1329 : string.Empty))  									.SetCell(columnShift + 7' rowIndex' order.Volume)  									.SetCell(columnShift + 8' rowIndex' Format(order.LatencyRegistration))  									.SetCell(columnShift + 9' rowIndex' Format(order.LatencyCancellation))  									//.SetCell(columnShift + 10' rowIndex' order.DerivedOrder != null ? (object)order.DerivedOrder.Id : string.Empty)  									;    								for (var i = 0; i < stopParams.Length; i++)  									worker.SetCell(columnShift + 11 + i' rowIndex' order.Condition.Parameters[stopParams[i]] ?? string.Empty);    								rowIndex++;  							}  						}  					}  				}    				worker.Save(FileName' true);  			}
Magic Number,StockSharp.Algo.Strategies.Testing,BatchEmulation,C:\repos\stocksharp_stocksharp\Algo\Strategies\Testing\BatchEmulation.cs,EmulationConnectorOnStateChanged,The following statement contains a magic number: switch (EmulationConnector.State)  			{  				case EmulationStates.Starting:  				{  					if (_prev != EmulationStates.Stopped)  						break;    					_nextTime = EmulationSettings.StartTime + _progressStep;  					CurrentProgress = 0;    					ApplySettings();  					break;  				}    				case EmulationStates.Started:  					State = EmulationStates.Started;  					break;    				case EmulationStates.Stopping:  					break;    				case EmulationStates.Stopped:  				{  					if (!_cancelEmulation)  						CurrentProgress = 100;    					OnEmulationStopped();  					break;  				}  			}
Magic Number,StockSharp.Algo.Strategies.Testing,BatchEmulation,C:\repos\stocksharp_stocksharp\Algo\Strategies\Testing\BatchEmulation.cs,Start,The following statement contains a magic number: _progressStep = ((EmulationSettings.StopTime - EmulationSettings.StartTime).Ticks / 100).To<TimeSpan>();
Magic Number,StockSharp.Algo.Testing,MarketDataGenerator,C:\repos\stocksharp_stocksharp\Algo\Testing\MarketDataGenerator.cs,MarketDataGenerator,The following statement contains a magic number: MaxVolume = 20;
Magic Number,StockSharp.Algo.Testing,MarketDataGenerator,C:\repos\stocksharp_stocksharp\Algo\Testing\MarketDataGenerator.cs,MarketDataGenerator,The following statement contains a magic number: MaxPriceStepCount = 10;
Magic Number,StockSharp.Algo.Testing,MarketDataGenerator,C:\repos\stocksharp_stocksharp\Algo\Testing\MarketDataGenerator.cs,MarketDataGenerator,The following statement contains a magic number: RandomArrayLength = 100;
Magic Number,StockSharp.Algo.Testing,TrendMarketDepthGenerator,C:\repos\stocksharp_stocksharp\Algo\Testing\MarketDepthGenerator.cs,TrendMarketDepthGenerator,The following statement contains a magic number: Interval = TimeSpan.FromMilliseconds(50);
Magic Number,StockSharp.Algo.Testing,ExecutionLogConverter,C:\repos\stocksharp_stocksharp\Algo\Testing\ExecutionLogConverter.cs,ProcessQuoteChange,The following statement contains a magic number: var spreadPrice = bestAskPrice == 0  				? bestBidPrice  				: (bestBidPrice == 0  					? bestAskPrice  					: (bestAskPrice - bestBidPrice) / 2 + bestBidPrice);
Magic Number,StockSharp.Algo.Testing,ExecutionLogConverter,C:\repos\stocksharp_stocksharp\Algo\Testing\ExecutionLogConverter.cs,AddExecMsg,The following statement contains a magic number: if (volume > 0)  				diff.Add(CreateMessage(time' serverTime' quote.Side' quote.Price' volume));  			else  			{  				volume = volume.Abs();    				// matching only top orders (spread)  				if (isSpread && volume > 1 && _isMatch.Next())  				{  					var tradeVolume = (int)volume / 2;    					diff.Add(new ExecutionMessage  					{  						Side = quote.Side'  						TradeVolume = tradeVolume'  						ExecutionType = ExecutionTypes.Tick'  						SecurityId = SecurityId'  						LocalTime = time'  						ServerTime = serverTime'  						TradePrice = quote.Price'  					});    					// that tick will not affect on order book  					//volume -= tradeVolume;  				}    				diff.Add(CreateMessage(time' serverTime' quote.Side' quote.Price' volume' true));  			}
Magic Number,StockSharp.Algo.Testing,ExecutionLogConverter,C:\repos\stocksharp_stocksharp\Algo\Testing\ExecutionLogConverter.cs,CreateMessage,The following statement contains a magic number: if (volume == 0)  				volume = _volumeRandom.Next(10' 100);
Magic Number,StockSharp.Algo.Testing,ExecutionLogConverter,C:\repos\stocksharp_stocksharp\Algo\Testing\ExecutionLogConverter.cs,CreateMessage,The following statement contains a magic number: if (volume == 0)  				volume = _volumeRandom.Next(10' 100);
Magic Number,StockSharp.Algo.Testing,ExecutionLogConverter,C:\repos\stocksharp_stocksharp\Algo\Testing\ExecutionLogConverter.cs,IncreaseDepthVolume,The following statement contains a magic number: while (leftVolume > 0 && lastPrice != 0)  			{  				lastVolume *= 2;  				lastPrice += GetPriceStep() * (side == Sides.Buy ? -1 : 1);    				leftVolume -= lastVolume;    				yield return CreateMessage(message.LocalTime' serverTime' side' lastPrice' lastVolume);  			}
Magic Number,StockSharp.Algo.Testing,SecurityMarketEmulator,C:\repos\stocksharp_stocksharp\Algo\Testing\MarketEmulator.cs,AcceptExecution,The following statement contains a magic number: if (_parent.Settings.Failing > 0)  				{  					if (RandomGen.GetDouble() < (_parent.Settings.Failing / 100.0))  					{  						this.AddErrorLog(LocalizedStrings.Str1151Params' execution.IsCancelled ? LocalizedStrings.Str1152 : LocalizedStrings.Str1153' execution.OriginalTransactionId == 0 ? execution.TransactionId : execution.OriginalTransactionId);    						var replyMsg = CreateReply(execution' time);    						replyMsg.Balance = execution.OrderVolume;  						replyMsg.OrderState = OrderStates.Failed;  						replyMsg.Error = new InvalidOperationException(LocalizedStrings.Str1154);  						replyMsg.LocalTime = time;  						result.Add(replyMsg);  						return;  					}  				}
Magic Number,StockSharp.Algo.Testing,OrderLogGenerator,C:\repos\stocksharp_stocksharp\Algo\Testing\OrderLogGenerator.cs,OnProcess,The following statement contains a magic number: var action = RandomGen.GetInt(0' 5);
Magic Number,StockSharp.Algo.Testing,OrderLogGenerator,C:\repos\stocksharp_stocksharp\Algo\Testing\OrderLogGenerator.cs,OnProcess,The following statement contains a magic number: var isNew = action < 3 || _activeOrders.IsEmpty();
Magic Number,StockSharp.Algo.Testing,OrderLogGenerator,C:\repos\stocksharp_stocksharp\Algo\Testing\OrderLogGenerator.cs,OnProcess,The following statement contains a magic number: if (isNew)  			{  				var priceStep = SecurityDefinition.PriceStep ?? 0.01m;    				_lastOrderPrice += RandomGen.GetInt(-MaxPriceStepCount' MaxPriceStepCount) * priceStep;    				if (_lastOrderPrice <= 0)  					_lastOrderPrice = priceStep;    				item = new ExecutionMessage  				{  					OrderId = IdGenerator.GetNextId()'  					SecurityId = SecurityId'  					ServerTime = time'  					OrderState = OrderStates.Active'  					OrderVolume = Volumes.Next()'  					Side = RandomGen.GetEnum<Sides>()'  					OrderPrice = _lastOrderPrice'  					ExecutionType = ExecutionTypes.OrderLog'  				};    				_activeOrders.Enqueue((ExecutionMessage)item.Clone());  			}  			else  			{  				var activeOrder = _activeOrders.Peek();    				item = (ExecutionMessage)activeOrder.Clone();  				item.ServerTime = time;    				var isMatched = action == 5;    				ExecutionMessage trade = null;    				if (isMatched)  					trade = (ExecutionMessage)TradeGenerator.Process(message);    				if (isMatched && trade != null)  				{  					item.OrderVolume = RandomGen.GetInt(1' (int)activeOrder.SafeGetVolume());    					item.TradeId = trade.TradeId;  					item.TradePrice = trade.TradePrice;  					item.TradeStatus = trade.TradeStatus;    					// TODO  					//quote.Trade = TradeGenerator.Generate(time);  					//item.Volume = activeOrder.Volume;    					//if (item.Side == Sides.Buy && quote.Trade.Price > quote.Order.Price)  					//	item.TradePrice = item.Price;  					//else if (item.Side == Sides.Sell && quote.Trade.Price < quote.Order.Price)  					//	item.TradePrice = item.Price;    					activeOrder.OrderVolume -= item.OrderVolume;    					if (activeOrder.OrderVolume == 0)  					{  						item.OrderState = OrderStates.Done;  						_activeOrders.Dequeue();  					}  					else  						item.OrderState = OrderStates.Active;  				}  				else  				{  					item.OrderState = OrderStates.Done;  					item.IsCancelled = true;  					_activeOrders.Dequeue();  				}  			}
Magic Number,StockSharp.Algo.Testing,RandomWalkTradeGenerator,C:\repos\stocksharp_stocksharp\Algo\Testing\TradeGenerator.cs,RandomWalkTradeGenerator,The following statement contains a magic number: Interval = TimeSpan.FromMilliseconds(50);
Missing Default,StockSharp.Algo,AssociatedSecurityAdapter,C:\repos\stocksharp_stocksharp\Algo\AssociatedSecurityAdapter.cs,OnInnerAdapterNewOutMessage,The following switch statement is missing a default case: switch (message.Type)  			{  				case MessageTypes.Security:  				{  					var secMsg = (SecurityMessage)message;  					if (!IsAssociated(secMsg.SecurityId.BoardCode))  					{  						var clone = (SecurityMessage)secMsg.Clone();  						clone.SecurityId = CreateAssociatedId(clone.SecurityId);  						RaiseNewOutMessage(clone);  					}  					break;  				}    				case MessageTypes.Level1Change:  				{  					var level1Msg = (Level1ChangeMessage)message;    					if (!IsAssociated(level1Msg.SecurityId.BoardCode))  					{  						// ξανξβλενθε BestXXX δλ ALL θη κξνκπεςνϋυ ςθκεπξβ  						var clone = (Level1ChangeMessage)level1Msg.Clone();  						clone.SecurityId = CreateAssociatedId(clone.SecurityId);  						RaiseNewOutMessage(clone);  					}    					break;  				}    				case MessageTypes.QuoteChange:  				{  					var quoteMsg = (QuoteChangeMessage)message;    					if (quoteMsg.SecurityId.IsDefault())  						return;    					//if (IsAssociated(quoteMsg.SecurityId.BoardCode))  					//	return;    					var builder = _quoteChangeDepthBuilders  						.SafeAdd(quoteMsg.SecurityId.SecurityCode' c => new QuoteChangeDepthBuilder(c' AssociatedBoardCode));    					quoteMsg = builder.Process(quoteMsg);    					RaiseNewOutMessage(quoteMsg);    					break;  				}    				case MessageTypes.Execution:  				{  					var executionMsg = (ExecutionMessage)message;    					switch (executionMsg.ExecutionType)  					{  						case ExecutionTypes.Tick:  						case ExecutionTypes.OrderLog:  						{  							if (!IsAssociated(executionMsg.SecurityId.BoardCode))  							{  								var clone = (ExecutionMessage)executionMsg.Clone();  								clone.SecurityId = CreateAssociatedId(clone.SecurityId);  								RaiseNewOutMessage(clone);  							}    							break;  						}  					}    					break;  				}  			}
Missing Default,StockSharp.Algo,AssociatedSecurityAdapter,C:\repos\stocksharp_stocksharp\Algo\AssociatedSecurityAdapter.cs,OnInnerAdapterNewOutMessage,The following switch statement is missing a default case: switch (executionMsg.ExecutionType)  					{  						case ExecutionTypes.Tick:  						case ExecutionTypes.OrderLog:  						{  							if (!IsAssociated(executionMsg.SecurityId.BoardCode))  							{  								var clone = (ExecutionMessage)executionMsg.Clone();  								clone.SecurityId = CreateAssociatedId(clone.SecurityId);  								RaiseNewOutMessage(clone);  							}    							break;  						}  					}
Missing Default,StockSharp.Algo,FilteredMarketDepthAdapter,C:\repos\stocksharp_stocksharp\Algo\FilteredMarketDepthAdapter.cs,SendInMessage,The following switch statement is missing a default case: switch (message.Type)  			{  				case MessageTypes.MarketData:  				{  					var mdMsg = (MarketDataMessage)message;    					if (mdMsg.DataType != FilteredMarketDepth)  						break;    					if (mdMsg.IsSubscribe)  					{  						var clone = (MarketDataMessage)mdMsg.Clone();  						clone.DataType = MarketDataTypes.MarketDepth;  						clone.Arg = null;    						base.SendInMessage(clone);    						var data = (Tuple<QuoteChangeMessage' ExecutionMessage[]>)mdMsg.Arg;  						var info = _filteredMarketDepths.SafeAdd(mdMsg.SecurityId' s => new FilteredMarketDepthInfo(data.Item2));  						var quoteMsg = info.Process(data.Item1);    						RaiseNewOutMessage(quoteMsg);  					}  					else  					{  						var clone = (MarketDataMessage)mdMsg.Clone();  						clone.DataType = MarketDataTypes.MarketDepth;    						base.SendInMessage(clone);    						_filteredMarketDepths.Remove(mdMsg.SecurityId);  					}    					return;  				}  			}
Missing Default,StockSharp.Algo,FilteredMarketDepthAdapter,C:\repos\stocksharp_stocksharp\Algo\FilteredMarketDepthAdapter.cs,OnInnerAdapterNewOutMessage,The following switch statement is missing a default case: switch (message.Type)  			{  				case MessageTypes.QuoteChange:  				{  					var quoteMsg = (QuoteChangeMessage)message;    					var info = _filteredMarketDepths.TryGetValue(quoteMsg.SecurityId);    					if (info != null)  					{  						var filteredQuoteMsg = info.Process(quoteMsg);  						RaiseNewOutMessage(filteredQuoteMsg);  					}    					break;  				}    				case MessageTypes.Execution:  				{  					var execMsg = (ExecutionMessage)message;    					if (execMsg.ExecutionType != ExecutionTypes.Transaction)  						break;    					if (execMsg.OrderState == OrderStates.Active || execMsg.OrderState == OrderStates.Done)  					{  						var info = _filteredMarketDepths.TryGetValue(execMsg.SecurityId);  						info?.Process(execMsg);  					}    					break;  				}  			}
Missing Default,StockSharp.Algo,FilteredMarketDepthInfo,C:\repos\stocksharp_stocksharp\Algo\FilteredMarketDepthAdapter.cs,Process,The following switch statement is missing a default case: switch (message.OrderState)  				{  					case OrderStates.Done:  					case OrderStates.Failed:  					{  						var items = _executions.TryGetValue(key);    						if (items == null)  							break;    						items.Remove(message.OriginalTransactionId);    						if (items.Count == 0)  							_executions.Remove(key);    						break;  					}    					case OrderStates.Active:  					{  						if (message.Balance != null)  							_executions.SafeAdd(key)[message.OriginalTransactionId] = message.Balance.Value;    						break;  					}  				}
Missing Default,StockSharp.Algo,SecurityMappingMessageAdapter,C:\repos\stocksharp_stocksharp\Algo\SecurityMappingMessageAdapter.cs,SendInMessage,The following switch statement is missing a default case: switch (message.Type)  			{  				case MessageTypes.OrderRegister:  				case MessageTypes.OrderReplace:  				case MessageTypes.OrderCancel:  				case MessageTypes.OrderGroupCancel:  				case MessageTypes.MarketData:  				{  					ReplaceSecurityId(message);  					break;  				}    				case MessageTypes.OrderPairReplace:  				{  					var pairMsg = (OrderPairReplaceMessage)message;  					ReplaceSecurityId(pairMsg.Message1);  					ReplaceSecurityId(pairMsg.Message2);  					break;  				}  			}
Missing Default,StockSharp.Algo,Level1DepthBuilderAdapter,C:\repos\stocksharp_stocksharp\Algo\Level1DepthBuilderAdapter.cs,OnInnerAdapterNewOutMessage,The following switch statement is missing a default case: switch (message.Type)  			{  				case MessageTypes.Reset:  					_level1DepthBuilders.Clear();  					break;    				case MessageTypes.Level1Change:  				{  					var level1Msg = (Level1ChangeMessage)message;    					// γενεπΰφθ ρςΰκΰνΰ θη Level1  					var quoteMsg = GetBuilder(level1Msg.SecurityId).Process(level1Msg);    					if (quoteMsg != null)  						RaiseNewOutMessage(quoteMsg);    					break;  				}    				case MessageTypes.QuoteChange:  				{  					var quoteMsg = (QuoteChangeMessage)message;  					GetBuilder(quoteMsg.SecurityId).HasDepth = true;  					break;  				}  			}
Missing Default,StockSharp.Algo,OfflineMessageAdapter,C:\repos\stocksharp_stocksharp\Algo\OfflineMessageAdapter.cs,OnInnerAdapterNewOutMessage,The following switch statement is missing a default case: switch (message.Type)  			{  				case MessageTypes.Connect:  				{  					connectMessage = (ConnectMessage)message;  					break;  				}  			}
Missing Default,StockSharp.Algo,SecurityNativeIdMessageAdapter,C:\repos\stocksharp_stocksharp\Algo\SecurityNativeIdMessageAdapter.cs,SendInMessage,The following switch statement is missing a default case: switch (message.Type)  			{  				case MessageTypes.OrderRegister:  				case MessageTypes.OrderReplace:  				case MessageTypes.OrderCancel:  				case MessageTypes.OrderGroupCancel:  				case MessageTypes.MarketData:  				{  					var secMsg = (SecurityMessage)message;    					if (secMsg.NotRequiredSecurityId())  						break;    					var securityId = secMsg.SecurityId;    					var native = GetNativeId(secMsg' securityId);    					if (native == null)  						return;    					securityId.Native = native;  					message.ReplaceSecurityId(securityId);    					break;  				}    				case MessageTypes.OrderPairReplace:  				{  					var pairMsg = (OrderPairReplaceMessage)message;    					var securityId1 = pairMsg.Message1.SecurityId;  					var securityId2 = pairMsg.Message2.SecurityId;    					var nativeId1 = GetNativeId(pairMsg' securityId1);    					if (nativeId1 == null)  						return;    					var nativeId2 = GetNativeId(pairMsg' securityId2);    					if (nativeId2 == null)  						return;    					securityId1.Native = nativeId1;  					pairMsg.Message1.ReplaceSecurityId(securityId1);    					securityId2.Native = nativeId2;  					pairMsg.Message2.ReplaceSecurityId(securityId2);  					break;  				}    				case ExtendedMessageTypes.ProcessSuspendedSecurityMessages:  					ProcessSuspendedSecurityMessages(((ProcessSuspendedSecurityMessage)message).SecurityId);  					break;  			}
Missing Default,StockSharp.Algo,BasketMessageAdapter,C:\repos\stocksharp_stocksharp\Algo\BasketMessageAdapter.cs,OnInnerAdapterNewOutMessage,The following switch statement is missing a default case: switch (message.Type)  				{  					case MessageTypes.Connect:  						ProcessConnectMessage(innerAdapter' (ConnectMessage)message);  						return;    					case MessageTypes.Disconnect:  						ProcessDisconnectMessage(innerAdapter' (DisconnectMessage)message);  						return;    					case MessageTypes.MarketData:  						ProcessMarketDataMessage(innerAdapter' (MarketDataMessage)message);  						return;    					case MessageTypes.Portfolio:  						var pfMsg = (PortfolioMessage)message;  						AdapterProvider.SetAdapter(pfMsg.PortfolioName' GetUnderlyingAdapter(innerAdapter));  						break;    					case MessageTypes.PortfolioChange:  						var pfChangeMsg = (PortfolioChangeMessage)message;  						AdapterProvider.SetAdapter(pfChangeMsg.PortfolioName' GetUnderlyingAdapter(innerAdapter));  						break;    					//case MessageTypes.Position:  					//	var posMsg = (PositionMessage)message;  					//	AdapterProvider.SetAdapter(posMsg.PortfolioName' GetUnderlyingAdapter(innerAdapter));  					//	break;    					case MessageTypes.PositionChange:  						var posChangeMsg = (PositionChangeMessage)message;  						AdapterProvider.SetAdapter(posChangeMsg.PortfolioName' GetUnderlyingAdapter(innerAdapter));  						break;  				}
Missing Default,StockSharp.Algo,Connector,C:\repos\stocksharp_stocksharp\Algo\Connector_ProcessMessage.cs,OnProcessMessage,The following switch statement is missing a default case: switch (message.Type)  				{  					case MessageTypes.QuoteChange:  						ProcessQuotesMessage((QuoteChangeMessage)message);  						break;    					case MessageTypes.Board:  						ProcessBoardMessage((BoardMessage)message);  						break;    					case MessageTypes.Security:  						ProcessSecurityMessage((SecurityMessage)message);  						break;    					case MessageTypes.SecurityLookupResult:  						ProcessSecurityLookupResultMessage((SecurityLookupResultMessage)message);  						break;    					case MessageTypes.PortfolioLookupResult:  						ProcessPortfolioLookupResultMessage((PortfolioLookupResultMessage)message);  						break;    					case MessageTypes.Level1Change:  						ProcessLevel1ChangeMessage((Level1ChangeMessage)message);  						break;    					case MessageTypes.News:  						ProcessNewsMessage((NewsMessage)message);  						break;    					case MessageTypes.Execution:  						ProcessExecutionMessage((ExecutionMessage)message);  						break;    					case MessageTypes.Portfolio:  						ProcessPortfolioMessage((PortfolioMessage)message);  						break;    					case MessageTypes.PortfolioChange:  						ProcessPortfolioChangeMessage((PortfolioChangeMessage)message);  						break;    					//case MessageTypes.Position:  					//	ProcessPositionMessage((PositionMessage)message);  					//	break;    					case MessageTypes.PositionChange:  						ProcessPositionChangeMessage((PositionChangeMessage)message);  						break;    					//case MessageTypes.Time:  					//	var timeMsg = (TimeMessage)message;    					//	if (timeMsg.Shift != null)  					//		TimeShift = timeMsg.Shift;    					//	// TimeMessage могут пропускаться при наличии других месседжей' поэтому событие  					//	// MarketTimeChanged необходимо вызывать при обработке времени из любых месседжей.  					//	break;    					case MessageTypes.MarketData:  						ProcessMarketDataMessage((MarketDataMessage)message);  						break;    					case MessageTypes.Error:  						var errorMsg = (ErrorMessage)message;  						RaiseError(errorMsg.Error);  						break;    					case MessageTypes.Connect:  						ProcessConnectMessage((ConnectMessage)message);  						break;    					case MessageTypes.Disconnect:  						ProcessConnectMessage((DisconnectMessage)message);  						break;    					case MessageTypes.SecurityLookup:  					{  						var lookupMsg = (SecurityLookupMessage)message;  						_securityLookups.Add(lookupMsg.TransactionId' (SecurityLookupMessage)lookupMsg.Clone());  						SendOutMessage(new SecurityLookupResultMessage { OriginalTransactionId = lookupMsg.TransactionId });  						break;  					}    					case MessageTypes.Session:  						ProcessSessionMessage((SessionMessage)message);  						break;    					case ExtendedMessageTypes.RemoveSecurity:  						ProcessSecurityRemoveMessage((SecurityRemoveMessage)message);  						break;    					case MessageTypes.CandleTimeFrame:  					case MessageTypes.CandlePnF:  					case MessageTypes.CandleRange:  					case MessageTypes.CandleRenko:  					case MessageTypes.CandleTick:  					case MessageTypes.CandleVolume:  						ProcessCandleMessage((CandleMessage)message);  						break;    					case MessageTypes.MarketDataFinished:  						ProcessMarketDataFinishedMessage((MarketDataFinishedMessage)message);  						break;    					// если адаптеры передают специфичные сообщения  					//default:  					//	throw new ArgumentOutOfRangeException(LocalizedStrings.Str2142Params.Put(message.Type));  				}
Missing Default,StockSharp.Algo,Connector,C:\repos\stocksharp_stocksharp\Algo\Connector_ProcessMessage.cs,ProcessExecutionMessage,The following switch statement is missing a default case: switch (message.ExecutionType)  					{  						case ExecutionTypes.Tick:  							ProcessTradeMessage(security' message);  							break;  						case ExecutionTypes.OrderLog:  							ProcessOrderLogMessage(security' message);  							break;  					}
Missing Default,StockSharp.Algo,HeartbeatMessageAdapter,C:\repos\stocksharp_stocksharp\Algo\HeartbeatMessageAdapter.cs,SendInMessage,The following switch statement is missing a default case: switch (message.Type)  			{  				case MessageTypes.Reset:  				{  					_prevState = _none;    					lock (_timeSync)  						_currState = _none;    					StopTimer();    					_connectingAttemptCount = 0;  					_connectionTimeOut = default(TimeSpan);  					_canSendTime = false;    					break;  				}    				case MessageTypes.Connect:  				{  					if (_isFirstTimeConnect)  						_isFirstTimeConnect = false;  					else  						base.SendInMessage(new ResetMessage());    					lock (_timeSync)  						_currState = ConnectionStates.Connecting;    					if (_prevState == _none)  					{  						_connectionTimeOut = _reConnectionSettings.TimeOutInterval;  						_connectingAttemptCount = _reConnectionSettings.AttemptCount;  					}  					else  						_connectionTimeOut = _reConnectionSettings.Interval;    					StartTimer();    					break;  				}  				case MessageTypes.Disconnect:  				{  					lock (_timeSync)  						_currState = ConnectionStates.Disconnecting;    					_connectionTimeOut = _reConnectionSettings.TimeOutInterval;    					StopTimer();    					lock (_timeSync)  						_canSendTime = false;    					break;  				}    				case ExtendedMessageTypes.Reconnect:  				{  					SendInMessage(new ConnectMessage());  					break;  				}  			}
Missing Default,StockSharp.Algo,HeartbeatMessageAdapter,C:\repos\stocksharp_stocksharp\Algo\HeartbeatMessageAdapter.cs,ProcessReconnection,The following switch statement is missing a default case: switch (_currState)  			{  				case ConnectionStates.Disconnecting:  				case ConnectionStates.Connecting:  				{  					_connectionTimeOut -= diff;    					if (_connectionTimeOut <= TimeSpan.Zero)  					{  						this.AddWarningLog("RCM: Connecting Timeout Left {0}."' _connectionTimeOut);    						switch (_currState)  						{  							case ConnectionStates.Connecting:  								RaiseNewOutMessage(new ConnectMessage{ Error = new TimeoutException(LocalizedStrings.Str170) });  								break;  							case ConnectionStates.Disconnecting:  								RaiseNewOutMessage(new DisconnectMessage { Error = new TimeoutException(LocalizedStrings.Str171) });  								break;  						}    						if (_prevState != _none)  						{  							this.AddInfoLog("RCM: Connecting AttemptError.");    							//ReConnectionSettings.RaiseAttemptError(new TimeoutException(message));  							lock (_timeSync)  								_currState = _prevState;  						}  						else  						{  							//ReConnectionSettings.RaiseTimeOut();    							if (_currState == ConnectionStates.Connecting && _connectingAttemptCount != 0)  							{  								lock (_timeSync)  									_currState = _reConnecting;    								this.AddInfoLog("RCM: To Reconnecting Attempts {0} Timeout {1}."' _connectingAttemptCount' _connectionTimeOut);  							}  							else  							{  								lock (_timeSync)  									_currState = _none;  							}  						}  					}    					break;  				}  				case _reConnecting:  				{  					if (_connectingAttemptCount == 0)  					{  						this.AddWarningLog("RCM: Reconnecting attemts {0} PrevState {1}."' _connectingAttemptCount' _prevState);    						lock (_timeSync)  							_currState = _none;    						break;  					}    					_connectionTimeOut -= diff;    					if (_connectionTimeOut > TimeSpan.Zero)  						break;    					if (IsTradeTime())  					{  						this.AddInfoLog("RCM: To Connecting. CurrState {0} PrevState {1} Attempts {2}."' _currState' _prevState' _connectingAttemptCount);    						if (_connectingAttemptCount != -1)  							_connectingAttemptCount--;    						_connectionTimeOut = _reConnectionSettings.Interval;    						//_prevState = _currState;  						RaiseNewOutMessage(new ReconnectMessage  						{  							IsBack = true'  							Adapter = this  						});  					}  					else  					{  						this.AddWarningLog("RCM: Out of trade time. CurrState {0}."' _currState);  						_connectionTimeOut = TimeSpan.FromMinutes(1);  					}    					break;  				}  			}
Missing Default,StockSharp.Algo,HeartbeatMessageAdapter,C:\repos\stocksharp_stocksharp\Algo\HeartbeatMessageAdapter.cs,ProcessReconnection,The following switch statement is missing a default case: switch (_currState)  						{  							case ConnectionStates.Connecting:  								RaiseNewOutMessage(new ConnectMessage{ Error = new TimeoutException(LocalizedStrings.Str170) });  								break;  							case ConnectionStates.Disconnecting:  								RaiseNewOutMessage(new DisconnectMessage { Error = new TimeoutException(LocalizedStrings.Str171) });  								break;  						}
Missing Default,StockSharp.Algo,SubscriptionMessageAdapter,C:\repos\stocksharp_stocksharp\Algo\SubscriptionMessageAdapter.cs,OnInnerAdapterNewOutMessage,The following switch statement is missing a default case: switch (message.Type)  			{  				case MessageTypes.Connect:  				{  					var connectMsg = (ConnectMessage)message;    					if (connectMsg.Error == null && IsRestoreOnReconnect)  					{  						messages = new List<Message>();    						lock (_sync)  						{  							messages.AddRange(_subscribers.Values.Select(p => p.Message));  							messages.AddRange(_newsSubscribers.Values.Select(p => p.Message));  							messages.AddRange(_candleSubscribers.Values.Select(p => p.Message));  							messages.AddRange(_pfSubscribers.Values.Select(p => p.First));    							ClearSubscribers();  						}    						if (messages.Count == 0)  							messages = null;  					}    					break;  				}    				case MessageTypes.MarketData:  					ProcessOutMarketDataMessage((MarketDataMessage)message);  					break;  			}
Missing Default,StockSharp.Algo,TraderHelper,C:\repos\stocksharp_stocksharp\Algo\TraderHelper.cs,ApplyChanges,The following switch statement is missing a default case: switch (pair.Key) 					{ 						case Level1Fields.OpenPrice: 							security.OpenPrice = (decimal)value; 							break; 						case Level1Fields.HighPrice: 							security.HighPrice = (decimal)value; 							break; 						case Level1Fields.LowPrice: 							security.LowPrice = (decimal)value; 							break; 						case Level1Fields.ClosePrice: 							security.ClosePrice = (decimal)value; 							break; 						case Level1Fields.LastTrade: 						{ 							lastTrade = (Trade)value;  							lastTrade.Security = security; 							//lastTrade.LocalTime = message.LocalTime;  							lastTradeChanged = true; 							break; 						} 						case Level1Fields.StepPrice: 							security.StepPrice = (decimal)value; 							break; 						case Level1Fields.PriceStep: 							security.PriceStep = (decimal)value; 							break; 						case Level1Fields.Decimals: 							security.Decimals = (int)value; 							break; 						case Level1Fields.VolumeStep: 							security.VolumeStep = (decimal)value; 							break; 						case Level1Fields.Multiplier: 							security.Multiplier = (decimal)value; 							break; 						case Level1Fields.BestBid: 							bestBid = (Quote)value; 							bidChanged = true; 							break; 						case Level1Fields.BestAsk: 							bestAsk = (Quote)value; 							askChanged = true; 							break; 						case Level1Fields.BestBidPrice: 							bestBid.Price = (decimal)value; 							bidChanged = true; 							break; 						case Level1Fields.BestBidVolume: 							bestBid.Volume = (decimal)value; 							bidChanged = true; 							break; 						case Level1Fields.BestAskPrice: 							bestAsk.Price = (decimal)value; 							askChanged = true; 							break; 						case Level1Fields.BestAskVolume: 							bestAsk.Volume = (decimal)value; 							askChanged = true; 							break; 						case Level1Fields.ImpliedVolatility: 							security.ImpliedVolatility = (decimal)value; 							break; 						case Level1Fields.HistoricalVolatility: 							security.HistoricalVolatility = (decimal)value; 							break; 						case Level1Fields.TheorPrice: 							security.TheorPrice = (decimal)value; 							break; 						case Level1Fields.Delta: 							security.Delta = (decimal)value; 							break; 						case Level1Fields.Gamma: 							security.Gamma = (decimal)value; 							break; 						case Level1Fields.Vega: 							security.Vega = (decimal)value; 							break; 						case Level1Fields.Theta: 							security.Theta = (decimal)value; 							break; 						case Level1Fields.Rho: 							security.Rho = (decimal)value; 							break; 						case Level1Fields.MarginBuy: 							security.MarginBuy = (decimal)value; 							break; 						case Level1Fields.MarginSell: 							security.MarginSell = (decimal)value; 							break; 						case Level1Fields.OpenInterest: 							security.OpenInterest = (decimal)value; 							break; 						case Level1Fields.MinPrice: 							security.MinPrice = (decimal)value; 							break; 						case Level1Fields.MaxPrice: 							security.MaxPrice = (decimal)value; 							break; 						case Level1Fields.BidsCount: 							security.BidsCount = (int)value; 							break; 						case Level1Fields.BidsVolume: 							security.BidsVolume = (decimal)value; 							break; 						case Level1Fields.AsksCount: 							security.AsksCount = (int)value; 							break; 						case Level1Fields.AsksVolume: 							security.AsksVolume = (decimal)value; 							break; 						case Level1Fields.State: 							security.State = (SecurityStates)value; 							break; 						case Level1Fields.LastTradePrice: 							lastTrade.Price = (decimal)value; 							lastTradeChanged = true; 							break; 						case Level1Fields.LastTradeVolume: 							lastTrade.Volume = (decimal)value; 							lastTradeChanged = true; 							break; 						case Level1Fields.LastTradeId: 							lastTrade.Id = (long)value; 							lastTradeChanged = true; 							break; 						case Level1Fields.LastTradeTime: 							lastTrade.Time = (DateTimeOffset)value; 							lastTradeChanged = true; 							break; 						case Level1Fields.LastTradeUpDown: 							lastTrade.IsUpTick = (bool)value; 							lastTradeChanged = true; 							break; 						case Level1Fields.LastTradeOrigin: 							lastTrade.OrderDirection = (Sides?)value; 							lastTradeChanged = true; 							break; 						case Level1Fields.IsSystem: 							lastTrade.IsSystem = (bool)value; 							lastTradeChanged = true; 							break; 						case Level1Fields.TradesCount: 							security.TradesCount = (int)value; 							break; 						case Level1Fields.HighBidPrice: 							security.HighBidPrice = (decimal)value; 							break; 						case Level1Fields.LowAskPrice: 							security.LowAskPrice = (decimal)value; 							break; 						case Level1Fields.Yield: 							security.Yield = (decimal)value; 							break; 						case Level1Fields.VWAP: 							security.VWAP = (decimal)value; 							break; 						case Level1Fields.SettlementPrice: 							security.SettlementPrice = (decimal)value; 							break; 						case Level1Fields.AveragePrice: 							security.AveragePrice = (decimal)value; 							break; 						case Level1Fields.Volume: 							security.Volume = (decimal)value; 							break; 						case Level1Fields.Turnover: 							security.Turnover = (decimal)value; 							break; 						//default: 						//	throw new ArgumentOutOfRangeException(); 					}
Missing Default,StockSharp.Algo,TraderHelper,C:\repos\stocksharp_stocksharp\Algo\TraderHelper.cs,Iso10962ToSecurityType,The following switch statement is missing a default case: switch (cfi[1]) 					{ 						case 'R': 						{ 							switch (cfi[2]) 							{ 								case 'I': 									return SecurityTypes.Index;  								case 'C': 									return SecurityTypes.Currency;  								case 'T': 									return SecurityTypes.Commodity; 							}  							break; 						}  						case 'M': 						{ 							switch (cfi[2]) 							{ 								case 'B': 									return SecurityTypes.CryptoCurrency;  								case 'W': 									return SecurityTypes.Weather;  								case 'A': 									return SecurityTypes.Adr;  								case 'C': 									return SecurityTypes.Cfd;  								case 'N': 									return SecurityTypes.News; 							}  							break; 						} 					}
Missing Default,StockSharp.Algo,TraderHelper,C:\repos\stocksharp_stocksharp\Algo\TraderHelper.cs,Iso10962ToSecurityType,The following switch statement is missing a default case: switch (cfi[2]) 							{ 								case 'I': 									return SecurityTypes.Index;  								case 'C': 									return SecurityTypes.Currency;  								case 'T': 									return SecurityTypes.Commodity; 							}
Missing Default,StockSharp.Algo,TraderHelper,C:\repos\stocksharp_stocksharp\Algo\TraderHelper.cs,Iso10962ToSecurityType,The following switch statement is missing a default case: switch (cfi[2]) 							{ 								case 'B': 									return SecurityTypes.CryptoCurrency;  								case 'W': 									return SecurityTypes.Weather;  								case 'A': 									return SecurityTypes.Adr;  								case 'C': 									return SecurityTypes.Cfd;  								case 'N': 									return SecurityTypes.News; 							}
Missing Default,StockSharp.Algo.Candles.Compression,CandleBuilderMessageAdapter,C:\repos\stocksharp_stocksharp\Algo\Candles\Compression\CandleBuilderMessageAdapter.cs,ProcessMarketDataResponse,The following switch statement is missing a default case: switch (info.Transform.BuildFrom)  			{  				case MarketDataTypes.Level1:  				case MarketDataTypes.MarketDepth:  				case MarketDataTypes.Trades:  				case MarketDataTypes.OrderLog:  				{  					SendNotSupported(info);  					break;  				}    				case MarketDataTypes.CandleTimeFrame:  				case MarketDataTypes.CandleTick:  				case MarketDataTypes.CandleVolume:  				case MarketDataTypes.CandleRange:  				case MarketDataTypes.CandlePnF:  				case MarketDataTypes.CandleRenko:  				{  					if (info.MarketDataMessage.BuildCandlesMode != BuildCandlesModes.LoadAndBuild)  					{  						SendNotSupported(info);  					}  					else  						Subscribe(info' true);    					break;  				}  			}
Missing Default,StockSharp.Algo.Candles.Compression,CandleBuilderMessageAdapter,C:\repos\stocksharp_stocksharp\Algo\Candles\Compression\CandleBuilderMessageAdapter.cs,ProcessMarketDataFinished,The following switch statement is missing a default case: switch (info.Transform.BuildFrom)  			{  				case MarketDataTypes.Level1:  				case MarketDataTypes.MarketDepth:  				case MarketDataTypes.Trades:  				case MarketDataTypes.OrderLog:  				{  					SendMarketDataFinished(info);  					break;  				}    				case MarketDataTypes.CandleTimeFrame:  				case MarketDataTypes.CandleTick:  				case MarketDataTypes.CandleVolume:  				case MarketDataTypes.CandleRange:  				case MarketDataTypes.CandlePnF:  				case MarketDataTypes.CandleRenko:  				{  					if (info.MarketDataMessage.BuildCandlesMode != BuildCandlesModes.LoadAndBuild)  					{  						SendMarketDataFinished(info);  					}  					else  						Subscribe(info' true);    					break;  				}  			}
Missing Default,StockSharp.Algo.Candles.Compression,CandleHolderMessageAdapter,C:\repos\stocksharp_stocksharp\Algo\Candles\Compression\CandleHolderMessageAdapter.cs,SendInMessage,The following switch statement is missing a default case: switch (message.Type)  			{  				case MessageTypes.MarketData:  					ProcessMarketData((MarketDataMessage)message);  					break;  			}
Missing Default,StockSharp.Algo.Candles.Compression,CandleHolderMessageAdapter,C:\repos\stocksharp_stocksharp\Algo\Candles\Compression\CandleHolderMessageAdapter.cs,ProcessMarketData,The following switch statement is missing a default case: switch (message.DataType)  			{  				case MarketDataTypes.CandleTimeFrame:  				case MarketDataTypes.CandleTick:  				case MarketDataTypes.CandleVolume:  				case MarketDataTypes.CandleRange:  				case MarketDataTypes.CandlePnF:  				case MarketDataTypes.CandleRenko:  				{  					var info = _infos.SafeAdd(message.TransactionId' k => message.DataType.ToCandleMessage().CreateInstance<CandleMessage>());  					info.SecurityId = message.SecurityId;  					info.Arg = message.Arg;  					break;  				}  			}
Missing Default,StockSharp.Algo.Candles.Compression,CandleHolderMessageAdapter,C:\repos\stocksharp_stocksharp\Algo\Candles\Compression\CandleHolderMessageAdapter.cs,OnInnerAdapterNewOutMessage,The following switch statement is missing a default case: switch (message.Type)  			{  				case MessageTypes.CandleTimeFrame:  				case MessageTypes.CandlePnF:  				case MessageTypes.CandleRange:  				case MessageTypes.CandleRenko:  				case MessageTypes.CandleTick:  				case MessageTypes.CandleVolume:  				{  					ProcessCandle((CandleMessage)message);  					break;  				}    				case MessageTypes.MarketDataFinished:  				{  					_infos.Remove(((MarketDataFinishedMessage)message).OriginalTransactionId);  					break;  				}  			}
Missing Default,StockSharp.Algo.Export.Database,Level1Table,C:\repos\stocksharp_stocksharp\Algo\Export\Database\Level1Table.cs,CreateColumns,The following switch statement is missing a default case: switch (field)  				{  					case Level1Fields.OpenPrice:  					case Level1Fields.HighPrice:  					case Level1Fields.LowPrice:  					case Level1Fields.ClosePrice:  					case Level1Fields.MinPrice:  					case Level1Fields.MaxPrice:  					case Level1Fields.PriceStep:  					case Level1Fields.LastTradePrice:  					case Level1Fields.BestBidPrice:  					case Level1Fields.BestAskPrice:  					case Level1Fields.HighBidPrice:  					case Level1Fields.LowAskPrice:  						step = security.PriceStep ?? 1;  						break;  					case Level1Fields.OpenInterest:  					case Level1Fields.BidsVolume:  					case Level1Fields.AsksVolume:  					case Level1Fields.VolumeStep:  					case Level1Fields.LastTradeVolume:  					case Level1Fields.Volume:  					case Level1Fields.BestBidVolume:  					case Level1Fields.BestAskVolume:  						step = security.VolumeStep ?? 1;  						break;  					case Level1Fields.Multiplier:  						step = security.Multiplier ?? 1;  						break;  				}
Missing Default,StockSharp.Algo.Storages.Binary.Snapshot,PositionBinarySnapshotSerializer,C:\repos\stocksharp_stocksharp\Algo\Storages\Binary\Snapshot\PositionBinarySnapshotSerializer.cs,Serialize,The following switch statement is missing a default case: switch (change.Key)  				{  					case PositionChangeTypes.BeginValue:  						snapshot.BeginValue = (decimal)change.Value;  						break;  					case PositionChangeTypes.CurrentValue:  						snapshot.CurrentValue = (decimal)change.Value;  						break;  					case PositionChangeTypes.BlockedValue:  						snapshot.BlockedValue = (decimal)change.Value;  						break;  					case PositionChangeTypes.CurrentPrice:  						snapshot.CurrentPrice = (decimal)change.Value;  						break;  					case PositionChangeTypes.AveragePrice:  						snapshot.AveragePrice = (decimal)change.Value;  						break;  					case PositionChangeTypes.UnrealizedPnL:  						snapshot.UnrealizedPnL = (decimal)change.Value;  						break;  					case PositionChangeTypes.RealizedPnL:  						snapshot.RealizedPnL = (decimal)change.Value;  						break;  					case PositionChangeTypes.VariationMargin:  						snapshot.VariationMargin = (decimal)change.Value;  						break;  					case PositionChangeTypes.Currency:  						snapshot.Currency = (short)(CurrencyTypes)change.Value;  						break;  					case PositionChangeTypes.Leverage:  						snapshot.Leverage = (decimal)change.Value;  						break;  					case PositionChangeTypes.Commission:  						snapshot.Commission = (decimal)change.Value;  						break;  					case PositionChangeTypes.CurrentValueInLots:  						snapshot.CurrentValueInLots = (decimal)change.Value;  						break;  					case PositionChangeTypes.State:  						snapshot.State = (sbyte)(PortfolioStates)change.Value;  						break;  				}
Missing Default,StockSharp.Algo.Storages.Binary.Snapshot,Level1BinarySnapshotSerializer,C:\repos\stocksharp_stocksharp\Algo\Storages\Binary\Snapshot\Level1BinarySnapshotSerializer.cs,Serialize,The following switch statement is missing a default case: switch (change.Key)  				{  					case Level1Fields.OpenPrice:  						snapshot.OpenPrice = (decimal)change.Value;  						break;  					case Level1Fields.HighPrice:  						snapshot.HighPrice = (decimal)change.Value;  						break;  					case Level1Fields.LowPrice:  						snapshot.LowPrice = (decimal)change.Value;  						break;  					case Level1Fields.ClosePrice:  						snapshot.ClosePrice = (decimal)change.Value;  						break;  					case Level1Fields.StepPrice:  						snapshot.StepPrice = (decimal)change.Value;  						break;  					case Level1Fields.ImpliedVolatility:  						snapshot.IV = (decimal)change.Value;  						break;  					case Level1Fields.TheorPrice:  						snapshot.TheorPrice = (decimal)change.Value;  						break;  					case Level1Fields.OpenInterest:  						snapshot.OI = (decimal)change.Value;  						break;  					case Level1Fields.MinPrice:  						snapshot.MinPrice = (decimal)change.Value;  						break;  					case Level1Fields.MaxPrice:  						snapshot.MaxPrice = (decimal)change.Value;  						break;  					case Level1Fields.BidsVolume:  						snapshot.BidsVolume = (decimal)change.Value;  						break;  					case Level1Fields.BidsCount:  						snapshot.BidsCount = (int)change.Value;  						break;  					case Level1Fields.AsksVolume:  						snapshot.AsksVolume = (decimal)change.Value;  						break;  					case Level1Fields.AsksCount:  						snapshot.AsksCount = (int)change.Value;  						break;  					case Level1Fields.HistoricalVolatility:  						snapshot.HV = (decimal)change.Value;  						break;  					case Level1Fields.Delta:  						snapshot.Delta = (decimal)change.Value;  						break;  					case Level1Fields.Gamma:  						snapshot.Gamma = (decimal)change.Value;  						break;  					case Level1Fields.Vega:  						snapshot.Vega = (decimal)change.Value;  						break;  					case Level1Fields.Theta:  						snapshot.Theta = (decimal)change.Value;  						break;  					case Level1Fields.MarginBuy:  						snapshot.MarginBuy = (decimal)change.Value;  						break;  					case Level1Fields.MarginSell:  						snapshot.MarginSell = (decimal)change.Value;  						break;  					case Level1Fields.State:  						snapshot.State = (sbyte)(SecurityStates)change.Value;  						break;  					case Level1Fields.LastTradePrice:  						snapshot.LastTradePrice = (decimal)change.Value;  						break;  					case Level1Fields.LastTradeVolume:  						snapshot.LastTradeVolume = (decimal)change.Value;  						break;  					case Level1Fields.Volume:  						snapshot.Volume = (decimal)change.Value;  						break;  					case Level1Fields.AveragePrice:  						snapshot.AveragePrice = (decimal)change.Value;  						break;  					case Level1Fields.SettlementPrice:  						snapshot.SettlementPrice = (decimal)change.Value;  						break;  					case Level1Fields.Change:  						snapshot.Change = (decimal)change.Value;  						break;  					case Level1Fields.BestBidPrice:  						snapshot.BestBidPrice = (decimal)change.Value;  						break;  					case Level1Fields.BestBidVolume:  						snapshot.BestBidVolume = (decimal)change.Value;  						break;  					case Level1Fields.BestAskPrice:  						snapshot.BestAskPrice = (decimal)change.Value;  						break;  					case Level1Fields.BestAskVolume:  						snapshot.BestAskVolume = (decimal)change.Value;  						break;  					case Level1Fields.Rho:  						snapshot.Rho = (decimal)change.Value;  						break;  					case Level1Fields.AccruedCouponIncome:  						snapshot.AccruedCouponIncome = (decimal)change.Value;  						break;  					case Level1Fields.HighBidPrice:  						snapshot.HighBidPrice = (decimal)change.Value;  						break;  					case Level1Fields.LowAskPrice:  						snapshot.LowAskPrice = (decimal)change.Value;  						break;  					case Level1Fields.Yield:  						snapshot.Yield = (decimal)change.Value;  						break;  					case Level1Fields.LastTradeTime:  						snapshot.LastTradeTime = change.Value.To<long>();  						break;  					case Level1Fields.TradesCount:  						snapshot.TradesCount = (int)change.Value;  						break;  					case Level1Fields.VWAP:  						snapshot.VWAP = (decimal)change.Value;  						break;  					case Level1Fields.LastTradeId:  						snapshot.LastTradeId = (long)change.Value;  						break;  					case Level1Fields.LastTradeUpDown:  						snapshot.LastTradeUpDown = (sbyte)((bool)change.Value == false ? 0 : 1);  						break;  					case Level1Fields.LastTradeOrigin:  						snapshot.LastTradeOrigin = (sbyte)(Sides)change.Value;  						break;  					case Level1Fields.Beta:  						snapshot.Beta = (decimal)change.Value;  						break;  					case Level1Fields.AverageTrueRange:  						snapshot.AverageTrueRange = (decimal)change.Value;  						break;  					case Level1Fields.HistoricalVolatilityMonth:  						snapshot.Beta = (decimal)change.Value;  						break;  					case Level1Fields.Duration:  						snapshot.Duration = (decimal)change.Value;  						break;  					case Level1Fields.Turnover:  						snapshot.Turnover = (decimal)change.Value;  						break;  					case Level1Fields.SpreadMiddle:  						snapshot.SpreadMiddle = (decimal)change.Value;  						break;  				}
Missing Default,StockSharp.Algo.Storages,BufferMessageAdapter,C:\repos\stocksharp_stocksharp\Algo\Storages\BufferMessageAdapter.cs,SendInMessage,The following switch statement is missing a default case: switch (message.Type)  			{  				case MessageTypes.Reset:  				{  					_subscriptions.Clear();  					_ticksBuffer.Clear();  					_level1Buffer.Clear();  					_candleBuffer.Clear();  					_orderLogBuffer.Clear();  					_orderBooksBuffer.Clear();  					_transactionsBuffer.Clear();  					_newsBuffer.Clear();  					_positionChangesBuffer.Clear();  					//SendOutMessage(new ResetMessage());  					break;  				}    				case MessageTypes.OrderRegister:  					var regMsg = (OrderRegisterMessage)message;    					if (!CanStore<ExecutionMessage>(regMsg.SecurityId' ExecutionTypes.Transaction))  						break;    					_transactionsBuffer.Add(regMsg.SecurityId' new ExecutionMessage  					{  						ServerTime = DateTimeOffset.Now'  						ExecutionType = ExecutionTypes.Transaction'  						SecurityId = regMsg.SecurityId'  						HasOrderInfo = true'  						OrderPrice = regMsg.Price'  						OrderVolume = regMsg.Volume'  						Currency = regMsg.Currency'  						PortfolioName = regMsg.PortfolioName'  						ClientCode = regMsg.ClientCode'  						BrokerCode = regMsg.BrokerCode'  						Comment = regMsg.Comment'  						Side = regMsg.Side'  						TimeInForce = regMsg.TimeInForce'  						ExpiryDate = regMsg.TillDate'  						VisibleVolume = regMsg.VisibleVolume'  						LocalTime = regMsg.LocalTime'  						TransactionId = regMsg.TransactionId'  						IsMarketMaker = regMsg.IsMarketMaker'  						OrderType = regMsg.OrderType'  						UserOrderId = regMsg.UserOrderId'  						//RepoInfo = regMsg.RepoInfo?.Clone()'  						//RpsInfo = regMsg.RpsInfo?.Clone()'  					});  					break;  				case MessageTypes.OrderCancel:  					var cancelMsg = (OrderCancelMessage)message;    					if (!CanStore<ExecutionMessage>(cancelMsg.SecurityId' ExecutionTypes.Transaction))  						break;    					_transactionsBuffer.Add(cancelMsg.SecurityId' new ExecutionMessage  					{  						ServerTime = DateTimeOffset.Now'  						ExecutionType = ExecutionTypes.Transaction'  						SecurityId = cancelMsg.SecurityId'  						HasOrderInfo = true'  						IsCancelled = true'  						OrderId = cancelMsg.OrderId'  						OrderStringId = cancelMsg.OrderStringId'  						OriginalTransactionId = cancelMsg.OrderTransactionId'  						OrderVolume = cancelMsg.Volume'  						//Side = cancelMsg.Side'  					});  					break;  			}
Missing Default,StockSharp.Algo.Storages,StorageMessageAdapter,C:\repos\stocksharp_stocksharp\Algo\Storages\StorageMessageAdapter.cs,OnInnerAdapterNewOutMessage,The following switch statement is missing a default case: switch (message.Type)  			{  				case MessageTypes.Security:  				{  					var secMsg = (SecurityMessage)message;  					var security = _entityRegistry.Securities.ReadBySecurityId(secMsg.SecurityId);    					if (security == null)  						security = secMsg.ToSecurity(_storageRegistry.ExchangeInfoProvider);  					else  						security.ApplyChanges(secMsg' _storageRegistry.ExchangeInfoProvider);    					_entityRegistry.Securities.Save(security);  					break;  				}  				case MessageTypes.Board:  				{  					var boardMsg = (BoardMessage)message;  					var board = _entityRegistry.ExchangeBoards.ReadById(boardMsg.Code);    					if (board == null)  					{  						board = _storageRegistry.ExchangeInfoProvider.GetOrCreateBoard(boardMsg.Code' code =>  						{  							var exchange = _storageRegistry  								.ExchangeInfoProvider  								.GetExchange(boardMsg.ExchangeCode) ?? boardMsg.ToExchange(new Exchange  								{  									Name = boardMsg.ExchangeCode  								});    							return boardMsg.ToBoard(new ExchangeBoard  							{  								Code = code'  								Exchange = exchange  							});  						});  					}  					else  					{  						// TODO apply changes  					}    					_entityRegistry.Exchanges.Save(board.Exchange);  					_entityRegistry.ExchangeBoards.Save(board);  					break;  				}    				case MessageTypes.Portfolio:  				{  					var portfolioMsg = (PortfolioMessage)message;  					var portfolio = _entityRegistry.Portfolios.ReadById(portfolioMsg.PortfolioName) ?? new Portfolio  					{  						Name = portfolioMsg.PortfolioName  					};    					portfolioMsg.ToPortfolio(portfolio' _storageRegistry.ExchangeInfoProvider);  					_entityRegistry.Portfolios.Save(portfolio);    					break;  				}    				case MessageTypes.PortfolioChange:  				{  					var portfolioMsg = (PortfolioChangeMessage)message;  					var portfolio = _entityRegistry.Portfolios.ReadById(portfolioMsg.PortfolioName) ?? new Portfolio  					{  						Name = portfolioMsg.PortfolioName  					};    					portfolio.ApplyChanges(portfolioMsg' _storageRegistry.ExchangeInfoProvider);  					_entityRegistry.Portfolios.Save(portfolio);    					break;  				}    				//case MessageTypes.Position:  				//{  				//	var positionMsg = (PositionMessage)message;  				//	var position = GetPosition(positionMsg.SecurityId' positionMsg.PortfolioName);    				//	if (position == null)  				//		break;    				//	if (!positionMsg.DepoName.IsEmpty())  				//		position.DepoName = positionMsg.DepoName;    				//	if (positionMsg.LimitType != null)  				//		position.LimitType = positionMsg.LimitType;    				//	if (!positionMsg.Description.IsEmpty())  				//		position.Description = positionMsg.Description;    				//	_entityRegistry.Positions.Save(position);    				//	break;  				//}    				case MessageTypes.PositionChange:  				{  					var positionMsg = (PositionChangeMessage)message;  					var position = GetPosition(positionMsg.SecurityId' positionMsg.PortfolioName);    					if (position == null)  						break;    					if (!positionMsg.DepoName.IsEmpty())  						position.DepoName = positionMsg.DepoName;    					if (positionMsg.LimitType != null)  						position.LimitType = positionMsg.LimitType;    					if (!positionMsg.Description.IsEmpty())  						position.Description = positionMsg.Description;    					position.ApplyChanges(positionMsg);  					_entityRegistry.Positions.Save(position);    					break;  				}  			}
Missing Default,StockSharp.Algo.PnL,PortfolioPnLManager,C:\repos\stocksharp_stocksharp\Algo\PnL\PortfolioPnLManager.cs,ProcessMessage,The following switch statement is missing a default case: switch (message.Type)  			{  				case MessageTypes.Execution:  				{  					var execMsg = (ExecutionMessage)message;    					if (execMsg.ExecutionType != ExecutionTypes.Tick)  						break;    					var queue = _securityPnLs.TryGetValue(execMsg.SecurityId);  					queue?.ProcessExecution(execMsg);    					break;  				}    				case MessageTypes.Level1Change:  				{  					var levelMsg = (Level1ChangeMessage)message;    					var queue = _securityPnLs.TryGetValue(levelMsg.SecurityId);  					queue?.ProcessLevel1(levelMsg);    					break;  				}    				case MessageTypes.QuoteChange:  				{  					var quoteMsg = (QuoteChangeMessage)message;    					var queue = _securityPnLs.TryGetValue(quoteMsg.SecurityId);  					queue?.ProcessQuotes(quoteMsg);    					break;  				}    				case MessageTypes.PortfolioChange:  				{  					var pfMsg = (PortfolioChangeMessage)message;    					var leverage = pfMsg.Changes.TryGetValue(PositionChangeTypes.Leverage).To<decimal?>();  					if (leverage != null)  					{  						_securityPnLs.CachedValues.ForEach(q => q.Leverage = leverage.Value);  					}    					break;  				}    				case MessageTypes.PositionChange:  				{  					var posMsg = (PositionChangeMessage)message;    					var leverage = posMsg.Changes.TryGetValue(PositionChangeTypes.Leverage).To<decimal?>();  					if (leverage != null)  					{  						_securityPnLs.SafeAdd(posMsg.SecurityId' security => new PnLQueue(security)).Leverage = leverage.Value;  					}    					break;  				}  			}
Missing Default,StockSharp.Algo.PnL,PnLManager,C:\repos\stocksharp_stocksharp\Algo\PnL\PnLManager.cs,ProcessMessage,The following switch statement is missing a default case: switch (message.Type)  			{  				case MessageTypes.Reset:  				{  					Reset();  					return null;  				}    				case MessageTypes.Execution:  				{  					var trade = (ExecutionMessage)message;    					if (trade.HasTradeInfo())  					{  						// TODO  						if (trade.PortfolioName.IsEmpty())  							return null;    						lock (_portfolioManagers.SyncRoot)  						{  							var manager = _portfolioManagers.SafeAdd(trade.PortfolioName' pf => new PortfolioPnLManager(pf));    							if (manager.ProcessMyTrade(trade' out var info))  								_realizedPnL += info.PnL;    							return info;  						}  					}    					break;  				}  			}
Missing Default,StockSharp.Algo.Positions,PositionManager,C:\repos\stocksharp_stocksharp\Algo\Positions\PositionManager.cs,ProcessMessage,The following switch statement is missing a default case: switch (message.Type)  			{  				case MessageTypes.Reset:  				{  					Reset();  					break;  				}    				case MessageTypes.Execution:  				{  					var execMsg = (ExecutionMessage)message;  					var key = Tuple.Create(execMsg.SecurityId' execMsg.PortfolioName);    					if (ByOrders && execMsg.HasOrderInfo())  					{  						var orderId = execMsg.OriginalTransactionId;  						var newPosition = execMsg.GetPosition(true);    						if (newPosition == null)  							break;    						bool isNew;  						decimal diff;  						decimal abs;    						lock (_positions.SyncRoot)  						{  							isNew = _positions.TryGetValue(key' out decimal prev);    							if (_byOrderPositions.TryGetValue(orderId' out Tuple<Sides' decimal> oldPosition))  							{  								if (newPosition.Value != oldPosition.Item2)  									_byOrderPositions[orderId] = Tuple.Create(execMsg.Side' newPosition.Value);    								diff = newPosition.Value - oldPosition.Item2;  							}  							else  							{  								_byOrderPositions.Add(orderId' Tuple.Create(execMsg.Side' newPosition.Value));  								diff = newPosition.Value;  							}    							abs = prev + diff;    							_positions[key] = abs;    							if (SecurityId == null || SecurityId.Value == execMsg.SecurityId)  								Position += diff;  						}    						if (isNew)  							NewPosition?.Invoke(key' abs);  						else  							PositionChanged?.Invoke(key' abs);    						return diff;  					}    					if (!ByOrders && execMsg.HasTradeInfo())  					{  						var diff = execMsg.GetPosition(false);    						if (diff == null || diff == 0)  							break;    						bool isNew;  						decimal abs;    						lock (_positions.SyncRoot)  						{  							isNew = _positions.TryGetValue(key' out var prev);  							abs = prev + diff.Value;    							_positions[key] = abs;    							if (SecurityId == null || SecurityId.Value == execMsg.SecurityId)  								Position += diff.Value;  						}    						if (isNew)  							NewPosition?.Invoke(key' abs);  						else  							PositionChanged?.Invoke(key' abs);    						return diff;  					}    					break;  				}  			}
Missing Default,StockSharp.Algo.Risk,RiskPositionTimeRule,C:\repos\stocksharp_stocksharp\Algo\Risk\RiskRule.cs,ProcessMessage,The following switch statement is missing a default case: switch (message.Type)  			{  				case MessageTypes.PositionChange:  				{  					var posMsg = (PositionChangeMessage)message;  					var currValue = (decimal?)posMsg.Changes.TryGetValue(PositionChangeTypes.CurrentValue);    					if (currValue == null)  						return false;    					var key = Tuple.Create(posMsg.SecurityId' posMsg.PortfolioName);    					if (currValue == 0)  					{  						_posOpenTime.Remove(key);  						return false;  					}    					var openTime = _posOpenTime.TryGetValue2(key);    					if (openTime == null)  					{  						_posOpenTime.Add(key' posMsg.LocalTime);  						return false;  					}    					var diff = posMsg.LocalTime - openTime;    					if (diff < Time)  						return false;    					_posOpenTime.Remove(key);  					return true;  				}    				case MessageTypes.Time:  				{  					List<Tuple<SecurityId' string>> removingPos = null;    					foreach (var pair in _posOpenTime)  					{  						var diff = message.LocalTime - pair.Value;    						if (diff < Time)  							continue;    						if (removingPos == null)  							removingPos = new List<Tuple<SecurityId' string>>();    						removingPos.Add(pair.Key);  					}    					removingPos?.ForEach(t => _posOpenTime.Remove(t));    					return removingPos != null;  				}  			}
Missing Default,StockSharp.Algo.Risk,RiskOrderFreqRule,C:\repos\stocksharp_stocksharp\Algo\Risk\RiskRule.cs,ProcessMessage,The following switch statement is missing a default case: switch (message.Type)  			{  				case MessageTypes.OrderRegister:  				case MessageTypes.OrderReplace:  				case MessageTypes.OrderPairReplace:  				{  					var time = message.LocalTime;    					if (time.IsDefault())  					{  						this.AddWarningLog("Time is null. Msg={0}"' message);  						return false;  					}    					if (_endTime == null)  					{  						_endTime = time + Interval;  						_current = 1;    						this.AddDebugLog("EndTime={0}"' _endTime);  						return false;  					}    					if (time < _endTime)  					{  						_current++;    						this.AddDebugLog("Count={0} Msg={1}"' _current' message);    						if (_current >= Count)  						{  							this.AddInfoLog("Count={0} EndTime={1}"' _current' _endTime);    							_endTime = null;  							return true;  						}  					}  					else  					{  						_endTime = time + Interval;  						_current = 1;    						this.AddDebugLog("EndTime={0}"' _endTime);  					}  					  					return false;  				}  			}
Missing Default,StockSharp.Algo.Slippage,SlippageManager,C:\repos\stocksharp_stocksharp\Algo\Slippage\SlippageManager.cs,ProcessMessage,The following switch statement is missing a default case: switch (message.Type)  			{  				case MessageTypes.Reset:  				{  					Reset();  					break;  				}    				case MessageTypes.Level1Change:  				{  					var l1Msg = (Level1ChangeMessage)message;  					var pair = _bestPrices.SafeAdd(l1Msg.SecurityId);    					var bidPrice = (decimal?)l1Msg.Changes.TryGetValue(Level1Fields.BestBidPrice);  					if (bidPrice != null)  						pair.First = bidPrice.Value;    					var askPrice = (decimal?)l1Msg.Changes.TryGetValue(Level1Fields.BestAskPrice);  					if (askPrice != null)  						pair.Second = askPrice.Value;    					break;  				}    				case MessageTypes.QuoteChange:  				{  					var quotesMsg = (QuoteChangeMessage)message;  					var pair = _bestPrices.SafeAdd(quotesMsg.SecurityId);    					var bid = quotesMsg.GetBestBid();  					if (bid != null)  						pair.First = bid.Price;    					var ask = quotesMsg.GetBestAsk();  					if (ask != null)  						pair.Second = ask.Price;    					break;  				}    				case MessageTypes.OrderRegister:  				{  					var regMsg = (OrderRegisterMessage)message;    					var prices = _bestPrices.TryGetValue(regMsg.SecurityId);    					if (prices != null)  					{  						var price = regMsg.Side == Sides.Buy ? prices.Second : prices.First;    						if (price != 0)  							_plannedPrices.Add(regMsg.TransactionId' Tuple.Create(regMsg.Side' price));  					}    					break;  				}    				case MessageTypes.Execution:  				{  					var execMsg = (ExecutionMessage)message;  					  					if (execMsg.HasTradeInfo())  					{  						var plannedPrice = _plannedPrices.TryGetValue(execMsg.OriginalTransactionId);    						if (plannedPrice != null)  						{  							var slippage = execMsg.TradePrice - plannedPrice.Item2;    							if (plannedPrice.Item1 == Sides.Sell)  								slippage = -slippage;    							if (slippage < 0 && !CalculateNegative)  								slippage = 0;    							return slippage;  						}  					}    					break;  				}  			}
Missing Default,StockSharp.Algo.Candles,CandleHelper,C:\repos\stocksharp_stocksharp\Algo\Candles\CandleHelper.cs,IsBullishOrBearish,The following switch statement is missing a default case: switch (isWhiteOrBlack)  			{  				case true:  					if (candle.GetBottomShadow() >= candle.GetBody())  						return true;  					break;  				case false:  					if (candle.GetTopShadow() >= candle.GetBody())  						return true;  					break;  			}
Missing Default,StockSharp.Algo.Latency,LatencyManager,C:\repos\stocksharp_stocksharp\Algo\Latency\LatencyManager.cs,ProcessMessage,The following switch statement is missing a default case: switch (message.Type)  			{  				case MessageTypes.Reset:  				{  					Reset();  					break;  				}    				case MessageTypes.OrderRegister:  				{  					var regMsg = (OrderRegisterMessage)message;    					lock (_syncObject)  					{  						AddRegister(regMsg.TransactionId' regMsg.LocalTime);  					}    					break;  				}  				case MessageTypes.OrderReplace:  				{  					var replaceMsg = (OrderReplaceMessage)message;    					lock (_syncObject)  					{  						AddCancel(replaceMsg.TransactionId' replaceMsg.LocalTime);  						AddRegister(replaceMsg.TransactionId' replaceMsg.LocalTime);  					}    					break;  				}  				case MessageTypes.OrderPairReplace:  				{  					var replaceMsg = (OrderPairReplaceMessage)message;    					lock (_syncObject)  					{  						AddCancel(replaceMsg.Message1.TransactionId' replaceMsg.LocalTime);  						AddRegister(replaceMsg.Message1.TransactionId' replaceMsg.LocalTime);    						AddCancel(replaceMsg.Message2.TransactionId' replaceMsg.LocalTime);  						AddRegister(replaceMsg.Message2.TransactionId' replaceMsg.LocalTime);  					}    					break;  				}  				case MessageTypes.OrderCancel:  				{  					var cancelMsg = (OrderCancelMessage)message;    					lock (_syncObject)  						AddCancel(cancelMsg.TransactionId' cancelMsg.LocalTime);    					break;  				}  				case MessageTypes.Execution:  				{  					var execMsg = (ExecutionMessage)message;    					if (execMsg.HasOrderInfo())  					{  						if (execMsg.OrderState == OrderStates.Pending)  							return null;    						lock (_syncObject)  						{  							var time = _register.TryGetValue2(execMsg.OriginalTransactionId);    							if (time == null)  							{  								time = _cancel.TryGetValue2(execMsg.OriginalTransactionId);    								if (time != null)  								{  									_cancel.Remove(execMsg.OriginalTransactionId);    									if (execMsg.OrderState == OrderStates.Failed)  										return null;    									return execMsg.LocalTime - time;  								}  							}  							else  							{  								_register.Remove(execMsg.OriginalTransactionId);    								if (execMsg.OrderState == OrderStates.Failed)  									return null;    								return execMsg.LocalTime - time;  							}  						}  					}    					break;  				}  			}
Missing Default,StockSharp.Algo.Strategies,Strategy,C:\repos\stocksharp_stocksharp\Algo\Strategies\Strategy.cs,RaiseLog,The following switch statement is missing a default case: switch (message.Level)  			{  				case LogLevels.Warning:  					if (ErrorState == LogLevels.Info)  						ErrorState = LogLevels.Warning;  					break;  				case LogLevels.Error:  					ErrorState = LogLevels.Error;  					break;  			}
Missing Default,StockSharp.Algo.Strategies,Strategy,C:\repos\stocksharp_stocksharp\Algo\Strategies\Strategy.cs,OnConnectorNewMessage,The following switch statement is missing a default case: switch (stateMsg.State)  						{  							//case ProcessStates.Stopped:  							//	break;  							case ProcessStates.Stopping:  							{  								if (ProcessState == ProcessStates.Started)  									ProcessState = ProcessStates.Stopping;  								else  									this.AddDebugLog(LocalizedStrings.Str1392Params' ProcessState);    								break;  							}  							case ProcessStates.Started:  							{  								if (ProcessState == ProcessStates.Stopped)  									ProcessState = ProcessStates.Started;  								else  									this.AddDebugLog(LocalizedStrings.Str1391Params' ProcessState);    								break;  							}  							//default:  							//	throw new ArgumentOutOfRangeException();  						}
Missing Default,StockSharp.Algo.Strategies.Testing,BatchEmulation,C:\repos\stocksharp_stocksharp\Algo\Strategies\Testing\BatchEmulation.cs,EmulationConnectorOnStateChanged,The following switch statement is missing a default case: switch (EmulationConnector.State)  			{  				case EmulationStates.Starting:  				{  					if (_prev != EmulationStates.Stopped)  						break;    					_nextTime = EmulationSettings.StartTime + _progressStep;  					CurrentProgress = 0;    					ApplySettings();  					break;  				}    				case EmulationStates.Started:  					State = EmulationStates.Started;  					break;    				case EmulationStates.Stopping:  					break;    				case EmulationStates.Stopped:  				{  					if (!_cancelEmulation)  						CurrentProgress = 100;    					OnEmulationStopped();  					break;  				}  			}
Missing Default,StockSharp.Algo.Strategies.Testing,BatchEmulation,C:\repos\stocksharp_stocksharp\Algo\Strategies\Testing\BatchEmulation.cs,ApplySettings,The following switch statement is missing a default case: switch (EmulationSettings.TradeDataMode)  				{  					case EmulationMarketDataModes.Generate:  					{  						foreach (var sec in securities)  							EmulationConnector.RegisterTrades(new RandomWalkTradeGenerator(EmulationConnector.GetSecurityId(sec)));    						break;  					}    					case EmulationMarketDataModes.Storage:  					{  						realData = true;  						break;  					}  				}
Missing Default,StockSharp.Algo.Strategies.Testing,BatchEmulation,C:\repos\stocksharp_stocksharp\Algo\Strategies\Testing\BatchEmulation.cs,ApplySettings,The following switch statement is missing a default case: switch (EmulationSettings.DepthDataMode)  				{  					case EmulationMarketDataModes.Generate:  					{  						foreach (var sec in securities)  							EmulationConnector.RegisterMarketDepth(new TrendMarketDepthGenerator(EmulationConnector.GetSecurityId(sec)));    						break;  					}  					case EmulationMarketDataModes.Storage:  						realData = true;  						break;  				}
Missing Default,StockSharp.Algo.Testing,HistoryMessageAdapter,C:\repos\stocksharp_stocksharp\Algo\Testing\HistoryMessageAdapter.cs,OnSendInMessage,The following switch statement is missing a default case: switch (message.Type)  			{  				case MessageTypes.Reset:  				{  					_isSuspended = false;  					_currentTime = default(DateTimeOffset);  					_generators.Clear();                      BasketStorage.Reset();  					  					LoadedMessageCount = 0;    					if (!_isStarted)  						SendOutMessage(new ResetMessage());    					break;  				}    				case MessageTypes.Connect:  				{  					if (_isStarted)  						throw new InvalidOperationException(LocalizedStrings.Str1116);    					SendOutMessage(new ConnectMessage { LocalTime = StartDate });  					return;  				}    				case MessageTypes.Disconnect:  				{  					_isSuspended = false;    					if(_isStarted)  						SendOutMessage(new LastMessage { LocalTime = StopDate });    					SendOutMessage(new DisconnectMessage { LocalTime = StopDate });  					//SendOutMessage(new ResetMessage());    					BasketStorage.Reset();  					_isStarted = false;  					return;  				}    				case MessageTypes.SecurityLookup:  				{  					var lookupMsg = (SecurityLookupMessage)message;    					var securities = lookupMsg.SecurityId.IsDefault()   							? SecurityProvider.LookupAll()   							: SecurityProvider.Lookup(lookupMsg.ToSecurity(StorageRegistry.ExchangeInfoProvider));    					securities.ForEach(security =>  					{  						SendOutMessage(security.Board.ToMessage());    						var secMsg = security.ToMessage();  						secMsg.OriginalTransactionId = lookupMsg.TransactionId;  						SendOutMessage(secMsg);    						//SendOutMessage(new Level1ChangeMessage { SecurityId = security.ToSecurityId() }  						//	.Add(Level1Fields.StepPrice' security.StepPrice)  						//	.Add(Level1Fields.MinPrice' security.MinPrice)  						//	.Add(Level1Fields.MaxPrice' security.MaxPrice)  						//	.Add(Level1Fields.MarginBuy' security.MarginBuy)  						//	.Add(Level1Fields.MarginSell' security.MarginSell));  					});    					SendOutMessage(new SecurityLookupResultMessage { OriginalTransactionId = lookupMsg.TransactionId });    					return;  				}    				case MessageTypes.MarketData:  				case ExtendedMessageTypes.HistorySource:  					ProcessMarketDataMessage((MarketDataMessage)message);  					return;    				case ExtendedMessageTypes.EmulationState:  					var stateMsg = (EmulationStateMessage)message;  					var isSuspended = false;    					switch (stateMsg.State)  					{  						case EmulationStates.Starting:  						{  							if (_isStarted)  								_isSuspended = false;  							else  								_isStarted = true;    							break;  						}    						case EmulationStates.Suspending:  						{  							_isSuspended = true;  							isSuspended = true;  							break;  						}    						case EmulationStates.Stopping:  						{  							_isSuspended = false;  							break;  						}  					}    					SendOutMessage(message);    					if (isSuspended)  						SendOutMessage(new EmulationStateMessage { State = EmulationStates.Suspended });    					return;    				case ExtendedMessageTypes.Generator:  				{  					var generatorMsg = (GeneratorMessage)message;  					var item = Tuple.Create(generatorMsg.SecurityId' generatorMsg.DataType);    					if (generatorMsg.IsSubscribe)  						_generators.Add(item);  					else  						_generators.Remove(item);    					break;  				}  			}
Missing Default,StockSharp.Algo.Testing,HistoryMessageAdapter,C:\repos\stocksharp_stocksharp\Algo\Testing\HistoryMessageAdapter.cs,OnSendInMessage,The following switch statement is missing a default case: switch (stateMsg.State)  					{  						case EmulationStates.Starting:  						{  							if (_isStarted)  								_isSuspended = false;  							else  								_isStarted = true;    							break;  						}    						case EmulationStates.Suspending:  						{  							_isSuspended = true;  							isSuspended = true;  							break;  						}    						case EmulationStates.Stopping:  						{  							_isSuspended = false;  							break;  						}  					}
Missing Default,StockSharp.Algo.Testing,EmulationMessageAdapter,C:\repos\stocksharp_stocksharp\Algo\Testing\EmulationMessageAdapter.cs,OnSendInMessage,The following switch statement is missing a default case: switch (message.Type)  			{  				case MessageTypes.Connect:  					  					SendOutMessage(new ConnectMessage());  					return;    				case MessageTypes.Reset:  					ProcessedMessageCount = 0;    					if (TransactionIdGenerator is IncrementalIdGenerator incGen)  						incGen.Current = Emulator.Settings.InitialTransactionId;    					_currentTime = default(DateTimeOffset);  					break;    				case MessageTypes.Disconnect:  					SendOutMessage(new DisconnectMessage());  					return;    				//case ExtendedMessageTypes.EmulationState:  				//	//SendOutMessage(message.Clone());  				//	return;  			}
Missing Default,StockSharp.Algo.Testing,HistoryEmulationConnector,C:\repos\stocksharp_stocksharp\Algo\Testing\HistoryEmulationConnector.cs,ProcessEmulationStateMessage,The following switch statement is missing a default case: switch (newState)  			{  				case EmulationStates.Stopping:  				{  					SendEmulationState(EmulationStates.Stopped);  					break;  				}    				case EmulationStates.Stopped:  				{  					// change ConnectionState to Disconnecting  					if (ConnectionState != ConnectionStates.Disconnecting)  						Disconnect();    					SendInMessage(new DisconnectMessage());  					break;  				}    				case EmulationStates.Starting:  				{  					SendEmulationState(EmulationStates.Started);  					break;  				}  			}
Missing Default,StockSharp.Algo.Testing,HistoryBasketMessageAdapter,C:\repos\stocksharp_stocksharp\Algo\Testing\HistoryEmulationConnector.cs,OnInnerAdapterNewOutMessage,The following switch statement is missing a default case: switch (message.Type)  				{  					case MessageTypes.Security:  					case MessageTypes.Board:  					case MessageTypes.Level1Change:  					case MessageTypes.QuoteChange:  					case MessageTypes.Time:  					case MessageTypes.Execution:  					{  						var adapter = message.Adapter;    						if (adapter == _parent.MarketDataAdapter)  							_parent.TransactionAdapter.SendInMessage(message);    						break;  					}    					case MessageTypes.CandlePnF:  					case MessageTypes.CandleRange:  					case MessageTypes.CandleRenko:  					case MessageTypes.CandleTick:  					case MessageTypes.CandleTimeFrame:  					case MessageTypes.CandleVolume:  					{  						if (message.Adapter != _parent.MarketDataAdapter)  							break;    						_parent.TransactionAdapter.SendInMessage(message);  						return;  					}  				}
Missing Default,StockSharp.Algo.Testing,MarketEmulator,C:\repos\stocksharp_stocksharp\Algo\Testing\MarketEmulator.cs,UpdateLevel1Info,The following switch statement is missing a default case: switch (change.Key)  				{  					case Level1Fields.PriceStep:  					case Level1Fields.VolumeStep:  					case Level1Fields.MinPrice:  					case Level1Fields.MaxPrice:  						state[change.Key] = change.Value;  						break;    					case Level1Fields.MarginBuy:  					case Level1Fields.MarginSell:  					{  						var oldValue = state.TryGetValue(change.Key);    						if (oldValue != null && (decimal)oldValue == (decimal)change.Value)  							break;    						state[change.Key] = change.Value;  						marginChanged = true;    						break;  					}  				}
Missing Default,StockSharp.Algo.Testing,SecurityMarketEmulator,C:\repos\stocksharp_stocksharp\Algo\Testing\MarketEmulator.cs,UpdateSecurityDefinition,The following switch statement is missing a default case: switch (change.Key)  					{  						case Level1Fields.PriceStep:  							_securityDefinition.PriceStep = (decimal)change.Value;  							// при изменении шага надо пересчитать планки  							_lastStripDate = DateTime.MinValue;  							break;  						case Level1Fields.VolumeStep:  							_securityDefinition.VolumeStep = (decimal)change.Value;  							_volumeDecimals = GetVolumeStep().GetCachedDecimals();  							break;  						case Level1Fields.Multiplier:  							_securityDefinition.Multiplier = (decimal)change.Value;  							break;  					}
Missing Default,StockSharp.Algo.Testing,SecurityMarketEmulator,C:\repos\stocksharp_stocksharp\Algo\Testing\MarketEmulator.cs,MatchOrder,The following switch statement is missing a default case: switch (order.TimeInForce)  				{  					case null:  					case TimeInForce.PutInQueue:  					{  						order.Balance = leftBalance;    						if (executions.Count > 0)  						{  							if (leftBalance == 0)  							{  								order.OrderState = OrderStates.Done;  								this.AddInfoLog(LocalizedStrings.Str1164Params' order.TransactionId);  							}    							result.Add(ToOrder(time' order));  						}  							  						if (order.OrderType == OrderTypes.Market)  						{  							if (leftBalance > 0)  							{  								this.AddInfoLog(LocalizedStrings.Str1165Params' order.TransactionId' leftBalance);    								order.OrderState = OrderStates.Done;  								result.Add(ToOrder(time' order));	  							}  						}    						break;  					}    					case TimeInForce.MatchOrCancel:  					{  						if (leftBalance == 0)  							order.Balance = 0;    						this.AddInfoLog(LocalizedStrings.Str1166Params' order.TransactionId);    						order.OrderState = OrderStates.Done;  						result.Add(ToOrder(time' order));    						// заявка не исполнилась полностью' поэтому она вся отменяется' не влияя на стакан  						if (leftBalance > 0)  							return;    						break;  					}    					case TimeInForce.CancelBalance:  					{  						this.AddInfoLog(LocalizedStrings.Str1167Params' order.TransactionId);    						order.Balance = leftBalance;  						order.OrderState = OrderStates.Done;  						result.Add(ToOrder(time' order));  						break;  					}  				}
