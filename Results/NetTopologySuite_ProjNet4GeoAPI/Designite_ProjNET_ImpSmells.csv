Implementation smell,Namespace,Class,File,Method,Description
Long Method,ProjNet.IO.CoordinateSystems,MathTransformWktReader,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\IO\CoordinateSystems\MathTransformWktReader.cs,ReadAffineTransform,The method has 119 lines of code.
Complex Method,ProjNet.CoordinateSystems,GeographicCoordinateSystem,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\GeographicCoordinateSystem.cs,EqualParams,Cyclomatic complexity of the method is 12
Complex Method,ProjNet.CoordinateSystems.Projections,LambertAzimuthalEqualAreaProjection,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\LambertAzimuthalEqualAreaProjection.cs,LambertAzimuthalEqualAreaProjection,Cyclomatic complexity of the method is 9
Complex Method,ProjNet.CoordinateSystems.Projections,LambertAzimuthalEqualAreaProjection,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\LambertAzimuthalEqualAreaProjection.cs,EllipsoidalRadiansToMeters,Cyclomatic complexity of the method is 9
Complex Method,ProjNet.CoordinateSystems.Projections,MapProjection,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\MapProjection.cs,adjust_lon,Cyclomatic complexity of the method is 8
Complex Method,ProjNet.CoordinateSystems.Transformations,AffineTransform,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Transformations\AffineTransform.cs,LUPDecomposition,Cyclomatic complexity of the method is 9
Complex Method,ProjNet.CoordinateSystems.Transformations,AffineTransform,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Transformations\AffineTransform.cs,TransformAffine,Cyclomatic complexity of the method is 11
Complex Method,ProjNet.CoordinateSystems.Transformations,CoordinateTransformationFactory,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Transformations\CoordinateTransformationFactory.cs,CreateFromCoordinateSystems,Cyclomatic complexity of the method is 10
Complex Method,ProjNet.CoordinateSystems.Transformations,GeocentricTransform,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Transformations\GeocentricTransform.cs,MetersToDegrees,Cyclomatic complexity of the method is 9
Complex Method,ProjNet.IO.CoordinateSystems,CoordinateSystemWktReader,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\IO\CoordinateSystems\CoordinateSystemWktReader.cs,ReadAxis,Cyclomatic complexity of the method is 9
Complex Method,ProjNet.IO.CoordinateSystems,MathTransformWktReader,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\IO\CoordinateSystems\MathTransformWktReader.cs,ReadAffineTransform,Cyclomatic complexity of the method is 25
Complex Method,ProjNet.IO.CoordinateSystems,StreamTokenizer,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\IO\CoordinateSystems\StreamTokenizer.cs,NextTokenAny,Cyclomatic complexity of the method is 17
Long Parameter List,ProjNet.CoordinateSystems,AngularUnit,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\AngularUnit.cs,AngularUnit,The method has 7 parameters. Parameters: radiansPerUnit' name' authority' authorityCode' alias' abbreviation' remarks
Long Parameter List,ProjNet.CoordinateSystems,CoordinateSystem,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\CoordinateSystem.cs,CoordinateSystem,The method has 6 parameters. Parameters: name' authority' authorityCode' alias' abbreviation' remarks
Long Parameter List,ProjNet.CoordinateSystems,CoordinateSystemFactory,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\CoordinateSystemFactory.cs,CreateProjectedCoordinateSystem,The method has 6 parameters. Parameters: name' gcs' projection' linearUnit' axis0' axis1
Long Parameter List,ProjNet.CoordinateSystems,CoordinateSystemFactory,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\CoordinateSystemFactory.cs,CreateGeographicCoordinateSystem,The method has 6 parameters. Parameters: name' angularUnit' datum' primeMeridian' axis0' axis1
Long Parameter List,ProjNet.CoordinateSystems,Datum,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Datum.cs,Datum,The method has 7 parameters. Parameters: type' name' authority' code' alias' remarks' abbreviation
Long Parameter List,ProjNet.CoordinateSystems,Ellipsoid,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Ellipsoid.cs,Ellipsoid,The method has 11 parameters. Parameters: semiMajorAxis' semiMinorAxis' inverseFlattening' isIvfDefinitive' axisUnit' name' authority' code' alias' abbreviation' remarks
Long Parameter List,ProjNet.CoordinateSystems,FittedCoordinateSystem,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\FittedCoordinateSystem.cs,FittedCoordinateSystem,The method has 8 parameters. Parameters: baseSystem' transform' name' authority' code' alias' remarks' abbreviation
Long Parameter List,ProjNet.CoordinateSystems,GeocentricCoordinateSystem,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\GeocentricCoordinateSystem.cs,GeocentricCoordinateSystem,The method has 10 parameters. Parameters: datum' linearUnit' primeMeridian' axisInfo' name' authority' code' alias' remarks' abbreviation
Long Parameter List,ProjNet.CoordinateSystems,GeographicCoordinateSystem,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\GeographicCoordinateSystem.cs,GeographicCoordinateSystem,The method has 10 parameters. Parameters: angularUnit' horizontalDatum' primeMeridian' axisInfo' name' authority' authorityCode' alias' abbreviation' remarks
Long Parameter List,ProjNet.CoordinateSystems,HorizontalCoordinateSystem,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\HorizontalCoordinateSystem.cs,HorizontalCoordinateSystem,The method has 8 parameters. Parameters: datum' axisInfo' name' authority' code' alias' remarks' abbreviation
Long Parameter List,ProjNet.CoordinateSystems,HorizontalDatum,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\HorizontalDatum.cs,HorizontalDatum,The method has 9 parameters. Parameters: ellipsoid' toWgs84' type' name' authority' code' alias' remarks' abbreviation
Long Parameter List,ProjNet.CoordinateSystems,Info,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Info.cs,Info,The method has 6 parameters. Parameters: name' authority' code' alias' abbreviation' remarks
Long Parameter List,ProjNet.CoordinateSystems,LinearUnit,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\LinearUnit.cs,LinearUnit,The method has 7 parameters. Parameters: metersPerUnit' name' authority' authorityCode' alias' abbreviation' remarks
Long Parameter List,ProjNet.CoordinateSystems,PrimeMeridian,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\PrimeMeridian.cs,PrimeMeridian,The method has 8 parameters. Parameters: longitude' angularUnit' name' authority' authorityCode' alias' abbreviation' remarks
Long Parameter List,ProjNet.CoordinateSystems,ProjectedCoordinateSystem,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\ProjectedCoordinateSystem.cs,ProjectedCoordinateSystem,The method has 11 parameters. Parameters: datum' geographicCoordinateSystem' linearUnit' projection' axisInfo' name' authority' code' alias' remarks' abbreviation
Long Parameter List,ProjNet.CoordinateSystems,Projection,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projection.cs,Projection,The method has 8 parameters. Parameters: className' parameters' name' authority' code' alias' remarks' abbreviation
Long Parameter List,ProjNet.CoordinateSystems,Unit,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Unit.cs,Unit,The method has 7 parameters. Parameters: conversionFactor' name' authority' authorityCode' alias' abbreviation' remarks
Long Parameter List,ProjNet.CoordinateSystems,Wgs84ConversionInfo,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\WGS84ConversionInfo.cs,Wgs84ConversionInfo,The method has 7 parameters. Parameters: dx' dy' dz' ex' ey' ez' ppm
Long Parameter List,ProjNet.CoordinateSystems,Wgs84ConversionInfo,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\WGS84ConversionInfo.cs,Wgs84ConversionInfo,The method has 8 parameters. Parameters: dx' dy' dz' ex' ey' ez' ppm' areaOfUse
Long Parameter List,ProjNet.CoordinateSystems.Projections,MapProjection,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\MapProjection.cs,TransformCore,The method has 6 parameters. Parameters: xs' ys' zs' strideX' strideY' strideZ
Long Parameter List,ProjNet.CoordinateSystems.Projections,MapProjection,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\MapProjection.cs,mlfn,The method has 5 parameters. Parameters: e0' e1' e2' e3' phi
Long Parameter List,ProjNet.CoordinateSystems.Transformations,AffineTransform,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Transformations\AffineTransform.cs,AffineTransform,The method has 6 parameters. Parameters: m00' m01' m02' m10' m11' m12
Long Parameter List,ProjNet.CoordinateSystems.Transformations,CoordinateTransformation,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Transformations\CoordinateTransformation.cs,CoordinateTransformation,The method has 9 parameters. Parameters: sourceCS' targetCS' transformType' mathTransform' name' authority' authorityCode' areaOfUse' remarks
Long Parameter List,ProjNet.CoordinateSystems.Transformations,MathTransform,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Transformations\MathTransform.cs,TransformCore,The method has 6 parameters. Parameters: xs' ys' zs' strideX' strideY' strideZ
Long Parameter List,ProjNet.CoordinateSystems.Transformations,MathTransform,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Transformations\MathTransform.cs,Transform,The method has 6 parameters. Parameters: xs' ys' zs' strideX' strideY' strideZ
Long Parameter List,ProjNet.CoordinateSystems.Transformations,PrimeMeridianTransform,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Transformations\PrimeMeridianTransform.cs,TransformCore,The method has 6 parameters. Parameters: xs' ys' zs' strideX' strideY' strideZ
Long Identifier,ProjNet,CoordinateSystemServices,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystemServices.cs,CoordinateSystemServices,The length of the parameter coordinateTransformationFactory is 31.
Long Identifier,ProjNet,CoordinateSystemServices,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystemServices.cs,CoordinateSystemServices,The length of the parameter coordinateTransformationFactory is 31.
Long Identifier,ProjNet.CoordinateSystems.Projections,LambertAzimuthalEqualAreaProjection,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\LambertAzimuthalEqualAreaProjection.cs,,The length of the parameter _reciprocSemiMajorTimesScaleFactor is 34.
Long Identifier,ProjNet.CoordinateSystems.Projections,PolyconicProjection,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\PolyconicProjection.cs,,The length of the parameter _reciprocSemiMajorTimesScaleFactor is 34.
Long Identifier,ProjNet.CoordinateSystems.Transformations,ConcatenatedTransform,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Transformations\ConcatenatedTransform.cs,,The length of the parameter CoordinateTransformationFactory is 31.
Long Statement,ProjNet.CoordinateSystems,CoordinateSystem,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\CoordinateSystem.cs,GetAxis,The length of the statement  "				throw new ArgumentException("AxisInfo not available for dimension " + dimension.ToString(CultureInfo.InvariantCulture));" is 120.
Long Statement,ProjNet.CoordinateSystems,CoordinateSystemFactory,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\CoordinateSystemFactory.cs,CreateEllipsoid,The length of the statement  "            return new Ellipsoid(semiMajorAxis' semiMinorAxis' ivf' false' linearUnit' name' string.Empty' -1' string.Empty' string.Empty' string.Empty);" is 141.
Long Statement,ProjNet.CoordinateSystems,CoordinateSystemFactory,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\CoordinateSystemFactory.cs,CreateFlattenedSphere,The length of the statement  "            return new Ellipsoid(semiMajorAxis' -1' inverseFlattening' true' linearUnit' name' string.Empty' -1' string.Empty' string.Empty' string.Empty);" is 143.
Long Statement,ProjNet.CoordinateSystems,CoordinateSystemFactory,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\CoordinateSystemFactory.cs,CreateProjectedCoordinateSystem,The length of the statement  "            return new ProjectedCoordinateSystem(null' gcs' linearUnit' projection' info' name' string.Empty' -1' string.Empty' string.Empty' string.Empty);" is 144.
Long Statement,ProjNet.CoordinateSystems,CoordinateSystemFactory,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\CoordinateSystemFactory.cs,CreateProjection,The length of the statement  "            return new Projection(wktProjectionClass' parameters' name' string.Empty' -1' string.Empty' string.Empty' string.Empty);" is 120.
Long Statement,ProjNet.CoordinateSystems,CoordinateSystemFactory,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\CoordinateSystemFactory.cs,CreateHorizontalDatum,The length of the statement  "            return new HorizontalDatum(ellipsoid' toWgs84' datumType' name' string.Empty' -1' string.Empty' string.Empty' string.Empty);" is 124.
Long Statement,ProjNet.CoordinateSystems,CoordinateSystemFactory,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\CoordinateSystemFactory.cs,CreateGeographicCoordinateSystem,The length of the statement  "            return new GeographicCoordinateSystem(angularUnit' datum' primeMeridian' info' name' string.Empty' -1' string.Empty' string.Empty' string.Empty);" is 145.
Long Statement,ProjNet.CoordinateSystems,CoordinateSystemFactory,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\CoordinateSystemFactory.cs,CreateGeocentricCoordinateSystem,The length of the statement  "            return new GeocentricCoordinateSystem(datum' linearUnit' primeMeridian' info' name' string.Empty' -1' string.Empty' string.Empty' string.Empty);" is 144.
Long Statement,ProjNet.CoordinateSystems,HorizontalDatum,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\HorizontalDatum.cs,EqualParams,The length of the statement  "				datum.Ellipsoid.EqualParams(this.Ellipsoid) || datum == null && this.Ellipsoid == null) && this.DatumType == datum.DatumType;" is 125.
Long Statement,ProjNet.CoordinateSystems,ProjectedCoordinateSystem,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\ProjectedCoordinateSystem.cs,WGS84_UTM,The length of the statement  "			//IProjection projection = cFac.CreateProjection("UTM" + Zone.ToString() + (ZoneIsNorth ? "N" : "S")' "Transverse_Mercator"' parameters);" is 137.
Long Statement,ProjNet.CoordinateSystems,ProjectedCoordinateSystem,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\ProjectedCoordinateSystem.cs,WGS84_UTM,The length of the statement  "			var proj = new Projection("Transverse_Mercator"' pInfo' "UTM" + zone.ToString(CultureInfo.InvariantCulture) + (zoneIsNorth ? "N" : "S")'" is 136.
Long Statement,ProjNet.CoordinateSystems,ProjectedCoordinateSystem,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\ProjectedCoordinateSystem.cs,WGS84_UTM,The length of the statement  "				"WGS 84 / UTM zone " + zone.ToString(CultureInfo.InvariantCulture) + (zoneIsNorth ? "N" : "S")' "EPSG"' 32600 + zone + (zoneIsNorth ? 0 : 100)'" is 143.
Long Statement,ProjNet.CoordinateSystems.Projections,ProjectionsRegistry,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\ProjectionsRegistry.cs,Register,The length of the statement  "                throw new ArgumentException("The provided type does not implement 'GeoAPI.CoordinateSystems.Transformations.IMathTransform'!"' nameof(type));" is 141.
Long Statement,ProjNet.CoordinateSystems.Transformations,AffineTransform,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Transformations\AffineTransform.cs,Inverse,The length of the statement  "                //remarks about dimensionality: if input dimension is M' and output dimension is N' then the matrix will have size [N+1][M+1]." is 126.
Long Statement,ProjNet.CoordinateSystems.Transformations,AffineTransform,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Transformations\AffineTransform.cs,TransformAffine,The length of the statement  "            //check source dimensionality - allow coordinate clipping' if source dimensionality is greater then expected source dimensionality of affine transformation" is 155.
Long Statement,ProjNet.CoordinateSystems.Transformations,CoordinateTransformationFactory,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Transformations\CoordinateTransformationFactory.cs,Geog2Geoc,The length of the statement  "                return new CoordinateTransformation(source' target' TransformType.Conversion' geocMathTransform' string.Empty' string.Empty' -1' string.Empty' string.Empty);" is 157.
Long Statement,ProjNet.CoordinateSystems.Transformations,CoordinateTransformationFactory,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Transformations\CoordinateTransformationFactory.cs,Geog2Geoc,The length of the statement  "            ct.CoordinateTransformationList.Add(new CoordinateTransformation(source' target' TransformType.Transformation' new PrimeMeridianTransform(source.PrimeMeridian' target.PrimeMeridian)' string.Empty' string.Empty' -1' string.Empty' string.Empty));" is 244.
Long Statement,ProjNet.CoordinateSystems.Transformations,CoordinateTransformationFactory,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Transformations\CoordinateTransformationFactory.cs,Geog2Geoc,The length of the statement  "            ct.CoordinateTransformationList.Add(new CoordinateTransformation(source' target' TransformType.Conversion' geocMathTransform' string.Empty' string.Empty' -1' string.Empty' string.Empty));" is 187.
Long Statement,ProjNet.CoordinateSystems.Transformations,CoordinateTransformationFactory,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Transformations\CoordinateTransformationFactory.cs,Geog2Geoc,The length of the statement  "            return new CoordinateTransformation(source' target' TransformType.Conversion' ct' string.Empty' string.Empty' -1' string.Empty' string.Empty);" is 142.
Long Statement,ProjNet.CoordinateSystems.Transformations,CoordinateTransformationFactory,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Transformations\CoordinateTransformationFactory.cs,Geoc2Geog,The length of the statement  "                return new CoordinateTransformation(source' target' TransformType.Conversion' geocMathTransform' string.Empty' string.Empty' -1' string.Empty' string.Empty);" is 157.
Long Statement,ProjNet.CoordinateSystems.Transformations,CoordinateTransformationFactory,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Transformations\CoordinateTransformationFactory.cs,Geoc2Geog,The length of the statement  "            ct.CoordinateTransformationList.Add(new CoordinateTransformation(source' target' TransformType.Conversion' geocMathTransform' string.Empty' string.Empty' -1' string.Empty' string.Empty));" is 187.
Long Statement,ProjNet.CoordinateSystems.Transformations,CoordinateTransformationFactory,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Transformations\CoordinateTransformationFactory.cs,Geoc2Geog,The length of the statement  "            ct.CoordinateTransformationList.Add(new CoordinateTransformation(source' target' TransformType.Transformation' new PrimeMeridianTransform(source.PrimeMeridian' target.PrimeMeridian)' string.Empty' string.Empty' -1' string.Empty' string.Empty));" is 244.
Long Statement,ProjNet.CoordinateSystems.Transformations,CoordinateTransformationFactory,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Transformations\CoordinateTransformationFactory.cs,Geoc2Geog,The length of the statement  "            return new CoordinateTransformation(source' target' TransformType.Conversion' ct' string.Empty' string.Empty' -1' string.Empty' string.Empty);" is 142.
Long Statement,ProjNet.CoordinateSystems.Transformations,CoordinateTransformationFactory,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Transformations\CoordinateTransformationFactory.cs,Proj2Geog,The length of the statement  "                var mathTransform = CreateCoordinateOperation(source.Projection' source.GeographicCoordinateSystem.HorizontalDatum.Ellipsoid' source.LinearUnit).Inverse();" is 155.
Long Statement,ProjNet.CoordinateSystems.Transformations,CoordinateTransformationFactory,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Transformations\CoordinateTransformationFactory.cs,CreateGeoc2Geoc,The length of the statement  "					((target.HorizontalDatum.Wgs84Parameters == null || target.HorizontalDatum.Wgs84Parameters.HasZeroValuesOnly) ? target : GeocentricCoordinateSystem.WGS84)'" is 155.
Long Statement,ProjNet.CoordinateSystems.Transformations,CoordinateTransformationFactory,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Transformations\CoordinateTransformationFactory.cs,CreateGeoc2Geoc,The length of the statement  "					((source.HorizontalDatum.Wgs84Parameters == null || source.HorizontalDatum.Wgs84Parameters.HasZeroValuesOnly) ? source : GeocentricCoordinateSystem.WGS84)'" is 155.
Long Statement,ProjNet.CoordinateSystems.Transformations,CoordinateTransformationFactory,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Transformations\CoordinateTransformationFactory.cs,CreateGeoc2Geoc,The length of the statement  "				return new CoordinateTransformation(source' target' TransformType.ConversionAndTransformation' ((ICoordinateTransformation)ct.CoordinateTransformationList[0]).MathTransform' ""' ""' -1' ""' "");" is 194.
Long Statement,ProjNet.CoordinateSystems.Transformations,CoordinateTransformationFactory,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Transformations\CoordinateTransformationFactory.cs,Fitt2Any,The length of the statement  "            ct.CoordinateTransformationList.Add (CreateTransform (source' source.BaseCoordinateSystem' TransformType.Transformation' mt));" is 126.
Long Statement,ProjNet.CoordinateSystems.Transformations,CoordinateTransformationFactory,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Transformations\CoordinateTransformationFactory.cs,Any2Fitt,The length of the statement  "            ct.CoordinateTransformationList.Add (CreateTransform (target.BaseCoordinateSystem' target' TransformType.Transformation' invMt));" is 129.
Long Statement,ProjNet.CoordinateSystems.Transformations,CoordinateTransformationFactory,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Transformations\CoordinateTransformationFactory.cs,CreateTransform,The length of the statement  "            return new CoordinateTransformation (sourceCS' targetCS' transformType' mathTransform' string.Empty' string.Empty' -1' string.Empty' string.Empty);" is 147.
Long Statement,ProjNet.IO.CoordinateSystems,CoordinateSystemWktReader,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\IO\CoordinateSystems\CoordinateSystemWktReader.cs,ReadEllipsoid,The length of the statement  "            var ellipsoid = new Ellipsoid(majorAxis' 0.0' e' true' LinearUnit.Metre' name' authority' authorityCode' string.Empty' string.Empty' string.Empty);" is 147.
Long Statement,ProjNet.IO.CoordinateSystems,CoordinateSystemWktReader,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\IO\CoordinateSystems\CoordinateSystemWktReader.cs,ReadProjection,The length of the statement  "            var projection = new Projection(projectionName' paramList' projectionName' authority' authorityCode' string.Empty' string.Empty' string.Empty);" is 143.
Long Statement,ProjNet.IO.CoordinateSystems,CoordinateSystemWktReader,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\IO\CoordinateSystems\CoordinateSystemWktReader.cs,ReadProjectedCoordinateSystem,The length of the statement  "            var projectedCS = new ProjectedCoordinateSystem(geographicCS.HorizontalDatum' geographicCS' unit as LinearUnit' projection' axes' name' authority' authorityCode' string.Empty' string.Empty' string.Empty);" is 204.
Long Statement,ProjNet.IO.CoordinateSystems,CoordinateSystemWktReader,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\IO\CoordinateSystems\CoordinateSystemWktReader.cs,ReadGeographicCoordinateSystem,The length of the statement  "            DATUM["OSGB 1936"'SPHEROID["Airy 1830"'6377563.396'299.3249646'AUTHORITY["EPSG"'"7001"]]'TOWGS84[0'0'0'0'0'0'0]'AUTHORITY["EPSG"'"6277"]]" is 137.
Long Statement,ProjNet.IO.CoordinateSystems,CoordinateSystemWktReader,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\IO\CoordinateSystems\CoordinateSystemWktReader.cs,ReadHorizontalDatum,The length of the statement  "            //DATUM["OSGB 1936"'SPHEROID["Airy 1830"'6377563.396'299.3249646'AUTHORITY["EPSG"'"7001"]]'TOWGS84[0'0'0'0'0'0'0]'AUTHORITY["EPSG"'"6277"]]" is 139.
Long Statement,ProjNet.IO.CoordinateSystems,CoordinateSystemWktReader,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\IO\CoordinateSystems\CoordinateSystemWktReader.cs,ReadHorizontalDatum,The length of the statement  "            var horizontalDatum = new HorizontalDatum(ellipsoid' wgsInfo' DatumType.HD_Geocentric' name' authority' authorityCode' string.Empty' string.Empty' string.Empty);" is 161.
Long Statement,ProjNet.IO.CoordinateSystems,CoordinateSystemWktReader,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\IO\CoordinateSystems\CoordinateSystemWktReader.cs,ReadPrimeMeridian,The length of the statement  "            var primeMeridian = new PrimeMeridian(longitude' AngularUnit.Degrees' name' authority' authorityCode' string.Empty' string.Empty' string.Empty);" is 144.
Long Statement,ProjNet.IO.CoordinateSystems,CoordinateSystemWktReader,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\IO\CoordinateSystems\CoordinateSystemWktReader.cs,ReadFittedCoordinateSystem,The length of the statement  "                 PROJCS["DHDN / Gauss-Kruger zone 3"' GEOGCS["DHDN"' DATUM["Deutsches_Hauptdreiecksnetz"' SPHEROID["Bessel 1841"' 6377397.155' 299.1528128' AUTHORITY["EPSG"' "7004"]]' TOWGS84[612.4' 77' 440.2' -0.054' 0.057' -2.797' 0.525975255930096]' AUTHORITY["EPSG"' "6314"]]' PRIMEM["Greenwich"' 0' AUTHORITY["EPSG"' "8901"]]' UNIT["degree"' 0.0174532925199433' AUTHORITY["EPSG"' "9122"]]' AUTHORITY["EPSG"' "4314"]]' UNIT["metre"' 1' AUTHORITY["EPSG"' "9001"]]' PROJECTION["Transverse_Mercator"]' PARAMETER["latitude_of_origin"' 0]' PARAMETER["central_meridian"' 9]' PARAMETER["scale_factor"' 1]' PARAMETER["false_easting"' 3500000]' PARAMETER["false_northing"' 0]' AUTHORITY["EPSG"' "31467"]]" is 682.
Long Statement,ProjNet.IO.CoordinateSystems,CoordinateSystemWktReader,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\IO\CoordinateSystems\CoordinateSystemWktReader.cs,ReadFittedCoordinateSystem,The length of the statement  "            var fittedCS = new FittedCoordinateSystem (baseCS' toBaseTransform' name' authority' authorityCode' string.Empty' string.Empty' string.Empty);" is 142.
Long Statement,ProjNet.IO.CoordinateSystems,StreamTokenizer,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\IO\CoordinateSystems\StreamTokenizer.cs,NextTokenAny,The length of the statement  "                    if ((currentCharacter == 'E' || currentCharacter == '-' || currentCharacter == '+') && nextTokenType == TokenType.Number)" is 121.
Long Statement,ProjNet.IO.CoordinateSystems,WktStreamTokenizer,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\IO\CoordinateSystems\WKTStreamTokenizer.cs,ReadToken,The length of the statement  "                string s = string.Format(_nfi' "Expecting ('{3}') but got a '{0}' at line {1} column {2}."' GetStringValue()' LineNumber' Column' expectedToken);" is 145.
Complex Conditional,ProjNet.IO.CoordinateSystems,StreamTokenizer,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\IO\CoordinateSystems\StreamTokenizer.cs,NextTokenAny,The conditional expression  "(currentCharacter == 'E' || currentCharacter == '-' || currentCharacter == '+') && nextTokenType == TokenType.Number"  is complex.
Magic Number,ProjNet,CoordinateSystemServices,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystemServices.cs,DefaultInitialization,The following statement contains a magic number: yield return new KeyValuePair<int' CoordinateSystem>(4326' GeographicCoordinateSystem.WGS84);
Magic Number,ProjNet,CoordinateSystemServices,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystemServices.cs,DefaultInitialization,The following statement contains a magic number: yield return new KeyValuePair<int' CoordinateSystem>(3857' ProjectedCoordinateSystem.WebMercator);
Magic Number,ProjNet.CoordinateSystems,CoordinateSystemFactory,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\CoordinateSystemFactory.cs,CreateProjectedCoordinateSystem,The following statement contains a magic number: var info = new List<AxisInfo>(2);
Magic Number,ProjNet.CoordinateSystems,CoordinateSystemFactory,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\CoordinateSystemFactory.cs,CreateGeographicCoordinateSystem,The following statement contains a magic number: var info = new List<AxisInfo>(2);
Magic Number,ProjNet.CoordinateSystems,CoordinateSystemFactory,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\CoordinateSystemFactory.cs,CreateGeocentricCoordinateSystem,The following statement contains a magic number: var info = new List<AxisInfo>(3);
Magic Number,ProjNet.CoordinateSystems,GeocentricCoordinateSystem,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\GeocentricCoordinateSystem.cs,GeocentricCoordinateSystem,The following statement contains a magic number: axisInfo.Count != 3
Magic Number,ProjNet.CoordinateSystems,HorizontalCoordinateSystem,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\HorizontalCoordinateSystem.cs,HorizontalCoordinateSystem,The following statement contains a magic number: axisInfo.Count != 2
Magic Number,ProjNet.CoordinateSystems,ProjectedCoordinateSystem,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\ProjectedCoordinateSystem.cs,WGS84_UTM,The following statement contains a magic number: pInfo.Add(new ProjectionParameter("central_meridian"' zone * 6 - 183));
Magic Number,ProjNet.CoordinateSystems,ProjectedCoordinateSystem,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\ProjectedCoordinateSystem.cs,WGS84_UTM,The following statement contains a magic number: pInfo.Add(new ProjectionParameter("central_meridian"' zone * 6 - 183));
Magic Number,ProjNet.CoordinateSystems,ProjectedCoordinateSystem,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\ProjectedCoordinateSystem.cs,WGS84_UTM,The following statement contains a magic number: pInfo.Add(new ProjectionParameter("scale_factor"' 0.9996));
Magic Number,ProjNet.CoordinateSystems,ProjectedCoordinateSystem,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\ProjectedCoordinateSystem.cs,WGS84_UTM,The following statement contains a magic number: pInfo.Add(new ProjectionParameter("false_easting"' 500000));
Magic Number,ProjNet.CoordinateSystems,ProjectedCoordinateSystem,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\ProjectedCoordinateSystem.cs,WGS84_UTM,The following statement contains a magic number: pInfo.Add(new ProjectionParameter("false_northing"' zoneIsNorth ? 0 : 10000000));
Magic Number,ProjNet.CoordinateSystems,ProjectedCoordinateSystem,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\ProjectedCoordinateSystem.cs,WGS84_UTM,The following statement contains a magic number: var proj = new Projection("Transverse_Mercator"' pInfo' "UTM" + zone.ToString(CultureInfo.InvariantCulture) + (zoneIsNorth ? "N" : "S")' 				"EPSG"' 32600 + zone + (zoneIsNorth ? 0 : 100)' string.Empty' string.Empty' string.Empty);
Magic Number,ProjNet.CoordinateSystems,ProjectedCoordinateSystem,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\ProjectedCoordinateSystem.cs,WGS84_UTM,The following statement contains a magic number: var proj = new Projection("Transverse_Mercator"' pInfo' "UTM" + zone.ToString(CultureInfo.InvariantCulture) + (zoneIsNorth ? "N" : "S")' 				"EPSG"' 32600 + zone + (zoneIsNorth ? 0 : 100)' string.Empty' string.Empty' string.Empty);
Magic Number,ProjNet.CoordinateSystems,ProjectedCoordinateSystem,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\ProjectedCoordinateSystem.cs,WGS84_UTM,The following statement contains a magic number: return new ProjectedCoordinateSystem(CoordinateSystems.HorizontalDatum.WGS84' 				CoordinateSystems.GeographicCoordinateSystem.WGS84' CoordinateSystems.LinearUnit.Metre' proj' axes' 				"WGS 84 / UTM zone " + zone.ToString(CultureInfo.InvariantCulture) + (zoneIsNorth ? "N" : "S")' "EPSG"' 32600 + zone + (zoneIsNorth ? 0 : 100)' 				string.Empty' "Large and medium scale topographic mapping and engineering survey."' string.Empty);
Magic Number,ProjNet.CoordinateSystems,ProjectedCoordinateSystem,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\ProjectedCoordinateSystem.cs,WGS84_UTM,The following statement contains a magic number: return new ProjectedCoordinateSystem(CoordinateSystems.HorizontalDatum.WGS84' 				CoordinateSystems.GeographicCoordinateSystem.WGS84' CoordinateSystems.LinearUnit.Metre' proj' axes' 				"WGS 84 / UTM zone " + zone.ToString(CultureInfo.InvariantCulture) + (zoneIsNorth ? "N" : "S")' "EPSG"' 32600 + zone + (zoneIsNorth ? 0 : 100)' 				string.Empty' "Large and medium scale topographic mapping and engineering survey."' string.Empty);
Magic Number,ProjNet.CoordinateSystems,Wgs84ConversionInfo,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\WGS84ConversionInfo.cs,GetAffineTransform,The following statement contains a magic number: double RS = 1 + Ppm * 0.000001;
Magic Number,ProjNet.CoordinateSystems,Wgs84ConversionInfo,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\WGS84ConversionInfo.cs,GetAffineTransform,The following statement contains a magic number: return new double[7] { RS' Ex * SEC_TO_RAD * RS' Ey * SEC_TO_RAD * RS' Ez * SEC_TO_RAD * RS' Dx' Dy' Dz };
Magic Number,ProjNet.CoordinateSystems.Projections,AlbersProjection,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\AlbersProjection.cs,AlbersProjection,The following statement contains a magic number: double m1 = Math.Cos(lat1) / Math.Sqrt(1 - _es * Math.Pow(Math.Sin(lat1)' 2));
Magic Number,ProjNet.CoordinateSystems.Projections,AlbersProjection,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\AlbersProjection.cs,AlbersProjection,The following statement contains a magic number: double m2 = Math.Cos(lat2) / Math.Sqrt(1 - _es * Math.Pow(Math.Sin(lat2)' 2));
Magic Number,ProjNet.CoordinateSystems.Projections,AlbersProjection,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\AlbersProjection.cs,AlbersProjection,The following statement contains a magic number: _n = (Math.Pow(m1' 2) - Math.Pow(m2' 2)) / (alpha2 - alpha1);
Magic Number,ProjNet.CoordinateSystems.Projections,AlbersProjection,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\AlbersProjection.cs,AlbersProjection,The following statement contains a magic number: _n = (Math.Pow(m1' 2) - Math.Pow(m2' 2)) / (alpha2 - alpha1);
Magic Number,ProjNet.CoordinateSystems.Projections,AlbersProjection,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\AlbersProjection.cs,AlbersProjection,The following statement contains a magic number: _c = Math.Pow(m1' 2) + (_n * alpha1);
Magic Number,ProjNet.CoordinateSystems.Projections,AlbersProjection,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\AlbersProjection.cs,MetersToRadians,The following statement contains a magic number: double ro = Math.Sqrt(Math.Pow(x' 2) + Math.Pow(_ro0 - y' 2));
Magic Number,ProjNet.CoordinateSystems.Projections,AlbersProjection,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\AlbersProjection.cs,MetersToRadians,The following statement contains a magic number: double ro = Math.Sqrt(Math.Pow(x' 2) + Math.Pow(_ro0 - y' 2));
Magic Number,ProjNet.CoordinateSystems.Projections,AlbersProjection,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\AlbersProjection.cs,MetersToRadians,The following statement contains a magic number: double q = (_c - Math.Pow(ro' 2) * Math.Pow(_n' 2) / Math.Pow(_semiMajor' 2)) / _n;
Magic Number,ProjNet.CoordinateSystems.Projections,AlbersProjection,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\AlbersProjection.cs,MetersToRadians,The following statement contains a magic number: double q = (_c - Math.Pow(ro' 2) * Math.Pow(_n' 2) / Math.Pow(_semiMajor' 2)) / _n;
Magic Number,ProjNet.CoordinateSystems.Projections,AlbersProjection,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\AlbersProjection.cs,MetersToRadians,The following statement contains a magic number: double q = (_c - Math.Pow(ro' 2) * Math.Pow(_n' 2) / Math.Pow(_semiMajor' 2)) / _n;
Magic Number,ProjNet.CoordinateSystems.Projections,AlbersProjection,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\AlbersProjection.cs,MetersToRadians,The following statement contains a magic number: double lat = Math.Asin(q * 0.5);
Magic Number,ProjNet.CoordinateSystems.Projections,AlbersProjection,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\AlbersProjection.cs,MetersToRadians,The following statement contains a magic number: double e2sin2 = _es * Math.Pow(sin' 2);
Magic Number,ProjNet.CoordinateSystems.Projections,AlbersProjection,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\AlbersProjection.cs,MetersToRadians,The following statement contains a magic number: lat += Math.Pow(1 - e2sin2' 2) / (2 * Math.Cos(lat)) *                        (q / (1 - _es) - sin / (1 - e2sin2) +                         1 / (2 * _e) * Math.Log((1 - _e * sin) / (1 + _e * sin)));
Magic Number,ProjNet.CoordinateSystems.Projections,AlbersProjection,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\AlbersProjection.cs,MetersToRadians,The following statement contains a magic number: lat += Math.Pow(1 - e2sin2' 2) / (2 * Math.Cos(lat)) *                        (q / (1 - _es) - sin / (1 - e2sin2) +                         1 / (2 * _e) * Math.Log((1 - _e * sin) / (1 + _e * sin)));
Magic Number,ProjNet.CoordinateSystems.Projections,AlbersProjection,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\AlbersProjection.cs,MetersToRadians,The following statement contains a magic number: lat += Math.Pow(1 - e2sin2' 2) / (2 * Math.Cos(lat)) *                        (q / (1 - _es) - sin / (1 - e2sin2) +                         1 / (2 * _e) * Math.Log((1 - _e * sin) / (1 + _e * sin)));
Magic Number,ProjNet.CoordinateSystems.Projections,AlbersProjection,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\AlbersProjection.cs,MetersToRadians,The following statement contains a magic number: iterationCounter > 25
Magic Number,ProjNet.CoordinateSystems.Projections,AlbersProjection,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\AlbersProjection.cs,MetersToRadians,The following statement contains a magic number: Math.Abs(lat - preLat) > 0.000001
Magic Number,ProjNet.CoordinateSystems.Projections,AlbersProjection,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\AlbersProjection.cs,alpha,The following statement contains a magic number: double sinsq = Math.Pow(sin' 2);
Magic Number,ProjNet.CoordinateSystems.Projections,AlbersProjection,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\AlbersProjection.cs,alpha,The following statement contains a magic number: return (1 - _es) * (((sin / (1 - _es * sinsq)) - 1 / (2 * _e) * Math.Log((1 - _e * sin) / (1 + _e * sin))));
Magic Number,ProjNet.CoordinateSystems.Projections,CassiniSoldnerProjection,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\CassiniSoldnerProjection.cs,CassiniSoldnerProjection,The following statement contains a magic number: AuthorityCode = 9806;
Magic Number,ProjNet.CoordinateSystems.Projections,CassiniSoldnerProjection,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\CassiniSoldnerProjection.cs,RadiansToMeters,The following statement contains a magic number: double c = _cFactor * Math.Pow(cosPhi' 2.0d);
Magic Number,ProjNet.CoordinateSystems.Projections,CassiniSoldnerProjection,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\CassiniSoldnerProjection.cs,RadiansToMeters,The following statement contains a magic number: double x = n * a1 * (1.0d - a2 * t * (One6th - (8.0d - t + 8.0d * c) * a2 * One120th));
Magic Number,ProjNet.CoordinateSystems.Projections,CassiniSoldnerProjection,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\CassiniSoldnerProjection.cs,RadiansToMeters,The following statement contains a magic number: double x = n * a1 * (1.0d - a2 * t * (One6th - (8.0d - t + 8.0d * c) * a2 * One120th));
Magic Number,ProjNet.CoordinateSystems.Projections,CassiniSoldnerProjection,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\CassiniSoldnerProjection.cs,RadiansToMeters,The following statement contains a magic number: y -= _m0 - n * tn * a2 * (0.5d + (5.0d - t + 6.0d * c) * a2 * One24th);
Magic Number,ProjNet.CoordinateSystems.Projections,CassiniSoldnerProjection,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\CassiniSoldnerProjection.cs,RadiansToMeters,The following statement contains a magic number: y -= _m0 - n * tn * a2 * (0.5d + (5.0d - t + 6.0d * c) * a2 * One24th);
Magic Number,ProjNet.CoordinateSystems.Projections,CassiniSoldnerProjection,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\CassiniSoldnerProjection.cs,RadiansToMeters,The following statement contains a magic number: y -= _m0 - n * tn * a2 * (0.5d + (5.0d - t + 6.0d * c) * a2 * One24th);
Magic Number,ProjNet.CoordinateSystems.Projections,CassiniSoldnerProjection,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\CassiniSoldnerProjection.cs,MetersToRadians,The following statement contains a magic number: y = phi1 - (n * tn / r) * d2 * (.5 - (1.0 + 3.0 * t) * d2 * One24th);
Magic Number,ProjNet.CoordinateSystems.Projections,CassiniSoldnerProjection,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\CassiniSoldnerProjection.cs,MetersToRadians,The following statement contains a magic number: y = phi1 - (n * tn / r) * d2 * (.5 - (1.0 + 3.0 * t) * d2 * One24th);
Magic Number,ProjNet.CoordinateSystems.Projections,CassiniSoldnerProjection,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\CassiniSoldnerProjection.cs,MetersToRadians,The following statement contains a magic number: double lambda = dd * (1.0 + t * d2 * (-One3rd + (1.0 + 3.0 * t) * d2 * One15th)) / Math.Cos(phi1);
Magic Number,ProjNet.CoordinateSystems.Projections,CassiniSoldnerProjection,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\CassiniSoldnerProjection.cs,Phi1,The following statement contains a magic number: const int maxIter = 10;
Magic Number,ProjNet.CoordinateSystems.Projections,CassiniSoldnerProjection,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\CassiniSoldnerProjection.cs,Phi1,The following statement contains a magic number: const double eps = 1e-11;
Magic Number,ProjNet.CoordinateSystems.Projections,HotineObliqueMercatorProjection,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\HotineObliqueMercatorProjection.cs,HotineObliqueMercatorProjection,The following statement contains a magic number: AuthorityCode = 9812;
Magic Number,ProjNet.CoordinateSystems.Projections,HotineObliqueMercatorProjection,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\HotineObliqueMercatorProjection.cs,HotineObliqueMercatorProjection,The following statement contains a magic number: double con = 1.0 - _es * Math.Pow(_sinP20' 2);
Magic Number,ProjNet.CoordinateSystems.Projections,HotineObliqueMercatorProjection,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\HotineObliqueMercatorProjection.cs,HotineObliqueMercatorProjection,The following statement contains a magic number: _bl = Math.Sqrt(1.0 + _es * Math.Pow(_cosP20' 4.0) / ( 1.0 - _es ));
Magic Number,ProjNet.CoordinateSystems.Projections,HotineObliqueMercatorProjection,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\HotineObliqueMercatorProjection.cs,HotineObliqueMercatorProjection,The following statement contains a magic number: double g = .5 * ( f - 1.0 / f );
Magic Number,ProjNet.CoordinateSystems.Projections,HotineObliqueMercatorProjection,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\HotineObliqueMercatorProjection.cs,RadiansToMeters,The following statement contains a magic number: double s = .5 * (q - 1.0 / q);
Magic Number,ProjNet.CoordinateSystems.Projections,HotineObliqueMercatorProjection,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\HotineObliqueMercatorProjection.cs,RadiansToMeters,The following statement contains a magic number: double t = .5 * (q + 1.0 / q);
Magic Number,ProjNet.CoordinateSystems.Projections,HotineObliqueMercatorProjection,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\HotineObliqueMercatorProjection.cs,RadiansToMeters,The following statement contains a magic number: Math.Abs(con) < .0000001
Magic Number,ProjNet.CoordinateSystems.Projections,HotineObliqueMercatorProjection,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\HotineObliqueMercatorProjection.cs,RadiansToMeters,The following statement contains a magic number: double vs = .5 * _al * Math.Log((1.0 - ul) / (1.0 + ul)) / _bl;
Magic Number,ProjNet.CoordinateSystems.Projections,HotineObliqueMercatorProjection,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\HotineObliqueMercatorProjection.cs,MetersToRadians,The following statement contains a magic number: double s = .5 * (q - 1.0 / q);
Magic Number,ProjNet.CoordinateSystems.Projections,HotineObliqueMercatorProjection,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\HotineObliqueMercatorProjection.cs,MetersToRadians,The following statement contains a magic number: double t = .5 * (q + 1.0 / q);
Magic Number,ProjNet.CoordinateSystems.Projections,KrovakProjection,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\KrovakProjection.cs,KrovakProjection,The following statement contains a magic number: AuthorityCode = 9819;
Magic Number,ProjNet.CoordinateSystems.Projections,KrovakProjection,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\KrovakProjection.cs,KrovakProjection,The following statement contains a magic number: _tanS2   = Math.Tan(_pseudoStandardParallel / 2 + S45);
Magic Number,ProjNet.CoordinateSystems.Projections,KrovakProjection,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\KrovakProjection.cs,KrovakProjection,The following statement contains a magic number: _hae    = _alfa * _e / 2;
Magic Number,ProjNet.CoordinateSystems.Projections,KrovakProjection,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\KrovakProjection.cs,KrovakProjection,The following statement contains a magic number: double g = Math.Pow((1 - esl) / (1 + esl)' (_alfa * _e) / 2);
Magic Number,ProjNet.CoordinateSystems.Projections,KrovakProjection,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\KrovakProjection.cs,KrovakProjection,The following statement contains a magic number: _k1 = Math.Pow(Math.Tan(lat_origin / 2 + S45)' _alfa) * g / Math.Tan(u0 / 2 + S45);
Magic Number,ProjNet.CoordinateSystems.Projections,KrovakProjection,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\KrovakProjection.cs,KrovakProjection,The following statement contains a magic number: _k1 = Math.Pow(Math.Tan(lat_origin / 2 + S45)' _alfa) * g / Math.Tan(u0 / 2 + S45);
Magic Number,ProjNet.CoordinateSystems.Projections,KrovakProjection,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\KrovakProjection.cs,RadiansToMeters,The following statement contains a magic number: double u = 2 * (Math.Atan(Math.Pow(Math.Tan(phi / 2 + S45)' _alfa) / _k1 * gfi) - S45);
Magic Number,ProjNet.CoordinateSystems.Projections,KrovakProjection,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\KrovakProjection.cs,RadiansToMeters,The following statement contains a magic number: double u = 2 * (Math.Atan(Math.Pow(Math.Tan(phi / 2 + S45)' _alfa) / _k1 * gfi) - S45);
Magic Number,ProjNet.CoordinateSystems.Projections,KrovakProjection,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\KrovakProjection.cs,RadiansToMeters,The following statement contains a magic number: double ro = _rop / Math.Pow(Math.Tan(s / 2 + S45)' _n);
Magic Number,ProjNet.CoordinateSystems.Projections,KrovakProjection,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\KrovakProjection.cs,MetersToRadians,The following statement contains a magic number: double s = 2 * (Math.Atan(Math.Pow(_ro0 / ro' 1 / _n) * _tanS2) - S45);
Magic Number,ProjNet.CoordinateSystems.Projections,KrovakProjection,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\KrovakProjection.cs,MetersToRadians,The following statement contains a magic number: double kau = _ka * Math.Pow(Math.Tan((u / 2.0) + S45)' 1 / _alfa);
Magic Number,ProjNet.CoordinateSystems.Projections,KrovakProjection,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\KrovakProjection.cs,MetersToRadians,The following statement contains a magic number: phi = 2.0 * (Math.Atan(kau * Math.Pow((1.0 + esf) / (1.0 - esf)' _e / 2.0)) - S45);
Magic Number,ProjNet.CoordinateSystems.Projections,KrovakProjection,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\KrovakProjection.cs,MetersToRadians,The following statement contains a magic number: phi = 2.0 * (Math.Atan(kau * Math.Pow((1.0 + esf) / (1.0 - esf)' _e / 2.0)) - S45);
Magic Number,ProjNet.CoordinateSystems.Projections,LambertAzimuthalEqualAreaProjection,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\LambertAzimuthalEqualAreaProjection.cs,LambertAzimuthalEqualAreaProjection,The following statement contains a magic number: switch (_mode)                 {                     case Mode.N_POLE:                     case Mode.S_POLE:                         _dd = 1.0;                         break;                     case Mode.EQUIT:                         _dd = 1.0 / (_rq = Math.Sqrt(0.5 * _qp));                         _xmf = 1.0;                         _ymf = 0.5 * _qp;                         break;                     case Mode.OBLIQ:                         _rq = Math.Sqrt(0.5 * _qp);                         double sinphi = Math.Sin(phi0);                         _sinb1 = qsfn(sinphi' _e' _one_es) / _qp;                         _cosb1 = Math.Sqrt(1.0 - _sinb1 * _sinb1);                         _dd = Math.Cos(phi0) / (Math.Sqrt(1.0 - _es * sinphi * sinphi) * _rq * _cosb1);                         _ymf = (_xmf = _rq) / _dd;                         _xmf *= _dd;                         break;                 }
Magic Number,ProjNet.CoordinateSystems.Projections,LambertAzimuthalEqualAreaProjection,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\LambertAzimuthalEqualAreaProjection.cs,LambertAzimuthalEqualAreaProjection,The following statement contains a magic number: switch (_mode)                 {                     case Mode.N_POLE:                     case Mode.S_POLE:                         _dd = 1.0;                         break;                     case Mode.EQUIT:                         _dd = 1.0 / (_rq = Math.Sqrt(0.5 * _qp));                         _xmf = 1.0;                         _ymf = 0.5 * _qp;                         break;                     case Mode.OBLIQ:                         _rq = Math.Sqrt(0.5 * _qp);                         double sinphi = Math.Sin(phi0);                         _sinb1 = qsfn(sinphi' _e' _one_es) / _qp;                         _cosb1 = Math.Sqrt(1.0 - _sinb1 * _sinb1);                         _dd = Math.Cos(phi0) / (Math.Sqrt(1.0 - _es * sinphi * sinphi) * _rq * _cosb1);                         _ymf = (_xmf = _rq) / _dd;                         _xmf *= _dd;                         break;                 }
Magic Number,ProjNet.CoordinateSystems.Projections,LambertAzimuthalEqualAreaProjection,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\LambertAzimuthalEqualAreaProjection.cs,LambertAzimuthalEqualAreaProjection,The following statement contains a magic number: switch (_mode)                 {                     case Mode.N_POLE:                     case Mode.S_POLE:                         _dd = 1.0;                         break;                     case Mode.EQUIT:                         _dd = 1.0 / (_rq = Math.Sqrt(0.5 * _qp));                         _xmf = 1.0;                         _ymf = 0.5 * _qp;                         break;                     case Mode.OBLIQ:                         _rq = Math.Sqrt(0.5 * _qp);                         double sinphi = Math.Sin(phi0);                         _sinb1 = qsfn(sinphi' _e' _one_es) / _qp;                         _cosb1 = Math.Sqrt(1.0 - _sinb1 * _sinb1);                         _dd = Math.Cos(phi0) / (Math.Sqrt(1.0 - _es * sinphi * sinphi) * _rq * _cosb1);                         _ymf = (_xmf = _rq) / _dd;                         _xmf *= _dd;                         break;                 }
Magic Number,ProjNet.CoordinateSystems.Projections,LambertAzimuthalEqualAreaProjection,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\LambertAzimuthalEqualAreaProjection.cs,EllipsoidalRadiansToMeters,The following statement contains a magic number: switch (_mode)             {                 case Mode.OBLIQ:                     b = Math.Sqrt(2.0 / b);                     y = _ymf * b * (_cosb1 * sinb - _sinb1 * cosb * coslam);                     goto eqcon;                 case Mode.EQUIT:                     b = Math.Sqrt(2.0 / (1.0 + cosb * coslam));                     y = b * sinb * _ymf;                     eqcon:                     x = _xmf * b * cosb * sinlam;                     break;                 case Mode.N_POLE:                 case Mode.S_POLE:                     if (q >= 1e-15)                     {                         b = Math.Sqrt(q);                         x = b * sinlam;                         y = coslam * (_mode == Mode.S_POLE ? b : -b);                     }                     else                         x = y = 0.0;                     break;             }
Magic Number,ProjNet.CoordinateSystems.Projections,LambertAzimuthalEqualAreaProjection,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\LambertAzimuthalEqualAreaProjection.cs,EllipsoidalRadiansToMeters,The following statement contains a magic number: switch (_mode)             {                 case Mode.OBLIQ:                     b = Math.Sqrt(2.0 / b);                     y = _ymf * b * (_cosb1 * sinb - _sinb1 * cosb * coslam);                     goto eqcon;                 case Mode.EQUIT:                     b = Math.Sqrt(2.0 / (1.0 + cosb * coslam));                     y = b * sinb * _ymf;                     eqcon:                     x = _xmf * b * cosb * sinlam;                     break;                 case Mode.N_POLE:                 case Mode.S_POLE:                     if (q >= 1e-15)                     {                         b = Math.Sqrt(q);                         x = b * sinlam;                         y = coslam * (_mode == Mode.S_POLE ? b : -b);                     }                     else                         x = y = 0.0;                     break;             }
Magic Number,ProjNet.CoordinateSystems.Projections,LambertAzimuthalEqualAreaProjection,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\LambertAzimuthalEqualAreaProjection.cs,EllipsoidalRadiansToMeters,The following statement contains a magic number: switch (_mode)             {                 case Mode.OBLIQ:                     b = Math.Sqrt(2.0 / b);                     y = _ymf * b * (_cosb1 * sinb - _sinb1 * cosb * coslam);                     goto eqcon;                 case Mode.EQUIT:                     b = Math.Sqrt(2.0 / (1.0 + cosb * coslam));                     y = b * sinb * _ymf;                     eqcon:                     x = _xmf * b * cosb * sinlam;                     break;                 case Mode.N_POLE:                 case Mode.S_POLE:                     if (q >= 1e-15)                     {                         b = Math.Sqrt(q);                         x = b * sinlam;                         y = coslam * (_mode == Mode.S_POLE ? b : -b);                     }                     else                         x = y = 0.0;                     break;             }
Magic Number,ProjNet.CoordinateSystems.Projections,LambertAzimuthalEqualAreaProjection,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\LambertAzimuthalEqualAreaProjection.cs,SphericalRadiansToMeters,The following statement contains a magic number: switch (_mode)             {                 case Mode.EQUIT:                     y = 1.0 + cosphi * coslam;                     goto oblcon;                 case Mode.OBLIQ:                     y = 1.0 + _sinb1 * sinphi + _cosb1 * cosphi * coslam;                     oblcon:                     if (y <= EPS10)                     {                         //proj_errno_set(P' PJD_ERR_TOLERANCE_CONDITION);                         return;                     }                     y = Math.Sqrt(2.0 / y);                     x = y * cosphi * Math.Sin(lam);                     y *= _mode == Mode.EQUIT ? sinphi :                         _cosb1 * sinphi - _sinb1 * cosphi * coslam;                     break;                 case Mode.N_POLE:                     coslam = -coslam;                     goto continue_S_POLE;                 /*-fallthrough*/                 case Mode.S_POLE:                     continue_S_POLE:                     if (Math.Abs(phi + lat_origin) < EPS10)                     {                         //proj_errno_set(P' PJD_ERR_TOLERANCE_CONDITION);                         return;                     }                     y = FORT_PI - phi * 0.5;                     y = 2.0 * (_mode == Mode.S_POLE ? Math.Cos(y) : Math.Sin(y));                     x = y * Math.Sin(lam);                     y *= coslam;                     break;             }
Magic Number,ProjNet.CoordinateSystems.Projections,LambertAzimuthalEqualAreaProjection,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\LambertAzimuthalEqualAreaProjection.cs,SphericalRadiansToMeters,The following statement contains a magic number: switch (_mode)             {                 case Mode.EQUIT:                     y = 1.0 + cosphi * coslam;                     goto oblcon;                 case Mode.OBLIQ:                     y = 1.0 + _sinb1 * sinphi + _cosb1 * cosphi * coslam;                     oblcon:                     if (y <= EPS10)                     {                         //proj_errno_set(P' PJD_ERR_TOLERANCE_CONDITION);                         return;                     }                     y = Math.Sqrt(2.0 / y);                     x = y * cosphi * Math.Sin(lam);                     y *= _mode == Mode.EQUIT ? sinphi :                         _cosb1 * sinphi - _sinb1 * cosphi * coslam;                     break;                 case Mode.N_POLE:                     coslam = -coslam;                     goto continue_S_POLE;                 /*-fallthrough*/                 case Mode.S_POLE:                     continue_S_POLE:                     if (Math.Abs(phi + lat_origin) < EPS10)                     {                         //proj_errno_set(P' PJD_ERR_TOLERANCE_CONDITION);                         return;                     }                     y = FORT_PI - phi * 0.5;                     y = 2.0 * (_mode == Mode.S_POLE ? Math.Cos(y) : Math.Sin(y));                     x = y * Math.Sin(lam);                     y *= coslam;                     break;             }
Magic Number,ProjNet.CoordinateSystems.Projections,LambertAzimuthalEqualAreaProjection,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\LambertAzimuthalEqualAreaProjection.cs,SphericalRadiansToMeters,The following statement contains a magic number: switch (_mode)             {                 case Mode.EQUIT:                     y = 1.0 + cosphi * coslam;                     goto oblcon;                 case Mode.OBLIQ:                     y = 1.0 + _sinb1 * sinphi + _cosb1 * cosphi * coslam;                     oblcon:                     if (y <= EPS10)                     {                         //proj_errno_set(P' PJD_ERR_TOLERANCE_CONDITION);                         return;                     }                     y = Math.Sqrt(2.0 / y);                     x = y * cosphi * Math.Sin(lam);                     y *= _mode == Mode.EQUIT ? sinphi :                         _cosb1 * sinphi - _sinb1 * cosphi * coslam;                     break;                 case Mode.N_POLE:                     coslam = -coslam;                     goto continue_S_POLE;                 /*-fallthrough*/                 case Mode.S_POLE:                     continue_S_POLE:                     if (Math.Abs(phi + lat_origin) < EPS10)                     {                         //proj_errno_set(P' PJD_ERR_TOLERANCE_CONDITION);                         return;                     }                     y = FORT_PI - phi * 0.5;                     y = 2.0 * (_mode == Mode.S_POLE ? Math.Cos(y) : Math.Sin(y));                     x = y * Math.Sin(lam);                     y *= coslam;                     break;             }
Magic Number,ProjNet.CoordinateSystems.Projections,LambertAzimuthalEqualAreaProjection,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\LambertAzimuthalEqualAreaProjection.cs,EllipsoidalMetersToRadians,The following statement contains a magic number: switch (_mode)             {                 case Mode.EQUIT:                 case Mode.OBLIQ:                     x /= _dd;                     y *= _dd;                     rho = hypot(x' y);                     if (rho < EPS10)                     {                         x = 0.0;        // lam                         y = lat_origin; // phi                         return;                     }                     sCe = 2.0 * Math.Asin(0.5 * rho / _rq);                     cCe = Math.Cos(sCe);                     sCe = Math.Sin(sCe);                     x *= sCe;                     if (_mode == Mode.OBLIQ)                     {                         ab = cCe * _sinb1 + y * sCe * _cosb1 / rho;                         y = rho * _cosb1 * cCe - y * _sinb1 * sCe;                     }                     else                     {                         ab = y * sCe / rho;                         y = rho * cCe;                     }                     break;                 case Mode.N_POLE:                     y = -y;                     goto continue_S_POLE;                 /*-fallthrough*/                 case Mode.S_POLE:                     continue_S_POLE:                     q = (x * x + y * y);                     if (q == 0.0)                     {                         x = 0.0;          // lam                         y = lat_origin;   // phi                         return ;                     }                     ab = 1.0 - q / _qp;                     if (_mode == Mode.S_POLE)                         ab = -ab;                     break;             }
Magic Number,ProjNet.CoordinateSystems.Projections,LambertAzimuthalEqualAreaProjection,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\LambertAzimuthalEqualAreaProjection.cs,EllipsoidalMetersToRadians,The following statement contains a magic number: switch (_mode)             {                 case Mode.EQUIT:                 case Mode.OBLIQ:                     x /= _dd;                     y *= _dd;                     rho = hypot(x' y);                     if (rho < EPS10)                     {                         x = 0.0;        // lam                         y = lat_origin; // phi                         return;                     }                     sCe = 2.0 * Math.Asin(0.5 * rho / _rq);                     cCe = Math.Cos(sCe);                     sCe = Math.Sin(sCe);                     x *= sCe;                     if (_mode == Mode.OBLIQ)                     {                         ab = cCe * _sinb1 + y * sCe * _cosb1 / rho;                         y = rho * _cosb1 * cCe - y * _sinb1 * sCe;                     }                     else                     {                         ab = y * sCe / rho;                         y = rho * cCe;                     }                     break;                 case Mode.N_POLE:                     y = -y;                     goto continue_S_POLE;                 /*-fallthrough*/                 case Mode.S_POLE:                     continue_S_POLE:                     q = (x * x + y * y);                     if (q == 0.0)                     {                         x = 0.0;          // lam                         y = lat_origin;   // phi                         return ;                     }                     ab = 1.0 - q / _qp;                     if (_mode == Mode.S_POLE)                         ab = -ab;                     break;             }
Magic Number,ProjNet.CoordinateSystems.Projections,LambertAzimuthalEqualAreaProjection,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\LambertAzimuthalEqualAreaProjection.cs,SphericalMetersToRadians,The following statement contains a magic number: double phi = rh * .5;
Magic Number,ProjNet.CoordinateSystems.Projections,LambertAzimuthalEqualAreaProjection,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\LambertAzimuthalEqualAreaProjection.cs,SphericalMetersToRadians,The following statement contains a magic number: phi = 2.0 * Math.Asin(phi);
Magic Number,ProjNet.CoordinateSystems.Projections,LambertConformalConic2SP,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\LambertConformalConic2SP.cs,LambertConformalConic2SP,The following statement contains a magic number: AuthorityCode = 9802;
Magic Number,ProjNet.CoordinateSystems.Projections,MapProjection,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\MapProjection.cs,CUBE,The following statement contains a magic number: return Math.Pow(x' 3);
Magic Number,ProjNet.CoordinateSystems.Projections,MapProjection,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\MapProjection.cs,QUAD,The following statement contains a magic number: return Math.Pow(x' 4);
Magic Number,ProjNet.CoordinateSystems.Projections,MapProjection,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\MapProjection.cs,qsfnz,The following statement contains a magic number: return ((1.0 - eccent * eccent) * (sinphi / (1.0 - con * con) - (.5 / eccent) *                                                Math.Log((1.0 - con) / (1.0 + con))));
Magic Number,ProjNet.CoordinateSystems.Projections,MapProjection,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\MapProjection.cs,qsfnz,The following statement contains a magic number: eccent > 1.0e-7
Magic Number,ProjNet.CoordinateSystems.Projections,MapProjection,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\MapProjection.cs,qsfnz,The following statement contains a magic number: return 2.0 * sinphi;
Magic Number,ProjNet.CoordinateSystems.Projections,MapProjection,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\MapProjection.cs,qsfn,The following statement contains a magic number: return (one_es * (sinphi / div1 - (.5 / eccent) * Math.Log((1.0 - con) / div2)));
Magic Number,ProjNet.CoordinateSystems.Projections,MapProjection,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\MapProjection.cs,tsfnz,The following statement contains a magic number: com = .5 * eccent;
Magic Number,ProjNet.CoordinateSystems.Projections,MapProjection,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\MapProjection.cs,tsfnz,The following statement contains a magic number: return (Math.Tan(.5 * (HALF_PI - phi)) / con);
Magic Number,ProjNet.CoordinateSystems.Projections,MapProjection,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\MapProjection.cs,phi1z,The following statement contains a magic number: phi = asinz(.5 * qs);
Magic Number,ProjNet.CoordinateSystems.Projections,MapProjection,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\MapProjection.cs,phi1z,The following statement contains a magic number: dphi = .5 * com * com / cospi * (qs / (1.0 - eccnts) - sinpi / com +                                          .5 / eccent * Math.Log((1.0 - con) / (1.0 + con)));
Magic Number,ProjNet.CoordinateSystems.Projections,MapProjection,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\MapProjection.cs,phi1z,The following statement contains a magic number: dphi = .5 * com * com / cospi * (qs / (1.0 - eccnts) - sinpi / com +                                          .5 / eccent * Math.Log((1.0 - con) / (1.0 + con)));
Magic Number,ProjNet.CoordinateSystems.Projections,MapProjection,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\MapProjection.cs,phi1z,The following statement contains a magic number: Math.Abs(dphi) <= 1e-7
Magic Number,ProjNet.CoordinateSystems.Projections,MapProjection,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\MapProjection.cs,phi1z,The following statement contains a magic number: i <= 25
Magic Number,ProjNet.CoordinateSystems.Projections,MapProjection,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\MapProjection.cs,phi2z,The following statement contains a magic number: double eccnth = .5 * eccent;
Magic Number,ProjNet.CoordinateSystems.Projections,MapProjection,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\MapProjection.cs,phi2z,The following statement contains a magic number: double chi = HALF_PI - 2 * Math.Atan(ts);
Magic Number,ProjNet.CoordinateSystems.Projections,MapProjection,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\MapProjection.cs,phi2z,The following statement contains a magic number: dphi = HALF_PI - 2 * Math.Atan(ts * (Math.Pow(((1.0 - con) / (1.0 + con))' eccnth))) - chi;
Magic Number,ProjNet.CoordinateSystems.Projections,MapProjection,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\MapProjection.cs,phi2z,The following statement contains a magic number: Math.Abs(dphi) <= .0000000001
Magic Number,ProjNet.CoordinateSystems.Projections,MapProjection,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\MapProjection.cs,phi2z,The following statement contains a magic number: i <= 15
Magic Number,ProjNet.CoordinateSystems.Projections,MapProjection,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\MapProjection.cs,e0fn,The following statement contains a magic number: return (1.0 - 0.25 * x * (1.0 + x / 16.0 * (3.0 + 1.25 * x)));
Magic Number,ProjNet.CoordinateSystems.Projections,MapProjection,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\MapProjection.cs,e0fn,The following statement contains a magic number: return (1.0 - 0.25 * x * (1.0 + x / 16.0 * (3.0 + 1.25 * x)));
Magic Number,ProjNet.CoordinateSystems.Projections,MapProjection,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\MapProjection.cs,e0fn,The following statement contains a magic number: return (1.0 - 0.25 * x * (1.0 + x / 16.0 * (3.0 + 1.25 * x)));
Magic Number,ProjNet.CoordinateSystems.Projections,MapProjection,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\MapProjection.cs,e0fn,The following statement contains a magic number: return (1.0 - 0.25 * x * (1.0 + x / 16.0 * (3.0 + 1.25 * x)));
Magic Number,ProjNet.CoordinateSystems.Projections,MapProjection,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\MapProjection.cs,e1fn,The following statement contains a magic number: return (0.375 * x * (1.0 + 0.25 * x * (1.0 + 0.46875 * x)));
Magic Number,ProjNet.CoordinateSystems.Projections,MapProjection,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\MapProjection.cs,e1fn,The following statement contains a magic number: return (0.375 * x * (1.0 + 0.25 * x * (1.0 + 0.46875 * x)));
Magic Number,ProjNet.CoordinateSystems.Projections,MapProjection,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\MapProjection.cs,e1fn,The following statement contains a magic number: return (0.375 * x * (1.0 + 0.25 * x * (1.0 + 0.46875 * x)));
Magic Number,ProjNet.CoordinateSystems.Projections,MapProjection,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\MapProjection.cs,e2fn,The following statement contains a magic number: return (0.05859375 * x * x * (1.0 + 0.75 * x));
Magic Number,ProjNet.CoordinateSystems.Projections,MapProjection,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\MapProjection.cs,e2fn,The following statement contains a magic number: return (0.05859375 * x * x * (1.0 + 0.75 * x));
Magic Number,ProjNet.CoordinateSystems.Projections,MapProjection,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\MapProjection.cs,e3fn,The following statement contains a magic number: return (x * x * x * (35.0 / 3072.0));
Magic Number,ProjNet.CoordinateSystems.Projections,MapProjection,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\MapProjection.cs,e3fn,The following statement contains a magic number: return (x * x * x * (35.0 / 3072.0));
Magic Number,ProjNet.CoordinateSystems.Projections,MapProjection,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\MapProjection.cs,mlfn,The following statement contains a magic number: return (e0 * phi - e1 * Math.Sin(2.0 * phi) + e2 * Math.Sin(4.0 * phi) - e3 * Math.Sin(6.0 * phi));
Magic Number,ProjNet.CoordinateSystems.Projections,MapProjection,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\MapProjection.cs,mlfn,The following statement contains a magic number: return (e0 * phi - e1 * Math.Sin(2.0 * phi) + e2 * Math.Sin(4.0 * phi) - e3 * Math.Sin(6.0 * phi));
Magic Number,ProjNet.CoordinateSystems.Projections,MapProjection,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\MapProjection.cs,mlfn,The following statement contains a magic number: return (e0 * phi - e1 * Math.Sin(2.0 * phi) + e2 * Math.Sin(4.0 * phi) - e3 * Math.Sin(6.0 * phi));
Magic Number,ProjNet.CoordinateSystems.Projections,MapProjection,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\MapProjection.cs,inv_mlfn,The following statement contains a magic number: const double MLFN_TOL = 1E-11;
Magic Number,ProjNet.CoordinateSystems.Projections,MapProjection,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\MapProjection.cs,inv_mlfn,The following statement contains a magic number: const int MAXIMUM_ITERATIONS = 20;
Magic Number,ProjNet.CoordinateSystems.Projections,MapProjection,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\MapProjection.cs,EccentricySquared,The following statement contains a magic number: return 2 * f - f * f;
Magic Number,ProjNet.CoordinateSystems.Projections,MapProjection,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\MapProjection.cs,CalcUtmZone,The following statement contains a magic number: return (long)((lon + 180.0) / 6.0 + 1.0);
Magic Number,ProjNet.CoordinateSystems.Projections,MapProjection,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\MapProjection.cs,CalcUtmZone,The following statement contains a magic number: return (long)((lon + 180.0) / 6.0 + 1.0);
Magic Number,ProjNet.CoordinateSystems.Projections,MapProjection,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\MapProjection.cs,LongitudeToRadians,The following statement contains a magic number: edge ? (x >= -180 && x <= 180) : (x > -180 && x < 180)
Magic Number,ProjNet.CoordinateSystems.Projections,MapProjection,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\MapProjection.cs,LongitudeToRadians,The following statement contains a magic number: edge ? (x >= -180 && x <= 180) : (x > -180 && x < 180)
Magic Number,ProjNet.CoordinateSystems.Projections,MapProjection,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\MapProjection.cs,LongitudeToRadians,The following statement contains a magic number: edge ? (x >= -180 && x <= 180) : (x > -180 && x < 180)
Magic Number,ProjNet.CoordinateSystems.Projections,MapProjection,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\MapProjection.cs,LongitudeToRadians,The following statement contains a magic number: edge ? (x >= -180 && x <= 180) : (x > -180 && x < 180)
Magic Number,ProjNet.CoordinateSystems.Projections,MapProjection,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\MapProjection.cs,LatitudeToRadians,The following statement contains a magic number: edge ? (y >= -90 && y <= 90) : (y > -90 && y < 90)
Magic Number,ProjNet.CoordinateSystems.Projections,MapProjection,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\MapProjection.cs,LatitudeToRadians,The following statement contains a magic number: edge ? (y >= -90 && y <= 90) : (y > -90 && y < 90)
Magic Number,ProjNet.CoordinateSystems.Projections,MapProjection,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\MapProjection.cs,LatitudeToRadians,The following statement contains a magic number: edge ? (y >= -90 && y <= 90) : (y > -90 && y < 90)
Magic Number,ProjNet.CoordinateSystems.Projections,MapProjection,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\MapProjection.cs,LatitudeToRadians,The following statement contains a magic number: edge ? (y >= -90 && y <= 90) : (y > -90 && y < 90)
Magic Number,ProjNet.CoordinateSystems.Projections,MapProjection,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\MapProjection.cs,authset,The following statement contains a magic number: double[] APA = new double[3];
Magic Number,ProjNet.CoordinateSystems.Projections,MapProjection,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\MapProjection.cs,authset,The following statement contains a magic number: APA[2] = t * P20;
Magic Number,ProjNet.CoordinateSystems.Projections,MapProjection,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\MapProjection.cs,authlat,The following statement contains a magic number: return (beta + APA[0] * Math.Sin(t) + APA[1] * Math.Sin(t + t) + APA[2] * Math.Sin(t + t + t));
Magic Number,ProjNet.CoordinateSystems.Projections,Mercator,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\Mercator.cs,Mercator,The following statement contains a magic number: AuthorityCode = 9805;
Magic Number,ProjNet.CoordinateSystems.Projections,Mercator,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\Mercator.cs,RadiansToMeters,The following statement contains a magic number: lat = _semiMajor * _k0 * Math.Log(Math.Tan(PI * 0.25 + dLatitude * 0.5) *                                               Math.Pow((1 - esinphi) / (1 + esinphi)' _e * 0.5));
Magic Number,ProjNet.CoordinateSystems.Projections,Mercator,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\Mercator.cs,RadiansToMeters,The following statement contains a magic number: lat = _semiMajor * _k0 * Math.Log(Math.Tan(PI * 0.25 + dLatitude * 0.5) *                                               Math.Pow((1 - esinphi) / (1 + esinphi)' _e * 0.5));
Magic Number,ProjNet.CoordinateSystems.Projections,Mercator,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\Mercator.cs,RadiansToMeters,The following statement contains a magic number: lat = _semiMajor * _k0 * Math.Log(Math.Tan(PI * 0.25 + dLatitude * 0.5) *                                               Math.Pow((1 - esinphi) / (1 + esinphi)' _e * 0.5));
Magic Number,ProjNet.CoordinateSystems.Projections,Mercator,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\Mercator.cs,MetersToRadians,The following statement contains a magic number: double chi = HALF_PI - 2 * Math.Atan(ts);
Magic Number,ProjNet.CoordinateSystems.Projections,Mercator,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\Mercator.cs,MetersToRadians,The following statement contains a magic number: double e4 = Math.Pow(_e' 4);
Magic Number,ProjNet.CoordinateSystems.Projections,Mercator,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\Mercator.cs,MetersToRadians,The following statement contains a magic number: double e6 = Math.Pow(_e' 6);
Magic Number,ProjNet.CoordinateSystems.Projections,Mercator,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\Mercator.cs,MetersToRadians,The following statement contains a magic number: double e8 = Math.Pow(_e' 8);
Magic Number,ProjNet.CoordinateSystems.Projections,Mercator,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\Mercator.cs,MetersToRadians,The following statement contains a magic number: y = chi + (_es * 0.5 + 5 * e4 / 24 + e6 / 12 + 13 * e8 / 360) * Math.Sin(2 * chi)                     + (7 * e4 / 48 + 29 * e6 / 240 + 811 * e8 / 11520) * Math.Sin(4 * chi) +                     +(7 * e6 / 120 + 81 * e8 / 1120) * Math.Sin(6 * chi) +                     +(4279 * e8 / 161280) * Math.Sin(8 * chi);
Magic Number,ProjNet.CoordinateSystems.Projections,Mercator,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\Mercator.cs,MetersToRadians,The following statement contains a magic number: y = chi + (_es * 0.5 + 5 * e4 / 24 + e6 / 12 + 13 * e8 / 360) * Math.Sin(2 * chi)                     + (7 * e4 / 48 + 29 * e6 / 240 + 811 * e8 / 11520) * Math.Sin(4 * chi) +                     +(7 * e6 / 120 + 81 * e8 / 1120) * Math.Sin(6 * chi) +                     +(4279 * e8 / 161280) * Math.Sin(8 * chi);
Magic Number,ProjNet.CoordinateSystems.Projections,Mercator,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\Mercator.cs,MetersToRadians,The following statement contains a magic number: y = chi + (_es * 0.5 + 5 * e4 / 24 + e6 / 12 + 13 * e8 / 360) * Math.Sin(2 * chi)                     + (7 * e4 / 48 + 29 * e6 / 240 + 811 * e8 / 11520) * Math.Sin(4 * chi) +                     +(7 * e6 / 120 + 81 * e8 / 1120) * Math.Sin(6 * chi) +                     +(4279 * e8 / 161280) * Math.Sin(8 * chi);
Magic Number,ProjNet.CoordinateSystems.Projections,Mercator,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\Mercator.cs,MetersToRadians,The following statement contains a magic number: y = chi + (_es * 0.5 + 5 * e4 / 24 + e6 / 12 + 13 * e8 / 360) * Math.Sin(2 * chi)                     + (7 * e4 / 48 + 29 * e6 / 240 + 811 * e8 / 11520) * Math.Sin(4 * chi) +                     +(7 * e6 / 120 + 81 * e8 / 1120) * Math.Sin(6 * chi) +                     +(4279 * e8 / 161280) * Math.Sin(8 * chi);
Magic Number,ProjNet.CoordinateSystems.Projections,Mercator,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\Mercator.cs,MetersToRadians,The following statement contains a magic number: y = chi + (_es * 0.5 + 5 * e4 / 24 + e6 / 12 + 13 * e8 / 360) * Math.Sin(2 * chi)                     + (7 * e4 / 48 + 29 * e6 / 240 + 811 * e8 / 11520) * Math.Sin(4 * chi) +                     +(7 * e6 / 120 + 81 * e8 / 1120) * Math.Sin(6 * chi) +                     +(4279 * e8 / 161280) * Math.Sin(8 * chi);
Magic Number,ProjNet.CoordinateSystems.Projections,Mercator,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\Mercator.cs,MetersToRadians,The following statement contains a magic number: y = chi + (_es * 0.5 + 5 * e4 / 24 + e6 / 12 + 13 * e8 / 360) * Math.Sin(2 * chi)                     + (7 * e4 / 48 + 29 * e6 / 240 + 811 * e8 / 11520) * Math.Sin(4 * chi) +                     +(7 * e6 / 120 + 81 * e8 / 1120) * Math.Sin(6 * chi) +                     +(4279 * e8 / 161280) * Math.Sin(8 * chi);
Magic Number,ProjNet.CoordinateSystems.Projections,Mercator,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\Mercator.cs,MetersToRadians,The following statement contains a magic number: y = chi + (_es * 0.5 + 5 * e4 / 24 + e6 / 12 + 13 * e8 / 360) * Math.Sin(2 * chi)                     + (7 * e4 / 48 + 29 * e6 / 240 + 811 * e8 / 11520) * Math.Sin(4 * chi) +                     +(7 * e6 / 120 + 81 * e8 / 1120) * Math.Sin(6 * chi) +                     +(4279 * e8 / 161280) * Math.Sin(8 * chi);
Magic Number,ProjNet.CoordinateSystems.Projections,Mercator,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\Mercator.cs,MetersToRadians,The following statement contains a magic number: y = chi + (_es * 0.5 + 5 * e4 / 24 + e6 / 12 + 13 * e8 / 360) * Math.Sin(2 * chi)                     + (7 * e4 / 48 + 29 * e6 / 240 + 811 * e8 / 11520) * Math.Sin(4 * chi) +                     +(7 * e6 / 120 + 81 * e8 / 1120) * Math.Sin(6 * chi) +                     +(4279 * e8 / 161280) * Math.Sin(8 * chi);
Magic Number,ProjNet.CoordinateSystems.Projections,Mercator,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\Mercator.cs,MetersToRadians,The following statement contains a magic number: y = chi + (_es * 0.5 + 5 * e4 / 24 + e6 / 12 + 13 * e8 / 360) * Math.Sin(2 * chi)                     + (7 * e4 / 48 + 29 * e6 / 240 + 811 * e8 / 11520) * Math.Sin(4 * chi) +                     +(7 * e6 / 120 + 81 * e8 / 1120) * Math.Sin(6 * chi) +                     +(4279 * e8 / 161280) * Math.Sin(8 * chi);
Magic Number,ProjNet.CoordinateSystems.Projections,Mercator,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\Mercator.cs,MetersToRadians,The following statement contains a magic number: y = chi + (_es * 0.5 + 5 * e4 / 24 + e6 / 12 + 13 * e8 / 360) * Math.Sin(2 * chi)                     + (7 * e4 / 48 + 29 * e6 / 240 + 811 * e8 / 11520) * Math.Sin(4 * chi) +                     +(7 * e6 / 120 + 81 * e8 / 1120) * Math.Sin(6 * chi) +                     +(4279 * e8 / 161280) * Math.Sin(8 * chi);
Magic Number,ProjNet.CoordinateSystems.Projections,Mercator,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\Mercator.cs,MetersToRadians,The following statement contains a magic number: y = chi + (_es * 0.5 + 5 * e4 / 24 + e6 / 12 + 13 * e8 / 360) * Math.Sin(2 * chi)                     + (7 * e4 / 48 + 29 * e6 / 240 + 811 * e8 / 11520) * Math.Sin(4 * chi) +                     +(7 * e6 / 120 + 81 * e8 / 1120) * Math.Sin(6 * chi) +                     +(4279 * e8 / 161280) * Math.Sin(8 * chi);
Magic Number,ProjNet.CoordinateSystems.Projections,Mercator,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\Mercator.cs,MetersToRadians,The following statement contains a magic number: y = chi + (_es * 0.5 + 5 * e4 / 24 + e6 / 12 + 13 * e8 / 360) * Math.Sin(2 * chi)                     + (7 * e4 / 48 + 29 * e6 / 240 + 811 * e8 / 11520) * Math.Sin(4 * chi) +                     +(7 * e6 / 120 + 81 * e8 / 1120) * Math.Sin(6 * chi) +                     +(4279 * e8 / 161280) * Math.Sin(8 * chi);
Magic Number,ProjNet.CoordinateSystems.Projections,Mercator,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\Mercator.cs,MetersToRadians,The following statement contains a magic number: y = chi + (_es * 0.5 + 5 * e4 / 24 + e6 / 12 + 13 * e8 / 360) * Math.Sin(2 * chi)                     + (7 * e4 / 48 + 29 * e6 / 240 + 811 * e8 / 11520) * Math.Sin(4 * chi) +                     +(7 * e6 / 120 + 81 * e8 / 1120) * Math.Sin(6 * chi) +                     +(4279 * e8 / 161280) * Math.Sin(8 * chi);
Magic Number,ProjNet.CoordinateSystems.Projections,Mercator,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\Mercator.cs,MetersToRadians,The following statement contains a magic number: y = chi + (_es * 0.5 + 5 * e4 / 24 + e6 / 12 + 13 * e8 / 360) * Math.Sin(2 * chi)                     + (7 * e4 / 48 + 29 * e6 / 240 + 811 * e8 / 11520) * Math.Sin(4 * chi) +                     +(7 * e6 / 120 + 81 * e8 / 1120) * Math.Sin(6 * chi) +                     +(4279 * e8 / 161280) * Math.Sin(8 * chi);
Magic Number,ProjNet.CoordinateSystems.Projections,Mercator,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\Mercator.cs,MetersToRadians,The following statement contains a magic number: y = chi + (_es * 0.5 + 5 * e4 / 24 + e6 / 12 + 13 * e8 / 360) * Math.Sin(2 * chi)                     + (7 * e4 / 48 + 29 * e6 / 240 + 811 * e8 / 11520) * Math.Sin(4 * chi) +                     +(7 * e6 / 120 + 81 * e8 / 1120) * Math.Sin(6 * chi) +                     +(4279 * e8 / 161280) * Math.Sin(8 * chi);
Magic Number,ProjNet.CoordinateSystems.Projections,Mercator,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\Mercator.cs,MetersToRadians,The following statement contains a magic number: y = chi + (_es * 0.5 + 5 * e4 / 24 + e6 / 12 + 13 * e8 / 360) * Math.Sin(2 * chi)                     + (7 * e4 / 48 + 29 * e6 / 240 + 811 * e8 / 11520) * Math.Sin(4 * chi) +                     +(7 * e6 / 120 + 81 * e8 / 1120) * Math.Sin(6 * chi) +                     +(4279 * e8 / 161280) * Math.Sin(8 * chi);
Magic Number,ProjNet.CoordinateSystems.Projections,Mercator,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\Mercator.cs,MetersToRadians,The following statement contains a magic number: y = chi + (_es * 0.5 + 5 * e4 / 24 + e6 / 12 + 13 * e8 / 360) * Math.Sin(2 * chi)                     + (7 * e4 / 48 + 29 * e6 / 240 + 811 * e8 / 11520) * Math.Sin(4 * chi) +                     +(7 * e6 / 120 + 81 * e8 / 1120) * Math.Sin(6 * chi) +                     +(4279 * e8 / 161280) * Math.Sin(8 * chi);
Magic Number,ProjNet.CoordinateSystems.Projections,Mercator,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\Mercator.cs,MetersToRadians,The following statement contains a magic number: y = chi + (_es * 0.5 + 5 * e4 / 24 + e6 / 12 + 13 * e8 / 360) * Math.Sin(2 * chi)                     + (7 * e4 / 48 + 29 * e6 / 240 + 811 * e8 / 11520) * Math.Sin(4 * chi) +                     +(7 * e6 / 120 + 81 * e8 / 1120) * Math.Sin(6 * chi) +                     +(4279 * e8 / 161280) * Math.Sin(8 * chi);
Magic Number,ProjNet.CoordinateSystems.Projections,Mercator,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\Mercator.cs,MetersToRadians,The following statement contains a magic number: y = chi + (_es * 0.5 + 5 * e4 / 24 + e6 / 12 + 13 * e8 / 360) * Math.Sin(2 * chi)                     + (7 * e4 / 48 + 29 * e6 / 240 + 811 * e8 / 11520) * Math.Sin(4 * chi) +                     +(7 * e6 / 120 + 81 * e8 / 1120) * Math.Sin(6 * chi) +                     +(4279 * e8 / 161280) * Math.Sin(8 * chi);
Magic Number,ProjNet.CoordinateSystems.Projections,Mercator,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\Mercator.cs,MetersToRadians,The following statement contains a magic number: y = chi + (_es * 0.5 + 5 * e4 / 24 + e6 / 12 + 13 * e8 / 360) * Math.Sin(2 * chi)                     + (7 * e4 / 48 + 29 * e6 / 240 + 811 * e8 / 11520) * Math.Sin(4 * chi) +                     +(7 * e6 / 120 + 81 * e8 / 1120) * Math.Sin(6 * chi) +                     +(4279 * e8 / 161280) * Math.Sin(8 * chi);
Magic Number,ProjNet.CoordinateSystems.Projections,Mercator,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\Mercator.cs,MetersToRadians,The following statement contains a magic number: y = chi + (_es * 0.5 + 5 * e4 / 24 + e6 / 12 + 13 * e8 / 360) * Math.Sin(2 * chi)                     + (7 * e4 / 48 + 29 * e6 / 240 + 811 * e8 / 11520) * Math.Sin(4 * chi) +                     +(7 * e6 / 120 + 81 * e8 / 1120) * Math.Sin(6 * chi) +                     +(4279 * e8 / 161280) * Math.Sin(8 * chi);
Magic Number,ProjNet.CoordinateSystems.Projections,Mercator,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\Mercator.cs,MetersToRadians,The following statement contains a magic number: y = chi + (_es * 0.5 + 5 * e4 / 24 + e6 / 12 + 13 * e8 / 360) * Math.Sin(2 * chi)                     + (7 * e4 / 48 + 29 * e6 / 240 + 811 * e8 / 11520) * Math.Sin(4 * chi) +                     +(7 * e6 / 120 + 81 * e8 / 1120) * Math.Sin(6 * chi) +                     +(4279 * e8 / 161280) * Math.Sin(8 * chi);
Magic Number,ProjNet.CoordinateSystems.Projections,ObliqueMercatorProjection,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\ObliqueMercatorProjection.cs,ObliqueMercatorProjection,The following statement contains a magic number: AuthorityCode = 9815;
Magic Number,ProjNet.CoordinateSystems.Projections,ObliqueStereographicProjection,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\ObliqueStereographicProjection.cs,ObliqueStereographicProjection,The following statement contains a magic number: R2 = 2.0 * Math.Sqrt(1 - _es) / (1 - _es * sphi * sphi);
Magic Number,ProjNet.CoordinateSystems.Projections,ObliqueStereographicProjection,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\ObliqueStereographicProjection.cs,ObliqueStereographicProjection,The following statement contains a magic number: ratexp = 0.5 * C * _e;
Magic Number,ProjNet.CoordinateSystems.Projections,ObliqueStereographicProjection,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\ObliqueStereographicProjection.cs,ObliqueStereographicProjection,The following statement contains a magic number: K = Math.Tan(0.5 * phic0 + Math.PI / 4) / (Math.Pow(Math.Tan(0.5 * lat_origin + Math.PI / 4)' C) * srat(_e * sphi' ratexp));
Magic Number,ProjNet.CoordinateSystems.Projections,ObliqueStereographicProjection,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\ObliqueStereographicProjection.cs,ObliqueStereographicProjection,The following statement contains a magic number: K = Math.Tan(0.5 * phic0 + Math.PI / 4) / (Math.Pow(Math.Tan(0.5 * lat_origin + Math.PI / 4)' C) * srat(_e * sphi' ratexp));
Magic Number,ProjNet.CoordinateSystems.Projections,ObliqueStereographicProjection,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\ObliqueStereographicProjection.cs,ObliqueStereographicProjection,The following statement contains a magic number: K = Math.Tan(0.5 * phic0 + Math.PI / 4) / (Math.Pow(Math.Tan(0.5 * lat_origin + Math.PI / 4)' C) * srat(_e * sphi' ratexp));
Magic Number,ProjNet.CoordinateSystems.Projections,ObliqueStereographicProjection,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\ObliqueStereographicProjection.cs,ObliqueStereographicProjection,The following statement contains a magic number: K = Math.Tan(0.5 * phic0 + Math.PI / 4) / (Math.Pow(Math.Tan(0.5 * lat_origin + Math.PI / 4)' C) * srat(_e * sphi' ratexp));
Magic Number,ProjNet.CoordinateSystems.Projections,ObliqueStereographicProjection,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\ObliqueStereographicProjection.cs,MetersToRadians,The following statement contains a magic number: double num = Math.Pow(Math.Tan(0.5 * y + Math.PI / 4.0) / K' 1.0 / C);
Magic Number,ProjNet.CoordinateSystems.Projections,ObliqueStereographicProjection,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\ObliqueStereographicProjection.cs,MetersToRadians,The following statement contains a magic number: double num = Math.Pow(Math.Tan(0.5 * y + Math.PI / 4.0) / K' 1.0 / C);
Magic Number,ProjNet.CoordinateSystems.Projections,ObliqueStereographicProjection,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\ObliqueStereographicProjection.cs,MetersToRadians,The following statement contains a magic number: double phi = 2.0 * Math.Atan(num * srat(_e * Math.Sin(y)' -0.5 * _e)) - Math.PI / 2.0;
Magic Number,ProjNet.CoordinateSystems.Projections,ObliqueStereographicProjection,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\ObliqueStereographicProjection.cs,MetersToRadians,The following statement contains a magic number: double phi = 2.0 * Math.Atan(num * srat(_e * Math.Sin(y)' -0.5 * _e)) - Math.PI / 2.0;
Magic Number,ProjNet.CoordinateSystems.Projections,ObliqueStereographicProjection,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\ObliqueStereographicProjection.cs,MetersToRadians,The following statement contains a magic number: double phi = 2.0 * Math.Atan(num * srat(_e * Math.Sin(y)' -0.5 * _e)) - Math.PI / 2.0;
Magic Number,ProjNet.CoordinateSystems.Projections,ObliqueStereographicProjection,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\ObliqueStereographicProjection.cs,RadiansToMeters,The following statement contains a magic number: y = 2.0 * Math.Atan(K * Math.Pow(Math.Tan(0.5 * y + Math.PI / 4)' C)                                   * srat(_e * Math.Sin(y)' ratexp))                 - Math.PI / 2;
Magic Number,ProjNet.CoordinateSystems.Projections,ObliqueStereographicProjection,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\ObliqueStereographicProjection.cs,RadiansToMeters,The following statement contains a magic number: y = 2.0 * Math.Atan(K * Math.Pow(Math.Tan(0.5 * y + Math.PI / 4)' C)                                   * srat(_e * Math.Sin(y)' ratexp))                 - Math.PI / 2;
Magic Number,ProjNet.CoordinateSystems.Projections,ObliqueStereographicProjection,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\ObliqueStereographicProjection.cs,RadiansToMeters,The following statement contains a magic number: y = 2.0 * Math.Atan(K * Math.Pow(Math.Tan(0.5 * y + Math.PI / 4)' C)                                   * srat(_e * Math.Sin(y)' ratexp))                 - Math.PI / 2;
Magic Number,ProjNet.CoordinateSystems.Projections,ObliqueStereographicProjection,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\ObliqueStereographicProjection.cs,RadiansToMeters,The following statement contains a magic number: y = 2.0 * Math.Atan(K * Math.Pow(Math.Tan(0.5 * y + Math.PI / 4)' C)                                   * srat(_e * Math.Sin(y)' ratexp))                 - Math.PI / 2;
Magic Number,ProjNet.CoordinateSystems.Projections,PseudoMercator,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\PseudoMercator.cs,PseudoMercator,The following statement contains a magic number: AuthorityCode = 3856;
Magic Number,ProjNet.CoordinateSystems.Projections,TransverseMercator,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\TransverseMercator.cs,TransverseMercator,The following statement contains a magic number: AuthorityCode = 9807;
Magic Number,ProjNet.CoordinateSystems.Projections,TransverseMercator,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\TransverseMercator.cs,RadiansToMeters,The following statement contains a magic number: y = (mlfn(y' sinphi' cosphi) - _ml0 +                 sinphi * al * x *                 FC2 * (1.0 +                 FC4 * als * (5.0 - t + n * (9.0 + 4.0 * n) +                 FC6 * als * (61.0 + t * (t - 58.0) + n * (270.0 - 330.0 * t) +                 FC8 * als * (1385.0 + t * (t * (543.0 - t) - 3111.0))))));
Magic Number,ProjNet.CoordinateSystems.Projections,TransverseMercator,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\TransverseMercator.cs,RadiansToMeters,The following statement contains a magic number: y = (mlfn(y' sinphi' cosphi) - _ml0 +                 sinphi * al * x *                 FC2 * (1.0 +                 FC4 * als * (5.0 - t + n * (9.0 + 4.0 * n) +                 FC6 * als * (61.0 + t * (t - 58.0) + n * (270.0 - 330.0 * t) +                 FC8 * als * (1385.0 + t * (t * (543.0 - t) - 3111.0))))));
Magic Number,ProjNet.CoordinateSystems.Projections,TransverseMercator,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\TransverseMercator.cs,RadiansToMeters,The following statement contains a magic number: y = (mlfn(y' sinphi' cosphi) - _ml0 +                 sinphi * al * x *                 FC2 * (1.0 +                 FC4 * als * (5.0 - t + n * (9.0 + 4.0 * n) +                 FC6 * als * (61.0 + t * (t - 58.0) + n * (270.0 - 330.0 * t) +                 FC8 * als * (1385.0 + t * (t * (543.0 - t) - 3111.0))))));
Magic Number,ProjNet.CoordinateSystems.Projections,TransverseMercator,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\TransverseMercator.cs,RadiansToMeters,The following statement contains a magic number: y = (mlfn(y' sinphi' cosphi) - _ml0 +                 sinphi * al * x *                 FC2 * (1.0 +                 FC4 * als * (5.0 - t + n * (9.0 + 4.0 * n) +                 FC6 * als * (61.0 + t * (t - 58.0) + n * (270.0 - 330.0 * t) +                 FC8 * als * (1385.0 + t * (t * (543.0 - t) - 3111.0))))));
Magic Number,ProjNet.CoordinateSystems.Projections,TransverseMercator,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\TransverseMercator.cs,RadiansToMeters,The following statement contains a magic number: y = (mlfn(y' sinphi' cosphi) - _ml0 +                 sinphi * al * x *                 FC2 * (1.0 +                 FC4 * als * (5.0 - t + n * (9.0 + 4.0 * n) +                 FC6 * als * (61.0 + t * (t - 58.0) + n * (270.0 - 330.0 * t) +                 FC8 * als * (1385.0 + t * (t * (543.0 - t) - 3111.0))))));
Magic Number,ProjNet.CoordinateSystems.Projections,TransverseMercator,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\TransverseMercator.cs,RadiansToMeters,The following statement contains a magic number: y = (mlfn(y' sinphi' cosphi) - _ml0 +                 sinphi * al * x *                 FC2 * (1.0 +                 FC4 * als * (5.0 - t + n * (9.0 + 4.0 * n) +                 FC6 * als * (61.0 + t * (t - 58.0) + n * (270.0 - 330.0 * t) +                 FC8 * als * (1385.0 + t * (t * (543.0 - t) - 3111.0))))));
Magic Number,ProjNet.CoordinateSystems.Projections,TransverseMercator,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\TransverseMercator.cs,RadiansToMeters,The following statement contains a magic number: y = (mlfn(y' sinphi' cosphi) - _ml0 +                 sinphi * al * x *                 FC2 * (1.0 +                 FC4 * als * (5.0 - t + n * (9.0 + 4.0 * n) +                 FC6 * als * (61.0 + t * (t - 58.0) + n * (270.0 - 330.0 * t) +                 FC8 * als * (1385.0 + t * (t * (543.0 - t) - 3111.0))))));
Magic Number,ProjNet.CoordinateSystems.Projections,TransverseMercator,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\TransverseMercator.cs,RadiansToMeters,The following statement contains a magic number: y = (mlfn(y' sinphi' cosphi) - _ml0 +                 sinphi * al * x *                 FC2 * (1.0 +                 FC4 * als * (5.0 - t + n * (9.0 + 4.0 * n) +                 FC6 * als * (61.0 + t * (t - 58.0) + n * (270.0 - 330.0 * t) +                 FC8 * als * (1385.0 + t * (t * (543.0 - t) - 3111.0))))));
Magic Number,ProjNet.CoordinateSystems.Projections,TransverseMercator,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\TransverseMercator.cs,RadiansToMeters,The following statement contains a magic number: y = (mlfn(y' sinphi' cosphi) - _ml0 +                 sinphi * al * x *                 FC2 * (1.0 +                 FC4 * als * (5.0 - t + n * (9.0 + 4.0 * n) +                 FC6 * als * (61.0 + t * (t - 58.0) + n * (270.0 - 330.0 * t) +                 FC8 * als * (1385.0 + t * (t * (543.0 - t) - 3111.0))))));
Magic Number,ProjNet.CoordinateSystems.Projections,TransverseMercator,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\TransverseMercator.cs,RadiansToMeters,The following statement contains a magic number: y = (mlfn(y' sinphi' cosphi) - _ml0 +                 sinphi * al * x *                 FC2 * (1.0 +                 FC4 * als * (5.0 - t + n * (9.0 + 4.0 * n) +                 FC6 * als * (61.0 + t * (t - 58.0) + n * (270.0 - 330.0 * t) +                 FC8 * als * (1385.0 + t * (t * (543.0 - t) - 3111.0))))));
Magic Number,ProjNet.CoordinateSystems.Projections,TransverseMercator,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\TransverseMercator.cs,RadiansToMeters,The following statement contains a magic number: x = al * (FC1 + FC3 * als * (1.0 - t + n +                 FC5 * als * (5.0 + t * (t - 18.0) + n * (14.0 - 58.0 * t) +                 FC7 * als * (61.0 + t * (t * (179.0 - t) - 479.0)))));
Magic Number,ProjNet.CoordinateSystems.Projections,TransverseMercator,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\TransverseMercator.cs,RadiansToMeters,The following statement contains a magic number: x = al * (FC1 + FC3 * als * (1.0 - t + n +                 FC5 * als * (5.0 + t * (t - 18.0) + n * (14.0 - 58.0 * t) +                 FC7 * als * (61.0 + t * (t * (179.0 - t) - 479.0)))));
Magic Number,ProjNet.CoordinateSystems.Projections,TransverseMercator,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\TransverseMercator.cs,RadiansToMeters,The following statement contains a magic number: x = al * (FC1 + FC3 * als * (1.0 - t + n +                 FC5 * als * (5.0 + t * (t - 18.0) + n * (14.0 - 58.0 * t) +                 FC7 * als * (61.0 + t * (t * (179.0 - t) - 479.0)))));
Magic Number,ProjNet.CoordinateSystems.Projections,TransverseMercator,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\TransverseMercator.cs,RadiansToMeters,The following statement contains a magic number: x = al * (FC1 + FC3 * als * (1.0 - t + n +                 FC5 * als * (5.0 + t * (t - 18.0) + n * (14.0 - 58.0 * t) +                 FC7 * als * (61.0 + t * (t * (179.0 - t) - 479.0)))));
Magic Number,ProjNet.CoordinateSystems.Projections,TransverseMercator,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\TransverseMercator.cs,RadiansToMeters,The following statement contains a magic number: x = al * (FC1 + FC3 * als * (1.0 - t + n +                 FC5 * als * (5.0 + t * (t - 18.0) + n * (14.0 - 58.0 * t) +                 FC7 * als * (61.0 + t * (t * (179.0 - t) - 479.0)))));
Magic Number,ProjNet.CoordinateSystems.Projections,TransverseMercator,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\TransverseMercator.cs,RadiansToMeters,The following statement contains a magic number: x = al * (FC1 + FC3 * als * (1.0 - t + n +                 FC5 * als * (5.0 + t * (t - 18.0) + n * (14.0 - 58.0 * t) +                 FC7 * als * (61.0 + t * (t * (179.0 - t) - 479.0)))));
Magic Number,ProjNet.CoordinateSystems.Projections,TransverseMercator,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\TransverseMercator.cs,RadiansToMeters,The following statement contains a magic number: x = al * (FC1 + FC3 * als * (1.0 - t + n +                 FC5 * als * (5.0 + t * (t - 18.0) + n * (14.0 - 58.0 * t) +                 FC7 * als * (61.0 + t * (t * (179.0 - t) - 479.0)))));
Magic Number,ProjNet.CoordinateSystems.Projections,TransverseMercator,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\TransverseMercator.cs,MetersToRadians,The following statement contains a magic number: y = y < 0.0 ? -(PI / 2) : (PI / 2);
Magic Number,ProjNet.CoordinateSystems.Projections,TransverseMercator,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\TransverseMercator.cs,MetersToRadians,The following statement contains a magic number: y = y < 0.0 ? -(PI / 2) : (PI / 2);
Magic Number,ProjNet.CoordinateSystems.Projections,TransverseMercator,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\TransverseMercator.cs,MetersToRadians,The following statement contains a magic number: Math.Abs(phi) >= PI / 2
Magic Number,ProjNet.CoordinateSystems.Transformations,AffineTransform,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Transformations\AffineTransform.cs,AffineTransform,The following statement contains a magic number: _dimSource = 2;
Magic Number,ProjNet.CoordinateSystems.Transformations,AffineTransform,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Transformations\AffineTransform.cs,AffineTransform,The following statement contains a magic number: _dimTarget = 2;
Magic Number,ProjNet.CoordinateSystems.Transformations,AffineTransform,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Transformations\AffineTransform.cs,TransformAffine,The following statement contains a magic number: switch (_dimSource)             {                 case 0:                     point = default;                     break;                  case 1:                     point = stackalloc double[] { x };                     break;                  case 2:                     point = stackalloc double[] { x' y };                     break;                  case 3:                     point = stackalloc double[] { x' y' z };                     break;                  default:                     throw new NotSupportedException();             }
Magic Number,ProjNet.CoordinateSystems.Transformations,AffineTransform,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Transformations\AffineTransform.cs,TransformAffine,The following statement contains a magic number: switch (_dimSource)             {                 case 0:                     point = default;                     break;                  case 1:                     point = stackalloc double[] { x };                     break;                  case 2:                     point = stackalloc double[] { x' y };                     break;                  case 3:                     point = stackalloc double[] { x' y' z };                     break;                  default:                     throw new NotSupportedException();             }
Magic Number,ProjNet.CoordinateSystems.Transformations,AffineTransform,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Transformations\AffineTransform.cs,TransformAffine,The following statement contains a magic number: _dimTarget > 3
Magic Number,ProjNet.CoordinateSystems.Transformations,AffineTransform,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Transformations\AffineTransform.cs,TransformAffine,The following statement contains a magic number: ret.z = transformed[2];
Magic Number,ProjNet.CoordinateSystems.Transformations,AffineTransform,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Transformations\AffineTransform.cs,TransformAffine,The following statement contains a magic number: transformed.Length > 2
Magic Number,ProjNet.CoordinateSystems.Transformations,CoordinateTransformationFactory,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Transformations\CoordinateTransformationFactory.cs,CreateCoordinateOperation,The following statement contains a magic number: var parameterList = new List<ProjectionParameter>(2);
Magic Number,ProjNet.CoordinateSystems.Transformations,DatumTransform,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Transformations\DatumTransform.cs,Apply,The following statement contains a magic number: return (                 x: _v[0] * (x - _v[3] * y + _v[2] * z) + _v[4]'                 y: _v[0] * (_v[3] * x + y - _v[1] * z) + _v[5]'                 z: _v[0] * (-_v[2] * x + _v[1] * y + z) + _v[6]);
Magic Number,ProjNet.CoordinateSystems.Transformations,DatumTransform,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Transformations\DatumTransform.cs,Apply,The following statement contains a magic number: return (                 x: _v[0] * (x - _v[3] * y + _v[2] * z) + _v[4]'                 y: _v[0] * (_v[3] * x + y - _v[1] * z) + _v[5]'                 z: _v[0] * (-_v[2] * x + _v[1] * y + z) + _v[6]);
Magic Number,ProjNet.CoordinateSystems.Transformations,DatumTransform,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Transformations\DatumTransform.cs,Apply,The following statement contains a magic number: return (                 x: _v[0] * (x - _v[3] * y + _v[2] * z) + _v[4]'                 y: _v[0] * (_v[3] * x + y - _v[1] * z) + _v[5]'                 z: _v[0] * (-_v[2] * x + _v[1] * y + z) + _v[6]);
Magic Number,ProjNet.CoordinateSystems.Transformations,DatumTransform,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Transformations\DatumTransform.cs,Apply,The following statement contains a magic number: return (                 x: _v[0] * (x - _v[3] * y + _v[2] * z) + _v[4]'                 y: _v[0] * (_v[3] * x + y - _v[1] * z) + _v[5]'                 z: _v[0] * (-_v[2] * x + _v[1] * y + z) + _v[6]);
Magic Number,ProjNet.CoordinateSystems.Transformations,DatumTransform,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Transformations\DatumTransform.cs,Apply,The following statement contains a magic number: return (                 x: _v[0] * (x - _v[3] * y + _v[2] * z) + _v[4]'                 y: _v[0] * (_v[3] * x + y - _v[1] * z) + _v[5]'                 z: _v[0] * (-_v[2] * x + _v[1] * y + z) + _v[6]);
Magic Number,ProjNet.CoordinateSystems.Transformations,DatumTransform,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Transformations\DatumTransform.cs,Apply,The following statement contains a magic number: return (                 x: _v[0] * (x - _v[3] * y + _v[2] * z) + _v[4]'                 y: _v[0] * (_v[3] * x + y - _v[1] * z) + _v[5]'                 z: _v[0] * (-_v[2] * x + _v[1] * y + z) + _v[6]);
Magic Number,ProjNet.CoordinateSystems.Transformations,DatumTransform,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Transformations\DatumTransform.cs,Apply,The following statement contains a magic number: return (                 x: _v[0] * (x - _v[3] * y + _v[2] * z) + _v[4]'                 y: _v[0] * (_v[3] * x + y - _v[1] * z) + _v[5]'                 z: _v[0] * (-_v[2] * x + _v[1] * y + z) + _v[6]);
Magic Number,ProjNet.CoordinateSystems.Transformations,DatumTransform,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Transformations\DatumTransform.cs,ApplyInverted,The following statement contains a magic number: return (                 x: (1 - (_v[0] - 1)) * (x + _v[3] * y - _v[2] * z) - _v[4]'                 y: (1 - (_v[0] - 1)) * (-_v[3] * x + y + _v[1] * z) - _v[5]'                 z: (1 - (_v[0] - 1)) * (_v[2] * x - _v[1] * y + z) - _v[6]);
Magic Number,ProjNet.CoordinateSystems.Transformations,DatumTransform,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Transformations\DatumTransform.cs,ApplyInverted,The following statement contains a magic number: return (                 x: (1 - (_v[0] - 1)) * (x + _v[3] * y - _v[2] * z) - _v[4]'                 y: (1 - (_v[0] - 1)) * (-_v[3] * x + y + _v[1] * z) - _v[5]'                 z: (1 - (_v[0] - 1)) * (_v[2] * x - _v[1] * y + z) - _v[6]);
Magic Number,ProjNet.CoordinateSystems.Transformations,DatumTransform,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Transformations\DatumTransform.cs,ApplyInverted,The following statement contains a magic number: return (                 x: (1 - (_v[0] - 1)) * (x + _v[3] * y - _v[2] * z) - _v[4]'                 y: (1 - (_v[0] - 1)) * (-_v[3] * x + y + _v[1] * z) - _v[5]'                 z: (1 - (_v[0] - 1)) * (_v[2] * x - _v[1] * y + z) - _v[6]);
Magic Number,ProjNet.CoordinateSystems.Transformations,DatumTransform,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Transformations\DatumTransform.cs,ApplyInverted,The following statement contains a magic number: return (                 x: (1 - (_v[0] - 1)) * (x + _v[3] * y - _v[2] * z) - _v[4]'                 y: (1 - (_v[0] - 1)) * (-_v[3] * x + y + _v[1] * z) - _v[5]'                 z: (1 - (_v[0] - 1)) * (_v[2] * x - _v[1] * y + z) - _v[6]);
Magic Number,ProjNet.CoordinateSystems.Transformations,DatumTransform,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Transformations\DatumTransform.cs,ApplyInverted,The following statement contains a magic number: return (                 x: (1 - (_v[0] - 1)) * (x + _v[3] * y - _v[2] * z) - _v[4]'                 y: (1 - (_v[0] - 1)) * (-_v[3] * x + y + _v[1] * z) - _v[5]'                 z: (1 - (_v[0] - 1)) * (_v[2] * x - _v[1] * y + z) - _v[6]);
Magic Number,ProjNet.CoordinateSystems.Transformations,DatumTransform,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Transformations\DatumTransform.cs,ApplyInverted,The following statement contains a magic number: return (                 x: (1 - (_v[0] - 1)) * (x + _v[3] * y - _v[2] * z) - _v[4]'                 y: (1 - (_v[0] - 1)) * (-_v[3] * x + y + _v[1] * z) - _v[5]'                 z: (1 - (_v[0] - 1)) * (_v[2] * x - _v[1] * y + z) - _v[6]);
Magic Number,ProjNet.CoordinateSystems.Transformations,DatumTransform,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Transformations\DatumTransform.cs,ApplyInverted,The following statement contains a magic number: return (                 x: (1 - (_v[0] - 1)) * (x + _v[3] * y - _v[2] * z) - _v[4]'                 y: (1 - (_v[0] - 1)) * (-_v[3] * x + y + _v[1] * z) - _v[5]'                 z: (1 - (_v[0] - 1)) * (_v[2] * x - _v[1] * y + z) - _v[6]);
Magic Number,ProjNet.CoordinateSystems.Transformations,GeocentricTransform,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Transformations\GeocentricTransform.cs,GeocentricTransform,The following statement contains a magic number: _ses = (Math.Pow(_semiMajor' 2) - Math.Pow(_semiMinor' 2)) / Math.Pow(_semiMinor' 2);
Magic Number,ProjNet.CoordinateSystems.Transformations,GeocentricTransform,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Transformations\GeocentricTransform.cs,GeocentricTransform,The following statement contains a magic number: _ses = (Math.Pow(_semiMajor' 2) - Math.Pow(_semiMinor' 2)) / Math.Pow(_semiMinor' 2);
Magic Number,ProjNet.CoordinateSystems.Transformations,GeocentricTransform,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Transformations\GeocentricTransform.cs,GeocentricTransform,The following statement contains a magic number: _ses = (Math.Pow(_semiMajor' 2) - Math.Pow(_semiMinor' 2)) / Math.Pow(_semiMinor' 2);
Magic Number,ProjNet.CoordinateSystems.Transformations,GeocentricTransform,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Transformations\GeocentricTransform.cs,DegreesToMeters,The following statement contains a magic number: double v = _semiMajor / Math.Sqrt(1 - _es * Math.Pow(Math.Sin(lat)' 2));
Magic Number,ProjNet.CoordinateSystems.Transformations,GeocentricTransform,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Transformations\GeocentricTransform.cs,MetersToDegrees,The following statement contains a magic number: double Sin3_B0 = Math.Pow(Sin_B0' 3);
Magic Number,ProjNet.CoordinateSystems.Transformations,MathTransform,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Transformations\MathTransform.cs,Transform,The following statement contains a magic number: double z = point.Length < 3 ? 0 : point[2];
Magic Number,ProjNet.CoordinateSystems.Transformations,MathTransform,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Transformations\MathTransform.cs,Transform,The following statement contains a magic number: double z = point.Length < 3 ? 0 : point[2];
Magic Number,ProjNet.CoordinateSystems.Transformations,MathTransform,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Transformations\MathTransform.cs,Transform,The following statement contains a magic number: return DimTarget == 2                 ? new[] { x' y }                 : new[] { x' y' z };
Magic Number,ProjNet.CoordinateSystems.Transformations,MathTransform,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Transformations\MathTransform.cs,TransformList,The following statement contains a magic number: double z = point.Length < 3 ? 0 : point[2];
Magic Number,ProjNet.CoordinateSystems.Transformations,MathTransform,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Transformations\MathTransform.cs,TransformList,The following statement contains a magic number: double z = point.Length < 3 ? 0 : point[2];
Magic Number,ProjNet.CoordinateSystems.Transformations,MathTransform,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Transformations\MathTransform.cs,TransformList,The following statement contains a magic number: result.Add(DimTarget == 2                     ? new[] { x' y }                     : new[] { x' y' z });
Magic Number,ProjNet.CoordinateSystems.Transformations,MathTransform,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Transformations\MathTransform.cs,Transform,The following statement contains a magic number: TransformCore(inXs' inYs' dummyZ' 2' 2' 0);
Magic Number,ProjNet.CoordinateSystems.Transformations,MathTransform,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Transformations\MathTransform.cs,Transform,The following statement contains a magic number: TransformCore(inXs' inYs' dummyZ' 2' 2' 0);
Magic Number,ProjNet.CoordinateSystems.Transformations,MathTransform,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Transformations\MathTransform.cs,Transform,The following statement contains a magic number: var inZs = read.Slice(2);
Magic Number,ProjNet.CoordinateSystems.Transformations,MathTransform,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Transformations\MathTransform.cs,Transform,The following statement contains a magic number: TransformCore(inXs' inYs' inZs' 3'3'3);
Magic Number,ProjNet.CoordinateSystems.Transformations,MathTransform,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Transformations\MathTransform.cs,Transform,The following statement contains a magic number: TransformCore(inXs' inYs' inZs' 3'3'3);
Magic Number,ProjNet.CoordinateSystems.Transformations,MathTransform,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Transformations\MathTransform.cs,Transform,The following statement contains a magic number: TransformCore(inXs' inYs' inZs' 3'3'3);
Magic Number,ProjNet.IO.CoordinateSystems,CoordinateSystemWktReader,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\IO\CoordinateSystems\CoordinateSystemWktReader.cs,ReadProjectedCoordinateSystem,The following statement contains a magic number: var axes = new List<AxisInfo>(2);
Magic Number,ProjNet.IO.CoordinateSystems,CoordinateSystemWktReader,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\IO\CoordinateSystems\CoordinateSystemWktReader.cs,ReadGeocentricCoordinateSystem,The following statement contains a magic number: var info = new List<AxisInfo>(3);
Magic Number,ProjNet.IO.CoordinateSystems,CoordinateSystemWktReader,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\IO\CoordinateSystems\CoordinateSystemWktReader.cs,ReadGeographicCoordinateSystem,The following statement contains a magic number: var info = new List<AxisInfo>(2);
Magic Number,ProjNet.IO.CoordinateSystems,MathTransformWktReader,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\IO\CoordinateSystems\MathTransformWktReader.cs,ReadAffineTransform,The following statement contains a magic number: switch (param.Name)                 {                     case "num_row":                     case "num_col":                         break;                     case "elt_0_0":                         matrix[0' 0] = param.Value;                         break;                     case "elt_0_1":                         matrix[0' 1] = param.Value;                         break;                     case "elt_0_2":                         matrix[0' 2] = param.Value;                         break;                     case "elt_0_3":                         matrix[0' 3] = param.Value;                         break;                     case "elt_1_0":                         matrix[1' 0] = param.Value;                         break;                     case "elt_1_1":                         matrix[1' 1] = param.Value;                         break;                     case "elt_1_2":                         matrix[1' 2] = param.Value;                         break;                     case "elt_1_3":                         matrix[1' 3] = param.Value;                         break;                     case "elt_2_0":                         matrix[2' 0] = param.Value;                         break;                     case "elt_2_1":                         matrix[2' 1] = param.Value;                         break;                     case "elt_2_2":                         matrix[2' 2] = param.Value;                         break;                     case "elt_2_3":                         matrix[2' 3] = param.Value;                         break;                     case "elt_3_0":                         matrix[3' 0] = param.Value;                         break;                     case "elt_3_1":                         matrix[3' 1] = param.Value;                         break;                     case "elt_3_2":                         matrix[3' 2] = param.Value;                         break;                     case "elt_3_3":                         matrix[3' 3] = param.Value;                         break;                 }
Magic Number,ProjNet.IO.CoordinateSystems,MathTransformWktReader,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\IO\CoordinateSystems\MathTransformWktReader.cs,ReadAffineTransform,The following statement contains a magic number: switch (param.Name)                 {                     case "num_row":                     case "num_col":                         break;                     case "elt_0_0":                         matrix[0' 0] = param.Value;                         break;                     case "elt_0_1":                         matrix[0' 1] = param.Value;                         break;                     case "elt_0_2":                         matrix[0' 2] = param.Value;                         break;                     case "elt_0_3":                         matrix[0' 3] = param.Value;                         break;                     case "elt_1_0":                         matrix[1' 0] = param.Value;                         break;                     case "elt_1_1":                         matrix[1' 1] = param.Value;                         break;                     case "elt_1_2":                         matrix[1' 2] = param.Value;                         break;                     case "elt_1_3":                         matrix[1' 3] = param.Value;                         break;                     case "elt_2_0":                         matrix[2' 0] = param.Value;                         break;                     case "elt_2_1":                         matrix[2' 1] = param.Value;                         break;                     case "elt_2_2":                         matrix[2' 2] = param.Value;                         break;                     case "elt_2_3":                         matrix[2' 3] = param.Value;                         break;                     case "elt_3_0":                         matrix[3' 0] = param.Value;                         break;                     case "elt_3_1":                         matrix[3' 1] = param.Value;                         break;                     case "elt_3_2":                         matrix[3' 2] = param.Value;                         break;                     case "elt_3_3":                         matrix[3' 3] = param.Value;                         break;                 }
Magic Number,ProjNet.IO.CoordinateSystems,MathTransformWktReader,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\IO\CoordinateSystems\MathTransformWktReader.cs,ReadAffineTransform,The following statement contains a magic number: switch (param.Name)                 {                     case "num_row":                     case "num_col":                         break;                     case "elt_0_0":                         matrix[0' 0] = param.Value;                         break;                     case "elt_0_1":                         matrix[0' 1] = param.Value;                         break;                     case "elt_0_2":                         matrix[0' 2] = param.Value;                         break;                     case "elt_0_3":                         matrix[0' 3] = param.Value;                         break;                     case "elt_1_0":                         matrix[1' 0] = param.Value;                         break;                     case "elt_1_1":                         matrix[1' 1] = param.Value;                         break;                     case "elt_1_2":                         matrix[1' 2] = param.Value;                         break;                     case "elt_1_3":                         matrix[1' 3] = param.Value;                         break;                     case "elt_2_0":                         matrix[2' 0] = param.Value;                         break;                     case "elt_2_1":                         matrix[2' 1] = param.Value;                         break;                     case "elt_2_2":                         matrix[2' 2] = param.Value;                         break;                     case "elt_2_3":                         matrix[2' 3] = param.Value;                         break;                     case "elt_3_0":                         matrix[3' 0] = param.Value;                         break;                     case "elt_3_1":                         matrix[3' 1] = param.Value;                         break;                     case "elt_3_2":                         matrix[3' 2] = param.Value;                         break;                     case "elt_3_3":                         matrix[3' 3] = param.Value;                         break;                 }
Magic Number,ProjNet.IO.CoordinateSystems,MathTransformWktReader,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\IO\CoordinateSystems\MathTransformWktReader.cs,ReadAffineTransform,The following statement contains a magic number: switch (param.Name)                 {                     case "num_row":                     case "num_col":                         break;                     case "elt_0_0":                         matrix[0' 0] = param.Value;                         break;                     case "elt_0_1":                         matrix[0' 1] = param.Value;                         break;                     case "elt_0_2":                         matrix[0' 2] = param.Value;                         break;                     case "elt_0_3":                         matrix[0' 3] = param.Value;                         break;                     case "elt_1_0":                         matrix[1' 0] = param.Value;                         break;                     case "elt_1_1":                         matrix[1' 1] = param.Value;                         break;                     case "elt_1_2":                         matrix[1' 2] = param.Value;                         break;                     case "elt_1_3":                         matrix[1' 3] = param.Value;                         break;                     case "elt_2_0":                         matrix[2' 0] = param.Value;                         break;                     case "elt_2_1":                         matrix[2' 1] = param.Value;                         break;                     case "elt_2_2":                         matrix[2' 2] = param.Value;                         break;                     case "elt_2_3":                         matrix[2' 3] = param.Value;                         break;                     case "elt_3_0":                         matrix[3' 0] = param.Value;                         break;                     case "elt_3_1":                         matrix[3' 1] = param.Value;                         break;                     case "elt_3_2":                         matrix[3' 2] = param.Value;                         break;                     case "elt_3_3":                         matrix[3' 3] = param.Value;                         break;                 }
Magic Number,ProjNet.IO.CoordinateSystems,MathTransformWktReader,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\IO\CoordinateSystems\MathTransformWktReader.cs,ReadAffineTransform,The following statement contains a magic number: switch (param.Name)                 {                     case "num_row":                     case "num_col":                         break;                     case "elt_0_0":                         matrix[0' 0] = param.Value;                         break;                     case "elt_0_1":                         matrix[0' 1] = param.Value;                         break;                     case "elt_0_2":                         matrix[0' 2] = param.Value;                         break;                     case "elt_0_3":                         matrix[0' 3] = param.Value;                         break;                     case "elt_1_0":                         matrix[1' 0] = param.Value;                         break;                     case "elt_1_1":                         matrix[1' 1] = param.Value;                         break;                     case "elt_1_2":                         matrix[1' 2] = param.Value;                         break;                     case "elt_1_3":                         matrix[1' 3] = param.Value;                         break;                     case "elt_2_0":                         matrix[2' 0] = param.Value;                         break;                     case "elt_2_1":                         matrix[2' 1] = param.Value;                         break;                     case "elt_2_2":                         matrix[2' 2] = param.Value;                         break;                     case "elt_2_3":                         matrix[2' 3] = param.Value;                         break;                     case "elt_3_0":                         matrix[3' 0] = param.Value;                         break;                     case "elt_3_1":                         matrix[3' 1] = param.Value;                         break;                     case "elt_3_2":                         matrix[3' 2] = param.Value;                         break;                     case "elt_3_3":                         matrix[3' 3] = param.Value;                         break;                 }
Magic Number,ProjNet.IO.CoordinateSystems,MathTransformWktReader,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\IO\CoordinateSystems\MathTransformWktReader.cs,ReadAffineTransform,The following statement contains a magic number: switch (param.Name)                 {                     case "num_row":                     case "num_col":                         break;                     case "elt_0_0":                         matrix[0' 0] = param.Value;                         break;                     case "elt_0_1":                         matrix[0' 1] = param.Value;                         break;                     case "elt_0_2":                         matrix[0' 2] = param.Value;                         break;                     case "elt_0_3":                         matrix[0' 3] = param.Value;                         break;                     case "elt_1_0":                         matrix[1' 0] = param.Value;                         break;                     case "elt_1_1":                         matrix[1' 1] = param.Value;                         break;                     case "elt_1_2":                         matrix[1' 2] = param.Value;                         break;                     case "elt_1_3":                         matrix[1' 3] = param.Value;                         break;                     case "elt_2_0":                         matrix[2' 0] = param.Value;                         break;                     case "elt_2_1":                         matrix[2' 1] = param.Value;                         break;                     case "elt_2_2":                         matrix[2' 2] = param.Value;                         break;                     case "elt_2_3":                         matrix[2' 3] = param.Value;                         break;                     case "elt_3_0":                         matrix[3' 0] = param.Value;                         break;                     case "elt_3_1":                         matrix[3' 1] = param.Value;                         break;                     case "elt_3_2":                         matrix[3' 2] = param.Value;                         break;                     case "elt_3_3":                         matrix[3' 3] = param.Value;                         break;                 }
Magic Number,ProjNet.IO.CoordinateSystems,MathTransformWktReader,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\IO\CoordinateSystems\MathTransformWktReader.cs,ReadAffineTransform,The following statement contains a magic number: switch (param.Name)                 {                     case "num_row":                     case "num_col":                         break;                     case "elt_0_0":                         matrix[0' 0] = param.Value;                         break;                     case "elt_0_1":                         matrix[0' 1] = param.Value;                         break;                     case "elt_0_2":                         matrix[0' 2] = param.Value;                         break;                     case "elt_0_3":                         matrix[0' 3] = param.Value;                         break;                     case "elt_1_0":                         matrix[1' 0] = param.Value;                         break;                     case "elt_1_1":                         matrix[1' 1] = param.Value;                         break;                     case "elt_1_2":                         matrix[1' 2] = param.Value;                         break;                     case "elt_1_3":                         matrix[1' 3] = param.Value;                         break;                     case "elt_2_0":                         matrix[2' 0] = param.Value;                         break;                     case "elt_2_1":                         matrix[2' 1] = param.Value;                         break;                     case "elt_2_2":                         matrix[2' 2] = param.Value;                         break;                     case "elt_2_3":                         matrix[2' 3] = param.Value;                         break;                     case "elt_3_0":                         matrix[3' 0] = param.Value;                         break;                     case "elt_3_1":                         matrix[3' 1] = param.Value;                         break;                     case "elt_3_2":                         matrix[3' 2] = param.Value;                         break;                     case "elt_3_3":                         matrix[3' 3] = param.Value;                         break;                 }
Magic Number,ProjNet.IO.CoordinateSystems,MathTransformWktReader,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\IO\CoordinateSystems\MathTransformWktReader.cs,ReadAffineTransform,The following statement contains a magic number: switch (param.Name)                 {                     case "num_row":                     case "num_col":                         break;                     case "elt_0_0":                         matrix[0' 0] = param.Value;                         break;                     case "elt_0_1":                         matrix[0' 1] = param.Value;                         break;                     case "elt_0_2":                         matrix[0' 2] = param.Value;                         break;                     case "elt_0_3":                         matrix[0' 3] = param.Value;                         break;                     case "elt_1_0":                         matrix[1' 0] = param.Value;                         break;                     case "elt_1_1":                         matrix[1' 1] = param.Value;                         break;                     case "elt_1_2":                         matrix[1' 2] = param.Value;                         break;                     case "elt_1_3":                         matrix[1' 3] = param.Value;                         break;                     case "elt_2_0":                         matrix[2' 0] = param.Value;                         break;                     case "elt_2_1":                         matrix[2' 1] = param.Value;                         break;                     case "elt_2_2":                         matrix[2' 2] = param.Value;                         break;                     case "elt_2_3":                         matrix[2' 3] = param.Value;                         break;                     case "elt_3_0":                         matrix[3' 0] = param.Value;                         break;                     case "elt_3_1":                         matrix[3' 1] = param.Value;                         break;                     case "elt_3_2":                         matrix[3' 2] = param.Value;                         break;                     case "elt_3_3":                         matrix[3' 3] = param.Value;                         break;                 }
Magic Number,ProjNet.IO.CoordinateSystems,MathTransformWktReader,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\IO\CoordinateSystems\MathTransformWktReader.cs,ReadAffineTransform,The following statement contains a magic number: switch (param.Name)                 {                     case "num_row":                     case "num_col":                         break;                     case "elt_0_0":                         matrix[0' 0] = param.Value;                         break;                     case "elt_0_1":                         matrix[0' 1] = param.Value;                         break;                     case "elt_0_2":                         matrix[0' 2] = param.Value;                         break;                     case "elt_0_3":                         matrix[0' 3] = param.Value;                         break;                     case "elt_1_0":                         matrix[1' 0] = param.Value;                         break;                     case "elt_1_1":                         matrix[1' 1] = param.Value;                         break;                     case "elt_1_2":                         matrix[1' 2] = param.Value;                         break;                     case "elt_1_3":                         matrix[1' 3] = param.Value;                         break;                     case "elt_2_0":                         matrix[2' 0] = param.Value;                         break;                     case "elt_2_1":                         matrix[2' 1] = param.Value;                         break;                     case "elt_2_2":                         matrix[2' 2] = param.Value;                         break;                     case "elt_2_3":                         matrix[2' 3] = param.Value;                         break;                     case "elt_3_0":                         matrix[3' 0] = param.Value;                         break;                     case "elt_3_1":                         matrix[3' 1] = param.Value;                         break;                     case "elt_3_2":                         matrix[3' 2] = param.Value;                         break;                     case "elt_3_3":                         matrix[3' 3] = param.Value;                         break;                 }
Magic Number,ProjNet.IO.CoordinateSystems,MathTransformWktReader,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\IO\CoordinateSystems\MathTransformWktReader.cs,ReadAffineTransform,The following statement contains a magic number: switch (param.Name)                 {                     case "num_row":                     case "num_col":                         break;                     case "elt_0_0":                         matrix[0' 0] = param.Value;                         break;                     case "elt_0_1":                         matrix[0' 1] = param.Value;                         break;                     case "elt_0_2":                         matrix[0' 2] = param.Value;                         break;                     case "elt_0_3":                         matrix[0' 3] = param.Value;                         break;                     case "elt_1_0":                         matrix[1' 0] = param.Value;                         break;                     case "elt_1_1":                         matrix[1' 1] = param.Value;                         break;                     case "elt_1_2":                         matrix[1' 2] = param.Value;                         break;                     case "elt_1_3":                         matrix[1' 3] = param.Value;                         break;                     case "elt_2_0":                         matrix[2' 0] = param.Value;                         break;                     case "elt_2_1":                         matrix[2' 1] = param.Value;                         break;                     case "elt_2_2":                         matrix[2' 2] = param.Value;                         break;                     case "elt_2_3":                         matrix[2' 3] = param.Value;                         break;                     case "elt_3_0":                         matrix[3' 0] = param.Value;                         break;                     case "elt_3_1":                         matrix[3' 1] = param.Value;                         break;                     case "elt_3_2":                         matrix[3' 2] = param.Value;                         break;                     case "elt_3_3":                         matrix[3' 3] = param.Value;                         break;                 }
Magic Number,ProjNet.IO.CoordinateSystems,MathTransformWktReader,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\IO\CoordinateSystems\MathTransformWktReader.cs,ReadAffineTransform,The following statement contains a magic number: switch (param.Name)                 {                     case "num_row":                     case "num_col":                         break;                     case "elt_0_0":                         matrix[0' 0] = param.Value;                         break;                     case "elt_0_1":                         matrix[0' 1] = param.Value;                         break;                     case "elt_0_2":                         matrix[0' 2] = param.Value;                         break;                     case "elt_0_3":                         matrix[0' 3] = param.Value;                         break;                     case "elt_1_0":                         matrix[1' 0] = param.Value;                         break;                     case "elt_1_1":                         matrix[1' 1] = param.Value;                         break;                     case "elt_1_2":                         matrix[1' 2] = param.Value;                         break;                     case "elt_1_3":                         matrix[1' 3] = param.Value;                         break;                     case "elt_2_0":                         matrix[2' 0] = param.Value;                         break;                     case "elt_2_1":                         matrix[2' 1] = param.Value;                         break;                     case "elt_2_2":                         matrix[2' 2] = param.Value;                         break;                     case "elt_2_3":                         matrix[2' 3] = param.Value;                         break;                     case "elt_3_0":                         matrix[3' 0] = param.Value;                         break;                     case "elt_3_1":                         matrix[3' 1] = param.Value;                         break;                     case "elt_3_2":                         matrix[3' 2] = param.Value;                         break;                     case "elt_3_3":                         matrix[3' 3] = param.Value;                         break;                 }
Magic Number,ProjNet.IO.CoordinateSystems,MathTransformWktReader,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\IO\CoordinateSystems\MathTransformWktReader.cs,ReadAffineTransform,The following statement contains a magic number: switch (param.Name)                 {                     case "num_row":                     case "num_col":                         break;                     case "elt_0_0":                         matrix[0' 0] = param.Value;                         break;                     case "elt_0_1":                         matrix[0' 1] = param.Value;                         break;                     case "elt_0_2":                         matrix[0' 2] = param.Value;                         break;                     case "elt_0_3":                         matrix[0' 3] = param.Value;                         break;                     case "elt_1_0":                         matrix[1' 0] = param.Value;                         break;                     case "elt_1_1":                         matrix[1' 1] = param.Value;                         break;                     case "elt_1_2":                         matrix[1' 2] = param.Value;                         break;                     case "elt_1_3":                         matrix[1' 3] = param.Value;                         break;                     case "elt_2_0":                         matrix[2' 0] = param.Value;                         break;                     case "elt_2_1":                         matrix[2' 1] = param.Value;                         break;                     case "elt_2_2":                         matrix[2' 2] = param.Value;                         break;                     case "elt_2_3":                         matrix[2' 3] = param.Value;                         break;                     case "elt_3_0":                         matrix[3' 0] = param.Value;                         break;                     case "elt_3_1":                         matrix[3' 1] = param.Value;                         break;                     case "elt_3_2":                         matrix[3' 2] = param.Value;                         break;                     case "elt_3_3":                         matrix[3' 3] = param.Value;                         break;                 }
Magic Number,ProjNet.IO.CoordinateSystems,MathTransformWktReader,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\IO\CoordinateSystems\MathTransformWktReader.cs,ReadAffineTransform,The following statement contains a magic number: switch (param.Name)                 {                     case "num_row":                     case "num_col":                         break;                     case "elt_0_0":                         matrix[0' 0] = param.Value;                         break;                     case "elt_0_1":                         matrix[0' 1] = param.Value;                         break;                     case "elt_0_2":                         matrix[0' 2] = param.Value;                         break;                     case "elt_0_3":                         matrix[0' 3] = param.Value;                         break;                     case "elt_1_0":                         matrix[1' 0] = param.Value;                         break;                     case "elt_1_1":                         matrix[1' 1] = param.Value;                         break;                     case "elt_1_2":                         matrix[1' 2] = param.Value;                         break;                     case "elt_1_3":                         matrix[1' 3] = param.Value;                         break;                     case "elt_2_0":                         matrix[2' 0] = param.Value;                         break;                     case "elt_2_1":                         matrix[2' 1] = param.Value;                         break;                     case "elt_2_2":                         matrix[2' 2] = param.Value;                         break;                     case "elt_2_3":                         matrix[2' 3] = param.Value;                         break;                     case "elt_3_0":                         matrix[3' 0] = param.Value;                         break;                     case "elt_3_1":                         matrix[3' 1] = param.Value;                         break;                     case "elt_3_2":                         matrix[3' 2] = param.Value;                         break;                     case "elt_3_3":                         matrix[3' 3] = param.Value;                         break;                 }
Magic Number,ProjNet.IO.CoordinateSystems,MathTransformWktReader,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\IO\CoordinateSystems\MathTransformWktReader.cs,ReadAffineTransform,The following statement contains a magic number: switch (param.Name)                 {                     case "num_row":                     case "num_col":                         break;                     case "elt_0_0":                         matrix[0' 0] = param.Value;                         break;                     case "elt_0_1":                         matrix[0' 1] = param.Value;                         break;                     case "elt_0_2":                         matrix[0' 2] = param.Value;                         break;                     case "elt_0_3":                         matrix[0' 3] = param.Value;                         break;                     case "elt_1_0":                         matrix[1' 0] = param.Value;                         break;                     case "elt_1_1":                         matrix[1' 1] = param.Value;                         break;                     case "elt_1_2":                         matrix[1' 2] = param.Value;                         break;                     case "elt_1_3":                         matrix[1' 3] = param.Value;                         break;                     case "elt_2_0":                         matrix[2' 0] = param.Value;                         break;                     case "elt_2_1":                         matrix[2' 1] = param.Value;                         break;                     case "elt_2_2":                         matrix[2' 2] = param.Value;                         break;                     case "elt_2_3":                         matrix[2' 3] = param.Value;                         break;                     case "elt_3_0":                         matrix[3' 0] = param.Value;                         break;                     case "elt_3_1":                         matrix[3' 1] = param.Value;                         break;                     case "elt_3_2":                         matrix[3' 2] = param.Value;                         break;                     case "elt_3_3":                         matrix[3' 3] = param.Value;                         break;                 }
Magic Number,ProjNet.IO.CoordinateSystems,MathTransformWktReader,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\IO\CoordinateSystems\MathTransformWktReader.cs,ReadAffineTransform,The following statement contains a magic number: switch (param.Name)                 {                     case "num_row":                     case "num_col":                         break;                     case "elt_0_0":                         matrix[0' 0] = param.Value;                         break;                     case "elt_0_1":                         matrix[0' 1] = param.Value;                         break;                     case "elt_0_2":                         matrix[0' 2] = param.Value;                         break;                     case "elt_0_3":                         matrix[0' 3] = param.Value;                         break;                     case "elt_1_0":                         matrix[1' 0] = param.Value;                         break;                     case "elt_1_1":                         matrix[1' 1] = param.Value;                         break;                     case "elt_1_2":                         matrix[1' 2] = param.Value;                         break;                     case "elt_1_3":                         matrix[1' 3] = param.Value;                         break;                     case "elt_2_0":                         matrix[2' 0] = param.Value;                         break;                     case "elt_2_1":                         matrix[2' 1] = param.Value;                         break;                     case "elt_2_2":                         matrix[2' 2] = param.Value;                         break;                     case "elt_2_3":                         matrix[2' 3] = param.Value;                         break;                     case "elt_3_0":                         matrix[3' 0] = param.Value;                         break;                     case "elt_3_1":                         matrix[3' 1] = param.Value;                         break;                     case "elt_3_2":                         matrix[3' 2] = param.Value;                         break;                     case "elt_3_3":                         matrix[3' 3] = param.Value;                         break;                 }
Magic Number,ProjNet.IO.CoordinateSystems,MathTransformWktReader,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\IO\CoordinateSystems\MathTransformWktReader.cs,ReadAffineTransform,The following statement contains a magic number: switch (param.Name)                 {                     case "num_row":                     case "num_col":                         break;                     case "elt_0_0":                         matrix[0' 0] = param.Value;                         break;                     case "elt_0_1":                         matrix[0' 1] = param.Value;                         break;                     case "elt_0_2":                         matrix[0' 2] = param.Value;                         break;                     case "elt_0_3":                         matrix[0' 3] = param.Value;                         break;                     case "elt_1_0":                         matrix[1' 0] = param.Value;                         break;                     case "elt_1_1":                         matrix[1' 1] = param.Value;                         break;                     case "elt_1_2":                         matrix[1' 2] = param.Value;                         break;                     case "elt_1_3":                         matrix[1' 3] = param.Value;                         break;                     case "elt_2_0":                         matrix[2' 0] = param.Value;                         break;                     case "elt_2_1":                         matrix[2' 1] = param.Value;                         break;                     case "elt_2_2":                         matrix[2' 2] = param.Value;                         break;                     case "elt_2_3":                         matrix[2' 3] = param.Value;                         break;                     case "elt_3_0":                         matrix[3' 0] = param.Value;                         break;                     case "elt_3_1":                         matrix[3' 1] = param.Value;                         break;                     case "elt_3_2":                         matrix[3' 2] = param.Value;                         break;                     case "elt_3_3":                         matrix[3' 3] = param.Value;                         break;                 }
Missing Default,ProjNet.CoordinateSystems.Projections,LambertAzimuthalEqualAreaProjection,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\LambertAzimuthalEqualAreaProjection.cs,LambertAzimuthalEqualAreaProjection,The following switch statement is missing a default case: switch (_mode)                 {                     case Mode.N_POLE:                     case Mode.S_POLE:                         _dd = 1.0;                         break;                     case Mode.EQUIT:                         _dd = 1.0 / (_rq = Math.Sqrt(0.5 * _qp));                         _xmf = 1.0;                         _ymf = 0.5 * _qp;                         break;                     case Mode.OBLIQ:                         _rq = Math.Sqrt(0.5 * _qp);                         double sinphi = Math.Sin(phi0);                         _sinb1 = qsfn(sinphi' _e' _one_es) / _qp;                         _cosb1 = Math.Sqrt(1.0 - _sinb1 * _sinb1);                         _dd = Math.Cos(phi0) / (Math.Sqrt(1.0 - _es * sinphi * sinphi) * _rq * _cosb1);                         _ymf = (_xmf = _rq) / _dd;                         _xmf *= _dd;                         break;                 }
Missing Default,ProjNet.CoordinateSystems.Projections,LambertAzimuthalEqualAreaProjection,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\LambertAzimuthalEqualAreaProjection.cs,EllipsoidalRadiansToMeters,The following switch statement is missing a default case: switch (_mode)             {                 case Mode.OBLIQ:                     b = 1.0 + _sinb1 * sinb + _cosb1 * cosb * coslam;                     break;                 case Mode.EQUIT:                     b = 1.0 + cosb * coslam;                     break;                 case Mode.N_POLE:                     b = HALF_PI + phi;                     q = _qp - q;                     break;                 case Mode.S_POLE:                     b = phi - HALF_PI;                     q = _qp + q;                     break;             }
Missing Default,ProjNet.CoordinateSystems.Projections,LambertAzimuthalEqualAreaProjection,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\LambertAzimuthalEqualAreaProjection.cs,EllipsoidalRadiansToMeters,The following switch statement is missing a default case: switch (_mode)             {                 case Mode.OBLIQ:                     b = Math.Sqrt(2.0 / b);                     y = _ymf * b * (_cosb1 * sinb - _sinb1 * cosb * coslam);                     goto eqcon;                 case Mode.EQUIT:                     b = Math.Sqrt(2.0 / (1.0 + cosb * coslam));                     y = b * sinb * _ymf;                     eqcon:                     x = _xmf * b * cosb * sinlam;                     break;                 case Mode.N_POLE:                 case Mode.S_POLE:                     if (q >= 1e-15)                     {                         b = Math.Sqrt(q);                         x = b * sinlam;                         y = coslam * (_mode == Mode.S_POLE ? b : -b);                     }                     else                         x = y = 0.0;                     break;             }
Missing Default,ProjNet.CoordinateSystems.Projections,LambertAzimuthalEqualAreaProjection,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\LambertAzimuthalEqualAreaProjection.cs,SphericalRadiansToMeters,The following switch statement is missing a default case: switch (_mode)             {                 case Mode.EQUIT:                     y = 1.0 + cosphi * coslam;                     goto oblcon;                 case Mode.OBLIQ:                     y = 1.0 + _sinb1 * sinphi + _cosb1 * cosphi * coslam;                     oblcon:                     if (y <= EPS10)                     {                         //proj_errno_set(P' PJD_ERR_TOLERANCE_CONDITION);                         return;                     }                     y = Math.Sqrt(2.0 / y);                     x = y * cosphi * Math.Sin(lam);                     y *= _mode == Mode.EQUIT ? sinphi :                         _cosb1 * sinphi - _sinb1 * cosphi * coslam;                     break;                 case Mode.N_POLE:                     coslam = -coslam;                     goto continue_S_POLE;                 /*-fallthrough*/                 case Mode.S_POLE:                     continue_S_POLE:                     if (Math.Abs(phi + lat_origin) < EPS10)                     {                         //proj_errno_set(P' PJD_ERR_TOLERANCE_CONDITION);                         return;                     }                     y = FORT_PI - phi * 0.5;                     y = 2.0 * (_mode == Mode.S_POLE ? Math.Cos(y) : Math.Sin(y));                     x = y * Math.Sin(lam);                     y *= coslam;                     break;             }
Missing Default,ProjNet.CoordinateSystems.Projections,LambertAzimuthalEqualAreaProjection,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\LambertAzimuthalEqualAreaProjection.cs,EllipsoidalMetersToRadians,The following switch statement is missing a default case: switch (_mode)             {                 case Mode.EQUIT:                 case Mode.OBLIQ:                     x /= _dd;                     y *= _dd;                     rho = hypot(x' y);                     if (rho < EPS10)                     {                         x = 0.0;        // lam                         y = lat_origin; // phi                         return;                     }                     sCe = 2.0 * Math.Asin(0.5 * rho / _rq);                     cCe = Math.Cos(sCe);                     sCe = Math.Sin(sCe);                     x *= sCe;                     if (_mode == Mode.OBLIQ)                     {                         ab = cCe * _sinb1 + y * sCe * _cosb1 / rho;                         y = rho * _cosb1 * cCe - y * _sinb1 * sCe;                     }                     else                     {                         ab = y * sCe / rho;                         y = rho * cCe;                     }                     break;                 case Mode.N_POLE:                     y = -y;                     goto continue_S_POLE;                 /*-fallthrough*/                 case Mode.S_POLE:                     continue_S_POLE:                     q = (x * x + y * y);                     if (q == 0.0)                     {                         x = 0.0;          // lam                         y = lat_origin;   // phi                         return ;                     }                     ab = 1.0 - q / _qp;                     if (_mode == Mode.S_POLE)                         ab = -ab;                     break;             }
Missing Default,ProjNet.CoordinateSystems.Projections,LambertAzimuthalEqualAreaProjection,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\CoordinateSystems\Projections\LambertAzimuthalEqualAreaProjection.cs,SphericalMetersToRadians,The following switch statement is missing a default case: switch (_mode)             {                 case Mode.EQUIT:                     phi = Math.Abs(rh) <= EPS10 ? 0.0 : Math.Asin(y * sinz / rh);                     x *= sinz;                     y = cosz * rh;                     break;                 case Mode.OBLIQ:                     phi = Math.Abs(rh) <= EPS10 ? lat_origin :                         Math.Asin(cosz * _sinb1 + y * sinz * _cosb1 / rh);                     x *= sinz * _cosb1;                     y = (cosz - Math.Sin(phi) * _sinb1) * rh;                     break;                 case Mode.N_POLE:                     y = -y;                     phi = HALF_PI - phi;                     break;                 case Mode.S_POLE:                     phi -= HALF_PI;                     break;             }
Missing Default,ProjNet.IO.CoordinateSystems,CoordinateSystemWktReader,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\IO\CoordinateSystems\CoordinateSystemWktReader.cs,ReadProjectedCoordinateSystem,The following switch statement is missing a default case: switch (tokenizer.GetStringValue())                 {                     case "'":                     case "]":                         break;                     case "PROJECTION":                         projection = ReadProjection(tokenizer);                         ct = tokenizer.GetTokenType();                         continue;                     //break;                     case "UNIT":                         unit = ReadLinearUnit(tokenizer);                         break;                     case "AXIS":                         axes.Add(ReadAxis(tokenizer));                         tokenizer.NextToken();                         break;                     case "AUTHORITY":                         tokenizer.ReadAuthority(out authority' out authorityCode);                         //tokenizer.ReadToken("]");                         break;                 }
Missing Default,ProjNet.IO.CoordinateSystems,CoordinateSystemWktReader,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\IO\CoordinateSystems\CoordinateSystemWktReader.cs,ReadFittedCoordinateSystem,The following switch statement is missing a default case: switch (tokenizer.GetStringValue ())                 {                     case "'":                     case "]":                         break;                     case "AUTHORITY":                         tokenizer.ReadAuthority (out authority' out authorityCode);                         //tokenizer.ReadToken("]");                         break;                 }
Missing Default,ProjNet.IO.CoordinateSystems,MathTransformWktReader,C:\research\architectureSmells\repos\NetTopologySuite_ProjNet4GeoAPI\src\ProjNet\IO\CoordinateSystems\MathTransformWktReader.cs,ReadAffineTransform,The following switch statement is missing a default case: switch (param.Name)                 {                     case "num_row":                     case "num_col":                         break;                     case "elt_0_0":                         matrix[0' 0] = param.Value;                         break;                     case "elt_0_1":                         matrix[0' 1] = param.Value;                         break;                     case "elt_0_2":                         matrix[0' 2] = param.Value;                         break;                     case "elt_0_3":                         matrix[0' 3] = param.Value;                         break;                     case "elt_1_0":                         matrix[1' 0] = param.Value;                         break;                     case "elt_1_1":                         matrix[1' 1] = param.Value;                         break;                     case "elt_1_2":                         matrix[1' 2] = param.Value;                         break;                     case "elt_1_3":                         matrix[1' 3] = param.Value;                         break;                     case "elt_2_0":                         matrix[2' 0] = param.Value;                         break;                     case "elt_2_1":                         matrix[2' 1] = param.Value;                         break;                     case "elt_2_2":                         matrix[2' 2] = param.Value;                         break;                     case "elt_2_3":                         matrix[2' 3] = param.Value;                         break;                     case "elt_3_0":                         matrix[3' 0] = param.Value;                         break;                     case "elt_3_1":                         matrix[3' 1] = param.Value;                         break;                     case "elt_3_2":                         matrix[3' 2] = param.Value;                         break;                     case "elt_3_3":                         matrix[3' 3] = param.Value;                         break;                 }
