Implementation smell,Namespace,Class,File,Method,Description
Long Method,CVNBot,ListManager,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\ListManager.cs,HandleListCommand,The method has 153 lines of code.
Long Method,CVNBot,Program,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Program.cs,Main,The method has 167 lines of code.
Long Method,CVNBot,Program,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Program.cs,Irc_OnChannelMessage,The method has 225 lines of code.
Long Method,CVNBot,Program,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Program.cs,ReactToRCEvent,The method has 423 lines of code.
Long Method,CVNBot,RCReader,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\RCReader.cs,Rcirc_OnChannelMessage,The method has 345 lines of code.
Complex Method,CVNBot,CVNBotUtils,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\CVNBotUtils.cs,ParseDateTimeLength,Cyclomatic complexity of the method is 11
Complex Method,CVNBot,ListManager,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\ListManager.cs,ShowUserOnList,Cyclomatic complexity of the method is 8
Complex Method,CVNBot,ListManager,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\ListManager.cs,HandleListCommand,Cyclomatic complexity of the method is 45
Complex Method,CVNBot,ListManager,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\ListManager.cs,ClassifyEditor,Cyclomatic complexity of the method is 9
Complex Method,CVNBot,Program,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Program.cs,Main,Cyclomatic complexity of the method is 36
Complex Method,CVNBot,Program,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Program.cs,Irc_OnChannelNotice,Cyclomatic complexity of the method is 24
Complex Method,CVNBot,Program,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Program.cs,Irc_OnChannelMessage,Cyclomatic complexity of the method is 49
Complex Method,CVNBot,Program,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Program.cs,ReactToRCEvent,Cyclomatic complexity of the method is 61
Complex Method,CVNBot,Project,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Project.cs,ReadProjectDetails,Cyclomatic complexity of the method is 19
Complex Method,CVNBot,Project,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Project.cs,TranslateNamespace,Cyclomatic complexity of the method is 19
Complex Method,CVNBot,ProjectList,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\ProjectList.cs,AddNewProject,Cyclomatic complexity of the method is 15
Complex Method,CVNBot,RCReader,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\RCReader.cs,Rcirc_OnChannelMessage,Cyclomatic complexity of the method is 30
Long Parameter List,CVNBot,ListManager,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\ListManager.cs,AddUserToList,The method has 6 parameters. Parameters: name' project' type' adder' reason' expiry
Long Parameter List,CVNBot,ListManager,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\ListManager.cs,AddItemToList,The method has 5 parameters. Parameters: item' itemType' adder' reason' expiry
Long Parameter List,CVNBot,ListManager,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\ListManager.cs,AddPageToWatchlist,The method has 5 parameters. Parameters: item' project' adder' reason' expiry
Long Parameter List,CVNBot,Program,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Program.cs,Broadcast,The method has 6 parameters. Parameters: list' action' item' expiry' reason' adder
Long Parameter List,CVNBot,Project,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Project.cs,GenerateRegex,The method has 5 parameters. Parameters: mwMessageTitle' mwMessage' reqCount' destRegex' nonStrict
Long Statement,CVNBot,ListManager,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\ListManager.cs,InitDBConnection,The length of the statement  "                cmd.CommandText = "CREATE TABLE users ( name varchar(64)' project varchar(32)' type integer(2)' adder varchar(64)' reason varchar(80)' expiry integer(32) )"; " is 157.
Long Statement,CVNBot,ListManager,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\ListManager.cs,InitDBConnection,The length of the statement  "                cmd.CommandText = "CREATE TABLE watchlist ( article varchar(64)' project varchar(32)' adder varchar(64)' reason varchar(80)' expiry integer(32) )"; " is 147.
Long Statement,CVNBot,ListManager,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\ListManager.cs,InitDBConnection,The length of the statement  "                cmd.CommandText = "CREATE TABLE items ( item varchar(80)' itemtype integer(2)' adder varchar(64)' reason varchar(80)' expiry integer(32) )"; " is 140.
Long Statement,CVNBot,ListManager,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\ListManager.cs,InitDBConnection,The length of the statement  "            garbageCollector = new Timer(gcDelegate' null' 10000' 7200000); //Start first collection in 10 secs; then' every two hours " is 122.
Long Statement,CVNBot,ListManager,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\ListManager.cs,CollectGarbage,The length of the statement  "                        timcmd.CommandText = "DELETE FROM users WHERE ((expiry < '" + DateTime.Now.Ticks.ToString() + "') AND (expiry != '0'))"; " is 120.
Long Statement,CVNBot,ListManager,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\ListManager.cs,CollectGarbage,The length of the statement  "                        timcmd.CommandText = "DELETE FROM watchlist WHERE ((expiry < '" + DateTime.Now.Ticks.ToString() + "') AND (expiry != '0'))"; " is 124.
Long Statement,CVNBot,ListManager,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\ListManager.cs,CollectGarbage,The length of the statement  "                        timcmd.CommandText = "DELETE FROM items WHERE ((expiry < '" + DateTime.Now.Ticks.ToString() + "') AND (expiry != '0'))"; " is 120.
Long Statement,CVNBot,ListManager,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\ListManager.cs,ShowUserOnList,The length of the statement  "                + "' AND project = '' AND type = '6' AND ((expiry > '" + DateTime.Now.Ticks.ToString() + "') OR (expiry = '0')) LIMIT 1"; " is 121.
Long Statement,CVNBot,ListManager,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\ListManager.cs,ClassifyEditor,The length of the statement  "                    + "' AND project = '' AND type = '6' AND ((expiry > '" + DateTime.Now.Ticks.ToString() + "') OR (expiry = '0')) LIMIT 1"; " is 121.
Long Statement,CVNBot,Program,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Program.cs,Broadcast,The length of the statement  "            SendMessageF(SendType.Notice' config.broadcastChannel' bMsg.Replace(@"%C"' "\x03").Replace(@"%B"' "\x02")' Priority.High); " is 122.
Long Statement,CVNBot,Program,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Program.cs,BroadcastDD,The length of the statement  "            SendMessageF(SendType.Notice' config.broadcastChannel' bMsg.Replace(@"%C"' "\x03").Replace(@"%B"' "\x02")' Priority.High); " is 122.
Long Statement,CVNBot,Program,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Program.cs,ReactToRCEvent,The length of the statement  "            if (r.eventtype == RCEvent.EventType.newuser || r.eventtype == RCEvent.EventType.newuser2 || r.eventtype == RCEvent.EventType.autocreate) " is 137.
Long Statement,CVNBot,Program,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Program.cs,ReactToRCEvent,The length of the statement  "            if (r.eventtype == RCEvent.EventType.protect || r.eventtype == RCEvent.EventType.unprotect || r.eventtype == RCEvent.EventType.modifyprotect) " is 141.
Long Statement,CVNBot,Program,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Program.cs,ReactToRCEvent,The length of the statement  "                    attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.title.Split(new char[] { ':' }' 2)[1])); " is 147.
Long Statement,CVNBot,Project,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Project.cs,GetNamespaces,The length of the statement  "                snamespaces = CVNBotUtils.GetRawDocument(rooturl + "w/api.php?format=xml&action=query&meta=siteinfo&siprop=namespaces"); " is 120.
Long Statement,CVNBot,Project,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Project.cs,GetNamespaces,The length of the statement  "                namespacesLogline += "id["+namespacesNode.ChildNodes[i].Attributes["id"].Value + "]="+namespacesNode.ChildNodes[i].InnerText + "; "; " is 132.
Long Statement,CVNBot,RCReader,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\RCReader.cs,Rcirc_OnChannelMessage,The length of the statement  "            string strippedmsg = stripBold.Replace(stripColours.Replace(CVNBotUtils.ReplaceStrMax(e.Data.Message' '\x03'' '\x04'' 14)' "\x03")' ""); " is 136.
Long Statement,CVNBot,RCReader,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\RCReader.cs,Rcirc_OnChannelMessage,The length of the statement  "                // At the moment' fields[14] contains IRC colour codes. For plain edits' remove just the \x03's. For logs' remove using the regex. " is 130.
Long Statement,CVNBot,RCReader,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\RCReader.cs,Rcirc_OnChannelMessage,The length of the statement  "                            // > [[Special:Log/block]] reblock  * Yamla *  changed block settings for [[User:Jeb BushDid911]] (account creation blocked' email disabled' cannot edit own talk page) with an expiry time of indefinite: {{uw-ublock}} " is 216.
Long Statement,CVNBot,RCReader,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\RCReader.cs,Rcirc_OnChannelMessage,The length of the statement  "                            // > [[Special:Log/block]] reblock  * DeltaQuad *  changed block settings for [[User:208.111.64.0/19]] (anon. only' account creation blocked) with an expiry time of 06:21' February 2' 2019: {{colocationwebhost}} " is 211.
Long Statement,CVNBot,RCReader,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\RCReader.cs,Rcirc_OnChannelMessage,The length of the statement  "                                rce.blockLength = CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(mrm.Groups["item1"].Captures[0].Value); " is 129.
Long Statement,CVNBot,RCReader,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\RCReader.cs,Rcirc_OnChannelMessage,The length of the statement  "                                    rce.blockLength = CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(mm.Groups["item1"].Captures[0].Value); " is 128.
Complex Conditional,CVNBot,ListManager,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\ListManager.cs,AddUserToList,The conditional expression  "(originalType == UserType.anon)                  || (originalType == UserType.user)                  || (type == UserType.greylisted)                  || ((originalType == UserType.greylisted) && (type == UserType.blacklisted))"  is complex.
Complex Conditional,CVNBot,Program,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Program.cs,AddToGreylist,The conditional expression  "(userOffset == 1) || (userOffset == 4) || (userOffset == 3) || (userOffset == 6)"  is complex.
Complex Conditional,CVNBot,Program,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Program.cs,ReactToRCEvent,The conditional expression  "(config.feedFilterEventMove == 2) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0))"  is complex.
Complex Conditional,CVNBot,Program,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Program.cs,ReactToRCEvent,The conditional expression  "(uMsg == 5600) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0))"  is complex.
Complex Conditional,CVNBot,Program,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Program.cs,ReactToRCEvent,The conditional expression  "(uMsg == 5600) && (config.feedFilterEventUpload == 2) && ((userOffset == 3) || (userOffset == 4))"  is complex.
Complex Conditional,CVNBot,Program,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Program.cs,BotConfigMsg,The conditional expression  "name.StartsWith("bot") ||                      name == "description" ||                      name == "ircServerName" ||                      name.EndsWith("Channel") ||                      name.EndsWith("File") ||                      name.StartsWith("restart")"  is complex.
Empty Catch Block,CVNBot,Program,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Program.cs,Exit,The method has an empty catch block.
Empty Catch Block,CVNBot,RCReader,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\RCReader.cs,Rcirc_OnChannelMessage,The method has an empty catch block.
Empty Catch Block,CVNBot,RCReader,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\RCReader.cs,Rcirc_OnChannelMessage,The method has an empty catch block.
Empty Catch Block,CVNBot,RCReader,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\RCReader.cs,Rcirc_OnChannelMessage,The method has an empty catch block.
Empty Catch Block,CVNBot,RCReader,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\RCReader.cs,Rcirc_OnChannelMessage,The method has an empty catch block.
Empty Catch Block,CVNBot,RCReader,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\RCReader.cs,Rcirc_OnChannelMessage,The method has an empty catch block.
Empty Catch Block,CVNBot,RCReader,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\RCReader.cs,Rcirc_OnChannelMessage,The method has an empty catch block.
Empty Catch Block,CVNBot,RCReader,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\RCReader.cs,Rcirc_OnChannelMessage,The method has an empty catch block.
Empty Catch Block,CVNBot,RCReader,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\RCReader.cs,Rcirc_OnChannelMessage,The method has an empty catch block.
Empty Catch Block,CVNBot,RCReader,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\RCReader.cs,Rcirc_OnChannelMessage,The method has an empty catch block.
Empty Catch Block,CVNBot,RCReader,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\RCReader.cs,Rcirc_OnChannelMessage,The method has an empty catch block.
Empty Catch Block,CVNBot,RCReader,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\RCReader.cs,Rcirc_OnChannelMessage,The method has an empty catch block.
Magic Number,CVNBot,CVNBotUtils,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\CVNBotUtils.cs,ParseDateTimeLength,The following statement contains a magic number: switch (parseStr)              {                  case "indefinite":                  case "infinite":                      return 0;                  case "tomorrow":                      return 24 * 3600;              }
Magic Number,CVNBot,CVNBotUtils,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\CVNBotUtils.cs,ParseDateTimeLength,The following statement contains a magic number: switch (parseStr)              {                  case "indefinite":                  case "infinite":                      return 0;                  case "tomorrow":                      return 24 * 3600;              }
Magic Number,CVNBot,CVNBotUtils,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\CVNBotUtils.cs,ParseDateTimeLength,The following statement contains a magic number: string unit = m.Groups[2].Captures[0].Value;
Magic Number,CVNBot,CVNBotUtils,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\CVNBotUtils.cs,ParseDateTimeLength,The following statement contains a magic number: switch (unit)                  {                      case "year":                          sumSeconds += Convert.ToInt32(value) * 8760 * 3600; // 365 days                          break;                      case "month":                          sumSeconds += Convert.ToInt32(value) * 732 * 3600; // 30.5 days                          break;                      case "fortnight":                          sumSeconds += Convert.ToInt32(value) * 336 * 3600; // 14 days                          break;                      case "week":                          sumSeconds += Convert.ToInt32(value) * 168 * 3600; // 7 days                          break;                      case "day":                          sumSeconds += Convert.ToInt32(value) * 24 * 3600; // 24 hours                          break;                      case "hour":                          sumSeconds += Convert.ToInt32(value) * 3600; // 1 hour                          break;                      case "minute":                      case "min":                          sumSeconds += Convert.ToInt32(value) * 60; // 60 seconds                          break;                      case "second":                      case "sec":                          sumSeconds += Convert.ToInt32(value); // One second                          break;                  }
Magic Number,CVNBot,CVNBotUtils,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\CVNBotUtils.cs,ParseDateTimeLength,The following statement contains a magic number: switch (unit)                  {                      case "year":                          sumSeconds += Convert.ToInt32(value) * 8760 * 3600; // 365 days                          break;                      case "month":                          sumSeconds += Convert.ToInt32(value) * 732 * 3600; // 30.5 days                          break;                      case "fortnight":                          sumSeconds += Convert.ToInt32(value) * 336 * 3600; // 14 days                          break;                      case "week":                          sumSeconds += Convert.ToInt32(value) * 168 * 3600; // 7 days                          break;                      case "day":                          sumSeconds += Convert.ToInt32(value) * 24 * 3600; // 24 hours                          break;                      case "hour":                          sumSeconds += Convert.ToInt32(value) * 3600; // 1 hour                          break;                      case "minute":                      case "min":                          sumSeconds += Convert.ToInt32(value) * 60; // 60 seconds                          break;                      case "second":                      case "sec":                          sumSeconds += Convert.ToInt32(value); // One second                          break;                  }
Magic Number,CVNBot,CVNBotUtils,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\CVNBotUtils.cs,ParseDateTimeLength,The following statement contains a magic number: switch (unit)                  {                      case "year":                          sumSeconds += Convert.ToInt32(value) * 8760 * 3600; // 365 days                          break;                      case "month":                          sumSeconds += Convert.ToInt32(value) * 732 * 3600; // 30.5 days                          break;                      case "fortnight":                          sumSeconds += Convert.ToInt32(value) * 336 * 3600; // 14 days                          break;                      case "week":                          sumSeconds += Convert.ToInt32(value) * 168 * 3600; // 7 days                          break;                      case "day":                          sumSeconds += Convert.ToInt32(value) * 24 * 3600; // 24 hours                          break;                      case "hour":                          sumSeconds += Convert.ToInt32(value) * 3600; // 1 hour                          break;                      case "minute":                      case "min":                          sumSeconds += Convert.ToInt32(value) * 60; // 60 seconds                          break;                      case "second":                      case "sec":                          sumSeconds += Convert.ToInt32(value); // One second                          break;                  }
Magic Number,CVNBot,CVNBotUtils,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\CVNBotUtils.cs,ParseDateTimeLength,The following statement contains a magic number: switch (unit)                  {                      case "year":                          sumSeconds += Convert.ToInt32(value) * 8760 * 3600; // 365 days                          break;                      case "month":                          sumSeconds += Convert.ToInt32(value) * 732 * 3600; // 30.5 days                          break;                      case "fortnight":                          sumSeconds += Convert.ToInt32(value) * 336 * 3600; // 14 days                          break;                      case "week":                          sumSeconds += Convert.ToInt32(value) * 168 * 3600; // 7 days                          break;                      case "day":                          sumSeconds += Convert.ToInt32(value) * 24 * 3600; // 24 hours                          break;                      case "hour":                          sumSeconds += Convert.ToInt32(value) * 3600; // 1 hour                          break;                      case "minute":                      case "min":                          sumSeconds += Convert.ToInt32(value) * 60; // 60 seconds                          break;                      case "second":                      case "sec":                          sumSeconds += Convert.ToInt32(value); // One second                          break;                  }
Magic Number,CVNBot,CVNBotUtils,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\CVNBotUtils.cs,ParseDateTimeLength,The following statement contains a magic number: switch (unit)                  {                      case "year":                          sumSeconds += Convert.ToInt32(value) * 8760 * 3600; // 365 days                          break;                      case "month":                          sumSeconds += Convert.ToInt32(value) * 732 * 3600; // 30.5 days                          break;                      case "fortnight":                          sumSeconds += Convert.ToInt32(value) * 336 * 3600; // 14 days                          break;                      case "week":                          sumSeconds += Convert.ToInt32(value) * 168 * 3600; // 7 days                          break;                      case "day":                          sumSeconds += Convert.ToInt32(value) * 24 * 3600; // 24 hours                          break;                      case "hour":                          sumSeconds += Convert.ToInt32(value) * 3600; // 1 hour                          break;                      case "minute":                      case "min":                          sumSeconds += Convert.ToInt32(value) * 60; // 60 seconds                          break;                      case "second":                      case "sec":                          sumSeconds += Convert.ToInt32(value); // One second                          break;                  }
Magic Number,CVNBot,CVNBotUtils,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\CVNBotUtils.cs,ParseDateTimeLength,The following statement contains a magic number: switch (unit)                  {                      case "year":                          sumSeconds += Convert.ToInt32(value) * 8760 * 3600; // 365 days                          break;                      case "month":                          sumSeconds += Convert.ToInt32(value) * 732 * 3600; // 30.5 days                          break;                      case "fortnight":                          sumSeconds += Convert.ToInt32(value) * 336 * 3600; // 14 days                          break;                      case "week":                          sumSeconds += Convert.ToInt32(value) * 168 * 3600; // 7 days                          break;                      case "day":                          sumSeconds += Convert.ToInt32(value) * 24 * 3600; // 24 hours                          break;                      case "hour":                          sumSeconds += Convert.ToInt32(value) * 3600; // 1 hour                          break;                      case "minute":                      case "min":                          sumSeconds += Convert.ToInt32(value) * 60; // 60 seconds                          break;                      case "second":                      case "sec":                          sumSeconds += Convert.ToInt32(value); // One second                          break;                  }
Magic Number,CVNBot,CVNBotUtils,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\CVNBotUtils.cs,ParseDateTimeLength,The following statement contains a magic number: switch (unit)                  {                      case "year":                          sumSeconds += Convert.ToInt32(value) * 8760 * 3600; // 365 days                          break;                      case "month":                          sumSeconds += Convert.ToInt32(value) * 732 * 3600; // 30.5 days                          break;                      case "fortnight":                          sumSeconds += Convert.ToInt32(value) * 336 * 3600; // 14 days                          break;                      case "week":                          sumSeconds += Convert.ToInt32(value) * 168 * 3600; // 7 days                          break;                      case "day":                          sumSeconds += Convert.ToInt32(value) * 24 * 3600; // 24 hours                          break;                      case "hour":                          sumSeconds += Convert.ToInt32(value) * 3600; // 1 hour                          break;                      case "minute":                      case "min":                          sumSeconds += Convert.ToInt32(value) * 60; // 60 seconds                          break;                      case "second":                      case "sec":                          sumSeconds += Convert.ToInt32(value); // One second                          break;                  }
Magic Number,CVNBot,CVNBotUtils,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\CVNBotUtils.cs,ParseDateTimeLength,The following statement contains a magic number: switch (unit)                  {                      case "year":                          sumSeconds += Convert.ToInt32(value) * 8760 * 3600; // 365 days                          break;                      case "month":                          sumSeconds += Convert.ToInt32(value) * 732 * 3600; // 30.5 days                          break;                      case "fortnight":                          sumSeconds += Convert.ToInt32(value) * 336 * 3600; // 14 days                          break;                      case "week":                          sumSeconds += Convert.ToInt32(value) * 168 * 3600; // 7 days                          break;                      case "day":                          sumSeconds += Convert.ToInt32(value) * 24 * 3600; // 24 hours                          break;                      case "hour":                          sumSeconds += Convert.ToInt32(value) * 3600; // 1 hour                          break;                      case "minute":                      case "min":                          sumSeconds += Convert.ToInt32(value) * 60; // 60 seconds                          break;                      case "second":                      case "sec":                          sumSeconds += Convert.ToInt32(value); // One second                          break;                  }
Magic Number,CVNBot,CVNBotUtils,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\CVNBotUtils.cs,ParseDateTimeLength,The following statement contains a magic number: switch (unit)                  {                      case "year":                          sumSeconds += Convert.ToInt32(value) * 8760 * 3600; // 365 days                          break;                      case "month":                          sumSeconds += Convert.ToInt32(value) * 732 * 3600; // 30.5 days                          break;                      case "fortnight":                          sumSeconds += Convert.ToInt32(value) * 336 * 3600; // 14 days                          break;                      case "week":                          sumSeconds += Convert.ToInt32(value) * 168 * 3600; // 7 days                          break;                      case "day":                          sumSeconds += Convert.ToInt32(value) * 24 * 3600; // 24 hours                          break;                      case "hour":                          sumSeconds += Convert.ToInt32(value) * 3600; // 1 hour                          break;                      case "minute":                      case "min":                          sumSeconds += Convert.ToInt32(value) * 60; // 60 seconds                          break;                      case "second":                      case "sec":                          sumSeconds += Convert.ToInt32(value); // One second                          break;                  }
Magic Number,CVNBot,CVNBotUtils,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\CVNBotUtils.cs,ParseDateTimeLength,The following statement contains a magic number: switch (unit)                  {                      case "year":                          sumSeconds += Convert.ToInt32(value) * 8760 * 3600; // 365 days                          break;                      case "month":                          sumSeconds += Convert.ToInt32(value) * 732 * 3600; // 30.5 days                          break;                      case "fortnight":                          sumSeconds += Convert.ToInt32(value) * 336 * 3600; // 14 days                          break;                      case "week":                          sumSeconds += Convert.ToInt32(value) * 168 * 3600; // 7 days                          break;                      case "day":                          sumSeconds += Convert.ToInt32(value) * 24 * 3600; // 24 hours                          break;                      case "hour":                          sumSeconds += Convert.ToInt32(value) * 3600; // 1 hour                          break;                      case "minute":                      case "min":                          sumSeconds += Convert.ToInt32(value) * 60; // 60 seconds                          break;                      case "second":                      case "sec":                          sumSeconds += Convert.ToInt32(value); // One second                          break;                  }
Magic Number,CVNBot,CVNBotUtils,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\CVNBotUtils.cs,ParseDateTimeLength,The following statement contains a magic number: switch (unit)                  {                      case "year":                          sumSeconds += Convert.ToInt32(value) * 8760 * 3600; // 365 days                          break;                      case "month":                          sumSeconds += Convert.ToInt32(value) * 732 * 3600; // 30.5 days                          break;                      case "fortnight":                          sumSeconds += Convert.ToInt32(value) * 336 * 3600; // 14 days                          break;                      case "week":                          sumSeconds += Convert.ToInt32(value) * 168 * 3600; // 7 days                          break;                      case "day":                          sumSeconds += Convert.ToInt32(value) * 24 * 3600; // 24 hours                          break;                      case "hour":                          sumSeconds += Convert.ToInt32(value) * 3600; // 1 hour                          break;                      case "minute":                      case "min":                          sumSeconds += Convert.ToInt32(value) * 60; // 60 seconds                          break;                      case "second":                      case "sec":                          sumSeconds += Convert.ToInt32(value); // One second                          break;                  }
Magic Number,CVNBot,CVNBotUtils,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\CVNBotUtils.cs,ParseDateTimeLength,The following statement contains a magic number: switch (unit)                  {                      case "year":                          sumSeconds += Convert.ToInt32(value) * 8760 * 3600; // 365 days                          break;                      case "month":                          sumSeconds += Convert.ToInt32(value) * 732 * 3600; // 30.5 days                          break;                      case "fortnight":                          sumSeconds += Convert.ToInt32(value) * 336 * 3600; // 14 days                          break;                      case "week":                          sumSeconds += Convert.ToInt32(value) * 168 * 3600; // 7 days                          break;                      case "day":                          sumSeconds += Convert.ToInt32(value) * 24 * 3600; // 24 hours                          break;                      case "hour":                          sumSeconds += Convert.ToInt32(value) * 3600; // 1 hour                          break;                      case "minute":                      case "min":                          sumSeconds += Convert.ToInt32(value) * 60; // 60 seconds                          break;                      case "second":                      case "sec":                          sumSeconds += Convert.ToInt32(value); // One second                          break;                  }
Magic Number,CVNBot,ListManager,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\ListManager.cs,InitDBConnection,The following statement contains a magic number: garbageCollector = new Timer(gcDelegate' null' 10000' 7200000);
Magic Number,CVNBot,ListManager,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\ListManager.cs,InitDBConnection,The following statement contains a magic number: garbageCollector = new Timer(gcDelegate' null' 10000' 7200000);
Magic Number,CVNBot,ListManager,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\ListManager.cs,FriendlyList,The following statement contains a magic number: int msgCode = 17000 + listType;
Magic Number,CVNBot,ListManager,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\ListManager.cs,AddUserToList,The following statement contains a magic number: return Program.GetFormatMessage(16104' ShowUserOnList(name' project));
Magic Number,CVNBot,ListManager,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\ListManager.cs,AddUserToList,The following statement contains a magic number: return Program.GetFormatMessage(16103' ShowUserOnList(name' project));
Magic Number,CVNBot,ListManager,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\ListManager.cs,AddUserToList,The following statement contains a magic number: return Program.GetFormatMessage(16102' name' FriendlyList(originalType)' FriendlyList(type));
Magic Number,CVNBot,ListManager,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\ListManager.cs,DelUserFromList,The following statement contains a magic number: return Program.GetFormatMessage(16009' name' FriendlyProject(project)' FriendlyList(uType));
Magic Number,CVNBot,ListManager,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\ListManager.cs,DelUserFromList,The following statement contains a magic number: return Program.GetFormatMessage(16101' name' FriendlyProject(project)' FriendlyList(originalType));
Magic Number,CVNBot,ListManager,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\ListManager.cs,ShowUserOnList,The following statement contains a magic number: string res = Program.GetFormatMessage(16004' username' project' FriendlyList(idr.GetInt32(0))                                  ' idr.GetString(1)' ParseExpiryDate(idr.GetInt64(3))' idr.GetString(2));
Magic Number,CVNBot,ListManager,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\ListManager.cs,ShowUserOnList,The following statement contains a magic number: string res = Program.GetFormatMessage(16004' username' project' FriendlyList(idr.GetInt32(0))                                  ' idr.GetString(1)' ParseExpiryDate(idr.GetInt64(3))' idr.GetString(2));
Magic Number,CVNBot,ListManager,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\ListManager.cs,ShowUserOnList,The following statement contains a magic number: string res = Program.GetFormatMessage(16004' username' project' FriendlyList(idr.GetInt32(0))                                  ' idr.GetString(1)' ParseExpiryDate(idr.GetInt64(3))' idr.GetString(2));
Magic Number,CVNBot,ListManager,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\ListManager.cs,ShowUserOnList,The following statement contains a magic number: string result2 = Program.GetFormatMessage(16106' username                          ' ParseExpiryDate(idr.GetInt64(1))' idr.GetString(0));
Magic Number,CVNBot,ListManager,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\ListManager.cs,ShowUserOnList,The following statement contains a magic number: string result = Program.GetFormatMessage(16004' username' FriendlyProject("")' FriendlyList(idr.GetInt32(0))                                  ' idr.GetString(1)' ParseExpiryDate(idr.GetInt64(3))' idr.GetString(2));
Magic Number,CVNBot,ListManager,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\ListManager.cs,ShowUserOnList,The following statement contains a magic number: string result = Program.GetFormatMessage(16004' username' FriendlyProject("")' FriendlyList(idr.GetInt32(0))                                  ' idr.GetString(1)' ParseExpiryDate(idr.GetInt64(3))' idr.GetString(2));
Magic Number,CVNBot,ListManager,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\ListManager.cs,ShowUserOnList,The following statement contains a magic number: string result = Program.GetFormatMessage(16004' username' FriendlyProject("")' FriendlyList(idr.GetInt32(0))                                  ' idr.GetString(1)' ParseExpiryDate(idr.GetInt64(3))' idr.GetString(2));
Magic Number,CVNBot,ListManager,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\ListManager.cs,ShowUserOnList,The following statement contains a magic number: return Program.GetFormatMessage(16005' username);
Magic Number,CVNBot,ListManager,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\ListManager.cs,ShowUserOnList,The following statement contains a magic number: return Program.GetFormatMessage(16006' username);
Magic Number,CVNBot,ListManager,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\ListManager.cs,AddItemToList,The following statement contains a magic number: return Program.GetFormatMessage(16104' ShowItemOnList(item' itemType));
Magic Number,CVNBot,ListManager,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\ListManager.cs,AddItemToList,The following statement contains a magic number: return Program.GetFormatMessage(16103' ShowItemOnList(item' itemType));
Magic Number,CVNBot,ListManager,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\ListManager.cs,ShowItemOnList,The following statement contains a magic number: string result = Program.GetFormatMessage(16007' item' FriendlyList(itemType)' idr.GetString(0)'                          ParseExpiryDate(idr.GetInt64(2))' idr.GetString(1));
Magic Number,CVNBot,ListManager,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\ListManager.cs,ShowItemOnList,The following statement contains a magic number: string result = Program.GetFormatMessage(16007' item' FriendlyList(itemType)' idr.GetString(0)'                          ParseExpiryDate(idr.GetInt64(2))' idr.GetString(1));
Magic Number,CVNBot,ListManager,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\ListManager.cs,ShowItemOnList,The following statement contains a magic number: return Program.GetFormatMessage(16008' item' FriendlyList(itemType));
Magic Number,CVNBot,ListManager,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\ListManager.cs,DelItemFromList,The following statement contains a magic number: return Program.GetFormatMessage(16105' item' FriendlyList(itemType));
Magic Number,CVNBot,ListManager,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\ListManager.cs,DelItemFromList,The following statement contains a magic number: return Program.GetFormatMessage(16008' item' FriendlyList(itemType));
Magic Number,CVNBot,ListManager,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\ListManager.cs,AddPageToWatchlist,The following statement contains a magic number: return Program.GetFormatMessage(16104' ShowPageOnWatchlist(item' project));
Magic Number,CVNBot,ListManager,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\ListManager.cs,AddPageToWatchlist,The following statement contains a magic number: return Program.GetFormatMessage(16103' ShowPageOnWatchlist(item' project));
Magic Number,CVNBot,ListManager,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\ListManager.cs,ShowPageOnWatchlist,The following statement contains a magic number: string result = Program.GetFormatMessage(16004' item' FriendlyProject(project)' FriendlyList(10)'                              idr.GetString(0)' ParseExpiryDate(idr.GetInt64(2))' idr.GetString(1));
Magic Number,CVNBot,ListManager,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\ListManager.cs,ShowPageOnWatchlist,The following statement contains a magic number: string result = Program.GetFormatMessage(16004' item' FriendlyProject(project)' FriendlyList(10)'                              idr.GetString(0)' ParseExpiryDate(idr.GetInt64(2))' idr.GetString(1));
Magic Number,CVNBot,ListManager,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\ListManager.cs,ShowPageOnWatchlist,The following statement contains a magic number: string result = Program.GetFormatMessage(16004' item' FriendlyProject(project)' FriendlyList(10)'                              idr.GetString(0)' ParseExpiryDate(idr.GetInt64(2))' idr.GetString(1));
Magic Number,CVNBot,ListManager,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\ListManager.cs,ShowPageOnWatchlist,The following statement contains a magic number: return Program.GetFormatMessage(16009' item' FriendlyProject(project)' FriendlyList(10));
Magic Number,CVNBot,ListManager,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\ListManager.cs,ShowPageOnWatchlist,The following statement contains a magic number: return Program.GetFormatMessage(16009' item' FriendlyProject(project)' FriendlyList(10));
Magic Number,CVNBot,ListManager,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\ListManager.cs,DelPageFromWatchlist,The following statement contains a magic number: return Program.GetFormatMessage(16101' item' FriendlyProject(project)' FriendlyList(10));
Magic Number,CVNBot,ListManager,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\ListManager.cs,DelPageFromWatchlist,The following statement contains a magic number: return Program.GetFormatMessage(16101' item' FriendlyProject(project)' FriendlyList(10));
Magic Number,CVNBot,ListManager,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\ListManager.cs,DelPageFromWatchlist,The following statement contains a magic number: return Program.GetFormatMessage(16009' item' FriendlyProject(project)' FriendlyList(10));
Magic Number,CVNBot,ListManager,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\ListManager.cs,DelPageFromWatchlist,The following statement contains a magic number: return Program.GetFormatMessage(16009' item' FriendlyProject(project)' FriendlyList(10));
Magic Number,CVNBot,ListManager,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\ListManager.cs,HandleListCommand,The following statement contains a magic number: len = 7776000;
Magic Number,CVNBot,ListManager,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\ListManager.cs,HandleListCommand,The following statement contains a magic number: len = Convert.ToInt32(groups["len"].Captures[0].Value) * 3600;
Magic Number,CVNBot,ListManager,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\ListManager.cs,HandleListCommand,The following statement contains a magic number: switch (cmd)                      {                          case "add":                              switch (listtype)                              {                                  case 0: //Whitelist                                      Program.Broadcast("WL"' "ADD"' item' len' reason' user);                                      return AddUserToList(item' ""' UserType.whitelisted' user' reason' len);                                  case 1: //Blacklist                                      Program.Broadcast("BL"' "ADD"' item' len' reason' user);                                      return AddUserToList(item' ""' UserType.blacklisted' user' reason' len);                                  case 6: //Greylist                                      return "You cannot directly add users to the greylist";                                  case 2: //Adminlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return AddUserToList(item' project' UserType.admin' user' reason' len);                                  case 5: //Botlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return AddUserToList(item' project' UserType.bot' user' reason' len);                                  case 10: //Watchlist                                      if (project == "")                                          Program.Broadcast("CVP"' "ADD"' item' len' reason' user);                                      return AddPageToWatchlist(item' project' user' reason' len);                                  case 11: //BNU                                      Program.Broadcast("BNU"' "ADD"' item' len' reason' user);                                      return AddItemToList(item' 11' user' reason' len);                                  case 12: //BNA                                      Program.Broadcast("BNA"' "ADD"' item' len' reason' user);                                      return AddItemToList(item' 12' user' reason' len);                                  case 20: //BES                                      Program.Broadcast("BES"' "ADD"' item' len' reason' user);                                      return AddItemToList(item' 20' user' reason' len);                                  default:                                      return ""; //Should never be called' but compiler complains otherwise                              }                          case "del":                              switch (listtype)                              {                                  case 0: //Whitelist                                      Program.Broadcast("WL"' "DEL"' item' 0' reason' user);                                      return DelUserFromList(item' ""' UserType.whitelisted);                                  case 1: //Blacklist                                      Program.Broadcast("BL"' "DEL"' item' 0' reason' user);                                      return DelUserFromList(item' ""' UserType.blacklisted);                                  case 6: //Greylist                                      Program.Broadcast("GL"' "DEL"' item' 0' reason' user);                                      return DelUserFromList(item' ""' UserType.greylisted);                                  case 2: //Adminlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return DelUserFromList(item' project' UserType.admin);                                  case 5: //Botlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return DelUserFromList(item' project' UserType.bot);                                  case 10: //Watchlist                                      if (project == "")                                          Program.Broadcast("CVP"' "DEL"' item' len' reason' user);                                      return DelPageFromWatchlist(item' project);                                  case 11: //BNU                                      Program.Broadcast("BNU"' "DEL"' item' 0' reason' user);                                      return DelItemFromList(item' 11);                                  case 12: //BNA                                      Program.Broadcast("BNA"' "DEL"' item' 0' reason' user);                                      return DelItemFromList(item' 12);                                  case 20: //BES                                      Program.Broadcast("BES"' "DEL"' item' 0' reason' user);                                      return DelItemFromList(item' 20);                                  default:                                      return ""; //Should never be called' but compiler complains otherwise                              }                          case "show":                              switch (listtype)                              {                                  case 0: //Whitelist                                  case 1: //Blacklist                                  case 6: //Greylist                                      return ShowUserOnList(item' "");                                  case 2: //Adminlist                                  case 5: //Botlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return ShowUserOnList(item' project);                                  case 10: //Watchlist                                      return ShowPageOnWatchlist(item' project);                                  case 11: //BNU                                      return ShowItemOnList(item' 11);                                  case 12: //BNA                                      return ShowItemOnList(item' 12);                                  case 20: //BES                                      return ShowItemOnList(item' 20);                                  default:                                      return ""; //Should never be called' but compiler complains otherwise                              }                          case "test":                              switch (listtype)                              {                                  case 11: //BNU                                      return TestItemOnList(item' 11);                                  case 12: //BNA                                      return TestItemOnList(item' 12);                                  case 20: //BES                                      return TestItemOnList(item' 20);                                  default:                                      return (string)Program.msgs["20002"];                              }                          default:                              return ""; //Should never be called' but compiler complains otherwise                      }
Magic Number,CVNBot,ListManager,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\ListManager.cs,HandleListCommand,The following statement contains a magic number: switch (cmd)                      {                          case "add":                              switch (listtype)                              {                                  case 0: //Whitelist                                      Program.Broadcast("WL"' "ADD"' item' len' reason' user);                                      return AddUserToList(item' ""' UserType.whitelisted' user' reason' len);                                  case 1: //Blacklist                                      Program.Broadcast("BL"' "ADD"' item' len' reason' user);                                      return AddUserToList(item' ""' UserType.blacklisted' user' reason' len);                                  case 6: //Greylist                                      return "You cannot directly add users to the greylist";                                  case 2: //Adminlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return AddUserToList(item' project' UserType.admin' user' reason' len);                                  case 5: //Botlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return AddUserToList(item' project' UserType.bot' user' reason' len);                                  case 10: //Watchlist                                      if (project == "")                                          Program.Broadcast("CVP"' "ADD"' item' len' reason' user);                                      return AddPageToWatchlist(item' project' user' reason' len);                                  case 11: //BNU                                      Program.Broadcast("BNU"' "ADD"' item' len' reason' user);                                      return AddItemToList(item' 11' user' reason' len);                                  case 12: //BNA                                      Program.Broadcast("BNA"' "ADD"' item' len' reason' user);                                      return AddItemToList(item' 12' user' reason' len);                                  case 20: //BES                                      Program.Broadcast("BES"' "ADD"' item' len' reason' user);                                      return AddItemToList(item' 20' user' reason' len);                                  default:                                      return ""; //Should never be called' but compiler complains otherwise                              }                          case "del":                              switch (listtype)                              {                                  case 0: //Whitelist                                      Program.Broadcast("WL"' "DEL"' item' 0' reason' user);                                      return DelUserFromList(item' ""' UserType.whitelisted);                                  case 1: //Blacklist                                      Program.Broadcast("BL"' "DEL"' item' 0' reason' user);                                      return DelUserFromList(item' ""' UserType.blacklisted);                                  case 6: //Greylist                                      Program.Broadcast("GL"' "DEL"' item' 0' reason' user);                                      return DelUserFromList(item' ""' UserType.greylisted);                                  case 2: //Adminlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return DelUserFromList(item' project' UserType.admin);                                  case 5: //Botlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return DelUserFromList(item' project' UserType.bot);                                  case 10: //Watchlist                                      if (project == "")                                          Program.Broadcast("CVP"' "DEL"' item' len' reason' user);                                      return DelPageFromWatchlist(item' project);                                  case 11: //BNU                                      Program.Broadcast("BNU"' "DEL"' item' 0' reason' user);                                      return DelItemFromList(item' 11);                                  case 12: //BNA                                      Program.Broadcast("BNA"' "DEL"' item' 0' reason' user);                                      return DelItemFromList(item' 12);                                  case 20: //BES                                      Program.Broadcast("BES"' "DEL"' item' 0' reason' user);                                      return DelItemFromList(item' 20);                                  default:                                      return ""; //Should never be called' but compiler complains otherwise                              }                          case "show":                              switch (listtype)                              {                                  case 0: //Whitelist                                  case 1: //Blacklist                                  case 6: //Greylist                                      return ShowUserOnList(item' "");                                  case 2: //Adminlist                                  case 5: //Botlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return ShowUserOnList(item' project);                                  case 10: //Watchlist                                      return ShowPageOnWatchlist(item' project);                                  case 11: //BNU                                      return ShowItemOnList(item' 11);                                  case 12: //BNA                                      return ShowItemOnList(item' 12);                                  case 20: //BES                                      return ShowItemOnList(item' 20);                                  default:                                      return ""; //Should never be called' but compiler complains otherwise                              }                          case "test":                              switch (listtype)                              {                                  case 11: //BNU                                      return TestItemOnList(item' 11);                                  case 12: //BNA                                      return TestItemOnList(item' 12);                                  case 20: //BES                                      return TestItemOnList(item' 20);                                  default:                                      return (string)Program.msgs["20002"];                              }                          default:                              return ""; //Should never be called' but compiler complains otherwise                      }
Magic Number,CVNBot,ListManager,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\ListManager.cs,HandleListCommand,The following statement contains a magic number: switch (cmd)                      {                          case "add":                              switch (listtype)                              {                                  case 0: //Whitelist                                      Program.Broadcast("WL"' "ADD"' item' len' reason' user);                                      return AddUserToList(item' ""' UserType.whitelisted' user' reason' len);                                  case 1: //Blacklist                                      Program.Broadcast("BL"' "ADD"' item' len' reason' user);                                      return AddUserToList(item' ""' UserType.blacklisted' user' reason' len);                                  case 6: //Greylist                                      return "You cannot directly add users to the greylist";                                  case 2: //Adminlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return AddUserToList(item' project' UserType.admin' user' reason' len);                                  case 5: //Botlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return AddUserToList(item' project' UserType.bot' user' reason' len);                                  case 10: //Watchlist                                      if (project == "")                                          Program.Broadcast("CVP"' "ADD"' item' len' reason' user);                                      return AddPageToWatchlist(item' project' user' reason' len);                                  case 11: //BNU                                      Program.Broadcast("BNU"' "ADD"' item' len' reason' user);                                      return AddItemToList(item' 11' user' reason' len);                                  case 12: //BNA                                      Program.Broadcast("BNA"' "ADD"' item' len' reason' user);                                      return AddItemToList(item' 12' user' reason' len);                                  case 20: //BES                                      Program.Broadcast("BES"' "ADD"' item' len' reason' user);                                      return AddItemToList(item' 20' user' reason' len);                                  default:                                      return ""; //Should never be called' but compiler complains otherwise                              }                          case "del":                              switch (listtype)                              {                                  case 0: //Whitelist                                      Program.Broadcast("WL"' "DEL"' item' 0' reason' user);                                      return DelUserFromList(item' ""' UserType.whitelisted);                                  case 1: //Blacklist                                      Program.Broadcast("BL"' "DEL"' item' 0' reason' user);                                      return DelUserFromList(item' ""' UserType.blacklisted);                                  case 6: //Greylist                                      Program.Broadcast("GL"' "DEL"' item' 0' reason' user);                                      return DelUserFromList(item' ""' UserType.greylisted);                                  case 2: //Adminlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return DelUserFromList(item' project' UserType.admin);                                  case 5: //Botlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return DelUserFromList(item' project' UserType.bot);                                  case 10: //Watchlist                                      if (project == "")                                          Program.Broadcast("CVP"' "DEL"' item' len' reason' user);                                      return DelPageFromWatchlist(item' project);                                  case 11: //BNU                                      Program.Broadcast("BNU"' "DEL"' item' 0' reason' user);                                      return DelItemFromList(item' 11);                                  case 12: //BNA                                      Program.Broadcast("BNA"' "DEL"' item' 0' reason' user);                                      return DelItemFromList(item' 12);                                  case 20: //BES                                      Program.Broadcast("BES"' "DEL"' item' 0' reason' user);                                      return DelItemFromList(item' 20);                                  default:                                      return ""; //Should never be called' but compiler complains otherwise                              }                          case "show":                              switch (listtype)                              {                                  case 0: //Whitelist                                  case 1: //Blacklist                                  case 6: //Greylist                                      return ShowUserOnList(item' "");                                  case 2: //Adminlist                                  case 5: //Botlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return ShowUserOnList(item' project);                                  case 10: //Watchlist                                      return ShowPageOnWatchlist(item' project);                                  case 11: //BNU                                      return ShowItemOnList(item' 11);                                  case 12: //BNA                                      return ShowItemOnList(item' 12);                                  case 20: //BES                                      return ShowItemOnList(item' 20);                                  default:                                      return ""; //Should never be called' but compiler complains otherwise                              }                          case "test":                              switch (listtype)                              {                                  case 11: //BNU                                      return TestItemOnList(item' 11);                                  case 12: //BNA                                      return TestItemOnList(item' 12);                                  case 20: //BES                                      return TestItemOnList(item' 20);                                  default:                                      return (string)Program.msgs["20002"];                              }                          default:                              return ""; //Should never be called' but compiler complains otherwise                      }
Magic Number,CVNBot,ListManager,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\ListManager.cs,HandleListCommand,The following statement contains a magic number: switch (cmd)                      {                          case "add":                              switch (listtype)                              {                                  case 0: //Whitelist                                      Program.Broadcast("WL"' "ADD"' item' len' reason' user);                                      return AddUserToList(item' ""' UserType.whitelisted' user' reason' len);                                  case 1: //Blacklist                                      Program.Broadcast("BL"' "ADD"' item' len' reason' user);                                      return AddUserToList(item' ""' UserType.blacklisted' user' reason' len);                                  case 6: //Greylist                                      return "You cannot directly add users to the greylist";                                  case 2: //Adminlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return AddUserToList(item' project' UserType.admin' user' reason' len);                                  case 5: //Botlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return AddUserToList(item' project' UserType.bot' user' reason' len);                                  case 10: //Watchlist                                      if (project == "")                                          Program.Broadcast("CVP"' "ADD"' item' len' reason' user);                                      return AddPageToWatchlist(item' project' user' reason' len);                                  case 11: //BNU                                      Program.Broadcast("BNU"' "ADD"' item' len' reason' user);                                      return AddItemToList(item' 11' user' reason' len);                                  case 12: //BNA                                      Program.Broadcast("BNA"' "ADD"' item' len' reason' user);                                      return AddItemToList(item' 12' user' reason' len);                                  case 20: //BES                                      Program.Broadcast("BES"' "ADD"' item' len' reason' user);                                      return AddItemToList(item' 20' user' reason' len);                                  default:                                      return ""; //Should never be called' but compiler complains otherwise                              }                          case "del":                              switch (listtype)                              {                                  case 0: //Whitelist                                      Program.Broadcast("WL"' "DEL"' item' 0' reason' user);                                      return DelUserFromList(item' ""' UserType.whitelisted);                                  case 1: //Blacklist                                      Program.Broadcast("BL"' "DEL"' item' 0' reason' user);                                      return DelUserFromList(item' ""' UserType.blacklisted);                                  case 6: //Greylist                                      Program.Broadcast("GL"' "DEL"' item' 0' reason' user);                                      return DelUserFromList(item' ""' UserType.greylisted);                                  case 2: //Adminlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return DelUserFromList(item' project' UserType.admin);                                  case 5: //Botlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return DelUserFromList(item' project' UserType.bot);                                  case 10: //Watchlist                                      if (project == "")                                          Program.Broadcast("CVP"' "DEL"' item' len' reason' user);                                      return DelPageFromWatchlist(item' project);                                  case 11: //BNU                                      Program.Broadcast("BNU"' "DEL"' item' 0' reason' user);                                      return DelItemFromList(item' 11);                                  case 12: //BNA                                      Program.Broadcast("BNA"' "DEL"' item' 0' reason' user);                                      return DelItemFromList(item' 12);                                  case 20: //BES                                      Program.Broadcast("BES"' "DEL"' item' 0' reason' user);                                      return DelItemFromList(item' 20);                                  default:                                      return ""; //Should never be called' but compiler complains otherwise                              }                          case "show":                              switch (listtype)                              {                                  case 0: //Whitelist                                  case 1: //Blacklist                                  case 6: //Greylist                                      return ShowUserOnList(item' "");                                  case 2: //Adminlist                                  case 5: //Botlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return ShowUserOnList(item' project);                                  case 10: //Watchlist                                      return ShowPageOnWatchlist(item' project);                                  case 11: //BNU                                      return ShowItemOnList(item' 11);                                  case 12: //BNA                                      return ShowItemOnList(item' 12);                                  case 20: //BES                                      return ShowItemOnList(item' 20);                                  default:                                      return ""; //Should never be called' but compiler complains otherwise                              }                          case "test":                              switch (listtype)                              {                                  case 11: //BNU                                      return TestItemOnList(item' 11);                                  case 12: //BNA                                      return TestItemOnList(item' 12);                                  case 20: //BES                                      return TestItemOnList(item' 20);                                  default:                                      return (string)Program.msgs["20002"];                              }                          default:                              return ""; //Should never be called' but compiler complains otherwise                      }
Magic Number,CVNBot,ListManager,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\ListManager.cs,HandleListCommand,The following statement contains a magic number: switch (cmd)                      {                          case "add":                              switch (listtype)                              {                                  case 0: //Whitelist                                      Program.Broadcast("WL"' "ADD"' item' len' reason' user);                                      return AddUserToList(item' ""' UserType.whitelisted' user' reason' len);                                  case 1: //Blacklist                                      Program.Broadcast("BL"' "ADD"' item' len' reason' user);                                      return AddUserToList(item' ""' UserType.blacklisted' user' reason' len);                                  case 6: //Greylist                                      return "You cannot directly add users to the greylist";                                  case 2: //Adminlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return AddUserToList(item' project' UserType.admin' user' reason' len);                                  case 5: //Botlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return AddUserToList(item' project' UserType.bot' user' reason' len);                                  case 10: //Watchlist                                      if (project == "")                                          Program.Broadcast("CVP"' "ADD"' item' len' reason' user);                                      return AddPageToWatchlist(item' project' user' reason' len);                                  case 11: //BNU                                      Program.Broadcast("BNU"' "ADD"' item' len' reason' user);                                      return AddItemToList(item' 11' user' reason' len);                                  case 12: //BNA                                      Program.Broadcast("BNA"' "ADD"' item' len' reason' user);                                      return AddItemToList(item' 12' user' reason' len);                                  case 20: //BES                                      Program.Broadcast("BES"' "ADD"' item' len' reason' user);                                      return AddItemToList(item' 20' user' reason' len);                                  default:                                      return ""; //Should never be called' but compiler complains otherwise                              }                          case "del":                              switch (listtype)                              {                                  case 0: //Whitelist                                      Program.Broadcast("WL"' "DEL"' item' 0' reason' user);                                      return DelUserFromList(item' ""' UserType.whitelisted);                                  case 1: //Blacklist                                      Program.Broadcast("BL"' "DEL"' item' 0' reason' user);                                      return DelUserFromList(item' ""' UserType.blacklisted);                                  case 6: //Greylist                                      Program.Broadcast("GL"' "DEL"' item' 0' reason' user);                                      return DelUserFromList(item' ""' UserType.greylisted);                                  case 2: //Adminlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return DelUserFromList(item' project' UserType.admin);                                  case 5: //Botlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return DelUserFromList(item' project' UserType.bot);                                  case 10: //Watchlist                                      if (project == "")                                          Program.Broadcast("CVP"' "DEL"' item' len' reason' user);                                      return DelPageFromWatchlist(item' project);                                  case 11: //BNU                                      Program.Broadcast("BNU"' "DEL"' item' 0' reason' user);                                      return DelItemFromList(item' 11);                                  case 12: //BNA                                      Program.Broadcast("BNA"' "DEL"' item' 0' reason' user);                                      return DelItemFromList(item' 12);                                  case 20: //BES                                      Program.Broadcast("BES"' "DEL"' item' 0' reason' user);                                      return DelItemFromList(item' 20);                                  default:                                      return ""; //Should never be called' but compiler complains otherwise                              }                          case "show":                              switch (listtype)                              {                                  case 0: //Whitelist                                  case 1: //Blacklist                                  case 6: //Greylist                                      return ShowUserOnList(item' "");                                  case 2: //Adminlist                                  case 5: //Botlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return ShowUserOnList(item' project);                                  case 10: //Watchlist                                      return ShowPageOnWatchlist(item' project);                                  case 11: //BNU                                      return ShowItemOnList(item' 11);                                  case 12: //BNA                                      return ShowItemOnList(item' 12);                                  case 20: //BES                                      return ShowItemOnList(item' 20);                                  default:                                      return ""; //Should never be called' but compiler complains otherwise                              }                          case "test":                              switch (listtype)                              {                                  case 11: //BNU                                      return TestItemOnList(item' 11);                                  case 12: //BNA                                      return TestItemOnList(item' 12);                                  case 20: //BES                                      return TestItemOnList(item' 20);                                  default:                                      return (string)Program.msgs["20002"];                              }                          default:                              return ""; //Should never be called' but compiler complains otherwise                      }
Magic Number,CVNBot,ListManager,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\ListManager.cs,HandleListCommand,The following statement contains a magic number: switch (cmd)                      {                          case "add":                              switch (listtype)                              {                                  case 0: //Whitelist                                      Program.Broadcast("WL"' "ADD"' item' len' reason' user);                                      return AddUserToList(item' ""' UserType.whitelisted' user' reason' len);                                  case 1: //Blacklist                                      Program.Broadcast("BL"' "ADD"' item' len' reason' user);                                      return AddUserToList(item' ""' UserType.blacklisted' user' reason' len);                                  case 6: //Greylist                                      return "You cannot directly add users to the greylist";                                  case 2: //Adminlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return AddUserToList(item' project' UserType.admin' user' reason' len);                                  case 5: //Botlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return AddUserToList(item' project' UserType.bot' user' reason' len);                                  case 10: //Watchlist                                      if (project == "")                                          Program.Broadcast("CVP"' "ADD"' item' len' reason' user);                                      return AddPageToWatchlist(item' project' user' reason' len);                                  case 11: //BNU                                      Program.Broadcast("BNU"' "ADD"' item' len' reason' user);                                      return AddItemToList(item' 11' user' reason' len);                                  case 12: //BNA                                      Program.Broadcast("BNA"' "ADD"' item' len' reason' user);                                      return AddItemToList(item' 12' user' reason' len);                                  case 20: //BES                                      Program.Broadcast("BES"' "ADD"' item' len' reason' user);                                      return AddItemToList(item' 20' user' reason' len);                                  default:                                      return ""; //Should never be called' but compiler complains otherwise                              }                          case "del":                              switch (listtype)                              {                                  case 0: //Whitelist                                      Program.Broadcast("WL"' "DEL"' item' 0' reason' user);                                      return DelUserFromList(item' ""' UserType.whitelisted);                                  case 1: //Blacklist                                      Program.Broadcast("BL"' "DEL"' item' 0' reason' user);                                      return DelUserFromList(item' ""' UserType.blacklisted);                                  case 6: //Greylist                                      Program.Broadcast("GL"' "DEL"' item' 0' reason' user);                                      return DelUserFromList(item' ""' UserType.greylisted);                                  case 2: //Adminlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return DelUserFromList(item' project' UserType.admin);                                  case 5: //Botlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return DelUserFromList(item' project' UserType.bot);                                  case 10: //Watchlist                                      if (project == "")                                          Program.Broadcast("CVP"' "DEL"' item' len' reason' user);                                      return DelPageFromWatchlist(item' project);                                  case 11: //BNU                                      Program.Broadcast("BNU"' "DEL"' item' 0' reason' user);                                      return DelItemFromList(item' 11);                                  case 12: //BNA                                      Program.Broadcast("BNA"' "DEL"' item' 0' reason' user);                                      return DelItemFromList(item' 12);                                  case 20: //BES                                      Program.Broadcast("BES"' "DEL"' item' 0' reason' user);                                      return DelItemFromList(item' 20);                                  default:                                      return ""; //Should never be called' but compiler complains otherwise                              }                          case "show":                              switch (listtype)                              {                                  case 0: //Whitelist                                  case 1: //Blacklist                                  case 6: //Greylist                                      return ShowUserOnList(item' "");                                  case 2: //Adminlist                                  case 5: //Botlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return ShowUserOnList(item' project);                                  case 10: //Watchlist                                      return ShowPageOnWatchlist(item' project);                                  case 11: //BNU                                      return ShowItemOnList(item' 11);                                  case 12: //BNA                                      return ShowItemOnList(item' 12);                                  case 20: //BES                                      return ShowItemOnList(item' 20);                                  default:                                      return ""; //Should never be called' but compiler complains otherwise                              }                          case "test":                              switch (listtype)                              {                                  case 11: //BNU                                      return TestItemOnList(item' 11);                                  case 12: //BNA                                      return TestItemOnList(item' 12);                                  case 20: //BES                                      return TestItemOnList(item' 20);                                  default:                                      return (string)Program.msgs["20002"];                              }                          default:                              return ""; //Should never be called' but compiler complains otherwise                      }
Magic Number,CVNBot,ListManager,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\ListManager.cs,HandleListCommand,The following statement contains a magic number: switch (cmd)                      {                          case "add":                              switch (listtype)                              {                                  case 0: //Whitelist                                      Program.Broadcast("WL"' "ADD"' item' len' reason' user);                                      return AddUserToList(item' ""' UserType.whitelisted' user' reason' len);                                  case 1: //Blacklist                                      Program.Broadcast("BL"' "ADD"' item' len' reason' user);                                      return AddUserToList(item' ""' UserType.blacklisted' user' reason' len);                                  case 6: //Greylist                                      return "You cannot directly add users to the greylist";                                  case 2: //Adminlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return AddUserToList(item' project' UserType.admin' user' reason' len);                                  case 5: //Botlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return AddUserToList(item' project' UserType.bot' user' reason' len);                                  case 10: //Watchlist                                      if (project == "")                                          Program.Broadcast("CVP"' "ADD"' item' len' reason' user);                                      return AddPageToWatchlist(item' project' user' reason' len);                                  case 11: //BNU                                      Program.Broadcast("BNU"' "ADD"' item' len' reason' user);                                      return AddItemToList(item' 11' user' reason' len);                                  case 12: //BNA                                      Program.Broadcast("BNA"' "ADD"' item' len' reason' user);                                      return AddItemToList(item' 12' user' reason' len);                                  case 20: //BES                                      Program.Broadcast("BES"' "ADD"' item' len' reason' user);                                      return AddItemToList(item' 20' user' reason' len);                                  default:                                      return ""; //Should never be called' but compiler complains otherwise                              }                          case "del":                              switch (listtype)                              {                                  case 0: //Whitelist                                      Program.Broadcast("WL"' "DEL"' item' 0' reason' user);                                      return DelUserFromList(item' ""' UserType.whitelisted);                                  case 1: //Blacklist                                      Program.Broadcast("BL"' "DEL"' item' 0' reason' user);                                      return DelUserFromList(item' ""' UserType.blacklisted);                                  case 6: //Greylist                                      Program.Broadcast("GL"' "DEL"' item' 0' reason' user);                                      return DelUserFromList(item' ""' UserType.greylisted);                                  case 2: //Adminlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return DelUserFromList(item' project' UserType.admin);                                  case 5: //Botlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return DelUserFromList(item' project' UserType.bot);                                  case 10: //Watchlist                                      if (project == "")                                          Program.Broadcast("CVP"' "DEL"' item' len' reason' user);                                      return DelPageFromWatchlist(item' project);                                  case 11: //BNU                                      Program.Broadcast("BNU"' "DEL"' item' 0' reason' user);                                      return DelItemFromList(item' 11);                                  case 12: //BNA                                      Program.Broadcast("BNA"' "DEL"' item' 0' reason' user);                                      return DelItemFromList(item' 12);                                  case 20: //BES                                      Program.Broadcast("BES"' "DEL"' item' 0' reason' user);                                      return DelItemFromList(item' 20);                                  default:                                      return ""; //Should never be called' but compiler complains otherwise                              }                          case "show":                              switch (listtype)                              {                                  case 0: //Whitelist                                  case 1: //Blacklist                                  case 6: //Greylist                                      return ShowUserOnList(item' "");                                  case 2: //Adminlist                                  case 5: //Botlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return ShowUserOnList(item' project);                                  case 10: //Watchlist                                      return ShowPageOnWatchlist(item' project);                                  case 11: //BNU                                      return ShowItemOnList(item' 11);                                  case 12: //BNA                                      return ShowItemOnList(item' 12);                                  case 20: //BES                                      return ShowItemOnList(item' 20);                                  default:                                      return ""; //Should never be called' but compiler complains otherwise                              }                          case "test":                              switch (listtype)                              {                                  case 11: //BNU                                      return TestItemOnList(item' 11);                                  case 12: //BNA                                      return TestItemOnList(item' 12);                                  case 20: //BES                                      return TestItemOnList(item' 20);                                  default:                                      return (string)Program.msgs["20002"];                              }                          default:                              return ""; //Should never be called' but compiler complains otherwise                      }
Magic Number,CVNBot,ListManager,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\ListManager.cs,HandleListCommand,The following statement contains a magic number: switch (cmd)                      {                          case "add":                              switch (listtype)                              {                                  case 0: //Whitelist                                      Program.Broadcast("WL"' "ADD"' item' len' reason' user);                                      return AddUserToList(item' ""' UserType.whitelisted' user' reason' len);                                  case 1: //Blacklist                                      Program.Broadcast("BL"' "ADD"' item' len' reason' user);                                      return AddUserToList(item' ""' UserType.blacklisted' user' reason' len);                                  case 6: //Greylist                                      return "You cannot directly add users to the greylist";                                  case 2: //Adminlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return AddUserToList(item' project' UserType.admin' user' reason' len);                                  case 5: //Botlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return AddUserToList(item' project' UserType.bot' user' reason' len);                                  case 10: //Watchlist                                      if (project == "")                                          Program.Broadcast("CVP"' "ADD"' item' len' reason' user);                                      return AddPageToWatchlist(item' project' user' reason' len);                                  case 11: //BNU                                      Program.Broadcast("BNU"' "ADD"' item' len' reason' user);                                      return AddItemToList(item' 11' user' reason' len);                                  case 12: //BNA                                      Program.Broadcast("BNA"' "ADD"' item' len' reason' user);                                      return AddItemToList(item' 12' user' reason' len);                                  case 20: //BES                                      Program.Broadcast("BES"' "ADD"' item' len' reason' user);                                      return AddItemToList(item' 20' user' reason' len);                                  default:                                      return ""; //Should never be called' but compiler complains otherwise                              }                          case "del":                              switch (listtype)                              {                                  case 0: //Whitelist                                      Program.Broadcast("WL"' "DEL"' item' 0' reason' user);                                      return DelUserFromList(item' ""' UserType.whitelisted);                                  case 1: //Blacklist                                      Program.Broadcast("BL"' "DEL"' item' 0' reason' user);                                      return DelUserFromList(item' ""' UserType.blacklisted);                                  case 6: //Greylist                                      Program.Broadcast("GL"' "DEL"' item' 0' reason' user);                                      return DelUserFromList(item' ""' UserType.greylisted);                                  case 2: //Adminlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return DelUserFromList(item' project' UserType.admin);                                  case 5: //Botlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return DelUserFromList(item' project' UserType.bot);                                  case 10: //Watchlist                                      if (project == "")                                          Program.Broadcast("CVP"' "DEL"' item' len' reason' user);                                      return DelPageFromWatchlist(item' project);                                  case 11: //BNU                                      Program.Broadcast("BNU"' "DEL"' item' 0' reason' user);                                      return DelItemFromList(item' 11);                                  case 12: //BNA                                      Program.Broadcast("BNA"' "DEL"' item' 0' reason' user);                                      return DelItemFromList(item' 12);                                  case 20: //BES                                      Program.Broadcast("BES"' "DEL"' item' 0' reason' user);                                      return DelItemFromList(item' 20);                                  default:                                      return ""; //Should never be called' but compiler complains otherwise                              }                          case "show":                              switch (listtype)                              {                                  case 0: //Whitelist                                  case 1: //Blacklist                                  case 6: //Greylist                                      return ShowUserOnList(item' "");                                  case 2: //Adminlist                                  case 5: //Botlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return ShowUserOnList(item' project);                                  case 10: //Watchlist                                      return ShowPageOnWatchlist(item' project);                                  case 11: //BNU                                      return ShowItemOnList(item' 11);                                  case 12: //BNA                                      return ShowItemOnList(item' 12);                                  case 20: //BES                                      return ShowItemOnList(item' 20);                                  default:                                      return ""; //Should never be called' but compiler complains otherwise                              }                          case "test":                              switch (listtype)                              {                                  case 11: //BNU                                      return TestItemOnList(item' 11);                                  case 12: //BNA                                      return TestItemOnList(item' 12);                                  case 20: //BES                                      return TestItemOnList(item' 20);                                  default:                                      return (string)Program.msgs["20002"];                              }                          default:                              return ""; //Should never be called' but compiler complains otherwise                      }
Magic Number,CVNBot,ListManager,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\ListManager.cs,HandleListCommand,The following statement contains a magic number: switch (cmd)                      {                          case "add":                              switch (listtype)                              {                                  case 0: //Whitelist                                      Program.Broadcast("WL"' "ADD"' item' len' reason' user);                                      return AddUserToList(item' ""' UserType.whitelisted' user' reason' len);                                  case 1: //Blacklist                                      Program.Broadcast("BL"' "ADD"' item' len' reason' user);                                      return AddUserToList(item' ""' UserType.blacklisted' user' reason' len);                                  case 6: //Greylist                                      return "You cannot directly add users to the greylist";                                  case 2: //Adminlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return AddUserToList(item' project' UserType.admin' user' reason' len);                                  case 5: //Botlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return AddUserToList(item' project' UserType.bot' user' reason' len);                                  case 10: //Watchlist                                      if (project == "")                                          Program.Broadcast("CVP"' "ADD"' item' len' reason' user);                                      return AddPageToWatchlist(item' project' user' reason' len);                                  case 11: //BNU                                      Program.Broadcast("BNU"' "ADD"' item' len' reason' user);                                      return AddItemToList(item' 11' user' reason' len);                                  case 12: //BNA                                      Program.Broadcast("BNA"' "ADD"' item' len' reason' user);                                      return AddItemToList(item' 12' user' reason' len);                                  case 20: //BES                                      Program.Broadcast("BES"' "ADD"' item' len' reason' user);                                      return AddItemToList(item' 20' user' reason' len);                                  default:                                      return ""; //Should never be called' but compiler complains otherwise                              }                          case "del":                              switch (listtype)                              {                                  case 0: //Whitelist                                      Program.Broadcast("WL"' "DEL"' item' 0' reason' user);                                      return DelUserFromList(item' ""' UserType.whitelisted);                                  case 1: //Blacklist                                      Program.Broadcast("BL"' "DEL"' item' 0' reason' user);                                      return DelUserFromList(item' ""' UserType.blacklisted);                                  case 6: //Greylist                                      Program.Broadcast("GL"' "DEL"' item' 0' reason' user);                                      return DelUserFromList(item' ""' UserType.greylisted);                                  case 2: //Adminlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return DelUserFromList(item' project' UserType.admin);                                  case 5: //Botlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return DelUserFromList(item' project' UserType.bot);                                  case 10: //Watchlist                                      if (project == "")                                          Program.Broadcast("CVP"' "DEL"' item' len' reason' user);                                      return DelPageFromWatchlist(item' project);                                  case 11: //BNU                                      Program.Broadcast("BNU"' "DEL"' item' 0' reason' user);                                      return DelItemFromList(item' 11);                                  case 12: //BNA                                      Program.Broadcast("BNA"' "DEL"' item' 0' reason' user);                                      return DelItemFromList(item' 12);                                  case 20: //BES                                      Program.Broadcast("BES"' "DEL"' item' 0' reason' user);                                      return DelItemFromList(item' 20);                                  default:                                      return ""; //Should never be called' but compiler complains otherwise                              }                          case "show":                              switch (listtype)                              {                                  case 0: //Whitelist                                  case 1: //Blacklist                                  case 6: //Greylist                                      return ShowUserOnList(item' "");                                  case 2: //Adminlist                                  case 5: //Botlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return ShowUserOnList(item' project);                                  case 10: //Watchlist                                      return ShowPageOnWatchlist(item' project);                                  case 11: //BNU                                      return ShowItemOnList(item' 11);                                  case 12: //BNA                                      return ShowItemOnList(item' 12);                                  case 20: //BES                                      return ShowItemOnList(item' 20);                                  default:                                      return ""; //Should never be called' but compiler complains otherwise                              }                          case "test":                              switch (listtype)                              {                                  case 11: //BNU                                      return TestItemOnList(item' 11);                                  case 12: //BNA                                      return TestItemOnList(item' 12);                                  case 20: //BES                                      return TestItemOnList(item' 20);                                  default:                                      return (string)Program.msgs["20002"];                              }                          default:                              return ""; //Should never be called' but compiler complains otherwise                      }
Magic Number,CVNBot,ListManager,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\ListManager.cs,HandleListCommand,The following statement contains a magic number: switch (cmd)                      {                          case "add":                              switch (listtype)                              {                                  case 0: //Whitelist                                      Program.Broadcast("WL"' "ADD"' item' len' reason' user);                                      return AddUserToList(item' ""' UserType.whitelisted' user' reason' len);                                  case 1: //Blacklist                                      Program.Broadcast("BL"' "ADD"' item' len' reason' user);                                      return AddUserToList(item' ""' UserType.blacklisted' user' reason' len);                                  case 6: //Greylist                                      return "You cannot directly add users to the greylist";                                  case 2: //Adminlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return AddUserToList(item' project' UserType.admin' user' reason' len);                                  case 5: //Botlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return AddUserToList(item' project' UserType.bot' user' reason' len);                                  case 10: //Watchlist                                      if (project == "")                                          Program.Broadcast("CVP"' "ADD"' item' len' reason' user);                                      return AddPageToWatchlist(item' project' user' reason' len);                                  case 11: //BNU                                      Program.Broadcast("BNU"' "ADD"' item' len' reason' user);                                      return AddItemToList(item' 11' user' reason' len);                                  case 12: //BNA                                      Program.Broadcast("BNA"' "ADD"' item' len' reason' user);                                      return AddItemToList(item' 12' user' reason' len);                                  case 20: //BES                                      Program.Broadcast("BES"' "ADD"' item' len' reason' user);                                      return AddItemToList(item' 20' user' reason' len);                                  default:                                      return ""; //Should never be called' but compiler complains otherwise                              }                          case "del":                              switch (listtype)                              {                                  case 0: //Whitelist                                      Program.Broadcast("WL"' "DEL"' item' 0' reason' user);                                      return DelUserFromList(item' ""' UserType.whitelisted);                                  case 1: //Blacklist                                      Program.Broadcast("BL"' "DEL"' item' 0' reason' user);                                      return DelUserFromList(item' ""' UserType.blacklisted);                                  case 6: //Greylist                                      Program.Broadcast("GL"' "DEL"' item' 0' reason' user);                                      return DelUserFromList(item' ""' UserType.greylisted);                                  case 2: //Adminlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return DelUserFromList(item' project' UserType.admin);                                  case 5: //Botlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return DelUserFromList(item' project' UserType.bot);                                  case 10: //Watchlist                                      if (project == "")                                          Program.Broadcast("CVP"' "DEL"' item' len' reason' user);                                      return DelPageFromWatchlist(item' project);                                  case 11: //BNU                                      Program.Broadcast("BNU"' "DEL"' item' 0' reason' user);                                      return DelItemFromList(item' 11);                                  case 12: //BNA                                      Program.Broadcast("BNA"' "DEL"' item' 0' reason' user);                                      return DelItemFromList(item' 12);                                  case 20: //BES                                      Program.Broadcast("BES"' "DEL"' item' 0' reason' user);                                      return DelItemFromList(item' 20);                                  default:                                      return ""; //Should never be called' but compiler complains otherwise                              }                          case "show":                              switch (listtype)                              {                                  case 0: //Whitelist                                  case 1: //Blacklist                                  case 6: //Greylist                                      return ShowUserOnList(item' "");                                  case 2: //Adminlist                                  case 5: //Botlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return ShowUserOnList(item' project);                                  case 10: //Watchlist                                      return ShowPageOnWatchlist(item' project);                                  case 11: //BNU                                      return ShowItemOnList(item' 11);                                  case 12: //BNA                                      return ShowItemOnList(item' 12);                                  case 20: //BES                                      return ShowItemOnList(item' 20);                                  default:                                      return ""; //Should never be called' but compiler complains otherwise                              }                          case "test":                              switch (listtype)                              {                                  case 11: //BNU                                      return TestItemOnList(item' 11);                                  case 12: //BNA                                      return TestItemOnList(item' 12);                                  case 20: //BES                                      return TestItemOnList(item' 20);                                  default:                                      return (string)Program.msgs["20002"];                              }                          default:                              return ""; //Should never be called' but compiler complains otherwise                      }
Magic Number,CVNBot,ListManager,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\ListManager.cs,HandleListCommand,The following statement contains a magic number: switch (cmd)                      {                          case "add":                              switch (listtype)                              {                                  case 0: //Whitelist                                      Program.Broadcast("WL"' "ADD"' item' len' reason' user);                                      return AddUserToList(item' ""' UserType.whitelisted' user' reason' len);                                  case 1: //Blacklist                                      Program.Broadcast("BL"' "ADD"' item' len' reason' user);                                      return AddUserToList(item' ""' UserType.blacklisted' user' reason' len);                                  case 6: //Greylist                                      return "You cannot directly add users to the greylist";                                  case 2: //Adminlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return AddUserToList(item' project' UserType.admin' user' reason' len);                                  case 5: //Botlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return AddUserToList(item' project' UserType.bot' user' reason' len);                                  case 10: //Watchlist                                      if (project == "")                                          Program.Broadcast("CVP"' "ADD"' item' len' reason' user);                                      return AddPageToWatchlist(item' project' user' reason' len);                                  case 11: //BNU                                      Program.Broadcast("BNU"' "ADD"' item' len' reason' user);                                      return AddItemToList(item' 11' user' reason' len);                                  case 12: //BNA                                      Program.Broadcast("BNA"' "ADD"' item' len' reason' user);                                      return AddItemToList(item' 12' user' reason' len);                                  case 20: //BES                                      Program.Broadcast("BES"' "ADD"' item' len' reason' user);                                      return AddItemToList(item' 20' user' reason' len);                                  default:                                      return ""; //Should never be called' but compiler complains otherwise                              }                          case "del":                              switch (listtype)                              {                                  case 0: //Whitelist                                      Program.Broadcast("WL"' "DEL"' item' 0' reason' user);                                      return DelUserFromList(item' ""' UserType.whitelisted);                                  case 1: //Blacklist                                      Program.Broadcast("BL"' "DEL"' item' 0' reason' user);                                      return DelUserFromList(item' ""' UserType.blacklisted);                                  case 6: //Greylist                                      Program.Broadcast("GL"' "DEL"' item' 0' reason' user);                                      return DelUserFromList(item' ""' UserType.greylisted);                                  case 2: //Adminlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return DelUserFromList(item' project' UserType.admin);                                  case 5: //Botlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return DelUserFromList(item' project' UserType.bot);                                  case 10: //Watchlist                                      if (project == "")                                          Program.Broadcast("CVP"' "DEL"' item' len' reason' user);                                      return DelPageFromWatchlist(item' project);                                  case 11: //BNU                                      Program.Broadcast("BNU"' "DEL"' item' 0' reason' user);                                      return DelItemFromList(item' 11);                                  case 12: //BNA                                      Program.Broadcast("BNA"' "DEL"' item' 0' reason' user);                                      return DelItemFromList(item' 12);                                  case 20: //BES                                      Program.Broadcast("BES"' "DEL"' item' 0' reason' user);                                      return DelItemFromList(item' 20);                                  default:                                      return ""; //Should never be called' but compiler complains otherwise                              }                          case "show":                              switch (listtype)                              {                                  case 0: //Whitelist                                  case 1: //Blacklist                                  case 6: //Greylist                                      return ShowUserOnList(item' "");                                  case 2: //Adminlist                                  case 5: //Botlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return ShowUserOnList(item' project);                                  case 10: //Watchlist                                      return ShowPageOnWatchlist(item' project);                                  case 11: //BNU                                      return ShowItemOnList(item' 11);                                  case 12: //BNA                                      return ShowItemOnList(item' 12);                                  case 20: //BES                                      return ShowItemOnList(item' 20);                                  default:                                      return ""; //Should never be called' but compiler complains otherwise                              }                          case "test":                              switch (listtype)                              {                                  case 11: //BNU                                      return TestItemOnList(item' 11);                                  case 12: //BNA                                      return TestItemOnList(item' 12);                                  case 20: //BES                                      return TestItemOnList(item' 20);                                  default:                                      return (string)Program.msgs["20002"];                              }                          default:                              return ""; //Should never be called' but compiler complains otherwise                      }
Magic Number,CVNBot,ListManager,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\ListManager.cs,HandleListCommand,The following statement contains a magic number: switch (cmd)                      {                          case "add":                              switch (listtype)                              {                                  case 0: //Whitelist                                      Program.Broadcast("WL"' "ADD"' item' len' reason' user);                                      return AddUserToList(item' ""' UserType.whitelisted' user' reason' len);                                  case 1: //Blacklist                                      Program.Broadcast("BL"' "ADD"' item' len' reason' user);                                      return AddUserToList(item' ""' UserType.blacklisted' user' reason' len);                                  case 6: //Greylist                                      return "You cannot directly add users to the greylist";                                  case 2: //Adminlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return AddUserToList(item' project' UserType.admin' user' reason' len);                                  case 5: //Botlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return AddUserToList(item' project' UserType.bot' user' reason' len);                                  case 10: //Watchlist                                      if (project == "")                                          Program.Broadcast("CVP"' "ADD"' item' len' reason' user);                                      return AddPageToWatchlist(item' project' user' reason' len);                                  case 11: //BNU                                      Program.Broadcast("BNU"' "ADD"' item' len' reason' user);                                      return AddItemToList(item' 11' user' reason' len);                                  case 12: //BNA                                      Program.Broadcast("BNA"' "ADD"' item' len' reason' user);                                      return AddItemToList(item' 12' user' reason' len);                                  case 20: //BES                                      Program.Broadcast("BES"' "ADD"' item' len' reason' user);                                      return AddItemToList(item' 20' user' reason' len);                                  default:                                      return ""; //Should never be called' but compiler complains otherwise                              }                          case "del":                              switch (listtype)                              {                                  case 0: //Whitelist                                      Program.Broadcast("WL"' "DEL"' item' 0' reason' user);                                      return DelUserFromList(item' ""' UserType.whitelisted);                                  case 1: //Blacklist                                      Program.Broadcast("BL"' "DEL"' item' 0' reason' user);                                      return DelUserFromList(item' ""' UserType.blacklisted);                                  case 6: //Greylist                                      Program.Broadcast("GL"' "DEL"' item' 0' reason' user);                                      return DelUserFromList(item' ""' UserType.greylisted);                                  case 2: //Adminlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return DelUserFromList(item' project' UserType.admin);                                  case 5: //Botlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return DelUserFromList(item' project' UserType.bot);                                  case 10: //Watchlist                                      if (project == "")                                          Program.Broadcast("CVP"' "DEL"' item' len' reason' user);                                      return DelPageFromWatchlist(item' project);                                  case 11: //BNU                                      Program.Broadcast("BNU"' "DEL"' item' 0' reason' user);                                      return DelItemFromList(item' 11);                                  case 12: //BNA                                      Program.Broadcast("BNA"' "DEL"' item' 0' reason' user);                                      return DelItemFromList(item' 12);                                  case 20: //BES                                      Program.Broadcast("BES"' "DEL"' item' 0' reason' user);                                      return DelItemFromList(item' 20);                                  default:                                      return ""; //Should never be called' but compiler complains otherwise                              }                          case "show":                              switch (listtype)                              {                                  case 0: //Whitelist                                  case 1: //Blacklist                                  case 6: //Greylist                                      return ShowUserOnList(item' "");                                  case 2: //Adminlist                                  case 5: //Botlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return ShowUserOnList(item' project);                                  case 10: //Watchlist                                      return ShowPageOnWatchlist(item' project);                                  case 11: //BNU                                      return ShowItemOnList(item' 11);                                  case 12: //BNA                                      return ShowItemOnList(item' 12);                                  case 20: //BES                                      return ShowItemOnList(item' 20);                                  default:                                      return ""; //Should never be called' but compiler complains otherwise                              }                          case "test":                              switch (listtype)                              {                                  case 11: //BNU                                      return TestItemOnList(item' 11);                                  case 12: //BNA                                      return TestItemOnList(item' 12);                                  case 20: //BES                                      return TestItemOnList(item' 20);                                  default:                                      return (string)Program.msgs["20002"];                              }                          default:                              return ""; //Should never be called' but compiler complains otherwise                      }
Magic Number,CVNBot,ListManager,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\ListManager.cs,HandleListCommand,The following statement contains a magic number: switch (cmd)                      {                          case "add":                              switch (listtype)                              {                                  case 0: //Whitelist                                      Program.Broadcast("WL"' "ADD"' item' len' reason' user);                                      return AddUserToList(item' ""' UserType.whitelisted' user' reason' len);                                  case 1: //Blacklist                                      Program.Broadcast("BL"' "ADD"' item' len' reason' user);                                      return AddUserToList(item' ""' UserType.blacklisted' user' reason' len);                                  case 6: //Greylist                                      return "You cannot directly add users to the greylist";                                  case 2: //Adminlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return AddUserToList(item' project' UserType.admin' user' reason' len);                                  case 5: //Botlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return AddUserToList(item' project' UserType.bot' user' reason' len);                                  case 10: //Watchlist                                      if (project == "")                                          Program.Broadcast("CVP"' "ADD"' item' len' reason' user);                                      return AddPageToWatchlist(item' project' user' reason' len);                                  case 11: //BNU                                      Program.Broadcast("BNU"' "ADD"' item' len' reason' user);                                      return AddItemToList(item' 11' user' reason' len);                                  case 12: //BNA                                      Program.Broadcast("BNA"' "ADD"' item' len' reason' user);                                      return AddItemToList(item' 12' user' reason' len);                                  case 20: //BES                                      Program.Broadcast("BES"' "ADD"' item' len' reason' user);                                      return AddItemToList(item' 20' user' reason' len);                                  default:                                      return ""; //Should never be called' but compiler complains otherwise                              }                          case "del":                              switch (listtype)                              {                                  case 0: //Whitelist                                      Program.Broadcast("WL"' "DEL"' item' 0' reason' user);                                      return DelUserFromList(item' ""' UserType.whitelisted);                                  case 1: //Blacklist                                      Program.Broadcast("BL"' "DEL"' item' 0' reason' user);                                      return DelUserFromList(item' ""' UserType.blacklisted);                                  case 6: //Greylist                                      Program.Broadcast("GL"' "DEL"' item' 0' reason' user);                                      return DelUserFromList(item' ""' UserType.greylisted);                                  case 2: //Adminlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return DelUserFromList(item' project' UserType.admin);                                  case 5: //Botlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return DelUserFromList(item' project' UserType.bot);                                  case 10: //Watchlist                                      if (project == "")                                          Program.Broadcast("CVP"' "DEL"' item' len' reason' user);                                      return DelPageFromWatchlist(item' project);                                  case 11: //BNU                                      Program.Broadcast("BNU"' "DEL"' item' 0' reason' user);                                      return DelItemFromList(item' 11);                                  case 12: //BNA                                      Program.Broadcast("BNA"' "DEL"' item' 0' reason' user);                                      return DelItemFromList(item' 12);                                  case 20: //BES                                      Program.Broadcast("BES"' "DEL"' item' 0' reason' user);                                      return DelItemFromList(item' 20);                                  default:                                      return ""; //Should never be called' but compiler complains otherwise                              }                          case "show":                              switch (listtype)                              {                                  case 0: //Whitelist                                  case 1: //Blacklist                                  case 6: //Greylist                                      return ShowUserOnList(item' "");                                  case 2: //Adminlist                                  case 5: //Botlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return ShowUserOnList(item' project);                                  case 10: //Watchlist                                      return ShowPageOnWatchlist(item' project);                                  case 11: //BNU                                      return ShowItemOnList(item' 11);                                  case 12: //BNA                                      return ShowItemOnList(item' 12);                                  case 20: //BES                                      return ShowItemOnList(item' 20);                                  default:                                      return ""; //Should never be called' but compiler complains otherwise                              }                          case "test":                              switch (listtype)                              {                                  case 11: //BNU                                      return TestItemOnList(item' 11);                                  case 12: //BNA                                      return TestItemOnList(item' 12);                                  case 20: //BES                                      return TestItemOnList(item' 20);                                  default:                                      return (string)Program.msgs["20002"];                              }                          default:                              return ""; //Should never be called' but compiler complains otherwise                      }
Magic Number,CVNBot,ListManager,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\ListManager.cs,HandleListCommand,The following statement contains a magic number: switch (cmd)                      {                          case "add":                              switch (listtype)                              {                                  case 0: //Whitelist                                      Program.Broadcast("WL"' "ADD"' item' len' reason' user);                                      return AddUserToList(item' ""' UserType.whitelisted' user' reason' len);                                  case 1: //Blacklist                                      Program.Broadcast("BL"' "ADD"' item' len' reason' user);                                      return AddUserToList(item' ""' UserType.blacklisted' user' reason' len);                                  case 6: //Greylist                                      return "You cannot directly add users to the greylist";                                  case 2: //Adminlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return AddUserToList(item' project' UserType.admin' user' reason' len);                                  case 5: //Botlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return AddUserToList(item' project' UserType.bot' user' reason' len);                                  case 10: //Watchlist                                      if (project == "")                                          Program.Broadcast("CVP"' "ADD"' item' len' reason' user);                                      return AddPageToWatchlist(item' project' user' reason' len);                                  case 11: //BNU                                      Program.Broadcast("BNU"' "ADD"' item' len' reason' user);                                      return AddItemToList(item' 11' user' reason' len);                                  case 12: //BNA                                      Program.Broadcast("BNA"' "ADD"' item' len' reason' user);                                      return AddItemToList(item' 12' user' reason' len);                                  case 20: //BES                                      Program.Broadcast("BES"' "ADD"' item' len' reason' user);                                      return AddItemToList(item' 20' user' reason' len);                                  default:                                      return ""; //Should never be called' but compiler complains otherwise                              }                          case "del":                              switch (listtype)                              {                                  case 0: //Whitelist                                      Program.Broadcast("WL"' "DEL"' item' 0' reason' user);                                      return DelUserFromList(item' ""' UserType.whitelisted);                                  case 1: //Blacklist                                      Program.Broadcast("BL"' "DEL"' item' 0' reason' user);                                      return DelUserFromList(item' ""' UserType.blacklisted);                                  case 6: //Greylist                                      Program.Broadcast("GL"' "DEL"' item' 0' reason' user);                                      return DelUserFromList(item' ""' UserType.greylisted);                                  case 2: //Adminlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return DelUserFromList(item' project' UserType.admin);                                  case 5: //Botlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return DelUserFromList(item' project' UserType.bot);                                  case 10: //Watchlist                                      if (project == "")                                          Program.Broadcast("CVP"' "DEL"' item' len' reason' user);                                      return DelPageFromWatchlist(item' project);                                  case 11: //BNU                                      Program.Broadcast("BNU"' "DEL"' item' 0' reason' user);                                      return DelItemFromList(item' 11);                                  case 12: //BNA                                      Program.Broadcast("BNA"' "DEL"' item' 0' reason' user);                                      return DelItemFromList(item' 12);                                  case 20: //BES                                      Program.Broadcast("BES"' "DEL"' item' 0' reason' user);                                      return DelItemFromList(item' 20);                                  default:                                      return ""; //Should never be called' but compiler complains otherwise                              }                          case "show":                              switch (listtype)                              {                                  case 0: //Whitelist                                  case 1: //Blacklist                                  case 6: //Greylist                                      return ShowUserOnList(item' "");                                  case 2: //Adminlist                                  case 5: //Botlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return ShowUserOnList(item' project);                                  case 10: //Watchlist                                      return ShowPageOnWatchlist(item' project);                                  case 11: //BNU                                      return ShowItemOnList(item' 11);                                  case 12: //BNA                                      return ShowItemOnList(item' 12);                                  case 20: //BES                                      return ShowItemOnList(item' 20);                                  default:                                      return ""; //Should never be called' but compiler complains otherwise                              }                          case "test":                              switch (listtype)                              {                                  case 11: //BNU                                      return TestItemOnList(item' 11);                                  case 12: //BNA                                      return TestItemOnList(item' 12);                                  case 20: //BES                                      return TestItemOnList(item' 20);                                  default:                                      return (string)Program.msgs["20002"];                              }                          default:                              return ""; //Should never be called' but compiler complains otherwise                      }
Magic Number,CVNBot,ListManager,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\ListManager.cs,HandleListCommand,The following statement contains a magic number: switch (cmd)                      {                          case "add":                              switch (listtype)                              {                                  case 0: //Whitelist                                      Program.Broadcast("WL"' "ADD"' item' len' reason' user);                                      return AddUserToList(item' ""' UserType.whitelisted' user' reason' len);                                  case 1: //Blacklist                                      Program.Broadcast("BL"' "ADD"' item' len' reason' user);                                      return AddUserToList(item' ""' UserType.blacklisted' user' reason' len);                                  case 6: //Greylist                                      return "You cannot directly add users to the greylist";                                  case 2: //Adminlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return AddUserToList(item' project' UserType.admin' user' reason' len);                                  case 5: //Botlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return AddUserToList(item' project' UserType.bot' user' reason' len);                                  case 10: //Watchlist                                      if (project == "")                                          Program.Broadcast("CVP"' "ADD"' item' len' reason' user);                                      return AddPageToWatchlist(item' project' user' reason' len);                                  case 11: //BNU                                      Program.Broadcast("BNU"' "ADD"' item' len' reason' user);                                      return AddItemToList(item' 11' user' reason' len);                                  case 12: //BNA                                      Program.Broadcast("BNA"' "ADD"' item' len' reason' user);                                      return AddItemToList(item' 12' user' reason' len);                                  case 20: //BES                                      Program.Broadcast("BES"' "ADD"' item' len' reason' user);                                      return AddItemToList(item' 20' user' reason' len);                                  default:                                      return ""; //Should never be called' but compiler complains otherwise                              }                          case "del":                              switch (listtype)                              {                                  case 0: //Whitelist                                      Program.Broadcast("WL"' "DEL"' item' 0' reason' user);                                      return DelUserFromList(item' ""' UserType.whitelisted);                                  case 1: //Blacklist                                      Program.Broadcast("BL"' "DEL"' item' 0' reason' user);                                      return DelUserFromList(item' ""' UserType.blacklisted);                                  case 6: //Greylist                                      Program.Broadcast("GL"' "DEL"' item' 0' reason' user);                                      return DelUserFromList(item' ""' UserType.greylisted);                                  case 2: //Adminlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return DelUserFromList(item' project' UserType.admin);                                  case 5: //Botlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return DelUserFromList(item' project' UserType.bot);                                  case 10: //Watchlist                                      if (project == "")                                          Program.Broadcast("CVP"' "DEL"' item' len' reason' user);                                      return DelPageFromWatchlist(item' project);                                  case 11: //BNU                                      Program.Broadcast("BNU"' "DEL"' item' 0' reason' user);                                      return DelItemFromList(item' 11);                                  case 12: //BNA                                      Program.Broadcast("BNA"' "DEL"' item' 0' reason' user);                                      return DelItemFromList(item' 12);                                  case 20: //BES                                      Program.Broadcast("BES"' "DEL"' item' 0' reason' user);                                      return DelItemFromList(item' 20);                                  default:                                      return ""; //Should never be called' but compiler complains otherwise                              }                          case "show":                              switch (listtype)                              {                                  case 0: //Whitelist                                  case 1: //Blacklist                                  case 6: //Greylist                                      return ShowUserOnList(item' "");                                  case 2: //Adminlist                                  case 5: //Botlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return ShowUserOnList(item' project);                                  case 10: //Watchlist                                      return ShowPageOnWatchlist(item' project);                                  case 11: //BNU                                      return ShowItemOnList(item' 11);                                  case 12: //BNA                                      return ShowItemOnList(item' 12);                                  case 20: //BES                                      return ShowItemOnList(item' 20);                                  default:                                      return ""; //Should never be called' but compiler complains otherwise                              }                          case "test":                              switch (listtype)                              {                                  case 11: //BNU                                      return TestItemOnList(item' 11);                                  case 12: //BNA                                      return TestItemOnList(item' 12);                                  case 20: //BES                                      return TestItemOnList(item' 20);                                  default:                                      return (string)Program.msgs["20002"];                              }                          default:                              return ""; //Should never be called' but compiler complains otherwise                      }
Magic Number,CVNBot,ListManager,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\ListManager.cs,HandleListCommand,The following statement contains a magic number: switch (cmd)                      {                          case "add":                              switch (listtype)                              {                                  case 0: //Whitelist                                      Program.Broadcast("WL"' "ADD"' item' len' reason' user);                                      return AddUserToList(item' ""' UserType.whitelisted' user' reason' len);                                  case 1: //Blacklist                                      Program.Broadcast("BL"' "ADD"' item' len' reason' user);                                      return AddUserToList(item' ""' UserType.blacklisted' user' reason' len);                                  case 6: //Greylist                                      return "You cannot directly add users to the greylist";                                  case 2: //Adminlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return AddUserToList(item' project' UserType.admin' user' reason' len);                                  case 5: //Botlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return AddUserToList(item' project' UserType.bot' user' reason' len);                                  case 10: //Watchlist                                      if (project == "")                                          Program.Broadcast("CVP"' "ADD"' item' len' reason' user);                                      return AddPageToWatchlist(item' project' user' reason' len);                                  case 11: //BNU                                      Program.Broadcast("BNU"' "ADD"' item' len' reason' user);                                      return AddItemToList(item' 11' user' reason' len);                                  case 12: //BNA                                      Program.Broadcast("BNA"' "ADD"' item' len' reason' user);                                      return AddItemToList(item' 12' user' reason' len);                                  case 20: //BES                                      Program.Broadcast("BES"' "ADD"' item' len' reason' user);                                      return AddItemToList(item' 20' user' reason' len);                                  default:                                      return ""; //Should never be called' but compiler complains otherwise                              }                          case "del":                              switch (listtype)                              {                                  case 0: //Whitelist                                      Program.Broadcast("WL"' "DEL"' item' 0' reason' user);                                      return DelUserFromList(item' ""' UserType.whitelisted);                                  case 1: //Blacklist                                      Program.Broadcast("BL"' "DEL"' item' 0' reason' user);                                      return DelUserFromList(item' ""' UserType.blacklisted);                                  case 6: //Greylist                                      Program.Broadcast("GL"' "DEL"' item' 0' reason' user);                                      return DelUserFromList(item' ""' UserType.greylisted);                                  case 2: //Adminlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return DelUserFromList(item' project' UserType.admin);                                  case 5: //Botlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return DelUserFromList(item' project' UserType.bot);                                  case 10: //Watchlist                                      if (project == "")                                          Program.Broadcast("CVP"' "DEL"' item' len' reason' user);                                      return DelPageFromWatchlist(item' project);                                  case 11: //BNU                                      Program.Broadcast("BNU"' "DEL"' item' 0' reason' user);                                      return DelItemFromList(item' 11);                                  case 12: //BNA                                      Program.Broadcast("BNA"' "DEL"' item' 0' reason' user);                                      return DelItemFromList(item' 12);                                  case 20: //BES                                      Program.Broadcast("BES"' "DEL"' item' 0' reason' user);                                      return DelItemFromList(item' 20);                                  default:                                      return ""; //Should never be called' but compiler complains otherwise                              }                          case "show":                              switch (listtype)                              {                                  case 0: //Whitelist                                  case 1: //Blacklist                                  case 6: //Greylist                                      return ShowUserOnList(item' "");                                  case 2: //Adminlist                                  case 5: //Botlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return ShowUserOnList(item' project);                                  case 10: //Watchlist                                      return ShowPageOnWatchlist(item' project);                                  case 11: //BNU                                      return ShowItemOnList(item' 11);                                  case 12: //BNA                                      return ShowItemOnList(item' 12);                                  case 20: //BES                                      return ShowItemOnList(item' 20);                                  default:                                      return ""; //Should never be called' but compiler complains otherwise                              }                          case "test":                              switch (listtype)                              {                                  case 11: //BNU                                      return TestItemOnList(item' 11);                                  case 12: //BNA                                      return TestItemOnList(item' 12);                                  case 20: //BES                                      return TestItemOnList(item' 20);                                  default:                                      return (string)Program.msgs["20002"];                              }                          default:                              return ""; //Should never be called' but compiler complains otherwise                      }
Magic Number,CVNBot,ListManager,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\ListManager.cs,HandleListCommand,The following statement contains a magic number: switch (cmd)                      {                          case "add":                              switch (listtype)                              {                                  case 0: //Whitelist                                      Program.Broadcast("WL"' "ADD"' item' len' reason' user);                                      return AddUserToList(item' ""' UserType.whitelisted' user' reason' len);                                  case 1: //Blacklist                                      Program.Broadcast("BL"' "ADD"' item' len' reason' user);                                      return AddUserToList(item' ""' UserType.blacklisted' user' reason' len);                                  case 6: //Greylist                                      return "You cannot directly add users to the greylist";                                  case 2: //Adminlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return AddUserToList(item' project' UserType.admin' user' reason' len);                                  case 5: //Botlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return AddUserToList(item' project' UserType.bot' user' reason' len);                                  case 10: //Watchlist                                      if (project == "")                                          Program.Broadcast("CVP"' "ADD"' item' len' reason' user);                                      return AddPageToWatchlist(item' project' user' reason' len);                                  case 11: //BNU                                      Program.Broadcast("BNU"' "ADD"' item' len' reason' user);                                      return AddItemToList(item' 11' user' reason' len);                                  case 12: //BNA                                      Program.Broadcast("BNA"' "ADD"' item' len' reason' user);                                      return AddItemToList(item' 12' user' reason' len);                                  case 20: //BES                                      Program.Broadcast("BES"' "ADD"' item' len' reason' user);                                      return AddItemToList(item' 20' user' reason' len);                                  default:                                      return ""; //Should never be called' but compiler complains otherwise                              }                          case "del":                              switch (listtype)                              {                                  case 0: //Whitelist                                      Program.Broadcast("WL"' "DEL"' item' 0' reason' user);                                      return DelUserFromList(item' ""' UserType.whitelisted);                                  case 1: //Blacklist                                      Program.Broadcast("BL"' "DEL"' item' 0' reason' user);                                      return DelUserFromList(item' ""' UserType.blacklisted);                                  case 6: //Greylist                                      Program.Broadcast("GL"' "DEL"' item' 0' reason' user);                                      return DelUserFromList(item' ""' UserType.greylisted);                                  case 2: //Adminlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return DelUserFromList(item' project' UserType.admin);                                  case 5: //Botlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return DelUserFromList(item' project' UserType.bot);                                  case 10: //Watchlist                                      if (project == "")                                          Program.Broadcast("CVP"' "DEL"' item' len' reason' user);                                      return DelPageFromWatchlist(item' project);                                  case 11: //BNU                                      Program.Broadcast("BNU"' "DEL"' item' 0' reason' user);                                      return DelItemFromList(item' 11);                                  case 12: //BNA                                      Program.Broadcast("BNA"' "DEL"' item' 0' reason' user);                                      return DelItemFromList(item' 12);                                  case 20: //BES                                      Program.Broadcast("BES"' "DEL"' item' 0' reason' user);                                      return DelItemFromList(item' 20);                                  default:                                      return ""; //Should never be called' but compiler complains otherwise                              }                          case "show":                              switch (listtype)                              {                                  case 0: //Whitelist                                  case 1: //Blacklist                                  case 6: //Greylist                                      return ShowUserOnList(item' "");                                  case 2: //Adminlist                                  case 5: //Botlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return ShowUserOnList(item' project);                                  case 10: //Watchlist                                      return ShowPageOnWatchlist(item' project);                                  case 11: //BNU                                      return ShowItemOnList(item' 11);                                  case 12: //BNA                                      return ShowItemOnList(item' 12);                                  case 20: //BES                                      return ShowItemOnList(item' 20);                                  default:                                      return ""; //Should never be called' but compiler complains otherwise                              }                          case "test":                              switch (listtype)                              {                                  case 11: //BNU                                      return TestItemOnList(item' 11);                                  case 12: //BNA                                      return TestItemOnList(item' 12);                                  case 20: //BES                                      return TestItemOnList(item' 20);                                  default:                                      return (string)Program.msgs["20002"];                              }                          default:                              return ""; //Should never be called' but compiler complains otherwise                      }
Magic Number,CVNBot,ListManager,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\ListManager.cs,HandleListCommand,The following statement contains a magic number: switch (cmd)                      {                          case "add":                              switch (listtype)                              {                                  case 0: //Whitelist                                      Program.Broadcast("WL"' "ADD"' item' len' reason' user);                                      return AddUserToList(item' ""' UserType.whitelisted' user' reason' len);                                  case 1: //Blacklist                                      Program.Broadcast("BL"' "ADD"' item' len' reason' user);                                      return AddUserToList(item' ""' UserType.blacklisted' user' reason' len);                                  case 6: //Greylist                                      return "You cannot directly add users to the greylist";                                  case 2: //Adminlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return AddUserToList(item' project' UserType.admin' user' reason' len);                                  case 5: //Botlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return AddUserToList(item' project' UserType.bot' user' reason' len);                                  case 10: //Watchlist                                      if (project == "")                                          Program.Broadcast("CVP"' "ADD"' item' len' reason' user);                                      return AddPageToWatchlist(item' project' user' reason' len);                                  case 11: //BNU                                      Program.Broadcast("BNU"' "ADD"' item' len' reason' user);                                      return AddItemToList(item' 11' user' reason' len);                                  case 12: //BNA                                      Program.Broadcast("BNA"' "ADD"' item' len' reason' user);                                      return AddItemToList(item' 12' user' reason' len);                                  case 20: //BES                                      Program.Broadcast("BES"' "ADD"' item' len' reason' user);                                      return AddItemToList(item' 20' user' reason' len);                                  default:                                      return ""; //Should never be called' but compiler complains otherwise                              }                          case "del":                              switch (listtype)                              {                                  case 0: //Whitelist                                      Program.Broadcast("WL"' "DEL"' item' 0' reason' user);                                      return DelUserFromList(item' ""' UserType.whitelisted);                                  case 1: //Blacklist                                      Program.Broadcast("BL"' "DEL"' item' 0' reason' user);                                      return DelUserFromList(item' ""' UserType.blacklisted);                                  case 6: //Greylist                                      Program.Broadcast("GL"' "DEL"' item' 0' reason' user);                                      return DelUserFromList(item' ""' UserType.greylisted);                                  case 2: //Adminlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return DelUserFromList(item' project' UserType.admin);                                  case 5: //Botlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return DelUserFromList(item' project' UserType.bot);                                  case 10: //Watchlist                                      if (project == "")                                          Program.Broadcast("CVP"' "DEL"' item' len' reason' user);                                      return DelPageFromWatchlist(item' project);                                  case 11: //BNU                                      Program.Broadcast("BNU"' "DEL"' item' 0' reason' user);                                      return DelItemFromList(item' 11);                                  case 12: //BNA                                      Program.Broadcast("BNA"' "DEL"' item' 0' reason' user);                                      return DelItemFromList(item' 12);                                  case 20: //BES                                      Program.Broadcast("BES"' "DEL"' item' 0' reason' user);                                      return DelItemFromList(item' 20);                                  default:                                      return ""; //Should never be called' but compiler complains otherwise                              }                          case "show":                              switch (listtype)                              {                                  case 0: //Whitelist                                  case 1: //Blacklist                                  case 6: //Greylist                                      return ShowUserOnList(item' "");                                  case 2: //Adminlist                                  case 5: //Botlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return ShowUserOnList(item' project);                                  case 10: //Watchlist                                      return ShowPageOnWatchlist(item' project);                                  case 11: //BNU                                      return ShowItemOnList(item' 11);                                  case 12: //BNA                                      return ShowItemOnList(item' 12);                                  case 20: //BES                                      return ShowItemOnList(item' 20);                                  default:                                      return ""; //Should never be called' but compiler complains otherwise                              }                          case "test":                              switch (listtype)                              {                                  case 11: //BNU                                      return TestItemOnList(item' 11);                                  case 12: //BNA                                      return TestItemOnList(item' 12);                                  case 20: //BES                                      return TestItemOnList(item' 20);                                  default:                                      return (string)Program.msgs["20002"];                              }                          default:                              return ""; //Should never be called' but compiler complains otherwise                      }
Magic Number,CVNBot,ListManager,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\ListManager.cs,HandleListCommand,The following statement contains a magic number: switch (cmd)                      {                          case "add":                              switch (listtype)                              {                                  case 0: //Whitelist                                      Program.Broadcast("WL"' "ADD"' item' len' reason' user);                                      return AddUserToList(item' ""' UserType.whitelisted' user' reason' len);                                  case 1: //Blacklist                                      Program.Broadcast("BL"' "ADD"' item' len' reason' user);                                      return AddUserToList(item' ""' UserType.blacklisted' user' reason' len);                                  case 6: //Greylist                                      return "You cannot directly add users to the greylist";                                  case 2: //Adminlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return AddUserToList(item' project' UserType.admin' user' reason' len);                                  case 5: //Botlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return AddUserToList(item' project' UserType.bot' user' reason' len);                                  case 10: //Watchlist                                      if (project == "")                                          Program.Broadcast("CVP"' "ADD"' item' len' reason' user);                                      return AddPageToWatchlist(item' project' user' reason' len);                                  case 11: //BNU                                      Program.Broadcast("BNU"' "ADD"' item' len' reason' user);                                      return AddItemToList(item' 11' user' reason' len);                                  case 12: //BNA                                      Program.Broadcast("BNA"' "ADD"' item' len' reason' user);                                      return AddItemToList(item' 12' user' reason' len);                                  case 20: //BES                                      Program.Broadcast("BES"' "ADD"' item' len' reason' user);                                      return AddItemToList(item' 20' user' reason' len);                                  default:                                      return ""; //Should never be called' but compiler complains otherwise                              }                          case "del":                              switch (listtype)                              {                                  case 0: //Whitelist                                      Program.Broadcast("WL"' "DEL"' item' 0' reason' user);                                      return DelUserFromList(item' ""' UserType.whitelisted);                                  case 1: //Blacklist                                      Program.Broadcast("BL"' "DEL"' item' 0' reason' user);                                      return DelUserFromList(item' ""' UserType.blacklisted);                                  case 6: //Greylist                                      Program.Broadcast("GL"' "DEL"' item' 0' reason' user);                                      return DelUserFromList(item' ""' UserType.greylisted);                                  case 2: //Adminlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return DelUserFromList(item' project' UserType.admin);                                  case 5: //Botlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return DelUserFromList(item' project' UserType.bot);                                  case 10: //Watchlist                                      if (project == "")                                          Program.Broadcast("CVP"' "DEL"' item' len' reason' user);                                      return DelPageFromWatchlist(item' project);                                  case 11: //BNU                                      Program.Broadcast("BNU"' "DEL"' item' 0' reason' user);                                      return DelItemFromList(item' 11);                                  case 12: //BNA                                      Program.Broadcast("BNA"' "DEL"' item' 0' reason' user);                                      return DelItemFromList(item' 12);                                  case 20: //BES                                      Program.Broadcast("BES"' "DEL"' item' 0' reason' user);                                      return DelItemFromList(item' 20);                                  default:                                      return ""; //Should never be called' but compiler complains otherwise                              }                          case "show":                              switch (listtype)                              {                                  case 0: //Whitelist                                  case 1: //Blacklist                                  case 6: //Greylist                                      return ShowUserOnList(item' "");                                  case 2: //Adminlist                                  case 5: //Botlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return ShowUserOnList(item' project);                                  case 10: //Watchlist                                      return ShowPageOnWatchlist(item' project);                                  case 11: //BNU                                      return ShowItemOnList(item' 11);                                  case 12: //BNA                                      return ShowItemOnList(item' 12);                                  case 20: //BES                                      return ShowItemOnList(item' 20);                                  default:                                      return ""; //Should never be called' but compiler complains otherwise                              }                          case "test":                              switch (listtype)                              {                                  case 11: //BNU                                      return TestItemOnList(item' 11);                                  case 12: //BNA                                      return TestItemOnList(item' 12);                                  case 20: //BES                                      return TestItemOnList(item' 20);                                  default:                                      return (string)Program.msgs["20002"];                              }                          default:                              return ""; //Should never be called' but compiler complains otherwise                      }
Magic Number,CVNBot,ListManager,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\ListManager.cs,HandleListCommand,The following statement contains a magic number: switch (cmd)                      {                          case "add":                              switch (listtype)                              {                                  case 0: //Whitelist                                      Program.Broadcast("WL"' "ADD"' item' len' reason' user);                                      return AddUserToList(item' ""' UserType.whitelisted' user' reason' len);                                  case 1: //Blacklist                                      Program.Broadcast("BL"' "ADD"' item' len' reason' user);                                      return AddUserToList(item' ""' UserType.blacklisted' user' reason' len);                                  case 6: //Greylist                                      return "You cannot directly add users to the greylist";                                  case 2: //Adminlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return AddUserToList(item' project' UserType.admin' user' reason' len);                                  case 5: //Botlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return AddUserToList(item' project' UserType.bot' user' reason' len);                                  case 10: //Watchlist                                      if (project == "")                                          Program.Broadcast("CVP"' "ADD"' item' len' reason' user);                                      return AddPageToWatchlist(item' project' user' reason' len);                                  case 11: //BNU                                      Program.Broadcast("BNU"' "ADD"' item' len' reason' user);                                      return AddItemToList(item' 11' user' reason' len);                                  case 12: //BNA                                      Program.Broadcast("BNA"' "ADD"' item' len' reason' user);                                      return AddItemToList(item' 12' user' reason' len);                                  case 20: //BES                                      Program.Broadcast("BES"' "ADD"' item' len' reason' user);                                      return AddItemToList(item' 20' user' reason' len);                                  default:                                      return ""; //Should never be called' but compiler complains otherwise                              }                          case "del":                              switch (listtype)                              {                                  case 0: //Whitelist                                      Program.Broadcast("WL"' "DEL"' item' 0' reason' user);                                      return DelUserFromList(item' ""' UserType.whitelisted);                                  case 1: //Blacklist                                      Program.Broadcast("BL"' "DEL"' item' 0' reason' user);                                      return DelUserFromList(item' ""' UserType.blacklisted);                                  case 6: //Greylist                                      Program.Broadcast("GL"' "DEL"' item' 0' reason' user);                                      return DelUserFromList(item' ""' UserType.greylisted);                                  case 2: //Adminlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return DelUserFromList(item' project' UserType.admin);                                  case 5: //Botlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return DelUserFromList(item' project' UserType.bot);                                  case 10: //Watchlist                                      if (project == "")                                          Program.Broadcast("CVP"' "DEL"' item' len' reason' user);                                      return DelPageFromWatchlist(item' project);                                  case 11: //BNU                                      Program.Broadcast("BNU"' "DEL"' item' 0' reason' user);                                      return DelItemFromList(item' 11);                                  case 12: //BNA                                      Program.Broadcast("BNA"' "DEL"' item' 0' reason' user);                                      return DelItemFromList(item' 12);                                  case 20: //BES                                      Program.Broadcast("BES"' "DEL"' item' 0' reason' user);                                      return DelItemFromList(item' 20);                                  default:                                      return ""; //Should never be called' but compiler complains otherwise                              }                          case "show":                              switch (listtype)                              {                                  case 0: //Whitelist                                  case 1: //Blacklist                                  case 6: //Greylist                                      return ShowUserOnList(item' "");                                  case 2: //Adminlist                                  case 5: //Botlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return ShowUserOnList(item' project);                                  case 10: //Watchlist                                      return ShowPageOnWatchlist(item' project);                                  case 11: //BNU                                      return ShowItemOnList(item' 11);                                  case 12: //BNA                                      return ShowItemOnList(item' 12);                                  case 20: //BES                                      return ShowItemOnList(item' 20);                                  default:                                      return ""; //Should never be called' but compiler complains otherwise                              }                          case "test":                              switch (listtype)                              {                                  case 11: //BNU                                      return TestItemOnList(item' 11);                                  case 12: //BNA                                      return TestItemOnList(item' 12);                                  case 20: //BES                                      return TestItemOnList(item' 20);                                  default:                                      return (string)Program.msgs["20002"];                              }                          default:                              return ""; //Should never be called' but compiler complains otherwise                      }
Magic Number,CVNBot,ListManager,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\ListManager.cs,HandleListCommand,The following statement contains a magic number: switch (cmd)                      {                          case "add":                              switch (listtype)                              {                                  case 0: //Whitelist                                      Program.Broadcast("WL"' "ADD"' item' len' reason' user);                                      return AddUserToList(item' ""' UserType.whitelisted' user' reason' len);                                  case 1: //Blacklist                                      Program.Broadcast("BL"' "ADD"' item' len' reason' user);                                      return AddUserToList(item' ""' UserType.blacklisted' user' reason' len);                                  case 6: //Greylist                                      return "You cannot directly add users to the greylist";                                  case 2: //Adminlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return AddUserToList(item' project' UserType.admin' user' reason' len);                                  case 5: //Botlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return AddUserToList(item' project' UserType.bot' user' reason' len);                                  case 10: //Watchlist                                      if (project == "")                                          Program.Broadcast("CVP"' "ADD"' item' len' reason' user);                                      return AddPageToWatchlist(item' project' user' reason' len);                                  case 11: //BNU                                      Program.Broadcast("BNU"' "ADD"' item' len' reason' user);                                      return AddItemToList(item' 11' user' reason' len);                                  case 12: //BNA                                      Program.Broadcast("BNA"' "ADD"' item' len' reason' user);                                      return AddItemToList(item' 12' user' reason' len);                                  case 20: //BES                                      Program.Broadcast("BES"' "ADD"' item' len' reason' user);                                      return AddItemToList(item' 20' user' reason' len);                                  default:                                      return ""; //Should never be called' but compiler complains otherwise                              }                          case "del":                              switch (listtype)                              {                                  case 0: //Whitelist                                      Program.Broadcast("WL"' "DEL"' item' 0' reason' user);                                      return DelUserFromList(item' ""' UserType.whitelisted);                                  case 1: //Blacklist                                      Program.Broadcast("BL"' "DEL"' item' 0' reason' user);                                      return DelUserFromList(item' ""' UserType.blacklisted);                                  case 6: //Greylist                                      Program.Broadcast("GL"' "DEL"' item' 0' reason' user);                                      return DelUserFromList(item' ""' UserType.greylisted);                                  case 2: //Adminlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return DelUserFromList(item' project' UserType.admin);                                  case 5: //Botlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return DelUserFromList(item' project' UserType.bot);                                  case 10: //Watchlist                                      if (project == "")                                          Program.Broadcast("CVP"' "DEL"' item' len' reason' user);                                      return DelPageFromWatchlist(item' project);                                  case 11: //BNU                                      Program.Broadcast("BNU"' "DEL"' item' 0' reason' user);                                      return DelItemFromList(item' 11);                                  case 12: //BNA                                      Program.Broadcast("BNA"' "DEL"' item' 0' reason' user);                                      return DelItemFromList(item' 12);                                  case 20: //BES                                      Program.Broadcast("BES"' "DEL"' item' 0' reason' user);                                      return DelItemFromList(item' 20);                                  default:                                      return ""; //Should never be called' but compiler complains otherwise                              }                          case "show":                              switch (listtype)                              {                                  case 0: //Whitelist                                  case 1: //Blacklist                                  case 6: //Greylist                                      return ShowUserOnList(item' "");                                  case 2: //Adminlist                                  case 5: //Botlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return ShowUserOnList(item' project);                                  case 10: //Watchlist                                      return ShowPageOnWatchlist(item' project);                                  case 11: //BNU                                      return ShowItemOnList(item' 11);                                  case 12: //BNA                                      return ShowItemOnList(item' 12);                                  case 20: //BES                                      return ShowItemOnList(item' 20);                                  default:                                      return ""; //Should never be called' but compiler complains otherwise                              }                          case "test":                              switch (listtype)                              {                                  case 11: //BNU                                      return TestItemOnList(item' 11);                                  case 12: //BNA                                      return TestItemOnList(item' 12);                                  case 20: //BES                                      return TestItemOnList(item' 20);                                  default:                                      return (string)Program.msgs["20002"];                              }                          default:                              return ""; //Should never be called' but compiler complains otherwise                      }
Magic Number,CVNBot,ListManager,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\ListManager.cs,HandleListCommand,The following statement contains a magic number: switch (cmd)                      {                          case "add":                              switch (listtype)                              {                                  case 0: //Whitelist                                      Program.Broadcast("WL"' "ADD"' item' len' reason' user);                                      return AddUserToList(item' ""' UserType.whitelisted' user' reason' len);                                  case 1: //Blacklist                                      Program.Broadcast("BL"' "ADD"' item' len' reason' user);                                      return AddUserToList(item' ""' UserType.blacklisted' user' reason' len);                                  case 6: //Greylist                                      return "You cannot directly add users to the greylist";                                  case 2: //Adminlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return AddUserToList(item' project' UserType.admin' user' reason' len);                                  case 5: //Botlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return AddUserToList(item' project' UserType.bot' user' reason' len);                                  case 10: //Watchlist                                      if (project == "")                                          Program.Broadcast("CVP"' "ADD"' item' len' reason' user);                                      return AddPageToWatchlist(item' project' user' reason' len);                                  case 11: //BNU                                      Program.Broadcast("BNU"' "ADD"' item' len' reason' user);                                      return AddItemToList(item' 11' user' reason' len);                                  case 12: //BNA                                      Program.Broadcast("BNA"' "ADD"' item' len' reason' user);                                      return AddItemToList(item' 12' user' reason' len);                                  case 20: //BES                                      Program.Broadcast("BES"' "ADD"' item' len' reason' user);                                      return AddItemToList(item' 20' user' reason' len);                                  default:                                      return ""; //Should never be called' but compiler complains otherwise                              }                          case "del":                              switch (listtype)                              {                                  case 0: //Whitelist                                      Program.Broadcast("WL"' "DEL"' item' 0' reason' user);                                      return DelUserFromList(item' ""' UserType.whitelisted);                                  case 1: //Blacklist                                      Program.Broadcast("BL"' "DEL"' item' 0' reason' user);                                      return DelUserFromList(item' ""' UserType.blacklisted);                                  case 6: //Greylist                                      Program.Broadcast("GL"' "DEL"' item' 0' reason' user);                                      return DelUserFromList(item' ""' UserType.greylisted);                                  case 2: //Adminlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return DelUserFromList(item' project' UserType.admin);                                  case 5: //Botlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return DelUserFromList(item' project' UserType.bot);                                  case 10: //Watchlist                                      if (project == "")                                          Program.Broadcast("CVP"' "DEL"' item' len' reason' user);                                      return DelPageFromWatchlist(item' project);                                  case 11: //BNU                                      Program.Broadcast("BNU"' "DEL"' item' 0' reason' user);                                      return DelItemFromList(item' 11);                                  case 12: //BNA                                      Program.Broadcast("BNA"' "DEL"' item' 0' reason' user);                                      return DelItemFromList(item' 12);                                  case 20: //BES                                      Program.Broadcast("BES"' "DEL"' item' 0' reason' user);                                      return DelItemFromList(item' 20);                                  default:                                      return ""; //Should never be called' but compiler complains otherwise                              }                          case "show":                              switch (listtype)                              {                                  case 0: //Whitelist                                  case 1: //Blacklist                                  case 6: //Greylist                                      return ShowUserOnList(item' "");                                  case 2: //Adminlist                                  case 5: //Botlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return ShowUserOnList(item' project);                                  case 10: //Watchlist                                      return ShowPageOnWatchlist(item' project);                                  case 11: //BNU                                      return ShowItemOnList(item' 11);                                  case 12: //BNA                                      return ShowItemOnList(item' 12);                                  case 20: //BES                                      return ShowItemOnList(item' 20);                                  default:                                      return ""; //Should never be called' but compiler complains otherwise                              }                          case "test":                              switch (listtype)                              {                                  case 11: //BNU                                      return TestItemOnList(item' 11);                                  case 12: //BNA                                      return TestItemOnList(item' 12);                                  case 20: //BES                                      return TestItemOnList(item' 20);                                  default:                                      return (string)Program.msgs["20002"];                              }                          default:                              return ""; //Should never be called' but compiler complains otherwise                      }
Magic Number,CVNBot,ListManager,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\ListManager.cs,HandleListCommand,The following statement contains a magic number: switch (cmd)                      {                          case "add":                              switch (listtype)                              {                                  case 0: //Whitelist                                      Program.Broadcast("WL"' "ADD"' item' len' reason' user);                                      return AddUserToList(item' ""' UserType.whitelisted' user' reason' len);                                  case 1: //Blacklist                                      Program.Broadcast("BL"' "ADD"' item' len' reason' user);                                      return AddUserToList(item' ""' UserType.blacklisted' user' reason' len);                                  case 6: //Greylist                                      return "You cannot directly add users to the greylist";                                  case 2: //Adminlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return AddUserToList(item' project' UserType.admin' user' reason' len);                                  case 5: //Botlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return AddUserToList(item' project' UserType.bot' user' reason' len);                                  case 10: //Watchlist                                      if (project == "")                                          Program.Broadcast("CVP"' "ADD"' item' len' reason' user);                                      return AddPageToWatchlist(item' project' user' reason' len);                                  case 11: //BNU                                      Program.Broadcast("BNU"' "ADD"' item' len' reason' user);                                      return AddItemToList(item' 11' user' reason' len);                                  case 12: //BNA                                      Program.Broadcast("BNA"' "ADD"' item' len' reason' user);                                      return AddItemToList(item' 12' user' reason' len);                                  case 20: //BES                                      Program.Broadcast("BES"' "ADD"' item' len' reason' user);                                      return AddItemToList(item' 20' user' reason' len);                                  default:                                      return ""; //Should never be called' but compiler complains otherwise                              }                          case "del":                              switch (listtype)                              {                                  case 0: //Whitelist                                      Program.Broadcast("WL"' "DEL"' item' 0' reason' user);                                      return DelUserFromList(item' ""' UserType.whitelisted);                                  case 1: //Blacklist                                      Program.Broadcast("BL"' "DEL"' item' 0' reason' user);                                      return DelUserFromList(item' ""' UserType.blacklisted);                                  case 6: //Greylist                                      Program.Broadcast("GL"' "DEL"' item' 0' reason' user);                                      return DelUserFromList(item' ""' UserType.greylisted);                                  case 2: //Adminlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return DelUserFromList(item' project' UserType.admin);                                  case 5: //Botlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return DelUserFromList(item' project' UserType.bot);                                  case 10: //Watchlist                                      if (project == "")                                          Program.Broadcast("CVP"' "DEL"' item' len' reason' user);                                      return DelPageFromWatchlist(item' project);                                  case 11: //BNU                                      Program.Broadcast("BNU"' "DEL"' item' 0' reason' user);                                      return DelItemFromList(item' 11);                                  case 12: //BNA                                      Program.Broadcast("BNA"' "DEL"' item' 0' reason' user);                                      return DelItemFromList(item' 12);                                  case 20: //BES                                      Program.Broadcast("BES"' "DEL"' item' 0' reason' user);                                      return DelItemFromList(item' 20);                                  default:                                      return ""; //Should never be called' but compiler complains otherwise                              }                          case "show":                              switch (listtype)                              {                                  case 0: //Whitelist                                  case 1: //Blacklist                                  case 6: //Greylist                                      return ShowUserOnList(item' "");                                  case 2: //Adminlist                                  case 5: //Botlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return ShowUserOnList(item' project);                                  case 10: //Watchlist                                      return ShowPageOnWatchlist(item' project);                                  case 11: //BNU                                      return ShowItemOnList(item' 11);                                  case 12: //BNA                                      return ShowItemOnList(item' 12);                                  case 20: //BES                                      return ShowItemOnList(item' 20);                                  default:                                      return ""; //Should never be called' but compiler complains otherwise                              }                          case "test":                              switch (listtype)                              {                                  case 11: //BNU                                      return TestItemOnList(item' 11);                                  case 12: //BNA                                      return TestItemOnList(item' 12);                                  case 20: //BES                                      return TestItemOnList(item' 20);                                  default:                                      return (string)Program.msgs["20002"];                              }                          default:                              return ""; //Should never be called' but compiler complains otherwise                      }
Magic Number,CVNBot,ListManager,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\ListManager.cs,HandleListCommand,The following statement contains a magic number: switch (cmd)                      {                          case "add":                              switch (listtype)                              {                                  case 0: //Whitelist                                      Program.Broadcast("WL"' "ADD"' item' len' reason' user);                                      return AddUserToList(item' ""' UserType.whitelisted' user' reason' len);                                  case 1: //Blacklist                                      Program.Broadcast("BL"' "ADD"' item' len' reason' user);                                      return AddUserToList(item' ""' UserType.blacklisted' user' reason' len);                                  case 6: //Greylist                                      return "You cannot directly add users to the greylist";                                  case 2: //Adminlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return AddUserToList(item' project' UserType.admin' user' reason' len);                                  case 5: //Botlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return AddUserToList(item' project' UserType.bot' user' reason' len);                                  case 10: //Watchlist                                      if (project == "")                                          Program.Broadcast("CVP"' "ADD"' item' len' reason' user);                                      return AddPageToWatchlist(item' project' user' reason' len);                                  case 11: //BNU                                      Program.Broadcast("BNU"' "ADD"' item' len' reason' user);                                      return AddItemToList(item' 11' user' reason' len);                                  case 12: //BNA                                      Program.Broadcast("BNA"' "ADD"' item' len' reason' user);                                      return AddItemToList(item' 12' user' reason' len);                                  case 20: //BES                                      Program.Broadcast("BES"' "ADD"' item' len' reason' user);                                      return AddItemToList(item' 20' user' reason' len);                                  default:                                      return ""; //Should never be called' but compiler complains otherwise                              }                          case "del":                              switch (listtype)                              {                                  case 0: //Whitelist                                      Program.Broadcast("WL"' "DEL"' item' 0' reason' user);                                      return DelUserFromList(item' ""' UserType.whitelisted);                                  case 1: //Blacklist                                      Program.Broadcast("BL"' "DEL"' item' 0' reason' user);                                      return DelUserFromList(item' ""' UserType.blacklisted);                                  case 6: //Greylist                                      Program.Broadcast("GL"' "DEL"' item' 0' reason' user);                                      return DelUserFromList(item' ""' UserType.greylisted);                                  case 2: //Adminlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return DelUserFromList(item' project' UserType.admin);                                  case 5: //Botlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return DelUserFromList(item' project' UserType.bot);                                  case 10: //Watchlist                                      if (project == "")                                          Program.Broadcast("CVP"' "DEL"' item' len' reason' user);                                      return DelPageFromWatchlist(item' project);                                  case 11: //BNU                                      Program.Broadcast("BNU"' "DEL"' item' 0' reason' user);                                      return DelItemFromList(item' 11);                                  case 12: //BNA                                      Program.Broadcast("BNA"' "DEL"' item' 0' reason' user);                                      return DelItemFromList(item' 12);                                  case 20: //BES                                      Program.Broadcast("BES"' "DEL"' item' 0' reason' user);                                      return DelItemFromList(item' 20);                                  default:                                      return ""; //Should never be called' but compiler complains otherwise                              }                          case "show":                              switch (listtype)                              {                                  case 0: //Whitelist                                  case 1: //Blacklist                                  case 6: //Greylist                                      return ShowUserOnList(item' "");                                  case 2: //Adminlist                                  case 5: //Botlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return ShowUserOnList(item' project);                                  case 10: //Watchlist                                      return ShowPageOnWatchlist(item' project);                                  case 11: //BNU                                      return ShowItemOnList(item' 11);                                  case 12: //BNA                                      return ShowItemOnList(item' 12);                                  case 20: //BES                                      return ShowItemOnList(item' 20);                                  default:                                      return ""; //Should never be called' but compiler complains otherwise                              }                          case "test":                              switch (listtype)                              {                                  case 11: //BNU                                      return TestItemOnList(item' 11);                                  case 12: //BNA                                      return TestItemOnList(item' 12);                                  case 20: //BES                                      return TestItemOnList(item' 20);                                  default:                                      return (string)Program.msgs["20002"];                              }                          default:                              return ""; //Should never be called' but compiler complains otherwise                      }
Magic Number,CVNBot,ListManager,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\ListManager.cs,HandleListCommand,The following statement contains a magic number: switch (cmd)                      {                          case "add":                              switch (listtype)                              {                                  case 0: //Whitelist                                      Program.Broadcast("WL"' "ADD"' item' len' reason' user);                                      return AddUserToList(item' ""' UserType.whitelisted' user' reason' len);                                  case 1: //Blacklist                                      Program.Broadcast("BL"' "ADD"' item' len' reason' user);                                      return AddUserToList(item' ""' UserType.blacklisted' user' reason' len);                                  case 6: //Greylist                                      return "You cannot directly add users to the greylist";                                  case 2: //Adminlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return AddUserToList(item' project' UserType.admin' user' reason' len);                                  case 5: //Botlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return AddUserToList(item' project' UserType.bot' user' reason' len);                                  case 10: //Watchlist                                      if (project == "")                                          Program.Broadcast("CVP"' "ADD"' item' len' reason' user);                                      return AddPageToWatchlist(item' project' user' reason' len);                                  case 11: //BNU                                      Program.Broadcast("BNU"' "ADD"' item' len' reason' user);                                      return AddItemToList(item' 11' user' reason' len);                                  case 12: //BNA                                      Program.Broadcast("BNA"' "ADD"' item' len' reason' user);                                      return AddItemToList(item' 12' user' reason' len);                                  case 20: //BES                                      Program.Broadcast("BES"' "ADD"' item' len' reason' user);                                      return AddItemToList(item' 20' user' reason' len);                                  default:                                      return ""; //Should never be called' but compiler complains otherwise                              }                          case "del":                              switch (listtype)                              {                                  case 0: //Whitelist                                      Program.Broadcast("WL"' "DEL"' item' 0' reason' user);                                      return DelUserFromList(item' ""' UserType.whitelisted);                                  case 1: //Blacklist                                      Program.Broadcast("BL"' "DEL"' item' 0' reason' user);                                      return DelUserFromList(item' ""' UserType.blacklisted);                                  case 6: //Greylist                                      Program.Broadcast("GL"' "DEL"' item' 0' reason' user);                                      return DelUserFromList(item' ""' UserType.greylisted);                                  case 2: //Adminlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return DelUserFromList(item' project' UserType.admin);                                  case 5: //Botlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return DelUserFromList(item' project' UserType.bot);                                  case 10: //Watchlist                                      if (project == "")                                          Program.Broadcast("CVP"' "DEL"' item' len' reason' user);                                      return DelPageFromWatchlist(item' project);                                  case 11: //BNU                                      Program.Broadcast("BNU"' "DEL"' item' 0' reason' user);                                      return DelItemFromList(item' 11);                                  case 12: //BNA                                      Program.Broadcast("BNA"' "DEL"' item' 0' reason' user);                                      return DelItemFromList(item' 12);                                  case 20: //BES                                      Program.Broadcast("BES"' "DEL"' item' 0' reason' user);                                      return DelItemFromList(item' 20);                                  default:                                      return ""; //Should never be called' but compiler complains otherwise                              }                          case "show":                              switch (listtype)                              {                                  case 0: //Whitelist                                  case 1: //Blacklist                                  case 6: //Greylist                                      return ShowUserOnList(item' "");                                  case 2: //Adminlist                                  case 5: //Botlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return ShowUserOnList(item' project);                                  case 10: //Watchlist                                      return ShowPageOnWatchlist(item' project);                                  case 11: //BNU                                      return ShowItemOnList(item' 11);                                  case 12: //BNA                                      return ShowItemOnList(item' 12);                                  case 20: //BES                                      return ShowItemOnList(item' 20);                                  default:                                      return ""; //Should never be called' but compiler complains otherwise                              }                          case "test":                              switch (listtype)                              {                                  case 11: //BNU                                      return TestItemOnList(item' 11);                                  case 12: //BNA                                      return TestItemOnList(item' 12);                                  case 20: //BES                                      return TestItemOnList(item' 20);                                  default:                                      return (string)Program.msgs["20002"];                              }                          default:                              return ""; //Should never be called' but compiler complains otherwise                      }
Magic Number,CVNBot,ListManager,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\ListManager.cs,HandleListCommand,The following statement contains a magic number: switch (cmd)                      {                          case "add":                              switch (listtype)                              {                                  case 0: //Whitelist                                      Program.Broadcast("WL"' "ADD"' item' len' reason' user);                                      return AddUserToList(item' ""' UserType.whitelisted' user' reason' len);                                  case 1: //Blacklist                                      Program.Broadcast("BL"' "ADD"' item' len' reason' user);                                      return AddUserToList(item' ""' UserType.blacklisted' user' reason' len);                                  case 6: //Greylist                                      return "You cannot directly add users to the greylist";                                  case 2: //Adminlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return AddUserToList(item' project' UserType.admin' user' reason' len);                                  case 5: //Botlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return AddUserToList(item' project' UserType.bot' user' reason' len);                                  case 10: //Watchlist                                      if (project == "")                                          Program.Broadcast("CVP"' "ADD"' item' len' reason' user);                                      return AddPageToWatchlist(item' project' user' reason' len);                                  case 11: //BNU                                      Program.Broadcast("BNU"' "ADD"' item' len' reason' user);                                      return AddItemToList(item' 11' user' reason' len);                                  case 12: //BNA                                      Program.Broadcast("BNA"' "ADD"' item' len' reason' user);                                      return AddItemToList(item' 12' user' reason' len);                                  case 20: //BES                                      Program.Broadcast("BES"' "ADD"' item' len' reason' user);                                      return AddItemToList(item' 20' user' reason' len);                                  default:                                      return ""; //Should never be called' but compiler complains otherwise                              }                          case "del":                              switch (listtype)                              {                                  case 0: //Whitelist                                      Program.Broadcast("WL"' "DEL"' item' 0' reason' user);                                      return DelUserFromList(item' ""' UserType.whitelisted);                                  case 1: //Blacklist                                      Program.Broadcast("BL"' "DEL"' item' 0' reason' user);                                      return DelUserFromList(item' ""' UserType.blacklisted);                                  case 6: //Greylist                                      Program.Broadcast("GL"' "DEL"' item' 0' reason' user);                                      return DelUserFromList(item' ""' UserType.greylisted);                                  case 2: //Adminlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return DelUserFromList(item' project' UserType.admin);                                  case 5: //Botlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return DelUserFromList(item' project' UserType.bot);                                  case 10: //Watchlist                                      if (project == "")                                          Program.Broadcast("CVP"' "DEL"' item' len' reason' user);                                      return DelPageFromWatchlist(item' project);                                  case 11: //BNU                                      Program.Broadcast("BNU"' "DEL"' item' 0' reason' user);                                      return DelItemFromList(item' 11);                                  case 12: //BNA                                      Program.Broadcast("BNA"' "DEL"' item' 0' reason' user);                                      return DelItemFromList(item' 12);                                  case 20: //BES                                      Program.Broadcast("BES"' "DEL"' item' 0' reason' user);                                      return DelItemFromList(item' 20);                                  default:                                      return ""; //Should never be called' but compiler complains otherwise                              }                          case "show":                              switch (listtype)                              {                                  case 0: //Whitelist                                  case 1: //Blacklist                                  case 6: //Greylist                                      return ShowUserOnList(item' "");                                  case 2: //Adminlist                                  case 5: //Botlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return ShowUserOnList(item' project);                                  case 10: //Watchlist                                      return ShowPageOnWatchlist(item' project);                                  case 11: //BNU                                      return ShowItemOnList(item' 11);                                  case 12: //BNA                                      return ShowItemOnList(item' 12);                                  case 20: //BES                                      return ShowItemOnList(item' 20);                                  default:                                      return ""; //Should never be called' but compiler complains otherwise                              }                          case "test":                              switch (listtype)                              {                                  case 11: //BNU                                      return TestItemOnList(item' 11);                                  case 12: //BNA                                      return TestItemOnList(item' 12);                                  case 20: //BES                                      return TestItemOnList(item' 20);                                  default:                                      return (string)Program.msgs["20002"];                              }                          default:                              return ""; //Should never be called' but compiler complains otherwise                      }
Magic Number,CVNBot,ListManager,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\ListManager.cs,HandleListCommand,The following statement contains a magic number: switch (cmd)                      {                          case "add":                              switch (listtype)                              {                                  case 0: //Whitelist                                      Program.Broadcast("WL"' "ADD"' item' len' reason' user);                                      return AddUserToList(item' ""' UserType.whitelisted' user' reason' len);                                  case 1: //Blacklist                                      Program.Broadcast("BL"' "ADD"' item' len' reason' user);                                      return AddUserToList(item' ""' UserType.blacklisted' user' reason' len);                                  case 6: //Greylist                                      return "You cannot directly add users to the greylist";                                  case 2: //Adminlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return AddUserToList(item' project' UserType.admin' user' reason' len);                                  case 5: //Botlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return AddUserToList(item' project' UserType.bot' user' reason' len);                                  case 10: //Watchlist                                      if (project == "")                                          Program.Broadcast("CVP"' "ADD"' item' len' reason' user);                                      return AddPageToWatchlist(item' project' user' reason' len);                                  case 11: //BNU                                      Program.Broadcast("BNU"' "ADD"' item' len' reason' user);                                      return AddItemToList(item' 11' user' reason' len);                                  case 12: //BNA                                      Program.Broadcast("BNA"' "ADD"' item' len' reason' user);                                      return AddItemToList(item' 12' user' reason' len);                                  case 20: //BES                                      Program.Broadcast("BES"' "ADD"' item' len' reason' user);                                      return AddItemToList(item' 20' user' reason' len);                                  default:                                      return ""; //Should never be called' but compiler complains otherwise                              }                          case "del":                              switch (listtype)                              {                                  case 0: //Whitelist                                      Program.Broadcast("WL"' "DEL"' item' 0' reason' user);                                      return DelUserFromList(item' ""' UserType.whitelisted);                                  case 1: //Blacklist                                      Program.Broadcast("BL"' "DEL"' item' 0' reason' user);                                      return DelUserFromList(item' ""' UserType.blacklisted);                                  case 6: //Greylist                                      Program.Broadcast("GL"' "DEL"' item' 0' reason' user);                                      return DelUserFromList(item' ""' UserType.greylisted);                                  case 2: //Adminlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return DelUserFromList(item' project' UserType.admin);                                  case 5: //Botlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return DelUserFromList(item' project' UserType.bot);                                  case 10: //Watchlist                                      if (project == "")                                          Program.Broadcast("CVP"' "DEL"' item' len' reason' user);                                      return DelPageFromWatchlist(item' project);                                  case 11: //BNU                                      Program.Broadcast("BNU"' "DEL"' item' 0' reason' user);                                      return DelItemFromList(item' 11);                                  case 12: //BNA                                      Program.Broadcast("BNA"' "DEL"' item' 0' reason' user);                                      return DelItemFromList(item' 12);                                  case 20: //BES                                      Program.Broadcast("BES"' "DEL"' item' 0' reason' user);                                      return DelItemFromList(item' 20);                                  default:                                      return ""; //Should never be called' but compiler complains otherwise                              }                          case "show":                              switch (listtype)                              {                                  case 0: //Whitelist                                  case 1: //Blacklist                                  case 6: //Greylist                                      return ShowUserOnList(item' "");                                  case 2: //Adminlist                                  case 5: //Botlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return ShowUserOnList(item' project);                                  case 10: //Watchlist                                      return ShowPageOnWatchlist(item' project);                                  case 11: //BNU                                      return ShowItemOnList(item' 11);                                  case 12: //BNA                                      return ShowItemOnList(item' 12);                                  case 20: //BES                                      return ShowItemOnList(item' 20);                                  default:                                      return ""; //Should never be called' but compiler complains otherwise                              }                          case "test":                              switch (listtype)                              {                                  case 11: //BNU                                      return TestItemOnList(item' 11);                                  case 12: //BNA                                      return TestItemOnList(item' 12);                                  case 20: //BES                                      return TestItemOnList(item' 20);                                  default:                                      return (string)Program.msgs["20002"];                              }                          default:                              return ""; //Should never be called' but compiler complains otherwise                      }
Magic Number,CVNBot,ListManager,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\ListManager.cs,HandleListCommand,The following statement contains a magic number: switch (cmd)                      {                          case "add":                              switch (listtype)                              {                                  case 0: //Whitelist                                      Program.Broadcast("WL"' "ADD"' item' len' reason' user);                                      return AddUserToList(item' ""' UserType.whitelisted' user' reason' len);                                  case 1: //Blacklist                                      Program.Broadcast("BL"' "ADD"' item' len' reason' user);                                      return AddUserToList(item' ""' UserType.blacklisted' user' reason' len);                                  case 6: //Greylist                                      return "You cannot directly add users to the greylist";                                  case 2: //Adminlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return AddUserToList(item' project' UserType.admin' user' reason' len);                                  case 5: //Botlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return AddUserToList(item' project' UserType.bot' user' reason' len);                                  case 10: //Watchlist                                      if (project == "")                                          Program.Broadcast("CVP"' "ADD"' item' len' reason' user);                                      return AddPageToWatchlist(item' project' user' reason' len);                                  case 11: //BNU                                      Program.Broadcast("BNU"' "ADD"' item' len' reason' user);                                      return AddItemToList(item' 11' user' reason' len);                                  case 12: //BNA                                      Program.Broadcast("BNA"' "ADD"' item' len' reason' user);                                      return AddItemToList(item' 12' user' reason' len);                                  case 20: //BES                                      Program.Broadcast("BES"' "ADD"' item' len' reason' user);                                      return AddItemToList(item' 20' user' reason' len);                                  default:                                      return ""; //Should never be called' but compiler complains otherwise                              }                          case "del":                              switch (listtype)                              {                                  case 0: //Whitelist                                      Program.Broadcast("WL"' "DEL"' item' 0' reason' user);                                      return DelUserFromList(item' ""' UserType.whitelisted);                                  case 1: //Blacklist                                      Program.Broadcast("BL"' "DEL"' item' 0' reason' user);                                      return DelUserFromList(item' ""' UserType.blacklisted);                                  case 6: //Greylist                                      Program.Broadcast("GL"' "DEL"' item' 0' reason' user);                                      return DelUserFromList(item' ""' UserType.greylisted);                                  case 2: //Adminlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return DelUserFromList(item' project' UserType.admin);                                  case 5: //Botlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return DelUserFromList(item' project' UserType.bot);                                  case 10: //Watchlist                                      if (project == "")                                          Program.Broadcast("CVP"' "DEL"' item' len' reason' user);                                      return DelPageFromWatchlist(item' project);                                  case 11: //BNU                                      Program.Broadcast("BNU"' "DEL"' item' 0' reason' user);                                      return DelItemFromList(item' 11);                                  case 12: //BNA                                      Program.Broadcast("BNA"' "DEL"' item' 0' reason' user);                                      return DelItemFromList(item' 12);                                  case 20: //BES                                      Program.Broadcast("BES"' "DEL"' item' 0' reason' user);                                      return DelItemFromList(item' 20);                                  default:                                      return ""; //Should never be called' but compiler complains otherwise                              }                          case "show":                              switch (listtype)                              {                                  case 0: //Whitelist                                  case 1: //Blacklist                                  case 6: //Greylist                                      return ShowUserOnList(item' "");                                  case 2: //Adminlist                                  case 5: //Botlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return ShowUserOnList(item' project);                                  case 10: //Watchlist                                      return ShowPageOnWatchlist(item' project);                                  case 11: //BNU                                      return ShowItemOnList(item' 11);                                  case 12: //BNA                                      return ShowItemOnList(item' 12);                                  case 20: //BES                                      return ShowItemOnList(item' 20);                                  default:                                      return ""; //Should never be called' but compiler complains otherwise                              }                          case "test":                              switch (listtype)                              {                                  case 11: //BNU                                      return TestItemOnList(item' 11);                                  case 12: //BNA                                      return TestItemOnList(item' 12);                                  case 20: //BES                                      return TestItemOnList(item' 20);                                  default:                                      return (string)Program.msgs["20002"];                              }                          default:                              return ""; //Should never be called' but compiler complains otherwise                      }
Magic Number,CVNBot,ListManager,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\ListManager.cs,HandleListCommand,The following statement contains a magic number: switch (cmd)                      {                          case "add":                              switch (listtype)                              {                                  case 0: //Whitelist                                      Program.Broadcast("WL"' "ADD"' item' len' reason' user);                                      return AddUserToList(item' ""' UserType.whitelisted' user' reason' len);                                  case 1: //Blacklist                                      Program.Broadcast("BL"' "ADD"' item' len' reason' user);                                      return AddUserToList(item' ""' UserType.blacklisted' user' reason' len);                                  case 6: //Greylist                                      return "You cannot directly add users to the greylist";                                  case 2: //Adminlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return AddUserToList(item' project' UserType.admin' user' reason' len);                                  case 5: //Botlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return AddUserToList(item' project' UserType.bot' user' reason' len);                                  case 10: //Watchlist                                      if (project == "")                                          Program.Broadcast("CVP"' "ADD"' item' len' reason' user);                                      return AddPageToWatchlist(item' project' user' reason' len);                                  case 11: //BNU                                      Program.Broadcast("BNU"' "ADD"' item' len' reason' user);                                      return AddItemToList(item' 11' user' reason' len);                                  case 12: //BNA                                      Program.Broadcast("BNA"' "ADD"' item' len' reason' user);                                      return AddItemToList(item' 12' user' reason' len);                                  case 20: //BES                                      Program.Broadcast("BES"' "ADD"' item' len' reason' user);                                      return AddItemToList(item' 20' user' reason' len);                                  default:                                      return ""; //Should never be called' but compiler complains otherwise                              }                          case "del":                              switch (listtype)                              {                                  case 0: //Whitelist                                      Program.Broadcast("WL"' "DEL"' item' 0' reason' user);                                      return DelUserFromList(item' ""' UserType.whitelisted);                                  case 1: //Blacklist                                      Program.Broadcast("BL"' "DEL"' item' 0' reason' user);                                      return DelUserFromList(item' ""' UserType.blacklisted);                                  case 6: //Greylist                                      Program.Broadcast("GL"' "DEL"' item' 0' reason' user);                                      return DelUserFromList(item' ""' UserType.greylisted);                                  case 2: //Adminlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return DelUserFromList(item' project' UserType.admin);                                  case 5: //Botlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return DelUserFromList(item' project' UserType.bot);                                  case 10: //Watchlist                                      if (project == "")                                          Program.Broadcast("CVP"' "DEL"' item' len' reason' user);                                      return DelPageFromWatchlist(item' project);                                  case 11: //BNU                                      Program.Broadcast("BNU"' "DEL"' item' 0' reason' user);                                      return DelItemFromList(item' 11);                                  case 12: //BNA                                      Program.Broadcast("BNA"' "DEL"' item' 0' reason' user);                                      return DelItemFromList(item' 12);                                  case 20: //BES                                      Program.Broadcast("BES"' "DEL"' item' 0' reason' user);                                      return DelItemFromList(item' 20);                                  default:                                      return ""; //Should never be called' but compiler complains otherwise                              }                          case "show":                              switch (listtype)                              {                                  case 0: //Whitelist                                  case 1: //Blacklist                                  case 6: //Greylist                                      return ShowUserOnList(item' "");                                  case 2: //Adminlist                                  case 5: //Botlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return ShowUserOnList(item' project);                                  case 10: //Watchlist                                      return ShowPageOnWatchlist(item' project);                                  case 11: //BNU                                      return ShowItemOnList(item' 11);                                  case 12: //BNA                                      return ShowItemOnList(item' 12);                                  case 20: //BES                                      return ShowItemOnList(item' 20);                                  default:                                      return ""; //Should never be called' but compiler complains otherwise                              }                          case "test":                              switch (listtype)                              {                                  case 11: //BNU                                      return TestItemOnList(item' 11);                                  case 12: //BNA                                      return TestItemOnList(item' 12);                                  case 20: //BES                                      return TestItemOnList(item' 20);                                  default:                                      return (string)Program.msgs["20002"];                              }                          default:                              return ""; //Should never be called' but compiler complains otherwise                      }
Magic Number,CVNBot,ListManager,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\ListManager.cs,HandleListCommand,The following statement contains a magic number: switch (cmd)                      {                          case "add":                              switch (listtype)                              {                                  case 0: //Whitelist                                      Program.Broadcast("WL"' "ADD"' item' len' reason' user);                                      return AddUserToList(item' ""' UserType.whitelisted' user' reason' len);                                  case 1: //Blacklist                                      Program.Broadcast("BL"' "ADD"' item' len' reason' user);                                      return AddUserToList(item' ""' UserType.blacklisted' user' reason' len);                                  case 6: //Greylist                                      return "You cannot directly add users to the greylist";                                  case 2: //Adminlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return AddUserToList(item' project' UserType.admin' user' reason' len);                                  case 5: //Botlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return AddUserToList(item' project' UserType.bot' user' reason' len);                                  case 10: //Watchlist                                      if (project == "")                                          Program.Broadcast("CVP"' "ADD"' item' len' reason' user);                                      return AddPageToWatchlist(item' project' user' reason' len);                                  case 11: //BNU                                      Program.Broadcast("BNU"' "ADD"' item' len' reason' user);                                      return AddItemToList(item' 11' user' reason' len);                                  case 12: //BNA                                      Program.Broadcast("BNA"' "ADD"' item' len' reason' user);                                      return AddItemToList(item' 12' user' reason' len);                                  case 20: //BES                                      Program.Broadcast("BES"' "ADD"' item' len' reason' user);                                      return AddItemToList(item' 20' user' reason' len);                                  default:                                      return ""; //Should never be called' but compiler complains otherwise                              }                          case "del":                              switch (listtype)                              {                                  case 0: //Whitelist                                      Program.Broadcast("WL"' "DEL"' item' 0' reason' user);                                      return DelUserFromList(item' ""' UserType.whitelisted);                                  case 1: //Blacklist                                      Program.Broadcast("BL"' "DEL"' item' 0' reason' user);                                      return DelUserFromList(item' ""' UserType.blacklisted);                                  case 6: //Greylist                                      Program.Broadcast("GL"' "DEL"' item' 0' reason' user);                                      return DelUserFromList(item' ""' UserType.greylisted);                                  case 2: //Adminlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return DelUserFromList(item' project' UserType.admin);                                  case 5: //Botlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return DelUserFromList(item' project' UserType.bot);                                  case 10: //Watchlist                                      if (project == "")                                          Program.Broadcast("CVP"' "DEL"' item' len' reason' user);                                      return DelPageFromWatchlist(item' project);                                  case 11: //BNU                                      Program.Broadcast("BNU"' "DEL"' item' 0' reason' user);                                      return DelItemFromList(item' 11);                                  case 12: //BNA                                      Program.Broadcast("BNA"' "DEL"' item' 0' reason' user);                                      return DelItemFromList(item' 12);                                  case 20: //BES                                      Program.Broadcast("BES"' "DEL"' item' 0' reason' user);                                      return DelItemFromList(item' 20);                                  default:                                      return ""; //Should never be called' but compiler complains otherwise                              }                          case "show":                              switch (listtype)                              {                                  case 0: //Whitelist                                  case 1: //Blacklist                                  case 6: //Greylist                                      return ShowUserOnList(item' "");                                  case 2: //Adminlist                                  case 5: //Botlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return ShowUserOnList(item' project);                                  case 10: //Watchlist                                      return ShowPageOnWatchlist(item' project);                                  case 11: //BNU                                      return ShowItemOnList(item' 11);                                  case 12: //BNA                                      return ShowItemOnList(item' 12);                                  case 20: //BES                                      return ShowItemOnList(item' 20);                                  default:                                      return ""; //Should never be called' but compiler complains otherwise                              }                          case "test":                              switch (listtype)                              {                                  case 11: //BNU                                      return TestItemOnList(item' 11);                                  case 12: //BNA                                      return TestItemOnList(item' 12);                                  case 20: //BES                                      return TestItemOnList(item' 20);                                  default:                                      return (string)Program.msgs["20002"];                              }                          default:                              return ""; //Should never be called' but compiler complains otherwise                      }
Magic Number,CVNBot,ListManager,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\ListManager.cs,HandleListCommand,The following statement contains a magic number: switch (cmd)                      {                          case "add":                              switch (listtype)                              {                                  case 0: //Whitelist                                      Program.Broadcast("WL"' "ADD"' item' len' reason' user);                                      return AddUserToList(item' ""' UserType.whitelisted' user' reason' len);                                  case 1: //Blacklist                                      Program.Broadcast("BL"' "ADD"' item' len' reason' user);                                      return AddUserToList(item' ""' UserType.blacklisted' user' reason' len);                                  case 6: //Greylist                                      return "You cannot directly add users to the greylist";                                  case 2: //Adminlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return AddUserToList(item' project' UserType.admin' user' reason' len);                                  case 5: //Botlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return AddUserToList(item' project' UserType.bot' user' reason' len);                                  case 10: //Watchlist                                      if (project == "")                                          Program.Broadcast("CVP"' "ADD"' item' len' reason' user);                                      return AddPageToWatchlist(item' project' user' reason' len);                                  case 11: //BNU                                      Program.Broadcast("BNU"' "ADD"' item' len' reason' user);                                      return AddItemToList(item' 11' user' reason' len);                                  case 12: //BNA                                      Program.Broadcast("BNA"' "ADD"' item' len' reason' user);                                      return AddItemToList(item' 12' user' reason' len);                                  case 20: //BES                                      Program.Broadcast("BES"' "ADD"' item' len' reason' user);                                      return AddItemToList(item' 20' user' reason' len);                                  default:                                      return ""; //Should never be called' but compiler complains otherwise                              }                          case "del":                              switch (listtype)                              {                                  case 0: //Whitelist                                      Program.Broadcast("WL"' "DEL"' item' 0' reason' user);                                      return DelUserFromList(item' ""' UserType.whitelisted);                                  case 1: //Blacklist                                      Program.Broadcast("BL"' "DEL"' item' 0' reason' user);                                      return DelUserFromList(item' ""' UserType.blacklisted);                                  case 6: //Greylist                                      Program.Broadcast("GL"' "DEL"' item' 0' reason' user);                                      return DelUserFromList(item' ""' UserType.greylisted);                                  case 2: //Adminlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return DelUserFromList(item' project' UserType.admin);                                  case 5: //Botlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return DelUserFromList(item' project' UserType.bot);                                  case 10: //Watchlist                                      if (project == "")                                          Program.Broadcast("CVP"' "DEL"' item' len' reason' user);                                      return DelPageFromWatchlist(item' project);                                  case 11: //BNU                                      Program.Broadcast("BNU"' "DEL"' item' 0' reason' user);                                      return DelItemFromList(item' 11);                                  case 12: //BNA                                      Program.Broadcast("BNA"' "DEL"' item' 0' reason' user);                                      return DelItemFromList(item' 12);                                  case 20: //BES                                      Program.Broadcast("BES"' "DEL"' item' 0' reason' user);                                      return DelItemFromList(item' 20);                                  default:                                      return ""; //Should never be called' but compiler complains otherwise                              }                          case "show":                              switch (listtype)                              {                                  case 0: //Whitelist                                  case 1: //Blacklist                                  case 6: //Greylist                                      return ShowUserOnList(item' "");                                  case 2: //Adminlist                                  case 5: //Botlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return ShowUserOnList(item' project);                                  case 10: //Watchlist                                      return ShowPageOnWatchlist(item' project);                                  case 11: //BNU                                      return ShowItemOnList(item' 11);                                  case 12: //BNA                                      return ShowItemOnList(item' 12);                                  case 20: //BES                                      return ShowItemOnList(item' 20);                                  default:                                      return ""; //Should never be called' but compiler complains otherwise                              }                          case "test":                              switch (listtype)                              {                                  case 11: //BNU                                      return TestItemOnList(item' 11);                                  case 12: //BNA                                      return TestItemOnList(item' 12);                                  case 20: //BES                                      return TestItemOnList(item' 20);                                  default:                                      return (string)Program.msgs["20002"];                              }                          default:                              return ""; //Should never be called' but compiler complains otherwise                      }
Magic Number,CVNBot,ListManager,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\ListManager.cs,HandleListCommand,The following statement contains a magic number: switch (cmd)                      {                          case "add":                              switch (listtype)                              {                                  case 0: //Whitelist                                      Program.Broadcast("WL"' "ADD"' item' len' reason' user);                                      return AddUserToList(item' ""' UserType.whitelisted' user' reason' len);                                  case 1: //Blacklist                                      Program.Broadcast("BL"' "ADD"' item' len' reason' user);                                      return AddUserToList(item' ""' UserType.blacklisted' user' reason' len);                                  case 6: //Greylist                                      return "You cannot directly add users to the greylist";                                  case 2: //Adminlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return AddUserToList(item' project' UserType.admin' user' reason' len);                                  case 5: //Botlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return AddUserToList(item' project' UserType.bot' user' reason' len);                                  case 10: //Watchlist                                      if (project == "")                                          Program.Broadcast("CVP"' "ADD"' item' len' reason' user);                                      return AddPageToWatchlist(item' project' user' reason' len);                                  case 11: //BNU                                      Program.Broadcast("BNU"' "ADD"' item' len' reason' user);                                      return AddItemToList(item' 11' user' reason' len);                                  case 12: //BNA                                      Program.Broadcast("BNA"' "ADD"' item' len' reason' user);                                      return AddItemToList(item' 12' user' reason' len);                                  case 20: //BES                                      Program.Broadcast("BES"' "ADD"' item' len' reason' user);                                      return AddItemToList(item' 20' user' reason' len);                                  default:                                      return ""; //Should never be called' but compiler complains otherwise                              }                          case "del":                              switch (listtype)                              {                                  case 0: //Whitelist                                      Program.Broadcast("WL"' "DEL"' item' 0' reason' user);                                      return DelUserFromList(item' ""' UserType.whitelisted);                                  case 1: //Blacklist                                      Program.Broadcast("BL"' "DEL"' item' 0' reason' user);                                      return DelUserFromList(item' ""' UserType.blacklisted);                                  case 6: //Greylist                                      Program.Broadcast("GL"' "DEL"' item' 0' reason' user);                                      return DelUserFromList(item' ""' UserType.greylisted);                                  case 2: //Adminlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return DelUserFromList(item' project' UserType.admin);                                  case 5: //Botlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return DelUserFromList(item' project' UserType.bot);                                  case 10: //Watchlist                                      if (project == "")                                          Program.Broadcast("CVP"' "DEL"' item' len' reason' user);                                      return DelPageFromWatchlist(item' project);                                  case 11: //BNU                                      Program.Broadcast("BNU"' "DEL"' item' 0' reason' user);                                      return DelItemFromList(item' 11);                                  case 12: //BNA                                      Program.Broadcast("BNA"' "DEL"' item' 0' reason' user);                                      return DelItemFromList(item' 12);                                  case 20: //BES                                      Program.Broadcast("BES"' "DEL"' item' 0' reason' user);                                      return DelItemFromList(item' 20);                                  default:                                      return ""; //Should never be called' but compiler complains otherwise                              }                          case "show":                              switch (listtype)                              {                                  case 0: //Whitelist                                  case 1: //Blacklist                                  case 6: //Greylist                                      return ShowUserOnList(item' "");                                  case 2: //Adminlist                                  case 5: //Botlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return ShowUserOnList(item' project);                                  case 10: //Watchlist                                      return ShowPageOnWatchlist(item' project);                                  case 11: //BNU                                      return ShowItemOnList(item' 11);                                  case 12: //BNA                                      return ShowItemOnList(item' 12);                                  case 20: //BES                                      return ShowItemOnList(item' 20);                                  default:                                      return ""; //Should never be called' but compiler complains otherwise                              }                          case "test":                              switch (listtype)                              {                                  case 11: //BNU                                      return TestItemOnList(item' 11);                                  case 12: //BNA                                      return TestItemOnList(item' 12);                                  case 20: //BES                                      return TestItemOnList(item' 20);                                  default:                                      return (string)Program.msgs["20002"];                              }                          default:                              return ""; //Should never be called' but compiler complains otherwise                      }
Magic Number,CVNBot,ListManager,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\ListManager.cs,HandleListCommand,The following statement contains a magic number: switch (cmd)                      {                          case "add":                              switch (listtype)                              {                                  case 0: //Whitelist                                      Program.Broadcast("WL"' "ADD"' item' len' reason' user);                                      return AddUserToList(item' ""' UserType.whitelisted' user' reason' len);                                  case 1: //Blacklist                                      Program.Broadcast("BL"' "ADD"' item' len' reason' user);                                      return AddUserToList(item' ""' UserType.blacklisted' user' reason' len);                                  case 6: //Greylist                                      return "You cannot directly add users to the greylist";                                  case 2: //Adminlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return AddUserToList(item' project' UserType.admin' user' reason' len);                                  case 5: //Botlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return AddUserToList(item' project' UserType.bot' user' reason' len);                                  case 10: //Watchlist                                      if (project == "")                                          Program.Broadcast("CVP"' "ADD"' item' len' reason' user);                                      return AddPageToWatchlist(item' project' user' reason' len);                                  case 11: //BNU                                      Program.Broadcast("BNU"' "ADD"' item' len' reason' user);                                      return AddItemToList(item' 11' user' reason' len);                                  case 12: //BNA                                      Program.Broadcast("BNA"' "ADD"' item' len' reason' user);                                      return AddItemToList(item' 12' user' reason' len);                                  case 20: //BES                                      Program.Broadcast("BES"' "ADD"' item' len' reason' user);                                      return AddItemToList(item' 20' user' reason' len);                                  default:                                      return ""; //Should never be called' but compiler complains otherwise                              }                          case "del":                              switch (listtype)                              {                                  case 0: //Whitelist                                      Program.Broadcast("WL"' "DEL"' item' 0' reason' user);                                      return DelUserFromList(item' ""' UserType.whitelisted);                                  case 1: //Blacklist                                      Program.Broadcast("BL"' "DEL"' item' 0' reason' user);                                      return DelUserFromList(item' ""' UserType.blacklisted);                                  case 6: //Greylist                                      Program.Broadcast("GL"' "DEL"' item' 0' reason' user);                                      return DelUserFromList(item' ""' UserType.greylisted);                                  case 2: //Adminlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return DelUserFromList(item' project' UserType.admin);                                  case 5: //Botlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return DelUserFromList(item' project' UserType.bot);                                  case 10: //Watchlist                                      if (project == "")                                          Program.Broadcast("CVP"' "DEL"' item' len' reason' user);                                      return DelPageFromWatchlist(item' project);                                  case 11: //BNU                                      Program.Broadcast("BNU"' "DEL"' item' 0' reason' user);                                      return DelItemFromList(item' 11);                                  case 12: //BNA                                      Program.Broadcast("BNA"' "DEL"' item' 0' reason' user);                                      return DelItemFromList(item' 12);                                  case 20: //BES                                      Program.Broadcast("BES"' "DEL"' item' 0' reason' user);                                      return DelItemFromList(item' 20);                                  default:                                      return ""; //Should never be called' but compiler complains otherwise                              }                          case "show":                              switch (listtype)                              {                                  case 0: //Whitelist                                  case 1: //Blacklist                                  case 6: //Greylist                                      return ShowUserOnList(item' "");                                  case 2: //Adminlist                                  case 5: //Botlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return ShowUserOnList(item' project);                                  case 10: //Watchlist                                      return ShowPageOnWatchlist(item' project);                                  case 11: //BNU                                      return ShowItemOnList(item' 11);                                  case 12: //BNA                                      return ShowItemOnList(item' 12);                                  case 20: //BES                                      return ShowItemOnList(item' 20);                                  default:                                      return ""; //Should never be called' but compiler complains otherwise                              }                          case "test":                              switch (listtype)                              {                                  case 11: //BNU                                      return TestItemOnList(item' 11);                                  case 12: //BNA                                      return TestItemOnList(item' 12);                                  case 20: //BES                                      return TestItemOnList(item' 20);                                  default:                                      return (string)Program.msgs["20002"];                              }                          default:                              return ""; //Should never be called' but compiler complains otherwise                      }
Magic Number,CVNBot,ListManager,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\ListManager.cs,HandleListCommand,The following statement contains a magic number: switch (cmd)                      {                          case "add":                              switch (listtype)                              {                                  case 0: //Whitelist                                      Program.Broadcast("WL"' "ADD"' item' len' reason' user);                                      return AddUserToList(item' ""' UserType.whitelisted' user' reason' len);                                  case 1: //Blacklist                                      Program.Broadcast("BL"' "ADD"' item' len' reason' user);                                      return AddUserToList(item' ""' UserType.blacklisted' user' reason' len);                                  case 6: //Greylist                                      return "You cannot directly add users to the greylist";                                  case 2: //Adminlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return AddUserToList(item' project' UserType.admin' user' reason' len);                                  case 5: //Botlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return AddUserToList(item' project' UserType.bot' user' reason' len);                                  case 10: //Watchlist                                      if (project == "")                                          Program.Broadcast("CVP"' "ADD"' item' len' reason' user);                                      return AddPageToWatchlist(item' project' user' reason' len);                                  case 11: //BNU                                      Program.Broadcast("BNU"' "ADD"' item' len' reason' user);                                      return AddItemToList(item' 11' user' reason' len);                                  case 12: //BNA                                      Program.Broadcast("BNA"' "ADD"' item' len' reason' user);                                      return AddItemToList(item' 12' user' reason' len);                                  case 20: //BES                                      Program.Broadcast("BES"' "ADD"' item' len' reason' user);                                      return AddItemToList(item' 20' user' reason' len);                                  default:                                      return ""; //Should never be called' but compiler complains otherwise                              }                          case "del":                              switch (listtype)                              {                                  case 0: //Whitelist                                      Program.Broadcast("WL"' "DEL"' item' 0' reason' user);                                      return DelUserFromList(item' ""' UserType.whitelisted);                                  case 1: //Blacklist                                      Program.Broadcast("BL"' "DEL"' item' 0' reason' user);                                      return DelUserFromList(item' ""' UserType.blacklisted);                                  case 6: //Greylist                                      Program.Broadcast("GL"' "DEL"' item' 0' reason' user);                                      return DelUserFromList(item' ""' UserType.greylisted);                                  case 2: //Adminlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return DelUserFromList(item' project' UserType.admin);                                  case 5: //Botlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return DelUserFromList(item' project' UserType.bot);                                  case 10: //Watchlist                                      if (project == "")                                          Program.Broadcast("CVP"' "DEL"' item' len' reason' user);                                      return DelPageFromWatchlist(item' project);                                  case 11: //BNU                                      Program.Broadcast("BNU"' "DEL"' item' 0' reason' user);                                      return DelItemFromList(item' 11);                                  case 12: //BNA                                      Program.Broadcast("BNA"' "DEL"' item' 0' reason' user);                                      return DelItemFromList(item' 12);                                  case 20: //BES                                      Program.Broadcast("BES"' "DEL"' item' 0' reason' user);                                      return DelItemFromList(item' 20);                                  default:                                      return ""; //Should never be called' but compiler complains otherwise                              }                          case "show":                              switch (listtype)                              {                                  case 0: //Whitelist                                  case 1: //Blacklist                                  case 6: //Greylist                                      return ShowUserOnList(item' "");                                  case 2: //Adminlist                                  case 5: //Botlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return ShowUserOnList(item' project);                                  case 10: //Watchlist                                      return ShowPageOnWatchlist(item' project);                                  case 11: //BNU                                      return ShowItemOnList(item' 11);                                  case 12: //BNA                                      return ShowItemOnList(item' 12);                                  case 20: //BES                                      return ShowItemOnList(item' 20);                                  default:                                      return ""; //Should never be called' but compiler complains otherwise                              }                          case "test":                              switch (listtype)                              {                                  case 11: //BNU                                      return TestItemOnList(item' 11);                                  case 12: //BNA                                      return TestItemOnList(item' 12);                                  case 20: //BES                                      return TestItemOnList(item' 20);                                  default:                                      return (string)Program.msgs["20002"];                              }                          default:                              return ""; //Should never be called' but compiler complains otherwise                      }
Magic Number,CVNBot,ListManager,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\ListManager.cs,HandleListCommand,The following statement contains a magic number: switch (cmd)                      {                          case "add":                              switch (listtype)                              {                                  case 0: //Whitelist                                      Program.Broadcast("WL"' "ADD"' item' len' reason' user);                                      return AddUserToList(item' ""' UserType.whitelisted' user' reason' len);                                  case 1: //Blacklist                                      Program.Broadcast("BL"' "ADD"' item' len' reason' user);                                      return AddUserToList(item' ""' UserType.blacklisted' user' reason' len);                                  case 6: //Greylist                                      return "You cannot directly add users to the greylist";                                  case 2: //Adminlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return AddUserToList(item' project' UserType.admin' user' reason' len);                                  case 5: //Botlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return AddUserToList(item' project' UserType.bot' user' reason' len);                                  case 10: //Watchlist                                      if (project == "")                                          Program.Broadcast("CVP"' "ADD"' item' len' reason' user);                                      return AddPageToWatchlist(item' project' user' reason' len);                                  case 11: //BNU                                      Program.Broadcast("BNU"' "ADD"' item' len' reason' user);                                      return AddItemToList(item' 11' user' reason' len);                                  case 12: //BNA                                      Program.Broadcast("BNA"' "ADD"' item' len' reason' user);                                      return AddItemToList(item' 12' user' reason' len);                                  case 20: //BES                                      Program.Broadcast("BES"' "ADD"' item' len' reason' user);                                      return AddItemToList(item' 20' user' reason' len);                                  default:                                      return ""; //Should never be called' but compiler complains otherwise                              }                          case "del":                              switch (listtype)                              {                                  case 0: //Whitelist                                      Program.Broadcast("WL"' "DEL"' item' 0' reason' user);                                      return DelUserFromList(item' ""' UserType.whitelisted);                                  case 1: //Blacklist                                      Program.Broadcast("BL"' "DEL"' item' 0' reason' user);                                      return DelUserFromList(item' ""' UserType.blacklisted);                                  case 6: //Greylist                                      Program.Broadcast("GL"' "DEL"' item' 0' reason' user);                                      return DelUserFromList(item' ""' UserType.greylisted);                                  case 2: //Adminlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return DelUserFromList(item' project' UserType.admin);                                  case 5: //Botlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return DelUserFromList(item' project' UserType.bot);                                  case 10: //Watchlist                                      if (project == "")                                          Program.Broadcast("CVP"' "DEL"' item' len' reason' user);                                      return DelPageFromWatchlist(item' project);                                  case 11: //BNU                                      Program.Broadcast("BNU"' "DEL"' item' 0' reason' user);                                      return DelItemFromList(item' 11);                                  case 12: //BNA                                      Program.Broadcast("BNA"' "DEL"' item' 0' reason' user);                                      return DelItemFromList(item' 12);                                  case 20: //BES                                      Program.Broadcast("BES"' "DEL"' item' 0' reason' user);                                      return DelItemFromList(item' 20);                                  default:                                      return ""; //Should never be called' but compiler complains otherwise                              }                          case "show":                              switch (listtype)                              {                                  case 0: //Whitelist                                  case 1: //Blacklist                                  case 6: //Greylist                                      return ShowUserOnList(item' "");                                  case 2: //Adminlist                                  case 5: //Botlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return ShowUserOnList(item' project);                                  case 10: //Watchlist                                      return ShowPageOnWatchlist(item' project);                                  case 11: //BNU                                      return ShowItemOnList(item' 11);                                  case 12: //BNA                                      return ShowItemOnList(item' 12);                                  case 20: //BES                                      return ShowItemOnList(item' 20);                                  default:                                      return ""; //Should never be called' but compiler complains otherwise                              }                          case "test":                              switch (listtype)                              {                                  case 11: //BNU                                      return TestItemOnList(item' 11);                                  case 12: //BNA                                      return TestItemOnList(item' 12);                                  case 20: //BES                                      return TestItemOnList(item' 20);                                  default:                                      return (string)Program.msgs["20002"];                              }                          default:                              return ""; //Should never be called' but compiler complains otherwise                      }
Magic Number,CVNBot,ListManager,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\ListManager.cs,HandleListCommand,The following statement contains a magic number: switch (cmd)                      {                          case "add":                              switch (listtype)                              {                                  case 0: //Whitelist                                      Program.Broadcast("WL"' "ADD"' item' len' reason' user);                                      return AddUserToList(item' ""' UserType.whitelisted' user' reason' len);                                  case 1: //Blacklist                                      Program.Broadcast("BL"' "ADD"' item' len' reason' user);                                      return AddUserToList(item' ""' UserType.blacklisted' user' reason' len);                                  case 6: //Greylist                                      return "You cannot directly add users to the greylist";                                  case 2: //Adminlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return AddUserToList(item' project' UserType.admin' user' reason' len);                                  case 5: //Botlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return AddUserToList(item' project' UserType.bot' user' reason' len);                                  case 10: //Watchlist                                      if (project == "")                                          Program.Broadcast("CVP"' "ADD"' item' len' reason' user);                                      return AddPageToWatchlist(item' project' user' reason' len);                                  case 11: //BNU                                      Program.Broadcast("BNU"' "ADD"' item' len' reason' user);                                      return AddItemToList(item' 11' user' reason' len);                                  case 12: //BNA                                      Program.Broadcast("BNA"' "ADD"' item' len' reason' user);                                      return AddItemToList(item' 12' user' reason' len);                                  case 20: //BES                                      Program.Broadcast("BES"' "ADD"' item' len' reason' user);                                      return AddItemToList(item' 20' user' reason' len);                                  default:                                      return ""; //Should never be called' but compiler complains otherwise                              }                          case "del":                              switch (listtype)                              {                                  case 0: //Whitelist                                      Program.Broadcast("WL"' "DEL"' item' 0' reason' user);                                      return DelUserFromList(item' ""' UserType.whitelisted);                                  case 1: //Blacklist                                      Program.Broadcast("BL"' "DEL"' item' 0' reason' user);                                      return DelUserFromList(item' ""' UserType.blacklisted);                                  case 6: //Greylist                                      Program.Broadcast("GL"' "DEL"' item' 0' reason' user);                                      return DelUserFromList(item' ""' UserType.greylisted);                                  case 2: //Adminlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return DelUserFromList(item' project' UserType.admin);                                  case 5: //Botlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return DelUserFromList(item' project' UserType.bot);                                  case 10: //Watchlist                                      if (project == "")                                          Program.Broadcast("CVP"' "DEL"' item' len' reason' user);                                      return DelPageFromWatchlist(item' project);                                  case 11: //BNU                                      Program.Broadcast("BNU"' "DEL"' item' 0' reason' user);                                      return DelItemFromList(item' 11);                                  case 12: //BNA                                      Program.Broadcast("BNA"' "DEL"' item' 0' reason' user);                                      return DelItemFromList(item' 12);                                  case 20: //BES                                      Program.Broadcast("BES"' "DEL"' item' 0' reason' user);                                      return DelItemFromList(item' 20);                                  default:                                      return ""; //Should never be called' but compiler complains otherwise                              }                          case "show":                              switch (listtype)                              {                                  case 0: //Whitelist                                  case 1: //Blacklist                                  case 6: //Greylist                                      return ShowUserOnList(item' "");                                  case 2: //Adminlist                                  case 5: //Botlist                                      if (project == "")                                          return (string)Program.msgs["20001"];                                      return ShowUserOnList(item' project);                                  case 10: //Watchlist                                      return ShowPageOnWatchlist(item' project);                                  case 11: //BNU                                      return ShowItemOnList(item' 11);                                  case 12: //BNA                                      return ShowItemOnList(item' 12);                                  case 20: //BES                                      return ShowItemOnList(item' 20);                                  default:                                      return ""; //Should never be called' but compiler complains otherwise                              }                          case "test":                              switch (listtype)                              {                                  case 11: //BNU                                      return TestItemOnList(item' 11);                                  case 12: //BNA                                      return TestItemOnList(item' 12);                                  case 20: //BES                                      return TestItemOnList(item' 20);                                  default:                                      return (string)Program.msgs["20002"];                              }                          default:                              return ""; //Should never be called' but compiler complains otherwise                      }
Magic Number,CVNBot,ListManager,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\ListManager.cs,GlobalIntel,The following statement contains a magic number: results.Add(Program.GetFormatMessage(16002' FriendlyProject(idr.GetString(0))' FriendlyList(idr.GetInt32(1))                              ' idr.GetString(2)' ParseExpiryDate(idr.GetInt64(4))' idr.GetString(3)));
Magic Number,CVNBot,ListManager,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\ListManager.cs,GlobalIntel,The following statement contains a magic number: results.Add(Program.GetFormatMessage(16002' FriendlyProject(idr.GetString(0))' FriendlyList(idr.GetInt32(1))                              ' idr.GetString(2)' ParseExpiryDate(idr.GetInt64(4))' idr.GetString(3)));
Magic Number,CVNBot,ListManager,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\ListManager.cs,GlobalIntel,The following statement contains a magic number: results.Add(Program.GetFormatMessage(16002' FriendlyProject(idr.GetString(0))' FriendlyList(idr.GetInt32(1))                              ' idr.GetString(2)' ParseExpiryDate(idr.GetInt64(4))' idr.GetString(3)));
Magic Number,CVNBot,ListManager,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\ListManager.cs,GlobalIntel,The following statement contains a magic number: results.Add(Program.GetFormatMessage(16002' FriendlyProject(idr.GetString(0))' FriendlyList(idr.GetInt32(1))                              ' idr.GetString(2)' ParseExpiryDate(idr.GetInt64(4))' idr.GetString(3)));
Magic Number,CVNBot,ListManager,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\ListManager.cs,GlobalIntel,The following statement contains a magic number: return Program.GetFormatMessage(16001' username);
Magic Number,CVNBot,ListManager,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\ListManager.cs,GlobalIntel,The following statement contains a magic number: return Program.GetFormatMessage(16000' username' String.Join(" and "' (string[])results.ToArray(typeof(string))));
Magic Number,CVNBot,ListManager,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\ListManager.cs,TestItemOnList,The following statement contains a magic number: return Program.GetFormatMessage(16200' title' lm.matchedItem' FriendlyList(list)' lm.matchedReason);
Magic Number,CVNBot,ListManager,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\ListManager.cs,TestItemOnList,The following statement contains a magic number: return Program.GetFormatMessage(16201' title' FriendlyList(list));
Magic Number,CVNBot,ListManager,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\ListManager.cs,BatchGetAllAdminsAndBots,The following statement contains a magic number: Thread.Sleep(500);
Magic Number,CVNBot,ListManager,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\ListManager.cs,BatchGetAllAdminsAndBots,The following statement contains a magic number: Thread.Sleep(500);
Magic Number,CVNBot,Program,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Program.cs,Main,The following statement contains a magic number: string[] parts = line.Split(new char[] { '=' }' 2);
Magic Number,CVNBot,Program,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Program.cs,Main,The following statement contains a magic number: irc.SendDelay = 300;
Magic Number,CVNBot,Program,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Program.cs,Main,The following statement contains a magic number: irc.Connect(config.ircServerName' 6667);
Magic Number,CVNBot,Program,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Program.cs,Main,The following statement contains a magic number: irc.Login(config.botNick' config.description + " " + version' 4' config.botNick' config.botPass);
Magic Number,CVNBot,Program,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Program.cs,Irc_OnChannelNotice,The following statement contains a magic number: switch (action)                      {                          case "ADD":                              switch (list)                              {                                  case "WL":                                      listman.AddUserToList(item' ""' ListManager.UserType.whitelisted' adder' reason' len);                                      break;                                  case "BL":                                      listman.AddUserToList(item' ""' ListManager.UserType.blacklisted' adder' reason' len);                                      break;                                  case "GL":                                      listman.AddUserToList(item' ""' ListManager.UserType.greylisted' adder' reason' len);                                      break;                                  case "BNU":                                      listman.AddItemToList(item' 11' adder' reason' len);                                      break;                                  case "BNA":                                      listman.AddItemToList(item' 12' adder' reason' len);                                      break;                                  case "BES":                                      listman.AddItemToList(item' 20' adder' reason' len);                                      break;                                  case "CVP":                                      listman.AddPageToWatchlist(item' ""' adder' reason' len);                                      break;                                      //Gracefully ignore unknown message types                              }                              break;                          case "DEL":                              switch (list)                              {                                  case "WL":                                      listman.DelUserFromList(item' ""' ListManager.UserType.whitelisted);                                      break;                                  case "BL":                                      listman.DelUserFromList(item' ""' ListManager.UserType.blacklisted);                                      break;                                  case "GL":                                      listman.DelUserFromList(item' ""' ListManager.UserType.greylisted);                                      break;                                  case "BNU":                                      listman.DelItemFromList(item' 11);                                      break;                                  case "BNA":                                      listman.DelItemFromList(item' 12);                                      break;                                  case "BES":                                      listman.DelItemFromList(item' 20);                                      break;                                  case "CVP":                                      listman.DelPageFromWatchlist(item' "");                                      break;                                      //Gracefully ignore unknown message types                              }                              break;                          case "FIND":                              if (list == "BLEEP")                                  if (prjlist.ContainsKey(item))                                  SendMessageF(SendType.Action' reason' "has " + item + "' " + adder + " :D"' Priority.High);                              break;                          case "COUNT":                              if (list == "BLEEP")                                  SendMessageF(SendType.Action' reason' "owns " + prjlist.Count.ToString() + " wikis; version is " + version'                                               Priority.High);                              break;                          case "CONFIG":                              if (list == "BLEEP")                                  BotConfigMsg(reason);                              break;                                //Gracefully ignore unknown action types                      }
Magic Number,CVNBot,Program,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Program.cs,Irc_OnChannelNotice,The following statement contains a magic number: switch (action)                      {                          case "ADD":                              switch (list)                              {                                  case "WL":                                      listman.AddUserToList(item' ""' ListManager.UserType.whitelisted' adder' reason' len);                                      break;                                  case "BL":                                      listman.AddUserToList(item' ""' ListManager.UserType.blacklisted' adder' reason' len);                                      break;                                  case "GL":                                      listman.AddUserToList(item' ""' ListManager.UserType.greylisted' adder' reason' len);                                      break;                                  case "BNU":                                      listman.AddItemToList(item' 11' adder' reason' len);                                      break;                                  case "BNA":                                      listman.AddItemToList(item' 12' adder' reason' len);                                      break;                                  case "BES":                                      listman.AddItemToList(item' 20' adder' reason' len);                                      break;                                  case "CVP":                                      listman.AddPageToWatchlist(item' ""' adder' reason' len);                                      break;                                      //Gracefully ignore unknown message types                              }                              break;                          case "DEL":                              switch (list)                              {                                  case "WL":                                      listman.DelUserFromList(item' ""' ListManager.UserType.whitelisted);                                      break;                                  case "BL":                                      listman.DelUserFromList(item' ""' ListManager.UserType.blacklisted);                                      break;                                  case "GL":                                      listman.DelUserFromList(item' ""' ListManager.UserType.greylisted);                                      break;                                  case "BNU":                                      listman.DelItemFromList(item' 11);                                      break;                                  case "BNA":                                      listman.DelItemFromList(item' 12);                                      break;                                  case "BES":                                      listman.DelItemFromList(item' 20);                                      break;                                  case "CVP":                                      listman.DelPageFromWatchlist(item' "");                                      break;                                      //Gracefully ignore unknown message types                              }                              break;                          case "FIND":                              if (list == "BLEEP")                                  if (prjlist.ContainsKey(item))                                  SendMessageF(SendType.Action' reason' "has " + item + "' " + adder + " :D"' Priority.High);                              break;                          case "COUNT":                              if (list == "BLEEP")                                  SendMessageF(SendType.Action' reason' "owns " + prjlist.Count.ToString() + " wikis; version is " + version'                                               Priority.High);                              break;                          case "CONFIG":                              if (list == "BLEEP")                                  BotConfigMsg(reason);                              break;                                //Gracefully ignore unknown action types                      }
Magic Number,CVNBot,Program,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Program.cs,Irc_OnChannelNotice,The following statement contains a magic number: switch (action)                      {                          case "ADD":                              switch (list)                              {                                  case "WL":                                      listman.AddUserToList(item' ""' ListManager.UserType.whitelisted' adder' reason' len);                                      break;                                  case "BL":                                      listman.AddUserToList(item' ""' ListManager.UserType.blacklisted' adder' reason' len);                                      break;                                  case "GL":                                      listman.AddUserToList(item' ""' ListManager.UserType.greylisted' adder' reason' len);                                      break;                                  case "BNU":                                      listman.AddItemToList(item' 11' adder' reason' len);                                      break;                                  case "BNA":                                      listman.AddItemToList(item' 12' adder' reason' len);                                      break;                                  case "BES":                                      listman.AddItemToList(item' 20' adder' reason' len);                                      break;                                  case "CVP":                                      listman.AddPageToWatchlist(item' ""' adder' reason' len);                                      break;                                      //Gracefully ignore unknown message types                              }                              break;                          case "DEL":                              switch (list)                              {                                  case "WL":                                      listman.DelUserFromList(item' ""' ListManager.UserType.whitelisted);                                      break;                                  case "BL":                                      listman.DelUserFromList(item' ""' ListManager.UserType.blacklisted);                                      break;                                  case "GL":                                      listman.DelUserFromList(item' ""' ListManager.UserType.greylisted);                                      break;                                  case "BNU":                                      listman.DelItemFromList(item' 11);                                      break;                                  case "BNA":                                      listman.DelItemFromList(item' 12);                                      break;                                  case "BES":                                      listman.DelItemFromList(item' 20);                                      break;                                  case "CVP":                                      listman.DelPageFromWatchlist(item' "");                                      break;                                      //Gracefully ignore unknown message types                              }                              break;                          case "FIND":                              if (list == "BLEEP")                                  if (prjlist.ContainsKey(item))                                  SendMessageF(SendType.Action' reason' "has " + item + "' " + adder + " :D"' Priority.High);                              break;                          case "COUNT":                              if (list == "BLEEP")                                  SendMessageF(SendType.Action' reason' "owns " + prjlist.Count.ToString() + " wikis; version is " + version'                                               Priority.High);                              break;                          case "CONFIG":                              if (list == "BLEEP")                                  BotConfigMsg(reason);                              break;                                //Gracefully ignore unknown action types                      }
Magic Number,CVNBot,Program,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Program.cs,Irc_OnChannelNotice,The following statement contains a magic number: switch (action)                      {                          case "ADD":                              switch (list)                              {                                  case "WL":                                      listman.AddUserToList(item' ""' ListManager.UserType.whitelisted' adder' reason' len);                                      break;                                  case "BL":                                      listman.AddUserToList(item' ""' ListManager.UserType.blacklisted' adder' reason' len);                                      break;                                  case "GL":                                      listman.AddUserToList(item' ""' ListManager.UserType.greylisted' adder' reason' len);                                      break;                                  case "BNU":                                      listman.AddItemToList(item' 11' adder' reason' len);                                      break;                                  case "BNA":                                      listman.AddItemToList(item' 12' adder' reason' len);                                      break;                                  case "BES":                                      listman.AddItemToList(item' 20' adder' reason' len);                                      break;                                  case "CVP":                                      listman.AddPageToWatchlist(item' ""' adder' reason' len);                                      break;                                      //Gracefully ignore unknown message types                              }                              break;                          case "DEL":                              switch (list)                              {                                  case "WL":                                      listman.DelUserFromList(item' ""' ListManager.UserType.whitelisted);                                      break;                                  case "BL":                                      listman.DelUserFromList(item' ""' ListManager.UserType.blacklisted);                                      break;                                  case "GL":                                      listman.DelUserFromList(item' ""' ListManager.UserType.greylisted);                                      break;                                  case "BNU":                                      listman.DelItemFromList(item' 11);                                      break;                                  case "BNA":                                      listman.DelItemFromList(item' 12);                                      break;                                  case "BES":                                      listman.DelItemFromList(item' 20);                                      break;                                  case "CVP":                                      listman.DelPageFromWatchlist(item' "");                                      break;                                      //Gracefully ignore unknown message types                              }                              break;                          case "FIND":                              if (list == "BLEEP")                                  if (prjlist.ContainsKey(item))                                  SendMessageF(SendType.Action' reason' "has " + item + "' " + adder + " :D"' Priority.High);                              break;                          case "COUNT":                              if (list == "BLEEP")                                  SendMessageF(SendType.Action' reason' "owns " + prjlist.Count.ToString() + " wikis; version is " + version'                                               Priority.High);                              break;                          case "CONFIG":                              if (list == "BLEEP")                                  BotConfigMsg(reason);                              break;                                //Gracefully ignore unknown action types                      }
Magic Number,CVNBot,Program,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Program.cs,Irc_OnChannelNotice,The following statement contains a magic number: switch (action)                      {                          case "ADD":                              switch (list)                              {                                  case "WL":                                      listman.AddUserToList(item' ""' ListManager.UserType.whitelisted' adder' reason' len);                                      break;                                  case "BL":                                      listman.AddUserToList(item' ""' ListManager.UserType.blacklisted' adder' reason' len);                                      break;                                  case "GL":                                      listman.AddUserToList(item' ""' ListManager.UserType.greylisted' adder' reason' len);                                      break;                                  case "BNU":                                      listman.AddItemToList(item' 11' adder' reason' len);                                      break;                                  case "BNA":                                      listman.AddItemToList(item' 12' adder' reason' len);                                      break;                                  case "BES":                                      listman.AddItemToList(item' 20' adder' reason' len);                                      break;                                  case "CVP":                                      listman.AddPageToWatchlist(item' ""' adder' reason' len);                                      break;                                      //Gracefully ignore unknown message types                              }                              break;                          case "DEL":                              switch (list)                              {                                  case "WL":                                      listman.DelUserFromList(item' ""' ListManager.UserType.whitelisted);                                      break;                                  case "BL":                                      listman.DelUserFromList(item' ""' ListManager.UserType.blacklisted);                                      break;                                  case "GL":                                      listman.DelUserFromList(item' ""' ListManager.UserType.greylisted);                                      break;                                  case "BNU":                                      listman.DelItemFromList(item' 11);                                      break;                                  case "BNA":                                      listman.DelItemFromList(item' 12);                                      break;                                  case "BES":                                      listman.DelItemFromList(item' 20);                                      break;                                  case "CVP":                                      listman.DelPageFromWatchlist(item' "");                                      break;                                      //Gracefully ignore unknown message types                              }                              break;                          case "FIND":                              if (list == "BLEEP")                                  if (prjlist.ContainsKey(item))                                  SendMessageF(SendType.Action' reason' "has " + item + "' " + adder + " :D"' Priority.High);                              break;                          case "COUNT":                              if (list == "BLEEP")                                  SendMessageF(SendType.Action' reason' "owns " + prjlist.Count.ToString() + " wikis; version is " + version'                                               Priority.High);                              break;                          case "CONFIG":                              if (list == "BLEEP")                                  BotConfigMsg(reason);                              break;                                //Gracefully ignore unknown action types                      }
Magic Number,CVNBot,Program,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Program.cs,Irc_OnChannelNotice,The following statement contains a magic number: switch (action)                      {                          case "ADD":                              switch (list)                              {                                  case "WL":                                      listman.AddUserToList(item' ""' ListManager.UserType.whitelisted' adder' reason' len);                                      break;                                  case "BL":                                      listman.AddUserToList(item' ""' ListManager.UserType.blacklisted' adder' reason' len);                                      break;                                  case "GL":                                      listman.AddUserToList(item' ""' ListManager.UserType.greylisted' adder' reason' len);                                      break;                                  case "BNU":                                      listman.AddItemToList(item' 11' adder' reason' len);                                      break;                                  case "BNA":                                      listman.AddItemToList(item' 12' adder' reason' len);                                      break;                                  case "BES":                                      listman.AddItemToList(item' 20' adder' reason' len);                                      break;                                  case "CVP":                                      listman.AddPageToWatchlist(item' ""' adder' reason' len);                                      break;                                      //Gracefully ignore unknown message types                              }                              break;                          case "DEL":                              switch (list)                              {                                  case "WL":                                      listman.DelUserFromList(item' ""' ListManager.UserType.whitelisted);                                      break;                                  case "BL":                                      listman.DelUserFromList(item' ""' ListManager.UserType.blacklisted);                                      break;                                  case "GL":                                      listman.DelUserFromList(item' ""' ListManager.UserType.greylisted);                                      break;                                  case "BNU":                                      listman.DelItemFromList(item' 11);                                      break;                                  case "BNA":                                      listman.DelItemFromList(item' 12);                                      break;                                  case "BES":                                      listman.DelItemFromList(item' 20);                                      break;                                  case "CVP":                                      listman.DelPageFromWatchlist(item' "");                                      break;                                      //Gracefully ignore unknown message types                              }                              break;                          case "FIND":                              if (list == "BLEEP")                                  if (prjlist.ContainsKey(item))                                  SendMessageF(SendType.Action' reason' "has " + item + "' " + adder + " :D"' Priority.High);                              break;                          case "COUNT":                              if (list == "BLEEP")                                  SendMessageF(SendType.Action' reason' "owns " + prjlist.Count.ToString() + " wikis; version is " + version'                                               Priority.High);                              break;                          case "CONFIG":                              if (list == "BLEEP")                                  BotConfigMsg(reason);                              break;                                //Gracefully ignore unknown action types                      }
Magic Number,CVNBot,Program,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Program.cs,SendMessageFMulti,The following statement contains a magic number: CVNBotUtils.StringSplit(line' 400)
Magic Number,CVNBot,Program,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Program.cs,Irc_OnChannelMessage,The following statement contains a magic number: switch (command)                  {                      case "quit":                          if (!HasPrivileges('@'' ref e))                              return;                          logger.Info(e.Data.Nick + " ordered a quit");                          PartIRC(rawConfig["partmsg"]);                          Exit();                          break;                      case "restart":                          if (!HasPrivileges('@'' ref e))                              return;                          logger.Info(e.Data.Nick + " ordered a restart");                          PartIRC("Rebooting by order of " + e.Data.Nick + " ...");                          Restart();                          break;                      case "status":                          TimeSpan ago = DateTime.Now.Subtract(rcirc.lastMessage);                          SendMessageF(SendType.Message' e.Data.Channel' "Last message was received on RCReader "                                       + ago.TotalSeconds.ToString() + " seconds ago"' Priority.High);                          break;                      case "help":                          SendMessageF(SendType.Message' e.Data.Channel' (String)msgs["20005"]' Priority.High);                          break;                      case "version":                      case "settings":                      case "config":                          BotConfigMsg(e.Data.Channel);                          if (cmdParams[0] == "all")                          {                              Broadcast("BLEEP"' "CONFIG"' "BLEEP"' 0' e.Data.Channel' e.Data.Nick);                          }                          break;                      case "msgs":                          // Reloads messages                          if (!HasPrivileges('@'' ref e))                              return;                          ReadMessages(rawConfig["messages"]);                          SendMessageF(SendType.Message' e.Data.Channel' "Re-read messages"' Priority.High);                          break;                      case "reload":                          // Reloads wiki data for a project                          if (!HasPrivileges('@'' ref e))                              return;                            if (!prjlist.ContainsKey(cmdParams[0]))                          {                              SendMessageF(SendType.Message' e.Data.Channel' "Project " + cmdParams[0] + " is not loaded"' Priority.High);                              return;                          }                            try                          {                                ((Project)prjlist[cmdParams[0]]).RetrieveWikiDetails();                              SendMessageF(SendType.Message' e.Data.Channel' "Reloaded project " + cmdParams[0]' Priority.High);                          }                          catch (Exception ex)                          {  							SendMessageF(SendType.Message' e.Data.Channel' "Unable to reload: " + ex.Message' Priority.High);                              logger.Error("Reload project failed"' ex);                          }                          break;                      case "load":                          if (!HasPrivileges('@'' ref e))                              return;                          try                          {                              if (cmdParams.Length == 2)                                  prjlist.AddNewProject(cmdParams[0]' cmdParams[1]);                              else                                  prjlist.AddNewProject(cmdParams[0]' "");                                SendMessageF(SendType.Message' e.Data.Channel' "Loaded new project " + cmdParams[0]' Priority.High);                              // Automatically get admins and bots                              SendMessageF(SendType.Message' e.Data.Channel' listman.ConfigGetAdmins(cmdParams[0])' Priority.High);                              SendMessageF(SendType.Message' e.Data.Channel' listman.ConfigGetBots(cmdParams[0])' Priority.High);                          }                          catch (Exception ex)                          {                              SendMessageF(SendType.Message' e.Data.Channel' "Unable to add project: " + ex.Message' Priority.High);                              logger.Error("Add project failed"' ex);                          }                          break;                      case "bleep":                          if (!HasPrivileges('+'' ref e))                              return;                          try                          {                              if (cmdParams[0].Length > 0)                              {                                  if (prjlist.ContainsKey(cmdParams[0]))                                  {                                      SendMessageF(SendType.Action' e.Data.Channel' "has " + cmdParams[0] + "' " + e.Data.Nick + " :D"' Priority.High);                                  }                                  else                                  {                                      Broadcast("BLEEP"' "FIND"' cmdParams[0]' 0' e.Data.Channel' e.Data.Nick);                                      SendMessageF(SendType.Message' e.Data.Channel' "Bleeped. Please wait for a reply."' Priority.High);                                  }                              }                          }                          catch (Exception ex)                          {                              SendMessageF(SendType.Message' e.Data.Channel' "Unable to bleep: " + ex.Message' Priority.High);                          }                          break;                      case "count":                          if (!HasPrivileges('+'' ref e))                              return;                          Broadcast("BLEEP"' "COUNT"' "BLEEP"' 0' e.Data.Channel' e.Data.Nick);                          SendMessageF(SendType.Action' e.Data.Channel' "owns " + prjlist.Count.ToString() + " wikis; version is " + version'                                       Priority.High);                          break;                      case "drop":                          if (!HasPrivileges('@'' ref e))                              return;                          try                          {                              prjlist.DeleteProject(cmdParams[0]);                              SendMessageF(SendType.Message' e.Data.Channel' "Deleted project " + cmdParams[0]' Priority.High);                          }                          catch (Exception ex)                          {                              SendMessageF(SendType.Message' e.Data.Channel' "Unable to delete project: " + ex.Message' Priority.High);                              logger.Error("Delete project failed"' ex);                          }                          break;                      case "list":                          string result = "Currently monitoring: ";                          foreach (string p in prjlist.Keys)                          {                              result += p + " ";                          }                          result += "(Total: " + prjlist.Count.ToString() + " wikis)";                          SendMessageFMulti(SendType.Message' e.Data.Channel' result' Priority.High);                          break;                      case "batchgetusers":                          if (!HasPrivileges('@'' ref e))                              return;                          new Thread(listman.BatchGetAllAdminsAndBots).Start(e.Data.Channel);                          break;                      case "bl":                          SendMessageF(SendType.Message' e.Data.Channel'                                       listman.HandleListCommand(1' e.Data.Nick' extraParams)' Priority.High);                          break;                      case "wl":                          SendMessageF(SendType.Message' e.Data.Channel'                                       listman.HandleListCommand(0' e.Data.Nick' extraParams)' Priority.High);                          break;                      case "gl":                          SendMessageF(SendType.Message' e.Data.Channel'                                       listman.HandleListCommand(6' e.Data.Nick' extraParams)' Priority.High);                          break;                      case "al":                          SendMessageF(SendType.Message' e.Data.Channel'                                       listman.HandleListCommand(2' e.Data.Nick' extraParams)' Priority.High);                          break;                      case "bots":                      case "bot":                          SendMessageF(SendType.Message' e.Data.Channel'                                       listman.HandleListCommand(5' e.Data.Nick' extraParams)' Priority.High);                          break;                      case "cvp":                          SendMessageF(SendType.Message' e.Data.Channel'                                       listman.HandleListCommand(10' e.Data.Nick' extraParams)' Priority.High);                          break;                      case "bnu":                          SendMessageF(SendType.Message' e.Data.Channel'                                       listman.HandleListCommand(11' e.Data.Nick' extraParams)' Priority.High);                          break;                      case "bna":                          SendMessageF(SendType.Message' e.Data.Channel'                                       listman.HandleListCommand(12' e.Data.Nick' extraParams)' Priority.High);                          break;                      case "bes":                          SendMessageF(SendType.Message' e.Data.Channel'                                       listman.HandleListCommand(20' e.Data.Nick' extraParams)' Priority.High);                          break;                        //_1568: Restrict the "get" command to ops                      case "getadmins":                          if (!HasPrivileges('@'' ref e))                              return;                          SendMessageF(SendType.Message' e.Data.Channel' listman.ConfigGetAdmins(extraParams)' Priority.High);                          break;                      case "getbots":                          if (!HasPrivileges('@'' ref e))                              return;                          SendMessageF(SendType.Message' e.Data.Channel' listman.ConfigGetBots(extraParams)' Priority.High);                          break;                        case "intel":                          string intelResult = listman.GlobalIntel(extraParams);                          SendMessageFMulti(SendType.Message' e.Data.Channel' intelResult' Priority.High);                          break;                      case "purge":                          if (!HasPrivileges('@'' ref e))                              return;                          SendMessageF(SendType.Message' e.Data.Channel' listman.PurgeWikiData(extraParams)' Priority.High);                          break;                      case "batchreload":                          if (!HasPrivileges('@'' ref e))                              return;                          prjlist.currentBatchReloadChannel = e.Data.Channel;                          new Thread(new ThreadStart(prjlist.ReloadAllWikis)).Start();                          break;                  }
Magic Number,CVNBot,Program,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Program.cs,Irc_OnChannelMessage,The following statement contains a magic number: switch (command)                  {                      case "quit":                          if (!HasPrivileges('@'' ref e))                              return;                          logger.Info(e.Data.Nick + " ordered a quit");                          PartIRC(rawConfig["partmsg"]);                          Exit();                          break;                      case "restart":                          if (!HasPrivileges('@'' ref e))                              return;                          logger.Info(e.Data.Nick + " ordered a restart");                          PartIRC("Rebooting by order of " + e.Data.Nick + " ...");                          Restart();                          break;                      case "status":                          TimeSpan ago = DateTime.Now.Subtract(rcirc.lastMessage);                          SendMessageF(SendType.Message' e.Data.Channel' "Last message was received on RCReader "                                       + ago.TotalSeconds.ToString() + " seconds ago"' Priority.High);                          break;                      case "help":                          SendMessageF(SendType.Message' e.Data.Channel' (String)msgs["20005"]' Priority.High);                          break;                      case "version":                      case "settings":                      case "config":                          BotConfigMsg(e.Data.Channel);                          if (cmdParams[0] == "all")                          {                              Broadcast("BLEEP"' "CONFIG"' "BLEEP"' 0' e.Data.Channel' e.Data.Nick);                          }                          break;                      case "msgs":                          // Reloads messages                          if (!HasPrivileges('@'' ref e))                              return;                          ReadMessages(rawConfig["messages"]);                          SendMessageF(SendType.Message' e.Data.Channel' "Re-read messages"' Priority.High);                          break;                      case "reload":                          // Reloads wiki data for a project                          if (!HasPrivileges('@'' ref e))                              return;                            if (!prjlist.ContainsKey(cmdParams[0]))                          {                              SendMessageF(SendType.Message' e.Data.Channel' "Project " + cmdParams[0] + " is not loaded"' Priority.High);                              return;                          }                            try                          {                                ((Project)prjlist[cmdParams[0]]).RetrieveWikiDetails();                              SendMessageF(SendType.Message' e.Data.Channel' "Reloaded project " + cmdParams[0]' Priority.High);                          }                          catch (Exception ex)                          {  							SendMessageF(SendType.Message' e.Data.Channel' "Unable to reload: " + ex.Message' Priority.High);                              logger.Error("Reload project failed"' ex);                          }                          break;                      case "load":                          if (!HasPrivileges('@'' ref e))                              return;                          try                          {                              if (cmdParams.Length == 2)                                  prjlist.AddNewProject(cmdParams[0]' cmdParams[1]);                              else                                  prjlist.AddNewProject(cmdParams[0]' "");                                SendMessageF(SendType.Message' e.Data.Channel' "Loaded new project " + cmdParams[0]' Priority.High);                              // Automatically get admins and bots                              SendMessageF(SendType.Message' e.Data.Channel' listman.ConfigGetAdmins(cmdParams[0])' Priority.High);                              SendMessageF(SendType.Message' e.Data.Channel' listman.ConfigGetBots(cmdParams[0])' Priority.High);                          }                          catch (Exception ex)                          {                              SendMessageF(SendType.Message' e.Data.Channel' "Unable to add project: " + ex.Message' Priority.High);                              logger.Error("Add project failed"' ex);                          }                          break;                      case "bleep":                          if (!HasPrivileges('+'' ref e))                              return;                          try                          {                              if (cmdParams[0].Length > 0)                              {                                  if (prjlist.ContainsKey(cmdParams[0]))                                  {                                      SendMessageF(SendType.Action' e.Data.Channel' "has " + cmdParams[0] + "' " + e.Data.Nick + " :D"' Priority.High);                                  }                                  else                                  {                                      Broadcast("BLEEP"' "FIND"' cmdParams[0]' 0' e.Data.Channel' e.Data.Nick);                                      SendMessageF(SendType.Message' e.Data.Channel' "Bleeped. Please wait for a reply."' Priority.High);                                  }                              }                          }                          catch (Exception ex)                          {                              SendMessageF(SendType.Message' e.Data.Channel' "Unable to bleep: " + ex.Message' Priority.High);                          }                          break;                      case "count":                          if (!HasPrivileges('+'' ref e))                              return;                          Broadcast("BLEEP"' "COUNT"' "BLEEP"' 0' e.Data.Channel' e.Data.Nick);                          SendMessageF(SendType.Action' e.Data.Channel' "owns " + prjlist.Count.ToString() + " wikis; version is " + version'                                       Priority.High);                          break;                      case "drop":                          if (!HasPrivileges('@'' ref e))                              return;                          try                          {                              prjlist.DeleteProject(cmdParams[0]);                              SendMessageF(SendType.Message' e.Data.Channel' "Deleted project " + cmdParams[0]' Priority.High);                          }                          catch (Exception ex)                          {                              SendMessageF(SendType.Message' e.Data.Channel' "Unable to delete project: " + ex.Message' Priority.High);                              logger.Error("Delete project failed"' ex);                          }                          break;                      case "list":                          string result = "Currently monitoring: ";                          foreach (string p in prjlist.Keys)                          {                              result += p + " ";                          }                          result += "(Total: " + prjlist.Count.ToString() + " wikis)";                          SendMessageFMulti(SendType.Message' e.Data.Channel' result' Priority.High);                          break;                      case "batchgetusers":                          if (!HasPrivileges('@'' ref e))                              return;                          new Thread(listman.BatchGetAllAdminsAndBots).Start(e.Data.Channel);                          break;                      case "bl":                          SendMessageF(SendType.Message' e.Data.Channel'                                       listman.HandleListCommand(1' e.Data.Nick' extraParams)' Priority.High);                          break;                      case "wl":                          SendMessageF(SendType.Message' e.Data.Channel'                                       listman.HandleListCommand(0' e.Data.Nick' extraParams)' Priority.High);                          break;                      case "gl":                          SendMessageF(SendType.Message' e.Data.Channel'                                       listman.HandleListCommand(6' e.Data.Nick' extraParams)' Priority.High);                          break;                      case "al":                          SendMessageF(SendType.Message' e.Data.Channel'                                       listman.HandleListCommand(2' e.Data.Nick' extraParams)' Priority.High);                          break;                      case "bots":                      case "bot":                          SendMessageF(SendType.Message' e.Data.Channel'                                       listman.HandleListCommand(5' e.Data.Nick' extraParams)' Priority.High);                          break;                      case "cvp":                          SendMessageF(SendType.Message' e.Data.Channel'                                       listman.HandleListCommand(10' e.Data.Nick' extraParams)' Priority.High);                          break;                      case "bnu":                          SendMessageF(SendType.Message' e.Data.Channel'                                       listman.HandleListCommand(11' e.Data.Nick' extraParams)' Priority.High);                          break;                      case "bna":                          SendMessageF(SendType.Message' e.Data.Channel'                                       listman.HandleListCommand(12' e.Data.Nick' extraParams)' Priority.High);                          break;                      case "bes":                          SendMessageF(SendType.Message' e.Data.Channel'                                       listman.HandleListCommand(20' e.Data.Nick' extraParams)' Priority.High);                          break;                        //_1568: Restrict the "get" command to ops                      case "getadmins":                          if (!HasPrivileges('@'' ref e))                              return;                          SendMessageF(SendType.Message' e.Data.Channel' listman.ConfigGetAdmins(extraParams)' Priority.High);                          break;                      case "getbots":                          if (!HasPrivileges('@'' ref e))                              return;                          SendMessageF(SendType.Message' e.Data.Channel' listman.ConfigGetBots(extraParams)' Priority.High);                          break;                        case "intel":                          string intelResult = listman.GlobalIntel(extraParams);                          SendMessageFMulti(SendType.Message' e.Data.Channel' intelResult' Priority.High);                          break;                      case "purge":                          if (!HasPrivileges('@'' ref e))                              return;                          SendMessageF(SendType.Message' e.Data.Channel' listman.PurgeWikiData(extraParams)' Priority.High);                          break;                      case "batchreload":                          if (!HasPrivileges('@'' ref e))                              return;                          prjlist.currentBatchReloadChannel = e.Data.Channel;                          new Thread(new ThreadStart(prjlist.ReloadAllWikis)).Start();                          break;                  }
Magic Number,CVNBot,Program,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Program.cs,Irc_OnChannelMessage,The following statement contains a magic number: switch (command)                  {                      case "quit":                          if (!HasPrivileges('@'' ref e))                              return;                          logger.Info(e.Data.Nick + " ordered a quit");                          PartIRC(rawConfig["partmsg"]);                          Exit();                          break;                      case "restart":                          if (!HasPrivileges('@'' ref e))                              return;                          logger.Info(e.Data.Nick + " ordered a restart");                          PartIRC("Rebooting by order of " + e.Data.Nick + " ...");                          Restart();                          break;                      case "status":                          TimeSpan ago = DateTime.Now.Subtract(rcirc.lastMessage);                          SendMessageF(SendType.Message' e.Data.Channel' "Last message was received on RCReader "                                       + ago.TotalSeconds.ToString() + " seconds ago"' Priority.High);                          break;                      case "help":                          SendMessageF(SendType.Message' e.Data.Channel' (String)msgs["20005"]' Priority.High);                          break;                      case "version":                      case "settings":                      case "config":                          BotConfigMsg(e.Data.Channel);                          if (cmdParams[0] == "all")                          {                              Broadcast("BLEEP"' "CONFIG"' "BLEEP"' 0' e.Data.Channel' e.Data.Nick);                          }                          break;                      case "msgs":                          // Reloads messages                          if (!HasPrivileges('@'' ref e))                              return;                          ReadMessages(rawConfig["messages"]);                          SendMessageF(SendType.Message' e.Data.Channel' "Re-read messages"' Priority.High);                          break;                      case "reload":                          // Reloads wiki data for a project                          if (!HasPrivileges('@'' ref e))                              return;                            if (!prjlist.ContainsKey(cmdParams[0]))                          {                              SendMessageF(SendType.Message' e.Data.Channel' "Project " + cmdParams[0] + " is not loaded"' Priority.High);                              return;                          }                            try                          {                                ((Project)prjlist[cmdParams[0]]).RetrieveWikiDetails();                              SendMessageF(SendType.Message' e.Data.Channel' "Reloaded project " + cmdParams[0]' Priority.High);                          }                          catch (Exception ex)                          {  							SendMessageF(SendType.Message' e.Data.Channel' "Unable to reload: " + ex.Message' Priority.High);                              logger.Error("Reload project failed"' ex);                          }                          break;                      case "load":                          if (!HasPrivileges('@'' ref e))                              return;                          try                          {                              if (cmdParams.Length == 2)                                  prjlist.AddNewProject(cmdParams[0]' cmdParams[1]);                              else                                  prjlist.AddNewProject(cmdParams[0]' "");                                SendMessageF(SendType.Message' e.Data.Channel' "Loaded new project " + cmdParams[0]' Priority.High);                              // Automatically get admins and bots                              SendMessageF(SendType.Message' e.Data.Channel' listman.ConfigGetAdmins(cmdParams[0])' Priority.High);                              SendMessageF(SendType.Message' e.Data.Channel' listman.ConfigGetBots(cmdParams[0])' Priority.High);                          }                          catch (Exception ex)                          {                              SendMessageF(SendType.Message' e.Data.Channel' "Unable to add project: " + ex.Message' Priority.High);                              logger.Error("Add project failed"' ex);                          }                          break;                      case "bleep":                          if (!HasPrivileges('+'' ref e))                              return;                          try                          {                              if (cmdParams[0].Length > 0)                              {                                  if (prjlist.ContainsKey(cmdParams[0]))                                  {                                      SendMessageF(SendType.Action' e.Data.Channel' "has " + cmdParams[0] + "' " + e.Data.Nick + " :D"' Priority.High);                                  }                                  else                                  {                                      Broadcast("BLEEP"' "FIND"' cmdParams[0]' 0' e.Data.Channel' e.Data.Nick);                                      SendMessageF(SendType.Message' e.Data.Channel' "Bleeped. Please wait for a reply."' Priority.High);                                  }                              }                          }                          catch (Exception ex)                          {                              SendMessageF(SendType.Message' e.Data.Channel' "Unable to bleep: " + ex.Message' Priority.High);                          }                          break;                      case "count":                          if (!HasPrivileges('+'' ref e))                              return;                          Broadcast("BLEEP"' "COUNT"' "BLEEP"' 0' e.Data.Channel' e.Data.Nick);                          SendMessageF(SendType.Action' e.Data.Channel' "owns " + prjlist.Count.ToString() + " wikis; version is " + version'                                       Priority.High);                          break;                      case "drop":                          if (!HasPrivileges('@'' ref e))                              return;                          try                          {                              prjlist.DeleteProject(cmdParams[0]);                              SendMessageF(SendType.Message' e.Data.Channel' "Deleted project " + cmdParams[0]' Priority.High);                          }                          catch (Exception ex)                          {                              SendMessageF(SendType.Message' e.Data.Channel' "Unable to delete project: " + ex.Message' Priority.High);                              logger.Error("Delete project failed"' ex);                          }                          break;                      case "list":                          string result = "Currently monitoring: ";                          foreach (string p in prjlist.Keys)                          {                              result += p + " ";                          }                          result += "(Total: " + prjlist.Count.ToString() + " wikis)";                          SendMessageFMulti(SendType.Message' e.Data.Channel' result' Priority.High);                          break;                      case "batchgetusers":                          if (!HasPrivileges('@'' ref e))                              return;                          new Thread(listman.BatchGetAllAdminsAndBots).Start(e.Data.Channel);                          break;                      case "bl":                          SendMessageF(SendType.Message' e.Data.Channel'                                       listman.HandleListCommand(1' e.Data.Nick' extraParams)' Priority.High);                          break;                      case "wl":                          SendMessageF(SendType.Message' e.Data.Channel'                                       listman.HandleListCommand(0' e.Data.Nick' extraParams)' Priority.High);                          break;                      case "gl":                          SendMessageF(SendType.Message' e.Data.Channel'                                       listman.HandleListCommand(6' e.Data.Nick' extraParams)' Priority.High);                          break;                      case "al":                          SendMessageF(SendType.Message' e.Data.Channel'                                       listman.HandleListCommand(2' e.Data.Nick' extraParams)' Priority.High);                          break;                      case "bots":                      case "bot":                          SendMessageF(SendType.Message' e.Data.Channel'                                       listman.HandleListCommand(5' e.Data.Nick' extraParams)' Priority.High);                          break;                      case "cvp":                          SendMessageF(SendType.Message' e.Data.Channel'                                       listman.HandleListCommand(10' e.Data.Nick' extraParams)' Priority.High);                          break;                      case "bnu":                          SendMessageF(SendType.Message' e.Data.Channel'                                       listman.HandleListCommand(11' e.Data.Nick' extraParams)' Priority.High);                          break;                      case "bna":                          SendMessageF(SendType.Message' e.Data.Channel'                                       listman.HandleListCommand(12' e.Data.Nick' extraParams)' Priority.High);                          break;                      case "bes":                          SendMessageF(SendType.Message' e.Data.Channel'                                       listman.HandleListCommand(20' e.Data.Nick' extraParams)' Priority.High);                          break;                        //_1568: Restrict the "get" command to ops                      case "getadmins":                          if (!HasPrivileges('@'' ref e))                              return;                          SendMessageF(SendType.Message' e.Data.Channel' listman.ConfigGetAdmins(extraParams)' Priority.High);                          break;                      case "getbots":                          if (!HasPrivileges('@'' ref e))                              return;                          SendMessageF(SendType.Message' e.Data.Channel' listman.ConfigGetBots(extraParams)' Priority.High);                          break;                        case "intel":                          string intelResult = listman.GlobalIntel(extraParams);                          SendMessageFMulti(SendType.Message' e.Data.Channel' intelResult' Priority.High);                          break;                      case "purge":                          if (!HasPrivileges('@'' ref e))                              return;                          SendMessageF(SendType.Message' e.Data.Channel' listman.PurgeWikiData(extraParams)' Priority.High);                          break;                      case "batchreload":                          if (!HasPrivileges('@'' ref e))                              return;                          prjlist.currentBatchReloadChannel = e.Data.Channel;                          new Thread(new ThreadStart(prjlist.ReloadAllWikis)).Start();                          break;                  }
Magic Number,CVNBot,Program,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Program.cs,Irc_OnChannelMessage,The following statement contains a magic number: switch (command)                  {                      case "quit":                          if (!HasPrivileges('@'' ref e))                              return;                          logger.Info(e.Data.Nick + " ordered a quit");                          PartIRC(rawConfig["partmsg"]);                          Exit();                          break;                      case "restart":                          if (!HasPrivileges('@'' ref e))                              return;                          logger.Info(e.Data.Nick + " ordered a restart");                          PartIRC("Rebooting by order of " + e.Data.Nick + " ...");                          Restart();                          break;                      case "status":                          TimeSpan ago = DateTime.Now.Subtract(rcirc.lastMessage);                          SendMessageF(SendType.Message' e.Data.Channel' "Last message was received on RCReader "                                       + ago.TotalSeconds.ToString() + " seconds ago"' Priority.High);                          break;                      case "help":                          SendMessageF(SendType.Message' e.Data.Channel' (String)msgs["20005"]' Priority.High);                          break;                      case "version":                      case "settings":                      case "config":                          BotConfigMsg(e.Data.Channel);                          if (cmdParams[0] == "all")                          {                              Broadcast("BLEEP"' "CONFIG"' "BLEEP"' 0' e.Data.Channel' e.Data.Nick);                          }                          break;                      case "msgs":                          // Reloads messages                          if (!HasPrivileges('@'' ref e))                              return;                          ReadMessages(rawConfig["messages"]);                          SendMessageF(SendType.Message' e.Data.Channel' "Re-read messages"' Priority.High);                          break;                      case "reload":                          // Reloads wiki data for a project                          if (!HasPrivileges('@'' ref e))                              return;                            if (!prjlist.ContainsKey(cmdParams[0]))                          {                              SendMessageF(SendType.Message' e.Data.Channel' "Project " + cmdParams[0] + " is not loaded"' Priority.High);                              return;                          }                            try                          {                                ((Project)prjlist[cmdParams[0]]).RetrieveWikiDetails();                              SendMessageF(SendType.Message' e.Data.Channel' "Reloaded project " + cmdParams[0]' Priority.High);                          }                          catch (Exception ex)                          {  							SendMessageF(SendType.Message' e.Data.Channel' "Unable to reload: " + ex.Message' Priority.High);                              logger.Error("Reload project failed"' ex);                          }                          break;                      case "load":                          if (!HasPrivileges('@'' ref e))                              return;                          try                          {                              if (cmdParams.Length == 2)                                  prjlist.AddNewProject(cmdParams[0]' cmdParams[1]);                              else                                  prjlist.AddNewProject(cmdParams[0]' "");                                SendMessageF(SendType.Message' e.Data.Channel' "Loaded new project " + cmdParams[0]' Priority.High);                              // Automatically get admins and bots                              SendMessageF(SendType.Message' e.Data.Channel' listman.ConfigGetAdmins(cmdParams[0])' Priority.High);                              SendMessageF(SendType.Message' e.Data.Channel' listman.ConfigGetBots(cmdParams[0])' Priority.High);                          }                          catch (Exception ex)                          {                              SendMessageF(SendType.Message' e.Data.Channel' "Unable to add project: " + ex.Message' Priority.High);                              logger.Error("Add project failed"' ex);                          }                          break;                      case "bleep":                          if (!HasPrivileges('+'' ref e))                              return;                          try                          {                              if (cmdParams[0].Length > 0)                              {                                  if (prjlist.ContainsKey(cmdParams[0]))                                  {                                      SendMessageF(SendType.Action' e.Data.Channel' "has " + cmdParams[0] + "' " + e.Data.Nick + " :D"' Priority.High);                                  }                                  else                                  {                                      Broadcast("BLEEP"' "FIND"' cmdParams[0]' 0' e.Data.Channel' e.Data.Nick);                                      SendMessageF(SendType.Message' e.Data.Channel' "Bleeped. Please wait for a reply."' Priority.High);                                  }                              }                          }                          catch (Exception ex)                          {                              SendMessageF(SendType.Message' e.Data.Channel' "Unable to bleep: " + ex.Message' Priority.High);                          }                          break;                      case "count":                          if (!HasPrivileges('+'' ref e))                              return;                          Broadcast("BLEEP"' "COUNT"' "BLEEP"' 0' e.Data.Channel' e.Data.Nick);                          SendMessageF(SendType.Action' e.Data.Channel' "owns " + prjlist.Count.ToString() + " wikis; version is " + version'                                       Priority.High);                          break;                      case "drop":                          if (!HasPrivileges('@'' ref e))                              return;                          try                          {                              prjlist.DeleteProject(cmdParams[0]);                              SendMessageF(SendType.Message' e.Data.Channel' "Deleted project " + cmdParams[0]' Priority.High);                          }                          catch (Exception ex)                          {                              SendMessageF(SendType.Message' e.Data.Channel' "Unable to delete project: " + ex.Message' Priority.High);                              logger.Error("Delete project failed"' ex);                          }                          break;                      case "list":                          string result = "Currently monitoring: ";                          foreach (string p in prjlist.Keys)                          {                              result += p + " ";                          }                          result += "(Total: " + prjlist.Count.ToString() + " wikis)";                          SendMessageFMulti(SendType.Message' e.Data.Channel' result' Priority.High);                          break;                      case "batchgetusers":                          if (!HasPrivileges('@'' ref e))                              return;                          new Thread(listman.BatchGetAllAdminsAndBots).Start(e.Data.Channel);                          break;                      case "bl":                          SendMessageF(SendType.Message' e.Data.Channel'                                       listman.HandleListCommand(1' e.Data.Nick' extraParams)' Priority.High);                          break;                      case "wl":                          SendMessageF(SendType.Message' e.Data.Channel'                                       listman.HandleListCommand(0' e.Data.Nick' extraParams)' Priority.High);                          break;                      case "gl":                          SendMessageF(SendType.Message' e.Data.Channel'                                       listman.HandleListCommand(6' e.Data.Nick' extraParams)' Priority.High);                          break;                      case "al":                          SendMessageF(SendType.Message' e.Data.Channel'                                       listman.HandleListCommand(2' e.Data.Nick' extraParams)' Priority.High);                          break;                      case "bots":                      case "bot":                          SendMessageF(SendType.Message' e.Data.Channel'                                       listman.HandleListCommand(5' e.Data.Nick' extraParams)' Priority.High);                          break;                      case "cvp":                          SendMessageF(SendType.Message' e.Data.Channel'                                       listman.HandleListCommand(10' e.Data.Nick' extraParams)' Priority.High);                          break;                      case "bnu":                          SendMessageF(SendType.Message' e.Data.Channel'                                       listman.HandleListCommand(11' e.Data.Nick' extraParams)' Priority.High);                          break;                      case "bna":                          SendMessageF(SendType.Message' e.Data.Channel'                                       listman.HandleListCommand(12' e.Data.Nick' extraParams)' Priority.High);                          break;                      case "bes":                          SendMessageF(SendType.Message' e.Data.Channel'                                       listman.HandleListCommand(20' e.Data.Nick' extraParams)' Priority.High);                          break;                        //_1568: Restrict the "get" command to ops                      case "getadmins":                          if (!HasPrivileges('@'' ref e))                              return;                          SendMessageF(SendType.Message' e.Data.Channel' listman.ConfigGetAdmins(extraParams)' Priority.High);                          break;                      case "getbots":                          if (!HasPrivileges('@'' ref e))                              return;                          SendMessageF(SendType.Message' e.Data.Channel' listman.ConfigGetBots(extraParams)' Priority.High);                          break;                        case "intel":                          string intelResult = listman.GlobalIntel(extraParams);                          SendMessageFMulti(SendType.Message' e.Data.Channel' intelResult' Priority.High);                          break;                      case "purge":                          if (!HasPrivileges('@'' ref e))                              return;                          SendMessageF(SendType.Message' e.Data.Channel' listman.PurgeWikiData(extraParams)' Priority.High);                          break;                      case "batchreload":                          if (!HasPrivileges('@'' ref e))                              return;                          prjlist.currentBatchReloadChannel = e.Data.Channel;                          new Thread(new ThreadStart(prjlist.ReloadAllWikis)).Start();                          break;                  }
Magic Number,CVNBot,Program,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Program.cs,Irc_OnChannelMessage,The following statement contains a magic number: switch (command)                  {                      case "quit":                          if (!HasPrivileges('@'' ref e))                              return;                          logger.Info(e.Data.Nick + " ordered a quit");                          PartIRC(rawConfig["partmsg"]);                          Exit();                          break;                      case "restart":                          if (!HasPrivileges('@'' ref e))                              return;                          logger.Info(e.Data.Nick + " ordered a restart");                          PartIRC("Rebooting by order of " + e.Data.Nick + " ...");                          Restart();                          break;                      case "status":                          TimeSpan ago = DateTime.Now.Subtract(rcirc.lastMessage);                          SendMessageF(SendType.Message' e.Data.Channel' "Last message was received on RCReader "                                       + ago.TotalSeconds.ToString() + " seconds ago"' Priority.High);                          break;                      case "help":                          SendMessageF(SendType.Message' e.Data.Channel' (String)msgs["20005"]' Priority.High);                          break;                      case "version":                      case "settings":                      case "config":                          BotConfigMsg(e.Data.Channel);                          if (cmdParams[0] == "all")                          {                              Broadcast("BLEEP"' "CONFIG"' "BLEEP"' 0' e.Data.Channel' e.Data.Nick);                          }                          break;                      case "msgs":                          // Reloads messages                          if (!HasPrivileges('@'' ref e))                              return;                          ReadMessages(rawConfig["messages"]);                          SendMessageF(SendType.Message' e.Data.Channel' "Re-read messages"' Priority.High);                          break;                      case "reload":                          // Reloads wiki data for a project                          if (!HasPrivileges('@'' ref e))                              return;                            if (!prjlist.ContainsKey(cmdParams[0]))                          {                              SendMessageF(SendType.Message' e.Data.Channel' "Project " + cmdParams[0] + " is not loaded"' Priority.High);                              return;                          }                            try                          {                                ((Project)prjlist[cmdParams[0]]).RetrieveWikiDetails();                              SendMessageF(SendType.Message' e.Data.Channel' "Reloaded project " + cmdParams[0]' Priority.High);                          }                          catch (Exception ex)                          {  							SendMessageF(SendType.Message' e.Data.Channel' "Unable to reload: " + ex.Message' Priority.High);                              logger.Error("Reload project failed"' ex);                          }                          break;                      case "load":                          if (!HasPrivileges('@'' ref e))                              return;                          try                          {                              if (cmdParams.Length == 2)                                  prjlist.AddNewProject(cmdParams[0]' cmdParams[1]);                              else                                  prjlist.AddNewProject(cmdParams[0]' "");                                SendMessageF(SendType.Message' e.Data.Channel' "Loaded new project " + cmdParams[0]' Priority.High);                              // Automatically get admins and bots                              SendMessageF(SendType.Message' e.Data.Channel' listman.ConfigGetAdmins(cmdParams[0])' Priority.High);                              SendMessageF(SendType.Message' e.Data.Channel' listman.ConfigGetBots(cmdParams[0])' Priority.High);                          }                          catch (Exception ex)                          {                              SendMessageF(SendType.Message' e.Data.Channel' "Unable to add project: " + ex.Message' Priority.High);                              logger.Error("Add project failed"' ex);                          }                          break;                      case "bleep":                          if (!HasPrivileges('+'' ref e))                              return;                          try                          {                              if (cmdParams[0].Length > 0)                              {                                  if (prjlist.ContainsKey(cmdParams[0]))                                  {                                      SendMessageF(SendType.Action' e.Data.Channel' "has " + cmdParams[0] + "' " + e.Data.Nick + " :D"' Priority.High);                                  }                                  else                                  {                                      Broadcast("BLEEP"' "FIND"' cmdParams[0]' 0' e.Data.Channel' e.Data.Nick);                                      SendMessageF(SendType.Message' e.Data.Channel' "Bleeped. Please wait for a reply."' Priority.High);                                  }                              }                          }                          catch (Exception ex)                          {                              SendMessageF(SendType.Message' e.Data.Channel' "Unable to bleep: " + ex.Message' Priority.High);                          }                          break;                      case "count":                          if (!HasPrivileges('+'' ref e))                              return;                          Broadcast("BLEEP"' "COUNT"' "BLEEP"' 0' e.Data.Channel' e.Data.Nick);                          SendMessageF(SendType.Action' e.Data.Channel' "owns " + prjlist.Count.ToString() + " wikis; version is " + version'                                       Priority.High);                          break;                      case "drop":                          if (!HasPrivileges('@'' ref e))                              return;                          try                          {                              prjlist.DeleteProject(cmdParams[0]);                              SendMessageF(SendType.Message' e.Data.Channel' "Deleted project " + cmdParams[0]' Priority.High);                          }                          catch (Exception ex)                          {                              SendMessageF(SendType.Message' e.Data.Channel' "Unable to delete project: " + ex.Message' Priority.High);                              logger.Error("Delete project failed"' ex);                          }                          break;                      case "list":                          string result = "Currently monitoring: ";                          foreach (string p in prjlist.Keys)                          {                              result += p + " ";                          }                          result += "(Total: " + prjlist.Count.ToString() + " wikis)";                          SendMessageFMulti(SendType.Message' e.Data.Channel' result' Priority.High);                          break;                      case "batchgetusers":                          if (!HasPrivileges('@'' ref e))                              return;                          new Thread(listman.BatchGetAllAdminsAndBots).Start(e.Data.Channel);                          break;                      case "bl":                          SendMessageF(SendType.Message' e.Data.Channel'                                       listman.HandleListCommand(1' e.Data.Nick' extraParams)' Priority.High);                          break;                      case "wl":                          SendMessageF(SendType.Message' e.Data.Channel'                                       listman.HandleListCommand(0' e.Data.Nick' extraParams)' Priority.High);                          break;                      case "gl":                          SendMessageF(SendType.Message' e.Data.Channel'                                       listman.HandleListCommand(6' e.Data.Nick' extraParams)' Priority.High);                          break;                      case "al":                          SendMessageF(SendType.Message' e.Data.Channel'                                       listman.HandleListCommand(2' e.Data.Nick' extraParams)' Priority.High);                          break;                      case "bots":                      case "bot":                          SendMessageF(SendType.Message' e.Data.Channel'                                       listman.HandleListCommand(5' e.Data.Nick' extraParams)' Priority.High);                          break;                      case "cvp":                          SendMessageF(SendType.Message' e.Data.Channel'                                       listman.HandleListCommand(10' e.Data.Nick' extraParams)' Priority.High);                          break;                      case "bnu":                          SendMessageF(SendType.Message' e.Data.Channel'                                       listman.HandleListCommand(11' e.Data.Nick' extraParams)' Priority.High);                          break;                      case "bna":                          SendMessageF(SendType.Message' e.Data.Channel'                                       listman.HandleListCommand(12' e.Data.Nick' extraParams)' Priority.High);                          break;                      case "bes":                          SendMessageF(SendType.Message' e.Data.Channel'                                       listman.HandleListCommand(20' e.Data.Nick' extraParams)' Priority.High);                          break;                        //_1568: Restrict the "get" command to ops                      case "getadmins":                          if (!HasPrivileges('@'' ref e))                              return;                          SendMessageF(SendType.Message' e.Data.Channel' listman.ConfigGetAdmins(extraParams)' Priority.High);                          break;                      case "getbots":                          if (!HasPrivileges('@'' ref e))                              return;                          SendMessageF(SendType.Message' e.Data.Channel' listman.ConfigGetBots(extraParams)' Priority.High);                          break;                        case "intel":                          string intelResult = listman.GlobalIntel(extraParams);                          SendMessageFMulti(SendType.Message' e.Data.Channel' intelResult' Priority.High);                          break;                      case "purge":                          if (!HasPrivileges('@'' ref e))                              return;                          SendMessageF(SendType.Message' e.Data.Channel' listman.PurgeWikiData(extraParams)' Priority.High);                          break;                      case "batchreload":                          if (!HasPrivileges('@'' ref e))                              return;                          prjlist.currentBatchReloadChannel = e.Data.Channel;                          new Thread(new ThreadStart(prjlist.ReloadAllWikis)).Start();                          break;                  }
Magic Number,CVNBot,Program,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Program.cs,Irc_OnChannelMessage,The following statement contains a magic number: switch (command)                  {                      case "quit":                          if (!HasPrivileges('@'' ref e))                              return;                          logger.Info(e.Data.Nick + " ordered a quit");                          PartIRC(rawConfig["partmsg"]);                          Exit();                          break;                      case "restart":                          if (!HasPrivileges('@'' ref e))                              return;                          logger.Info(e.Data.Nick + " ordered a restart");                          PartIRC("Rebooting by order of " + e.Data.Nick + " ...");                          Restart();                          break;                      case "status":                          TimeSpan ago = DateTime.Now.Subtract(rcirc.lastMessage);                          SendMessageF(SendType.Message' e.Data.Channel' "Last message was received on RCReader "                                       + ago.TotalSeconds.ToString() + " seconds ago"' Priority.High);                          break;                      case "help":                          SendMessageF(SendType.Message' e.Data.Channel' (String)msgs["20005"]' Priority.High);                          break;                      case "version":                      case "settings":                      case "config":                          BotConfigMsg(e.Data.Channel);                          if (cmdParams[0] == "all")                          {                              Broadcast("BLEEP"' "CONFIG"' "BLEEP"' 0' e.Data.Channel' e.Data.Nick);                          }                          break;                      case "msgs":                          // Reloads messages                          if (!HasPrivileges('@'' ref e))                              return;                          ReadMessages(rawConfig["messages"]);                          SendMessageF(SendType.Message' e.Data.Channel' "Re-read messages"' Priority.High);                          break;                      case "reload":                          // Reloads wiki data for a project                          if (!HasPrivileges('@'' ref e))                              return;                            if (!prjlist.ContainsKey(cmdParams[0]))                          {                              SendMessageF(SendType.Message' e.Data.Channel' "Project " + cmdParams[0] + " is not loaded"' Priority.High);                              return;                          }                            try                          {                                ((Project)prjlist[cmdParams[0]]).RetrieveWikiDetails();                              SendMessageF(SendType.Message' e.Data.Channel' "Reloaded project " + cmdParams[0]' Priority.High);                          }                          catch (Exception ex)                          {  							SendMessageF(SendType.Message' e.Data.Channel' "Unable to reload: " + ex.Message' Priority.High);                              logger.Error("Reload project failed"' ex);                          }                          break;                      case "load":                          if (!HasPrivileges('@'' ref e))                              return;                          try                          {                              if (cmdParams.Length == 2)                                  prjlist.AddNewProject(cmdParams[0]' cmdParams[1]);                              else                                  prjlist.AddNewProject(cmdParams[0]' "");                                SendMessageF(SendType.Message' e.Data.Channel' "Loaded new project " + cmdParams[0]' Priority.High);                              // Automatically get admins and bots                              SendMessageF(SendType.Message' e.Data.Channel' listman.ConfigGetAdmins(cmdParams[0])' Priority.High);                              SendMessageF(SendType.Message' e.Data.Channel' listman.ConfigGetBots(cmdParams[0])' Priority.High);                          }                          catch (Exception ex)                          {                              SendMessageF(SendType.Message' e.Data.Channel' "Unable to add project: " + ex.Message' Priority.High);                              logger.Error("Add project failed"' ex);                          }                          break;                      case "bleep":                          if (!HasPrivileges('+'' ref e))                              return;                          try                          {                              if (cmdParams[0].Length > 0)                              {                                  if (prjlist.ContainsKey(cmdParams[0]))                                  {                                      SendMessageF(SendType.Action' e.Data.Channel' "has " + cmdParams[0] + "' " + e.Data.Nick + " :D"' Priority.High);                                  }                                  else                                  {                                      Broadcast("BLEEP"' "FIND"' cmdParams[0]' 0' e.Data.Channel' e.Data.Nick);                                      SendMessageF(SendType.Message' e.Data.Channel' "Bleeped. Please wait for a reply."' Priority.High);                                  }                              }                          }                          catch (Exception ex)                          {                              SendMessageF(SendType.Message' e.Data.Channel' "Unable to bleep: " + ex.Message' Priority.High);                          }                          break;                      case "count":                          if (!HasPrivileges('+'' ref e))                              return;                          Broadcast("BLEEP"' "COUNT"' "BLEEP"' 0' e.Data.Channel' e.Data.Nick);                          SendMessageF(SendType.Action' e.Data.Channel' "owns " + prjlist.Count.ToString() + " wikis; version is " + version'                                       Priority.High);                          break;                      case "drop":                          if (!HasPrivileges('@'' ref e))                              return;                          try                          {                              prjlist.DeleteProject(cmdParams[0]);                              SendMessageF(SendType.Message' e.Data.Channel' "Deleted project " + cmdParams[0]' Priority.High);                          }                          catch (Exception ex)                          {                              SendMessageF(SendType.Message' e.Data.Channel' "Unable to delete project: " + ex.Message' Priority.High);                              logger.Error("Delete project failed"' ex);                          }                          break;                      case "list":                          string result = "Currently monitoring: ";                          foreach (string p in prjlist.Keys)                          {                              result += p + " ";                          }                          result += "(Total: " + prjlist.Count.ToString() + " wikis)";                          SendMessageFMulti(SendType.Message' e.Data.Channel' result' Priority.High);                          break;                      case "batchgetusers":                          if (!HasPrivileges('@'' ref e))                              return;                          new Thread(listman.BatchGetAllAdminsAndBots).Start(e.Data.Channel);                          break;                      case "bl":                          SendMessageF(SendType.Message' e.Data.Channel'                                       listman.HandleListCommand(1' e.Data.Nick' extraParams)' Priority.High);                          break;                      case "wl":                          SendMessageF(SendType.Message' e.Data.Channel'                                       listman.HandleListCommand(0' e.Data.Nick' extraParams)' Priority.High);                          break;                      case "gl":                          SendMessageF(SendType.Message' e.Data.Channel'                                       listman.HandleListCommand(6' e.Data.Nick' extraParams)' Priority.High);                          break;                      case "al":                          SendMessageF(SendType.Message' e.Data.Channel'                                       listman.HandleListCommand(2' e.Data.Nick' extraParams)' Priority.High);                          break;                      case "bots":                      case "bot":                          SendMessageF(SendType.Message' e.Data.Channel'                                       listman.HandleListCommand(5' e.Data.Nick' extraParams)' Priority.High);                          break;                      case "cvp":                          SendMessageF(SendType.Message' e.Data.Channel'                                       listman.HandleListCommand(10' e.Data.Nick' extraParams)' Priority.High);                          break;                      case "bnu":                          SendMessageF(SendType.Message' e.Data.Channel'                                       listman.HandleListCommand(11' e.Data.Nick' extraParams)' Priority.High);                          break;                      case "bna":                          SendMessageF(SendType.Message' e.Data.Channel'                                       listman.HandleListCommand(12' e.Data.Nick' extraParams)' Priority.High);                          break;                      case "bes":                          SendMessageF(SendType.Message' e.Data.Channel'                                       listman.HandleListCommand(20' e.Data.Nick' extraParams)' Priority.High);                          break;                        //_1568: Restrict the "get" command to ops                      case "getadmins":                          if (!HasPrivileges('@'' ref e))                              return;                          SendMessageF(SendType.Message' e.Data.Channel' listman.ConfigGetAdmins(extraParams)' Priority.High);                          break;                      case "getbots":                          if (!HasPrivileges('@'' ref e))                              return;                          SendMessageF(SendType.Message' e.Data.Channel' listman.ConfigGetBots(extraParams)' Priority.High);                          break;                        case "intel":                          string intelResult = listman.GlobalIntel(extraParams);                          SendMessageFMulti(SendType.Message' e.Data.Channel' intelResult' Priority.High);                          break;                      case "purge":                          if (!HasPrivileges('@'' ref e))                              return;                          SendMessageF(SendType.Message' e.Data.Channel' listman.PurgeWikiData(extraParams)' Priority.High);                          break;                      case "batchreload":                          if (!HasPrivileges('@'' ref e))                              return;                          prjlist.currentBatchReloadChannel = e.Data.Channel;                          new Thread(new ThreadStart(prjlist.ReloadAllWikis)).Start();                          break;                  }
Magic Number,CVNBot,Program,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Program.cs,Irc_OnChannelMessage,The following statement contains a magic number: switch (command)                  {                      case "quit":                          if (!HasPrivileges('@'' ref e))                              return;                          logger.Info(e.Data.Nick + " ordered a quit");                          PartIRC(rawConfig["partmsg"]);                          Exit();                          break;                      case "restart":                          if (!HasPrivileges('@'' ref e))                              return;                          logger.Info(e.Data.Nick + " ordered a restart");                          PartIRC("Rebooting by order of " + e.Data.Nick + " ...");                          Restart();                          break;                      case "status":                          TimeSpan ago = DateTime.Now.Subtract(rcirc.lastMessage);                          SendMessageF(SendType.Message' e.Data.Channel' "Last message was received on RCReader "                                       + ago.TotalSeconds.ToString() + " seconds ago"' Priority.High);                          break;                      case "help":                          SendMessageF(SendType.Message' e.Data.Channel' (String)msgs["20005"]' Priority.High);                          break;                      case "version":                      case "settings":                      case "config":                          BotConfigMsg(e.Data.Channel);                          if (cmdParams[0] == "all")                          {                              Broadcast("BLEEP"' "CONFIG"' "BLEEP"' 0' e.Data.Channel' e.Data.Nick);                          }                          break;                      case "msgs":                          // Reloads messages                          if (!HasPrivileges('@'' ref e))                              return;                          ReadMessages(rawConfig["messages"]);                          SendMessageF(SendType.Message' e.Data.Channel' "Re-read messages"' Priority.High);                          break;                      case "reload":                          // Reloads wiki data for a project                          if (!HasPrivileges('@'' ref e))                              return;                            if (!prjlist.ContainsKey(cmdParams[0]))                          {                              SendMessageF(SendType.Message' e.Data.Channel' "Project " + cmdParams[0] + " is not loaded"' Priority.High);                              return;                          }                            try                          {                                ((Project)prjlist[cmdParams[0]]).RetrieveWikiDetails();                              SendMessageF(SendType.Message' e.Data.Channel' "Reloaded project " + cmdParams[0]' Priority.High);                          }                          catch (Exception ex)                          {  							SendMessageF(SendType.Message' e.Data.Channel' "Unable to reload: " + ex.Message' Priority.High);                              logger.Error("Reload project failed"' ex);                          }                          break;                      case "load":                          if (!HasPrivileges('@'' ref e))                              return;                          try                          {                              if (cmdParams.Length == 2)                                  prjlist.AddNewProject(cmdParams[0]' cmdParams[1]);                              else                                  prjlist.AddNewProject(cmdParams[0]' "");                                SendMessageF(SendType.Message' e.Data.Channel' "Loaded new project " + cmdParams[0]' Priority.High);                              // Automatically get admins and bots                              SendMessageF(SendType.Message' e.Data.Channel' listman.ConfigGetAdmins(cmdParams[0])' Priority.High);                              SendMessageF(SendType.Message' e.Data.Channel' listman.ConfigGetBots(cmdParams[0])' Priority.High);                          }                          catch (Exception ex)                          {                              SendMessageF(SendType.Message' e.Data.Channel' "Unable to add project: " + ex.Message' Priority.High);                              logger.Error("Add project failed"' ex);                          }                          break;                      case "bleep":                          if (!HasPrivileges('+'' ref e))                              return;                          try                          {                              if (cmdParams[0].Length > 0)                              {                                  if (prjlist.ContainsKey(cmdParams[0]))                                  {                                      SendMessageF(SendType.Action' e.Data.Channel' "has " + cmdParams[0] + "' " + e.Data.Nick + " :D"' Priority.High);                                  }                                  else                                  {                                      Broadcast("BLEEP"' "FIND"' cmdParams[0]' 0' e.Data.Channel' e.Data.Nick);                                      SendMessageF(SendType.Message' e.Data.Channel' "Bleeped. Please wait for a reply."' Priority.High);                                  }                              }                          }                          catch (Exception ex)                          {                              SendMessageF(SendType.Message' e.Data.Channel' "Unable to bleep: " + ex.Message' Priority.High);                          }                          break;                      case "count":                          if (!HasPrivileges('+'' ref e))                              return;                          Broadcast("BLEEP"' "COUNT"' "BLEEP"' 0' e.Data.Channel' e.Data.Nick);                          SendMessageF(SendType.Action' e.Data.Channel' "owns " + prjlist.Count.ToString() + " wikis; version is " + version'                                       Priority.High);                          break;                      case "drop":                          if (!HasPrivileges('@'' ref e))                              return;                          try                          {                              prjlist.DeleteProject(cmdParams[0]);                              SendMessageF(SendType.Message' e.Data.Channel' "Deleted project " + cmdParams[0]' Priority.High);                          }                          catch (Exception ex)                          {                              SendMessageF(SendType.Message' e.Data.Channel' "Unable to delete project: " + ex.Message' Priority.High);                              logger.Error("Delete project failed"' ex);                          }                          break;                      case "list":                          string result = "Currently monitoring: ";                          foreach (string p in prjlist.Keys)                          {                              result += p + " ";                          }                          result += "(Total: " + prjlist.Count.ToString() + " wikis)";                          SendMessageFMulti(SendType.Message' e.Data.Channel' result' Priority.High);                          break;                      case "batchgetusers":                          if (!HasPrivileges('@'' ref e))                              return;                          new Thread(listman.BatchGetAllAdminsAndBots).Start(e.Data.Channel);                          break;                      case "bl":                          SendMessageF(SendType.Message' e.Data.Channel'                                       listman.HandleListCommand(1' e.Data.Nick' extraParams)' Priority.High);                          break;                      case "wl":                          SendMessageF(SendType.Message' e.Data.Channel'                                       listman.HandleListCommand(0' e.Data.Nick' extraParams)' Priority.High);                          break;                      case "gl":                          SendMessageF(SendType.Message' e.Data.Channel'                                       listman.HandleListCommand(6' e.Data.Nick' extraParams)' Priority.High);                          break;                      case "al":                          SendMessageF(SendType.Message' e.Data.Channel'                                       listman.HandleListCommand(2' e.Data.Nick' extraParams)' Priority.High);                          break;                      case "bots":                      case "bot":                          SendMessageF(SendType.Message' e.Data.Channel'                                       listman.HandleListCommand(5' e.Data.Nick' extraParams)' Priority.High);                          break;                      case "cvp":                          SendMessageF(SendType.Message' e.Data.Channel'                                       listman.HandleListCommand(10' e.Data.Nick' extraParams)' Priority.High);                          break;                      case "bnu":                          SendMessageF(SendType.Message' e.Data.Channel'                                       listman.HandleListCommand(11' e.Data.Nick' extraParams)' Priority.High);                          break;                      case "bna":                          SendMessageF(SendType.Message' e.Data.Channel'                                       listman.HandleListCommand(12' e.Data.Nick' extraParams)' Priority.High);                          break;                      case "bes":                          SendMessageF(SendType.Message' e.Data.Channel'                                       listman.HandleListCommand(20' e.Data.Nick' extraParams)' Priority.High);                          break;                        //_1568: Restrict the "get" command to ops                      case "getadmins":                          if (!HasPrivileges('@'' ref e))                              return;                          SendMessageF(SendType.Message' e.Data.Channel' listman.ConfigGetAdmins(extraParams)' Priority.High);                          break;                      case "getbots":                          if (!HasPrivileges('@'' ref e))                              return;                          SendMessageF(SendType.Message' e.Data.Channel' listman.ConfigGetBots(extraParams)' Priority.High);                          break;                        case "intel":                          string intelResult = listman.GlobalIntel(extraParams);                          SendMessageFMulti(SendType.Message' e.Data.Channel' intelResult' Priority.High);                          break;                      case "purge":                          if (!HasPrivileges('@'' ref e))                              return;                          SendMessageF(SendType.Message' e.Data.Channel' listman.PurgeWikiData(extraParams)' Priority.High);                          break;                      case "batchreload":                          if (!HasPrivileges('@'' ref e))                              return;                          prjlist.currentBatchReloadChannel = e.Data.Channel;                          new Thread(new ThreadStart(prjlist.ReloadAllWikis)).Start();                          break;                  }
Magic Number,CVNBot,Program,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Program.cs,Irc_OnChannelMessage,The following statement contains a magic number: switch (command)                  {                      case "quit":                          if (!HasPrivileges('@'' ref e))                              return;                          logger.Info(e.Data.Nick + " ordered a quit");                          PartIRC(rawConfig["partmsg"]);                          Exit();                          break;                      case "restart":                          if (!HasPrivileges('@'' ref e))                              return;                          logger.Info(e.Data.Nick + " ordered a restart");                          PartIRC("Rebooting by order of " + e.Data.Nick + " ...");                          Restart();                          break;                      case "status":                          TimeSpan ago = DateTime.Now.Subtract(rcirc.lastMessage);                          SendMessageF(SendType.Message' e.Data.Channel' "Last message was received on RCReader "                                       + ago.TotalSeconds.ToString() + " seconds ago"' Priority.High);                          break;                      case "help":                          SendMessageF(SendType.Message' e.Data.Channel' (String)msgs["20005"]' Priority.High);                          break;                      case "version":                      case "settings":                      case "config":                          BotConfigMsg(e.Data.Channel);                          if (cmdParams[0] == "all")                          {                              Broadcast("BLEEP"' "CONFIG"' "BLEEP"' 0' e.Data.Channel' e.Data.Nick);                          }                          break;                      case "msgs":                          // Reloads messages                          if (!HasPrivileges('@'' ref e))                              return;                          ReadMessages(rawConfig["messages"]);                          SendMessageF(SendType.Message' e.Data.Channel' "Re-read messages"' Priority.High);                          break;                      case "reload":                          // Reloads wiki data for a project                          if (!HasPrivileges('@'' ref e))                              return;                            if (!prjlist.ContainsKey(cmdParams[0]))                          {                              SendMessageF(SendType.Message' e.Data.Channel' "Project " + cmdParams[0] + " is not loaded"' Priority.High);                              return;                          }                            try                          {                                ((Project)prjlist[cmdParams[0]]).RetrieveWikiDetails();                              SendMessageF(SendType.Message' e.Data.Channel' "Reloaded project " + cmdParams[0]' Priority.High);                          }                          catch (Exception ex)                          {  							SendMessageF(SendType.Message' e.Data.Channel' "Unable to reload: " + ex.Message' Priority.High);                              logger.Error("Reload project failed"' ex);                          }                          break;                      case "load":                          if (!HasPrivileges('@'' ref e))                              return;                          try                          {                              if (cmdParams.Length == 2)                                  prjlist.AddNewProject(cmdParams[0]' cmdParams[1]);                              else                                  prjlist.AddNewProject(cmdParams[0]' "");                                SendMessageF(SendType.Message' e.Data.Channel' "Loaded new project " + cmdParams[0]' Priority.High);                              // Automatically get admins and bots                              SendMessageF(SendType.Message' e.Data.Channel' listman.ConfigGetAdmins(cmdParams[0])' Priority.High);                              SendMessageF(SendType.Message' e.Data.Channel' listman.ConfigGetBots(cmdParams[0])' Priority.High);                          }                          catch (Exception ex)                          {                              SendMessageF(SendType.Message' e.Data.Channel' "Unable to add project: " + ex.Message' Priority.High);                              logger.Error("Add project failed"' ex);                          }                          break;                      case "bleep":                          if (!HasPrivileges('+'' ref e))                              return;                          try                          {                              if (cmdParams[0].Length > 0)                              {                                  if (prjlist.ContainsKey(cmdParams[0]))                                  {                                      SendMessageF(SendType.Action' e.Data.Channel' "has " + cmdParams[0] + "' " + e.Data.Nick + " :D"' Priority.High);                                  }                                  else                                  {                                      Broadcast("BLEEP"' "FIND"' cmdParams[0]' 0' e.Data.Channel' e.Data.Nick);                                      SendMessageF(SendType.Message' e.Data.Channel' "Bleeped. Please wait for a reply."' Priority.High);                                  }                              }                          }                          catch (Exception ex)                          {                              SendMessageF(SendType.Message' e.Data.Channel' "Unable to bleep: " + ex.Message' Priority.High);                          }                          break;                      case "count":                          if (!HasPrivileges('+'' ref e))                              return;                          Broadcast("BLEEP"' "COUNT"' "BLEEP"' 0' e.Data.Channel' e.Data.Nick);                          SendMessageF(SendType.Action' e.Data.Channel' "owns " + prjlist.Count.ToString() + " wikis; version is " + version'                                       Priority.High);                          break;                      case "drop":                          if (!HasPrivileges('@'' ref e))                              return;                          try                          {                              prjlist.DeleteProject(cmdParams[0]);                              SendMessageF(SendType.Message' e.Data.Channel' "Deleted project " + cmdParams[0]' Priority.High);                          }                          catch (Exception ex)                          {                              SendMessageF(SendType.Message' e.Data.Channel' "Unable to delete project: " + ex.Message' Priority.High);                              logger.Error("Delete project failed"' ex);                          }                          break;                      case "list":                          string result = "Currently monitoring: ";                          foreach (string p in prjlist.Keys)                          {                              result += p + " ";                          }                          result += "(Total: " + prjlist.Count.ToString() + " wikis)";                          SendMessageFMulti(SendType.Message' e.Data.Channel' result' Priority.High);                          break;                      case "batchgetusers":                          if (!HasPrivileges('@'' ref e))                              return;                          new Thread(listman.BatchGetAllAdminsAndBots).Start(e.Data.Channel);                          break;                      case "bl":                          SendMessageF(SendType.Message' e.Data.Channel'                                       listman.HandleListCommand(1' e.Data.Nick' extraParams)' Priority.High);                          break;                      case "wl":                          SendMessageF(SendType.Message' e.Data.Channel'                                       listman.HandleListCommand(0' e.Data.Nick' extraParams)' Priority.High);                          break;                      case "gl":                          SendMessageF(SendType.Message' e.Data.Channel'                                       listman.HandleListCommand(6' e.Data.Nick' extraParams)' Priority.High);                          break;                      case "al":                          SendMessageF(SendType.Message' e.Data.Channel'                                       listman.HandleListCommand(2' e.Data.Nick' extraParams)' Priority.High);                          break;                      case "bots":                      case "bot":                          SendMessageF(SendType.Message' e.Data.Channel'                                       listman.HandleListCommand(5' e.Data.Nick' extraParams)' Priority.High);                          break;                      case "cvp":                          SendMessageF(SendType.Message' e.Data.Channel'                                       listman.HandleListCommand(10' e.Data.Nick' extraParams)' Priority.High);                          break;                      case "bnu":                          SendMessageF(SendType.Message' e.Data.Channel'                                       listman.HandleListCommand(11' e.Data.Nick' extraParams)' Priority.High);                          break;                      case "bna":                          SendMessageF(SendType.Message' e.Data.Channel'                                       listman.HandleListCommand(12' e.Data.Nick' extraParams)' Priority.High);                          break;                      case "bes":                          SendMessageF(SendType.Message' e.Data.Channel'                                       listman.HandleListCommand(20' e.Data.Nick' extraParams)' Priority.High);                          break;                        //_1568: Restrict the "get" command to ops                      case "getadmins":                          if (!HasPrivileges('@'' ref e))                              return;                          SendMessageF(SendType.Message' e.Data.Channel' listman.ConfigGetAdmins(extraParams)' Priority.High);                          break;                      case "getbots":                          if (!HasPrivileges('@'' ref e))                              return;                          SendMessageF(SendType.Message' e.Data.Channel' listman.ConfigGetBots(extraParams)' Priority.High);                          break;                        case "intel":                          string intelResult = listman.GlobalIntel(extraParams);                          SendMessageFMulti(SendType.Message' e.Data.Channel' intelResult' Priority.High);                          break;                      case "purge":                          if (!HasPrivileges('@'' ref e))                              return;                          SendMessageF(SendType.Message' e.Data.Channel' listman.PurgeWikiData(extraParams)' Priority.High);                          break;                      case "batchreload":                          if (!HasPrivileges('@'' ref e))                              return;                          prjlist.currentBatchReloadChannel = e.Data.Channel;                          new Thread(new ThreadStart(prjlist.ReloadAllWikis)).Start();                          break;                  }
Magic Number,CVNBot,Program,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Program.cs,GetMessage,The following statement contains a magic number: string message = (string)msgs[msgCode.ToString().PadLeft(5' '0')];
Magic Number,CVNBot,Program,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Program.cs,GetFormatMessage,The following statement contains a magic number: string message = (string)msgs[msgCode.ToString().PadLeft(5' '0')];
Magic Number,CVNBot,Program,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Program.cs,AddToGreylist,The following statement contains a magic number: Broadcast("GL"' "ADD"' username' 900' reason' "CVNBot");
Magic Number,CVNBot,Program,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Program.cs,AddToGreylist,The following statement contains a magic number: (userOffset == 1) || (userOffset == 4) || (userOffset == 3) || (userOffset == 6)
Magic Number,CVNBot,Program,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Program.cs,AddToGreylist,The following statement contains a magic number: (userOffset == 1) || (userOffset == 4) || (userOffset == 3) || (userOffset == 6)
Magic Number,CVNBot,Program,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Program.cs,AddToGreylist,The following statement contains a magic number: (userOffset == 1) || (userOffset == 4) || (userOffset == 3) || (userOffset == 6)
Magic Number,CVNBot,Program,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Program.cs,ReactToRCEvent,The following statement contains a magic number: feedFilterThisEvent == 4
Magic Number,CVNBot,Program,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Program.cs,ReactToRCEvent,The following statement contains a magic number: r.botflag && (config.feedFilterUsersBot == 4)
Magic Number,CVNBot,Program,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Program.cs,ReactToRCEvent,The following statement contains a magic number: userOffset == 3
Magic Number,CVNBot,Program,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Program.cs,ReactToRCEvent,The following statement contains a magic number: userOffset == 4
Magic Number,CVNBot,Program,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Program.cs,ReactToRCEvent,The following statement contains a magic number: userOffset == 5
Magic Number,CVNBot,Program,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Program.cs,ReactToRCEvent,The following statement contains a magic number: feedFilterThisUser == 4
Magic Number,CVNBot,Program,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Program.cs,ReactToRCEvent,The following statement contains a magic number: switch (r.eventtype)              {                  // This case handles:                  // - New page creations                  // - Page edits                  case RCEvent.EventType.edit:                      String diffsize;                      if (r.szdiff >= 0)                          diffsize = "+" + r.szdiff.ToString();                      else                          diffsize = r.szdiff.ToString();                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("size"' diffsize);                      attribs.Add("url"' r.url);                      attribs.Add("reason"' r.comment);                        // This block handles: New page creations                      if (r.newpage)                      {                          bool createSpecial = false;                            // New pages created by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.newBig)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5010 + userOffset' ref attribs);                          }                          else if (r.szdiff <= config.newSmall)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5020 + userOffset' ref attribs);                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5000 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Article is on watchlist                          // - Page title matches a BNA pattern                          // - Edit summary matches a BES pattern                            // Is the article on the watchlist?                          ListMatch wlm = listman.IsWatchedArticle(r.title' r.project);                          if (wlm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5030 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16301' (String)attribs["article"]));                              break;                          }                            // Does the page title match a BNA pattern?                          ListMatch eslm = listman.MatchesList(r.title' 12);                          if (eslm.Success)                          {                              // Matches BNA                              attribs.Add("watchword"' eslm.matchedItem);                              message = GetMessage(5040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' eslm.matchedItem));                              break;                          }                            // Does the edit summary match a BES pattern?                          ListMatch lm = listman.MatchesList(r.comment' 20);                          if (lm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' lm.matchedItem);                              message = GetMessage(95040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' lm.matchedItem));                              break;                          }                            // If we're still here that means                          // - the create didn't get ignored by adminlist or whitelist                          // - the create didn't match any watch patterns                          // Now' if any of the following is true' we'll must report it.                          // - Create by blacklisted user                          // - Create by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // Created by an unlisted reguser with non-special create size' ignore                          if ((userOffset == 4) && !createSpecial)                              return;                            // Else: Create had special size' so let it shown (default)' don't return!                      }                      // This block handles: Page edits                      else                      {                          bool editSpecial = false;                            // Edit by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.editBig)                          {                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5110 + userOffset' ref attribs);                              editSpecial = true;                          }                          else if (r.szdiff <= config.editBlank)                          {                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5120 + userOffset' ref attribs);                              editSpecial = true;                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5100 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Edit summary matches a BES pattern                          // - Edit blanked the page                          // - Edit replaced the page                          // - Article is on watchlist                            // Does the edit summary match a BES pattern?                          ListMatch elm = listman.MatchesList(r.comment' 20);                          if (elm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' elm.matchedItem);                              message = GetMessage(95130 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16310' r.comment' (String)attribs["article"]));                              break;                          }                            // Did the user user blank the page?                          if (project.rautosummBlank.IsMatch(r.comment))                          {                              message = GetMessage(96010 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16311' (String)attribs["article"]));                              break;                          }                            Match rplm = project.rautosummReplace.Match(r.comment);                          if (rplm.Success)                          {                              // The user replaced the page.                              try                              {                                  attribs.Add("profanity"' rplm.Groups["item1"].Captures[0].Value);                                  message = GetMessage(96020 + userOffset' ref attribs);                              }                              catch (ArgumentOutOfRangeException)                              {                                  // This wiki probably doesn't have a profanity attribute                                  message = GetMessage(96030 + userOffset' ref attribs);                              }                              break;                          }                            // Is the article on the watchlist?                          ListMatch welm = listman.IsWatchedArticle(r.title' r.project);                          if (welm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5130 + userOffset' ref attribs);                              break;                          }                            // If we're still here that means                          // - the edit didn't get ignored by adminlist or whitelist                          // - the edit didn't match any watch patterns                          // Now' if any of the following is true' we must still report it.                          // - Edit by blacklisted user                          // - Edit by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // If nothing special about the edit' return to ignore                          if (!editSpecial)                              return;                      }                      break;                  case RCEvent.EventType.move:                      // if moves are softhidden hide moves by admin' bot or whitelist                      if ((config.feedFilterEventMove == 2) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                      {                          return;                      }                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("fromname"' project.interwikiLink + r.title);                      attribs.Add("cfromname"' r.title);                      attribs.Add("toname"' project.interwikiLink + r.movedTo);                      attribs.Add("ctoname"' r.movedTo);                      attribs.Add("url"' r.blockLength); //The blockLength field stores the moveFrom URL                      attribs.Add("reason"' r.comment);                      message = GetMessage(5500 + userOffset' ref attribs);                      break;                  case RCEvent.EventType.block:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.title.Split(new char[] { ':' }' 2)[1]));                      attribs.Add("length"' r.blockLength);                      attribs.Add("reason"' r.comment);                      message = GetMessage(5400' ref attribs);                      //If the blocked user (r.title) isn't botlisted' add to blacklist                      if (listman.ClassifyEditor(r.title.Split(new char[] { ':' }' 2)[1]' r.project) != ListManager.UserType.bot)                      {                          //If this isn't an indefinite/infinite block' add to blacklist                          if ((r.blockLength.ToLower() != "indefinite") && (r.blockLength.ToLower() != "infinite"))                          {                                                               // 2'678'400 seconds = 744 hours = 31 days                              int listLen = Convert.ToInt32(CVNBotUtils.ParseDateTimeLength(r.blockLength' 2678400) * 2.5);                              string blComment = "Autoblacklist: " + r.comment + " on " + r.project;                              message += "\n" + listman.AddUserToList(r.title.Split(new char[] { ':' }' 2)[1]' "" //Global bl                                  ' ListManager.UserType.blacklisted' r.user' blComment' listLen);                              Broadcast("BL"' "ADD"' r.title.Split(new char[] { ':' }' 2)[1]' listLen' blComment' r.user);                          }                      }                      break;                  case RCEvent.EventType.unblock:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("reason"' r.comment);                      message = GetMessage(5700' ref attribs);                      break;                  case RCEvent.EventType.delete:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      attribs.Add("reason"' r.comment);                      message = GetMessage(05300' ref attribs);                      break;                  case RCEvent.EventType.newuser:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("caurl"' "https://meta.wikimedia.org/wiki/Special:CentralAuth/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch = listman.MatchesList(r.user' 11);                      if (bnuMatch.Success && feedFilterThisEvent == 1)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch.matchedItem);                          attribs.Add("wwreason"' bnuMatch.matchedReason);                          message = GetMessage(5201' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5200' ref attribs);                      }                      break;                  case RCEvent.EventType.newuser2:                      attribs.Add("creator"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ccreator"' r.user);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.title);                      attribs.Add("ceditor"' r.title);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch2 = listman.MatchesList(r.user' 11);                      if (bnuMatch2.Success)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch2.matchedItem);                          attribs.Add("wwreason"' bnuMatch2.matchedReason);                          message = GetMessage(5211' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch2.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5210' ref attribs);                      }                      break;                  case RCEvent.EventType.upload:                      int uMsg = 5600;                        // Check if the edit summary matches BES                      ListMatch ubes2 = listman.MatchesList(r.comment' 20);                      if (ubes2.Success)                      {                          attribs.Add("watchword"' ubes2.matchedItem);                          attribs.Add("lmreason"' ubes2.matchedReason);                          uMsg = 95620;                      }                        // Now check if the title matches BES                      ListMatch ubes1 = listman.MatchesList(r.title' 20);                      if (ubes1.Success)                      {                          attribs.Add("watchword"' ubes1.matchedItem);                          attribs.Add("lmreason"' ubes1.matchedReason);                          uMsg = 95620;                      }                        // Check if upload is watched                      ListMatch uwa = listman.IsWatchedArticle(r.title' r.project);                      if (uwa.Success)                          uMsg = 5610;                        // If normal and uploaded by an admin' bot or whitelisted person always hide                      if ((uMsg == 5600) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                          return;                        // if normal and uploads are softhidden hide normal user and anon aswell                      if ((uMsg == 5600) && (config.feedFilterEventUpload == 2) && ((userOffset == 3) || (userOffset == 4)))                          return;                        // If our message is 95620' we might need to truncate r.comment                      if (uMsg == 95620)                      {                          if (r.comment.Length > 25)                              r.comment = r.comment.Substring(0' 23) + "...";                      }                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("uploaditem"' project.interwikiLink + r.title);                      attribs.Add("cuploaditem"' r.title);                      attribs.Add("reason"' r.comment);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(userOffset + uMsg' ref attribs);                      break;                  case RCEvent.EventType.protect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in protect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5900' ref attribs);                      break;                  case RCEvent.EventType.unprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in unprotect is fine' it's just the pagetitle                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(5901' ref attribs);                      break;                  case RCEvent.EventType.modifyprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in modifyprotect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5902' ref attribs);                      break;              }
Magic Number,CVNBot,Program,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Program.cs,ReactToRCEvent,The following statement contains a magic number: switch (r.eventtype)              {                  // This case handles:                  // - New page creations                  // - Page edits                  case RCEvent.EventType.edit:                      String diffsize;                      if (r.szdiff >= 0)                          diffsize = "+" + r.szdiff.ToString();                      else                          diffsize = r.szdiff.ToString();                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("size"' diffsize);                      attribs.Add("url"' r.url);                      attribs.Add("reason"' r.comment);                        // This block handles: New page creations                      if (r.newpage)                      {                          bool createSpecial = false;                            // New pages created by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.newBig)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5010 + userOffset' ref attribs);                          }                          else if (r.szdiff <= config.newSmall)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5020 + userOffset' ref attribs);                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5000 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Article is on watchlist                          // - Page title matches a BNA pattern                          // - Edit summary matches a BES pattern                            // Is the article on the watchlist?                          ListMatch wlm = listman.IsWatchedArticle(r.title' r.project);                          if (wlm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5030 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16301' (String)attribs["article"]));                              break;                          }                            // Does the page title match a BNA pattern?                          ListMatch eslm = listman.MatchesList(r.title' 12);                          if (eslm.Success)                          {                              // Matches BNA                              attribs.Add("watchword"' eslm.matchedItem);                              message = GetMessage(5040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' eslm.matchedItem));                              break;                          }                            // Does the edit summary match a BES pattern?                          ListMatch lm = listman.MatchesList(r.comment' 20);                          if (lm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' lm.matchedItem);                              message = GetMessage(95040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' lm.matchedItem));                              break;                          }                            // If we're still here that means                          // - the create didn't get ignored by adminlist or whitelist                          // - the create didn't match any watch patterns                          // Now' if any of the following is true' we'll must report it.                          // - Create by blacklisted user                          // - Create by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // Created by an unlisted reguser with non-special create size' ignore                          if ((userOffset == 4) && !createSpecial)                              return;                            // Else: Create had special size' so let it shown (default)' don't return!                      }                      // This block handles: Page edits                      else                      {                          bool editSpecial = false;                            // Edit by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.editBig)                          {                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5110 + userOffset' ref attribs);                              editSpecial = true;                          }                          else if (r.szdiff <= config.editBlank)                          {                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5120 + userOffset' ref attribs);                              editSpecial = true;                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5100 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Edit summary matches a BES pattern                          // - Edit blanked the page                          // - Edit replaced the page                          // - Article is on watchlist                            // Does the edit summary match a BES pattern?                          ListMatch elm = listman.MatchesList(r.comment' 20);                          if (elm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' elm.matchedItem);                              message = GetMessage(95130 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16310' r.comment' (String)attribs["article"]));                              break;                          }                            // Did the user user blank the page?                          if (project.rautosummBlank.IsMatch(r.comment))                          {                              message = GetMessage(96010 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16311' (String)attribs["article"]));                              break;                          }                            Match rplm = project.rautosummReplace.Match(r.comment);                          if (rplm.Success)                          {                              // The user replaced the page.                              try                              {                                  attribs.Add("profanity"' rplm.Groups["item1"].Captures[0].Value);                                  message = GetMessage(96020 + userOffset' ref attribs);                              }                              catch (ArgumentOutOfRangeException)                              {                                  // This wiki probably doesn't have a profanity attribute                                  message = GetMessage(96030 + userOffset' ref attribs);                              }                              break;                          }                            // Is the article on the watchlist?                          ListMatch welm = listman.IsWatchedArticle(r.title' r.project);                          if (welm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5130 + userOffset' ref attribs);                              break;                          }                            // If we're still here that means                          // - the edit didn't get ignored by adminlist or whitelist                          // - the edit didn't match any watch patterns                          // Now' if any of the following is true' we must still report it.                          // - Edit by blacklisted user                          // - Edit by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // If nothing special about the edit' return to ignore                          if (!editSpecial)                              return;                      }                      break;                  case RCEvent.EventType.move:                      // if moves are softhidden hide moves by admin' bot or whitelist                      if ((config.feedFilterEventMove == 2) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                      {                          return;                      }                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("fromname"' project.interwikiLink + r.title);                      attribs.Add("cfromname"' r.title);                      attribs.Add("toname"' project.interwikiLink + r.movedTo);                      attribs.Add("ctoname"' r.movedTo);                      attribs.Add("url"' r.blockLength); //The blockLength field stores the moveFrom URL                      attribs.Add("reason"' r.comment);                      message = GetMessage(5500 + userOffset' ref attribs);                      break;                  case RCEvent.EventType.block:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.title.Split(new char[] { ':' }' 2)[1]));                      attribs.Add("length"' r.blockLength);                      attribs.Add("reason"' r.comment);                      message = GetMessage(5400' ref attribs);                      //If the blocked user (r.title) isn't botlisted' add to blacklist                      if (listman.ClassifyEditor(r.title.Split(new char[] { ':' }' 2)[1]' r.project) != ListManager.UserType.bot)                      {                          //If this isn't an indefinite/infinite block' add to blacklist                          if ((r.blockLength.ToLower() != "indefinite") && (r.blockLength.ToLower() != "infinite"))                          {                                                               // 2'678'400 seconds = 744 hours = 31 days                              int listLen = Convert.ToInt32(CVNBotUtils.ParseDateTimeLength(r.blockLength' 2678400) * 2.5);                              string blComment = "Autoblacklist: " + r.comment + " on " + r.project;                              message += "\n" + listman.AddUserToList(r.title.Split(new char[] { ':' }' 2)[1]' "" //Global bl                                  ' ListManager.UserType.blacklisted' r.user' blComment' listLen);                              Broadcast("BL"' "ADD"' r.title.Split(new char[] { ':' }' 2)[1]' listLen' blComment' r.user);                          }                      }                      break;                  case RCEvent.EventType.unblock:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("reason"' r.comment);                      message = GetMessage(5700' ref attribs);                      break;                  case RCEvent.EventType.delete:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      attribs.Add("reason"' r.comment);                      message = GetMessage(05300' ref attribs);                      break;                  case RCEvent.EventType.newuser:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("caurl"' "https://meta.wikimedia.org/wiki/Special:CentralAuth/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch = listman.MatchesList(r.user' 11);                      if (bnuMatch.Success && feedFilterThisEvent == 1)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch.matchedItem);                          attribs.Add("wwreason"' bnuMatch.matchedReason);                          message = GetMessage(5201' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5200' ref attribs);                      }                      break;                  case RCEvent.EventType.newuser2:                      attribs.Add("creator"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ccreator"' r.user);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.title);                      attribs.Add("ceditor"' r.title);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch2 = listman.MatchesList(r.user' 11);                      if (bnuMatch2.Success)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch2.matchedItem);                          attribs.Add("wwreason"' bnuMatch2.matchedReason);                          message = GetMessage(5211' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch2.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5210' ref attribs);                      }                      break;                  case RCEvent.EventType.upload:                      int uMsg = 5600;                        // Check if the edit summary matches BES                      ListMatch ubes2 = listman.MatchesList(r.comment' 20);                      if (ubes2.Success)                      {                          attribs.Add("watchword"' ubes2.matchedItem);                          attribs.Add("lmreason"' ubes2.matchedReason);                          uMsg = 95620;                      }                        // Now check if the title matches BES                      ListMatch ubes1 = listman.MatchesList(r.title' 20);                      if (ubes1.Success)                      {                          attribs.Add("watchword"' ubes1.matchedItem);                          attribs.Add("lmreason"' ubes1.matchedReason);                          uMsg = 95620;                      }                        // Check if upload is watched                      ListMatch uwa = listman.IsWatchedArticle(r.title' r.project);                      if (uwa.Success)                          uMsg = 5610;                        // If normal and uploaded by an admin' bot or whitelisted person always hide                      if ((uMsg == 5600) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                          return;                        // if normal and uploads are softhidden hide normal user and anon aswell                      if ((uMsg == 5600) && (config.feedFilterEventUpload == 2) && ((userOffset == 3) || (userOffset == 4)))                          return;                        // If our message is 95620' we might need to truncate r.comment                      if (uMsg == 95620)                      {                          if (r.comment.Length > 25)                              r.comment = r.comment.Substring(0' 23) + "...";                      }                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("uploaditem"' project.interwikiLink + r.title);                      attribs.Add("cuploaditem"' r.title);                      attribs.Add("reason"' r.comment);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(userOffset + uMsg' ref attribs);                      break;                  case RCEvent.EventType.protect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in protect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5900' ref attribs);                      break;                  case RCEvent.EventType.unprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in unprotect is fine' it's just the pagetitle                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(5901' ref attribs);                      break;                  case RCEvent.EventType.modifyprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in modifyprotect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5902' ref attribs);                      break;              }
Magic Number,CVNBot,Program,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Program.cs,ReactToRCEvent,The following statement contains a magic number: switch (r.eventtype)              {                  // This case handles:                  // - New page creations                  // - Page edits                  case RCEvent.EventType.edit:                      String diffsize;                      if (r.szdiff >= 0)                          diffsize = "+" + r.szdiff.ToString();                      else                          diffsize = r.szdiff.ToString();                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("size"' diffsize);                      attribs.Add("url"' r.url);                      attribs.Add("reason"' r.comment);                        // This block handles: New page creations                      if (r.newpage)                      {                          bool createSpecial = false;                            // New pages created by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.newBig)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5010 + userOffset' ref attribs);                          }                          else if (r.szdiff <= config.newSmall)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5020 + userOffset' ref attribs);                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5000 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Article is on watchlist                          // - Page title matches a BNA pattern                          // - Edit summary matches a BES pattern                            // Is the article on the watchlist?                          ListMatch wlm = listman.IsWatchedArticle(r.title' r.project);                          if (wlm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5030 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16301' (String)attribs["article"]));                              break;                          }                            // Does the page title match a BNA pattern?                          ListMatch eslm = listman.MatchesList(r.title' 12);                          if (eslm.Success)                          {                              // Matches BNA                              attribs.Add("watchword"' eslm.matchedItem);                              message = GetMessage(5040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' eslm.matchedItem));                              break;                          }                            // Does the edit summary match a BES pattern?                          ListMatch lm = listman.MatchesList(r.comment' 20);                          if (lm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' lm.matchedItem);                              message = GetMessage(95040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' lm.matchedItem));                              break;                          }                            // If we're still here that means                          // - the create didn't get ignored by adminlist or whitelist                          // - the create didn't match any watch patterns                          // Now' if any of the following is true' we'll must report it.                          // - Create by blacklisted user                          // - Create by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // Created by an unlisted reguser with non-special create size' ignore                          if ((userOffset == 4) && !createSpecial)                              return;                            // Else: Create had special size' so let it shown (default)' don't return!                      }                      // This block handles: Page edits                      else                      {                          bool editSpecial = false;                            // Edit by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.editBig)                          {                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5110 + userOffset' ref attribs);                              editSpecial = true;                          }                          else if (r.szdiff <= config.editBlank)                          {                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5120 + userOffset' ref attribs);                              editSpecial = true;                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5100 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Edit summary matches a BES pattern                          // - Edit blanked the page                          // - Edit replaced the page                          // - Article is on watchlist                            // Does the edit summary match a BES pattern?                          ListMatch elm = listman.MatchesList(r.comment' 20);                          if (elm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' elm.matchedItem);                              message = GetMessage(95130 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16310' r.comment' (String)attribs["article"]));                              break;                          }                            // Did the user user blank the page?                          if (project.rautosummBlank.IsMatch(r.comment))                          {                              message = GetMessage(96010 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16311' (String)attribs["article"]));                              break;                          }                            Match rplm = project.rautosummReplace.Match(r.comment);                          if (rplm.Success)                          {                              // The user replaced the page.                              try                              {                                  attribs.Add("profanity"' rplm.Groups["item1"].Captures[0].Value);                                  message = GetMessage(96020 + userOffset' ref attribs);                              }                              catch (ArgumentOutOfRangeException)                              {                                  // This wiki probably doesn't have a profanity attribute                                  message = GetMessage(96030 + userOffset' ref attribs);                              }                              break;                          }                            // Is the article on the watchlist?                          ListMatch welm = listman.IsWatchedArticle(r.title' r.project);                          if (welm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5130 + userOffset' ref attribs);                              break;                          }                            // If we're still here that means                          // - the edit didn't get ignored by adminlist or whitelist                          // - the edit didn't match any watch patterns                          // Now' if any of the following is true' we must still report it.                          // - Edit by blacklisted user                          // - Edit by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // If nothing special about the edit' return to ignore                          if (!editSpecial)                              return;                      }                      break;                  case RCEvent.EventType.move:                      // if moves are softhidden hide moves by admin' bot or whitelist                      if ((config.feedFilterEventMove == 2) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                      {                          return;                      }                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("fromname"' project.interwikiLink + r.title);                      attribs.Add("cfromname"' r.title);                      attribs.Add("toname"' project.interwikiLink + r.movedTo);                      attribs.Add("ctoname"' r.movedTo);                      attribs.Add("url"' r.blockLength); //The blockLength field stores the moveFrom URL                      attribs.Add("reason"' r.comment);                      message = GetMessage(5500 + userOffset' ref attribs);                      break;                  case RCEvent.EventType.block:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.title.Split(new char[] { ':' }' 2)[1]));                      attribs.Add("length"' r.blockLength);                      attribs.Add("reason"' r.comment);                      message = GetMessage(5400' ref attribs);                      //If the blocked user (r.title) isn't botlisted' add to blacklist                      if (listman.ClassifyEditor(r.title.Split(new char[] { ':' }' 2)[1]' r.project) != ListManager.UserType.bot)                      {                          //If this isn't an indefinite/infinite block' add to blacklist                          if ((r.blockLength.ToLower() != "indefinite") && (r.blockLength.ToLower() != "infinite"))                          {                                                               // 2'678'400 seconds = 744 hours = 31 days                              int listLen = Convert.ToInt32(CVNBotUtils.ParseDateTimeLength(r.blockLength' 2678400) * 2.5);                              string blComment = "Autoblacklist: " + r.comment + " on " + r.project;                              message += "\n" + listman.AddUserToList(r.title.Split(new char[] { ':' }' 2)[1]' "" //Global bl                                  ' ListManager.UserType.blacklisted' r.user' blComment' listLen);                              Broadcast("BL"' "ADD"' r.title.Split(new char[] { ':' }' 2)[1]' listLen' blComment' r.user);                          }                      }                      break;                  case RCEvent.EventType.unblock:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("reason"' r.comment);                      message = GetMessage(5700' ref attribs);                      break;                  case RCEvent.EventType.delete:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      attribs.Add("reason"' r.comment);                      message = GetMessage(05300' ref attribs);                      break;                  case RCEvent.EventType.newuser:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("caurl"' "https://meta.wikimedia.org/wiki/Special:CentralAuth/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch = listman.MatchesList(r.user' 11);                      if (bnuMatch.Success && feedFilterThisEvent == 1)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch.matchedItem);                          attribs.Add("wwreason"' bnuMatch.matchedReason);                          message = GetMessage(5201' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5200' ref attribs);                      }                      break;                  case RCEvent.EventType.newuser2:                      attribs.Add("creator"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ccreator"' r.user);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.title);                      attribs.Add("ceditor"' r.title);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch2 = listman.MatchesList(r.user' 11);                      if (bnuMatch2.Success)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch2.matchedItem);                          attribs.Add("wwreason"' bnuMatch2.matchedReason);                          message = GetMessage(5211' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch2.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5210' ref attribs);                      }                      break;                  case RCEvent.EventType.upload:                      int uMsg = 5600;                        // Check if the edit summary matches BES                      ListMatch ubes2 = listman.MatchesList(r.comment' 20);                      if (ubes2.Success)                      {                          attribs.Add("watchword"' ubes2.matchedItem);                          attribs.Add("lmreason"' ubes2.matchedReason);                          uMsg = 95620;                      }                        // Now check if the title matches BES                      ListMatch ubes1 = listman.MatchesList(r.title' 20);                      if (ubes1.Success)                      {                          attribs.Add("watchword"' ubes1.matchedItem);                          attribs.Add("lmreason"' ubes1.matchedReason);                          uMsg = 95620;                      }                        // Check if upload is watched                      ListMatch uwa = listman.IsWatchedArticle(r.title' r.project);                      if (uwa.Success)                          uMsg = 5610;                        // If normal and uploaded by an admin' bot or whitelisted person always hide                      if ((uMsg == 5600) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                          return;                        // if normal and uploads are softhidden hide normal user and anon aswell                      if ((uMsg == 5600) && (config.feedFilterEventUpload == 2) && ((userOffset == 3) || (userOffset == 4)))                          return;                        // If our message is 95620' we might need to truncate r.comment                      if (uMsg == 95620)                      {                          if (r.comment.Length > 25)                              r.comment = r.comment.Substring(0' 23) + "...";                      }                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("uploaditem"' project.interwikiLink + r.title);                      attribs.Add("cuploaditem"' r.title);                      attribs.Add("reason"' r.comment);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(userOffset + uMsg' ref attribs);                      break;                  case RCEvent.EventType.protect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in protect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5900' ref attribs);                      break;                  case RCEvent.EventType.unprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in unprotect is fine' it's just the pagetitle                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(5901' ref attribs);                      break;                  case RCEvent.EventType.modifyprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in modifyprotect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5902' ref attribs);                      break;              }
Magic Number,CVNBot,Program,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Program.cs,ReactToRCEvent,The following statement contains a magic number: switch (r.eventtype)              {                  // This case handles:                  // - New page creations                  // - Page edits                  case RCEvent.EventType.edit:                      String diffsize;                      if (r.szdiff >= 0)                          diffsize = "+" + r.szdiff.ToString();                      else                          diffsize = r.szdiff.ToString();                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("size"' diffsize);                      attribs.Add("url"' r.url);                      attribs.Add("reason"' r.comment);                        // This block handles: New page creations                      if (r.newpage)                      {                          bool createSpecial = false;                            // New pages created by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.newBig)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5010 + userOffset' ref attribs);                          }                          else if (r.szdiff <= config.newSmall)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5020 + userOffset' ref attribs);                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5000 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Article is on watchlist                          // - Page title matches a BNA pattern                          // - Edit summary matches a BES pattern                            // Is the article on the watchlist?                          ListMatch wlm = listman.IsWatchedArticle(r.title' r.project);                          if (wlm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5030 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16301' (String)attribs["article"]));                              break;                          }                            // Does the page title match a BNA pattern?                          ListMatch eslm = listman.MatchesList(r.title' 12);                          if (eslm.Success)                          {                              // Matches BNA                              attribs.Add("watchword"' eslm.matchedItem);                              message = GetMessage(5040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' eslm.matchedItem));                              break;                          }                            // Does the edit summary match a BES pattern?                          ListMatch lm = listman.MatchesList(r.comment' 20);                          if (lm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' lm.matchedItem);                              message = GetMessage(95040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' lm.matchedItem));                              break;                          }                            // If we're still here that means                          // - the create didn't get ignored by adminlist or whitelist                          // - the create didn't match any watch patterns                          // Now' if any of the following is true' we'll must report it.                          // - Create by blacklisted user                          // - Create by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // Created by an unlisted reguser with non-special create size' ignore                          if ((userOffset == 4) && !createSpecial)                              return;                            // Else: Create had special size' so let it shown (default)' don't return!                      }                      // This block handles: Page edits                      else                      {                          bool editSpecial = false;                            // Edit by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.editBig)                          {                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5110 + userOffset' ref attribs);                              editSpecial = true;                          }                          else if (r.szdiff <= config.editBlank)                          {                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5120 + userOffset' ref attribs);                              editSpecial = true;                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5100 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Edit summary matches a BES pattern                          // - Edit blanked the page                          // - Edit replaced the page                          // - Article is on watchlist                            // Does the edit summary match a BES pattern?                          ListMatch elm = listman.MatchesList(r.comment' 20);                          if (elm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' elm.matchedItem);                              message = GetMessage(95130 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16310' r.comment' (String)attribs["article"]));                              break;                          }                            // Did the user user blank the page?                          if (project.rautosummBlank.IsMatch(r.comment))                          {                              message = GetMessage(96010 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16311' (String)attribs["article"]));                              break;                          }                            Match rplm = project.rautosummReplace.Match(r.comment);                          if (rplm.Success)                          {                              // The user replaced the page.                              try                              {                                  attribs.Add("profanity"' rplm.Groups["item1"].Captures[0].Value);                                  message = GetMessage(96020 + userOffset' ref attribs);                              }                              catch (ArgumentOutOfRangeException)                              {                                  // This wiki probably doesn't have a profanity attribute                                  message = GetMessage(96030 + userOffset' ref attribs);                              }                              break;                          }                            // Is the article on the watchlist?                          ListMatch welm = listman.IsWatchedArticle(r.title' r.project);                          if (welm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5130 + userOffset' ref attribs);                              break;                          }                            // If we're still here that means                          // - the edit didn't get ignored by adminlist or whitelist                          // - the edit didn't match any watch patterns                          // Now' if any of the following is true' we must still report it.                          // - Edit by blacklisted user                          // - Edit by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // If nothing special about the edit' return to ignore                          if (!editSpecial)                              return;                      }                      break;                  case RCEvent.EventType.move:                      // if moves are softhidden hide moves by admin' bot or whitelist                      if ((config.feedFilterEventMove == 2) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                      {                          return;                      }                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("fromname"' project.interwikiLink + r.title);                      attribs.Add("cfromname"' r.title);                      attribs.Add("toname"' project.interwikiLink + r.movedTo);                      attribs.Add("ctoname"' r.movedTo);                      attribs.Add("url"' r.blockLength); //The blockLength field stores the moveFrom URL                      attribs.Add("reason"' r.comment);                      message = GetMessage(5500 + userOffset' ref attribs);                      break;                  case RCEvent.EventType.block:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.title.Split(new char[] { ':' }' 2)[1]));                      attribs.Add("length"' r.blockLength);                      attribs.Add("reason"' r.comment);                      message = GetMessage(5400' ref attribs);                      //If the blocked user (r.title) isn't botlisted' add to blacklist                      if (listman.ClassifyEditor(r.title.Split(new char[] { ':' }' 2)[1]' r.project) != ListManager.UserType.bot)                      {                          //If this isn't an indefinite/infinite block' add to blacklist                          if ((r.blockLength.ToLower() != "indefinite") && (r.blockLength.ToLower() != "infinite"))                          {                                                               // 2'678'400 seconds = 744 hours = 31 days                              int listLen = Convert.ToInt32(CVNBotUtils.ParseDateTimeLength(r.blockLength' 2678400) * 2.5);                              string blComment = "Autoblacklist: " + r.comment + " on " + r.project;                              message += "\n" + listman.AddUserToList(r.title.Split(new char[] { ':' }' 2)[1]' "" //Global bl                                  ' ListManager.UserType.blacklisted' r.user' blComment' listLen);                              Broadcast("BL"' "ADD"' r.title.Split(new char[] { ':' }' 2)[1]' listLen' blComment' r.user);                          }                      }                      break;                  case RCEvent.EventType.unblock:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("reason"' r.comment);                      message = GetMessage(5700' ref attribs);                      break;                  case RCEvent.EventType.delete:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      attribs.Add("reason"' r.comment);                      message = GetMessage(05300' ref attribs);                      break;                  case RCEvent.EventType.newuser:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("caurl"' "https://meta.wikimedia.org/wiki/Special:CentralAuth/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch = listman.MatchesList(r.user' 11);                      if (bnuMatch.Success && feedFilterThisEvent == 1)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch.matchedItem);                          attribs.Add("wwreason"' bnuMatch.matchedReason);                          message = GetMessage(5201' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5200' ref attribs);                      }                      break;                  case RCEvent.EventType.newuser2:                      attribs.Add("creator"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ccreator"' r.user);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.title);                      attribs.Add("ceditor"' r.title);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch2 = listman.MatchesList(r.user' 11);                      if (bnuMatch2.Success)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch2.matchedItem);                          attribs.Add("wwreason"' bnuMatch2.matchedReason);                          message = GetMessage(5211' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch2.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5210' ref attribs);                      }                      break;                  case RCEvent.EventType.upload:                      int uMsg = 5600;                        // Check if the edit summary matches BES                      ListMatch ubes2 = listman.MatchesList(r.comment' 20);                      if (ubes2.Success)                      {                          attribs.Add("watchword"' ubes2.matchedItem);                          attribs.Add("lmreason"' ubes2.matchedReason);                          uMsg = 95620;                      }                        // Now check if the title matches BES                      ListMatch ubes1 = listman.MatchesList(r.title' 20);                      if (ubes1.Success)                      {                          attribs.Add("watchword"' ubes1.matchedItem);                          attribs.Add("lmreason"' ubes1.matchedReason);                          uMsg = 95620;                      }                        // Check if upload is watched                      ListMatch uwa = listman.IsWatchedArticle(r.title' r.project);                      if (uwa.Success)                          uMsg = 5610;                        // If normal and uploaded by an admin' bot or whitelisted person always hide                      if ((uMsg == 5600) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                          return;                        // if normal and uploads are softhidden hide normal user and anon aswell                      if ((uMsg == 5600) && (config.feedFilterEventUpload == 2) && ((userOffset == 3) || (userOffset == 4)))                          return;                        // If our message is 95620' we might need to truncate r.comment                      if (uMsg == 95620)                      {                          if (r.comment.Length > 25)                              r.comment = r.comment.Substring(0' 23) + "...";                      }                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("uploaditem"' project.interwikiLink + r.title);                      attribs.Add("cuploaditem"' r.title);                      attribs.Add("reason"' r.comment);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(userOffset + uMsg' ref attribs);                      break;                  case RCEvent.EventType.protect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in protect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5900' ref attribs);                      break;                  case RCEvent.EventType.unprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in unprotect is fine' it's just the pagetitle                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(5901' ref attribs);                      break;                  case RCEvent.EventType.modifyprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in modifyprotect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5902' ref attribs);                      break;              }
Magic Number,CVNBot,Program,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Program.cs,ReactToRCEvent,The following statement contains a magic number: switch (r.eventtype)              {                  // This case handles:                  // - New page creations                  // - Page edits                  case RCEvent.EventType.edit:                      String diffsize;                      if (r.szdiff >= 0)                          diffsize = "+" + r.szdiff.ToString();                      else                          diffsize = r.szdiff.ToString();                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("size"' diffsize);                      attribs.Add("url"' r.url);                      attribs.Add("reason"' r.comment);                        // This block handles: New page creations                      if (r.newpage)                      {                          bool createSpecial = false;                            // New pages created by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.newBig)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5010 + userOffset' ref attribs);                          }                          else if (r.szdiff <= config.newSmall)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5020 + userOffset' ref attribs);                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5000 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Article is on watchlist                          // - Page title matches a BNA pattern                          // - Edit summary matches a BES pattern                            // Is the article on the watchlist?                          ListMatch wlm = listman.IsWatchedArticle(r.title' r.project);                          if (wlm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5030 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16301' (String)attribs["article"]));                              break;                          }                            // Does the page title match a BNA pattern?                          ListMatch eslm = listman.MatchesList(r.title' 12);                          if (eslm.Success)                          {                              // Matches BNA                              attribs.Add("watchword"' eslm.matchedItem);                              message = GetMessage(5040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' eslm.matchedItem));                              break;                          }                            // Does the edit summary match a BES pattern?                          ListMatch lm = listman.MatchesList(r.comment' 20);                          if (lm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' lm.matchedItem);                              message = GetMessage(95040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' lm.matchedItem));                              break;                          }                            // If we're still here that means                          // - the create didn't get ignored by adminlist or whitelist                          // - the create didn't match any watch patterns                          // Now' if any of the following is true' we'll must report it.                          // - Create by blacklisted user                          // - Create by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // Created by an unlisted reguser with non-special create size' ignore                          if ((userOffset == 4) && !createSpecial)                              return;                            // Else: Create had special size' so let it shown (default)' don't return!                      }                      // This block handles: Page edits                      else                      {                          bool editSpecial = false;                            // Edit by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.editBig)                          {                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5110 + userOffset' ref attribs);                              editSpecial = true;                          }                          else if (r.szdiff <= config.editBlank)                          {                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5120 + userOffset' ref attribs);                              editSpecial = true;                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5100 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Edit summary matches a BES pattern                          // - Edit blanked the page                          // - Edit replaced the page                          // - Article is on watchlist                            // Does the edit summary match a BES pattern?                          ListMatch elm = listman.MatchesList(r.comment' 20);                          if (elm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' elm.matchedItem);                              message = GetMessage(95130 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16310' r.comment' (String)attribs["article"]));                              break;                          }                            // Did the user user blank the page?                          if (project.rautosummBlank.IsMatch(r.comment))                          {                              message = GetMessage(96010 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16311' (String)attribs["article"]));                              break;                          }                            Match rplm = project.rautosummReplace.Match(r.comment);                          if (rplm.Success)                          {                              // The user replaced the page.                              try                              {                                  attribs.Add("profanity"' rplm.Groups["item1"].Captures[0].Value);                                  message = GetMessage(96020 + userOffset' ref attribs);                              }                              catch (ArgumentOutOfRangeException)                              {                                  // This wiki probably doesn't have a profanity attribute                                  message = GetMessage(96030 + userOffset' ref attribs);                              }                              break;                          }                            // Is the article on the watchlist?                          ListMatch welm = listman.IsWatchedArticle(r.title' r.project);                          if (welm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5130 + userOffset' ref attribs);                              break;                          }                            // If we're still here that means                          // - the edit didn't get ignored by adminlist or whitelist                          // - the edit didn't match any watch patterns                          // Now' if any of the following is true' we must still report it.                          // - Edit by blacklisted user                          // - Edit by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // If nothing special about the edit' return to ignore                          if (!editSpecial)                              return;                      }                      break;                  case RCEvent.EventType.move:                      // if moves are softhidden hide moves by admin' bot or whitelist                      if ((config.feedFilterEventMove == 2) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                      {                          return;                      }                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("fromname"' project.interwikiLink + r.title);                      attribs.Add("cfromname"' r.title);                      attribs.Add("toname"' project.interwikiLink + r.movedTo);                      attribs.Add("ctoname"' r.movedTo);                      attribs.Add("url"' r.blockLength); //The blockLength field stores the moveFrom URL                      attribs.Add("reason"' r.comment);                      message = GetMessage(5500 + userOffset' ref attribs);                      break;                  case RCEvent.EventType.block:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.title.Split(new char[] { ':' }' 2)[1]));                      attribs.Add("length"' r.blockLength);                      attribs.Add("reason"' r.comment);                      message = GetMessage(5400' ref attribs);                      //If the blocked user (r.title) isn't botlisted' add to blacklist                      if (listman.ClassifyEditor(r.title.Split(new char[] { ':' }' 2)[1]' r.project) != ListManager.UserType.bot)                      {                          //If this isn't an indefinite/infinite block' add to blacklist                          if ((r.blockLength.ToLower() != "indefinite") && (r.blockLength.ToLower() != "infinite"))                          {                                                               // 2'678'400 seconds = 744 hours = 31 days                              int listLen = Convert.ToInt32(CVNBotUtils.ParseDateTimeLength(r.blockLength' 2678400) * 2.5);                              string blComment = "Autoblacklist: " + r.comment + " on " + r.project;                              message += "\n" + listman.AddUserToList(r.title.Split(new char[] { ':' }' 2)[1]' "" //Global bl                                  ' ListManager.UserType.blacklisted' r.user' blComment' listLen);                              Broadcast("BL"' "ADD"' r.title.Split(new char[] { ':' }' 2)[1]' listLen' blComment' r.user);                          }                      }                      break;                  case RCEvent.EventType.unblock:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("reason"' r.comment);                      message = GetMessage(5700' ref attribs);                      break;                  case RCEvent.EventType.delete:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      attribs.Add("reason"' r.comment);                      message = GetMessage(05300' ref attribs);                      break;                  case RCEvent.EventType.newuser:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("caurl"' "https://meta.wikimedia.org/wiki/Special:CentralAuth/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch = listman.MatchesList(r.user' 11);                      if (bnuMatch.Success && feedFilterThisEvent == 1)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch.matchedItem);                          attribs.Add("wwreason"' bnuMatch.matchedReason);                          message = GetMessage(5201' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5200' ref attribs);                      }                      break;                  case RCEvent.EventType.newuser2:                      attribs.Add("creator"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ccreator"' r.user);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.title);                      attribs.Add("ceditor"' r.title);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch2 = listman.MatchesList(r.user' 11);                      if (bnuMatch2.Success)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch2.matchedItem);                          attribs.Add("wwreason"' bnuMatch2.matchedReason);                          message = GetMessage(5211' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch2.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5210' ref attribs);                      }                      break;                  case RCEvent.EventType.upload:                      int uMsg = 5600;                        // Check if the edit summary matches BES                      ListMatch ubes2 = listman.MatchesList(r.comment' 20);                      if (ubes2.Success)                      {                          attribs.Add("watchword"' ubes2.matchedItem);                          attribs.Add("lmreason"' ubes2.matchedReason);                          uMsg = 95620;                      }                        // Now check if the title matches BES                      ListMatch ubes1 = listman.MatchesList(r.title' 20);                      if (ubes1.Success)                      {                          attribs.Add("watchword"' ubes1.matchedItem);                          attribs.Add("lmreason"' ubes1.matchedReason);                          uMsg = 95620;                      }                        // Check if upload is watched                      ListMatch uwa = listman.IsWatchedArticle(r.title' r.project);                      if (uwa.Success)                          uMsg = 5610;                        // If normal and uploaded by an admin' bot or whitelisted person always hide                      if ((uMsg == 5600) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                          return;                        // if normal and uploads are softhidden hide normal user and anon aswell                      if ((uMsg == 5600) && (config.feedFilterEventUpload == 2) && ((userOffset == 3) || (userOffset == 4)))                          return;                        // If our message is 95620' we might need to truncate r.comment                      if (uMsg == 95620)                      {                          if (r.comment.Length > 25)                              r.comment = r.comment.Substring(0' 23) + "...";                      }                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("uploaditem"' project.interwikiLink + r.title);                      attribs.Add("cuploaditem"' r.title);                      attribs.Add("reason"' r.comment);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(userOffset + uMsg' ref attribs);                      break;                  case RCEvent.EventType.protect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in protect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5900' ref attribs);                      break;                  case RCEvent.EventType.unprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in unprotect is fine' it's just the pagetitle                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(5901' ref attribs);                      break;                  case RCEvent.EventType.modifyprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in modifyprotect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5902' ref attribs);                      break;              }
Magic Number,CVNBot,Program,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Program.cs,ReactToRCEvent,The following statement contains a magic number: switch (r.eventtype)              {                  // This case handles:                  // - New page creations                  // - Page edits                  case RCEvent.EventType.edit:                      String diffsize;                      if (r.szdiff >= 0)                          diffsize = "+" + r.szdiff.ToString();                      else                          diffsize = r.szdiff.ToString();                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("size"' diffsize);                      attribs.Add("url"' r.url);                      attribs.Add("reason"' r.comment);                        // This block handles: New page creations                      if (r.newpage)                      {                          bool createSpecial = false;                            // New pages created by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.newBig)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5010 + userOffset' ref attribs);                          }                          else if (r.szdiff <= config.newSmall)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5020 + userOffset' ref attribs);                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5000 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Article is on watchlist                          // - Page title matches a BNA pattern                          // - Edit summary matches a BES pattern                            // Is the article on the watchlist?                          ListMatch wlm = listman.IsWatchedArticle(r.title' r.project);                          if (wlm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5030 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16301' (String)attribs["article"]));                              break;                          }                            // Does the page title match a BNA pattern?                          ListMatch eslm = listman.MatchesList(r.title' 12);                          if (eslm.Success)                          {                              // Matches BNA                              attribs.Add("watchword"' eslm.matchedItem);                              message = GetMessage(5040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' eslm.matchedItem));                              break;                          }                            // Does the edit summary match a BES pattern?                          ListMatch lm = listman.MatchesList(r.comment' 20);                          if (lm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' lm.matchedItem);                              message = GetMessage(95040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' lm.matchedItem));                              break;                          }                            // If we're still here that means                          // - the create didn't get ignored by adminlist or whitelist                          // - the create didn't match any watch patterns                          // Now' if any of the following is true' we'll must report it.                          // - Create by blacklisted user                          // - Create by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // Created by an unlisted reguser with non-special create size' ignore                          if ((userOffset == 4) && !createSpecial)                              return;                            // Else: Create had special size' so let it shown (default)' don't return!                      }                      // This block handles: Page edits                      else                      {                          bool editSpecial = false;                            // Edit by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.editBig)                          {                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5110 + userOffset' ref attribs);                              editSpecial = true;                          }                          else if (r.szdiff <= config.editBlank)                          {                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5120 + userOffset' ref attribs);                              editSpecial = true;                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5100 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Edit summary matches a BES pattern                          // - Edit blanked the page                          // - Edit replaced the page                          // - Article is on watchlist                            // Does the edit summary match a BES pattern?                          ListMatch elm = listman.MatchesList(r.comment' 20);                          if (elm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' elm.matchedItem);                              message = GetMessage(95130 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16310' r.comment' (String)attribs["article"]));                              break;                          }                            // Did the user user blank the page?                          if (project.rautosummBlank.IsMatch(r.comment))                          {                              message = GetMessage(96010 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16311' (String)attribs["article"]));                              break;                          }                            Match rplm = project.rautosummReplace.Match(r.comment);                          if (rplm.Success)                          {                              // The user replaced the page.                              try                              {                                  attribs.Add("profanity"' rplm.Groups["item1"].Captures[0].Value);                                  message = GetMessage(96020 + userOffset' ref attribs);                              }                              catch (ArgumentOutOfRangeException)                              {                                  // This wiki probably doesn't have a profanity attribute                                  message = GetMessage(96030 + userOffset' ref attribs);                              }                              break;                          }                            // Is the article on the watchlist?                          ListMatch welm = listman.IsWatchedArticle(r.title' r.project);                          if (welm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5130 + userOffset' ref attribs);                              break;                          }                            // If we're still here that means                          // - the edit didn't get ignored by adminlist or whitelist                          // - the edit didn't match any watch patterns                          // Now' if any of the following is true' we must still report it.                          // - Edit by blacklisted user                          // - Edit by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // If nothing special about the edit' return to ignore                          if (!editSpecial)                              return;                      }                      break;                  case RCEvent.EventType.move:                      // if moves are softhidden hide moves by admin' bot or whitelist                      if ((config.feedFilterEventMove == 2) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                      {                          return;                      }                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("fromname"' project.interwikiLink + r.title);                      attribs.Add("cfromname"' r.title);                      attribs.Add("toname"' project.interwikiLink + r.movedTo);                      attribs.Add("ctoname"' r.movedTo);                      attribs.Add("url"' r.blockLength); //The blockLength field stores the moveFrom URL                      attribs.Add("reason"' r.comment);                      message = GetMessage(5500 + userOffset' ref attribs);                      break;                  case RCEvent.EventType.block:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.title.Split(new char[] { ':' }' 2)[1]));                      attribs.Add("length"' r.blockLength);                      attribs.Add("reason"' r.comment);                      message = GetMessage(5400' ref attribs);                      //If the blocked user (r.title) isn't botlisted' add to blacklist                      if (listman.ClassifyEditor(r.title.Split(new char[] { ':' }' 2)[1]' r.project) != ListManager.UserType.bot)                      {                          //If this isn't an indefinite/infinite block' add to blacklist                          if ((r.blockLength.ToLower() != "indefinite") && (r.blockLength.ToLower() != "infinite"))                          {                                                               // 2'678'400 seconds = 744 hours = 31 days                              int listLen = Convert.ToInt32(CVNBotUtils.ParseDateTimeLength(r.blockLength' 2678400) * 2.5);                              string blComment = "Autoblacklist: " + r.comment + " on " + r.project;                              message += "\n" + listman.AddUserToList(r.title.Split(new char[] { ':' }' 2)[1]' "" //Global bl                                  ' ListManager.UserType.blacklisted' r.user' blComment' listLen);                              Broadcast("BL"' "ADD"' r.title.Split(new char[] { ':' }' 2)[1]' listLen' blComment' r.user);                          }                      }                      break;                  case RCEvent.EventType.unblock:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("reason"' r.comment);                      message = GetMessage(5700' ref attribs);                      break;                  case RCEvent.EventType.delete:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      attribs.Add("reason"' r.comment);                      message = GetMessage(05300' ref attribs);                      break;                  case RCEvent.EventType.newuser:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("caurl"' "https://meta.wikimedia.org/wiki/Special:CentralAuth/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch = listman.MatchesList(r.user' 11);                      if (bnuMatch.Success && feedFilterThisEvent == 1)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch.matchedItem);                          attribs.Add("wwreason"' bnuMatch.matchedReason);                          message = GetMessage(5201' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5200' ref attribs);                      }                      break;                  case RCEvent.EventType.newuser2:                      attribs.Add("creator"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ccreator"' r.user);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.title);                      attribs.Add("ceditor"' r.title);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch2 = listman.MatchesList(r.user' 11);                      if (bnuMatch2.Success)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch2.matchedItem);                          attribs.Add("wwreason"' bnuMatch2.matchedReason);                          message = GetMessage(5211' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch2.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5210' ref attribs);                      }                      break;                  case RCEvent.EventType.upload:                      int uMsg = 5600;                        // Check if the edit summary matches BES                      ListMatch ubes2 = listman.MatchesList(r.comment' 20);                      if (ubes2.Success)                      {                          attribs.Add("watchword"' ubes2.matchedItem);                          attribs.Add("lmreason"' ubes2.matchedReason);                          uMsg = 95620;                      }                        // Now check if the title matches BES                      ListMatch ubes1 = listman.MatchesList(r.title' 20);                      if (ubes1.Success)                      {                          attribs.Add("watchword"' ubes1.matchedItem);                          attribs.Add("lmreason"' ubes1.matchedReason);                          uMsg = 95620;                      }                        // Check if upload is watched                      ListMatch uwa = listman.IsWatchedArticle(r.title' r.project);                      if (uwa.Success)                          uMsg = 5610;                        // If normal and uploaded by an admin' bot or whitelisted person always hide                      if ((uMsg == 5600) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                          return;                        // if normal and uploads are softhidden hide normal user and anon aswell                      if ((uMsg == 5600) && (config.feedFilterEventUpload == 2) && ((userOffset == 3) || (userOffset == 4)))                          return;                        // If our message is 95620' we might need to truncate r.comment                      if (uMsg == 95620)                      {                          if (r.comment.Length > 25)                              r.comment = r.comment.Substring(0' 23) + "...";                      }                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("uploaditem"' project.interwikiLink + r.title);                      attribs.Add("cuploaditem"' r.title);                      attribs.Add("reason"' r.comment);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(userOffset + uMsg' ref attribs);                      break;                  case RCEvent.EventType.protect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in protect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5900' ref attribs);                      break;                  case RCEvent.EventType.unprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in unprotect is fine' it's just the pagetitle                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(5901' ref attribs);                      break;                  case RCEvent.EventType.modifyprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in modifyprotect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5902' ref attribs);                      break;              }
Magic Number,CVNBot,Program,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Program.cs,ReactToRCEvent,The following statement contains a magic number: switch (r.eventtype)              {                  // This case handles:                  // - New page creations                  // - Page edits                  case RCEvent.EventType.edit:                      String diffsize;                      if (r.szdiff >= 0)                          diffsize = "+" + r.szdiff.ToString();                      else                          diffsize = r.szdiff.ToString();                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("size"' diffsize);                      attribs.Add("url"' r.url);                      attribs.Add("reason"' r.comment);                        // This block handles: New page creations                      if (r.newpage)                      {                          bool createSpecial = false;                            // New pages created by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.newBig)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5010 + userOffset' ref attribs);                          }                          else if (r.szdiff <= config.newSmall)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5020 + userOffset' ref attribs);                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5000 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Article is on watchlist                          // - Page title matches a BNA pattern                          // - Edit summary matches a BES pattern                            // Is the article on the watchlist?                          ListMatch wlm = listman.IsWatchedArticle(r.title' r.project);                          if (wlm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5030 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16301' (String)attribs["article"]));                              break;                          }                            // Does the page title match a BNA pattern?                          ListMatch eslm = listman.MatchesList(r.title' 12);                          if (eslm.Success)                          {                              // Matches BNA                              attribs.Add("watchword"' eslm.matchedItem);                              message = GetMessage(5040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' eslm.matchedItem));                              break;                          }                            // Does the edit summary match a BES pattern?                          ListMatch lm = listman.MatchesList(r.comment' 20);                          if (lm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' lm.matchedItem);                              message = GetMessage(95040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' lm.matchedItem));                              break;                          }                            // If we're still here that means                          // - the create didn't get ignored by adminlist or whitelist                          // - the create didn't match any watch patterns                          // Now' if any of the following is true' we'll must report it.                          // - Create by blacklisted user                          // - Create by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // Created by an unlisted reguser with non-special create size' ignore                          if ((userOffset == 4) && !createSpecial)                              return;                            // Else: Create had special size' so let it shown (default)' don't return!                      }                      // This block handles: Page edits                      else                      {                          bool editSpecial = false;                            // Edit by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.editBig)                          {                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5110 + userOffset' ref attribs);                              editSpecial = true;                          }                          else if (r.szdiff <= config.editBlank)                          {                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5120 + userOffset' ref attribs);                              editSpecial = true;                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5100 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Edit summary matches a BES pattern                          // - Edit blanked the page                          // - Edit replaced the page                          // - Article is on watchlist                            // Does the edit summary match a BES pattern?                          ListMatch elm = listman.MatchesList(r.comment' 20);                          if (elm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' elm.matchedItem);                              message = GetMessage(95130 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16310' r.comment' (String)attribs["article"]));                              break;                          }                            // Did the user user blank the page?                          if (project.rautosummBlank.IsMatch(r.comment))                          {                              message = GetMessage(96010 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16311' (String)attribs["article"]));                              break;                          }                            Match rplm = project.rautosummReplace.Match(r.comment);                          if (rplm.Success)                          {                              // The user replaced the page.                              try                              {                                  attribs.Add("profanity"' rplm.Groups["item1"].Captures[0].Value);                                  message = GetMessage(96020 + userOffset' ref attribs);                              }                              catch (ArgumentOutOfRangeException)                              {                                  // This wiki probably doesn't have a profanity attribute                                  message = GetMessage(96030 + userOffset' ref attribs);                              }                              break;                          }                            // Is the article on the watchlist?                          ListMatch welm = listman.IsWatchedArticle(r.title' r.project);                          if (welm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5130 + userOffset' ref attribs);                              break;                          }                            // If we're still here that means                          // - the edit didn't get ignored by adminlist or whitelist                          // - the edit didn't match any watch patterns                          // Now' if any of the following is true' we must still report it.                          // - Edit by blacklisted user                          // - Edit by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // If nothing special about the edit' return to ignore                          if (!editSpecial)                              return;                      }                      break;                  case RCEvent.EventType.move:                      // if moves are softhidden hide moves by admin' bot or whitelist                      if ((config.feedFilterEventMove == 2) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                      {                          return;                      }                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("fromname"' project.interwikiLink + r.title);                      attribs.Add("cfromname"' r.title);                      attribs.Add("toname"' project.interwikiLink + r.movedTo);                      attribs.Add("ctoname"' r.movedTo);                      attribs.Add("url"' r.blockLength); //The blockLength field stores the moveFrom URL                      attribs.Add("reason"' r.comment);                      message = GetMessage(5500 + userOffset' ref attribs);                      break;                  case RCEvent.EventType.block:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.title.Split(new char[] { ':' }' 2)[1]));                      attribs.Add("length"' r.blockLength);                      attribs.Add("reason"' r.comment);                      message = GetMessage(5400' ref attribs);                      //If the blocked user (r.title) isn't botlisted' add to blacklist                      if (listman.ClassifyEditor(r.title.Split(new char[] { ':' }' 2)[1]' r.project) != ListManager.UserType.bot)                      {                          //If this isn't an indefinite/infinite block' add to blacklist                          if ((r.blockLength.ToLower() != "indefinite") && (r.blockLength.ToLower() != "infinite"))                          {                                                               // 2'678'400 seconds = 744 hours = 31 days                              int listLen = Convert.ToInt32(CVNBotUtils.ParseDateTimeLength(r.blockLength' 2678400) * 2.5);                              string blComment = "Autoblacklist: " + r.comment + " on " + r.project;                              message += "\n" + listman.AddUserToList(r.title.Split(new char[] { ':' }' 2)[1]' "" //Global bl                                  ' ListManager.UserType.blacklisted' r.user' blComment' listLen);                              Broadcast("BL"' "ADD"' r.title.Split(new char[] { ':' }' 2)[1]' listLen' blComment' r.user);                          }                      }                      break;                  case RCEvent.EventType.unblock:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("reason"' r.comment);                      message = GetMessage(5700' ref attribs);                      break;                  case RCEvent.EventType.delete:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      attribs.Add("reason"' r.comment);                      message = GetMessage(05300' ref attribs);                      break;                  case RCEvent.EventType.newuser:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("caurl"' "https://meta.wikimedia.org/wiki/Special:CentralAuth/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch = listman.MatchesList(r.user' 11);                      if (bnuMatch.Success && feedFilterThisEvent == 1)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch.matchedItem);                          attribs.Add("wwreason"' bnuMatch.matchedReason);                          message = GetMessage(5201' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5200' ref attribs);                      }                      break;                  case RCEvent.EventType.newuser2:                      attribs.Add("creator"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ccreator"' r.user);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.title);                      attribs.Add("ceditor"' r.title);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch2 = listman.MatchesList(r.user' 11);                      if (bnuMatch2.Success)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch2.matchedItem);                          attribs.Add("wwreason"' bnuMatch2.matchedReason);                          message = GetMessage(5211' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch2.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5210' ref attribs);                      }                      break;                  case RCEvent.EventType.upload:                      int uMsg = 5600;                        // Check if the edit summary matches BES                      ListMatch ubes2 = listman.MatchesList(r.comment' 20);                      if (ubes2.Success)                      {                          attribs.Add("watchword"' ubes2.matchedItem);                          attribs.Add("lmreason"' ubes2.matchedReason);                          uMsg = 95620;                      }                        // Now check if the title matches BES                      ListMatch ubes1 = listman.MatchesList(r.title' 20);                      if (ubes1.Success)                      {                          attribs.Add("watchword"' ubes1.matchedItem);                          attribs.Add("lmreason"' ubes1.matchedReason);                          uMsg = 95620;                      }                        // Check if upload is watched                      ListMatch uwa = listman.IsWatchedArticle(r.title' r.project);                      if (uwa.Success)                          uMsg = 5610;                        // If normal and uploaded by an admin' bot or whitelisted person always hide                      if ((uMsg == 5600) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                          return;                        // if normal and uploads are softhidden hide normal user and anon aswell                      if ((uMsg == 5600) && (config.feedFilterEventUpload == 2) && ((userOffset == 3) || (userOffset == 4)))                          return;                        // If our message is 95620' we might need to truncate r.comment                      if (uMsg == 95620)                      {                          if (r.comment.Length > 25)                              r.comment = r.comment.Substring(0' 23) + "...";                      }                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("uploaditem"' project.interwikiLink + r.title);                      attribs.Add("cuploaditem"' r.title);                      attribs.Add("reason"' r.comment);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(userOffset + uMsg' ref attribs);                      break;                  case RCEvent.EventType.protect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in protect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5900' ref attribs);                      break;                  case RCEvent.EventType.unprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in unprotect is fine' it's just the pagetitle                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(5901' ref attribs);                      break;                  case RCEvent.EventType.modifyprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in modifyprotect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5902' ref attribs);                      break;              }
Magic Number,CVNBot,Program,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Program.cs,ReactToRCEvent,The following statement contains a magic number: switch (r.eventtype)              {                  // This case handles:                  // - New page creations                  // - Page edits                  case RCEvent.EventType.edit:                      String diffsize;                      if (r.szdiff >= 0)                          diffsize = "+" + r.szdiff.ToString();                      else                          diffsize = r.szdiff.ToString();                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("size"' diffsize);                      attribs.Add("url"' r.url);                      attribs.Add("reason"' r.comment);                        // This block handles: New page creations                      if (r.newpage)                      {                          bool createSpecial = false;                            // New pages created by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.newBig)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5010 + userOffset' ref attribs);                          }                          else if (r.szdiff <= config.newSmall)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5020 + userOffset' ref attribs);                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5000 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Article is on watchlist                          // - Page title matches a BNA pattern                          // - Edit summary matches a BES pattern                            // Is the article on the watchlist?                          ListMatch wlm = listman.IsWatchedArticle(r.title' r.project);                          if (wlm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5030 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16301' (String)attribs["article"]));                              break;                          }                            // Does the page title match a BNA pattern?                          ListMatch eslm = listman.MatchesList(r.title' 12);                          if (eslm.Success)                          {                              // Matches BNA                              attribs.Add("watchword"' eslm.matchedItem);                              message = GetMessage(5040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' eslm.matchedItem));                              break;                          }                            // Does the edit summary match a BES pattern?                          ListMatch lm = listman.MatchesList(r.comment' 20);                          if (lm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' lm.matchedItem);                              message = GetMessage(95040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' lm.matchedItem));                              break;                          }                            // If we're still here that means                          // - the create didn't get ignored by adminlist or whitelist                          // - the create didn't match any watch patterns                          // Now' if any of the following is true' we'll must report it.                          // - Create by blacklisted user                          // - Create by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // Created by an unlisted reguser with non-special create size' ignore                          if ((userOffset == 4) && !createSpecial)                              return;                            // Else: Create had special size' so let it shown (default)' don't return!                      }                      // This block handles: Page edits                      else                      {                          bool editSpecial = false;                            // Edit by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.editBig)                          {                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5110 + userOffset' ref attribs);                              editSpecial = true;                          }                          else if (r.szdiff <= config.editBlank)                          {                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5120 + userOffset' ref attribs);                              editSpecial = true;                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5100 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Edit summary matches a BES pattern                          // - Edit blanked the page                          // - Edit replaced the page                          // - Article is on watchlist                            // Does the edit summary match a BES pattern?                          ListMatch elm = listman.MatchesList(r.comment' 20);                          if (elm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' elm.matchedItem);                              message = GetMessage(95130 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16310' r.comment' (String)attribs["article"]));                              break;                          }                            // Did the user user blank the page?                          if (project.rautosummBlank.IsMatch(r.comment))                          {                              message = GetMessage(96010 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16311' (String)attribs["article"]));                              break;                          }                            Match rplm = project.rautosummReplace.Match(r.comment);                          if (rplm.Success)                          {                              // The user replaced the page.                              try                              {                                  attribs.Add("profanity"' rplm.Groups["item1"].Captures[0].Value);                                  message = GetMessage(96020 + userOffset' ref attribs);                              }                              catch (ArgumentOutOfRangeException)                              {                                  // This wiki probably doesn't have a profanity attribute                                  message = GetMessage(96030 + userOffset' ref attribs);                              }                              break;                          }                            // Is the article on the watchlist?                          ListMatch welm = listman.IsWatchedArticle(r.title' r.project);                          if (welm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5130 + userOffset' ref attribs);                              break;                          }                            // If we're still here that means                          // - the edit didn't get ignored by adminlist or whitelist                          // - the edit didn't match any watch patterns                          // Now' if any of the following is true' we must still report it.                          // - Edit by blacklisted user                          // - Edit by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // If nothing special about the edit' return to ignore                          if (!editSpecial)                              return;                      }                      break;                  case RCEvent.EventType.move:                      // if moves are softhidden hide moves by admin' bot or whitelist                      if ((config.feedFilterEventMove == 2) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                      {                          return;                      }                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("fromname"' project.interwikiLink + r.title);                      attribs.Add("cfromname"' r.title);                      attribs.Add("toname"' project.interwikiLink + r.movedTo);                      attribs.Add("ctoname"' r.movedTo);                      attribs.Add("url"' r.blockLength); //The blockLength field stores the moveFrom URL                      attribs.Add("reason"' r.comment);                      message = GetMessage(5500 + userOffset' ref attribs);                      break;                  case RCEvent.EventType.block:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.title.Split(new char[] { ':' }' 2)[1]));                      attribs.Add("length"' r.blockLength);                      attribs.Add("reason"' r.comment);                      message = GetMessage(5400' ref attribs);                      //If the blocked user (r.title) isn't botlisted' add to blacklist                      if (listman.ClassifyEditor(r.title.Split(new char[] { ':' }' 2)[1]' r.project) != ListManager.UserType.bot)                      {                          //If this isn't an indefinite/infinite block' add to blacklist                          if ((r.blockLength.ToLower() != "indefinite") && (r.blockLength.ToLower() != "infinite"))                          {                                                               // 2'678'400 seconds = 744 hours = 31 days                              int listLen = Convert.ToInt32(CVNBotUtils.ParseDateTimeLength(r.blockLength' 2678400) * 2.5);                              string blComment = "Autoblacklist: " + r.comment + " on " + r.project;                              message += "\n" + listman.AddUserToList(r.title.Split(new char[] { ':' }' 2)[1]' "" //Global bl                                  ' ListManager.UserType.blacklisted' r.user' blComment' listLen);                              Broadcast("BL"' "ADD"' r.title.Split(new char[] { ':' }' 2)[1]' listLen' blComment' r.user);                          }                      }                      break;                  case RCEvent.EventType.unblock:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("reason"' r.comment);                      message = GetMessage(5700' ref attribs);                      break;                  case RCEvent.EventType.delete:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      attribs.Add("reason"' r.comment);                      message = GetMessage(05300' ref attribs);                      break;                  case RCEvent.EventType.newuser:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("caurl"' "https://meta.wikimedia.org/wiki/Special:CentralAuth/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch = listman.MatchesList(r.user' 11);                      if (bnuMatch.Success && feedFilterThisEvent == 1)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch.matchedItem);                          attribs.Add("wwreason"' bnuMatch.matchedReason);                          message = GetMessage(5201' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5200' ref attribs);                      }                      break;                  case RCEvent.EventType.newuser2:                      attribs.Add("creator"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ccreator"' r.user);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.title);                      attribs.Add("ceditor"' r.title);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch2 = listman.MatchesList(r.user' 11);                      if (bnuMatch2.Success)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch2.matchedItem);                          attribs.Add("wwreason"' bnuMatch2.matchedReason);                          message = GetMessage(5211' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch2.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5210' ref attribs);                      }                      break;                  case RCEvent.EventType.upload:                      int uMsg = 5600;                        // Check if the edit summary matches BES                      ListMatch ubes2 = listman.MatchesList(r.comment' 20);                      if (ubes2.Success)                      {                          attribs.Add("watchword"' ubes2.matchedItem);                          attribs.Add("lmreason"' ubes2.matchedReason);                          uMsg = 95620;                      }                        // Now check if the title matches BES                      ListMatch ubes1 = listman.MatchesList(r.title' 20);                      if (ubes1.Success)                      {                          attribs.Add("watchword"' ubes1.matchedItem);                          attribs.Add("lmreason"' ubes1.matchedReason);                          uMsg = 95620;                      }                        // Check if upload is watched                      ListMatch uwa = listman.IsWatchedArticle(r.title' r.project);                      if (uwa.Success)                          uMsg = 5610;                        // If normal and uploaded by an admin' bot or whitelisted person always hide                      if ((uMsg == 5600) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                          return;                        // if normal and uploads are softhidden hide normal user and anon aswell                      if ((uMsg == 5600) && (config.feedFilterEventUpload == 2) && ((userOffset == 3) || (userOffset == 4)))                          return;                        // If our message is 95620' we might need to truncate r.comment                      if (uMsg == 95620)                      {                          if (r.comment.Length > 25)                              r.comment = r.comment.Substring(0' 23) + "...";                      }                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("uploaditem"' project.interwikiLink + r.title);                      attribs.Add("cuploaditem"' r.title);                      attribs.Add("reason"' r.comment);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(userOffset + uMsg' ref attribs);                      break;                  case RCEvent.EventType.protect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in protect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5900' ref attribs);                      break;                  case RCEvent.EventType.unprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in unprotect is fine' it's just the pagetitle                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(5901' ref attribs);                      break;                  case RCEvent.EventType.modifyprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in modifyprotect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5902' ref attribs);                      break;              }
Magic Number,CVNBot,Program,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Program.cs,ReactToRCEvent,The following statement contains a magic number: switch (r.eventtype)              {                  // This case handles:                  // - New page creations                  // - Page edits                  case RCEvent.EventType.edit:                      String diffsize;                      if (r.szdiff >= 0)                          diffsize = "+" + r.szdiff.ToString();                      else                          diffsize = r.szdiff.ToString();                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("size"' diffsize);                      attribs.Add("url"' r.url);                      attribs.Add("reason"' r.comment);                        // This block handles: New page creations                      if (r.newpage)                      {                          bool createSpecial = false;                            // New pages created by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.newBig)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5010 + userOffset' ref attribs);                          }                          else if (r.szdiff <= config.newSmall)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5020 + userOffset' ref attribs);                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5000 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Article is on watchlist                          // - Page title matches a BNA pattern                          // - Edit summary matches a BES pattern                            // Is the article on the watchlist?                          ListMatch wlm = listman.IsWatchedArticle(r.title' r.project);                          if (wlm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5030 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16301' (String)attribs["article"]));                              break;                          }                            // Does the page title match a BNA pattern?                          ListMatch eslm = listman.MatchesList(r.title' 12);                          if (eslm.Success)                          {                              // Matches BNA                              attribs.Add("watchword"' eslm.matchedItem);                              message = GetMessage(5040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' eslm.matchedItem));                              break;                          }                            // Does the edit summary match a BES pattern?                          ListMatch lm = listman.MatchesList(r.comment' 20);                          if (lm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' lm.matchedItem);                              message = GetMessage(95040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' lm.matchedItem));                              break;                          }                            // If we're still here that means                          // - the create didn't get ignored by adminlist or whitelist                          // - the create didn't match any watch patterns                          // Now' if any of the following is true' we'll must report it.                          // - Create by blacklisted user                          // - Create by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // Created by an unlisted reguser with non-special create size' ignore                          if ((userOffset == 4) && !createSpecial)                              return;                            // Else: Create had special size' so let it shown (default)' don't return!                      }                      // This block handles: Page edits                      else                      {                          bool editSpecial = false;                            // Edit by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.editBig)                          {                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5110 + userOffset' ref attribs);                              editSpecial = true;                          }                          else if (r.szdiff <= config.editBlank)                          {                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5120 + userOffset' ref attribs);                              editSpecial = true;                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5100 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Edit summary matches a BES pattern                          // - Edit blanked the page                          // - Edit replaced the page                          // - Article is on watchlist                            // Does the edit summary match a BES pattern?                          ListMatch elm = listman.MatchesList(r.comment' 20);                          if (elm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' elm.matchedItem);                              message = GetMessage(95130 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16310' r.comment' (String)attribs["article"]));                              break;                          }                            // Did the user user blank the page?                          if (project.rautosummBlank.IsMatch(r.comment))                          {                              message = GetMessage(96010 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16311' (String)attribs["article"]));                              break;                          }                            Match rplm = project.rautosummReplace.Match(r.comment);                          if (rplm.Success)                          {                              // The user replaced the page.                              try                              {                                  attribs.Add("profanity"' rplm.Groups["item1"].Captures[0].Value);                                  message = GetMessage(96020 + userOffset' ref attribs);                              }                              catch (ArgumentOutOfRangeException)                              {                                  // This wiki probably doesn't have a profanity attribute                                  message = GetMessage(96030 + userOffset' ref attribs);                              }                              break;                          }                            // Is the article on the watchlist?                          ListMatch welm = listman.IsWatchedArticle(r.title' r.project);                          if (welm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5130 + userOffset' ref attribs);                              break;                          }                            // If we're still here that means                          // - the edit didn't get ignored by adminlist or whitelist                          // - the edit didn't match any watch patterns                          // Now' if any of the following is true' we must still report it.                          // - Edit by blacklisted user                          // - Edit by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // If nothing special about the edit' return to ignore                          if (!editSpecial)                              return;                      }                      break;                  case RCEvent.EventType.move:                      // if moves are softhidden hide moves by admin' bot or whitelist                      if ((config.feedFilterEventMove == 2) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                      {                          return;                      }                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("fromname"' project.interwikiLink + r.title);                      attribs.Add("cfromname"' r.title);                      attribs.Add("toname"' project.interwikiLink + r.movedTo);                      attribs.Add("ctoname"' r.movedTo);                      attribs.Add("url"' r.blockLength); //The blockLength field stores the moveFrom URL                      attribs.Add("reason"' r.comment);                      message = GetMessage(5500 + userOffset' ref attribs);                      break;                  case RCEvent.EventType.block:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.title.Split(new char[] { ':' }' 2)[1]));                      attribs.Add("length"' r.blockLength);                      attribs.Add("reason"' r.comment);                      message = GetMessage(5400' ref attribs);                      //If the blocked user (r.title) isn't botlisted' add to blacklist                      if (listman.ClassifyEditor(r.title.Split(new char[] { ':' }' 2)[1]' r.project) != ListManager.UserType.bot)                      {                          //If this isn't an indefinite/infinite block' add to blacklist                          if ((r.blockLength.ToLower() != "indefinite") && (r.blockLength.ToLower() != "infinite"))                          {                                                               // 2'678'400 seconds = 744 hours = 31 days                              int listLen = Convert.ToInt32(CVNBotUtils.ParseDateTimeLength(r.blockLength' 2678400) * 2.5);                              string blComment = "Autoblacklist: " + r.comment + " on " + r.project;                              message += "\n" + listman.AddUserToList(r.title.Split(new char[] { ':' }' 2)[1]' "" //Global bl                                  ' ListManager.UserType.blacklisted' r.user' blComment' listLen);                              Broadcast("BL"' "ADD"' r.title.Split(new char[] { ':' }' 2)[1]' listLen' blComment' r.user);                          }                      }                      break;                  case RCEvent.EventType.unblock:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("reason"' r.comment);                      message = GetMessage(5700' ref attribs);                      break;                  case RCEvent.EventType.delete:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      attribs.Add("reason"' r.comment);                      message = GetMessage(05300' ref attribs);                      break;                  case RCEvent.EventType.newuser:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("caurl"' "https://meta.wikimedia.org/wiki/Special:CentralAuth/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch = listman.MatchesList(r.user' 11);                      if (bnuMatch.Success && feedFilterThisEvent == 1)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch.matchedItem);                          attribs.Add("wwreason"' bnuMatch.matchedReason);                          message = GetMessage(5201' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5200' ref attribs);                      }                      break;                  case RCEvent.EventType.newuser2:                      attribs.Add("creator"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ccreator"' r.user);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.title);                      attribs.Add("ceditor"' r.title);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch2 = listman.MatchesList(r.user' 11);                      if (bnuMatch2.Success)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch2.matchedItem);                          attribs.Add("wwreason"' bnuMatch2.matchedReason);                          message = GetMessage(5211' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch2.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5210' ref attribs);                      }                      break;                  case RCEvent.EventType.upload:                      int uMsg = 5600;                        // Check if the edit summary matches BES                      ListMatch ubes2 = listman.MatchesList(r.comment' 20);                      if (ubes2.Success)                      {                          attribs.Add("watchword"' ubes2.matchedItem);                          attribs.Add("lmreason"' ubes2.matchedReason);                          uMsg = 95620;                      }                        // Now check if the title matches BES                      ListMatch ubes1 = listman.MatchesList(r.title' 20);                      if (ubes1.Success)                      {                          attribs.Add("watchword"' ubes1.matchedItem);                          attribs.Add("lmreason"' ubes1.matchedReason);                          uMsg = 95620;                      }                        // Check if upload is watched                      ListMatch uwa = listman.IsWatchedArticle(r.title' r.project);                      if (uwa.Success)                          uMsg = 5610;                        // If normal and uploaded by an admin' bot or whitelisted person always hide                      if ((uMsg == 5600) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                          return;                        // if normal and uploads are softhidden hide normal user and anon aswell                      if ((uMsg == 5600) && (config.feedFilterEventUpload == 2) && ((userOffset == 3) || (userOffset == 4)))                          return;                        // If our message is 95620' we might need to truncate r.comment                      if (uMsg == 95620)                      {                          if (r.comment.Length > 25)                              r.comment = r.comment.Substring(0' 23) + "...";                      }                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("uploaditem"' project.interwikiLink + r.title);                      attribs.Add("cuploaditem"' r.title);                      attribs.Add("reason"' r.comment);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(userOffset + uMsg' ref attribs);                      break;                  case RCEvent.EventType.protect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in protect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5900' ref attribs);                      break;                  case RCEvent.EventType.unprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in unprotect is fine' it's just the pagetitle                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(5901' ref attribs);                      break;                  case RCEvent.EventType.modifyprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in modifyprotect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5902' ref attribs);                      break;              }
Magic Number,CVNBot,Program,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Program.cs,ReactToRCEvent,The following statement contains a magic number: switch (r.eventtype)              {                  // This case handles:                  // - New page creations                  // - Page edits                  case RCEvent.EventType.edit:                      String diffsize;                      if (r.szdiff >= 0)                          diffsize = "+" + r.szdiff.ToString();                      else                          diffsize = r.szdiff.ToString();                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("size"' diffsize);                      attribs.Add("url"' r.url);                      attribs.Add("reason"' r.comment);                        // This block handles: New page creations                      if (r.newpage)                      {                          bool createSpecial = false;                            // New pages created by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.newBig)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5010 + userOffset' ref attribs);                          }                          else if (r.szdiff <= config.newSmall)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5020 + userOffset' ref attribs);                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5000 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Article is on watchlist                          // - Page title matches a BNA pattern                          // - Edit summary matches a BES pattern                            // Is the article on the watchlist?                          ListMatch wlm = listman.IsWatchedArticle(r.title' r.project);                          if (wlm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5030 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16301' (String)attribs["article"]));                              break;                          }                            // Does the page title match a BNA pattern?                          ListMatch eslm = listman.MatchesList(r.title' 12);                          if (eslm.Success)                          {                              // Matches BNA                              attribs.Add("watchword"' eslm.matchedItem);                              message = GetMessage(5040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' eslm.matchedItem));                              break;                          }                            // Does the edit summary match a BES pattern?                          ListMatch lm = listman.MatchesList(r.comment' 20);                          if (lm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' lm.matchedItem);                              message = GetMessage(95040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' lm.matchedItem));                              break;                          }                            // If we're still here that means                          // - the create didn't get ignored by adminlist or whitelist                          // - the create didn't match any watch patterns                          // Now' if any of the following is true' we'll must report it.                          // - Create by blacklisted user                          // - Create by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // Created by an unlisted reguser with non-special create size' ignore                          if ((userOffset == 4) && !createSpecial)                              return;                            // Else: Create had special size' so let it shown (default)' don't return!                      }                      // This block handles: Page edits                      else                      {                          bool editSpecial = false;                            // Edit by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.editBig)                          {                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5110 + userOffset' ref attribs);                              editSpecial = true;                          }                          else if (r.szdiff <= config.editBlank)                          {                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5120 + userOffset' ref attribs);                              editSpecial = true;                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5100 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Edit summary matches a BES pattern                          // - Edit blanked the page                          // - Edit replaced the page                          // - Article is on watchlist                            // Does the edit summary match a BES pattern?                          ListMatch elm = listman.MatchesList(r.comment' 20);                          if (elm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' elm.matchedItem);                              message = GetMessage(95130 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16310' r.comment' (String)attribs["article"]));                              break;                          }                            // Did the user user blank the page?                          if (project.rautosummBlank.IsMatch(r.comment))                          {                              message = GetMessage(96010 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16311' (String)attribs["article"]));                              break;                          }                            Match rplm = project.rautosummReplace.Match(r.comment);                          if (rplm.Success)                          {                              // The user replaced the page.                              try                              {                                  attribs.Add("profanity"' rplm.Groups["item1"].Captures[0].Value);                                  message = GetMessage(96020 + userOffset' ref attribs);                              }                              catch (ArgumentOutOfRangeException)                              {                                  // This wiki probably doesn't have a profanity attribute                                  message = GetMessage(96030 + userOffset' ref attribs);                              }                              break;                          }                            // Is the article on the watchlist?                          ListMatch welm = listman.IsWatchedArticle(r.title' r.project);                          if (welm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5130 + userOffset' ref attribs);                              break;                          }                            // If we're still here that means                          // - the edit didn't get ignored by adminlist or whitelist                          // - the edit didn't match any watch patterns                          // Now' if any of the following is true' we must still report it.                          // - Edit by blacklisted user                          // - Edit by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // If nothing special about the edit' return to ignore                          if (!editSpecial)                              return;                      }                      break;                  case RCEvent.EventType.move:                      // if moves are softhidden hide moves by admin' bot or whitelist                      if ((config.feedFilterEventMove == 2) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                      {                          return;                      }                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("fromname"' project.interwikiLink + r.title);                      attribs.Add("cfromname"' r.title);                      attribs.Add("toname"' project.interwikiLink + r.movedTo);                      attribs.Add("ctoname"' r.movedTo);                      attribs.Add("url"' r.blockLength); //The blockLength field stores the moveFrom URL                      attribs.Add("reason"' r.comment);                      message = GetMessage(5500 + userOffset' ref attribs);                      break;                  case RCEvent.EventType.block:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.title.Split(new char[] { ':' }' 2)[1]));                      attribs.Add("length"' r.blockLength);                      attribs.Add("reason"' r.comment);                      message = GetMessage(5400' ref attribs);                      //If the blocked user (r.title) isn't botlisted' add to blacklist                      if (listman.ClassifyEditor(r.title.Split(new char[] { ':' }' 2)[1]' r.project) != ListManager.UserType.bot)                      {                          //If this isn't an indefinite/infinite block' add to blacklist                          if ((r.blockLength.ToLower() != "indefinite") && (r.blockLength.ToLower() != "infinite"))                          {                                                               // 2'678'400 seconds = 744 hours = 31 days                              int listLen = Convert.ToInt32(CVNBotUtils.ParseDateTimeLength(r.blockLength' 2678400) * 2.5);                              string blComment = "Autoblacklist: " + r.comment + " on " + r.project;                              message += "\n" + listman.AddUserToList(r.title.Split(new char[] { ':' }' 2)[1]' "" //Global bl                                  ' ListManager.UserType.blacklisted' r.user' blComment' listLen);                              Broadcast("BL"' "ADD"' r.title.Split(new char[] { ':' }' 2)[1]' listLen' blComment' r.user);                          }                      }                      break;                  case RCEvent.EventType.unblock:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("reason"' r.comment);                      message = GetMessage(5700' ref attribs);                      break;                  case RCEvent.EventType.delete:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      attribs.Add("reason"' r.comment);                      message = GetMessage(05300' ref attribs);                      break;                  case RCEvent.EventType.newuser:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("caurl"' "https://meta.wikimedia.org/wiki/Special:CentralAuth/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch = listman.MatchesList(r.user' 11);                      if (bnuMatch.Success && feedFilterThisEvent == 1)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch.matchedItem);                          attribs.Add("wwreason"' bnuMatch.matchedReason);                          message = GetMessage(5201' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5200' ref attribs);                      }                      break;                  case RCEvent.EventType.newuser2:                      attribs.Add("creator"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ccreator"' r.user);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.title);                      attribs.Add("ceditor"' r.title);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch2 = listman.MatchesList(r.user' 11);                      if (bnuMatch2.Success)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch2.matchedItem);                          attribs.Add("wwreason"' bnuMatch2.matchedReason);                          message = GetMessage(5211' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch2.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5210' ref attribs);                      }                      break;                  case RCEvent.EventType.upload:                      int uMsg = 5600;                        // Check if the edit summary matches BES                      ListMatch ubes2 = listman.MatchesList(r.comment' 20);                      if (ubes2.Success)                      {                          attribs.Add("watchword"' ubes2.matchedItem);                          attribs.Add("lmreason"' ubes2.matchedReason);                          uMsg = 95620;                      }                        // Now check if the title matches BES                      ListMatch ubes1 = listman.MatchesList(r.title' 20);                      if (ubes1.Success)                      {                          attribs.Add("watchword"' ubes1.matchedItem);                          attribs.Add("lmreason"' ubes1.matchedReason);                          uMsg = 95620;                      }                        // Check if upload is watched                      ListMatch uwa = listman.IsWatchedArticle(r.title' r.project);                      if (uwa.Success)                          uMsg = 5610;                        // If normal and uploaded by an admin' bot or whitelisted person always hide                      if ((uMsg == 5600) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                          return;                        // if normal and uploads are softhidden hide normal user and anon aswell                      if ((uMsg == 5600) && (config.feedFilterEventUpload == 2) && ((userOffset == 3) || (userOffset == 4)))                          return;                        // If our message is 95620' we might need to truncate r.comment                      if (uMsg == 95620)                      {                          if (r.comment.Length > 25)                              r.comment = r.comment.Substring(0' 23) + "...";                      }                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("uploaditem"' project.interwikiLink + r.title);                      attribs.Add("cuploaditem"' r.title);                      attribs.Add("reason"' r.comment);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(userOffset + uMsg' ref attribs);                      break;                  case RCEvent.EventType.protect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in protect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5900' ref attribs);                      break;                  case RCEvent.EventType.unprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in unprotect is fine' it's just the pagetitle                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(5901' ref attribs);                      break;                  case RCEvent.EventType.modifyprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in modifyprotect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5902' ref attribs);                      break;              }
Magic Number,CVNBot,Program,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Program.cs,ReactToRCEvent,The following statement contains a magic number: switch (r.eventtype)              {                  // This case handles:                  // - New page creations                  // - Page edits                  case RCEvent.EventType.edit:                      String diffsize;                      if (r.szdiff >= 0)                          diffsize = "+" + r.szdiff.ToString();                      else                          diffsize = r.szdiff.ToString();                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("size"' diffsize);                      attribs.Add("url"' r.url);                      attribs.Add("reason"' r.comment);                        // This block handles: New page creations                      if (r.newpage)                      {                          bool createSpecial = false;                            // New pages created by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.newBig)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5010 + userOffset' ref attribs);                          }                          else if (r.szdiff <= config.newSmall)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5020 + userOffset' ref attribs);                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5000 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Article is on watchlist                          // - Page title matches a BNA pattern                          // - Edit summary matches a BES pattern                            // Is the article on the watchlist?                          ListMatch wlm = listman.IsWatchedArticle(r.title' r.project);                          if (wlm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5030 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16301' (String)attribs["article"]));                              break;                          }                            // Does the page title match a BNA pattern?                          ListMatch eslm = listman.MatchesList(r.title' 12);                          if (eslm.Success)                          {                              // Matches BNA                              attribs.Add("watchword"' eslm.matchedItem);                              message = GetMessage(5040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' eslm.matchedItem));                              break;                          }                            // Does the edit summary match a BES pattern?                          ListMatch lm = listman.MatchesList(r.comment' 20);                          if (lm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' lm.matchedItem);                              message = GetMessage(95040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' lm.matchedItem));                              break;                          }                            // If we're still here that means                          // - the create didn't get ignored by adminlist or whitelist                          // - the create didn't match any watch patterns                          // Now' if any of the following is true' we'll must report it.                          // - Create by blacklisted user                          // - Create by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // Created by an unlisted reguser with non-special create size' ignore                          if ((userOffset == 4) && !createSpecial)                              return;                            // Else: Create had special size' so let it shown (default)' don't return!                      }                      // This block handles: Page edits                      else                      {                          bool editSpecial = false;                            // Edit by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.editBig)                          {                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5110 + userOffset' ref attribs);                              editSpecial = true;                          }                          else if (r.szdiff <= config.editBlank)                          {                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5120 + userOffset' ref attribs);                              editSpecial = true;                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5100 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Edit summary matches a BES pattern                          // - Edit blanked the page                          // - Edit replaced the page                          // - Article is on watchlist                            // Does the edit summary match a BES pattern?                          ListMatch elm = listman.MatchesList(r.comment' 20);                          if (elm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' elm.matchedItem);                              message = GetMessage(95130 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16310' r.comment' (String)attribs["article"]));                              break;                          }                            // Did the user user blank the page?                          if (project.rautosummBlank.IsMatch(r.comment))                          {                              message = GetMessage(96010 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16311' (String)attribs["article"]));                              break;                          }                            Match rplm = project.rautosummReplace.Match(r.comment);                          if (rplm.Success)                          {                              // The user replaced the page.                              try                              {                                  attribs.Add("profanity"' rplm.Groups["item1"].Captures[0].Value);                                  message = GetMessage(96020 + userOffset' ref attribs);                              }                              catch (ArgumentOutOfRangeException)                              {                                  // This wiki probably doesn't have a profanity attribute                                  message = GetMessage(96030 + userOffset' ref attribs);                              }                              break;                          }                            // Is the article on the watchlist?                          ListMatch welm = listman.IsWatchedArticle(r.title' r.project);                          if (welm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5130 + userOffset' ref attribs);                              break;                          }                            // If we're still here that means                          // - the edit didn't get ignored by adminlist or whitelist                          // - the edit didn't match any watch patterns                          // Now' if any of the following is true' we must still report it.                          // - Edit by blacklisted user                          // - Edit by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // If nothing special about the edit' return to ignore                          if (!editSpecial)                              return;                      }                      break;                  case RCEvent.EventType.move:                      // if moves are softhidden hide moves by admin' bot or whitelist                      if ((config.feedFilterEventMove == 2) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                      {                          return;                      }                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("fromname"' project.interwikiLink + r.title);                      attribs.Add("cfromname"' r.title);                      attribs.Add("toname"' project.interwikiLink + r.movedTo);                      attribs.Add("ctoname"' r.movedTo);                      attribs.Add("url"' r.blockLength); //The blockLength field stores the moveFrom URL                      attribs.Add("reason"' r.comment);                      message = GetMessage(5500 + userOffset' ref attribs);                      break;                  case RCEvent.EventType.block:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.title.Split(new char[] { ':' }' 2)[1]));                      attribs.Add("length"' r.blockLength);                      attribs.Add("reason"' r.comment);                      message = GetMessage(5400' ref attribs);                      //If the blocked user (r.title) isn't botlisted' add to blacklist                      if (listman.ClassifyEditor(r.title.Split(new char[] { ':' }' 2)[1]' r.project) != ListManager.UserType.bot)                      {                          //If this isn't an indefinite/infinite block' add to blacklist                          if ((r.blockLength.ToLower() != "indefinite") && (r.blockLength.ToLower() != "infinite"))                          {                                                               // 2'678'400 seconds = 744 hours = 31 days                              int listLen = Convert.ToInt32(CVNBotUtils.ParseDateTimeLength(r.blockLength' 2678400) * 2.5);                              string blComment = "Autoblacklist: " + r.comment + " on " + r.project;                              message += "\n" + listman.AddUserToList(r.title.Split(new char[] { ':' }' 2)[1]' "" //Global bl                                  ' ListManager.UserType.blacklisted' r.user' blComment' listLen);                              Broadcast("BL"' "ADD"' r.title.Split(new char[] { ':' }' 2)[1]' listLen' blComment' r.user);                          }                      }                      break;                  case RCEvent.EventType.unblock:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("reason"' r.comment);                      message = GetMessage(5700' ref attribs);                      break;                  case RCEvent.EventType.delete:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      attribs.Add("reason"' r.comment);                      message = GetMessage(05300' ref attribs);                      break;                  case RCEvent.EventType.newuser:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("caurl"' "https://meta.wikimedia.org/wiki/Special:CentralAuth/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch = listman.MatchesList(r.user' 11);                      if (bnuMatch.Success && feedFilterThisEvent == 1)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch.matchedItem);                          attribs.Add("wwreason"' bnuMatch.matchedReason);                          message = GetMessage(5201' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5200' ref attribs);                      }                      break;                  case RCEvent.EventType.newuser2:                      attribs.Add("creator"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ccreator"' r.user);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.title);                      attribs.Add("ceditor"' r.title);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch2 = listman.MatchesList(r.user' 11);                      if (bnuMatch2.Success)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch2.matchedItem);                          attribs.Add("wwreason"' bnuMatch2.matchedReason);                          message = GetMessage(5211' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch2.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5210' ref attribs);                      }                      break;                  case RCEvent.EventType.upload:                      int uMsg = 5600;                        // Check if the edit summary matches BES                      ListMatch ubes2 = listman.MatchesList(r.comment' 20);                      if (ubes2.Success)                      {                          attribs.Add("watchword"' ubes2.matchedItem);                          attribs.Add("lmreason"' ubes2.matchedReason);                          uMsg = 95620;                      }                        // Now check if the title matches BES                      ListMatch ubes1 = listman.MatchesList(r.title' 20);                      if (ubes1.Success)                      {                          attribs.Add("watchword"' ubes1.matchedItem);                          attribs.Add("lmreason"' ubes1.matchedReason);                          uMsg = 95620;                      }                        // Check if upload is watched                      ListMatch uwa = listman.IsWatchedArticle(r.title' r.project);                      if (uwa.Success)                          uMsg = 5610;                        // If normal and uploaded by an admin' bot or whitelisted person always hide                      if ((uMsg == 5600) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                          return;                        // if normal and uploads are softhidden hide normal user and anon aswell                      if ((uMsg == 5600) && (config.feedFilterEventUpload == 2) && ((userOffset == 3) || (userOffset == 4)))                          return;                        // If our message is 95620' we might need to truncate r.comment                      if (uMsg == 95620)                      {                          if (r.comment.Length > 25)                              r.comment = r.comment.Substring(0' 23) + "...";                      }                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("uploaditem"' project.interwikiLink + r.title);                      attribs.Add("cuploaditem"' r.title);                      attribs.Add("reason"' r.comment);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(userOffset + uMsg' ref attribs);                      break;                  case RCEvent.EventType.protect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in protect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5900' ref attribs);                      break;                  case RCEvent.EventType.unprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in unprotect is fine' it's just the pagetitle                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(5901' ref attribs);                      break;                  case RCEvent.EventType.modifyprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in modifyprotect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5902' ref attribs);                      break;              }
Magic Number,CVNBot,Program,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Program.cs,ReactToRCEvent,The following statement contains a magic number: switch (r.eventtype)              {                  // This case handles:                  // - New page creations                  // - Page edits                  case RCEvent.EventType.edit:                      String diffsize;                      if (r.szdiff >= 0)                          diffsize = "+" + r.szdiff.ToString();                      else                          diffsize = r.szdiff.ToString();                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("size"' diffsize);                      attribs.Add("url"' r.url);                      attribs.Add("reason"' r.comment);                        // This block handles: New page creations                      if (r.newpage)                      {                          bool createSpecial = false;                            // New pages created by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.newBig)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5010 + userOffset' ref attribs);                          }                          else if (r.szdiff <= config.newSmall)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5020 + userOffset' ref attribs);                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5000 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Article is on watchlist                          // - Page title matches a BNA pattern                          // - Edit summary matches a BES pattern                            // Is the article on the watchlist?                          ListMatch wlm = listman.IsWatchedArticle(r.title' r.project);                          if (wlm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5030 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16301' (String)attribs["article"]));                              break;                          }                            // Does the page title match a BNA pattern?                          ListMatch eslm = listman.MatchesList(r.title' 12);                          if (eslm.Success)                          {                              // Matches BNA                              attribs.Add("watchword"' eslm.matchedItem);                              message = GetMessage(5040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' eslm.matchedItem));                              break;                          }                            // Does the edit summary match a BES pattern?                          ListMatch lm = listman.MatchesList(r.comment' 20);                          if (lm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' lm.matchedItem);                              message = GetMessage(95040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' lm.matchedItem));                              break;                          }                            // If we're still here that means                          // - the create didn't get ignored by adminlist or whitelist                          // - the create didn't match any watch patterns                          // Now' if any of the following is true' we'll must report it.                          // - Create by blacklisted user                          // - Create by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // Created by an unlisted reguser with non-special create size' ignore                          if ((userOffset == 4) && !createSpecial)                              return;                            // Else: Create had special size' so let it shown (default)' don't return!                      }                      // This block handles: Page edits                      else                      {                          bool editSpecial = false;                            // Edit by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.editBig)                          {                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5110 + userOffset' ref attribs);                              editSpecial = true;                          }                          else if (r.szdiff <= config.editBlank)                          {                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5120 + userOffset' ref attribs);                              editSpecial = true;                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5100 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Edit summary matches a BES pattern                          // - Edit blanked the page                          // - Edit replaced the page                          // - Article is on watchlist                            // Does the edit summary match a BES pattern?                          ListMatch elm = listman.MatchesList(r.comment' 20);                          if (elm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' elm.matchedItem);                              message = GetMessage(95130 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16310' r.comment' (String)attribs["article"]));                              break;                          }                            // Did the user user blank the page?                          if (project.rautosummBlank.IsMatch(r.comment))                          {                              message = GetMessage(96010 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16311' (String)attribs["article"]));                              break;                          }                            Match rplm = project.rautosummReplace.Match(r.comment);                          if (rplm.Success)                          {                              // The user replaced the page.                              try                              {                                  attribs.Add("profanity"' rplm.Groups["item1"].Captures[0].Value);                                  message = GetMessage(96020 + userOffset' ref attribs);                              }                              catch (ArgumentOutOfRangeException)                              {                                  // This wiki probably doesn't have a profanity attribute                                  message = GetMessage(96030 + userOffset' ref attribs);                              }                              break;                          }                            // Is the article on the watchlist?                          ListMatch welm = listman.IsWatchedArticle(r.title' r.project);                          if (welm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5130 + userOffset' ref attribs);                              break;                          }                            // If we're still here that means                          // - the edit didn't get ignored by adminlist or whitelist                          // - the edit didn't match any watch patterns                          // Now' if any of the following is true' we must still report it.                          // - Edit by blacklisted user                          // - Edit by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // If nothing special about the edit' return to ignore                          if (!editSpecial)                              return;                      }                      break;                  case RCEvent.EventType.move:                      // if moves are softhidden hide moves by admin' bot or whitelist                      if ((config.feedFilterEventMove == 2) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                      {                          return;                      }                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("fromname"' project.interwikiLink + r.title);                      attribs.Add("cfromname"' r.title);                      attribs.Add("toname"' project.interwikiLink + r.movedTo);                      attribs.Add("ctoname"' r.movedTo);                      attribs.Add("url"' r.blockLength); //The blockLength field stores the moveFrom URL                      attribs.Add("reason"' r.comment);                      message = GetMessage(5500 + userOffset' ref attribs);                      break;                  case RCEvent.EventType.block:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.title.Split(new char[] { ':' }' 2)[1]));                      attribs.Add("length"' r.blockLength);                      attribs.Add("reason"' r.comment);                      message = GetMessage(5400' ref attribs);                      //If the blocked user (r.title) isn't botlisted' add to blacklist                      if (listman.ClassifyEditor(r.title.Split(new char[] { ':' }' 2)[1]' r.project) != ListManager.UserType.bot)                      {                          //If this isn't an indefinite/infinite block' add to blacklist                          if ((r.blockLength.ToLower() != "indefinite") && (r.blockLength.ToLower() != "infinite"))                          {                                                               // 2'678'400 seconds = 744 hours = 31 days                              int listLen = Convert.ToInt32(CVNBotUtils.ParseDateTimeLength(r.blockLength' 2678400) * 2.5);                              string blComment = "Autoblacklist: " + r.comment + " on " + r.project;                              message += "\n" + listman.AddUserToList(r.title.Split(new char[] { ':' }' 2)[1]' "" //Global bl                                  ' ListManager.UserType.blacklisted' r.user' blComment' listLen);                              Broadcast("BL"' "ADD"' r.title.Split(new char[] { ':' }' 2)[1]' listLen' blComment' r.user);                          }                      }                      break;                  case RCEvent.EventType.unblock:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("reason"' r.comment);                      message = GetMessage(5700' ref attribs);                      break;                  case RCEvent.EventType.delete:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      attribs.Add("reason"' r.comment);                      message = GetMessage(05300' ref attribs);                      break;                  case RCEvent.EventType.newuser:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("caurl"' "https://meta.wikimedia.org/wiki/Special:CentralAuth/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch = listman.MatchesList(r.user' 11);                      if (bnuMatch.Success && feedFilterThisEvent == 1)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch.matchedItem);                          attribs.Add("wwreason"' bnuMatch.matchedReason);                          message = GetMessage(5201' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5200' ref attribs);                      }                      break;                  case RCEvent.EventType.newuser2:                      attribs.Add("creator"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ccreator"' r.user);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.title);                      attribs.Add("ceditor"' r.title);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch2 = listman.MatchesList(r.user' 11);                      if (bnuMatch2.Success)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch2.matchedItem);                          attribs.Add("wwreason"' bnuMatch2.matchedReason);                          message = GetMessage(5211' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch2.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5210' ref attribs);                      }                      break;                  case RCEvent.EventType.upload:                      int uMsg = 5600;                        // Check if the edit summary matches BES                      ListMatch ubes2 = listman.MatchesList(r.comment' 20);                      if (ubes2.Success)                      {                          attribs.Add("watchword"' ubes2.matchedItem);                          attribs.Add("lmreason"' ubes2.matchedReason);                          uMsg = 95620;                      }                        // Now check if the title matches BES                      ListMatch ubes1 = listman.MatchesList(r.title' 20);                      if (ubes1.Success)                      {                          attribs.Add("watchword"' ubes1.matchedItem);                          attribs.Add("lmreason"' ubes1.matchedReason);                          uMsg = 95620;                      }                        // Check if upload is watched                      ListMatch uwa = listman.IsWatchedArticle(r.title' r.project);                      if (uwa.Success)                          uMsg = 5610;                        // If normal and uploaded by an admin' bot or whitelisted person always hide                      if ((uMsg == 5600) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                          return;                        // if normal and uploads are softhidden hide normal user and anon aswell                      if ((uMsg == 5600) && (config.feedFilterEventUpload == 2) && ((userOffset == 3) || (userOffset == 4)))                          return;                        // If our message is 95620' we might need to truncate r.comment                      if (uMsg == 95620)                      {                          if (r.comment.Length > 25)                              r.comment = r.comment.Substring(0' 23) + "...";                      }                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("uploaditem"' project.interwikiLink + r.title);                      attribs.Add("cuploaditem"' r.title);                      attribs.Add("reason"' r.comment);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(userOffset + uMsg' ref attribs);                      break;                  case RCEvent.EventType.protect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in protect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5900' ref attribs);                      break;                  case RCEvent.EventType.unprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in unprotect is fine' it's just the pagetitle                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(5901' ref attribs);                      break;                  case RCEvent.EventType.modifyprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in modifyprotect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5902' ref attribs);                      break;              }
Magic Number,CVNBot,Program,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Program.cs,ReactToRCEvent,The following statement contains a magic number: switch (r.eventtype)              {                  // This case handles:                  // - New page creations                  // - Page edits                  case RCEvent.EventType.edit:                      String diffsize;                      if (r.szdiff >= 0)                          diffsize = "+" + r.szdiff.ToString();                      else                          diffsize = r.szdiff.ToString();                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("size"' diffsize);                      attribs.Add("url"' r.url);                      attribs.Add("reason"' r.comment);                        // This block handles: New page creations                      if (r.newpage)                      {                          bool createSpecial = false;                            // New pages created by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.newBig)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5010 + userOffset' ref attribs);                          }                          else if (r.szdiff <= config.newSmall)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5020 + userOffset' ref attribs);                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5000 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Article is on watchlist                          // - Page title matches a BNA pattern                          // - Edit summary matches a BES pattern                            // Is the article on the watchlist?                          ListMatch wlm = listman.IsWatchedArticle(r.title' r.project);                          if (wlm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5030 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16301' (String)attribs["article"]));                              break;                          }                            // Does the page title match a BNA pattern?                          ListMatch eslm = listman.MatchesList(r.title' 12);                          if (eslm.Success)                          {                              // Matches BNA                              attribs.Add("watchword"' eslm.matchedItem);                              message = GetMessage(5040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' eslm.matchedItem));                              break;                          }                            // Does the edit summary match a BES pattern?                          ListMatch lm = listman.MatchesList(r.comment' 20);                          if (lm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' lm.matchedItem);                              message = GetMessage(95040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' lm.matchedItem));                              break;                          }                            // If we're still here that means                          // - the create didn't get ignored by adminlist or whitelist                          // - the create didn't match any watch patterns                          // Now' if any of the following is true' we'll must report it.                          // - Create by blacklisted user                          // - Create by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // Created by an unlisted reguser with non-special create size' ignore                          if ((userOffset == 4) && !createSpecial)                              return;                            // Else: Create had special size' so let it shown (default)' don't return!                      }                      // This block handles: Page edits                      else                      {                          bool editSpecial = false;                            // Edit by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.editBig)                          {                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5110 + userOffset' ref attribs);                              editSpecial = true;                          }                          else if (r.szdiff <= config.editBlank)                          {                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5120 + userOffset' ref attribs);                              editSpecial = true;                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5100 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Edit summary matches a BES pattern                          // - Edit blanked the page                          // - Edit replaced the page                          // - Article is on watchlist                            // Does the edit summary match a BES pattern?                          ListMatch elm = listman.MatchesList(r.comment' 20);                          if (elm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' elm.matchedItem);                              message = GetMessage(95130 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16310' r.comment' (String)attribs["article"]));                              break;                          }                            // Did the user user blank the page?                          if (project.rautosummBlank.IsMatch(r.comment))                          {                              message = GetMessage(96010 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16311' (String)attribs["article"]));                              break;                          }                            Match rplm = project.rautosummReplace.Match(r.comment);                          if (rplm.Success)                          {                              // The user replaced the page.                              try                              {                                  attribs.Add("profanity"' rplm.Groups["item1"].Captures[0].Value);                                  message = GetMessage(96020 + userOffset' ref attribs);                              }                              catch (ArgumentOutOfRangeException)                              {                                  // This wiki probably doesn't have a profanity attribute                                  message = GetMessage(96030 + userOffset' ref attribs);                              }                              break;                          }                            // Is the article on the watchlist?                          ListMatch welm = listman.IsWatchedArticle(r.title' r.project);                          if (welm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5130 + userOffset' ref attribs);                              break;                          }                            // If we're still here that means                          // - the edit didn't get ignored by adminlist or whitelist                          // - the edit didn't match any watch patterns                          // Now' if any of the following is true' we must still report it.                          // - Edit by blacklisted user                          // - Edit by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // If nothing special about the edit' return to ignore                          if (!editSpecial)                              return;                      }                      break;                  case RCEvent.EventType.move:                      // if moves are softhidden hide moves by admin' bot or whitelist                      if ((config.feedFilterEventMove == 2) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                      {                          return;                      }                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("fromname"' project.interwikiLink + r.title);                      attribs.Add("cfromname"' r.title);                      attribs.Add("toname"' project.interwikiLink + r.movedTo);                      attribs.Add("ctoname"' r.movedTo);                      attribs.Add("url"' r.blockLength); //The blockLength field stores the moveFrom URL                      attribs.Add("reason"' r.comment);                      message = GetMessage(5500 + userOffset' ref attribs);                      break;                  case RCEvent.EventType.block:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.title.Split(new char[] { ':' }' 2)[1]));                      attribs.Add("length"' r.blockLength);                      attribs.Add("reason"' r.comment);                      message = GetMessage(5400' ref attribs);                      //If the blocked user (r.title) isn't botlisted' add to blacklist                      if (listman.ClassifyEditor(r.title.Split(new char[] { ':' }' 2)[1]' r.project) != ListManager.UserType.bot)                      {                          //If this isn't an indefinite/infinite block' add to blacklist                          if ((r.blockLength.ToLower() != "indefinite") && (r.blockLength.ToLower() != "infinite"))                          {                                                               // 2'678'400 seconds = 744 hours = 31 days                              int listLen = Convert.ToInt32(CVNBotUtils.ParseDateTimeLength(r.blockLength' 2678400) * 2.5);                              string blComment = "Autoblacklist: " + r.comment + " on " + r.project;                              message += "\n" + listman.AddUserToList(r.title.Split(new char[] { ':' }' 2)[1]' "" //Global bl                                  ' ListManager.UserType.blacklisted' r.user' blComment' listLen);                              Broadcast("BL"' "ADD"' r.title.Split(new char[] { ':' }' 2)[1]' listLen' blComment' r.user);                          }                      }                      break;                  case RCEvent.EventType.unblock:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("reason"' r.comment);                      message = GetMessage(5700' ref attribs);                      break;                  case RCEvent.EventType.delete:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      attribs.Add("reason"' r.comment);                      message = GetMessage(05300' ref attribs);                      break;                  case RCEvent.EventType.newuser:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("caurl"' "https://meta.wikimedia.org/wiki/Special:CentralAuth/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch = listman.MatchesList(r.user' 11);                      if (bnuMatch.Success && feedFilterThisEvent == 1)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch.matchedItem);                          attribs.Add("wwreason"' bnuMatch.matchedReason);                          message = GetMessage(5201' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5200' ref attribs);                      }                      break;                  case RCEvent.EventType.newuser2:                      attribs.Add("creator"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ccreator"' r.user);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.title);                      attribs.Add("ceditor"' r.title);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch2 = listman.MatchesList(r.user' 11);                      if (bnuMatch2.Success)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch2.matchedItem);                          attribs.Add("wwreason"' bnuMatch2.matchedReason);                          message = GetMessage(5211' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch2.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5210' ref attribs);                      }                      break;                  case RCEvent.EventType.upload:                      int uMsg = 5600;                        // Check if the edit summary matches BES                      ListMatch ubes2 = listman.MatchesList(r.comment' 20);                      if (ubes2.Success)                      {                          attribs.Add("watchword"' ubes2.matchedItem);                          attribs.Add("lmreason"' ubes2.matchedReason);                          uMsg = 95620;                      }                        // Now check if the title matches BES                      ListMatch ubes1 = listman.MatchesList(r.title' 20);                      if (ubes1.Success)                      {                          attribs.Add("watchword"' ubes1.matchedItem);                          attribs.Add("lmreason"' ubes1.matchedReason);                          uMsg = 95620;                      }                        // Check if upload is watched                      ListMatch uwa = listman.IsWatchedArticle(r.title' r.project);                      if (uwa.Success)                          uMsg = 5610;                        // If normal and uploaded by an admin' bot or whitelisted person always hide                      if ((uMsg == 5600) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                          return;                        // if normal and uploads are softhidden hide normal user and anon aswell                      if ((uMsg == 5600) && (config.feedFilterEventUpload == 2) && ((userOffset == 3) || (userOffset == 4)))                          return;                        // If our message is 95620' we might need to truncate r.comment                      if (uMsg == 95620)                      {                          if (r.comment.Length > 25)                              r.comment = r.comment.Substring(0' 23) + "...";                      }                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("uploaditem"' project.interwikiLink + r.title);                      attribs.Add("cuploaditem"' r.title);                      attribs.Add("reason"' r.comment);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(userOffset + uMsg' ref attribs);                      break;                  case RCEvent.EventType.protect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in protect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5900' ref attribs);                      break;                  case RCEvent.EventType.unprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in unprotect is fine' it's just the pagetitle                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(5901' ref attribs);                      break;                  case RCEvent.EventType.modifyprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in modifyprotect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5902' ref attribs);                      break;              }
Magic Number,CVNBot,Program,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Program.cs,ReactToRCEvent,The following statement contains a magic number: switch (r.eventtype)              {                  // This case handles:                  // - New page creations                  // - Page edits                  case RCEvent.EventType.edit:                      String diffsize;                      if (r.szdiff >= 0)                          diffsize = "+" + r.szdiff.ToString();                      else                          diffsize = r.szdiff.ToString();                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("size"' diffsize);                      attribs.Add("url"' r.url);                      attribs.Add("reason"' r.comment);                        // This block handles: New page creations                      if (r.newpage)                      {                          bool createSpecial = false;                            // New pages created by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.newBig)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5010 + userOffset' ref attribs);                          }                          else if (r.szdiff <= config.newSmall)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5020 + userOffset' ref attribs);                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5000 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Article is on watchlist                          // - Page title matches a BNA pattern                          // - Edit summary matches a BES pattern                            // Is the article on the watchlist?                          ListMatch wlm = listman.IsWatchedArticle(r.title' r.project);                          if (wlm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5030 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16301' (String)attribs["article"]));                              break;                          }                            // Does the page title match a BNA pattern?                          ListMatch eslm = listman.MatchesList(r.title' 12);                          if (eslm.Success)                          {                              // Matches BNA                              attribs.Add("watchword"' eslm.matchedItem);                              message = GetMessage(5040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' eslm.matchedItem));                              break;                          }                            // Does the edit summary match a BES pattern?                          ListMatch lm = listman.MatchesList(r.comment' 20);                          if (lm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' lm.matchedItem);                              message = GetMessage(95040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' lm.matchedItem));                              break;                          }                            // If we're still here that means                          // - the create didn't get ignored by adminlist or whitelist                          // - the create didn't match any watch patterns                          // Now' if any of the following is true' we'll must report it.                          // - Create by blacklisted user                          // - Create by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // Created by an unlisted reguser with non-special create size' ignore                          if ((userOffset == 4) && !createSpecial)                              return;                            // Else: Create had special size' so let it shown (default)' don't return!                      }                      // This block handles: Page edits                      else                      {                          bool editSpecial = false;                            // Edit by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.editBig)                          {                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5110 + userOffset' ref attribs);                              editSpecial = true;                          }                          else if (r.szdiff <= config.editBlank)                          {                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5120 + userOffset' ref attribs);                              editSpecial = true;                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5100 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Edit summary matches a BES pattern                          // - Edit blanked the page                          // - Edit replaced the page                          // - Article is on watchlist                            // Does the edit summary match a BES pattern?                          ListMatch elm = listman.MatchesList(r.comment' 20);                          if (elm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' elm.matchedItem);                              message = GetMessage(95130 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16310' r.comment' (String)attribs["article"]));                              break;                          }                            // Did the user user blank the page?                          if (project.rautosummBlank.IsMatch(r.comment))                          {                              message = GetMessage(96010 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16311' (String)attribs["article"]));                              break;                          }                            Match rplm = project.rautosummReplace.Match(r.comment);                          if (rplm.Success)                          {                              // The user replaced the page.                              try                              {                                  attribs.Add("profanity"' rplm.Groups["item1"].Captures[0].Value);                                  message = GetMessage(96020 + userOffset' ref attribs);                              }                              catch (ArgumentOutOfRangeException)                              {                                  // This wiki probably doesn't have a profanity attribute                                  message = GetMessage(96030 + userOffset' ref attribs);                              }                              break;                          }                            // Is the article on the watchlist?                          ListMatch welm = listman.IsWatchedArticle(r.title' r.project);                          if (welm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5130 + userOffset' ref attribs);                              break;                          }                            // If we're still here that means                          // - the edit didn't get ignored by adminlist or whitelist                          // - the edit didn't match any watch patterns                          // Now' if any of the following is true' we must still report it.                          // - Edit by blacklisted user                          // - Edit by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // If nothing special about the edit' return to ignore                          if (!editSpecial)                              return;                      }                      break;                  case RCEvent.EventType.move:                      // if moves are softhidden hide moves by admin' bot or whitelist                      if ((config.feedFilterEventMove == 2) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                      {                          return;                      }                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("fromname"' project.interwikiLink + r.title);                      attribs.Add("cfromname"' r.title);                      attribs.Add("toname"' project.interwikiLink + r.movedTo);                      attribs.Add("ctoname"' r.movedTo);                      attribs.Add("url"' r.blockLength); //The blockLength field stores the moveFrom URL                      attribs.Add("reason"' r.comment);                      message = GetMessage(5500 + userOffset' ref attribs);                      break;                  case RCEvent.EventType.block:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.title.Split(new char[] { ':' }' 2)[1]));                      attribs.Add("length"' r.blockLength);                      attribs.Add("reason"' r.comment);                      message = GetMessage(5400' ref attribs);                      //If the blocked user (r.title) isn't botlisted' add to blacklist                      if (listman.ClassifyEditor(r.title.Split(new char[] { ':' }' 2)[1]' r.project) != ListManager.UserType.bot)                      {                          //If this isn't an indefinite/infinite block' add to blacklist                          if ((r.blockLength.ToLower() != "indefinite") && (r.blockLength.ToLower() != "infinite"))                          {                                                               // 2'678'400 seconds = 744 hours = 31 days                              int listLen = Convert.ToInt32(CVNBotUtils.ParseDateTimeLength(r.blockLength' 2678400) * 2.5);                              string blComment = "Autoblacklist: " + r.comment + " on " + r.project;                              message += "\n" + listman.AddUserToList(r.title.Split(new char[] { ':' }' 2)[1]' "" //Global bl                                  ' ListManager.UserType.blacklisted' r.user' blComment' listLen);                              Broadcast("BL"' "ADD"' r.title.Split(new char[] { ':' }' 2)[1]' listLen' blComment' r.user);                          }                      }                      break;                  case RCEvent.EventType.unblock:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("reason"' r.comment);                      message = GetMessage(5700' ref attribs);                      break;                  case RCEvent.EventType.delete:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      attribs.Add("reason"' r.comment);                      message = GetMessage(05300' ref attribs);                      break;                  case RCEvent.EventType.newuser:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("caurl"' "https://meta.wikimedia.org/wiki/Special:CentralAuth/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch = listman.MatchesList(r.user' 11);                      if (bnuMatch.Success && feedFilterThisEvent == 1)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch.matchedItem);                          attribs.Add("wwreason"' bnuMatch.matchedReason);                          message = GetMessage(5201' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5200' ref attribs);                      }                      break;                  case RCEvent.EventType.newuser2:                      attribs.Add("creator"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ccreator"' r.user);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.title);                      attribs.Add("ceditor"' r.title);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch2 = listman.MatchesList(r.user' 11);                      if (bnuMatch2.Success)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch2.matchedItem);                          attribs.Add("wwreason"' bnuMatch2.matchedReason);                          message = GetMessage(5211' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch2.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5210' ref attribs);                      }                      break;                  case RCEvent.EventType.upload:                      int uMsg = 5600;                        // Check if the edit summary matches BES                      ListMatch ubes2 = listman.MatchesList(r.comment' 20);                      if (ubes2.Success)                      {                          attribs.Add("watchword"' ubes2.matchedItem);                          attribs.Add("lmreason"' ubes2.matchedReason);                          uMsg = 95620;                      }                        // Now check if the title matches BES                      ListMatch ubes1 = listman.MatchesList(r.title' 20);                      if (ubes1.Success)                      {                          attribs.Add("watchword"' ubes1.matchedItem);                          attribs.Add("lmreason"' ubes1.matchedReason);                          uMsg = 95620;                      }                        // Check if upload is watched                      ListMatch uwa = listman.IsWatchedArticle(r.title' r.project);                      if (uwa.Success)                          uMsg = 5610;                        // If normal and uploaded by an admin' bot or whitelisted person always hide                      if ((uMsg == 5600) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                          return;                        // if normal and uploads are softhidden hide normal user and anon aswell                      if ((uMsg == 5600) && (config.feedFilterEventUpload == 2) && ((userOffset == 3) || (userOffset == 4)))                          return;                        // If our message is 95620' we might need to truncate r.comment                      if (uMsg == 95620)                      {                          if (r.comment.Length > 25)                              r.comment = r.comment.Substring(0' 23) + "...";                      }                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("uploaditem"' project.interwikiLink + r.title);                      attribs.Add("cuploaditem"' r.title);                      attribs.Add("reason"' r.comment);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(userOffset + uMsg' ref attribs);                      break;                  case RCEvent.EventType.protect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in protect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5900' ref attribs);                      break;                  case RCEvent.EventType.unprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in unprotect is fine' it's just the pagetitle                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(5901' ref attribs);                      break;                  case RCEvent.EventType.modifyprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in modifyprotect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5902' ref attribs);                      break;              }
Magic Number,CVNBot,Program,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Program.cs,ReactToRCEvent,The following statement contains a magic number: switch (r.eventtype)              {                  // This case handles:                  // - New page creations                  // - Page edits                  case RCEvent.EventType.edit:                      String diffsize;                      if (r.szdiff >= 0)                          diffsize = "+" + r.szdiff.ToString();                      else                          diffsize = r.szdiff.ToString();                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("size"' diffsize);                      attribs.Add("url"' r.url);                      attribs.Add("reason"' r.comment);                        // This block handles: New page creations                      if (r.newpage)                      {                          bool createSpecial = false;                            // New pages created by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.newBig)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5010 + userOffset' ref attribs);                          }                          else if (r.szdiff <= config.newSmall)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5020 + userOffset' ref attribs);                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5000 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Article is on watchlist                          // - Page title matches a BNA pattern                          // - Edit summary matches a BES pattern                            // Is the article on the watchlist?                          ListMatch wlm = listman.IsWatchedArticle(r.title' r.project);                          if (wlm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5030 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16301' (String)attribs["article"]));                              break;                          }                            // Does the page title match a BNA pattern?                          ListMatch eslm = listman.MatchesList(r.title' 12);                          if (eslm.Success)                          {                              // Matches BNA                              attribs.Add("watchword"' eslm.matchedItem);                              message = GetMessage(5040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' eslm.matchedItem));                              break;                          }                            // Does the edit summary match a BES pattern?                          ListMatch lm = listman.MatchesList(r.comment' 20);                          if (lm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' lm.matchedItem);                              message = GetMessage(95040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' lm.matchedItem));                              break;                          }                            // If we're still here that means                          // - the create didn't get ignored by adminlist or whitelist                          // - the create didn't match any watch patterns                          // Now' if any of the following is true' we'll must report it.                          // - Create by blacklisted user                          // - Create by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // Created by an unlisted reguser with non-special create size' ignore                          if ((userOffset == 4) && !createSpecial)                              return;                            // Else: Create had special size' so let it shown (default)' don't return!                      }                      // This block handles: Page edits                      else                      {                          bool editSpecial = false;                            // Edit by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.editBig)                          {                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5110 + userOffset' ref attribs);                              editSpecial = true;                          }                          else if (r.szdiff <= config.editBlank)                          {                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5120 + userOffset' ref attribs);                              editSpecial = true;                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5100 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Edit summary matches a BES pattern                          // - Edit blanked the page                          // - Edit replaced the page                          // - Article is on watchlist                            // Does the edit summary match a BES pattern?                          ListMatch elm = listman.MatchesList(r.comment' 20);                          if (elm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' elm.matchedItem);                              message = GetMessage(95130 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16310' r.comment' (String)attribs["article"]));                              break;                          }                            // Did the user user blank the page?                          if (project.rautosummBlank.IsMatch(r.comment))                          {                              message = GetMessage(96010 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16311' (String)attribs["article"]));                              break;                          }                            Match rplm = project.rautosummReplace.Match(r.comment);                          if (rplm.Success)                          {                              // The user replaced the page.                              try                              {                                  attribs.Add("profanity"' rplm.Groups["item1"].Captures[0].Value);                                  message = GetMessage(96020 + userOffset' ref attribs);                              }                              catch (ArgumentOutOfRangeException)                              {                                  // This wiki probably doesn't have a profanity attribute                                  message = GetMessage(96030 + userOffset' ref attribs);                              }                              break;                          }                            // Is the article on the watchlist?                          ListMatch welm = listman.IsWatchedArticle(r.title' r.project);                          if (welm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5130 + userOffset' ref attribs);                              break;                          }                            // If we're still here that means                          // - the edit didn't get ignored by adminlist or whitelist                          // - the edit didn't match any watch patterns                          // Now' if any of the following is true' we must still report it.                          // - Edit by blacklisted user                          // - Edit by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // If nothing special about the edit' return to ignore                          if (!editSpecial)                              return;                      }                      break;                  case RCEvent.EventType.move:                      // if moves are softhidden hide moves by admin' bot or whitelist                      if ((config.feedFilterEventMove == 2) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                      {                          return;                      }                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("fromname"' project.interwikiLink + r.title);                      attribs.Add("cfromname"' r.title);                      attribs.Add("toname"' project.interwikiLink + r.movedTo);                      attribs.Add("ctoname"' r.movedTo);                      attribs.Add("url"' r.blockLength); //The blockLength field stores the moveFrom URL                      attribs.Add("reason"' r.comment);                      message = GetMessage(5500 + userOffset' ref attribs);                      break;                  case RCEvent.EventType.block:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.title.Split(new char[] { ':' }' 2)[1]));                      attribs.Add("length"' r.blockLength);                      attribs.Add("reason"' r.comment);                      message = GetMessage(5400' ref attribs);                      //If the blocked user (r.title) isn't botlisted' add to blacklist                      if (listman.ClassifyEditor(r.title.Split(new char[] { ':' }' 2)[1]' r.project) != ListManager.UserType.bot)                      {                          //If this isn't an indefinite/infinite block' add to blacklist                          if ((r.blockLength.ToLower() != "indefinite") && (r.blockLength.ToLower() != "infinite"))                          {                                                               // 2'678'400 seconds = 744 hours = 31 days                              int listLen = Convert.ToInt32(CVNBotUtils.ParseDateTimeLength(r.blockLength' 2678400) * 2.5);                              string blComment = "Autoblacklist: " + r.comment + " on " + r.project;                              message += "\n" + listman.AddUserToList(r.title.Split(new char[] { ':' }' 2)[1]' "" //Global bl                                  ' ListManager.UserType.blacklisted' r.user' blComment' listLen);                              Broadcast("BL"' "ADD"' r.title.Split(new char[] { ':' }' 2)[1]' listLen' blComment' r.user);                          }                      }                      break;                  case RCEvent.EventType.unblock:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("reason"' r.comment);                      message = GetMessage(5700' ref attribs);                      break;                  case RCEvent.EventType.delete:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      attribs.Add("reason"' r.comment);                      message = GetMessage(05300' ref attribs);                      break;                  case RCEvent.EventType.newuser:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("caurl"' "https://meta.wikimedia.org/wiki/Special:CentralAuth/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch = listman.MatchesList(r.user' 11);                      if (bnuMatch.Success && feedFilterThisEvent == 1)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch.matchedItem);                          attribs.Add("wwreason"' bnuMatch.matchedReason);                          message = GetMessage(5201' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5200' ref attribs);                      }                      break;                  case RCEvent.EventType.newuser2:                      attribs.Add("creator"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ccreator"' r.user);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.title);                      attribs.Add("ceditor"' r.title);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch2 = listman.MatchesList(r.user' 11);                      if (bnuMatch2.Success)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch2.matchedItem);                          attribs.Add("wwreason"' bnuMatch2.matchedReason);                          message = GetMessage(5211' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch2.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5210' ref attribs);                      }                      break;                  case RCEvent.EventType.upload:                      int uMsg = 5600;                        // Check if the edit summary matches BES                      ListMatch ubes2 = listman.MatchesList(r.comment' 20);                      if (ubes2.Success)                      {                          attribs.Add("watchword"' ubes2.matchedItem);                          attribs.Add("lmreason"' ubes2.matchedReason);                          uMsg = 95620;                      }                        // Now check if the title matches BES                      ListMatch ubes1 = listman.MatchesList(r.title' 20);                      if (ubes1.Success)                      {                          attribs.Add("watchword"' ubes1.matchedItem);                          attribs.Add("lmreason"' ubes1.matchedReason);                          uMsg = 95620;                      }                        // Check if upload is watched                      ListMatch uwa = listman.IsWatchedArticle(r.title' r.project);                      if (uwa.Success)                          uMsg = 5610;                        // If normal and uploaded by an admin' bot or whitelisted person always hide                      if ((uMsg == 5600) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                          return;                        // if normal and uploads are softhidden hide normal user and anon aswell                      if ((uMsg == 5600) && (config.feedFilterEventUpload == 2) && ((userOffset == 3) || (userOffset == 4)))                          return;                        // If our message is 95620' we might need to truncate r.comment                      if (uMsg == 95620)                      {                          if (r.comment.Length > 25)                              r.comment = r.comment.Substring(0' 23) + "...";                      }                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("uploaditem"' project.interwikiLink + r.title);                      attribs.Add("cuploaditem"' r.title);                      attribs.Add("reason"' r.comment);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(userOffset + uMsg' ref attribs);                      break;                  case RCEvent.EventType.protect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in protect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5900' ref attribs);                      break;                  case RCEvent.EventType.unprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in unprotect is fine' it's just the pagetitle                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(5901' ref attribs);                      break;                  case RCEvent.EventType.modifyprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in modifyprotect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5902' ref attribs);                      break;              }
Magic Number,CVNBot,Program,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Program.cs,ReactToRCEvent,The following statement contains a magic number: switch (r.eventtype)              {                  // This case handles:                  // - New page creations                  // - Page edits                  case RCEvent.EventType.edit:                      String diffsize;                      if (r.szdiff >= 0)                          diffsize = "+" + r.szdiff.ToString();                      else                          diffsize = r.szdiff.ToString();                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("size"' diffsize);                      attribs.Add("url"' r.url);                      attribs.Add("reason"' r.comment);                        // This block handles: New page creations                      if (r.newpage)                      {                          bool createSpecial = false;                            // New pages created by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.newBig)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5010 + userOffset' ref attribs);                          }                          else if (r.szdiff <= config.newSmall)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5020 + userOffset' ref attribs);                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5000 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Article is on watchlist                          // - Page title matches a BNA pattern                          // - Edit summary matches a BES pattern                            // Is the article on the watchlist?                          ListMatch wlm = listman.IsWatchedArticle(r.title' r.project);                          if (wlm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5030 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16301' (String)attribs["article"]));                              break;                          }                            // Does the page title match a BNA pattern?                          ListMatch eslm = listman.MatchesList(r.title' 12);                          if (eslm.Success)                          {                              // Matches BNA                              attribs.Add("watchword"' eslm.matchedItem);                              message = GetMessage(5040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' eslm.matchedItem));                              break;                          }                            // Does the edit summary match a BES pattern?                          ListMatch lm = listman.MatchesList(r.comment' 20);                          if (lm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' lm.matchedItem);                              message = GetMessage(95040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' lm.matchedItem));                              break;                          }                            // If we're still here that means                          // - the create didn't get ignored by adminlist or whitelist                          // - the create didn't match any watch patterns                          // Now' if any of the following is true' we'll must report it.                          // - Create by blacklisted user                          // - Create by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // Created by an unlisted reguser with non-special create size' ignore                          if ((userOffset == 4) && !createSpecial)                              return;                            // Else: Create had special size' so let it shown (default)' don't return!                      }                      // This block handles: Page edits                      else                      {                          bool editSpecial = false;                            // Edit by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.editBig)                          {                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5110 + userOffset' ref attribs);                              editSpecial = true;                          }                          else if (r.szdiff <= config.editBlank)                          {                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5120 + userOffset' ref attribs);                              editSpecial = true;                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5100 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Edit summary matches a BES pattern                          // - Edit blanked the page                          // - Edit replaced the page                          // - Article is on watchlist                            // Does the edit summary match a BES pattern?                          ListMatch elm = listman.MatchesList(r.comment' 20);                          if (elm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' elm.matchedItem);                              message = GetMessage(95130 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16310' r.comment' (String)attribs["article"]));                              break;                          }                            // Did the user user blank the page?                          if (project.rautosummBlank.IsMatch(r.comment))                          {                              message = GetMessage(96010 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16311' (String)attribs["article"]));                              break;                          }                            Match rplm = project.rautosummReplace.Match(r.comment);                          if (rplm.Success)                          {                              // The user replaced the page.                              try                              {                                  attribs.Add("profanity"' rplm.Groups["item1"].Captures[0].Value);                                  message = GetMessage(96020 + userOffset' ref attribs);                              }                              catch (ArgumentOutOfRangeException)                              {                                  // This wiki probably doesn't have a profanity attribute                                  message = GetMessage(96030 + userOffset' ref attribs);                              }                              break;                          }                            // Is the article on the watchlist?                          ListMatch welm = listman.IsWatchedArticle(r.title' r.project);                          if (welm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5130 + userOffset' ref attribs);                              break;                          }                            // If we're still here that means                          // - the edit didn't get ignored by adminlist or whitelist                          // - the edit didn't match any watch patterns                          // Now' if any of the following is true' we must still report it.                          // - Edit by blacklisted user                          // - Edit by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // If nothing special about the edit' return to ignore                          if (!editSpecial)                              return;                      }                      break;                  case RCEvent.EventType.move:                      // if moves are softhidden hide moves by admin' bot or whitelist                      if ((config.feedFilterEventMove == 2) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                      {                          return;                      }                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("fromname"' project.interwikiLink + r.title);                      attribs.Add("cfromname"' r.title);                      attribs.Add("toname"' project.interwikiLink + r.movedTo);                      attribs.Add("ctoname"' r.movedTo);                      attribs.Add("url"' r.blockLength); //The blockLength field stores the moveFrom URL                      attribs.Add("reason"' r.comment);                      message = GetMessage(5500 + userOffset' ref attribs);                      break;                  case RCEvent.EventType.block:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.title.Split(new char[] { ':' }' 2)[1]));                      attribs.Add("length"' r.blockLength);                      attribs.Add("reason"' r.comment);                      message = GetMessage(5400' ref attribs);                      //If the blocked user (r.title) isn't botlisted' add to blacklist                      if (listman.ClassifyEditor(r.title.Split(new char[] { ':' }' 2)[1]' r.project) != ListManager.UserType.bot)                      {                          //If this isn't an indefinite/infinite block' add to blacklist                          if ((r.blockLength.ToLower() != "indefinite") && (r.blockLength.ToLower() != "infinite"))                          {                                                               // 2'678'400 seconds = 744 hours = 31 days                              int listLen = Convert.ToInt32(CVNBotUtils.ParseDateTimeLength(r.blockLength' 2678400) * 2.5);                              string blComment = "Autoblacklist: " + r.comment + " on " + r.project;                              message += "\n" + listman.AddUserToList(r.title.Split(new char[] { ':' }' 2)[1]' "" //Global bl                                  ' ListManager.UserType.blacklisted' r.user' blComment' listLen);                              Broadcast("BL"' "ADD"' r.title.Split(new char[] { ':' }' 2)[1]' listLen' blComment' r.user);                          }                      }                      break;                  case RCEvent.EventType.unblock:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("reason"' r.comment);                      message = GetMessage(5700' ref attribs);                      break;                  case RCEvent.EventType.delete:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      attribs.Add("reason"' r.comment);                      message = GetMessage(05300' ref attribs);                      break;                  case RCEvent.EventType.newuser:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("caurl"' "https://meta.wikimedia.org/wiki/Special:CentralAuth/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch = listman.MatchesList(r.user' 11);                      if (bnuMatch.Success && feedFilterThisEvent == 1)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch.matchedItem);                          attribs.Add("wwreason"' bnuMatch.matchedReason);                          message = GetMessage(5201' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5200' ref attribs);                      }                      break;                  case RCEvent.EventType.newuser2:                      attribs.Add("creator"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ccreator"' r.user);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.title);                      attribs.Add("ceditor"' r.title);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch2 = listman.MatchesList(r.user' 11);                      if (bnuMatch2.Success)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch2.matchedItem);                          attribs.Add("wwreason"' bnuMatch2.matchedReason);                          message = GetMessage(5211' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch2.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5210' ref attribs);                      }                      break;                  case RCEvent.EventType.upload:                      int uMsg = 5600;                        // Check if the edit summary matches BES                      ListMatch ubes2 = listman.MatchesList(r.comment' 20);                      if (ubes2.Success)                      {                          attribs.Add("watchword"' ubes2.matchedItem);                          attribs.Add("lmreason"' ubes2.matchedReason);                          uMsg = 95620;                      }                        // Now check if the title matches BES                      ListMatch ubes1 = listman.MatchesList(r.title' 20);                      if (ubes1.Success)                      {                          attribs.Add("watchword"' ubes1.matchedItem);                          attribs.Add("lmreason"' ubes1.matchedReason);                          uMsg = 95620;                      }                        // Check if upload is watched                      ListMatch uwa = listman.IsWatchedArticle(r.title' r.project);                      if (uwa.Success)                          uMsg = 5610;                        // If normal and uploaded by an admin' bot or whitelisted person always hide                      if ((uMsg == 5600) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                          return;                        // if normal and uploads are softhidden hide normal user and anon aswell                      if ((uMsg == 5600) && (config.feedFilterEventUpload == 2) && ((userOffset == 3) || (userOffset == 4)))                          return;                        // If our message is 95620' we might need to truncate r.comment                      if (uMsg == 95620)                      {                          if (r.comment.Length > 25)                              r.comment = r.comment.Substring(0' 23) + "...";                      }                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("uploaditem"' project.interwikiLink + r.title);                      attribs.Add("cuploaditem"' r.title);                      attribs.Add("reason"' r.comment);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(userOffset + uMsg' ref attribs);                      break;                  case RCEvent.EventType.protect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in protect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5900' ref attribs);                      break;                  case RCEvent.EventType.unprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in unprotect is fine' it's just the pagetitle                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(5901' ref attribs);                      break;                  case RCEvent.EventType.modifyprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in modifyprotect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5902' ref attribs);                      break;              }
Magic Number,CVNBot,Program,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Program.cs,ReactToRCEvent,The following statement contains a magic number: switch (r.eventtype)              {                  // This case handles:                  // - New page creations                  // - Page edits                  case RCEvent.EventType.edit:                      String diffsize;                      if (r.szdiff >= 0)                          diffsize = "+" + r.szdiff.ToString();                      else                          diffsize = r.szdiff.ToString();                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("size"' diffsize);                      attribs.Add("url"' r.url);                      attribs.Add("reason"' r.comment);                        // This block handles: New page creations                      if (r.newpage)                      {                          bool createSpecial = false;                            // New pages created by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.newBig)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5010 + userOffset' ref attribs);                          }                          else if (r.szdiff <= config.newSmall)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5020 + userOffset' ref attribs);                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5000 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Article is on watchlist                          // - Page title matches a BNA pattern                          // - Edit summary matches a BES pattern                            // Is the article on the watchlist?                          ListMatch wlm = listman.IsWatchedArticle(r.title' r.project);                          if (wlm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5030 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16301' (String)attribs["article"]));                              break;                          }                            // Does the page title match a BNA pattern?                          ListMatch eslm = listman.MatchesList(r.title' 12);                          if (eslm.Success)                          {                              // Matches BNA                              attribs.Add("watchword"' eslm.matchedItem);                              message = GetMessage(5040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' eslm.matchedItem));                              break;                          }                            // Does the edit summary match a BES pattern?                          ListMatch lm = listman.MatchesList(r.comment' 20);                          if (lm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' lm.matchedItem);                              message = GetMessage(95040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' lm.matchedItem));                              break;                          }                            // If we're still here that means                          // - the create didn't get ignored by adminlist or whitelist                          // - the create didn't match any watch patterns                          // Now' if any of the following is true' we'll must report it.                          // - Create by blacklisted user                          // - Create by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // Created by an unlisted reguser with non-special create size' ignore                          if ((userOffset == 4) && !createSpecial)                              return;                            // Else: Create had special size' so let it shown (default)' don't return!                      }                      // This block handles: Page edits                      else                      {                          bool editSpecial = false;                            // Edit by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.editBig)                          {                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5110 + userOffset' ref attribs);                              editSpecial = true;                          }                          else if (r.szdiff <= config.editBlank)                          {                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5120 + userOffset' ref attribs);                              editSpecial = true;                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5100 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Edit summary matches a BES pattern                          // - Edit blanked the page                          // - Edit replaced the page                          // - Article is on watchlist                            // Does the edit summary match a BES pattern?                          ListMatch elm = listman.MatchesList(r.comment' 20);                          if (elm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' elm.matchedItem);                              message = GetMessage(95130 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16310' r.comment' (String)attribs["article"]));                              break;                          }                            // Did the user user blank the page?                          if (project.rautosummBlank.IsMatch(r.comment))                          {                              message = GetMessage(96010 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16311' (String)attribs["article"]));                              break;                          }                            Match rplm = project.rautosummReplace.Match(r.comment);                          if (rplm.Success)                          {                              // The user replaced the page.                              try                              {                                  attribs.Add("profanity"' rplm.Groups["item1"].Captures[0].Value);                                  message = GetMessage(96020 + userOffset' ref attribs);                              }                              catch (ArgumentOutOfRangeException)                              {                                  // This wiki probably doesn't have a profanity attribute                                  message = GetMessage(96030 + userOffset' ref attribs);                              }                              break;                          }                            // Is the article on the watchlist?                          ListMatch welm = listman.IsWatchedArticle(r.title' r.project);                          if (welm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5130 + userOffset' ref attribs);                              break;                          }                            // If we're still here that means                          // - the edit didn't get ignored by adminlist or whitelist                          // - the edit didn't match any watch patterns                          // Now' if any of the following is true' we must still report it.                          // - Edit by blacklisted user                          // - Edit by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // If nothing special about the edit' return to ignore                          if (!editSpecial)                              return;                      }                      break;                  case RCEvent.EventType.move:                      // if moves are softhidden hide moves by admin' bot or whitelist                      if ((config.feedFilterEventMove == 2) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                      {                          return;                      }                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("fromname"' project.interwikiLink + r.title);                      attribs.Add("cfromname"' r.title);                      attribs.Add("toname"' project.interwikiLink + r.movedTo);                      attribs.Add("ctoname"' r.movedTo);                      attribs.Add("url"' r.blockLength); //The blockLength field stores the moveFrom URL                      attribs.Add("reason"' r.comment);                      message = GetMessage(5500 + userOffset' ref attribs);                      break;                  case RCEvent.EventType.block:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.title.Split(new char[] { ':' }' 2)[1]));                      attribs.Add("length"' r.blockLength);                      attribs.Add("reason"' r.comment);                      message = GetMessage(5400' ref attribs);                      //If the blocked user (r.title) isn't botlisted' add to blacklist                      if (listman.ClassifyEditor(r.title.Split(new char[] { ':' }' 2)[1]' r.project) != ListManager.UserType.bot)                      {                          //If this isn't an indefinite/infinite block' add to blacklist                          if ((r.blockLength.ToLower() != "indefinite") && (r.blockLength.ToLower() != "infinite"))                          {                                                               // 2'678'400 seconds = 744 hours = 31 days                              int listLen = Convert.ToInt32(CVNBotUtils.ParseDateTimeLength(r.blockLength' 2678400) * 2.5);                              string blComment = "Autoblacklist: " + r.comment + " on " + r.project;                              message += "\n" + listman.AddUserToList(r.title.Split(new char[] { ':' }' 2)[1]' "" //Global bl                                  ' ListManager.UserType.blacklisted' r.user' blComment' listLen);                              Broadcast("BL"' "ADD"' r.title.Split(new char[] { ':' }' 2)[1]' listLen' blComment' r.user);                          }                      }                      break;                  case RCEvent.EventType.unblock:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("reason"' r.comment);                      message = GetMessage(5700' ref attribs);                      break;                  case RCEvent.EventType.delete:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      attribs.Add("reason"' r.comment);                      message = GetMessage(05300' ref attribs);                      break;                  case RCEvent.EventType.newuser:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("caurl"' "https://meta.wikimedia.org/wiki/Special:CentralAuth/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch = listman.MatchesList(r.user' 11);                      if (bnuMatch.Success && feedFilterThisEvent == 1)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch.matchedItem);                          attribs.Add("wwreason"' bnuMatch.matchedReason);                          message = GetMessage(5201' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5200' ref attribs);                      }                      break;                  case RCEvent.EventType.newuser2:                      attribs.Add("creator"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ccreator"' r.user);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.title);                      attribs.Add("ceditor"' r.title);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch2 = listman.MatchesList(r.user' 11);                      if (bnuMatch2.Success)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch2.matchedItem);                          attribs.Add("wwreason"' bnuMatch2.matchedReason);                          message = GetMessage(5211' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch2.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5210' ref attribs);                      }                      break;                  case RCEvent.EventType.upload:                      int uMsg = 5600;                        // Check if the edit summary matches BES                      ListMatch ubes2 = listman.MatchesList(r.comment' 20);                      if (ubes2.Success)                      {                          attribs.Add("watchword"' ubes2.matchedItem);                          attribs.Add("lmreason"' ubes2.matchedReason);                          uMsg = 95620;                      }                        // Now check if the title matches BES                      ListMatch ubes1 = listman.MatchesList(r.title' 20);                      if (ubes1.Success)                      {                          attribs.Add("watchword"' ubes1.matchedItem);                          attribs.Add("lmreason"' ubes1.matchedReason);                          uMsg = 95620;                      }                        // Check if upload is watched                      ListMatch uwa = listman.IsWatchedArticle(r.title' r.project);                      if (uwa.Success)                          uMsg = 5610;                        // If normal and uploaded by an admin' bot or whitelisted person always hide                      if ((uMsg == 5600) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                          return;                        // if normal and uploads are softhidden hide normal user and anon aswell                      if ((uMsg == 5600) && (config.feedFilterEventUpload == 2) && ((userOffset == 3) || (userOffset == 4)))                          return;                        // If our message is 95620' we might need to truncate r.comment                      if (uMsg == 95620)                      {                          if (r.comment.Length > 25)                              r.comment = r.comment.Substring(0' 23) + "...";                      }                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("uploaditem"' project.interwikiLink + r.title);                      attribs.Add("cuploaditem"' r.title);                      attribs.Add("reason"' r.comment);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(userOffset + uMsg' ref attribs);                      break;                  case RCEvent.EventType.protect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in protect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5900' ref attribs);                      break;                  case RCEvent.EventType.unprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in unprotect is fine' it's just the pagetitle                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(5901' ref attribs);                      break;                  case RCEvent.EventType.modifyprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in modifyprotect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5902' ref attribs);                      break;              }
Magic Number,CVNBot,Program,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Program.cs,ReactToRCEvent,The following statement contains a magic number: switch (r.eventtype)              {                  // This case handles:                  // - New page creations                  // - Page edits                  case RCEvent.EventType.edit:                      String diffsize;                      if (r.szdiff >= 0)                          diffsize = "+" + r.szdiff.ToString();                      else                          diffsize = r.szdiff.ToString();                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("size"' diffsize);                      attribs.Add("url"' r.url);                      attribs.Add("reason"' r.comment);                        // This block handles: New page creations                      if (r.newpage)                      {                          bool createSpecial = false;                            // New pages created by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.newBig)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5010 + userOffset' ref attribs);                          }                          else if (r.szdiff <= config.newSmall)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5020 + userOffset' ref attribs);                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5000 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Article is on watchlist                          // - Page title matches a BNA pattern                          // - Edit summary matches a BES pattern                            // Is the article on the watchlist?                          ListMatch wlm = listman.IsWatchedArticle(r.title' r.project);                          if (wlm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5030 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16301' (String)attribs["article"]));                              break;                          }                            // Does the page title match a BNA pattern?                          ListMatch eslm = listman.MatchesList(r.title' 12);                          if (eslm.Success)                          {                              // Matches BNA                              attribs.Add("watchword"' eslm.matchedItem);                              message = GetMessage(5040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' eslm.matchedItem));                              break;                          }                            // Does the edit summary match a BES pattern?                          ListMatch lm = listman.MatchesList(r.comment' 20);                          if (lm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' lm.matchedItem);                              message = GetMessage(95040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' lm.matchedItem));                              break;                          }                            // If we're still here that means                          // - the create didn't get ignored by adminlist or whitelist                          // - the create didn't match any watch patterns                          // Now' if any of the following is true' we'll must report it.                          // - Create by blacklisted user                          // - Create by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // Created by an unlisted reguser with non-special create size' ignore                          if ((userOffset == 4) && !createSpecial)                              return;                            // Else: Create had special size' so let it shown (default)' don't return!                      }                      // This block handles: Page edits                      else                      {                          bool editSpecial = false;                            // Edit by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.editBig)                          {                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5110 + userOffset' ref attribs);                              editSpecial = true;                          }                          else if (r.szdiff <= config.editBlank)                          {                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5120 + userOffset' ref attribs);                              editSpecial = true;                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5100 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Edit summary matches a BES pattern                          // - Edit blanked the page                          // - Edit replaced the page                          // - Article is on watchlist                            // Does the edit summary match a BES pattern?                          ListMatch elm = listman.MatchesList(r.comment' 20);                          if (elm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' elm.matchedItem);                              message = GetMessage(95130 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16310' r.comment' (String)attribs["article"]));                              break;                          }                            // Did the user user blank the page?                          if (project.rautosummBlank.IsMatch(r.comment))                          {                              message = GetMessage(96010 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16311' (String)attribs["article"]));                              break;                          }                            Match rplm = project.rautosummReplace.Match(r.comment);                          if (rplm.Success)                          {                              // The user replaced the page.                              try                              {                                  attribs.Add("profanity"' rplm.Groups["item1"].Captures[0].Value);                                  message = GetMessage(96020 + userOffset' ref attribs);                              }                              catch (ArgumentOutOfRangeException)                              {                                  // This wiki probably doesn't have a profanity attribute                                  message = GetMessage(96030 + userOffset' ref attribs);                              }                              break;                          }                            // Is the article on the watchlist?                          ListMatch welm = listman.IsWatchedArticle(r.title' r.project);                          if (welm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5130 + userOffset' ref attribs);                              break;                          }                            // If we're still here that means                          // - the edit didn't get ignored by adminlist or whitelist                          // - the edit didn't match any watch patterns                          // Now' if any of the following is true' we must still report it.                          // - Edit by blacklisted user                          // - Edit by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // If nothing special about the edit' return to ignore                          if (!editSpecial)                              return;                      }                      break;                  case RCEvent.EventType.move:                      // if moves are softhidden hide moves by admin' bot or whitelist                      if ((config.feedFilterEventMove == 2) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                      {                          return;                      }                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("fromname"' project.interwikiLink + r.title);                      attribs.Add("cfromname"' r.title);                      attribs.Add("toname"' project.interwikiLink + r.movedTo);                      attribs.Add("ctoname"' r.movedTo);                      attribs.Add("url"' r.blockLength); //The blockLength field stores the moveFrom URL                      attribs.Add("reason"' r.comment);                      message = GetMessage(5500 + userOffset' ref attribs);                      break;                  case RCEvent.EventType.block:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.title.Split(new char[] { ':' }' 2)[1]));                      attribs.Add("length"' r.blockLength);                      attribs.Add("reason"' r.comment);                      message = GetMessage(5400' ref attribs);                      //If the blocked user (r.title) isn't botlisted' add to blacklist                      if (listman.ClassifyEditor(r.title.Split(new char[] { ':' }' 2)[1]' r.project) != ListManager.UserType.bot)                      {                          //If this isn't an indefinite/infinite block' add to blacklist                          if ((r.blockLength.ToLower() != "indefinite") && (r.blockLength.ToLower() != "infinite"))                          {                                                               // 2'678'400 seconds = 744 hours = 31 days                              int listLen = Convert.ToInt32(CVNBotUtils.ParseDateTimeLength(r.blockLength' 2678400) * 2.5);                              string blComment = "Autoblacklist: " + r.comment + " on " + r.project;                              message += "\n" + listman.AddUserToList(r.title.Split(new char[] { ':' }' 2)[1]' "" //Global bl                                  ' ListManager.UserType.blacklisted' r.user' blComment' listLen);                              Broadcast("BL"' "ADD"' r.title.Split(new char[] { ':' }' 2)[1]' listLen' blComment' r.user);                          }                      }                      break;                  case RCEvent.EventType.unblock:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("reason"' r.comment);                      message = GetMessage(5700' ref attribs);                      break;                  case RCEvent.EventType.delete:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      attribs.Add("reason"' r.comment);                      message = GetMessage(05300' ref attribs);                      break;                  case RCEvent.EventType.newuser:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("caurl"' "https://meta.wikimedia.org/wiki/Special:CentralAuth/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch = listman.MatchesList(r.user' 11);                      if (bnuMatch.Success && feedFilterThisEvent == 1)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch.matchedItem);                          attribs.Add("wwreason"' bnuMatch.matchedReason);                          message = GetMessage(5201' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5200' ref attribs);                      }                      break;                  case RCEvent.EventType.newuser2:                      attribs.Add("creator"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ccreator"' r.user);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.title);                      attribs.Add("ceditor"' r.title);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch2 = listman.MatchesList(r.user' 11);                      if (bnuMatch2.Success)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch2.matchedItem);                          attribs.Add("wwreason"' bnuMatch2.matchedReason);                          message = GetMessage(5211' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch2.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5210' ref attribs);                      }                      break;                  case RCEvent.EventType.upload:                      int uMsg = 5600;                        // Check if the edit summary matches BES                      ListMatch ubes2 = listman.MatchesList(r.comment' 20);                      if (ubes2.Success)                      {                          attribs.Add("watchword"' ubes2.matchedItem);                          attribs.Add("lmreason"' ubes2.matchedReason);                          uMsg = 95620;                      }                        // Now check if the title matches BES                      ListMatch ubes1 = listman.MatchesList(r.title' 20);                      if (ubes1.Success)                      {                          attribs.Add("watchword"' ubes1.matchedItem);                          attribs.Add("lmreason"' ubes1.matchedReason);                          uMsg = 95620;                      }                        // Check if upload is watched                      ListMatch uwa = listman.IsWatchedArticle(r.title' r.project);                      if (uwa.Success)                          uMsg = 5610;                        // If normal and uploaded by an admin' bot or whitelisted person always hide                      if ((uMsg == 5600) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                          return;                        // if normal and uploads are softhidden hide normal user and anon aswell                      if ((uMsg == 5600) && (config.feedFilterEventUpload == 2) && ((userOffset == 3) || (userOffset == 4)))                          return;                        // If our message is 95620' we might need to truncate r.comment                      if (uMsg == 95620)                      {                          if (r.comment.Length > 25)                              r.comment = r.comment.Substring(0' 23) + "...";                      }                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("uploaditem"' project.interwikiLink + r.title);                      attribs.Add("cuploaditem"' r.title);                      attribs.Add("reason"' r.comment);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(userOffset + uMsg' ref attribs);                      break;                  case RCEvent.EventType.protect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in protect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5900' ref attribs);                      break;                  case RCEvent.EventType.unprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in unprotect is fine' it's just the pagetitle                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(5901' ref attribs);                      break;                  case RCEvent.EventType.modifyprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in modifyprotect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5902' ref attribs);                      break;              }
Magic Number,CVNBot,Program,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Program.cs,ReactToRCEvent,The following statement contains a magic number: switch (r.eventtype)              {                  // This case handles:                  // - New page creations                  // - Page edits                  case RCEvent.EventType.edit:                      String diffsize;                      if (r.szdiff >= 0)                          diffsize = "+" + r.szdiff.ToString();                      else                          diffsize = r.szdiff.ToString();                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("size"' diffsize);                      attribs.Add("url"' r.url);                      attribs.Add("reason"' r.comment);                        // This block handles: New page creations                      if (r.newpage)                      {                          bool createSpecial = false;                            // New pages created by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.newBig)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5010 + userOffset' ref attribs);                          }                          else if (r.szdiff <= config.newSmall)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5020 + userOffset' ref attribs);                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5000 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Article is on watchlist                          // - Page title matches a BNA pattern                          // - Edit summary matches a BES pattern                            // Is the article on the watchlist?                          ListMatch wlm = listman.IsWatchedArticle(r.title' r.project);                          if (wlm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5030 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16301' (String)attribs["article"]));                              break;                          }                            // Does the page title match a BNA pattern?                          ListMatch eslm = listman.MatchesList(r.title' 12);                          if (eslm.Success)                          {                              // Matches BNA                              attribs.Add("watchword"' eslm.matchedItem);                              message = GetMessage(5040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' eslm.matchedItem));                              break;                          }                            // Does the edit summary match a BES pattern?                          ListMatch lm = listman.MatchesList(r.comment' 20);                          if (lm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' lm.matchedItem);                              message = GetMessage(95040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' lm.matchedItem));                              break;                          }                            // If we're still here that means                          // - the create didn't get ignored by adminlist or whitelist                          // - the create didn't match any watch patterns                          // Now' if any of the following is true' we'll must report it.                          // - Create by blacklisted user                          // - Create by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // Created by an unlisted reguser with non-special create size' ignore                          if ((userOffset == 4) && !createSpecial)                              return;                            // Else: Create had special size' so let it shown (default)' don't return!                      }                      // This block handles: Page edits                      else                      {                          bool editSpecial = false;                            // Edit by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.editBig)                          {                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5110 + userOffset' ref attribs);                              editSpecial = true;                          }                          else if (r.szdiff <= config.editBlank)                          {                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5120 + userOffset' ref attribs);                              editSpecial = true;                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5100 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Edit summary matches a BES pattern                          // - Edit blanked the page                          // - Edit replaced the page                          // - Article is on watchlist                            // Does the edit summary match a BES pattern?                          ListMatch elm = listman.MatchesList(r.comment' 20);                          if (elm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' elm.matchedItem);                              message = GetMessage(95130 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16310' r.comment' (String)attribs["article"]));                              break;                          }                            // Did the user user blank the page?                          if (project.rautosummBlank.IsMatch(r.comment))                          {                              message = GetMessage(96010 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16311' (String)attribs["article"]));                              break;                          }                            Match rplm = project.rautosummReplace.Match(r.comment);                          if (rplm.Success)                          {                              // The user replaced the page.                              try                              {                                  attribs.Add("profanity"' rplm.Groups["item1"].Captures[0].Value);                                  message = GetMessage(96020 + userOffset' ref attribs);                              }                              catch (ArgumentOutOfRangeException)                              {                                  // This wiki probably doesn't have a profanity attribute                                  message = GetMessage(96030 + userOffset' ref attribs);                              }                              break;                          }                            // Is the article on the watchlist?                          ListMatch welm = listman.IsWatchedArticle(r.title' r.project);                          if (welm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5130 + userOffset' ref attribs);                              break;                          }                            // If we're still here that means                          // - the edit didn't get ignored by adminlist or whitelist                          // - the edit didn't match any watch patterns                          // Now' if any of the following is true' we must still report it.                          // - Edit by blacklisted user                          // - Edit by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // If nothing special about the edit' return to ignore                          if (!editSpecial)                              return;                      }                      break;                  case RCEvent.EventType.move:                      // if moves are softhidden hide moves by admin' bot or whitelist                      if ((config.feedFilterEventMove == 2) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                      {                          return;                      }                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("fromname"' project.interwikiLink + r.title);                      attribs.Add("cfromname"' r.title);                      attribs.Add("toname"' project.interwikiLink + r.movedTo);                      attribs.Add("ctoname"' r.movedTo);                      attribs.Add("url"' r.blockLength); //The blockLength field stores the moveFrom URL                      attribs.Add("reason"' r.comment);                      message = GetMessage(5500 + userOffset' ref attribs);                      break;                  case RCEvent.EventType.block:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.title.Split(new char[] { ':' }' 2)[1]));                      attribs.Add("length"' r.blockLength);                      attribs.Add("reason"' r.comment);                      message = GetMessage(5400' ref attribs);                      //If the blocked user (r.title) isn't botlisted' add to blacklist                      if (listman.ClassifyEditor(r.title.Split(new char[] { ':' }' 2)[1]' r.project) != ListManager.UserType.bot)                      {                          //If this isn't an indefinite/infinite block' add to blacklist                          if ((r.blockLength.ToLower() != "indefinite") && (r.blockLength.ToLower() != "infinite"))                          {                                                               // 2'678'400 seconds = 744 hours = 31 days                              int listLen = Convert.ToInt32(CVNBotUtils.ParseDateTimeLength(r.blockLength' 2678400) * 2.5);                              string blComment = "Autoblacklist: " + r.comment + " on " + r.project;                              message += "\n" + listman.AddUserToList(r.title.Split(new char[] { ':' }' 2)[1]' "" //Global bl                                  ' ListManager.UserType.blacklisted' r.user' blComment' listLen);                              Broadcast("BL"' "ADD"' r.title.Split(new char[] { ':' }' 2)[1]' listLen' blComment' r.user);                          }                      }                      break;                  case RCEvent.EventType.unblock:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("reason"' r.comment);                      message = GetMessage(5700' ref attribs);                      break;                  case RCEvent.EventType.delete:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      attribs.Add("reason"' r.comment);                      message = GetMessage(05300' ref attribs);                      break;                  case RCEvent.EventType.newuser:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("caurl"' "https://meta.wikimedia.org/wiki/Special:CentralAuth/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch = listman.MatchesList(r.user' 11);                      if (bnuMatch.Success && feedFilterThisEvent == 1)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch.matchedItem);                          attribs.Add("wwreason"' bnuMatch.matchedReason);                          message = GetMessage(5201' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5200' ref attribs);                      }                      break;                  case RCEvent.EventType.newuser2:                      attribs.Add("creator"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ccreator"' r.user);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.title);                      attribs.Add("ceditor"' r.title);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch2 = listman.MatchesList(r.user' 11);                      if (bnuMatch2.Success)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch2.matchedItem);                          attribs.Add("wwreason"' bnuMatch2.matchedReason);                          message = GetMessage(5211' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch2.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5210' ref attribs);                      }                      break;                  case RCEvent.EventType.upload:                      int uMsg = 5600;                        // Check if the edit summary matches BES                      ListMatch ubes2 = listman.MatchesList(r.comment' 20);                      if (ubes2.Success)                      {                          attribs.Add("watchword"' ubes2.matchedItem);                          attribs.Add("lmreason"' ubes2.matchedReason);                          uMsg = 95620;                      }                        // Now check if the title matches BES                      ListMatch ubes1 = listman.MatchesList(r.title' 20);                      if (ubes1.Success)                      {                          attribs.Add("watchword"' ubes1.matchedItem);                          attribs.Add("lmreason"' ubes1.matchedReason);                          uMsg = 95620;                      }                        // Check if upload is watched                      ListMatch uwa = listman.IsWatchedArticle(r.title' r.project);                      if (uwa.Success)                          uMsg = 5610;                        // If normal and uploaded by an admin' bot or whitelisted person always hide                      if ((uMsg == 5600) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                          return;                        // if normal and uploads are softhidden hide normal user and anon aswell                      if ((uMsg == 5600) && (config.feedFilterEventUpload == 2) && ((userOffset == 3) || (userOffset == 4)))                          return;                        // If our message is 95620' we might need to truncate r.comment                      if (uMsg == 95620)                      {                          if (r.comment.Length > 25)                              r.comment = r.comment.Substring(0' 23) + "...";                      }                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("uploaditem"' project.interwikiLink + r.title);                      attribs.Add("cuploaditem"' r.title);                      attribs.Add("reason"' r.comment);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(userOffset + uMsg' ref attribs);                      break;                  case RCEvent.EventType.protect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in protect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5900' ref attribs);                      break;                  case RCEvent.EventType.unprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in unprotect is fine' it's just the pagetitle                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(5901' ref attribs);                      break;                  case RCEvent.EventType.modifyprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in modifyprotect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5902' ref attribs);                      break;              }
Magic Number,CVNBot,Program,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Program.cs,ReactToRCEvent,The following statement contains a magic number: switch (r.eventtype)              {                  // This case handles:                  // - New page creations                  // - Page edits                  case RCEvent.EventType.edit:                      String diffsize;                      if (r.szdiff >= 0)                          diffsize = "+" + r.szdiff.ToString();                      else                          diffsize = r.szdiff.ToString();                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("size"' diffsize);                      attribs.Add("url"' r.url);                      attribs.Add("reason"' r.comment);                        // This block handles: New page creations                      if (r.newpage)                      {                          bool createSpecial = false;                            // New pages created by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.newBig)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5010 + userOffset' ref attribs);                          }                          else if (r.szdiff <= config.newSmall)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5020 + userOffset' ref attribs);                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5000 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Article is on watchlist                          // - Page title matches a BNA pattern                          // - Edit summary matches a BES pattern                            // Is the article on the watchlist?                          ListMatch wlm = listman.IsWatchedArticle(r.title' r.project);                          if (wlm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5030 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16301' (String)attribs["article"]));                              break;                          }                            // Does the page title match a BNA pattern?                          ListMatch eslm = listman.MatchesList(r.title' 12);                          if (eslm.Success)                          {                              // Matches BNA                              attribs.Add("watchword"' eslm.matchedItem);                              message = GetMessage(5040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' eslm.matchedItem));                              break;                          }                            // Does the edit summary match a BES pattern?                          ListMatch lm = listman.MatchesList(r.comment' 20);                          if (lm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' lm.matchedItem);                              message = GetMessage(95040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' lm.matchedItem));                              break;                          }                            // If we're still here that means                          // - the create didn't get ignored by adminlist or whitelist                          // - the create didn't match any watch patterns                          // Now' if any of the following is true' we'll must report it.                          // - Create by blacklisted user                          // - Create by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // Created by an unlisted reguser with non-special create size' ignore                          if ((userOffset == 4) && !createSpecial)                              return;                            // Else: Create had special size' so let it shown (default)' don't return!                      }                      // This block handles: Page edits                      else                      {                          bool editSpecial = false;                            // Edit by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.editBig)                          {                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5110 + userOffset' ref attribs);                              editSpecial = true;                          }                          else if (r.szdiff <= config.editBlank)                          {                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5120 + userOffset' ref attribs);                              editSpecial = true;                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5100 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Edit summary matches a BES pattern                          // - Edit blanked the page                          // - Edit replaced the page                          // - Article is on watchlist                            // Does the edit summary match a BES pattern?                          ListMatch elm = listman.MatchesList(r.comment' 20);                          if (elm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' elm.matchedItem);                              message = GetMessage(95130 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16310' r.comment' (String)attribs["article"]));                              break;                          }                            // Did the user user blank the page?                          if (project.rautosummBlank.IsMatch(r.comment))                          {                              message = GetMessage(96010 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16311' (String)attribs["article"]));                              break;                          }                            Match rplm = project.rautosummReplace.Match(r.comment);                          if (rplm.Success)                          {                              // The user replaced the page.                              try                              {                                  attribs.Add("profanity"' rplm.Groups["item1"].Captures[0].Value);                                  message = GetMessage(96020 + userOffset' ref attribs);                              }                              catch (ArgumentOutOfRangeException)                              {                                  // This wiki probably doesn't have a profanity attribute                                  message = GetMessage(96030 + userOffset' ref attribs);                              }                              break;                          }                            // Is the article on the watchlist?                          ListMatch welm = listman.IsWatchedArticle(r.title' r.project);                          if (welm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5130 + userOffset' ref attribs);                              break;                          }                            // If we're still here that means                          // - the edit didn't get ignored by adminlist or whitelist                          // - the edit didn't match any watch patterns                          // Now' if any of the following is true' we must still report it.                          // - Edit by blacklisted user                          // - Edit by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // If nothing special about the edit' return to ignore                          if (!editSpecial)                              return;                      }                      break;                  case RCEvent.EventType.move:                      // if moves are softhidden hide moves by admin' bot or whitelist                      if ((config.feedFilterEventMove == 2) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                      {                          return;                      }                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("fromname"' project.interwikiLink + r.title);                      attribs.Add("cfromname"' r.title);                      attribs.Add("toname"' project.interwikiLink + r.movedTo);                      attribs.Add("ctoname"' r.movedTo);                      attribs.Add("url"' r.blockLength); //The blockLength field stores the moveFrom URL                      attribs.Add("reason"' r.comment);                      message = GetMessage(5500 + userOffset' ref attribs);                      break;                  case RCEvent.EventType.block:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.title.Split(new char[] { ':' }' 2)[1]));                      attribs.Add("length"' r.blockLength);                      attribs.Add("reason"' r.comment);                      message = GetMessage(5400' ref attribs);                      //If the blocked user (r.title) isn't botlisted' add to blacklist                      if (listman.ClassifyEditor(r.title.Split(new char[] { ':' }' 2)[1]' r.project) != ListManager.UserType.bot)                      {                          //If this isn't an indefinite/infinite block' add to blacklist                          if ((r.blockLength.ToLower() != "indefinite") && (r.blockLength.ToLower() != "infinite"))                          {                                                               // 2'678'400 seconds = 744 hours = 31 days                              int listLen = Convert.ToInt32(CVNBotUtils.ParseDateTimeLength(r.blockLength' 2678400) * 2.5);                              string blComment = "Autoblacklist: " + r.comment + " on " + r.project;                              message += "\n" + listman.AddUserToList(r.title.Split(new char[] { ':' }' 2)[1]' "" //Global bl                                  ' ListManager.UserType.blacklisted' r.user' blComment' listLen);                              Broadcast("BL"' "ADD"' r.title.Split(new char[] { ':' }' 2)[1]' listLen' blComment' r.user);                          }                      }                      break;                  case RCEvent.EventType.unblock:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("reason"' r.comment);                      message = GetMessage(5700' ref attribs);                      break;                  case RCEvent.EventType.delete:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      attribs.Add("reason"' r.comment);                      message = GetMessage(05300' ref attribs);                      break;                  case RCEvent.EventType.newuser:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("caurl"' "https://meta.wikimedia.org/wiki/Special:CentralAuth/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch = listman.MatchesList(r.user' 11);                      if (bnuMatch.Success && feedFilterThisEvent == 1)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch.matchedItem);                          attribs.Add("wwreason"' bnuMatch.matchedReason);                          message = GetMessage(5201' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5200' ref attribs);                      }                      break;                  case RCEvent.EventType.newuser2:                      attribs.Add("creator"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ccreator"' r.user);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.title);                      attribs.Add("ceditor"' r.title);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch2 = listman.MatchesList(r.user' 11);                      if (bnuMatch2.Success)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch2.matchedItem);                          attribs.Add("wwreason"' bnuMatch2.matchedReason);                          message = GetMessage(5211' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch2.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5210' ref attribs);                      }                      break;                  case RCEvent.EventType.upload:                      int uMsg = 5600;                        // Check if the edit summary matches BES                      ListMatch ubes2 = listman.MatchesList(r.comment' 20);                      if (ubes2.Success)                      {                          attribs.Add("watchword"' ubes2.matchedItem);                          attribs.Add("lmreason"' ubes2.matchedReason);                          uMsg = 95620;                      }                        // Now check if the title matches BES                      ListMatch ubes1 = listman.MatchesList(r.title' 20);                      if (ubes1.Success)                      {                          attribs.Add("watchword"' ubes1.matchedItem);                          attribs.Add("lmreason"' ubes1.matchedReason);                          uMsg = 95620;                      }                        // Check if upload is watched                      ListMatch uwa = listman.IsWatchedArticle(r.title' r.project);                      if (uwa.Success)                          uMsg = 5610;                        // If normal and uploaded by an admin' bot or whitelisted person always hide                      if ((uMsg == 5600) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                          return;                        // if normal and uploads are softhidden hide normal user and anon aswell                      if ((uMsg == 5600) && (config.feedFilterEventUpload == 2) && ((userOffset == 3) || (userOffset == 4)))                          return;                        // If our message is 95620' we might need to truncate r.comment                      if (uMsg == 95620)                      {                          if (r.comment.Length > 25)                              r.comment = r.comment.Substring(0' 23) + "...";                      }                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("uploaditem"' project.interwikiLink + r.title);                      attribs.Add("cuploaditem"' r.title);                      attribs.Add("reason"' r.comment);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(userOffset + uMsg' ref attribs);                      break;                  case RCEvent.EventType.protect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in protect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5900' ref attribs);                      break;                  case RCEvent.EventType.unprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in unprotect is fine' it's just the pagetitle                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(5901' ref attribs);                      break;                  case RCEvent.EventType.modifyprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in modifyprotect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5902' ref attribs);                      break;              }
Magic Number,CVNBot,Program,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Program.cs,ReactToRCEvent,The following statement contains a magic number: switch (r.eventtype)              {                  // This case handles:                  // - New page creations                  // - Page edits                  case RCEvent.EventType.edit:                      String diffsize;                      if (r.szdiff >= 0)                          diffsize = "+" + r.szdiff.ToString();                      else                          diffsize = r.szdiff.ToString();                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("size"' diffsize);                      attribs.Add("url"' r.url);                      attribs.Add("reason"' r.comment);                        // This block handles: New page creations                      if (r.newpage)                      {                          bool createSpecial = false;                            // New pages created by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.newBig)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5010 + userOffset' ref attribs);                          }                          else if (r.szdiff <= config.newSmall)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5020 + userOffset' ref attribs);                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5000 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Article is on watchlist                          // - Page title matches a BNA pattern                          // - Edit summary matches a BES pattern                            // Is the article on the watchlist?                          ListMatch wlm = listman.IsWatchedArticle(r.title' r.project);                          if (wlm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5030 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16301' (String)attribs["article"]));                              break;                          }                            // Does the page title match a BNA pattern?                          ListMatch eslm = listman.MatchesList(r.title' 12);                          if (eslm.Success)                          {                              // Matches BNA                              attribs.Add("watchword"' eslm.matchedItem);                              message = GetMessage(5040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' eslm.matchedItem));                              break;                          }                            // Does the edit summary match a BES pattern?                          ListMatch lm = listman.MatchesList(r.comment' 20);                          if (lm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' lm.matchedItem);                              message = GetMessage(95040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' lm.matchedItem));                              break;                          }                            // If we're still here that means                          // - the create didn't get ignored by adminlist or whitelist                          // - the create didn't match any watch patterns                          // Now' if any of the following is true' we'll must report it.                          // - Create by blacklisted user                          // - Create by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // Created by an unlisted reguser with non-special create size' ignore                          if ((userOffset == 4) && !createSpecial)                              return;                            // Else: Create had special size' so let it shown (default)' don't return!                      }                      // This block handles: Page edits                      else                      {                          bool editSpecial = false;                            // Edit by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.editBig)                          {                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5110 + userOffset' ref attribs);                              editSpecial = true;                          }                          else if (r.szdiff <= config.editBlank)                          {                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5120 + userOffset' ref attribs);                              editSpecial = true;                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5100 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Edit summary matches a BES pattern                          // - Edit blanked the page                          // - Edit replaced the page                          // - Article is on watchlist                            // Does the edit summary match a BES pattern?                          ListMatch elm = listman.MatchesList(r.comment' 20);                          if (elm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' elm.matchedItem);                              message = GetMessage(95130 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16310' r.comment' (String)attribs["article"]));                              break;                          }                            // Did the user user blank the page?                          if (project.rautosummBlank.IsMatch(r.comment))                          {                              message = GetMessage(96010 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16311' (String)attribs["article"]));                              break;                          }                            Match rplm = project.rautosummReplace.Match(r.comment);                          if (rplm.Success)                          {                              // The user replaced the page.                              try                              {                                  attribs.Add("profanity"' rplm.Groups["item1"].Captures[0].Value);                                  message = GetMessage(96020 + userOffset' ref attribs);                              }                              catch (ArgumentOutOfRangeException)                              {                                  // This wiki probably doesn't have a profanity attribute                                  message = GetMessage(96030 + userOffset' ref attribs);                              }                              break;                          }                            // Is the article on the watchlist?                          ListMatch welm = listman.IsWatchedArticle(r.title' r.project);                          if (welm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5130 + userOffset' ref attribs);                              break;                          }                            // If we're still here that means                          // - the edit didn't get ignored by adminlist or whitelist                          // - the edit didn't match any watch patterns                          // Now' if any of the following is true' we must still report it.                          // - Edit by blacklisted user                          // - Edit by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // If nothing special about the edit' return to ignore                          if (!editSpecial)                              return;                      }                      break;                  case RCEvent.EventType.move:                      // if moves are softhidden hide moves by admin' bot or whitelist                      if ((config.feedFilterEventMove == 2) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                      {                          return;                      }                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("fromname"' project.interwikiLink + r.title);                      attribs.Add("cfromname"' r.title);                      attribs.Add("toname"' project.interwikiLink + r.movedTo);                      attribs.Add("ctoname"' r.movedTo);                      attribs.Add("url"' r.blockLength); //The blockLength field stores the moveFrom URL                      attribs.Add("reason"' r.comment);                      message = GetMessage(5500 + userOffset' ref attribs);                      break;                  case RCEvent.EventType.block:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.title.Split(new char[] { ':' }' 2)[1]));                      attribs.Add("length"' r.blockLength);                      attribs.Add("reason"' r.comment);                      message = GetMessage(5400' ref attribs);                      //If the blocked user (r.title) isn't botlisted' add to blacklist                      if (listman.ClassifyEditor(r.title.Split(new char[] { ':' }' 2)[1]' r.project) != ListManager.UserType.bot)                      {                          //If this isn't an indefinite/infinite block' add to blacklist                          if ((r.blockLength.ToLower() != "indefinite") && (r.blockLength.ToLower() != "infinite"))                          {                                                               // 2'678'400 seconds = 744 hours = 31 days                              int listLen = Convert.ToInt32(CVNBotUtils.ParseDateTimeLength(r.blockLength' 2678400) * 2.5);                              string blComment = "Autoblacklist: " + r.comment + " on " + r.project;                              message += "\n" + listman.AddUserToList(r.title.Split(new char[] { ':' }' 2)[1]' "" //Global bl                                  ' ListManager.UserType.blacklisted' r.user' blComment' listLen);                              Broadcast("BL"' "ADD"' r.title.Split(new char[] { ':' }' 2)[1]' listLen' blComment' r.user);                          }                      }                      break;                  case RCEvent.EventType.unblock:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("reason"' r.comment);                      message = GetMessage(5700' ref attribs);                      break;                  case RCEvent.EventType.delete:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      attribs.Add("reason"' r.comment);                      message = GetMessage(05300' ref attribs);                      break;                  case RCEvent.EventType.newuser:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("caurl"' "https://meta.wikimedia.org/wiki/Special:CentralAuth/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch = listman.MatchesList(r.user' 11);                      if (bnuMatch.Success && feedFilterThisEvent == 1)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch.matchedItem);                          attribs.Add("wwreason"' bnuMatch.matchedReason);                          message = GetMessage(5201' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5200' ref attribs);                      }                      break;                  case RCEvent.EventType.newuser2:                      attribs.Add("creator"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ccreator"' r.user);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.title);                      attribs.Add("ceditor"' r.title);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch2 = listman.MatchesList(r.user' 11);                      if (bnuMatch2.Success)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch2.matchedItem);                          attribs.Add("wwreason"' bnuMatch2.matchedReason);                          message = GetMessage(5211' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch2.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5210' ref attribs);                      }                      break;                  case RCEvent.EventType.upload:                      int uMsg = 5600;                        // Check if the edit summary matches BES                      ListMatch ubes2 = listman.MatchesList(r.comment' 20);                      if (ubes2.Success)                      {                          attribs.Add("watchword"' ubes2.matchedItem);                          attribs.Add("lmreason"' ubes2.matchedReason);                          uMsg = 95620;                      }                        // Now check if the title matches BES                      ListMatch ubes1 = listman.MatchesList(r.title' 20);                      if (ubes1.Success)                      {                          attribs.Add("watchword"' ubes1.matchedItem);                          attribs.Add("lmreason"' ubes1.matchedReason);                          uMsg = 95620;                      }                        // Check if upload is watched                      ListMatch uwa = listman.IsWatchedArticle(r.title' r.project);                      if (uwa.Success)                          uMsg = 5610;                        // If normal and uploaded by an admin' bot or whitelisted person always hide                      if ((uMsg == 5600) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                          return;                        // if normal and uploads are softhidden hide normal user and anon aswell                      if ((uMsg == 5600) && (config.feedFilterEventUpload == 2) && ((userOffset == 3) || (userOffset == 4)))                          return;                        // If our message is 95620' we might need to truncate r.comment                      if (uMsg == 95620)                      {                          if (r.comment.Length > 25)                              r.comment = r.comment.Substring(0' 23) + "...";                      }                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("uploaditem"' project.interwikiLink + r.title);                      attribs.Add("cuploaditem"' r.title);                      attribs.Add("reason"' r.comment);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(userOffset + uMsg' ref attribs);                      break;                  case RCEvent.EventType.protect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in protect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5900' ref attribs);                      break;                  case RCEvent.EventType.unprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in unprotect is fine' it's just the pagetitle                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(5901' ref attribs);                      break;                  case RCEvent.EventType.modifyprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in modifyprotect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5902' ref attribs);                      break;              }
Magic Number,CVNBot,Program,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Program.cs,ReactToRCEvent,The following statement contains a magic number: switch (r.eventtype)              {                  // This case handles:                  // - New page creations                  // - Page edits                  case RCEvent.EventType.edit:                      String diffsize;                      if (r.szdiff >= 0)                          diffsize = "+" + r.szdiff.ToString();                      else                          diffsize = r.szdiff.ToString();                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("size"' diffsize);                      attribs.Add("url"' r.url);                      attribs.Add("reason"' r.comment);                        // This block handles: New page creations                      if (r.newpage)                      {                          bool createSpecial = false;                            // New pages created by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.newBig)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5010 + userOffset' ref attribs);                          }                          else if (r.szdiff <= config.newSmall)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5020 + userOffset' ref attribs);                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5000 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Article is on watchlist                          // - Page title matches a BNA pattern                          // - Edit summary matches a BES pattern                            // Is the article on the watchlist?                          ListMatch wlm = listman.IsWatchedArticle(r.title' r.project);                          if (wlm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5030 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16301' (String)attribs["article"]));                              break;                          }                            // Does the page title match a BNA pattern?                          ListMatch eslm = listman.MatchesList(r.title' 12);                          if (eslm.Success)                          {                              // Matches BNA                              attribs.Add("watchword"' eslm.matchedItem);                              message = GetMessage(5040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' eslm.matchedItem));                              break;                          }                            // Does the edit summary match a BES pattern?                          ListMatch lm = listman.MatchesList(r.comment' 20);                          if (lm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' lm.matchedItem);                              message = GetMessage(95040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' lm.matchedItem));                              break;                          }                            // If we're still here that means                          // - the create didn't get ignored by adminlist or whitelist                          // - the create didn't match any watch patterns                          // Now' if any of the following is true' we'll must report it.                          // - Create by blacklisted user                          // - Create by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // Created by an unlisted reguser with non-special create size' ignore                          if ((userOffset == 4) && !createSpecial)                              return;                            // Else: Create had special size' so let it shown (default)' don't return!                      }                      // This block handles: Page edits                      else                      {                          bool editSpecial = false;                            // Edit by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.editBig)                          {                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5110 + userOffset' ref attribs);                              editSpecial = true;                          }                          else if (r.szdiff <= config.editBlank)                          {                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5120 + userOffset' ref attribs);                              editSpecial = true;                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5100 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Edit summary matches a BES pattern                          // - Edit blanked the page                          // - Edit replaced the page                          // - Article is on watchlist                            // Does the edit summary match a BES pattern?                          ListMatch elm = listman.MatchesList(r.comment' 20);                          if (elm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' elm.matchedItem);                              message = GetMessage(95130 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16310' r.comment' (String)attribs["article"]));                              break;                          }                            // Did the user user blank the page?                          if (project.rautosummBlank.IsMatch(r.comment))                          {                              message = GetMessage(96010 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16311' (String)attribs["article"]));                              break;                          }                            Match rplm = project.rautosummReplace.Match(r.comment);                          if (rplm.Success)                          {                              // The user replaced the page.                              try                              {                                  attribs.Add("profanity"' rplm.Groups["item1"].Captures[0].Value);                                  message = GetMessage(96020 + userOffset' ref attribs);                              }                              catch (ArgumentOutOfRangeException)                              {                                  // This wiki probably doesn't have a profanity attribute                                  message = GetMessage(96030 + userOffset' ref attribs);                              }                              break;                          }                            // Is the article on the watchlist?                          ListMatch welm = listman.IsWatchedArticle(r.title' r.project);                          if (welm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5130 + userOffset' ref attribs);                              break;                          }                            // If we're still here that means                          // - the edit didn't get ignored by adminlist or whitelist                          // - the edit didn't match any watch patterns                          // Now' if any of the following is true' we must still report it.                          // - Edit by blacklisted user                          // - Edit by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // If nothing special about the edit' return to ignore                          if (!editSpecial)                              return;                      }                      break;                  case RCEvent.EventType.move:                      // if moves are softhidden hide moves by admin' bot or whitelist                      if ((config.feedFilterEventMove == 2) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                      {                          return;                      }                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("fromname"' project.interwikiLink + r.title);                      attribs.Add("cfromname"' r.title);                      attribs.Add("toname"' project.interwikiLink + r.movedTo);                      attribs.Add("ctoname"' r.movedTo);                      attribs.Add("url"' r.blockLength); //The blockLength field stores the moveFrom URL                      attribs.Add("reason"' r.comment);                      message = GetMessage(5500 + userOffset' ref attribs);                      break;                  case RCEvent.EventType.block:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.title.Split(new char[] { ':' }' 2)[1]));                      attribs.Add("length"' r.blockLength);                      attribs.Add("reason"' r.comment);                      message = GetMessage(5400' ref attribs);                      //If the blocked user (r.title) isn't botlisted' add to blacklist                      if (listman.ClassifyEditor(r.title.Split(new char[] { ':' }' 2)[1]' r.project) != ListManager.UserType.bot)                      {                          //If this isn't an indefinite/infinite block' add to blacklist                          if ((r.blockLength.ToLower() != "indefinite") && (r.blockLength.ToLower() != "infinite"))                          {                                                               // 2'678'400 seconds = 744 hours = 31 days                              int listLen = Convert.ToInt32(CVNBotUtils.ParseDateTimeLength(r.blockLength' 2678400) * 2.5);                              string blComment = "Autoblacklist: " + r.comment + " on " + r.project;                              message += "\n" + listman.AddUserToList(r.title.Split(new char[] { ':' }' 2)[1]' "" //Global bl                                  ' ListManager.UserType.blacklisted' r.user' blComment' listLen);                              Broadcast("BL"' "ADD"' r.title.Split(new char[] { ':' }' 2)[1]' listLen' blComment' r.user);                          }                      }                      break;                  case RCEvent.EventType.unblock:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("reason"' r.comment);                      message = GetMessage(5700' ref attribs);                      break;                  case RCEvent.EventType.delete:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      attribs.Add("reason"' r.comment);                      message = GetMessage(05300' ref attribs);                      break;                  case RCEvent.EventType.newuser:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("caurl"' "https://meta.wikimedia.org/wiki/Special:CentralAuth/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch = listman.MatchesList(r.user' 11);                      if (bnuMatch.Success && feedFilterThisEvent == 1)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch.matchedItem);                          attribs.Add("wwreason"' bnuMatch.matchedReason);                          message = GetMessage(5201' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5200' ref attribs);                      }                      break;                  case RCEvent.EventType.newuser2:                      attribs.Add("creator"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ccreator"' r.user);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.title);                      attribs.Add("ceditor"' r.title);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch2 = listman.MatchesList(r.user' 11);                      if (bnuMatch2.Success)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch2.matchedItem);                          attribs.Add("wwreason"' bnuMatch2.matchedReason);                          message = GetMessage(5211' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch2.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5210' ref attribs);                      }                      break;                  case RCEvent.EventType.upload:                      int uMsg = 5600;                        // Check if the edit summary matches BES                      ListMatch ubes2 = listman.MatchesList(r.comment' 20);                      if (ubes2.Success)                      {                          attribs.Add("watchword"' ubes2.matchedItem);                          attribs.Add("lmreason"' ubes2.matchedReason);                          uMsg = 95620;                      }                        // Now check if the title matches BES                      ListMatch ubes1 = listman.MatchesList(r.title' 20);                      if (ubes1.Success)                      {                          attribs.Add("watchword"' ubes1.matchedItem);                          attribs.Add("lmreason"' ubes1.matchedReason);                          uMsg = 95620;                      }                        // Check if upload is watched                      ListMatch uwa = listman.IsWatchedArticle(r.title' r.project);                      if (uwa.Success)                          uMsg = 5610;                        // If normal and uploaded by an admin' bot or whitelisted person always hide                      if ((uMsg == 5600) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                          return;                        // if normal and uploads are softhidden hide normal user and anon aswell                      if ((uMsg == 5600) && (config.feedFilterEventUpload == 2) && ((userOffset == 3) || (userOffset == 4)))                          return;                        // If our message is 95620' we might need to truncate r.comment                      if (uMsg == 95620)                      {                          if (r.comment.Length > 25)                              r.comment = r.comment.Substring(0' 23) + "...";                      }                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("uploaditem"' project.interwikiLink + r.title);                      attribs.Add("cuploaditem"' r.title);                      attribs.Add("reason"' r.comment);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(userOffset + uMsg' ref attribs);                      break;                  case RCEvent.EventType.protect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in protect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5900' ref attribs);                      break;                  case RCEvent.EventType.unprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in unprotect is fine' it's just the pagetitle                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(5901' ref attribs);                      break;                  case RCEvent.EventType.modifyprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in modifyprotect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5902' ref attribs);                      break;              }
Magic Number,CVNBot,Program,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Program.cs,ReactToRCEvent,The following statement contains a magic number: switch (r.eventtype)              {                  // This case handles:                  // - New page creations                  // - Page edits                  case RCEvent.EventType.edit:                      String diffsize;                      if (r.szdiff >= 0)                          diffsize = "+" + r.szdiff.ToString();                      else                          diffsize = r.szdiff.ToString();                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("size"' diffsize);                      attribs.Add("url"' r.url);                      attribs.Add("reason"' r.comment);                        // This block handles: New page creations                      if (r.newpage)                      {                          bool createSpecial = false;                            // New pages created by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.newBig)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5010 + userOffset' ref attribs);                          }                          else if (r.szdiff <= config.newSmall)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5020 + userOffset' ref attribs);                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5000 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Article is on watchlist                          // - Page title matches a BNA pattern                          // - Edit summary matches a BES pattern                            // Is the article on the watchlist?                          ListMatch wlm = listman.IsWatchedArticle(r.title' r.project);                          if (wlm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5030 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16301' (String)attribs["article"]));                              break;                          }                            // Does the page title match a BNA pattern?                          ListMatch eslm = listman.MatchesList(r.title' 12);                          if (eslm.Success)                          {                              // Matches BNA                              attribs.Add("watchword"' eslm.matchedItem);                              message = GetMessage(5040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' eslm.matchedItem));                              break;                          }                            // Does the edit summary match a BES pattern?                          ListMatch lm = listman.MatchesList(r.comment' 20);                          if (lm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' lm.matchedItem);                              message = GetMessage(95040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' lm.matchedItem));                              break;                          }                            // If we're still here that means                          // - the create didn't get ignored by adminlist or whitelist                          // - the create didn't match any watch patterns                          // Now' if any of the following is true' we'll must report it.                          // - Create by blacklisted user                          // - Create by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // Created by an unlisted reguser with non-special create size' ignore                          if ((userOffset == 4) && !createSpecial)                              return;                            // Else: Create had special size' so let it shown (default)' don't return!                      }                      // This block handles: Page edits                      else                      {                          bool editSpecial = false;                            // Edit by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.editBig)                          {                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5110 + userOffset' ref attribs);                              editSpecial = true;                          }                          else if (r.szdiff <= config.editBlank)                          {                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5120 + userOffset' ref attribs);                              editSpecial = true;                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5100 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Edit summary matches a BES pattern                          // - Edit blanked the page                          // - Edit replaced the page                          // - Article is on watchlist                            // Does the edit summary match a BES pattern?                          ListMatch elm = listman.MatchesList(r.comment' 20);                          if (elm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' elm.matchedItem);                              message = GetMessage(95130 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16310' r.comment' (String)attribs["article"]));                              break;                          }                            // Did the user user blank the page?                          if (project.rautosummBlank.IsMatch(r.comment))                          {                              message = GetMessage(96010 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16311' (String)attribs["article"]));                              break;                          }                            Match rplm = project.rautosummReplace.Match(r.comment);                          if (rplm.Success)                          {                              // The user replaced the page.                              try                              {                                  attribs.Add("profanity"' rplm.Groups["item1"].Captures[0].Value);                                  message = GetMessage(96020 + userOffset' ref attribs);                              }                              catch (ArgumentOutOfRangeException)                              {                                  // This wiki probably doesn't have a profanity attribute                                  message = GetMessage(96030 + userOffset' ref attribs);                              }                              break;                          }                            // Is the article on the watchlist?                          ListMatch welm = listman.IsWatchedArticle(r.title' r.project);                          if (welm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5130 + userOffset' ref attribs);                              break;                          }                            // If we're still here that means                          // - the edit didn't get ignored by adminlist or whitelist                          // - the edit didn't match any watch patterns                          // Now' if any of the following is true' we must still report it.                          // - Edit by blacklisted user                          // - Edit by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // If nothing special about the edit' return to ignore                          if (!editSpecial)                              return;                      }                      break;                  case RCEvent.EventType.move:                      // if moves are softhidden hide moves by admin' bot or whitelist                      if ((config.feedFilterEventMove == 2) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                      {                          return;                      }                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("fromname"' project.interwikiLink + r.title);                      attribs.Add("cfromname"' r.title);                      attribs.Add("toname"' project.interwikiLink + r.movedTo);                      attribs.Add("ctoname"' r.movedTo);                      attribs.Add("url"' r.blockLength); //The blockLength field stores the moveFrom URL                      attribs.Add("reason"' r.comment);                      message = GetMessage(5500 + userOffset' ref attribs);                      break;                  case RCEvent.EventType.block:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.title.Split(new char[] { ':' }' 2)[1]));                      attribs.Add("length"' r.blockLength);                      attribs.Add("reason"' r.comment);                      message = GetMessage(5400' ref attribs);                      //If the blocked user (r.title) isn't botlisted' add to blacklist                      if (listman.ClassifyEditor(r.title.Split(new char[] { ':' }' 2)[1]' r.project) != ListManager.UserType.bot)                      {                          //If this isn't an indefinite/infinite block' add to blacklist                          if ((r.blockLength.ToLower() != "indefinite") && (r.blockLength.ToLower() != "infinite"))                          {                                                               // 2'678'400 seconds = 744 hours = 31 days                              int listLen = Convert.ToInt32(CVNBotUtils.ParseDateTimeLength(r.blockLength' 2678400) * 2.5);                              string blComment = "Autoblacklist: " + r.comment + " on " + r.project;                              message += "\n" + listman.AddUserToList(r.title.Split(new char[] { ':' }' 2)[1]' "" //Global bl                                  ' ListManager.UserType.blacklisted' r.user' blComment' listLen);                              Broadcast("BL"' "ADD"' r.title.Split(new char[] { ':' }' 2)[1]' listLen' blComment' r.user);                          }                      }                      break;                  case RCEvent.EventType.unblock:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("reason"' r.comment);                      message = GetMessage(5700' ref attribs);                      break;                  case RCEvent.EventType.delete:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      attribs.Add("reason"' r.comment);                      message = GetMessage(05300' ref attribs);                      break;                  case RCEvent.EventType.newuser:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("caurl"' "https://meta.wikimedia.org/wiki/Special:CentralAuth/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch = listman.MatchesList(r.user' 11);                      if (bnuMatch.Success && feedFilterThisEvent == 1)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch.matchedItem);                          attribs.Add("wwreason"' bnuMatch.matchedReason);                          message = GetMessage(5201' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5200' ref attribs);                      }                      break;                  case RCEvent.EventType.newuser2:                      attribs.Add("creator"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ccreator"' r.user);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.title);                      attribs.Add("ceditor"' r.title);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch2 = listman.MatchesList(r.user' 11);                      if (bnuMatch2.Success)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch2.matchedItem);                          attribs.Add("wwreason"' bnuMatch2.matchedReason);                          message = GetMessage(5211' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch2.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5210' ref attribs);                      }                      break;                  case RCEvent.EventType.upload:                      int uMsg = 5600;                        // Check if the edit summary matches BES                      ListMatch ubes2 = listman.MatchesList(r.comment' 20);                      if (ubes2.Success)                      {                          attribs.Add("watchword"' ubes2.matchedItem);                          attribs.Add("lmreason"' ubes2.matchedReason);                          uMsg = 95620;                      }                        // Now check if the title matches BES                      ListMatch ubes1 = listman.MatchesList(r.title' 20);                      if (ubes1.Success)                      {                          attribs.Add("watchword"' ubes1.matchedItem);                          attribs.Add("lmreason"' ubes1.matchedReason);                          uMsg = 95620;                      }                        // Check if upload is watched                      ListMatch uwa = listman.IsWatchedArticle(r.title' r.project);                      if (uwa.Success)                          uMsg = 5610;                        // If normal and uploaded by an admin' bot or whitelisted person always hide                      if ((uMsg == 5600) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                          return;                        // if normal and uploads are softhidden hide normal user and anon aswell                      if ((uMsg == 5600) && (config.feedFilterEventUpload == 2) && ((userOffset == 3) || (userOffset == 4)))                          return;                        // If our message is 95620' we might need to truncate r.comment                      if (uMsg == 95620)                      {                          if (r.comment.Length > 25)                              r.comment = r.comment.Substring(0' 23) + "...";                      }                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("uploaditem"' project.interwikiLink + r.title);                      attribs.Add("cuploaditem"' r.title);                      attribs.Add("reason"' r.comment);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(userOffset + uMsg' ref attribs);                      break;                  case RCEvent.EventType.protect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in protect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5900' ref attribs);                      break;                  case RCEvent.EventType.unprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in unprotect is fine' it's just the pagetitle                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(5901' ref attribs);                      break;                  case RCEvent.EventType.modifyprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in modifyprotect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5902' ref attribs);                      break;              }
Magic Number,CVNBot,Program,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Program.cs,ReactToRCEvent,The following statement contains a magic number: switch (r.eventtype)              {                  // This case handles:                  // - New page creations                  // - Page edits                  case RCEvent.EventType.edit:                      String diffsize;                      if (r.szdiff >= 0)                          diffsize = "+" + r.szdiff.ToString();                      else                          diffsize = r.szdiff.ToString();                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("size"' diffsize);                      attribs.Add("url"' r.url);                      attribs.Add("reason"' r.comment);                        // This block handles: New page creations                      if (r.newpage)                      {                          bool createSpecial = false;                            // New pages created by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.newBig)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5010 + userOffset' ref attribs);                          }                          else if (r.szdiff <= config.newSmall)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5020 + userOffset' ref attribs);                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5000 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Article is on watchlist                          // - Page title matches a BNA pattern                          // - Edit summary matches a BES pattern                            // Is the article on the watchlist?                          ListMatch wlm = listman.IsWatchedArticle(r.title' r.project);                          if (wlm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5030 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16301' (String)attribs["article"]));                              break;                          }                            // Does the page title match a BNA pattern?                          ListMatch eslm = listman.MatchesList(r.title' 12);                          if (eslm.Success)                          {                              // Matches BNA                              attribs.Add("watchword"' eslm.matchedItem);                              message = GetMessage(5040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' eslm.matchedItem));                              break;                          }                            // Does the edit summary match a BES pattern?                          ListMatch lm = listman.MatchesList(r.comment' 20);                          if (lm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' lm.matchedItem);                              message = GetMessage(95040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' lm.matchedItem));                              break;                          }                            // If we're still here that means                          // - the create didn't get ignored by adminlist or whitelist                          // - the create didn't match any watch patterns                          // Now' if any of the following is true' we'll must report it.                          // - Create by blacklisted user                          // - Create by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // Created by an unlisted reguser with non-special create size' ignore                          if ((userOffset == 4) && !createSpecial)                              return;                            // Else: Create had special size' so let it shown (default)' don't return!                      }                      // This block handles: Page edits                      else                      {                          bool editSpecial = false;                            // Edit by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.editBig)                          {                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5110 + userOffset' ref attribs);                              editSpecial = true;                          }                          else if (r.szdiff <= config.editBlank)                          {                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5120 + userOffset' ref attribs);                              editSpecial = true;                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5100 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Edit summary matches a BES pattern                          // - Edit blanked the page                          // - Edit replaced the page                          // - Article is on watchlist                            // Does the edit summary match a BES pattern?                          ListMatch elm = listman.MatchesList(r.comment' 20);                          if (elm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' elm.matchedItem);                              message = GetMessage(95130 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16310' r.comment' (String)attribs["article"]));                              break;                          }                            // Did the user user blank the page?                          if (project.rautosummBlank.IsMatch(r.comment))                          {                              message = GetMessage(96010 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16311' (String)attribs["article"]));                              break;                          }                            Match rplm = project.rautosummReplace.Match(r.comment);                          if (rplm.Success)                          {                              // The user replaced the page.                              try                              {                                  attribs.Add("profanity"' rplm.Groups["item1"].Captures[0].Value);                                  message = GetMessage(96020 + userOffset' ref attribs);                              }                              catch (ArgumentOutOfRangeException)                              {                                  // This wiki probably doesn't have a profanity attribute                                  message = GetMessage(96030 + userOffset' ref attribs);                              }                              break;                          }                            // Is the article on the watchlist?                          ListMatch welm = listman.IsWatchedArticle(r.title' r.project);                          if (welm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5130 + userOffset' ref attribs);                              break;                          }                            // If we're still here that means                          // - the edit didn't get ignored by adminlist or whitelist                          // - the edit didn't match any watch patterns                          // Now' if any of the following is true' we must still report it.                          // - Edit by blacklisted user                          // - Edit by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // If nothing special about the edit' return to ignore                          if (!editSpecial)                              return;                      }                      break;                  case RCEvent.EventType.move:                      // if moves are softhidden hide moves by admin' bot or whitelist                      if ((config.feedFilterEventMove == 2) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                      {                          return;                      }                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("fromname"' project.interwikiLink + r.title);                      attribs.Add("cfromname"' r.title);                      attribs.Add("toname"' project.interwikiLink + r.movedTo);                      attribs.Add("ctoname"' r.movedTo);                      attribs.Add("url"' r.blockLength); //The blockLength field stores the moveFrom URL                      attribs.Add("reason"' r.comment);                      message = GetMessage(5500 + userOffset' ref attribs);                      break;                  case RCEvent.EventType.block:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.title.Split(new char[] { ':' }' 2)[1]));                      attribs.Add("length"' r.blockLength);                      attribs.Add("reason"' r.comment);                      message = GetMessage(5400' ref attribs);                      //If the blocked user (r.title) isn't botlisted' add to blacklist                      if (listman.ClassifyEditor(r.title.Split(new char[] { ':' }' 2)[1]' r.project) != ListManager.UserType.bot)                      {                          //If this isn't an indefinite/infinite block' add to blacklist                          if ((r.blockLength.ToLower() != "indefinite") && (r.blockLength.ToLower() != "infinite"))                          {                                                               // 2'678'400 seconds = 744 hours = 31 days                              int listLen = Convert.ToInt32(CVNBotUtils.ParseDateTimeLength(r.blockLength' 2678400) * 2.5);                              string blComment = "Autoblacklist: " + r.comment + " on " + r.project;                              message += "\n" + listman.AddUserToList(r.title.Split(new char[] { ':' }' 2)[1]' "" //Global bl                                  ' ListManager.UserType.blacklisted' r.user' blComment' listLen);                              Broadcast("BL"' "ADD"' r.title.Split(new char[] { ':' }' 2)[1]' listLen' blComment' r.user);                          }                      }                      break;                  case RCEvent.EventType.unblock:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("reason"' r.comment);                      message = GetMessage(5700' ref attribs);                      break;                  case RCEvent.EventType.delete:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      attribs.Add("reason"' r.comment);                      message = GetMessage(05300' ref attribs);                      break;                  case RCEvent.EventType.newuser:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("caurl"' "https://meta.wikimedia.org/wiki/Special:CentralAuth/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch = listman.MatchesList(r.user' 11);                      if (bnuMatch.Success && feedFilterThisEvent == 1)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch.matchedItem);                          attribs.Add("wwreason"' bnuMatch.matchedReason);                          message = GetMessage(5201' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5200' ref attribs);                      }                      break;                  case RCEvent.EventType.newuser2:                      attribs.Add("creator"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ccreator"' r.user);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.title);                      attribs.Add("ceditor"' r.title);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch2 = listman.MatchesList(r.user' 11);                      if (bnuMatch2.Success)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch2.matchedItem);                          attribs.Add("wwreason"' bnuMatch2.matchedReason);                          message = GetMessage(5211' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch2.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5210' ref attribs);                      }                      break;                  case RCEvent.EventType.upload:                      int uMsg = 5600;                        // Check if the edit summary matches BES                      ListMatch ubes2 = listman.MatchesList(r.comment' 20);                      if (ubes2.Success)                      {                          attribs.Add("watchword"' ubes2.matchedItem);                          attribs.Add("lmreason"' ubes2.matchedReason);                          uMsg = 95620;                      }                        // Now check if the title matches BES                      ListMatch ubes1 = listman.MatchesList(r.title' 20);                      if (ubes1.Success)                      {                          attribs.Add("watchword"' ubes1.matchedItem);                          attribs.Add("lmreason"' ubes1.matchedReason);                          uMsg = 95620;                      }                        // Check if upload is watched                      ListMatch uwa = listman.IsWatchedArticle(r.title' r.project);                      if (uwa.Success)                          uMsg = 5610;                        // If normal and uploaded by an admin' bot or whitelisted person always hide                      if ((uMsg == 5600) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                          return;                        // if normal and uploads are softhidden hide normal user and anon aswell                      if ((uMsg == 5600) && (config.feedFilterEventUpload == 2) && ((userOffset == 3) || (userOffset == 4)))                          return;                        // If our message is 95620' we might need to truncate r.comment                      if (uMsg == 95620)                      {                          if (r.comment.Length > 25)                              r.comment = r.comment.Substring(0' 23) + "...";                      }                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("uploaditem"' project.interwikiLink + r.title);                      attribs.Add("cuploaditem"' r.title);                      attribs.Add("reason"' r.comment);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(userOffset + uMsg' ref attribs);                      break;                  case RCEvent.EventType.protect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in protect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5900' ref attribs);                      break;                  case RCEvent.EventType.unprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in unprotect is fine' it's just the pagetitle                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(5901' ref attribs);                      break;                  case RCEvent.EventType.modifyprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in modifyprotect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5902' ref attribs);                      break;              }
Magic Number,CVNBot,Program,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Program.cs,ReactToRCEvent,The following statement contains a magic number: switch (r.eventtype)              {                  // This case handles:                  // - New page creations                  // - Page edits                  case RCEvent.EventType.edit:                      String diffsize;                      if (r.szdiff >= 0)                          diffsize = "+" + r.szdiff.ToString();                      else                          diffsize = r.szdiff.ToString();                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("size"' diffsize);                      attribs.Add("url"' r.url);                      attribs.Add("reason"' r.comment);                        // This block handles: New page creations                      if (r.newpage)                      {                          bool createSpecial = false;                            // New pages created by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.newBig)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5010 + userOffset' ref attribs);                          }                          else if (r.szdiff <= config.newSmall)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5020 + userOffset' ref attribs);                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5000 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Article is on watchlist                          // - Page title matches a BNA pattern                          // - Edit summary matches a BES pattern                            // Is the article on the watchlist?                          ListMatch wlm = listman.IsWatchedArticle(r.title' r.project);                          if (wlm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5030 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16301' (String)attribs["article"]));                              break;                          }                            // Does the page title match a BNA pattern?                          ListMatch eslm = listman.MatchesList(r.title' 12);                          if (eslm.Success)                          {                              // Matches BNA                              attribs.Add("watchword"' eslm.matchedItem);                              message = GetMessage(5040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' eslm.matchedItem));                              break;                          }                            // Does the edit summary match a BES pattern?                          ListMatch lm = listman.MatchesList(r.comment' 20);                          if (lm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' lm.matchedItem);                              message = GetMessage(95040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' lm.matchedItem));                              break;                          }                            // If we're still here that means                          // - the create didn't get ignored by adminlist or whitelist                          // - the create didn't match any watch patterns                          // Now' if any of the following is true' we'll must report it.                          // - Create by blacklisted user                          // - Create by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // Created by an unlisted reguser with non-special create size' ignore                          if ((userOffset == 4) && !createSpecial)                              return;                            // Else: Create had special size' so let it shown (default)' don't return!                      }                      // This block handles: Page edits                      else                      {                          bool editSpecial = false;                            // Edit by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.editBig)                          {                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5110 + userOffset' ref attribs);                              editSpecial = true;                          }                          else if (r.szdiff <= config.editBlank)                          {                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5120 + userOffset' ref attribs);                              editSpecial = true;                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5100 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Edit summary matches a BES pattern                          // - Edit blanked the page                          // - Edit replaced the page                          // - Article is on watchlist                            // Does the edit summary match a BES pattern?                          ListMatch elm = listman.MatchesList(r.comment' 20);                          if (elm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' elm.matchedItem);                              message = GetMessage(95130 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16310' r.comment' (String)attribs["article"]));                              break;                          }                            // Did the user user blank the page?                          if (project.rautosummBlank.IsMatch(r.comment))                          {                              message = GetMessage(96010 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16311' (String)attribs["article"]));                              break;                          }                            Match rplm = project.rautosummReplace.Match(r.comment);                          if (rplm.Success)                          {                              // The user replaced the page.                              try                              {                                  attribs.Add("profanity"' rplm.Groups["item1"].Captures[0].Value);                                  message = GetMessage(96020 + userOffset' ref attribs);                              }                              catch (ArgumentOutOfRangeException)                              {                                  // This wiki probably doesn't have a profanity attribute                                  message = GetMessage(96030 + userOffset' ref attribs);                              }                              break;                          }                            // Is the article on the watchlist?                          ListMatch welm = listman.IsWatchedArticle(r.title' r.project);                          if (welm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5130 + userOffset' ref attribs);                              break;                          }                            // If we're still here that means                          // - the edit didn't get ignored by adminlist or whitelist                          // - the edit didn't match any watch patterns                          // Now' if any of the following is true' we must still report it.                          // - Edit by blacklisted user                          // - Edit by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // If nothing special about the edit' return to ignore                          if (!editSpecial)                              return;                      }                      break;                  case RCEvent.EventType.move:                      // if moves are softhidden hide moves by admin' bot or whitelist                      if ((config.feedFilterEventMove == 2) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                      {                          return;                      }                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("fromname"' project.interwikiLink + r.title);                      attribs.Add("cfromname"' r.title);                      attribs.Add("toname"' project.interwikiLink + r.movedTo);                      attribs.Add("ctoname"' r.movedTo);                      attribs.Add("url"' r.blockLength); //The blockLength field stores the moveFrom URL                      attribs.Add("reason"' r.comment);                      message = GetMessage(5500 + userOffset' ref attribs);                      break;                  case RCEvent.EventType.block:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.title.Split(new char[] { ':' }' 2)[1]));                      attribs.Add("length"' r.blockLength);                      attribs.Add("reason"' r.comment);                      message = GetMessage(5400' ref attribs);                      //If the blocked user (r.title) isn't botlisted' add to blacklist                      if (listman.ClassifyEditor(r.title.Split(new char[] { ':' }' 2)[1]' r.project) != ListManager.UserType.bot)                      {                          //If this isn't an indefinite/infinite block' add to blacklist                          if ((r.blockLength.ToLower() != "indefinite") && (r.blockLength.ToLower() != "infinite"))                          {                                                               // 2'678'400 seconds = 744 hours = 31 days                              int listLen = Convert.ToInt32(CVNBotUtils.ParseDateTimeLength(r.blockLength' 2678400) * 2.5);                              string blComment = "Autoblacklist: " + r.comment + " on " + r.project;                              message += "\n" + listman.AddUserToList(r.title.Split(new char[] { ':' }' 2)[1]' "" //Global bl                                  ' ListManager.UserType.blacklisted' r.user' blComment' listLen);                              Broadcast("BL"' "ADD"' r.title.Split(new char[] { ':' }' 2)[1]' listLen' blComment' r.user);                          }                      }                      break;                  case RCEvent.EventType.unblock:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("reason"' r.comment);                      message = GetMessage(5700' ref attribs);                      break;                  case RCEvent.EventType.delete:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      attribs.Add("reason"' r.comment);                      message = GetMessage(05300' ref attribs);                      break;                  case RCEvent.EventType.newuser:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("caurl"' "https://meta.wikimedia.org/wiki/Special:CentralAuth/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch = listman.MatchesList(r.user' 11);                      if (bnuMatch.Success && feedFilterThisEvent == 1)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch.matchedItem);                          attribs.Add("wwreason"' bnuMatch.matchedReason);                          message = GetMessage(5201' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5200' ref attribs);                      }                      break;                  case RCEvent.EventType.newuser2:                      attribs.Add("creator"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ccreator"' r.user);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.title);                      attribs.Add("ceditor"' r.title);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch2 = listman.MatchesList(r.user' 11);                      if (bnuMatch2.Success)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch2.matchedItem);                          attribs.Add("wwreason"' bnuMatch2.matchedReason);                          message = GetMessage(5211' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch2.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5210' ref attribs);                      }                      break;                  case RCEvent.EventType.upload:                      int uMsg = 5600;                        // Check if the edit summary matches BES                      ListMatch ubes2 = listman.MatchesList(r.comment' 20);                      if (ubes2.Success)                      {                          attribs.Add("watchword"' ubes2.matchedItem);                          attribs.Add("lmreason"' ubes2.matchedReason);                          uMsg = 95620;                      }                        // Now check if the title matches BES                      ListMatch ubes1 = listman.MatchesList(r.title' 20);                      if (ubes1.Success)                      {                          attribs.Add("watchword"' ubes1.matchedItem);                          attribs.Add("lmreason"' ubes1.matchedReason);                          uMsg = 95620;                      }                        // Check if upload is watched                      ListMatch uwa = listman.IsWatchedArticle(r.title' r.project);                      if (uwa.Success)                          uMsg = 5610;                        // If normal and uploaded by an admin' bot or whitelisted person always hide                      if ((uMsg == 5600) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                          return;                        // if normal and uploads are softhidden hide normal user and anon aswell                      if ((uMsg == 5600) && (config.feedFilterEventUpload == 2) && ((userOffset == 3) || (userOffset == 4)))                          return;                        // If our message is 95620' we might need to truncate r.comment                      if (uMsg == 95620)                      {                          if (r.comment.Length > 25)                              r.comment = r.comment.Substring(0' 23) + "...";                      }                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("uploaditem"' project.interwikiLink + r.title);                      attribs.Add("cuploaditem"' r.title);                      attribs.Add("reason"' r.comment);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(userOffset + uMsg' ref attribs);                      break;                  case RCEvent.EventType.protect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in protect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5900' ref attribs);                      break;                  case RCEvent.EventType.unprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in unprotect is fine' it's just the pagetitle                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(5901' ref attribs);                      break;                  case RCEvent.EventType.modifyprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in modifyprotect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5902' ref attribs);                      break;              }
Magic Number,CVNBot,Program,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Program.cs,ReactToRCEvent,The following statement contains a magic number: switch (r.eventtype)              {                  // This case handles:                  // - New page creations                  // - Page edits                  case RCEvent.EventType.edit:                      String diffsize;                      if (r.szdiff >= 0)                          diffsize = "+" + r.szdiff.ToString();                      else                          diffsize = r.szdiff.ToString();                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("size"' diffsize);                      attribs.Add("url"' r.url);                      attribs.Add("reason"' r.comment);                        // This block handles: New page creations                      if (r.newpage)                      {                          bool createSpecial = false;                            // New pages created by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.newBig)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5010 + userOffset' ref attribs);                          }                          else if (r.szdiff <= config.newSmall)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5020 + userOffset' ref attribs);                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5000 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Article is on watchlist                          // - Page title matches a BNA pattern                          // - Edit summary matches a BES pattern                            // Is the article on the watchlist?                          ListMatch wlm = listman.IsWatchedArticle(r.title' r.project);                          if (wlm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5030 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16301' (String)attribs["article"]));                              break;                          }                            // Does the page title match a BNA pattern?                          ListMatch eslm = listman.MatchesList(r.title' 12);                          if (eslm.Success)                          {                              // Matches BNA                              attribs.Add("watchword"' eslm.matchedItem);                              message = GetMessage(5040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' eslm.matchedItem));                              break;                          }                            // Does the edit summary match a BES pattern?                          ListMatch lm = listman.MatchesList(r.comment' 20);                          if (lm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' lm.matchedItem);                              message = GetMessage(95040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' lm.matchedItem));                              break;                          }                            // If we're still here that means                          // - the create didn't get ignored by adminlist or whitelist                          // - the create didn't match any watch patterns                          // Now' if any of the following is true' we'll must report it.                          // - Create by blacklisted user                          // - Create by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // Created by an unlisted reguser with non-special create size' ignore                          if ((userOffset == 4) && !createSpecial)                              return;                            // Else: Create had special size' so let it shown (default)' don't return!                      }                      // This block handles: Page edits                      else                      {                          bool editSpecial = false;                            // Edit by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.editBig)                          {                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5110 + userOffset' ref attribs);                              editSpecial = true;                          }                          else if (r.szdiff <= config.editBlank)                          {                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5120 + userOffset' ref attribs);                              editSpecial = true;                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5100 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Edit summary matches a BES pattern                          // - Edit blanked the page                          // - Edit replaced the page                          // - Article is on watchlist                            // Does the edit summary match a BES pattern?                          ListMatch elm = listman.MatchesList(r.comment' 20);                          if (elm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' elm.matchedItem);                              message = GetMessage(95130 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16310' r.comment' (String)attribs["article"]));                              break;                          }                            // Did the user user blank the page?                          if (project.rautosummBlank.IsMatch(r.comment))                          {                              message = GetMessage(96010 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16311' (String)attribs["article"]));                              break;                          }                            Match rplm = project.rautosummReplace.Match(r.comment);                          if (rplm.Success)                          {                              // The user replaced the page.                              try                              {                                  attribs.Add("profanity"' rplm.Groups["item1"].Captures[0].Value);                                  message = GetMessage(96020 + userOffset' ref attribs);                              }                              catch (ArgumentOutOfRangeException)                              {                                  // This wiki probably doesn't have a profanity attribute                                  message = GetMessage(96030 + userOffset' ref attribs);                              }                              break;                          }                            // Is the article on the watchlist?                          ListMatch welm = listman.IsWatchedArticle(r.title' r.project);                          if (welm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5130 + userOffset' ref attribs);                              break;                          }                            // If we're still here that means                          // - the edit didn't get ignored by adminlist or whitelist                          // - the edit didn't match any watch patterns                          // Now' if any of the following is true' we must still report it.                          // - Edit by blacklisted user                          // - Edit by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // If nothing special about the edit' return to ignore                          if (!editSpecial)                              return;                      }                      break;                  case RCEvent.EventType.move:                      // if moves are softhidden hide moves by admin' bot or whitelist                      if ((config.feedFilterEventMove == 2) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                      {                          return;                      }                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("fromname"' project.interwikiLink + r.title);                      attribs.Add("cfromname"' r.title);                      attribs.Add("toname"' project.interwikiLink + r.movedTo);                      attribs.Add("ctoname"' r.movedTo);                      attribs.Add("url"' r.blockLength); //The blockLength field stores the moveFrom URL                      attribs.Add("reason"' r.comment);                      message = GetMessage(5500 + userOffset' ref attribs);                      break;                  case RCEvent.EventType.block:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.title.Split(new char[] { ':' }' 2)[1]));                      attribs.Add("length"' r.blockLength);                      attribs.Add("reason"' r.comment);                      message = GetMessage(5400' ref attribs);                      //If the blocked user (r.title) isn't botlisted' add to blacklist                      if (listman.ClassifyEditor(r.title.Split(new char[] { ':' }' 2)[1]' r.project) != ListManager.UserType.bot)                      {                          //If this isn't an indefinite/infinite block' add to blacklist                          if ((r.blockLength.ToLower() != "indefinite") && (r.blockLength.ToLower() != "infinite"))                          {                                                               // 2'678'400 seconds = 744 hours = 31 days                              int listLen = Convert.ToInt32(CVNBotUtils.ParseDateTimeLength(r.blockLength' 2678400) * 2.5);                              string blComment = "Autoblacklist: " + r.comment + " on " + r.project;                              message += "\n" + listman.AddUserToList(r.title.Split(new char[] { ':' }' 2)[1]' "" //Global bl                                  ' ListManager.UserType.blacklisted' r.user' blComment' listLen);                              Broadcast("BL"' "ADD"' r.title.Split(new char[] { ':' }' 2)[1]' listLen' blComment' r.user);                          }                      }                      break;                  case RCEvent.EventType.unblock:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("reason"' r.comment);                      message = GetMessage(5700' ref attribs);                      break;                  case RCEvent.EventType.delete:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      attribs.Add("reason"' r.comment);                      message = GetMessage(05300' ref attribs);                      break;                  case RCEvent.EventType.newuser:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("caurl"' "https://meta.wikimedia.org/wiki/Special:CentralAuth/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch = listman.MatchesList(r.user' 11);                      if (bnuMatch.Success && feedFilterThisEvent == 1)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch.matchedItem);                          attribs.Add("wwreason"' bnuMatch.matchedReason);                          message = GetMessage(5201' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5200' ref attribs);                      }                      break;                  case RCEvent.EventType.newuser2:                      attribs.Add("creator"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ccreator"' r.user);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.title);                      attribs.Add("ceditor"' r.title);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch2 = listman.MatchesList(r.user' 11);                      if (bnuMatch2.Success)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch2.matchedItem);                          attribs.Add("wwreason"' bnuMatch2.matchedReason);                          message = GetMessage(5211' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch2.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5210' ref attribs);                      }                      break;                  case RCEvent.EventType.upload:                      int uMsg = 5600;                        // Check if the edit summary matches BES                      ListMatch ubes2 = listman.MatchesList(r.comment' 20);                      if (ubes2.Success)                      {                          attribs.Add("watchword"' ubes2.matchedItem);                          attribs.Add("lmreason"' ubes2.matchedReason);                          uMsg = 95620;                      }                        // Now check if the title matches BES                      ListMatch ubes1 = listman.MatchesList(r.title' 20);                      if (ubes1.Success)                      {                          attribs.Add("watchword"' ubes1.matchedItem);                          attribs.Add("lmreason"' ubes1.matchedReason);                          uMsg = 95620;                      }                        // Check if upload is watched                      ListMatch uwa = listman.IsWatchedArticle(r.title' r.project);                      if (uwa.Success)                          uMsg = 5610;                        // If normal and uploaded by an admin' bot or whitelisted person always hide                      if ((uMsg == 5600) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                          return;                        // if normal and uploads are softhidden hide normal user and anon aswell                      if ((uMsg == 5600) && (config.feedFilterEventUpload == 2) && ((userOffset == 3) || (userOffset == 4)))                          return;                        // If our message is 95620' we might need to truncate r.comment                      if (uMsg == 95620)                      {                          if (r.comment.Length > 25)                              r.comment = r.comment.Substring(0' 23) + "...";                      }                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("uploaditem"' project.interwikiLink + r.title);                      attribs.Add("cuploaditem"' r.title);                      attribs.Add("reason"' r.comment);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(userOffset + uMsg' ref attribs);                      break;                  case RCEvent.EventType.protect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in protect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5900' ref attribs);                      break;                  case RCEvent.EventType.unprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in unprotect is fine' it's just the pagetitle                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(5901' ref attribs);                      break;                  case RCEvent.EventType.modifyprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in modifyprotect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5902' ref attribs);                      break;              }
Magic Number,CVNBot,Program,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Program.cs,ReactToRCEvent,The following statement contains a magic number: switch (r.eventtype)              {                  // This case handles:                  // - New page creations                  // - Page edits                  case RCEvent.EventType.edit:                      String diffsize;                      if (r.szdiff >= 0)                          diffsize = "+" + r.szdiff.ToString();                      else                          diffsize = r.szdiff.ToString();                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("size"' diffsize);                      attribs.Add("url"' r.url);                      attribs.Add("reason"' r.comment);                        // This block handles: New page creations                      if (r.newpage)                      {                          bool createSpecial = false;                            // New pages created by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.newBig)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5010 + userOffset' ref attribs);                          }                          else if (r.szdiff <= config.newSmall)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5020 + userOffset' ref attribs);                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5000 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Article is on watchlist                          // - Page title matches a BNA pattern                          // - Edit summary matches a BES pattern                            // Is the article on the watchlist?                          ListMatch wlm = listman.IsWatchedArticle(r.title' r.project);                          if (wlm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5030 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16301' (String)attribs["article"]));                              break;                          }                            // Does the page title match a BNA pattern?                          ListMatch eslm = listman.MatchesList(r.title' 12);                          if (eslm.Success)                          {                              // Matches BNA                              attribs.Add("watchword"' eslm.matchedItem);                              message = GetMessage(5040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' eslm.matchedItem));                              break;                          }                            // Does the edit summary match a BES pattern?                          ListMatch lm = listman.MatchesList(r.comment' 20);                          if (lm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' lm.matchedItem);                              message = GetMessage(95040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' lm.matchedItem));                              break;                          }                            // If we're still here that means                          // - the create didn't get ignored by adminlist or whitelist                          // - the create didn't match any watch patterns                          // Now' if any of the following is true' we'll must report it.                          // - Create by blacklisted user                          // - Create by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // Created by an unlisted reguser with non-special create size' ignore                          if ((userOffset == 4) && !createSpecial)                              return;                            // Else: Create had special size' so let it shown (default)' don't return!                      }                      // This block handles: Page edits                      else                      {                          bool editSpecial = false;                            // Edit by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.editBig)                          {                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5110 + userOffset' ref attribs);                              editSpecial = true;                          }                          else if (r.szdiff <= config.editBlank)                          {                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5120 + userOffset' ref attribs);                              editSpecial = true;                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5100 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Edit summary matches a BES pattern                          // - Edit blanked the page                          // - Edit replaced the page                          // - Article is on watchlist                            // Does the edit summary match a BES pattern?                          ListMatch elm = listman.MatchesList(r.comment' 20);                          if (elm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' elm.matchedItem);                              message = GetMessage(95130 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16310' r.comment' (String)attribs["article"]));                              break;                          }                            // Did the user user blank the page?                          if (project.rautosummBlank.IsMatch(r.comment))                          {                              message = GetMessage(96010 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16311' (String)attribs["article"]));                              break;                          }                            Match rplm = project.rautosummReplace.Match(r.comment);                          if (rplm.Success)                          {                              // The user replaced the page.                              try                              {                                  attribs.Add("profanity"' rplm.Groups["item1"].Captures[0].Value);                                  message = GetMessage(96020 + userOffset' ref attribs);                              }                              catch (ArgumentOutOfRangeException)                              {                                  // This wiki probably doesn't have a profanity attribute                                  message = GetMessage(96030 + userOffset' ref attribs);                              }                              break;                          }                            // Is the article on the watchlist?                          ListMatch welm = listman.IsWatchedArticle(r.title' r.project);                          if (welm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5130 + userOffset' ref attribs);                              break;                          }                            // If we're still here that means                          // - the edit didn't get ignored by adminlist or whitelist                          // - the edit didn't match any watch patterns                          // Now' if any of the following is true' we must still report it.                          // - Edit by blacklisted user                          // - Edit by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // If nothing special about the edit' return to ignore                          if (!editSpecial)                              return;                      }                      break;                  case RCEvent.EventType.move:                      // if moves are softhidden hide moves by admin' bot or whitelist                      if ((config.feedFilterEventMove == 2) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                      {                          return;                      }                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("fromname"' project.interwikiLink + r.title);                      attribs.Add("cfromname"' r.title);                      attribs.Add("toname"' project.interwikiLink + r.movedTo);                      attribs.Add("ctoname"' r.movedTo);                      attribs.Add("url"' r.blockLength); //The blockLength field stores the moveFrom URL                      attribs.Add("reason"' r.comment);                      message = GetMessage(5500 + userOffset' ref attribs);                      break;                  case RCEvent.EventType.block:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.title.Split(new char[] { ':' }' 2)[1]));                      attribs.Add("length"' r.blockLength);                      attribs.Add("reason"' r.comment);                      message = GetMessage(5400' ref attribs);                      //If the blocked user (r.title) isn't botlisted' add to blacklist                      if (listman.ClassifyEditor(r.title.Split(new char[] { ':' }' 2)[1]' r.project) != ListManager.UserType.bot)                      {                          //If this isn't an indefinite/infinite block' add to blacklist                          if ((r.blockLength.ToLower() != "indefinite") && (r.blockLength.ToLower() != "infinite"))                          {                                                               // 2'678'400 seconds = 744 hours = 31 days                              int listLen = Convert.ToInt32(CVNBotUtils.ParseDateTimeLength(r.blockLength' 2678400) * 2.5);                              string blComment = "Autoblacklist: " + r.comment + " on " + r.project;                              message += "\n" + listman.AddUserToList(r.title.Split(new char[] { ':' }' 2)[1]' "" //Global bl                                  ' ListManager.UserType.blacklisted' r.user' blComment' listLen);                              Broadcast("BL"' "ADD"' r.title.Split(new char[] { ':' }' 2)[1]' listLen' blComment' r.user);                          }                      }                      break;                  case RCEvent.EventType.unblock:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("reason"' r.comment);                      message = GetMessage(5700' ref attribs);                      break;                  case RCEvent.EventType.delete:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      attribs.Add("reason"' r.comment);                      message = GetMessage(05300' ref attribs);                      break;                  case RCEvent.EventType.newuser:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("caurl"' "https://meta.wikimedia.org/wiki/Special:CentralAuth/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch = listman.MatchesList(r.user' 11);                      if (bnuMatch.Success && feedFilterThisEvent == 1)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch.matchedItem);                          attribs.Add("wwreason"' bnuMatch.matchedReason);                          message = GetMessage(5201' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5200' ref attribs);                      }                      break;                  case RCEvent.EventType.newuser2:                      attribs.Add("creator"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ccreator"' r.user);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.title);                      attribs.Add("ceditor"' r.title);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch2 = listman.MatchesList(r.user' 11);                      if (bnuMatch2.Success)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch2.matchedItem);                          attribs.Add("wwreason"' bnuMatch2.matchedReason);                          message = GetMessage(5211' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch2.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5210' ref attribs);                      }                      break;                  case RCEvent.EventType.upload:                      int uMsg = 5600;                        // Check if the edit summary matches BES                      ListMatch ubes2 = listman.MatchesList(r.comment' 20);                      if (ubes2.Success)                      {                          attribs.Add("watchword"' ubes2.matchedItem);                          attribs.Add("lmreason"' ubes2.matchedReason);                          uMsg = 95620;                      }                        // Now check if the title matches BES                      ListMatch ubes1 = listman.MatchesList(r.title' 20);                      if (ubes1.Success)                      {                          attribs.Add("watchword"' ubes1.matchedItem);                          attribs.Add("lmreason"' ubes1.matchedReason);                          uMsg = 95620;                      }                        // Check if upload is watched                      ListMatch uwa = listman.IsWatchedArticle(r.title' r.project);                      if (uwa.Success)                          uMsg = 5610;                        // If normal and uploaded by an admin' bot or whitelisted person always hide                      if ((uMsg == 5600) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                          return;                        // if normal and uploads are softhidden hide normal user and anon aswell                      if ((uMsg == 5600) && (config.feedFilterEventUpload == 2) && ((userOffset == 3) || (userOffset == 4)))                          return;                        // If our message is 95620' we might need to truncate r.comment                      if (uMsg == 95620)                      {                          if (r.comment.Length > 25)                              r.comment = r.comment.Substring(0' 23) + "...";                      }                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("uploaditem"' project.interwikiLink + r.title);                      attribs.Add("cuploaditem"' r.title);                      attribs.Add("reason"' r.comment);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(userOffset + uMsg' ref attribs);                      break;                  case RCEvent.EventType.protect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in protect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5900' ref attribs);                      break;                  case RCEvent.EventType.unprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in unprotect is fine' it's just the pagetitle                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(5901' ref attribs);                      break;                  case RCEvent.EventType.modifyprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in modifyprotect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5902' ref attribs);                      break;              }
Magic Number,CVNBot,Program,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Program.cs,ReactToRCEvent,The following statement contains a magic number: switch (r.eventtype)              {                  // This case handles:                  // - New page creations                  // - Page edits                  case RCEvent.EventType.edit:                      String diffsize;                      if (r.szdiff >= 0)                          diffsize = "+" + r.szdiff.ToString();                      else                          diffsize = r.szdiff.ToString();                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("size"' diffsize);                      attribs.Add("url"' r.url);                      attribs.Add("reason"' r.comment);                        // This block handles: New page creations                      if (r.newpage)                      {                          bool createSpecial = false;                            // New pages created by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.newBig)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5010 + userOffset' ref attribs);                          }                          else if (r.szdiff <= config.newSmall)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5020 + userOffset' ref attribs);                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5000 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Article is on watchlist                          // - Page title matches a BNA pattern                          // - Edit summary matches a BES pattern                            // Is the article on the watchlist?                          ListMatch wlm = listman.IsWatchedArticle(r.title' r.project);                          if (wlm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5030 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16301' (String)attribs["article"]));                              break;                          }                            // Does the page title match a BNA pattern?                          ListMatch eslm = listman.MatchesList(r.title' 12);                          if (eslm.Success)                          {                              // Matches BNA                              attribs.Add("watchword"' eslm.matchedItem);                              message = GetMessage(5040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' eslm.matchedItem));                              break;                          }                            // Does the edit summary match a BES pattern?                          ListMatch lm = listman.MatchesList(r.comment' 20);                          if (lm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' lm.matchedItem);                              message = GetMessage(95040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' lm.matchedItem));                              break;                          }                            // If we're still here that means                          // - the create didn't get ignored by adminlist or whitelist                          // - the create didn't match any watch patterns                          // Now' if any of the following is true' we'll must report it.                          // - Create by blacklisted user                          // - Create by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // Created by an unlisted reguser with non-special create size' ignore                          if ((userOffset == 4) && !createSpecial)                              return;                            // Else: Create had special size' so let it shown (default)' don't return!                      }                      // This block handles: Page edits                      else                      {                          bool editSpecial = false;                            // Edit by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.editBig)                          {                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5110 + userOffset' ref attribs);                              editSpecial = true;                          }                          else if (r.szdiff <= config.editBlank)                          {                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5120 + userOffset' ref attribs);                              editSpecial = true;                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5100 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Edit summary matches a BES pattern                          // - Edit blanked the page                          // - Edit replaced the page                          // - Article is on watchlist                            // Does the edit summary match a BES pattern?                          ListMatch elm = listman.MatchesList(r.comment' 20);                          if (elm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' elm.matchedItem);                              message = GetMessage(95130 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16310' r.comment' (String)attribs["article"]));                              break;                          }                            // Did the user user blank the page?                          if (project.rautosummBlank.IsMatch(r.comment))                          {                              message = GetMessage(96010 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16311' (String)attribs["article"]));                              break;                          }                            Match rplm = project.rautosummReplace.Match(r.comment);                          if (rplm.Success)                          {                              // The user replaced the page.                              try                              {                                  attribs.Add("profanity"' rplm.Groups["item1"].Captures[0].Value);                                  message = GetMessage(96020 + userOffset' ref attribs);                              }                              catch (ArgumentOutOfRangeException)                              {                                  // This wiki probably doesn't have a profanity attribute                                  message = GetMessage(96030 + userOffset' ref attribs);                              }                              break;                          }                            // Is the article on the watchlist?                          ListMatch welm = listman.IsWatchedArticle(r.title' r.project);                          if (welm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5130 + userOffset' ref attribs);                              break;                          }                            // If we're still here that means                          // - the edit didn't get ignored by adminlist or whitelist                          // - the edit didn't match any watch patterns                          // Now' if any of the following is true' we must still report it.                          // - Edit by blacklisted user                          // - Edit by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // If nothing special about the edit' return to ignore                          if (!editSpecial)                              return;                      }                      break;                  case RCEvent.EventType.move:                      // if moves are softhidden hide moves by admin' bot or whitelist                      if ((config.feedFilterEventMove == 2) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                      {                          return;                      }                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("fromname"' project.interwikiLink + r.title);                      attribs.Add("cfromname"' r.title);                      attribs.Add("toname"' project.interwikiLink + r.movedTo);                      attribs.Add("ctoname"' r.movedTo);                      attribs.Add("url"' r.blockLength); //The blockLength field stores the moveFrom URL                      attribs.Add("reason"' r.comment);                      message = GetMessage(5500 + userOffset' ref attribs);                      break;                  case RCEvent.EventType.block:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.title.Split(new char[] { ':' }' 2)[1]));                      attribs.Add("length"' r.blockLength);                      attribs.Add("reason"' r.comment);                      message = GetMessage(5400' ref attribs);                      //If the blocked user (r.title) isn't botlisted' add to blacklist                      if (listman.ClassifyEditor(r.title.Split(new char[] { ':' }' 2)[1]' r.project) != ListManager.UserType.bot)                      {                          //If this isn't an indefinite/infinite block' add to blacklist                          if ((r.blockLength.ToLower() != "indefinite") && (r.blockLength.ToLower() != "infinite"))                          {                                                               // 2'678'400 seconds = 744 hours = 31 days                              int listLen = Convert.ToInt32(CVNBotUtils.ParseDateTimeLength(r.blockLength' 2678400) * 2.5);                              string blComment = "Autoblacklist: " + r.comment + " on " + r.project;                              message += "\n" + listman.AddUserToList(r.title.Split(new char[] { ':' }' 2)[1]' "" //Global bl                                  ' ListManager.UserType.blacklisted' r.user' blComment' listLen);                              Broadcast("BL"' "ADD"' r.title.Split(new char[] { ':' }' 2)[1]' listLen' blComment' r.user);                          }                      }                      break;                  case RCEvent.EventType.unblock:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("reason"' r.comment);                      message = GetMessage(5700' ref attribs);                      break;                  case RCEvent.EventType.delete:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      attribs.Add("reason"' r.comment);                      message = GetMessage(05300' ref attribs);                      break;                  case RCEvent.EventType.newuser:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("caurl"' "https://meta.wikimedia.org/wiki/Special:CentralAuth/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch = listman.MatchesList(r.user' 11);                      if (bnuMatch.Success && feedFilterThisEvent == 1)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch.matchedItem);                          attribs.Add("wwreason"' bnuMatch.matchedReason);                          message = GetMessage(5201' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5200' ref attribs);                      }                      break;                  case RCEvent.EventType.newuser2:                      attribs.Add("creator"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ccreator"' r.user);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.title);                      attribs.Add("ceditor"' r.title);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch2 = listman.MatchesList(r.user' 11);                      if (bnuMatch2.Success)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch2.matchedItem);                          attribs.Add("wwreason"' bnuMatch2.matchedReason);                          message = GetMessage(5211' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch2.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5210' ref attribs);                      }                      break;                  case RCEvent.EventType.upload:                      int uMsg = 5600;                        // Check if the edit summary matches BES                      ListMatch ubes2 = listman.MatchesList(r.comment' 20);                      if (ubes2.Success)                      {                          attribs.Add("watchword"' ubes2.matchedItem);                          attribs.Add("lmreason"' ubes2.matchedReason);                          uMsg = 95620;                      }                        // Now check if the title matches BES                      ListMatch ubes1 = listman.MatchesList(r.title' 20);                      if (ubes1.Success)                      {                          attribs.Add("watchword"' ubes1.matchedItem);                          attribs.Add("lmreason"' ubes1.matchedReason);                          uMsg = 95620;                      }                        // Check if upload is watched                      ListMatch uwa = listman.IsWatchedArticle(r.title' r.project);                      if (uwa.Success)                          uMsg = 5610;                        // If normal and uploaded by an admin' bot or whitelisted person always hide                      if ((uMsg == 5600) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                          return;                        // if normal and uploads are softhidden hide normal user and anon aswell                      if ((uMsg == 5600) && (config.feedFilterEventUpload == 2) && ((userOffset == 3) || (userOffset == 4)))                          return;                        // If our message is 95620' we might need to truncate r.comment                      if (uMsg == 95620)                      {                          if (r.comment.Length > 25)                              r.comment = r.comment.Substring(0' 23) + "...";                      }                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("uploaditem"' project.interwikiLink + r.title);                      attribs.Add("cuploaditem"' r.title);                      attribs.Add("reason"' r.comment);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(userOffset + uMsg' ref attribs);                      break;                  case RCEvent.EventType.protect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in protect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5900' ref attribs);                      break;                  case RCEvent.EventType.unprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in unprotect is fine' it's just the pagetitle                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(5901' ref attribs);                      break;                  case RCEvent.EventType.modifyprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in modifyprotect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5902' ref attribs);                      break;              }
Magic Number,CVNBot,Program,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Program.cs,ReactToRCEvent,The following statement contains a magic number: switch (r.eventtype)              {                  // This case handles:                  // - New page creations                  // - Page edits                  case RCEvent.EventType.edit:                      String diffsize;                      if (r.szdiff >= 0)                          diffsize = "+" + r.szdiff.ToString();                      else                          diffsize = r.szdiff.ToString();                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("size"' diffsize);                      attribs.Add("url"' r.url);                      attribs.Add("reason"' r.comment);                        // This block handles: New page creations                      if (r.newpage)                      {                          bool createSpecial = false;                            // New pages created by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.newBig)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5010 + userOffset' ref attribs);                          }                          else if (r.szdiff <= config.newSmall)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5020 + userOffset' ref attribs);                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5000 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Article is on watchlist                          // - Page title matches a BNA pattern                          // - Edit summary matches a BES pattern                            // Is the article on the watchlist?                          ListMatch wlm = listman.IsWatchedArticle(r.title' r.project);                          if (wlm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5030 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16301' (String)attribs["article"]));                              break;                          }                            // Does the page title match a BNA pattern?                          ListMatch eslm = listman.MatchesList(r.title' 12);                          if (eslm.Success)                          {                              // Matches BNA                              attribs.Add("watchword"' eslm.matchedItem);                              message = GetMessage(5040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' eslm.matchedItem));                              break;                          }                            // Does the edit summary match a BES pattern?                          ListMatch lm = listman.MatchesList(r.comment' 20);                          if (lm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' lm.matchedItem);                              message = GetMessage(95040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' lm.matchedItem));                              break;                          }                            // If we're still here that means                          // - the create didn't get ignored by adminlist or whitelist                          // - the create didn't match any watch patterns                          // Now' if any of the following is true' we'll must report it.                          // - Create by blacklisted user                          // - Create by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // Created by an unlisted reguser with non-special create size' ignore                          if ((userOffset == 4) && !createSpecial)                              return;                            // Else: Create had special size' so let it shown (default)' don't return!                      }                      // This block handles: Page edits                      else                      {                          bool editSpecial = false;                            // Edit by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.editBig)                          {                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5110 + userOffset' ref attribs);                              editSpecial = true;                          }                          else if (r.szdiff <= config.editBlank)                          {                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5120 + userOffset' ref attribs);                              editSpecial = true;                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5100 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Edit summary matches a BES pattern                          // - Edit blanked the page                          // - Edit replaced the page                          // - Article is on watchlist                            // Does the edit summary match a BES pattern?                          ListMatch elm = listman.MatchesList(r.comment' 20);                          if (elm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' elm.matchedItem);                              message = GetMessage(95130 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16310' r.comment' (String)attribs["article"]));                              break;                          }                            // Did the user user blank the page?                          if (project.rautosummBlank.IsMatch(r.comment))                          {                              message = GetMessage(96010 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16311' (String)attribs["article"]));                              break;                          }                            Match rplm = project.rautosummReplace.Match(r.comment);                          if (rplm.Success)                          {                              // The user replaced the page.                              try                              {                                  attribs.Add("profanity"' rplm.Groups["item1"].Captures[0].Value);                                  message = GetMessage(96020 + userOffset' ref attribs);                              }                              catch (ArgumentOutOfRangeException)                              {                                  // This wiki probably doesn't have a profanity attribute                                  message = GetMessage(96030 + userOffset' ref attribs);                              }                              break;                          }                            // Is the article on the watchlist?                          ListMatch welm = listman.IsWatchedArticle(r.title' r.project);                          if (welm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5130 + userOffset' ref attribs);                              break;                          }                            // If we're still here that means                          // - the edit didn't get ignored by adminlist or whitelist                          // - the edit didn't match any watch patterns                          // Now' if any of the following is true' we must still report it.                          // - Edit by blacklisted user                          // - Edit by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // If nothing special about the edit' return to ignore                          if (!editSpecial)                              return;                      }                      break;                  case RCEvent.EventType.move:                      // if moves are softhidden hide moves by admin' bot or whitelist                      if ((config.feedFilterEventMove == 2) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                      {                          return;                      }                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("fromname"' project.interwikiLink + r.title);                      attribs.Add("cfromname"' r.title);                      attribs.Add("toname"' project.interwikiLink + r.movedTo);                      attribs.Add("ctoname"' r.movedTo);                      attribs.Add("url"' r.blockLength); //The blockLength field stores the moveFrom URL                      attribs.Add("reason"' r.comment);                      message = GetMessage(5500 + userOffset' ref attribs);                      break;                  case RCEvent.EventType.block:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.title.Split(new char[] { ':' }' 2)[1]));                      attribs.Add("length"' r.blockLength);                      attribs.Add("reason"' r.comment);                      message = GetMessage(5400' ref attribs);                      //If the blocked user (r.title) isn't botlisted' add to blacklist                      if (listman.ClassifyEditor(r.title.Split(new char[] { ':' }' 2)[1]' r.project) != ListManager.UserType.bot)                      {                          //If this isn't an indefinite/infinite block' add to blacklist                          if ((r.blockLength.ToLower() != "indefinite") && (r.blockLength.ToLower() != "infinite"))                          {                                                               // 2'678'400 seconds = 744 hours = 31 days                              int listLen = Convert.ToInt32(CVNBotUtils.ParseDateTimeLength(r.blockLength' 2678400) * 2.5);                              string blComment = "Autoblacklist: " + r.comment + " on " + r.project;                              message += "\n" + listman.AddUserToList(r.title.Split(new char[] { ':' }' 2)[1]' "" //Global bl                                  ' ListManager.UserType.blacklisted' r.user' blComment' listLen);                              Broadcast("BL"' "ADD"' r.title.Split(new char[] { ':' }' 2)[1]' listLen' blComment' r.user);                          }                      }                      break;                  case RCEvent.EventType.unblock:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("reason"' r.comment);                      message = GetMessage(5700' ref attribs);                      break;                  case RCEvent.EventType.delete:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      attribs.Add("reason"' r.comment);                      message = GetMessage(05300' ref attribs);                      break;                  case RCEvent.EventType.newuser:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("caurl"' "https://meta.wikimedia.org/wiki/Special:CentralAuth/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch = listman.MatchesList(r.user' 11);                      if (bnuMatch.Success && feedFilterThisEvent == 1)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch.matchedItem);                          attribs.Add("wwreason"' bnuMatch.matchedReason);                          message = GetMessage(5201' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5200' ref attribs);                      }                      break;                  case RCEvent.EventType.newuser2:                      attribs.Add("creator"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ccreator"' r.user);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.title);                      attribs.Add("ceditor"' r.title);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch2 = listman.MatchesList(r.user' 11);                      if (bnuMatch2.Success)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch2.matchedItem);                          attribs.Add("wwreason"' bnuMatch2.matchedReason);                          message = GetMessage(5211' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch2.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5210' ref attribs);                      }                      break;                  case RCEvent.EventType.upload:                      int uMsg = 5600;                        // Check if the edit summary matches BES                      ListMatch ubes2 = listman.MatchesList(r.comment' 20);                      if (ubes2.Success)                      {                          attribs.Add("watchword"' ubes2.matchedItem);                          attribs.Add("lmreason"' ubes2.matchedReason);                          uMsg = 95620;                      }                        // Now check if the title matches BES                      ListMatch ubes1 = listman.MatchesList(r.title' 20);                      if (ubes1.Success)                      {                          attribs.Add("watchword"' ubes1.matchedItem);                          attribs.Add("lmreason"' ubes1.matchedReason);                          uMsg = 95620;                      }                        // Check if upload is watched                      ListMatch uwa = listman.IsWatchedArticle(r.title' r.project);                      if (uwa.Success)                          uMsg = 5610;                        // If normal and uploaded by an admin' bot or whitelisted person always hide                      if ((uMsg == 5600) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                          return;                        // if normal and uploads are softhidden hide normal user and anon aswell                      if ((uMsg == 5600) && (config.feedFilterEventUpload == 2) && ((userOffset == 3) || (userOffset == 4)))                          return;                        // If our message is 95620' we might need to truncate r.comment                      if (uMsg == 95620)                      {                          if (r.comment.Length > 25)                              r.comment = r.comment.Substring(0' 23) + "...";                      }                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("uploaditem"' project.interwikiLink + r.title);                      attribs.Add("cuploaditem"' r.title);                      attribs.Add("reason"' r.comment);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(userOffset + uMsg' ref attribs);                      break;                  case RCEvent.EventType.protect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in protect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5900' ref attribs);                      break;                  case RCEvent.EventType.unprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in unprotect is fine' it's just the pagetitle                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(5901' ref attribs);                      break;                  case RCEvent.EventType.modifyprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in modifyprotect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5902' ref attribs);                      break;              }
Magic Number,CVNBot,Program,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Program.cs,ReactToRCEvent,The following statement contains a magic number: switch (r.eventtype)              {                  // This case handles:                  // - New page creations                  // - Page edits                  case RCEvent.EventType.edit:                      String diffsize;                      if (r.szdiff >= 0)                          diffsize = "+" + r.szdiff.ToString();                      else                          diffsize = r.szdiff.ToString();                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("size"' diffsize);                      attribs.Add("url"' r.url);                      attribs.Add("reason"' r.comment);                        // This block handles: New page creations                      if (r.newpage)                      {                          bool createSpecial = false;                            // New pages created by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.newBig)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5010 + userOffset' ref attribs);                          }                          else if (r.szdiff <= config.newSmall)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5020 + userOffset' ref attribs);                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5000 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Article is on watchlist                          // - Page title matches a BNA pattern                          // - Edit summary matches a BES pattern                            // Is the article on the watchlist?                          ListMatch wlm = listman.IsWatchedArticle(r.title' r.project);                          if (wlm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5030 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16301' (String)attribs["article"]));                              break;                          }                            // Does the page title match a BNA pattern?                          ListMatch eslm = listman.MatchesList(r.title' 12);                          if (eslm.Success)                          {                              // Matches BNA                              attribs.Add("watchword"' eslm.matchedItem);                              message = GetMessage(5040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' eslm.matchedItem));                              break;                          }                            // Does the edit summary match a BES pattern?                          ListMatch lm = listman.MatchesList(r.comment' 20);                          if (lm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' lm.matchedItem);                              message = GetMessage(95040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' lm.matchedItem));                              break;                          }                            // If we're still here that means                          // - the create didn't get ignored by adminlist or whitelist                          // - the create didn't match any watch patterns                          // Now' if any of the following is true' we'll must report it.                          // - Create by blacklisted user                          // - Create by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // Created by an unlisted reguser with non-special create size' ignore                          if ((userOffset == 4) && !createSpecial)                              return;                            // Else: Create had special size' so let it shown (default)' don't return!                      }                      // This block handles: Page edits                      else                      {                          bool editSpecial = false;                            // Edit by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.editBig)                          {                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5110 + userOffset' ref attribs);                              editSpecial = true;                          }                          else if (r.szdiff <= config.editBlank)                          {                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5120 + userOffset' ref attribs);                              editSpecial = true;                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5100 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Edit summary matches a BES pattern                          // - Edit blanked the page                          // - Edit replaced the page                          // - Article is on watchlist                            // Does the edit summary match a BES pattern?                          ListMatch elm = listman.MatchesList(r.comment' 20);                          if (elm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' elm.matchedItem);                              message = GetMessage(95130 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16310' r.comment' (String)attribs["article"]));                              break;                          }                            // Did the user user blank the page?                          if (project.rautosummBlank.IsMatch(r.comment))                          {                              message = GetMessage(96010 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16311' (String)attribs["article"]));                              break;                          }                            Match rplm = project.rautosummReplace.Match(r.comment);                          if (rplm.Success)                          {                              // The user replaced the page.                              try                              {                                  attribs.Add("profanity"' rplm.Groups["item1"].Captures[0].Value);                                  message = GetMessage(96020 + userOffset' ref attribs);                              }                              catch (ArgumentOutOfRangeException)                              {                                  // This wiki probably doesn't have a profanity attribute                                  message = GetMessage(96030 + userOffset' ref attribs);                              }                              break;                          }                            // Is the article on the watchlist?                          ListMatch welm = listman.IsWatchedArticle(r.title' r.project);                          if (welm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5130 + userOffset' ref attribs);                              break;                          }                            // If we're still here that means                          // - the edit didn't get ignored by adminlist or whitelist                          // - the edit didn't match any watch patterns                          // Now' if any of the following is true' we must still report it.                          // - Edit by blacklisted user                          // - Edit by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // If nothing special about the edit' return to ignore                          if (!editSpecial)                              return;                      }                      break;                  case RCEvent.EventType.move:                      // if moves are softhidden hide moves by admin' bot or whitelist                      if ((config.feedFilterEventMove == 2) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                      {                          return;                      }                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("fromname"' project.interwikiLink + r.title);                      attribs.Add("cfromname"' r.title);                      attribs.Add("toname"' project.interwikiLink + r.movedTo);                      attribs.Add("ctoname"' r.movedTo);                      attribs.Add("url"' r.blockLength); //The blockLength field stores the moveFrom URL                      attribs.Add("reason"' r.comment);                      message = GetMessage(5500 + userOffset' ref attribs);                      break;                  case RCEvent.EventType.block:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.title.Split(new char[] { ':' }' 2)[1]));                      attribs.Add("length"' r.blockLength);                      attribs.Add("reason"' r.comment);                      message = GetMessage(5400' ref attribs);                      //If the blocked user (r.title) isn't botlisted' add to blacklist                      if (listman.ClassifyEditor(r.title.Split(new char[] { ':' }' 2)[1]' r.project) != ListManager.UserType.bot)                      {                          //If this isn't an indefinite/infinite block' add to blacklist                          if ((r.blockLength.ToLower() != "indefinite") && (r.blockLength.ToLower() != "infinite"))                          {                                                               // 2'678'400 seconds = 744 hours = 31 days                              int listLen = Convert.ToInt32(CVNBotUtils.ParseDateTimeLength(r.blockLength' 2678400) * 2.5);                              string blComment = "Autoblacklist: " + r.comment + " on " + r.project;                              message += "\n" + listman.AddUserToList(r.title.Split(new char[] { ':' }' 2)[1]' "" //Global bl                                  ' ListManager.UserType.blacklisted' r.user' blComment' listLen);                              Broadcast("BL"' "ADD"' r.title.Split(new char[] { ':' }' 2)[1]' listLen' blComment' r.user);                          }                      }                      break;                  case RCEvent.EventType.unblock:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("reason"' r.comment);                      message = GetMessage(5700' ref attribs);                      break;                  case RCEvent.EventType.delete:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      attribs.Add("reason"' r.comment);                      message = GetMessage(05300' ref attribs);                      break;                  case RCEvent.EventType.newuser:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("caurl"' "https://meta.wikimedia.org/wiki/Special:CentralAuth/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch = listman.MatchesList(r.user' 11);                      if (bnuMatch.Success && feedFilterThisEvent == 1)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch.matchedItem);                          attribs.Add("wwreason"' bnuMatch.matchedReason);                          message = GetMessage(5201' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5200' ref attribs);                      }                      break;                  case RCEvent.EventType.newuser2:                      attribs.Add("creator"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ccreator"' r.user);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.title);                      attribs.Add("ceditor"' r.title);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch2 = listman.MatchesList(r.user' 11);                      if (bnuMatch2.Success)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch2.matchedItem);                          attribs.Add("wwreason"' bnuMatch2.matchedReason);                          message = GetMessage(5211' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch2.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5210' ref attribs);                      }                      break;                  case RCEvent.EventType.upload:                      int uMsg = 5600;                        // Check if the edit summary matches BES                      ListMatch ubes2 = listman.MatchesList(r.comment' 20);                      if (ubes2.Success)                      {                          attribs.Add("watchword"' ubes2.matchedItem);                          attribs.Add("lmreason"' ubes2.matchedReason);                          uMsg = 95620;                      }                        // Now check if the title matches BES                      ListMatch ubes1 = listman.MatchesList(r.title' 20);                      if (ubes1.Success)                      {                          attribs.Add("watchword"' ubes1.matchedItem);                          attribs.Add("lmreason"' ubes1.matchedReason);                          uMsg = 95620;                      }                        // Check if upload is watched                      ListMatch uwa = listman.IsWatchedArticle(r.title' r.project);                      if (uwa.Success)                          uMsg = 5610;                        // If normal and uploaded by an admin' bot or whitelisted person always hide                      if ((uMsg == 5600) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                          return;                        // if normal and uploads are softhidden hide normal user and anon aswell                      if ((uMsg == 5600) && (config.feedFilterEventUpload == 2) && ((userOffset == 3) || (userOffset == 4)))                          return;                        // If our message is 95620' we might need to truncate r.comment                      if (uMsg == 95620)                      {                          if (r.comment.Length > 25)                              r.comment = r.comment.Substring(0' 23) + "...";                      }                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("uploaditem"' project.interwikiLink + r.title);                      attribs.Add("cuploaditem"' r.title);                      attribs.Add("reason"' r.comment);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(userOffset + uMsg' ref attribs);                      break;                  case RCEvent.EventType.protect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in protect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5900' ref attribs);                      break;                  case RCEvent.EventType.unprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in unprotect is fine' it's just the pagetitle                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(5901' ref attribs);                      break;                  case RCEvent.EventType.modifyprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in modifyprotect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5902' ref attribs);                      break;              }
Magic Number,CVNBot,Program,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Program.cs,ReactToRCEvent,The following statement contains a magic number: switch (r.eventtype)              {                  // This case handles:                  // - New page creations                  // - Page edits                  case RCEvent.EventType.edit:                      String diffsize;                      if (r.szdiff >= 0)                          diffsize = "+" + r.szdiff.ToString();                      else                          diffsize = r.szdiff.ToString();                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("size"' diffsize);                      attribs.Add("url"' r.url);                      attribs.Add("reason"' r.comment);                        // This block handles: New page creations                      if (r.newpage)                      {                          bool createSpecial = false;                            // New pages created by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.newBig)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5010 + userOffset' ref attribs);                          }                          else if (r.szdiff <= config.newSmall)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5020 + userOffset' ref attribs);                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5000 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Article is on watchlist                          // - Page title matches a BNA pattern                          // - Edit summary matches a BES pattern                            // Is the article on the watchlist?                          ListMatch wlm = listman.IsWatchedArticle(r.title' r.project);                          if (wlm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5030 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16301' (String)attribs["article"]));                              break;                          }                            // Does the page title match a BNA pattern?                          ListMatch eslm = listman.MatchesList(r.title' 12);                          if (eslm.Success)                          {                              // Matches BNA                              attribs.Add("watchword"' eslm.matchedItem);                              message = GetMessage(5040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' eslm.matchedItem));                              break;                          }                            // Does the edit summary match a BES pattern?                          ListMatch lm = listman.MatchesList(r.comment' 20);                          if (lm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' lm.matchedItem);                              message = GetMessage(95040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' lm.matchedItem));                              break;                          }                            // If we're still here that means                          // - the create didn't get ignored by adminlist or whitelist                          // - the create didn't match any watch patterns                          // Now' if any of the following is true' we'll must report it.                          // - Create by blacklisted user                          // - Create by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // Created by an unlisted reguser with non-special create size' ignore                          if ((userOffset == 4) && !createSpecial)                              return;                            // Else: Create had special size' so let it shown (default)' don't return!                      }                      // This block handles: Page edits                      else                      {                          bool editSpecial = false;                            // Edit by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.editBig)                          {                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5110 + userOffset' ref attribs);                              editSpecial = true;                          }                          else if (r.szdiff <= config.editBlank)                          {                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5120 + userOffset' ref attribs);                              editSpecial = true;                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5100 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Edit summary matches a BES pattern                          // - Edit blanked the page                          // - Edit replaced the page                          // - Article is on watchlist                            // Does the edit summary match a BES pattern?                          ListMatch elm = listman.MatchesList(r.comment' 20);                          if (elm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' elm.matchedItem);                              message = GetMessage(95130 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16310' r.comment' (String)attribs["article"]));                              break;                          }                            // Did the user user blank the page?                          if (project.rautosummBlank.IsMatch(r.comment))                          {                              message = GetMessage(96010 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16311' (String)attribs["article"]));                              break;                          }                            Match rplm = project.rautosummReplace.Match(r.comment);                          if (rplm.Success)                          {                              // The user replaced the page.                              try                              {                                  attribs.Add("profanity"' rplm.Groups["item1"].Captures[0].Value);                                  message = GetMessage(96020 + userOffset' ref attribs);                              }                              catch (ArgumentOutOfRangeException)                              {                                  // This wiki probably doesn't have a profanity attribute                                  message = GetMessage(96030 + userOffset' ref attribs);                              }                              break;                          }                            // Is the article on the watchlist?                          ListMatch welm = listman.IsWatchedArticle(r.title' r.project);                          if (welm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5130 + userOffset' ref attribs);                              break;                          }                            // If we're still here that means                          // - the edit didn't get ignored by adminlist or whitelist                          // - the edit didn't match any watch patterns                          // Now' if any of the following is true' we must still report it.                          // - Edit by blacklisted user                          // - Edit by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // If nothing special about the edit' return to ignore                          if (!editSpecial)                              return;                      }                      break;                  case RCEvent.EventType.move:                      // if moves are softhidden hide moves by admin' bot or whitelist                      if ((config.feedFilterEventMove == 2) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                      {                          return;                      }                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("fromname"' project.interwikiLink + r.title);                      attribs.Add("cfromname"' r.title);                      attribs.Add("toname"' project.interwikiLink + r.movedTo);                      attribs.Add("ctoname"' r.movedTo);                      attribs.Add("url"' r.blockLength); //The blockLength field stores the moveFrom URL                      attribs.Add("reason"' r.comment);                      message = GetMessage(5500 + userOffset' ref attribs);                      break;                  case RCEvent.EventType.block:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.title.Split(new char[] { ':' }' 2)[1]));                      attribs.Add("length"' r.blockLength);                      attribs.Add("reason"' r.comment);                      message = GetMessage(5400' ref attribs);                      //If the blocked user (r.title) isn't botlisted' add to blacklist                      if (listman.ClassifyEditor(r.title.Split(new char[] { ':' }' 2)[1]' r.project) != ListManager.UserType.bot)                      {                          //If this isn't an indefinite/infinite block' add to blacklist                          if ((r.blockLength.ToLower() != "indefinite") && (r.blockLength.ToLower() != "infinite"))                          {                                                               // 2'678'400 seconds = 744 hours = 31 days                              int listLen = Convert.ToInt32(CVNBotUtils.ParseDateTimeLength(r.blockLength' 2678400) * 2.5);                              string blComment = "Autoblacklist: " + r.comment + " on " + r.project;                              message += "\n" + listman.AddUserToList(r.title.Split(new char[] { ':' }' 2)[1]' "" //Global bl                                  ' ListManager.UserType.blacklisted' r.user' blComment' listLen);                              Broadcast("BL"' "ADD"' r.title.Split(new char[] { ':' }' 2)[1]' listLen' blComment' r.user);                          }                      }                      break;                  case RCEvent.EventType.unblock:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("reason"' r.comment);                      message = GetMessage(5700' ref attribs);                      break;                  case RCEvent.EventType.delete:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      attribs.Add("reason"' r.comment);                      message = GetMessage(05300' ref attribs);                      break;                  case RCEvent.EventType.newuser:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("caurl"' "https://meta.wikimedia.org/wiki/Special:CentralAuth/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch = listman.MatchesList(r.user' 11);                      if (bnuMatch.Success && feedFilterThisEvent == 1)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch.matchedItem);                          attribs.Add("wwreason"' bnuMatch.matchedReason);                          message = GetMessage(5201' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5200' ref attribs);                      }                      break;                  case RCEvent.EventType.newuser2:                      attribs.Add("creator"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ccreator"' r.user);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.title);                      attribs.Add("ceditor"' r.title);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch2 = listman.MatchesList(r.user' 11);                      if (bnuMatch2.Success)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch2.matchedItem);                          attribs.Add("wwreason"' bnuMatch2.matchedReason);                          message = GetMessage(5211' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch2.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5210' ref attribs);                      }                      break;                  case RCEvent.EventType.upload:                      int uMsg = 5600;                        // Check if the edit summary matches BES                      ListMatch ubes2 = listman.MatchesList(r.comment' 20);                      if (ubes2.Success)                      {                          attribs.Add("watchword"' ubes2.matchedItem);                          attribs.Add("lmreason"' ubes2.matchedReason);                          uMsg = 95620;                      }                        // Now check if the title matches BES                      ListMatch ubes1 = listman.MatchesList(r.title' 20);                      if (ubes1.Success)                      {                          attribs.Add("watchword"' ubes1.matchedItem);                          attribs.Add("lmreason"' ubes1.matchedReason);                          uMsg = 95620;                      }                        // Check if upload is watched                      ListMatch uwa = listman.IsWatchedArticle(r.title' r.project);                      if (uwa.Success)                          uMsg = 5610;                        // If normal and uploaded by an admin' bot or whitelisted person always hide                      if ((uMsg == 5600) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                          return;                        // if normal and uploads are softhidden hide normal user and anon aswell                      if ((uMsg == 5600) && (config.feedFilterEventUpload == 2) && ((userOffset == 3) || (userOffset == 4)))                          return;                        // If our message is 95620' we might need to truncate r.comment                      if (uMsg == 95620)                      {                          if (r.comment.Length > 25)                              r.comment = r.comment.Substring(0' 23) + "...";                      }                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("uploaditem"' project.interwikiLink + r.title);                      attribs.Add("cuploaditem"' r.title);                      attribs.Add("reason"' r.comment);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(userOffset + uMsg' ref attribs);                      break;                  case RCEvent.EventType.protect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in protect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5900' ref attribs);                      break;                  case RCEvent.EventType.unprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in unprotect is fine' it's just the pagetitle                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(5901' ref attribs);                      break;                  case RCEvent.EventType.modifyprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in modifyprotect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5902' ref attribs);                      break;              }
Magic Number,CVNBot,Program,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Program.cs,ReactToRCEvent,The following statement contains a magic number: switch (r.eventtype)              {                  // This case handles:                  // - New page creations                  // - Page edits                  case RCEvent.EventType.edit:                      String diffsize;                      if (r.szdiff >= 0)                          diffsize = "+" + r.szdiff.ToString();                      else                          diffsize = r.szdiff.ToString();                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("size"' diffsize);                      attribs.Add("url"' r.url);                      attribs.Add("reason"' r.comment);                        // This block handles: New page creations                      if (r.newpage)                      {                          bool createSpecial = false;                            // New pages created by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.newBig)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5010 + userOffset' ref attribs);                          }                          else if (r.szdiff <= config.newSmall)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5020 + userOffset' ref attribs);                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5000 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Article is on watchlist                          // - Page title matches a BNA pattern                          // - Edit summary matches a BES pattern                            // Is the article on the watchlist?                          ListMatch wlm = listman.IsWatchedArticle(r.title' r.project);                          if (wlm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5030 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16301' (String)attribs["article"]));                              break;                          }                            // Does the page title match a BNA pattern?                          ListMatch eslm = listman.MatchesList(r.title' 12);                          if (eslm.Success)                          {                              // Matches BNA                              attribs.Add("watchword"' eslm.matchedItem);                              message = GetMessage(5040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' eslm.matchedItem));                              break;                          }                            // Does the edit summary match a BES pattern?                          ListMatch lm = listman.MatchesList(r.comment' 20);                          if (lm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' lm.matchedItem);                              message = GetMessage(95040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' lm.matchedItem));                              break;                          }                            // If we're still here that means                          // - the create didn't get ignored by adminlist or whitelist                          // - the create didn't match any watch patterns                          // Now' if any of the following is true' we'll must report it.                          // - Create by blacklisted user                          // - Create by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // Created by an unlisted reguser with non-special create size' ignore                          if ((userOffset == 4) && !createSpecial)                              return;                            // Else: Create had special size' so let it shown (default)' don't return!                      }                      // This block handles: Page edits                      else                      {                          bool editSpecial = false;                            // Edit by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.editBig)                          {                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5110 + userOffset' ref attribs);                              editSpecial = true;                          }                          else if (r.szdiff <= config.editBlank)                          {                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5120 + userOffset' ref attribs);                              editSpecial = true;                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5100 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Edit summary matches a BES pattern                          // - Edit blanked the page                          // - Edit replaced the page                          // - Article is on watchlist                            // Does the edit summary match a BES pattern?                          ListMatch elm = listman.MatchesList(r.comment' 20);                          if (elm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' elm.matchedItem);                              message = GetMessage(95130 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16310' r.comment' (String)attribs["article"]));                              break;                          }                            // Did the user user blank the page?                          if (project.rautosummBlank.IsMatch(r.comment))                          {                              message = GetMessage(96010 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16311' (String)attribs["article"]));                              break;                          }                            Match rplm = project.rautosummReplace.Match(r.comment);                          if (rplm.Success)                          {                              // The user replaced the page.                              try                              {                                  attribs.Add("profanity"' rplm.Groups["item1"].Captures[0].Value);                                  message = GetMessage(96020 + userOffset' ref attribs);                              }                              catch (ArgumentOutOfRangeException)                              {                                  // This wiki probably doesn't have a profanity attribute                                  message = GetMessage(96030 + userOffset' ref attribs);                              }                              break;                          }                            // Is the article on the watchlist?                          ListMatch welm = listman.IsWatchedArticle(r.title' r.project);                          if (welm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5130 + userOffset' ref attribs);                              break;                          }                            // If we're still here that means                          // - the edit didn't get ignored by adminlist or whitelist                          // - the edit didn't match any watch patterns                          // Now' if any of the following is true' we must still report it.                          // - Edit by blacklisted user                          // - Edit by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // If nothing special about the edit' return to ignore                          if (!editSpecial)                              return;                      }                      break;                  case RCEvent.EventType.move:                      // if moves are softhidden hide moves by admin' bot or whitelist                      if ((config.feedFilterEventMove == 2) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                      {                          return;                      }                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("fromname"' project.interwikiLink + r.title);                      attribs.Add("cfromname"' r.title);                      attribs.Add("toname"' project.interwikiLink + r.movedTo);                      attribs.Add("ctoname"' r.movedTo);                      attribs.Add("url"' r.blockLength); //The blockLength field stores the moveFrom URL                      attribs.Add("reason"' r.comment);                      message = GetMessage(5500 + userOffset' ref attribs);                      break;                  case RCEvent.EventType.block:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.title.Split(new char[] { ':' }' 2)[1]));                      attribs.Add("length"' r.blockLength);                      attribs.Add("reason"' r.comment);                      message = GetMessage(5400' ref attribs);                      //If the blocked user (r.title) isn't botlisted' add to blacklist                      if (listman.ClassifyEditor(r.title.Split(new char[] { ':' }' 2)[1]' r.project) != ListManager.UserType.bot)                      {                          //If this isn't an indefinite/infinite block' add to blacklist                          if ((r.blockLength.ToLower() != "indefinite") && (r.blockLength.ToLower() != "infinite"))                          {                                                               // 2'678'400 seconds = 744 hours = 31 days                              int listLen = Convert.ToInt32(CVNBotUtils.ParseDateTimeLength(r.blockLength' 2678400) * 2.5);                              string blComment = "Autoblacklist: " + r.comment + " on " + r.project;                              message += "\n" + listman.AddUserToList(r.title.Split(new char[] { ':' }' 2)[1]' "" //Global bl                                  ' ListManager.UserType.blacklisted' r.user' blComment' listLen);                              Broadcast("BL"' "ADD"' r.title.Split(new char[] { ':' }' 2)[1]' listLen' blComment' r.user);                          }                      }                      break;                  case RCEvent.EventType.unblock:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("reason"' r.comment);                      message = GetMessage(5700' ref attribs);                      break;                  case RCEvent.EventType.delete:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      attribs.Add("reason"' r.comment);                      message = GetMessage(05300' ref attribs);                      break;                  case RCEvent.EventType.newuser:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("caurl"' "https://meta.wikimedia.org/wiki/Special:CentralAuth/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch = listman.MatchesList(r.user' 11);                      if (bnuMatch.Success && feedFilterThisEvent == 1)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch.matchedItem);                          attribs.Add("wwreason"' bnuMatch.matchedReason);                          message = GetMessage(5201' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5200' ref attribs);                      }                      break;                  case RCEvent.EventType.newuser2:                      attribs.Add("creator"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ccreator"' r.user);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.title);                      attribs.Add("ceditor"' r.title);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch2 = listman.MatchesList(r.user' 11);                      if (bnuMatch2.Success)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch2.matchedItem);                          attribs.Add("wwreason"' bnuMatch2.matchedReason);                          message = GetMessage(5211' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch2.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5210' ref attribs);                      }                      break;                  case RCEvent.EventType.upload:                      int uMsg = 5600;                        // Check if the edit summary matches BES                      ListMatch ubes2 = listman.MatchesList(r.comment' 20);                      if (ubes2.Success)                      {                          attribs.Add("watchword"' ubes2.matchedItem);                          attribs.Add("lmreason"' ubes2.matchedReason);                          uMsg = 95620;                      }                        // Now check if the title matches BES                      ListMatch ubes1 = listman.MatchesList(r.title' 20);                      if (ubes1.Success)                      {                          attribs.Add("watchword"' ubes1.matchedItem);                          attribs.Add("lmreason"' ubes1.matchedReason);                          uMsg = 95620;                      }                        // Check if upload is watched                      ListMatch uwa = listman.IsWatchedArticle(r.title' r.project);                      if (uwa.Success)                          uMsg = 5610;                        // If normal and uploaded by an admin' bot or whitelisted person always hide                      if ((uMsg == 5600) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                          return;                        // if normal and uploads are softhidden hide normal user and anon aswell                      if ((uMsg == 5600) && (config.feedFilterEventUpload == 2) && ((userOffset == 3) || (userOffset == 4)))                          return;                        // If our message is 95620' we might need to truncate r.comment                      if (uMsg == 95620)                      {                          if (r.comment.Length > 25)                              r.comment = r.comment.Substring(0' 23) + "...";                      }                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("uploaditem"' project.interwikiLink + r.title);                      attribs.Add("cuploaditem"' r.title);                      attribs.Add("reason"' r.comment);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(userOffset + uMsg' ref attribs);                      break;                  case RCEvent.EventType.protect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in protect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5900' ref attribs);                      break;                  case RCEvent.EventType.unprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in unprotect is fine' it's just the pagetitle                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(5901' ref attribs);                      break;                  case RCEvent.EventType.modifyprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in modifyprotect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5902' ref attribs);                      break;              }
Magic Number,CVNBot,Program,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Program.cs,ReactToRCEvent,The following statement contains a magic number: switch (r.eventtype)              {                  // This case handles:                  // - New page creations                  // - Page edits                  case RCEvent.EventType.edit:                      String diffsize;                      if (r.szdiff >= 0)                          diffsize = "+" + r.szdiff.ToString();                      else                          diffsize = r.szdiff.ToString();                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("size"' diffsize);                      attribs.Add("url"' r.url);                      attribs.Add("reason"' r.comment);                        // This block handles: New page creations                      if (r.newpage)                      {                          bool createSpecial = false;                            // New pages created by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.newBig)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5010 + userOffset' ref attribs);                          }                          else if (r.szdiff <= config.newSmall)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5020 + userOffset' ref attribs);                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5000 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Article is on watchlist                          // - Page title matches a BNA pattern                          // - Edit summary matches a BES pattern                            // Is the article on the watchlist?                          ListMatch wlm = listman.IsWatchedArticle(r.title' r.project);                          if (wlm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5030 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16301' (String)attribs["article"]));                              break;                          }                            // Does the page title match a BNA pattern?                          ListMatch eslm = listman.MatchesList(r.title' 12);                          if (eslm.Success)                          {                              // Matches BNA                              attribs.Add("watchword"' eslm.matchedItem);                              message = GetMessage(5040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' eslm.matchedItem));                              break;                          }                            // Does the edit summary match a BES pattern?                          ListMatch lm = listman.MatchesList(r.comment' 20);                          if (lm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' lm.matchedItem);                              message = GetMessage(95040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' lm.matchedItem));                              break;                          }                            // If we're still here that means                          // - the create didn't get ignored by adminlist or whitelist                          // - the create didn't match any watch patterns                          // Now' if any of the following is true' we'll must report it.                          // - Create by blacklisted user                          // - Create by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // Created by an unlisted reguser with non-special create size' ignore                          if ((userOffset == 4) && !createSpecial)                              return;                            // Else: Create had special size' so let it shown (default)' don't return!                      }                      // This block handles: Page edits                      else                      {                          bool editSpecial = false;                            // Edit by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.editBig)                          {                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5110 + userOffset' ref attribs);                              editSpecial = true;                          }                          else if (r.szdiff <= config.editBlank)                          {                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5120 + userOffset' ref attribs);                              editSpecial = true;                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5100 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Edit summary matches a BES pattern                          // - Edit blanked the page                          // - Edit replaced the page                          // - Article is on watchlist                            // Does the edit summary match a BES pattern?                          ListMatch elm = listman.MatchesList(r.comment' 20);                          if (elm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' elm.matchedItem);                              message = GetMessage(95130 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16310' r.comment' (String)attribs["article"]));                              break;                          }                            // Did the user user blank the page?                          if (project.rautosummBlank.IsMatch(r.comment))                          {                              message = GetMessage(96010 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16311' (String)attribs["article"]));                              break;                          }                            Match rplm = project.rautosummReplace.Match(r.comment);                          if (rplm.Success)                          {                              // The user replaced the page.                              try                              {                                  attribs.Add("profanity"' rplm.Groups["item1"].Captures[0].Value);                                  message = GetMessage(96020 + userOffset' ref attribs);                              }                              catch (ArgumentOutOfRangeException)                              {                                  // This wiki probably doesn't have a profanity attribute                                  message = GetMessage(96030 + userOffset' ref attribs);                              }                              break;                          }                            // Is the article on the watchlist?                          ListMatch welm = listman.IsWatchedArticle(r.title' r.project);                          if (welm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5130 + userOffset' ref attribs);                              break;                          }                            // If we're still here that means                          // - the edit didn't get ignored by adminlist or whitelist                          // - the edit didn't match any watch patterns                          // Now' if any of the following is true' we must still report it.                          // - Edit by blacklisted user                          // - Edit by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // If nothing special about the edit' return to ignore                          if (!editSpecial)                              return;                      }                      break;                  case RCEvent.EventType.move:                      // if moves are softhidden hide moves by admin' bot or whitelist                      if ((config.feedFilterEventMove == 2) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                      {                          return;                      }                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("fromname"' project.interwikiLink + r.title);                      attribs.Add("cfromname"' r.title);                      attribs.Add("toname"' project.interwikiLink + r.movedTo);                      attribs.Add("ctoname"' r.movedTo);                      attribs.Add("url"' r.blockLength); //The blockLength field stores the moveFrom URL                      attribs.Add("reason"' r.comment);                      message = GetMessage(5500 + userOffset' ref attribs);                      break;                  case RCEvent.EventType.block:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.title.Split(new char[] { ':' }' 2)[1]));                      attribs.Add("length"' r.blockLength);                      attribs.Add("reason"' r.comment);                      message = GetMessage(5400' ref attribs);                      //If the blocked user (r.title) isn't botlisted' add to blacklist                      if (listman.ClassifyEditor(r.title.Split(new char[] { ':' }' 2)[1]' r.project) != ListManager.UserType.bot)                      {                          //If this isn't an indefinite/infinite block' add to blacklist                          if ((r.blockLength.ToLower() != "indefinite") && (r.blockLength.ToLower() != "infinite"))                          {                                                               // 2'678'400 seconds = 744 hours = 31 days                              int listLen = Convert.ToInt32(CVNBotUtils.ParseDateTimeLength(r.blockLength' 2678400) * 2.5);                              string blComment = "Autoblacklist: " + r.comment + " on " + r.project;                              message += "\n" + listman.AddUserToList(r.title.Split(new char[] { ':' }' 2)[1]' "" //Global bl                                  ' ListManager.UserType.blacklisted' r.user' blComment' listLen);                              Broadcast("BL"' "ADD"' r.title.Split(new char[] { ':' }' 2)[1]' listLen' blComment' r.user);                          }                      }                      break;                  case RCEvent.EventType.unblock:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("reason"' r.comment);                      message = GetMessage(5700' ref attribs);                      break;                  case RCEvent.EventType.delete:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      attribs.Add("reason"' r.comment);                      message = GetMessage(05300' ref attribs);                      break;                  case RCEvent.EventType.newuser:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("caurl"' "https://meta.wikimedia.org/wiki/Special:CentralAuth/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch = listman.MatchesList(r.user' 11);                      if (bnuMatch.Success && feedFilterThisEvent == 1)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch.matchedItem);                          attribs.Add("wwreason"' bnuMatch.matchedReason);                          message = GetMessage(5201' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5200' ref attribs);                      }                      break;                  case RCEvent.EventType.newuser2:                      attribs.Add("creator"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ccreator"' r.user);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.title);                      attribs.Add("ceditor"' r.title);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch2 = listman.MatchesList(r.user' 11);                      if (bnuMatch2.Success)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch2.matchedItem);                          attribs.Add("wwreason"' bnuMatch2.matchedReason);                          message = GetMessage(5211' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch2.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5210' ref attribs);                      }                      break;                  case RCEvent.EventType.upload:                      int uMsg = 5600;                        // Check if the edit summary matches BES                      ListMatch ubes2 = listman.MatchesList(r.comment' 20);                      if (ubes2.Success)                      {                          attribs.Add("watchword"' ubes2.matchedItem);                          attribs.Add("lmreason"' ubes2.matchedReason);                          uMsg = 95620;                      }                        // Now check if the title matches BES                      ListMatch ubes1 = listman.MatchesList(r.title' 20);                      if (ubes1.Success)                      {                          attribs.Add("watchword"' ubes1.matchedItem);                          attribs.Add("lmreason"' ubes1.matchedReason);                          uMsg = 95620;                      }                        // Check if upload is watched                      ListMatch uwa = listman.IsWatchedArticle(r.title' r.project);                      if (uwa.Success)                          uMsg = 5610;                        // If normal and uploaded by an admin' bot or whitelisted person always hide                      if ((uMsg == 5600) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                          return;                        // if normal and uploads are softhidden hide normal user and anon aswell                      if ((uMsg == 5600) && (config.feedFilterEventUpload == 2) && ((userOffset == 3) || (userOffset == 4)))                          return;                        // If our message is 95620' we might need to truncate r.comment                      if (uMsg == 95620)                      {                          if (r.comment.Length > 25)                              r.comment = r.comment.Substring(0' 23) + "...";                      }                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("uploaditem"' project.interwikiLink + r.title);                      attribs.Add("cuploaditem"' r.title);                      attribs.Add("reason"' r.comment);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(userOffset + uMsg' ref attribs);                      break;                  case RCEvent.EventType.protect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in protect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5900' ref attribs);                      break;                  case RCEvent.EventType.unprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in unprotect is fine' it's just the pagetitle                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(5901' ref attribs);                      break;                  case RCEvent.EventType.modifyprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in modifyprotect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5902' ref attribs);                      break;              }
Magic Number,CVNBot,Program,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Program.cs,ReactToRCEvent,The following statement contains a magic number: switch (r.eventtype)              {                  // This case handles:                  // - New page creations                  // - Page edits                  case RCEvent.EventType.edit:                      String diffsize;                      if (r.szdiff >= 0)                          diffsize = "+" + r.szdiff.ToString();                      else                          diffsize = r.szdiff.ToString();                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("size"' diffsize);                      attribs.Add("url"' r.url);                      attribs.Add("reason"' r.comment);                        // This block handles: New page creations                      if (r.newpage)                      {                          bool createSpecial = false;                            // New pages created by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.newBig)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5010 + userOffset' ref attribs);                          }                          else if (r.szdiff <= config.newSmall)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5020 + userOffset' ref attribs);                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5000 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Article is on watchlist                          // - Page title matches a BNA pattern                          // - Edit summary matches a BES pattern                            // Is the article on the watchlist?                          ListMatch wlm = listman.IsWatchedArticle(r.title' r.project);                          if (wlm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5030 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16301' (String)attribs["article"]));                              break;                          }                            // Does the page title match a BNA pattern?                          ListMatch eslm = listman.MatchesList(r.title' 12);                          if (eslm.Success)                          {                              // Matches BNA                              attribs.Add("watchword"' eslm.matchedItem);                              message = GetMessage(5040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' eslm.matchedItem));                              break;                          }                            // Does the edit summary match a BES pattern?                          ListMatch lm = listman.MatchesList(r.comment' 20);                          if (lm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' lm.matchedItem);                              message = GetMessage(95040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' lm.matchedItem));                              break;                          }                            // If we're still here that means                          // - the create didn't get ignored by adminlist or whitelist                          // - the create didn't match any watch patterns                          // Now' if any of the following is true' we'll must report it.                          // - Create by blacklisted user                          // - Create by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // Created by an unlisted reguser with non-special create size' ignore                          if ((userOffset == 4) && !createSpecial)                              return;                            // Else: Create had special size' so let it shown (default)' don't return!                      }                      // This block handles: Page edits                      else                      {                          bool editSpecial = false;                            // Edit by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.editBig)                          {                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5110 + userOffset' ref attribs);                              editSpecial = true;                          }                          else if (r.szdiff <= config.editBlank)                          {                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5120 + userOffset' ref attribs);                              editSpecial = true;                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5100 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Edit summary matches a BES pattern                          // - Edit blanked the page                          // - Edit replaced the page                          // - Article is on watchlist                            // Does the edit summary match a BES pattern?                          ListMatch elm = listman.MatchesList(r.comment' 20);                          if (elm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' elm.matchedItem);                              message = GetMessage(95130 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16310' r.comment' (String)attribs["article"]));                              break;                          }                            // Did the user user blank the page?                          if (project.rautosummBlank.IsMatch(r.comment))                          {                              message = GetMessage(96010 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16311' (String)attribs["article"]));                              break;                          }                            Match rplm = project.rautosummReplace.Match(r.comment);                          if (rplm.Success)                          {                              // The user replaced the page.                              try                              {                                  attribs.Add("profanity"' rplm.Groups["item1"].Captures[0].Value);                                  message = GetMessage(96020 + userOffset' ref attribs);                              }                              catch (ArgumentOutOfRangeException)                              {                                  // This wiki probably doesn't have a profanity attribute                                  message = GetMessage(96030 + userOffset' ref attribs);                              }                              break;                          }                            // Is the article on the watchlist?                          ListMatch welm = listman.IsWatchedArticle(r.title' r.project);                          if (welm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5130 + userOffset' ref attribs);                              break;                          }                            // If we're still here that means                          // - the edit didn't get ignored by adminlist or whitelist                          // - the edit didn't match any watch patterns                          // Now' if any of the following is true' we must still report it.                          // - Edit by blacklisted user                          // - Edit by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // If nothing special about the edit' return to ignore                          if (!editSpecial)                              return;                      }                      break;                  case RCEvent.EventType.move:                      // if moves are softhidden hide moves by admin' bot or whitelist                      if ((config.feedFilterEventMove == 2) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                      {                          return;                      }                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("fromname"' project.interwikiLink + r.title);                      attribs.Add("cfromname"' r.title);                      attribs.Add("toname"' project.interwikiLink + r.movedTo);                      attribs.Add("ctoname"' r.movedTo);                      attribs.Add("url"' r.blockLength); //The blockLength field stores the moveFrom URL                      attribs.Add("reason"' r.comment);                      message = GetMessage(5500 + userOffset' ref attribs);                      break;                  case RCEvent.EventType.block:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.title.Split(new char[] { ':' }' 2)[1]));                      attribs.Add("length"' r.blockLength);                      attribs.Add("reason"' r.comment);                      message = GetMessage(5400' ref attribs);                      //If the blocked user (r.title) isn't botlisted' add to blacklist                      if (listman.ClassifyEditor(r.title.Split(new char[] { ':' }' 2)[1]' r.project) != ListManager.UserType.bot)                      {                          //If this isn't an indefinite/infinite block' add to blacklist                          if ((r.blockLength.ToLower() != "indefinite") && (r.blockLength.ToLower() != "infinite"))                          {                                                               // 2'678'400 seconds = 744 hours = 31 days                              int listLen = Convert.ToInt32(CVNBotUtils.ParseDateTimeLength(r.blockLength' 2678400) * 2.5);                              string blComment = "Autoblacklist: " + r.comment + " on " + r.project;                              message += "\n" + listman.AddUserToList(r.title.Split(new char[] { ':' }' 2)[1]' "" //Global bl                                  ' ListManager.UserType.blacklisted' r.user' blComment' listLen);                              Broadcast("BL"' "ADD"' r.title.Split(new char[] { ':' }' 2)[1]' listLen' blComment' r.user);                          }                      }                      break;                  case RCEvent.EventType.unblock:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("reason"' r.comment);                      message = GetMessage(5700' ref attribs);                      break;                  case RCEvent.EventType.delete:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      attribs.Add("reason"' r.comment);                      message = GetMessage(05300' ref attribs);                      break;                  case RCEvent.EventType.newuser:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("caurl"' "https://meta.wikimedia.org/wiki/Special:CentralAuth/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch = listman.MatchesList(r.user' 11);                      if (bnuMatch.Success && feedFilterThisEvent == 1)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch.matchedItem);                          attribs.Add("wwreason"' bnuMatch.matchedReason);                          message = GetMessage(5201' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5200' ref attribs);                      }                      break;                  case RCEvent.EventType.newuser2:                      attribs.Add("creator"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ccreator"' r.user);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.title);                      attribs.Add("ceditor"' r.title);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch2 = listman.MatchesList(r.user' 11);                      if (bnuMatch2.Success)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch2.matchedItem);                          attribs.Add("wwreason"' bnuMatch2.matchedReason);                          message = GetMessage(5211' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch2.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5210' ref attribs);                      }                      break;                  case RCEvent.EventType.upload:                      int uMsg = 5600;                        // Check if the edit summary matches BES                      ListMatch ubes2 = listman.MatchesList(r.comment' 20);                      if (ubes2.Success)                      {                          attribs.Add("watchword"' ubes2.matchedItem);                          attribs.Add("lmreason"' ubes2.matchedReason);                          uMsg = 95620;                      }                        // Now check if the title matches BES                      ListMatch ubes1 = listman.MatchesList(r.title' 20);                      if (ubes1.Success)                      {                          attribs.Add("watchword"' ubes1.matchedItem);                          attribs.Add("lmreason"' ubes1.matchedReason);                          uMsg = 95620;                      }                        // Check if upload is watched                      ListMatch uwa = listman.IsWatchedArticle(r.title' r.project);                      if (uwa.Success)                          uMsg = 5610;                        // If normal and uploaded by an admin' bot or whitelisted person always hide                      if ((uMsg == 5600) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                          return;                        // if normal and uploads are softhidden hide normal user and anon aswell                      if ((uMsg == 5600) && (config.feedFilterEventUpload == 2) && ((userOffset == 3) || (userOffset == 4)))                          return;                        // If our message is 95620' we might need to truncate r.comment                      if (uMsg == 95620)                      {                          if (r.comment.Length > 25)                              r.comment = r.comment.Substring(0' 23) + "...";                      }                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("uploaditem"' project.interwikiLink + r.title);                      attribs.Add("cuploaditem"' r.title);                      attribs.Add("reason"' r.comment);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(userOffset + uMsg' ref attribs);                      break;                  case RCEvent.EventType.protect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in protect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5900' ref attribs);                      break;                  case RCEvent.EventType.unprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in unprotect is fine' it's just the pagetitle                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(5901' ref attribs);                      break;                  case RCEvent.EventType.modifyprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in modifyprotect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5902' ref attribs);                      break;              }
Magic Number,CVNBot,Program,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Program.cs,ReactToRCEvent,The following statement contains a magic number: switch (r.eventtype)              {                  // This case handles:                  // - New page creations                  // - Page edits                  case RCEvent.EventType.edit:                      String diffsize;                      if (r.szdiff >= 0)                          diffsize = "+" + r.szdiff.ToString();                      else                          diffsize = r.szdiff.ToString();                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("size"' diffsize);                      attribs.Add("url"' r.url);                      attribs.Add("reason"' r.comment);                        // This block handles: New page creations                      if (r.newpage)                      {                          bool createSpecial = false;                            // New pages created by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.newBig)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5010 + userOffset' ref attribs);                          }                          else if (r.szdiff <= config.newSmall)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5020 + userOffset' ref attribs);                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5000 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Article is on watchlist                          // - Page title matches a BNA pattern                          // - Edit summary matches a BES pattern                            // Is the article on the watchlist?                          ListMatch wlm = listman.IsWatchedArticle(r.title' r.project);                          if (wlm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5030 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16301' (String)attribs["article"]));                              break;                          }                            // Does the page title match a BNA pattern?                          ListMatch eslm = listman.MatchesList(r.title' 12);                          if (eslm.Success)                          {                              // Matches BNA                              attribs.Add("watchword"' eslm.matchedItem);                              message = GetMessage(5040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' eslm.matchedItem));                              break;                          }                            // Does the edit summary match a BES pattern?                          ListMatch lm = listman.MatchesList(r.comment' 20);                          if (lm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' lm.matchedItem);                              message = GetMessage(95040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' lm.matchedItem));                              break;                          }                            // If we're still here that means                          // - the create didn't get ignored by adminlist or whitelist                          // - the create didn't match any watch patterns                          // Now' if any of the following is true' we'll must report it.                          // - Create by blacklisted user                          // - Create by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // Created by an unlisted reguser with non-special create size' ignore                          if ((userOffset == 4) && !createSpecial)                              return;                            // Else: Create had special size' so let it shown (default)' don't return!                      }                      // This block handles: Page edits                      else                      {                          bool editSpecial = false;                            // Edit by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.editBig)                          {                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5110 + userOffset' ref attribs);                              editSpecial = true;                          }                          else if (r.szdiff <= config.editBlank)                          {                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5120 + userOffset' ref attribs);                              editSpecial = true;                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5100 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Edit summary matches a BES pattern                          // - Edit blanked the page                          // - Edit replaced the page                          // - Article is on watchlist                            // Does the edit summary match a BES pattern?                          ListMatch elm = listman.MatchesList(r.comment' 20);                          if (elm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' elm.matchedItem);                              message = GetMessage(95130 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16310' r.comment' (String)attribs["article"]));                              break;                          }                            // Did the user user blank the page?                          if (project.rautosummBlank.IsMatch(r.comment))                          {                              message = GetMessage(96010 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16311' (String)attribs["article"]));                              break;                          }                            Match rplm = project.rautosummReplace.Match(r.comment);                          if (rplm.Success)                          {                              // The user replaced the page.                              try                              {                                  attribs.Add("profanity"' rplm.Groups["item1"].Captures[0].Value);                                  message = GetMessage(96020 + userOffset' ref attribs);                              }                              catch (ArgumentOutOfRangeException)                              {                                  // This wiki probably doesn't have a profanity attribute                                  message = GetMessage(96030 + userOffset' ref attribs);                              }                              break;                          }                            // Is the article on the watchlist?                          ListMatch welm = listman.IsWatchedArticle(r.title' r.project);                          if (welm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5130 + userOffset' ref attribs);                              break;                          }                            // If we're still here that means                          // - the edit didn't get ignored by adminlist or whitelist                          // - the edit didn't match any watch patterns                          // Now' if any of the following is true' we must still report it.                          // - Edit by blacklisted user                          // - Edit by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // If nothing special about the edit' return to ignore                          if (!editSpecial)                              return;                      }                      break;                  case RCEvent.EventType.move:                      // if moves are softhidden hide moves by admin' bot or whitelist                      if ((config.feedFilterEventMove == 2) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                      {                          return;                      }                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("fromname"' project.interwikiLink + r.title);                      attribs.Add("cfromname"' r.title);                      attribs.Add("toname"' project.interwikiLink + r.movedTo);                      attribs.Add("ctoname"' r.movedTo);                      attribs.Add("url"' r.blockLength); //The blockLength field stores the moveFrom URL                      attribs.Add("reason"' r.comment);                      message = GetMessage(5500 + userOffset' ref attribs);                      break;                  case RCEvent.EventType.block:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.title.Split(new char[] { ':' }' 2)[1]));                      attribs.Add("length"' r.blockLength);                      attribs.Add("reason"' r.comment);                      message = GetMessage(5400' ref attribs);                      //If the blocked user (r.title) isn't botlisted' add to blacklist                      if (listman.ClassifyEditor(r.title.Split(new char[] { ':' }' 2)[1]' r.project) != ListManager.UserType.bot)                      {                          //If this isn't an indefinite/infinite block' add to blacklist                          if ((r.blockLength.ToLower() != "indefinite") && (r.blockLength.ToLower() != "infinite"))                          {                                                               // 2'678'400 seconds = 744 hours = 31 days                              int listLen = Convert.ToInt32(CVNBotUtils.ParseDateTimeLength(r.blockLength' 2678400) * 2.5);                              string blComment = "Autoblacklist: " + r.comment + " on " + r.project;                              message += "\n" + listman.AddUserToList(r.title.Split(new char[] { ':' }' 2)[1]' "" //Global bl                                  ' ListManager.UserType.blacklisted' r.user' blComment' listLen);                              Broadcast("BL"' "ADD"' r.title.Split(new char[] { ':' }' 2)[1]' listLen' blComment' r.user);                          }                      }                      break;                  case RCEvent.EventType.unblock:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("reason"' r.comment);                      message = GetMessage(5700' ref attribs);                      break;                  case RCEvent.EventType.delete:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      attribs.Add("reason"' r.comment);                      message = GetMessage(05300' ref attribs);                      break;                  case RCEvent.EventType.newuser:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("caurl"' "https://meta.wikimedia.org/wiki/Special:CentralAuth/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch = listman.MatchesList(r.user' 11);                      if (bnuMatch.Success && feedFilterThisEvent == 1)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch.matchedItem);                          attribs.Add("wwreason"' bnuMatch.matchedReason);                          message = GetMessage(5201' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5200' ref attribs);                      }                      break;                  case RCEvent.EventType.newuser2:                      attribs.Add("creator"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ccreator"' r.user);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.title);                      attribs.Add("ceditor"' r.title);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch2 = listman.MatchesList(r.user' 11);                      if (bnuMatch2.Success)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch2.matchedItem);                          attribs.Add("wwreason"' bnuMatch2.matchedReason);                          message = GetMessage(5211' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch2.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5210' ref attribs);                      }                      break;                  case RCEvent.EventType.upload:                      int uMsg = 5600;                        // Check if the edit summary matches BES                      ListMatch ubes2 = listman.MatchesList(r.comment' 20);                      if (ubes2.Success)                      {                          attribs.Add("watchword"' ubes2.matchedItem);                          attribs.Add("lmreason"' ubes2.matchedReason);                          uMsg = 95620;                      }                        // Now check if the title matches BES                      ListMatch ubes1 = listman.MatchesList(r.title' 20);                      if (ubes1.Success)                      {                          attribs.Add("watchword"' ubes1.matchedItem);                          attribs.Add("lmreason"' ubes1.matchedReason);                          uMsg = 95620;                      }                        // Check if upload is watched                      ListMatch uwa = listman.IsWatchedArticle(r.title' r.project);                      if (uwa.Success)                          uMsg = 5610;                        // If normal and uploaded by an admin' bot or whitelisted person always hide                      if ((uMsg == 5600) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                          return;                        // if normal and uploads are softhidden hide normal user and anon aswell                      if ((uMsg == 5600) && (config.feedFilterEventUpload == 2) && ((userOffset == 3) || (userOffset == 4)))                          return;                        // If our message is 95620' we might need to truncate r.comment                      if (uMsg == 95620)                      {                          if (r.comment.Length > 25)                              r.comment = r.comment.Substring(0' 23) + "...";                      }                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("uploaditem"' project.interwikiLink + r.title);                      attribs.Add("cuploaditem"' r.title);                      attribs.Add("reason"' r.comment);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(userOffset + uMsg' ref attribs);                      break;                  case RCEvent.EventType.protect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in protect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5900' ref attribs);                      break;                  case RCEvent.EventType.unprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in unprotect is fine' it's just the pagetitle                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(5901' ref attribs);                      break;                  case RCEvent.EventType.modifyprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in modifyprotect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5902' ref attribs);                      break;              }
Magic Number,CVNBot,Program,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Program.cs,ReactToRCEvent,The following statement contains a magic number: switch (r.eventtype)              {                  // This case handles:                  // - New page creations                  // - Page edits                  case RCEvent.EventType.edit:                      String diffsize;                      if (r.szdiff >= 0)                          diffsize = "+" + r.szdiff.ToString();                      else                          diffsize = r.szdiff.ToString();                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("size"' diffsize);                      attribs.Add("url"' r.url);                      attribs.Add("reason"' r.comment);                        // This block handles: New page creations                      if (r.newpage)                      {                          bool createSpecial = false;                            // New pages created by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.newBig)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5010 + userOffset' ref attribs);                          }                          else if (r.szdiff <= config.newSmall)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5020 + userOffset' ref attribs);                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5000 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Article is on watchlist                          // - Page title matches a BNA pattern                          // - Edit summary matches a BES pattern                            // Is the article on the watchlist?                          ListMatch wlm = listman.IsWatchedArticle(r.title' r.project);                          if (wlm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5030 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16301' (String)attribs["article"]));                              break;                          }                            // Does the page title match a BNA pattern?                          ListMatch eslm = listman.MatchesList(r.title' 12);                          if (eslm.Success)                          {                              // Matches BNA                              attribs.Add("watchword"' eslm.matchedItem);                              message = GetMessage(5040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' eslm.matchedItem));                              break;                          }                            // Does the edit summary match a BES pattern?                          ListMatch lm = listman.MatchesList(r.comment' 20);                          if (lm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' lm.matchedItem);                              message = GetMessage(95040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' lm.matchedItem));                              break;                          }                            // If we're still here that means                          // - the create didn't get ignored by adminlist or whitelist                          // - the create didn't match any watch patterns                          // Now' if any of the following is true' we'll must report it.                          // - Create by blacklisted user                          // - Create by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // Created by an unlisted reguser with non-special create size' ignore                          if ((userOffset == 4) && !createSpecial)                              return;                            // Else: Create had special size' so let it shown (default)' don't return!                      }                      // This block handles: Page edits                      else                      {                          bool editSpecial = false;                            // Edit by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.editBig)                          {                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5110 + userOffset' ref attribs);                              editSpecial = true;                          }                          else if (r.szdiff <= config.editBlank)                          {                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5120 + userOffset' ref attribs);                              editSpecial = true;                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5100 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Edit summary matches a BES pattern                          // - Edit blanked the page                          // - Edit replaced the page                          // - Article is on watchlist                            // Does the edit summary match a BES pattern?                          ListMatch elm = listman.MatchesList(r.comment' 20);                          if (elm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' elm.matchedItem);                              message = GetMessage(95130 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16310' r.comment' (String)attribs["article"]));                              break;                          }                            // Did the user user blank the page?                          if (project.rautosummBlank.IsMatch(r.comment))                          {                              message = GetMessage(96010 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16311' (String)attribs["article"]));                              break;                          }                            Match rplm = project.rautosummReplace.Match(r.comment);                          if (rplm.Success)                          {                              // The user replaced the page.                              try                              {                                  attribs.Add("profanity"' rplm.Groups["item1"].Captures[0].Value);                                  message = GetMessage(96020 + userOffset' ref attribs);                              }                              catch (ArgumentOutOfRangeException)                              {                                  // This wiki probably doesn't have a profanity attribute                                  message = GetMessage(96030 + userOffset' ref attribs);                              }                              break;                          }                            // Is the article on the watchlist?                          ListMatch welm = listman.IsWatchedArticle(r.title' r.project);                          if (welm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5130 + userOffset' ref attribs);                              break;                          }                            // If we're still here that means                          // - the edit didn't get ignored by adminlist or whitelist                          // - the edit didn't match any watch patterns                          // Now' if any of the following is true' we must still report it.                          // - Edit by blacklisted user                          // - Edit by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // If nothing special about the edit' return to ignore                          if (!editSpecial)                              return;                      }                      break;                  case RCEvent.EventType.move:                      // if moves are softhidden hide moves by admin' bot or whitelist                      if ((config.feedFilterEventMove == 2) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                      {                          return;                      }                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("fromname"' project.interwikiLink + r.title);                      attribs.Add("cfromname"' r.title);                      attribs.Add("toname"' project.interwikiLink + r.movedTo);                      attribs.Add("ctoname"' r.movedTo);                      attribs.Add("url"' r.blockLength); //The blockLength field stores the moveFrom URL                      attribs.Add("reason"' r.comment);                      message = GetMessage(5500 + userOffset' ref attribs);                      break;                  case RCEvent.EventType.block:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.title.Split(new char[] { ':' }' 2)[1]));                      attribs.Add("length"' r.blockLength);                      attribs.Add("reason"' r.comment);                      message = GetMessage(5400' ref attribs);                      //If the blocked user (r.title) isn't botlisted' add to blacklist                      if (listman.ClassifyEditor(r.title.Split(new char[] { ':' }' 2)[1]' r.project) != ListManager.UserType.bot)                      {                          //If this isn't an indefinite/infinite block' add to blacklist                          if ((r.blockLength.ToLower() != "indefinite") && (r.blockLength.ToLower() != "infinite"))                          {                                                               // 2'678'400 seconds = 744 hours = 31 days                              int listLen = Convert.ToInt32(CVNBotUtils.ParseDateTimeLength(r.blockLength' 2678400) * 2.5);                              string blComment = "Autoblacklist: " + r.comment + " on " + r.project;                              message += "\n" + listman.AddUserToList(r.title.Split(new char[] { ':' }' 2)[1]' "" //Global bl                                  ' ListManager.UserType.blacklisted' r.user' blComment' listLen);                              Broadcast("BL"' "ADD"' r.title.Split(new char[] { ':' }' 2)[1]' listLen' blComment' r.user);                          }                      }                      break;                  case RCEvent.EventType.unblock:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("reason"' r.comment);                      message = GetMessage(5700' ref attribs);                      break;                  case RCEvent.EventType.delete:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      attribs.Add("reason"' r.comment);                      message = GetMessage(05300' ref attribs);                      break;                  case RCEvent.EventType.newuser:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("caurl"' "https://meta.wikimedia.org/wiki/Special:CentralAuth/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch = listman.MatchesList(r.user' 11);                      if (bnuMatch.Success && feedFilterThisEvent == 1)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch.matchedItem);                          attribs.Add("wwreason"' bnuMatch.matchedReason);                          message = GetMessage(5201' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5200' ref attribs);                      }                      break;                  case RCEvent.EventType.newuser2:                      attribs.Add("creator"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ccreator"' r.user);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.title);                      attribs.Add("ceditor"' r.title);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch2 = listman.MatchesList(r.user' 11);                      if (bnuMatch2.Success)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch2.matchedItem);                          attribs.Add("wwreason"' bnuMatch2.matchedReason);                          message = GetMessage(5211' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch2.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5210' ref attribs);                      }                      break;                  case RCEvent.EventType.upload:                      int uMsg = 5600;                        // Check if the edit summary matches BES                      ListMatch ubes2 = listman.MatchesList(r.comment' 20);                      if (ubes2.Success)                      {                          attribs.Add("watchword"' ubes2.matchedItem);                          attribs.Add("lmreason"' ubes2.matchedReason);                          uMsg = 95620;                      }                        // Now check if the title matches BES                      ListMatch ubes1 = listman.MatchesList(r.title' 20);                      if (ubes1.Success)                      {                          attribs.Add("watchword"' ubes1.matchedItem);                          attribs.Add("lmreason"' ubes1.matchedReason);                          uMsg = 95620;                      }                        // Check if upload is watched                      ListMatch uwa = listman.IsWatchedArticle(r.title' r.project);                      if (uwa.Success)                          uMsg = 5610;                        // If normal and uploaded by an admin' bot or whitelisted person always hide                      if ((uMsg == 5600) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                          return;                        // if normal and uploads are softhidden hide normal user and anon aswell                      if ((uMsg == 5600) && (config.feedFilterEventUpload == 2) && ((userOffset == 3) || (userOffset == 4)))                          return;                        // If our message is 95620' we might need to truncate r.comment                      if (uMsg == 95620)                      {                          if (r.comment.Length > 25)                              r.comment = r.comment.Substring(0' 23) + "...";                      }                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("uploaditem"' project.interwikiLink + r.title);                      attribs.Add("cuploaditem"' r.title);                      attribs.Add("reason"' r.comment);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(userOffset + uMsg' ref attribs);                      break;                  case RCEvent.EventType.protect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in protect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5900' ref attribs);                      break;                  case RCEvent.EventType.unprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in unprotect is fine' it's just the pagetitle                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(5901' ref attribs);                      break;                  case RCEvent.EventType.modifyprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in modifyprotect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5902' ref attribs);                      break;              }
Magic Number,CVNBot,Program,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Program.cs,ReactToRCEvent,The following statement contains a magic number: switch (r.eventtype)              {                  // This case handles:                  // - New page creations                  // - Page edits                  case RCEvent.EventType.edit:                      String diffsize;                      if (r.szdiff >= 0)                          diffsize = "+" + r.szdiff.ToString();                      else                          diffsize = r.szdiff.ToString();                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("size"' diffsize);                      attribs.Add("url"' r.url);                      attribs.Add("reason"' r.comment);                        // This block handles: New page creations                      if (r.newpage)                      {                          bool createSpecial = false;                            // New pages created by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.newBig)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5010 + userOffset' ref attribs);                          }                          else if (r.szdiff <= config.newSmall)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5020 + userOffset' ref attribs);                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5000 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Article is on watchlist                          // - Page title matches a BNA pattern                          // - Edit summary matches a BES pattern                            // Is the article on the watchlist?                          ListMatch wlm = listman.IsWatchedArticle(r.title' r.project);                          if (wlm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5030 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16301' (String)attribs["article"]));                              break;                          }                            // Does the page title match a BNA pattern?                          ListMatch eslm = listman.MatchesList(r.title' 12);                          if (eslm.Success)                          {                              // Matches BNA                              attribs.Add("watchword"' eslm.matchedItem);                              message = GetMessage(5040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' eslm.matchedItem));                              break;                          }                            // Does the edit summary match a BES pattern?                          ListMatch lm = listman.MatchesList(r.comment' 20);                          if (lm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' lm.matchedItem);                              message = GetMessage(95040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' lm.matchedItem));                              break;                          }                            // If we're still here that means                          // - the create didn't get ignored by adminlist or whitelist                          // - the create didn't match any watch patterns                          // Now' if any of the following is true' we'll must report it.                          // - Create by blacklisted user                          // - Create by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // Created by an unlisted reguser with non-special create size' ignore                          if ((userOffset == 4) && !createSpecial)                              return;                            // Else: Create had special size' so let it shown (default)' don't return!                      }                      // This block handles: Page edits                      else                      {                          bool editSpecial = false;                            // Edit by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.editBig)                          {                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5110 + userOffset' ref attribs);                              editSpecial = true;                          }                          else if (r.szdiff <= config.editBlank)                          {                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5120 + userOffset' ref attribs);                              editSpecial = true;                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5100 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Edit summary matches a BES pattern                          // - Edit blanked the page                          // - Edit replaced the page                          // - Article is on watchlist                            // Does the edit summary match a BES pattern?                          ListMatch elm = listman.MatchesList(r.comment' 20);                          if (elm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' elm.matchedItem);                              message = GetMessage(95130 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16310' r.comment' (String)attribs["article"]));                              break;                          }                            // Did the user user blank the page?                          if (project.rautosummBlank.IsMatch(r.comment))                          {                              message = GetMessage(96010 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16311' (String)attribs["article"]));                              break;                          }                            Match rplm = project.rautosummReplace.Match(r.comment);                          if (rplm.Success)                          {                              // The user replaced the page.                              try                              {                                  attribs.Add("profanity"' rplm.Groups["item1"].Captures[0].Value);                                  message = GetMessage(96020 + userOffset' ref attribs);                              }                              catch (ArgumentOutOfRangeException)                              {                                  // This wiki probably doesn't have a profanity attribute                                  message = GetMessage(96030 + userOffset' ref attribs);                              }                              break;                          }                            // Is the article on the watchlist?                          ListMatch welm = listman.IsWatchedArticle(r.title' r.project);                          if (welm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5130 + userOffset' ref attribs);                              break;                          }                            // If we're still here that means                          // - the edit didn't get ignored by adminlist or whitelist                          // - the edit didn't match any watch patterns                          // Now' if any of the following is true' we must still report it.                          // - Edit by blacklisted user                          // - Edit by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // If nothing special about the edit' return to ignore                          if (!editSpecial)                              return;                      }                      break;                  case RCEvent.EventType.move:                      // if moves are softhidden hide moves by admin' bot or whitelist                      if ((config.feedFilterEventMove == 2) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                      {                          return;                      }                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("fromname"' project.interwikiLink + r.title);                      attribs.Add("cfromname"' r.title);                      attribs.Add("toname"' project.interwikiLink + r.movedTo);                      attribs.Add("ctoname"' r.movedTo);                      attribs.Add("url"' r.blockLength); //The blockLength field stores the moveFrom URL                      attribs.Add("reason"' r.comment);                      message = GetMessage(5500 + userOffset' ref attribs);                      break;                  case RCEvent.EventType.block:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.title.Split(new char[] { ':' }' 2)[1]));                      attribs.Add("length"' r.blockLength);                      attribs.Add("reason"' r.comment);                      message = GetMessage(5400' ref attribs);                      //If the blocked user (r.title) isn't botlisted' add to blacklist                      if (listman.ClassifyEditor(r.title.Split(new char[] { ':' }' 2)[1]' r.project) != ListManager.UserType.bot)                      {                          //If this isn't an indefinite/infinite block' add to blacklist                          if ((r.blockLength.ToLower() != "indefinite") && (r.blockLength.ToLower() != "infinite"))                          {                                                               // 2'678'400 seconds = 744 hours = 31 days                              int listLen = Convert.ToInt32(CVNBotUtils.ParseDateTimeLength(r.blockLength' 2678400) * 2.5);                              string blComment = "Autoblacklist: " + r.comment + " on " + r.project;                              message += "\n" + listman.AddUserToList(r.title.Split(new char[] { ':' }' 2)[1]' "" //Global bl                                  ' ListManager.UserType.blacklisted' r.user' blComment' listLen);                              Broadcast("BL"' "ADD"' r.title.Split(new char[] { ':' }' 2)[1]' listLen' blComment' r.user);                          }                      }                      break;                  case RCEvent.EventType.unblock:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("reason"' r.comment);                      message = GetMessage(5700' ref attribs);                      break;                  case RCEvent.EventType.delete:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      attribs.Add("reason"' r.comment);                      message = GetMessage(05300' ref attribs);                      break;                  case RCEvent.EventType.newuser:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("caurl"' "https://meta.wikimedia.org/wiki/Special:CentralAuth/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch = listman.MatchesList(r.user' 11);                      if (bnuMatch.Success && feedFilterThisEvent == 1)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch.matchedItem);                          attribs.Add("wwreason"' bnuMatch.matchedReason);                          message = GetMessage(5201' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5200' ref attribs);                      }                      break;                  case RCEvent.EventType.newuser2:                      attribs.Add("creator"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ccreator"' r.user);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.title);                      attribs.Add("ceditor"' r.title);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch2 = listman.MatchesList(r.user' 11);                      if (bnuMatch2.Success)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch2.matchedItem);                          attribs.Add("wwreason"' bnuMatch2.matchedReason);                          message = GetMessage(5211' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch2.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5210' ref attribs);                      }                      break;                  case RCEvent.EventType.upload:                      int uMsg = 5600;                        // Check if the edit summary matches BES                      ListMatch ubes2 = listman.MatchesList(r.comment' 20);                      if (ubes2.Success)                      {                          attribs.Add("watchword"' ubes2.matchedItem);                          attribs.Add("lmreason"' ubes2.matchedReason);                          uMsg = 95620;                      }                        // Now check if the title matches BES                      ListMatch ubes1 = listman.MatchesList(r.title' 20);                      if (ubes1.Success)                      {                          attribs.Add("watchword"' ubes1.matchedItem);                          attribs.Add("lmreason"' ubes1.matchedReason);                          uMsg = 95620;                      }                        // Check if upload is watched                      ListMatch uwa = listman.IsWatchedArticle(r.title' r.project);                      if (uwa.Success)                          uMsg = 5610;                        // If normal and uploaded by an admin' bot or whitelisted person always hide                      if ((uMsg == 5600) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                          return;                        // if normal and uploads are softhidden hide normal user and anon aswell                      if ((uMsg == 5600) && (config.feedFilterEventUpload == 2) && ((userOffset == 3) || (userOffset == 4)))                          return;                        // If our message is 95620' we might need to truncate r.comment                      if (uMsg == 95620)                      {                          if (r.comment.Length > 25)                              r.comment = r.comment.Substring(0' 23) + "...";                      }                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("uploaditem"' project.interwikiLink + r.title);                      attribs.Add("cuploaditem"' r.title);                      attribs.Add("reason"' r.comment);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(userOffset + uMsg' ref attribs);                      break;                  case RCEvent.EventType.protect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in protect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5900' ref attribs);                      break;                  case RCEvent.EventType.unprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in unprotect is fine' it's just the pagetitle                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(5901' ref attribs);                      break;                  case RCEvent.EventType.modifyprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in modifyprotect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5902' ref attribs);                      break;              }
Magic Number,CVNBot,Program,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Program.cs,ReactToRCEvent,The following statement contains a magic number: switch (r.eventtype)              {                  // This case handles:                  // - New page creations                  // - Page edits                  case RCEvent.EventType.edit:                      String diffsize;                      if (r.szdiff >= 0)                          diffsize = "+" + r.szdiff.ToString();                      else                          diffsize = r.szdiff.ToString();                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("size"' diffsize);                      attribs.Add("url"' r.url);                      attribs.Add("reason"' r.comment);                        // This block handles: New page creations                      if (r.newpage)                      {                          bool createSpecial = false;                            // New pages created by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.newBig)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5010 + userOffset' ref attribs);                          }                          else if (r.szdiff <= config.newSmall)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5020 + userOffset' ref attribs);                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5000 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Article is on watchlist                          // - Page title matches a BNA pattern                          // - Edit summary matches a BES pattern                            // Is the article on the watchlist?                          ListMatch wlm = listman.IsWatchedArticle(r.title' r.project);                          if (wlm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5030 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16301' (String)attribs["article"]));                              break;                          }                            // Does the page title match a BNA pattern?                          ListMatch eslm = listman.MatchesList(r.title' 12);                          if (eslm.Success)                          {                              // Matches BNA                              attribs.Add("watchword"' eslm.matchedItem);                              message = GetMessage(5040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' eslm.matchedItem));                              break;                          }                            // Does the edit summary match a BES pattern?                          ListMatch lm = listman.MatchesList(r.comment' 20);                          if (lm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' lm.matchedItem);                              message = GetMessage(95040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' lm.matchedItem));                              break;                          }                            // If we're still here that means                          // - the create didn't get ignored by adminlist or whitelist                          // - the create didn't match any watch patterns                          // Now' if any of the following is true' we'll must report it.                          // - Create by blacklisted user                          // - Create by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // Created by an unlisted reguser with non-special create size' ignore                          if ((userOffset == 4) && !createSpecial)                              return;                            // Else: Create had special size' so let it shown (default)' don't return!                      }                      // This block handles: Page edits                      else                      {                          bool editSpecial = false;                            // Edit by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.editBig)                          {                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5110 + userOffset' ref attribs);                              editSpecial = true;                          }                          else if (r.szdiff <= config.editBlank)                          {                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5120 + userOffset' ref attribs);                              editSpecial = true;                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5100 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Edit summary matches a BES pattern                          // - Edit blanked the page                          // - Edit replaced the page                          // - Article is on watchlist                            // Does the edit summary match a BES pattern?                          ListMatch elm = listman.MatchesList(r.comment' 20);                          if (elm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' elm.matchedItem);                              message = GetMessage(95130 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16310' r.comment' (String)attribs["article"]));                              break;                          }                            // Did the user user blank the page?                          if (project.rautosummBlank.IsMatch(r.comment))                          {                              message = GetMessage(96010 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16311' (String)attribs["article"]));                              break;                          }                            Match rplm = project.rautosummReplace.Match(r.comment);                          if (rplm.Success)                          {                              // The user replaced the page.                              try                              {                                  attribs.Add("profanity"' rplm.Groups["item1"].Captures[0].Value);                                  message = GetMessage(96020 + userOffset' ref attribs);                              }                              catch (ArgumentOutOfRangeException)                              {                                  // This wiki probably doesn't have a profanity attribute                                  message = GetMessage(96030 + userOffset' ref attribs);                              }                              break;                          }                            // Is the article on the watchlist?                          ListMatch welm = listman.IsWatchedArticle(r.title' r.project);                          if (welm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5130 + userOffset' ref attribs);                              break;                          }                            // If we're still here that means                          // - the edit didn't get ignored by adminlist or whitelist                          // - the edit didn't match any watch patterns                          // Now' if any of the following is true' we must still report it.                          // - Edit by blacklisted user                          // - Edit by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // If nothing special about the edit' return to ignore                          if (!editSpecial)                              return;                      }                      break;                  case RCEvent.EventType.move:                      // if moves are softhidden hide moves by admin' bot or whitelist                      if ((config.feedFilterEventMove == 2) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                      {                          return;                      }                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("fromname"' project.interwikiLink + r.title);                      attribs.Add("cfromname"' r.title);                      attribs.Add("toname"' project.interwikiLink + r.movedTo);                      attribs.Add("ctoname"' r.movedTo);                      attribs.Add("url"' r.blockLength); //The blockLength field stores the moveFrom URL                      attribs.Add("reason"' r.comment);                      message = GetMessage(5500 + userOffset' ref attribs);                      break;                  case RCEvent.EventType.block:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.title.Split(new char[] { ':' }' 2)[1]));                      attribs.Add("length"' r.blockLength);                      attribs.Add("reason"' r.comment);                      message = GetMessage(5400' ref attribs);                      //If the blocked user (r.title) isn't botlisted' add to blacklist                      if (listman.ClassifyEditor(r.title.Split(new char[] { ':' }' 2)[1]' r.project) != ListManager.UserType.bot)                      {                          //If this isn't an indefinite/infinite block' add to blacklist                          if ((r.blockLength.ToLower() != "indefinite") && (r.blockLength.ToLower() != "infinite"))                          {                                                               // 2'678'400 seconds = 744 hours = 31 days                              int listLen = Convert.ToInt32(CVNBotUtils.ParseDateTimeLength(r.blockLength' 2678400) * 2.5);                              string blComment = "Autoblacklist: " + r.comment + " on " + r.project;                              message += "\n" + listman.AddUserToList(r.title.Split(new char[] { ':' }' 2)[1]' "" //Global bl                                  ' ListManager.UserType.blacklisted' r.user' blComment' listLen);                              Broadcast("BL"' "ADD"' r.title.Split(new char[] { ':' }' 2)[1]' listLen' blComment' r.user);                          }                      }                      break;                  case RCEvent.EventType.unblock:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("reason"' r.comment);                      message = GetMessage(5700' ref attribs);                      break;                  case RCEvent.EventType.delete:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      attribs.Add("reason"' r.comment);                      message = GetMessage(05300' ref attribs);                      break;                  case RCEvent.EventType.newuser:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("caurl"' "https://meta.wikimedia.org/wiki/Special:CentralAuth/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch = listman.MatchesList(r.user' 11);                      if (bnuMatch.Success && feedFilterThisEvent == 1)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch.matchedItem);                          attribs.Add("wwreason"' bnuMatch.matchedReason);                          message = GetMessage(5201' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5200' ref attribs);                      }                      break;                  case RCEvent.EventType.newuser2:                      attribs.Add("creator"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ccreator"' r.user);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.title);                      attribs.Add("ceditor"' r.title);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch2 = listman.MatchesList(r.user' 11);                      if (bnuMatch2.Success)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch2.matchedItem);                          attribs.Add("wwreason"' bnuMatch2.matchedReason);                          message = GetMessage(5211' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch2.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5210' ref attribs);                      }                      break;                  case RCEvent.EventType.upload:                      int uMsg = 5600;                        // Check if the edit summary matches BES                      ListMatch ubes2 = listman.MatchesList(r.comment' 20);                      if (ubes2.Success)                      {                          attribs.Add("watchword"' ubes2.matchedItem);                          attribs.Add("lmreason"' ubes2.matchedReason);                          uMsg = 95620;                      }                        // Now check if the title matches BES                      ListMatch ubes1 = listman.MatchesList(r.title' 20);                      if (ubes1.Success)                      {                          attribs.Add("watchword"' ubes1.matchedItem);                          attribs.Add("lmreason"' ubes1.matchedReason);                          uMsg = 95620;                      }                        // Check if upload is watched                      ListMatch uwa = listman.IsWatchedArticle(r.title' r.project);                      if (uwa.Success)                          uMsg = 5610;                        // If normal and uploaded by an admin' bot or whitelisted person always hide                      if ((uMsg == 5600) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                          return;                        // if normal and uploads are softhidden hide normal user and anon aswell                      if ((uMsg == 5600) && (config.feedFilterEventUpload == 2) && ((userOffset == 3) || (userOffset == 4)))                          return;                        // If our message is 95620' we might need to truncate r.comment                      if (uMsg == 95620)                      {                          if (r.comment.Length > 25)                              r.comment = r.comment.Substring(0' 23) + "...";                      }                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("uploaditem"' project.interwikiLink + r.title);                      attribs.Add("cuploaditem"' r.title);                      attribs.Add("reason"' r.comment);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(userOffset + uMsg' ref attribs);                      break;                  case RCEvent.EventType.protect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in protect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5900' ref attribs);                      break;                  case RCEvent.EventType.unprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in unprotect is fine' it's just the pagetitle                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(5901' ref attribs);                      break;                  case RCEvent.EventType.modifyprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in modifyprotect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5902' ref attribs);                      break;              }
Magic Number,CVNBot,Program,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Program.cs,ReactToRCEvent,The following statement contains a magic number: switch (r.eventtype)              {                  // This case handles:                  // - New page creations                  // - Page edits                  case RCEvent.EventType.edit:                      String diffsize;                      if (r.szdiff >= 0)                          diffsize = "+" + r.szdiff.ToString();                      else                          diffsize = r.szdiff.ToString();                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("size"' diffsize);                      attribs.Add("url"' r.url);                      attribs.Add("reason"' r.comment);                        // This block handles: New page creations                      if (r.newpage)                      {                          bool createSpecial = false;                            // New pages created by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.newBig)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5010 + userOffset' ref attribs);                          }                          else if (r.szdiff <= config.newSmall)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5020 + userOffset' ref attribs);                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5000 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Article is on watchlist                          // - Page title matches a BNA pattern                          // - Edit summary matches a BES pattern                            // Is the article on the watchlist?                          ListMatch wlm = listman.IsWatchedArticle(r.title' r.project);                          if (wlm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5030 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16301' (String)attribs["article"]));                              break;                          }                            // Does the page title match a BNA pattern?                          ListMatch eslm = listman.MatchesList(r.title' 12);                          if (eslm.Success)                          {                              // Matches BNA                              attribs.Add("watchword"' eslm.matchedItem);                              message = GetMessage(5040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' eslm.matchedItem));                              break;                          }                            // Does the edit summary match a BES pattern?                          ListMatch lm = listman.MatchesList(r.comment' 20);                          if (lm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' lm.matchedItem);                              message = GetMessage(95040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' lm.matchedItem));                              break;                          }                            // If we're still here that means                          // - the create didn't get ignored by adminlist or whitelist                          // - the create didn't match any watch patterns                          // Now' if any of the following is true' we'll must report it.                          // - Create by blacklisted user                          // - Create by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // Created by an unlisted reguser with non-special create size' ignore                          if ((userOffset == 4) && !createSpecial)                              return;                            // Else: Create had special size' so let it shown (default)' don't return!                      }                      // This block handles: Page edits                      else                      {                          bool editSpecial = false;                            // Edit by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.editBig)                          {                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5110 + userOffset' ref attribs);                              editSpecial = true;                          }                          else if (r.szdiff <= config.editBlank)                          {                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5120 + userOffset' ref attribs);                              editSpecial = true;                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5100 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Edit summary matches a BES pattern                          // - Edit blanked the page                          // - Edit replaced the page                          // - Article is on watchlist                            // Does the edit summary match a BES pattern?                          ListMatch elm = listman.MatchesList(r.comment' 20);                          if (elm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' elm.matchedItem);                              message = GetMessage(95130 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16310' r.comment' (String)attribs["article"]));                              break;                          }                            // Did the user user blank the page?                          if (project.rautosummBlank.IsMatch(r.comment))                          {                              message = GetMessage(96010 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16311' (String)attribs["article"]));                              break;                          }                            Match rplm = project.rautosummReplace.Match(r.comment);                          if (rplm.Success)                          {                              // The user replaced the page.                              try                              {                                  attribs.Add("profanity"' rplm.Groups["item1"].Captures[0].Value);                                  message = GetMessage(96020 + userOffset' ref attribs);                              }                              catch (ArgumentOutOfRangeException)                              {                                  // This wiki probably doesn't have a profanity attribute                                  message = GetMessage(96030 + userOffset' ref attribs);                              }                              break;                          }                            // Is the article on the watchlist?                          ListMatch welm = listman.IsWatchedArticle(r.title' r.project);                          if (welm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5130 + userOffset' ref attribs);                              break;                          }                            // If we're still here that means                          // - the edit didn't get ignored by adminlist or whitelist                          // - the edit didn't match any watch patterns                          // Now' if any of the following is true' we must still report it.                          // - Edit by blacklisted user                          // - Edit by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // If nothing special about the edit' return to ignore                          if (!editSpecial)                              return;                      }                      break;                  case RCEvent.EventType.move:                      // if moves are softhidden hide moves by admin' bot or whitelist                      if ((config.feedFilterEventMove == 2) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                      {                          return;                      }                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("fromname"' project.interwikiLink + r.title);                      attribs.Add("cfromname"' r.title);                      attribs.Add("toname"' project.interwikiLink + r.movedTo);                      attribs.Add("ctoname"' r.movedTo);                      attribs.Add("url"' r.blockLength); //The blockLength field stores the moveFrom URL                      attribs.Add("reason"' r.comment);                      message = GetMessage(5500 + userOffset' ref attribs);                      break;                  case RCEvent.EventType.block:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.title.Split(new char[] { ':' }' 2)[1]));                      attribs.Add("length"' r.blockLength);                      attribs.Add("reason"' r.comment);                      message = GetMessage(5400' ref attribs);                      //If the blocked user (r.title) isn't botlisted' add to blacklist                      if (listman.ClassifyEditor(r.title.Split(new char[] { ':' }' 2)[1]' r.project) != ListManager.UserType.bot)                      {                          //If this isn't an indefinite/infinite block' add to blacklist                          if ((r.blockLength.ToLower() != "indefinite") && (r.blockLength.ToLower() != "infinite"))                          {                                                               // 2'678'400 seconds = 744 hours = 31 days                              int listLen = Convert.ToInt32(CVNBotUtils.ParseDateTimeLength(r.blockLength' 2678400) * 2.5);                              string blComment = "Autoblacklist: " + r.comment + " on " + r.project;                              message += "\n" + listman.AddUserToList(r.title.Split(new char[] { ':' }' 2)[1]' "" //Global bl                                  ' ListManager.UserType.blacklisted' r.user' blComment' listLen);                              Broadcast("BL"' "ADD"' r.title.Split(new char[] { ':' }' 2)[1]' listLen' blComment' r.user);                          }                      }                      break;                  case RCEvent.EventType.unblock:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("reason"' r.comment);                      message = GetMessage(5700' ref attribs);                      break;                  case RCEvent.EventType.delete:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      attribs.Add("reason"' r.comment);                      message = GetMessage(05300' ref attribs);                      break;                  case RCEvent.EventType.newuser:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("caurl"' "https://meta.wikimedia.org/wiki/Special:CentralAuth/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch = listman.MatchesList(r.user' 11);                      if (bnuMatch.Success && feedFilterThisEvent == 1)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch.matchedItem);                          attribs.Add("wwreason"' bnuMatch.matchedReason);                          message = GetMessage(5201' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5200' ref attribs);                      }                      break;                  case RCEvent.EventType.newuser2:                      attribs.Add("creator"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ccreator"' r.user);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.title);                      attribs.Add("ceditor"' r.title);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch2 = listman.MatchesList(r.user' 11);                      if (bnuMatch2.Success)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch2.matchedItem);                          attribs.Add("wwreason"' bnuMatch2.matchedReason);                          message = GetMessage(5211' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch2.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5210' ref attribs);                      }                      break;                  case RCEvent.EventType.upload:                      int uMsg = 5600;                        // Check if the edit summary matches BES                      ListMatch ubes2 = listman.MatchesList(r.comment' 20);                      if (ubes2.Success)                      {                          attribs.Add("watchword"' ubes2.matchedItem);                          attribs.Add("lmreason"' ubes2.matchedReason);                          uMsg = 95620;                      }                        // Now check if the title matches BES                      ListMatch ubes1 = listman.MatchesList(r.title' 20);                      if (ubes1.Success)                      {                          attribs.Add("watchword"' ubes1.matchedItem);                          attribs.Add("lmreason"' ubes1.matchedReason);                          uMsg = 95620;                      }                        // Check if upload is watched                      ListMatch uwa = listman.IsWatchedArticle(r.title' r.project);                      if (uwa.Success)                          uMsg = 5610;                        // If normal and uploaded by an admin' bot or whitelisted person always hide                      if ((uMsg == 5600) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                          return;                        // if normal and uploads are softhidden hide normal user and anon aswell                      if ((uMsg == 5600) && (config.feedFilterEventUpload == 2) && ((userOffset == 3) || (userOffset == 4)))                          return;                        // If our message is 95620' we might need to truncate r.comment                      if (uMsg == 95620)                      {                          if (r.comment.Length > 25)                              r.comment = r.comment.Substring(0' 23) + "...";                      }                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("uploaditem"' project.interwikiLink + r.title);                      attribs.Add("cuploaditem"' r.title);                      attribs.Add("reason"' r.comment);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(userOffset + uMsg' ref attribs);                      break;                  case RCEvent.EventType.protect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in protect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5900' ref attribs);                      break;                  case RCEvent.EventType.unprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in unprotect is fine' it's just the pagetitle                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(5901' ref attribs);                      break;                  case RCEvent.EventType.modifyprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in modifyprotect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5902' ref attribs);                      break;              }
Magic Number,CVNBot,Program,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Program.cs,ReactToRCEvent,The following statement contains a magic number: switch (r.eventtype)              {                  // This case handles:                  // - New page creations                  // - Page edits                  case RCEvent.EventType.edit:                      String diffsize;                      if (r.szdiff >= 0)                          diffsize = "+" + r.szdiff.ToString();                      else                          diffsize = r.szdiff.ToString();                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("size"' diffsize);                      attribs.Add("url"' r.url);                      attribs.Add("reason"' r.comment);                        // This block handles: New page creations                      if (r.newpage)                      {                          bool createSpecial = false;                            // New pages created by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.newBig)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5010 + userOffset' ref attribs);                          }                          else if (r.szdiff <= config.newSmall)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5020 + userOffset' ref attribs);                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5000 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Article is on watchlist                          // - Page title matches a BNA pattern                          // - Edit summary matches a BES pattern                            // Is the article on the watchlist?                          ListMatch wlm = listman.IsWatchedArticle(r.title' r.project);                          if (wlm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5030 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16301' (String)attribs["article"]));                              break;                          }                            // Does the page title match a BNA pattern?                          ListMatch eslm = listman.MatchesList(r.title' 12);                          if (eslm.Success)                          {                              // Matches BNA                              attribs.Add("watchword"' eslm.matchedItem);                              message = GetMessage(5040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' eslm.matchedItem));                              break;                          }                            // Does the edit summary match a BES pattern?                          ListMatch lm = listman.MatchesList(r.comment' 20);                          if (lm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' lm.matchedItem);                              message = GetMessage(95040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' lm.matchedItem));                              break;                          }                            // If we're still here that means                          // - the create didn't get ignored by adminlist or whitelist                          // - the create didn't match any watch patterns                          // Now' if any of the following is true' we'll must report it.                          // - Create by blacklisted user                          // - Create by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // Created by an unlisted reguser with non-special create size' ignore                          if ((userOffset == 4) && !createSpecial)                              return;                            // Else: Create had special size' so let it shown (default)' don't return!                      }                      // This block handles: Page edits                      else                      {                          bool editSpecial = false;                            // Edit by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.editBig)                          {                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5110 + userOffset' ref attribs);                              editSpecial = true;                          }                          else if (r.szdiff <= config.editBlank)                          {                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5120 + userOffset' ref attribs);                              editSpecial = true;                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5100 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Edit summary matches a BES pattern                          // - Edit blanked the page                          // - Edit replaced the page                          // - Article is on watchlist                            // Does the edit summary match a BES pattern?                          ListMatch elm = listman.MatchesList(r.comment' 20);                          if (elm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' elm.matchedItem);                              message = GetMessage(95130 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16310' r.comment' (String)attribs["article"]));                              break;                          }                            // Did the user user blank the page?                          if (project.rautosummBlank.IsMatch(r.comment))                          {                              message = GetMessage(96010 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16311' (String)attribs["article"]));                              break;                          }                            Match rplm = project.rautosummReplace.Match(r.comment);                          if (rplm.Success)                          {                              // The user replaced the page.                              try                              {                                  attribs.Add("profanity"' rplm.Groups["item1"].Captures[0].Value);                                  message = GetMessage(96020 + userOffset' ref attribs);                              }                              catch (ArgumentOutOfRangeException)                              {                                  // This wiki probably doesn't have a profanity attribute                                  message = GetMessage(96030 + userOffset' ref attribs);                              }                              break;                          }                            // Is the article on the watchlist?                          ListMatch welm = listman.IsWatchedArticle(r.title' r.project);                          if (welm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5130 + userOffset' ref attribs);                              break;                          }                            // If we're still here that means                          // - the edit didn't get ignored by adminlist or whitelist                          // - the edit didn't match any watch patterns                          // Now' if any of the following is true' we must still report it.                          // - Edit by blacklisted user                          // - Edit by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // If nothing special about the edit' return to ignore                          if (!editSpecial)                              return;                      }                      break;                  case RCEvent.EventType.move:                      // if moves are softhidden hide moves by admin' bot or whitelist                      if ((config.feedFilterEventMove == 2) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                      {                          return;                      }                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("fromname"' project.interwikiLink + r.title);                      attribs.Add("cfromname"' r.title);                      attribs.Add("toname"' project.interwikiLink + r.movedTo);                      attribs.Add("ctoname"' r.movedTo);                      attribs.Add("url"' r.blockLength); //The blockLength field stores the moveFrom URL                      attribs.Add("reason"' r.comment);                      message = GetMessage(5500 + userOffset' ref attribs);                      break;                  case RCEvent.EventType.block:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.title.Split(new char[] { ':' }' 2)[1]));                      attribs.Add("length"' r.blockLength);                      attribs.Add("reason"' r.comment);                      message = GetMessage(5400' ref attribs);                      //If the blocked user (r.title) isn't botlisted' add to blacklist                      if (listman.ClassifyEditor(r.title.Split(new char[] { ':' }' 2)[1]' r.project) != ListManager.UserType.bot)                      {                          //If this isn't an indefinite/infinite block' add to blacklist                          if ((r.blockLength.ToLower() != "indefinite") && (r.blockLength.ToLower() != "infinite"))                          {                                                               // 2'678'400 seconds = 744 hours = 31 days                              int listLen = Convert.ToInt32(CVNBotUtils.ParseDateTimeLength(r.blockLength' 2678400) * 2.5);                              string blComment = "Autoblacklist: " + r.comment + " on " + r.project;                              message += "\n" + listman.AddUserToList(r.title.Split(new char[] { ':' }' 2)[1]' "" //Global bl                                  ' ListManager.UserType.blacklisted' r.user' blComment' listLen);                              Broadcast("BL"' "ADD"' r.title.Split(new char[] { ':' }' 2)[1]' listLen' blComment' r.user);                          }                      }                      break;                  case RCEvent.EventType.unblock:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("reason"' r.comment);                      message = GetMessage(5700' ref attribs);                      break;                  case RCEvent.EventType.delete:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      attribs.Add("reason"' r.comment);                      message = GetMessage(05300' ref attribs);                      break;                  case RCEvent.EventType.newuser:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("caurl"' "https://meta.wikimedia.org/wiki/Special:CentralAuth/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch = listman.MatchesList(r.user' 11);                      if (bnuMatch.Success && feedFilterThisEvent == 1)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch.matchedItem);                          attribs.Add("wwreason"' bnuMatch.matchedReason);                          message = GetMessage(5201' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5200' ref attribs);                      }                      break;                  case RCEvent.EventType.newuser2:                      attribs.Add("creator"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ccreator"' r.user);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.title);                      attribs.Add("ceditor"' r.title);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch2 = listman.MatchesList(r.user' 11);                      if (bnuMatch2.Success)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch2.matchedItem);                          attribs.Add("wwreason"' bnuMatch2.matchedReason);                          message = GetMessage(5211' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch2.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5210' ref attribs);                      }                      break;                  case RCEvent.EventType.upload:                      int uMsg = 5600;                        // Check if the edit summary matches BES                      ListMatch ubes2 = listman.MatchesList(r.comment' 20);                      if (ubes2.Success)                      {                          attribs.Add("watchword"' ubes2.matchedItem);                          attribs.Add("lmreason"' ubes2.matchedReason);                          uMsg = 95620;                      }                        // Now check if the title matches BES                      ListMatch ubes1 = listman.MatchesList(r.title' 20);                      if (ubes1.Success)                      {                          attribs.Add("watchword"' ubes1.matchedItem);                          attribs.Add("lmreason"' ubes1.matchedReason);                          uMsg = 95620;                      }                        // Check if upload is watched                      ListMatch uwa = listman.IsWatchedArticle(r.title' r.project);                      if (uwa.Success)                          uMsg = 5610;                        // If normal and uploaded by an admin' bot or whitelisted person always hide                      if ((uMsg == 5600) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                          return;                        // if normal and uploads are softhidden hide normal user and anon aswell                      if ((uMsg == 5600) && (config.feedFilterEventUpload == 2) && ((userOffset == 3) || (userOffset == 4)))                          return;                        // If our message is 95620' we might need to truncate r.comment                      if (uMsg == 95620)                      {                          if (r.comment.Length > 25)                              r.comment = r.comment.Substring(0' 23) + "...";                      }                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("uploaditem"' project.interwikiLink + r.title);                      attribs.Add("cuploaditem"' r.title);                      attribs.Add("reason"' r.comment);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(userOffset + uMsg' ref attribs);                      break;                  case RCEvent.EventType.protect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in protect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5900' ref attribs);                      break;                  case RCEvent.EventType.unprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in unprotect is fine' it's just the pagetitle                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(5901' ref attribs);                      break;                  case RCEvent.EventType.modifyprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in modifyprotect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5902' ref attribs);                      break;              }
Magic Number,CVNBot,Program,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Program.cs,ReactToRCEvent,The following statement contains a magic number: switch (r.eventtype)              {                  // This case handles:                  // - New page creations                  // - Page edits                  case RCEvent.EventType.edit:                      String diffsize;                      if (r.szdiff >= 0)                          diffsize = "+" + r.szdiff.ToString();                      else                          diffsize = r.szdiff.ToString();                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("size"' diffsize);                      attribs.Add("url"' r.url);                      attribs.Add("reason"' r.comment);                        // This block handles: New page creations                      if (r.newpage)                      {                          bool createSpecial = false;                            // New pages created by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.newBig)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5010 + userOffset' ref attribs);                          }                          else if (r.szdiff <= config.newSmall)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5020 + userOffset' ref attribs);                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5000 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Article is on watchlist                          // - Page title matches a BNA pattern                          // - Edit summary matches a BES pattern                            // Is the article on the watchlist?                          ListMatch wlm = listman.IsWatchedArticle(r.title' r.project);                          if (wlm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5030 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16301' (String)attribs["article"]));                              break;                          }                            // Does the page title match a BNA pattern?                          ListMatch eslm = listman.MatchesList(r.title' 12);                          if (eslm.Success)                          {                              // Matches BNA                              attribs.Add("watchword"' eslm.matchedItem);                              message = GetMessage(5040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' eslm.matchedItem));                              break;                          }                            // Does the edit summary match a BES pattern?                          ListMatch lm = listman.MatchesList(r.comment' 20);                          if (lm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' lm.matchedItem);                              message = GetMessage(95040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' lm.matchedItem));                              break;                          }                            // If we're still here that means                          // - the create didn't get ignored by adminlist or whitelist                          // - the create didn't match any watch patterns                          // Now' if any of the following is true' we'll must report it.                          // - Create by blacklisted user                          // - Create by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // Created by an unlisted reguser with non-special create size' ignore                          if ((userOffset == 4) && !createSpecial)                              return;                            // Else: Create had special size' so let it shown (default)' don't return!                      }                      // This block handles: Page edits                      else                      {                          bool editSpecial = false;                            // Edit by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.editBig)                          {                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5110 + userOffset' ref attribs);                              editSpecial = true;                          }                          else if (r.szdiff <= config.editBlank)                          {                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5120 + userOffset' ref attribs);                              editSpecial = true;                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5100 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Edit summary matches a BES pattern                          // - Edit blanked the page                          // - Edit replaced the page                          // - Article is on watchlist                            // Does the edit summary match a BES pattern?                          ListMatch elm = listman.MatchesList(r.comment' 20);                          if (elm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' elm.matchedItem);                              message = GetMessage(95130 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16310' r.comment' (String)attribs["article"]));                              break;                          }                            // Did the user user blank the page?                          if (project.rautosummBlank.IsMatch(r.comment))                          {                              message = GetMessage(96010 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16311' (String)attribs["article"]));                              break;                          }                            Match rplm = project.rautosummReplace.Match(r.comment);                          if (rplm.Success)                          {                              // The user replaced the page.                              try                              {                                  attribs.Add("profanity"' rplm.Groups["item1"].Captures[0].Value);                                  message = GetMessage(96020 + userOffset' ref attribs);                              }                              catch (ArgumentOutOfRangeException)                              {                                  // This wiki probably doesn't have a profanity attribute                                  message = GetMessage(96030 + userOffset' ref attribs);                              }                              break;                          }                            // Is the article on the watchlist?                          ListMatch welm = listman.IsWatchedArticle(r.title' r.project);                          if (welm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5130 + userOffset' ref attribs);                              break;                          }                            // If we're still here that means                          // - the edit didn't get ignored by adminlist or whitelist                          // - the edit didn't match any watch patterns                          // Now' if any of the following is true' we must still report it.                          // - Edit by blacklisted user                          // - Edit by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // If nothing special about the edit' return to ignore                          if (!editSpecial)                              return;                      }                      break;                  case RCEvent.EventType.move:                      // if moves are softhidden hide moves by admin' bot or whitelist                      if ((config.feedFilterEventMove == 2) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                      {                          return;                      }                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("fromname"' project.interwikiLink + r.title);                      attribs.Add("cfromname"' r.title);                      attribs.Add("toname"' project.interwikiLink + r.movedTo);                      attribs.Add("ctoname"' r.movedTo);                      attribs.Add("url"' r.blockLength); //The blockLength field stores the moveFrom URL                      attribs.Add("reason"' r.comment);                      message = GetMessage(5500 + userOffset' ref attribs);                      break;                  case RCEvent.EventType.block:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.title.Split(new char[] { ':' }' 2)[1]));                      attribs.Add("length"' r.blockLength);                      attribs.Add("reason"' r.comment);                      message = GetMessage(5400' ref attribs);                      //If the blocked user (r.title) isn't botlisted' add to blacklist                      if (listman.ClassifyEditor(r.title.Split(new char[] { ':' }' 2)[1]' r.project) != ListManager.UserType.bot)                      {                          //If this isn't an indefinite/infinite block' add to blacklist                          if ((r.blockLength.ToLower() != "indefinite") && (r.blockLength.ToLower() != "infinite"))                          {                                                               // 2'678'400 seconds = 744 hours = 31 days                              int listLen = Convert.ToInt32(CVNBotUtils.ParseDateTimeLength(r.blockLength' 2678400) * 2.5);                              string blComment = "Autoblacklist: " + r.comment + " on " + r.project;                              message += "\n" + listman.AddUserToList(r.title.Split(new char[] { ':' }' 2)[1]' "" //Global bl                                  ' ListManager.UserType.blacklisted' r.user' blComment' listLen);                              Broadcast("BL"' "ADD"' r.title.Split(new char[] { ':' }' 2)[1]' listLen' blComment' r.user);                          }                      }                      break;                  case RCEvent.EventType.unblock:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("reason"' r.comment);                      message = GetMessage(5700' ref attribs);                      break;                  case RCEvent.EventType.delete:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      attribs.Add("reason"' r.comment);                      message = GetMessage(05300' ref attribs);                      break;                  case RCEvent.EventType.newuser:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("caurl"' "https://meta.wikimedia.org/wiki/Special:CentralAuth/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch = listman.MatchesList(r.user' 11);                      if (bnuMatch.Success && feedFilterThisEvent == 1)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch.matchedItem);                          attribs.Add("wwreason"' bnuMatch.matchedReason);                          message = GetMessage(5201' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5200' ref attribs);                      }                      break;                  case RCEvent.EventType.newuser2:                      attribs.Add("creator"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ccreator"' r.user);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.title);                      attribs.Add("ceditor"' r.title);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch2 = listman.MatchesList(r.user' 11);                      if (bnuMatch2.Success)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch2.matchedItem);                          attribs.Add("wwreason"' bnuMatch2.matchedReason);                          message = GetMessage(5211' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch2.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5210' ref attribs);                      }                      break;                  case RCEvent.EventType.upload:                      int uMsg = 5600;                        // Check if the edit summary matches BES                      ListMatch ubes2 = listman.MatchesList(r.comment' 20);                      if (ubes2.Success)                      {                          attribs.Add("watchword"' ubes2.matchedItem);                          attribs.Add("lmreason"' ubes2.matchedReason);                          uMsg = 95620;                      }                        // Now check if the title matches BES                      ListMatch ubes1 = listman.MatchesList(r.title' 20);                      if (ubes1.Success)                      {                          attribs.Add("watchword"' ubes1.matchedItem);                          attribs.Add("lmreason"' ubes1.matchedReason);                          uMsg = 95620;                      }                        // Check if upload is watched                      ListMatch uwa = listman.IsWatchedArticle(r.title' r.project);                      if (uwa.Success)                          uMsg = 5610;                        // If normal and uploaded by an admin' bot or whitelisted person always hide                      if ((uMsg == 5600) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                          return;                        // if normal and uploads are softhidden hide normal user and anon aswell                      if ((uMsg == 5600) && (config.feedFilterEventUpload == 2) && ((userOffset == 3) || (userOffset == 4)))                          return;                        // If our message is 95620' we might need to truncate r.comment                      if (uMsg == 95620)                      {                          if (r.comment.Length > 25)                              r.comment = r.comment.Substring(0' 23) + "...";                      }                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("uploaditem"' project.interwikiLink + r.title);                      attribs.Add("cuploaditem"' r.title);                      attribs.Add("reason"' r.comment);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(userOffset + uMsg' ref attribs);                      break;                  case RCEvent.EventType.protect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in protect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5900' ref attribs);                      break;                  case RCEvent.EventType.unprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in unprotect is fine' it's just the pagetitle                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(5901' ref attribs);                      break;                  case RCEvent.EventType.modifyprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in modifyprotect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5902' ref attribs);                      break;              }
Magic Number,CVNBot,Program,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Program.cs,ReactToRCEvent,The following statement contains a magic number: switch (r.eventtype)              {                  // This case handles:                  // - New page creations                  // - Page edits                  case RCEvent.EventType.edit:                      String diffsize;                      if (r.szdiff >= 0)                          diffsize = "+" + r.szdiff.ToString();                      else                          diffsize = r.szdiff.ToString();                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("size"' diffsize);                      attribs.Add("url"' r.url);                      attribs.Add("reason"' r.comment);                        // This block handles: New page creations                      if (r.newpage)                      {                          bool createSpecial = false;                            // New pages created by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.newBig)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5010 + userOffset' ref attribs);                          }                          else if (r.szdiff <= config.newSmall)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5020 + userOffset' ref attribs);                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5000 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Article is on watchlist                          // - Page title matches a BNA pattern                          // - Edit summary matches a BES pattern                            // Is the article on the watchlist?                          ListMatch wlm = listman.IsWatchedArticle(r.title' r.project);                          if (wlm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5030 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16301' (String)attribs["article"]));                              break;                          }                            // Does the page title match a BNA pattern?                          ListMatch eslm = listman.MatchesList(r.title' 12);                          if (eslm.Success)                          {                              // Matches BNA                              attribs.Add("watchword"' eslm.matchedItem);                              message = GetMessage(5040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' eslm.matchedItem));                              break;                          }                            // Does the edit summary match a BES pattern?                          ListMatch lm = listman.MatchesList(r.comment' 20);                          if (lm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' lm.matchedItem);                              message = GetMessage(95040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' lm.matchedItem));                              break;                          }                            // If we're still here that means                          // - the create didn't get ignored by adminlist or whitelist                          // - the create didn't match any watch patterns                          // Now' if any of the following is true' we'll must report it.                          // - Create by blacklisted user                          // - Create by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // Created by an unlisted reguser with non-special create size' ignore                          if ((userOffset == 4) && !createSpecial)                              return;                            // Else: Create had special size' so let it shown (default)' don't return!                      }                      // This block handles: Page edits                      else                      {                          bool editSpecial = false;                            // Edit by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.editBig)                          {                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5110 + userOffset' ref attribs);                              editSpecial = true;                          }                          else if (r.szdiff <= config.editBlank)                          {                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5120 + userOffset' ref attribs);                              editSpecial = true;                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5100 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Edit summary matches a BES pattern                          // - Edit blanked the page                          // - Edit replaced the page                          // - Article is on watchlist                            // Does the edit summary match a BES pattern?                          ListMatch elm = listman.MatchesList(r.comment' 20);                          if (elm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' elm.matchedItem);                              message = GetMessage(95130 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16310' r.comment' (String)attribs["article"]));                              break;                          }                            // Did the user user blank the page?                          if (project.rautosummBlank.IsMatch(r.comment))                          {                              message = GetMessage(96010 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16311' (String)attribs["article"]));                              break;                          }                            Match rplm = project.rautosummReplace.Match(r.comment);                          if (rplm.Success)                          {                              // The user replaced the page.                              try                              {                                  attribs.Add("profanity"' rplm.Groups["item1"].Captures[0].Value);                                  message = GetMessage(96020 + userOffset' ref attribs);                              }                              catch (ArgumentOutOfRangeException)                              {                                  // This wiki probably doesn't have a profanity attribute                                  message = GetMessage(96030 + userOffset' ref attribs);                              }                              break;                          }                            // Is the article on the watchlist?                          ListMatch welm = listman.IsWatchedArticle(r.title' r.project);                          if (welm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5130 + userOffset' ref attribs);                              break;                          }                            // If we're still here that means                          // - the edit didn't get ignored by adminlist or whitelist                          // - the edit didn't match any watch patterns                          // Now' if any of the following is true' we must still report it.                          // - Edit by blacklisted user                          // - Edit by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // If nothing special about the edit' return to ignore                          if (!editSpecial)                              return;                      }                      break;                  case RCEvent.EventType.move:                      // if moves are softhidden hide moves by admin' bot or whitelist                      if ((config.feedFilterEventMove == 2) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                      {                          return;                      }                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("fromname"' project.interwikiLink + r.title);                      attribs.Add("cfromname"' r.title);                      attribs.Add("toname"' project.interwikiLink + r.movedTo);                      attribs.Add("ctoname"' r.movedTo);                      attribs.Add("url"' r.blockLength); //The blockLength field stores the moveFrom URL                      attribs.Add("reason"' r.comment);                      message = GetMessage(5500 + userOffset' ref attribs);                      break;                  case RCEvent.EventType.block:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.title.Split(new char[] { ':' }' 2)[1]));                      attribs.Add("length"' r.blockLength);                      attribs.Add("reason"' r.comment);                      message = GetMessage(5400' ref attribs);                      //If the blocked user (r.title) isn't botlisted' add to blacklist                      if (listman.ClassifyEditor(r.title.Split(new char[] { ':' }' 2)[1]' r.project) != ListManager.UserType.bot)                      {                          //If this isn't an indefinite/infinite block' add to blacklist                          if ((r.blockLength.ToLower() != "indefinite") && (r.blockLength.ToLower() != "infinite"))                          {                                                               // 2'678'400 seconds = 744 hours = 31 days                              int listLen = Convert.ToInt32(CVNBotUtils.ParseDateTimeLength(r.blockLength' 2678400) * 2.5);                              string blComment = "Autoblacklist: " + r.comment + " on " + r.project;                              message += "\n" + listman.AddUserToList(r.title.Split(new char[] { ':' }' 2)[1]' "" //Global bl                                  ' ListManager.UserType.blacklisted' r.user' blComment' listLen);                              Broadcast("BL"' "ADD"' r.title.Split(new char[] { ':' }' 2)[1]' listLen' blComment' r.user);                          }                      }                      break;                  case RCEvent.EventType.unblock:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("reason"' r.comment);                      message = GetMessage(5700' ref attribs);                      break;                  case RCEvent.EventType.delete:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      attribs.Add("reason"' r.comment);                      message = GetMessage(05300' ref attribs);                      break;                  case RCEvent.EventType.newuser:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("caurl"' "https://meta.wikimedia.org/wiki/Special:CentralAuth/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch = listman.MatchesList(r.user' 11);                      if (bnuMatch.Success && feedFilterThisEvent == 1)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch.matchedItem);                          attribs.Add("wwreason"' bnuMatch.matchedReason);                          message = GetMessage(5201' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5200' ref attribs);                      }                      break;                  case RCEvent.EventType.newuser2:                      attribs.Add("creator"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ccreator"' r.user);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.title);                      attribs.Add("ceditor"' r.title);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch2 = listman.MatchesList(r.user' 11);                      if (bnuMatch2.Success)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch2.matchedItem);                          attribs.Add("wwreason"' bnuMatch2.matchedReason);                          message = GetMessage(5211' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch2.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5210' ref attribs);                      }                      break;                  case RCEvent.EventType.upload:                      int uMsg = 5600;                        // Check if the edit summary matches BES                      ListMatch ubes2 = listman.MatchesList(r.comment' 20);                      if (ubes2.Success)                      {                          attribs.Add("watchword"' ubes2.matchedItem);                          attribs.Add("lmreason"' ubes2.matchedReason);                          uMsg = 95620;                      }                        // Now check if the title matches BES                      ListMatch ubes1 = listman.MatchesList(r.title' 20);                      if (ubes1.Success)                      {                          attribs.Add("watchword"' ubes1.matchedItem);                          attribs.Add("lmreason"' ubes1.matchedReason);                          uMsg = 95620;                      }                        // Check if upload is watched                      ListMatch uwa = listman.IsWatchedArticle(r.title' r.project);                      if (uwa.Success)                          uMsg = 5610;                        // If normal and uploaded by an admin' bot or whitelisted person always hide                      if ((uMsg == 5600) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                          return;                        // if normal and uploads are softhidden hide normal user and anon aswell                      if ((uMsg == 5600) && (config.feedFilterEventUpload == 2) && ((userOffset == 3) || (userOffset == 4)))                          return;                        // If our message is 95620' we might need to truncate r.comment                      if (uMsg == 95620)                      {                          if (r.comment.Length > 25)                              r.comment = r.comment.Substring(0' 23) + "...";                      }                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("uploaditem"' project.interwikiLink + r.title);                      attribs.Add("cuploaditem"' r.title);                      attribs.Add("reason"' r.comment);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(userOffset + uMsg' ref attribs);                      break;                  case RCEvent.EventType.protect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in protect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5900' ref attribs);                      break;                  case RCEvent.EventType.unprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in unprotect is fine' it's just the pagetitle                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(5901' ref attribs);                      break;                  case RCEvent.EventType.modifyprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in modifyprotect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5902' ref attribs);                      break;              }
Magic Number,CVNBot,Program,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Program.cs,ReactToRCEvent,The following statement contains a magic number: switch (r.eventtype)              {                  // This case handles:                  // - New page creations                  // - Page edits                  case RCEvent.EventType.edit:                      String diffsize;                      if (r.szdiff >= 0)                          diffsize = "+" + r.szdiff.ToString();                      else                          diffsize = r.szdiff.ToString();                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("size"' diffsize);                      attribs.Add("url"' r.url);                      attribs.Add("reason"' r.comment);                        // This block handles: New page creations                      if (r.newpage)                      {                          bool createSpecial = false;                            // New pages created by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.newBig)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5010 + userOffset' ref attribs);                          }                          else if (r.szdiff <= config.newSmall)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5020 + userOffset' ref attribs);                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5000 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Article is on watchlist                          // - Page title matches a BNA pattern                          // - Edit summary matches a BES pattern                            // Is the article on the watchlist?                          ListMatch wlm = listman.IsWatchedArticle(r.title' r.project);                          if (wlm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5030 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16301' (String)attribs["article"]));                              break;                          }                            // Does the page title match a BNA pattern?                          ListMatch eslm = listman.MatchesList(r.title' 12);                          if (eslm.Success)                          {                              // Matches BNA                              attribs.Add("watchword"' eslm.matchedItem);                              message = GetMessage(5040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' eslm.matchedItem));                              break;                          }                            // Does the edit summary match a BES pattern?                          ListMatch lm = listman.MatchesList(r.comment' 20);                          if (lm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' lm.matchedItem);                              message = GetMessage(95040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' lm.matchedItem));                              break;                          }                            // If we're still here that means                          // - the create didn't get ignored by adminlist or whitelist                          // - the create didn't match any watch patterns                          // Now' if any of the following is true' we'll must report it.                          // - Create by blacklisted user                          // - Create by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // Created by an unlisted reguser with non-special create size' ignore                          if ((userOffset == 4) && !createSpecial)                              return;                            // Else: Create had special size' so let it shown (default)' don't return!                      }                      // This block handles: Page edits                      else                      {                          bool editSpecial = false;                            // Edit by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.editBig)                          {                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5110 + userOffset' ref attribs);                              editSpecial = true;                          }                          else if (r.szdiff <= config.editBlank)                          {                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5120 + userOffset' ref attribs);                              editSpecial = true;                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5100 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Edit summary matches a BES pattern                          // - Edit blanked the page                          // - Edit replaced the page                          // - Article is on watchlist                            // Does the edit summary match a BES pattern?                          ListMatch elm = listman.MatchesList(r.comment' 20);                          if (elm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' elm.matchedItem);                              message = GetMessage(95130 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16310' r.comment' (String)attribs["article"]));                              break;                          }                            // Did the user user blank the page?                          if (project.rautosummBlank.IsMatch(r.comment))                          {                              message = GetMessage(96010 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16311' (String)attribs["article"]));                              break;                          }                            Match rplm = project.rautosummReplace.Match(r.comment);                          if (rplm.Success)                          {                              // The user replaced the page.                              try                              {                                  attribs.Add("profanity"' rplm.Groups["item1"].Captures[0].Value);                                  message = GetMessage(96020 + userOffset' ref attribs);                              }                              catch (ArgumentOutOfRangeException)                              {                                  // This wiki probably doesn't have a profanity attribute                                  message = GetMessage(96030 + userOffset' ref attribs);                              }                              break;                          }                            // Is the article on the watchlist?                          ListMatch welm = listman.IsWatchedArticle(r.title' r.project);                          if (welm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5130 + userOffset' ref attribs);                              break;                          }                            // If we're still here that means                          // - the edit didn't get ignored by adminlist or whitelist                          // - the edit didn't match any watch patterns                          // Now' if any of the following is true' we must still report it.                          // - Edit by blacklisted user                          // - Edit by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // If nothing special about the edit' return to ignore                          if (!editSpecial)                              return;                      }                      break;                  case RCEvent.EventType.move:                      // if moves are softhidden hide moves by admin' bot or whitelist                      if ((config.feedFilterEventMove == 2) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                      {                          return;                      }                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("fromname"' project.interwikiLink + r.title);                      attribs.Add("cfromname"' r.title);                      attribs.Add("toname"' project.interwikiLink + r.movedTo);                      attribs.Add("ctoname"' r.movedTo);                      attribs.Add("url"' r.blockLength); //The blockLength field stores the moveFrom URL                      attribs.Add("reason"' r.comment);                      message = GetMessage(5500 + userOffset' ref attribs);                      break;                  case RCEvent.EventType.block:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.title.Split(new char[] { ':' }' 2)[1]));                      attribs.Add("length"' r.blockLength);                      attribs.Add("reason"' r.comment);                      message = GetMessage(5400' ref attribs);                      //If the blocked user (r.title) isn't botlisted' add to blacklist                      if (listman.ClassifyEditor(r.title.Split(new char[] { ':' }' 2)[1]' r.project) != ListManager.UserType.bot)                      {                          //If this isn't an indefinite/infinite block' add to blacklist                          if ((r.blockLength.ToLower() != "indefinite") && (r.blockLength.ToLower() != "infinite"))                          {                                                               // 2'678'400 seconds = 744 hours = 31 days                              int listLen = Convert.ToInt32(CVNBotUtils.ParseDateTimeLength(r.blockLength' 2678400) * 2.5);                              string blComment = "Autoblacklist: " + r.comment + " on " + r.project;                              message += "\n" + listman.AddUserToList(r.title.Split(new char[] { ':' }' 2)[1]' "" //Global bl                                  ' ListManager.UserType.blacklisted' r.user' blComment' listLen);                              Broadcast("BL"' "ADD"' r.title.Split(new char[] { ':' }' 2)[1]' listLen' blComment' r.user);                          }                      }                      break;                  case RCEvent.EventType.unblock:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("reason"' r.comment);                      message = GetMessage(5700' ref attribs);                      break;                  case RCEvent.EventType.delete:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      attribs.Add("reason"' r.comment);                      message = GetMessage(05300' ref attribs);                      break;                  case RCEvent.EventType.newuser:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("caurl"' "https://meta.wikimedia.org/wiki/Special:CentralAuth/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch = listman.MatchesList(r.user' 11);                      if (bnuMatch.Success && feedFilterThisEvent == 1)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch.matchedItem);                          attribs.Add("wwreason"' bnuMatch.matchedReason);                          message = GetMessage(5201' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5200' ref attribs);                      }                      break;                  case RCEvent.EventType.newuser2:                      attribs.Add("creator"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ccreator"' r.user);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.title);                      attribs.Add("ceditor"' r.title);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch2 = listman.MatchesList(r.user' 11);                      if (bnuMatch2.Success)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch2.matchedItem);                          attribs.Add("wwreason"' bnuMatch2.matchedReason);                          message = GetMessage(5211' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch2.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5210' ref attribs);                      }                      break;                  case RCEvent.EventType.upload:                      int uMsg = 5600;                        // Check if the edit summary matches BES                      ListMatch ubes2 = listman.MatchesList(r.comment' 20);                      if (ubes2.Success)                      {                          attribs.Add("watchword"' ubes2.matchedItem);                          attribs.Add("lmreason"' ubes2.matchedReason);                          uMsg = 95620;                      }                        // Now check if the title matches BES                      ListMatch ubes1 = listman.MatchesList(r.title' 20);                      if (ubes1.Success)                      {                          attribs.Add("watchword"' ubes1.matchedItem);                          attribs.Add("lmreason"' ubes1.matchedReason);                          uMsg = 95620;                      }                        // Check if upload is watched                      ListMatch uwa = listman.IsWatchedArticle(r.title' r.project);                      if (uwa.Success)                          uMsg = 5610;                        // If normal and uploaded by an admin' bot or whitelisted person always hide                      if ((uMsg == 5600) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                          return;                        // if normal and uploads are softhidden hide normal user and anon aswell                      if ((uMsg == 5600) && (config.feedFilterEventUpload == 2) && ((userOffset == 3) || (userOffset == 4)))                          return;                        // If our message is 95620' we might need to truncate r.comment                      if (uMsg == 95620)                      {                          if (r.comment.Length > 25)                              r.comment = r.comment.Substring(0' 23) + "...";                      }                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("uploaditem"' project.interwikiLink + r.title);                      attribs.Add("cuploaditem"' r.title);                      attribs.Add("reason"' r.comment);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(userOffset + uMsg' ref attribs);                      break;                  case RCEvent.EventType.protect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in protect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5900' ref attribs);                      break;                  case RCEvent.EventType.unprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in unprotect is fine' it's just the pagetitle                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(5901' ref attribs);                      break;                  case RCEvent.EventType.modifyprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in modifyprotect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5902' ref attribs);                      break;              }
Magic Number,CVNBot,Program,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Program.cs,ReactToRCEvent,The following statement contains a magic number: switch (r.eventtype)              {                  // This case handles:                  // - New page creations                  // - Page edits                  case RCEvent.EventType.edit:                      String diffsize;                      if (r.szdiff >= 0)                          diffsize = "+" + r.szdiff.ToString();                      else                          diffsize = r.szdiff.ToString();                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("size"' diffsize);                      attribs.Add("url"' r.url);                      attribs.Add("reason"' r.comment);                        // This block handles: New page creations                      if (r.newpage)                      {                          bool createSpecial = false;                            // New pages created by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.newBig)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5010 + userOffset' ref attribs);                          }                          else if (r.szdiff <= config.newSmall)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5020 + userOffset' ref attribs);                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5000 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Article is on watchlist                          // - Page title matches a BNA pattern                          // - Edit summary matches a BES pattern                            // Is the article on the watchlist?                          ListMatch wlm = listman.IsWatchedArticle(r.title' r.project);                          if (wlm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5030 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16301' (String)attribs["article"]));                              break;                          }                            // Does the page title match a BNA pattern?                          ListMatch eslm = listman.MatchesList(r.title' 12);                          if (eslm.Success)                          {                              // Matches BNA                              attribs.Add("watchword"' eslm.matchedItem);                              message = GetMessage(5040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' eslm.matchedItem));                              break;                          }                            // Does the edit summary match a BES pattern?                          ListMatch lm = listman.MatchesList(r.comment' 20);                          if (lm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' lm.matchedItem);                              message = GetMessage(95040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' lm.matchedItem));                              break;                          }                            // If we're still here that means                          // - the create didn't get ignored by adminlist or whitelist                          // - the create didn't match any watch patterns                          // Now' if any of the following is true' we'll must report it.                          // - Create by blacklisted user                          // - Create by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // Created by an unlisted reguser with non-special create size' ignore                          if ((userOffset == 4) && !createSpecial)                              return;                            // Else: Create had special size' so let it shown (default)' don't return!                      }                      // This block handles: Page edits                      else                      {                          bool editSpecial = false;                            // Edit by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.editBig)                          {                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5110 + userOffset' ref attribs);                              editSpecial = true;                          }                          else if (r.szdiff <= config.editBlank)                          {                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5120 + userOffset' ref attribs);                              editSpecial = true;                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5100 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Edit summary matches a BES pattern                          // - Edit blanked the page                          // - Edit replaced the page                          // - Article is on watchlist                            // Does the edit summary match a BES pattern?                          ListMatch elm = listman.MatchesList(r.comment' 20);                          if (elm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' elm.matchedItem);                              message = GetMessage(95130 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16310' r.comment' (String)attribs["article"]));                              break;                          }                            // Did the user user blank the page?                          if (project.rautosummBlank.IsMatch(r.comment))                          {                              message = GetMessage(96010 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16311' (String)attribs["article"]));                              break;                          }                            Match rplm = project.rautosummReplace.Match(r.comment);                          if (rplm.Success)                          {                              // The user replaced the page.                              try                              {                                  attribs.Add("profanity"' rplm.Groups["item1"].Captures[0].Value);                                  message = GetMessage(96020 + userOffset' ref attribs);                              }                              catch (ArgumentOutOfRangeException)                              {                                  // This wiki probably doesn't have a profanity attribute                                  message = GetMessage(96030 + userOffset' ref attribs);                              }                              break;                          }                            // Is the article on the watchlist?                          ListMatch welm = listman.IsWatchedArticle(r.title' r.project);                          if (welm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5130 + userOffset' ref attribs);                              break;                          }                            // If we're still here that means                          // - the edit didn't get ignored by adminlist or whitelist                          // - the edit didn't match any watch patterns                          // Now' if any of the following is true' we must still report it.                          // - Edit by blacklisted user                          // - Edit by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // If nothing special about the edit' return to ignore                          if (!editSpecial)                              return;                      }                      break;                  case RCEvent.EventType.move:                      // if moves are softhidden hide moves by admin' bot or whitelist                      if ((config.feedFilterEventMove == 2) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                      {                          return;                      }                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("fromname"' project.interwikiLink + r.title);                      attribs.Add("cfromname"' r.title);                      attribs.Add("toname"' project.interwikiLink + r.movedTo);                      attribs.Add("ctoname"' r.movedTo);                      attribs.Add("url"' r.blockLength); //The blockLength field stores the moveFrom URL                      attribs.Add("reason"' r.comment);                      message = GetMessage(5500 + userOffset' ref attribs);                      break;                  case RCEvent.EventType.block:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.title.Split(new char[] { ':' }' 2)[1]));                      attribs.Add("length"' r.blockLength);                      attribs.Add("reason"' r.comment);                      message = GetMessage(5400' ref attribs);                      //If the blocked user (r.title) isn't botlisted' add to blacklist                      if (listman.ClassifyEditor(r.title.Split(new char[] { ':' }' 2)[1]' r.project) != ListManager.UserType.bot)                      {                          //If this isn't an indefinite/infinite block' add to blacklist                          if ((r.blockLength.ToLower() != "indefinite") && (r.blockLength.ToLower() != "infinite"))                          {                                                               // 2'678'400 seconds = 744 hours = 31 days                              int listLen = Convert.ToInt32(CVNBotUtils.ParseDateTimeLength(r.blockLength' 2678400) * 2.5);                              string blComment = "Autoblacklist: " + r.comment + " on " + r.project;                              message += "\n" + listman.AddUserToList(r.title.Split(new char[] { ':' }' 2)[1]' "" //Global bl                                  ' ListManager.UserType.blacklisted' r.user' blComment' listLen);                              Broadcast("BL"' "ADD"' r.title.Split(new char[] { ':' }' 2)[1]' listLen' blComment' r.user);                          }                      }                      break;                  case RCEvent.EventType.unblock:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("reason"' r.comment);                      message = GetMessage(5700' ref attribs);                      break;                  case RCEvent.EventType.delete:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      attribs.Add("reason"' r.comment);                      message = GetMessage(05300' ref attribs);                      break;                  case RCEvent.EventType.newuser:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("caurl"' "https://meta.wikimedia.org/wiki/Special:CentralAuth/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch = listman.MatchesList(r.user' 11);                      if (bnuMatch.Success && feedFilterThisEvent == 1)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch.matchedItem);                          attribs.Add("wwreason"' bnuMatch.matchedReason);                          message = GetMessage(5201' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5200' ref attribs);                      }                      break;                  case RCEvent.EventType.newuser2:                      attribs.Add("creator"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ccreator"' r.user);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.title);                      attribs.Add("ceditor"' r.title);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch2 = listman.MatchesList(r.user' 11);                      if (bnuMatch2.Success)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch2.matchedItem);                          attribs.Add("wwreason"' bnuMatch2.matchedReason);                          message = GetMessage(5211' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch2.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5210' ref attribs);                      }                      break;                  case RCEvent.EventType.upload:                      int uMsg = 5600;                        // Check if the edit summary matches BES                      ListMatch ubes2 = listman.MatchesList(r.comment' 20);                      if (ubes2.Success)                      {                          attribs.Add("watchword"' ubes2.matchedItem);                          attribs.Add("lmreason"' ubes2.matchedReason);                          uMsg = 95620;                      }                        // Now check if the title matches BES                      ListMatch ubes1 = listman.MatchesList(r.title' 20);                      if (ubes1.Success)                      {                          attribs.Add("watchword"' ubes1.matchedItem);                          attribs.Add("lmreason"' ubes1.matchedReason);                          uMsg = 95620;                      }                        // Check if upload is watched                      ListMatch uwa = listman.IsWatchedArticle(r.title' r.project);                      if (uwa.Success)                          uMsg = 5610;                        // If normal and uploaded by an admin' bot or whitelisted person always hide                      if ((uMsg == 5600) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                          return;                        // if normal and uploads are softhidden hide normal user and anon aswell                      if ((uMsg == 5600) && (config.feedFilterEventUpload == 2) && ((userOffset == 3) || (userOffset == 4)))                          return;                        // If our message is 95620' we might need to truncate r.comment                      if (uMsg == 95620)                      {                          if (r.comment.Length > 25)                              r.comment = r.comment.Substring(0' 23) + "...";                      }                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("uploaditem"' project.interwikiLink + r.title);                      attribs.Add("cuploaditem"' r.title);                      attribs.Add("reason"' r.comment);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(userOffset + uMsg' ref attribs);                      break;                  case RCEvent.EventType.protect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in protect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5900' ref attribs);                      break;                  case RCEvent.EventType.unprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in unprotect is fine' it's just the pagetitle                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(5901' ref attribs);                      break;                  case RCEvent.EventType.modifyprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in modifyprotect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5902' ref attribs);                      break;              }
Magic Number,CVNBot,Program,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Program.cs,ReactToRCEvent,The following statement contains a magic number: switch (r.eventtype)              {                  // This case handles:                  // - New page creations                  // - Page edits                  case RCEvent.EventType.edit:                      String diffsize;                      if (r.szdiff >= 0)                          diffsize = "+" + r.szdiff.ToString();                      else                          diffsize = r.szdiff.ToString();                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("size"' diffsize);                      attribs.Add("url"' r.url);                      attribs.Add("reason"' r.comment);                        // This block handles: New page creations                      if (r.newpage)                      {                          bool createSpecial = false;                            // New pages created by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.newBig)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5010 + userOffset' ref attribs);                          }                          else if (r.szdiff <= config.newSmall)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5020 + userOffset' ref attribs);                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5000 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Article is on watchlist                          // - Page title matches a BNA pattern                          // - Edit summary matches a BES pattern                            // Is the article on the watchlist?                          ListMatch wlm = listman.IsWatchedArticle(r.title' r.project);                          if (wlm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5030 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16301' (String)attribs["article"]));                              break;                          }                            // Does the page title match a BNA pattern?                          ListMatch eslm = listman.MatchesList(r.title' 12);                          if (eslm.Success)                          {                              // Matches BNA                              attribs.Add("watchword"' eslm.matchedItem);                              message = GetMessage(5040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' eslm.matchedItem));                              break;                          }                            // Does the edit summary match a BES pattern?                          ListMatch lm = listman.MatchesList(r.comment' 20);                          if (lm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' lm.matchedItem);                              message = GetMessage(95040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' lm.matchedItem));                              break;                          }                            // If we're still here that means                          // - the create didn't get ignored by adminlist or whitelist                          // - the create didn't match any watch patterns                          // Now' if any of the following is true' we'll must report it.                          // - Create by blacklisted user                          // - Create by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // Created by an unlisted reguser with non-special create size' ignore                          if ((userOffset == 4) && !createSpecial)                              return;                            // Else: Create had special size' so let it shown (default)' don't return!                      }                      // This block handles: Page edits                      else                      {                          bool editSpecial = false;                            // Edit by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.editBig)                          {                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5110 + userOffset' ref attribs);                              editSpecial = true;                          }                          else if (r.szdiff <= config.editBlank)                          {                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5120 + userOffset' ref attribs);                              editSpecial = true;                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5100 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Edit summary matches a BES pattern                          // - Edit blanked the page                          // - Edit replaced the page                          // - Article is on watchlist                            // Does the edit summary match a BES pattern?                          ListMatch elm = listman.MatchesList(r.comment' 20);                          if (elm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' elm.matchedItem);                              message = GetMessage(95130 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16310' r.comment' (String)attribs["article"]));                              break;                          }                            // Did the user user blank the page?                          if (project.rautosummBlank.IsMatch(r.comment))                          {                              message = GetMessage(96010 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16311' (String)attribs["article"]));                              break;                          }                            Match rplm = project.rautosummReplace.Match(r.comment);                          if (rplm.Success)                          {                              // The user replaced the page.                              try                              {                                  attribs.Add("profanity"' rplm.Groups["item1"].Captures[0].Value);                                  message = GetMessage(96020 + userOffset' ref attribs);                              }                              catch (ArgumentOutOfRangeException)                              {                                  // This wiki probably doesn't have a profanity attribute                                  message = GetMessage(96030 + userOffset' ref attribs);                              }                              break;                          }                            // Is the article on the watchlist?                          ListMatch welm = listman.IsWatchedArticle(r.title' r.project);                          if (welm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5130 + userOffset' ref attribs);                              break;                          }                            // If we're still here that means                          // - the edit didn't get ignored by adminlist or whitelist                          // - the edit didn't match any watch patterns                          // Now' if any of the following is true' we must still report it.                          // - Edit by blacklisted user                          // - Edit by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // If nothing special about the edit' return to ignore                          if (!editSpecial)                              return;                      }                      break;                  case RCEvent.EventType.move:                      // if moves are softhidden hide moves by admin' bot or whitelist                      if ((config.feedFilterEventMove == 2) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                      {                          return;                      }                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("fromname"' project.interwikiLink + r.title);                      attribs.Add("cfromname"' r.title);                      attribs.Add("toname"' project.interwikiLink + r.movedTo);                      attribs.Add("ctoname"' r.movedTo);                      attribs.Add("url"' r.blockLength); //The blockLength field stores the moveFrom URL                      attribs.Add("reason"' r.comment);                      message = GetMessage(5500 + userOffset' ref attribs);                      break;                  case RCEvent.EventType.block:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.title.Split(new char[] { ':' }' 2)[1]));                      attribs.Add("length"' r.blockLength);                      attribs.Add("reason"' r.comment);                      message = GetMessage(5400' ref attribs);                      //If the blocked user (r.title) isn't botlisted' add to blacklist                      if (listman.ClassifyEditor(r.title.Split(new char[] { ':' }' 2)[1]' r.project) != ListManager.UserType.bot)                      {                          //If this isn't an indefinite/infinite block' add to blacklist                          if ((r.blockLength.ToLower() != "indefinite") && (r.blockLength.ToLower() != "infinite"))                          {                                                               // 2'678'400 seconds = 744 hours = 31 days                              int listLen = Convert.ToInt32(CVNBotUtils.ParseDateTimeLength(r.blockLength' 2678400) * 2.5);                              string blComment = "Autoblacklist: " + r.comment + " on " + r.project;                              message += "\n" + listman.AddUserToList(r.title.Split(new char[] { ':' }' 2)[1]' "" //Global bl                                  ' ListManager.UserType.blacklisted' r.user' blComment' listLen);                              Broadcast("BL"' "ADD"' r.title.Split(new char[] { ':' }' 2)[1]' listLen' blComment' r.user);                          }                      }                      break;                  case RCEvent.EventType.unblock:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("reason"' r.comment);                      message = GetMessage(5700' ref attribs);                      break;                  case RCEvent.EventType.delete:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      attribs.Add("reason"' r.comment);                      message = GetMessage(05300' ref attribs);                      break;                  case RCEvent.EventType.newuser:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("caurl"' "https://meta.wikimedia.org/wiki/Special:CentralAuth/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch = listman.MatchesList(r.user' 11);                      if (bnuMatch.Success && feedFilterThisEvent == 1)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch.matchedItem);                          attribs.Add("wwreason"' bnuMatch.matchedReason);                          message = GetMessage(5201' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5200' ref attribs);                      }                      break;                  case RCEvent.EventType.newuser2:                      attribs.Add("creator"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ccreator"' r.user);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.title);                      attribs.Add("ceditor"' r.title);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch2 = listman.MatchesList(r.user' 11);                      if (bnuMatch2.Success)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch2.matchedItem);                          attribs.Add("wwreason"' bnuMatch2.matchedReason);                          message = GetMessage(5211' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch2.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5210' ref attribs);                      }                      break;                  case RCEvent.EventType.upload:                      int uMsg = 5600;                        // Check if the edit summary matches BES                      ListMatch ubes2 = listman.MatchesList(r.comment' 20);                      if (ubes2.Success)                      {                          attribs.Add("watchword"' ubes2.matchedItem);                          attribs.Add("lmreason"' ubes2.matchedReason);                          uMsg = 95620;                      }                        // Now check if the title matches BES                      ListMatch ubes1 = listman.MatchesList(r.title' 20);                      if (ubes1.Success)                      {                          attribs.Add("watchword"' ubes1.matchedItem);                          attribs.Add("lmreason"' ubes1.matchedReason);                          uMsg = 95620;                      }                        // Check if upload is watched                      ListMatch uwa = listman.IsWatchedArticle(r.title' r.project);                      if (uwa.Success)                          uMsg = 5610;                        // If normal and uploaded by an admin' bot or whitelisted person always hide                      if ((uMsg == 5600) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                          return;                        // if normal and uploads are softhidden hide normal user and anon aswell                      if ((uMsg == 5600) && (config.feedFilterEventUpload == 2) && ((userOffset == 3) || (userOffset == 4)))                          return;                        // If our message is 95620' we might need to truncate r.comment                      if (uMsg == 95620)                      {                          if (r.comment.Length > 25)                              r.comment = r.comment.Substring(0' 23) + "...";                      }                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("uploaditem"' project.interwikiLink + r.title);                      attribs.Add("cuploaditem"' r.title);                      attribs.Add("reason"' r.comment);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(userOffset + uMsg' ref attribs);                      break;                  case RCEvent.EventType.protect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in protect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5900' ref attribs);                      break;                  case RCEvent.EventType.unprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in unprotect is fine' it's just the pagetitle                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(5901' ref attribs);                      break;                  case RCEvent.EventType.modifyprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in modifyprotect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5902' ref attribs);                      break;              }
Magic Number,CVNBot,Program,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Program.cs,ReactToRCEvent,The following statement contains a magic number: switch (r.eventtype)              {                  // This case handles:                  // - New page creations                  // - Page edits                  case RCEvent.EventType.edit:                      String diffsize;                      if (r.szdiff >= 0)                          diffsize = "+" + r.szdiff.ToString();                      else                          diffsize = r.szdiff.ToString();                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("size"' diffsize);                      attribs.Add("url"' r.url);                      attribs.Add("reason"' r.comment);                        // This block handles: New page creations                      if (r.newpage)                      {                          bool createSpecial = false;                            // New pages created by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.newBig)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5010 + userOffset' ref attribs);                          }                          else if (r.szdiff <= config.newSmall)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5020 + userOffset' ref attribs);                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5000 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Article is on watchlist                          // - Page title matches a BNA pattern                          // - Edit summary matches a BES pattern                            // Is the article on the watchlist?                          ListMatch wlm = listman.IsWatchedArticle(r.title' r.project);                          if (wlm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5030 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16301' (String)attribs["article"]));                              break;                          }                            // Does the page title match a BNA pattern?                          ListMatch eslm = listman.MatchesList(r.title' 12);                          if (eslm.Success)                          {                              // Matches BNA                              attribs.Add("watchword"' eslm.matchedItem);                              message = GetMessage(5040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' eslm.matchedItem));                              break;                          }                            // Does the edit summary match a BES pattern?                          ListMatch lm = listman.MatchesList(r.comment' 20);                          if (lm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' lm.matchedItem);                              message = GetMessage(95040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' lm.matchedItem));                              break;                          }                            // If we're still here that means                          // - the create didn't get ignored by adminlist or whitelist                          // - the create didn't match any watch patterns                          // Now' if any of the following is true' we'll must report it.                          // - Create by blacklisted user                          // - Create by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // Created by an unlisted reguser with non-special create size' ignore                          if ((userOffset == 4) && !createSpecial)                              return;                            // Else: Create had special size' so let it shown (default)' don't return!                      }                      // This block handles: Page edits                      else                      {                          bool editSpecial = false;                            // Edit by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.editBig)                          {                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5110 + userOffset' ref attribs);                              editSpecial = true;                          }                          else if (r.szdiff <= config.editBlank)                          {                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5120 + userOffset' ref attribs);                              editSpecial = true;                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5100 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Edit summary matches a BES pattern                          // - Edit blanked the page                          // - Edit replaced the page                          // - Article is on watchlist                            // Does the edit summary match a BES pattern?                          ListMatch elm = listman.MatchesList(r.comment' 20);                          if (elm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' elm.matchedItem);                              message = GetMessage(95130 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16310' r.comment' (String)attribs["article"]));                              break;                          }                            // Did the user user blank the page?                          if (project.rautosummBlank.IsMatch(r.comment))                          {                              message = GetMessage(96010 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16311' (String)attribs["article"]));                              break;                          }                            Match rplm = project.rautosummReplace.Match(r.comment);                          if (rplm.Success)                          {                              // The user replaced the page.                              try                              {                                  attribs.Add("profanity"' rplm.Groups["item1"].Captures[0].Value);                                  message = GetMessage(96020 + userOffset' ref attribs);                              }                              catch (ArgumentOutOfRangeException)                              {                                  // This wiki probably doesn't have a profanity attribute                                  message = GetMessage(96030 + userOffset' ref attribs);                              }                              break;                          }                            // Is the article on the watchlist?                          ListMatch welm = listman.IsWatchedArticle(r.title' r.project);                          if (welm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5130 + userOffset' ref attribs);                              break;                          }                            // If we're still here that means                          // - the edit didn't get ignored by adminlist or whitelist                          // - the edit didn't match any watch patterns                          // Now' if any of the following is true' we must still report it.                          // - Edit by blacklisted user                          // - Edit by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // If nothing special about the edit' return to ignore                          if (!editSpecial)                              return;                      }                      break;                  case RCEvent.EventType.move:                      // if moves are softhidden hide moves by admin' bot or whitelist                      if ((config.feedFilterEventMove == 2) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                      {                          return;                      }                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("fromname"' project.interwikiLink + r.title);                      attribs.Add("cfromname"' r.title);                      attribs.Add("toname"' project.interwikiLink + r.movedTo);                      attribs.Add("ctoname"' r.movedTo);                      attribs.Add("url"' r.blockLength); //The blockLength field stores the moveFrom URL                      attribs.Add("reason"' r.comment);                      message = GetMessage(5500 + userOffset' ref attribs);                      break;                  case RCEvent.EventType.block:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.title.Split(new char[] { ':' }' 2)[1]));                      attribs.Add("length"' r.blockLength);                      attribs.Add("reason"' r.comment);                      message = GetMessage(5400' ref attribs);                      //If the blocked user (r.title) isn't botlisted' add to blacklist                      if (listman.ClassifyEditor(r.title.Split(new char[] { ':' }' 2)[1]' r.project) != ListManager.UserType.bot)                      {                          //If this isn't an indefinite/infinite block' add to blacklist                          if ((r.blockLength.ToLower() != "indefinite") && (r.blockLength.ToLower() != "infinite"))                          {                                                               // 2'678'400 seconds = 744 hours = 31 days                              int listLen = Convert.ToInt32(CVNBotUtils.ParseDateTimeLength(r.blockLength' 2678400) * 2.5);                              string blComment = "Autoblacklist: " + r.comment + " on " + r.project;                              message += "\n" + listman.AddUserToList(r.title.Split(new char[] { ':' }' 2)[1]' "" //Global bl                                  ' ListManager.UserType.blacklisted' r.user' blComment' listLen);                              Broadcast("BL"' "ADD"' r.title.Split(new char[] { ':' }' 2)[1]' listLen' blComment' r.user);                          }                      }                      break;                  case RCEvent.EventType.unblock:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("reason"' r.comment);                      message = GetMessage(5700' ref attribs);                      break;                  case RCEvent.EventType.delete:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      attribs.Add("reason"' r.comment);                      message = GetMessage(05300' ref attribs);                      break;                  case RCEvent.EventType.newuser:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("caurl"' "https://meta.wikimedia.org/wiki/Special:CentralAuth/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch = listman.MatchesList(r.user' 11);                      if (bnuMatch.Success && feedFilterThisEvent == 1)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch.matchedItem);                          attribs.Add("wwreason"' bnuMatch.matchedReason);                          message = GetMessage(5201' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5200' ref attribs);                      }                      break;                  case RCEvent.EventType.newuser2:                      attribs.Add("creator"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ccreator"' r.user);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.title);                      attribs.Add("ceditor"' r.title);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch2 = listman.MatchesList(r.user' 11);                      if (bnuMatch2.Success)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch2.matchedItem);                          attribs.Add("wwreason"' bnuMatch2.matchedReason);                          message = GetMessage(5211' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch2.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5210' ref attribs);                      }                      break;                  case RCEvent.EventType.upload:                      int uMsg = 5600;                        // Check if the edit summary matches BES                      ListMatch ubes2 = listman.MatchesList(r.comment' 20);                      if (ubes2.Success)                      {                          attribs.Add("watchword"' ubes2.matchedItem);                          attribs.Add("lmreason"' ubes2.matchedReason);                          uMsg = 95620;                      }                        // Now check if the title matches BES                      ListMatch ubes1 = listman.MatchesList(r.title' 20);                      if (ubes1.Success)                      {                          attribs.Add("watchword"' ubes1.matchedItem);                          attribs.Add("lmreason"' ubes1.matchedReason);                          uMsg = 95620;                      }                        // Check if upload is watched                      ListMatch uwa = listman.IsWatchedArticle(r.title' r.project);                      if (uwa.Success)                          uMsg = 5610;                        // If normal and uploaded by an admin' bot or whitelisted person always hide                      if ((uMsg == 5600) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                          return;                        // if normal and uploads are softhidden hide normal user and anon aswell                      if ((uMsg == 5600) && (config.feedFilterEventUpload == 2) && ((userOffset == 3) || (userOffset == 4)))                          return;                        // If our message is 95620' we might need to truncate r.comment                      if (uMsg == 95620)                      {                          if (r.comment.Length > 25)                              r.comment = r.comment.Substring(0' 23) + "...";                      }                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("uploaditem"' project.interwikiLink + r.title);                      attribs.Add("cuploaditem"' r.title);                      attribs.Add("reason"' r.comment);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(userOffset + uMsg' ref attribs);                      break;                  case RCEvent.EventType.protect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in protect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5900' ref attribs);                      break;                  case RCEvent.EventType.unprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in unprotect is fine' it's just the pagetitle                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(5901' ref attribs);                      break;                  case RCEvent.EventType.modifyprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in modifyprotect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5902' ref attribs);                      break;              }
Magic Number,CVNBot,Program,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Program.cs,ReactToRCEvent,The following statement contains a magic number: switch (r.eventtype)              {                  // This case handles:                  // - New page creations                  // - Page edits                  case RCEvent.EventType.edit:                      String diffsize;                      if (r.szdiff >= 0)                          diffsize = "+" + r.szdiff.ToString();                      else                          diffsize = r.szdiff.ToString();                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("size"' diffsize);                      attribs.Add("url"' r.url);                      attribs.Add("reason"' r.comment);                        // This block handles: New page creations                      if (r.newpage)                      {                          bool createSpecial = false;                            // New pages created by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.newBig)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5010 + userOffset' ref attribs);                          }                          else if (r.szdiff <= config.newSmall)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5020 + userOffset' ref attribs);                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5000 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Article is on watchlist                          // - Page title matches a BNA pattern                          // - Edit summary matches a BES pattern                            // Is the article on the watchlist?                          ListMatch wlm = listman.IsWatchedArticle(r.title' r.project);                          if (wlm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5030 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16301' (String)attribs["article"]));                              break;                          }                            // Does the page title match a BNA pattern?                          ListMatch eslm = listman.MatchesList(r.title' 12);                          if (eslm.Success)                          {                              // Matches BNA                              attribs.Add("watchword"' eslm.matchedItem);                              message = GetMessage(5040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' eslm.matchedItem));                              break;                          }                            // Does the edit summary match a BES pattern?                          ListMatch lm = listman.MatchesList(r.comment' 20);                          if (lm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' lm.matchedItem);                              message = GetMessage(95040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' lm.matchedItem));                              break;                          }                            // If we're still here that means                          // - the create didn't get ignored by adminlist or whitelist                          // - the create didn't match any watch patterns                          // Now' if any of the following is true' we'll must report it.                          // - Create by blacklisted user                          // - Create by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // Created by an unlisted reguser with non-special create size' ignore                          if ((userOffset == 4) && !createSpecial)                              return;                            // Else: Create had special size' so let it shown (default)' don't return!                      }                      // This block handles: Page edits                      else                      {                          bool editSpecial = false;                            // Edit by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.editBig)                          {                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5110 + userOffset' ref attribs);                              editSpecial = true;                          }                          else if (r.szdiff <= config.editBlank)                          {                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5120 + userOffset' ref attribs);                              editSpecial = true;                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5100 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Edit summary matches a BES pattern                          // - Edit blanked the page                          // - Edit replaced the page                          // - Article is on watchlist                            // Does the edit summary match a BES pattern?                          ListMatch elm = listman.MatchesList(r.comment' 20);                          if (elm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' elm.matchedItem);                              message = GetMessage(95130 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16310' r.comment' (String)attribs["article"]));                              break;                          }                            // Did the user user blank the page?                          if (project.rautosummBlank.IsMatch(r.comment))                          {                              message = GetMessage(96010 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16311' (String)attribs["article"]));                              break;                          }                            Match rplm = project.rautosummReplace.Match(r.comment);                          if (rplm.Success)                          {                              // The user replaced the page.                              try                              {                                  attribs.Add("profanity"' rplm.Groups["item1"].Captures[0].Value);                                  message = GetMessage(96020 + userOffset' ref attribs);                              }                              catch (ArgumentOutOfRangeException)                              {                                  // This wiki probably doesn't have a profanity attribute                                  message = GetMessage(96030 + userOffset' ref attribs);                              }                              break;                          }                            // Is the article on the watchlist?                          ListMatch welm = listman.IsWatchedArticle(r.title' r.project);                          if (welm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5130 + userOffset' ref attribs);                              break;                          }                            // If we're still here that means                          // - the edit didn't get ignored by adminlist or whitelist                          // - the edit didn't match any watch patterns                          // Now' if any of the following is true' we must still report it.                          // - Edit by blacklisted user                          // - Edit by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // If nothing special about the edit' return to ignore                          if (!editSpecial)                              return;                      }                      break;                  case RCEvent.EventType.move:                      // if moves are softhidden hide moves by admin' bot or whitelist                      if ((config.feedFilterEventMove == 2) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                      {                          return;                      }                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("fromname"' project.interwikiLink + r.title);                      attribs.Add("cfromname"' r.title);                      attribs.Add("toname"' project.interwikiLink + r.movedTo);                      attribs.Add("ctoname"' r.movedTo);                      attribs.Add("url"' r.blockLength); //The blockLength field stores the moveFrom URL                      attribs.Add("reason"' r.comment);                      message = GetMessage(5500 + userOffset' ref attribs);                      break;                  case RCEvent.EventType.block:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.title.Split(new char[] { ':' }' 2)[1]));                      attribs.Add("length"' r.blockLength);                      attribs.Add("reason"' r.comment);                      message = GetMessage(5400' ref attribs);                      //If the blocked user (r.title) isn't botlisted' add to blacklist                      if (listman.ClassifyEditor(r.title.Split(new char[] { ':' }' 2)[1]' r.project) != ListManager.UserType.bot)                      {                          //If this isn't an indefinite/infinite block' add to blacklist                          if ((r.blockLength.ToLower() != "indefinite") && (r.blockLength.ToLower() != "infinite"))                          {                                                               // 2'678'400 seconds = 744 hours = 31 days                              int listLen = Convert.ToInt32(CVNBotUtils.ParseDateTimeLength(r.blockLength' 2678400) * 2.5);                              string blComment = "Autoblacklist: " + r.comment + " on " + r.project;                              message += "\n" + listman.AddUserToList(r.title.Split(new char[] { ':' }' 2)[1]' "" //Global bl                                  ' ListManager.UserType.blacklisted' r.user' blComment' listLen);                              Broadcast("BL"' "ADD"' r.title.Split(new char[] { ':' }' 2)[1]' listLen' blComment' r.user);                          }                      }                      break;                  case RCEvent.EventType.unblock:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("reason"' r.comment);                      message = GetMessage(5700' ref attribs);                      break;                  case RCEvent.EventType.delete:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      attribs.Add("reason"' r.comment);                      message = GetMessage(05300' ref attribs);                      break;                  case RCEvent.EventType.newuser:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("caurl"' "https://meta.wikimedia.org/wiki/Special:CentralAuth/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch = listman.MatchesList(r.user' 11);                      if (bnuMatch.Success && feedFilterThisEvent == 1)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch.matchedItem);                          attribs.Add("wwreason"' bnuMatch.matchedReason);                          message = GetMessage(5201' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5200' ref attribs);                      }                      break;                  case RCEvent.EventType.newuser2:                      attribs.Add("creator"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ccreator"' r.user);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.title);                      attribs.Add("ceditor"' r.title);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch2 = listman.MatchesList(r.user' 11);                      if (bnuMatch2.Success)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch2.matchedItem);                          attribs.Add("wwreason"' bnuMatch2.matchedReason);                          message = GetMessage(5211' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch2.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5210' ref attribs);                      }                      break;                  case RCEvent.EventType.upload:                      int uMsg = 5600;                        // Check if the edit summary matches BES                      ListMatch ubes2 = listman.MatchesList(r.comment' 20);                      if (ubes2.Success)                      {                          attribs.Add("watchword"' ubes2.matchedItem);                          attribs.Add("lmreason"' ubes2.matchedReason);                          uMsg = 95620;                      }                        // Now check if the title matches BES                      ListMatch ubes1 = listman.MatchesList(r.title' 20);                      if (ubes1.Success)                      {                          attribs.Add("watchword"' ubes1.matchedItem);                          attribs.Add("lmreason"' ubes1.matchedReason);                          uMsg = 95620;                      }                        // Check if upload is watched                      ListMatch uwa = listman.IsWatchedArticle(r.title' r.project);                      if (uwa.Success)                          uMsg = 5610;                        // If normal and uploaded by an admin' bot or whitelisted person always hide                      if ((uMsg == 5600) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                          return;                        // if normal and uploads are softhidden hide normal user and anon aswell                      if ((uMsg == 5600) && (config.feedFilterEventUpload == 2) && ((userOffset == 3) || (userOffset == 4)))                          return;                        // If our message is 95620' we might need to truncate r.comment                      if (uMsg == 95620)                      {                          if (r.comment.Length > 25)                              r.comment = r.comment.Substring(0' 23) + "...";                      }                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("uploaditem"' project.interwikiLink + r.title);                      attribs.Add("cuploaditem"' r.title);                      attribs.Add("reason"' r.comment);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(userOffset + uMsg' ref attribs);                      break;                  case RCEvent.EventType.protect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in protect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5900' ref attribs);                      break;                  case RCEvent.EventType.unprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in unprotect is fine' it's just the pagetitle                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(5901' ref attribs);                      break;                  case RCEvent.EventType.modifyprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in modifyprotect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5902' ref attribs);                      break;              }
Magic Number,CVNBot,Program,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Program.cs,ReactToRCEvent,The following statement contains a magic number: switch (r.eventtype)              {                  // This case handles:                  // - New page creations                  // - Page edits                  case RCEvent.EventType.edit:                      String diffsize;                      if (r.szdiff >= 0)                          diffsize = "+" + r.szdiff.ToString();                      else                          diffsize = r.szdiff.ToString();                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("size"' diffsize);                      attribs.Add("url"' r.url);                      attribs.Add("reason"' r.comment);                        // This block handles: New page creations                      if (r.newpage)                      {                          bool createSpecial = false;                            // New pages created by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.newBig)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5010 + userOffset' ref attribs);                          }                          else if (r.szdiff <= config.newSmall)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5020 + userOffset' ref attribs);                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5000 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Article is on watchlist                          // - Page title matches a BNA pattern                          // - Edit summary matches a BES pattern                            // Is the article on the watchlist?                          ListMatch wlm = listman.IsWatchedArticle(r.title' r.project);                          if (wlm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5030 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16301' (String)attribs["article"]));                              break;                          }                            // Does the page title match a BNA pattern?                          ListMatch eslm = listman.MatchesList(r.title' 12);                          if (eslm.Success)                          {                              // Matches BNA                              attribs.Add("watchword"' eslm.matchedItem);                              message = GetMessage(5040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' eslm.matchedItem));                              break;                          }                            // Does the edit summary match a BES pattern?                          ListMatch lm = listman.MatchesList(r.comment' 20);                          if (lm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' lm.matchedItem);                              message = GetMessage(95040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' lm.matchedItem));                              break;                          }                            // If we're still here that means                          // - the create didn't get ignored by adminlist or whitelist                          // - the create didn't match any watch patterns                          // Now' if any of the following is true' we'll must report it.                          // - Create by blacklisted user                          // - Create by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // Created by an unlisted reguser with non-special create size' ignore                          if ((userOffset == 4) && !createSpecial)                              return;                            // Else: Create had special size' so let it shown (default)' don't return!                      }                      // This block handles: Page edits                      else                      {                          bool editSpecial = false;                            // Edit by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.editBig)                          {                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5110 + userOffset' ref attribs);                              editSpecial = true;                          }                          else if (r.szdiff <= config.editBlank)                          {                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5120 + userOffset' ref attribs);                              editSpecial = true;                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5100 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Edit summary matches a BES pattern                          // - Edit blanked the page                          // - Edit replaced the page                          // - Article is on watchlist                            // Does the edit summary match a BES pattern?                          ListMatch elm = listman.MatchesList(r.comment' 20);                          if (elm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' elm.matchedItem);                              message = GetMessage(95130 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16310' r.comment' (String)attribs["article"]));                              break;                          }                            // Did the user user blank the page?                          if (project.rautosummBlank.IsMatch(r.comment))                          {                              message = GetMessage(96010 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16311' (String)attribs["article"]));                              break;                          }                            Match rplm = project.rautosummReplace.Match(r.comment);                          if (rplm.Success)                          {                              // The user replaced the page.                              try                              {                                  attribs.Add("profanity"' rplm.Groups["item1"].Captures[0].Value);                                  message = GetMessage(96020 + userOffset' ref attribs);                              }                              catch (ArgumentOutOfRangeException)                              {                                  // This wiki probably doesn't have a profanity attribute                                  message = GetMessage(96030 + userOffset' ref attribs);                              }                              break;                          }                            // Is the article on the watchlist?                          ListMatch welm = listman.IsWatchedArticle(r.title' r.project);                          if (welm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5130 + userOffset' ref attribs);                              break;                          }                            // If we're still here that means                          // - the edit didn't get ignored by adminlist or whitelist                          // - the edit didn't match any watch patterns                          // Now' if any of the following is true' we must still report it.                          // - Edit by blacklisted user                          // - Edit by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // If nothing special about the edit' return to ignore                          if (!editSpecial)                              return;                      }                      break;                  case RCEvent.EventType.move:                      // if moves are softhidden hide moves by admin' bot or whitelist                      if ((config.feedFilterEventMove == 2) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                      {                          return;                      }                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("fromname"' project.interwikiLink + r.title);                      attribs.Add("cfromname"' r.title);                      attribs.Add("toname"' project.interwikiLink + r.movedTo);                      attribs.Add("ctoname"' r.movedTo);                      attribs.Add("url"' r.blockLength); //The blockLength field stores the moveFrom URL                      attribs.Add("reason"' r.comment);                      message = GetMessage(5500 + userOffset' ref attribs);                      break;                  case RCEvent.EventType.block:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.title.Split(new char[] { ':' }' 2)[1]));                      attribs.Add("length"' r.blockLength);                      attribs.Add("reason"' r.comment);                      message = GetMessage(5400' ref attribs);                      //If the blocked user (r.title) isn't botlisted' add to blacklist                      if (listman.ClassifyEditor(r.title.Split(new char[] { ':' }' 2)[1]' r.project) != ListManager.UserType.bot)                      {                          //If this isn't an indefinite/infinite block' add to blacklist                          if ((r.blockLength.ToLower() != "indefinite") && (r.blockLength.ToLower() != "infinite"))                          {                                                               // 2'678'400 seconds = 744 hours = 31 days                              int listLen = Convert.ToInt32(CVNBotUtils.ParseDateTimeLength(r.blockLength' 2678400) * 2.5);                              string blComment = "Autoblacklist: " + r.comment + " on " + r.project;                              message += "\n" + listman.AddUserToList(r.title.Split(new char[] { ':' }' 2)[1]' "" //Global bl                                  ' ListManager.UserType.blacklisted' r.user' blComment' listLen);                              Broadcast("BL"' "ADD"' r.title.Split(new char[] { ':' }' 2)[1]' listLen' blComment' r.user);                          }                      }                      break;                  case RCEvent.EventType.unblock:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("reason"' r.comment);                      message = GetMessage(5700' ref attribs);                      break;                  case RCEvent.EventType.delete:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      attribs.Add("reason"' r.comment);                      message = GetMessage(05300' ref attribs);                      break;                  case RCEvent.EventType.newuser:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("caurl"' "https://meta.wikimedia.org/wiki/Special:CentralAuth/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch = listman.MatchesList(r.user' 11);                      if (bnuMatch.Success && feedFilterThisEvent == 1)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch.matchedItem);                          attribs.Add("wwreason"' bnuMatch.matchedReason);                          message = GetMessage(5201' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5200' ref attribs);                      }                      break;                  case RCEvent.EventType.newuser2:                      attribs.Add("creator"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ccreator"' r.user);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.title);                      attribs.Add("ceditor"' r.title);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch2 = listman.MatchesList(r.user' 11);                      if (bnuMatch2.Success)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch2.matchedItem);                          attribs.Add("wwreason"' bnuMatch2.matchedReason);                          message = GetMessage(5211' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch2.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5210' ref attribs);                      }                      break;                  case RCEvent.EventType.upload:                      int uMsg = 5600;                        // Check if the edit summary matches BES                      ListMatch ubes2 = listman.MatchesList(r.comment' 20);                      if (ubes2.Success)                      {                          attribs.Add("watchword"' ubes2.matchedItem);                          attribs.Add("lmreason"' ubes2.matchedReason);                          uMsg = 95620;                      }                        // Now check if the title matches BES                      ListMatch ubes1 = listman.MatchesList(r.title' 20);                      if (ubes1.Success)                      {                          attribs.Add("watchword"' ubes1.matchedItem);                          attribs.Add("lmreason"' ubes1.matchedReason);                          uMsg = 95620;                      }                        // Check if upload is watched                      ListMatch uwa = listman.IsWatchedArticle(r.title' r.project);                      if (uwa.Success)                          uMsg = 5610;                        // If normal and uploaded by an admin' bot or whitelisted person always hide                      if ((uMsg == 5600) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                          return;                        // if normal and uploads are softhidden hide normal user and anon aswell                      if ((uMsg == 5600) && (config.feedFilterEventUpload == 2) && ((userOffset == 3) || (userOffset == 4)))                          return;                        // If our message is 95620' we might need to truncate r.comment                      if (uMsg == 95620)                      {                          if (r.comment.Length > 25)                              r.comment = r.comment.Substring(0' 23) + "...";                      }                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("uploaditem"' project.interwikiLink + r.title);                      attribs.Add("cuploaditem"' r.title);                      attribs.Add("reason"' r.comment);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(userOffset + uMsg' ref attribs);                      break;                  case RCEvent.EventType.protect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in protect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5900' ref attribs);                      break;                  case RCEvent.EventType.unprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in unprotect is fine' it's just the pagetitle                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(5901' ref attribs);                      break;                  case RCEvent.EventType.modifyprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in modifyprotect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5902' ref attribs);                      break;              }
Magic Number,CVNBot,Program,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Program.cs,ReactToRCEvent,The following statement contains a magic number: switch (r.eventtype)              {                  // This case handles:                  // - New page creations                  // - Page edits                  case RCEvent.EventType.edit:                      String diffsize;                      if (r.szdiff >= 0)                          diffsize = "+" + r.szdiff.ToString();                      else                          diffsize = r.szdiff.ToString();                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("size"' diffsize);                      attribs.Add("url"' r.url);                      attribs.Add("reason"' r.comment);                        // This block handles: New page creations                      if (r.newpage)                      {                          bool createSpecial = false;                            // New pages created by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.newBig)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5010 + userOffset' ref attribs);                          }                          else if (r.szdiff <= config.newSmall)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5020 + userOffset' ref attribs);                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5000 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Article is on watchlist                          // - Page title matches a BNA pattern                          // - Edit summary matches a BES pattern                            // Is the article on the watchlist?                          ListMatch wlm = listman.IsWatchedArticle(r.title' r.project);                          if (wlm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5030 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16301' (String)attribs["article"]));                              break;                          }                            // Does the page title match a BNA pattern?                          ListMatch eslm = listman.MatchesList(r.title' 12);                          if (eslm.Success)                          {                              // Matches BNA                              attribs.Add("watchword"' eslm.matchedItem);                              message = GetMessage(5040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' eslm.matchedItem));                              break;                          }                            // Does the edit summary match a BES pattern?                          ListMatch lm = listman.MatchesList(r.comment' 20);                          if (lm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' lm.matchedItem);                              message = GetMessage(95040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' lm.matchedItem));                              break;                          }                            // If we're still here that means                          // - the create didn't get ignored by adminlist or whitelist                          // - the create didn't match any watch patterns                          // Now' if any of the following is true' we'll must report it.                          // - Create by blacklisted user                          // - Create by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // Created by an unlisted reguser with non-special create size' ignore                          if ((userOffset == 4) && !createSpecial)                              return;                            // Else: Create had special size' so let it shown (default)' don't return!                      }                      // This block handles: Page edits                      else                      {                          bool editSpecial = false;                            // Edit by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.editBig)                          {                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5110 + userOffset' ref attribs);                              editSpecial = true;                          }                          else if (r.szdiff <= config.editBlank)                          {                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5120 + userOffset' ref attribs);                              editSpecial = true;                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5100 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Edit summary matches a BES pattern                          // - Edit blanked the page                          // - Edit replaced the page                          // - Article is on watchlist                            // Does the edit summary match a BES pattern?                          ListMatch elm = listman.MatchesList(r.comment' 20);                          if (elm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' elm.matchedItem);                              message = GetMessage(95130 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16310' r.comment' (String)attribs["article"]));                              break;                          }                            // Did the user user blank the page?                          if (project.rautosummBlank.IsMatch(r.comment))                          {                              message = GetMessage(96010 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16311' (String)attribs["article"]));                              break;                          }                            Match rplm = project.rautosummReplace.Match(r.comment);                          if (rplm.Success)                          {                              // The user replaced the page.                              try                              {                                  attribs.Add("profanity"' rplm.Groups["item1"].Captures[0].Value);                                  message = GetMessage(96020 + userOffset' ref attribs);                              }                              catch (ArgumentOutOfRangeException)                              {                                  // This wiki probably doesn't have a profanity attribute                                  message = GetMessage(96030 + userOffset' ref attribs);                              }                              break;                          }                            // Is the article on the watchlist?                          ListMatch welm = listman.IsWatchedArticle(r.title' r.project);                          if (welm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5130 + userOffset' ref attribs);                              break;                          }                            // If we're still here that means                          // - the edit didn't get ignored by adminlist or whitelist                          // - the edit didn't match any watch patterns                          // Now' if any of the following is true' we must still report it.                          // - Edit by blacklisted user                          // - Edit by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // If nothing special about the edit' return to ignore                          if (!editSpecial)                              return;                      }                      break;                  case RCEvent.EventType.move:                      // if moves are softhidden hide moves by admin' bot or whitelist                      if ((config.feedFilterEventMove == 2) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                      {                          return;                      }                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("fromname"' project.interwikiLink + r.title);                      attribs.Add("cfromname"' r.title);                      attribs.Add("toname"' project.interwikiLink + r.movedTo);                      attribs.Add("ctoname"' r.movedTo);                      attribs.Add("url"' r.blockLength); //The blockLength field stores the moveFrom URL                      attribs.Add("reason"' r.comment);                      message = GetMessage(5500 + userOffset' ref attribs);                      break;                  case RCEvent.EventType.block:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.title.Split(new char[] { ':' }' 2)[1]));                      attribs.Add("length"' r.blockLength);                      attribs.Add("reason"' r.comment);                      message = GetMessage(5400' ref attribs);                      //If the blocked user (r.title) isn't botlisted' add to blacklist                      if (listman.ClassifyEditor(r.title.Split(new char[] { ':' }' 2)[1]' r.project) != ListManager.UserType.bot)                      {                          //If this isn't an indefinite/infinite block' add to blacklist                          if ((r.blockLength.ToLower() != "indefinite") && (r.blockLength.ToLower() != "infinite"))                          {                                                               // 2'678'400 seconds = 744 hours = 31 days                              int listLen = Convert.ToInt32(CVNBotUtils.ParseDateTimeLength(r.blockLength' 2678400) * 2.5);                              string blComment = "Autoblacklist: " + r.comment + " on " + r.project;                              message += "\n" + listman.AddUserToList(r.title.Split(new char[] { ':' }' 2)[1]' "" //Global bl                                  ' ListManager.UserType.blacklisted' r.user' blComment' listLen);                              Broadcast("BL"' "ADD"' r.title.Split(new char[] { ':' }' 2)[1]' listLen' blComment' r.user);                          }                      }                      break;                  case RCEvent.EventType.unblock:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("reason"' r.comment);                      message = GetMessage(5700' ref attribs);                      break;                  case RCEvent.EventType.delete:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      attribs.Add("reason"' r.comment);                      message = GetMessage(05300' ref attribs);                      break;                  case RCEvent.EventType.newuser:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("caurl"' "https://meta.wikimedia.org/wiki/Special:CentralAuth/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch = listman.MatchesList(r.user' 11);                      if (bnuMatch.Success && feedFilterThisEvent == 1)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch.matchedItem);                          attribs.Add("wwreason"' bnuMatch.matchedReason);                          message = GetMessage(5201' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5200' ref attribs);                      }                      break;                  case RCEvent.EventType.newuser2:                      attribs.Add("creator"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ccreator"' r.user);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.title);                      attribs.Add("ceditor"' r.title);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch2 = listman.MatchesList(r.user' 11);                      if (bnuMatch2.Success)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch2.matchedItem);                          attribs.Add("wwreason"' bnuMatch2.matchedReason);                          message = GetMessage(5211' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch2.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5210' ref attribs);                      }                      break;                  case RCEvent.EventType.upload:                      int uMsg = 5600;                        // Check if the edit summary matches BES                      ListMatch ubes2 = listman.MatchesList(r.comment' 20);                      if (ubes2.Success)                      {                          attribs.Add("watchword"' ubes2.matchedItem);                          attribs.Add("lmreason"' ubes2.matchedReason);                          uMsg = 95620;                      }                        // Now check if the title matches BES                      ListMatch ubes1 = listman.MatchesList(r.title' 20);                      if (ubes1.Success)                      {                          attribs.Add("watchword"' ubes1.matchedItem);                          attribs.Add("lmreason"' ubes1.matchedReason);                          uMsg = 95620;                      }                        // Check if upload is watched                      ListMatch uwa = listman.IsWatchedArticle(r.title' r.project);                      if (uwa.Success)                          uMsg = 5610;                        // If normal and uploaded by an admin' bot or whitelisted person always hide                      if ((uMsg == 5600) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                          return;                        // if normal and uploads are softhidden hide normal user and anon aswell                      if ((uMsg == 5600) && (config.feedFilterEventUpload == 2) && ((userOffset == 3) || (userOffset == 4)))                          return;                        // If our message is 95620' we might need to truncate r.comment                      if (uMsg == 95620)                      {                          if (r.comment.Length > 25)                              r.comment = r.comment.Substring(0' 23) + "...";                      }                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("uploaditem"' project.interwikiLink + r.title);                      attribs.Add("cuploaditem"' r.title);                      attribs.Add("reason"' r.comment);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(userOffset + uMsg' ref attribs);                      break;                  case RCEvent.EventType.protect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in protect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5900' ref attribs);                      break;                  case RCEvent.EventType.unprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in unprotect is fine' it's just the pagetitle                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(5901' ref attribs);                      break;                  case RCEvent.EventType.modifyprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in modifyprotect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5902' ref attribs);                      break;              }
Magic Number,CVNBot,Program,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Program.cs,ReactToRCEvent,The following statement contains a magic number: switch (r.eventtype)              {                  // This case handles:                  // - New page creations                  // - Page edits                  case RCEvent.EventType.edit:                      String diffsize;                      if (r.szdiff >= 0)                          diffsize = "+" + r.szdiff.ToString();                      else                          diffsize = r.szdiff.ToString();                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("size"' diffsize);                      attribs.Add("url"' r.url);                      attribs.Add("reason"' r.comment);                        // This block handles: New page creations                      if (r.newpage)                      {                          bool createSpecial = false;                            // New pages created by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.newBig)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5010 + userOffset' ref attribs);                          }                          else if (r.szdiff <= config.newSmall)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5020 + userOffset' ref attribs);                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5000 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Article is on watchlist                          // - Page title matches a BNA pattern                          // - Edit summary matches a BES pattern                            // Is the article on the watchlist?                          ListMatch wlm = listman.IsWatchedArticle(r.title' r.project);                          if (wlm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5030 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16301' (String)attribs["article"]));                              break;                          }                            // Does the page title match a BNA pattern?                          ListMatch eslm = listman.MatchesList(r.title' 12);                          if (eslm.Success)                          {                              // Matches BNA                              attribs.Add("watchword"' eslm.matchedItem);                              message = GetMessage(5040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' eslm.matchedItem));                              break;                          }                            // Does the edit summary match a BES pattern?                          ListMatch lm = listman.MatchesList(r.comment' 20);                          if (lm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' lm.matchedItem);                              message = GetMessage(95040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' lm.matchedItem));                              break;                          }                            // If we're still here that means                          // - the create didn't get ignored by adminlist or whitelist                          // - the create didn't match any watch patterns                          // Now' if any of the following is true' we'll must report it.                          // - Create by blacklisted user                          // - Create by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // Created by an unlisted reguser with non-special create size' ignore                          if ((userOffset == 4) && !createSpecial)                              return;                            // Else: Create had special size' so let it shown (default)' don't return!                      }                      // This block handles: Page edits                      else                      {                          bool editSpecial = false;                            // Edit by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.editBig)                          {                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5110 + userOffset' ref attribs);                              editSpecial = true;                          }                          else if (r.szdiff <= config.editBlank)                          {                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5120 + userOffset' ref attribs);                              editSpecial = true;                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5100 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Edit summary matches a BES pattern                          // - Edit blanked the page                          // - Edit replaced the page                          // - Article is on watchlist                            // Does the edit summary match a BES pattern?                          ListMatch elm = listman.MatchesList(r.comment' 20);                          if (elm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' elm.matchedItem);                              message = GetMessage(95130 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16310' r.comment' (String)attribs["article"]));                              break;                          }                            // Did the user user blank the page?                          if (project.rautosummBlank.IsMatch(r.comment))                          {                              message = GetMessage(96010 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16311' (String)attribs["article"]));                              break;                          }                            Match rplm = project.rautosummReplace.Match(r.comment);                          if (rplm.Success)                          {                              // The user replaced the page.                              try                              {                                  attribs.Add("profanity"' rplm.Groups["item1"].Captures[0].Value);                                  message = GetMessage(96020 + userOffset' ref attribs);                              }                              catch (ArgumentOutOfRangeException)                              {                                  // This wiki probably doesn't have a profanity attribute                                  message = GetMessage(96030 + userOffset' ref attribs);                              }                              break;                          }                            // Is the article on the watchlist?                          ListMatch welm = listman.IsWatchedArticle(r.title' r.project);                          if (welm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5130 + userOffset' ref attribs);                              break;                          }                            // If we're still here that means                          // - the edit didn't get ignored by adminlist or whitelist                          // - the edit didn't match any watch patterns                          // Now' if any of the following is true' we must still report it.                          // - Edit by blacklisted user                          // - Edit by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // If nothing special about the edit' return to ignore                          if (!editSpecial)                              return;                      }                      break;                  case RCEvent.EventType.move:                      // if moves are softhidden hide moves by admin' bot or whitelist                      if ((config.feedFilterEventMove == 2) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                      {                          return;                      }                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("fromname"' project.interwikiLink + r.title);                      attribs.Add("cfromname"' r.title);                      attribs.Add("toname"' project.interwikiLink + r.movedTo);                      attribs.Add("ctoname"' r.movedTo);                      attribs.Add("url"' r.blockLength); //The blockLength field stores the moveFrom URL                      attribs.Add("reason"' r.comment);                      message = GetMessage(5500 + userOffset' ref attribs);                      break;                  case RCEvent.EventType.block:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.title.Split(new char[] { ':' }' 2)[1]));                      attribs.Add("length"' r.blockLength);                      attribs.Add("reason"' r.comment);                      message = GetMessage(5400' ref attribs);                      //If the blocked user (r.title) isn't botlisted' add to blacklist                      if (listman.ClassifyEditor(r.title.Split(new char[] { ':' }' 2)[1]' r.project) != ListManager.UserType.bot)                      {                          //If this isn't an indefinite/infinite block' add to blacklist                          if ((r.blockLength.ToLower() != "indefinite") && (r.blockLength.ToLower() != "infinite"))                          {                                                               // 2'678'400 seconds = 744 hours = 31 days                              int listLen = Convert.ToInt32(CVNBotUtils.ParseDateTimeLength(r.blockLength' 2678400) * 2.5);                              string blComment = "Autoblacklist: " + r.comment + " on " + r.project;                              message += "\n" + listman.AddUserToList(r.title.Split(new char[] { ':' }' 2)[1]' "" //Global bl                                  ' ListManager.UserType.blacklisted' r.user' blComment' listLen);                              Broadcast("BL"' "ADD"' r.title.Split(new char[] { ':' }' 2)[1]' listLen' blComment' r.user);                          }                      }                      break;                  case RCEvent.EventType.unblock:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("reason"' r.comment);                      message = GetMessage(5700' ref attribs);                      break;                  case RCEvent.EventType.delete:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      attribs.Add("reason"' r.comment);                      message = GetMessage(05300' ref attribs);                      break;                  case RCEvent.EventType.newuser:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("caurl"' "https://meta.wikimedia.org/wiki/Special:CentralAuth/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch = listman.MatchesList(r.user' 11);                      if (bnuMatch.Success && feedFilterThisEvent == 1)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch.matchedItem);                          attribs.Add("wwreason"' bnuMatch.matchedReason);                          message = GetMessage(5201' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5200' ref attribs);                      }                      break;                  case RCEvent.EventType.newuser2:                      attribs.Add("creator"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ccreator"' r.user);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.title);                      attribs.Add("ceditor"' r.title);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch2 = listman.MatchesList(r.user' 11);                      if (bnuMatch2.Success)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch2.matchedItem);                          attribs.Add("wwreason"' bnuMatch2.matchedReason);                          message = GetMessage(5211' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch2.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5210' ref attribs);                      }                      break;                  case RCEvent.EventType.upload:                      int uMsg = 5600;                        // Check if the edit summary matches BES                      ListMatch ubes2 = listman.MatchesList(r.comment' 20);                      if (ubes2.Success)                      {                          attribs.Add("watchword"' ubes2.matchedItem);                          attribs.Add("lmreason"' ubes2.matchedReason);                          uMsg = 95620;                      }                        // Now check if the title matches BES                      ListMatch ubes1 = listman.MatchesList(r.title' 20);                      if (ubes1.Success)                      {                          attribs.Add("watchword"' ubes1.matchedItem);                          attribs.Add("lmreason"' ubes1.matchedReason);                          uMsg = 95620;                      }                        // Check if upload is watched                      ListMatch uwa = listman.IsWatchedArticle(r.title' r.project);                      if (uwa.Success)                          uMsg = 5610;                        // If normal and uploaded by an admin' bot or whitelisted person always hide                      if ((uMsg == 5600) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                          return;                        // if normal and uploads are softhidden hide normal user and anon aswell                      if ((uMsg == 5600) && (config.feedFilterEventUpload == 2) && ((userOffset == 3) || (userOffset == 4)))                          return;                        // If our message is 95620' we might need to truncate r.comment                      if (uMsg == 95620)                      {                          if (r.comment.Length > 25)                              r.comment = r.comment.Substring(0' 23) + "...";                      }                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("uploaditem"' project.interwikiLink + r.title);                      attribs.Add("cuploaditem"' r.title);                      attribs.Add("reason"' r.comment);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(userOffset + uMsg' ref attribs);                      break;                  case RCEvent.EventType.protect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in protect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5900' ref attribs);                      break;                  case RCEvent.EventType.unprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in unprotect is fine' it's just the pagetitle                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(5901' ref attribs);                      break;                  case RCEvent.EventType.modifyprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in modifyprotect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5902' ref attribs);                      break;              }
Magic Number,CVNBot,Program,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Program.cs,ReactToRCEvent,The following statement contains a magic number: switch (r.eventtype)              {                  // This case handles:                  // - New page creations                  // - Page edits                  case RCEvent.EventType.edit:                      String diffsize;                      if (r.szdiff >= 0)                          diffsize = "+" + r.szdiff.ToString();                      else                          diffsize = r.szdiff.ToString();                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("size"' diffsize);                      attribs.Add("url"' r.url);                      attribs.Add("reason"' r.comment);                        // This block handles: New page creations                      if (r.newpage)                      {                          bool createSpecial = false;                            // New pages created by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.newBig)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5010 + userOffset' ref attribs);                          }                          else if (r.szdiff <= config.newSmall)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5020 + userOffset' ref attribs);                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5000 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Article is on watchlist                          // - Page title matches a BNA pattern                          // - Edit summary matches a BES pattern                            // Is the article on the watchlist?                          ListMatch wlm = listman.IsWatchedArticle(r.title' r.project);                          if (wlm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5030 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16301' (String)attribs["article"]));                              break;                          }                            // Does the page title match a BNA pattern?                          ListMatch eslm = listman.MatchesList(r.title' 12);                          if (eslm.Success)                          {                              // Matches BNA                              attribs.Add("watchword"' eslm.matchedItem);                              message = GetMessage(5040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' eslm.matchedItem));                              break;                          }                            // Does the edit summary match a BES pattern?                          ListMatch lm = listman.MatchesList(r.comment' 20);                          if (lm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' lm.matchedItem);                              message = GetMessage(95040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' lm.matchedItem));                              break;                          }                            // If we're still here that means                          // - the create didn't get ignored by adminlist or whitelist                          // - the create didn't match any watch patterns                          // Now' if any of the following is true' we'll must report it.                          // - Create by blacklisted user                          // - Create by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // Created by an unlisted reguser with non-special create size' ignore                          if ((userOffset == 4) && !createSpecial)                              return;                            // Else: Create had special size' so let it shown (default)' don't return!                      }                      // This block handles: Page edits                      else                      {                          bool editSpecial = false;                            // Edit by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.editBig)                          {                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5110 + userOffset' ref attribs);                              editSpecial = true;                          }                          else if (r.szdiff <= config.editBlank)                          {                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5120 + userOffset' ref attribs);                              editSpecial = true;                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5100 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Edit summary matches a BES pattern                          // - Edit blanked the page                          // - Edit replaced the page                          // - Article is on watchlist                            // Does the edit summary match a BES pattern?                          ListMatch elm = listman.MatchesList(r.comment' 20);                          if (elm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' elm.matchedItem);                              message = GetMessage(95130 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16310' r.comment' (String)attribs["article"]));                              break;                          }                            // Did the user user blank the page?                          if (project.rautosummBlank.IsMatch(r.comment))                          {                              message = GetMessage(96010 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16311' (String)attribs["article"]));                              break;                          }                            Match rplm = project.rautosummReplace.Match(r.comment);                          if (rplm.Success)                          {                              // The user replaced the page.                              try                              {                                  attribs.Add("profanity"' rplm.Groups["item1"].Captures[0].Value);                                  message = GetMessage(96020 + userOffset' ref attribs);                              }                              catch (ArgumentOutOfRangeException)                              {                                  // This wiki probably doesn't have a profanity attribute                                  message = GetMessage(96030 + userOffset' ref attribs);                              }                              break;                          }                            // Is the article on the watchlist?                          ListMatch welm = listman.IsWatchedArticle(r.title' r.project);                          if (welm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5130 + userOffset' ref attribs);                              break;                          }                            // If we're still here that means                          // - the edit didn't get ignored by adminlist or whitelist                          // - the edit didn't match any watch patterns                          // Now' if any of the following is true' we must still report it.                          // - Edit by blacklisted user                          // - Edit by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // If nothing special about the edit' return to ignore                          if (!editSpecial)                              return;                      }                      break;                  case RCEvent.EventType.move:                      // if moves are softhidden hide moves by admin' bot or whitelist                      if ((config.feedFilterEventMove == 2) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                      {                          return;                      }                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("fromname"' project.interwikiLink + r.title);                      attribs.Add("cfromname"' r.title);                      attribs.Add("toname"' project.interwikiLink + r.movedTo);                      attribs.Add("ctoname"' r.movedTo);                      attribs.Add("url"' r.blockLength); //The blockLength field stores the moveFrom URL                      attribs.Add("reason"' r.comment);                      message = GetMessage(5500 + userOffset' ref attribs);                      break;                  case RCEvent.EventType.block:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.title.Split(new char[] { ':' }' 2)[1]));                      attribs.Add("length"' r.blockLength);                      attribs.Add("reason"' r.comment);                      message = GetMessage(5400' ref attribs);                      //If the blocked user (r.title) isn't botlisted' add to blacklist                      if (listman.ClassifyEditor(r.title.Split(new char[] { ':' }' 2)[1]' r.project) != ListManager.UserType.bot)                      {                          //If this isn't an indefinite/infinite block' add to blacklist                          if ((r.blockLength.ToLower() != "indefinite") && (r.blockLength.ToLower() != "infinite"))                          {                                                               // 2'678'400 seconds = 744 hours = 31 days                              int listLen = Convert.ToInt32(CVNBotUtils.ParseDateTimeLength(r.blockLength' 2678400) * 2.5);                              string blComment = "Autoblacklist: " + r.comment + " on " + r.project;                              message += "\n" + listman.AddUserToList(r.title.Split(new char[] { ':' }' 2)[1]' "" //Global bl                                  ' ListManager.UserType.blacklisted' r.user' blComment' listLen);                              Broadcast("BL"' "ADD"' r.title.Split(new char[] { ':' }' 2)[1]' listLen' blComment' r.user);                          }                      }                      break;                  case RCEvent.EventType.unblock:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("reason"' r.comment);                      message = GetMessage(5700' ref attribs);                      break;                  case RCEvent.EventType.delete:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      attribs.Add("reason"' r.comment);                      message = GetMessage(05300' ref attribs);                      break;                  case RCEvent.EventType.newuser:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("caurl"' "https://meta.wikimedia.org/wiki/Special:CentralAuth/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch = listman.MatchesList(r.user' 11);                      if (bnuMatch.Success && feedFilterThisEvent == 1)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch.matchedItem);                          attribs.Add("wwreason"' bnuMatch.matchedReason);                          message = GetMessage(5201' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5200' ref attribs);                      }                      break;                  case RCEvent.EventType.newuser2:                      attribs.Add("creator"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ccreator"' r.user);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.title);                      attribs.Add("ceditor"' r.title);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch2 = listman.MatchesList(r.user' 11);                      if (bnuMatch2.Success)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch2.matchedItem);                          attribs.Add("wwreason"' bnuMatch2.matchedReason);                          message = GetMessage(5211' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch2.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5210' ref attribs);                      }                      break;                  case RCEvent.EventType.upload:                      int uMsg = 5600;                        // Check if the edit summary matches BES                      ListMatch ubes2 = listman.MatchesList(r.comment' 20);                      if (ubes2.Success)                      {                          attribs.Add("watchword"' ubes2.matchedItem);                          attribs.Add("lmreason"' ubes2.matchedReason);                          uMsg = 95620;                      }                        // Now check if the title matches BES                      ListMatch ubes1 = listman.MatchesList(r.title' 20);                      if (ubes1.Success)                      {                          attribs.Add("watchword"' ubes1.matchedItem);                          attribs.Add("lmreason"' ubes1.matchedReason);                          uMsg = 95620;                      }                        // Check if upload is watched                      ListMatch uwa = listman.IsWatchedArticle(r.title' r.project);                      if (uwa.Success)                          uMsg = 5610;                        // If normal and uploaded by an admin' bot or whitelisted person always hide                      if ((uMsg == 5600) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                          return;                        // if normal and uploads are softhidden hide normal user and anon aswell                      if ((uMsg == 5600) && (config.feedFilterEventUpload == 2) && ((userOffset == 3) || (userOffset == 4)))                          return;                        // If our message is 95620' we might need to truncate r.comment                      if (uMsg == 95620)                      {                          if (r.comment.Length > 25)                              r.comment = r.comment.Substring(0' 23) + "...";                      }                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("uploaditem"' project.interwikiLink + r.title);                      attribs.Add("cuploaditem"' r.title);                      attribs.Add("reason"' r.comment);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(userOffset + uMsg' ref attribs);                      break;                  case RCEvent.EventType.protect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in protect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5900' ref attribs);                      break;                  case RCEvent.EventType.unprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in unprotect is fine' it's just the pagetitle                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(5901' ref attribs);                      break;                  case RCEvent.EventType.modifyprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in modifyprotect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5902' ref attribs);                      break;              }
Magic Number,CVNBot,Program,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Program.cs,ReactToRCEvent,The following statement contains a magic number: switch (r.eventtype)              {                  // This case handles:                  // - New page creations                  // - Page edits                  case RCEvent.EventType.edit:                      String diffsize;                      if (r.szdiff >= 0)                          diffsize = "+" + r.szdiff.ToString();                      else                          diffsize = r.szdiff.ToString();                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("size"' diffsize);                      attribs.Add("url"' r.url);                      attribs.Add("reason"' r.comment);                        // This block handles: New page creations                      if (r.newpage)                      {                          bool createSpecial = false;                            // New pages created by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.newBig)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5010 + userOffset' ref attribs);                          }                          else if (r.szdiff <= config.newSmall)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5020 + userOffset' ref attribs);                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5000 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Article is on watchlist                          // - Page title matches a BNA pattern                          // - Edit summary matches a BES pattern                            // Is the article on the watchlist?                          ListMatch wlm = listman.IsWatchedArticle(r.title' r.project);                          if (wlm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5030 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16301' (String)attribs["article"]));                              break;                          }                            // Does the page title match a BNA pattern?                          ListMatch eslm = listman.MatchesList(r.title' 12);                          if (eslm.Success)                          {                              // Matches BNA                              attribs.Add("watchword"' eslm.matchedItem);                              message = GetMessage(5040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' eslm.matchedItem));                              break;                          }                            // Does the edit summary match a BES pattern?                          ListMatch lm = listman.MatchesList(r.comment' 20);                          if (lm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' lm.matchedItem);                              message = GetMessage(95040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' lm.matchedItem));                              break;                          }                            // If we're still here that means                          // - the create didn't get ignored by adminlist or whitelist                          // - the create didn't match any watch patterns                          // Now' if any of the following is true' we'll must report it.                          // - Create by blacklisted user                          // - Create by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // Created by an unlisted reguser with non-special create size' ignore                          if ((userOffset == 4) && !createSpecial)                              return;                            // Else: Create had special size' so let it shown (default)' don't return!                      }                      // This block handles: Page edits                      else                      {                          bool editSpecial = false;                            // Edit by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.editBig)                          {                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5110 + userOffset' ref attribs);                              editSpecial = true;                          }                          else if (r.szdiff <= config.editBlank)                          {                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5120 + userOffset' ref attribs);                              editSpecial = true;                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5100 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Edit summary matches a BES pattern                          // - Edit blanked the page                          // - Edit replaced the page                          // - Article is on watchlist                            // Does the edit summary match a BES pattern?                          ListMatch elm = listman.MatchesList(r.comment' 20);                          if (elm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' elm.matchedItem);                              message = GetMessage(95130 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16310' r.comment' (String)attribs["article"]));                              break;                          }                            // Did the user user blank the page?                          if (project.rautosummBlank.IsMatch(r.comment))                          {                              message = GetMessage(96010 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16311' (String)attribs["article"]));                              break;                          }                            Match rplm = project.rautosummReplace.Match(r.comment);                          if (rplm.Success)                          {                              // The user replaced the page.                              try                              {                                  attribs.Add("profanity"' rplm.Groups["item1"].Captures[0].Value);                                  message = GetMessage(96020 + userOffset' ref attribs);                              }                              catch (ArgumentOutOfRangeException)                              {                                  // This wiki probably doesn't have a profanity attribute                                  message = GetMessage(96030 + userOffset' ref attribs);                              }                              break;                          }                            // Is the article on the watchlist?                          ListMatch welm = listman.IsWatchedArticle(r.title' r.project);                          if (welm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5130 + userOffset' ref attribs);                              break;                          }                            // If we're still here that means                          // - the edit didn't get ignored by adminlist or whitelist                          // - the edit didn't match any watch patterns                          // Now' if any of the following is true' we must still report it.                          // - Edit by blacklisted user                          // - Edit by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // If nothing special about the edit' return to ignore                          if (!editSpecial)                              return;                      }                      break;                  case RCEvent.EventType.move:                      // if moves are softhidden hide moves by admin' bot or whitelist                      if ((config.feedFilterEventMove == 2) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                      {                          return;                      }                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("fromname"' project.interwikiLink + r.title);                      attribs.Add("cfromname"' r.title);                      attribs.Add("toname"' project.interwikiLink + r.movedTo);                      attribs.Add("ctoname"' r.movedTo);                      attribs.Add("url"' r.blockLength); //The blockLength field stores the moveFrom URL                      attribs.Add("reason"' r.comment);                      message = GetMessage(5500 + userOffset' ref attribs);                      break;                  case RCEvent.EventType.block:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.title.Split(new char[] { ':' }' 2)[1]));                      attribs.Add("length"' r.blockLength);                      attribs.Add("reason"' r.comment);                      message = GetMessage(5400' ref attribs);                      //If the blocked user (r.title) isn't botlisted' add to blacklist                      if (listman.ClassifyEditor(r.title.Split(new char[] { ':' }' 2)[1]' r.project) != ListManager.UserType.bot)                      {                          //If this isn't an indefinite/infinite block' add to blacklist                          if ((r.blockLength.ToLower() != "indefinite") && (r.blockLength.ToLower() != "infinite"))                          {                                                               // 2'678'400 seconds = 744 hours = 31 days                              int listLen = Convert.ToInt32(CVNBotUtils.ParseDateTimeLength(r.blockLength' 2678400) * 2.5);                              string blComment = "Autoblacklist: " + r.comment + " on " + r.project;                              message += "\n" + listman.AddUserToList(r.title.Split(new char[] { ':' }' 2)[1]' "" //Global bl                                  ' ListManager.UserType.blacklisted' r.user' blComment' listLen);                              Broadcast("BL"' "ADD"' r.title.Split(new char[] { ':' }' 2)[1]' listLen' blComment' r.user);                          }                      }                      break;                  case RCEvent.EventType.unblock:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("reason"' r.comment);                      message = GetMessage(5700' ref attribs);                      break;                  case RCEvent.EventType.delete:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      attribs.Add("reason"' r.comment);                      message = GetMessage(05300' ref attribs);                      break;                  case RCEvent.EventType.newuser:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("caurl"' "https://meta.wikimedia.org/wiki/Special:CentralAuth/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch = listman.MatchesList(r.user' 11);                      if (bnuMatch.Success && feedFilterThisEvent == 1)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch.matchedItem);                          attribs.Add("wwreason"' bnuMatch.matchedReason);                          message = GetMessage(5201' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5200' ref attribs);                      }                      break;                  case RCEvent.EventType.newuser2:                      attribs.Add("creator"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ccreator"' r.user);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.title);                      attribs.Add("ceditor"' r.title);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch2 = listman.MatchesList(r.user' 11);                      if (bnuMatch2.Success)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch2.matchedItem);                          attribs.Add("wwreason"' bnuMatch2.matchedReason);                          message = GetMessage(5211' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch2.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5210' ref attribs);                      }                      break;                  case RCEvent.EventType.upload:                      int uMsg = 5600;                        // Check if the edit summary matches BES                      ListMatch ubes2 = listman.MatchesList(r.comment' 20);                      if (ubes2.Success)                      {                          attribs.Add("watchword"' ubes2.matchedItem);                          attribs.Add("lmreason"' ubes2.matchedReason);                          uMsg = 95620;                      }                        // Now check if the title matches BES                      ListMatch ubes1 = listman.MatchesList(r.title' 20);                      if (ubes1.Success)                      {                          attribs.Add("watchword"' ubes1.matchedItem);                          attribs.Add("lmreason"' ubes1.matchedReason);                          uMsg = 95620;                      }                        // Check if upload is watched                      ListMatch uwa = listman.IsWatchedArticle(r.title' r.project);                      if (uwa.Success)                          uMsg = 5610;                        // If normal and uploaded by an admin' bot or whitelisted person always hide                      if ((uMsg == 5600) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                          return;                        // if normal and uploads are softhidden hide normal user and anon aswell                      if ((uMsg == 5600) && (config.feedFilterEventUpload == 2) && ((userOffset == 3) || (userOffset == 4)))                          return;                        // If our message is 95620' we might need to truncate r.comment                      if (uMsg == 95620)                      {                          if (r.comment.Length > 25)                              r.comment = r.comment.Substring(0' 23) + "...";                      }                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("uploaditem"' project.interwikiLink + r.title);                      attribs.Add("cuploaditem"' r.title);                      attribs.Add("reason"' r.comment);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(userOffset + uMsg' ref attribs);                      break;                  case RCEvent.EventType.protect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in protect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5900' ref attribs);                      break;                  case RCEvent.EventType.unprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in unprotect is fine' it's just the pagetitle                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(5901' ref attribs);                      break;                  case RCEvent.EventType.modifyprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in modifyprotect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5902' ref attribs);                      break;              }
Magic Number,CVNBot,Program,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Program.cs,ReactToRCEvent,The following statement contains a magic number: switch (r.eventtype)              {                  // This case handles:                  // - New page creations                  // - Page edits                  case RCEvent.EventType.edit:                      String diffsize;                      if (r.szdiff >= 0)                          diffsize = "+" + r.szdiff.ToString();                      else                          diffsize = r.szdiff.ToString();                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("size"' diffsize);                      attribs.Add("url"' r.url);                      attribs.Add("reason"' r.comment);                        // This block handles: New page creations                      if (r.newpage)                      {                          bool createSpecial = false;                            // New pages created by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.newBig)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5010 + userOffset' ref attribs);                          }                          else if (r.szdiff <= config.newSmall)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5020 + userOffset' ref attribs);                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5000 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Article is on watchlist                          // - Page title matches a BNA pattern                          // - Edit summary matches a BES pattern                            // Is the article on the watchlist?                          ListMatch wlm = listman.IsWatchedArticle(r.title' r.project);                          if (wlm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5030 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16301' (String)attribs["article"]));                              break;                          }                            // Does the page title match a BNA pattern?                          ListMatch eslm = listman.MatchesList(r.title' 12);                          if (eslm.Success)                          {                              // Matches BNA                              attribs.Add("watchword"' eslm.matchedItem);                              message = GetMessage(5040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' eslm.matchedItem));                              break;                          }                            // Does the edit summary match a BES pattern?                          ListMatch lm = listman.MatchesList(r.comment' 20);                          if (lm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' lm.matchedItem);                              message = GetMessage(95040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' lm.matchedItem));                              break;                          }                            // If we're still here that means                          // - the create didn't get ignored by adminlist or whitelist                          // - the create didn't match any watch patterns                          // Now' if any of the following is true' we'll must report it.                          // - Create by blacklisted user                          // - Create by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // Created by an unlisted reguser with non-special create size' ignore                          if ((userOffset == 4) && !createSpecial)                              return;                            // Else: Create had special size' so let it shown (default)' don't return!                      }                      // This block handles: Page edits                      else                      {                          bool editSpecial = false;                            // Edit by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.editBig)                          {                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5110 + userOffset' ref attribs);                              editSpecial = true;                          }                          else if (r.szdiff <= config.editBlank)                          {                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5120 + userOffset' ref attribs);                              editSpecial = true;                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5100 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Edit summary matches a BES pattern                          // - Edit blanked the page                          // - Edit replaced the page                          // - Article is on watchlist                            // Does the edit summary match a BES pattern?                          ListMatch elm = listman.MatchesList(r.comment' 20);                          if (elm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' elm.matchedItem);                              message = GetMessage(95130 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16310' r.comment' (String)attribs["article"]));                              break;                          }                            // Did the user user blank the page?                          if (project.rautosummBlank.IsMatch(r.comment))                          {                              message = GetMessage(96010 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16311' (String)attribs["article"]));                              break;                          }                            Match rplm = project.rautosummReplace.Match(r.comment);                          if (rplm.Success)                          {                              // The user replaced the page.                              try                              {                                  attribs.Add("profanity"' rplm.Groups["item1"].Captures[0].Value);                                  message = GetMessage(96020 + userOffset' ref attribs);                              }                              catch (ArgumentOutOfRangeException)                              {                                  // This wiki probably doesn't have a profanity attribute                                  message = GetMessage(96030 + userOffset' ref attribs);                              }                              break;                          }                            // Is the article on the watchlist?                          ListMatch welm = listman.IsWatchedArticle(r.title' r.project);                          if (welm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5130 + userOffset' ref attribs);                              break;                          }                            // If we're still here that means                          // - the edit didn't get ignored by adminlist or whitelist                          // - the edit didn't match any watch patterns                          // Now' if any of the following is true' we must still report it.                          // - Edit by blacklisted user                          // - Edit by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // If nothing special about the edit' return to ignore                          if (!editSpecial)                              return;                      }                      break;                  case RCEvent.EventType.move:                      // if moves are softhidden hide moves by admin' bot or whitelist                      if ((config.feedFilterEventMove == 2) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                      {                          return;                      }                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("fromname"' project.interwikiLink + r.title);                      attribs.Add("cfromname"' r.title);                      attribs.Add("toname"' project.interwikiLink + r.movedTo);                      attribs.Add("ctoname"' r.movedTo);                      attribs.Add("url"' r.blockLength); //The blockLength field stores the moveFrom URL                      attribs.Add("reason"' r.comment);                      message = GetMessage(5500 + userOffset' ref attribs);                      break;                  case RCEvent.EventType.block:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.title.Split(new char[] { ':' }' 2)[1]));                      attribs.Add("length"' r.blockLength);                      attribs.Add("reason"' r.comment);                      message = GetMessage(5400' ref attribs);                      //If the blocked user (r.title) isn't botlisted' add to blacklist                      if (listman.ClassifyEditor(r.title.Split(new char[] { ':' }' 2)[1]' r.project) != ListManager.UserType.bot)                      {                          //If this isn't an indefinite/infinite block' add to blacklist                          if ((r.blockLength.ToLower() != "indefinite") && (r.blockLength.ToLower() != "infinite"))                          {                                                               // 2'678'400 seconds = 744 hours = 31 days                              int listLen = Convert.ToInt32(CVNBotUtils.ParseDateTimeLength(r.blockLength' 2678400) * 2.5);                              string blComment = "Autoblacklist: " + r.comment + " on " + r.project;                              message += "\n" + listman.AddUserToList(r.title.Split(new char[] { ':' }' 2)[1]' "" //Global bl                                  ' ListManager.UserType.blacklisted' r.user' blComment' listLen);                              Broadcast("BL"' "ADD"' r.title.Split(new char[] { ':' }' 2)[1]' listLen' blComment' r.user);                          }                      }                      break;                  case RCEvent.EventType.unblock:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("reason"' r.comment);                      message = GetMessage(5700' ref attribs);                      break;                  case RCEvent.EventType.delete:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      attribs.Add("reason"' r.comment);                      message = GetMessage(05300' ref attribs);                      break;                  case RCEvent.EventType.newuser:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("caurl"' "https://meta.wikimedia.org/wiki/Special:CentralAuth/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch = listman.MatchesList(r.user' 11);                      if (bnuMatch.Success && feedFilterThisEvent == 1)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch.matchedItem);                          attribs.Add("wwreason"' bnuMatch.matchedReason);                          message = GetMessage(5201' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5200' ref attribs);                      }                      break;                  case RCEvent.EventType.newuser2:                      attribs.Add("creator"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ccreator"' r.user);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.title);                      attribs.Add("ceditor"' r.title);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch2 = listman.MatchesList(r.user' 11);                      if (bnuMatch2.Success)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch2.matchedItem);                          attribs.Add("wwreason"' bnuMatch2.matchedReason);                          message = GetMessage(5211' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch2.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5210' ref attribs);                      }                      break;                  case RCEvent.EventType.upload:                      int uMsg = 5600;                        // Check if the edit summary matches BES                      ListMatch ubes2 = listman.MatchesList(r.comment' 20);                      if (ubes2.Success)                      {                          attribs.Add("watchword"' ubes2.matchedItem);                          attribs.Add("lmreason"' ubes2.matchedReason);                          uMsg = 95620;                      }                        // Now check if the title matches BES                      ListMatch ubes1 = listman.MatchesList(r.title' 20);                      if (ubes1.Success)                      {                          attribs.Add("watchword"' ubes1.matchedItem);                          attribs.Add("lmreason"' ubes1.matchedReason);                          uMsg = 95620;                      }                        // Check if upload is watched                      ListMatch uwa = listman.IsWatchedArticle(r.title' r.project);                      if (uwa.Success)                          uMsg = 5610;                        // If normal and uploaded by an admin' bot or whitelisted person always hide                      if ((uMsg == 5600) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                          return;                        // if normal and uploads are softhidden hide normal user and anon aswell                      if ((uMsg == 5600) && (config.feedFilterEventUpload == 2) && ((userOffset == 3) || (userOffset == 4)))                          return;                        // If our message is 95620' we might need to truncate r.comment                      if (uMsg == 95620)                      {                          if (r.comment.Length > 25)                              r.comment = r.comment.Substring(0' 23) + "...";                      }                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("uploaditem"' project.interwikiLink + r.title);                      attribs.Add("cuploaditem"' r.title);                      attribs.Add("reason"' r.comment);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(userOffset + uMsg' ref attribs);                      break;                  case RCEvent.EventType.protect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in protect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5900' ref attribs);                      break;                  case RCEvent.EventType.unprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in unprotect is fine' it's just the pagetitle                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(5901' ref attribs);                      break;                  case RCEvent.EventType.modifyprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in modifyprotect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5902' ref attribs);                      break;              }
Magic Number,CVNBot,Program,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Program.cs,ReactToRCEvent,The following statement contains a magic number: switch (r.eventtype)              {                  // This case handles:                  // - New page creations                  // - Page edits                  case RCEvent.EventType.edit:                      String diffsize;                      if (r.szdiff >= 0)                          diffsize = "+" + r.szdiff.ToString();                      else                          diffsize = r.szdiff.ToString();                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("size"' diffsize);                      attribs.Add("url"' r.url);                      attribs.Add("reason"' r.comment);                        // This block handles: New page creations                      if (r.newpage)                      {                          bool createSpecial = false;                            // New pages created by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.newBig)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5010 + userOffset' ref attribs);                          }                          else if (r.szdiff <= config.newSmall)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5020 + userOffset' ref attribs);                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5000 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Article is on watchlist                          // - Page title matches a BNA pattern                          // - Edit summary matches a BES pattern                            // Is the article on the watchlist?                          ListMatch wlm = listman.IsWatchedArticle(r.title' r.project);                          if (wlm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5030 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16301' (String)attribs["article"]));                              break;                          }                            // Does the page title match a BNA pattern?                          ListMatch eslm = listman.MatchesList(r.title' 12);                          if (eslm.Success)                          {                              // Matches BNA                              attribs.Add("watchword"' eslm.matchedItem);                              message = GetMessage(5040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' eslm.matchedItem));                              break;                          }                            // Does the edit summary match a BES pattern?                          ListMatch lm = listman.MatchesList(r.comment' 20);                          if (lm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' lm.matchedItem);                              message = GetMessage(95040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' lm.matchedItem));                              break;                          }                            // If we're still here that means                          // - the create didn't get ignored by adminlist or whitelist                          // - the create didn't match any watch patterns                          // Now' if any of the following is true' we'll must report it.                          // - Create by blacklisted user                          // - Create by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // Created by an unlisted reguser with non-special create size' ignore                          if ((userOffset == 4) && !createSpecial)                              return;                            // Else: Create had special size' so let it shown (default)' don't return!                      }                      // This block handles: Page edits                      else                      {                          bool editSpecial = false;                            // Edit by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.editBig)                          {                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5110 + userOffset' ref attribs);                              editSpecial = true;                          }                          else if (r.szdiff <= config.editBlank)                          {                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5120 + userOffset' ref attribs);                              editSpecial = true;                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5100 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Edit summary matches a BES pattern                          // - Edit blanked the page                          // - Edit replaced the page                          // - Article is on watchlist                            // Does the edit summary match a BES pattern?                          ListMatch elm = listman.MatchesList(r.comment' 20);                          if (elm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' elm.matchedItem);                              message = GetMessage(95130 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16310' r.comment' (String)attribs["article"]));                              break;                          }                            // Did the user user blank the page?                          if (project.rautosummBlank.IsMatch(r.comment))                          {                              message = GetMessage(96010 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16311' (String)attribs["article"]));                              break;                          }                            Match rplm = project.rautosummReplace.Match(r.comment);                          if (rplm.Success)                          {                              // The user replaced the page.                              try                              {                                  attribs.Add("profanity"' rplm.Groups["item1"].Captures[0].Value);                                  message = GetMessage(96020 + userOffset' ref attribs);                              }                              catch (ArgumentOutOfRangeException)                              {                                  // This wiki probably doesn't have a profanity attribute                                  message = GetMessage(96030 + userOffset' ref attribs);                              }                              break;                          }                            // Is the article on the watchlist?                          ListMatch welm = listman.IsWatchedArticle(r.title' r.project);                          if (welm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5130 + userOffset' ref attribs);                              break;                          }                            // If we're still here that means                          // - the edit didn't get ignored by adminlist or whitelist                          // - the edit didn't match any watch patterns                          // Now' if any of the following is true' we must still report it.                          // - Edit by blacklisted user                          // - Edit by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // If nothing special about the edit' return to ignore                          if (!editSpecial)                              return;                      }                      break;                  case RCEvent.EventType.move:                      // if moves are softhidden hide moves by admin' bot or whitelist                      if ((config.feedFilterEventMove == 2) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                      {                          return;                      }                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("fromname"' project.interwikiLink + r.title);                      attribs.Add("cfromname"' r.title);                      attribs.Add("toname"' project.interwikiLink + r.movedTo);                      attribs.Add("ctoname"' r.movedTo);                      attribs.Add("url"' r.blockLength); //The blockLength field stores the moveFrom URL                      attribs.Add("reason"' r.comment);                      message = GetMessage(5500 + userOffset' ref attribs);                      break;                  case RCEvent.EventType.block:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.title.Split(new char[] { ':' }' 2)[1]));                      attribs.Add("length"' r.blockLength);                      attribs.Add("reason"' r.comment);                      message = GetMessage(5400' ref attribs);                      //If the blocked user (r.title) isn't botlisted' add to blacklist                      if (listman.ClassifyEditor(r.title.Split(new char[] { ':' }' 2)[1]' r.project) != ListManager.UserType.bot)                      {                          //If this isn't an indefinite/infinite block' add to blacklist                          if ((r.blockLength.ToLower() != "indefinite") && (r.blockLength.ToLower() != "infinite"))                          {                                                               // 2'678'400 seconds = 744 hours = 31 days                              int listLen = Convert.ToInt32(CVNBotUtils.ParseDateTimeLength(r.blockLength' 2678400) * 2.5);                              string blComment = "Autoblacklist: " + r.comment + " on " + r.project;                              message += "\n" + listman.AddUserToList(r.title.Split(new char[] { ':' }' 2)[1]' "" //Global bl                                  ' ListManager.UserType.blacklisted' r.user' blComment' listLen);                              Broadcast("BL"' "ADD"' r.title.Split(new char[] { ':' }' 2)[1]' listLen' blComment' r.user);                          }                      }                      break;                  case RCEvent.EventType.unblock:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("reason"' r.comment);                      message = GetMessage(5700' ref attribs);                      break;                  case RCEvent.EventType.delete:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      attribs.Add("reason"' r.comment);                      message = GetMessage(05300' ref attribs);                      break;                  case RCEvent.EventType.newuser:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("caurl"' "https://meta.wikimedia.org/wiki/Special:CentralAuth/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch = listman.MatchesList(r.user' 11);                      if (bnuMatch.Success && feedFilterThisEvent == 1)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch.matchedItem);                          attribs.Add("wwreason"' bnuMatch.matchedReason);                          message = GetMessage(5201' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5200' ref attribs);                      }                      break;                  case RCEvent.EventType.newuser2:                      attribs.Add("creator"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ccreator"' r.user);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.title);                      attribs.Add("ceditor"' r.title);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch2 = listman.MatchesList(r.user' 11);                      if (bnuMatch2.Success)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch2.matchedItem);                          attribs.Add("wwreason"' bnuMatch2.matchedReason);                          message = GetMessage(5211' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch2.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5210' ref attribs);                      }                      break;                  case RCEvent.EventType.upload:                      int uMsg = 5600;                        // Check if the edit summary matches BES                      ListMatch ubes2 = listman.MatchesList(r.comment' 20);                      if (ubes2.Success)                      {                          attribs.Add("watchword"' ubes2.matchedItem);                          attribs.Add("lmreason"' ubes2.matchedReason);                          uMsg = 95620;                      }                        // Now check if the title matches BES                      ListMatch ubes1 = listman.MatchesList(r.title' 20);                      if (ubes1.Success)                      {                          attribs.Add("watchword"' ubes1.matchedItem);                          attribs.Add("lmreason"' ubes1.matchedReason);                          uMsg = 95620;                      }                        // Check if upload is watched                      ListMatch uwa = listman.IsWatchedArticle(r.title' r.project);                      if (uwa.Success)                          uMsg = 5610;                        // If normal and uploaded by an admin' bot or whitelisted person always hide                      if ((uMsg == 5600) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                          return;                        // if normal and uploads are softhidden hide normal user and anon aswell                      if ((uMsg == 5600) && (config.feedFilterEventUpload == 2) && ((userOffset == 3) || (userOffset == 4)))                          return;                        // If our message is 95620' we might need to truncate r.comment                      if (uMsg == 95620)                      {                          if (r.comment.Length > 25)                              r.comment = r.comment.Substring(0' 23) + "...";                      }                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("uploaditem"' project.interwikiLink + r.title);                      attribs.Add("cuploaditem"' r.title);                      attribs.Add("reason"' r.comment);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(userOffset + uMsg' ref attribs);                      break;                  case RCEvent.EventType.protect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in protect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5900' ref attribs);                      break;                  case RCEvent.EventType.unprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in unprotect is fine' it's just the pagetitle                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(5901' ref attribs);                      break;                  case RCEvent.EventType.modifyprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in modifyprotect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5902' ref attribs);                      break;              }
Magic Number,CVNBot,Program,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Program.cs,ReactToRCEvent,The following statement contains a magic number: switch (r.eventtype)              {                  // This case handles:                  // - New page creations                  // - Page edits                  case RCEvent.EventType.edit:                      String diffsize;                      if (r.szdiff >= 0)                          diffsize = "+" + r.szdiff.ToString();                      else                          diffsize = r.szdiff.ToString();                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("size"' diffsize);                      attribs.Add("url"' r.url);                      attribs.Add("reason"' r.comment);                        // This block handles: New page creations                      if (r.newpage)                      {                          bool createSpecial = false;                            // New pages created by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.newBig)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5010 + userOffset' ref attribs);                          }                          else if (r.szdiff <= config.newSmall)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5020 + userOffset' ref attribs);                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5000 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Article is on watchlist                          // - Page title matches a BNA pattern                          // - Edit summary matches a BES pattern                            // Is the article on the watchlist?                          ListMatch wlm = listman.IsWatchedArticle(r.title' r.project);                          if (wlm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5030 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16301' (String)attribs["article"]));                              break;                          }                            // Does the page title match a BNA pattern?                          ListMatch eslm = listman.MatchesList(r.title' 12);                          if (eslm.Success)                          {                              // Matches BNA                              attribs.Add("watchword"' eslm.matchedItem);                              message = GetMessage(5040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' eslm.matchedItem));                              break;                          }                            // Does the edit summary match a BES pattern?                          ListMatch lm = listman.MatchesList(r.comment' 20);                          if (lm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' lm.matchedItem);                              message = GetMessage(95040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' lm.matchedItem));                              break;                          }                            // If we're still here that means                          // - the create didn't get ignored by adminlist or whitelist                          // - the create didn't match any watch patterns                          // Now' if any of the following is true' we'll must report it.                          // - Create by blacklisted user                          // - Create by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // Created by an unlisted reguser with non-special create size' ignore                          if ((userOffset == 4) && !createSpecial)                              return;                            // Else: Create had special size' so let it shown (default)' don't return!                      }                      // This block handles: Page edits                      else                      {                          bool editSpecial = false;                            // Edit by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.editBig)                          {                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5110 + userOffset' ref attribs);                              editSpecial = true;                          }                          else if (r.szdiff <= config.editBlank)                          {                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5120 + userOffset' ref attribs);                              editSpecial = true;                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5100 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Edit summary matches a BES pattern                          // - Edit blanked the page                          // - Edit replaced the page                          // - Article is on watchlist                            // Does the edit summary match a BES pattern?                          ListMatch elm = listman.MatchesList(r.comment' 20);                          if (elm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' elm.matchedItem);                              message = GetMessage(95130 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16310' r.comment' (String)attribs["article"]));                              break;                          }                            // Did the user user blank the page?                          if (project.rautosummBlank.IsMatch(r.comment))                          {                              message = GetMessage(96010 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16311' (String)attribs["article"]));                              break;                          }                            Match rplm = project.rautosummReplace.Match(r.comment);                          if (rplm.Success)                          {                              // The user replaced the page.                              try                              {                                  attribs.Add("profanity"' rplm.Groups["item1"].Captures[0].Value);                                  message = GetMessage(96020 + userOffset' ref attribs);                              }                              catch (ArgumentOutOfRangeException)                              {                                  // This wiki probably doesn't have a profanity attribute                                  message = GetMessage(96030 + userOffset' ref attribs);                              }                              break;                          }                            // Is the article on the watchlist?                          ListMatch welm = listman.IsWatchedArticle(r.title' r.project);                          if (welm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5130 + userOffset' ref attribs);                              break;                          }                            // If we're still here that means                          // - the edit didn't get ignored by adminlist or whitelist                          // - the edit didn't match any watch patterns                          // Now' if any of the following is true' we must still report it.                          // - Edit by blacklisted user                          // - Edit by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // If nothing special about the edit' return to ignore                          if (!editSpecial)                              return;                      }                      break;                  case RCEvent.EventType.move:                      // if moves are softhidden hide moves by admin' bot or whitelist                      if ((config.feedFilterEventMove == 2) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                      {                          return;                      }                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("fromname"' project.interwikiLink + r.title);                      attribs.Add("cfromname"' r.title);                      attribs.Add("toname"' project.interwikiLink + r.movedTo);                      attribs.Add("ctoname"' r.movedTo);                      attribs.Add("url"' r.blockLength); //The blockLength field stores the moveFrom URL                      attribs.Add("reason"' r.comment);                      message = GetMessage(5500 + userOffset' ref attribs);                      break;                  case RCEvent.EventType.block:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.title.Split(new char[] { ':' }' 2)[1]));                      attribs.Add("length"' r.blockLength);                      attribs.Add("reason"' r.comment);                      message = GetMessage(5400' ref attribs);                      //If the blocked user (r.title) isn't botlisted' add to blacklist                      if (listman.ClassifyEditor(r.title.Split(new char[] { ':' }' 2)[1]' r.project) != ListManager.UserType.bot)                      {                          //If this isn't an indefinite/infinite block' add to blacklist                          if ((r.blockLength.ToLower() != "indefinite") && (r.blockLength.ToLower() != "infinite"))                          {                                                               // 2'678'400 seconds = 744 hours = 31 days                              int listLen = Convert.ToInt32(CVNBotUtils.ParseDateTimeLength(r.blockLength' 2678400) * 2.5);                              string blComment = "Autoblacklist: " + r.comment + " on " + r.project;                              message += "\n" + listman.AddUserToList(r.title.Split(new char[] { ':' }' 2)[1]' "" //Global bl                                  ' ListManager.UserType.blacklisted' r.user' blComment' listLen);                              Broadcast("BL"' "ADD"' r.title.Split(new char[] { ':' }' 2)[1]' listLen' blComment' r.user);                          }                      }                      break;                  case RCEvent.EventType.unblock:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("reason"' r.comment);                      message = GetMessage(5700' ref attribs);                      break;                  case RCEvent.EventType.delete:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      attribs.Add("reason"' r.comment);                      message = GetMessage(05300' ref attribs);                      break;                  case RCEvent.EventType.newuser:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("caurl"' "https://meta.wikimedia.org/wiki/Special:CentralAuth/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch = listman.MatchesList(r.user' 11);                      if (bnuMatch.Success && feedFilterThisEvent == 1)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch.matchedItem);                          attribs.Add("wwreason"' bnuMatch.matchedReason);                          message = GetMessage(5201' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5200' ref attribs);                      }                      break;                  case RCEvent.EventType.newuser2:                      attribs.Add("creator"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ccreator"' r.user);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.title);                      attribs.Add("ceditor"' r.title);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch2 = listman.MatchesList(r.user' 11);                      if (bnuMatch2.Success)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch2.matchedItem);                          attribs.Add("wwreason"' bnuMatch2.matchedReason);                          message = GetMessage(5211' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch2.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5210' ref attribs);                      }                      break;                  case RCEvent.EventType.upload:                      int uMsg = 5600;                        // Check if the edit summary matches BES                      ListMatch ubes2 = listman.MatchesList(r.comment' 20);                      if (ubes2.Success)                      {                          attribs.Add("watchword"' ubes2.matchedItem);                          attribs.Add("lmreason"' ubes2.matchedReason);                          uMsg = 95620;                      }                        // Now check if the title matches BES                      ListMatch ubes1 = listman.MatchesList(r.title' 20);                      if (ubes1.Success)                      {                          attribs.Add("watchword"' ubes1.matchedItem);                          attribs.Add("lmreason"' ubes1.matchedReason);                          uMsg = 95620;                      }                        // Check if upload is watched                      ListMatch uwa = listman.IsWatchedArticle(r.title' r.project);                      if (uwa.Success)                          uMsg = 5610;                        // If normal and uploaded by an admin' bot or whitelisted person always hide                      if ((uMsg == 5600) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                          return;                        // if normal and uploads are softhidden hide normal user and anon aswell                      if ((uMsg == 5600) && (config.feedFilterEventUpload == 2) && ((userOffset == 3) || (userOffset == 4)))                          return;                        // If our message is 95620' we might need to truncate r.comment                      if (uMsg == 95620)                      {                          if (r.comment.Length > 25)                              r.comment = r.comment.Substring(0' 23) + "...";                      }                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("uploaditem"' project.interwikiLink + r.title);                      attribs.Add("cuploaditem"' r.title);                      attribs.Add("reason"' r.comment);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(userOffset + uMsg' ref attribs);                      break;                  case RCEvent.EventType.protect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in protect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5900' ref attribs);                      break;                  case RCEvent.EventType.unprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in unprotect is fine' it's just the pagetitle                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(5901' ref attribs);                      break;                  case RCEvent.EventType.modifyprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in modifyprotect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5902' ref attribs);                      break;              }
Magic Number,CVNBot,Program,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Program.cs,ReactToRCEvent,The following statement contains a magic number: switch (r.eventtype)              {                  // This case handles:                  // - New page creations                  // - Page edits                  case RCEvent.EventType.edit:                      String diffsize;                      if (r.szdiff >= 0)                          diffsize = "+" + r.szdiff.ToString();                      else                          diffsize = r.szdiff.ToString();                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("size"' diffsize);                      attribs.Add("url"' r.url);                      attribs.Add("reason"' r.comment);                        // This block handles: New page creations                      if (r.newpage)                      {                          bool createSpecial = false;                            // New pages created by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.newBig)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5010 + userOffset' ref attribs);                          }                          else if (r.szdiff <= config.newSmall)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5020 + userOffset' ref attribs);                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5000 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Article is on watchlist                          // - Page title matches a BNA pattern                          // - Edit summary matches a BES pattern                            // Is the article on the watchlist?                          ListMatch wlm = listman.IsWatchedArticle(r.title' r.project);                          if (wlm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5030 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16301' (String)attribs["article"]));                              break;                          }                            // Does the page title match a BNA pattern?                          ListMatch eslm = listman.MatchesList(r.title' 12);                          if (eslm.Success)                          {                              // Matches BNA                              attribs.Add("watchword"' eslm.matchedItem);                              message = GetMessage(5040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' eslm.matchedItem));                              break;                          }                            // Does the edit summary match a BES pattern?                          ListMatch lm = listman.MatchesList(r.comment' 20);                          if (lm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' lm.matchedItem);                              message = GetMessage(95040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' lm.matchedItem));                              break;                          }                            // If we're still here that means                          // - the create didn't get ignored by adminlist or whitelist                          // - the create didn't match any watch patterns                          // Now' if any of the following is true' we'll must report it.                          // - Create by blacklisted user                          // - Create by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // Created by an unlisted reguser with non-special create size' ignore                          if ((userOffset == 4) && !createSpecial)                              return;                            // Else: Create had special size' so let it shown (default)' don't return!                      }                      // This block handles: Page edits                      else                      {                          bool editSpecial = false;                            // Edit by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.editBig)                          {                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5110 + userOffset' ref attribs);                              editSpecial = true;                          }                          else if (r.szdiff <= config.editBlank)                          {                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5120 + userOffset' ref attribs);                              editSpecial = true;                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5100 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Edit summary matches a BES pattern                          // - Edit blanked the page                          // - Edit replaced the page                          // - Article is on watchlist                            // Does the edit summary match a BES pattern?                          ListMatch elm = listman.MatchesList(r.comment' 20);                          if (elm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' elm.matchedItem);                              message = GetMessage(95130 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16310' r.comment' (String)attribs["article"]));                              break;                          }                            // Did the user user blank the page?                          if (project.rautosummBlank.IsMatch(r.comment))                          {                              message = GetMessage(96010 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16311' (String)attribs["article"]));                              break;                          }                            Match rplm = project.rautosummReplace.Match(r.comment);                          if (rplm.Success)                          {                              // The user replaced the page.                              try                              {                                  attribs.Add("profanity"' rplm.Groups["item1"].Captures[0].Value);                                  message = GetMessage(96020 + userOffset' ref attribs);                              }                              catch (ArgumentOutOfRangeException)                              {                                  // This wiki probably doesn't have a profanity attribute                                  message = GetMessage(96030 + userOffset' ref attribs);                              }                              break;                          }                            // Is the article on the watchlist?                          ListMatch welm = listman.IsWatchedArticle(r.title' r.project);                          if (welm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5130 + userOffset' ref attribs);                              break;                          }                            // If we're still here that means                          // - the edit didn't get ignored by adminlist or whitelist                          // - the edit didn't match any watch patterns                          // Now' if any of the following is true' we must still report it.                          // - Edit by blacklisted user                          // - Edit by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // If nothing special about the edit' return to ignore                          if (!editSpecial)                              return;                      }                      break;                  case RCEvent.EventType.move:                      // if moves are softhidden hide moves by admin' bot or whitelist                      if ((config.feedFilterEventMove == 2) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                      {                          return;                      }                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("fromname"' project.interwikiLink + r.title);                      attribs.Add("cfromname"' r.title);                      attribs.Add("toname"' project.interwikiLink + r.movedTo);                      attribs.Add("ctoname"' r.movedTo);                      attribs.Add("url"' r.blockLength); //The blockLength field stores the moveFrom URL                      attribs.Add("reason"' r.comment);                      message = GetMessage(5500 + userOffset' ref attribs);                      break;                  case RCEvent.EventType.block:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.title.Split(new char[] { ':' }' 2)[1]));                      attribs.Add("length"' r.blockLength);                      attribs.Add("reason"' r.comment);                      message = GetMessage(5400' ref attribs);                      //If the blocked user (r.title) isn't botlisted' add to blacklist                      if (listman.ClassifyEditor(r.title.Split(new char[] { ':' }' 2)[1]' r.project) != ListManager.UserType.bot)                      {                          //If this isn't an indefinite/infinite block' add to blacklist                          if ((r.blockLength.ToLower() != "indefinite") && (r.blockLength.ToLower() != "infinite"))                          {                                                               // 2'678'400 seconds = 744 hours = 31 days                              int listLen = Convert.ToInt32(CVNBotUtils.ParseDateTimeLength(r.blockLength' 2678400) * 2.5);                              string blComment = "Autoblacklist: " + r.comment + " on " + r.project;                              message += "\n" + listman.AddUserToList(r.title.Split(new char[] { ':' }' 2)[1]' "" //Global bl                                  ' ListManager.UserType.blacklisted' r.user' blComment' listLen);                              Broadcast("BL"' "ADD"' r.title.Split(new char[] { ':' }' 2)[1]' listLen' blComment' r.user);                          }                      }                      break;                  case RCEvent.EventType.unblock:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("reason"' r.comment);                      message = GetMessage(5700' ref attribs);                      break;                  case RCEvent.EventType.delete:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      attribs.Add("reason"' r.comment);                      message = GetMessage(05300' ref attribs);                      break;                  case RCEvent.EventType.newuser:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("caurl"' "https://meta.wikimedia.org/wiki/Special:CentralAuth/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch = listman.MatchesList(r.user' 11);                      if (bnuMatch.Success && feedFilterThisEvent == 1)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch.matchedItem);                          attribs.Add("wwreason"' bnuMatch.matchedReason);                          message = GetMessage(5201' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5200' ref attribs);                      }                      break;                  case RCEvent.EventType.newuser2:                      attribs.Add("creator"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ccreator"' r.user);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.title);                      attribs.Add("ceditor"' r.title);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch2 = listman.MatchesList(r.user' 11);                      if (bnuMatch2.Success)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch2.matchedItem);                          attribs.Add("wwreason"' bnuMatch2.matchedReason);                          message = GetMessage(5211' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch2.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5210' ref attribs);                      }                      break;                  case RCEvent.EventType.upload:                      int uMsg = 5600;                        // Check if the edit summary matches BES                      ListMatch ubes2 = listman.MatchesList(r.comment' 20);                      if (ubes2.Success)                      {                          attribs.Add("watchword"' ubes2.matchedItem);                          attribs.Add("lmreason"' ubes2.matchedReason);                          uMsg = 95620;                      }                        // Now check if the title matches BES                      ListMatch ubes1 = listman.MatchesList(r.title' 20);                      if (ubes1.Success)                      {                          attribs.Add("watchword"' ubes1.matchedItem);                          attribs.Add("lmreason"' ubes1.matchedReason);                          uMsg = 95620;                      }                        // Check if upload is watched                      ListMatch uwa = listman.IsWatchedArticle(r.title' r.project);                      if (uwa.Success)                          uMsg = 5610;                        // If normal and uploaded by an admin' bot or whitelisted person always hide                      if ((uMsg == 5600) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                          return;                        // if normal and uploads are softhidden hide normal user and anon aswell                      if ((uMsg == 5600) && (config.feedFilterEventUpload == 2) && ((userOffset == 3) || (userOffset == 4)))                          return;                        // If our message is 95620' we might need to truncate r.comment                      if (uMsg == 95620)                      {                          if (r.comment.Length > 25)                              r.comment = r.comment.Substring(0' 23) + "...";                      }                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("uploaditem"' project.interwikiLink + r.title);                      attribs.Add("cuploaditem"' r.title);                      attribs.Add("reason"' r.comment);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(userOffset + uMsg' ref attribs);                      break;                  case RCEvent.EventType.protect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in protect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5900' ref attribs);                      break;                  case RCEvent.EventType.unprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in unprotect is fine' it's just the pagetitle                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(5901' ref attribs);                      break;                  case RCEvent.EventType.modifyprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in modifyprotect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5902' ref attribs);                      break;              }
Magic Number,CVNBot,Program,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Program.cs,ReactToRCEvent,The following statement contains a magic number: switch (r.eventtype)              {                  // This case handles:                  // - New page creations                  // - Page edits                  case RCEvent.EventType.edit:                      String diffsize;                      if (r.szdiff >= 0)                          diffsize = "+" + r.szdiff.ToString();                      else                          diffsize = r.szdiff.ToString();                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("size"' diffsize);                      attribs.Add("url"' r.url);                      attribs.Add("reason"' r.comment);                        // This block handles: New page creations                      if (r.newpage)                      {                          bool createSpecial = false;                            // New pages created by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.newBig)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5010 + userOffset' ref attribs);                          }                          else if (r.szdiff <= config.newSmall)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5020 + userOffset' ref attribs);                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5000 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Article is on watchlist                          // - Page title matches a BNA pattern                          // - Edit summary matches a BES pattern                            // Is the article on the watchlist?                          ListMatch wlm = listman.IsWatchedArticle(r.title' r.project);                          if (wlm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5030 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16301' (String)attribs["article"]));                              break;                          }                            // Does the page title match a BNA pattern?                          ListMatch eslm = listman.MatchesList(r.title' 12);                          if (eslm.Success)                          {                              // Matches BNA                              attribs.Add("watchword"' eslm.matchedItem);                              message = GetMessage(5040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' eslm.matchedItem));                              break;                          }                            // Does the edit summary match a BES pattern?                          ListMatch lm = listman.MatchesList(r.comment' 20);                          if (lm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' lm.matchedItem);                              message = GetMessage(95040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' lm.matchedItem));                              break;                          }                            // If we're still here that means                          // - the create didn't get ignored by adminlist or whitelist                          // - the create didn't match any watch patterns                          // Now' if any of the following is true' we'll must report it.                          // - Create by blacklisted user                          // - Create by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // Created by an unlisted reguser with non-special create size' ignore                          if ((userOffset == 4) && !createSpecial)                              return;                            // Else: Create had special size' so let it shown (default)' don't return!                      }                      // This block handles: Page edits                      else                      {                          bool editSpecial = false;                            // Edit by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.editBig)                          {                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5110 + userOffset' ref attribs);                              editSpecial = true;                          }                          else if (r.szdiff <= config.editBlank)                          {                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5120 + userOffset' ref attribs);                              editSpecial = true;                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5100 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Edit summary matches a BES pattern                          // - Edit blanked the page                          // - Edit replaced the page                          // - Article is on watchlist                            // Does the edit summary match a BES pattern?                          ListMatch elm = listman.MatchesList(r.comment' 20);                          if (elm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' elm.matchedItem);                              message = GetMessage(95130 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16310' r.comment' (String)attribs["article"]));                              break;                          }                            // Did the user user blank the page?                          if (project.rautosummBlank.IsMatch(r.comment))                          {                              message = GetMessage(96010 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16311' (String)attribs["article"]));                              break;                          }                            Match rplm = project.rautosummReplace.Match(r.comment);                          if (rplm.Success)                          {                              // The user replaced the page.                              try                              {                                  attribs.Add("profanity"' rplm.Groups["item1"].Captures[0].Value);                                  message = GetMessage(96020 + userOffset' ref attribs);                              }                              catch (ArgumentOutOfRangeException)                              {                                  // This wiki probably doesn't have a profanity attribute                                  message = GetMessage(96030 + userOffset' ref attribs);                              }                              break;                          }                            // Is the article on the watchlist?                          ListMatch welm = listman.IsWatchedArticle(r.title' r.project);                          if (welm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5130 + userOffset' ref attribs);                              break;                          }                            // If we're still here that means                          // - the edit didn't get ignored by adminlist or whitelist                          // - the edit didn't match any watch patterns                          // Now' if any of the following is true' we must still report it.                          // - Edit by blacklisted user                          // - Edit by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // If nothing special about the edit' return to ignore                          if (!editSpecial)                              return;                      }                      break;                  case RCEvent.EventType.move:                      // if moves are softhidden hide moves by admin' bot or whitelist                      if ((config.feedFilterEventMove == 2) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                      {                          return;                      }                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("fromname"' project.interwikiLink + r.title);                      attribs.Add("cfromname"' r.title);                      attribs.Add("toname"' project.interwikiLink + r.movedTo);                      attribs.Add("ctoname"' r.movedTo);                      attribs.Add("url"' r.blockLength); //The blockLength field stores the moveFrom URL                      attribs.Add("reason"' r.comment);                      message = GetMessage(5500 + userOffset' ref attribs);                      break;                  case RCEvent.EventType.block:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.title.Split(new char[] { ':' }' 2)[1]));                      attribs.Add("length"' r.blockLength);                      attribs.Add("reason"' r.comment);                      message = GetMessage(5400' ref attribs);                      //If the blocked user (r.title) isn't botlisted' add to blacklist                      if (listman.ClassifyEditor(r.title.Split(new char[] { ':' }' 2)[1]' r.project) != ListManager.UserType.bot)                      {                          //If this isn't an indefinite/infinite block' add to blacklist                          if ((r.blockLength.ToLower() != "indefinite") && (r.blockLength.ToLower() != "infinite"))                          {                                                               // 2'678'400 seconds = 744 hours = 31 days                              int listLen = Convert.ToInt32(CVNBotUtils.ParseDateTimeLength(r.blockLength' 2678400) * 2.5);                              string blComment = "Autoblacklist: " + r.comment + " on " + r.project;                              message += "\n" + listman.AddUserToList(r.title.Split(new char[] { ':' }' 2)[1]' "" //Global bl                                  ' ListManager.UserType.blacklisted' r.user' blComment' listLen);                              Broadcast("BL"' "ADD"' r.title.Split(new char[] { ':' }' 2)[1]' listLen' blComment' r.user);                          }                      }                      break;                  case RCEvent.EventType.unblock:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("reason"' r.comment);                      message = GetMessage(5700' ref attribs);                      break;                  case RCEvent.EventType.delete:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      attribs.Add("reason"' r.comment);                      message = GetMessage(05300' ref attribs);                      break;                  case RCEvent.EventType.newuser:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("caurl"' "https://meta.wikimedia.org/wiki/Special:CentralAuth/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch = listman.MatchesList(r.user' 11);                      if (bnuMatch.Success && feedFilterThisEvent == 1)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch.matchedItem);                          attribs.Add("wwreason"' bnuMatch.matchedReason);                          message = GetMessage(5201' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5200' ref attribs);                      }                      break;                  case RCEvent.EventType.newuser2:                      attribs.Add("creator"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ccreator"' r.user);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.title);                      attribs.Add("ceditor"' r.title);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch2 = listman.MatchesList(r.user' 11);                      if (bnuMatch2.Success)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch2.matchedItem);                          attribs.Add("wwreason"' bnuMatch2.matchedReason);                          message = GetMessage(5211' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch2.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5210' ref attribs);                      }                      break;                  case RCEvent.EventType.upload:                      int uMsg = 5600;                        // Check if the edit summary matches BES                      ListMatch ubes2 = listman.MatchesList(r.comment' 20);                      if (ubes2.Success)                      {                          attribs.Add("watchword"' ubes2.matchedItem);                          attribs.Add("lmreason"' ubes2.matchedReason);                          uMsg = 95620;                      }                        // Now check if the title matches BES                      ListMatch ubes1 = listman.MatchesList(r.title' 20);                      if (ubes1.Success)                      {                          attribs.Add("watchword"' ubes1.matchedItem);                          attribs.Add("lmreason"' ubes1.matchedReason);                          uMsg = 95620;                      }                        // Check if upload is watched                      ListMatch uwa = listman.IsWatchedArticle(r.title' r.project);                      if (uwa.Success)                          uMsg = 5610;                        // If normal and uploaded by an admin' bot or whitelisted person always hide                      if ((uMsg == 5600) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                          return;                        // if normal and uploads are softhidden hide normal user and anon aswell                      if ((uMsg == 5600) && (config.feedFilterEventUpload == 2) && ((userOffset == 3) || (userOffset == 4)))                          return;                        // If our message is 95620' we might need to truncate r.comment                      if (uMsg == 95620)                      {                          if (r.comment.Length > 25)                              r.comment = r.comment.Substring(0' 23) + "...";                      }                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("uploaditem"' project.interwikiLink + r.title);                      attribs.Add("cuploaditem"' r.title);                      attribs.Add("reason"' r.comment);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(userOffset + uMsg' ref attribs);                      break;                  case RCEvent.EventType.protect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in protect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5900' ref attribs);                      break;                  case RCEvent.EventType.unprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in unprotect is fine' it's just the pagetitle                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(5901' ref attribs);                      break;                  case RCEvent.EventType.modifyprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in modifyprotect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5902' ref attribs);                      break;              }
Magic Number,CVNBot,Program,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Program.cs,ReactToRCEvent,The following statement contains a magic number: switch (r.eventtype)              {                  // This case handles:                  // - New page creations                  // - Page edits                  case RCEvent.EventType.edit:                      String diffsize;                      if (r.szdiff >= 0)                          diffsize = "+" + r.szdiff.ToString();                      else                          diffsize = r.szdiff.ToString();                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("size"' diffsize);                      attribs.Add("url"' r.url);                      attribs.Add("reason"' r.comment);                        // This block handles: New page creations                      if (r.newpage)                      {                          bool createSpecial = false;                            // New pages created by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.newBig)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5010 + userOffset' ref attribs);                          }                          else if (r.szdiff <= config.newSmall)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5020 + userOffset' ref attribs);                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5000 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Article is on watchlist                          // - Page title matches a BNA pattern                          // - Edit summary matches a BES pattern                            // Is the article on the watchlist?                          ListMatch wlm = listman.IsWatchedArticle(r.title' r.project);                          if (wlm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5030 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16301' (String)attribs["article"]));                              break;                          }                            // Does the page title match a BNA pattern?                          ListMatch eslm = listman.MatchesList(r.title' 12);                          if (eslm.Success)                          {                              // Matches BNA                              attribs.Add("watchword"' eslm.matchedItem);                              message = GetMessage(5040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' eslm.matchedItem));                              break;                          }                            // Does the edit summary match a BES pattern?                          ListMatch lm = listman.MatchesList(r.comment' 20);                          if (lm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' lm.matchedItem);                              message = GetMessage(95040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' lm.matchedItem));                              break;                          }                            // If we're still here that means                          // - the create didn't get ignored by adminlist or whitelist                          // - the create didn't match any watch patterns                          // Now' if any of the following is true' we'll must report it.                          // - Create by blacklisted user                          // - Create by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // Created by an unlisted reguser with non-special create size' ignore                          if ((userOffset == 4) && !createSpecial)                              return;                            // Else: Create had special size' so let it shown (default)' don't return!                      }                      // This block handles: Page edits                      else                      {                          bool editSpecial = false;                            // Edit by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.editBig)                          {                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5110 + userOffset' ref attribs);                              editSpecial = true;                          }                          else if (r.szdiff <= config.editBlank)                          {                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5120 + userOffset' ref attribs);                              editSpecial = true;                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5100 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Edit summary matches a BES pattern                          // - Edit blanked the page                          // - Edit replaced the page                          // - Article is on watchlist                            // Does the edit summary match a BES pattern?                          ListMatch elm = listman.MatchesList(r.comment' 20);                          if (elm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' elm.matchedItem);                              message = GetMessage(95130 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16310' r.comment' (String)attribs["article"]));                              break;                          }                            // Did the user user blank the page?                          if (project.rautosummBlank.IsMatch(r.comment))                          {                              message = GetMessage(96010 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16311' (String)attribs["article"]));                              break;                          }                            Match rplm = project.rautosummReplace.Match(r.comment);                          if (rplm.Success)                          {                              // The user replaced the page.                              try                              {                                  attribs.Add("profanity"' rplm.Groups["item1"].Captures[0].Value);                                  message = GetMessage(96020 + userOffset' ref attribs);                              }                              catch (ArgumentOutOfRangeException)                              {                                  // This wiki probably doesn't have a profanity attribute                                  message = GetMessage(96030 + userOffset' ref attribs);                              }                              break;                          }                            // Is the article on the watchlist?                          ListMatch welm = listman.IsWatchedArticle(r.title' r.project);                          if (welm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5130 + userOffset' ref attribs);                              break;                          }                            // If we're still here that means                          // - the edit didn't get ignored by adminlist or whitelist                          // - the edit didn't match any watch patterns                          // Now' if any of the following is true' we must still report it.                          // - Edit by blacklisted user                          // - Edit by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // If nothing special about the edit' return to ignore                          if (!editSpecial)                              return;                      }                      break;                  case RCEvent.EventType.move:                      // if moves are softhidden hide moves by admin' bot or whitelist                      if ((config.feedFilterEventMove == 2) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                      {                          return;                      }                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("fromname"' project.interwikiLink + r.title);                      attribs.Add("cfromname"' r.title);                      attribs.Add("toname"' project.interwikiLink + r.movedTo);                      attribs.Add("ctoname"' r.movedTo);                      attribs.Add("url"' r.blockLength); //The blockLength field stores the moveFrom URL                      attribs.Add("reason"' r.comment);                      message = GetMessage(5500 + userOffset' ref attribs);                      break;                  case RCEvent.EventType.block:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.title.Split(new char[] { ':' }' 2)[1]));                      attribs.Add("length"' r.blockLength);                      attribs.Add("reason"' r.comment);                      message = GetMessage(5400' ref attribs);                      //If the blocked user (r.title) isn't botlisted' add to blacklist                      if (listman.ClassifyEditor(r.title.Split(new char[] { ':' }' 2)[1]' r.project) != ListManager.UserType.bot)                      {                          //If this isn't an indefinite/infinite block' add to blacklist                          if ((r.blockLength.ToLower() != "indefinite") && (r.blockLength.ToLower() != "infinite"))                          {                                                               // 2'678'400 seconds = 744 hours = 31 days                              int listLen = Convert.ToInt32(CVNBotUtils.ParseDateTimeLength(r.blockLength' 2678400) * 2.5);                              string blComment = "Autoblacklist: " + r.comment + " on " + r.project;                              message += "\n" + listman.AddUserToList(r.title.Split(new char[] { ':' }' 2)[1]' "" //Global bl                                  ' ListManager.UserType.blacklisted' r.user' blComment' listLen);                              Broadcast("BL"' "ADD"' r.title.Split(new char[] { ':' }' 2)[1]' listLen' blComment' r.user);                          }                      }                      break;                  case RCEvent.EventType.unblock:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("reason"' r.comment);                      message = GetMessage(5700' ref attribs);                      break;                  case RCEvent.EventType.delete:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      attribs.Add("reason"' r.comment);                      message = GetMessage(05300' ref attribs);                      break;                  case RCEvent.EventType.newuser:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("caurl"' "https://meta.wikimedia.org/wiki/Special:CentralAuth/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch = listman.MatchesList(r.user' 11);                      if (bnuMatch.Success && feedFilterThisEvent == 1)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch.matchedItem);                          attribs.Add("wwreason"' bnuMatch.matchedReason);                          message = GetMessage(5201' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5200' ref attribs);                      }                      break;                  case RCEvent.EventType.newuser2:                      attribs.Add("creator"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ccreator"' r.user);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.title);                      attribs.Add("ceditor"' r.title);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch2 = listman.MatchesList(r.user' 11);                      if (bnuMatch2.Success)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch2.matchedItem);                          attribs.Add("wwreason"' bnuMatch2.matchedReason);                          message = GetMessage(5211' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch2.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5210' ref attribs);                      }                      break;                  case RCEvent.EventType.upload:                      int uMsg = 5600;                        // Check if the edit summary matches BES                      ListMatch ubes2 = listman.MatchesList(r.comment' 20);                      if (ubes2.Success)                      {                          attribs.Add("watchword"' ubes2.matchedItem);                          attribs.Add("lmreason"' ubes2.matchedReason);                          uMsg = 95620;                      }                        // Now check if the title matches BES                      ListMatch ubes1 = listman.MatchesList(r.title' 20);                      if (ubes1.Success)                      {                          attribs.Add("watchword"' ubes1.matchedItem);                          attribs.Add("lmreason"' ubes1.matchedReason);                          uMsg = 95620;                      }                        // Check if upload is watched                      ListMatch uwa = listman.IsWatchedArticle(r.title' r.project);                      if (uwa.Success)                          uMsg = 5610;                        // If normal and uploaded by an admin' bot or whitelisted person always hide                      if ((uMsg == 5600) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                          return;                        // if normal and uploads are softhidden hide normal user and anon aswell                      if ((uMsg == 5600) && (config.feedFilterEventUpload == 2) && ((userOffset == 3) || (userOffset == 4)))                          return;                        // If our message is 95620' we might need to truncate r.comment                      if (uMsg == 95620)                      {                          if (r.comment.Length > 25)                              r.comment = r.comment.Substring(0' 23) + "...";                      }                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("uploaditem"' project.interwikiLink + r.title);                      attribs.Add("cuploaditem"' r.title);                      attribs.Add("reason"' r.comment);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(userOffset + uMsg' ref attribs);                      break;                  case RCEvent.EventType.protect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in protect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5900' ref attribs);                      break;                  case RCEvent.EventType.unprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in unprotect is fine' it's just the pagetitle                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(5901' ref attribs);                      break;                  case RCEvent.EventType.modifyprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in modifyprotect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5902' ref attribs);                      break;              }
Magic Number,CVNBot,Program,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Program.cs,ReactToRCEvent,The following statement contains a magic number: switch (r.eventtype)              {                  // This case handles:                  // - New page creations                  // - Page edits                  case RCEvent.EventType.edit:                      String diffsize;                      if (r.szdiff >= 0)                          diffsize = "+" + r.szdiff.ToString();                      else                          diffsize = r.szdiff.ToString();                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("size"' diffsize);                      attribs.Add("url"' r.url);                      attribs.Add("reason"' r.comment);                        // This block handles: New page creations                      if (r.newpage)                      {                          bool createSpecial = false;                            // New pages created by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.newBig)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5010 + userOffset' ref attribs);                          }                          else if (r.szdiff <= config.newSmall)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5020 + userOffset' ref attribs);                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5000 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Article is on watchlist                          // - Page title matches a BNA pattern                          // - Edit summary matches a BES pattern                            // Is the article on the watchlist?                          ListMatch wlm = listman.IsWatchedArticle(r.title' r.project);                          if (wlm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5030 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16301' (String)attribs["article"]));                              break;                          }                            // Does the page title match a BNA pattern?                          ListMatch eslm = listman.MatchesList(r.title' 12);                          if (eslm.Success)                          {                              // Matches BNA                              attribs.Add("watchword"' eslm.matchedItem);                              message = GetMessage(5040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' eslm.matchedItem));                              break;                          }                            // Does the edit summary match a BES pattern?                          ListMatch lm = listman.MatchesList(r.comment' 20);                          if (lm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' lm.matchedItem);                              message = GetMessage(95040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' lm.matchedItem));                              break;                          }                            // If we're still here that means                          // - the create didn't get ignored by adminlist or whitelist                          // - the create didn't match any watch patterns                          // Now' if any of the following is true' we'll must report it.                          // - Create by blacklisted user                          // - Create by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // Created by an unlisted reguser with non-special create size' ignore                          if ((userOffset == 4) && !createSpecial)                              return;                            // Else: Create had special size' so let it shown (default)' don't return!                      }                      // This block handles: Page edits                      else                      {                          bool editSpecial = false;                            // Edit by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.editBig)                          {                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5110 + userOffset' ref attribs);                              editSpecial = true;                          }                          else if (r.szdiff <= config.editBlank)                          {                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5120 + userOffset' ref attribs);                              editSpecial = true;                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5100 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Edit summary matches a BES pattern                          // - Edit blanked the page                          // - Edit replaced the page                          // - Article is on watchlist                            // Does the edit summary match a BES pattern?                          ListMatch elm = listman.MatchesList(r.comment' 20);                          if (elm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' elm.matchedItem);                              message = GetMessage(95130 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16310' r.comment' (String)attribs["article"]));                              break;                          }                            // Did the user user blank the page?                          if (project.rautosummBlank.IsMatch(r.comment))                          {                              message = GetMessage(96010 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16311' (String)attribs["article"]));                              break;                          }                            Match rplm = project.rautosummReplace.Match(r.comment);                          if (rplm.Success)                          {                              // The user replaced the page.                              try                              {                                  attribs.Add("profanity"' rplm.Groups["item1"].Captures[0].Value);                                  message = GetMessage(96020 + userOffset' ref attribs);                              }                              catch (ArgumentOutOfRangeException)                              {                                  // This wiki probably doesn't have a profanity attribute                                  message = GetMessage(96030 + userOffset' ref attribs);                              }                              break;                          }                            // Is the article on the watchlist?                          ListMatch welm = listman.IsWatchedArticle(r.title' r.project);                          if (welm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5130 + userOffset' ref attribs);                              break;                          }                            // If we're still here that means                          // - the edit didn't get ignored by adminlist or whitelist                          // - the edit didn't match any watch patterns                          // Now' if any of the following is true' we must still report it.                          // - Edit by blacklisted user                          // - Edit by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // If nothing special about the edit' return to ignore                          if (!editSpecial)                              return;                      }                      break;                  case RCEvent.EventType.move:                      // if moves are softhidden hide moves by admin' bot or whitelist                      if ((config.feedFilterEventMove == 2) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                      {                          return;                      }                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("fromname"' project.interwikiLink + r.title);                      attribs.Add("cfromname"' r.title);                      attribs.Add("toname"' project.interwikiLink + r.movedTo);                      attribs.Add("ctoname"' r.movedTo);                      attribs.Add("url"' r.blockLength); //The blockLength field stores the moveFrom URL                      attribs.Add("reason"' r.comment);                      message = GetMessage(5500 + userOffset' ref attribs);                      break;                  case RCEvent.EventType.block:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.title.Split(new char[] { ':' }' 2)[1]));                      attribs.Add("length"' r.blockLength);                      attribs.Add("reason"' r.comment);                      message = GetMessage(5400' ref attribs);                      //If the blocked user (r.title) isn't botlisted' add to blacklist                      if (listman.ClassifyEditor(r.title.Split(new char[] { ':' }' 2)[1]' r.project) != ListManager.UserType.bot)                      {                          //If this isn't an indefinite/infinite block' add to blacklist                          if ((r.blockLength.ToLower() != "indefinite") && (r.blockLength.ToLower() != "infinite"))                          {                                                               // 2'678'400 seconds = 744 hours = 31 days                              int listLen = Convert.ToInt32(CVNBotUtils.ParseDateTimeLength(r.blockLength' 2678400) * 2.5);                              string blComment = "Autoblacklist: " + r.comment + " on " + r.project;                              message += "\n" + listman.AddUserToList(r.title.Split(new char[] { ':' }' 2)[1]' "" //Global bl                                  ' ListManager.UserType.blacklisted' r.user' blComment' listLen);                              Broadcast("BL"' "ADD"' r.title.Split(new char[] { ':' }' 2)[1]' listLen' blComment' r.user);                          }                      }                      break;                  case RCEvent.EventType.unblock:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("reason"' r.comment);                      message = GetMessage(5700' ref attribs);                      break;                  case RCEvent.EventType.delete:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      attribs.Add("reason"' r.comment);                      message = GetMessage(05300' ref attribs);                      break;                  case RCEvent.EventType.newuser:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("caurl"' "https://meta.wikimedia.org/wiki/Special:CentralAuth/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch = listman.MatchesList(r.user' 11);                      if (bnuMatch.Success && feedFilterThisEvent == 1)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch.matchedItem);                          attribs.Add("wwreason"' bnuMatch.matchedReason);                          message = GetMessage(5201' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5200' ref attribs);                      }                      break;                  case RCEvent.EventType.newuser2:                      attribs.Add("creator"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ccreator"' r.user);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.title);                      attribs.Add("ceditor"' r.title);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch2 = listman.MatchesList(r.user' 11);                      if (bnuMatch2.Success)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch2.matchedItem);                          attribs.Add("wwreason"' bnuMatch2.matchedReason);                          message = GetMessage(5211' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch2.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5210' ref attribs);                      }                      break;                  case RCEvent.EventType.upload:                      int uMsg = 5600;                        // Check if the edit summary matches BES                      ListMatch ubes2 = listman.MatchesList(r.comment' 20);                      if (ubes2.Success)                      {                          attribs.Add("watchword"' ubes2.matchedItem);                          attribs.Add("lmreason"' ubes2.matchedReason);                          uMsg = 95620;                      }                        // Now check if the title matches BES                      ListMatch ubes1 = listman.MatchesList(r.title' 20);                      if (ubes1.Success)                      {                          attribs.Add("watchword"' ubes1.matchedItem);                          attribs.Add("lmreason"' ubes1.matchedReason);                          uMsg = 95620;                      }                        // Check if upload is watched                      ListMatch uwa = listman.IsWatchedArticle(r.title' r.project);                      if (uwa.Success)                          uMsg = 5610;                        // If normal and uploaded by an admin' bot or whitelisted person always hide                      if ((uMsg == 5600) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                          return;                        // if normal and uploads are softhidden hide normal user and anon aswell                      if ((uMsg == 5600) && (config.feedFilterEventUpload == 2) && ((userOffset == 3) || (userOffset == 4)))                          return;                        // If our message is 95620' we might need to truncate r.comment                      if (uMsg == 95620)                      {                          if (r.comment.Length > 25)                              r.comment = r.comment.Substring(0' 23) + "...";                      }                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("uploaditem"' project.interwikiLink + r.title);                      attribs.Add("cuploaditem"' r.title);                      attribs.Add("reason"' r.comment);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(userOffset + uMsg' ref attribs);                      break;                  case RCEvent.EventType.protect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in protect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5900' ref attribs);                      break;                  case RCEvent.EventType.unprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in unprotect is fine' it's just the pagetitle                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(5901' ref attribs);                      break;                  case RCEvent.EventType.modifyprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in modifyprotect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5902' ref attribs);                      break;              }
Magic Number,CVNBot,Program,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Program.cs,ReactToRCEvent,The following statement contains a magic number: switch (r.eventtype)              {                  // This case handles:                  // - New page creations                  // - Page edits                  case RCEvent.EventType.edit:                      String diffsize;                      if (r.szdiff >= 0)                          diffsize = "+" + r.szdiff.ToString();                      else                          diffsize = r.szdiff.ToString();                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("size"' diffsize);                      attribs.Add("url"' r.url);                      attribs.Add("reason"' r.comment);                        // This block handles: New page creations                      if (r.newpage)                      {                          bool createSpecial = false;                            // New pages created by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.newBig)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5010 + userOffset' ref attribs);                          }                          else if (r.szdiff <= config.newSmall)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5020 + userOffset' ref attribs);                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5000 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Article is on watchlist                          // - Page title matches a BNA pattern                          // - Edit summary matches a BES pattern                            // Is the article on the watchlist?                          ListMatch wlm = listman.IsWatchedArticle(r.title' r.project);                          if (wlm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5030 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16301' (String)attribs["article"]));                              break;                          }                            // Does the page title match a BNA pattern?                          ListMatch eslm = listman.MatchesList(r.title' 12);                          if (eslm.Success)                          {                              // Matches BNA                              attribs.Add("watchword"' eslm.matchedItem);                              message = GetMessage(5040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' eslm.matchedItem));                              break;                          }                            // Does the edit summary match a BES pattern?                          ListMatch lm = listman.MatchesList(r.comment' 20);                          if (lm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' lm.matchedItem);                              message = GetMessage(95040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' lm.matchedItem));                              break;                          }                            // If we're still here that means                          // - the create didn't get ignored by adminlist or whitelist                          // - the create didn't match any watch patterns                          // Now' if any of the following is true' we'll must report it.                          // - Create by blacklisted user                          // - Create by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // Created by an unlisted reguser with non-special create size' ignore                          if ((userOffset == 4) && !createSpecial)                              return;                            // Else: Create had special size' so let it shown (default)' don't return!                      }                      // This block handles: Page edits                      else                      {                          bool editSpecial = false;                            // Edit by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.editBig)                          {                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5110 + userOffset' ref attribs);                              editSpecial = true;                          }                          else if (r.szdiff <= config.editBlank)                          {                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5120 + userOffset' ref attribs);                              editSpecial = true;                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5100 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Edit summary matches a BES pattern                          // - Edit blanked the page                          // - Edit replaced the page                          // - Article is on watchlist                            // Does the edit summary match a BES pattern?                          ListMatch elm = listman.MatchesList(r.comment' 20);                          if (elm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' elm.matchedItem);                              message = GetMessage(95130 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16310' r.comment' (String)attribs["article"]));                              break;                          }                            // Did the user user blank the page?                          if (project.rautosummBlank.IsMatch(r.comment))                          {                              message = GetMessage(96010 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16311' (String)attribs["article"]));                              break;                          }                            Match rplm = project.rautosummReplace.Match(r.comment);                          if (rplm.Success)                          {                              // The user replaced the page.                              try                              {                                  attribs.Add("profanity"' rplm.Groups["item1"].Captures[0].Value);                                  message = GetMessage(96020 + userOffset' ref attribs);                              }                              catch (ArgumentOutOfRangeException)                              {                                  // This wiki probably doesn't have a profanity attribute                                  message = GetMessage(96030 + userOffset' ref attribs);                              }                              break;                          }                            // Is the article on the watchlist?                          ListMatch welm = listman.IsWatchedArticle(r.title' r.project);                          if (welm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5130 + userOffset' ref attribs);                              break;                          }                            // If we're still here that means                          // - the edit didn't get ignored by adminlist or whitelist                          // - the edit didn't match any watch patterns                          // Now' if any of the following is true' we must still report it.                          // - Edit by blacklisted user                          // - Edit by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // If nothing special about the edit' return to ignore                          if (!editSpecial)                              return;                      }                      break;                  case RCEvent.EventType.move:                      // if moves are softhidden hide moves by admin' bot or whitelist                      if ((config.feedFilterEventMove == 2) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                      {                          return;                      }                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("fromname"' project.interwikiLink + r.title);                      attribs.Add("cfromname"' r.title);                      attribs.Add("toname"' project.interwikiLink + r.movedTo);                      attribs.Add("ctoname"' r.movedTo);                      attribs.Add("url"' r.blockLength); //The blockLength field stores the moveFrom URL                      attribs.Add("reason"' r.comment);                      message = GetMessage(5500 + userOffset' ref attribs);                      break;                  case RCEvent.EventType.block:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.title.Split(new char[] { ':' }' 2)[1]));                      attribs.Add("length"' r.blockLength);                      attribs.Add("reason"' r.comment);                      message = GetMessage(5400' ref attribs);                      //If the blocked user (r.title) isn't botlisted' add to blacklist                      if (listman.ClassifyEditor(r.title.Split(new char[] { ':' }' 2)[1]' r.project) != ListManager.UserType.bot)                      {                          //If this isn't an indefinite/infinite block' add to blacklist                          if ((r.blockLength.ToLower() != "indefinite") && (r.blockLength.ToLower() != "infinite"))                          {                                                               // 2'678'400 seconds = 744 hours = 31 days                              int listLen = Convert.ToInt32(CVNBotUtils.ParseDateTimeLength(r.blockLength' 2678400) * 2.5);                              string blComment = "Autoblacklist: " + r.comment + " on " + r.project;                              message += "\n" + listman.AddUserToList(r.title.Split(new char[] { ':' }' 2)[1]' "" //Global bl                                  ' ListManager.UserType.blacklisted' r.user' blComment' listLen);                              Broadcast("BL"' "ADD"' r.title.Split(new char[] { ':' }' 2)[1]' listLen' blComment' r.user);                          }                      }                      break;                  case RCEvent.EventType.unblock:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("reason"' r.comment);                      message = GetMessage(5700' ref attribs);                      break;                  case RCEvent.EventType.delete:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      attribs.Add("reason"' r.comment);                      message = GetMessage(05300' ref attribs);                      break;                  case RCEvent.EventType.newuser:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("caurl"' "https://meta.wikimedia.org/wiki/Special:CentralAuth/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch = listman.MatchesList(r.user' 11);                      if (bnuMatch.Success && feedFilterThisEvent == 1)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch.matchedItem);                          attribs.Add("wwreason"' bnuMatch.matchedReason);                          message = GetMessage(5201' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5200' ref attribs);                      }                      break;                  case RCEvent.EventType.newuser2:                      attribs.Add("creator"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ccreator"' r.user);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.title);                      attribs.Add("ceditor"' r.title);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch2 = listman.MatchesList(r.user' 11);                      if (bnuMatch2.Success)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch2.matchedItem);                          attribs.Add("wwreason"' bnuMatch2.matchedReason);                          message = GetMessage(5211' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch2.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5210' ref attribs);                      }                      break;                  case RCEvent.EventType.upload:                      int uMsg = 5600;                        // Check if the edit summary matches BES                      ListMatch ubes2 = listman.MatchesList(r.comment' 20);                      if (ubes2.Success)                      {                          attribs.Add("watchword"' ubes2.matchedItem);                          attribs.Add("lmreason"' ubes2.matchedReason);                          uMsg = 95620;                      }                        // Now check if the title matches BES                      ListMatch ubes1 = listman.MatchesList(r.title' 20);                      if (ubes1.Success)                      {                          attribs.Add("watchword"' ubes1.matchedItem);                          attribs.Add("lmreason"' ubes1.matchedReason);                          uMsg = 95620;                      }                        // Check if upload is watched                      ListMatch uwa = listman.IsWatchedArticle(r.title' r.project);                      if (uwa.Success)                          uMsg = 5610;                        // If normal and uploaded by an admin' bot or whitelisted person always hide                      if ((uMsg == 5600) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                          return;                        // if normal and uploads are softhidden hide normal user and anon aswell                      if ((uMsg == 5600) && (config.feedFilterEventUpload == 2) && ((userOffset == 3) || (userOffset == 4)))                          return;                        // If our message is 95620' we might need to truncate r.comment                      if (uMsg == 95620)                      {                          if (r.comment.Length > 25)                              r.comment = r.comment.Substring(0' 23) + "...";                      }                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("uploaditem"' project.interwikiLink + r.title);                      attribs.Add("cuploaditem"' r.title);                      attribs.Add("reason"' r.comment);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(userOffset + uMsg' ref attribs);                      break;                  case RCEvent.EventType.protect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in protect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5900' ref attribs);                      break;                  case RCEvent.EventType.unprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in unprotect is fine' it's just the pagetitle                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(5901' ref attribs);                      break;                  case RCEvent.EventType.modifyprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in modifyprotect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5902' ref attribs);                      break;              }
Magic Number,CVNBot,Program,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Program.cs,ReactToRCEvent,The following statement contains a magic number: switch (r.eventtype)              {                  // This case handles:                  // - New page creations                  // - Page edits                  case RCEvent.EventType.edit:                      String diffsize;                      if (r.szdiff >= 0)                          diffsize = "+" + r.szdiff.ToString();                      else                          diffsize = r.szdiff.ToString();                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("size"' diffsize);                      attribs.Add("url"' r.url);                      attribs.Add("reason"' r.comment);                        // This block handles: New page creations                      if (r.newpage)                      {                          bool createSpecial = false;                            // New pages created by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.newBig)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5010 + userOffset' ref attribs);                          }                          else if (r.szdiff <= config.newSmall)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5020 + userOffset' ref attribs);                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5000 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Article is on watchlist                          // - Page title matches a BNA pattern                          // - Edit summary matches a BES pattern                            // Is the article on the watchlist?                          ListMatch wlm = listman.IsWatchedArticle(r.title' r.project);                          if (wlm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5030 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16301' (String)attribs["article"]));                              break;                          }                            // Does the page title match a BNA pattern?                          ListMatch eslm = listman.MatchesList(r.title' 12);                          if (eslm.Success)                          {                              // Matches BNA                              attribs.Add("watchword"' eslm.matchedItem);                              message = GetMessage(5040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' eslm.matchedItem));                              break;                          }                            // Does the edit summary match a BES pattern?                          ListMatch lm = listman.MatchesList(r.comment' 20);                          if (lm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' lm.matchedItem);                              message = GetMessage(95040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' lm.matchedItem));                              break;                          }                            // If we're still here that means                          // - the create didn't get ignored by adminlist or whitelist                          // - the create didn't match any watch patterns                          // Now' if any of the following is true' we'll must report it.                          // - Create by blacklisted user                          // - Create by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // Created by an unlisted reguser with non-special create size' ignore                          if ((userOffset == 4) && !createSpecial)                              return;                            // Else: Create had special size' so let it shown (default)' don't return!                      }                      // This block handles: Page edits                      else                      {                          bool editSpecial = false;                            // Edit by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.editBig)                          {                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5110 + userOffset' ref attribs);                              editSpecial = true;                          }                          else if (r.szdiff <= config.editBlank)                          {                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5120 + userOffset' ref attribs);                              editSpecial = true;                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5100 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Edit summary matches a BES pattern                          // - Edit blanked the page                          // - Edit replaced the page                          // - Article is on watchlist                            // Does the edit summary match a BES pattern?                          ListMatch elm = listman.MatchesList(r.comment' 20);                          if (elm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' elm.matchedItem);                              message = GetMessage(95130 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16310' r.comment' (String)attribs["article"]));                              break;                          }                            // Did the user user blank the page?                          if (project.rautosummBlank.IsMatch(r.comment))                          {                              message = GetMessage(96010 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16311' (String)attribs["article"]));                              break;                          }                            Match rplm = project.rautosummReplace.Match(r.comment);                          if (rplm.Success)                          {                              // The user replaced the page.                              try                              {                                  attribs.Add("profanity"' rplm.Groups["item1"].Captures[0].Value);                                  message = GetMessage(96020 + userOffset' ref attribs);                              }                              catch (ArgumentOutOfRangeException)                              {                                  // This wiki probably doesn't have a profanity attribute                                  message = GetMessage(96030 + userOffset' ref attribs);                              }                              break;                          }                            // Is the article on the watchlist?                          ListMatch welm = listman.IsWatchedArticle(r.title' r.project);                          if (welm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5130 + userOffset' ref attribs);                              break;                          }                            // If we're still here that means                          // - the edit didn't get ignored by adminlist or whitelist                          // - the edit didn't match any watch patterns                          // Now' if any of the following is true' we must still report it.                          // - Edit by blacklisted user                          // - Edit by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // If nothing special about the edit' return to ignore                          if (!editSpecial)                              return;                      }                      break;                  case RCEvent.EventType.move:                      // if moves are softhidden hide moves by admin' bot or whitelist                      if ((config.feedFilterEventMove == 2) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                      {                          return;                      }                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("fromname"' project.interwikiLink + r.title);                      attribs.Add("cfromname"' r.title);                      attribs.Add("toname"' project.interwikiLink + r.movedTo);                      attribs.Add("ctoname"' r.movedTo);                      attribs.Add("url"' r.blockLength); //The blockLength field stores the moveFrom URL                      attribs.Add("reason"' r.comment);                      message = GetMessage(5500 + userOffset' ref attribs);                      break;                  case RCEvent.EventType.block:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.title.Split(new char[] { ':' }' 2)[1]));                      attribs.Add("length"' r.blockLength);                      attribs.Add("reason"' r.comment);                      message = GetMessage(5400' ref attribs);                      //If the blocked user (r.title) isn't botlisted' add to blacklist                      if (listman.ClassifyEditor(r.title.Split(new char[] { ':' }' 2)[1]' r.project) != ListManager.UserType.bot)                      {                          //If this isn't an indefinite/infinite block' add to blacklist                          if ((r.blockLength.ToLower() != "indefinite") && (r.blockLength.ToLower() != "infinite"))                          {                                                               // 2'678'400 seconds = 744 hours = 31 days                              int listLen = Convert.ToInt32(CVNBotUtils.ParseDateTimeLength(r.blockLength' 2678400) * 2.5);                              string blComment = "Autoblacklist: " + r.comment + " on " + r.project;                              message += "\n" + listman.AddUserToList(r.title.Split(new char[] { ':' }' 2)[1]' "" //Global bl                                  ' ListManager.UserType.blacklisted' r.user' blComment' listLen);                              Broadcast("BL"' "ADD"' r.title.Split(new char[] { ':' }' 2)[1]' listLen' blComment' r.user);                          }                      }                      break;                  case RCEvent.EventType.unblock:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("reason"' r.comment);                      message = GetMessage(5700' ref attribs);                      break;                  case RCEvent.EventType.delete:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      attribs.Add("reason"' r.comment);                      message = GetMessage(05300' ref attribs);                      break;                  case RCEvent.EventType.newuser:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("caurl"' "https://meta.wikimedia.org/wiki/Special:CentralAuth/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch = listman.MatchesList(r.user' 11);                      if (bnuMatch.Success && feedFilterThisEvent == 1)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch.matchedItem);                          attribs.Add("wwreason"' bnuMatch.matchedReason);                          message = GetMessage(5201' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5200' ref attribs);                      }                      break;                  case RCEvent.EventType.newuser2:                      attribs.Add("creator"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ccreator"' r.user);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.title);                      attribs.Add("ceditor"' r.title);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch2 = listman.MatchesList(r.user' 11);                      if (bnuMatch2.Success)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch2.matchedItem);                          attribs.Add("wwreason"' bnuMatch2.matchedReason);                          message = GetMessage(5211' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch2.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5210' ref attribs);                      }                      break;                  case RCEvent.EventType.upload:                      int uMsg = 5600;                        // Check if the edit summary matches BES                      ListMatch ubes2 = listman.MatchesList(r.comment' 20);                      if (ubes2.Success)                      {                          attribs.Add("watchword"' ubes2.matchedItem);                          attribs.Add("lmreason"' ubes2.matchedReason);                          uMsg = 95620;                      }                        // Now check if the title matches BES                      ListMatch ubes1 = listman.MatchesList(r.title' 20);                      if (ubes1.Success)                      {                          attribs.Add("watchword"' ubes1.matchedItem);                          attribs.Add("lmreason"' ubes1.matchedReason);                          uMsg = 95620;                      }                        // Check if upload is watched                      ListMatch uwa = listman.IsWatchedArticle(r.title' r.project);                      if (uwa.Success)                          uMsg = 5610;                        // If normal and uploaded by an admin' bot or whitelisted person always hide                      if ((uMsg == 5600) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                          return;                        // if normal and uploads are softhidden hide normal user and anon aswell                      if ((uMsg == 5600) && (config.feedFilterEventUpload == 2) && ((userOffset == 3) || (userOffset == 4)))                          return;                        // If our message is 95620' we might need to truncate r.comment                      if (uMsg == 95620)                      {                          if (r.comment.Length > 25)                              r.comment = r.comment.Substring(0' 23) + "...";                      }                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("uploaditem"' project.interwikiLink + r.title);                      attribs.Add("cuploaditem"' r.title);                      attribs.Add("reason"' r.comment);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(userOffset + uMsg' ref attribs);                      break;                  case RCEvent.EventType.protect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in protect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5900' ref attribs);                      break;                  case RCEvent.EventType.unprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in unprotect is fine' it's just the pagetitle                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(5901' ref attribs);                      break;                  case RCEvent.EventType.modifyprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in modifyprotect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5902' ref attribs);                      break;              }
Magic Number,CVNBot,Program,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Program.cs,ReactToRCEvent,The following statement contains a magic number: switch (r.eventtype)              {                  // This case handles:                  // - New page creations                  // - Page edits                  case RCEvent.EventType.edit:                      String diffsize;                      if (r.szdiff >= 0)                          diffsize = "+" + r.szdiff.ToString();                      else                          diffsize = r.szdiff.ToString();                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("size"' diffsize);                      attribs.Add("url"' r.url);                      attribs.Add("reason"' r.comment);                        // This block handles: New page creations                      if (r.newpage)                      {                          bool createSpecial = false;                            // New pages created by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.newBig)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5010 + userOffset' ref attribs);                          }                          else if (r.szdiff <= config.newSmall)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5020 + userOffset' ref attribs);                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5000 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Article is on watchlist                          // - Page title matches a BNA pattern                          // - Edit summary matches a BES pattern                            // Is the article on the watchlist?                          ListMatch wlm = listman.IsWatchedArticle(r.title' r.project);                          if (wlm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5030 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16301' (String)attribs["article"]));                              break;                          }                            // Does the page title match a BNA pattern?                          ListMatch eslm = listman.MatchesList(r.title' 12);                          if (eslm.Success)                          {                              // Matches BNA                              attribs.Add("watchword"' eslm.matchedItem);                              message = GetMessage(5040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' eslm.matchedItem));                              break;                          }                            // Does the edit summary match a BES pattern?                          ListMatch lm = listman.MatchesList(r.comment' 20);                          if (lm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' lm.matchedItem);                              message = GetMessage(95040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' lm.matchedItem));                              break;                          }                            // If we're still here that means                          // - the create didn't get ignored by adminlist or whitelist                          // - the create didn't match any watch patterns                          // Now' if any of the following is true' we'll must report it.                          // - Create by blacklisted user                          // - Create by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // Created by an unlisted reguser with non-special create size' ignore                          if ((userOffset == 4) && !createSpecial)                              return;                            // Else: Create had special size' so let it shown (default)' don't return!                      }                      // This block handles: Page edits                      else                      {                          bool editSpecial = false;                            // Edit by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.editBig)                          {                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5110 + userOffset' ref attribs);                              editSpecial = true;                          }                          else if (r.szdiff <= config.editBlank)                          {                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5120 + userOffset' ref attribs);                              editSpecial = true;                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5100 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Edit summary matches a BES pattern                          // - Edit blanked the page                          // - Edit replaced the page                          // - Article is on watchlist                            // Does the edit summary match a BES pattern?                          ListMatch elm = listman.MatchesList(r.comment' 20);                          if (elm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' elm.matchedItem);                              message = GetMessage(95130 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16310' r.comment' (String)attribs["article"]));                              break;                          }                            // Did the user user blank the page?                          if (project.rautosummBlank.IsMatch(r.comment))                          {                              message = GetMessage(96010 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16311' (String)attribs["article"]));                              break;                          }                            Match rplm = project.rautosummReplace.Match(r.comment);                          if (rplm.Success)                          {                              // The user replaced the page.                              try                              {                                  attribs.Add("profanity"' rplm.Groups["item1"].Captures[0].Value);                                  message = GetMessage(96020 + userOffset' ref attribs);                              }                              catch (ArgumentOutOfRangeException)                              {                                  // This wiki probably doesn't have a profanity attribute                                  message = GetMessage(96030 + userOffset' ref attribs);                              }                              break;                          }                            // Is the article on the watchlist?                          ListMatch welm = listman.IsWatchedArticle(r.title' r.project);                          if (welm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5130 + userOffset' ref attribs);                              break;                          }                            // If we're still here that means                          // - the edit didn't get ignored by adminlist or whitelist                          // - the edit didn't match any watch patterns                          // Now' if any of the following is true' we must still report it.                          // - Edit by blacklisted user                          // - Edit by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // If nothing special about the edit' return to ignore                          if (!editSpecial)                              return;                      }                      break;                  case RCEvent.EventType.move:                      // if moves are softhidden hide moves by admin' bot or whitelist                      if ((config.feedFilterEventMove == 2) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                      {                          return;                      }                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("fromname"' project.interwikiLink + r.title);                      attribs.Add("cfromname"' r.title);                      attribs.Add("toname"' project.interwikiLink + r.movedTo);                      attribs.Add("ctoname"' r.movedTo);                      attribs.Add("url"' r.blockLength); //The blockLength field stores the moveFrom URL                      attribs.Add("reason"' r.comment);                      message = GetMessage(5500 + userOffset' ref attribs);                      break;                  case RCEvent.EventType.block:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.title.Split(new char[] { ':' }' 2)[1]));                      attribs.Add("length"' r.blockLength);                      attribs.Add("reason"' r.comment);                      message = GetMessage(5400' ref attribs);                      //If the blocked user (r.title) isn't botlisted' add to blacklist                      if (listman.ClassifyEditor(r.title.Split(new char[] { ':' }' 2)[1]' r.project) != ListManager.UserType.bot)                      {                          //If this isn't an indefinite/infinite block' add to blacklist                          if ((r.blockLength.ToLower() != "indefinite") && (r.blockLength.ToLower() != "infinite"))                          {                                                               // 2'678'400 seconds = 744 hours = 31 days                              int listLen = Convert.ToInt32(CVNBotUtils.ParseDateTimeLength(r.blockLength' 2678400) * 2.5);                              string blComment = "Autoblacklist: " + r.comment + " on " + r.project;                              message += "\n" + listman.AddUserToList(r.title.Split(new char[] { ':' }' 2)[1]' "" //Global bl                                  ' ListManager.UserType.blacklisted' r.user' blComment' listLen);                              Broadcast("BL"' "ADD"' r.title.Split(new char[] { ':' }' 2)[1]' listLen' blComment' r.user);                          }                      }                      break;                  case RCEvent.EventType.unblock:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("reason"' r.comment);                      message = GetMessage(5700' ref attribs);                      break;                  case RCEvent.EventType.delete:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      attribs.Add("reason"' r.comment);                      message = GetMessage(05300' ref attribs);                      break;                  case RCEvent.EventType.newuser:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("caurl"' "https://meta.wikimedia.org/wiki/Special:CentralAuth/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch = listman.MatchesList(r.user' 11);                      if (bnuMatch.Success && feedFilterThisEvent == 1)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch.matchedItem);                          attribs.Add("wwreason"' bnuMatch.matchedReason);                          message = GetMessage(5201' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5200' ref attribs);                      }                      break;                  case RCEvent.EventType.newuser2:                      attribs.Add("creator"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ccreator"' r.user);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.title);                      attribs.Add("ceditor"' r.title);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch2 = listman.MatchesList(r.user' 11);                      if (bnuMatch2.Success)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch2.matchedItem);                          attribs.Add("wwreason"' bnuMatch2.matchedReason);                          message = GetMessage(5211' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch2.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5210' ref attribs);                      }                      break;                  case RCEvent.EventType.upload:                      int uMsg = 5600;                        // Check if the edit summary matches BES                      ListMatch ubes2 = listman.MatchesList(r.comment' 20);                      if (ubes2.Success)                      {                          attribs.Add("watchword"' ubes2.matchedItem);                          attribs.Add("lmreason"' ubes2.matchedReason);                          uMsg = 95620;                      }                        // Now check if the title matches BES                      ListMatch ubes1 = listman.MatchesList(r.title' 20);                      if (ubes1.Success)                      {                          attribs.Add("watchword"' ubes1.matchedItem);                          attribs.Add("lmreason"' ubes1.matchedReason);                          uMsg = 95620;                      }                        // Check if upload is watched                      ListMatch uwa = listman.IsWatchedArticle(r.title' r.project);                      if (uwa.Success)                          uMsg = 5610;                        // If normal and uploaded by an admin' bot or whitelisted person always hide                      if ((uMsg == 5600) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                          return;                        // if normal and uploads are softhidden hide normal user and anon aswell                      if ((uMsg == 5600) && (config.feedFilterEventUpload == 2) && ((userOffset == 3) || (userOffset == 4)))                          return;                        // If our message is 95620' we might need to truncate r.comment                      if (uMsg == 95620)                      {                          if (r.comment.Length > 25)                              r.comment = r.comment.Substring(0' 23) + "...";                      }                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("uploaditem"' project.interwikiLink + r.title);                      attribs.Add("cuploaditem"' r.title);                      attribs.Add("reason"' r.comment);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(userOffset + uMsg' ref attribs);                      break;                  case RCEvent.EventType.protect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in protect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5900' ref attribs);                      break;                  case RCEvent.EventType.unprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in unprotect is fine' it's just the pagetitle                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(5901' ref attribs);                      break;                  case RCEvent.EventType.modifyprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in modifyprotect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5902' ref attribs);                      break;              }
Magic Number,CVNBot,Program,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Program.cs,ReactToRCEvent,The following statement contains a magic number: switch (r.eventtype)              {                  // This case handles:                  // - New page creations                  // - Page edits                  case RCEvent.EventType.edit:                      String diffsize;                      if (r.szdiff >= 0)                          diffsize = "+" + r.szdiff.ToString();                      else                          diffsize = r.szdiff.ToString();                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("size"' diffsize);                      attribs.Add("url"' r.url);                      attribs.Add("reason"' r.comment);                        // This block handles: New page creations                      if (r.newpage)                      {                          bool createSpecial = false;                            // New pages created by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.newBig)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5010 + userOffset' ref attribs);                          }                          else if (r.szdiff <= config.newSmall)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5020 + userOffset' ref attribs);                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5000 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Article is on watchlist                          // - Page title matches a BNA pattern                          // - Edit summary matches a BES pattern                            // Is the article on the watchlist?                          ListMatch wlm = listman.IsWatchedArticle(r.title' r.project);                          if (wlm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5030 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16301' (String)attribs["article"]));                              break;                          }                            // Does the page title match a BNA pattern?                          ListMatch eslm = listman.MatchesList(r.title' 12);                          if (eslm.Success)                          {                              // Matches BNA                              attribs.Add("watchword"' eslm.matchedItem);                              message = GetMessage(5040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' eslm.matchedItem));                              break;                          }                            // Does the edit summary match a BES pattern?                          ListMatch lm = listman.MatchesList(r.comment' 20);                          if (lm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' lm.matchedItem);                              message = GetMessage(95040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' lm.matchedItem));                              break;                          }                            // If we're still here that means                          // - the create didn't get ignored by adminlist or whitelist                          // - the create didn't match any watch patterns                          // Now' if any of the following is true' we'll must report it.                          // - Create by blacklisted user                          // - Create by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // Created by an unlisted reguser with non-special create size' ignore                          if ((userOffset == 4) && !createSpecial)                              return;                            // Else: Create had special size' so let it shown (default)' don't return!                      }                      // This block handles: Page edits                      else                      {                          bool editSpecial = false;                            // Edit by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.editBig)                          {                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5110 + userOffset' ref attribs);                              editSpecial = true;                          }                          else if (r.szdiff <= config.editBlank)                          {                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5120 + userOffset' ref attribs);                              editSpecial = true;                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5100 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Edit summary matches a BES pattern                          // - Edit blanked the page                          // - Edit replaced the page                          // - Article is on watchlist                            // Does the edit summary match a BES pattern?                          ListMatch elm = listman.MatchesList(r.comment' 20);                          if (elm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' elm.matchedItem);                              message = GetMessage(95130 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16310' r.comment' (String)attribs["article"]));                              break;                          }                            // Did the user user blank the page?                          if (project.rautosummBlank.IsMatch(r.comment))                          {                              message = GetMessage(96010 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16311' (String)attribs["article"]));                              break;                          }                            Match rplm = project.rautosummReplace.Match(r.comment);                          if (rplm.Success)                          {                              // The user replaced the page.                              try                              {                                  attribs.Add("profanity"' rplm.Groups["item1"].Captures[0].Value);                                  message = GetMessage(96020 + userOffset' ref attribs);                              }                              catch (ArgumentOutOfRangeException)                              {                                  // This wiki probably doesn't have a profanity attribute                                  message = GetMessage(96030 + userOffset' ref attribs);                              }                              break;                          }                            // Is the article on the watchlist?                          ListMatch welm = listman.IsWatchedArticle(r.title' r.project);                          if (welm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5130 + userOffset' ref attribs);                              break;                          }                            // If we're still here that means                          // - the edit didn't get ignored by adminlist or whitelist                          // - the edit didn't match any watch patterns                          // Now' if any of the following is true' we must still report it.                          // - Edit by blacklisted user                          // - Edit by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // If nothing special about the edit' return to ignore                          if (!editSpecial)                              return;                      }                      break;                  case RCEvent.EventType.move:                      // if moves are softhidden hide moves by admin' bot or whitelist                      if ((config.feedFilterEventMove == 2) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                      {                          return;                      }                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("fromname"' project.interwikiLink + r.title);                      attribs.Add("cfromname"' r.title);                      attribs.Add("toname"' project.interwikiLink + r.movedTo);                      attribs.Add("ctoname"' r.movedTo);                      attribs.Add("url"' r.blockLength); //The blockLength field stores the moveFrom URL                      attribs.Add("reason"' r.comment);                      message = GetMessage(5500 + userOffset' ref attribs);                      break;                  case RCEvent.EventType.block:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.title.Split(new char[] { ':' }' 2)[1]));                      attribs.Add("length"' r.blockLength);                      attribs.Add("reason"' r.comment);                      message = GetMessage(5400' ref attribs);                      //If the blocked user (r.title) isn't botlisted' add to blacklist                      if (listman.ClassifyEditor(r.title.Split(new char[] { ':' }' 2)[1]' r.project) != ListManager.UserType.bot)                      {                          //If this isn't an indefinite/infinite block' add to blacklist                          if ((r.blockLength.ToLower() != "indefinite") && (r.blockLength.ToLower() != "infinite"))                          {                                                               // 2'678'400 seconds = 744 hours = 31 days                              int listLen = Convert.ToInt32(CVNBotUtils.ParseDateTimeLength(r.blockLength' 2678400) * 2.5);                              string blComment = "Autoblacklist: " + r.comment + " on " + r.project;                              message += "\n" + listman.AddUserToList(r.title.Split(new char[] { ':' }' 2)[1]' "" //Global bl                                  ' ListManager.UserType.blacklisted' r.user' blComment' listLen);                              Broadcast("BL"' "ADD"' r.title.Split(new char[] { ':' }' 2)[1]' listLen' blComment' r.user);                          }                      }                      break;                  case RCEvent.EventType.unblock:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("reason"' r.comment);                      message = GetMessage(5700' ref attribs);                      break;                  case RCEvent.EventType.delete:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      attribs.Add("reason"' r.comment);                      message = GetMessage(05300' ref attribs);                      break;                  case RCEvent.EventType.newuser:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("caurl"' "https://meta.wikimedia.org/wiki/Special:CentralAuth/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch = listman.MatchesList(r.user' 11);                      if (bnuMatch.Success && feedFilterThisEvent == 1)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch.matchedItem);                          attribs.Add("wwreason"' bnuMatch.matchedReason);                          message = GetMessage(5201' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5200' ref attribs);                      }                      break;                  case RCEvent.EventType.newuser2:                      attribs.Add("creator"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ccreator"' r.user);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.title);                      attribs.Add("ceditor"' r.title);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch2 = listman.MatchesList(r.user' 11);                      if (bnuMatch2.Success)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch2.matchedItem);                          attribs.Add("wwreason"' bnuMatch2.matchedReason);                          message = GetMessage(5211' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch2.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5210' ref attribs);                      }                      break;                  case RCEvent.EventType.upload:                      int uMsg = 5600;                        // Check if the edit summary matches BES                      ListMatch ubes2 = listman.MatchesList(r.comment' 20);                      if (ubes2.Success)                      {                          attribs.Add("watchword"' ubes2.matchedItem);                          attribs.Add("lmreason"' ubes2.matchedReason);                          uMsg = 95620;                      }                        // Now check if the title matches BES                      ListMatch ubes1 = listman.MatchesList(r.title' 20);                      if (ubes1.Success)                      {                          attribs.Add("watchword"' ubes1.matchedItem);                          attribs.Add("lmreason"' ubes1.matchedReason);                          uMsg = 95620;                      }                        // Check if upload is watched                      ListMatch uwa = listman.IsWatchedArticle(r.title' r.project);                      if (uwa.Success)                          uMsg = 5610;                        // If normal and uploaded by an admin' bot or whitelisted person always hide                      if ((uMsg == 5600) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                          return;                        // if normal and uploads are softhidden hide normal user and anon aswell                      if ((uMsg == 5600) && (config.feedFilterEventUpload == 2) && ((userOffset == 3) || (userOffset == 4)))                          return;                        // If our message is 95620' we might need to truncate r.comment                      if (uMsg == 95620)                      {                          if (r.comment.Length > 25)                              r.comment = r.comment.Substring(0' 23) + "...";                      }                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("uploaditem"' project.interwikiLink + r.title);                      attribs.Add("cuploaditem"' r.title);                      attribs.Add("reason"' r.comment);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(userOffset + uMsg' ref attribs);                      break;                  case RCEvent.EventType.protect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in protect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5900' ref attribs);                      break;                  case RCEvent.EventType.unprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in unprotect is fine' it's just the pagetitle                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(5901' ref attribs);                      break;                  case RCEvent.EventType.modifyprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in modifyprotect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5902' ref attribs);                      break;              }
Magic Number,CVNBot,Program,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Program.cs,ReactToRCEvent,The following statement contains a magic number: switch (r.eventtype)              {                  // This case handles:                  // - New page creations                  // - Page edits                  case RCEvent.EventType.edit:                      String diffsize;                      if (r.szdiff >= 0)                          diffsize = "+" + r.szdiff.ToString();                      else                          diffsize = r.szdiff.ToString();                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("size"' diffsize);                      attribs.Add("url"' r.url);                      attribs.Add("reason"' r.comment);                        // This block handles: New page creations                      if (r.newpage)                      {                          bool createSpecial = false;                            // New pages created by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.newBig)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5010 + userOffset' ref attribs);                          }                          else if (r.szdiff <= config.newSmall)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5020 + userOffset' ref attribs);                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5000 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Article is on watchlist                          // - Page title matches a BNA pattern                          // - Edit summary matches a BES pattern                            // Is the article on the watchlist?                          ListMatch wlm = listman.IsWatchedArticle(r.title' r.project);                          if (wlm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5030 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16301' (String)attribs["article"]));                              break;                          }                            // Does the page title match a BNA pattern?                          ListMatch eslm = listman.MatchesList(r.title' 12);                          if (eslm.Success)                          {                              // Matches BNA                              attribs.Add("watchword"' eslm.matchedItem);                              message = GetMessage(5040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' eslm.matchedItem));                              break;                          }                            // Does the edit summary match a BES pattern?                          ListMatch lm = listman.MatchesList(r.comment' 20);                          if (lm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' lm.matchedItem);                              message = GetMessage(95040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' lm.matchedItem));                              break;                          }                            // If we're still here that means                          // - the create didn't get ignored by adminlist or whitelist                          // - the create didn't match any watch patterns                          // Now' if any of the following is true' we'll must report it.                          // - Create by blacklisted user                          // - Create by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // Created by an unlisted reguser with non-special create size' ignore                          if ((userOffset == 4) && !createSpecial)                              return;                            // Else: Create had special size' so let it shown (default)' don't return!                      }                      // This block handles: Page edits                      else                      {                          bool editSpecial = false;                            // Edit by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.editBig)                          {                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5110 + userOffset' ref attribs);                              editSpecial = true;                          }                          else if (r.szdiff <= config.editBlank)                          {                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5120 + userOffset' ref attribs);                              editSpecial = true;                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5100 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Edit summary matches a BES pattern                          // - Edit blanked the page                          // - Edit replaced the page                          // - Article is on watchlist                            // Does the edit summary match a BES pattern?                          ListMatch elm = listman.MatchesList(r.comment' 20);                          if (elm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' elm.matchedItem);                              message = GetMessage(95130 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16310' r.comment' (String)attribs["article"]));                              break;                          }                            // Did the user user blank the page?                          if (project.rautosummBlank.IsMatch(r.comment))                          {                              message = GetMessage(96010 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16311' (String)attribs["article"]));                              break;                          }                            Match rplm = project.rautosummReplace.Match(r.comment);                          if (rplm.Success)                          {                              // The user replaced the page.                              try                              {                                  attribs.Add("profanity"' rplm.Groups["item1"].Captures[0].Value);                                  message = GetMessage(96020 + userOffset' ref attribs);                              }                              catch (ArgumentOutOfRangeException)                              {                                  // This wiki probably doesn't have a profanity attribute                                  message = GetMessage(96030 + userOffset' ref attribs);                              }                              break;                          }                            // Is the article on the watchlist?                          ListMatch welm = listman.IsWatchedArticle(r.title' r.project);                          if (welm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5130 + userOffset' ref attribs);                              break;                          }                            // If we're still here that means                          // - the edit didn't get ignored by adminlist or whitelist                          // - the edit didn't match any watch patterns                          // Now' if any of the following is true' we must still report it.                          // - Edit by blacklisted user                          // - Edit by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // If nothing special about the edit' return to ignore                          if (!editSpecial)                              return;                      }                      break;                  case RCEvent.EventType.move:                      // if moves are softhidden hide moves by admin' bot or whitelist                      if ((config.feedFilterEventMove == 2) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                      {                          return;                      }                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("fromname"' project.interwikiLink + r.title);                      attribs.Add("cfromname"' r.title);                      attribs.Add("toname"' project.interwikiLink + r.movedTo);                      attribs.Add("ctoname"' r.movedTo);                      attribs.Add("url"' r.blockLength); //The blockLength field stores the moveFrom URL                      attribs.Add("reason"' r.comment);                      message = GetMessage(5500 + userOffset' ref attribs);                      break;                  case RCEvent.EventType.block:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.title.Split(new char[] { ':' }' 2)[1]));                      attribs.Add("length"' r.blockLength);                      attribs.Add("reason"' r.comment);                      message = GetMessage(5400' ref attribs);                      //If the blocked user (r.title) isn't botlisted' add to blacklist                      if (listman.ClassifyEditor(r.title.Split(new char[] { ':' }' 2)[1]' r.project) != ListManager.UserType.bot)                      {                          //If this isn't an indefinite/infinite block' add to blacklist                          if ((r.blockLength.ToLower() != "indefinite") && (r.blockLength.ToLower() != "infinite"))                          {                                                               // 2'678'400 seconds = 744 hours = 31 days                              int listLen = Convert.ToInt32(CVNBotUtils.ParseDateTimeLength(r.blockLength' 2678400) * 2.5);                              string blComment = "Autoblacklist: " + r.comment + " on " + r.project;                              message += "\n" + listman.AddUserToList(r.title.Split(new char[] { ':' }' 2)[1]' "" //Global bl                                  ' ListManager.UserType.blacklisted' r.user' blComment' listLen);                              Broadcast("BL"' "ADD"' r.title.Split(new char[] { ':' }' 2)[1]' listLen' blComment' r.user);                          }                      }                      break;                  case RCEvent.EventType.unblock:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("reason"' r.comment);                      message = GetMessage(5700' ref attribs);                      break;                  case RCEvent.EventType.delete:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      attribs.Add("reason"' r.comment);                      message = GetMessage(05300' ref attribs);                      break;                  case RCEvent.EventType.newuser:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("caurl"' "https://meta.wikimedia.org/wiki/Special:CentralAuth/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch = listman.MatchesList(r.user' 11);                      if (bnuMatch.Success && feedFilterThisEvent == 1)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch.matchedItem);                          attribs.Add("wwreason"' bnuMatch.matchedReason);                          message = GetMessage(5201' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5200' ref attribs);                      }                      break;                  case RCEvent.EventType.newuser2:                      attribs.Add("creator"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ccreator"' r.user);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.title);                      attribs.Add("ceditor"' r.title);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch2 = listman.MatchesList(r.user' 11);                      if (bnuMatch2.Success)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch2.matchedItem);                          attribs.Add("wwreason"' bnuMatch2.matchedReason);                          message = GetMessage(5211' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch2.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5210' ref attribs);                      }                      break;                  case RCEvent.EventType.upload:                      int uMsg = 5600;                        // Check if the edit summary matches BES                      ListMatch ubes2 = listman.MatchesList(r.comment' 20);                      if (ubes2.Success)                      {                          attribs.Add("watchword"' ubes2.matchedItem);                          attribs.Add("lmreason"' ubes2.matchedReason);                          uMsg = 95620;                      }                        // Now check if the title matches BES                      ListMatch ubes1 = listman.MatchesList(r.title' 20);                      if (ubes1.Success)                      {                          attribs.Add("watchword"' ubes1.matchedItem);                          attribs.Add("lmreason"' ubes1.matchedReason);                          uMsg = 95620;                      }                        // Check if upload is watched                      ListMatch uwa = listman.IsWatchedArticle(r.title' r.project);                      if (uwa.Success)                          uMsg = 5610;                        // If normal and uploaded by an admin' bot or whitelisted person always hide                      if ((uMsg == 5600) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                          return;                        // if normal and uploads are softhidden hide normal user and anon aswell                      if ((uMsg == 5600) && (config.feedFilterEventUpload == 2) && ((userOffset == 3) || (userOffset == 4)))                          return;                        // If our message is 95620' we might need to truncate r.comment                      if (uMsg == 95620)                      {                          if (r.comment.Length > 25)                              r.comment = r.comment.Substring(0' 23) + "...";                      }                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("uploaditem"' project.interwikiLink + r.title);                      attribs.Add("cuploaditem"' r.title);                      attribs.Add("reason"' r.comment);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(userOffset + uMsg' ref attribs);                      break;                  case RCEvent.EventType.protect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in protect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5900' ref attribs);                      break;                  case RCEvent.EventType.unprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in unprotect is fine' it's just the pagetitle                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(5901' ref attribs);                      break;                  case RCEvent.EventType.modifyprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in modifyprotect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5902' ref attribs);                      break;              }
Magic Number,CVNBot,Program,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Program.cs,ReactToRCEvent,The following statement contains a magic number: switch (r.eventtype)              {                  // This case handles:                  // - New page creations                  // - Page edits                  case RCEvent.EventType.edit:                      String diffsize;                      if (r.szdiff >= 0)                          diffsize = "+" + r.szdiff.ToString();                      else                          diffsize = r.szdiff.ToString();                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("size"' diffsize);                      attribs.Add("url"' r.url);                      attribs.Add("reason"' r.comment);                        // This block handles: New page creations                      if (r.newpage)                      {                          bool createSpecial = false;                            // New pages created by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.newBig)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5010 + userOffset' ref attribs);                          }                          else if (r.szdiff <= config.newSmall)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5020 + userOffset' ref attribs);                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5000 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Article is on watchlist                          // - Page title matches a BNA pattern                          // - Edit summary matches a BES pattern                            // Is the article on the watchlist?                          ListMatch wlm = listman.IsWatchedArticle(r.title' r.project);                          if (wlm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5030 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16301' (String)attribs["article"]));                              break;                          }                            // Does the page title match a BNA pattern?                          ListMatch eslm = listman.MatchesList(r.title' 12);                          if (eslm.Success)                          {                              // Matches BNA                              attribs.Add("watchword"' eslm.matchedItem);                              message = GetMessage(5040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' eslm.matchedItem));                              break;                          }                            // Does the edit summary match a BES pattern?                          ListMatch lm = listman.MatchesList(r.comment' 20);                          if (lm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' lm.matchedItem);                              message = GetMessage(95040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' lm.matchedItem));                              break;                          }                            // If we're still here that means                          // - the create didn't get ignored by adminlist or whitelist                          // - the create didn't match any watch patterns                          // Now' if any of the following is true' we'll must report it.                          // - Create by blacklisted user                          // - Create by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // Created by an unlisted reguser with non-special create size' ignore                          if ((userOffset == 4) && !createSpecial)                              return;                            // Else: Create had special size' so let it shown (default)' don't return!                      }                      // This block handles: Page edits                      else                      {                          bool editSpecial = false;                            // Edit by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.editBig)                          {                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5110 + userOffset' ref attribs);                              editSpecial = true;                          }                          else if (r.szdiff <= config.editBlank)                          {                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5120 + userOffset' ref attribs);                              editSpecial = true;                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5100 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Edit summary matches a BES pattern                          // - Edit blanked the page                          // - Edit replaced the page                          // - Article is on watchlist                            // Does the edit summary match a BES pattern?                          ListMatch elm = listman.MatchesList(r.comment' 20);                          if (elm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' elm.matchedItem);                              message = GetMessage(95130 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16310' r.comment' (String)attribs["article"]));                              break;                          }                            // Did the user user blank the page?                          if (project.rautosummBlank.IsMatch(r.comment))                          {                              message = GetMessage(96010 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16311' (String)attribs["article"]));                              break;                          }                            Match rplm = project.rautosummReplace.Match(r.comment);                          if (rplm.Success)                          {                              // The user replaced the page.                              try                              {                                  attribs.Add("profanity"' rplm.Groups["item1"].Captures[0].Value);                                  message = GetMessage(96020 + userOffset' ref attribs);                              }                              catch (ArgumentOutOfRangeException)                              {                                  // This wiki probably doesn't have a profanity attribute                                  message = GetMessage(96030 + userOffset' ref attribs);                              }                              break;                          }                            // Is the article on the watchlist?                          ListMatch welm = listman.IsWatchedArticle(r.title' r.project);                          if (welm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5130 + userOffset' ref attribs);                              break;                          }                            // If we're still here that means                          // - the edit didn't get ignored by adminlist or whitelist                          // - the edit didn't match any watch patterns                          // Now' if any of the following is true' we must still report it.                          // - Edit by blacklisted user                          // - Edit by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // If nothing special about the edit' return to ignore                          if (!editSpecial)                              return;                      }                      break;                  case RCEvent.EventType.move:                      // if moves are softhidden hide moves by admin' bot or whitelist                      if ((config.feedFilterEventMove == 2) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                      {                          return;                      }                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("fromname"' project.interwikiLink + r.title);                      attribs.Add("cfromname"' r.title);                      attribs.Add("toname"' project.interwikiLink + r.movedTo);                      attribs.Add("ctoname"' r.movedTo);                      attribs.Add("url"' r.blockLength); //The blockLength field stores the moveFrom URL                      attribs.Add("reason"' r.comment);                      message = GetMessage(5500 + userOffset' ref attribs);                      break;                  case RCEvent.EventType.block:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.title.Split(new char[] { ':' }' 2)[1]));                      attribs.Add("length"' r.blockLength);                      attribs.Add("reason"' r.comment);                      message = GetMessage(5400' ref attribs);                      //If the blocked user (r.title) isn't botlisted' add to blacklist                      if (listman.ClassifyEditor(r.title.Split(new char[] { ':' }' 2)[1]' r.project) != ListManager.UserType.bot)                      {                          //If this isn't an indefinite/infinite block' add to blacklist                          if ((r.blockLength.ToLower() != "indefinite") && (r.blockLength.ToLower() != "infinite"))                          {                                                               // 2'678'400 seconds = 744 hours = 31 days                              int listLen = Convert.ToInt32(CVNBotUtils.ParseDateTimeLength(r.blockLength' 2678400) * 2.5);                              string blComment = "Autoblacklist: " + r.comment + " on " + r.project;                              message += "\n" + listman.AddUserToList(r.title.Split(new char[] { ':' }' 2)[1]' "" //Global bl                                  ' ListManager.UserType.blacklisted' r.user' blComment' listLen);                              Broadcast("BL"' "ADD"' r.title.Split(new char[] { ':' }' 2)[1]' listLen' blComment' r.user);                          }                      }                      break;                  case RCEvent.EventType.unblock:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("reason"' r.comment);                      message = GetMessage(5700' ref attribs);                      break;                  case RCEvent.EventType.delete:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      attribs.Add("reason"' r.comment);                      message = GetMessage(05300' ref attribs);                      break;                  case RCEvent.EventType.newuser:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("caurl"' "https://meta.wikimedia.org/wiki/Special:CentralAuth/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch = listman.MatchesList(r.user' 11);                      if (bnuMatch.Success && feedFilterThisEvent == 1)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch.matchedItem);                          attribs.Add("wwreason"' bnuMatch.matchedReason);                          message = GetMessage(5201' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5200' ref attribs);                      }                      break;                  case RCEvent.EventType.newuser2:                      attribs.Add("creator"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ccreator"' r.user);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.title);                      attribs.Add("ceditor"' r.title);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch2 = listman.MatchesList(r.user' 11);                      if (bnuMatch2.Success)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch2.matchedItem);                          attribs.Add("wwreason"' bnuMatch2.matchedReason);                          message = GetMessage(5211' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch2.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5210' ref attribs);                      }                      break;                  case RCEvent.EventType.upload:                      int uMsg = 5600;                        // Check if the edit summary matches BES                      ListMatch ubes2 = listman.MatchesList(r.comment' 20);                      if (ubes2.Success)                      {                          attribs.Add("watchword"' ubes2.matchedItem);                          attribs.Add("lmreason"' ubes2.matchedReason);                          uMsg = 95620;                      }                        // Now check if the title matches BES                      ListMatch ubes1 = listman.MatchesList(r.title' 20);                      if (ubes1.Success)                      {                          attribs.Add("watchword"' ubes1.matchedItem);                          attribs.Add("lmreason"' ubes1.matchedReason);                          uMsg = 95620;                      }                        // Check if upload is watched                      ListMatch uwa = listman.IsWatchedArticle(r.title' r.project);                      if (uwa.Success)                          uMsg = 5610;                        // If normal and uploaded by an admin' bot or whitelisted person always hide                      if ((uMsg == 5600) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                          return;                        // if normal and uploads are softhidden hide normal user and anon aswell                      if ((uMsg == 5600) && (config.feedFilterEventUpload == 2) && ((userOffset == 3) || (userOffset == 4)))                          return;                        // If our message is 95620' we might need to truncate r.comment                      if (uMsg == 95620)                      {                          if (r.comment.Length > 25)                              r.comment = r.comment.Substring(0' 23) + "...";                      }                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("uploaditem"' project.interwikiLink + r.title);                      attribs.Add("cuploaditem"' r.title);                      attribs.Add("reason"' r.comment);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(userOffset + uMsg' ref attribs);                      break;                  case RCEvent.EventType.protect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in protect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5900' ref attribs);                      break;                  case RCEvent.EventType.unprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in unprotect is fine' it's just the pagetitle                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(5901' ref attribs);                      break;                  case RCEvent.EventType.modifyprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in modifyprotect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5902' ref attribs);                      break;              }
Magic Number,CVNBot,Program,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Program.cs,ReactToRCEvent,The following statement contains a magic number: switch (r.eventtype)              {                  // This case handles:                  // - New page creations                  // - Page edits                  case RCEvent.EventType.edit:                      String diffsize;                      if (r.szdiff >= 0)                          diffsize = "+" + r.szdiff.ToString();                      else                          diffsize = r.szdiff.ToString();                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("size"' diffsize);                      attribs.Add("url"' r.url);                      attribs.Add("reason"' r.comment);                        // This block handles: New page creations                      if (r.newpage)                      {                          bool createSpecial = false;                            // New pages created by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.newBig)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5010 + userOffset' ref attribs);                          }                          else if (r.szdiff <= config.newSmall)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5020 + userOffset' ref attribs);                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5000 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Article is on watchlist                          // - Page title matches a BNA pattern                          // - Edit summary matches a BES pattern                            // Is the article on the watchlist?                          ListMatch wlm = listman.IsWatchedArticle(r.title' r.project);                          if (wlm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5030 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16301' (String)attribs["article"]));                              break;                          }                            // Does the page title match a BNA pattern?                          ListMatch eslm = listman.MatchesList(r.title' 12);                          if (eslm.Success)                          {                              // Matches BNA                              attribs.Add("watchword"' eslm.matchedItem);                              message = GetMessage(5040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' eslm.matchedItem));                              break;                          }                            // Does the edit summary match a BES pattern?                          ListMatch lm = listman.MatchesList(r.comment' 20);                          if (lm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' lm.matchedItem);                              message = GetMessage(95040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' lm.matchedItem));                              break;                          }                            // If we're still here that means                          // - the create didn't get ignored by adminlist or whitelist                          // - the create didn't match any watch patterns                          // Now' if any of the following is true' we'll must report it.                          // - Create by blacklisted user                          // - Create by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // Created by an unlisted reguser with non-special create size' ignore                          if ((userOffset == 4) && !createSpecial)                              return;                            // Else: Create had special size' so let it shown (default)' don't return!                      }                      // This block handles: Page edits                      else                      {                          bool editSpecial = false;                            // Edit by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.editBig)                          {                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5110 + userOffset' ref attribs);                              editSpecial = true;                          }                          else if (r.szdiff <= config.editBlank)                          {                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5120 + userOffset' ref attribs);                              editSpecial = true;                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5100 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Edit summary matches a BES pattern                          // - Edit blanked the page                          // - Edit replaced the page                          // - Article is on watchlist                            // Does the edit summary match a BES pattern?                          ListMatch elm = listman.MatchesList(r.comment' 20);                          if (elm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' elm.matchedItem);                              message = GetMessage(95130 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16310' r.comment' (String)attribs["article"]));                              break;                          }                            // Did the user user blank the page?                          if (project.rautosummBlank.IsMatch(r.comment))                          {                              message = GetMessage(96010 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16311' (String)attribs["article"]));                              break;                          }                            Match rplm = project.rautosummReplace.Match(r.comment);                          if (rplm.Success)                          {                              // The user replaced the page.                              try                              {                                  attribs.Add("profanity"' rplm.Groups["item1"].Captures[0].Value);                                  message = GetMessage(96020 + userOffset' ref attribs);                              }                              catch (ArgumentOutOfRangeException)                              {                                  // This wiki probably doesn't have a profanity attribute                                  message = GetMessage(96030 + userOffset' ref attribs);                              }                              break;                          }                            // Is the article on the watchlist?                          ListMatch welm = listman.IsWatchedArticle(r.title' r.project);                          if (welm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5130 + userOffset' ref attribs);                              break;                          }                            // If we're still here that means                          // - the edit didn't get ignored by adminlist or whitelist                          // - the edit didn't match any watch patterns                          // Now' if any of the following is true' we must still report it.                          // - Edit by blacklisted user                          // - Edit by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // If nothing special about the edit' return to ignore                          if (!editSpecial)                              return;                      }                      break;                  case RCEvent.EventType.move:                      // if moves are softhidden hide moves by admin' bot or whitelist                      if ((config.feedFilterEventMove == 2) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                      {                          return;                      }                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("fromname"' project.interwikiLink + r.title);                      attribs.Add("cfromname"' r.title);                      attribs.Add("toname"' project.interwikiLink + r.movedTo);                      attribs.Add("ctoname"' r.movedTo);                      attribs.Add("url"' r.blockLength); //The blockLength field stores the moveFrom URL                      attribs.Add("reason"' r.comment);                      message = GetMessage(5500 + userOffset' ref attribs);                      break;                  case RCEvent.EventType.block:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.title.Split(new char[] { ':' }' 2)[1]));                      attribs.Add("length"' r.blockLength);                      attribs.Add("reason"' r.comment);                      message = GetMessage(5400' ref attribs);                      //If the blocked user (r.title) isn't botlisted' add to blacklist                      if (listman.ClassifyEditor(r.title.Split(new char[] { ':' }' 2)[1]' r.project) != ListManager.UserType.bot)                      {                          //If this isn't an indefinite/infinite block' add to blacklist                          if ((r.blockLength.ToLower() != "indefinite") && (r.blockLength.ToLower() != "infinite"))                          {                                                               // 2'678'400 seconds = 744 hours = 31 days                              int listLen = Convert.ToInt32(CVNBotUtils.ParseDateTimeLength(r.blockLength' 2678400) * 2.5);                              string blComment = "Autoblacklist: " + r.comment + " on " + r.project;                              message += "\n" + listman.AddUserToList(r.title.Split(new char[] { ':' }' 2)[1]' "" //Global bl                                  ' ListManager.UserType.blacklisted' r.user' blComment' listLen);                              Broadcast("BL"' "ADD"' r.title.Split(new char[] { ':' }' 2)[1]' listLen' blComment' r.user);                          }                      }                      break;                  case RCEvent.EventType.unblock:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("reason"' r.comment);                      message = GetMessage(5700' ref attribs);                      break;                  case RCEvent.EventType.delete:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      attribs.Add("reason"' r.comment);                      message = GetMessage(05300' ref attribs);                      break;                  case RCEvent.EventType.newuser:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("caurl"' "https://meta.wikimedia.org/wiki/Special:CentralAuth/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch = listman.MatchesList(r.user' 11);                      if (bnuMatch.Success && feedFilterThisEvent == 1)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch.matchedItem);                          attribs.Add("wwreason"' bnuMatch.matchedReason);                          message = GetMessage(5201' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5200' ref attribs);                      }                      break;                  case RCEvent.EventType.newuser2:                      attribs.Add("creator"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ccreator"' r.user);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.title);                      attribs.Add("ceditor"' r.title);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch2 = listman.MatchesList(r.user' 11);                      if (bnuMatch2.Success)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch2.matchedItem);                          attribs.Add("wwreason"' bnuMatch2.matchedReason);                          message = GetMessage(5211' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch2.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5210' ref attribs);                      }                      break;                  case RCEvent.EventType.upload:                      int uMsg = 5600;                        // Check if the edit summary matches BES                      ListMatch ubes2 = listman.MatchesList(r.comment' 20);                      if (ubes2.Success)                      {                          attribs.Add("watchword"' ubes2.matchedItem);                          attribs.Add("lmreason"' ubes2.matchedReason);                          uMsg = 95620;                      }                        // Now check if the title matches BES                      ListMatch ubes1 = listman.MatchesList(r.title' 20);                      if (ubes1.Success)                      {                          attribs.Add("watchword"' ubes1.matchedItem);                          attribs.Add("lmreason"' ubes1.matchedReason);                          uMsg = 95620;                      }                        // Check if upload is watched                      ListMatch uwa = listman.IsWatchedArticle(r.title' r.project);                      if (uwa.Success)                          uMsg = 5610;                        // If normal and uploaded by an admin' bot or whitelisted person always hide                      if ((uMsg == 5600) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                          return;                        // if normal and uploads are softhidden hide normal user and anon aswell                      if ((uMsg == 5600) && (config.feedFilterEventUpload == 2) && ((userOffset == 3) || (userOffset == 4)))                          return;                        // If our message is 95620' we might need to truncate r.comment                      if (uMsg == 95620)                      {                          if (r.comment.Length > 25)                              r.comment = r.comment.Substring(0' 23) + "...";                      }                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("uploaditem"' project.interwikiLink + r.title);                      attribs.Add("cuploaditem"' r.title);                      attribs.Add("reason"' r.comment);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(userOffset + uMsg' ref attribs);                      break;                  case RCEvent.EventType.protect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in protect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5900' ref attribs);                      break;                  case RCEvent.EventType.unprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in unprotect is fine' it's just the pagetitle                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(5901' ref attribs);                      break;                  case RCEvent.EventType.modifyprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in modifyprotect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5902' ref attribs);                      break;              }
Magic Number,CVNBot,Program,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Program.cs,ReactToRCEvent,The following statement contains a magic number: switch (r.eventtype)              {                  // This case handles:                  // - New page creations                  // - Page edits                  case RCEvent.EventType.edit:                      String diffsize;                      if (r.szdiff >= 0)                          diffsize = "+" + r.szdiff.ToString();                      else                          diffsize = r.szdiff.ToString();                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("size"' diffsize);                      attribs.Add("url"' r.url);                      attribs.Add("reason"' r.comment);                        // This block handles: New page creations                      if (r.newpage)                      {                          bool createSpecial = false;                            // New pages created by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.newBig)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5010 + userOffset' ref attribs);                          }                          else if (r.szdiff <= config.newSmall)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5020 + userOffset' ref attribs);                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5000 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Article is on watchlist                          // - Page title matches a BNA pattern                          // - Edit summary matches a BES pattern                            // Is the article on the watchlist?                          ListMatch wlm = listman.IsWatchedArticle(r.title' r.project);                          if (wlm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5030 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16301' (String)attribs["article"]));                              break;                          }                            // Does the page title match a BNA pattern?                          ListMatch eslm = listman.MatchesList(r.title' 12);                          if (eslm.Success)                          {                              // Matches BNA                              attribs.Add("watchword"' eslm.matchedItem);                              message = GetMessage(5040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' eslm.matchedItem));                              break;                          }                            // Does the edit summary match a BES pattern?                          ListMatch lm = listman.MatchesList(r.comment' 20);                          if (lm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' lm.matchedItem);                              message = GetMessage(95040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' lm.matchedItem));                              break;                          }                            // If we're still here that means                          // - the create didn't get ignored by adminlist or whitelist                          // - the create didn't match any watch patterns                          // Now' if any of the following is true' we'll must report it.                          // - Create by blacklisted user                          // - Create by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // Created by an unlisted reguser with non-special create size' ignore                          if ((userOffset == 4) && !createSpecial)                              return;                            // Else: Create had special size' so let it shown (default)' don't return!                      }                      // This block handles: Page edits                      else                      {                          bool editSpecial = false;                            // Edit by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.editBig)                          {                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5110 + userOffset' ref attribs);                              editSpecial = true;                          }                          else if (r.szdiff <= config.editBlank)                          {                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5120 + userOffset' ref attribs);                              editSpecial = true;                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5100 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Edit summary matches a BES pattern                          // - Edit blanked the page                          // - Edit replaced the page                          // - Article is on watchlist                            // Does the edit summary match a BES pattern?                          ListMatch elm = listman.MatchesList(r.comment' 20);                          if (elm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' elm.matchedItem);                              message = GetMessage(95130 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16310' r.comment' (String)attribs["article"]));                              break;                          }                            // Did the user user blank the page?                          if (project.rautosummBlank.IsMatch(r.comment))                          {                              message = GetMessage(96010 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16311' (String)attribs["article"]));                              break;                          }                            Match rplm = project.rautosummReplace.Match(r.comment);                          if (rplm.Success)                          {                              // The user replaced the page.                              try                              {                                  attribs.Add("profanity"' rplm.Groups["item1"].Captures[0].Value);                                  message = GetMessage(96020 + userOffset' ref attribs);                              }                              catch (ArgumentOutOfRangeException)                              {                                  // This wiki probably doesn't have a profanity attribute                                  message = GetMessage(96030 + userOffset' ref attribs);                              }                              break;                          }                            // Is the article on the watchlist?                          ListMatch welm = listman.IsWatchedArticle(r.title' r.project);                          if (welm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5130 + userOffset' ref attribs);                              break;                          }                            // If we're still here that means                          // - the edit didn't get ignored by adminlist or whitelist                          // - the edit didn't match any watch patterns                          // Now' if any of the following is true' we must still report it.                          // - Edit by blacklisted user                          // - Edit by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // If nothing special about the edit' return to ignore                          if (!editSpecial)                              return;                      }                      break;                  case RCEvent.EventType.move:                      // if moves are softhidden hide moves by admin' bot or whitelist                      if ((config.feedFilterEventMove == 2) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                      {                          return;                      }                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("fromname"' project.interwikiLink + r.title);                      attribs.Add("cfromname"' r.title);                      attribs.Add("toname"' project.interwikiLink + r.movedTo);                      attribs.Add("ctoname"' r.movedTo);                      attribs.Add("url"' r.blockLength); //The blockLength field stores the moveFrom URL                      attribs.Add("reason"' r.comment);                      message = GetMessage(5500 + userOffset' ref attribs);                      break;                  case RCEvent.EventType.block:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.title.Split(new char[] { ':' }' 2)[1]));                      attribs.Add("length"' r.blockLength);                      attribs.Add("reason"' r.comment);                      message = GetMessage(5400' ref attribs);                      //If the blocked user (r.title) isn't botlisted' add to blacklist                      if (listman.ClassifyEditor(r.title.Split(new char[] { ':' }' 2)[1]' r.project) != ListManager.UserType.bot)                      {                          //If this isn't an indefinite/infinite block' add to blacklist                          if ((r.blockLength.ToLower() != "indefinite") && (r.blockLength.ToLower() != "infinite"))                          {                                                               // 2'678'400 seconds = 744 hours = 31 days                              int listLen = Convert.ToInt32(CVNBotUtils.ParseDateTimeLength(r.blockLength' 2678400) * 2.5);                              string blComment = "Autoblacklist: " + r.comment + " on " + r.project;                              message += "\n" + listman.AddUserToList(r.title.Split(new char[] { ':' }' 2)[1]' "" //Global bl                                  ' ListManager.UserType.blacklisted' r.user' blComment' listLen);                              Broadcast("BL"' "ADD"' r.title.Split(new char[] { ':' }' 2)[1]' listLen' blComment' r.user);                          }                      }                      break;                  case RCEvent.EventType.unblock:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("reason"' r.comment);                      message = GetMessage(5700' ref attribs);                      break;                  case RCEvent.EventType.delete:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      attribs.Add("reason"' r.comment);                      message = GetMessage(05300' ref attribs);                      break;                  case RCEvent.EventType.newuser:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("caurl"' "https://meta.wikimedia.org/wiki/Special:CentralAuth/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch = listman.MatchesList(r.user' 11);                      if (bnuMatch.Success && feedFilterThisEvent == 1)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch.matchedItem);                          attribs.Add("wwreason"' bnuMatch.matchedReason);                          message = GetMessage(5201' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5200' ref attribs);                      }                      break;                  case RCEvent.EventType.newuser2:                      attribs.Add("creator"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ccreator"' r.user);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.title);                      attribs.Add("ceditor"' r.title);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch2 = listman.MatchesList(r.user' 11);                      if (bnuMatch2.Success)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch2.matchedItem);                          attribs.Add("wwreason"' bnuMatch2.matchedReason);                          message = GetMessage(5211' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch2.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5210' ref attribs);                      }                      break;                  case RCEvent.EventType.upload:                      int uMsg = 5600;                        // Check if the edit summary matches BES                      ListMatch ubes2 = listman.MatchesList(r.comment' 20);                      if (ubes2.Success)                      {                          attribs.Add("watchword"' ubes2.matchedItem);                          attribs.Add("lmreason"' ubes2.matchedReason);                          uMsg = 95620;                      }                        // Now check if the title matches BES                      ListMatch ubes1 = listman.MatchesList(r.title' 20);                      if (ubes1.Success)                      {                          attribs.Add("watchword"' ubes1.matchedItem);                          attribs.Add("lmreason"' ubes1.matchedReason);                          uMsg = 95620;                      }                        // Check if upload is watched                      ListMatch uwa = listman.IsWatchedArticle(r.title' r.project);                      if (uwa.Success)                          uMsg = 5610;                        // If normal and uploaded by an admin' bot or whitelisted person always hide                      if ((uMsg == 5600) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                          return;                        // if normal and uploads are softhidden hide normal user and anon aswell                      if ((uMsg == 5600) && (config.feedFilterEventUpload == 2) && ((userOffset == 3) || (userOffset == 4)))                          return;                        // If our message is 95620' we might need to truncate r.comment                      if (uMsg == 95620)                      {                          if (r.comment.Length > 25)                              r.comment = r.comment.Substring(0' 23) + "...";                      }                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("uploaditem"' project.interwikiLink + r.title);                      attribs.Add("cuploaditem"' r.title);                      attribs.Add("reason"' r.comment);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(userOffset + uMsg' ref attribs);                      break;                  case RCEvent.EventType.protect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in protect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5900' ref attribs);                      break;                  case RCEvent.EventType.unprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in unprotect is fine' it's just the pagetitle                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(5901' ref attribs);                      break;                  case RCEvent.EventType.modifyprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in modifyprotect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5902' ref attribs);                      break;              }
Magic Number,CVNBot,Program,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Program.cs,ReactToRCEvent,The following statement contains a magic number: switch (r.eventtype)              {                  // This case handles:                  // - New page creations                  // - Page edits                  case RCEvent.EventType.edit:                      String diffsize;                      if (r.szdiff >= 0)                          diffsize = "+" + r.szdiff.ToString();                      else                          diffsize = r.szdiff.ToString();                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("size"' diffsize);                      attribs.Add("url"' r.url);                      attribs.Add("reason"' r.comment);                        // This block handles: New page creations                      if (r.newpage)                      {                          bool createSpecial = false;                            // New pages created by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.newBig)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5010 + userOffset' ref attribs);                          }                          else if (r.szdiff <= config.newSmall)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5020 + userOffset' ref attribs);                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5000 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Article is on watchlist                          // - Page title matches a BNA pattern                          // - Edit summary matches a BES pattern                            // Is the article on the watchlist?                          ListMatch wlm = listman.IsWatchedArticle(r.title' r.project);                          if (wlm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5030 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16301' (String)attribs["article"]));                              break;                          }                            // Does the page title match a BNA pattern?                          ListMatch eslm = listman.MatchesList(r.title' 12);                          if (eslm.Success)                          {                              // Matches BNA                              attribs.Add("watchword"' eslm.matchedItem);                              message = GetMessage(5040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' eslm.matchedItem));                              break;                          }                            // Does the edit summary match a BES pattern?                          ListMatch lm = listman.MatchesList(r.comment' 20);                          if (lm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' lm.matchedItem);                              message = GetMessage(95040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' lm.matchedItem));                              break;                          }                            // If we're still here that means                          // - the create didn't get ignored by adminlist or whitelist                          // - the create didn't match any watch patterns                          // Now' if any of the following is true' we'll must report it.                          // - Create by blacklisted user                          // - Create by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // Created by an unlisted reguser with non-special create size' ignore                          if ((userOffset == 4) && !createSpecial)                              return;                            // Else: Create had special size' so let it shown (default)' don't return!                      }                      // This block handles: Page edits                      else                      {                          bool editSpecial = false;                            // Edit by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.editBig)                          {                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5110 + userOffset' ref attribs);                              editSpecial = true;                          }                          else if (r.szdiff <= config.editBlank)                          {                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5120 + userOffset' ref attribs);                              editSpecial = true;                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5100 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Edit summary matches a BES pattern                          // - Edit blanked the page                          // - Edit replaced the page                          // - Article is on watchlist                            // Does the edit summary match a BES pattern?                          ListMatch elm = listman.MatchesList(r.comment' 20);                          if (elm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' elm.matchedItem);                              message = GetMessage(95130 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16310' r.comment' (String)attribs["article"]));                              break;                          }                            // Did the user user blank the page?                          if (project.rautosummBlank.IsMatch(r.comment))                          {                              message = GetMessage(96010 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16311' (String)attribs["article"]));                              break;                          }                            Match rplm = project.rautosummReplace.Match(r.comment);                          if (rplm.Success)                          {                              // The user replaced the page.                              try                              {                                  attribs.Add("profanity"' rplm.Groups["item1"].Captures[0].Value);                                  message = GetMessage(96020 + userOffset' ref attribs);                              }                              catch (ArgumentOutOfRangeException)                              {                                  // This wiki probably doesn't have a profanity attribute                                  message = GetMessage(96030 + userOffset' ref attribs);                              }                              break;                          }                            // Is the article on the watchlist?                          ListMatch welm = listman.IsWatchedArticle(r.title' r.project);                          if (welm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5130 + userOffset' ref attribs);                              break;                          }                            // If we're still here that means                          // - the edit didn't get ignored by adminlist or whitelist                          // - the edit didn't match any watch patterns                          // Now' if any of the following is true' we must still report it.                          // - Edit by blacklisted user                          // - Edit by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // If nothing special about the edit' return to ignore                          if (!editSpecial)                              return;                      }                      break;                  case RCEvent.EventType.move:                      // if moves are softhidden hide moves by admin' bot or whitelist                      if ((config.feedFilterEventMove == 2) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                      {                          return;                      }                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("fromname"' project.interwikiLink + r.title);                      attribs.Add("cfromname"' r.title);                      attribs.Add("toname"' project.interwikiLink + r.movedTo);                      attribs.Add("ctoname"' r.movedTo);                      attribs.Add("url"' r.blockLength); //The blockLength field stores the moveFrom URL                      attribs.Add("reason"' r.comment);                      message = GetMessage(5500 + userOffset' ref attribs);                      break;                  case RCEvent.EventType.block:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.title.Split(new char[] { ':' }' 2)[1]));                      attribs.Add("length"' r.blockLength);                      attribs.Add("reason"' r.comment);                      message = GetMessage(5400' ref attribs);                      //If the blocked user (r.title) isn't botlisted' add to blacklist                      if (listman.ClassifyEditor(r.title.Split(new char[] { ':' }' 2)[1]' r.project) != ListManager.UserType.bot)                      {                          //If this isn't an indefinite/infinite block' add to blacklist                          if ((r.blockLength.ToLower() != "indefinite") && (r.blockLength.ToLower() != "infinite"))                          {                                                               // 2'678'400 seconds = 744 hours = 31 days                              int listLen = Convert.ToInt32(CVNBotUtils.ParseDateTimeLength(r.blockLength' 2678400) * 2.5);                              string blComment = "Autoblacklist: " + r.comment + " on " + r.project;                              message += "\n" + listman.AddUserToList(r.title.Split(new char[] { ':' }' 2)[1]' "" //Global bl                                  ' ListManager.UserType.blacklisted' r.user' blComment' listLen);                              Broadcast("BL"' "ADD"' r.title.Split(new char[] { ':' }' 2)[1]' listLen' blComment' r.user);                          }                      }                      break;                  case RCEvent.EventType.unblock:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("reason"' r.comment);                      message = GetMessage(5700' ref attribs);                      break;                  case RCEvent.EventType.delete:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      attribs.Add("reason"' r.comment);                      message = GetMessage(05300' ref attribs);                      break;                  case RCEvent.EventType.newuser:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("caurl"' "https://meta.wikimedia.org/wiki/Special:CentralAuth/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch = listman.MatchesList(r.user' 11);                      if (bnuMatch.Success && feedFilterThisEvent == 1)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch.matchedItem);                          attribs.Add("wwreason"' bnuMatch.matchedReason);                          message = GetMessage(5201' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5200' ref attribs);                      }                      break;                  case RCEvent.EventType.newuser2:                      attribs.Add("creator"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ccreator"' r.user);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.title);                      attribs.Add("ceditor"' r.title);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch2 = listman.MatchesList(r.user' 11);                      if (bnuMatch2.Success)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch2.matchedItem);                          attribs.Add("wwreason"' bnuMatch2.matchedReason);                          message = GetMessage(5211' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch2.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5210' ref attribs);                      }                      break;                  case RCEvent.EventType.upload:                      int uMsg = 5600;                        // Check if the edit summary matches BES                      ListMatch ubes2 = listman.MatchesList(r.comment' 20);                      if (ubes2.Success)                      {                          attribs.Add("watchword"' ubes2.matchedItem);                          attribs.Add("lmreason"' ubes2.matchedReason);                          uMsg = 95620;                      }                        // Now check if the title matches BES                      ListMatch ubes1 = listman.MatchesList(r.title' 20);                      if (ubes1.Success)                      {                          attribs.Add("watchword"' ubes1.matchedItem);                          attribs.Add("lmreason"' ubes1.matchedReason);                          uMsg = 95620;                      }                        // Check if upload is watched                      ListMatch uwa = listman.IsWatchedArticle(r.title' r.project);                      if (uwa.Success)                          uMsg = 5610;                        // If normal and uploaded by an admin' bot or whitelisted person always hide                      if ((uMsg == 5600) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                          return;                        // if normal and uploads are softhidden hide normal user and anon aswell                      if ((uMsg == 5600) && (config.feedFilterEventUpload == 2) && ((userOffset == 3) || (userOffset == 4)))                          return;                        // If our message is 95620' we might need to truncate r.comment                      if (uMsg == 95620)                      {                          if (r.comment.Length > 25)                              r.comment = r.comment.Substring(0' 23) + "...";                      }                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("uploaditem"' project.interwikiLink + r.title);                      attribs.Add("cuploaditem"' r.title);                      attribs.Add("reason"' r.comment);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(userOffset + uMsg' ref attribs);                      break;                  case RCEvent.EventType.protect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in protect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5900' ref attribs);                      break;                  case RCEvent.EventType.unprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in unprotect is fine' it's just the pagetitle                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(5901' ref attribs);                      break;                  case RCEvent.EventType.modifyprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in modifyprotect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5902' ref attribs);                      break;              }
Magic Number,CVNBot,Program,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Program.cs,ReactToRCEvent,The following statement contains a magic number: switch (r.eventtype)              {                  // This case handles:                  // - New page creations                  // - Page edits                  case RCEvent.EventType.edit:                      String diffsize;                      if (r.szdiff >= 0)                          diffsize = "+" + r.szdiff.ToString();                      else                          diffsize = r.szdiff.ToString();                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("size"' diffsize);                      attribs.Add("url"' r.url);                      attribs.Add("reason"' r.comment);                        // This block handles: New page creations                      if (r.newpage)                      {                          bool createSpecial = false;                            // New pages created by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.newBig)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5010 + userOffset' ref attribs);                          }                          else if (r.szdiff <= config.newSmall)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5020 + userOffset' ref attribs);                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5000 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Article is on watchlist                          // - Page title matches a BNA pattern                          // - Edit summary matches a BES pattern                            // Is the article on the watchlist?                          ListMatch wlm = listman.IsWatchedArticle(r.title' r.project);                          if (wlm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5030 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16301' (String)attribs["article"]));                              break;                          }                            // Does the page title match a BNA pattern?                          ListMatch eslm = listman.MatchesList(r.title' 12);                          if (eslm.Success)                          {                              // Matches BNA                              attribs.Add("watchword"' eslm.matchedItem);                              message = GetMessage(5040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' eslm.matchedItem));                              break;                          }                            // Does the edit summary match a BES pattern?                          ListMatch lm = listman.MatchesList(r.comment' 20);                          if (lm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' lm.matchedItem);                              message = GetMessage(95040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' lm.matchedItem));                              break;                          }                            // If we're still here that means                          // - the create didn't get ignored by adminlist or whitelist                          // - the create didn't match any watch patterns                          // Now' if any of the following is true' we'll must report it.                          // - Create by blacklisted user                          // - Create by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // Created by an unlisted reguser with non-special create size' ignore                          if ((userOffset == 4) && !createSpecial)                              return;                            // Else: Create had special size' so let it shown (default)' don't return!                      }                      // This block handles: Page edits                      else                      {                          bool editSpecial = false;                            // Edit by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.editBig)                          {                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5110 + userOffset' ref attribs);                              editSpecial = true;                          }                          else if (r.szdiff <= config.editBlank)                          {                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5120 + userOffset' ref attribs);                              editSpecial = true;                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5100 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Edit summary matches a BES pattern                          // - Edit blanked the page                          // - Edit replaced the page                          // - Article is on watchlist                            // Does the edit summary match a BES pattern?                          ListMatch elm = listman.MatchesList(r.comment' 20);                          if (elm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' elm.matchedItem);                              message = GetMessage(95130 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16310' r.comment' (String)attribs["article"]));                              break;                          }                            // Did the user user blank the page?                          if (project.rautosummBlank.IsMatch(r.comment))                          {                              message = GetMessage(96010 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16311' (String)attribs["article"]));                              break;                          }                            Match rplm = project.rautosummReplace.Match(r.comment);                          if (rplm.Success)                          {                              // The user replaced the page.                              try                              {                                  attribs.Add("profanity"' rplm.Groups["item1"].Captures[0].Value);                                  message = GetMessage(96020 + userOffset' ref attribs);                              }                              catch (ArgumentOutOfRangeException)                              {                                  // This wiki probably doesn't have a profanity attribute                                  message = GetMessage(96030 + userOffset' ref attribs);                              }                              break;                          }                            // Is the article on the watchlist?                          ListMatch welm = listman.IsWatchedArticle(r.title' r.project);                          if (welm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5130 + userOffset' ref attribs);                              break;                          }                            // If we're still here that means                          // - the edit didn't get ignored by adminlist or whitelist                          // - the edit didn't match any watch patterns                          // Now' if any of the following is true' we must still report it.                          // - Edit by blacklisted user                          // - Edit by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // If nothing special about the edit' return to ignore                          if (!editSpecial)                              return;                      }                      break;                  case RCEvent.EventType.move:                      // if moves are softhidden hide moves by admin' bot or whitelist                      if ((config.feedFilterEventMove == 2) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                      {                          return;                      }                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("fromname"' project.interwikiLink + r.title);                      attribs.Add("cfromname"' r.title);                      attribs.Add("toname"' project.interwikiLink + r.movedTo);                      attribs.Add("ctoname"' r.movedTo);                      attribs.Add("url"' r.blockLength); //The blockLength field stores the moveFrom URL                      attribs.Add("reason"' r.comment);                      message = GetMessage(5500 + userOffset' ref attribs);                      break;                  case RCEvent.EventType.block:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.title.Split(new char[] { ':' }' 2)[1]));                      attribs.Add("length"' r.blockLength);                      attribs.Add("reason"' r.comment);                      message = GetMessage(5400' ref attribs);                      //If the blocked user (r.title) isn't botlisted' add to blacklist                      if (listman.ClassifyEditor(r.title.Split(new char[] { ':' }' 2)[1]' r.project) != ListManager.UserType.bot)                      {                          //If this isn't an indefinite/infinite block' add to blacklist                          if ((r.blockLength.ToLower() != "indefinite") && (r.blockLength.ToLower() != "infinite"))                          {                                                               // 2'678'400 seconds = 744 hours = 31 days                              int listLen = Convert.ToInt32(CVNBotUtils.ParseDateTimeLength(r.blockLength' 2678400) * 2.5);                              string blComment = "Autoblacklist: " + r.comment + " on " + r.project;                              message += "\n" + listman.AddUserToList(r.title.Split(new char[] { ':' }' 2)[1]' "" //Global bl                                  ' ListManager.UserType.blacklisted' r.user' blComment' listLen);                              Broadcast("BL"' "ADD"' r.title.Split(new char[] { ':' }' 2)[1]' listLen' blComment' r.user);                          }                      }                      break;                  case RCEvent.EventType.unblock:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("reason"' r.comment);                      message = GetMessage(5700' ref attribs);                      break;                  case RCEvent.EventType.delete:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      attribs.Add("reason"' r.comment);                      message = GetMessage(05300' ref attribs);                      break;                  case RCEvent.EventType.newuser:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("caurl"' "https://meta.wikimedia.org/wiki/Special:CentralAuth/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch = listman.MatchesList(r.user' 11);                      if (bnuMatch.Success && feedFilterThisEvent == 1)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch.matchedItem);                          attribs.Add("wwreason"' bnuMatch.matchedReason);                          message = GetMessage(5201' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5200' ref attribs);                      }                      break;                  case RCEvent.EventType.newuser2:                      attribs.Add("creator"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ccreator"' r.user);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.title);                      attribs.Add("ceditor"' r.title);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch2 = listman.MatchesList(r.user' 11);                      if (bnuMatch2.Success)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch2.matchedItem);                          attribs.Add("wwreason"' bnuMatch2.matchedReason);                          message = GetMessage(5211' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch2.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5210' ref attribs);                      }                      break;                  case RCEvent.EventType.upload:                      int uMsg = 5600;                        // Check if the edit summary matches BES                      ListMatch ubes2 = listman.MatchesList(r.comment' 20);                      if (ubes2.Success)                      {                          attribs.Add("watchword"' ubes2.matchedItem);                          attribs.Add("lmreason"' ubes2.matchedReason);                          uMsg = 95620;                      }                        // Now check if the title matches BES                      ListMatch ubes1 = listman.MatchesList(r.title' 20);                      if (ubes1.Success)                      {                          attribs.Add("watchword"' ubes1.matchedItem);                          attribs.Add("lmreason"' ubes1.matchedReason);                          uMsg = 95620;                      }                        // Check if upload is watched                      ListMatch uwa = listman.IsWatchedArticle(r.title' r.project);                      if (uwa.Success)                          uMsg = 5610;                        // If normal and uploaded by an admin' bot or whitelisted person always hide                      if ((uMsg == 5600) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                          return;                        // if normal and uploads are softhidden hide normal user and anon aswell                      if ((uMsg == 5600) && (config.feedFilterEventUpload == 2) && ((userOffset == 3) || (userOffset == 4)))                          return;                        // If our message is 95620' we might need to truncate r.comment                      if (uMsg == 95620)                      {                          if (r.comment.Length > 25)                              r.comment = r.comment.Substring(0' 23) + "...";                      }                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("uploaditem"' project.interwikiLink + r.title);                      attribs.Add("cuploaditem"' r.title);                      attribs.Add("reason"' r.comment);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(userOffset + uMsg' ref attribs);                      break;                  case RCEvent.EventType.protect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in protect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5900' ref attribs);                      break;                  case RCEvent.EventType.unprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in unprotect is fine' it's just the pagetitle                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(5901' ref attribs);                      break;                  case RCEvent.EventType.modifyprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in modifyprotect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5902' ref attribs);                      break;              }
Magic Number,CVNBot,Program,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Program.cs,ReactToRCEvent,The following statement contains a magic number: switch (r.eventtype)              {                  // This case handles:                  // - New page creations                  // - Page edits                  case RCEvent.EventType.edit:                      String diffsize;                      if (r.szdiff >= 0)                          diffsize = "+" + r.szdiff.ToString();                      else                          diffsize = r.szdiff.ToString();                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("size"' diffsize);                      attribs.Add("url"' r.url);                      attribs.Add("reason"' r.comment);                        // This block handles: New page creations                      if (r.newpage)                      {                          bool createSpecial = false;                            // New pages created by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.newBig)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5010 + userOffset' ref attribs);                          }                          else if (r.szdiff <= config.newSmall)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5020 + userOffset' ref attribs);                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5000 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Article is on watchlist                          // - Page title matches a BNA pattern                          // - Edit summary matches a BES pattern                            // Is the article on the watchlist?                          ListMatch wlm = listman.IsWatchedArticle(r.title' r.project);                          if (wlm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5030 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16301' (String)attribs["article"]));                              break;                          }                            // Does the page title match a BNA pattern?                          ListMatch eslm = listman.MatchesList(r.title' 12);                          if (eslm.Success)                          {                              // Matches BNA                              attribs.Add("watchword"' eslm.matchedItem);                              message = GetMessage(5040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' eslm.matchedItem));                              break;                          }                            // Does the edit summary match a BES pattern?                          ListMatch lm = listman.MatchesList(r.comment' 20);                          if (lm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' lm.matchedItem);                              message = GetMessage(95040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' lm.matchedItem));                              break;                          }                            // If we're still here that means                          // - the create didn't get ignored by adminlist or whitelist                          // - the create didn't match any watch patterns                          // Now' if any of the following is true' we'll must report it.                          // - Create by blacklisted user                          // - Create by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // Created by an unlisted reguser with non-special create size' ignore                          if ((userOffset == 4) && !createSpecial)                              return;                            // Else: Create had special size' so let it shown (default)' don't return!                      }                      // This block handles: Page edits                      else                      {                          bool editSpecial = false;                            // Edit by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.editBig)                          {                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5110 + userOffset' ref attribs);                              editSpecial = true;                          }                          else if (r.szdiff <= config.editBlank)                          {                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5120 + userOffset' ref attribs);                              editSpecial = true;                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5100 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Edit summary matches a BES pattern                          // - Edit blanked the page                          // - Edit replaced the page                          // - Article is on watchlist                            // Does the edit summary match a BES pattern?                          ListMatch elm = listman.MatchesList(r.comment' 20);                          if (elm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' elm.matchedItem);                              message = GetMessage(95130 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16310' r.comment' (String)attribs["article"]));                              break;                          }                            // Did the user user blank the page?                          if (project.rautosummBlank.IsMatch(r.comment))                          {                              message = GetMessage(96010 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16311' (String)attribs["article"]));                              break;                          }                            Match rplm = project.rautosummReplace.Match(r.comment);                          if (rplm.Success)                          {                              // The user replaced the page.                              try                              {                                  attribs.Add("profanity"' rplm.Groups["item1"].Captures[0].Value);                                  message = GetMessage(96020 + userOffset' ref attribs);                              }                              catch (ArgumentOutOfRangeException)                              {                                  // This wiki probably doesn't have a profanity attribute                                  message = GetMessage(96030 + userOffset' ref attribs);                              }                              break;                          }                            // Is the article on the watchlist?                          ListMatch welm = listman.IsWatchedArticle(r.title' r.project);                          if (welm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5130 + userOffset' ref attribs);                              break;                          }                            // If we're still here that means                          // - the edit didn't get ignored by adminlist or whitelist                          // - the edit didn't match any watch patterns                          // Now' if any of the following is true' we must still report it.                          // - Edit by blacklisted user                          // - Edit by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // If nothing special about the edit' return to ignore                          if (!editSpecial)                              return;                      }                      break;                  case RCEvent.EventType.move:                      // if moves are softhidden hide moves by admin' bot or whitelist                      if ((config.feedFilterEventMove == 2) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                      {                          return;                      }                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("fromname"' project.interwikiLink + r.title);                      attribs.Add("cfromname"' r.title);                      attribs.Add("toname"' project.interwikiLink + r.movedTo);                      attribs.Add("ctoname"' r.movedTo);                      attribs.Add("url"' r.blockLength); //The blockLength field stores the moveFrom URL                      attribs.Add("reason"' r.comment);                      message = GetMessage(5500 + userOffset' ref attribs);                      break;                  case RCEvent.EventType.block:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.title.Split(new char[] { ':' }' 2)[1]));                      attribs.Add("length"' r.blockLength);                      attribs.Add("reason"' r.comment);                      message = GetMessage(5400' ref attribs);                      //If the blocked user (r.title) isn't botlisted' add to blacklist                      if (listman.ClassifyEditor(r.title.Split(new char[] { ':' }' 2)[1]' r.project) != ListManager.UserType.bot)                      {                          //If this isn't an indefinite/infinite block' add to blacklist                          if ((r.blockLength.ToLower() != "indefinite") && (r.blockLength.ToLower() != "infinite"))                          {                                                               // 2'678'400 seconds = 744 hours = 31 days                              int listLen = Convert.ToInt32(CVNBotUtils.ParseDateTimeLength(r.blockLength' 2678400) * 2.5);                              string blComment = "Autoblacklist: " + r.comment + " on " + r.project;                              message += "\n" + listman.AddUserToList(r.title.Split(new char[] { ':' }' 2)[1]' "" //Global bl                                  ' ListManager.UserType.blacklisted' r.user' blComment' listLen);                              Broadcast("BL"' "ADD"' r.title.Split(new char[] { ':' }' 2)[1]' listLen' blComment' r.user);                          }                      }                      break;                  case RCEvent.EventType.unblock:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("reason"' r.comment);                      message = GetMessage(5700' ref attribs);                      break;                  case RCEvent.EventType.delete:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      attribs.Add("reason"' r.comment);                      message = GetMessage(05300' ref attribs);                      break;                  case RCEvent.EventType.newuser:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("caurl"' "https://meta.wikimedia.org/wiki/Special:CentralAuth/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch = listman.MatchesList(r.user' 11);                      if (bnuMatch.Success && feedFilterThisEvent == 1)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch.matchedItem);                          attribs.Add("wwreason"' bnuMatch.matchedReason);                          message = GetMessage(5201' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5200' ref attribs);                      }                      break;                  case RCEvent.EventType.newuser2:                      attribs.Add("creator"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ccreator"' r.user);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.title);                      attribs.Add("ceditor"' r.title);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch2 = listman.MatchesList(r.user' 11);                      if (bnuMatch2.Success)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch2.matchedItem);                          attribs.Add("wwreason"' bnuMatch2.matchedReason);                          message = GetMessage(5211' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch2.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5210' ref attribs);                      }                      break;                  case RCEvent.EventType.upload:                      int uMsg = 5600;                        // Check if the edit summary matches BES                      ListMatch ubes2 = listman.MatchesList(r.comment' 20);                      if (ubes2.Success)                      {                          attribs.Add("watchword"' ubes2.matchedItem);                          attribs.Add("lmreason"' ubes2.matchedReason);                          uMsg = 95620;                      }                        // Now check if the title matches BES                      ListMatch ubes1 = listman.MatchesList(r.title' 20);                      if (ubes1.Success)                      {                          attribs.Add("watchword"' ubes1.matchedItem);                          attribs.Add("lmreason"' ubes1.matchedReason);                          uMsg = 95620;                      }                        // Check if upload is watched                      ListMatch uwa = listman.IsWatchedArticle(r.title' r.project);                      if (uwa.Success)                          uMsg = 5610;                        // If normal and uploaded by an admin' bot or whitelisted person always hide                      if ((uMsg == 5600) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                          return;                        // if normal and uploads are softhidden hide normal user and anon aswell                      if ((uMsg == 5600) && (config.feedFilterEventUpload == 2) && ((userOffset == 3) || (userOffset == 4)))                          return;                        // If our message is 95620' we might need to truncate r.comment                      if (uMsg == 95620)                      {                          if (r.comment.Length > 25)                              r.comment = r.comment.Substring(0' 23) + "...";                      }                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("uploaditem"' project.interwikiLink + r.title);                      attribs.Add("cuploaditem"' r.title);                      attribs.Add("reason"' r.comment);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(userOffset + uMsg' ref attribs);                      break;                  case RCEvent.EventType.protect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in protect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5900' ref attribs);                      break;                  case RCEvent.EventType.unprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in unprotect is fine' it's just the pagetitle                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(5901' ref attribs);                      break;                  case RCEvent.EventType.modifyprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in modifyprotect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5902' ref attribs);                      break;              }
Magic Number,CVNBot,Program,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Program.cs,ReactToRCEvent,The following statement contains a magic number: switch (r.eventtype)              {                  // This case handles:                  // - New page creations                  // - Page edits                  case RCEvent.EventType.edit:                      String diffsize;                      if (r.szdiff >= 0)                          diffsize = "+" + r.szdiff.ToString();                      else                          diffsize = r.szdiff.ToString();                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("size"' diffsize);                      attribs.Add("url"' r.url);                      attribs.Add("reason"' r.comment);                        // This block handles: New page creations                      if (r.newpage)                      {                          bool createSpecial = false;                            // New pages created by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.newBig)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5010 + userOffset' ref attribs);                          }                          else if (r.szdiff <= config.newSmall)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5020 + userOffset' ref attribs);                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5000 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Article is on watchlist                          // - Page title matches a BNA pattern                          // - Edit summary matches a BES pattern                            // Is the article on the watchlist?                          ListMatch wlm = listman.IsWatchedArticle(r.title' r.project);                          if (wlm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5030 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16301' (String)attribs["article"]));                              break;                          }                            // Does the page title match a BNA pattern?                          ListMatch eslm = listman.MatchesList(r.title' 12);                          if (eslm.Success)                          {                              // Matches BNA                              attribs.Add("watchword"' eslm.matchedItem);                              message = GetMessage(5040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' eslm.matchedItem));                              break;                          }                            // Does the edit summary match a BES pattern?                          ListMatch lm = listman.MatchesList(r.comment' 20);                          if (lm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' lm.matchedItem);                              message = GetMessage(95040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' lm.matchedItem));                              break;                          }                            // If we're still here that means                          // - the create didn't get ignored by adminlist or whitelist                          // - the create didn't match any watch patterns                          // Now' if any of the following is true' we'll must report it.                          // - Create by blacklisted user                          // - Create by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // Created by an unlisted reguser with non-special create size' ignore                          if ((userOffset == 4) && !createSpecial)                              return;                            // Else: Create had special size' so let it shown (default)' don't return!                      }                      // This block handles: Page edits                      else                      {                          bool editSpecial = false;                            // Edit by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.editBig)                          {                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5110 + userOffset' ref attribs);                              editSpecial = true;                          }                          else if (r.szdiff <= config.editBlank)                          {                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5120 + userOffset' ref attribs);                              editSpecial = true;                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5100 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Edit summary matches a BES pattern                          // - Edit blanked the page                          // - Edit replaced the page                          // - Article is on watchlist                            // Does the edit summary match a BES pattern?                          ListMatch elm = listman.MatchesList(r.comment' 20);                          if (elm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' elm.matchedItem);                              message = GetMessage(95130 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16310' r.comment' (String)attribs["article"]));                              break;                          }                            // Did the user user blank the page?                          if (project.rautosummBlank.IsMatch(r.comment))                          {                              message = GetMessage(96010 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16311' (String)attribs["article"]));                              break;                          }                            Match rplm = project.rautosummReplace.Match(r.comment);                          if (rplm.Success)                          {                              // The user replaced the page.                              try                              {                                  attribs.Add("profanity"' rplm.Groups["item1"].Captures[0].Value);                                  message = GetMessage(96020 + userOffset' ref attribs);                              }                              catch (ArgumentOutOfRangeException)                              {                                  // This wiki probably doesn't have a profanity attribute                                  message = GetMessage(96030 + userOffset' ref attribs);                              }                              break;                          }                            // Is the article on the watchlist?                          ListMatch welm = listman.IsWatchedArticle(r.title' r.project);                          if (welm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5130 + userOffset' ref attribs);                              break;                          }                            // If we're still here that means                          // - the edit didn't get ignored by adminlist or whitelist                          // - the edit didn't match any watch patterns                          // Now' if any of the following is true' we must still report it.                          // - Edit by blacklisted user                          // - Edit by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // If nothing special about the edit' return to ignore                          if (!editSpecial)                              return;                      }                      break;                  case RCEvent.EventType.move:                      // if moves are softhidden hide moves by admin' bot or whitelist                      if ((config.feedFilterEventMove == 2) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                      {                          return;                      }                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("fromname"' project.interwikiLink + r.title);                      attribs.Add("cfromname"' r.title);                      attribs.Add("toname"' project.interwikiLink + r.movedTo);                      attribs.Add("ctoname"' r.movedTo);                      attribs.Add("url"' r.blockLength); //The blockLength field stores the moveFrom URL                      attribs.Add("reason"' r.comment);                      message = GetMessage(5500 + userOffset' ref attribs);                      break;                  case RCEvent.EventType.block:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.title.Split(new char[] { ':' }' 2)[1]));                      attribs.Add("length"' r.blockLength);                      attribs.Add("reason"' r.comment);                      message = GetMessage(5400' ref attribs);                      //If the blocked user (r.title) isn't botlisted' add to blacklist                      if (listman.ClassifyEditor(r.title.Split(new char[] { ':' }' 2)[1]' r.project) != ListManager.UserType.bot)                      {                          //If this isn't an indefinite/infinite block' add to blacklist                          if ((r.blockLength.ToLower() != "indefinite") && (r.blockLength.ToLower() != "infinite"))                          {                                                               // 2'678'400 seconds = 744 hours = 31 days                              int listLen = Convert.ToInt32(CVNBotUtils.ParseDateTimeLength(r.blockLength' 2678400) * 2.5);                              string blComment = "Autoblacklist: " + r.comment + " on " + r.project;                              message += "\n" + listman.AddUserToList(r.title.Split(new char[] { ':' }' 2)[1]' "" //Global bl                                  ' ListManager.UserType.blacklisted' r.user' blComment' listLen);                              Broadcast("BL"' "ADD"' r.title.Split(new char[] { ':' }' 2)[1]' listLen' blComment' r.user);                          }                      }                      break;                  case RCEvent.EventType.unblock:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("reason"' r.comment);                      message = GetMessage(5700' ref attribs);                      break;                  case RCEvent.EventType.delete:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      attribs.Add("reason"' r.comment);                      message = GetMessage(05300' ref attribs);                      break;                  case RCEvent.EventType.newuser:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("caurl"' "https://meta.wikimedia.org/wiki/Special:CentralAuth/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch = listman.MatchesList(r.user' 11);                      if (bnuMatch.Success && feedFilterThisEvent == 1)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch.matchedItem);                          attribs.Add("wwreason"' bnuMatch.matchedReason);                          message = GetMessage(5201' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5200' ref attribs);                      }                      break;                  case RCEvent.EventType.newuser2:                      attribs.Add("creator"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ccreator"' r.user);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.title);                      attribs.Add("ceditor"' r.title);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch2 = listman.MatchesList(r.user' 11);                      if (bnuMatch2.Success)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch2.matchedItem);                          attribs.Add("wwreason"' bnuMatch2.matchedReason);                          message = GetMessage(5211' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch2.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5210' ref attribs);                      }                      break;                  case RCEvent.EventType.upload:                      int uMsg = 5600;                        // Check if the edit summary matches BES                      ListMatch ubes2 = listman.MatchesList(r.comment' 20);                      if (ubes2.Success)                      {                          attribs.Add("watchword"' ubes2.matchedItem);                          attribs.Add("lmreason"' ubes2.matchedReason);                          uMsg = 95620;                      }                        // Now check if the title matches BES                      ListMatch ubes1 = listman.MatchesList(r.title' 20);                      if (ubes1.Success)                      {                          attribs.Add("watchword"' ubes1.matchedItem);                          attribs.Add("lmreason"' ubes1.matchedReason);                          uMsg = 95620;                      }                        // Check if upload is watched                      ListMatch uwa = listman.IsWatchedArticle(r.title' r.project);                      if (uwa.Success)                          uMsg = 5610;                        // If normal and uploaded by an admin' bot or whitelisted person always hide                      if ((uMsg == 5600) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                          return;                        // if normal and uploads are softhidden hide normal user and anon aswell                      if ((uMsg == 5600) && (config.feedFilterEventUpload == 2) && ((userOffset == 3) || (userOffset == 4)))                          return;                        // If our message is 95620' we might need to truncate r.comment                      if (uMsg == 95620)                      {                          if (r.comment.Length > 25)                              r.comment = r.comment.Substring(0' 23) + "...";                      }                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("uploaditem"' project.interwikiLink + r.title);                      attribs.Add("cuploaditem"' r.title);                      attribs.Add("reason"' r.comment);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(userOffset + uMsg' ref attribs);                      break;                  case RCEvent.EventType.protect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in protect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5900' ref attribs);                      break;                  case RCEvent.EventType.unprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in unprotect is fine' it's just the pagetitle                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(5901' ref attribs);                      break;                  case RCEvent.EventType.modifyprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in modifyprotect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5902' ref attribs);                      break;              }
Magic Number,CVNBot,Program,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Program.cs,ReactToRCEvent,The following statement contains a magic number: switch (r.eventtype)              {                  // This case handles:                  // - New page creations                  // - Page edits                  case RCEvent.EventType.edit:                      String diffsize;                      if (r.szdiff >= 0)                          diffsize = "+" + r.szdiff.ToString();                      else                          diffsize = r.szdiff.ToString();                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("size"' diffsize);                      attribs.Add("url"' r.url);                      attribs.Add("reason"' r.comment);                        // This block handles: New page creations                      if (r.newpage)                      {                          bool createSpecial = false;                            // New pages created by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.newBig)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5010 + userOffset' ref attribs);                          }                          else if (r.szdiff <= config.newSmall)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5020 + userOffset' ref attribs);                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5000 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Article is on watchlist                          // - Page title matches a BNA pattern                          // - Edit summary matches a BES pattern                            // Is the article on the watchlist?                          ListMatch wlm = listman.IsWatchedArticle(r.title' r.project);                          if (wlm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5030 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16301' (String)attribs["article"]));                              break;                          }                            // Does the page title match a BNA pattern?                          ListMatch eslm = listman.MatchesList(r.title' 12);                          if (eslm.Success)                          {                              // Matches BNA                              attribs.Add("watchword"' eslm.matchedItem);                              message = GetMessage(5040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' eslm.matchedItem));                              break;                          }                            // Does the edit summary match a BES pattern?                          ListMatch lm = listman.MatchesList(r.comment' 20);                          if (lm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' lm.matchedItem);                              message = GetMessage(95040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' lm.matchedItem));                              break;                          }                            // If we're still here that means                          // - the create didn't get ignored by adminlist or whitelist                          // - the create didn't match any watch patterns                          // Now' if any of the following is true' we'll must report it.                          // - Create by blacklisted user                          // - Create by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // Created by an unlisted reguser with non-special create size' ignore                          if ((userOffset == 4) && !createSpecial)                              return;                            // Else: Create had special size' so let it shown (default)' don't return!                      }                      // This block handles: Page edits                      else                      {                          bool editSpecial = false;                            // Edit by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.editBig)                          {                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5110 + userOffset' ref attribs);                              editSpecial = true;                          }                          else if (r.szdiff <= config.editBlank)                          {                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5120 + userOffset' ref attribs);                              editSpecial = true;                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5100 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Edit summary matches a BES pattern                          // - Edit blanked the page                          // - Edit replaced the page                          // - Article is on watchlist                            // Does the edit summary match a BES pattern?                          ListMatch elm = listman.MatchesList(r.comment' 20);                          if (elm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' elm.matchedItem);                              message = GetMessage(95130 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16310' r.comment' (String)attribs["article"]));                              break;                          }                            // Did the user user blank the page?                          if (project.rautosummBlank.IsMatch(r.comment))                          {                              message = GetMessage(96010 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16311' (String)attribs["article"]));                              break;                          }                            Match rplm = project.rautosummReplace.Match(r.comment);                          if (rplm.Success)                          {                              // The user replaced the page.                              try                              {                                  attribs.Add("profanity"' rplm.Groups["item1"].Captures[0].Value);                                  message = GetMessage(96020 + userOffset' ref attribs);                              }                              catch (ArgumentOutOfRangeException)                              {                                  // This wiki probably doesn't have a profanity attribute                                  message = GetMessage(96030 + userOffset' ref attribs);                              }                              break;                          }                            // Is the article on the watchlist?                          ListMatch welm = listman.IsWatchedArticle(r.title' r.project);                          if (welm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5130 + userOffset' ref attribs);                              break;                          }                            // If we're still here that means                          // - the edit didn't get ignored by adminlist or whitelist                          // - the edit didn't match any watch patterns                          // Now' if any of the following is true' we must still report it.                          // - Edit by blacklisted user                          // - Edit by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // If nothing special about the edit' return to ignore                          if (!editSpecial)                              return;                      }                      break;                  case RCEvent.EventType.move:                      // if moves are softhidden hide moves by admin' bot or whitelist                      if ((config.feedFilterEventMove == 2) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                      {                          return;                      }                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("fromname"' project.interwikiLink + r.title);                      attribs.Add("cfromname"' r.title);                      attribs.Add("toname"' project.interwikiLink + r.movedTo);                      attribs.Add("ctoname"' r.movedTo);                      attribs.Add("url"' r.blockLength); //The blockLength field stores the moveFrom URL                      attribs.Add("reason"' r.comment);                      message = GetMessage(5500 + userOffset' ref attribs);                      break;                  case RCEvent.EventType.block:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.title.Split(new char[] { ':' }' 2)[1]));                      attribs.Add("length"' r.blockLength);                      attribs.Add("reason"' r.comment);                      message = GetMessage(5400' ref attribs);                      //If the blocked user (r.title) isn't botlisted' add to blacklist                      if (listman.ClassifyEditor(r.title.Split(new char[] { ':' }' 2)[1]' r.project) != ListManager.UserType.bot)                      {                          //If this isn't an indefinite/infinite block' add to blacklist                          if ((r.blockLength.ToLower() != "indefinite") && (r.blockLength.ToLower() != "infinite"))                          {                                                               // 2'678'400 seconds = 744 hours = 31 days                              int listLen = Convert.ToInt32(CVNBotUtils.ParseDateTimeLength(r.blockLength' 2678400) * 2.5);                              string blComment = "Autoblacklist: " + r.comment + " on " + r.project;                              message += "\n" + listman.AddUserToList(r.title.Split(new char[] { ':' }' 2)[1]' "" //Global bl                                  ' ListManager.UserType.blacklisted' r.user' blComment' listLen);                              Broadcast("BL"' "ADD"' r.title.Split(new char[] { ':' }' 2)[1]' listLen' blComment' r.user);                          }                      }                      break;                  case RCEvent.EventType.unblock:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("reason"' r.comment);                      message = GetMessage(5700' ref attribs);                      break;                  case RCEvent.EventType.delete:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      attribs.Add("reason"' r.comment);                      message = GetMessage(05300' ref attribs);                      break;                  case RCEvent.EventType.newuser:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("caurl"' "https://meta.wikimedia.org/wiki/Special:CentralAuth/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch = listman.MatchesList(r.user' 11);                      if (bnuMatch.Success && feedFilterThisEvent == 1)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch.matchedItem);                          attribs.Add("wwreason"' bnuMatch.matchedReason);                          message = GetMessage(5201' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5200' ref attribs);                      }                      break;                  case RCEvent.EventType.newuser2:                      attribs.Add("creator"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ccreator"' r.user);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.title);                      attribs.Add("ceditor"' r.title);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch2 = listman.MatchesList(r.user' 11);                      if (bnuMatch2.Success)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch2.matchedItem);                          attribs.Add("wwreason"' bnuMatch2.matchedReason);                          message = GetMessage(5211' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch2.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5210' ref attribs);                      }                      break;                  case RCEvent.EventType.upload:                      int uMsg = 5600;                        // Check if the edit summary matches BES                      ListMatch ubes2 = listman.MatchesList(r.comment' 20);                      if (ubes2.Success)                      {                          attribs.Add("watchword"' ubes2.matchedItem);                          attribs.Add("lmreason"' ubes2.matchedReason);                          uMsg = 95620;                      }                        // Now check if the title matches BES                      ListMatch ubes1 = listman.MatchesList(r.title' 20);                      if (ubes1.Success)                      {                          attribs.Add("watchword"' ubes1.matchedItem);                          attribs.Add("lmreason"' ubes1.matchedReason);                          uMsg = 95620;                      }                        // Check if upload is watched                      ListMatch uwa = listman.IsWatchedArticle(r.title' r.project);                      if (uwa.Success)                          uMsg = 5610;                        // If normal and uploaded by an admin' bot or whitelisted person always hide                      if ((uMsg == 5600) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                          return;                        // if normal and uploads are softhidden hide normal user and anon aswell                      if ((uMsg == 5600) && (config.feedFilterEventUpload == 2) && ((userOffset == 3) || (userOffset == 4)))                          return;                        // If our message is 95620' we might need to truncate r.comment                      if (uMsg == 95620)                      {                          if (r.comment.Length > 25)                              r.comment = r.comment.Substring(0' 23) + "...";                      }                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("uploaditem"' project.interwikiLink + r.title);                      attribs.Add("cuploaditem"' r.title);                      attribs.Add("reason"' r.comment);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(userOffset + uMsg' ref attribs);                      break;                  case RCEvent.EventType.protect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in protect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5900' ref attribs);                      break;                  case RCEvent.EventType.unprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in unprotect is fine' it's just the pagetitle                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(5901' ref attribs);                      break;                  case RCEvent.EventType.modifyprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in modifyprotect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5902' ref attribs);                      break;              }
Magic Number,CVNBot,Program,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Program.cs,ReactToRCEvent,The following statement contains a magic number: switch (r.eventtype)              {                  // This case handles:                  // - New page creations                  // - Page edits                  case RCEvent.EventType.edit:                      String diffsize;                      if (r.szdiff >= 0)                          diffsize = "+" + r.szdiff.ToString();                      else                          diffsize = r.szdiff.ToString();                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("size"' diffsize);                      attribs.Add("url"' r.url);                      attribs.Add("reason"' r.comment);                        // This block handles: New page creations                      if (r.newpage)                      {                          bool createSpecial = false;                            // New pages created by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.newBig)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5010 + userOffset' ref attribs);                          }                          else if (r.szdiff <= config.newSmall)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5020 + userOffset' ref attribs);                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5000 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Article is on watchlist                          // - Page title matches a BNA pattern                          // - Edit summary matches a BES pattern                            // Is the article on the watchlist?                          ListMatch wlm = listman.IsWatchedArticle(r.title' r.project);                          if (wlm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5030 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16301' (String)attribs["article"]));                              break;                          }                            // Does the page title match a BNA pattern?                          ListMatch eslm = listman.MatchesList(r.title' 12);                          if (eslm.Success)                          {                              // Matches BNA                              attribs.Add("watchword"' eslm.matchedItem);                              message = GetMessage(5040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' eslm.matchedItem));                              break;                          }                            // Does the edit summary match a BES pattern?                          ListMatch lm = listman.MatchesList(r.comment' 20);                          if (lm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' lm.matchedItem);                              message = GetMessage(95040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' lm.matchedItem));                              break;                          }                            // If we're still here that means                          // - the create didn't get ignored by adminlist or whitelist                          // - the create didn't match any watch patterns                          // Now' if any of the following is true' we'll must report it.                          // - Create by blacklisted user                          // - Create by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // Created by an unlisted reguser with non-special create size' ignore                          if ((userOffset == 4) && !createSpecial)                              return;                            // Else: Create had special size' so let it shown (default)' don't return!                      }                      // This block handles: Page edits                      else                      {                          bool editSpecial = false;                            // Edit by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.editBig)                          {                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5110 + userOffset' ref attribs);                              editSpecial = true;                          }                          else if (r.szdiff <= config.editBlank)                          {                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5120 + userOffset' ref attribs);                              editSpecial = true;                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5100 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Edit summary matches a BES pattern                          // - Edit blanked the page                          // - Edit replaced the page                          // - Article is on watchlist                            // Does the edit summary match a BES pattern?                          ListMatch elm = listman.MatchesList(r.comment' 20);                          if (elm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' elm.matchedItem);                              message = GetMessage(95130 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16310' r.comment' (String)attribs["article"]));                              break;                          }                            // Did the user user blank the page?                          if (project.rautosummBlank.IsMatch(r.comment))                          {                              message = GetMessage(96010 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16311' (String)attribs["article"]));                              break;                          }                            Match rplm = project.rautosummReplace.Match(r.comment);                          if (rplm.Success)                          {                              // The user replaced the page.                              try                              {                                  attribs.Add("profanity"' rplm.Groups["item1"].Captures[0].Value);                                  message = GetMessage(96020 + userOffset' ref attribs);                              }                              catch (ArgumentOutOfRangeException)                              {                                  // This wiki probably doesn't have a profanity attribute                                  message = GetMessage(96030 + userOffset' ref attribs);                              }                              break;                          }                            // Is the article on the watchlist?                          ListMatch welm = listman.IsWatchedArticle(r.title' r.project);                          if (welm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5130 + userOffset' ref attribs);                              break;                          }                            // If we're still here that means                          // - the edit didn't get ignored by adminlist or whitelist                          // - the edit didn't match any watch patterns                          // Now' if any of the following is true' we must still report it.                          // - Edit by blacklisted user                          // - Edit by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // If nothing special about the edit' return to ignore                          if (!editSpecial)                              return;                      }                      break;                  case RCEvent.EventType.move:                      // if moves are softhidden hide moves by admin' bot or whitelist                      if ((config.feedFilterEventMove == 2) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                      {                          return;                      }                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("fromname"' project.interwikiLink + r.title);                      attribs.Add("cfromname"' r.title);                      attribs.Add("toname"' project.interwikiLink + r.movedTo);                      attribs.Add("ctoname"' r.movedTo);                      attribs.Add("url"' r.blockLength); //The blockLength field stores the moveFrom URL                      attribs.Add("reason"' r.comment);                      message = GetMessage(5500 + userOffset' ref attribs);                      break;                  case RCEvent.EventType.block:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.title.Split(new char[] { ':' }' 2)[1]));                      attribs.Add("length"' r.blockLength);                      attribs.Add("reason"' r.comment);                      message = GetMessage(5400' ref attribs);                      //If the blocked user (r.title) isn't botlisted' add to blacklist                      if (listman.ClassifyEditor(r.title.Split(new char[] { ':' }' 2)[1]' r.project) != ListManager.UserType.bot)                      {                          //If this isn't an indefinite/infinite block' add to blacklist                          if ((r.blockLength.ToLower() != "indefinite") && (r.blockLength.ToLower() != "infinite"))                          {                                                               // 2'678'400 seconds = 744 hours = 31 days                              int listLen = Convert.ToInt32(CVNBotUtils.ParseDateTimeLength(r.blockLength' 2678400) * 2.5);                              string blComment = "Autoblacklist: " + r.comment + " on " + r.project;                              message += "\n" + listman.AddUserToList(r.title.Split(new char[] { ':' }' 2)[1]' "" //Global bl                                  ' ListManager.UserType.blacklisted' r.user' blComment' listLen);                              Broadcast("BL"' "ADD"' r.title.Split(new char[] { ':' }' 2)[1]' listLen' blComment' r.user);                          }                      }                      break;                  case RCEvent.EventType.unblock:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("reason"' r.comment);                      message = GetMessage(5700' ref attribs);                      break;                  case RCEvent.EventType.delete:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      attribs.Add("reason"' r.comment);                      message = GetMessage(05300' ref attribs);                      break;                  case RCEvent.EventType.newuser:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("caurl"' "https://meta.wikimedia.org/wiki/Special:CentralAuth/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch = listman.MatchesList(r.user' 11);                      if (bnuMatch.Success && feedFilterThisEvent == 1)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch.matchedItem);                          attribs.Add("wwreason"' bnuMatch.matchedReason);                          message = GetMessage(5201' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5200' ref attribs);                      }                      break;                  case RCEvent.EventType.newuser2:                      attribs.Add("creator"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ccreator"' r.user);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.title);                      attribs.Add("ceditor"' r.title);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch2 = listman.MatchesList(r.user' 11);                      if (bnuMatch2.Success)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch2.matchedItem);                          attribs.Add("wwreason"' bnuMatch2.matchedReason);                          message = GetMessage(5211' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch2.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5210' ref attribs);                      }                      break;                  case RCEvent.EventType.upload:                      int uMsg = 5600;                        // Check if the edit summary matches BES                      ListMatch ubes2 = listman.MatchesList(r.comment' 20);                      if (ubes2.Success)                      {                          attribs.Add("watchword"' ubes2.matchedItem);                          attribs.Add("lmreason"' ubes2.matchedReason);                          uMsg = 95620;                      }                        // Now check if the title matches BES                      ListMatch ubes1 = listman.MatchesList(r.title' 20);                      if (ubes1.Success)                      {                          attribs.Add("watchword"' ubes1.matchedItem);                          attribs.Add("lmreason"' ubes1.matchedReason);                          uMsg = 95620;                      }                        // Check if upload is watched                      ListMatch uwa = listman.IsWatchedArticle(r.title' r.project);                      if (uwa.Success)                          uMsg = 5610;                        // If normal and uploaded by an admin' bot or whitelisted person always hide                      if ((uMsg == 5600) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                          return;                        // if normal and uploads are softhidden hide normal user and anon aswell                      if ((uMsg == 5600) && (config.feedFilterEventUpload == 2) && ((userOffset == 3) || (userOffset == 4)))                          return;                        // If our message is 95620' we might need to truncate r.comment                      if (uMsg == 95620)                      {                          if (r.comment.Length > 25)                              r.comment = r.comment.Substring(0' 23) + "...";                      }                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("uploaditem"' project.interwikiLink + r.title);                      attribs.Add("cuploaditem"' r.title);                      attribs.Add("reason"' r.comment);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(userOffset + uMsg' ref attribs);                      break;                  case RCEvent.EventType.protect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in protect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5900' ref attribs);                      break;                  case RCEvent.EventType.unprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in unprotect is fine' it's just the pagetitle                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(5901' ref attribs);                      break;                  case RCEvent.EventType.modifyprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in modifyprotect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5902' ref attribs);                      break;              }
Magic Number,CVNBot,Program,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Program.cs,ReactToRCEvent,The following statement contains a magic number: switch (r.eventtype)              {                  // This case handles:                  // - New page creations                  // - Page edits                  case RCEvent.EventType.edit:                      String diffsize;                      if (r.szdiff >= 0)                          diffsize = "+" + r.szdiff.ToString();                      else                          diffsize = r.szdiff.ToString();                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("size"' diffsize);                      attribs.Add("url"' r.url);                      attribs.Add("reason"' r.comment);                        // This block handles: New page creations                      if (r.newpage)                      {                          bool createSpecial = false;                            // New pages created by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.newBig)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5010 + userOffset' ref attribs);                          }                          else if (r.szdiff <= config.newSmall)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5020 + userOffset' ref attribs);                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5000 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Article is on watchlist                          // - Page title matches a BNA pattern                          // - Edit summary matches a BES pattern                            // Is the article on the watchlist?                          ListMatch wlm = listman.IsWatchedArticle(r.title' r.project);                          if (wlm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5030 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16301' (String)attribs["article"]));                              break;                          }                            // Does the page title match a BNA pattern?                          ListMatch eslm = listman.MatchesList(r.title' 12);                          if (eslm.Success)                          {                              // Matches BNA                              attribs.Add("watchword"' eslm.matchedItem);                              message = GetMessage(5040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' eslm.matchedItem));                              break;                          }                            // Does the edit summary match a BES pattern?                          ListMatch lm = listman.MatchesList(r.comment' 20);                          if (lm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' lm.matchedItem);                              message = GetMessage(95040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' lm.matchedItem));                              break;                          }                            // If we're still here that means                          // - the create didn't get ignored by adminlist or whitelist                          // - the create didn't match any watch patterns                          // Now' if any of the following is true' we'll must report it.                          // - Create by blacklisted user                          // - Create by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // Created by an unlisted reguser with non-special create size' ignore                          if ((userOffset == 4) && !createSpecial)                              return;                            // Else: Create had special size' so let it shown (default)' don't return!                      }                      // This block handles: Page edits                      else                      {                          bool editSpecial = false;                            // Edit by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.editBig)                          {                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5110 + userOffset' ref attribs);                              editSpecial = true;                          }                          else if (r.szdiff <= config.editBlank)                          {                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5120 + userOffset' ref attribs);                              editSpecial = true;                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5100 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Edit summary matches a BES pattern                          // - Edit blanked the page                          // - Edit replaced the page                          // - Article is on watchlist                            // Does the edit summary match a BES pattern?                          ListMatch elm = listman.MatchesList(r.comment' 20);                          if (elm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' elm.matchedItem);                              message = GetMessage(95130 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16310' r.comment' (String)attribs["article"]));                              break;                          }                            // Did the user user blank the page?                          if (project.rautosummBlank.IsMatch(r.comment))                          {                              message = GetMessage(96010 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16311' (String)attribs["article"]));                              break;                          }                            Match rplm = project.rautosummReplace.Match(r.comment);                          if (rplm.Success)                          {                              // The user replaced the page.                              try                              {                                  attribs.Add("profanity"' rplm.Groups["item1"].Captures[0].Value);                                  message = GetMessage(96020 + userOffset' ref attribs);                              }                              catch (ArgumentOutOfRangeException)                              {                                  // This wiki probably doesn't have a profanity attribute                                  message = GetMessage(96030 + userOffset' ref attribs);                              }                              break;                          }                            // Is the article on the watchlist?                          ListMatch welm = listman.IsWatchedArticle(r.title' r.project);                          if (welm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5130 + userOffset' ref attribs);                              break;                          }                            // If we're still here that means                          // - the edit didn't get ignored by adminlist or whitelist                          // - the edit didn't match any watch patterns                          // Now' if any of the following is true' we must still report it.                          // - Edit by blacklisted user                          // - Edit by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // If nothing special about the edit' return to ignore                          if (!editSpecial)                              return;                      }                      break;                  case RCEvent.EventType.move:                      // if moves are softhidden hide moves by admin' bot or whitelist                      if ((config.feedFilterEventMove == 2) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                      {                          return;                      }                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("fromname"' project.interwikiLink + r.title);                      attribs.Add("cfromname"' r.title);                      attribs.Add("toname"' project.interwikiLink + r.movedTo);                      attribs.Add("ctoname"' r.movedTo);                      attribs.Add("url"' r.blockLength); //The blockLength field stores the moveFrom URL                      attribs.Add("reason"' r.comment);                      message = GetMessage(5500 + userOffset' ref attribs);                      break;                  case RCEvent.EventType.block:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.title.Split(new char[] { ':' }' 2)[1]));                      attribs.Add("length"' r.blockLength);                      attribs.Add("reason"' r.comment);                      message = GetMessage(5400' ref attribs);                      //If the blocked user (r.title) isn't botlisted' add to blacklist                      if (listman.ClassifyEditor(r.title.Split(new char[] { ':' }' 2)[1]' r.project) != ListManager.UserType.bot)                      {                          //If this isn't an indefinite/infinite block' add to blacklist                          if ((r.blockLength.ToLower() != "indefinite") && (r.blockLength.ToLower() != "infinite"))                          {                                                               // 2'678'400 seconds = 744 hours = 31 days                              int listLen = Convert.ToInt32(CVNBotUtils.ParseDateTimeLength(r.blockLength' 2678400) * 2.5);                              string blComment = "Autoblacklist: " + r.comment + " on " + r.project;                              message += "\n" + listman.AddUserToList(r.title.Split(new char[] { ':' }' 2)[1]' "" //Global bl                                  ' ListManager.UserType.blacklisted' r.user' blComment' listLen);                              Broadcast("BL"' "ADD"' r.title.Split(new char[] { ':' }' 2)[1]' listLen' blComment' r.user);                          }                      }                      break;                  case RCEvent.EventType.unblock:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("reason"' r.comment);                      message = GetMessage(5700' ref attribs);                      break;                  case RCEvent.EventType.delete:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      attribs.Add("reason"' r.comment);                      message = GetMessage(05300' ref attribs);                      break;                  case RCEvent.EventType.newuser:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("caurl"' "https://meta.wikimedia.org/wiki/Special:CentralAuth/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch = listman.MatchesList(r.user' 11);                      if (bnuMatch.Success && feedFilterThisEvent == 1)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch.matchedItem);                          attribs.Add("wwreason"' bnuMatch.matchedReason);                          message = GetMessage(5201' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5200' ref attribs);                      }                      break;                  case RCEvent.EventType.newuser2:                      attribs.Add("creator"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ccreator"' r.user);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.title);                      attribs.Add("ceditor"' r.title);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch2 = listman.MatchesList(r.user' 11);                      if (bnuMatch2.Success)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch2.matchedItem);                          attribs.Add("wwreason"' bnuMatch2.matchedReason);                          message = GetMessage(5211' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch2.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5210' ref attribs);                      }                      break;                  case RCEvent.EventType.upload:                      int uMsg = 5600;                        // Check if the edit summary matches BES                      ListMatch ubes2 = listman.MatchesList(r.comment' 20);                      if (ubes2.Success)                      {                          attribs.Add("watchword"' ubes2.matchedItem);                          attribs.Add("lmreason"' ubes2.matchedReason);                          uMsg = 95620;                      }                        // Now check if the title matches BES                      ListMatch ubes1 = listman.MatchesList(r.title' 20);                      if (ubes1.Success)                      {                          attribs.Add("watchword"' ubes1.matchedItem);                          attribs.Add("lmreason"' ubes1.matchedReason);                          uMsg = 95620;                      }                        // Check if upload is watched                      ListMatch uwa = listman.IsWatchedArticle(r.title' r.project);                      if (uwa.Success)                          uMsg = 5610;                        // If normal and uploaded by an admin' bot or whitelisted person always hide                      if ((uMsg == 5600) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                          return;                        // if normal and uploads are softhidden hide normal user and anon aswell                      if ((uMsg == 5600) && (config.feedFilterEventUpload == 2) && ((userOffset == 3) || (userOffset == 4)))                          return;                        // If our message is 95620' we might need to truncate r.comment                      if (uMsg == 95620)                      {                          if (r.comment.Length > 25)                              r.comment = r.comment.Substring(0' 23) + "...";                      }                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("uploaditem"' project.interwikiLink + r.title);                      attribs.Add("cuploaditem"' r.title);                      attribs.Add("reason"' r.comment);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(userOffset + uMsg' ref attribs);                      break;                  case RCEvent.EventType.protect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in protect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5900' ref attribs);                      break;                  case RCEvent.EventType.unprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in unprotect is fine' it's just the pagetitle                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(5901' ref attribs);                      break;                  case RCEvent.EventType.modifyprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in modifyprotect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5902' ref attribs);                      break;              }
Magic Number,CVNBot,Program,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Program.cs,ReactToRCEvent,The following statement contains a magic number: switch (r.eventtype)              {                  // This case handles:                  // - New page creations                  // - Page edits                  case RCEvent.EventType.edit:                      String diffsize;                      if (r.szdiff >= 0)                          diffsize = "+" + r.szdiff.ToString();                      else                          diffsize = r.szdiff.ToString();                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("size"' diffsize);                      attribs.Add("url"' r.url);                      attribs.Add("reason"' r.comment);                        // This block handles: New page creations                      if (r.newpage)                      {                          bool createSpecial = false;                            // New pages created by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.newBig)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5010 + userOffset' ref attribs);                          }                          else if (r.szdiff <= config.newSmall)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5020 + userOffset' ref attribs);                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5000 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Article is on watchlist                          // - Page title matches a BNA pattern                          // - Edit summary matches a BES pattern                            // Is the article on the watchlist?                          ListMatch wlm = listman.IsWatchedArticle(r.title' r.project);                          if (wlm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5030 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16301' (String)attribs["article"]));                              break;                          }                            // Does the page title match a BNA pattern?                          ListMatch eslm = listman.MatchesList(r.title' 12);                          if (eslm.Success)                          {                              // Matches BNA                              attribs.Add("watchword"' eslm.matchedItem);                              message = GetMessage(5040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' eslm.matchedItem));                              break;                          }                            // Does the edit summary match a BES pattern?                          ListMatch lm = listman.MatchesList(r.comment' 20);                          if (lm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' lm.matchedItem);                              message = GetMessage(95040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' lm.matchedItem));                              break;                          }                            // If we're still here that means                          // - the create didn't get ignored by adminlist or whitelist                          // - the create didn't match any watch patterns                          // Now' if any of the following is true' we'll must report it.                          // - Create by blacklisted user                          // - Create by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // Created by an unlisted reguser with non-special create size' ignore                          if ((userOffset == 4) && !createSpecial)                              return;                            // Else: Create had special size' so let it shown (default)' don't return!                      }                      // This block handles: Page edits                      else                      {                          bool editSpecial = false;                            // Edit by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.editBig)                          {                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5110 + userOffset' ref attribs);                              editSpecial = true;                          }                          else if (r.szdiff <= config.editBlank)                          {                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5120 + userOffset' ref attribs);                              editSpecial = true;                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5100 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Edit summary matches a BES pattern                          // - Edit blanked the page                          // - Edit replaced the page                          // - Article is on watchlist                            // Does the edit summary match a BES pattern?                          ListMatch elm = listman.MatchesList(r.comment' 20);                          if (elm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' elm.matchedItem);                              message = GetMessage(95130 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16310' r.comment' (String)attribs["article"]));                              break;                          }                            // Did the user user blank the page?                          if (project.rautosummBlank.IsMatch(r.comment))                          {                              message = GetMessage(96010 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16311' (String)attribs["article"]));                              break;                          }                            Match rplm = project.rautosummReplace.Match(r.comment);                          if (rplm.Success)                          {                              // The user replaced the page.                              try                              {                                  attribs.Add("profanity"' rplm.Groups["item1"].Captures[0].Value);                                  message = GetMessage(96020 + userOffset' ref attribs);                              }                              catch (ArgumentOutOfRangeException)                              {                                  // This wiki probably doesn't have a profanity attribute                                  message = GetMessage(96030 + userOffset' ref attribs);                              }                              break;                          }                            // Is the article on the watchlist?                          ListMatch welm = listman.IsWatchedArticle(r.title' r.project);                          if (welm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5130 + userOffset' ref attribs);                              break;                          }                            // If we're still here that means                          // - the edit didn't get ignored by adminlist or whitelist                          // - the edit didn't match any watch patterns                          // Now' if any of the following is true' we must still report it.                          // - Edit by blacklisted user                          // - Edit by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // If nothing special about the edit' return to ignore                          if (!editSpecial)                              return;                      }                      break;                  case RCEvent.EventType.move:                      // if moves are softhidden hide moves by admin' bot or whitelist                      if ((config.feedFilterEventMove == 2) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                      {                          return;                      }                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("fromname"' project.interwikiLink + r.title);                      attribs.Add("cfromname"' r.title);                      attribs.Add("toname"' project.interwikiLink + r.movedTo);                      attribs.Add("ctoname"' r.movedTo);                      attribs.Add("url"' r.blockLength); //The blockLength field stores the moveFrom URL                      attribs.Add("reason"' r.comment);                      message = GetMessage(5500 + userOffset' ref attribs);                      break;                  case RCEvent.EventType.block:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.title.Split(new char[] { ':' }' 2)[1]));                      attribs.Add("length"' r.blockLength);                      attribs.Add("reason"' r.comment);                      message = GetMessage(5400' ref attribs);                      //If the blocked user (r.title) isn't botlisted' add to blacklist                      if (listman.ClassifyEditor(r.title.Split(new char[] { ':' }' 2)[1]' r.project) != ListManager.UserType.bot)                      {                          //If this isn't an indefinite/infinite block' add to blacklist                          if ((r.blockLength.ToLower() != "indefinite") && (r.blockLength.ToLower() != "infinite"))                          {                                                               // 2'678'400 seconds = 744 hours = 31 days                              int listLen = Convert.ToInt32(CVNBotUtils.ParseDateTimeLength(r.blockLength' 2678400) * 2.5);                              string blComment = "Autoblacklist: " + r.comment + " on " + r.project;                              message += "\n" + listman.AddUserToList(r.title.Split(new char[] { ':' }' 2)[1]' "" //Global bl                                  ' ListManager.UserType.blacklisted' r.user' blComment' listLen);                              Broadcast("BL"' "ADD"' r.title.Split(new char[] { ':' }' 2)[1]' listLen' blComment' r.user);                          }                      }                      break;                  case RCEvent.EventType.unblock:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("reason"' r.comment);                      message = GetMessage(5700' ref attribs);                      break;                  case RCEvent.EventType.delete:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      attribs.Add("reason"' r.comment);                      message = GetMessage(05300' ref attribs);                      break;                  case RCEvent.EventType.newuser:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("caurl"' "https://meta.wikimedia.org/wiki/Special:CentralAuth/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch = listman.MatchesList(r.user' 11);                      if (bnuMatch.Success && feedFilterThisEvent == 1)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch.matchedItem);                          attribs.Add("wwreason"' bnuMatch.matchedReason);                          message = GetMessage(5201' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5200' ref attribs);                      }                      break;                  case RCEvent.EventType.newuser2:                      attribs.Add("creator"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ccreator"' r.user);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.title);                      attribs.Add("ceditor"' r.title);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch2 = listman.MatchesList(r.user' 11);                      if (bnuMatch2.Success)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch2.matchedItem);                          attribs.Add("wwreason"' bnuMatch2.matchedReason);                          message = GetMessage(5211' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch2.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5210' ref attribs);                      }                      break;                  case RCEvent.EventType.upload:                      int uMsg = 5600;                        // Check if the edit summary matches BES                      ListMatch ubes2 = listman.MatchesList(r.comment' 20);                      if (ubes2.Success)                      {                          attribs.Add("watchword"' ubes2.matchedItem);                          attribs.Add("lmreason"' ubes2.matchedReason);                          uMsg = 95620;                      }                        // Now check if the title matches BES                      ListMatch ubes1 = listman.MatchesList(r.title' 20);                      if (ubes1.Success)                      {                          attribs.Add("watchword"' ubes1.matchedItem);                          attribs.Add("lmreason"' ubes1.matchedReason);                          uMsg = 95620;                      }                        // Check if upload is watched                      ListMatch uwa = listman.IsWatchedArticle(r.title' r.project);                      if (uwa.Success)                          uMsg = 5610;                        // If normal and uploaded by an admin' bot or whitelisted person always hide                      if ((uMsg == 5600) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                          return;                        // if normal and uploads are softhidden hide normal user and anon aswell                      if ((uMsg == 5600) && (config.feedFilterEventUpload == 2) && ((userOffset == 3) || (userOffset == 4)))                          return;                        // If our message is 95620' we might need to truncate r.comment                      if (uMsg == 95620)                      {                          if (r.comment.Length > 25)                              r.comment = r.comment.Substring(0' 23) + "...";                      }                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("uploaditem"' project.interwikiLink + r.title);                      attribs.Add("cuploaditem"' r.title);                      attribs.Add("reason"' r.comment);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(userOffset + uMsg' ref attribs);                      break;                  case RCEvent.EventType.protect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in protect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5900' ref attribs);                      break;                  case RCEvent.EventType.unprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in unprotect is fine' it's just the pagetitle                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(5901' ref attribs);                      break;                  case RCEvent.EventType.modifyprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in modifyprotect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5902' ref attribs);                      break;              }
Magic Number,CVNBot,Program,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Program.cs,ReactToRCEvent,The following statement contains a magic number: switch (r.eventtype)              {                  // This case handles:                  // - New page creations                  // - Page edits                  case RCEvent.EventType.edit:                      String diffsize;                      if (r.szdiff >= 0)                          diffsize = "+" + r.szdiff.ToString();                      else                          diffsize = r.szdiff.ToString();                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("size"' diffsize);                      attribs.Add("url"' r.url);                      attribs.Add("reason"' r.comment);                        // This block handles: New page creations                      if (r.newpage)                      {                          bool createSpecial = false;                            // New pages created by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.newBig)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5010 + userOffset' ref attribs);                          }                          else if (r.szdiff <= config.newSmall)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5020 + userOffset' ref attribs);                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5000 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Article is on watchlist                          // - Page title matches a BNA pattern                          // - Edit summary matches a BES pattern                            // Is the article on the watchlist?                          ListMatch wlm = listman.IsWatchedArticle(r.title' r.project);                          if (wlm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5030 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16301' (String)attribs["article"]));                              break;                          }                            // Does the page title match a BNA pattern?                          ListMatch eslm = listman.MatchesList(r.title' 12);                          if (eslm.Success)                          {                              // Matches BNA                              attribs.Add("watchword"' eslm.matchedItem);                              message = GetMessage(5040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' eslm.matchedItem));                              break;                          }                            // Does the edit summary match a BES pattern?                          ListMatch lm = listman.MatchesList(r.comment' 20);                          if (lm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' lm.matchedItem);                              message = GetMessage(95040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' lm.matchedItem));                              break;                          }                            // If we're still here that means                          // - the create didn't get ignored by adminlist or whitelist                          // - the create didn't match any watch patterns                          // Now' if any of the following is true' we'll must report it.                          // - Create by blacklisted user                          // - Create by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // Created by an unlisted reguser with non-special create size' ignore                          if ((userOffset == 4) && !createSpecial)                              return;                            // Else: Create had special size' so let it shown (default)' don't return!                      }                      // This block handles: Page edits                      else                      {                          bool editSpecial = false;                            // Edit by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.editBig)                          {                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5110 + userOffset' ref attribs);                              editSpecial = true;                          }                          else if (r.szdiff <= config.editBlank)                          {                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5120 + userOffset' ref attribs);                              editSpecial = true;                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5100 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Edit summary matches a BES pattern                          // - Edit blanked the page                          // - Edit replaced the page                          // - Article is on watchlist                            // Does the edit summary match a BES pattern?                          ListMatch elm = listman.MatchesList(r.comment' 20);                          if (elm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' elm.matchedItem);                              message = GetMessage(95130 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16310' r.comment' (String)attribs["article"]));                              break;                          }                            // Did the user user blank the page?                          if (project.rautosummBlank.IsMatch(r.comment))                          {                              message = GetMessage(96010 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16311' (String)attribs["article"]));                              break;                          }                            Match rplm = project.rautosummReplace.Match(r.comment);                          if (rplm.Success)                          {                              // The user replaced the page.                              try                              {                                  attribs.Add("profanity"' rplm.Groups["item1"].Captures[0].Value);                                  message = GetMessage(96020 + userOffset' ref attribs);                              }                              catch (ArgumentOutOfRangeException)                              {                                  // This wiki probably doesn't have a profanity attribute                                  message = GetMessage(96030 + userOffset' ref attribs);                              }                              break;                          }                            // Is the article on the watchlist?                          ListMatch welm = listman.IsWatchedArticle(r.title' r.project);                          if (welm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5130 + userOffset' ref attribs);                              break;                          }                            // If we're still here that means                          // - the edit didn't get ignored by adminlist or whitelist                          // - the edit didn't match any watch patterns                          // Now' if any of the following is true' we must still report it.                          // - Edit by blacklisted user                          // - Edit by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // If nothing special about the edit' return to ignore                          if (!editSpecial)                              return;                      }                      break;                  case RCEvent.EventType.move:                      // if moves are softhidden hide moves by admin' bot or whitelist                      if ((config.feedFilterEventMove == 2) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                      {                          return;                      }                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("fromname"' project.interwikiLink + r.title);                      attribs.Add("cfromname"' r.title);                      attribs.Add("toname"' project.interwikiLink + r.movedTo);                      attribs.Add("ctoname"' r.movedTo);                      attribs.Add("url"' r.blockLength); //The blockLength field stores the moveFrom URL                      attribs.Add("reason"' r.comment);                      message = GetMessage(5500 + userOffset' ref attribs);                      break;                  case RCEvent.EventType.block:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.title.Split(new char[] { ':' }' 2)[1]));                      attribs.Add("length"' r.blockLength);                      attribs.Add("reason"' r.comment);                      message = GetMessage(5400' ref attribs);                      //If the blocked user (r.title) isn't botlisted' add to blacklist                      if (listman.ClassifyEditor(r.title.Split(new char[] { ':' }' 2)[1]' r.project) != ListManager.UserType.bot)                      {                          //If this isn't an indefinite/infinite block' add to blacklist                          if ((r.blockLength.ToLower() != "indefinite") && (r.blockLength.ToLower() != "infinite"))                          {                                                               // 2'678'400 seconds = 744 hours = 31 days                              int listLen = Convert.ToInt32(CVNBotUtils.ParseDateTimeLength(r.blockLength' 2678400) * 2.5);                              string blComment = "Autoblacklist: " + r.comment + " on " + r.project;                              message += "\n" + listman.AddUserToList(r.title.Split(new char[] { ':' }' 2)[1]' "" //Global bl                                  ' ListManager.UserType.blacklisted' r.user' blComment' listLen);                              Broadcast("BL"' "ADD"' r.title.Split(new char[] { ':' }' 2)[1]' listLen' blComment' r.user);                          }                      }                      break;                  case RCEvent.EventType.unblock:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("reason"' r.comment);                      message = GetMessage(5700' ref attribs);                      break;                  case RCEvent.EventType.delete:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      attribs.Add("reason"' r.comment);                      message = GetMessage(05300' ref attribs);                      break;                  case RCEvent.EventType.newuser:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("caurl"' "https://meta.wikimedia.org/wiki/Special:CentralAuth/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch = listman.MatchesList(r.user' 11);                      if (bnuMatch.Success && feedFilterThisEvent == 1)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch.matchedItem);                          attribs.Add("wwreason"' bnuMatch.matchedReason);                          message = GetMessage(5201' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5200' ref attribs);                      }                      break;                  case RCEvent.EventType.newuser2:                      attribs.Add("creator"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ccreator"' r.user);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.title);                      attribs.Add("ceditor"' r.title);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch2 = listman.MatchesList(r.user' 11);                      if (bnuMatch2.Success)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch2.matchedItem);                          attribs.Add("wwreason"' bnuMatch2.matchedReason);                          message = GetMessage(5211' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch2.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5210' ref attribs);                      }                      break;                  case RCEvent.EventType.upload:                      int uMsg = 5600;                        // Check if the edit summary matches BES                      ListMatch ubes2 = listman.MatchesList(r.comment' 20);                      if (ubes2.Success)                      {                          attribs.Add("watchword"' ubes2.matchedItem);                          attribs.Add("lmreason"' ubes2.matchedReason);                          uMsg = 95620;                      }                        // Now check if the title matches BES                      ListMatch ubes1 = listman.MatchesList(r.title' 20);                      if (ubes1.Success)                      {                          attribs.Add("watchword"' ubes1.matchedItem);                          attribs.Add("lmreason"' ubes1.matchedReason);                          uMsg = 95620;                      }                        // Check if upload is watched                      ListMatch uwa = listman.IsWatchedArticle(r.title' r.project);                      if (uwa.Success)                          uMsg = 5610;                        // If normal and uploaded by an admin' bot or whitelisted person always hide                      if ((uMsg == 5600) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                          return;                        // if normal and uploads are softhidden hide normal user and anon aswell                      if ((uMsg == 5600) && (config.feedFilterEventUpload == 2) && ((userOffset == 3) || (userOffset == 4)))                          return;                        // If our message is 95620' we might need to truncate r.comment                      if (uMsg == 95620)                      {                          if (r.comment.Length > 25)                              r.comment = r.comment.Substring(0' 23) + "...";                      }                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("uploaditem"' project.interwikiLink + r.title);                      attribs.Add("cuploaditem"' r.title);                      attribs.Add("reason"' r.comment);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(userOffset + uMsg' ref attribs);                      break;                  case RCEvent.EventType.protect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in protect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5900' ref attribs);                      break;                  case RCEvent.EventType.unprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in unprotect is fine' it's just the pagetitle                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(5901' ref attribs);                      break;                  case RCEvent.EventType.modifyprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in modifyprotect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5902' ref attribs);                      break;              }
Magic Number,CVNBot,Program,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Program.cs,ReactToRCEvent,The following statement contains a magic number: switch (r.eventtype)              {                  // This case handles:                  // - New page creations                  // - Page edits                  case RCEvent.EventType.edit:                      String diffsize;                      if (r.szdiff >= 0)                          diffsize = "+" + r.szdiff.ToString();                      else                          diffsize = r.szdiff.ToString();                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("size"' diffsize);                      attribs.Add("url"' r.url);                      attribs.Add("reason"' r.comment);                        // This block handles: New page creations                      if (r.newpage)                      {                          bool createSpecial = false;                            // New pages created by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.newBig)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5010 + userOffset' ref attribs);                          }                          else if (r.szdiff <= config.newSmall)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5020 + userOffset' ref attribs);                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5000 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Article is on watchlist                          // - Page title matches a BNA pattern                          // - Edit summary matches a BES pattern                            // Is the article on the watchlist?                          ListMatch wlm = listman.IsWatchedArticle(r.title' r.project);                          if (wlm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5030 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16301' (String)attribs["article"]));                              break;                          }                            // Does the page title match a BNA pattern?                          ListMatch eslm = listman.MatchesList(r.title' 12);                          if (eslm.Success)                          {                              // Matches BNA                              attribs.Add("watchword"' eslm.matchedItem);                              message = GetMessage(5040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' eslm.matchedItem));                              break;                          }                            // Does the edit summary match a BES pattern?                          ListMatch lm = listman.MatchesList(r.comment' 20);                          if (lm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' lm.matchedItem);                              message = GetMessage(95040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' lm.matchedItem));                              break;                          }                            // If we're still here that means                          // - the create didn't get ignored by adminlist or whitelist                          // - the create didn't match any watch patterns                          // Now' if any of the following is true' we'll must report it.                          // - Create by blacklisted user                          // - Create by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // Created by an unlisted reguser with non-special create size' ignore                          if ((userOffset == 4) && !createSpecial)                              return;                            // Else: Create had special size' so let it shown (default)' don't return!                      }                      // This block handles: Page edits                      else                      {                          bool editSpecial = false;                            // Edit by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.editBig)                          {                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5110 + userOffset' ref attribs);                              editSpecial = true;                          }                          else if (r.szdiff <= config.editBlank)                          {                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5120 + userOffset' ref attribs);                              editSpecial = true;                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5100 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Edit summary matches a BES pattern                          // - Edit blanked the page                          // - Edit replaced the page                          // - Article is on watchlist                            // Does the edit summary match a BES pattern?                          ListMatch elm = listman.MatchesList(r.comment' 20);                          if (elm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' elm.matchedItem);                              message = GetMessage(95130 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16310' r.comment' (String)attribs["article"]));                              break;                          }                            // Did the user user blank the page?                          if (project.rautosummBlank.IsMatch(r.comment))                          {                              message = GetMessage(96010 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16311' (String)attribs["article"]));                              break;                          }                            Match rplm = project.rautosummReplace.Match(r.comment);                          if (rplm.Success)                          {                              // The user replaced the page.                              try                              {                                  attribs.Add("profanity"' rplm.Groups["item1"].Captures[0].Value);                                  message = GetMessage(96020 + userOffset' ref attribs);                              }                              catch (ArgumentOutOfRangeException)                              {                                  // This wiki probably doesn't have a profanity attribute                                  message = GetMessage(96030 + userOffset' ref attribs);                              }                              break;                          }                            // Is the article on the watchlist?                          ListMatch welm = listman.IsWatchedArticle(r.title' r.project);                          if (welm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5130 + userOffset' ref attribs);                              break;                          }                            // If we're still here that means                          // - the edit didn't get ignored by adminlist or whitelist                          // - the edit didn't match any watch patterns                          // Now' if any of the following is true' we must still report it.                          // - Edit by blacklisted user                          // - Edit by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // If nothing special about the edit' return to ignore                          if (!editSpecial)                              return;                      }                      break;                  case RCEvent.EventType.move:                      // if moves are softhidden hide moves by admin' bot or whitelist                      if ((config.feedFilterEventMove == 2) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                      {                          return;                      }                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("fromname"' project.interwikiLink + r.title);                      attribs.Add("cfromname"' r.title);                      attribs.Add("toname"' project.interwikiLink + r.movedTo);                      attribs.Add("ctoname"' r.movedTo);                      attribs.Add("url"' r.blockLength); //The blockLength field stores the moveFrom URL                      attribs.Add("reason"' r.comment);                      message = GetMessage(5500 + userOffset' ref attribs);                      break;                  case RCEvent.EventType.block:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.title.Split(new char[] { ':' }' 2)[1]));                      attribs.Add("length"' r.blockLength);                      attribs.Add("reason"' r.comment);                      message = GetMessage(5400' ref attribs);                      //If the blocked user (r.title) isn't botlisted' add to blacklist                      if (listman.ClassifyEditor(r.title.Split(new char[] { ':' }' 2)[1]' r.project) != ListManager.UserType.bot)                      {                          //If this isn't an indefinite/infinite block' add to blacklist                          if ((r.blockLength.ToLower() != "indefinite") && (r.blockLength.ToLower() != "infinite"))                          {                                                               // 2'678'400 seconds = 744 hours = 31 days                              int listLen = Convert.ToInt32(CVNBotUtils.ParseDateTimeLength(r.blockLength' 2678400) * 2.5);                              string blComment = "Autoblacklist: " + r.comment + " on " + r.project;                              message += "\n" + listman.AddUserToList(r.title.Split(new char[] { ':' }' 2)[1]' "" //Global bl                                  ' ListManager.UserType.blacklisted' r.user' blComment' listLen);                              Broadcast("BL"' "ADD"' r.title.Split(new char[] { ':' }' 2)[1]' listLen' blComment' r.user);                          }                      }                      break;                  case RCEvent.EventType.unblock:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("reason"' r.comment);                      message = GetMessage(5700' ref attribs);                      break;                  case RCEvent.EventType.delete:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      attribs.Add("reason"' r.comment);                      message = GetMessage(05300' ref attribs);                      break;                  case RCEvent.EventType.newuser:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("caurl"' "https://meta.wikimedia.org/wiki/Special:CentralAuth/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch = listman.MatchesList(r.user' 11);                      if (bnuMatch.Success && feedFilterThisEvent == 1)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch.matchedItem);                          attribs.Add("wwreason"' bnuMatch.matchedReason);                          message = GetMessage(5201' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5200' ref attribs);                      }                      break;                  case RCEvent.EventType.newuser2:                      attribs.Add("creator"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ccreator"' r.user);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.title);                      attribs.Add("ceditor"' r.title);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch2 = listman.MatchesList(r.user' 11);                      if (bnuMatch2.Success)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch2.matchedItem);                          attribs.Add("wwreason"' bnuMatch2.matchedReason);                          message = GetMessage(5211' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch2.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5210' ref attribs);                      }                      break;                  case RCEvent.EventType.upload:                      int uMsg = 5600;                        // Check if the edit summary matches BES                      ListMatch ubes2 = listman.MatchesList(r.comment' 20);                      if (ubes2.Success)                      {                          attribs.Add("watchword"' ubes2.matchedItem);                          attribs.Add("lmreason"' ubes2.matchedReason);                          uMsg = 95620;                      }                        // Now check if the title matches BES                      ListMatch ubes1 = listman.MatchesList(r.title' 20);                      if (ubes1.Success)                      {                          attribs.Add("watchword"' ubes1.matchedItem);                          attribs.Add("lmreason"' ubes1.matchedReason);                          uMsg = 95620;                      }                        // Check if upload is watched                      ListMatch uwa = listman.IsWatchedArticle(r.title' r.project);                      if (uwa.Success)                          uMsg = 5610;                        // If normal and uploaded by an admin' bot or whitelisted person always hide                      if ((uMsg == 5600) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                          return;                        // if normal and uploads are softhidden hide normal user and anon aswell                      if ((uMsg == 5600) && (config.feedFilterEventUpload == 2) && ((userOffset == 3) || (userOffset == 4)))                          return;                        // If our message is 95620' we might need to truncate r.comment                      if (uMsg == 95620)                      {                          if (r.comment.Length > 25)                              r.comment = r.comment.Substring(0' 23) + "...";                      }                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("uploaditem"' project.interwikiLink + r.title);                      attribs.Add("cuploaditem"' r.title);                      attribs.Add("reason"' r.comment);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(userOffset + uMsg' ref attribs);                      break;                  case RCEvent.EventType.protect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in protect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5900' ref attribs);                      break;                  case RCEvent.EventType.unprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in unprotect is fine' it's just the pagetitle                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(5901' ref attribs);                      break;                  case RCEvent.EventType.modifyprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in modifyprotect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5902' ref attribs);                      break;              }
Magic Number,CVNBot,Program,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Program.cs,ReactToRCEvent,The following statement contains a magic number: feedFilterThisEvent == 3 || feedFilterThisUser == 3
Magic Number,CVNBot,Program,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Program.cs,ReactToRCEvent,The following statement contains a magic number: feedFilterThisEvent == 3 || feedFilterThisUser == 3
Magic Number,CVNBot,Program,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Program.cs,PartIRC,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,CVNBot,Project,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Project.cs,RetrieveWikiDetails,The following statement contains a magic number: Messages.Add("1movedto2"'new MessagesOption(2' "moveRegex"' false));
Magic Number,CVNBot,Project,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Project.cs,RetrieveWikiDetails,The following statement contains a magic number: Messages.Add("1movedto2_redir"' new MessagesOption(2' "moveredirRegex"' false));
Magic Number,CVNBot,Project,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Project.cs,RetrieveWikiDetails,The following statement contains a magic number: Messages.Add("Blocklogentry"' new MessagesOption(3' "blockRegex"' true));
Magic Number,CVNBot,Project,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Project.cs,RetrieveWikiDetails,The following statement contains a magic number: Messages.Add("Reblock-logentry"' new MessagesOption(3' "reblockRegex"' false));
Magic Number,CVNBot,Project,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Project.cs,GenerateRegex,The following statement contains a magic number: reqCount >= 2
Magic Number,CVNBot,Project,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Project.cs,TranslateNamespace,The following statement contains a magic number: switch (((Project)Program.prjlist[project]).DetectNamespace(originalTitle))                  {                      case -2:                          nsEnglish = "Media";                          break;                      case -1:                          nsEnglish = "Special";                          break;                      case 1:                          nsEnglish = "Talk";                          break;                      case 2:                          nsEnglish = "User";                          break;                      case 3:                          nsEnglish = "User talk";                          break;                      case 4:                          nsEnglish = "Project";                          break;                      case 5:                          nsEnglish = "Project talk";                          break;                      case 6:                          nsEnglish = "Image";                          break;                      case 7:                          nsEnglish = "Image talk";                          break;                      case 8:                          nsEnglish = "MediaWiki";                          break;                      case 9:                          nsEnglish = "MediaWiki talk";                          break;                      case 10:                          nsEnglish = "Template";                          break;                      case 11:                          nsEnglish = "Template talk";                          break;                      case 12:                          nsEnglish = "Help";                          break;                      case 13:                          nsEnglish = "Help talk";                          break;                      case 14:                          nsEnglish = "Category";                          break;                      case 15:                          nsEnglish = "Category talk";                          break;                      default:                          return originalTitle;                  }
Magic Number,CVNBot,Project,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Project.cs,TranslateNamespace,The following statement contains a magic number: switch (((Project)Program.prjlist[project]).DetectNamespace(originalTitle))                  {                      case -2:                          nsEnglish = "Media";                          break;                      case -1:                          nsEnglish = "Special";                          break;                      case 1:                          nsEnglish = "Talk";                          break;                      case 2:                          nsEnglish = "User";                          break;                      case 3:                          nsEnglish = "User talk";                          break;                      case 4:                          nsEnglish = "Project";                          break;                      case 5:                          nsEnglish = "Project talk";                          break;                      case 6:                          nsEnglish = "Image";                          break;                      case 7:                          nsEnglish = "Image talk";                          break;                      case 8:                          nsEnglish = "MediaWiki";                          break;                      case 9:                          nsEnglish = "MediaWiki talk";                          break;                      case 10:                          nsEnglish = "Template";                          break;                      case 11:                          nsEnglish = "Template talk";                          break;                      case 12:                          nsEnglish = "Help";                          break;                      case 13:                          nsEnglish = "Help talk";                          break;                      case 14:                          nsEnglish = "Category";                          break;                      case 15:                          nsEnglish = "Category talk";                          break;                      default:                          return originalTitle;                  }
Magic Number,CVNBot,Project,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Project.cs,TranslateNamespace,The following statement contains a magic number: switch (((Project)Program.prjlist[project]).DetectNamespace(originalTitle))                  {                      case -2:                          nsEnglish = "Media";                          break;                      case -1:                          nsEnglish = "Special";                          break;                      case 1:                          nsEnglish = "Talk";                          break;                      case 2:                          nsEnglish = "User";                          break;                      case 3:                          nsEnglish = "User talk";                          break;                      case 4:                          nsEnglish = "Project";                          break;                      case 5:                          nsEnglish = "Project talk";                          break;                      case 6:                          nsEnglish = "Image";                          break;                      case 7:                          nsEnglish = "Image talk";                          break;                      case 8:                          nsEnglish = "MediaWiki";                          break;                      case 9:                          nsEnglish = "MediaWiki talk";                          break;                      case 10:                          nsEnglish = "Template";                          break;                      case 11:                          nsEnglish = "Template talk";                          break;                      case 12:                          nsEnglish = "Help";                          break;                      case 13:                          nsEnglish = "Help talk";                          break;                      case 14:                          nsEnglish = "Category";                          break;                      case 15:                          nsEnglish = "Category talk";                          break;                      default:                          return originalTitle;                  }
Magic Number,CVNBot,Project,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Project.cs,TranslateNamespace,The following statement contains a magic number: switch (((Project)Program.prjlist[project]).DetectNamespace(originalTitle))                  {                      case -2:                          nsEnglish = "Media";                          break;                      case -1:                          nsEnglish = "Special";                          break;                      case 1:                          nsEnglish = "Talk";                          break;                      case 2:                          nsEnglish = "User";                          break;                      case 3:                          nsEnglish = "User talk";                          break;                      case 4:                          nsEnglish = "Project";                          break;                      case 5:                          nsEnglish = "Project talk";                          break;                      case 6:                          nsEnglish = "Image";                          break;                      case 7:                          nsEnglish = "Image talk";                          break;                      case 8:                          nsEnglish = "MediaWiki";                          break;                      case 9:                          nsEnglish = "MediaWiki talk";                          break;                      case 10:                          nsEnglish = "Template";                          break;                      case 11:                          nsEnglish = "Template talk";                          break;                      case 12:                          nsEnglish = "Help";                          break;                      case 13:                          nsEnglish = "Help talk";                          break;                      case 14:                          nsEnglish = "Category";                          break;                      case 15:                          nsEnglish = "Category talk";                          break;                      default:                          return originalTitle;                  }
Magic Number,CVNBot,Project,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Project.cs,TranslateNamespace,The following statement contains a magic number: switch (((Project)Program.prjlist[project]).DetectNamespace(originalTitle))                  {                      case -2:                          nsEnglish = "Media";                          break;                      case -1:                          nsEnglish = "Special";                          break;                      case 1:                          nsEnglish = "Talk";                          break;                      case 2:                          nsEnglish = "User";                          break;                      case 3:                          nsEnglish = "User talk";                          break;                      case 4:                          nsEnglish = "Project";                          break;                      case 5:                          nsEnglish = "Project talk";                          break;                      case 6:                          nsEnglish = "Image";                          break;                      case 7:                          nsEnglish = "Image talk";                          break;                      case 8:                          nsEnglish = "MediaWiki";                          break;                      case 9:                          nsEnglish = "MediaWiki talk";                          break;                      case 10:                          nsEnglish = "Template";                          break;                      case 11:                          nsEnglish = "Template talk";                          break;                      case 12:                          nsEnglish = "Help";                          break;                      case 13:                          nsEnglish = "Help talk";                          break;                      case 14:                          nsEnglish = "Category";                          break;                      case 15:                          nsEnglish = "Category talk";                          break;                      default:                          return originalTitle;                  }
Magic Number,CVNBot,Project,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Project.cs,TranslateNamespace,The following statement contains a magic number: switch (((Project)Program.prjlist[project]).DetectNamespace(originalTitle))                  {                      case -2:                          nsEnglish = "Media";                          break;                      case -1:                          nsEnglish = "Special";                          break;                      case 1:                          nsEnglish = "Talk";                          break;                      case 2:                          nsEnglish = "User";                          break;                      case 3:                          nsEnglish = "User talk";                          break;                      case 4:                          nsEnglish = "Project";                          break;                      case 5:                          nsEnglish = "Project talk";                          break;                      case 6:                          nsEnglish = "Image";                          break;                      case 7:                          nsEnglish = "Image talk";                          break;                      case 8:                          nsEnglish = "MediaWiki";                          break;                      case 9:                          nsEnglish = "MediaWiki talk";                          break;                      case 10:                          nsEnglish = "Template";                          break;                      case 11:                          nsEnglish = "Template talk";                          break;                      case 12:                          nsEnglish = "Help";                          break;                      case 13:                          nsEnglish = "Help talk";                          break;                      case 14:                          nsEnglish = "Category";                          break;                      case 15:                          nsEnglish = "Category talk";                          break;                      default:                          return originalTitle;                  }
Magic Number,CVNBot,Project,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Project.cs,TranslateNamespace,The following statement contains a magic number: switch (((Project)Program.prjlist[project]).DetectNamespace(originalTitle))                  {                      case -2:                          nsEnglish = "Media";                          break;                      case -1:                          nsEnglish = "Special";                          break;                      case 1:                          nsEnglish = "Talk";                          break;                      case 2:                          nsEnglish = "User";                          break;                      case 3:                          nsEnglish = "User talk";                          break;                      case 4:                          nsEnglish = "Project";                          break;                      case 5:                          nsEnglish = "Project talk";                          break;                      case 6:                          nsEnglish = "Image";                          break;                      case 7:                          nsEnglish = "Image talk";                          break;                      case 8:                          nsEnglish = "MediaWiki";                          break;                      case 9:                          nsEnglish = "MediaWiki talk";                          break;                      case 10:                          nsEnglish = "Template";                          break;                      case 11:                          nsEnglish = "Template talk";                          break;                      case 12:                          nsEnglish = "Help";                          break;                      case 13:                          nsEnglish = "Help talk";                          break;                      case 14:                          nsEnglish = "Category";                          break;                      case 15:                          nsEnglish = "Category talk";                          break;                      default:                          return originalTitle;                  }
Magic Number,CVNBot,Project,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Project.cs,TranslateNamespace,The following statement contains a magic number: switch (((Project)Program.prjlist[project]).DetectNamespace(originalTitle))                  {                      case -2:                          nsEnglish = "Media";                          break;                      case -1:                          nsEnglish = "Special";                          break;                      case 1:                          nsEnglish = "Talk";                          break;                      case 2:                          nsEnglish = "User";                          break;                      case 3:                          nsEnglish = "User talk";                          break;                      case 4:                          nsEnglish = "Project";                          break;                      case 5:                          nsEnglish = "Project talk";                          break;                      case 6:                          nsEnglish = "Image";                          break;                      case 7:                          nsEnglish = "Image talk";                          break;                      case 8:                          nsEnglish = "MediaWiki";                          break;                      case 9:                          nsEnglish = "MediaWiki talk";                          break;                      case 10:                          nsEnglish = "Template";                          break;                      case 11:                          nsEnglish = "Template talk";                          break;                      case 12:                          nsEnglish = "Help";                          break;                      case 13:                          nsEnglish = "Help talk";                          break;                      case 14:                          nsEnglish = "Category";                          break;                      case 15:                          nsEnglish = "Category talk";                          break;                      default:                          return originalTitle;                  }
Magic Number,CVNBot,Project,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Project.cs,TranslateNamespace,The following statement contains a magic number: switch (((Project)Program.prjlist[project]).DetectNamespace(originalTitle))                  {                      case -2:                          nsEnglish = "Media";                          break;                      case -1:                          nsEnglish = "Special";                          break;                      case 1:                          nsEnglish = "Talk";                          break;                      case 2:                          nsEnglish = "User";                          break;                      case 3:                          nsEnglish = "User talk";                          break;                      case 4:                          nsEnglish = "Project";                          break;                      case 5:                          nsEnglish = "Project talk";                          break;                      case 6:                          nsEnglish = "Image";                          break;                      case 7:                          nsEnglish = "Image talk";                          break;                      case 8:                          nsEnglish = "MediaWiki";                          break;                      case 9:                          nsEnglish = "MediaWiki talk";                          break;                      case 10:                          nsEnglish = "Template";                          break;                      case 11:                          nsEnglish = "Template talk";                          break;                      case 12:                          nsEnglish = "Help";                          break;                      case 13:                          nsEnglish = "Help talk";                          break;                      case 14:                          nsEnglish = "Category";                          break;                      case 15:                          nsEnglish = "Category talk";                          break;                      default:                          return originalTitle;                  }
Magic Number,CVNBot,Project,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Project.cs,TranslateNamespace,The following statement contains a magic number: switch (((Project)Program.prjlist[project]).DetectNamespace(originalTitle))                  {                      case -2:                          nsEnglish = "Media";                          break;                      case -1:                          nsEnglish = "Special";                          break;                      case 1:                          nsEnglish = "Talk";                          break;                      case 2:                          nsEnglish = "User";                          break;                      case 3:                          nsEnglish = "User talk";                          break;                      case 4:                          nsEnglish = "Project";                          break;                      case 5:                          nsEnglish = "Project talk";                          break;                      case 6:                          nsEnglish = "Image";                          break;                      case 7:                          nsEnglish = "Image talk";                          break;                      case 8:                          nsEnglish = "MediaWiki";                          break;                      case 9:                          nsEnglish = "MediaWiki talk";                          break;                      case 10:                          nsEnglish = "Template";                          break;                      case 11:                          nsEnglish = "Template talk";                          break;                      case 12:                          nsEnglish = "Help";                          break;                      case 13:                          nsEnglish = "Help talk";                          break;                      case 14:                          nsEnglish = "Category";                          break;                      case 15:                          nsEnglish = "Category talk";                          break;                      default:                          return originalTitle;                  }
Magic Number,CVNBot,Project,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Project.cs,TranslateNamespace,The following statement contains a magic number: switch (((Project)Program.prjlist[project]).DetectNamespace(originalTitle))                  {                      case -2:                          nsEnglish = "Media";                          break;                      case -1:                          nsEnglish = "Special";                          break;                      case 1:                          nsEnglish = "Talk";                          break;                      case 2:                          nsEnglish = "User";                          break;                      case 3:                          nsEnglish = "User talk";                          break;                      case 4:                          nsEnglish = "Project";                          break;                      case 5:                          nsEnglish = "Project talk";                          break;                      case 6:                          nsEnglish = "Image";                          break;                      case 7:                          nsEnglish = "Image talk";                          break;                      case 8:                          nsEnglish = "MediaWiki";                          break;                      case 9:                          nsEnglish = "MediaWiki talk";                          break;                      case 10:                          nsEnglish = "Template";                          break;                      case 11:                          nsEnglish = "Template talk";                          break;                      case 12:                          nsEnglish = "Help";                          break;                      case 13:                          nsEnglish = "Help talk";                          break;                      case 14:                          nsEnglish = "Category";                          break;                      case 15:                          nsEnglish = "Category talk";                          break;                      default:                          return originalTitle;                  }
Magic Number,CVNBot,Project,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Project.cs,TranslateNamespace,The following statement contains a magic number: switch (((Project)Program.prjlist[project]).DetectNamespace(originalTitle))                  {                      case -2:                          nsEnglish = "Media";                          break;                      case -1:                          nsEnglish = "Special";                          break;                      case 1:                          nsEnglish = "Talk";                          break;                      case 2:                          nsEnglish = "User";                          break;                      case 3:                          nsEnglish = "User talk";                          break;                      case 4:                          nsEnglish = "Project";                          break;                      case 5:                          nsEnglish = "Project talk";                          break;                      case 6:                          nsEnglish = "Image";                          break;                      case 7:                          nsEnglish = "Image talk";                          break;                      case 8:                          nsEnglish = "MediaWiki";                          break;                      case 9:                          nsEnglish = "MediaWiki talk";                          break;                      case 10:                          nsEnglish = "Template";                          break;                      case 11:                          nsEnglish = "Template talk";                          break;                      case 12:                          nsEnglish = "Help";                          break;                      case 13:                          nsEnglish = "Help talk";                          break;                      case 14:                          nsEnglish = "Category";                          break;                      case 15:                          nsEnglish = "Category talk";                          break;                      default:                          return originalTitle;                  }
Magic Number,CVNBot,Project,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Project.cs,TranslateNamespace,The following statement contains a magic number: switch (((Project)Program.prjlist[project]).DetectNamespace(originalTitle))                  {                      case -2:                          nsEnglish = "Media";                          break;                      case -1:                          nsEnglish = "Special";                          break;                      case 1:                          nsEnglish = "Talk";                          break;                      case 2:                          nsEnglish = "User";                          break;                      case 3:                          nsEnglish = "User talk";                          break;                      case 4:                          nsEnglish = "Project";                          break;                      case 5:                          nsEnglish = "Project talk";                          break;                      case 6:                          nsEnglish = "Image";                          break;                      case 7:                          nsEnglish = "Image talk";                          break;                      case 8:                          nsEnglish = "MediaWiki";                          break;                      case 9:                          nsEnglish = "MediaWiki talk";                          break;                      case 10:                          nsEnglish = "Template";                          break;                      case 11:                          nsEnglish = "Template talk";                          break;                      case 12:                          nsEnglish = "Help";                          break;                      case 13:                          nsEnglish = "Help talk";                          break;                      case 14:                          nsEnglish = "Category";                          break;                      case 15:                          nsEnglish = "Category talk";                          break;                      default:                          return originalTitle;                  }
Magic Number,CVNBot,Project,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Project.cs,TranslateNamespace,The following statement contains a magic number: switch (((Project)Program.prjlist[project]).DetectNamespace(originalTitle))                  {                      case -2:                          nsEnglish = "Media";                          break;                      case -1:                          nsEnglish = "Special";                          break;                      case 1:                          nsEnglish = "Talk";                          break;                      case 2:                          nsEnglish = "User";                          break;                      case 3:                          nsEnglish = "User talk";                          break;                      case 4:                          nsEnglish = "Project";                          break;                      case 5:                          nsEnglish = "Project talk";                          break;                      case 6:                          nsEnglish = "Image";                          break;                      case 7:                          nsEnglish = "Image talk";                          break;                      case 8:                          nsEnglish = "MediaWiki";                          break;                      case 9:                          nsEnglish = "MediaWiki talk";                          break;                      case 10:                          nsEnglish = "Template";                          break;                      case 11:                          nsEnglish = "Template talk";                          break;                      case 12:                          nsEnglish = "Help";                          break;                      case 13:                          nsEnglish = "Help talk";                          break;                      case 14:                          nsEnglish = "Category";                          break;                      case 15:                          nsEnglish = "Category talk";                          break;                      default:                          return originalTitle;                  }
Magic Number,CVNBot,Project,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Project.cs,TranslateNamespace,The following statement contains a magic number: switch (((Project)Program.prjlist[project]).DetectNamespace(originalTitle))                  {                      case -2:                          nsEnglish = "Media";                          break;                      case -1:                          nsEnglish = "Special";                          break;                      case 1:                          nsEnglish = "Talk";                          break;                      case 2:                          nsEnglish = "User";                          break;                      case 3:                          nsEnglish = "User talk";                          break;                      case 4:                          nsEnglish = "Project";                          break;                      case 5:                          nsEnglish = "Project talk";                          break;                      case 6:                          nsEnglish = "Image";                          break;                      case 7:                          nsEnglish = "Image talk";                          break;                      case 8:                          nsEnglish = "MediaWiki";                          break;                      case 9:                          nsEnglish = "MediaWiki talk";                          break;                      case 10:                          nsEnglish = "Template";                          break;                      case 11:                          nsEnglish = "Template talk";                          break;                      case 12:                          nsEnglish = "Help";                          break;                      case 13:                          nsEnglish = "Help talk";                          break;                      case 14:                          nsEnglish = "Category";                          break;                      case 15:                          nsEnglish = "Category talk";                          break;                      default:                          return originalTitle;                  }
Magic Number,CVNBot,ProjectList,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\ProjectList.cs,AddNewProject,The following statement contains a magic number: string langPortion = projectName.Split(new char[] { '.' }' 2)[0];
Magic Number,CVNBot,ProjectList,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\ProjectList.cs,AddNewProject,The following statement contains a magic number: string projPortion = projectName.Split(new char[] { '.' }' 2)[1];
Magic Number,CVNBot,ProjectList,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\ProjectList.cs,AddNewProject,The following statement contains a magic number: throw new Exception(Program.GetFormatMessage(16400' projectName));
Magic Number,CVNBot,ProjectList,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\ProjectList.cs,DeleteProject,The following statement contains a magic number: throw new Exception(Program.GetFormatMessage(16401' projectName));
Magic Number,CVNBot,ProjectList,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\ProjectList.cs,DeleteProject,The following statement contains a magic number: Thread.Sleep(4000);
Magic Number,CVNBot,ProjectList,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\ProjectList.cs,ReloadAllWikis,The following statement contains a magic number: Thread.Sleep(600);
Magic Number,CVNBot,RCReader,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\RCReader.cs,InitiateConnection,The following statement contains a magic number: rcirc.Connect(serverName' 6667);
Magic Number,CVNBot,RCReader,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\RCReader.cs,InitiateConnection,The following statement contains a magic number: rcirc.Login(Program.config.botNick' "CVNBot"' 4' "CVNBot");
Magic Number,CVNBot,RCReader,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\RCReader.cs,Rcirc_OnChannelMessage,The following statement contains a magic number: string strippedmsg = stripBold.Replace(stripColours.Replace(CVNBotUtils.ReplaceStrMax(e.Data.Message' '\x03'' '\x04'' 14)' "\x03")' "");
Magic Number,CVNBot,RCReader,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\RCReader.cs,Rcirc_OnChannelMessage,The following statement contains a magic number: string[] fields = strippedmsg.Split(new char[] { '\x03' }' 15);
Magic Number,CVNBot,RCReader,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\RCReader.cs,Rcirc_OnChannelMessage,The following statement contains a magic number: fields[14] = fields[14].Substring(0' fields[14].Length - 1);
Magic Number,CVNBot,RCReader,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\RCReader.cs,Rcirc_OnChannelMessage,The following statement contains a magic number: fields[14] = fields[14].Substring(0' fields[14].Length - 1);
Magic Number,CVNBot,RCReader,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\RCReader.cs,Rcirc_OnChannelMessage,The following statement contains a magic number: fields[14] = fields[14].Substring(0' fields[14].Length - 1);
Magic Number,CVNBot,RCReader,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\RCReader.cs,Rcirc_OnChannelMessage,The following statement contains a magic number: fields[14].EndsWith("\x03")
Magic Number,CVNBot,RCReader,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\RCReader.cs,Rcirc_OnChannelMessage,The following statement contains a magic number: fields.Length == 15
Magic Number,CVNBot,RCReader,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\RCReader.cs,Rcirc_OnChannelMessage,The following statement contains a magic number: rce.title = Project.TranslateNamespace(rce.project' fields[2]);
Magic Number,CVNBot,RCReader,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\RCReader.cs,Rcirc_OnChannelMessage,The following statement contains a magic number: rce.url = CVNBotUtils.RootUrl(fields[6]);
Magic Number,CVNBot,RCReader,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\RCReader.cs,Rcirc_OnChannelMessage,The following statement contains a magic number: rce.user = fields[10];
Magic Number,CVNBot,RCReader,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\RCReader.cs,Rcirc_OnChannelMessage,The following statement contains a magic number: Match titlemo = project.rSpecialLogRegex.Match(fields[2]);
Magic Number,CVNBot,RCReader,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\RCReader.cs,Rcirc_OnChannelMessage,The following statement contains a magic number: rce.minor = fields[4].Contains("M");
Magic Number,CVNBot,RCReader,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\RCReader.cs,Rcirc_OnChannelMessage,The following statement contains a magic number: rce.newpage = fields[4].Contains("N");
Magic Number,CVNBot,RCReader,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\RCReader.cs,Rcirc_OnChannelMessage,The following statement contains a magic number: rce.botflag = fields[4].Contains("B");
Magic Number,CVNBot,RCReader,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\RCReader.cs,Rcirc_OnChannelMessage,The following statement contains a magic number: rce.comment = fields[14].Replace("\x03"' "");
Magic Number,CVNBot,RCReader,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\RCReader.cs,Rcirc_OnChannelMessage,The following statement contains a magic number: Match n = rszDiff.Match(fields[13]);
Magic Number,CVNBot,RCReader,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\RCReader.cs,Rcirc_OnChannelMessage,The following statement contains a magic number: rce.szdiff = Convert.ToInt32(n.Groups[2].Captures[0].Value);
Missing Default,CVNBot,CVNBotUtils,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\CVNBotUtils.cs,ParseDateTimeLength,The following switch statement is missing a default case: switch (parseStr)              {                  case "indefinite":                  case "infinite":                      return 0;                  case "tomorrow":                      return 24 * 3600;              }
Missing Default,CVNBot,CVNBotUtils,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\CVNBotUtils.cs,ParseDateTimeLength,The following switch statement is missing a default case: switch (unit)                  {                      case "year":                          sumSeconds += Convert.ToInt32(value) * 8760 * 3600; // 365 days                          break;                      case "month":                          sumSeconds += Convert.ToInt32(value) * 732 * 3600; // 30.5 days                          break;                      case "fortnight":                          sumSeconds += Convert.ToInt32(value) * 336 * 3600; // 14 days                          break;                      case "week":                          sumSeconds += Convert.ToInt32(value) * 168 * 3600; // 7 days                          break;                      case "day":                          sumSeconds += Convert.ToInt32(value) * 24 * 3600; // 24 hours                          break;                      case "hour":                          sumSeconds += Convert.ToInt32(value) * 3600; // 1 hour                          break;                      case "minute":                      case "min":                          sumSeconds += Convert.ToInt32(value) * 60; // 60 seconds                          break;                      case "second":                      case "sec":                          sumSeconds += Convert.ToInt32(value); // One second                          break;                  }
Missing Default,CVNBot,ListManager,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\ListManager.cs,ClassifyEditor,The following switch statement is missing a default case: switch (idr.GetInt32(0))                              {                                  case 2:                                      return UserType.admin;                                  case 5:                                      return UserType.bot;                              }
Missing Default,CVNBot,ListManager,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\ListManager.cs,ClassifyEditor,The following switch statement is missing a default case: switch (idr2.GetInt32(0))                          {                              case 0:                                  return UserType.whitelisted;                              case 1:                                  return UserType.blacklisted;                          }
Missing Default,CVNBot,Program,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Program.cs,Irc_OnChannelNotice,The following switch statement is missing a default case: switch (action)                      {                          case "ADD":                              switch (list)                              {                                  case "WL":                                      listman.AddUserToList(item' ""' ListManager.UserType.whitelisted' adder' reason' len);                                      break;                                  case "BL":                                      listman.AddUserToList(item' ""' ListManager.UserType.blacklisted' adder' reason' len);                                      break;                                  case "GL":                                      listman.AddUserToList(item' ""' ListManager.UserType.greylisted' adder' reason' len);                                      break;                                  case "BNU":                                      listman.AddItemToList(item' 11' adder' reason' len);                                      break;                                  case "BNA":                                      listman.AddItemToList(item' 12' adder' reason' len);                                      break;                                  case "BES":                                      listman.AddItemToList(item' 20' adder' reason' len);                                      break;                                  case "CVP":                                      listman.AddPageToWatchlist(item' ""' adder' reason' len);                                      break;                                      //Gracefully ignore unknown message types                              }                              break;                          case "DEL":                              switch (list)                              {                                  case "WL":                                      listman.DelUserFromList(item' ""' ListManager.UserType.whitelisted);                                      break;                                  case "BL":                                      listman.DelUserFromList(item' ""' ListManager.UserType.blacklisted);                                      break;                                  case "GL":                                      listman.DelUserFromList(item' ""' ListManager.UserType.greylisted);                                      break;                                  case "BNU":                                      listman.DelItemFromList(item' 11);                                      break;                                  case "BNA":                                      listman.DelItemFromList(item' 12);                                      break;                                  case "BES":                                      listman.DelItemFromList(item' 20);                                      break;                                  case "CVP":                                      listman.DelPageFromWatchlist(item' "");                                      break;                                      //Gracefully ignore unknown message types                              }                              break;                          case "FIND":                              if (list == "BLEEP")                                  if (prjlist.ContainsKey(item))                                  SendMessageF(SendType.Action' reason' "has " + item + "' " + adder + " :D"' Priority.High);                              break;                          case "COUNT":                              if (list == "BLEEP")                                  SendMessageF(SendType.Action' reason' "owns " + prjlist.Count.ToString() + " wikis; version is " + version'                                               Priority.High);                              break;                          case "CONFIG":                              if (list == "BLEEP")                                  BotConfigMsg(reason);                              break;                                //Gracefully ignore unknown action types                      }
Missing Default,CVNBot,Program,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Program.cs,Irc_OnChannelNotice,The following switch statement is missing a default case: switch (list)                              {                                  case "WL":                                      listman.AddUserToList(item' ""' ListManager.UserType.whitelisted' adder' reason' len);                                      break;                                  case "BL":                                      listman.AddUserToList(item' ""' ListManager.UserType.blacklisted' adder' reason' len);                                      break;                                  case "GL":                                      listman.AddUserToList(item' ""' ListManager.UserType.greylisted' adder' reason' len);                                      break;                                  case "BNU":                                      listman.AddItemToList(item' 11' adder' reason' len);                                      break;                                  case "BNA":                                      listman.AddItemToList(item' 12' adder' reason' len);                                      break;                                  case "BES":                                      listman.AddItemToList(item' 20' adder' reason' len);                                      break;                                  case "CVP":                                      listman.AddPageToWatchlist(item' ""' adder' reason' len);                                      break;                                      //Gracefully ignore unknown message types                              }
Missing Default,CVNBot,Program,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Program.cs,Irc_OnChannelNotice,The following switch statement is missing a default case: switch (list)                              {                                  case "WL":                                      listman.DelUserFromList(item' ""' ListManager.UserType.whitelisted);                                      break;                                  case "BL":                                      listman.DelUserFromList(item' ""' ListManager.UserType.blacklisted);                                      break;                                  case "GL":                                      listman.DelUserFromList(item' ""' ListManager.UserType.greylisted);                                      break;                                  case "BNU":                                      listman.DelItemFromList(item' 11);                                      break;                                  case "BNA":                                      listman.DelItemFromList(item' 12);                                      break;                                  case "BES":                                      listman.DelItemFromList(item' 20);                                      break;                                  case "CVP":                                      listman.DelPageFromWatchlist(item' "");                                      break;                                      //Gracefully ignore unknown message types                              }
Missing Default,CVNBot,Program,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Program.cs,Irc_OnChannelMessage,The following switch statement is missing a default case: switch (command)                  {                      case "quit":                          if (!HasPrivileges('@'' ref e))                              return;                          logger.Info(e.Data.Nick + " ordered a quit");                          PartIRC(rawConfig["partmsg"]);                          Exit();                          break;                      case "restart":                          if (!HasPrivileges('@'' ref e))                              return;                          logger.Info(e.Data.Nick + " ordered a restart");                          PartIRC("Rebooting by order of " + e.Data.Nick + " ...");                          Restart();                          break;                      case "status":                          TimeSpan ago = DateTime.Now.Subtract(rcirc.lastMessage);                          SendMessageF(SendType.Message' e.Data.Channel' "Last message was received on RCReader "                                       + ago.TotalSeconds.ToString() + " seconds ago"' Priority.High);                          break;                      case "help":                          SendMessageF(SendType.Message' e.Data.Channel' (String)msgs["20005"]' Priority.High);                          break;                      case "version":                      case "settings":                      case "config":                          BotConfigMsg(e.Data.Channel);                          if (cmdParams[0] == "all")                          {                              Broadcast("BLEEP"' "CONFIG"' "BLEEP"' 0' e.Data.Channel' e.Data.Nick);                          }                          break;                      case "msgs":                          // Reloads messages                          if (!HasPrivileges('@'' ref e))                              return;                          ReadMessages(rawConfig["messages"]);                          SendMessageF(SendType.Message' e.Data.Channel' "Re-read messages"' Priority.High);                          break;                      case "reload":                          // Reloads wiki data for a project                          if (!HasPrivileges('@'' ref e))                              return;                            if (!prjlist.ContainsKey(cmdParams[0]))                          {                              SendMessageF(SendType.Message' e.Data.Channel' "Project " + cmdParams[0] + " is not loaded"' Priority.High);                              return;                          }                            try                          {                                ((Project)prjlist[cmdParams[0]]).RetrieveWikiDetails();                              SendMessageF(SendType.Message' e.Data.Channel' "Reloaded project " + cmdParams[0]' Priority.High);                          }                          catch (Exception ex)                          {  							SendMessageF(SendType.Message' e.Data.Channel' "Unable to reload: " + ex.Message' Priority.High);                              logger.Error("Reload project failed"' ex);                          }                          break;                      case "load":                          if (!HasPrivileges('@'' ref e))                              return;                          try                          {                              if (cmdParams.Length == 2)                                  prjlist.AddNewProject(cmdParams[0]' cmdParams[1]);                              else                                  prjlist.AddNewProject(cmdParams[0]' "");                                SendMessageF(SendType.Message' e.Data.Channel' "Loaded new project " + cmdParams[0]' Priority.High);                              // Automatically get admins and bots                              SendMessageF(SendType.Message' e.Data.Channel' listman.ConfigGetAdmins(cmdParams[0])' Priority.High);                              SendMessageF(SendType.Message' e.Data.Channel' listman.ConfigGetBots(cmdParams[0])' Priority.High);                          }                          catch (Exception ex)                          {                              SendMessageF(SendType.Message' e.Data.Channel' "Unable to add project: " + ex.Message' Priority.High);                              logger.Error("Add project failed"' ex);                          }                          break;                      case "bleep":                          if (!HasPrivileges('+'' ref e))                              return;                          try                          {                              if (cmdParams[0].Length > 0)                              {                                  if (prjlist.ContainsKey(cmdParams[0]))                                  {                                      SendMessageF(SendType.Action' e.Data.Channel' "has " + cmdParams[0] + "' " + e.Data.Nick + " :D"' Priority.High);                                  }                                  else                                  {                                      Broadcast("BLEEP"' "FIND"' cmdParams[0]' 0' e.Data.Channel' e.Data.Nick);                                      SendMessageF(SendType.Message' e.Data.Channel' "Bleeped. Please wait for a reply."' Priority.High);                                  }                              }                          }                          catch (Exception ex)                          {                              SendMessageF(SendType.Message' e.Data.Channel' "Unable to bleep: " + ex.Message' Priority.High);                          }                          break;                      case "count":                          if (!HasPrivileges('+'' ref e))                              return;                          Broadcast("BLEEP"' "COUNT"' "BLEEP"' 0' e.Data.Channel' e.Data.Nick);                          SendMessageF(SendType.Action' e.Data.Channel' "owns " + prjlist.Count.ToString() + " wikis; version is " + version'                                       Priority.High);                          break;                      case "drop":                          if (!HasPrivileges('@'' ref e))                              return;                          try                          {                              prjlist.DeleteProject(cmdParams[0]);                              SendMessageF(SendType.Message' e.Data.Channel' "Deleted project " + cmdParams[0]' Priority.High);                          }                          catch (Exception ex)                          {                              SendMessageF(SendType.Message' e.Data.Channel' "Unable to delete project: " + ex.Message' Priority.High);                              logger.Error("Delete project failed"' ex);                          }                          break;                      case "list":                          string result = "Currently monitoring: ";                          foreach (string p in prjlist.Keys)                          {                              result += p + " ";                          }                          result += "(Total: " + prjlist.Count.ToString() + " wikis)";                          SendMessageFMulti(SendType.Message' e.Data.Channel' result' Priority.High);                          break;                      case "batchgetusers":                          if (!HasPrivileges('@'' ref e))                              return;                          new Thread(listman.BatchGetAllAdminsAndBots).Start(e.Data.Channel);                          break;                      case "bl":                          SendMessageF(SendType.Message' e.Data.Channel'                                       listman.HandleListCommand(1' e.Data.Nick' extraParams)' Priority.High);                          break;                      case "wl":                          SendMessageF(SendType.Message' e.Data.Channel'                                       listman.HandleListCommand(0' e.Data.Nick' extraParams)' Priority.High);                          break;                      case "gl":                          SendMessageF(SendType.Message' e.Data.Channel'                                       listman.HandleListCommand(6' e.Data.Nick' extraParams)' Priority.High);                          break;                      case "al":                          SendMessageF(SendType.Message' e.Data.Channel'                                       listman.HandleListCommand(2' e.Data.Nick' extraParams)' Priority.High);                          break;                      case "bots":                      case "bot":                          SendMessageF(SendType.Message' e.Data.Channel'                                       listman.HandleListCommand(5' e.Data.Nick' extraParams)' Priority.High);                          break;                      case "cvp":                          SendMessageF(SendType.Message' e.Data.Channel'                                       listman.HandleListCommand(10' e.Data.Nick' extraParams)' Priority.High);                          break;                      case "bnu":                          SendMessageF(SendType.Message' e.Data.Channel'                                       listman.HandleListCommand(11' e.Data.Nick' extraParams)' Priority.High);                          break;                      case "bna":                          SendMessageF(SendType.Message' e.Data.Channel'                                       listman.HandleListCommand(12' e.Data.Nick' extraParams)' Priority.High);                          break;                      case "bes":                          SendMessageF(SendType.Message' e.Data.Channel'                                       listman.HandleListCommand(20' e.Data.Nick' extraParams)' Priority.High);                          break;                        //_1568: Restrict the "get" command to ops                      case "getadmins":                          if (!HasPrivileges('@'' ref e))                              return;                          SendMessageF(SendType.Message' e.Data.Channel' listman.ConfigGetAdmins(extraParams)' Priority.High);                          break;                      case "getbots":                          if (!HasPrivileges('@'' ref e))                              return;                          SendMessageF(SendType.Message' e.Data.Channel' listman.ConfigGetBots(extraParams)' Priority.High);                          break;                        case "intel":                          string intelResult = listman.GlobalIntel(extraParams);                          SendMessageFMulti(SendType.Message' e.Data.Channel' intelResult' Priority.High);                          break;                      case "purge":                          if (!HasPrivileges('@'' ref e))                              return;                          SendMessageF(SendType.Message' e.Data.Channel' listman.PurgeWikiData(extraParams)' Priority.High);                          break;                      case "batchreload":                          if (!HasPrivileges('@'' ref e))                              return;                          prjlist.currentBatchReloadChannel = e.Data.Channel;                          new Thread(new ThreadStart(prjlist.ReloadAllWikis)).Start();                          break;                  }
Missing Default,CVNBot,Program,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Program.cs,ReactToRCEvent,The following switch statement is missing a default case: switch (r.eventtype)              {                  // This case handles:                  // - New page creations                  // - Page edits                  case RCEvent.EventType.edit:                      String diffsize;                      if (r.szdiff >= 0)                          diffsize = "+" + r.szdiff.ToString();                      else                          diffsize = r.szdiff.ToString();                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("size"' diffsize);                      attribs.Add("url"' r.url);                      attribs.Add("reason"' r.comment);                        // This block handles: New page creations                      if (r.newpage)                      {                          bool createSpecial = false;                            // New pages created by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.newBig)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5010 + userOffset' ref attribs);                          }                          else if (r.szdiff <= config.newSmall)                          {                              createSpecial = true;                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5020 + userOffset' ref attribs);                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5000 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Article is on watchlist                          // - Page title matches a BNA pattern                          // - Edit summary matches a BES pattern                            // Is the article on the watchlist?                          ListMatch wlm = listman.IsWatchedArticle(r.title' r.project);                          if (wlm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5030 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16301' (String)attribs["article"]));                              break;                          }                            // Does the page title match a BNA pattern?                          ListMatch eslm = listman.MatchesList(r.title' 12);                          if (eslm.Success)                          {                              // Matches BNA                              attribs.Add("watchword"' eslm.matchedItem);                              message = GetMessage(5040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' eslm.matchedItem));                              break;                          }                            // Does the edit summary match a BES pattern?                          ListMatch lm = listman.MatchesList(r.comment' 20);                          if (lm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' lm.matchedItem);                              message = GetMessage(95040 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16300' (String)attribs["article"]' lm.matchedItem));                              break;                          }                            // If we're still here that means                          // - the create didn't get ignored by adminlist or whitelist                          // - the create didn't match any watch patterns                          // Now' if any of the following is true' we'll must report it.                          // - Create by blacklisted user                          // - Create by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // Created by an unlisted reguser with non-special create size' ignore                          if ((userOffset == 4) && !createSpecial)                              return;                            // Else: Create had special size' so let it shown (default)' don't return!                      }                      // This block handles: Page edits                      else                      {                          bool editSpecial = false;                            // Edit by an admin or whitelisted user                          if ((userOffset == 2) || (userOffset == 0))                              // Ignore event                              return;                            // Initialise the "sizeattrib" and "sizereset" attributes' which are used                          // by all messages' including the later messages for listman-matches.                          // The message keys assigned here may be used as a fallback.                          if (r.szdiff >= config.editBig)                          {                              attribs.Add("sizeattrib"' GetMessage(100' ref attribs));                              attribs.Add("sizereset"' GetMessage(102' ref attribs));                              message = GetMessage(5110 + userOffset' ref attribs);                              editSpecial = true;                          }                          else if (r.szdiff <= config.editBlank)                          {                              attribs.Add("sizeattrib"' GetMessage(101' ref attribs));                              attribs.Add("sizereset"' GetMessage(103' ref attribs));                              message = GetMessage(5120 + userOffset' ref attribs);                              editSpecial = true;                          }                          else                          {                              attribs.Add("sizeattrib"' "");                              attribs.Add("sizereset"' "");                              message = GetMessage(5100 + userOffset' ref attribs);                          }                            // The remaining checks go descending order of priority.                          // The first match wins.                          // - Edit summary matches a BES pattern                          // - Edit blanked the page                          // - Edit replaced the page                          // - Article is on watchlist                            // Does the edit summary match a BES pattern?                          ListMatch elm = listman.MatchesList(r.comment' 20);                          if (elm.Success)                          {                              // Matches BES                              attribs.Add("watchword"' elm.matchedItem);                              message = GetMessage(95130 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16310' r.comment' (String)attribs["article"]));                              break;                          }                            // Did the user user blank the page?                          if (project.rautosummBlank.IsMatch(r.comment))                          {                              message = GetMessage(96010 + userOffset' ref attribs);                              AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16311' (String)attribs["article"]));                              break;                          }                            Match rplm = project.rautosummReplace.Match(r.comment);                          if (rplm.Success)                          {                              // The user replaced the page.                              try                              {                                  attribs.Add("profanity"' rplm.Groups["item1"].Captures[0].Value);                                  message = GetMessage(96020 + userOffset' ref attribs);                              }                              catch (ArgumentOutOfRangeException)                              {                                  // This wiki probably doesn't have a profanity attribute                                  message = GetMessage(96030 + userOffset' ref attribs);                              }                              break;                          }                            // Is the article on the watchlist?                          ListMatch welm = listman.IsWatchedArticle(r.title' r.project);                          if (welm.Success)                          {                              // Matches watchlist (CVP)                              message = GetMessage(5130 + userOffset' ref attribs);                              break;                          }                            // If we're still here that means                          // - the edit didn't get ignored by adminlist or whitelist                          // - the edit didn't match any watch patterns                          // Now' if any of the following is true' we must still report it.                          // - Edit by blacklisted user                          // - Edit by greylisted user                          // - Current usertype is configured to always report                          //   (By default this is for anonymous users' via feedFilterUsersAnon=1'                          //   but feedFilterUsersReg or feedFilterUsersBot could also be set to 1)                          if ((userOffset == 1) || (userOffset == 6) || (feedFilterThisUser == 1))                              break;                            // If nothing special about the edit' return to ignore                          if (!editSpecial)                              return;                      }                      break;                  case RCEvent.EventType.move:                      // if moves are softhidden hide moves by admin' bot or whitelist                      if ((config.feedFilterEventMove == 2) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                      {                          return;                      }                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("fromname"' project.interwikiLink + r.title);                      attribs.Add("cfromname"' r.title);                      attribs.Add("toname"' project.interwikiLink + r.movedTo);                      attribs.Add("ctoname"' r.movedTo);                      attribs.Add("url"' r.blockLength); //The blockLength field stores the moveFrom URL                      attribs.Add("reason"' r.comment);                      message = GetMessage(5500 + userOffset' ref attribs);                      break;                  case RCEvent.EventType.block:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.title.Split(new char[] { ':' }' 2)[1]));                      attribs.Add("length"' r.blockLength);                      attribs.Add("reason"' r.comment);                      message = GetMessage(5400' ref attribs);                      //If the blocked user (r.title) isn't botlisted' add to blacklist                      if (listman.ClassifyEditor(r.title.Split(new char[] { ':' }' 2)[1]' r.project) != ListManager.UserType.bot)                      {                          //If this isn't an indefinite/infinite block' add to blacklist                          if ((r.blockLength.ToLower() != "indefinite") && (r.blockLength.ToLower() != "infinite"))                          {                                                               // 2'678'400 seconds = 744 hours = 31 days                              int listLen = Convert.ToInt32(CVNBotUtils.ParseDateTimeLength(r.blockLength' 2678400) * 2.5);                              string blComment = "Autoblacklist: " + r.comment + " on " + r.project;                              message += "\n" + listman.AddUserToList(r.title.Split(new char[] { ':' }' 2)[1]' "" //Global bl                                  ' ListManager.UserType.blacklisted' r.user' blComment' listLen);                              Broadcast("BL"' "ADD"' r.title.Split(new char[] { ':' }' 2)[1]' listLen' blComment' r.user);                          }                      }                      break;                  case RCEvent.EventType.unblock:                      attribs.Add("blockname"' project.interwikiLink + r.title);                      attribs.Add("cblockname"' r.title.Split(new char[] { ':' }' 2)[1]);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("reason"' r.comment);                      message = GetMessage(5700' ref attribs);                      break;                  case RCEvent.EventType.delete:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      attribs.Add("reason"' r.comment);                      message = GetMessage(05300' ref attribs);                      break;                  case RCEvent.EventType.newuser:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("caurl"' "https://meta.wikimedia.org/wiki/Special:CentralAuth/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch = listman.MatchesList(r.user' 11);                      if (bnuMatch.Success && feedFilterThisEvent == 1)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch.matchedItem);                          attribs.Add("wwreason"' bnuMatch.matchedReason);                          message = GetMessage(5201' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5200' ref attribs);                      }                      break;                  case RCEvent.EventType.newuser2:                      attribs.Add("creator"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ccreator"' r.user);                      attribs.Add("editor"' project.interwikiLink + "User:" + r.title);                      attribs.Add("ceditor"' r.title);                      attribs.Add("blockurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/Special:Block/" + CVNBotUtils.WikiEncode(r.user));                      attribs.Add("talkurl"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/User_talk:" + CVNBotUtils.WikiEncode(r.user));                      ListMatch bnuMatch2 = listman.MatchesList(r.user' 11);                      if (bnuMatch2.Success)                      {                          // Matches BNU                          attribs.Add("watchword"' bnuMatch2.matchedItem);                          attribs.Add("wwreason"' bnuMatch2.matchedReason);                          message = GetMessage(5211' ref attribs);                          AddToGreylist(userOffset' r.user' Program.GetFormatMessage(16320' bnuMatch2.matchedItem));                      }                      // Only show non-special creations if newuser event is 1 ('show')                      else if (feedFilterThisEvent == 1)                      {                          message = GetMessage(5210' ref attribs);                      }                      break;                  case RCEvent.EventType.upload:                      int uMsg = 5600;                        // Check if the edit summary matches BES                      ListMatch ubes2 = listman.MatchesList(r.comment' 20);                      if (ubes2.Success)                      {                          attribs.Add("watchword"' ubes2.matchedItem);                          attribs.Add("lmreason"' ubes2.matchedReason);                          uMsg = 95620;                      }                        // Now check if the title matches BES                      ListMatch ubes1 = listman.MatchesList(r.title' 20);                      if (ubes1.Success)                      {                          attribs.Add("watchword"' ubes1.matchedItem);                          attribs.Add("lmreason"' ubes1.matchedReason);                          uMsg = 95620;                      }                        // Check if upload is watched                      ListMatch uwa = listman.IsWatchedArticle(r.title' r.project);                      if (uwa.Success)                          uMsg = 5610;                        // If normal and uploaded by an admin' bot or whitelisted person always hide                      if ((uMsg == 5600) && ((userOffset == 2) || (userOffset == 5) || (userOffset == 0)))                          return;                        // if normal and uploads are softhidden hide normal user and anon aswell                      if ((uMsg == 5600) && (config.feedFilterEventUpload == 2) && ((userOffset == 3) || (userOffset == 4)))                          return;                        // If our message is 95620' we might need to truncate r.comment                      if (uMsg == 95620)                      {                          if (r.comment.Length > 25)                              r.comment = r.comment.Substring(0' 23) + "...";                      }                        attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("uploaditem"' project.interwikiLink + r.title);                      attribs.Add("cuploaditem"' r.title);                      attribs.Add("reason"' r.comment);                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(userOffset + uMsg' ref attribs);                      break;                  case RCEvent.EventType.protect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in protect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5900' ref attribs);                      break;                  case RCEvent.EventType.unprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in unprotect is fine' it's just the pagetitle                      attribs.Add("url"' CVNBotUtils.RootUrl(project.rooturl) + "wiki/" + CVNBotUtils.WikiEncode(r.title));                      message = GetMessage(5901' ref attribs);                      break;                  case RCEvent.EventType.modifyprotect:                      attribs.Add("editor"' project.interwikiLink + "User:" + r.user);                      attribs.Add("ceditor"' r.user);                      attribs.Add("article"' project.interwikiLink + r.title);                      attribs.Add("carticle"' r.title);                      attribs.Add("comment"' r.comment);                      //'url' in modifyprotect is broken' it also contains " [move=sysop] (indefinite)" etc.                      //attribs.Add("url"' CVNBotUtils.rootUrl(project.rooturl) + "wiki/" + CVNBotUtils.wikiEncode(r.title));                      message = GetMessage(5902' ref attribs);                      break;              }
Missing Default,CVNBot,Project,D:\research\architectureSmells\repos\countervandalism_CVNBot\src\CVNBot\Project.cs,ReadProjectDetails,The following switch statement is missing a default case: switch (key)                  {                      case "projectName": projectName = value; break;                      case "interwikiLink": interwikiLink = value; break;                      case "rooturl": rooturl = value; break;                      case "speciallog": regexDict["specialLogRegex"] = value; break;                      case "namespaces": snamespaces = value; break;                      case "restoreRegex": regexDict["restoreRegex"] = value; break;                      case "deleteRegex": regexDict["deleteRegex"] = value; break;                      case "protectRegex": regexDict["protectRegex"] = value; break;                      case "unprotectRegex": regexDict["unprotectRegex"] = value; break;                      case "modifyprotectRegex": regexDict["modifyprotectRegex"] = value; break;                      case "uploadRegex": regexDict["uploadRegex"] = value; break;                      case "moveRegex": regexDict["moveRegex"] = value; break;                      case "moveredirRegex": regexDict["moveredirRegex"] = value; break;                      case "blockRegex": regexDict["blockRegex"] = value; break;                      case "unblockRegex": regexDict["unblockRegex"] = value; break;                      case "reblockRegex": regexDict["reblockRegex"] = value; break;                      case "autosummBlank": regexDict["autosummBlank"] = value; break;                      case "autosummReplace": regexDict["autosummReplace"] = value; break;                  }
