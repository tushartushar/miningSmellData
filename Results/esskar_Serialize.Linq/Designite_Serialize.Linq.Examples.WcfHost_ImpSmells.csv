Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,Serialize.Linq.Examples.WcfHost.Services,PersonService,C:\repos\esskar_Serialize.Linq\src\Serialize.Linq.Examples\Serialize.Linq.Examples.WcfHost\Services\PersonService.cs,CreatePerson,The method has 6 parameters. Parameters: id' name' gender' birthDate' deathDate' residence
Long Statement,Serialize.Linq.Examples.WcfHost.Services,PersonService,C:\repos\esskar_Serialize.Linq\src\Serialize.Linq.Examples\Serialize.Linq.Examples.WcfHost\Services\PersonService.cs,Initialize,The length of the statement  "                    var deathdate = line[4].Equals("Living"' StringComparison.OrdinalIgnoreCase) ? null : (DateTime?)DateTime.Parse(line[4]' culture); " is 130.
Magic Number,Serialize.Linq.Examples.WcfHost.Services,PersonService,C:\repos\esskar_Serialize.Linq\src\Serialize.Linq.Examples\Serialize.Linq.Examples.WcfHost\Services\PersonService.cs,Initialize,The following statement contains a magic number: foreach (var record in records)              {                  if (string.IsNullOrWhiteSpace(record))                      continue;                    try                  {                      var line = record.Split(';');                        var birthdate = DateTime.Parse(line[3]' culture);                      var deathdate = line[4].Equals("Living"' StringComparison.OrdinalIgnoreCase) ? null : (DateTime?)DateTime.Parse(line[4]' culture);                        _persons.Add(this.CreatePerson(_persons.Count + 1' line[1]' line[2]' birthdate' deathdate' line[6]));                  }                  catch (Exception ex)                  {                      Console.Error.WriteLine("Failed to parse record '{0}': {1}"' record' ex.Message);                  }              }
Magic Number,Serialize.Linq.Examples.WcfHost.Services,PersonService,C:\repos\esskar_Serialize.Linq\src\Serialize.Linq.Examples\Serialize.Linq.Examples.WcfHost\Services\PersonService.cs,Initialize,The following statement contains a magic number: foreach (var record in records)              {                  if (string.IsNullOrWhiteSpace(record))                      continue;                    try                  {                      var line = record.Split(';');                        var birthdate = DateTime.Parse(line[3]' culture);                      var deathdate = line[4].Equals("Living"' StringComparison.OrdinalIgnoreCase) ? null : (DateTime?)DateTime.Parse(line[4]' culture);                        _persons.Add(this.CreatePerson(_persons.Count + 1' line[1]' line[2]' birthdate' deathdate' line[6]));                  }                  catch (Exception ex)                  {                      Console.Error.WriteLine("Failed to parse record '{0}': {1}"' record' ex.Message);                  }              }
Magic Number,Serialize.Linq.Examples.WcfHost.Services,PersonService,C:\repos\esskar_Serialize.Linq\src\Serialize.Linq.Examples\Serialize.Linq.Examples.WcfHost\Services\PersonService.cs,Initialize,The following statement contains a magic number: foreach (var record in records)              {                  if (string.IsNullOrWhiteSpace(record))                      continue;                    try                  {                      var line = record.Split(';');                        var birthdate = DateTime.Parse(line[3]' culture);                      var deathdate = line[4].Equals("Living"' StringComparison.OrdinalIgnoreCase) ? null : (DateTime?)DateTime.Parse(line[4]' culture);                        _persons.Add(this.CreatePerson(_persons.Count + 1' line[1]' line[2]' birthdate' deathdate' line[6]));                  }                  catch (Exception ex)                  {                      Console.Error.WriteLine("Failed to parse record '{0}': {1}"' record' ex.Message);                  }              }
Magic Number,Serialize.Linq.Examples.WcfHost.Services,PersonService,C:\repos\esskar_Serialize.Linq\src\Serialize.Linq.Examples\Serialize.Linq.Examples.WcfHost\Services\PersonService.cs,Initialize,The following statement contains a magic number: foreach (var record in records)              {                  if (string.IsNullOrWhiteSpace(record))                      continue;                    try                  {                      var line = record.Split(';');                        var birthdate = DateTime.Parse(line[3]' culture);                      var deathdate = line[4].Equals("Living"' StringComparison.OrdinalIgnoreCase) ? null : (DateTime?)DateTime.Parse(line[4]' culture);                        _persons.Add(this.CreatePerson(_persons.Count + 1' line[1]' line[2]' birthdate' deathdate' line[6]));                  }                  catch (Exception ex)                  {                      Console.Error.WriteLine("Failed to parse record '{0}': {1}"' record' ex.Message);                  }              }
Magic Number,Serialize.Linq.Examples.WcfHost.Services,PersonService,C:\repos\esskar_Serialize.Linq\src\Serialize.Linq.Examples\Serialize.Linq.Examples.WcfHost\Services\PersonService.cs,Initialize,The following statement contains a magic number: foreach (var record in records)              {                  if (string.IsNullOrWhiteSpace(record))                      continue;                    try                  {                      var line = record.Split(';');                        var birthdate = DateTime.Parse(line[3]' culture);                      var deathdate = line[4].Equals("Living"' StringComparison.OrdinalIgnoreCase) ? null : (DateTime?)DateTime.Parse(line[4]' culture);                        _persons.Add(this.CreatePerson(_persons.Count + 1' line[1]' line[2]' birthdate' deathdate' line[6]));                  }                  catch (Exception ex)                  {                      Console.Error.WriteLine("Failed to parse record '{0}': {1}"' record' ex.Message);                  }              }
Magic Number,Serialize.Linq.Examples.WcfHost.Services,PersonService,C:\repos\esskar_Serialize.Linq\src\Serialize.Linq.Examples\Serialize.Linq.Examples.WcfHost\Services\PersonService.cs,CreatePerson,The following statement contains a magic number: var names = name.Split(new[] { ' ' }' 2' StringSplitOptions.RemoveEmptyEntries);
