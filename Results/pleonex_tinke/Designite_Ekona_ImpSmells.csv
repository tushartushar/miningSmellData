Implementation smell,Namespace,Class,File,Method,Description
Long Method,Ekona.Helper,LNK,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Helper\LNK.cs,Read_Extra,The method has 106 lines of code.
Long Method,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Get_Color,The method has 100 lines of code.
Long Method,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The method has 477 lines of code.
Long Method,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,IsCompressedBlock,The method has 175 lines of code.
Long Method,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,CompressBlock,The method has 200 lines of code.
Long Method,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,Compress,The method has 151 lines of code.
Long Method,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The method has 431 lines of code.
Long Method,Ekona.Images,PaletteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\PaletteControl.cs,InitializeComponent,The method has 242 lines of code.
Long Method,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The method has 803 lines of code.
Complex Method,Ekona.Helper,LNK,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Helper\LNK.cs,Read_LinkInfo,Cyclomatic complexity of the method is 11
Complex Method,Ekona.Helper,LNK,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Helper\LNK.cs,Read_Extra,Cyclomatic complexity of the method is 14
Complex Method,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Get_Color,Cyclomatic complexity of the method is 28
Complex Method,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Swap_Palette,Cyclomatic complexity of the method is 8
Complex Method,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Indexed_Image,Cyclomatic complexity of the method is 22
Complex Method,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Apply_Map,Cyclomatic complexity of the method is 8
Complex Method,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Create_Map,Cyclomatic complexity of the method is 11
Complex Method,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Get_OAMSize,Cyclomatic complexity of the method is 12
Complex Method,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Get_Image,Cyclomatic complexity of the method is 20
Complex Method,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,Update_Info,Cyclomatic complexity of the method is 9
Complex Method,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,comboDepth_SelectedIndexChanged,Cyclomatic complexity of the method is 11
Complex Method,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,btnExport_Click,Cyclomatic complexity of the method is 9
Complex Method,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,btnImport_Click,Cyclomatic complexity of the method is 8
Complex Method,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,IsCompressedBlock,Cyclomatic complexity of the method is 24
Complex Method,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,CompressBlock,Cyclomatic complexity of the method is 31
Complex Method,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,Compress,Cyclomatic complexity of the method is 18
Complex Method,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,Export_Single,Cyclomatic complexity of the method is 8
Complex Method,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,Import_File,Cyclomatic complexity of the method is 15
Complex Method,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,Save_Files,Cyclomatic complexity of the method is 13
Complex Method,Ekona.Images.Formats,BMP,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Formats\Bitmap.cs,Read,Cyclomatic complexity of the method is 14
Complex Method,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,Read_Info,Cyclomatic complexity of the method is 16
Complex Method,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,comboSize_SelectedIndexChanged,Cyclomatic complexity of the method is 13
Long Parameter List,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Get_Image,The method has 7 parameters. Parameters: tiles' tile_pal' palette' format' width' height' start
Long Parameter List,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,HorizontalToLineal,The method has 5 parameters. Parameters: horizontal' width' height' bpp' tile_size
Long Parameter List,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,LinealToHorizontal,The method has 5 parameters. Parameters: lineal' width' height' bpp' tile_size
Long Parameter List,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Swap_Color,The method has 5 parameters. Parameters: tiles' palette' oldIndex' newIndex' format
Long Parameter List,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Swap_Palette,The method has 5 parameters. Parameters: tiles' newp' oldp' format' threshold
Long Parameter List,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Add_Image,The method has 6 parameters. Parameters: data' newData' partOffset' partSize' blockSize' addedLength
Long Parameter List,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Apply_Map,The method has 6 parameters. Parameters: map' tiles' tile_pal' bpp' tile_size' startInfo
Long Parameter List,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Get_Image,The method has 14 parameters. Parameters: bank' blockSize' img' pal' max_width' max_height' draw_grid' draw_cells' draw_numbers' trans' image' currOAM' zoom' index
Long Parameter List,Ekona.Images,ImageBase,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageBase.cs,ImageBase,The method has 7 parameters. Parameters: tiles' width' height' format' tileForm' editable' fileName
Long Parameter List,Ekona.Images,ImageBase,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageBase.cs,Set_Tiles,The method has 7 parameters. Parameters: tiles' width' height' format' form' editable' tile_size
Long Parameter List,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,Error,The method has 5 parameters. Parameters: inputPoints' mask' a' b' hasAlpha
Long Parameter List,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,IsCompressedBlock,The method has 7 parameters. Parameters: colors' uniqueFlags' count' aIndex' bIndex' dxtBoundColors' hasAlpha
Long Parameter List,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,CompressBlock,The method has 6 parameters. Parameters: block' mask' compressColors' c0' c1' texels
Long Parameter List,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,Compress,The method has 6 parameters. Parameters: bgra' width' height' boundaryApprox' onlyInterpolatedPalettes' palette
Long Parameter List,Ekona.Images,MapBase,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\MapBase.cs,MapBase,The method has 5 parameters. Parameters: mapInfo' editable' width' height' fileName
Long Parameter List,Ekona.Images,SpriteBase,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteBase.cs,Get_Image,The method has 10 parameters. Parameters: image' pal' index' width' height' grid' cell' number' trans' img
Long Parameter List,Ekona.Images,SpriteBase,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteBase.cs,Get_Image,The method has 10 parameters. Parameters: image' pal' bank' width' height' grid' cell' number' trans' img
Long Parameter List,Ekona.Images,SpriteBase,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteBase.cs,Get_Image,The method has 11 parameters. Parameters: image' pal' bank' width' height' grid' cell' number' trans' img' currOAM
Long Parameter List,Ekona.Images,SpriteBase,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteBase.cs,Get_Image,The method has 11 parameters. Parameters: image' pal' index' width' height' grid' cell' number' trans' img' currOAM
Long Parameter List,Ekona.Images,SpriteBase,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteBase.cs,Get_Image,The method has 12 parameters. Parameters: image' pal' index' width' height' grid' cell' number' trans' img' currOAM' draw_index
Long Parameter List,Ekona.Images,RawPalette,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\RawData.cs,RawPalette,The method has 7 parameters. Parameters: file' id' editable' depth' offset' size' fileName
Long Parameter List,Ekona.Images,RawPalette,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\RawData.cs,RawPalette,The method has 6 parameters. Parameters: file' id' editable' offset' size' fileName
Long Parameter List,Ekona.Images,RawPalette,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\RawData.cs,Read,The method has 5 parameters. Parameters: fileIn' editable' depth' offset' fileSize
Long Parameter List,Ekona.Images,RawImage,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\RawData.cs,RawImage,The method has 8 parameters. Parameters: file' id' form' format' editable' offset' size' fileName
Long Parameter List,Ekona.Images,RawImage,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\RawData.cs,RawImage,The method has 10 parameters. Parameters: file' id' form' format' width' height' editable' offset' size' fileName
Long Parameter List,Ekona.Images,RawImage,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\RawData.cs,RawImage,The method has 7 parameters. Parameters: tiles' form' format' width' height' editable' fileName
Long Parameter List,Ekona.Images,RawImage,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\RawData.cs,Read,The method has 6 parameters. Parameters: fileIn' form' format' editable' offset' fileSize
Long Parameter List,Ekona.Images,RawMap,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\RawData.cs,RawMap,The method has 6 parameters. Parameters: file' id' offset' size' editable' fileName
Long Parameter List,Ekona.Images,RawMap,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\RawData.cs,RawMap,The method has 5 parameters. Parameters: map' width' height' editable' fileName
Long Parameter List,Ekona.Images.Formats,APNG,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Formats\APNG.cs,Write,The method has 8 parameters. Parameters: apng' signature' ihdr' actl' idat' fctl' fdat' iend
Long Parameter List,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,OAMEditor,The method has 5 parameters. Parameters: langxml' bank' sprite' image' palette
Long Parameter List,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,OAMEditor,The method has 5 parameters. Parameters: langxml' bank' sprite' image' palette
Long Identifier,Ekona.Helper,LINKINFO,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Helper\LNK.cs,,The length of the parameter commonNetworkRelativeLinkAndPathSuffix is 38.
Long Identifier,Ekona.Helper,LINKINFO,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Helper\LNK.cs,,The length of the parameter commonNetworkRelativeLinkOffset is 31.
Long Statement,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Get_Image,The length of the statement  "                    //    cells[i] = ((Bitmap)img.Get_Image(pal)).Clone(new Rectangle(posX * zoom' posY * zoom' bank.oams[i].width * zoom' bank.oams[i].height * zoom)' " is 147.
Long Statement,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Get_Image,The length of the statement  "                    graphic.DrawImageUnscaled(cell' size.Width / 2 + bank.oams[i].obj1.xOffset * zoom' size.Height / 2 + bank.oams[i].obj0.yOffset * zoom); " is 135.
Long Statement,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Get_Image,The length of the statement  "                    graphic.DrawRectangle(Pens.Black' size.Width / 2 + bank.oams[i].obj1.xOffset * zoom' size.Height / 2 + bank.oams[i].obj0.yOffset * zoom' " is 136.
Long Statement,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Get_Image,The length of the statement  "                    graphic.DrawRectangle(new Pen(Color.Red' 3)' size.Width / 2 + bank.oams[i].obj1.xOffset * zoom' size.Height / 2 + bank.oams[i].obj0.yOffset * zoom' " is 147.
Long Statement,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Get_Image,The length of the statement  "                    graphic.DrawString(bank.oams[i].num_cell.ToString()' SystemFonts.CaptionFont' Brushes.Black' size.Width / 2 + bank.oams[i].obj1.xOffset * zoom' " is 143.
Long Statement,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,btnImport_Click,The length of the statement  "                map.Set_Map(Actions.Create_Map(ref tiles' image.BPP' image.TileSize' (byte)numPal.Value)' map.CanEdit' bitmap.Width' bitmap.Height); " is 132.
Long Statement,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,Save_Files,The length of the statement  "                    string imageFile = pluginHost.Get_TempFolder() + Path.DirectorySeparatorChar + Path.GetRandomFileName() + image.FileName; " is 121.
Long Statement,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,Save_Files,The length of the statement  "                    string paletteFile = pluginHost.Get_TempFolder() + Path.DirectorySeparatorChar + Path.GetRandomFileName() + palette.FileName; " is 125.
Long Statement,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,SetTransFromImage,The length of the statement  "            int pal_index = sprite.Banks[comboBank.SelectedIndex].oams[0].obj2.index_palette;  // How can I know that? yeah' I'm too lazy to do a new windows ;) " is 148.
Long Statement,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,Import_File,The length of the statement  "                    try { Actions.Swap_Palette(ref cellImg' palette.Palette[oams[i].obj2.index_palette]' pal' image.FormatColor' numThreshold.Value); } " is 131.
Long Statement,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,Import_File,The length of the statement  "                    uint offset = Actions.Add_Image(ref imgData' cellImg' sprite.Banks[banki].data_offset' size' (uint)(0x20 << (int)sprite.BlockSize)' out added) - sprite.Banks[banki].data_offset; " is 177.
Long Statement,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,Import_File,The length of the statement  "                            "The characters data size has exceeded the boundaries of what is permitted!\r\nSome characters will not be displayed."); " is 120.
Long Statement,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,btnOAMeditor_Click,The length of the statement  "                editor = new Dialogs.OAMEditor(pluginHost.Get_LangXML()' sprite.Banks[comboBank.SelectedIndex]' sprite' image' palette); " is 120.
Long Statement,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,btnOAMeditor_Click,The length of the statement  "                editor = new Dialogs.OAMEditor(lang.Element("OAMEditor")' sprite.Banks[comboBank.SelectedIndex]' sprite' image' palette); " is 121.
Long Statement,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(OAMEditor)); " is 129.
Long Statement,Ekona.Mathematics,Vector3,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Mathematics\Vector3.cs,Equals,The length of the statement  "            return ((Math.Abs(x - vector.X) < tolerance) && (Math.Abs(y - vector.Y) < tolerance) && (Math.Abs(z - vector.Z) < tolerance));" is 126.
Complex Conditional,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,btnSetTrans_Click,The conditional expression  "(palette.Depth == ColorFormat.colors256 && palette.NumberOfColors == 256) ||                  (palette.Depth == ColorFormat.colors16 && palette.NumberOfColors == 16)"  is complex.
Complex Conditional,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,CalcSecondBoundColor,The conditional expression  "r < 0 || r > 255 || g < 0 || g > 255 || b < 0 || b > 255"  is complex.
Complex Conditional,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,IsCompressedBlock,The conditional expression  "(uniqueColors[1].R == m1.R && uniqueColors[1].G == m1.G && uniqueColors[1].B == m1.B)                         || (uniqueColors[1].R == m2.R && uniqueColors[1].G == m2.G && uniqueColors[1].B == m2.B)"  is complex.
Complex Conditional,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,IsCompressedBlock,The conditional expression  "(uniqueColors[1].R == m1.R && uniqueColors[1].G == m1.G && uniqueColors[1].B == m1.B                      && uniqueColors[2].R == m2.R && uniqueColors[2].G == m2.G && uniqueColors[2].B == m2.B)                     || (uniqueColors[2].R == m1.R && uniqueColors[2].G == m1.G && uniqueColors[2].B == m1.B                         && uniqueColors[1].R == m2.R && uniqueColors[1].G == m2.G && uniqueColors[1].B == m2.B)"  is complex.
Virtual Method Call from Constructor,Ekona.Images,ImageBase,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageBase.cs,ImageBase,The constructor "ImageBase" calls a virtual method "Read".
Virtual Method Call from Constructor,Ekona.Images,ImageBase,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageBase.cs,ImageBase,The constructor "ImageBase" calls a virtual method "Read".
Virtual Method Call from Constructor,Ekona.Images,MapBase,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\MapBase.cs,MapBase,The constructor "MapBase" calls a virtual method "Read".
Virtual Method Call from Constructor,Ekona.Images,MapBase,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\MapBase.cs,MapBase,The constructor "MapBase" calls a virtual method "Read".
Virtual Method Call from Constructor,Ekona.Images,SpriteBase,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteBase.cs,SpriteBase,The constructor "SpriteBase" calls a virtual method "Read".
Virtual Method Call from Constructor,Ekona.Images,SpriteBase,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteBase.cs,SpriteBase,The constructor "SpriteBase" calls a virtual method "Read".
Virtual Method Call from Constructor,Ekona.Images,PaletteBase,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\PaletteBase.cs,PaletteBase,The constructor "PaletteBase" calls a virtual method "Read".
Virtual Method Call from Constructor,Ekona.Images,PaletteBase,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\PaletteBase.cs,PaletteBase,The constructor "PaletteBase" calls a virtual method "Read".
Magic Number,Ekona.Helper,BinaryReaderBE,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Helper\BinaryReaderBE.cs,ReadUInt16,The following statement contains a magic number: return BitConverter.ToUInt16(ReadBytes(2).Reverse().ToArray()' 0);
Magic Number,Ekona.Helper,BitsConverter,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Helper\BitsConverter.cs,ByteToBit2,The following statement contains a magic number: Byte[] bit2 = new byte[4];
Magic Number,Ekona.Helper,BitsConverter,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Helper\BitsConverter.cs,ByteToBit2,The following statement contains a magic number: bit2[1] = (byte)((data >> 2) & 0x3);
Magic Number,Ekona.Helper,BitsConverter,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Helper\BitsConverter.cs,ByteToBit2,The following statement contains a magic number: bit2[2] = (byte)((data >> 4) & 0x3);
Magic Number,Ekona.Helper,BitsConverter,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Helper\BitsConverter.cs,ByteToBit2,The following statement contains a magic number: bit2[2] = (byte)((data >> 4) & 0x3);
Magic Number,Ekona.Helper,BitsConverter,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Helper\BitsConverter.cs,ByteToBit2,The following statement contains a magic number: bit2[3] = (byte)((data >> 6) & 0x3);
Magic Number,Ekona.Helper,BitsConverter,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Helper\BitsConverter.cs,ByteToBit2,The following statement contains a magic number: bit2[3] = (byte)((data >> 6) & 0x3);
Magic Number,Ekona.Helper,BitsConverter,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Helper\BitsConverter.cs,ByteToBit4,The following statement contains a magic number: Byte[] bit4 = new Byte[2];
Magic Number,Ekona.Helper,BitsConverter,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Helper\BitsConverter.cs,ByteToBit4,The following statement contains a magic number: bit4[1] = (byte)((data & 0xF0) >> 4);
Magic Number,Ekona.Helper,BitsConverter,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Helper\BitsConverter.cs,BytesToBit4,The following statement contains a magic number: byte[] bit4 = new byte[data.Length * 2];
Magic Number,Ekona.Helper,BitsConverter,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Helper\BitsConverter.cs,BytesToBit4,The following statement contains a magic number: bit4[i * 2] = b4[0];
Magic Number,Ekona.Helper,BitsConverter,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Helper\BitsConverter.cs,BytesToBit4,The following statement contains a magic number: bit4[i * 2 + 1] = b4[1];
Magic Number,Ekona.Helper,BitsConverter,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Helper\BitsConverter.cs,Bit4ToByte,The following statement contains a magic number: return (byte)(data[0] + (data[1] << 4));
Magic Number,Ekona.Helper,BitsConverter,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Helper\BitsConverter.cs,Bit4ToByte,The following statement contains a magic number: return (byte)(b1 + (b2 << 4));
Magic Number,Ekona.Helper,BitsConverter,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Helper\BitsConverter.cs,Bits4ToByte,The following statement contains a magic number: byte[] b = new byte[data.Length / 2];
Magic Number,Ekona.Helper,BitsConverter,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Helper\BitsConverter.cs,Bits4ToByte,The following statement contains a magic number: b[i / 2] = Bit4ToByte(data[i]' data[i + 1]);
Magic Number,Ekona.Helper,BitsConverter,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Helper\BitsConverter.cs,StringToBytes,The following statement contains a magic number: hexText = hexText.PadRight(num_bytes * 2' '0');
Magic Number,Ekona.Helper,BitsConverter,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Helper\BitsConverter.cs,StringToBytes,The following statement contains a magic number: hex.Add(Convert.ToByte(hexText.Substring(i' 2)' 16));
Magic Number,Ekona.Helper,BitsConverter,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Helper\BitsConverter.cs,StringToBytes,The following statement contains a magic number: hex.Add(Convert.ToByte(hexText.Substring(i' 2)' 16));
Magic Number,Ekona.Helper,CRC16,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Helper\CRC.cs,Calculate,The following statement contains a magic number: crc = (crc >> 8) ^ crc16tab[(crc ^ bytes[i]) & 0xFF];
Magic Number,Ekona.Helper,CRC32,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Helper\CRC.cs,CreateCrcTable,The following statement contains a magic number: k < 8
Magic Number,Ekona.Helper,CRC32,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Helper\CRC.cs,CreateCrcTable,The following statement contains a magic number: n < 256
Magic Number,Ekona.Helper,CRC32,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Helper\CRC.cs,Calculate,The following statement contains a magic number: data = CrcTable[(data ^ buffer[n]) & 0xff] ^ (data >> 8);
Magic Number,Ekona.Helper,CRC32,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Helper\CRC.cs,Calculate,The following statement contains a magic number: byte b1 = Convert.ToByte(data >> 24);
Magic Number,Ekona.Helper,CRC32,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Helper\CRC.cs,Calculate,The following statement contains a magic number: byte b2 = Convert.ToByte(b1 << 8 ^ data >> 16);
Magic Number,Ekona.Helper,CRC32,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Helper\CRC.cs,Calculate,The following statement contains a magic number: byte b2 = Convert.ToByte(b1 << 8 ^ data >> 16);
Magic Number,Ekona.Helper,CRC32,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Helper\CRC.cs,Calculate,The following statement contains a magic number: byte b3 = Convert.ToByte(((data >> 16 << 16) ^ (data >> 8 << 8)) >> 8);
Magic Number,Ekona.Helper,CRC32,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Helper\CRC.cs,Calculate,The following statement contains a magic number: byte b3 = Convert.ToByte(((data >> 16 << 16) ^ (data >> 8 << 8)) >> 8);
Magic Number,Ekona.Helper,CRC32,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Helper\CRC.cs,Calculate,The following statement contains a magic number: byte b3 = Convert.ToByte(((data >> 16 << 16) ^ (data >> 8 << 8)) >> 8);
Magic Number,Ekona.Helper,CRC32,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Helper\CRC.cs,Calculate,The following statement contains a magic number: byte b3 = Convert.ToByte(((data >> 16 << 16) ^ (data >> 8 << 8)) >> 8);
Magic Number,Ekona.Helper,CRC32,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Helper\CRC.cs,Calculate,The following statement contains a magic number: byte b3 = Convert.ToByte(((data >> 16 << 16) ^ (data >> 8 << 8)) >> 8);
Magic Number,Ekona.Helper,CRC32,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Helper\CRC.cs,Calculate,The following statement contains a magic number: byte b4 = Convert.ToByte((data >> 8 << 8) ^ data);
Magic Number,Ekona.Helper,CRC32,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Helper\CRC.cs,Calculate,The following statement contains a magic number: byte b4 = Convert.ToByte((data >> 8 << 8) ^ data);
Magic Number,Ekona.Helper,LNK,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Helper\LNK.cs,Read_IDList,The following statement contains a magic number: item.data = br.ReadBytes(size - 2);
Magic Number,Ekona.Helper,LNK,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Helper\LNK.cs,Read_Extra,The following statement contains a magic number: switch (sign)                  {                      case 0xA0000001:                          extra.environment.blockSize = size;                          extra.environment.blockSignature = sign;                          extra.environment.targetAnsi = Get_String(br' 260' false);                          extra.environment.targetUnicode = Get_String(br' 260' true);                          break;                        case 0xA0000002:                          CONSOLE_PROPS cp = new CONSOLE_PROPS();                          cp.blockSize = size;                          cp.blockSignature = sign;                          cp.fillAttributes = (FILL_ATTRIBUTES)br.ReadUInt16();                          cp.popupFillAttributes = br.ReadUInt16();                          cp.screenBufferSizeX = br.ReadUInt16();                          cp.screenBufferSizeY = br.ReadUInt16();                          cp.windowSizeX = br.ReadUInt16();                          cp.windowSizeY = br.ReadUInt16();                          cp.windowOriginX = br.ReadUInt16();                          cp.windowOriginY = br.ReadUInt16();                          cp.unused1 = br.ReadUInt32();                          cp.unused2 = br.ReadUInt32();                          cp.fontSize = br.ReadUInt32();                          cp.fontFamily = (FONT_FAMILY)br.ReadUInt32();                          cp.fontWeight = br.ReadUInt32();                          cp.faceName = Get_String(br' 32' true);                          cp.cursorSize = br.ReadUInt32();                          cp.fullScreen = br.ReadUInt32();                          cp.quickEdit = br.ReadUInt32();                          cp.insertMode = br.ReadUInt32();                          cp.autoPosition = br.ReadUInt32();                          cp.historyBufferSize = br.ReadUInt32();                          cp.numberOfHistoryBuffer = br.ReadUInt32();                          cp.historyNoDup = br.ReadUInt32();                          cp.colorTable = new uint[0x10];                          for (int i = 0; i < 0x10; i++)                              cp.colorTable[i] = br.ReadUInt32();                          extra.console = cp;                          break;                        case 0xA0000003:                          extra.tracker.blockSize = size;                          extra.tracker.blockSignature = sign;                          extra.tracker.length = br.ReadUInt32();                          extra.tracker.version = br.ReadUInt32();                          extra.tracker.machineID = Get_String(br' 0x10' false);                          extra.tracker.droid = br.ReadBytes(0x20);                          extra.tracker.droidBirth = br.ReadBytes(0x20);                          break;                        case 0xA0000004:                          extra.consoleFe.blockSize = size;                          extra.consoleFe.blockSignature = sign;                          extra.consoleFe.codePage = br.ReadUInt32();                          break;                        case 0xA0000005:                          extra.specialFolder.blockSize = size;                          extra.specialFolder.blockSignature = sign;                          extra.specialFolder.specialFolderID = br.ReadUInt32();                          extra.specialFolder.offset = br.ReadUInt32();                          break;                        case 0xA0000006:                          extra.darwin.blockSize = size;                          extra.darwin.blockSignature = sign;                          extra.darwin.darwinDataAnsi = Get_String(br' 260' false);                          extra.darwin.darwinDataUnicode = Get_String(br' 260' true);                          break;                        case 0xA0000007:                          extra.iconEnvironment.blockSize = size;                          extra.iconEnvironment.blockSignature = sign;                          extra.iconEnvironment.targetAnsi = Get_String(br' 260' false);                          extra.iconEnvironment.targetUnicode = Get_String(br' 260' true);                          break;                        case 0xA0000008:                          extra.shim.blockSize = size;                          extra.shim.blockSignature = sign;                          extra.shim.layerName = Get_String(br' (int)extra.shim.blockSize - 8'  true);                          break;                        case 0xA0000009:                          extra.propertyStore.blockSize = size;                          extra.propertyStore.blockSignature = sign;                          extra.propertyStore.propertyStore = null;                          break;                        case 0xA000000B:                          extra.knownFolder.blockSize = size;                          extra.knownFolder.blockSignature = sign;                          extra.knownFolder.knownFolderID = br.ReadBytes(0x10);                          extra.knownFolder.offset = br.ReadUInt32();                          break;                        case 0xA000000C:                          extra.vistaIDList.blockSize = size;                          extra.vistaIDList.blockSignature = sign;                          extra.vistaIDList.idlist = Read_IDList(br);                          break;                  }
Magic Number,Ekona.Helper,LNK,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Helper\LNK.cs,Read_Extra,The following statement contains a magic number: switch (sign)                  {                      case 0xA0000001:                          extra.environment.blockSize = size;                          extra.environment.blockSignature = sign;                          extra.environment.targetAnsi = Get_String(br' 260' false);                          extra.environment.targetUnicode = Get_String(br' 260' true);                          break;                        case 0xA0000002:                          CONSOLE_PROPS cp = new CONSOLE_PROPS();                          cp.blockSize = size;                          cp.blockSignature = sign;                          cp.fillAttributes = (FILL_ATTRIBUTES)br.ReadUInt16();                          cp.popupFillAttributes = br.ReadUInt16();                          cp.screenBufferSizeX = br.ReadUInt16();                          cp.screenBufferSizeY = br.ReadUInt16();                          cp.windowSizeX = br.ReadUInt16();                          cp.windowSizeY = br.ReadUInt16();                          cp.windowOriginX = br.ReadUInt16();                          cp.windowOriginY = br.ReadUInt16();                          cp.unused1 = br.ReadUInt32();                          cp.unused2 = br.ReadUInt32();                          cp.fontSize = br.ReadUInt32();                          cp.fontFamily = (FONT_FAMILY)br.ReadUInt32();                          cp.fontWeight = br.ReadUInt32();                          cp.faceName = Get_String(br' 32' true);                          cp.cursorSize = br.ReadUInt32();                          cp.fullScreen = br.ReadUInt32();                          cp.quickEdit = br.ReadUInt32();                          cp.insertMode = br.ReadUInt32();                          cp.autoPosition = br.ReadUInt32();                          cp.historyBufferSize = br.ReadUInt32();                          cp.numberOfHistoryBuffer = br.ReadUInt32();                          cp.historyNoDup = br.ReadUInt32();                          cp.colorTable = new uint[0x10];                          for (int i = 0; i < 0x10; i++)                              cp.colorTable[i] = br.ReadUInt32();                          extra.console = cp;                          break;                        case 0xA0000003:                          extra.tracker.blockSize = size;                          extra.tracker.blockSignature = sign;                          extra.tracker.length = br.ReadUInt32();                          extra.tracker.version = br.ReadUInt32();                          extra.tracker.machineID = Get_String(br' 0x10' false);                          extra.tracker.droid = br.ReadBytes(0x20);                          extra.tracker.droidBirth = br.ReadBytes(0x20);                          break;                        case 0xA0000004:                          extra.consoleFe.blockSize = size;                          extra.consoleFe.blockSignature = sign;                          extra.consoleFe.codePage = br.ReadUInt32();                          break;                        case 0xA0000005:                          extra.specialFolder.blockSize = size;                          extra.specialFolder.blockSignature = sign;                          extra.specialFolder.specialFolderID = br.ReadUInt32();                          extra.specialFolder.offset = br.ReadUInt32();                          break;                        case 0xA0000006:                          extra.darwin.blockSize = size;                          extra.darwin.blockSignature = sign;                          extra.darwin.darwinDataAnsi = Get_String(br' 260' false);                          extra.darwin.darwinDataUnicode = Get_String(br' 260' true);                          break;                        case 0xA0000007:                          extra.iconEnvironment.blockSize = size;                          extra.iconEnvironment.blockSignature = sign;                          extra.iconEnvironment.targetAnsi = Get_String(br' 260' false);                          extra.iconEnvironment.targetUnicode = Get_String(br' 260' true);                          break;                        case 0xA0000008:                          extra.shim.blockSize = size;                          extra.shim.blockSignature = sign;                          extra.shim.layerName = Get_String(br' (int)extra.shim.blockSize - 8'  true);                          break;                        case 0xA0000009:                          extra.propertyStore.blockSize = size;                          extra.propertyStore.blockSignature = sign;                          extra.propertyStore.propertyStore = null;                          break;                        case 0xA000000B:                          extra.knownFolder.blockSize = size;                          extra.knownFolder.blockSignature = sign;                          extra.knownFolder.knownFolderID = br.ReadBytes(0x10);                          extra.knownFolder.offset = br.ReadUInt32();                          break;                        case 0xA000000C:                          extra.vistaIDList.blockSize = size;                          extra.vistaIDList.blockSignature = sign;                          extra.vistaIDList.idlist = Read_IDList(br);                          break;                  }
Magic Number,Ekona.Helper,LNK,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Helper\LNK.cs,Read_Extra,The following statement contains a magic number: switch (sign)                  {                      case 0xA0000001:                          extra.environment.blockSize = size;                          extra.environment.blockSignature = sign;                          extra.environment.targetAnsi = Get_String(br' 260' false);                          extra.environment.targetUnicode = Get_String(br' 260' true);                          break;                        case 0xA0000002:                          CONSOLE_PROPS cp = new CONSOLE_PROPS();                          cp.blockSize = size;                          cp.blockSignature = sign;                          cp.fillAttributes = (FILL_ATTRIBUTES)br.ReadUInt16();                          cp.popupFillAttributes = br.ReadUInt16();                          cp.screenBufferSizeX = br.ReadUInt16();                          cp.screenBufferSizeY = br.ReadUInt16();                          cp.windowSizeX = br.ReadUInt16();                          cp.windowSizeY = br.ReadUInt16();                          cp.windowOriginX = br.ReadUInt16();                          cp.windowOriginY = br.ReadUInt16();                          cp.unused1 = br.ReadUInt32();                          cp.unused2 = br.ReadUInt32();                          cp.fontSize = br.ReadUInt32();                          cp.fontFamily = (FONT_FAMILY)br.ReadUInt32();                          cp.fontWeight = br.ReadUInt32();                          cp.faceName = Get_String(br' 32' true);                          cp.cursorSize = br.ReadUInt32();                          cp.fullScreen = br.ReadUInt32();                          cp.quickEdit = br.ReadUInt32();                          cp.insertMode = br.ReadUInt32();                          cp.autoPosition = br.ReadUInt32();                          cp.historyBufferSize = br.ReadUInt32();                          cp.numberOfHistoryBuffer = br.ReadUInt32();                          cp.historyNoDup = br.ReadUInt32();                          cp.colorTable = new uint[0x10];                          for (int i = 0; i < 0x10; i++)                              cp.colorTable[i] = br.ReadUInt32();                          extra.console = cp;                          break;                        case 0xA0000003:                          extra.tracker.blockSize = size;                          extra.tracker.blockSignature = sign;                          extra.tracker.length = br.ReadUInt32();                          extra.tracker.version = br.ReadUInt32();                          extra.tracker.machineID = Get_String(br' 0x10' false);                          extra.tracker.droid = br.ReadBytes(0x20);                          extra.tracker.droidBirth = br.ReadBytes(0x20);                          break;                        case 0xA0000004:                          extra.consoleFe.blockSize = size;                          extra.consoleFe.blockSignature = sign;                          extra.consoleFe.codePage = br.ReadUInt32();                          break;                        case 0xA0000005:                          extra.specialFolder.blockSize = size;                          extra.specialFolder.blockSignature = sign;                          extra.specialFolder.specialFolderID = br.ReadUInt32();                          extra.specialFolder.offset = br.ReadUInt32();                          break;                        case 0xA0000006:                          extra.darwin.blockSize = size;                          extra.darwin.blockSignature = sign;                          extra.darwin.darwinDataAnsi = Get_String(br' 260' false);                          extra.darwin.darwinDataUnicode = Get_String(br' 260' true);                          break;                        case 0xA0000007:                          extra.iconEnvironment.blockSize = size;                          extra.iconEnvironment.blockSignature = sign;                          extra.iconEnvironment.targetAnsi = Get_String(br' 260' false);                          extra.iconEnvironment.targetUnicode = Get_String(br' 260' true);                          break;                        case 0xA0000008:                          extra.shim.blockSize = size;                          extra.shim.blockSignature = sign;                          extra.shim.layerName = Get_String(br' (int)extra.shim.blockSize - 8'  true);                          break;                        case 0xA0000009:                          extra.propertyStore.blockSize = size;                          extra.propertyStore.blockSignature = sign;                          extra.propertyStore.propertyStore = null;                          break;                        case 0xA000000B:                          extra.knownFolder.blockSize = size;                          extra.knownFolder.blockSignature = sign;                          extra.knownFolder.knownFolderID = br.ReadBytes(0x10);                          extra.knownFolder.offset = br.ReadUInt32();                          break;                        case 0xA000000C:                          extra.vistaIDList.blockSize = size;                          extra.vistaIDList.blockSignature = sign;                          extra.vistaIDList.idlist = Read_IDList(br);                          break;                  }
Magic Number,Ekona.Helper,LNK,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Helper\LNK.cs,Read_Extra,The following statement contains a magic number: switch (sign)                  {                      case 0xA0000001:                          extra.environment.blockSize = size;                          extra.environment.blockSignature = sign;                          extra.environment.targetAnsi = Get_String(br' 260' false);                          extra.environment.targetUnicode = Get_String(br' 260' true);                          break;                        case 0xA0000002:                          CONSOLE_PROPS cp = new CONSOLE_PROPS();                          cp.blockSize = size;                          cp.blockSignature = sign;                          cp.fillAttributes = (FILL_ATTRIBUTES)br.ReadUInt16();                          cp.popupFillAttributes = br.ReadUInt16();                          cp.screenBufferSizeX = br.ReadUInt16();                          cp.screenBufferSizeY = br.ReadUInt16();                          cp.windowSizeX = br.ReadUInt16();                          cp.windowSizeY = br.ReadUInt16();                          cp.windowOriginX = br.ReadUInt16();                          cp.windowOriginY = br.ReadUInt16();                          cp.unused1 = br.ReadUInt32();                          cp.unused2 = br.ReadUInt32();                          cp.fontSize = br.ReadUInt32();                          cp.fontFamily = (FONT_FAMILY)br.ReadUInt32();                          cp.fontWeight = br.ReadUInt32();                          cp.faceName = Get_String(br' 32' true);                          cp.cursorSize = br.ReadUInt32();                          cp.fullScreen = br.ReadUInt32();                          cp.quickEdit = br.ReadUInt32();                          cp.insertMode = br.ReadUInt32();                          cp.autoPosition = br.ReadUInt32();                          cp.historyBufferSize = br.ReadUInt32();                          cp.numberOfHistoryBuffer = br.ReadUInt32();                          cp.historyNoDup = br.ReadUInt32();                          cp.colorTable = new uint[0x10];                          for (int i = 0; i < 0x10; i++)                              cp.colorTable[i] = br.ReadUInt32();                          extra.console = cp;                          break;                        case 0xA0000003:                          extra.tracker.blockSize = size;                          extra.tracker.blockSignature = sign;                          extra.tracker.length = br.ReadUInt32();                          extra.tracker.version = br.ReadUInt32();                          extra.tracker.machineID = Get_String(br' 0x10' false);                          extra.tracker.droid = br.ReadBytes(0x20);                          extra.tracker.droidBirth = br.ReadBytes(0x20);                          break;                        case 0xA0000004:                          extra.consoleFe.blockSize = size;                          extra.consoleFe.blockSignature = sign;                          extra.consoleFe.codePage = br.ReadUInt32();                          break;                        case 0xA0000005:                          extra.specialFolder.blockSize = size;                          extra.specialFolder.blockSignature = sign;                          extra.specialFolder.specialFolderID = br.ReadUInt32();                          extra.specialFolder.offset = br.ReadUInt32();                          break;                        case 0xA0000006:                          extra.darwin.blockSize = size;                          extra.darwin.blockSignature = sign;                          extra.darwin.darwinDataAnsi = Get_String(br' 260' false);                          extra.darwin.darwinDataUnicode = Get_String(br' 260' true);                          break;                        case 0xA0000007:                          extra.iconEnvironment.blockSize = size;                          extra.iconEnvironment.blockSignature = sign;                          extra.iconEnvironment.targetAnsi = Get_String(br' 260' false);                          extra.iconEnvironment.targetUnicode = Get_String(br' 260' true);                          break;                        case 0xA0000008:                          extra.shim.blockSize = size;                          extra.shim.blockSignature = sign;                          extra.shim.layerName = Get_String(br' (int)extra.shim.blockSize - 8'  true);                          break;                        case 0xA0000009:                          extra.propertyStore.blockSize = size;                          extra.propertyStore.blockSignature = sign;                          extra.propertyStore.propertyStore = null;                          break;                        case 0xA000000B:                          extra.knownFolder.blockSize = size;                          extra.knownFolder.blockSignature = sign;                          extra.knownFolder.knownFolderID = br.ReadBytes(0x10);                          extra.knownFolder.offset = br.ReadUInt32();                          break;                        case 0xA000000C:                          extra.vistaIDList.blockSize = size;                          extra.vistaIDList.blockSignature = sign;                          extra.vistaIDList.idlist = Read_IDList(br);                          break;                  }
Magic Number,Ekona.Helper,LNK,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Helper\LNK.cs,Read_Extra,The following statement contains a magic number: switch (sign)                  {                      case 0xA0000001:                          extra.environment.blockSize = size;                          extra.environment.blockSignature = sign;                          extra.environment.targetAnsi = Get_String(br' 260' false);                          extra.environment.targetUnicode = Get_String(br' 260' true);                          break;                        case 0xA0000002:                          CONSOLE_PROPS cp = new CONSOLE_PROPS();                          cp.blockSize = size;                          cp.blockSignature = sign;                          cp.fillAttributes = (FILL_ATTRIBUTES)br.ReadUInt16();                          cp.popupFillAttributes = br.ReadUInt16();                          cp.screenBufferSizeX = br.ReadUInt16();                          cp.screenBufferSizeY = br.ReadUInt16();                          cp.windowSizeX = br.ReadUInt16();                          cp.windowSizeY = br.ReadUInt16();                          cp.windowOriginX = br.ReadUInt16();                          cp.windowOriginY = br.ReadUInt16();                          cp.unused1 = br.ReadUInt32();                          cp.unused2 = br.ReadUInt32();                          cp.fontSize = br.ReadUInt32();                          cp.fontFamily = (FONT_FAMILY)br.ReadUInt32();                          cp.fontWeight = br.ReadUInt32();                          cp.faceName = Get_String(br' 32' true);                          cp.cursorSize = br.ReadUInt32();                          cp.fullScreen = br.ReadUInt32();                          cp.quickEdit = br.ReadUInt32();                          cp.insertMode = br.ReadUInt32();                          cp.autoPosition = br.ReadUInt32();                          cp.historyBufferSize = br.ReadUInt32();                          cp.numberOfHistoryBuffer = br.ReadUInt32();                          cp.historyNoDup = br.ReadUInt32();                          cp.colorTable = new uint[0x10];                          for (int i = 0; i < 0x10; i++)                              cp.colorTable[i] = br.ReadUInt32();                          extra.console = cp;                          break;                        case 0xA0000003:                          extra.tracker.blockSize = size;                          extra.tracker.blockSignature = sign;                          extra.tracker.length = br.ReadUInt32();                          extra.tracker.version = br.ReadUInt32();                          extra.tracker.machineID = Get_String(br' 0x10' false);                          extra.tracker.droid = br.ReadBytes(0x20);                          extra.tracker.droidBirth = br.ReadBytes(0x20);                          break;                        case 0xA0000004:                          extra.consoleFe.blockSize = size;                          extra.consoleFe.blockSignature = sign;                          extra.consoleFe.codePage = br.ReadUInt32();                          break;                        case 0xA0000005:                          extra.specialFolder.blockSize = size;                          extra.specialFolder.blockSignature = sign;                          extra.specialFolder.specialFolderID = br.ReadUInt32();                          extra.specialFolder.offset = br.ReadUInt32();                          break;                        case 0xA0000006:                          extra.darwin.blockSize = size;                          extra.darwin.blockSignature = sign;                          extra.darwin.darwinDataAnsi = Get_String(br' 260' false);                          extra.darwin.darwinDataUnicode = Get_String(br' 260' true);                          break;                        case 0xA0000007:                          extra.iconEnvironment.blockSize = size;                          extra.iconEnvironment.blockSignature = sign;                          extra.iconEnvironment.targetAnsi = Get_String(br' 260' false);                          extra.iconEnvironment.targetUnicode = Get_String(br' 260' true);                          break;                        case 0xA0000008:                          extra.shim.blockSize = size;                          extra.shim.blockSignature = sign;                          extra.shim.layerName = Get_String(br' (int)extra.shim.blockSize - 8'  true);                          break;                        case 0xA0000009:                          extra.propertyStore.blockSize = size;                          extra.propertyStore.blockSignature = sign;                          extra.propertyStore.propertyStore = null;                          break;                        case 0xA000000B:                          extra.knownFolder.blockSize = size;                          extra.knownFolder.blockSignature = sign;                          extra.knownFolder.knownFolderID = br.ReadBytes(0x10);                          extra.knownFolder.offset = br.ReadUInt32();                          break;                        case 0xA000000C:                          extra.vistaIDList.blockSize = size;                          extra.vistaIDList.blockSignature = sign;                          extra.vistaIDList.idlist = Read_IDList(br);                          break;                  }
Magic Number,Ekona.Helper,LNK,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Helper\LNK.cs,Read_Extra,The following statement contains a magic number: switch (sign)                  {                      case 0xA0000001:                          extra.environment.blockSize = size;                          extra.environment.blockSignature = sign;                          extra.environment.targetAnsi = Get_String(br' 260' false);                          extra.environment.targetUnicode = Get_String(br' 260' true);                          break;                        case 0xA0000002:                          CONSOLE_PROPS cp = new CONSOLE_PROPS();                          cp.blockSize = size;                          cp.blockSignature = sign;                          cp.fillAttributes = (FILL_ATTRIBUTES)br.ReadUInt16();                          cp.popupFillAttributes = br.ReadUInt16();                          cp.screenBufferSizeX = br.ReadUInt16();                          cp.screenBufferSizeY = br.ReadUInt16();                          cp.windowSizeX = br.ReadUInt16();                          cp.windowSizeY = br.ReadUInt16();                          cp.windowOriginX = br.ReadUInt16();                          cp.windowOriginY = br.ReadUInt16();                          cp.unused1 = br.ReadUInt32();                          cp.unused2 = br.ReadUInt32();                          cp.fontSize = br.ReadUInt32();                          cp.fontFamily = (FONT_FAMILY)br.ReadUInt32();                          cp.fontWeight = br.ReadUInt32();                          cp.faceName = Get_String(br' 32' true);                          cp.cursorSize = br.ReadUInt32();                          cp.fullScreen = br.ReadUInt32();                          cp.quickEdit = br.ReadUInt32();                          cp.insertMode = br.ReadUInt32();                          cp.autoPosition = br.ReadUInt32();                          cp.historyBufferSize = br.ReadUInt32();                          cp.numberOfHistoryBuffer = br.ReadUInt32();                          cp.historyNoDup = br.ReadUInt32();                          cp.colorTable = new uint[0x10];                          for (int i = 0; i < 0x10; i++)                              cp.colorTable[i] = br.ReadUInt32();                          extra.console = cp;                          break;                        case 0xA0000003:                          extra.tracker.blockSize = size;                          extra.tracker.blockSignature = sign;                          extra.tracker.length = br.ReadUInt32();                          extra.tracker.version = br.ReadUInt32();                          extra.tracker.machineID = Get_String(br' 0x10' false);                          extra.tracker.droid = br.ReadBytes(0x20);                          extra.tracker.droidBirth = br.ReadBytes(0x20);                          break;                        case 0xA0000004:                          extra.consoleFe.blockSize = size;                          extra.consoleFe.blockSignature = sign;                          extra.consoleFe.codePage = br.ReadUInt32();                          break;                        case 0xA0000005:                          extra.specialFolder.blockSize = size;                          extra.specialFolder.blockSignature = sign;                          extra.specialFolder.specialFolderID = br.ReadUInt32();                          extra.specialFolder.offset = br.ReadUInt32();                          break;                        case 0xA0000006:                          extra.darwin.blockSize = size;                          extra.darwin.blockSignature = sign;                          extra.darwin.darwinDataAnsi = Get_String(br' 260' false);                          extra.darwin.darwinDataUnicode = Get_String(br' 260' true);                          break;                        case 0xA0000007:                          extra.iconEnvironment.blockSize = size;                          extra.iconEnvironment.blockSignature = sign;                          extra.iconEnvironment.targetAnsi = Get_String(br' 260' false);                          extra.iconEnvironment.targetUnicode = Get_String(br' 260' true);                          break;                        case 0xA0000008:                          extra.shim.blockSize = size;                          extra.shim.blockSignature = sign;                          extra.shim.layerName = Get_String(br' (int)extra.shim.blockSize - 8'  true);                          break;                        case 0xA0000009:                          extra.propertyStore.blockSize = size;                          extra.propertyStore.blockSignature = sign;                          extra.propertyStore.propertyStore = null;                          break;                        case 0xA000000B:                          extra.knownFolder.blockSize = size;                          extra.knownFolder.blockSignature = sign;                          extra.knownFolder.knownFolderID = br.ReadBytes(0x10);                          extra.knownFolder.offset = br.ReadUInt32();                          break;                        case 0xA000000C:                          extra.vistaIDList.blockSize = size;                          extra.vistaIDList.blockSignature = sign;                          extra.vistaIDList.idlist = Read_IDList(br);                          break;                  }
Magic Number,Ekona.Helper,LNK,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Helper\LNK.cs,Read_Extra,The following statement contains a magic number: switch (sign)                  {                      case 0xA0000001:                          extra.environment.blockSize = size;                          extra.environment.blockSignature = sign;                          extra.environment.targetAnsi = Get_String(br' 260' false);                          extra.environment.targetUnicode = Get_String(br' 260' true);                          break;                        case 0xA0000002:                          CONSOLE_PROPS cp = new CONSOLE_PROPS();                          cp.blockSize = size;                          cp.blockSignature = sign;                          cp.fillAttributes = (FILL_ATTRIBUTES)br.ReadUInt16();                          cp.popupFillAttributes = br.ReadUInt16();                          cp.screenBufferSizeX = br.ReadUInt16();                          cp.screenBufferSizeY = br.ReadUInt16();                          cp.windowSizeX = br.ReadUInt16();                          cp.windowSizeY = br.ReadUInt16();                          cp.windowOriginX = br.ReadUInt16();                          cp.windowOriginY = br.ReadUInt16();                          cp.unused1 = br.ReadUInt32();                          cp.unused2 = br.ReadUInt32();                          cp.fontSize = br.ReadUInt32();                          cp.fontFamily = (FONT_FAMILY)br.ReadUInt32();                          cp.fontWeight = br.ReadUInt32();                          cp.faceName = Get_String(br' 32' true);                          cp.cursorSize = br.ReadUInt32();                          cp.fullScreen = br.ReadUInt32();                          cp.quickEdit = br.ReadUInt32();                          cp.insertMode = br.ReadUInt32();                          cp.autoPosition = br.ReadUInt32();                          cp.historyBufferSize = br.ReadUInt32();                          cp.numberOfHistoryBuffer = br.ReadUInt32();                          cp.historyNoDup = br.ReadUInt32();                          cp.colorTable = new uint[0x10];                          for (int i = 0; i < 0x10; i++)                              cp.colorTable[i] = br.ReadUInt32();                          extra.console = cp;                          break;                        case 0xA0000003:                          extra.tracker.blockSize = size;                          extra.tracker.blockSignature = sign;                          extra.tracker.length = br.ReadUInt32();                          extra.tracker.version = br.ReadUInt32();                          extra.tracker.machineID = Get_String(br' 0x10' false);                          extra.tracker.droid = br.ReadBytes(0x20);                          extra.tracker.droidBirth = br.ReadBytes(0x20);                          break;                        case 0xA0000004:                          extra.consoleFe.blockSize = size;                          extra.consoleFe.blockSignature = sign;                          extra.consoleFe.codePage = br.ReadUInt32();                          break;                        case 0xA0000005:                          extra.specialFolder.blockSize = size;                          extra.specialFolder.blockSignature = sign;                          extra.specialFolder.specialFolderID = br.ReadUInt32();                          extra.specialFolder.offset = br.ReadUInt32();                          break;                        case 0xA0000006:                          extra.darwin.blockSize = size;                          extra.darwin.blockSignature = sign;                          extra.darwin.darwinDataAnsi = Get_String(br' 260' false);                          extra.darwin.darwinDataUnicode = Get_String(br' 260' true);                          break;                        case 0xA0000007:                          extra.iconEnvironment.blockSize = size;                          extra.iconEnvironment.blockSignature = sign;                          extra.iconEnvironment.targetAnsi = Get_String(br' 260' false);                          extra.iconEnvironment.targetUnicode = Get_String(br' 260' true);                          break;                        case 0xA0000008:                          extra.shim.blockSize = size;                          extra.shim.blockSignature = sign;                          extra.shim.layerName = Get_String(br' (int)extra.shim.blockSize - 8'  true);                          break;                        case 0xA0000009:                          extra.propertyStore.blockSize = size;                          extra.propertyStore.blockSignature = sign;                          extra.propertyStore.propertyStore = null;                          break;                        case 0xA000000B:                          extra.knownFolder.blockSize = size;                          extra.knownFolder.blockSignature = sign;                          extra.knownFolder.knownFolderID = br.ReadBytes(0x10);                          extra.knownFolder.offset = br.ReadUInt32();                          break;                        case 0xA000000C:                          extra.vistaIDList.blockSize = size;                          extra.vistaIDList.blockSignature = sign;                          extra.vistaIDList.idlist = Read_IDList(br);                          break;                  }
Magic Number,Ekona.Helper,LNK,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Helper\LNK.cs,Read_Extra,The following statement contains a magic number: switch (sign)                  {                      case 0xA0000001:                          extra.environment.blockSize = size;                          extra.environment.blockSignature = sign;                          extra.environment.targetAnsi = Get_String(br' 260' false);                          extra.environment.targetUnicode = Get_String(br' 260' true);                          break;                        case 0xA0000002:                          CONSOLE_PROPS cp = new CONSOLE_PROPS();                          cp.blockSize = size;                          cp.blockSignature = sign;                          cp.fillAttributes = (FILL_ATTRIBUTES)br.ReadUInt16();                          cp.popupFillAttributes = br.ReadUInt16();                          cp.screenBufferSizeX = br.ReadUInt16();                          cp.screenBufferSizeY = br.ReadUInt16();                          cp.windowSizeX = br.ReadUInt16();                          cp.windowSizeY = br.ReadUInt16();                          cp.windowOriginX = br.ReadUInt16();                          cp.windowOriginY = br.ReadUInt16();                          cp.unused1 = br.ReadUInt32();                          cp.unused2 = br.ReadUInt32();                          cp.fontSize = br.ReadUInt32();                          cp.fontFamily = (FONT_FAMILY)br.ReadUInt32();                          cp.fontWeight = br.ReadUInt32();                          cp.faceName = Get_String(br' 32' true);                          cp.cursorSize = br.ReadUInt32();                          cp.fullScreen = br.ReadUInt32();                          cp.quickEdit = br.ReadUInt32();                          cp.insertMode = br.ReadUInt32();                          cp.autoPosition = br.ReadUInt32();                          cp.historyBufferSize = br.ReadUInt32();                          cp.numberOfHistoryBuffer = br.ReadUInt32();                          cp.historyNoDup = br.ReadUInt32();                          cp.colorTable = new uint[0x10];                          for (int i = 0; i < 0x10; i++)                              cp.colorTable[i] = br.ReadUInt32();                          extra.console = cp;                          break;                        case 0xA0000003:                          extra.tracker.blockSize = size;                          extra.tracker.blockSignature = sign;                          extra.tracker.length = br.ReadUInt32();                          extra.tracker.version = br.ReadUInt32();                          extra.tracker.machineID = Get_String(br' 0x10' false);                          extra.tracker.droid = br.ReadBytes(0x20);                          extra.tracker.droidBirth = br.ReadBytes(0x20);                          break;                        case 0xA0000004:                          extra.consoleFe.blockSize = size;                          extra.consoleFe.blockSignature = sign;                          extra.consoleFe.codePage = br.ReadUInt32();                          break;                        case 0xA0000005:                          extra.specialFolder.blockSize = size;                          extra.specialFolder.blockSignature = sign;                          extra.specialFolder.specialFolderID = br.ReadUInt32();                          extra.specialFolder.offset = br.ReadUInt32();                          break;                        case 0xA0000006:                          extra.darwin.blockSize = size;                          extra.darwin.blockSignature = sign;                          extra.darwin.darwinDataAnsi = Get_String(br' 260' false);                          extra.darwin.darwinDataUnicode = Get_String(br' 260' true);                          break;                        case 0xA0000007:                          extra.iconEnvironment.blockSize = size;                          extra.iconEnvironment.blockSignature = sign;                          extra.iconEnvironment.targetAnsi = Get_String(br' 260' false);                          extra.iconEnvironment.targetUnicode = Get_String(br' 260' true);                          break;                        case 0xA0000008:                          extra.shim.blockSize = size;                          extra.shim.blockSignature = sign;                          extra.shim.layerName = Get_String(br' (int)extra.shim.blockSize - 8'  true);                          break;                        case 0xA0000009:                          extra.propertyStore.blockSize = size;                          extra.propertyStore.blockSignature = sign;                          extra.propertyStore.propertyStore = null;                          break;                        case 0xA000000B:                          extra.knownFolder.blockSize = size;                          extra.knownFolder.blockSignature = sign;                          extra.knownFolder.knownFolderID = br.ReadBytes(0x10);                          extra.knownFolder.offset = br.ReadUInt32();                          break;                        case 0xA000000C:                          extra.vistaIDList.blockSize = size;                          extra.vistaIDList.blockSignature = sign;                          extra.vistaIDList.idlist = Read_IDList(br);                          break;                  }
Magic Number,Ekona.Helper,LNK,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Helper\LNK.cs,Get_String,The following statement contains a magic number: c = Encoding.Unicode.GetChars(br.ReadBytes(2))[0];
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,BGR555ToColor,The following statement contains a magic number: Color[] colors = new Color[bytes.Length / 2];
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,BGR555ToColor,The following statement contains a magic number: colors[i] = BGR555ToColor(bytes[i * 2]' bytes[i * 2 + 1]);
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,BGR555ToColor,The following statement contains a magic number: colors[i] = BGR555ToColor(bytes[i * 2]' bytes[i * 2 + 1]);
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,BGR555ToColor,The following statement contains a magic number: i < bytes.Length / 2
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,BGR555ToColor,The following statement contains a magic number: g = ((bgr & 0x03E0) >> 5) * 0x08;
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,BGR555ToColor,The following statement contains a magic number: b = ((bgr & 0x7C00) >> 10) * 0x08;
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,ColorToBGR555,The following statement contains a magic number: byte[] data = new byte[colors.Length * 2];
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,ColorToBGR555,The following statement contains a magic number: data[i * 2] = bgr[0];
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,ColorToBGR555,The following statement contains a magic number: data[i * 2 + 1] = bgr[1];
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,ColorToBGRA555,The following statement contains a magic number: byte[] d = new byte[2];
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,ColorToBGRA555,The following statement contains a magic number: int r = color.R / 8;
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,ColorToBGRA555,The following statement contains a magic number: int g = (color.G / 8) << 5;
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,ColorToBGRA555,The following statement contains a magic number: int g = (color.G / 8) << 5;
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,ColorToBGRA555,The following statement contains a magic number: int b = (color.B / 8) << 10;
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,ColorToBGRA555,The following statement contains a magic number: int b = (color.B / 8) << 10;
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,ColorToBGRA555,The following statement contains a magic number: int a = (color.A / 255) << 15;
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,ColorToBGRA555,The following statement contains a magic number: int a = (color.A / 255) << 15;
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,ColorToBGRA555,The following statement contains a magic number: Array.Copy(BitConverter.GetBytes(bgra)' d' 2);
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,ColorToBGR555,The following statement contains a magic number: byte[] d = new byte[2];
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,ColorToBGR555,The following statement contains a magic number: int r = color.R / 8;
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,ColorToBGR555,The following statement contains a magic number: int g = (color.G / 8) << 5;
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,ColorToBGR555,The following statement contains a magic number: int g = (color.G / 8) << 5;
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,ColorToBGR555,The following statement contains a magic number: int b = (color.B / 8) << 10;
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,ColorToBGR555,The following statement contains a magic number: int b = (color.B / 8) << 10;
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,ColorToBGR555,The following statement contains a magic number: Array.Copy(BitConverter.GetBytes(bgr)' d' 2);
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Get_Image,The following statement contains a magic number: Bitmap palette = new Bitmap(160' height * 10);
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Get_Image,The following statement contains a magic number: Bitmap palette = new Bitmap(160' height * 10);
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Get_Image,The following statement contains a magic number: colors.Length <= j + 16 * i
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Get_Image,The following statement contains a magic number: palette.SetPixel((j * 10 + q)' (i * 10 + k)' colors[j + 16 * i]);
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Get_Image,The following statement contains a magic number: palette.SetPixel((j * 10 + q)' (i * 10 + k)' colors[j + 16 * i]);
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Get_Image,The following statement contains a magic number: palette.SetPixel((j * 10 + q)' (i * 10 + k)' colors[j + 16 * i]);
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Get_Image,The following statement contains a magic number: k < 10
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Get_Image,The following statement contains a magic number: j < 16
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Get_Image,The following statement contains a magic number: i < 16 & !end
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,AlphaIndexTo32ARGB,The following statement contains a magic number: Byte[] direct = new byte[data.Length * 4];
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,AlphaIndexTo32ARGB,The following statement contains a magic number: int alpha = (data[i] >> 5);
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,AlphaIndexTo32ARGB,The following statement contains a magic number: alpha = ((alpha * 4) + (alpha / 2)) * 8;
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,AlphaIndexTo32ARGB,The following statement contains a magic number: alpha = ((alpha * 4) + (alpha / 2)) * 8;
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,AlphaIndexTo32ARGB,The following statement contains a magic number: alpha = ((alpha * 4) + (alpha / 2)) * 8;
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,AlphaIndexTo32ARGB,The following statement contains a magic number: Array.Copy(argb32' 0' direct' i * 4' 4);
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,AlphaIndexTo32ARGB,The following statement contains a magic number: Array.Copy(argb32' 0' direct' i * 4' 4);
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Bpp2ToBpp4,The following statement contains a magic number: Byte[] bpp4 = new byte[data.Length * 2];
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Bpp2ToBpp4,The following statement contains a magic number: b1 += (byte)(((data[i] >> 2) & 0x3) << 4);
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Bpp2ToBpp4,The following statement contains a magic number: b1 += (byte)(((data[i] >> 2) & 0x3) << 4);
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Bpp2ToBpp4,The following statement contains a magic number: byte b2 = (byte)((data[i] >> 4) & 0x3);
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Bpp2ToBpp4,The following statement contains a magic number: b2 += (byte)(((data[i] >> 6) & 0x3) << 4);
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Bpp2ToBpp4,The following statement contains a magic number: b2 += (byte)(((data[i] >> 6) & 0x3) << 4);
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Bpp2ToBpp4,The following statement contains a magic number: bpp4[i * 2] = b1;
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Bpp2ToBpp4,The following statement contains a magic number: bpp4[i * 2 + 1] = b2;
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Get_Color,The following statement contains a magic number: switch (format)              {                  case ColorFormat.A3I5:                      if (data.Length <= pos) break;                      index = data[pos] & 0x1F;                      alpha = (data[pos] >> 5);                      alpha = ((alpha * 4) + (alpha / 2)) * 8;                      if (palette.Length > index)                          color = Color.FromArgb(alpha'                              palette[index].R'                              palette[index].G'                              palette[index].B);                        pos++;                      break;                  case ColorFormat.A4I4:                      if (data.Length <= pos) break;                      index = data[pos] & 0xF;                      alpha = (data[pos] >> 4);                      alpha *= 16;                      if (palette.Length > index)                          color = Color.FromArgb(alpha'                              palette[index].R'                              palette[index].G'                              palette[index].B);                        pos++;                      break;                  case ColorFormat.A5I3:                      if (data.Length <= pos) break;                      index = data[pos] & 0x7;                      alpha = (data[pos] >> 3);                      alpha *= 8;                      if (palette.Length > index)                          color = Color.FromArgb(alpha'                              palette[index].R'                              palette[index].G'                              palette[index].B);                        pos++;                      break;                    case ColorFormat.colors2:                      if (data.Length <= (pos / 8)) break;                      byte bit1 = data[pos / 8];                      index = Helper.BitsConverter.ByteToBits(bit1)[pos % 8];                      if (palette.Length > index)                          color = palette[index];                      pos++;                      break;                  case ColorFormat.colors4:                      if (data.Length <= (pos / 4)) break;                      byte bit2 = data[pos / 4];                      index = Helper.BitsConverter.ByteToBit2(bit2)[pos % 4];                      if (palette.Length > index)                          color = palette[index];                      pos++;                      break;                  case ColorFormat.colors16:                      if (data.Length <= (pos / 2)) break;                      byte bit4 = data[pos / 2];                      index = Helper.BitsConverter.ByteToBit4(bit4)[pos % 2];                      if (palette.Length > index)                          color = palette[index];                      pos++;                      break;                  case ColorFormat.colors256:                      if (data.Length > pos && palette.Length > data[pos])                          color = palette[data[pos]];                      pos++;                      break;                    case ColorFormat.direct:    // RGB555                      if (pos + 2 >= data.Length)                          break;                        ushort byteColor = BitConverter.ToUInt16(data' pos);                      color = Color.FromArgb(                          ((byteColor >> 15) == 1 ? 255 : 0)'                          (byteColor & 0x1F) * 8'                          ((byteColor >> 5) & 0x1F) * 8'                          ((byteColor >> 10) & 0x1F) * 8);                      pos += 2;                      break;                    case ColorFormat.BGRA32:                      if (pos + 4 >= data.Length)                          break;                        color = Color.FromArgb(data[pos+3]' data[pos+0]' data[pos+1]' data[pos+2]);                      pos += 4;                      break;                    case ColorFormat.ABGR32:                      if (pos + 4 >= data.Length)                          break;                        color = Color.FromArgb(data[pos+0]' data[pos+1]' data[pos+2]' data[pos+3]);                      pos += 4;                      break;                    case ColorFormat.texel4x4:                      throw new NotSupportedException("Compressed texel 4x4 not supported yet");                  default:                      throw new FormatException("Unknown color format");              }
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Get_Color,The following statement contains a magic number: switch (format)              {                  case ColorFormat.A3I5:                      if (data.Length <= pos) break;                      index = data[pos] & 0x1F;                      alpha = (data[pos] >> 5);                      alpha = ((alpha * 4) + (alpha / 2)) * 8;                      if (palette.Length > index)                          color = Color.FromArgb(alpha'                              palette[index].R'                              palette[index].G'                              palette[index].B);                        pos++;                      break;                  case ColorFormat.A4I4:                      if (data.Length <= pos) break;                      index = data[pos] & 0xF;                      alpha = (data[pos] >> 4);                      alpha *= 16;                      if (palette.Length > index)                          color = Color.FromArgb(alpha'                              palette[index].R'                              palette[index].G'                              palette[index].B);                        pos++;                      break;                  case ColorFormat.A5I3:                      if (data.Length <= pos) break;                      index = data[pos] & 0x7;                      alpha = (data[pos] >> 3);                      alpha *= 8;                      if (palette.Length > index)                          color = Color.FromArgb(alpha'                              palette[index].R'                              palette[index].G'                              palette[index].B);                        pos++;                      break;                    case ColorFormat.colors2:                      if (data.Length <= (pos / 8)) break;                      byte bit1 = data[pos / 8];                      index = Helper.BitsConverter.ByteToBits(bit1)[pos % 8];                      if (palette.Length > index)                          color = palette[index];                      pos++;                      break;                  case ColorFormat.colors4:                      if (data.Length <= (pos / 4)) break;                      byte bit2 = data[pos / 4];                      index = Helper.BitsConverter.ByteToBit2(bit2)[pos % 4];                      if (palette.Length > index)                          color = palette[index];                      pos++;                      break;                  case ColorFormat.colors16:                      if (data.Length <= (pos / 2)) break;                      byte bit4 = data[pos / 2];                      index = Helper.BitsConverter.ByteToBit4(bit4)[pos % 2];                      if (palette.Length > index)                          color = palette[index];                      pos++;                      break;                  case ColorFormat.colors256:                      if (data.Length > pos && palette.Length > data[pos])                          color = palette[data[pos]];                      pos++;                      break;                    case ColorFormat.direct:    // RGB555                      if (pos + 2 >= data.Length)                          break;                        ushort byteColor = BitConverter.ToUInt16(data' pos);                      color = Color.FromArgb(                          ((byteColor >> 15) == 1 ? 255 : 0)'                          (byteColor & 0x1F) * 8'                          ((byteColor >> 5) & 0x1F) * 8'                          ((byteColor >> 10) & 0x1F) * 8);                      pos += 2;                      break;                    case ColorFormat.BGRA32:                      if (pos + 4 >= data.Length)                          break;                        color = Color.FromArgb(data[pos+3]' data[pos+0]' data[pos+1]' data[pos+2]);                      pos += 4;                      break;                    case ColorFormat.ABGR32:                      if (pos + 4 >= data.Length)                          break;                        color = Color.FromArgb(data[pos+0]' data[pos+1]' data[pos+2]' data[pos+3]);                      pos += 4;                      break;                    case ColorFormat.texel4x4:                      throw new NotSupportedException("Compressed texel 4x4 not supported yet");                  default:                      throw new FormatException("Unknown color format");              }
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Get_Color,The following statement contains a magic number: switch (format)              {                  case ColorFormat.A3I5:                      if (data.Length <= pos) break;                      index = data[pos] & 0x1F;                      alpha = (data[pos] >> 5);                      alpha = ((alpha * 4) + (alpha / 2)) * 8;                      if (palette.Length > index)                          color = Color.FromArgb(alpha'                              palette[index].R'                              palette[index].G'                              palette[index].B);                        pos++;                      break;                  case ColorFormat.A4I4:                      if (data.Length <= pos) break;                      index = data[pos] & 0xF;                      alpha = (data[pos] >> 4);                      alpha *= 16;                      if (palette.Length > index)                          color = Color.FromArgb(alpha'                              palette[index].R'                              palette[index].G'                              palette[index].B);                        pos++;                      break;                  case ColorFormat.A5I3:                      if (data.Length <= pos) break;                      index = data[pos] & 0x7;                      alpha = (data[pos] >> 3);                      alpha *= 8;                      if (palette.Length > index)                          color = Color.FromArgb(alpha'                              palette[index].R'                              palette[index].G'                              palette[index].B);                        pos++;                      break;                    case ColorFormat.colors2:                      if (data.Length <= (pos / 8)) break;                      byte bit1 = data[pos / 8];                      index = Helper.BitsConverter.ByteToBits(bit1)[pos % 8];                      if (palette.Length > index)                          color = palette[index];                      pos++;                      break;                  case ColorFormat.colors4:                      if (data.Length <= (pos / 4)) break;                      byte bit2 = data[pos / 4];                      index = Helper.BitsConverter.ByteToBit2(bit2)[pos % 4];                      if (palette.Length > index)                          color = palette[index];                      pos++;                      break;                  case ColorFormat.colors16:                      if (data.Length <= (pos / 2)) break;                      byte bit4 = data[pos / 2];                      index = Helper.BitsConverter.ByteToBit4(bit4)[pos % 2];                      if (palette.Length > index)                          color = palette[index];                      pos++;                      break;                  case ColorFormat.colors256:                      if (data.Length > pos && palette.Length > data[pos])                          color = palette[data[pos]];                      pos++;                      break;                    case ColorFormat.direct:    // RGB555                      if (pos + 2 >= data.Length)                          break;                        ushort byteColor = BitConverter.ToUInt16(data' pos);                      color = Color.FromArgb(                          ((byteColor >> 15) == 1 ? 255 : 0)'                          (byteColor & 0x1F) * 8'                          ((byteColor >> 5) & 0x1F) * 8'                          ((byteColor >> 10) & 0x1F) * 8);                      pos += 2;                      break;                    case ColorFormat.BGRA32:                      if (pos + 4 >= data.Length)                          break;                        color = Color.FromArgb(data[pos+3]' data[pos+0]' data[pos+1]' data[pos+2]);                      pos += 4;                      break;                    case ColorFormat.ABGR32:                      if (pos + 4 >= data.Length)                          break;                        color = Color.FromArgb(data[pos+0]' data[pos+1]' data[pos+2]' data[pos+3]);                      pos += 4;                      break;                    case ColorFormat.texel4x4:                      throw new NotSupportedException("Compressed texel 4x4 not supported yet");                  default:                      throw new FormatException("Unknown color format");              }
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Get_Color,The following statement contains a magic number: switch (format)              {                  case ColorFormat.A3I5:                      if (data.Length <= pos) break;                      index = data[pos] & 0x1F;                      alpha = (data[pos] >> 5);                      alpha = ((alpha * 4) + (alpha / 2)) * 8;                      if (palette.Length > index)                          color = Color.FromArgb(alpha'                              palette[index].R'                              palette[index].G'                              palette[index].B);                        pos++;                      break;                  case ColorFormat.A4I4:                      if (data.Length <= pos) break;                      index = data[pos] & 0xF;                      alpha = (data[pos] >> 4);                      alpha *= 16;                      if (palette.Length > index)                          color = Color.FromArgb(alpha'                              palette[index].R'                              palette[index].G'                              palette[index].B);                        pos++;                      break;                  case ColorFormat.A5I3:                      if (data.Length <= pos) break;                      index = data[pos] & 0x7;                      alpha = (data[pos] >> 3);                      alpha *= 8;                      if (palette.Length > index)                          color = Color.FromArgb(alpha'                              palette[index].R'                              palette[index].G'                              palette[index].B);                        pos++;                      break;                    case ColorFormat.colors2:                      if (data.Length <= (pos / 8)) break;                      byte bit1 = data[pos / 8];                      index = Helper.BitsConverter.ByteToBits(bit1)[pos % 8];                      if (palette.Length > index)                          color = palette[index];                      pos++;                      break;                  case ColorFormat.colors4:                      if (data.Length <= (pos / 4)) break;                      byte bit2 = data[pos / 4];                      index = Helper.BitsConverter.ByteToBit2(bit2)[pos % 4];                      if (palette.Length > index)                          color = palette[index];                      pos++;                      break;                  case ColorFormat.colors16:                      if (data.Length <= (pos / 2)) break;                      byte bit4 = data[pos / 2];                      index = Helper.BitsConverter.ByteToBit4(bit4)[pos % 2];                      if (palette.Length > index)                          color = palette[index];                      pos++;                      break;                  case ColorFormat.colors256:                      if (data.Length > pos && palette.Length > data[pos])                          color = palette[data[pos]];                      pos++;                      break;                    case ColorFormat.direct:    // RGB555                      if (pos + 2 >= data.Length)                          break;                        ushort byteColor = BitConverter.ToUInt16(data' pos);                      color = Color.FromArgb(                          ((byteColor >> 15) == 1 ? 255 : 0)'                          (byteColor & 0x1F) * 8'                          ((byteColor >> 5) & 0x1F) * 8'                          ((byteColor >> 10) & 0x1F) * 8);                      pos += 2;                      break;                    case ColorFormat.BGRA32:                      if (pos + 4 >= data.Length)                          break;                        color = Color.FromArgb(data[pos+3]' data[pos+0]' data[pos+1]' data[pos+2]);                      pos += 4;                      break;                    case ColorFormat.ABGR32:                      if (pos + 4 >= data.Length)                          break;                        color = Color.FromArgb(data[pos+0]' data[pos+1]' data[pos+2]' data[pos+3]);                      pos += 4;                      break;                    case ColorFormat.texel4x4:                      throw new NotSupportedException("Compressed texel 4x4 not supported yet");                  default:                      throw new FormatException("Unknown color format");              }
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Get_Color,The following statement contains a magic number: switch (format)              {                  case ColorFormat.A3I5:                      if (data.Length <= pos) break;                      index = data[pos] & 0x1F;                      alpha = (data[pos] >> 5);                      alpha = ((alpha * 4) + (alpha / 2)) * 8;                      if (palette.Length > index)                          color = Color.FromArgb(alpha'                              palette[index].R'                              palette[index].G'                              palette[index].B);                        pos++;                      break;                  case ColorFormat.A4I4:                      if (data.Length <= pos) break;                      index = data[pos] & 0xF;                      alpha = (data[pos] >> 4);                      alpha *= 16;                      if (palette.Length > index)                          color = Color.FromArgb(alpha'                              palette[index].R'                              palette[index].G'                              palette[index].B);                        pos++;                      break;                  case ColorFormat.A5I3:                      if (data.Length <= pos) break;                      index = data[pos] & 0x7;                      alpha = (data[pos] >> 3);                      alpha *= 8;                      if (palette.Length > index)                          color = Color.FromArgb(alpha'                              palette[index].R'                              palette[index].G'                              palette[index].B);                        pos++;                      break;                    case ColorFormat.colors2:                      if (data.Length <= (pos / 8)) break;                      byte bit1 = data[pos / 8];                      index = Helper.BitsConverter.ByteToBits(bit1)[pos % 8];                      if (palette.Length > index)                          color = palette[index];                      pos++;                      break;                  case ColorFormat.colors4:                      if (data.Length <= (pos / 4)) break;                      byte bit2 = data[pos / 4];                      index = Helper.BitsConverter.ByteToBit2(bit2)[pos % 4];                      if (palette.Length > index)                          color = palette[index];                      pos++;                      break;                  case ColorFormat.colors16:                      if (data.Length <= (pos / 2)) break;                      byte bit4 = data[pos / 2];                      index = Helper.BitsConverter.ByteToBit4(bit4)[pos % 2];                      if (palette.Length > index)                          color = palette[index];                      pos++;                      break;                  case ColorFormat.colors256:                      if (data.Length > pos && palette.Length > data[pos])                          color = palette[data[pos]];                      pos++;                      break;                    case ColorFormat.direct:    // RGB555                      if (pos + 2 >= data.Length)                          break;                        ushort byteColor = BitConverter.ToUInt16(data' pos);                      color = Color.FromArgb(                          ((byteColor >> 15) == 1 ? 255 : 0)'                          (byteColor & 0x1F) * 8'                          ((byteColor >> 5) & 0x1F) * 8'                          ((byteColor >> 10) & 0x1F) * 8);                      pos += 2;                      break;                    case ColorFormat.BGRA32:                      if (pos + 4 >= data.Length)                          break;                        color = Color.FromArgb(data[pos+3]' data[pos+0]' data[pos+1]' data[pos+2]);                      pos += 4;                      break;                    case ColorFormat.ABGR32:                      if (pos + 4 >= data.Length)                          break;                        color = Color.FromArgb(data[pos+0]' data[pos+1]' data[pos+2]' data[pos+3]);                      pos += 4;                      break;                    case ColorFormat.texel4x4:                      throw new NotSupportedException("Compressed texel 4x4 not supported yet");                  default:                      throw new FormatException("Unknown color format");              }
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Get_Color,The following statement contains a magic number: switch (format)              {                  case ColorFormat.A3I5:                      if (data.Length <= pos) break;                      index = data[pos] & 0x1F;                      alpha = (data[pos] >> 5);                      alpha = ((alpha * 4) + (alpha / 2)) * 8;                      if (palette.Length > index)                          color = Color.FromArgb(alpha'                              palette[index].R'                              palette[index].G'                              palette[index].B);                        pos++;                      break;                  case ColorFormat.A4I4:                      if (data.Length <= pos) break;                      index = data[pos] & 0xF;                      alpha = (data[pos] >> 4);                      alpha *= 16;                      if (palette.Length > index)                          color = Color.FromArgb(alpha'                              palette[index].R'                              palette[index].G'                              palette[index].B);                        pos++;                      break;                  case ColorFormat.A5I3:                      if (data.Length <= pos) break;                      index = data[pos] & 0x7;                      alpha = (data[pos] >> 3);                      alpha *= 8;                      if (palette.Length > index)                          color = Color.FromArgb(alpha'                              palette[index].R'                              palette[index].G'                              palette[index].B);                        pos++;                      break;                    case ColorFormat.colors2:                      if (data.Length <= (pos / 8)) break;                      byte bit1 = data[pos / 8];                      index = Helper.BitsConverter.ByteToBits(bit1)[pos % 8];                      if (palette.Length > index)                          color = palette[index];                      pos++;                      break;                  case ColorFormat.colors4:                      if (data.Length <= (pos / 4)) break;                      byte bit2 = data[pos / 4];                      index = Helper.BitsConverter.ByteToBit2(bit2)[pos % 4];                      if (palette.Length > index)                          color = palette[index];                      pos++;                      break;                  case ColorFormat.colors16:                      if (data.Length <= (pos / 2)) break;                      byte bit4 = data[pos / 2];                      index = Helper.BitsConverter.ByteToBit4(bit4)[pos % 2];                      if (palette.Length > index)                          color = palette[index];                      pos++;                      break;                  case ColorFormat.colors256:                      if (data.Length > pos && palette.Length > data[pos])                          color = palette[data[pos]];                      pos++;                      break;                    case ColorFormat.direct:    // RGB555                      if (pos + 2 >= data.Length)                          break;                        ushort byteColor = BitConverter.ToUInt16(data' pos);                      color = Color.FromArgb(                          ((byteColor >> 15) == 1 ? 255 : 0)'                          (byteColor & 0x1F) * 8'                          ((byteColor >> 5) & 0x1F) * 8'                          ((byteColor >> 10) & 0x1F) * 8);                      pos += 2;                      break;                    case ColorFormat.BGRA32:                      if (pos + 4 >= data.Length)                          break;                        color = Color.FromArgb(data[pos+3]' data[pos+0]' data[pos+1]' data[pos+2]);                      pos += 4;                      break;                    case ColorFormat.ABGR32:                      if (pos + 4 >= data.Length)                          break;                        color = Color.FromArgb(data[pos+0]' data[pos+1]' data[pos+2]' data[pos+3]);                      pos += 4;                      break;                    case ColorFormat.texel4x4:                      throw new NotSupportedException("Compressed texel 4x4 not supported yet");                  default:                      throw new FormatException("Unknown color format");              }
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Get_Color,The following statement contains a magic number: switch (format)              {                  case ColorFormat.A3I5:                      if (data.Length <= pos) break;                      index = data[pos] & 0x1F;                      alpha = (data[pos] >> 5);                      alpha = ((alpha * 4) + (alpha / 2)) * 8;                      if (palette.Length > index)                          color = Color.FromArgb(alpha'                              palette[index].R'                              palette[index].G'                              palette[index].B);                        pos++;                      break;                  case ColorFormat.A4I4:                      if (data.Length <= pos) break;                      index = data[pos] & 0xF;                      alpha = (data[pos] >> 4);                      alpha *= 16;                      if (palette.Length > index)                          color = Color.FromArgb(alpha'                              palette[index].R'                              palette[index].G'                              palette[index].B);                        pos++;                      break;                  case ColorFormat.A5I3:                      if (data.Length <= pos) break;                      index = data[pos] & 0x7;                      alpha = (data[pos] >> 3);                      alpha *= 8;                      if (palette.Length > index)                          color = Color.FromArgb(alpha'                              palette[index].R'                              palette[index].G'                              palette[index].B);                        pos++;                      break;                    case ColorFormat.colors2:                      if (data.Length <= (pos / 8)) break;                      byte bit1 = data[pos / 8];                      index = Helper.BitsConverter.ByteToBits(bit1)[pos % 8];                      if (palette.Length > index)                          color = palette[index];                      pos++;                      break;                  case ColorFormat.colors4:                      if (data.Length <= (pos / 4)) break;                      byte bit2 = data[pos / 4];                      index = Helper.BitsConverter.ByteToBit2(bit2)[pos % 4];                      if (palette.Length > index)                          color = palette[index];                      pos++;                      break;                  case ColorFormat.colors16:                      if (data.Length <= (pos / 2)) break;                      byte bit4 = data[pos / 2];                      index = Helper.BitsConverter.ByteToBit4(bit4)[pos % 2];                      if (palette.Length > index)                          color = palette[index];                      pos++;                      break;                  case ColorFormat.colors256:                      if (data.Length > pos && palette.Length > data[pos])                          color = palette[data[pos]];                      pos++;                      break;                    case ColorFormat.direct:    // RGB555                      if (pos + 2 >= data.Length)                          break;                        ushort byteColor = BitConverter.ToUInt16(data' pos);                      color = Color.FromArgb(                          ((byteColor >> 15) == 1 ? 255 : 0)'                          (byteColor & 0x1F) * 8'                          ((byteColor >> 5) & 0x1F) * 8'                          ((byteColor >> 10) & 0x1F) * 8);                      pos += 2;                      break;                    case ColorFormat.BGRA32:                      if (pos + 4 >= data.Length)                          break;                        color = Color.FromArgb(data[pos+3]' data[pos+0]' data[pos+1]' data[pos+2]);                      pos += 4;                      break;                    case ColorFormat.ABGR32:                      if (pos + 4 >= data.Length)                          break;                        color = Color.FromArgb(data[pos+0]' data[pos+1]' data[pos+2]' data[pos+3]);                      pos += 4;                      break;                    case ColorFormat.texel4x4:                      throw new NotSupportedException("Compressed texel 4x4 not supported yet");                  default:                      throw new FormatException("Unknown color format");              }
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Get_Color,The following statement contains a magic number: switch (format)              {                  case ColorFormat.A3I5:                      if (data.Length <= pos) break;                      index = data[pos] & 0x1F;                      alpha = (data[pos] >> 5);                      alpha = ((alpha * 4) + (alpha / 2)) * 8;                      if (palette.Length > index)                          color = Color.FromArgb(alpha'                              palette[index].R'                              palette[index].G'                              palette[index].B);                        pos++;                      break;                  case ColorFormat.A4I4:                      if (data.Length <= pos) break;                      index = data[pos] & 0xF;                      alpha = (data[pos] >> 4);                      alpha *= 16;                      if (palette.Length > index)                          color = Color.FromArgb(alpha'                              palette[index].R'                              palette[index].G'                              palette[index].B);                        pos++;                      break;                  case ColorFormat.A5I3:                      if (data.Length <= pos) break;                      index = data[pos] & 0x7;                      alpha = (data[pos] >> 3);                      alpha *= 8;                      if (palette.Length > index)                          color = Color.FromArgb(alpha'                              palette[index].R'                              palette[index].G'                              palette[index].B);                        pos++;                      break;                    case ColorFormat.colors2:                      if (data.Length <= (pos / 8)) break;                      byte bit1 = data[pos / 8];                      index = Helper.BitsConverter.ByteToBits(bit1)[pos % 8];                      if (palette.Length > index)                          color = palette[index];                      pos++;                      break;                  case ColorFormat.colors4:                      if (data.Length <= (pos / 4)) break;                      byte bit2 = data[pos / 4];                      index = Helper.BitsConverter.ByteToBit2(bit2)[pos % 4];                      if (palette.Length > index)                          color = palette[index];                      pos++;                      break;                  case ColorFormat.colors16:                      if (data.Length <= (pos / 2)) break;                      byte bit4 = data[pos / 2];                      index = Helper.BitsConverter.ByteToBit4(bit4)[pos % 2];                      if (palette.Length > index)                          color = palette[index];                      pos++;                      break;                  case ColorFormat.colors256:                      if (data.Length > pos && palette.Length > data[pos])                          color = palette[data[pos]];                      pos++;                      break;                    case ColorFormat.direct:    // RGB555                      if (pos + 2 >= data.Length)                          break;                        ushort byteColor = BitConverter.ToUInt16(data' pos);                      color = Color.FromArgb(                          ((byteColor >> 15) == 1 ? 255 : 0)'                          (byteColor & 0x1F) * 8'                          ((byteColor >> 5) & 0x1F) * 8'                          ((byteColor >> 10) & 0x1F) * 8);                      pos += 2;                      break;                    case ColorFormat.BGRA32:                      if (pos + 4 >= data.Length)                          break;                        color = Color.FromArgb(data[pos+3]' data[pos+0]' data[pos+1]' data[pos+2]);                      pos += 4;                      break;                    case ColorFormat.ABGR32:                      if (pos + 4 >= data.Length)                          break;                        color = Color.FromArgb(data[pos+0]' data[pos+1]' data[pos+2]' data[pos+3]);                      pos += 4;                      break;                    case ColorFormat.texel4x4:                      throw new NotSupportedException("Compressed texel 4x4 not supported yet");                  default:                      throw new FormatException("Unknown color format");              }
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Get_Color,The following statement contains a magic number: switch (format)              {                  case ColorFormat.A3I5:                      if (data.Length <= pos) break;                      index = data[pos] & 0x1F;                      alpha = (data[pos] >> 5);                      alpha = ((alpha * 4) + (alpha / 2)) * 8;                      if (palette.Length > index)                          color = Color.FromArgb(alpha'                              palette[index].R'                              palette[index].G'                              palette[index].B);                        pos++;                      break;                  case ColorFormat.A4I4:                      if (data.Length <= pos) break;                      index = data[pos] & 0xF;                      alpha = (data[pos] >> 4);                      alpha *= 16;                      if (palette.Length > index)                          color = Color.FromArgb(alpha'                              palette[index].R'                              palette[index].G'                              palette[index].B);                        pos++;                      break;                  case ColorFormat.A5I3:                      if (data.Length <= pos) break;                      index = data[pos] & 0x7;                      alpha = (data[pos] >> 3);                      alpha *= 8;                      if (palette.Length > index)                          color = Color.FromArgb(alpha'                              palette[index].R'                              palette[index].G'                              palette[index].B);                        pos++;                      break;                    case ColorFormat.colors2:                      if (data.Length <= (pos / 8)) break;                      byte bit1 = data[pos / 8];                      index = Helper.BitsConverter.ByteToBits(bit1)[pos % 8];                      if (palette.Length > index)                          color = palette[index];                      pos++;                      break;                  case ColorFormat.colors4:                      if (data.Length <= (pos / 4)) break;                      byte bit2 = data[pos / 4];                      index = Helper.BitsConverter.ByteToBit2(bit2)[pos % 4];                      if (palette.Length > index)                          color = palette[index];                      pos++;                      break;                  case ColorFormat.colors16:                      if (data.Length <= (pos / 2)) break;                      byte bit4 = data[pos / 2];                      index = Helper.BitsConverter.ByteToBit4(bit4)[pos % 2];                      if (palette.Length > index)                          color = palette[index];                      pos++;                      break;                  case ColorFormat.colors256:                      if (data.Length > pos && palette.Length > data[pos])                          color = palette[data[pos]];                      pos++;                      break;                    case ColorFormat.direct:    // RGB555                      if (pos + 2 >= data.Length)                          break;                        ushort byteColor = BitConverter.ToUInt16(data' pos);                      color = Color.FromArgb(                          ((byteColor >> 15) == 1 ? 255 : 0)'                          (byteColor & 0x1F) * 8'                          ((byteColor >> 5) & 0x1F) * 8'                          ((byteColor >> 10) & 0x1F) * 8);                      pos += 2;                      break;                    case ColorFormat.BGRA32:                      if (pos + 4 >= data.Length)                          break;                        color = Color.FromArgb(data[pos+3]' data[pos+0]' data[pos+1]' data[pos+2]);                      pos += 4;                      break;                    case ColorFormat.ABGR32:                      if (pos + 4 >= data.Length)                          break;                        color = Color.FromArgb(data[pos+0]' data[pos+1]' data[pos+2]' data[pos+3]);                      pos += 4;                      break;                    case ColorFormat.texel4x4:                      throw new NotSupportedException("Compressed texel 4x4 not supported yet");                  default:                      throw new FormatException("Unknown color format");              }
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Get_Color,The following statement contains a magic number: switch (format)              {                  case ColorFormat.A3I5:                      if (data.Length <= pos) break;                      index = data[pos] & 0x1F;                      alpha = (data[pos] >> 5);                      alpha = ((alpha * 4) + (alpha / 2)) * 8;                      if (palette.Length > index)                          color = Color.FromArgb(alpha'                              palette[index].R'                              palette[index].G'                              palette[index].B);                        pos++;                      break;                  case ColorFormat.A4I4:                      if (data.Length <= pos) break;                      index = data[pos] & 0xF;                      alpha = (data[pos] >> 4);                      alpha *= 16;                      if (palette.Length > index)                          color = Color.FromArgb(alpha'                              palette[index].R'                              palette[index].G'                              palette[index].B);                        pos++;                      break;                  case ColorFormat.A5I3:                      if (data.Length <= pos) break;                      index = data[pos] & 0x7;                      alpha = (data[pos] >> 3);                      alpha *= 8;                      if (palette.Length > index)                          color = Color.FromArgb(alpha'                              palette[index].R'                              palette[index].G'                              palette[index].B);                        pos++;                      break;                    case ColorFormat.colors2:                      if (data.Length <= (pos / 8)) break;                      byte bit1 = data[pos / 8];                      index = Helper.BitsConverter.ByteToBits(bit1)[pos % 8];                      if (palette.Length > index)                          color = palette[index];                      pos++;                      break;                  case ColorFormat.colors4:                      if (data.Length <= (pos / 4)) break;                      byte bit2 = data[pos / 4];                      index = Helper.BitsConverter.ByteToBit2(bit2)[pos % 4];                      if (palette.Length > index)                          color = palette[index];                      pos++;                      break;                  case ColorFormat.colors16:                      if (data.Length <= (pos / 2)) break;                      byte bit4 = data[pos / 2];                      index = Helper.BitsConverter.ByteToBit4(bit4)[pos % 2];                      if (palette.Length > index)                          color = palette[index];                      pos++;                      break;                  case ColorFormat.colors256:                      if (data.Length > pos && palette.Length > data[pos])                          color = palette[data[pos]];                      pos++;                      break;                    case ColorFormat.direct:    // RGB555                      if (pos + 2 >= data.Length)                          break;                        ushort byteColor = BitConverter.ToUInt16(data' pos);                      color = Color.FromArgb(                          ((byteColor >> 15) == 1 ? 255 : 0)'                          (byteColor & 0x1F) * 8'                          ((byteColor >> 5) & 0x1F) * 8'                          ((byteColor >> 10) & 0x1F) * 8);                      pos += 2;                      break;                    case ColorFormat.BGRA32:                      if (pos + 4 >= data.Length)                          break;                        color = Color.FromArgb(data[pos+3]' data[pos+0]' data[pos+1]' data[pos+2]);                      pos += 4;                      break;                    case ColorFormat.ABGR32:                      if (pos + 4 >= data.Length)                          break;                        color = Color.FromArgb(data[pos+0]' data[pos+1]' data[pos+2]' data[pos+3]);                      pos += 4;                      break;                    case ColorFormat.texel4x4:                      throw new NotSupportedException("Compressed texel 4x4 not supported yet");                  default:                      throw new FormatException("Unknown color format");              }
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Get_Color,The following statement contains a magic number: switch (format)              {                  case ColorFormat.A3I5:                      if (data.Length <= pos) break;                      index = data[pos] & 0x1F;                      alpha = (data[pos] >> 5);                      alpha = ((alpha * 4) + (alpha / 2)) * 8;                      if (palette.Length > index)                          color = Color.FromArgb(alpha'                              palette[index].R'                              palette[index].G'                              palette[index].B);                        pos++;                      break;                  case ColorFormat.A4I4:                      if (data.Length <= pos) break;                      index = data[pos] & 0xF;                      alpha = (data[pos] >> 4);                      alpha *= 16;                      if (palette.Length > index)                          color = Color.FromArgb(alpha'                              palette[index].R'                              palette[index].G'                              palette[index].B);                        pos++;                      break;                  case ColorFormat.A5I3:                      if (data.Length <= pos) break;                      index = data[pos] & 0x7;                      alpha = (data[pos] >> 3);                      alpha *= 8;                      if (palette.Length > index)                          color = Color.FromArgb(alpha'                              palette[index].R'                              palette[index].G'                              palette[index].B);                        pos++;                      break;                    case ColorFormat.colors2:                      if (data.Length <= (pos / 8)) break;                      byte bit1 = data[pos / 8];                      index = Helper.BitsConverter.ByteToBits(bit1)[pos % 8];                      if (palette.Length > index)                          color = palette[index];                      pos++;                      break;                  case ColorFormat.colors4:                      if (data.Length <= (pos / 4)) break;                      byte bit2 = data[pos / 4];                      index = Helper.BitsConverter.ByteToBit2(bit2)[pos % 4];                      if (palette.Length > index)                          color = palette[index];                      pos++;                      break;                  case ColorFormat.colors16:                      if (data.Length <= (pos / 2)) break;                      byte bit4 = data[pos / 2];                      index = Helper.BitsConverter.ByteToBit4(bit4)[pos % 2];                      if (palette.Length > index)                          color = palette[index];                      pos++;                      break;                  case ColorFormat.colors256:                      if (data.Length > pos && palette.Length > data[pos])                          color = palette[data[pos]];                      pos++;                      break;                    case ColorFormat.direct:    // RGB555                      if (pos + 2 >= data.Length)                          break;                        ushort byteColor = BitConverter.ToUInt16(data' pos);                      color = Color.FromArgb(                          ((byteColor >> 15) == 1 ? 255 : 0)'                          (byteColor & 0x1F) * 8'                          ((byteColor >> 5) & 0x1F) * 8'                          ((byteColor >> 10) & 0x1F) * 8);                      pos += 2;                      break;                    case ColorFormat.BGRA32:                      if (pos + 4 >= data.Length)                          break;                        color = Color.FromArgb(data[pos+3]' data[pos+0]' data[pos+1]' data[pos+2]);                      pos += 4;                      break;                    case ColorFormat.ABGR32:                      if (pos + 4 >= data.Length)                          break;                        color = Color.FromArgb(data[pos+0]' data[pos+1]' data[pos+2]' data[pos+3]);                      pos += 4;                      break;                    case ColorFormat.texel4x4:                      throw new NotSupportedException("Compressed texel 4x4 not supported yet");                  default:                      throw new FormatException("Unknown color format");              }
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Get_Color,The following statement contains a magic number: switch (format)              {                  case ColorFormat.A3I5:                      if (data.Length <= pos) break;                      index = data[pos] & 0x1F;                      alpha = (data[pos] >> 5);                      alpha = ((alpha * 4) + (alpha / 2)) * 8;                      if (palette.Length > index)                          color = Color.FromArgb(alpha'                              palette[index].R'                              palette[index].G'                              palette[index].B);                        pos++;                      break;                  case ColorFormat.A4I4:                      if (data.Length <= pos) break;                      index = data[pos] & 0xF;                      alpha = (data[pos] >> 4);                      alpha *= 16;                      if (palette.Length > index)                          color = Color.FromArgb(alpha'                              palette[index].R'                              palette[index].G'                              palette[index].B);                        pos++;                      break;                  case ColorFormat.A5I3:                      if (data.Length <= pos) break;                      index = data[pos] & 0x7;                      alpha = (data[pos] >> 3);                      alpha *= 8;                      if (palette.Length > index)                          color = Color.FromArgb(alpha'                              palette[index].R'                              palette[index].G'                              palette[index].B);                        pos++;                      break;                    case ColorFormat.colors2:                      if (data.Length <= (pos / 8)) break;                      byte bit1 = data[pos / 8];                      index = Helper.BitsConverter.ByteToBits(bit1)[pos % 8];                      if (palette.Length > index)                          color = palette[index];                      pos++;                      break;                  case ColorFormat.colors4:                      if (data.Length <= (pos / 4)) break;                      byte bit2 = data[pos / 4];                      index = Helper.BitsConverter.ByteToBit2(bit2)[pos % 4];                      if (palette.Length > index)                          color = palette[index];                      pos++;                      break;                  case ColorFormat.colors16:                      if (data.Length <= (pos / 2)) break;                      byte bit4 = data[pos / 2];                      index = Helper.BitsConverter.ByteToBit4(bit4)[pos % 2];                      if (palette.Length > index)                          color = palette[index];                      pos++;                      break;                  case ColorFormat.colors256:                      if (data.Length > pos && palette.Length > data[pos])                          color = palette[data[pos]];                      pos++;                      break;                    case ColorFormat.direct:    // RGB555                      if (pos + 2 >= data.Length)                          break;                        ushort byteColor = BitConverter.ToUInt16(data' pos);                      color = Color.FromArgb(                          ((byteColor >> 15) == 1 ? 255 : 0)'                          (byteColor & 0x1F) * 8'                          ((byteColor >> 5) & 0x1F) * 8'                          ((byteColor >> 10) & 0x1F) * 8);                      pos += 2;                      break;                    case ColorFormat.BGRA32:                      if (pos + 4 >= data.Length)                          break;                        color = Color.FromArgb(data[pos+3]' data[pos+0]' data[pos+1]' data[pos+2]);                      pos += 4;                      break;                    case ColorFormat.ABGR32:                      if (pos + 4 >= data.Length)                          break;                        color = Color.FromArgb(data[pos+0]' data[pos+1]' data[pos+2]' data[pos+3]);                      pos += 4;                      break;                    case ColorFormat.texel4x4:                      throw new NotSupportedException("Compressed texel 4x4 not supported yet");                  default:                      throw new FormatException("Unknown color format");              }
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Get_Color,The following statement contains a magic number: switch (format)              {                  case ColorFormat.A3I5:                      if (data.Length <= pos) break;                      index = data[pos] & 0x1F;                      alpha = (data[pos] >> 5);                      alpha = ((alpha * 4) + (alpha / 2)) * 8;                      if (palette.Length > index)                          color = Color.FromArgb(alpha'                              palette[index].R'                              palette[index].G'                              palette[index].B);                        pos++;                      break;                  case ColorFormat.A4I4:                      if (data.Length <= pos) break;                      index = data[pos] & 0xF;                      alpha = (data[pos] >> 4);                      alpha *= 16;                      if (palette.Length > index)                          color = Color.FromArgb(alpha'                              palette[index].R'                              palette[index].G'                              palette[index].B);                        pos++;                      break;                  case ColorFormat.A5I3:                      if (data.Length <= pos) break;                      index = data[pos] & 0x7;                      alpha = (data[pos] >> 3);                      alpha *= 8;                      if (palette.Length > index)                          color = Color.FromArgb(alpha'                              palette[index].R'                              palette[index].G'                              palette[index].B);                        pos++;                      break;                    case ColorFormat.colors2:                      if (data.Length <= (pos / 8)) break;                      byte bit1 = data[pos / 8];                      index = Helper.BitsConverter.ByteToBits(bit1)[pos % 8];                      if (palette.Length > index)                          color = palette[index];                      pos++;                      break;                  case ColorFormat.colors4:                      if (data.Length <= (pos / 4)) break;                      byte bit2 = data[pos / 4];                      index = Helper.BitsConverter.ByteToBit2(bit2)[pos % 4];                      if (palette.Length > index)                          color = palette[index];                      pos++;                      break;                  case ColorFormat.colors16:                      if (data.Length <= (pos / 2)) break;                      byte bit4 = data[pos / 2];                      index = Helper.BitsConverter.ByteToBit4(bit4)[pos % 2];                      if (palette.Length > index)                          color = palette[index];                      pos++;                      break;                  case ColorFormat.colors256:                      if (data.Length > pos && palette.Length > data[pos])                          color = palette[data[pos]];                      pos++;                      break;                    case ColorFormat.direct:    // RGB555                      if (pos + 2 >= data.Length)                          break;                        ushort byteColor = BitConverter.ToUInt16(data' pos);                      color = Color.FromArgb(                          ((byteColor >> 15) == 1 ? 255 : 0)'                          (byteColor & 0x1F) * 8'                          ((byteColor >> 5) & 0x1F) * 8'                          ((byteColor >> 10) & 0x1F) * 8);                      pos += 2;                      break;                    case ColorFormat.BGRA32:                      if (pos + 4 >= data.Length)                          break;                        color = Color.FromArgb(data[pos+3]' data[pos+0]' data[pos+1]' data[pos+2]);                      pos += 4;                      break;                    case ColorFormat.ABGR32:                      if (pos + 4 >= data.Length)                          break;                        color = Color.FromArgb(data[pos+0]' data[pos+1]' data[pos+2]' data[pos+3]);                      pos += 4;                      break;                    case ColorFormat.texel4x4:                      throw new NotSupportedException("Compressed texel 4x4 not supported yet");                  default:                      throw new FormatException("Unknown color format");              }
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Get_Color,The following statement contains a magic number: switch (format)              {                  case ColorFormat.A3I5:                      if (data.Length <= pos) break;                      index = data[pos] & 0x1F;                      alpha = (data[pos] >> 5);                      alpha = ((alpha * 4) + (alpha / 2)) * 8;                      if (palette.Length > index)                          color = Color.FromArgb(alpha'                              palette[index].R'                              palette[index].G'                              palette[index].B);                        pos++;                      break;                  case ColorFormat.A4I4:                      if (data.Length <= pos) break;                      index = data[pos] & 0xF;                      alpha = (data[pos] >> 4);                      alpha *= 16;                      if (palette.Length > index)                          color = Color.FromArgb(alpha'                              palette[index].R'                              palette[index].G'                              palette[index].B);                        pos++;                      break;                  case ColorFormat.A5I3:                      if (data.Length <= pos) break;                      index = data[pos] & 0x7;                      alpha = (data[pos] >> 3);                      alpha *= 8;                      if (palette.Length > index)                          color = Color.FromArgb(alpha'                              palette[index].R'                              palette[index].G'                              palette[index].B);                        pos++;                      break;                    case ColorFormat.colors2:                      if (data.Length <= (pos / 8)) break;                      byte bit1 = data[pos / 8];                      index = Helper.BitsConverter.ByteToBits(bit1)[pos % 8];                      if (palette.Length > index)                          color = palette[index];                      pos++;                      break;                  case ColorFormat.colors4:                      if (data.Length <= (pos / 4)) break;                      byte bit2 = data[pos / 4];                      index = Helper.BitsConverter.ByteToBit2(bit2)[pos % 4];                      if (palette.Length > index)                          color = palette[index];                      pos++;                      break;                  case ColorFormat.colors16:                      if (data.Length <= (pos / 2)) break;                      byte bit4 = data[pos / 2];                      index = Helper.BitsConverter.ByteToBit4(bit4)[pos % 2];                      if (palette.Length > index)                          color = palette[index];                      pos++;                      break;                  case ColorFormat.colors256:                      if (data.Length > pos && palette.Length > data[pos])                          color = palette[data[pos]];                      pos++;                      break;                    case ColorFormat.direct:    // RGB555                      if (pos + 2 >= data.Length)                          break;                        ushort byteColor = BitConverter.ToUInt16(data' pos);                      color = Color.FromArgb(                          ((byteColor >> 15) == 1 ? 255 : 0)'                          (byteColor & 0x1F) * 8'                          ((byteColor >> 5) & 0x1F) * 8'                          ((byteColor >> 10) & 0x1F) * 8);                      pos += 2;                      break;                    case ColorFormat.BGRA32:                      if (pos + 4 >= data.Length)                          break;                        color = Color.FromArgb(data[pos+3]' data[pos+0]' data[pos+1]' data[pos+2]);                      pos += 4;                      break;                    case ColorFormat.ABGR32:                      if (pos + 4 >= data.Length)                          break;                        color = Color.FromArgb(data[pos+0]' data[pos+1]' data[pos+2]' data[pos+3]);                      pos += 4;                      break;                    case ColorFormat.texel4x4:                      throw new NotSupportedException("Compressed texel 4x4 not supported yet");                  default:                      throw new FormatException("Unknown color format");              }
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Get_Color,The following statement contains a magic number: switch (format)              {                  case ColorFormat.A3I5:                      if (data.Length <= pos) break;                      index = data[pos] & 0x1F;                      alpha = (data[pos] >> 5);                      alpha = ((alpha * 4) + (alpha / 2)) * 8;                      if (palette.Length > index)                          color = Color.FromArgb(alpha'                              palette[index].R'                              palette[index].G'                              palette[index].B);                        pos++;                      break;                  case ColorFormat.A4I4:                      if (data.Length <= pos) break;                      index = data[pos] & 0xF;                      alpha = (data[pos] >> 4);                      alpha *= 16;                      if (palette.Length > index)                          color = Color.FromArgb(alpha'                              palette[index].R'                              palette[index].G'                              palette[index].B);                        pos++;                      break;                  case ColorFormat.A5I3:                      if (data.Length <= pos) break;                      index = data[pos] & 0x7;                      alpha = (data[pos] >> 3);                      alpha *= 8;                      if (palette.Length > index)                          color = Color.FromArgb(alpha'                              palette[index].R'                              palette[index].G'                              palette[index].B);                        pos++;                      break;                    case ColorFormat.colors2:                      if (data.Length <= (pos / 8)) break;                      byte bit1 = data[pos / 8];                      index = Helper.BitsConverter.ByteToBits(bit1)[pos % 8];                      if (palette.Length > index)                          color = palette[index];                      pos++;                      break;                  case ColorFormat.colors4:                      if (data.Length <= (pos / 4)) break;                      byte bit2 = data[pos / 4];                      index = Helper.BitsConverter.ByteToBit2(bit2)[pos % 4];                      if (palette.Length > index)                          color = palette[index];                      pos++;                      break;                  case ColorFormat.colors16:                      if (data.Length <= (pos / 2)) break;                      byte bit4 = data[pos / 2];                      index = Helper.BitsConverter.ByteToBit4(bit4)[pos % 2];                      if (palette.Length > index)                          color = palette[index];                      pos++;                      break;                  case ColorFormat.colors256:                      if (data.Length > pos && palette.Length > data[pos])                          color = palette[data[pos]];                      pos++;                      break;                    case ColorFormat.direct:    // RGB555                      if (pos + 2 >= data.Length)                          break;                        ushort byteColor = BitConverter.ToUInt16(data' pos);                      color = Color.FromArgb(                          ((byteColor >> 15) == 1 ? 255 : 0)'                          (byteColor & 0x1F) * 8'                          ((byteColor >> 5) & 0x1F) * 8'                          ((byteColor >> 10) & 0x1F) * 8);                      pos += 2;                      break;                    case ColorFormat.BGRA32:                      if (pos + 4 >= data.Length)                          break;                        color = Color.FromArgb(data[pos+3]' data[pos+0]' data[pos+1]' data[pos+2]);                      pos += 4;                      break;                    case ColorFormat.ABGR32:                      if (pos + 4 >= data.Length)                          break;                        color = Color.FromArgb(data[pos+0]' data[pos+1]' data[pos+2]' data[pos+3]);                      pos += 4;                      break;                    case ColorFormat.texel4x4:                      throw new NotSupportedException("Compressed texel 4x4 not supported yet");                  default:                      throw new FormatException("Unknown color format");              }
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Get_Color,The following statement contains a magic number: switch (format)              {                  case ColorFormat.A3I5:                      if (data.Length <= pos) break;                      index = data[pos] & 0x1F;                      alpha = (data[pos] >> 5);                      alpha = ((alpha * 4) + (alpha / 2)) * 8;                      if (palette.Length > index)                          color = Color.FromArgb(alpha'                              palette[index].R'                              palette[index].G'                              palette[index].B);                        pos++;                      break;                  case ColorFormat.A4I4:                      if (data.Length <= pos) break;                      index = data[pos] & 0xF;                      alpha = (data[pos] >> 4);                      alpha *= 16;                      if (palette.Length > index)                          color = Color.FromArgb(alpha'                              palette[index].R'                              palette[index].G'                              palette[index].B);                        pos++;                      break;                  case ColorFormat.A5I3:                      if (data.Length <= pos) break;                      index = data[pos] & 0x7;                      alpha = (data[pos] >> 3);                      alpha *= 8;                      if (palette.Length > index)                          color = Color.FromArgb(alpha'                              palette[index].R'                              palette[index].G'                              palette[index].B);                        pos++;                      break;                    case ColorFormat.colors2:                      if (data.Length <= (pos / 8)) break;                      byte bit1 = data[pos / 8];                      index = Helper.BitsConverter.ByteToBits(bit1)[pos % 8];                      if (palette.Length > index)                          color = palette[index];                      pos++;                      break;                  case ColorFormat.colors4:                      if (data.Length <= (pos / 4)) break;                      byte bit2 = data[pos / 4];                      index = Helper.BitsConverter.ByteToBit2(bit2)[pos % 4];                      if (palette.Length > index)                          color = palette[index];                      pos++;                      break;                  case ColorFormat.colors16:                      if (data.Length <= (pos / 2)) break;                      byte bit4 = data[pos / 2];                      index = Helper.BitsConverter.ByteToBit4(bit4)[pos % 2];                      if (palette.Length > index)                          color = palette[index];                      pos++;                      break;                  case ColorFormat.colors256:                      if (data.Length > pos && palette.Length > data[pos])                          color = palette[data[pos]];                      pos++;                      break;                    case ColorFormat.direct:    // RGB555                      if (pos + 2 >= data.Length)                          break;                        ushort byteColor = BitConverter.ToUInt16(data' pos);                      color = Color.FromArgb(                          ((byteColor >> 15) == 1 ? 255 : 0)'                          (byteColor & 0x1F) * 8'                          ((byteColor >> 5) & 0x1F) * 8'                          ((byteColor >> 10) & 0x1F) * 8);                      pos += 2;                      break;                    case ColorFormat.BGRA32:                      if (pos + 4 >= data.Length)                          break;                        color = Color.FromArgb(data[pos+3]' data[pos+0]' data[pos+1]' data[pos+2]);                      pos += 4;                      break;                    case ColorFormat.ABGR32:                      if (pos + 4 >= data.Length)                          break;                        color = Color.FromArgb(data[pos+0]' data[pos+1]' data[pos+2]' data[pos+3]);                      pos += 4;                      break;                    case ColorFormat.texel4x4:                      throw new NotSupportedException("Compressed texel 4x4 not supported yet");                  default:                      throw new FormatException("Unknown color format");              }
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Get_Color,The following statement contains a magic number: switch (format)              {                  case ColorFormat.A3I5:                      if (data.Length <= pos) break;                      index = data[pos] & 0x1F;                      alpha = (data[pos] >> 5);                      alpha = ((alpha * 4) + (alpha / 2)) * 8;                      if (palette.Length > index)                          color = Color.FromArgb(alpha'                              palette[index].R'                              palette[index].G'                              palette[index].B);                        pos++;                      break;                  case ColorFormat.A4I4:                      if (data.Length <= pos) break;                      index = data[pos] & 0xF;                      alpha = (data[pos] >> 4);                      alpha *= 16;                      if (palette.Length > index)                          color = Color.FromArgb(alpha'                              palette[index].R'                              palette[index].G'                              palette[index].B);                        pos++;                      break;                  case ColorFormat.A5I3:                      if (data.Length <= pos) break;                      index = data[pos] & 0x7;                      alpha = (data[pos] >> 3);                      alpha *= 8;                      if (palette.Length > index)                          color = Color.FromArgb(alpha'                              palette[index].R'                              palette[index].G'                              palette[index].B);                        pos++;                      break;                    case ColorFormat.colors2:                      if (data.Length <= (pos / 8)) break;                      byte bit1 = data[pos / 8];                      index = Helper.BitsConverter.ByteToBits(bit1)[pos % 8];                      if (palette.Length > index)                          color = palette[index];                      pos++;                      break;                  case ColorFormat.colors4:                      if (data.Length <= (pos / 4)) break;                      byte bit2 = data[pos / 4];                      index = Helper.BitsConverter.ByteToBit2(bit2)[pos % 4];                      if (palette.Length > index)                          color = palette[index];                      pos++;                      break;                  case ColorFormat.colors16:                      if (data.Length <= (pos / 2)) break;                      byte bit4 = data[pos / 2];                      index = Helper.BitsConverter.ByteToBit4(bit4)[pos % 2];                      if (palette.Length > index)                          color = palette[index];                      pos++;                      break;                  case ColorFormat.colors256:                      if (data.Length > pos && palette.Length > data[pos])                          color = palette[data[pos]];                      pos++;                      break;                    case ColorFormat.direct:    // RGB555                      if (pos + 2 >= data.Length)                          break;                        ushort byteColor = BitConverter.ToUInt16(data' pos);                      color = Color.FromArgb(                          ((byteColor >> 15) == 1 ? 255 : 0)'                          (byteColor & 0x1F) * 8'                          ((byteColor >> 5) & 0x1F) * 8'                          ((byteColor >> 10) & 0x1F) * 8);                      pos += 2;                      break;                    case ColorFormat.BGRA32:                      if (pos + 4 >= data.Length)                          break;                        color = Color.FromArgb(data[pos+3]' data[pos+0]' data[pos+1]' data[pos+2]);                      pos += 4;                      break;                    case ColorFormat.ABGR32:                      if (pos + 4 >= data.Length)                          break;                        color = Color.FromArgb(data[pos+0]' data[pos+1]' data[pos+2]' data[pos+3]);                      pos += 4;                      break;                    case ColorFormat.texel4x4:                      throw new NotSupportedException("Compressed texel 4x4 not supported yet");                  default:                      throw new FormatException("Unknown color format");              }
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Get_Color,The following statement contains a magic number: switch (format)              {                  case ColorFormat.A3I5:                      if (data.Length <= pos) break;                      index = data[pos] & 0x1F;                      alpha = (data[pos] >> 5);                      alpha = ((alpha * 4) + (alpha / 2)) * 8;                      if (palette.Length > index)                          color = Color.FromArgb(alpha'                              palette[index].R'                              palette[index].G'                              palette[index].B);                        pos++;                      break;                  case ColorFormat.A4I4:                      if (data.Length <= pos) break;                      index = data[pos] & 0xF;                      alpha = (data[pos] >> 4);                      alpha *= 16;                      if (palette.Length > index)                          color = Color.FromArgb(alpha'                              palette[index].R'                              palette[index].G'                              palette[index].B);                        pos++;                      break;                  case ColorFormat.A5I3:                      if (data.Length <= pos) break;                      index = data[pos] & 0x7;                      alpha = (data[pos] >> 3);                      alpha *= 8;                      if (palette.Length > index)                          color = Color.FromArgb(alpha'                              palette[index].R'                              palette[index].G'                              palette[index].B);                        pos++;                      break;                    case ColorFormat.colors2:                      if (data.Length <= (pos / 8)) break;                      byte bit1 = data[pos / 8];                      index = Helper.BitsConverter.ByteToBits(bit1)[pos % 8];                      if (palette.Length > index)                          color = palette[index];                      pos++;                      break;                  case ColorFormat.colors4:                      if (data.Length <= (pos / 4)) break;                      byte bit2 = data[pos / 4];                      index = Helper.BitsConverter.ByteToBit2(bit2)[pos % 4];                      if (palette.Length > index)                          color = palette[index];                      pos++;                      break;                  case ColorFormat.colors16:                      if (data.Length <= (pos / 2)) break;                      byte bit4 = data[pos / 2];                      index = Helper.BitsConverter.ByteToBit4(bit4)[pos % 2];                      if (palette.Length > index)                          color = palette[index];                      pos++;                      break;                  case ColorFormat.colors256:                      if (data.Length > pos && palette.Length > data[pos])                          color = palette[data[pos]];                      pos++;                      break;                    case ColorFormat.direct:    // RGB555                      if (pos + 2 >= data.Length)                          break;                        ushort byteColor = BitConverter.ToUInt16(data' pos);                      color = Color.FromArgb(                          ((byteColor >> 15) == 1 ? 255 : 0)'                          (byteColor & 0x1F) * 8'                          ((byteColor >> 5) & 0x1F) * 8'                          ((byteColor >> 10) & 0x1F) * 8);                      pos += 2;                      break;                    case ColorFormat.BGRA32:                      if (pos + 4 >= data.Length)                          break;                        color = Color.FromArgb(data[pos+3]' data[pos+0]' data[pos+1]' data[pos+2]);                      pos += 4;                      break;                    case ColorFormat.ABGR32:                      if (pos + 4 >= data.Length)                          break;                        color = Color.FromArgb(data[pos+0]' data[pos+1]' data[pos+2]' data[pos+3]);                      pos += 4;                      break;                    case ColorFormat.texel4x4:                      throw new NotSupportedException("Compressed texel 4x4 not supported yet");                  default:                      throw new FormatException("Unknown color format");              }
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Get_Color,The following statement contains a magic number: switch (format)              {                  case ColorFormat.A3I5:                      if (data.Length <= pos) break;                      index = data[pos] & 0x1F;                      alpha = (data[pos] >> 5);                      alpha = ((alpha * 4) + (alpha / 2)) * 8;                      if (palette.Length > index)                          color = Color.FromArgb(alpha'                              palette[index].R'                              palette[index].G'                              palette[index].B);                        pos++;                      break;                  case ColorFormat.A4I4:                      if (data.Length <= pos) break;                      index = data[pos] & 0xF;                      alpha = (data[pos] >> 4);                      alpha *= 16;                      if (palette.Length > index)                          color = Color.FromArgb(alpha'                              palette[index].R'                              palette[index].G'                              palette[index].B);                        pos++;                      break;                  case ColorFormat.A5I3:                      if (data.Length <= pos) break;                      index = data[pos] & 0x7;                      alpha = (data[pos] >> 3);                      alpha *= 8;                      if (palette.Length > index)                          color = Color.FromArgb(alpha'                              palette[index].R'                              palette[index].G'                              palette[index].B);                        pos++;                      break;                    case ColorFormat.colors2:                      if (data.Length <= (pos / 8)) break;                      byte bit1 = data[pos / 8];                      index = Helper.BitsConverter.ByteToBits(bit1)[pos % 8];                      if (palette.Length > index)                          color = palette[index];                      pos++;                      break;                  case ColorFormat.colors4:                      if (data.Length <= (pos / 4)) break;                      byte bit2 = data[pos / 4];                      index = Helper.BitsConverter.ByteToBit2(bit2)[pos % 4];                      if (palette.Length > index)                          color = palette[index];                      pos++;                      break;                  case ColorFormat.colors16:                      if (data.Length <= (pos / 2)) break;                      byte bit4 = data[pos / 2];                      index = Helper.BitsConverter.ByteToBit4(bit4)[pos % 2];                      if (palette.Length > index)                          color = palette[index];                      pos++;                      break;                  case ColorFormat.colors256:                      if (data.Length > pos && palette.Length > data[pos])                          color = palette[data[pos]];                      pos++;                      break;                    case ColorFormat.direct:    // RGB555                      if (pos + 2 >= data.Length)                          break;                        ushort byteColor = BitConverter.ToUInt16(data' pos);                      color = Color.FromArgb(                          ((byteColor >> 15) == 1 ? 255 : 0)'                          (byteColor & 0x1F) * 8'                          ((byteColor >> 5) & 0x1F) * 8'                          ((byteColor >> 10) & 0x1F) * 8);                      pos += 2;                      break;                    case ColorFormat.BGRA32:                      if (pos + 4 >= data.Length)                          break;                        color = Color.FromArgb(data[pos+3]' data[pos+0]' data[pos+1]' data[pos+2]);                      pos += 4;                      break;                    case ColorFormat.ABGR32:                      if (pos + 4 >= data.Length)                          break;                        color = Color.FromArgb(data[pos+0]' data[pos+1]' data[pos+2]' data[pos+3]);                      pos += 4;                      break;                    case ColorFormat.texel4x4:                      throw new NotSupportedException("Compressed texel 4x4 not supported yet");                  default:                      throw new FormatException("Unknown color format");              }
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Get_Color,The following statement contains a magic number: switch (format)              {                  case ColorFormat.A3I5:                      if (data.Length <= pos) break;                      index = data[pos] & 0x1F;                      alpha = (data[pos] >> 5);                      alpha = ((alpha * 4) + (alpha / 2)) * 8;                      if (palette.Length > index)                          color = Color.FromArgb(alpha'                              palette[index].R'                              palette[index].G'                              palette[index].B);                        pos++;                      break;                  case ColorFormat.A4I4:                      if (data.Length <= pos) break;                      index = data[pos] & 0xF;                      alpha = (data[pos] >> 4);                      alpha *= 16;                      if (palette.Length > index)                          color = Color.FromArgb(alpha'                              palette[index].R'                              palette[index].G'                              palette[index].B);                        pos++;                      break;                  case ColorFormat.A5I3:                      if (data.Length <= pos) break;                      index = data[pos] & 0x7;                      alpha = (data[pos] >> 3);                      alpha *= 8;                      if (palette.Length > index)                          color = Color.FromArgb(alpha'                              palette[index].R'                              palette[index].G'                              palette[index].B);                        pos++;                      break;                    case ColorFormat.colors2:                      if (data.Length <= (pos / 8)) break;                      byte bit1 = data[pos / 8];                      index = Helper.BitsConverter.ByteToBits(bit1)[pos % 8];                      if (palette.Length > index)                          color = palette[index];                      pos++;                      break;                  case ColorFormat.colors4:                      if (data.Length <= (pos / 4)) break;                      byte bit2 = data[pos / 4];                      index = Helper.BitsConverter.ByteToBit2(bit2)[pos % 4];                      if (palette.Length > index)                          color = palette[index];                      pos++;                      break;                  case ColorFormat.colors16:                      if (data.Length <= (pos / 2)) break;                      byte bit4 = data[pos / 2];                      index = Helper.BitsConverter.ByteToBit4(bit4)[pos % 2];                      if (palette.Length > index)                          color = palette[index];                      pos++;                      break;                  case ColorFormat.colors256:                      if (data.Length > pos && palette.Length > data[pos])                          color = palette[data[pos]];                      pos++;                      break;                    case ColorFormat.direct:    // RGB555                      if (pos + 2 >= data.Length)                          break;                        ushort byteColor = BitConverter.ToUInt16(data' pos);                      color = Color.FromArgb(                          ((byteColor >> 15) == 1 ? 255 : 0)'                          (byteColor & 0x1F) * 8'                          ((byteColor >> 5) & 0x1F) * 8'                          ((byteColor >> 10) & 0x1F) * 8);                      pos += 2;                      break;                    case ColorFormat.BGRA32:                      if (pos + 4 >= data.Length)                          break;                        color = Color.FromArgb(data[pos+3]' data[pos+0]' data[pos+1]' data[pos+2]);                      pos += 4;                      break;                    case ColorFormat.ABGR32:                      if (pos + 4 >= data.Length)                          break;                        color = Color.FromArgb(data[pos+0]' data[pos+1]' data[pos+2]' data[pos+3]);                      pos += 4;                      break;                    case ColorFormat.texel4x4:                      throw new NotSupportedException("Compressed texel 4x4 not supported yet");                  default:                      throw new FormatException("Unknown color format");              }
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Get_Color,The following statement contains a magic number: switch (format)              {                  case ColorFormat.A3I5:                      if (data.Length <= pos) break;                      index = data[pos] & 0x1F;                      alpha = (data[pos] >> 5);                      alpha = ((alpha * 4) + (alpha / 2)) * 8;                      if (palette.Length > index)                          color = Color.FromArgb(alpha'                              palette[index].R'                              palette[index].G'                              palette[index].B);                        pos++;                      break;                  case ColorFormat.A4I4:                      if (data.Length <= pos) break;                      index = data[pos] & 0xF;                      alpha = (data[pos] >> 4);                      alpha *= 16;                      if (palette.Length > index)                          color = Color.FromArgb(alpha'                              palette[index].R'                              palette[index].G'                              palette[index].B);                        pos++;                      break;                  case ColorFormat.A5I3:                      if (data.Length <= pos) break;                      index = data[pos] & 0x7;                      alpha = (data[pos] >> 3);                      alpha *= 8;                      if (palette.Length > index)                          color = Color.FromArgb(alpha'                              palette[index].R'                              palette[index].G'                              palette[index].B);                        pos++;                      break;                    case ColorFormat.colors2:                      if (data.Length <= (pos / 8)) break;                      byte bit1 = data[pos / 8];                      index = Helper.BitsConverter.ByteToBits(bit1)[pos % 8];                      if (palette.Length > index)                          color = palette[index];                      pos++;                      break;                  case ColorFormat.colors4:                      if (data.Length <= (pos / 4)) break;                      byte bit2 = data[pos / 4];                      index = Helper.BitsConverter.ByteToBit2(bit2)[pos % 4];                      if (palette.Length > index)                          color = palette[index];                      pos++;                      break;                  case ColorFormat.colors16:                      if (data.Length <= (pos / 2)) break;                      byte bit4 = data[pos / 2];                      index = Helper.BitsConverter.ByteToBit4(bit4)[pos % 2];                      if (palette.Length > index)                          color = palette[index];                      pos++;                      break;                  case ColorFormat.colors256:                      if (data.Length > pos && palette.Length > data[pos])                          color = palette[data[pos]];                      pos++;                      break;                    case ColorFormat.direct:    // RGB555                      if (pos + 2 >= data.Length)                          break;                        ushort byteColor = BitConverter.ToUInt16(data' pos);                      color = Color.FromArgb(                          ((byteColor >> 15) == 1 ? 255 : 0)'                          (byteColor & 0x1F) * 8'                          ((byteColor >> 5) & 0x1F) * 8'                          ((byteColor >> 10) & 0x1F) * 8);                      pos += 2;                      break;                    case ColorFormat.BGRA32:                      if (pos + 4 >= data.Length)                          break;                        color = Color.FromArgb(data[pos+3]' data[pos+0]' data[pos+1]' data[pos+2]);                      pos += 4;                      break;                    case ColorFormat.ABGR32:                      if (pos + 4 >= data.Length)                          break;                        color = Color.FromArgb(data[pos+0]' data[pos+1]' data[pos+2]' data[pos+3]);                      pos += 4;                      break;                    case ColorFormat.texel4x4:                      throw new NotSupportedException("Compressed texel 4x4 not supported yet");                  default:                      throw new FormatException("Unknown color format");              }
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Get_Color,The following statement contains a magic number: switch (format)              {                  case ColorFormat.A3I5:                      if (data.Length <= pos) break;                      index = data[pos] & 0x1F;                      alpha = (data[pos] >> 5);                      alpha = ((alpha * 4) + (alpha / 2)) * 8;                      if (palette.Length > index)                          color = Color.FromArgb(alpha'                              palette[index].R'                              palette[index].G'                              palette[index].B);                        pos++;                      break;                  case ColorFormat.A4I4:                      if (data.Length <= pos) break;                      index = data[pos] & 0xF;                      alpha = (data[pos] >> 4);                      alpha *= 16;                      if (palette.Length > index)                          color = Color.FromArgb(alpha'                              palette[index].R'                              palette[index].G'                              palette[index].B);                        pos++;                      break;                  case ColorFormat.A5I3:                      if (data.Length <= pos) break;                      index = data[pos] & 0x7;                      alpha = (data[pos] >> 3);                      alpha *= 8;                      if (palette.Length > index)                          color = Color.FromArgb(alpha'                              palette[index].R'                              palette[index].G'                              palette[index].B);                        pos++;                      break;                    case ColorFormat.colors2:                      if (data.Length <= (pos / 8)) break;                      byte bit1 = data[pos / 8];                      index = Helper.BitsConverter.ByteToBits(bit1)[pos % 8];                      if (palette.Length > index)                          color = palette[index];                      pos++;                      break;                  case ColorFormat.colors4:                      if (data.Length <= (pos / 4)) break;                      byte bit2 = data[pos / 4];                      index = Helper.BitsConverter.ByteToBit2(bit2)[pos % 4];                      if (palette.Length > index)                          color = palette[index];                      pos++;                      break;                  case ColorFormat.colors16:                      if (data.Length <= (pos / 2)) break;                      byte bit4 = data[pos / 2];                      index = Helper.BitsConverter.ByteToBit4(bit4)[pos % 2];                      if (palette.Length > index)                          color = palette[index];                      pos++;                      break;                  case ColorFormat.colors256:                      if (data.Length > pos && palette.Length > data[pos])                          color = palette[data[pos]];                      pos++;                      break;                    case ColorFormat.direct:    // RGB555                      if (pos + 2 >= data.Length)                          break;                        ushort byteColor = BitConverter.ToUInt16(data' pos);                      color = Color.FromArgb(                          ((byteColor >> 15) == 1 ? 255 : 0)'                          (byteColor & 0x1F) * 8'                          ((byteColor >> 5) & 0x1F) * 8'                          ((byteColor >> 10) & 0x1F) * 8);                      pos += 2;                      break;                    case ColorFormat.BGRA32:                      if (pos + 4 >= data.Length)                          break;                        color = Color.FromArgb(data[pos+3]' data[pos+0]' data[pos+1]' data[pos+2]);                      pos += 4;                      break;                    case ColorFormat.ABGR32:                      if (pos + 4 >= data.Length)                          break;                        color = Color.FromArgb(data[pos+0]' data[pos+1]' data[pos+2]' data[pos+3]);                      pos += 4;                      break;                    case ColorFormat.texel4x4:                      throw new NotSupportedException("Compressed texel 4x4 not supported yet");                  default:                      throw new FormatException("Unknown color format");              }
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Get_Color,The following statement contains a magic number: switch (format)              {                  case ColorFormat.A3I5:                      if (data.Length <= pos) break;                      index = data[pos] & 0x1F;                      alpha = (data[pos] >> 5);                      alpha = ((alpha * 4) + (alpha / 2)) * 8;                      if (palette.Length > index)                          color = Color.FromArgb(alpha'                              palette[index].R'                              palette[index].G'                              palette[index].B);                        pos++;                      break;                  case ColorFormat.A4I4:                      if (data.Length <= pos) break;                      index = data[pos] & 0xF;                      alpha = (data[pos] >> 4);                      alpha *= 16;                      if (palette.Length > index)                          color = Color.FromArgb(alpha'                              palette[index].R'                              palette[index].G'                              palette[index].B);                        pos++;                      break;                  case ColorFormat.A5I3:                      if (data.Length <= pos) break;                      index = data[pos] & 0x7;                      alpha = (data[pos] >> 3);                      alpha *= 8;                      if (palette.Length > index)                          color = Color.FromArgb(alpha'                              palette[index].R'                              palette[index].G'                              palette[index].B);                        pos++;                      break;                    case ColorFormat.colors2:                      if (data.Length <= (pos / 8)) break;                      byte bit1 = data[pos / 8];                      index = Helper.BitsConverter.ByteToBits(bit1)[pos % 8];                      if (palette.Length > index)                          color = palette[index];                      pos++;                      break;                  case ColorFormat.colors4:                      if (data.Length <= (pos / 4)) break;                      byte bit2 = data[pos / 4];                      index = Helper.BitsConverter.ByteToBit2(bit2)[pos % 4];                      if (palette.Length > index)                          color = palette[index];                      pos++;                      break;                  case ColorFormat.colors16:                      if (data.Length <= (pos / 2)) break;                      byte bit4 = data[pos / 2];                      index = Helper.BitsConverter.ByteToBit4(bit4)[pos % 2];                      if (palette.Length > index)                          color = palette[index];                      pos++;                      break;                  case ColorFormat.colors256:                      if (data.Length > pos && palette.Length > data[pos])                          color = palette[data[pos]];                      pos++;                      break;                    case ColorFormat.direct:    // RGB555                      if (pos + 2 >= data.Length)                          break;                        ushort byteColor = BitConverter.ToUInt16(data' pos);                      color = Color.FromArgb(                          ((byteColor >> 15) == 1 ? 255 : 0)'                          (byteColor & 0x1F) * 8'                          ((byteColor >> 5) & 0x1F) * 8'                          ((byteColor >> 10) & 0x1F) * 8);                      pos += 2;                      break;                    case ColorFormat.BGRA32:                      if (pos + 4 >= data.Length)                          break;                        color = Color.FromArgb(data[pos+3]' data[pos+0]' data[pos+1]' data[pos+2]);                      pos += 4;                      break;                    case ColorFormat.ABGR32:                      if (pos + 4 >= data.Length)                          break;                        color = Color.FromArgb(data[pos+0]' data[pos+1]' data[pos+2]' data[pos+3]);                      pos += 4;                      break;                    case ColorFormat.texel4x4:                      throw new NotSupportedException("Compressed texel 4x4 not supported yet");                  default:                      throw new FormatException("Unknown color format");              }
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Get_Color,The following statement contains a magic number: switch (format)              {                  case ColorFormat.A3I5:                      if (data.Length <= pos) break;                      index = data[pos] & 0x1F;                      alpha = (data[pos] >> 5);                      alpha = ((alpha * 4) + (alpha / 2)) * 8;                      if (palette.Length > index)                          color = Color.FromArgb(alpha'                              palette[index].R'                              palette[index].G'                              palette[index].B);                        pos++;                      break;                  case ColorFormat.A4I4:                      if (data.Length <= pos) break;                      index = data[pos] & 0xF;                      alpha = (data[pos] >> 4);                      alpha *= 16;                      if (palette.Length > index)                          color = Color.FromArgb(alpha'                              palette[index].R'                              palette[index].G'                              palette[index].B);                        pos++;                      break;                  case ColorFormat.A5I3:                      if (data.Length <= pos) break;                      index = data[pos] & 0x7;                      alpha = (data[pos] >> 3);                      alpha *= 8;                      if (palette.Length > index)                          color = Color.FromArgb(alpha'                              palette[index].R'                              palette[index].G'                              palette[index].B);                        pos++;                      break;                    case ColorFormat.colors2:                      if (data.Length <= (pos / 8)) break;                      byte bit1 = data[pos / 8];                      index = Helper.BitsConverter.ByteToBits(bit1)[pos % 8];                      if (palette.Length > index)                          color = palette[index];                      pos++;                      break;                  case ColorFormat.colors4:                      if (data.Length <= (pos / 4)) break;                      byte bit2 = data[pos / 4];                      index = Helper.BitsConverter.ByteToBit2(bit2)[pos % 4];                      if (palette.Length > index)                          color = palette[index];                      pos++;                      break;                  case ColorFormat.colors16:                      if (data.Length <= (pos / 2)) break;                      byte bit4 = data[pos / 2];                      index = Helper.BitsConverter.ByteToBit4(bit4)[pos % 2];                      if (palette.Length > index)                          color = palette[index];                      pos++;                      break;                  case ColorFormat.colors256:                      if (data.Length > pos && palette.Length > data[pos])                          color = palette[data[pos]];                      pos++;                      break;                    case ColorFormat.direct:    // RGB555                      if (pos + 2 >= data.Length)                          break;                        ushort byteColor = BitConverter.ToUInt16(data' pos);                      color = Color.FromArgb(                          ((byteColor >> 15) == 1 ? 255 : 0)'                          (byteColor & 0x1F) * 8'                          ((byteColor >> 5) & 0x1F) * 8'                          ((byteColor >> 10) & 0x1F) * 8);                      pos += 2;                      break;                    case ColorFormat.BGRA32:                      if (pos + 4 >= data.Length)                          break;                        color = Color.FromArgb(data[pos+3]' data[pos+0]' data[pos+1]' data[pos+2]);                      pos += 4;                      break;                    case ColorFormat.ABGR32:                      if (pos + 4 >= data.Length)                          break;                        color = Color.FromArgb(data[pos+0]' data[pos+1]' data[pos+2]' data[pos+3]);                      pos += 4;                      break;                    case ColorFormat.texel4x4:                      throw new NotSupportedException("Compressed texel 4x4 not supported yet");                  default:                      throw new FormatException("Unknown color format");              }
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Get_Color,The following statement contains a magic number: switch (format)              {                  case ColorFormat.A3I5:                      if (data.Length <= pos) break;                      index = data[pos] & 0x1F;                      alpha = (data[pos] >> 5);                      alpha = ((alpha * 4) + (alpha / 2)) * 8;                      if (palette.Length > index)                          color = Color.FromArgb(alpha'                              palette[index].R'                              palette[index].G'                              palette[index].B);                        pos++;                      break;                  case ColorFormat.A4I4:                      if (data.Length <= pos) break;                      index = data[pos] & 0xF;                      alpha = (data[pos] >> 4);                      alpha *= 16;                      if (palette.Length > index)                          color = Color.FromArgb(alpha'                              palette[index].R'                              palette[index].G'                              palette[index].B);                        pos++;                      break;                  case ColorFormat.A5I3:                      if (data.Length <= pos) break;                      index = data[pos] & 0x7;                      alpha = (data[pos] >> 3);                      alpha *= 8;                      if (palette.Length > index)                          color = Color.FromArgb(alpha'                              palette[index].R'                              palette[index].G'                              palette[index].B);                        pos++;                      break;                    case ColorFormat.colors2:                      if (data.Length <= (pos / 8)) break;                      byte bit1 = data[pos / 8];                      index = Helper.BitsConverter.ByteToBits(bit1)[pos % 8];                      if (palette.Length > index)                          color = palette[index];                      pos++;                      break;                  case ColorFormat.colors4:                      if (data.Length <= (pos / 4)) break;                      byte bit2 = data[pos / 4];                      index = Helper.BitsConverter.ByteToBit2(bit2)[pos % 4];                      if (palette.Length > index)                          color = palette[index];                      pos++;                      break;                  case ColorFormat.colors16:                      if (data.Length <= (pos / 2)) break;                      byte bit4 = data[pos / 2];                      index = Helper.BitsConverter.ByteToBit4(bit4)[pos % 2];                      if (palette.Length > index)                          color = palette[index];                      pos++;                      break;                  case ColorFormat.colors256:                      if (data.Length > pos && palette.Length > data[pos])                          color = palette[data[pos]];                      pos++;                      break;                    case ColorFormat.direct:    // RGB555                      if (pos + 2 >= data.Length)                          break;                        ushort byteColor = BitConverter.ToUInt16(data' pos);                      color = Color.FromArgb(                          ((byteColor >> 15) == 1 ? 255 : 0)'                          (byteColor & 0x1F) * 8'                          ((byteColor >> 5) & 0x1F) * 8'                          ((byteColor >> 10) & 0x1F) * 8);                      pos += 2;                      break;                    case ColorFormat.BGRA32:                      if (pos + 4 >= data.Length)                          break;                        color = Color.FromArgb(data[pos+3]' data[pos+0]' data[pos+1]' data[pos+2]);                      pos += 4;                      break;                    case ColorFormat.ABGR32:                      if (pos + 4 >= data.Length)                          break;                        color = Color.FromArgb(data[pos+0]' data[pos+1]' data[pos+2]' data[pos+3]);                      pos += 4;                      break;                    case ColorFormat.texel4x4:                      throw new NotSupportedException("Compressed texel 4x4 not supported yet");                  default:                      throw new FormatException("Unknown color format");              }
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Get_Color,The following statement contains a magic number: switch (format)              {                  case ColorFormat.A3I5:                      if (data.Length <= pos) break;                      index = data[pos] & 0x1F;                      alpha = (data[pos] >> 5);                      alpha = ((alpha * 4) + (alpha / 2)) * 8;                      if (palette.Length > index)                          color = Color.FromArgb(alpha'                              palette[index].R'                              palette[index].G'                              palette[index].B);                        pos++;                      break;                  case ColorFormat.A4I4:                      if (data.Length <= pos) break;                      index = data[pos] & 0xF;                      alpha = (data[pos] >> 4);                      alpha *= 16;                      if (palette.Length > index)                          color = Color.FromArgb(alpha'                              palette[index].R'                              palette[index].G'                              palette[index].B);                        pos++;                      break;                  case ColorFormat.A5I3:                      if (data.Length <= pos) break;                      index = data[pos] & 0x7;                      alpha = (data[pos] >> 3);                      alpha *= 8;                      if (palette.Length > index)                          color = Color.FromArgb(alpha'                              palette[index].R'                              palette[index].G'                              palette[index].B);                        pos++;                      break;                    case ColorFormat.colors2:                      if (data.Length <= (pos / 8)) break;                      byte bit1 = data[pos / 8];                      index = Helper.BitsConverter.ByteToBits(bit1)[pos % 8];                      if (palette.Length > index)                          color = palette[index];                      pos++;                      break;                  case ColorFormat.colors4:                      if (data.Length <= (pos / 4)) break;                      byte bit2 = data[pos / 4];                      index = Helper.BitsConverter.ByteToBit2(bit2)[pos % 4];                      if (palette.Length > index)                          color = palette[index];                      pos++;                      break;                  case ColorFormat.colors16:                      if (data.Length <= (pos / 2)) break;                      byte bit4 = data[pos / 2];                      index = Helper.BitsConverter.ByteToBit4(bit4)[pos % 2];                      if (palette.Length > index)                          color = palette[index];                      pos++;                      break;                  case ColorFormat.colors256:                      if (data.Length > pos && palette.Length > data[pos])                          color = palette[data[pos]];                      pos++;                      break;                    case ColorFormat.direct:    // RGB555                      if (pos + 2 >= data.Length)                          break;                        ushort byteColor = BitConverter.ToUInt16(data' pos);                      color = Color.FromArgb(                          ((byteColor >> 15) == 1 ? 255 : 0)'                          (byteColor & 0x1F) * 8'                          ((byteColor >> 5) & 0x1F) * 8'                          ((byteColor >> 10) & 0x1F) * 8);                      pos += 2;                      break;                    case ColorFormat.BGRA32:                      if (pos + 4 >= data.Length)                          break;                        color = Color.FromArgb(data[pos+3]' data[pos+0]' data[pos+1]' data[pos+2]);                      pos += 4;                      break;                    case ColorFormat.ABGR32:                      if (pos + 4 >= data.Length)                          break;                        color = Color.FromArgb(data[pos+0]' data[pos+1]' data[pos+2]' data[pos+3]);                      pos += 4;                      break;                    case ColorFormat.texel4x4:                      throw new NotSupportedException("Compressed texel 4x4 not supported yet");                  default:                      throw new FormatException("Unknown color format");              }
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Get_Color,The following statement contains a magic number: switch (format)              {                  case ColorFormat.A3I5:                      if (data.Length <= pos) break;                      index = data[pos] & 0x1F;                      alpha = (data[pos] >> 5);                      alpha = ((alpha * 4) + (alpha / 2)) * 8;                      if (palette.Length > index)                          color = Color.FromArgb(alpha'                              palette[index].R'                              palette[index].G'                              palette[index].B);                        pos++;                      break;                  case ColorFormat.A4I4:                      if (data.Length <= pos) break;                      index = data[pos] & 0xF;                      alpha = (data[pos] >> 4);                      alpha *= 16;                      if (palette.Length > index)                          color = Color.FromArgb(alpha'                              palette[index].R'                              palette[index].G'                              palette[index].B);                        pos++;                      break;                  case ColorFormat.A5I3:                      if (data.Length <= pos) break;                      index = data[pos] & 0x7;                      alpha = (data[pos] >> 3);                      alpha *= 8;                      if (palette.Length > index)                          color = Color.FromArgb(alpha'                              palette[index].R'                              palette[index].G'                              palette[index].B);                        pos++;                      break;                    case ColorFormat.colors2:                      if (data.Length <= (pos / 8)) break;                      byte bit1 = data[pos / 8];                      index = Helper.BitsConverter.ByteToBits(bit1)[pos % 8];                      if (palette.Length > index)                          color = palette[index];                      pos++;                      break;                  case ColorFormat.colors4:                      if (data.Length <= (pos / 4)) break;                      byte bit2 = data[pos / 4];                      index = Helper.BitsConverter.ByteToBit2(bit2)[pos % 4];                      if (palette.Length > index)                          color = palette[index];                      pos++;                      break;                  case ColorFormat.colors16:                      if (data.Length <= (pos / 2)) break;                      byte bit4 = data[pos / 2];                      index = Helper.BitsConverter.ByteToBit4(bit4)[pos % 2];                      if (palette.Length > index)                          color = palette[index];                      pos++;                      break;                  case ColorFormat.colors256:                      if (data.Length > pos && palette.Length > data[pos])                          color = palette[data[pos]];                      pos++;                      break;                    case ColorFormat.direct:    // RGB555                      if (pos + 2 >= data.Length)                          break;                        ushort byteColor = BitConverter.ToUInt16(data' pos);                      color = Color.FromArgb(                          ((byteColor >> 15) == 1 ? 255 : 0)'                          (byteColor & 0x1F) * 8'                          ((byteColor >> 5) & 0x1F) * 8'                          ((byteColor >> 10) & 0x1F) * 8);                      pos += 2;                      break;                    case ColorFormat.BGRA32:                      if (pos + 4 >= data.Length)                          break;                        color = Color.FromArgb(data[pos+3]' data[pos+0]' data[pos+1]' data[pos+2]);                      pos += 4;                      break;                    case ColorFormat.ABGR32:                      if (pos + 4 >= data.Length)                          break;                        color = Color.FromArgb(data[pos+0]' data[pos+1]' data[pos+2]' data[pos+3]);                      pos += 4;                      break;                    case ColorFormat.texel4x4:                      throw new NotSupportedException("Compressed texel 4x4 not supported yet");                  default:                      throw new FormatException("Unknown color format");              }
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Get_Color,The following statement contains a magic number: switch (format)              {                  case ColorFormat.A3I5:                      if (data.Length <= pos) break;                      index = data[pos] & 0x1F;                      alpha = (data[pos] >> 5);                      alpha = ((alpha * 4) + (alpha / 2)) * 8;                      if (palette.Length > index)                          color = Color.FromArgb(alpha'                              palette[index].R'                              palette[index].G'                              palette[index].B);                        pos++;                      break;                  case ColorFormat.A4I4:                      if (data.Length <= pos) break;                      index = data[pos] & 0xF;                      alpha = (data[pos] >> 4);                      alpha *= 16;                      if (palette.Length > index)                          color = Color.FromArgb(alpha'                              palette[index].R'                              palette[index].G'                              palette[index].B);                        pos++;                      break;                  case ColorFormat.A5I3:                      if (data.Length <= pos) break;                      index = data[pos] & 0x7;                      alpha = (data[pos] >> 3);                      alpha *= 8;                      if (palette.Length > index)                          color = Color.FromArgb(alpha'                              palette[index].R'                              palette[index].G'                              palette[index].B);                        pos++;                      break;                    case ColorFormat.colors2:                      if (data.Length <= (pos / 8)) break;                      byte bit1 = data[pos / 8];                      index = Helper.BitsConverter.ByteToBits(bit1)[pos % 8];                      if (palette.Length > index)                          color = palette[index];                      pos++;                      break;                  case ColorFormat.colors4:                      if (data.Length <= (pos / 4)) break;                      byte bit2 = data[pos / 4];                      index = Helper.BitsConverter.ByteToBit2(bit2)[pos % 4];                      if (palette.Length > index)                          color = palette[index];                      pos++;                      break;                  case ColorFormat.colors16:                      if (data.Length <= (pos / 2)) break;                      byte bit4 = data[pos / 2];                      index = Helper.BitsConverter.ByteToBit4(bit4)[pos % 2];                      if (palette.Length > index)                          color = palette[index];                      pos++;                      break;                  case ColorFormat.colors256:                      if (data.Length > pos && palette.Length > data[pos])                          color = palette[data[pos]];                      pos++;                      break;                    case ColorFormat.direct:    // RGB555                      if (pos + 2 >= data.Length)                          break;                        ushort byteColor = BitConverter.ToUInt16(data' pos);                      color = Color.FromArgb(                          ((byteColor >> 15) == 1 ? 255 : 0)'                          (byteColor & 0x1F) * 8'                          ((byteColor >> 5) & 0x1F) * 8'                          ((byteColor >> 10) & 0x1F) * 8);                      pos += 2;                      break;                    case ColorFormat.BGRA32:                      if (pos + 4 >= data.Length)                          break;                        color = Color.FromArgb(data[pos+3]' data[pos+0]' data[pos+1]' data[pos+2]);                      pos += 4;                      break;                    case ColorFormat.ABGR32:                      if (pos + 4 >= data.Length)                          break;                        color = Color.FromArgb(data[pos+0]' data[pos+1]' data[pos+2]' data[pos+3]);                      pos += 4;                      break;                    case ColorFormat.texel4x4:                      throw new NotSupportedException("Compressed texel 4x4 not supported yet");                  default:                      throw new FormatException("Unknown color format");              }
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Get_Color,The following statement contains a magic number: switch (format)              {                  case ColorFormat.A3I5:                      if (data.Length <= pos) break;                      index = data[pos] & 0x1F;                      alpha = (data[pos] >> 5);                      alpha = ((alpha * 4) + (alpha / 2)) * 8;                      if (palette.Length > index)                          color = Color.FromArgb(alpha'                              palette[index].R'                              palette[index].G'                              palette[index].B);                        pos++;                      break;                  case ColorFormat.A4I4:                      if (data.Length <= pos) break;                      index = data[pos] & 0xF;                      alpha = (data[pos] >> 4);                      alpha *= 16;                      if (palette.Length > index)                          color = Color.FromArgb(alpha'                              palette[index].R'                              palette[index].G'                              palette[index].B);                        pos++;                      break;                  case ColorFormat.A5I3:                      if (data.Length <= pos) break;                      index = data[pos] & 0x7;                      alpha = (data[pos] >> 3);                      alpha *= 8;                      if (palette.Length > index)                          color = Color.FromArgb(alpha'                              palette[index].R'                              palette[index].G'                              palette[index].B);                        pos++;                      break;                    case ColorFormat.colors2:                      if (data.Length <= (pos / 8)) break;                      byte bit1 = data[pos / 8];                      index = Helper.BitsConverter.ByteToBits(bit1)[pos % 8];                      if (palette.Length > index)                          color = palette[index];                      pos++;                      break;                  case ColorFormat.colors4:                      if (data.Length <= (pos / 4)) break;                      byte bit2 = data[pos / 4];                      index = Helper.BitsConverter.ByteToBit2(bit2)[pos % 4];                      if (palette.Length > index)                          color = palette[index];                      pos++;                      break;                  case ColorFormat.colors16:                      if (data.Length <= (pos / 2)) break;                      byte bit4 = data[pos / 2];                      index = Helper.BitsConverter.ByteToBit4(bit4)[pos % 2];                      if (palette.Length > index)                          color = palette[index];                      pos++;                      break;                  case ColorFormat.colors256:                      if (data.Length > pos && palette.Length > data[pos])                          color = palette[data[pos]];                      pos++;                      break;                    case ColorFormat.direct:    // RGB555                      if (pos + 2 >= data.Length)                          break;                        ushort byteColor = BitConverter.ToUInt16(data' pos);                      color = Color.FromArgb(                          ((byteColor >> 15) == 1 ? 255 : 0)'                          (byteColor & 0x1F) * 8'                          ((byteColor >> 5) & 0x1F) * 8'                          ((byteColor >> 10) & 0x1F) * 8);                      pos += 2;                      break;                    case ColorFormat.BGRA32:                      if (pos + 4 >= data.Length)                          break;                        color = Color.FromArgb(data[pos+3]' data[pos+0]' data[pos+1]' data[pos+2]);                      pos += 4;                      break;                    case ColorFormat.ABGR32:                      if (pos + 4 >= data.Length)                          break;                        color = Color.FromArgb(data[pos+0]' data[pos+1]' data[pos+2]' data[pos+3]);                      pos += 4;                      break;                    case ColorFormat.texel4x4:                      throw new NotSupportedException("Compressed texel 4x4 not supported yet");                  default:                      throw new FormatException("Unknown color format");              }
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Get_Color,The following statement contains a magic number: switch (format)              {                  case ColorFormat.A3I5:                      if (data.Length <= pos) break;                      index = data[pos] & 0x1F;                      alpha = (data[pos] >> 5);                      alpha = ((alpha * 4) + (alpha / 2)) * 8;                      if (palette.Length > index)                          color = Color.FromArgb(alpha'                              palette[index].R'                              palette[index].G'                              palette[index].B);                        pos++;                      break;                  case ColorFormat.A4I4:                      if (data.Length <= pos) break;                      index = data[pos] & 0xF;                      alpha = (data[pos] >> 4);                      alpha *= 16;                      if (palette.Length > index)                          color = Color.FromArgb(alpha'                              palette[index].R'                              palette[index].G'                              palette[index].B);                        pos++;                      break;                  case ColorFormat.A5I3:                      if (data.Length <= pos) break;                      index = data[pos] & 0x7;                      alpha = (data[pos] >> 3);                      alpha *= 8;                      if (palette.Length > index)                          color = Color.FromArgb(alpha'                              palette[index].R'                              palette[index].G'                              palette[index].B);                        pos++;                      break;                    case ColorFormat.colors2:                      if (data.Length <= (pos / 8)) break;                      byte bit1 = data[pos / 8];                      index = Helper.BitsConverter.ByteToBits(bit1)[pos % 8];                      if (palette.Length > index)                          color = palette[index];                      pos++;                      break;                  case ColorFormat.colors4:                      if (data.Length <= (pos / 4)) break;                      byte bit2 = data[pos / 4];                      index = Helper.BitsConverter.ByteToBit2(bit2)[pos % 4];                      if (palette.Length > index)                          color = palette[index];                      pos++;                      break;                  case ColorFormat.colors16:                      if (data.Length <= (pos / 2)) break;                      byte bit4 = data[pos / 2];                      index = Helper.BitsConverter.ByteToBit4(bit4)[pos % 2];                      if (palette.Length > index)                          color = palette[index];                      pos++;                      break;                  case ColorFormat.colors256:                      if (data.Length > pos && palette.Length > data[pos])                          color = palette[data[pos]];                      pos++;                      break;                    case ColorFormat.direct:    // RGB555                      if (pos + 2 >= data.Length)                          break;                        ushort byteColor = BitConverter.ToUInt16(data' pos);                      color = Color.FromArgb(                          ((byteColor >> 15) == 1 ? 255 : 0)'                          (byteColor & 0x1F) * 8'                          ((byteColor >> 5) & 0x1F) * 8'                          ((byteColor >> 10) & 0x1F) * 8);                      pos += 2;                      break;                    case ColorFormat.BGRA32:                      if (pos + 4 >= data.Length)                          break;                        color = Color.FromArgb(data[pos+3]' data[pos+0]' data[pos+1]' data[pos+2]);                      pos += 4;                      break;                    case ColorFormat.ABGR32:                      if (pos + 4 >= data.Length)                          break;                        color = Color.FromArgb(data[pos+0]' data[pos+1]' data[pos+2]' data[pos+3]);                      pos += 4;                      break;                    case ColorFormat.texel4x4:                      throw new NotSupportedException("Compressed texel 4x4 not supported yet");                  default:                      throw new FormatException("Unknown color format");              }
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Get_Color,The following statement contains a magic number: switch (format)              {                  case ColorFormat.A3I5:                      if (data.Length <= pos) break;                      index = data[pos] & 0x1F;                      alpha = (data[pos] >> 5);                      alpha = ((alpha * 4) + (alpha / 2)) * 8;                      if (palette.Length > index)                          color = Color.FromArgb(alpha'                              palette[index].R'                              palette[index].G'                              palette[index].B);                        pos++;                      break;                  case ColorFormat.A4I4:                      if (data.Length <= pos) break;                      index = data[pos] & 0xF;                      alpha = (data[pos] >> 4);                      alpha *= 16;                      if (palette.Length > index)                          color = Color.FromArgb(alpha'                              palette[index].R'                              palette[index].G'                              palette[index].B);                        pos++;                      break;                  case ColorFormat.A5I3:                      if (data.Length <= pos) break;                      index = data[pos] & 0x7;                      alpha = (data[pos] >> 3);                      alpha *= 8;                      if (palette.Length > index)                          color = Color.FromArgb(alpha'                              palette[index].R'                              palette[index].G'                              palette[index].B);                        pos++;                      break;                    case ColorFormat.colors2:                      if (data.Length <= (pos / 8)) break;                      byte bit1 = data[pos / 8];                      index = Helper.BitsConverter.ByteToBits(bit1)[pos % 8];                      if (palette.Length > index)                          color = palette[index];                      pos++;                      break;                  case ColorFormat.colors4:                      if (data.Length <= (pos / 4)) break;                      byte bit2 = data[pos / 4];                      index = Helper.BitsConverter.ByteToBit2(bit2)[pos % 4];                      if (palette.Length > index)                          color = palette[index];                      pos++;                      break;                  case ColorFormat.colors16:                      if (data.Length <= (pos / 2)) break;                      byte bit4 = data[pos / 2];                      index = Helper.BitsConverter.ByteToBit4(bit4)[pos % 2];                      if (palette.Length > index)                          color = palette[index];                      pos++;                      break;                  case ColorFormat.colors256:                      if (data.Length > pos && palette.Length > data[pos])                          color = palette[data[pos]];                      pos++;                      break;                    case ColorFormat.direct:    // RGB555                      if (pos + 2 >= data.Length)                          break;                        ushort byteColor = BitConverter.ToUInt16(data' pos);                      color = Color.FromArgb(                          ((byteColor >> 15) == 1 ? 255 : 0)'                          (byteColor & 0x1F) * 8'                          ((byteColor >> 5) & 0x1F) * 8'                          ((byteColor >> 10) & 0x1F) * 8);                      pos += 2;                      break;                    case ColorFormat.BGRA32:                      if (pos + 4 >= data.Length)                          break;                        color = Color.FromArgb(data[pos+3]' data[pos+0]' data[pos+1]' data[pos+2]);                      pos += 4;                      break;                    case ColorFormat.ABGR32:                      if (pos + 4 >= data.Length)                          break;                        color = Color.FromArgb(data[pos+0]' data[pos+1]' data[pos+2]' data[pos+3]);                      pos += 4;                      break;                    case ColorFormat.texel4x4:                      throw new NotSupportedException("Compressed texel 4x4 not supported yet");                  default:                      throw new FormatException("Unknown color format");              }
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Get_Color,The following statement contains a magic number: switch (format)              {                  case ColorFormat.A3I5:                      if (data.Length <= pos) break;                      index = data[pos] & 0x1F;                      alpha = (data[pos] >> 5);                      alpha = ((alpha * 4) + (alpha / 2)) * 8;                      if (palette.Length > index)                          color = Color.FromArgb(alpha'                              palette[index].R'                              palette[index].G'                              palette[index].B);                        pos++;                      break;                  case ColorFormat.A4I4:                      if (data.Length <= pos) break;                      index = data[pos] & 0xF;                      alpha = (data[pos] >> 4);                      alpha *= 16;                      if (palette.Length > index)                          color = Color.FromArgb(alpha'                              palette[index].R'                              palette[index].G'                              palette[index].B);                        pos++;                      break;                  case ColorFormat.A5I3:                      if (data.Length <= pos) break;                      index = data[pos] & 0x7;                      alpha = (data[pos] >> 3);                      alpha *= 8;                      if (palette.Length > index)                          color = Color.FromArgb(alpha'                              palette[index].R'                              palette[index].G'                              palette[index].B);                        pos++;                      break;                    case ColorFormat.colors2:                      if (data.Length <= (pos / 8)) break;                      byte bit1 = data[pos / 8];                      index = Helper.BitsConverter.ByteToBits(bit1)[pos % 8];                      if (palette.Length > index)                          color = palette[index];                      pos++;                      break;                  case ColorFormat.colors4:                      if (data.Length <= (pos / 4)) break;                      byte bit2 = data[pos / 4];                      index = Helper.BitsConverter.ByteToBit2(bit2)[pos % 4];                      if (palette.Length > index)                          color = palette[index];                      pos++;                      break;                  case ColorFormat.colors16:                      if (data.Length <= (pos / 2)) break;                      byte bit4 = data[pos / 2];                      index = Helper.BitsConverter.ByteToBit4(bit4)[pos % 2];                      if (palette.Length > index)                          color = palette[index];                      pos++;                      break;                  case ColorFormat.colors256:                      if (data.Length > pos && palette.Length > data[pos])                          color = palette[data[pos]];                      pos++;                      break;                    case ColorFormat.direct:    // RGB555                      if (pos + 2 >= data.Length)                          break;                        ushort byteColor = BitConverter.ToUInt16(data' pos);                      color = Color.FromArgb(                          ((byteColor >> 15) == 1 ? 255 : 0)'                          (byteColor & 0x1F) * 8'                          ((byteColor >> 5) & 0x1F) * 8'                          ((byteColor >> 10) & 0x1F) * 8);                      pos += 2;                      break;                    case ColorFormat.BGRA32:                      if (pos + 4 >= data.Length)                          break;                        color = Color.FromArgb(data[pos+3]' data[pos+0]' data[pos+1]' data[pos+2]);                      pos += 4;                      break;                    case ColorFormat.ABGR32:                      if (pos + 4 >= data.Length)                          break;                        color = Color.FromArgb(data[pos+0]' data[pos+1]' data[pos+2]' data[pos+3]);                      pos += 4;                      break;                    case ColorFormat.texel4x4:                      throw new NotSupportedException("Compressed texel 4x4 not supported yet");                  default:                      throw new FormatException("Unknown color format");              }
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Get_Color,The following statement contains a magic number: switch (format)              {                  case ColorFormat.A3I5:                      if (data.Length <= pos) break;                      index = data[pos] & 0x1F;                      alpha = (data[pos] >> 5);                      alpha = ((alpha * 4) + (alpha / 2)) * 8;                      if (palette.Length > index)                          color = Color.FromArgb(alpha'                              palette[index].R'                              palette[index].G'                              palette[index].B);                        pos++;                      break;                  case ColorFormat.A4I4:                      if (data.Length <= pos) break;                      index = data[pos] & 0xF;                      alpha = (data[pos] >> 4);                      alpha *= 16;                      if (palette.Length > index)                          color = Color.FromArgb(alpha'                              palette[index].R'                              palette[index].G'                              palette[index].B);                        pos++;                      break;                  case ColorFormat.A5I3:                      if (data.Length <= pos) break;                      index = data[pos] & 0x7;                      alpha = (data[pos] >> 3);                      alpha *= 8;                      if (palette.Length > index)                          color = Color.FromArgb(alpha'                              palette[index].R'                              palette[index].G'                              palette[index].B);                        pos++;                      break;                    case ColorFormat.colors2:                      if (data.Length <= (pos / 8)) break;                      byte bit1 = data[pos / 8];                      index = Helper.BitsConverter.ByteToBits(bit1)[pos % 8];                      if (palette.Length > index)                          color = palette[index];                      pos++;                      break;                  case ColorFormat.colors4:                      if (data.Length <= (pos / 4)) break;                      byte bit2 = data[pos / 4];                      index = Helper.BitsConverter.ByteToBit2(bit2)[pos % 4];                      if (palette.Length > index)                          color = palette[index];                      pos++;                      break;                  case ColorFormat.colors16:                      if (data.Length <= (pos / 2)) break;                      byte bit4 = data[pos / 2];                      index = Helper.BitsConverter.ByteToBit4(bit4)[pos % 2];                      if (palette.Length > index)                          color = palette[index];                      pos++;                      break;                  case ColorFormat.colors256:                      if (data.Length > pos && palette.Length > data[pos])                          color = palette[data[pos]];                      pos++;                      break;                    case ColorFormat.direct:    // RGB555                      if (pos + 2 >= data.Length)                          break;                        ushort byteColor = BitConverter.ToUInt16(data' pos);                      color = Color.FromArgb(                          ((byteColor >> 15) == 1 ? 255 : 0)'                          (byteColor & 0x1F) * 8'                          ((byteColor >> 5) & 0x1F) * 8'                          ((byteColor >> 10) & 0x1F) * 8);                      pos += 2;                      break;                    case ColorFormat.BGRA32:                      if (pos + 4 >= data.Length)                          break;                        color = Color.FromArgb(data[pos+3]' data[pos+0]' data[pos+1]' data[pos+2]);                      pos += 4;                      break;                    case ColorFormat.ABGR32:                      if (pos + 4 >= data.Length)                          break;                        color = Color.FromArgb(data[pos+0]' data[pos+1]' data[pos+2]' data[pos+3]);                      pos += 4;                      break;                    case ColorFormat.texel4x4:                      throw new NotSupportedException("Compressed texel 4x4 not supported yet");                  default:                      throw new FormatException("Unknown color format");              }
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Get_Color,The following statement contains a magic number: switch (format)              {                  case ColorFormat.A3I5:                      if (data.Length <= pos) break;                      index = data[pos] & 0x1F;                      alpha = (data[pos] >> 5);                      alpha = ((alpha * 4) + (alpha / 2)) * 8;                      if (palette.Length > index)                          color = Color.FromArgb(alpha'                              palette[index].R'                              palette[index].G'                              palette[index].B);                        pos++;                      break;                  case ColorFormat.A4I4:                      if (data.Length <= pos) break;                      index = data[pos] & 0xF;                      alpha = (data[pos] >> 4);                      alpha *= 16;                      if (palette.Length > index)                          color = Color.FromArgb(alpha'                              palette[index].R'                              palette[index].G'                              palette[index].B);                        pos++;                      break;                  case ColorFormat.A5I3:                      if (data.Length <= pos) break;                      index = data[pos] & 0x7;                      alpha = (data[pos] >> 3);                      alpha *= 8;                      if (palette.Length > index)                          color = Color.FromArgb(alpha'                              palette[index].R'                              palette[index].G'                              palette[index].B);                        pos++;                      break;                    case ColorFormat.colors2:                      if (data.Length <= (pos / 8)) break;                      byte bit1 = data[pos / 8];                      index = Helper.BitsConverter.ByteToBits(bit1)[pos % 8];                      if (palette.Length > index)                          color = palette[index];                      pos++;                      break;                  case ColorFormat.colors4:                      if (data.Length <= (pos / 4)) break;                      byte bit2 = data[pos / 4];                      index = Helper.BitsConverter.ByteToBit2(bit2)[pos % 4];                      if (palette.Length > index)                          color = palette[index];                      pos++;                      break;                  case ColorFormat.colors16:                      if (data.Length <= (pos / 2)) break;                      byte bit4 = data[pos / 2];                      index = Helper.BitsConverter.ByteToBit4(bit4)[pos % 2];                      if (palette.Length > index)                          color = palette[index];                      pos++;                      break;                  case ColorFormat.colors256:                      if (data.Length > pos && palette.Length > data[pos])                          color = palette[data[pos]];                      pos++;                      break;                    case ColorFormat.direct:    // RGB555                      if (pos + 2 >= data.Length)                          break;                        ushort byteColor = BitConverter.ToUInt16(data' pos);                      color = Color.FromArgb(                          ((byteColor >> 15) == 1 ? 255 : 0)'                          (byteColor & 0x1F) * 8'                          ((byteColor >> 5) & 0x1F) * 8'                          ((byteColor >> 10) & 0x1F) * 8);                      pos += 2;                      break;                    case ColorFormat.BGRA32:                      if (pos + 4 >= data.Length)                          break;                        color = Color.FromArgb(data[pos+3]' data[pos+0]' data[pos+1]' data[pos+2]);                      pos += 4;                      break;                    case ColorFormat.ABGR32:                      if (pos + 4 >= data.Length)                          break;                        color = Color.FromArgb(data[pos+0]' data[pos+1]' data[pos+2]' data[pos+3]);                      pos += 4;                      break;                    case ColorFormat.texel4x4:                      throw new NotSupportedException("Compressed texel 4x4 not supported yet");                  default:                      throw new FormatException("Unknown color format");              }
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,HorizontalToLineal,The following statement contains a magic number: int tile_width = tile_size * bpp / 8;
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,LinealToHorizontal,The following statement contains a magic number: int tile_width = tile_size * bpp / 8;
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Get_Size,The following statement contains a magic number: int num_pix = fileSize * 8 / bpp;
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Get_Size,The following statement contains a magic number: Math.Pow((int)(Math.Sqrt(num_pix))' 2) == num_pix
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Indexed_Image,The following statement contains a magic number: int['] data = new int[width * height' 2];
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Indexed_Image,The following statement contains a magic number: switch (cf)              {                  case ColorFormat.A3I5: max_colors = 32; bpc = 8; break;                  case ColorFormat.colors4: max_colors = 4; bpc = 2; break;                  case ColorFormat.colors16: max_colors = 16; bpc = 4; break;                  case ColorFormat.colors256: max_colors = 256; bpc = 8; break;                  case ColorFormat.texel4x4: throw new NotSupportedException("Texel 4x4 not supported yet.");                  case ColorFormat.A5I3: max_colors = 8; bpc = 8; break;                  case ColorFormat.direct: max_colors = 0; bpc = 16; break;                  case ColorFormat.colors2: max_colors = 2; bpc = 1; break;                  case ColorFormat.A4I4: max_colors = 16; bpc = 8; break;              }
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Indexed_Image,The following statement contains a magic number: switch (cf)              {                  case ColorFormat.A3I5: max_colors = 32; bpc = 8; break;                  case ColorFormat.colors4: max_colors = 4; bpc = 2; break;                  case ColorFormat.colors16: max_colors = 16; bpc = 4; break;                  case ColorFormat.colors256: max_colors = 256; bpc = 8; break;                  case ColorFormat.texel4x4: throw new NotSupportedException("Texel 4x4 not supported yet.");                  case ColorFormat.A5I3: max_colors = 8; bpc = 8; break;                  case ColorFormat.direct: max_colors = 0; bpc = 16; break;                  case ColorFormat.colors2: max_colors = 2; bpc = 1; break;                  case ColorFormat.A4I4: max_colors = 16; bpc = 8; break;              }
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Indexed_Image,The following statement contains a magic number: switch (cf)              {                  case ColorFormat.A3I5: max_colors = 32; bpc = 8; break;                  case ColorFormat.colors4: max_colors = 4; bpc = 2; break;                  case ColorFormat.colors16: max_colors = 16; bpc = 4; break;                  case ColorFormat.colors256: max_colors = 256; bpc = 8; break;                  case ColorFormat.texel4x4: throw new NotSupportedException("Texel 4x4 not supported yet.");                  case ColorFormat.A5I3: max_colors = 8; bpc = 8; break;                  case ColorFormat.direct: max_colors = 0; bpc = 16; break;                  case ColorFormat.colors2: max_colors = 2; bpc = 1; break;                  case ColorFormat.A4I4: max_colors = 16; bpc = 8; break;              }
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Indexed_Image,The following statement contains a magic number: switch (cf)              {                  case ColorFormat.A3I5: max_colors = 32; bpc = 8; break;                  case ColorFormat.colors4: max_colors = 4; bpc = 2; break;                  case ColorFormat.colors16: max_colors = 16; bpc = 4; break;                  case ColorFormat.colors256: max_colors = 256; bpc = 8; break;                  case ColorFormat.texel4x4: throw new NotSupportedException("Texel 4x4 not supported yet.");                  case ColorFormat.A5I3: max_colors = 8; bpc = 8; break;                  case ColorFormat.direct: max_colors = 0; bpc = 16; break;                  case ColorFormat.colors2: max_colors = 2; bpc = 1; break;                  case ColorFormat.A4I4: max_colors = 16; bpc = 8; break;              }
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Indexed_Image,The following statement contains a magic number: switch (cf)              {                  case ColorFormat.A3I5: max_colors = 32; bpc = 8; break;                  case ColorFormat.colors4: max_colors = 4; bpc = 2; break;                  case ColorFormat.colors16: max_colors = 16; bpc = 4; break;                  case ColorFormat.colors256: max_colors = 256; bpc = 8; break;                  case ColorFormat.texel4x4: throw new NotSupportedException("Texel 4x4 not supported yet.");                  case ColorFormat.A5I3: max_colors = 8; bpc = 8; break;                  case ColorFormat.direct: max_colors = 0; bpc = 16; break;                  case ColorFormat.colors2: max_colors = 2; bpc = 1; break;                  case ColorFormat.A4I4: max_colors = 16; bpc = 8; break;              }
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Indexed_Image,The following statement contains a magic number: switch (cf)              {                  case ColorFormat.A3I5: max_colors = 32; bpc = 8; break;                  case ColorFormat.colors4: max_colors = 4; bpc = 2; break;                  case ColorFormat.colors16: max_colors = 16; bpc = 4; break;                  case ColorFormat.colors256: max_colors = 256; bpc = 8; break;                  case ColorFormat.texel4x4: throw new NotSupportedException("Texel 4x4 not supported yet.");                  case ColorFormat.A5I3: max_colors = 8; bpc = 8; break;                  case ColorFormat.direct: max_colors = 0; bpc = 16; break;                  case ColorFormat.colors2: max_colors = 2; bpc = 1; break;                  case ColorFormat.A4I4: max_colors = 16; bpc = 8; break;              }
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Indexed_Image,The following statement contains a magic number: switch (cf)              {                  case ColorFormat.A3I5: max_colors = 32; bpc = 8; break;                  case ColorFormat.colors4: max_colors = 4; bpc = 2; break;                  case ColorFormat.colors16: max_colors = 16; bpc = 4; break;                  case ColorFormat.colors256: max_colors = 256; bpc = 8; break;                  case ColorFormat.texel4x4: throw new NotSupportedException("Texel 4x4 not supported yet.");                  case ColorFormat.A5I3: max_colors = 8; bpc = 8; break;                  case ColorFormat.direct: max_colors = 0; bpc = 16; break;                  case ColorFormat.colors2: max_colors = 2; bpc = 1; break;                  case ColorFormat.A4I4: max_colors = 16; bpc = 8; break;              }
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Indexed_Image,The following statement contains a magic number: switch (cf)              {                  case ColorFormat.A3I5: max_colors = 32; bpc = 8; break;                  case ColorFormat.colors4: max_colors = 4; bpc = 2; break;                  case ColorFormat.colors16: max_colors = 16; bpc = 4; break;                  case ColorFormat.colors256: max_colors = 256; bpc = 8; break;                  case ColorFormat.texel4x4: throw new NotSupportedException("Texel 4x4 not supported yet.");                  case ColorFormat.A5I3: max_colors = 8; bpc = 8; break;                  case ColorFormat.direct: max_colors = 0; bpc = 16; break;                  case ColorFormat.colors2: max_colors = 2; bpc = 1; break;                  case ColorFormat.A4I4: max_colors = 16; bpc = 8; break;              }
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Indexed_Image,The following statement contains a magic number: switch (cf)              {                  case ColorFormat.A3I5: max_colors = 32; bpc = 8; break;                  case ColorFormat.colors4: max_colors = 4; bpc = 2; break;                  case ColorFormat.colors16: max_colors = 16; bpc = 4; break;                  case ColorFormat.colors256: max_colors = 256; bpc = 8; break;                  case ColorFormat.texel4x4: throw new NotSupportedException("Texel 4x4 not supported yet.");                  case ColorFormat.A5I3: max_colors = 8; bpc = 8; break;                  case ColorFormat.direct: max_colors = 0; bpc = 16; break;                  case ColorFormat.colors2: max_colors = 2; bpc = 1; break;                  case ColorFormat.A4I4: max_colors = 16; bpc = 8; break;              }
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Indexed_Image,The following statement contains a magic number: switch (cf)              {                  case ColorFormat.A3I5: max_colors = 32; bpc = 8; break;                  case ColorFormat.colors4: max_colors = 4; bpc = 2; break;                  case ColorFormat.colors16: max_colors = 16; bpc = 4; break;                  case ColorFormat.colors256: max_colors = 256; bpc = 8; break;                  case ColorFormat.texel4x4: throw new NotSupportedException("Texel 4x4 not supported yet.");                  case ColorFormat.A5I3: max_colors = 8; bpc = 8; break;                  case ColorFormat.direct: max_colors = 0; bpc = 16; break;                  case ColorFormat.colors2: max_colors = 2; bpc = 1; break;                  case ColorFormat.A4I4: max_colors = 16; bpc = 8; break;              }
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Indexed_Image,The following statement contains a magic number: switch (cf)              {                  case ColorFormat.A3I5: max_colors = 32; bpc = 8; break;                  case ColorFormat.colors4: max_colors = 4; bpc = 2; break;                  case ColorFormat.colors16: max_colors = 16; bpc = 4; break;                  case ColorFormat.colors256: max_colors = 256; bpc = 8; break;                  case ColorFormat.texel4x4: throw new NotSupportedException("Texel 4x4 not supported yet.");                  case ColorFormat.A5I3: max_colors = 8; bpc = 8; break;                  case ColorFormat.direct: max_colors = 0; bpc = 16; break;                  case ColorFormat.colors2: max_colors = 2; bpc = 1; break;                  case ColorFormat.A4I4: max_colors = 16; bpc = 8; break;              }
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Indexed_Image,The following statement contains a magic number: switch (cf)              {                  case ColorFormat.A3I5: max_colors = 32; bpc = 8; break;                  case ColorFormat.colors4: max_colors = 4; bpc = 2; break;                  case ColorFormat.colors16: max_colors = 16; bpc = 4; break;                  case ColorFormat.colors256: max_colors = 256; bpc = 8; break;                  case ColorFormat.texel4x4: throw new NotSupportedException("Texel 4x4 not supported yet.");                  case ColorFormat.A5I3: max_colors = 8; bpc = 8; break;                  case ColorFormat.direct: max_colors = 0; bpc = 16; break;                  case ColorFormat.colors2: max_colors = 2; bpc = 1; break;                  case ColorFormat.A4I4: max_colors = 16; bpc = 8; break;              }
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Indexed_Image,The following statement contains a magic number: switch (cf)              {                  case ColorFormat.A3I5: max_colors = 32; bpc = 8; break;                  case ColorFormat.colors4: max_colors = 4; bpc = 2; break;                  case ColorFormat.colors16: max_colors = 16; bpc = 4; break;                  case ColorFormat.colors256: max_colors = 256; bpc = 8; break;                  case ColorFormat.texel4x4: throw new NotSupportedException("Texel 4x4 not supported yet.");                  case ColorFormat.A5I3: max_colors = 8; bpc = 8; break;                  case ColorFormat.direct: max_colors = 0; bpc = 16; break;                  case ColorFormat.colors2: max_colors = 2; bpc = 1; break;                  case ColorFormat.A4I4: max_colors = 16; bpc = 8; break;              }
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Indexed_Image,The following statement contains a magic number: switch (cf)              {                  case ColorFormat.A3I5: max_colors = 32; bpc = 8; break;                  case ColorFormat.colors4: max_colors = 4; bpc = 2; break;                  case ColorFormat.colors16: max_colors = 16; bpc = 4; break;                  case ColorFormat.colors256: max_colors = 256; bpc = 8; break;                  case ColorFormat.texel4x4: throw new NotSupportedException("Texel 4x4 not supported yet.");                  case ColorFormat.A5I3: max_colors = 8; bpc = 8; break;                  case ColorFormat.direct: max_colors = 0; bpc = 16; break;                  case ColorFormat.colors2: max_colors = 2; bpc = 1; break;                  case ColorFormat.A4I4: max_colors = 16; bpc = 8; break;              }
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Indexed_Image,The following statement contains a magic number: tiles = new byte[width * height * bpc / 8];
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Indexed_Image,The following statement contains a magic number: switch (cf)                  {                      case ColorFormat.colors2:                      case ColorFormat.colors4:                      case ColorFormat.colors16:                      case ColorFormat.colors256:                          for (int b = 0; b < 8; b += bpc)                              if (j < data.Length)                                  tiles[i] |= (byte)(data[j++' 0] << b);                            i++;                          break;                        case ColorFormat.A3I5:                          byte alpha1 = (byte)(data[j' 1] * 8 / 256);                          byte va1 = (byte)data[j++' 0];                          va1 |= (byte)(alpha1 << 5);                          tiles[i++] = va1;                          break;                      case ColorFormat.A4I4:                          byte alpha3 = (byte)(data[j' 1] * 16 / 256);                          byte va3 = (byte)data[j++' 0];                          va3 |= (byte)(alpha3 << 4);                          tiles[i++] = va3;                          break;                      case ColorFormat.A5I3:                          byte alpha2 = (byte)(data[j' 1] * 32 / 256);                          byte va2 = (byte)data[j++' 0];                          va2 |= (byte)(alpha2 << 3);                          tiles[i++] = va2;                          break;                        case ColorFormat.direct:                          byte[] v = ColorToBGRA555(Color.FromArgb(data[j' 1]' coldif[data[j++' 0]]));                          tiles[i++] = v[0];                          tiles[i++] = v[1];                          break;                        case ColorFormat.texel4x4:                          // Not supported                          break;                  }
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Indexed_Image,The following statement contains a magic number: switch (cf)                  {                      case ColorFormat.colors2:                      case ColorFormat.colors4:                      case ColorFormat.colors16:                      case ColorFormat.colors256:                          for (int b = 0; b < 8; b += bpc)                              if (j < data.Length)                                  tiles[i] |= (byte)(data[j++' 0] << b);                            i++;                          break;                        case ColorFormat.A3I5:                          byte alpha1 = (byte)(data[j' 1] * 8 / 256);                          byte va1 = (byte)data[j++' 0];                          va1 |= (byte)(alpha1 << 5);                          tiles[i++] = va1;                          break;                      case ColorFormat.A4I4:                          byte alpha3 = (byte)(data[j' 1] * 16 / 256);                          byte va3 = (byte)data[j++' 0];                          va3 |= (byte)(alpha3 << 4);                          tiles[i++] = va3;                          break;                      case ColorFormat.A5I3:                          byte alpha2 = (byte)(data[j' 1] * 32 / 256);                          byte va2 = (byte)data[j++' 0];                          va2 |= (byte)(alpha2 << 3);                          tiles[i++] = va2;                          break;                        case ColorFormat.direct:                          byte[] v = ColorToBGRA555(Color.FromArgb(data[j' 1]' coldif[data[j++' 0]]));                          tiles[i++] = v[0];                          tiles[i++] = v[1];                          break;                        case ColorFormat.texel4x4:                          // Not supported                          break;                  }
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Indexed_Image,The following statement contains a magic number: switch (cf)                  {                      case ColorFormat.colors2:                      case ColorFormat.colors4:                      case ColorFormat.colors16:                      case ColorFormat.colors256:                          for (int b = 0; b < 8; b += bpc)                              if (j < data.Length)                                  tiles[i] |= (byte)(data[j++' 0] << b);                            i++;                          break;                        case ColorFormat.A3I5:                          byte alpha1 = (byte)(data[j' 1] * 8 / 256);                          byte va1 = (byte)data[j++' 0];                          va1 |= (byte)(alpha1 << 5);                          tiles[i++] = va1;                          break;                      case ColorFormat.A4I4:                          byte alpha3 = (byte)(data[j' 1] * 16 / 256);                          byte va3 = (byte)data[j++' 0];                          va3 |= (byte)(alpha3 << 4);                          tiles[i++] = va3;                          break;                      case ColorFormat.A5I3:                          byte alpha2 = (byte)(data[j' 1] * 32 / 256);                          byte va2 = (byte)data[j++' 0];                          va2 |= (byte)(alpha2 << 3);                          tiles[i++] = va2;                          break;                        case ColorFormat.direct:                          byte[] v = ColorToBGRA555(Color.FromArgb(data[j' 1]' coldif[data[j++' 0]]));                          tiles[i++] = v[0];                          tiles[i++] = v[1];                          break;                        case ColorFormat.texel4x4:                          // Not supported                          break;                  }
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Indexed_Image,The following statement contains a magic number: switch (cf)                  {                      case ColorFormat.colors2:                      case ColorFormat.colors4:                      case ColorFormat.colors16:                      case ColorFormat.colors256:                          for (int b = 0; b < 8; b += bpc)                              if (j < data.Length)                                  tiles[i] |= (byte)(data[j++' 0] << b);                            i++;                          break;                        case ColorFormat.A3I5:                          byte alpha1 = (byte)(data[j' 1] * 8 / 256);                          byte va1 = (byte)data[j++' 0];                          va1 |= (byte)(alpha1 << 5);                          tiles[i++] = va1;                          break;                      case ColorFormat.A4I4:                          byte alpha3 = (byte)(data[j' 1] * 16 / 256);                          byte va3 = (byte)data[j++' 0];                          va3 |= (byte)(alpha3 << 4);                          tiles[i++] = va3;                          break;                      case ColorFormat.A5I3:                          byte alpha2 = (byte)(data[j' 1] * 32 / 256);                          byte va2 = (byte)data[j++' 0];                          va2 |= (byte)(alpha2 << 3);                          tiles[i++] = va2;                          break;                        case ColorFormat.direct:                          byte[] v = ColorToBGRA555(Color.FromArgb(data[j' 1]' coldif[data[j++' 0]]));                          tiles[i++] = v[0];                          tiles[i++] = v[1];                          break;                        case ColorFormat.texel4x4:                          // Not supported                          break;                  }
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Indexed_Image,The following statement contains a magic number: switch (cf)                  {                      case ColorFormat.colors2:                      case ColorFormat.colors4:                      case ColorFormat.colors16:                      case ColorFormat.colors256:                          for (int b = 0; b < 8; b += bpc)                              if (j < data.Length)                                  tiles[i] |= (byte)(data[j++' 0] << b);                            i++;                          break;                        case ColorFormat.A3I5:                          byte alpha1 = (byte)(data[j' 1] * 8 / 256);                          byte va1 = (byte)data[j++' 0];                          va1 |= (byte)(alpha1 << 5);                          tiles[i++] = va1;                          break;                      case ColorFormat.A4I4:                          byte alpha3 = (byte)(data[j' 1] * 16 / 256);                          byte va3 = (byte)data[j++' 0];                          va3 |= (byte)(alpha3 << 4);                          tiles[i++] = va3;                          break;                      case ColorFormat.A5I3:                          byte alpha2 = (byte)(data[j' 1] * 32 / 256);                          byte va2 = (byte)data[j++' 0];                          va2 |= (byte)(alpha2 << 3);                          tiles[i++] = va2;                          break;                        case ColorFormat.direct:                          byte[] v = ColorToBGRA555(Color.FromArgb(data[j' 1]' coldif[data[j++' 0]]));                          tiles[i++] = v[0];                          tiles[i++] = v[1];                          break;                        case ColorFormat.texel4x4:                          // Not supported                          break;                  }
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Indexed_Image,The following statement contains a magic number: switch (cf)                  {                      case ColorFormat.colors2:                      case ColorFormat.colors4:                      case ColorFormat.colors16:                      case ColorFormat.colors256:                          for (int b = 0; b < 8; b += bpc)                              if (j < data.Length)                                  tiles[i] |= (byte)(data[j++' 0] << b);                            i++;                          break;                        case ColorFormat.A3I5:                          byte alpha1 = (byte)(data[j' 1] * 8 / 256);                          byte va1 = (byte)data[j++' 0];                          va1 |= (byte)(alpha1 << 5);                          tiles[i++] = va1;                          break;                      case ColorFormat.A4I4:                          byte alpha3 = (byte)(data[j' 1] * 16 / 256);                          byte va3 = (byte)data[j++' 0];                          va3 |= (byte)(alpha3 << 4);                          tiles[i++] = va3;                          break;                      case ColorFormat.A5I3:                          byte alpha2 = (byte)(data[j' 1] * 32 / 256);                          byte va2 = (byte)data[j++' 0];                          va2 |= (byte)(alpha2 << 3);                          tiles[i++] = va2;                          break;                        case ColorFormat.direct:                          byte[] v = ColorToBGRA555(Color.FromArgb(data[j' 1]' coldif[data[j++' 0]]));                          tiles[i++] = v[0];                          tiles[i++] = v[1];                          break;                        case ColorFormat.texel4x4:                          // Not supported                          break;                  }
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Indexed_Image,The following statement contains a magic number: switch (cf)                  {                      case ColorFormat.colors2:                      case ColorFormat.colors4:                      case ColorFormat.colors16:                      case ColorFormat.colors256:                          for (int b = 0; b < 8; b += bpc)                              if (j < data.Length)                                  tiles[i] |= (byte)(data[j++' 0] << b);                            i++;                          break;                        case ColorFormat.A3I5:                          byte alpha1 = (byte)(data[j' 1] * 8 / 256);                          byte va1 = (byte)data[j++' 0];                          va1 |= (byte)(alpha1 << 5);                          tiles[i++] = va1;                          break;                      case ColorFormat.A4I4:                          byte alpha3 = (byte)(data[j' 1] * 16 / 256);                          byte va3 = (byte)data[j++' 0];                          va3 |= (byte)(alpha3 << 4);                          tiles[i++] = va3;                          break;                      case ColorFormat.A5I3:                          byte alpha2 = (byte)(data[j' 1] * 32 / 256);                          byte va2 = (byte)data[j++' 0];                          va2 |= (byte)(alpha2 << 3);                          tiles[i++] = va2;                          break;                        case ColorFormat.direct:                          byte[] v = ColorToBGRA555(Color.FromArgb(data[j' 1]' coldif[data[j++' 0]]));                          tiles[i++] = v[0];                          tiles[i++] = v[1];                          break;                        case ColorFormat.texel4x4:                          // Not supported                          break;                  }
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Indexed_Image,The following statement contains a magic number: switch (cf)                  {                      case ColorFormat.colors2:                      case ColorFormat.colors4:                      case ColorFormat.colors16:                      case ColorFormat.colors256:                          for (int b = 0; b < 8; b += bpc)                              if (j < data.Length)                                  tiles[i] |= (byte)(data[j++' 0] << b);                            i++;                          break;                        case ColorFormat.A3I5:                          byte alpha1 = (byte)(data[j' 1] * 8 / 256);                          byte va1 = (byte)data[j++' 0];                          va1 |= (byte)(alpha1 << 5);                          tiles[i++] = va1;                          break;                      case ColorFormat.A4I4:                          byte alpha3 = (byte)(data[j' 1] * 16 / 256);                          byte va3 = (byte)data[j++' 0];                          va3 |= (byte)(alpha3 << 4);                          tiles[i++] = va3;                          break;                      case ColorFormat.A5I3:                          byte alpha2 = (byte)(data[j' 1] * 32 / 256);                          byte va2 = (byte)data[j++' 0];                          va2 |= (byte)(alpha2 << 3);                          tiles[i++] = va2;                          break;                        case ColorFormat.direct:                          byte[] v = ColorToBGRA555(Color.FromArgb(data[j' 1]' coldif[data[j++' 0]]));                          tiles[i++] = v[0];                          tiles[i++] = v[1];                          break;                        case ColorFormat.texel4x4:                          // Not supported                          break;                  }
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Indexed_Image,The following statement contains a magic number: switch (cf)                  {                      case ColorFormat.colors2:                      case ColorFormat.colors4:                      case ColorFormat.colors16:                      case ColorFormat.colors256:                          for (int b = 0; b < 8; b += bpc)                              if (j < data.Length)                                  tiles[i] |= (byte)(data[j++' 0] << b);                            i++;                          break;                        case ColorFormat.A3I5:                          byte alpha1 = (byte)(data[j' 1] * 8 / 256);                          byte va1 = (byte)data[j++' 0];                          va1 |= (byte)(alpha1 << 5);                          tiles[i++] = va1;                          break;                      case ColorFormat.A4I4:                          byte alpha3 = (byte)(data[j' 1] * 16 / 256);                          byte va3 = (byte)data[j++' 0];                          va3 |= (byte)(alpha3 << 4);                          tiles[i++] = va3;                          break;                      case ColorFormat.A5I3:                          byte alpha2 = (byte)(data[j' 1] * 32 / 256);                          byte va2 = (byte)data[j++' 0];                          va2 |= (byte)(alpha2 << 3);                          tiles[i++] = va2;                          break;                        case ColorFormat.direct:                          byte[] v = ColorToBGRA555(Color.FromArgb(data[j' 1]' coldif[data[j++' 0]]));                          tiles[i++] = v[0];                          tiles[i++] = v[1];                          break;                        case ColorFormat.texel4x4:                          // Not supported                          break;                  }
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Indexed_Image,The following statement contains a magic number: switch (cf)                  {                      case ColorFormat.colors2:                      case ColorFormat.colors4:                      case ColorFormat.colors16:                      case ColorFormat.colors256:                          for (int b = 0; b < 8; b += bpc)                              if (j < data.Length)                                  tiles[i] |= (byte)(data[j++' 0] << b);                            i++;                          break;                        case ColorFormat.A3I5:                          byte alpha1 = (byte)(data[j' 1] * 8 / 256);                          byte va1 = (byte)data[j++' 0];                          va1 |= (byte)(alpha1 << 5);                          tiles[i++] = va1;                          break;                      case ColorFormat.A4I4:                          byte alpha3 = (byte)(data[j' 1] * 16 / 256);                          byte va3 = (byte)data[j++' 0];                          va3 |= (byte)(alpha3 << 4);                          tiles[i++] = va3;                          break;                      case ColorFormat.A5I3:                          byte alpha2 = (byte)(data[j' 1] * 32 / 256);                          byte va2 = (byte)data[j++' 0];                          va2 |= (byte)(alpha2 << 3);                          tiles[i++] = va2;                          break;                        case ColorFormat.direct:                          byte[] v = ColorToBGRA555(Color.FromArgb(data[j' 1]' coldif[data[j++' 0]]));                          tiles[i++] = v[0];                          tiles[i++] = v[1];                          break;                        case ColorFormat.texel4x4:                          // Not supported                          break;                  }
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Apply_Map,The following statement contains a magic number: int tile_length = tile_size * tile_size * bpp / 8;
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,XFlip,The following statement contains a magic number: int tile_width = tile_size * bpp / 8;
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,XFlip,The following statement contains a magic number: w < tile_width / 2
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Reverse_Bits,The following statement contains a magic number: rb = (byte)((b << 4) + (b >> 4));
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Reverse_Bits,The following statement contains a magic number: rb = (byte)((b << 4) + (b >> 4));
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Reverse_Bits,The following statement contains a magic number: length == 4
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,YFlip,The following statement contains a magic number: int tile_width = tile_size * bpp / 8;
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,YFlip,The following statement contains a magic number: h < tile_size / 2
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Create_Map,The following statement contains a magic number: int tile_length = ppt * bpp / 8;
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,MapInfo,The following statement contains a magic number: mapInfo.xFlip = (byte)((value >> 10) & 1);
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,MapInfo,The following statement contains a magic number: mapInfo.yFlip = (byte)((value >> 11) & 1);
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,MapInfo,The following statement contains a magic number: mapInfo.nPalette = (byte)((value >> 12) & 0xF);
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,MapInfo,The following statement contains a magic number: int npalette = map.nPalette << 12;
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,MapInfo,The following statement contains a magic number: int yFlip = map.yFlip << 11;
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,MapInfo,The following statement contains a magic number: int xFlip = map.xFlip << 10;
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Get_OAMSize,The following statement contains a magic number: switch (shape)              {                  case 0x00:  // Square                      switch (size)                      {                          case 0x00:                              imageSize = new Size(8' 8);                              break;                          case 0x01:                              imageSize = new Size(16' 16);                              break;                          case 0x02:                              imageSize = new Size(32' 32);                              break;                          case 0x03:                              imageSize = new Size(64' 64);                              break;                      }                      break;                  case 0x01:  // Horizontal                      switch (size)                      {                          case 0x00:                              imageSize = new Size(16' 8);                              break;                          case 0x01:                              imageSize = new Size(32' 8);                              break;                          case 0x02:                              imageSize = new Size(32' 16);                              break;                          case 0x03:                              imageSize = new Size(64' 32);                              break;                      }                      break;                  case 0x02:  // Vertical                      switch (size)                      {                          case 0x00:                              imageSize = new Size(8' 16);                              break;                          case 0x01:                              imageSize = new Size(8' 32);                              break;                          case 0x02:                              imageSize = new Size(16' 32);                              break;                          case 0x03:                              imageSize = new Size(32' 64);                              break;                      }                      break;              }
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Get_OAMSize,The following statement contains a magic number: switch (shape)              {                  case 0x00:  // Square                      switch (size)                      {                          case 0x00:                              imageSize = new Size(8' 8);                              break;                          case 0x01:                              imageSize = new Size(16' 16);                              break;                          case 0x02:                              imageSize = new Size(32' 32);                              break;                          case 0x03:                              imageSize = new Size(64' 64);                              break;                      }                      break;                  case 0x01:  // Horizontal                      switch (size)                      {                          case 0x00:                              imageSize = new Size(16' 8);                              break;                          case 0x01:                              imageSize = new Size(32' 8);                              break;                          case 0x02:                              imageSize = new Size(32' 16);                              break;                          case 0x03:                              imageSize = new Size(64' 32);                              break;                      }                      break;                  case 0x02:  // Vertical                      switch (size)                      {                          case 0x00:                              imageSize = new Size(8' 16);                              break;                          case 0x01:                              imageSize = new Size(8' 32);                              break;                          case 0x02:                              imageSize = new Size(16' 32);                              break;                          case 0x03:                              imageSize = new Size(32' 64);                              break;                      }                      break;              }
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Get_OAMSize,The following statement contains a magic number: switch (shape)              {                  case 0x00:  // Square                      switch (size)                      {                          case 0x00:                              imageSize = new Size(8' 8);                              break;                          case 0x01:                              imageSize = new Size(16' 16);                              break;                          case 0x02:                              imageSize = new Size(32' 32);                              break;                          case 0x03:                              imageSize = new Size(64' 64);                              break;                      }                      break;                  case 0x01:  // Horizontal                      switch (size)                      {                          case 0x00:                              imageSize = new Size(16' 8);                              break;                          case 0x01:                              imageSize = new Size(32' 8);                              break;                          case 0x02:                              imageSize = new Size(32' 16);                              break;                          case 0x03:                              imageSize = new Size(64' 32);                              break;                      }                      break;                  case 0x02:  // Vertical                      switch (size)                      {                          case 0x00:                              imageSize = new Size(8' 16);                              break;                          case 0x01:                              imageSize = new Size(8' 32);                              break;                          case 0x02:                              imageSize = new Size(16' 32);                              break;                          case 0x03:                              imageSize = new Size(32' 64);                              break;                      }                      break;              }
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Get_OAMSize,The following statement contains a magic number: switch (shape)              {                  case 0x00:  // Square                      switch (size)                      {                          case 0x00:                              imageSize = new Size(8' 8);                              break;                          case 0x01:                              imageSize = new Size(16' 16);                              break;                          case 0x02:                              imageSize = new Size(32' 32);                              break;                          case 0x03:                              imageSize = new Size(64' 64);                              break;                      }                      break;                  case 0x01:  // Horizontal                      switch (size)                      {                          case 0x00:                              imageSize = new Size(16' 8);                              break;                          case 0x01:                              imageSize = new Size(32' 8);                              break;                          case 0x02:                              imageSize = new Size(32' 16);                              break;                          case 0x03:                              imageSize = new Size(64' 32);                              break;                      }                      break;                  case 0x02:  // Vertical                      switch (size)                      {                          case 0x00:                              imageSize = new Size(8' 16);                              break;                          case 0x01:                              imageSize = new Size(8' 32);                              break;                          case 0x02:                              imageSize = new Size(16' 32);                              break;                          case 0x03:                              imageSize = new Size(32' 64);                              break;                      }                      break;              }
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Get_OAMSize,The following statement contains a magic number: switch (shape)              {                  case 0x00:  // Square                      switch (size)                      {                          case 0x00:                              imageSize = new Size(8' 8);                              break;                          case 0x01:                              imageSize = new Size(16' 16);                              break;                          case 0x02:                              imageSize = new Size(32' 32);                              break;                          case 0x03:                              imageSize = new Size(64' 64);                              break;                      }                      break;                  case 0x01:  // Horizontal                      switch (size)                      {                          case 0x00:                              imageSize = new Size(16' 8);                              break;                          case 0x01:                              imageSize = new Size(32' 8);                              break;                          case 0x02:                              imageSize = new Size(32' 16);                              break;                          case 0x03:                              imageSize = new Size(64' 32);                              break;                      }                      break;                  case 0x02:  // Vertical                      switch (size)                      {                          case 0x00:                              imageSize = new Size(8' 16);                              break;                          case 0x01:                              imageSize = new Size(8' 32);                              break;                          case 0x02:                              imageSize = new Size(16' 32);                              break;                          case 0x03:                              imageSize = new Size(32' 64);                              break;                      }                      break;              }
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Get_OAMSize,The following statement contains a magic number: switch (shape)              {                  case 0x00:  // Square                      switch (size)                      {                          case 0x00:                              imageSize = new Size(8' 8);                              break;                          case 0x01:                              imageSize = new Size(16' 16);                              break;                          case 0x02:                              imageSize = new Size(32' 32);                              break;                          case 0x03:                              imageSize = new Size(64' 64);                              break;                      }                      break;                  case 0x01:  // Horizontal                      switch (size)                      {                          case 0x00:                              imageSize = new Size(16' 8);                              break;                          case 0x01:                              imageSize = new Size(32' 8);                              break;                          case 0x02:                              imageSize = new Size(32' 16);                              break;                          case 0x03:                              imageSize = new Size(64' 32);                              break;                      }                      break;                  case 0x02:  // Vertical                      switch (size)                      {                          case 0x00:                              imageSize = new Size(8' 16);                              break;                          case 0x01:                              imageSize = new Size(8' 32);                              break;                          case 0x02:                              imageSize = new Size(16' 32);                              break;                          case 0x03:                              imageSize = new Size(32' 64);                              break;                      }                      break;              }
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Get_OAMSize,The following statement contains a magic number: switch (shape)              {                  case 0x00:  // Square                      switch (size)                      {                          case 0x00:                              imageSize = new Size(8' 8);                              break;                          case 0x01:                              imageSize = new Size(16' 16);                              break;                          case 0x02:                              imageSize = new Size(32' 32);                              break;                          case 0x03:                              imageSize = new Size(64' 64);                              break;                      }                      break;                  case 0x01:  // Horizontal                      switch (size)                      {                          case 0x00:                              imageSize = new Size(16' 8);                              break;                          case 0x01:                              imageSize = new Size(32' 8);                              break;                          case 0x02:                              imageSize = new Size(32' 16);                              break;                          case 0x03:                              imageSize = new Size(64' 32);                              break;                      }                      break;                  case 0x02:  // Vertical                      switch (size)                      {                          case 0x00:                              imageSize = new Size(8' 16);                              break;                          case 0x01:                              imageSize = new Size(8' 32);                              break;                          case 0x02:                              imageSize = new Size(16' 32);                              break;                          case 0x03:                              imageSize = new Size(32' 64);                              break;                      }                      break;              }
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Get_OAMSize,The following statement contains a magic number: switch (shape)              {                  case 0x00:  // Square                      switch (size)                      {                          case 0x00:                              imageSize = new Size(8' 8);                              break;                          case 0x01:                              imageSize = new Size(16' 16);                              break;                          case 0x02:                              imageSize = new Size(32' 32);                              break;                          case 0x03:                              imageSize = new Size(64' 64);                              break;                      }                      break;                  case 0x01:  // Horizontal                      switch (size)                      {                          case 0x00:                              imageSize = new Size(16' 8);                              break;                          case 0x01:                              imageSize = new Size(32' 8);                              break;                          case 0x02:                              imageSize = new Size(32' 16);                              break;                          case 0x03:                              imageSize = new Size(64' 32);                              break;                      }                      break;                  case 0x02:  // Vertical                      switch (size)                      {                          case 0x00:                              imageSize = new Size(8' 16);                              break;                          case 0x01:                              imageSize = new Size(8' 32);                              break;                          case 0x02:                              imageSize = new Size(16' 32);                              break;                          case 0x03:                              imageSize = new Size(32' 64);                              break;                      }                      break;              }
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Get_OAMSize,The following statement contains a magic number: switch (shape)              {                  case 0x00:  // Square                      switch (size)                      {                          case 0x00:                              imageSize = new Size(8' 8);                              break;                          case 0x01:                              imageSize = new Size(16' 16);                              break;                          case 0x02:                              imageSize = new Size(32' 32);                              break;                          case 0x03:                              imageSize = new Size(64' 64);                              break;                      }                      break;                  case 0x01:  // Horizontal                      switch (size)                      {                          case 0x00:                              imageSize = new Size(16' 8);                              break;                          case 0x01:                              imageSize = new Size(32' 8);                              break;                          case 0x02:                              imageSize = new Size(32' 16);                              break;                          case 0x03:                              imageSize = new Size(64' 32);                              break;                      }                      break;                  case 0x02:  // Vertical                      switch (size)                      {                          case 0x00:                              imageSize = new Size(8' 16);                              break;                          case 0x01:                              imageSize = new Size(8' 32);                              break;                          case 0x02:                              imageSize = new Size(16' 32);                              break;                          case 0x03:                              imageSize = new Size(32' 64);                              break;                      }                      break;              }
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Get_OAMSize,The following statement contains a magic number: switch (shape)              {                  case 0x00:  // Square                      switch (size)                      {                          case 0x00:                              imageSize = new Size(8' 8);                              break;                          case 0x01:                              imageSize = new Size(16' 16);                              break;                          case 0x02:                              imageSize = new Size(32' 32);                              break;                          case 0x03:                              imageSize = new Size(64' 64);                              break;                      }                      break;                  case 0x01:  // Horizontal                      switch (size)                      {                          case 0x00:                              imageSize = new Size(16' 8);                              break;                          case 0x01:                              imageSize = new Size(32' 8);                              break;                          case 0x02:                              imageSize = new Size(32' 16);                              break;                          case 0x03:                              imageSize = new Size(64' 32);                              break;                      }                      break;                  case 0x02:  // Vertical                      switch (size)                      {                          case 0x00:                              imageSize = new Size(8' 16);                              break;                          case 0x01:                              imageSize = new Size(8' 32);                              break;                          case 0x02:                              imageSize = new Size(16' 32);                              break;                          case 0x03:                              imageSize = new Size(32' 64);                              break;                      }                      break;              }
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Get_OAMSize,The following statement contains a magic number: switch (shape)              {                  case 0x00:  // Square                      switch (size)                      {                          case 0x00:                              imageSize = new Size(8' 8);                              break;                          case 0x01:                              imageSize = new Size(16' 16);                              break;                          case 0x02:                              imageSize = new Size(32' 32);                              break;                          case 0x03:                              imageSize = new Size(64' 64);                              break;                      }                      break;                  case 0x01:  // Horizontal                      switch (size)                      {                          case 0x00:                              imageSize = new Size(16' 8);                              break;                          case 0x01:                              imageSize = new Size(32' 8);                              break;                          case 0x02:                              imageSize = new Size(32' 16);                              break;                          case 0x03:                              imageSize = new Size(64' 32);                              break;                      }                      break;                  case 0x02:  // Vertical                      switch (size)                      {                          case 0x00:                              imageSize = new Size(8' 16);                              break;                          case 0x01:                              imageSize = new Size(8' 32);                              break;                          case 0x02:                              imageSize = new Size(16' 32);                              break;                          case 0x03:                              imageSize = new Size(32' 64);                              break;                      }                      break;              }
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Get_OAMSize,The following statement contains a magic number: switch (shape)              {                  case 0x00:  // Square                      switch (size)                      {                          case 0x00:                              imageSize = new Size(8' 8);                              break;                          case 0x01:                              imageSize = new Size(16' 16);                              break;                          case 0x02:                              imageSize = new Size(32' 32);                              break;                          case 0x03:                              imageSize = new Size(64' 64);                              break;                      }                      break;                  case 0x01:  // Horizontal                      switch (size)                      {                          case 0x00:                              imageSize = new Size(16' 8);                              break;                          case 0x01:                              imageSize = new Size(32' 8);                              break;                          case 0x02:                              imageSize = new Size(32' 16);                              break;                          case 0x03:                              imageSize = new Size(64' 32);                              break;                      }                      break;                  case 0x02:  // Vertical                      switch (size)                      {                          case 0x00:                              imageSize = new Size(8' 16);                              break;                          case 0x01:                              imageSize = new Size(8' 32);                              break;                          case 0x02:                              imageSize = new Size(16' 32);                              break;                          case 0x03:                              imageSize = new Size(32' 64);                              break;                      }                      break;              }
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Get_OAMSize,The following statement contains a magic number: switch (shape)              {                  case 0x00:  // Square                      switch (size)                      {                          case 0x00:                              imageSize = new Size(8' 8);                              break;                          case 0x01:                              imageSize = new Size(16' 16);                              break;                          case 0x02:                              imageSize = new Size(32' 32);                              break;                          case 0x03:                              imageSize = new Size(64' 64);                              break;                      }                      break;                  case 0x01:  // Horizontal                      switch (size)                      {                          case 0x00:                              imageSize = new Size(16' 8);                              break;                          case 0x01:                              imageSize = new Size(32' 8);                              break;                          case 0x02:                              imageSize = new Size(32' 16);                              break;                          case 0x03:                              imageSize = new Size(64' 32);                              break;                      }                      break;                  case 0x02:  // Vertical                      switch (size)                      {                          case 0x00:                              imageSize = new Size(8' 16);                              break;                          case 0x01:                              imageSize = new Size(8' 32);                              break;                          case 0x02:                              imageSize = new Size(16' 32);                              break;                          case 0x03:                              imageSize = new Size(32' 64);                              break;                      }                      break;              }
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Get_OAMSize,The following statement contains a magic number: switch (shape)              {                  case 0x00:  // Square                      switch (size)                      {                          case 0x00:                              imageSize = new Size(8' 8);                              break;                          case 0x01:                              imageSize = new Size(16' 16);                              break;                          case 0x02:                              imageSize = new Size(32' 32);                              break;                          case 0x03:                              imageSize = new Size(64' 64);                              break;                      }                      break;                  case 0x01:  // Horizontal                      switch (size)                      {                          case 0x00:                              imageSize = new Size(16' 8);                              break;                          case 0x01:                              imageSize = new Size(32' 8);                              break;                          case 0x02:                              imageSize = new Size(32' 16);                              break;                          case 0x03:                              imageSize = new Size(64' 32);                              break;                      }                      break;                  case 0x02:  // Vertical                      switch (size)                      {                          case 0x00:                              imageSize = new Size(8' 16);                              break;                          case 0x01:                              imageSize = new Size(8' 32);                              break;                          case 0x02:                              imageSize = new Size(16' 32);                              break;                          case 0x03:                              imageSize = new Size(32' 64);                              break;                      }                      break;              }
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Get_OAMSize,The following statement contains a magic number: switch (shape)              {                  case 0x00:  // Square                      switch (size)                      {                          case 0x00:                              imageSize = new Size(8' 8);                              break;                          case 0x01:                              imageSize = new Size(16' 16);                              break;                          case 0x02:                              imageSize = new Size(32' 32);                              break;                          case 0x03:                              imageSize = new Size(64' 64);                              break;                      }                      break;                  case 0x01:  // Horizontal                      switch (size)                      {                          case 0x00:                              imageSize = new Size(16' 8);                              break;                          case 0x01:                              imageSize = new Size(32' 8);                              break;                          case 0x02:                              imageSize = new Size(32' 16);                              break;                          case 0x03:                              imageSize = new Size(64' 32);                              break;                      }                      break;                  case 0x02:  // Vertical                      switch (size)                      {                          case 0x00:                              imageSize = new Size(8' 16);                              break;                          case 0x01:                              imageSize = new Size(8' 32);                              break;                          case 0x02:                              imageSize = new Size(16' 32);                              break;                          case 0x03:                              imageSize = new Size(32' 64);                              break;                      }                      break;              }
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Get_OAMSize,The following statement contains a magic number: switch (shape)              {                  case 0x00:  // Square                      switch (size)                      {                          case 0x00:                              imageSize = new Size(8' 8);                              break;                          case 0x01:                              imageSize = new Size(16' 16);                              break;                          case 0x02:                              imageSize = new Size(32' 32);                              break;                          case 0x03:                              imageSize = new Size(64' 64);                              break;                      }                      break;                  case 0x01:  // Horizontal                      switch (size)                      {                          case 0x00:                              imageSize = new Size(16' 8);                              break;                          case 0x01:                              imageSize = new Size(32' 8);                              break;                          case 0x02:                              imageSize = new Size(32' 16);                              break;                          case 0x03:                              imageSize = new Size(64' 32);                              break;                      }                      break;                  case 0x02:  // Vertical                      switch (size)                      {                          case 0x00:                              imageSize = new Size(8' 16);                              break;                          case 0x01:                              imageSize = new Size(8' 32);                              break;                          case 0x02:                              imageSize = new Size(16' 32);                              break;                          case 0x03:                              imageSize = new Size(32' 64);                              break;                      }                      break;              }
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Get_OAMSize,The following statement contains a magic number: switch (shape)              {                  case 0x00:  // Square                      switch (size)                      {                          case 0x00:                              imageSize = new Size(8' 8);                              break;                          case 0x01:                              imageSize = new Size(16' 16);                              break;                          case 0x02:                              imageSize = new Size(32' 32);                              break;                          case 0x03:                              imageSize = new Size(64' 64);                              break;                      }                      break;                  case 0x01:  // Horizontal                      switch (size)                      {                          case 0x00:                              imageSize = new Size(16' 8);                              break;                          case 0x01:                              imageSize = new Size(32' 8);                              break;                          case 0x02:                              imageSize = new Size(32' 16);                              break;                          case 0x03:                              imageSize = new Size(64' 32);                              break;                      }                      break;                  case 0x02:  // Vertical                      switch (size)                      {                          case 0x00:                              imageSize = new Size(8' 16);                              break;                          case 0x01:                              imageSize = new Size(8' 32);                              break;                          case 0x02:                              imageSize = new Size(16' 32);                              break;                          case 0x03:                              imageSize = new Size(32' 64);                              break;                      }                      break;              }
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Get_OAMSize,The following statement contains a magic number: switch (shape)              {                  case 0x00:  // Square                      switch (size)                      {                          case 0x00:                              imageSize = new Size(8' 8);                              break;                          case 0x01:                              imageSize = new Size(16' 16);                              break;                          case 0x02:                              imageSize = new Size(32' 32);                              break;                          case 0x03:                              imageSize = new Size(64' 64);                              break;                      }                      break;                  case 0x01:  // Horizontal                      switch (size)                      {                          case 0x00:                              imageSize = new Size(16' 8);                              break;                          case 0x01:                              imageSize = new Size(32' 8);                              break;                          case 0x02:                              imageSize = new Size(32' 16);                              break;                          case 0x03:                              imageSize = new Size(64' 32);                              break;                      }                      break;                  case 0x02:  // Vertical                      switch (size)                      {                          case 0x00:                              imageSize = new Size(8' 16);                              break;                          case 0x01:                              imageSize = new Size(8' 32);                              break;                          case 0x02:                              imageSize = new Size(16' 32);                              break;                          case 0x03:                              imageSize = new Size(32' 64);                              break;                      }                      break;              }
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Get_OAMSize,The following statement contains a magic number: switch (shape)              {                  case 0x00:  // Square                      switch (size)                      {                          case 0x00:                              imageSize = new Size(8' 8);                              break;                          case 0x01:                              imageSize = new Size(16' 16);                              break;                          case 0x02:                              imageSize = new Size(32' 32);                              break;                          case 0x03:                              imageSize = new Size(64' 64);                              break;                      }                      break;                  case 0x01:  // Horizontal                      switch (size)                      {                          case 0x00:                              imageSize = new Size(16' 8);                              break;                          case 0x01:                              imageSize = new Size(32' 8);                              break;                          case 0x02:                              imageSize = new Size(32' 16);                              break;                          case 0x03:                              imageSize = new Size(64' 32);                              break;                      }                      break;                  case 0x02:  // Vertical                      switch (size)                      {                          case 0x00:                              imageSize = new Size(8' 16);                              break;                          case 0x01:                              imageSize = new Size(8' 32);                              break;                          case 0x02:                              imageSize = new Size(16' 32);                              break;                          case 0x03:                              imageSize = new Size(32' 64);                              break;                      }                      break;              }
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Get_OAMSize,The following statement contains a magic number: switch (shape)              {                  case 0x00:  // Square                      switch (size)                      {                          case 0x00:                              imageSize = new Size(8' 8);                              break;                          case 0x01:                              imageSize = new Size(16' 16);                              break;                          case 0x02:                              imageSize = new Size(32' 32);                              break;                          case 0x03:                              imageSize = new Size(64' 64);                              break;                      }                      break;                  case 0x01:  // Horizontal                      switch (size)                      {                          case 0x00:                              imageSize = new Size(16' 8);                              break;                          case 0x01:                              imageSize = new Size(32' 8);                              break;                          case 0x02:                              imageSize = new Size(32' 16);                              break;                          case 0x03:                              imageSize = new Size(64' 32);                              break;                      }                      break;                  case 0x02:  // Vertical                      switch (size)                      {                          case 0x00:                              imageSize = new Size(8' 16);                              break;                          case 0x01:                              imageSize = new Size(8' 32);                              break;                          case 0x02:                              imageSize = new Size(16' 32);                              break;                          case 0x03:                              imageSize = new Size(32' 64);                              break;                      }                      break;              }
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Get_OAMSize,The following statement contains a magic number: switch (shape)              {                  case 0x00:  // Square                      switch (size)                      {                          case 0x00:                              imageSize = new Size(8' 8);                              break;                          case 0x01:                              imageSize = new Size(16' 16);                              break;                          case 0x02:                              imageSize = new Size(32' 32);                              break;                          case 0x03:                              imageSize = new Size(64' 64);                              break;                      }                      break;                  case 0x01:  // Horizontal                      switch (size)                      {                          case 0x00:                              imageSize = new Size(16' 8);                              break;                          case 0x01:                              imageSize = new Size(32' 8);                              break;                          case 0x02:                              imageSize = new Size(32' 16);                              break;                          case 0x03:                              imageSize = new Size(64' 32);                              break;                      }                      break;                  case 0x02:  // Vertical                      switch (size)                      {                          case 0x00:                              imageSize = new Size(8' 16);                              break;                          case 0x01:                              imageSize = new Size(8' 32);                              break;                          case 0x02:                              imageSize = new Size(16' 32);                              break;                          case 0x03:                              imageSize = new Size(32' 64);                              break;                      }                      break;              }
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Get_OAMSize,The following statement contains a magic number: switch (shape)              {                  case 0x00:  // Square                      switch (size)                      {                          case 0x00:                              imageSize = new Size(8' 8);                              break;                          case 0x01:                              imageSize = new Size(16' 16);                              break;                          case 0x02:                              imageSize = new Size(32' 32);                              break;                          case 0x03:                              imageSize = new Size(64' 64);                              break;                      }                      break;                  case 0x01:  // Horizontal                      switch (size)                      {                          case 0x00:                              imageSize = new Size(16' 8);                              break;                          case 0x01:                              imageSize = new Size(32' 8);                              break;                          case 0x02:                              imageSize = new Size(32' 16);                              break;                          case 0x03:                              imageSize = new Size(64' 32);                              break;                      }                      break;                  case 0x02:  // Vertical                      switch (size)                      {                          case 0x00:                              imageSize = new Size(8' 16);                              break;                          case 0x01:                              imageSize = new Size(8' 32);                              break;                          case 0x02:                              imageSize = new Size(16' 32);                              break;                          case 0x03:                              imageSize = new Size(32' 64);                              break;                      }                      break;              }
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Get_OAMSize,The following statement contains a magic number: switch (shape)              {                  case 0x00:  // Square                      switch (size)                      {                          case 0x00:                              imageSize = new Size(8' 8);                              break;                          case 0x01:                              imageSize = new Size(16' 16);                              break;                          case 0x02:                              imageSize = new Size(32' 32);                              break;                          case 0x03:                              imageSize = new Size(64' 64);                              break;                      }                      break;                  case 0x01:  // Horizontal                      switch (size)                      {                          case 0x00:                              imageSize = new Size(16' 8);                              break;                          case 0x01:                              imageSize = new Size(32' 8);                              break;                          case 0x02:                              imageSize = new Size(32' 16);                              break;                          case 0x03:                              imageSize = new Size(64' 32);                              break;                      }                      break;                  case 0x02:  // Vertical                      switch (size)                      {                          case 0x00:                              imageSize = new Size(8' 16);                              break;                          case 0x01:                              imageSize = new Size(8' 32);                              break;                          case 0x02:                              imageSize = new Size(16' 32);                              break;                          case 0x03:                              imageSize = new Size(32' 64);                              break;                      }                      break;              }
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Get_OAMSize,The following statement contains a magic number: switch (shape)              {                  case 0x00:  // Square                      switch (size)                      {                          case 0x00:                              imageSize = new Size(8' 8);                              break;                          case 0x01:                              imageSize = new Size(16' 16);                              break;                          case 0x02:                              imageSize = new Size(32' 32);                              break;                          case 0x03:                              imageSize = new Size(64' 64);                              break;                      }                      break;                  case 0x01:  // Horizontal                      switch (size)                      {                          case 0x00:                              imageSize = new Size(16' 8);                              break;                          case 0x01:                              imageSize = new Size(32' 8);                              break;                          case 0x02:                              imageSize = new Size(32' 16);                              break;                          case 0x03:                              imageSize = new Size(64' 32);                              break;                      }                      break;                  case 0x02:  // Vertical                      switch (size)                      {                          case 0x00:                              imageSize = new Size(8' 16);                              break;                          case 0x01:                              imageSize = new Size(8' 32);                              break;                          case 0x02:                              imageSize = new Size(16' 32);                              break;                          case 0x03:                              imageSize = new Size(32' 64);                              break;                      }                      break;              }
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Get_Image,The following statement contains a magic number: graphic.DrawString("No OAM"' SystemFonts.CaptionFont' Brushes.Black' new PointF(max_width / 2' max_height / 2));
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Get_Image,The following statement contains a magic number: graphic.DrawString("No OAM"' SystemFonts.CaptionFont' Brushes.Black' new PointF(max_width / 2' max_height / 2));
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Get_Image,The following statement contains a magic number: graphic.DrawLine(Pens.LightBlue' (i + size.Width / 2) * zoom' 0' (i + size.Width / 2) * zoom' size.Height * zoom);
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Get_Image,The following statement contains a magic number: graphic.DrawLine(Pens.LightBlue' (i + size.Width / 2) * zoom' 0' (i + size.Width / 2) * zoom' size.Height * zoom);
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Get_Image,The following statement contains a magic number: graphic.DrawLine(Pens.LightBlue' 0' (i + size.Height / 2) * zoom' size.Width * zoom' (i + size.Height / 2) * zoom);
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Get_Image,The following statement contains a magic number: graphic.DrawLine(Pens.LightBlue' 0' (i + size.Height / 2) * zoom' size.Width * zoom' (i + size.Height / 2) * zoom);
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Get_Image,The following statement contains a magic number: graphic.DrawLine(Pens.Blue' (max_width / 2) * zoom' 0' (max_width / 2) * zoom' max_height * zoom);
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Get_Image,The following statement contains a magic number: graphic.DrawLine(Pens.Blue' (max_width / 2) * zoom' 0' (max_width / 2) * zoom' max_height * zoom);
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Get_Image,The following statement contains a magic number: graphic.DrawLine(Pens.Blue' 0' (max_height / 2) * zoom' max_width * zoom' (max_height / 2) * zoom);
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Get_Image,The following statement contains a magic number: graphic.DrawLine(Pens.Blue' 0' (max_height / 2) * zoom' max_width * zoom' (max_height / 2) * zoom);
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Get_Image,The following statement contains a magic number: graphic.DrawImageUnscaled(cell' size.Width / 2 + bank.oams[i].obj1.xOffset * zoom' size.Height / 2 + bank.oams[i].obj0.yOffset * zoom);
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Get_Image,The following statement contains a magic number: graphic.DrawImageUnscaled(cell' size.Width / 2 + bank.oams[i].obj1.xOffset * zoom' size.Height / 2 + bank.oams[i].obj0.yOffset * zoom);
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Get_Image,The following statement contains a magic number: graphic.DrawRectangle(Pens.Black' size.Width / 2 + bank.oams[i].obj1.xOffset * zoom' size.Height / 2 + bank.oams[i].obj0.yOffset * zoom'                          bank.oams[i].width * zoom' bank.oams[i].height * zoom);
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Get_Image,The following statement contains a magic number: graphic.DrawRectangle(Pens.Black' size.Width / 2 + bank.oams[i].obj1.xOffset * zoom' size.Height / 2 + bank.oams[i].obj0.yOffset * zoom'                          bank.oams[i].width * zoom' bank.oams[i].height * zoom);
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Get_Image,The following statement contains a magic number: graphic.DrawRectangle(new Pen(Color.Red' 3)' size.Width / 2 + bank.oams[i].obj1.xOffset * zoom' size.Height / 2 + bank.oams[i].obj0.yOffset * zoom'                          bank.oams[i].width * zoom' bank.oams[i].height * zoom);
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Get_Image,The following statement contains a magic number: graphic.DrawRectangle(new Pen(Color.Red' 3)' size.Width / 2 + bank.oams[i].obj1.xOffset * zoom' size.Height / 2 + bank.oams[i].obj0.yOffset * zoom'                          bank.oams[i].width * zoom' bank.oams[i].height * zoom);
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Get_Image,The following statement contains a magic number: graphic.DrawRectangle(new Pen(Color.Red' 3)' size.Width / 2 + bank.oams[i].obj1.xOffset * zoom' size.Height / 2 + bank.oams[i].obj0.yOffset * zoom'                          bank.oams[i].width * zoom' bank.oams[i].height * zoom);
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Get_Image,The following statement contains a magic number: graphic.DrawString(bank.oams[i].num_cell.ToString()' SystemFonts.CaptionFont' Brushes.Black' size.Width / 2 + bank.oams[i].obj1.xOffset * zoom'                          size.Height / 2 + bank.oams[i].obj0.yOffset * zoom);
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Get_Image,The following statement contains a magic number: graphic.DrawString(bank.oams[i].num_cell.ToString()' SystemFonts.CaptionFont' Brushes.Black' size.Width / 2 + bank.oams[i].obj1.xOffset * zoom'                          size.Height / 2 + bank.oams[i].obj0.yOffset * zoom);
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Get_OAMdata,The following statement contains a magic number: int y1 = 128 + oam.obj0.yOffset;
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Get_OAMdata,The following statement contains a magic number: int x1 = 256 + oam.obj1.xOffset;
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Get_OAMdata,The following statement contains a magic number: data.Add(image[wt + ht * 512]);
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Get_OAMdata,The following statement contains a magic number: ht < 256
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,OAMInfo,The following statement contains a magic number: ushort[] obj = new ushort[3];
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,OAMInfo,The following statement contains a magic number: obj[0] += (ushort)((oam.obj0.rs_flag & 1) << 8);
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,OAMInfo,The following statement contains a magic number: obj[0] += (ushort)((oam.obj0.objDisable & 1) << 9);
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,OAMInfo,The following statement contains a magic number: obj[0] += (ushort)((oam.obj0.objMode & 3) << 10);
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,OAMInfo,The following statement contains a magic number: obj[0] += (ushort)((oam.obj0.objMode & 3) << 10);
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,OAMInfo,The following statement contains a magic number: obj[0] += (ushort)((oam.obj0.mosaic_flag & 1) << 12);
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,OAMInfo,The following statement contains a magic number: obj[0] += (ushort)((oam.obj0.depth & 1) << 13);
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,OAMInfo,The following statement contains a magic number: obj[0] += (ushort)((oam.obj0.shape & 3) << 14);
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,OAMInfo,The following statement contains a magic number: obj[0] += (ushort)((oam.obj0.shape & 3) << 14);
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,OAMInfo,The following statement contains a magic number: obj[1] += (ushort)((oam.obj1.unused & 0x7) << 9);
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,OAMInfo,The following statement contains a magic number: obj[1] += (ushort)((oam.obj1.flipX & 1) << 12);
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,OAMInfo,The following statement contains a magic number: obj[1] += (ushort)((oam.obj1.flipY & 1) << 13);
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,OAMInfo,The following statement contains a magic number: obj[1] += (ushort)((oam.obj1.size & 3) << 14);
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,OAMInfo,The following statement contains a magic number: obj[1] += (ushort)((oam.obj1.size & 3) << 14);
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,OAMInfo,The following statement contains a magic number: obj[2] = 0;
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,OAMInfo,The following statement contains a magic number: obj[2] += (ushort)(oam.obj2.tileOffset & 0x3FF);
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,OAMInfo,The following statement contains a magic number: obj[2] += (ushort)((oam.obj2.priority & 3) << 10);
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,OAMInfo,The following statement contains a magic number: obj[2] += (ushort)((oam.obj2.priority & 3) << 10);
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,OAMInfo,The following statement contains a magic number: obj[2] += (ushort)((oam.obj2.priority & 3) << 10);
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,OAMInfo,The following statement contains a magic number: obj[2] += (ushort)((oam.obj2.index_palette & 0xF) << 12);
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,OAMInfo,The following statement contains a magic number: obj[2] += (ushort)((oam.obj2.index_palette & 0xF) << 12);
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,OAMInfo,The following statement contains a magic number: oam.obj0.rs_flag = (byte)((obj[0] >> 8) & 1);
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,OAMInfo,The following statement contains a magic number: oam.obj0.objDisable = (byte)((obj[0] >> 9) & 1);
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,OAMInfo,The following statement contains a magic number: oam.obj0.objMode = (byte)((obj[0] >> 10) & 3);
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,OAMInfo,The following statement contains a magic number: oam.obj0.objMode = (byte)((obj[0] >> 10) & 3);
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,OAMInfo,The following statement contains a magic number: oam.obj0.mosaic_flag = (byte)((obj[0] >> 12) & 1);
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,OAMInfo,The following statement contains a magic number: oam.obj0.depth = (byte)((obj[0] >> 13) & 1);
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,OAMInfo,The following statement contains a magic number: oam.obj0.shape = (byte)((obj[0] >> 14) & 3);
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,OAMInfo,The following statement contains a magic number: oam.obj0.shape = (byte)((obj[0] >> 14) & 3);
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,OAMInfo,The following statement contains a magic number: oam.obj1.unused = (byte)((obj[1] >> 9) & 7);
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,OAMInfo,The following statement contains a magic number: oam.obj1.unused = (byte)((obj[1] >> 9) & 7);
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,OAMInfo,The following statement contains a magic number: oam.obj1.flipX = (byte)((obj[1] >> 12) & 1);
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,OAMInfo,The following statement contains a magic number: oam.obj1.flipY = (byte)((obj[1] >> 13) & 1);
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,OAMInfo,The following statement contains a magic number: oam.obj1.size = (byte)((obj[1] >> 14) & 3);
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,OAMInfo,The following statement contains a magic number: oam.obj1.size = (byte)((obj[1] >> 14) & 3);
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,OAMInfo,The following statement contains a magic number: oam.obj2.tileOffset = (uint)(obj[2] & 0x03FF);
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,OAMInfo,The following statement contains a magic number: oam.obj2.priority = (byte)((obj[2] >> 10) & 3);
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,OAMInfo,The following statement contains a magic number: oam.obj2.priority = (byte)((obj[2] >> 10) & 3);
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,OAMInfo,The following statement contains a magic number: oam.obj2.priority = (byte)((obj[2] >> 10) & 3);
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,OAMInfo,The following statement contains a magic number: oam.obj2.index_palette = (byte)((obj[2] >> 12) & 0xF);
Magic Number,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,OAMInfo,The following statement contains a magic number: oam.obj2.index_palette = (byte)((obj[2] >> 12) & 0xF);
Magic Number,Ekona.Images,ImageBase,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageBase.cs,Get_Image,The following statement contains a magic number: tilePal = Actions.LinealToHorizontal(tilePal' width' height' 8' tile_size);
Magic Number,Ekona.Images,ImageBase,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageBase.cs,Set_Tiles,The following statement contains a magic number: bpp = 8;
Magic Number,Ekona.Images,ImageBase,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageBase.cs,Set_Tiles,The following statement contains a magic number: bpp = 4;
Magic Number,Ekona.Images,ImageBase,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageBase.cs,Set_Tiles,The following statement contains a magic number: bpp = 8;
Magic Number,Ekona.Images,ImageBase,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageBase.cs,Set_Tiles,The following statement contains a magic number: bpp = 4;
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,Update_Info,The following statement contains a magic number: switch (image.FormatColor)              {                  case ColorFormat.A3I5: comboDepth.SelectedIndex = 4; break;                  case ColorFormat.A5I3: comboDepth.SelectedIndex = 5; break;                  case ColorFormat.colors4: comboDepth.SelectedIndex = 6; break;                  case ColorFormat.colors16: comboDepth.SelectedIndex = 0; break;                  case ColorFormat.colors256: comboDepth.SelectedIndex = 1; break;                  case ColorFormat.direct: comboDepth.SelectedIndex = 3; break;                  case ColorFormat.colors2: comboDepth.SelectedIndex = 2; break;              }
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,Update_Info,The following statement contains a magic number: switch (image.FormatColor)              {                  case ColorFormat.A3I5: comboDepth.SelectedIndex = 4; break;                  case ColorFormat.A5I3: comboDepth.SelectedIndex = 5; break;                  case ColorFormat.colors4: comboDepth.SelectedIndex = 6; break;                  case ColorFormat.colors16: comboDepth.SelectedIndex = 0; break;                  case ColorFormat.colors256: comboDepth.SelectedIndex = 1; break;                  case ColorFormat.direct: comboDepth.SelectedIndex = 3; break;                  case ColorFormat.colors2: comboDepth.SelectedIndex = 2; break;              }
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,Update_Info,The following statement contains a magic number: switch (image.FormatColor)              {                  case ColorFormat.A3I5: comboDepth.SelectedIndex = 4; break;                  case ColorFormat.A5I3: comboDepth.SelectedIndex = 5; break;                  case ColorFormat.colors4: comboDepth.SelectedIndex = 6; break;                  case ColorFormat.colors16: comboDepth.SelectedIndex = 0; break;                  case ColorFormat.colors256: comboDepth.SelectedIndex = 1; break;                  case ColorFormat.direct: comboDepth.SelectedIndex = 3; break;                  case ColorFormat.colors2: comboDepth.SelectedIndex = 2; break;              }
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,Update_Info,The following statement contains a magic number: switch (image.FormatColor)              {                  case ColorFormat.A3I5: comboDepth.SelectedIndex = 4; break;                  case ColorFormat.A5I3: comboDepth.SelectedIndex = 5; break;                  case ColorFormat.colors4: comboDepth.SelectedIndex = 6; break;                  case ColorFormat.colors16: comboDepth.SelectedIndex = 0; break;                  case ColorFormat.colors256: comboDepth.SelectedIndex = 1; break;                  case ColorFormat.direct: comboDepth.SelectedIndex = 3; break;                  case ColorFormat.colors2: comboDepth.SelectedIndex = 2; break;              }
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,Update_Info,The following statement contains a magic number: switch (image.FormatColor)              {                  case ColorFormat.A3I5: comboDepth.SelectedIndex = 4; break;                  case ColorFormat.A5I3: comboDepth.SelectedIndex = 5; break;                  case ColorFormat.colors4: comboDepth.SelectedIndex = 6; break;                  case ColorFormat.colors16: comboDepth.SelectedIndex = 0; break;                  case ColorFormat.colors256: comboDepth.SelectedIndex = 1; break;                  case ColorFormat.direct: comboDepth.SelectedIndex = 3; break;                  case ColorFormat.colors2: comboDepth.SelectedIndex = 2; break;              }
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,Update_Image,The following statement contains a magic number: bitmap.Width == 512
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,comboDepth_SelectedIndexChanged,The following statement contains a magic number: switch (comboDepth.SelectedIndex)              {                  case 0: image.FormatColor = ColorFormat.colors16; break;                  case 1: image.FormatColor = ColorFormat.colors256; break;                  case 2: image.FormatColor = ColorFormat.colors2; break;                  case 3: image.FormatColor = ColorFormat.direct; break;                  case 4: image.FormatColor = ColorFormat.A3I5; break;                  case 5: image.FormatColor = ColorFormat.A5I3; break;                  case 6: image.FormatColor = ColorFormat.colors4; break;                  case 7: image.FormatColor = ColorFormat.A4I4; break;                  case 8: image.FormatColor = ColorFormat.BGRA32; break;                  case 9: image.FormatColor = ColorFormat.ABGR32; break;              }
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,comboDepth_SelectedIndexChanged,The following statement contains a magic number: switch (comboDepth.SelectedIndex)              {                  case 0: image.FormatColor = ColorFormat.colors16; break;                  case 1: image.FormatColor = ColorFormat.colors256; break;                  case 2: image.FormatColor = ColorFormat.colors2; break;                  case 3: image.FormatColor = ColorFormat.direct; break;                  case 4: image.FormatColor = ColorFormat.A3I5; break;                  case 5: image.FormatColor = ColorFormat.A5I3; break;                  case 6: image.FormatColor = ColorFormat.colors4; break;                  case 7: image.FormatColor = ColorFormat.A4I4; break;                  case 8: image.FormatColor = ColorFormat.BGRA32; break;                  case 9: image.FormatColor = ColorFormat.ABGR32; break;              }
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,comboDepth_SelectedIndexChanged,The following statement contains a magic number: switch (comboDepth.SelectedIndex)              {                  case 0: image.FormatColor = ColorFormat.colors16; break;                  case 1: image.FormatColor = ColorFormat.colors256; break;                  case 2: image.FormatColor = ColorFormat.colors2; break;                  case 3: image.FormatColor = ColorFormat.direct; break;                  case 4: image.FormatColor = ColorFormat.A3I5; break;                  case 5: image.FormatColor = ColorFormat.A5I3; break;                  case 6: image.FormatColor = ColorFormat.colors4; break;                  case 7: image.FormatColor = ColorFormat.A4I4; break;                  case 8: image.FormatColor = ColorFormat.BGRA32; break;                  case 9: image.FormatColor = ColorFormat.ABGR32; break;              }
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,comboDepth_SelectedIndexChanged,The following statement contains a magic number: switch (comboDepth.SelectedIndex)              {                  case 0: image.FormatColor = ColorFormat.colors16; break;                  case 1: image.FormatColor = ColorFormat.colors256; break;                  case 2: image.FormatColor = ColorFormat.colors2; break;                  case 3: image.FormatColor = ColorFormat.direct; break;                  case 4: image.FormatColor = ColorFormat.A3I5; break;                  case 5: image.FormatColor = ColorFormat.A5I3; break;                  case 6: image.FormatColor = ColorFormat.colors4; break;                  case 7: image.FormatColor = ColorFormat.A4I4; break;                  case 8: image.FormatColor = ColorFormat.BGRA32; break;                  case 9: image.FormatColor = ColorFormat.ABGR32; break;              }
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,comboDepth_SelectedIndexChanged,The following statement contains a magic number: switch (comboDepth.SelectedIndex)              {                  case 0: image.FormatColor = ColorFormat.colors16; break;                  case 1: image.FormatColor = ColorFormat.colors256; break;                  case 2: image.FormatColor = ColorFormat.colors2; break;                  case 3: image.FormatColor = ColorFormat.direct; break;                  case 4: image.FormatColor = ColorFormat.A3I5; break;                  case 5: image.FormatColor = ColorFormat.A5I3; break;                  case 6: image.FormatColor = ColorFormat.colors4; break;                  case 7: image.FormatColor = ColorFormat.A4I4; break;                  case 8: image.FormatColor = ColorFormat.BGRA32; break;                  case 9: image.FormatColor = ColorFormat.ABGR32; break;              }
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,comboDepth_SelectedIndexChanged,The following statement contains a magic number: switch (comboDepth.SelectedIndex)              {                  case 0: image.FormatColor = ColorFormat.colors16; break;                  case 1: image.FormatColor = ColorFormat.colors256; break;                  case 2: image.FormatColor = ColorFormat.colors2; break;                  case 3: image.FormatColor = ColorFormat.direct; break;                  case 4: image.FormatColor = ColorFormat.A3I5; break;                  case 5: image.FormatColor = ColorFormat.A5I3; break;                  case 6: image.FormatColor = ColorFormat.colors4; break;                  case 7: image.FormatColor = ColorFormat.A4I4; break;                  case 8: image.FormatColor = ColorFormat.BGRA32; break;                  case 9: image.FormatColor = ColorFormat.ABGR32; break;              }
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,comboDepth_SelectedIndexChanged,The following statement contains a magic number: switch (comboDepth.SelectedIndex)              {                  case 0: image.FormatColor = ColorFormat.colors16; break;                  case 1: image.FormatColor = ColorFormat.colors256; break;                  case 2: image.FormatColor = ColorFormat.colors2; break;                  case 3: image.FormatColor = ColorFormat.direct; break;                  case 4: image.FormatColor = ColorFormat.A3I5; break;                  case 5: image.FormatColor = ColorFormat.A5I3; break;                  case 6: image.FormatColor = ColorFormat.colors4; break;                  case 7: image.FormatColor = ColorFormat.A4I4; break;                  case 8: image.FormatColor = ColorFormat.BGRA32; break;                  case 9: image.FormatColor = ColorFormat.ABGR32; break;              }
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,comboDepth_SelectedIndexChanged,The following statement contains a magic number: switch (comboDepth.SelectedIndex)              {                  case 0: image.FormatColor = ColorFormat.colors16; break;                  case 1: image.FormatColor = ColorFormat.colors256; break;                  case 2: image.FormatColor = ColorFormat.colors2; break;                  case 3: image.FormatColor = ColorFormat.direct; break;                  case 4: image.FormatColor = ColorFormat.A3I5; break;                  case 5: image.FormatColor = ColorFormat.A5I3; break;                  case 6: image.FormatColor = ColorFormat.colors4; break;                  case 7: image.FormatColor = ColorFormat.A4I4; break;                  case 8: image.FormatColor = ColorFormat.BGRA32; break;                  case 9: image.FormatColor = ColorFormat.ABGR32; break;              }
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,btnSetTrans_Click,The following statement contains a magic number: (palette.Depth == ColorFormat.colors256 && palette.NumberOfColors == 256) ||                  (palette.Depth == ColorFormat.colors16 && palette.NumberOfColors == 16)
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,btnSetTrans_Click,The following statement contains a magic number: (palette.Depth == ColorFormat.colors256 && palette.NumberOfColors == 256) ||                  (palette.Depth == ColorFormat.colors16 && palette.NumberOfColors == 16)
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,btnSetTrans_Click,The following statement contains a magic number: pal[index] = Color.FromArgb(248' 0' 248);
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,btnSetTrans_Click,The following statement contains a magic number: pal[index] = Color.FromArgb(248' 0' 248);
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,btnExport_Click,The following statement contains a magic number: o.FilterIndex == 2
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,btnImport_Click,The following statement contains a magic number: tiles = Actions.HorizontalToLineal(tiles' bitmap.Width' bitmap.Height' image.BPP' 8);
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,btnImport_Click,The following statement contains a magic number: image.Set_Tiles(tiles' bitmap.Width' bitmap.Height' image.FormatColor' image.FormTile' image.CanEdit' 8);
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,pic_DoubleClick,The following statement contains a magic number: ven.MaximumSize = new Size(1024' 700);
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,pic_DoubleClick,The following statement contains a magic number: ven.MaximumSize = new Size(1024' 700);
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.numericWidth.Location = new System.Drawing.Point(48' 76);
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.numericWidth.Location = new System.Drawing.Point(48' 76);
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.numericWidth.Maximum = new decimal(new int[] {              65536'              0'              0'              0});
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.numericWidth.Size = new System.Drawing.Size(71' 20);
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.numericWidth.Size = new System.Drawing.Size(71' 20);
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(6' 78);
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(6' 78);
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(26' 13);
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(26' 13);
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.label1.TabIndex = 2;
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point(128' 78);
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point(128' 78);
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size(26' 13);
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size(26' 13);
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.label2.TabIndex = 3;
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.numericHeight.Location = new System.Drawing.Point(165' 76);
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.numericHeight.Location = new System.Drawing.Point(165' 76);
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.numericHeight.Maximum = new decimal(new int[] {              65536'              0'              0'              0});
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.numericHeight.Size = new System.Drawing.Size(71' 20);
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.numericHeight.Size = new System.Drawing.Size(71' 20);
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.numericHeight.TabIndex = 4;
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.groupProp.Location = new System.Drawing.Point(0' 306);
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.groupProp.Size = new System.Drawing.Size(252' 206);
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.groupProp.Size = new System.Drawing.Size(252' 206);
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.groupProp.TabIndex = 5;
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.label10.Location = new System.Drawing.Point(128' 143);
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.label10.Location = new System.Drawing.Point(128' 143);
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.label10.Size = new System.Drawing.Size(26' 13);
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.label10.Size = new System.Drawing.Size(26' 13);
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.label10.TabIndex = 30;
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.numTileSize.Location = new System.Drawing.Point(199' 141);
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.numTileSize.Location = new System.Drawing.Point(199' 141);
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.numTileSize.Maximum = new decimal(new int[] {              1024'              0'              0'              0});
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.numTileSize.Size = new System.Drawing.Size(37' 20);
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.numTileSize.Size = new System.Drawing.Size(37' 20);
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.numTileSize.TabIndex = 29;
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.numTileSize.Value = new decimal(new int[] {              8'              0'              0'              0});
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.label9.Location = new System.Drawing.Point(128' 174);
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.label9.Location = new System.Drawing.Point(128' 174);
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.label9.Size = new System.Drawing.Size(26' 13);
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.label9.Size = new System.Drawing.Size(26' 13);
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.label9.TabIndex = 26;
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.numPal.Location = new System.Drawing.Point(199' 172);
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.numPal.Location = new System.Drawing.Point(199' 172);
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.numPal.Size = new System.Drawing.Size(37' 20);
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.numPal.Size = new System.Drawing.Size(37' 20);
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.numPal.TabIndex = 25;
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.checkHex.Location = new System.Drawing.Point(32' 46);
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.checkHex.Location = new System.Drawing.Point(32' 46);
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.checkHex.Size = new System.Drawing.Size(45' 17);
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.checkHex.Size = new System.Drawing.Size(45' 17);
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.checkHex.TabIndex = 24;
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.checkTransparency.Location = new System.Drawing.Point(9' 175);
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.checkTransparency.Location = new System.Drawing.Point(9' 175);
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.checkTransparency.Size = new System.Drawing.Size(46' 17);
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.checkTransparency.Size = new System.Drawing.Size(46' 17);
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.checkTransparency.TabIndex = 19;
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.label6.Location = new System.Drawing.Point(6' 117);
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.label6.Location = new System.Drawing.Point(6' 117);
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.label6.Size = new System.Drawing.Size(26' 13);
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.label6.Size = new System.Drawing.Size(26' 13);
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.label6.TabIndex = 11;
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.comboBox1.Location = new System.Drawing.Point(116' 114);
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.comboBox1.Location = new System.Drawing.Point(116' 114);
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.comboBox1.Size = new System.Drawing.Size(119' 21);
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.comboBox1.Size = new System.Drawing.Size(119' 21);
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.comboBox1.TabIndex = 10;
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.label4.Location = new System.Drawing.Point(128' 22);
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.label4.Location = new System.Drawing.Point(128' 22);
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.label4.Size = new System.Drawing.Size(31' 13);
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.label4.Size = new System.Drawing.Size(31' 13);
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.label4.TabIndex = 9;
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.comboDepth.Location = new System.Drawing.Point(165' 19);
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.comboDepth.Location = new System.Drawing.Point(165' 19);
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.comboDepth.Size = new System.Drawing.Size(83' 21);
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.comboDepth.Size = new System.Drawing.Size(83' 21);
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.comboDepth.TabIndex = 8;
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.label3.Location = new System.Drawing.Point(6' 22);
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.label3.Location = new System.Drawing.Point(6' 22);
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.label3.Size = new System.Drawing.Size(26' 13);
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.label3.Size = new System.Drawing.Size(26' 13);
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.label3.TabIndex = 7;
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.numericStart.Location = new System.Drawing.Point(48' 20);
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.numericStart.Location = new System.Drawing.Point(48' 20);
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.numericStart.Maximum = new decimal(new int[] {              65535'              0'              0'              0});
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.numericStart.Size = new System.Drawing.Size(71' 20);
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.numericStart.Size = new System.Drawing.Size(71' 20);
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.numericStart.TabIndex = 6;
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.checkMapCmp.Location = new System.Drawing.Point(258' 444);
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.checkMapCmp.Location = new System.Drawing.Point(258' 444);
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.checkMapCmp.Size = new System.Drawing.Size(45' 17);
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.checkMapCmp.Size = new System.Drawing.Size(45' 17);
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.checkMapCmp.TabIndex = 48;
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.groupBox2.Location = new System.Drawing.Point(258' 352);
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.groupBox2.Location = new System.Drawing.Point(258' 352);
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.groupBox2.Size = new System.Drawing.Size(254' 86);
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.groupBox2.Size = new System.Drawing.Size(254' 86);
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.groupBox2.TabIndex = 47;
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.radioSwapPal.Location = new System.Drawing.Point(6' 19);
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.radioSwapPal.Location = new System.Drawing.Point(6' 19);
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.radioSwapPal.Size = new System.Drawing.Size(44' 17);
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.radioSwapPal.Size = new System.Drawing.Size(44' 17);
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.radioSwapPal.TabIndex = 41;
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.radioOriginalPal.Location = new System.Drawing.Point(6' 42);
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.radioOriginalPal.Location = new System.Drawing.Point(6' 42);
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.radioOriginalPal.Size = new System.Drawing.Size(45' 17);
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.radioOriginalPal.Size = new System.Drawing.Size(45' 17);
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.radioOriginalPal.TabIndex = 39;
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.radioReplacePal.Location = new System.Drawing.Point(6' 65);
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.radioReplacePal.Location = new System.Drawing.Point(6' 65);
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.radioReplacePal.Size = new System.Drawing.Size(44' 17);
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.radioReplacePal.Size = new System.Drawing.Size(44' 17);
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.radioReplacePal.TabIndex = 40;
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.label7.Location = new System.Drawing.Point(174' 13);
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.label7.Location = new System.Drawing.Point(174' 13);
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.label7.Size = new System.Drawing.Size(26' 13);
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.label7.Size = new System.Drawing.Size(26' 13);
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.label7.TabIndex = 43;
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.numThreshold.DecimalPlaces = 4;
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.numThreshold.Increment = new decimal(new int[] {              5'              0'              0'              65536});
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.numThreshold.Increment = new decimal(new int[] {              5'              0'              0'              65536});
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.numThreshold.Location = new System.Drawing.Point(177' 29);
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.numThreshold.Location = new System.Drawing.Point(177' 29);
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.numThreshold.Maximum = new decimal(new int[] {              442'              0'              0'              0});
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.numThreshold.Size = new System.Drawing.Size(77' 20);
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.numThreshold.Size = new System.Drawing.Size(77' 20);
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.numThreshold.TabIndex = 42;
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.btnSetTrans.Location = new System.Drawing.Point(258' 306);
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.btnSetTrans.Location = new System.Drawing.Point(258' 306);
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.btnSetTrans.Size = new System.Drawing.Size(80' 40);
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.btnSetTrans.Size = new System.Drawing.Size(80' 40);
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.btnSetTrans.TabIndex = 28;
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.btnImport.Location = new System.Drawing.Point(429' 469);
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.btnImport.Location = new System.Drawing.Point(429' 469);
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.btnImport.Size = new System.Drawing.Size(80' 40);
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.btnImport.Size = new System.Drawing.Size(80' 40);
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.btnImport.TabIndex = 23;
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.btnBgdRem.Location = new System.Drawing.Point(430' 306);
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.btnBgdRem.Location = new System.Drawing.Point(430' 306);
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.btnBgdRem.Size = new System.Drawing.Size(80' 40);
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.btnBgdRem.Size = new System.Drawing.Size(80' 40);
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.btnBgdRem.TabIndex = 22;
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.btnBgd.Location = new System.Drawing.Point(344' 306);
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.btnBgd.Location = new System.Drawing.Point(344' 306);
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.btnBgd.Size = new System.Drawing.Size(80' 40);
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.btnBgd.Size = new System.Drawing.Size(80' 40);
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.btnBgd.TabIndex = 20;
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.btnExport.Location = new System.Drawing.Point(332' 469);
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.btnExport.Location = new System.Drawing.Point(332' 469);
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.btnExport.Size = new System.Drawing.Size(80' 40);
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.btnExport.Size = new System.Drawing.Size(80' 40);
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.btnExport.TabIndex = 6;
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.label5.Location = new System.Drawing.Point(6' 290);
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.label5.Location = new System.Drawing.Point(6' 290);
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.label5.Size = new System.Drawing.Size(26' 13);
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.label5.Size = new System.Drawing.Size(26' 13);
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.label5.TabIndex = 6;
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.pic.Size = new System.Drawing.Size(100' 100);
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.pic.Size = new System.Drawing.Size(100' 100);
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.panel1.Size = new System.Drawing.Size(512' 287);
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.panel1.Size = new System.Drawing.Size(512' 287);
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.panel1.TabIndex = 7;
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(512' 512);
Magic Number,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(512' 512);
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,Clamp,The following statement contains a magic number: a = 255;
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,Clamp,The following statement contains a magic number: a > 255
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,Error,The following statement contains a magic number: Vector3[] dxtFourPointsTemp = new Vector3[4];
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,Error,The following statement contains a magic number: dxtFourPointsTemp[2] = (5 * dxtFourPointsTemp[0] + 3* dxtFourPointsTemp[1]) / 8;
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,Error,The following statement contains a magic number: dxtFourPointsTemp[2] = (5 * dxtFourPointsTemp[0] + 3* dxtFourPointsTemp[1]) / 8;
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,Error,The following statement contains a magic number: dxtFourPointsTemp[2] = (5 * dxtFourPointsTemp[0] + 3* dxtFourPointsTemp[1]) / 8;
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,Error,The following statement contains a magic number: dxtFourPointsTemp[2] = (5 * dxtFourPointsTemp[0] + 3* dxtFourPointsTemp[1]) / 8;
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,Error,The following statement contains a magic number: dxtFourPointsTemp[3] = (5 * dxtFourPointsTemp[1] + 3* dxtFourPointsTemp[0]) / 8;
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,Error,The following statement contains a magic number: dxtFourPointsTemp[3] = (5 * dxtFourPointsTemp[1] + 3* dxtFourPointsTemp[0]) / 8;
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,Error,The following statement contains a magic number: dxtFourPointsTemp[3] = (5 * dxtFourPointsTemp[1] + 3* dxtFourPointsTemp[0]) / 8;
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,Error,The following statement contains a magic number: dxtFourPointsTemp[3] = (5 * dxtFourPointsTemp[1] + 3* dxtFourPointsTemp[0]) / 8;
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,Error,The following statement contains a magic number: double dist2 = ColorLengthSquared(inputPoints[i] - dxtFourPointsTemp[2]);
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,Error,The following statement contains a magic number: double dist3 = ColorLengthSquared(inputPoints[i] - dxtFourPointsTemp[3]);
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,VectorToColor,The following statement contains a magic number: return Color.FromArgb(255'                          (byte)Clamp(v.X /* 255 / 31*/)'                          (byte)Clamp(v.Y /* 255 / 63*/)'                          (byte)Clamp(v.Z /* 255 / 31*/));
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,CalcSecondBoundColor,The following statement contains a magic number: int r = 2 * c.R - boundColor.R;
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,CalcSecondBoundColor,The following statement contains a magic number: int g = 2 * c.G - boundColor.G;
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,CalcSecondBoundColor,The following statement contains a magic number: int b = 2 * c.B - boundColor.B;
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,CalcSecondBoundColor,The following statement contains a magic number: r < 0 || r > 255 || g < 0 || g > 255 || b < 0 || b > 255
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,CalcSecondBoundColor,The following statement contains a magic number: r < 0 || r > 255 || g < 0 || g > 255 || b < 0 || b > 255
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,CalcSecondBoundColor,The following statement contains a magic number: r < 0 || r > 255 || g < 0 || g > 255 || b < 0 || b > 255
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,CalcSecondBoundColor,The following statement contains a magic number: return Color.FromArgb(255' r' g' b);
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,IsCompressedBlock,The following statement contains a magic number: inputPoints[i] = new Vector3(uniqueColors[i].R / 8' uniqueColors[i].G / 8' uniqueColors[i].B / 8);
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,IsCompressedBlock,The following statement contains a magic number: inputPoints[i] = new Vector3(uniqueColors[i].R / 8' uniqueColors[i].G / 8' uniqueColors[i].B / 8);
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,IsCompressedBlock,The following statement contains a magic number: inputPoints[i] = new Vector3(uniqueColors[i].R / 8' uniqueColors[i].G / 8' uniqueColors[i].B / 8);
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,IsCompressedBlock,The following statement contains a magic number: dxtBoundColors = new Color[2];
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,OptimizeEndPoints3,The following statement contains a magic number: uint bits = indices >> (2 * i);
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,OptimizeEndPoints3,The following statement contains a magic number: beta = 0.5f;
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,OptimizeEndPoints3,The following statement contains a magic number: (bits & 2) > 0
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,OptimizeEndPoints3,The following statement contains a magic number: i < 16
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,OptimizeEndPoints3,The following statement contains a magic number: a = Vector3.Clamp(a' 0' 255);
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,OptimizeEndPoints3,The following statement contains a magic number: b = Vector3.Clamp(b' 0' 255);
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,OptimizeEndPoints4,The following statement contains a magic number: uint bits = indices >> (2 * i);
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,OptimizeEndPoints4,The following statement contains a magic number: beta = (1 + beta) / 3.0f;
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,OptimizeEndPoints4,The following statement contains a magic number: (bits & 2) > 0
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,OptimizeEndPoints4,The following statement contains a magic number: i < 16
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,OptimizeEndPoints4,The following statement contains a magic number: a = Vector3.Clamp(a' 0' 255);
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,OptimizeEndPoints4,The following statement contains a magic number: b = Vector3.Clamp(b' 0' 255);
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,ComputeIndices3,The following statement contains a magic number: Vector3[] palette = new Vector3[4];
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,ComputeIndices3,The following statement contains a magic number: palette[2] = (palette[0] + palette[1]) * 0.5f;
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,ComputeIndices3,The following statement contains a magic number: palette[2] = (palette[0] + palette[1]) * 0.5f;
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,ComputeIndices3,The following statement contains a magic number: double d2 = ColorDistance(palette[2]' block[i]);
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,ComputeIndices3,The following statement contains a magic number: indices |= index << (2 * i);
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,ComputeIndices3,The following statement contains a magic number: i < 16
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,ComputeIndices4,The following statement contains a magic number: Vector3[] palette = new Vector3[4];
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,ComputeIndices4,The following statement contains a magic number: palette[2] = Vector3.Lerp(palette[0]' palette[1]' 3.0f / 8.0f);
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,ComputeIndices4,The following statement contains a magic number: palette[2] = Vector3.Lerp(palette[0]' palette[1]' 3.0f / 8.0f);
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,ComputeIndices4,The following statement contains a magic number: palette[2] = Vector3.Lerp(palette[0]' palette[1]' 3.0f / 8.0f);
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,ComputeIndices4,The following statement contains a magic number: palette[3] = Vector3.Lerp(palette[0]' palette[1]' 5.0f / 8.0f);
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,ComputeIndices4,The following statement contains a magic number: palette[3] = Vector3.Lerp(palette[0]' palette[1]' 5.0f / 8.0f);
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,ComputeIndices4,The following statement contains a magic number: palette[3] = Vector3.Lerp(palette[0]' palette[1]' 5.0f / 8.0f);
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,ComputeIndices4,The following statement contains a magic number: double d2 = ColorDistance(palette[2]' block[i]);
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,ComputeIndices4,The following statement contains a magic number: double d3 = ColorDistance(palette[3]' block[i]);
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,ComputeIndices4,The following statement contains a magic number: indices |= (x2 | ((x0 | x1) << 1)) << (2 * i);
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,ComputeIndices4,The following statement contains a magic number: i < 16
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,RoundAndExpand,The following statement contains a magic number: uint r = (uint)Math.Floor(NvMath.Clamp(v.X * (31.0f / 255.0f)' 0.0f' 31.0f));
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,RoundAndExpand,The following statement contains a magic number: uint r = (uint)Math.Floor(NvMath.Clamp(v.X * (31.0f / 255.0f)' 0.0f' 31.0f));
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,RoundAndExpand,The following statement contains a magic number: uint r = (uint)Math.Floor(NvMath.Clamp(v.X * (31.0f / 255.0f)' 0.0f' 31.0f));
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,RoundAndExpand,The following statement contains a magic number: uint g = (uint)Math.Floor(NvMath.Clamp(v.Y * (31.0f / 255.0f)' 0.0f' 31.0f));
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,RoundAndExpand,The following statement contains a magic number: uint g = (uint)Math.Floor(NvMath.Clamp(v.Y * (31.0f / 255.0f)' 0.0f' 31.0f));
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,RoundAndExpand,The following statement contains a magic number: uint g = (uint)Math.Floor(NvMath.Clamp(v.Y * (31.0f / 255.0f)' 0.0f' 31.0f));
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,RoundAndExpand,The following statement contains a magic number: uint b = (uint)Math.Floor(NvMath.Clamp(v.Z * (31.0f / 255.0f)' 0.0f' 31.0f));
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,RoundAndExpand,The following statement contains a magic number: uint b = (uint)Math.Floor(NvMath.Clamp(v.Z * (31.0f / 255.0f)' 0.0f' 31.0f));
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,RoundAndExpand,The following statement contains a magic number: uint b = (uint)Math.Floor(NvMath.Clamp(v.Z * (31.0f / 255.0f)' 0.0f' 31.0f));
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,RoundAndExpand,The following statement contains a magic number: float r0 = (float)(((r + 0) << 3) | ((r + 0) >> 2));
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,RoundAndExpand,The following statement contains a magic number: float r0 = (float)(((r + 0) << 3) | ((r + 0) >> 2));
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,RoundAndExpand,The following statement contains a magic number: float r1 = (float)(((r + 1) << 3) | ((r + 1) >> 2));
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,RoundAndExpand,The following statement contains a magic number: float r1 = (float)(((r + 1) << 3) | ((r + 1) >> 2));
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,RoundAndExpand,The following statement contains a magic number: r = Math.Min(r + 1' 31U);
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,RoundAndExpand,The following statement contains a magic number: float g0 = (float)(((g + 0) << 3) | ((g + 0) >> 2));
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,RoundAndExpand,The following statement contains a magic number: float g0 = (float)(((g + 0) << 3) | ((g + 0) >> 2));
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,RoundAndExpand,The following statement contains a magic number: float g1 = (float)(((g + 1) << 3) | ((g + 1) >> 2));
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,RoundAndExpand,The following statement contains a magic number: float g1 = (float)(((g + 1) << 3) | ((g + 1) >> 2));
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,RoundAndExpand,The following statement contains a magic number: g = Math.Min(g + 1' 31U);
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,RoundAndExpand,The following statement contains a magic number: float b0 = (float)(((b + 0) << 3) | ((b + 0) >> 2));
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,RoundAndExpand,The following statement contains a magic number: float b0 = (float)(((b + 0) << 3) | ((b + 0) >> 2));
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,RoundAndExpand,The following statement contains a magic number: float b1 = (float)(((b + 1) << 3) | ((b + 1) >> 2));
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,RoundAndExpand,The following statement contains a magic number: float b1 = (float)(((b + 1) << 3) | ((b + 1) >> 2));
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,RoundAndExpand,The following statement contains a magic number: b = Math.Min(b + 1' 31U);
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,RoundAndExpand,The following statement contains a magic number: ushort w = (ushort)((b << 10) | (g << 5) | r);
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,RoundAndExpand,The following statement contains a magic number: ushort w = (ushort)((b << 10) | (g << 5) | r);
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,RoundAndExpand,The following statement contains a magic number: r = (r << 3) | (r >> 2);
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,RoundAndExpand,The following statement contains a magic number: r = (r << 3) | (r >> 2);
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,RoundAndExpand,The following statement contains a magic number: g = (g << 3) | (g >> 2);
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,RoundAndExpand,The following statement contains a magic number: g = (g << 3) | (g >> 2);
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,RoundAndExpand,The following statement contains a magic number: b = (b << 3) | (b >> 2);
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,RoundAndExpand,The following statement contains a magic number: b = (b << 3) | (b >> 2);
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,CompressBlock,The following statement contains a magic number: dubled |= dist < 1e-6;
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,CompressBlock,The following statement contains a magic number: dubledWithMask |= dist < 1e-6;
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,CompressBlock,The following statement contains a magic number: lowIds[2] = j;
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,CompressBlock,The following statement contains a magic number: highIds[2] = i;
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,CompressBlock,The following statement contains a magic number: block[j].A >= 8
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,CompressBlock,The following statement contains a magic number: lowIds[2] = i;
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,CompressBlock,The following statement contains a magic number: block[i].A >= 8
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,CompressBlock,The following statement contains a magic number: count <= 4
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,CompressBlock,The following statement contains a magic number: Vector3[] dxtBoundPoints = new Vector3[2];
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,CompressBlock,The following statement contains a magic number: compressColors = new Color[4];
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,CompressBlock,The following statement contains a magic number: i < 2
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,CompressBlock,The following statement contains a magic number: compressColors[2] = SumColors(compressColors[0]' compressColors[1]' 1' 1);
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,CompressBlock,The following statement contains a magic number: compressColors[3] = Color.FromArgb(0' 0' 0' 0);
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,CompressBlock,The following statement contains a magic number: double dist2 = ColorSquaredDistance(block[i]' compressColors[2]);
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,CompressBlock,The following statement contains a magic number: double dist3 = ColorSquaredDistance(block[i]' compressColors[3]);
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,CompressBlock,The following statement contains a magic number: block[i].A >= 8
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,CompressBlock,The following statement contains a magic number: texels |= (uint)(ci << (2 * i));
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,CompressBlock,The following statement contains a magic number: i < 16
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,CompressBlock,The following statement contains a magic number: return Math.Sqrt(bestError / 16);
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,Compress,The following statement contains a magic number: uint wt = width / 4;
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,Compress,The following statement contains a magic number: uint texelsCount = width * height / 16;
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,Compress,The following statement contains a magic number: byte[] result = new byte[texelsCount * 6];
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,Compress,The following statement contains a magic number: Color[] block = new Color[16];
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,Compress,The following statement contains a magic number: int pixelBlockIndex = i * 4 + j;
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,Compress,The following statement contains a magic number: block[pixelBlockIndex] = Color.FromArgb(                                 bgra[4 * pixelIndex + 3]'                                  bgra[4 * pixelIndex + 2]'                                  bgra[4 * pixelIndex + 1]'                                  bgra[4 * pixelIndex + 0]);
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,Compress,The following statement contains a magic number: block[pixelBlockIndex] = Color.FromArgb(                                 bgra[4 * pixelIndex + 3]'                                  bgra[4 * pixelIndex + 2]'                                  bgra[4 * pixelIndex + 1]'                                  bgra[4 * pixelIndex + 0]);
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,Compress,The following statement contains a magic number: block[pixelBlockIndex] = Color.FromArgb(                                 bgra[4 * pixelIndex + 3]'                                  bgra[4 * pixelIndex + 2]'                                  bgra[4 * pixelIndex + 1]'                                  bgra[4 * pixelIndex + 0]);
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,Compress,The following statement contains a magic number: block[pixelBlockIndex] = Color.FromArgb(                                 bgra[4 * pixelIndex + 3]'                                  bgra[4 * pixelIndex + 2]'                                  bgra[4 * pixelIndex + 1]'                                  bgra[4 * pixelIndex + 0]);
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,Compress,The following statement contains a magic number: block[pixelBlockIndex] = Color.FromArgb(                                 bgra[4 * pixelIndex + 3]'                                  bgra[4 * pixelIndex + 2]'                                  bgra[4 * pixelIndex + 1]'                                  bgra[4 * pixelIndex + 0]);
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,Compress,The following statement contains a magic number: block[pixelBlockIndex] = Color.FromArgb(                                 bgra[4 * pixelIndex + 3]'                                  bgra[4 * pixelIndex + 2]'                                  bgra[4 * pixelIndex + 1]'                                  bgra[4 * pixelIndex + 0]);
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,Compress,The following statement contains a magic number: i < 4
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,Compress,The following statement contains a magic number: j < 4
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,Compress,The following statement contains a magic number: uint texelIndex = y / 4 * wt + x / 4;
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,Compress,The following statement contains a magic number: uint texelIndex = y / 4 * wt + x / 4;
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,Compress,The following statement contains a magic number: uint resIndex = texelIndex * 4;
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,Compress,The following statement contains a magic number: result[resIndex + 1] = (byte)((texels >> 8) & 0xFF);
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,Compress,The following statement contains a magic number: result[resIndex + 2] = (byte)((texels >> 16) & 0xFF);
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,Compress,The following statement contains a magic number: result[resIndex + 2] = (byte)((texels >> 16) & 0xFF);
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,Compress,The following statement contains a magic number: result[resIndex + 3] = (byte)((texels >> 24) & 0xFF);
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,Compress,The following statement contains a magic number: result[resIndex + 3] = (byte)((texels >> 24) & 0xFF);
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,Compress,The following statement contains a magic number: palTypes[texelIndex] = (c0 <= c1) ? (byte)1 : (byte)3;
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,Compress,The following statement contains a magic number: colorPairsOrQuarts[texelIndex] = (c0 <= c1) ? (uint)((c1 << 16) | c0) : (uint)((c0 << 16) | c1);
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,Compress,The following statement contains a magic number: colorPairsOrQuarts[texelIndex] = (c0 <= c1) ? (uint)((c1 << 16) | c0) : (uint)((c0 << 16) | c1);
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,Compress,The following statement contains a magic number: uint ci = (texels >> (2 * i)) & 0x3;
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,Compress,The following statement contains a magic number: ushort[] c = new ushort[4];
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,Compress,The following statement contains a magic number: colorPairsOrQuarts[texelIndex] = ((ulong)((c[3] << 16) | c[2]) << 32) | (ulong)((c[1] << 16) | c[0]);
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,Compress,The following statement contains a magic number: colorPairsOrQuarts[texelIndex] = ((ulong)((c[3] << 16) | c[2]) << 32) | (ulong)((c[1] << 16) | c[0]);
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,Compress,The following statement contains a magic number: colorPairsOrQuarts[texelIndex] = ((ulong)((c[3] << 16) | c[2]) << 32) | (ulong)((c[1] << 16) | c[0]);
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,Compress,The following statement contains a magic number: colorPairsOrQuarts[texelIndex] = ((ulong)((c[3] << 16) | c[2]) << 32) | (ulong)((c[1] << 16) | c[0]);
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,Compress,The following statement contains a magic number: colorPairsOrQuarts[texelIndex] = ((ulong)((c[3] << 16) | c[2]) << 32) | (ulong)((c[1] << 16) | c[0]);
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,Compress,The following statement contains a magic number: colorIndex = 2 * colorQuarts.IndexOf(colorPairsOrQuarts[texelIndex]);
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,Compress,The following statement contains a magic number: colorIndex = 2 * colorQuarts.Count;
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,Compress,The following statement contains a magic number: UInt32 pair2 = (uint)((colorQuarts[i] >> 32) & 0xFFFFFFFF);
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,Compress,The following statement contains a magic number: palTypes[i] % 2 != 0
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,Compress,The following statement contains a magic number: ushort palInfo = (ushort)((colorIndex & 0x3FFF) | (palTypes[i] << 14));
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,Compress,The following statement contains a magic number: uint resIndex = texelsCount * 4 + i * 2;
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,Compress,The following statement contains a magic number: uint resIndex = texelsCount * 4 + i * 2;
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,Compress,The following statement contains a magic number: result[resIndex + 1] = (byte)((palInfo >> 8) & 0xFF);
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,Compress,The following statement contains a magic number: palette = new byte[colorPairs.Count * 4];
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,Compress,The following statement contains a magic number: Array.Copy(colorsData' 0' palette' 4 * i' 4);
Magic Number,Ekona.Images,NitroTextureCompressor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\NitroTextureCompressor.cs,Compress,The following statement contains a magic number: Array.Copy(colorsData' 0' palette' 4 * i' 4);
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,Update_Image,The following statement contains a magic number: imgBox.Image = sprite.Get_Image(image' palette' comboBank.SelectedIndex' 512' 256'                  checkGrid.Checked' checkCellBorder.Checked' checkNumber.Checked' checkTransparency.Checked'                  checkImage.Checked' (checkSelectOAM.Checked ? checkListOAM.SelectedIndex : -1)'                   index);
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,Update_Image,The following statement contains a magic number: imgBox.Image = sprite.Get_Image(image' palette' comboBank.SelectedIndex' 512' 256'                  checkGrid.Checked' checkCellBorder.Checked' checkNumber.Checked' checkTransparency.Checked'                  checkImage.Checked' (checkSelectOAM.Checked ? checkListOAM.SelectedIndex : -1)'                   index);
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,btnShowAll_Click,The following statement contains a magic number: int xMax = 516 * 2;
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,btnShowAll_Click,The following statement contains a magic number: int xMax = 516 * 2;
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,btnShowAll_Click,The following statement contains a magic number: int y = 15;
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,btnShowAll_Click,The following statement contains a magic number: pic.Size = new Size(512' 256);
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,btnShowAll_Click,The following statement contains a magic number: pic.Size = new Size(512' 256);
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,btnShowAll_Click,The following statement contains a magic number: pic.Image = sprite.Get_Image(image' palette' i' 512' 256'                      checkGrid.Checked' checkCellBorder.Checked' checkNumber.Checked'                      checkTransparency.Checked' checkImage.Checked);
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,btnShowAll_Click,The following statement contains a magic number: pic.Image = sprite.Get_Image(image' palette' i' 512' 256'                      checkGrid.Checked' checkCellBorder.Checked' checkNumber.Checked'                      checkTransparency.Checked' checkImage.Checked);
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,btnShowAll_Click,The following statement contains a magic number: lbl.Location = new Point(x' y - 15);
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,btnShowAll_Click,The following statement contains a magic number: x += 516;
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,btnShowAll_Click,The following statement contains a magic number: y += 275;
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,btnShowAll_Click,The following statement contains a magic number: win.MaximumSize = new System.Drawing.Size(1050' 700);
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,btnShowAll_Click,The following statement contains a magic number: win.MaximumSize = new System.Drawing.Size(1050' 700);
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,Export_All,The following statement contains a magic number: Image img = sprite.Get_Image(image' palette' i' 512' 256' checkGrid.Checked' checkCellBorder.Checked'                      checkNumber.Checked' checkTransparency.Checked' checkImage.Checked);
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,Export_All,The following statement contains a magic number: Image img = sprite.Get_Image(image' palette' i' 512' 256' checkGrid.Checked' checkCellBorder.Checked'                      checkNumber.Checked' checkTransparency.Checked' checkImage.Checked);
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,Import_File,The following statement contains a magic number: Bitmap subImg = (Bitmap)bitmap.Clone(new Rectangle(                          oams[i].obj1.xOffset + 256' oams[i].obj0.yOffset + 128'                          oams[i].width' oams[i].height)'                          System.Drawing.Imaging.PixelFormat.DontCare);
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,Import_File,The following statement contains a magic number: Bitmap subImg = (Bitmap)bitmap.Clone(new Rectangle(                          oams[i].obj1.xOffset + 256' oams[i].obj0.yOffset + 128'                          oams[i].width' oams[i].height)'                          System.Drawing.Imaging.PixelFormat.DontCare);
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,Import_File,The following statement contains a magic number: cellImg = Actions.HorizontalToLineal(cellImg' oams[i].width' oams[i].height' image.BPP' 8);
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,Import_File,The following statement contains a magic number: int height = (imgData.Length * 8 / image.BPP) / image.Width;
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.imgBox.Size = new System.Drawing.Size(512' 256);
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.imgBox.Size = new System.Drawing.Size(512' 256);
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(2' 266);
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(2' 266);
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(26' 13);
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(26' 13);
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.label1.TabIndex = 2;
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.comboBank.Location = new System.Drawing.Point(72' 263);
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.comboBank.Location = new System.Drawing.Point(72' 263);
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.comboBank.Size = new System.Drawing.Size(183' 21);
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.comboBank.Size = new System.Drawing.Size(183' 21);
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.comboBank.TabIndex = 3;
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.btnShowAll.Location = new System.Drawing.Point(3' 290);
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.btnShowAll.Location = new System.Drawing.Point(3' 290);
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.btnShowAll.Size = new System.Drawing.Size(80' 40);
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.btnShowAll.Size = new System.Drawing.Size(80' 40);
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.btnShowAll.TabIndex = 4;
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.btnExport.Location = new System.Drawing.Point(261' 471);
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.btnExport.Location = new System.Drawing.Point(261' 471);
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.btnExport.Size = new System.Drawing.Size(80' 40);
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.btnExport.Size = new System.Drawing.Size(80' 40);
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.btnExport.TabIndex = 5;
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.checkGrid.Location = new System.Drawing.Point(6' 17);
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.checkGrid.Location = new System.Drawing.Point(6' 17);
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.checkGrid.Size = new System.Drawing.Size(46' 17);
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.checkGrid.Size = new System.Drawing.Size(46' 17);
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.checkGrid.TabIndex = 6;
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.checkNumber.Location = new System.Drawing.Point(147' 40);
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.checkNumber.Location = new System.Drawing.Point(147' 40);
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.checkNumber.Size = new System.Drawing.Size(45' 17);
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.checkNumber.Size = new System.Drawing.Size(45' 17);
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.checkNumber.TabIndex = 7;
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.checkCellBorder.Location = new System.Drawing.Point(6' 40);
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.checkCellBorder.Location = new System.Drawing.Point(6' 40);
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.checkCellBorder.Size = new System.Drawing.Size(47' 17);
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.checkCellBorder.Size = new System.Drawing.Size(47' 17);
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.checkCellBorder.TabIndex = 8;
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.checkTransparency.Location = new System.Drawing.Point(147' 17);
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.checkTransparency.Location = new System.Drawing.Point(147' 17);
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.checkTransparency.Size = new System.Drawing.Size(45' 17);
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.checkTransparency.Size = new System.Drawing.Size(45' 17);
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.checkTransparency.TabIndex = 9;
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.checkImage.Location = new System.Drawing.Point(6' 63);
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.checkImage.Location = new System.Drawing.Point(6' 63);
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.checkImage.Size = new System.Drawing.Size(46' 17);
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.checkImage.Size = new System.Drawing.Size(46' 17);
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.checkImage.TabIndex = 10;
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.btnBgdTrans.Location = new System.Drawing.Point(175' 290);
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.btnBgdTrans.Location = new System.Drawing.Point(175' 290);
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.btnBgdTrans.Size = new System.Drawing.Size(80' 40);
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.btnBgdTrans.Size = new System.Drawing.Size(80' 40);
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.btnBgdTrans.TabIndex = 29;
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.btnBgd.Location = new System.Drawing.Point(261' 290);
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.btnBgd.Location = new System.Drawing.Point(261' 290);
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.btnBgd.Size = new System.Drawing.Size(80' 40);
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.btnBgd.Size = new System.Drawing.Size(80' 40);
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.btnBgd.TabIndex = 27;
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.btnImport.Location = new System.Drawing.Point(347' 471);
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.btnImport.Location = new System.Drawing.Point(347' 471);
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.btnImport.Size = new System.Drawing.Size(80' 40);
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.btnImport.Size = new System.Drawing.Size(80' 40);
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.btnImport.TabIndex = 30;
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.btnSetTrans.Location = new System.Drawing.Point(89' 290);
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.btnSetTrans.Location = new System.Drawing.Point(89' 290);
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.btnSetTrans.Size = new System.Drawing.Size(80' 40);
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.btnSetTrans.Size = new System.Drawing.Size(80' 40);
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.btnSetTrans.TabIndex = 31;
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.groupBox1.Location = new System.Drawing.Point(6' 426);
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.groupBox1.Location = new System.Drawing.Point(6' 426);
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.groupBox1.Size = new System.Drawing.Size(250' 83);
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.groupBox1.Size = new System.Drawing.Size(250' 83);
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.groupBox1.TabIndex = 33;
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.checkSelectOAM.Location = new System.Drawing.Point(147' 63);
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.checkSelectOAM.Location = new System.Drawing.Point(147' 63);
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.checkSelectOAM.Size = new System.Drawing.Size(83' 17);
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.checkSelectOAM.Size = new System.Drawing.Size(83' 17);
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.checkSelectOAM.TabIndex = 11;
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.btnOAMeditor.Location = new System.Drawing.Point(261' 425);
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.btnOAMeditor.Location = new System.Drawing.Point(261' 425);
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.btnOAMeditor.Size = new System.Drawing.Size(80' 40);
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.btnOAMeditor.Size = new System.Drawing.Size(80' 40);
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.btnOAMeditor.TabIndex = 35;
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.checkBatch.Location = new System.Drawing.Point(347' 315);
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.checkBatch.Location = new System.Drawing.Point(347' 315);
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.checkBatch.Size = new System.Drawing.Size(45' 17);
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.checkBatch.Size = new System.Drawing.Size(45' 17);
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.checkBatch.TabIndex = 36;
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.label3.Location = new System.Drawing.Point(344' 259);
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.label3.Location = new System.Drawing.Point(344' 259);
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.label3.Size = new System.Drawing.Size(26' 13);
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.label3.Size = new System.Drawing.Size(26' 13);
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.label3.TabIndex = 37;
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.txtBatch.Location = new System.Drawing.Point(347' 291);
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.txtBatch.Location = new System.Drawing.Point(347' 291);
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.txtBatch.Size = new System.Drawing.Size(159' 20);
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.txtBatch.Size = new System.Drawing.Size(159' 20);
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.txtBatch.TabIndex = 38;
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.radioOriginalPal.Location = new System.Drawing.Point(6' 39);
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.radioOriginalPal.Location = new System.Drawing.Point(6' 39);
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.radioOriginalPal.Size = new System.Drawing.Size(44' 17);
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.radioOriginalPal.Size = new System.Drawing.Size(44' 17);
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.radioOriginalPal.TabIndex = 39;
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.radioReplacePal.Location = new System.Drawing.Point(6' 62);
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.radioReplacePal.Location = new System.Drawing.Point(6' 62);
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.radioReplacePal.Size = new System.Drawing.Size(44' 17);
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.radioReplacePal.Size = new System.Drawing.Size(44' 17);
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.radioReplacePal.TabIndex = 40;
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.radioSwapPal.Location = new System.Drawing.Point(6' 16);
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.radioSwapPal.Location = new System.Drawing.Point(6' 16);
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.radioSwapPal.Size = new System.Drawing.Size(44' 17);
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.radioSwapPal.Size = new System.Drawing.Size(44' 17);
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.radioSwapPal.TabIndex = 41;
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.numThreshold.DecimalPlaces = 4;
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.numThreshold.Increment = new decimal(new int[] {              5'              0'              0'              65536});
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.numThreshold.Increment = new decimal(new int[] {              5'              0'              0'              65536});
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.numThreshold.Location = new System.Drawing.Point(224' 16);
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.numThreshold.Location = new System.Drawing.Point(224' 16);
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.numThreshold.Maximum = new decimal(new int[] {              442'              0'              0'              0});
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.numThreshold.Size = new System.Drawing.Size(77' 20);
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.numThreshold.Size = new System.Drawing.Size(77' 20);
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.numThreshold.TabIndex = 42;
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point(159' 18);
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point(159' 18);
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size(26' 13);
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size(26' 13);
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.label2.TabIndex = 43;
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.radioImgAdd.Location = new System.Drawing.Point(6' 16);
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.radioImgAdd.Location = new System.Drawing.Point(6' 16);
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.radioImgAdd.Size = new System.Drawing.Size(44' 17);
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.radioImgAdd.Size = new System.Drawing.Size(44' 17);
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.radioImgAdd.TabIndex = 44;
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.radioImgReplace.Location = new System.Drawing.Point(6' 38);
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.radioImgReplace.Location = new System.Drawing.Point(6' 38);
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.radioImgReplace.Size = new System.Drawing.Size(44' 17);
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.radioImgReplace.Size = new System.Drawing.Size(44' 17);
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.radioImgReplace.TabIndex = 45;
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.groupBox2.Location = new System.Drawing.Point(3' 334);
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.groupBox2.Location = new System.Drawing.Point(3' 334);
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.groupBox2.Size = new System.Drawing.Size(334' 85);
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.groupBox2.Size = new System.Drawing.Size(334' 85);
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.groupBox2.TabIndex = 46;
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.groupBox3.Location = new System.Drawing.Point(347' 338);
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.groupBox3.Location = new System.Drawing.Point(347' 338);
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.groupBox3.Size = new System.Drawing.Size(163' 59);
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.groupBox3.Size = new System.Drawing.Size(163' 59);
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.groupBox3.TabIndex = 47;
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.label4.Location = new System.Drawing.Point(261' 266);
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.label4.Location = new System.Drawing.Point(261' 266);
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.label4.Size = new System.Drawing.Size(19' 13);
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.label4.Size = new System.Drawing.Size(19' 13);
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.label4.TabIndex = 48;
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.checkListOAM.Location = new System.Drawing.Point(432' 402);
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.checkListOAM.Location = new System.Drawing.Point(432' 402);
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.checkListOAM.Size = new System.Drawing.Size(78' 109);
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.checkListOAM.Size = new System.Drawing.Size(78' 109);
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.checkListOAM.TabIndex = 49;
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.label5.Location = new System.Drawing.Point(344' 402);
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.label5.Location = new System.Drawing.Point(344' 402);
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.label5.Size = new System.Drawing.Size(88' 26);
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.label5.Size = new System.Drawing.Size(88' 26);
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.label5.TabIndex = 50;
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 13F);
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 13F);
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(514' 514);
Magic Number,Ekona.Images,SpriteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\SpriteControl.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(514' 514);
Magic Number,Ekona.Images,MapBase,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\MapBase.cs,Change_StartByte,The following statement contains a magic number: map = new NTFS[newData.Length / 2];
Magic Number,Ekona.Images,MapBase,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\MapBase.cs,Change_StartByte,The following statement contains a magic number: map[i] = Actions.MapInfo(BitConverter.ToUInt16(newData' i * 2));
Magic Number,Ekona.Images,PaletteBase,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\PaletteBase.cs,Set_Palette,The following statement contains a magic number: palette[0].Length > 16
Magic Number,Ekona.Images,PaletteBase,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\PaletteBase.cs,Set_Palette,The following statement contains a magic number: palette[0].Length > 16
Magic Number,Ekona.Images,PaletteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\PaletteControl.cs,Update_Info,The following statement contains a magic number: numFillColors.Value = 16;
Magic Number,Ekona.Images,PaletteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\PaletteControl.cs,ReadLanguage,The following statement contains a magic number: translation = new string[3];
Magic Number,Ekona.Images,PaletteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\PaletteControl.cs,ReadLanguage,The following statement contains a magic number: translation[2] = xml.Element("S08").Value;
Magic Number,Ekona.Images,PaletteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\PaletteControl.cs,comboDepth_SelectedIndexChanged,The following statement contains a magic number: numFillColors.Value = 16;
Magic Number,Ekona.Images,PaletteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\PaletteControl.cs,btnShow_Click,The following statement contains a magic number: int xMax = 6 * 170;
Magic Number,Ekona.Images,PaletteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\PaletteControl.cs,btnShow_Click,The following statement contains a magic number: int xMax = 6 * 170;
Magic Number,Ekona.Images,PaletteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\PaletteControl.cs,btnShow_Click,The following statement contains a magic number: int y = 15;
Magic Number,Ekona.Images,PaletteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\PaletteControl.cs,btnShow_Click,The following statement contains a magic number: pic.Size = new Size(160' 160);
Magic Number,Ekona.Images,PaletteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\PaletteControl.cs,btnShow_Click,The following statement contains a magic number: pic.Size = new Size(160' 160);
Magic Number,Ekona.Images,PaletteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\PaletteControl.cs,btnShow_Click,The following statement contains a magic number: lbl.Text = translation[2] + (i + 1).ToString();
Magic Number,Ekona.Images,PaletteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\PaletteControl.cs,btnShow_Click,The following statement contains a magic number: lbl.Location = new Point(x' y - 15);
Magic Number,Ekona.Images,PaletteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\PaletteControl.cs,btnShow_Click,The following statement contains a magic number: x += 170;
Magic Number,Ekona.Images,PaletteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\PaletteControl.cs,btnShow_Click,The following statement contains a magic number: y += 185;
Magic Number,Ekona.Images,PaletteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\PaletteControl.cs,btnShow_Click,The following statement contains a magic number: win.MaximumSize = new Size(1024' 760);
Magic Number,Ekona.Images,PaletteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\PaletteControl.cs,btnShow_Click,The following statement contains a magic number: win.MaximumSize = new Size(1024' 760);
Magic Number,Ekona.Images,PaletteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\PaletteControl.cs,btnExport_Click,The following statement contains a magic number: o.FilterIndex == 3
Magic Number,Ekona.Images,PaletteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\PaletteControl.cs,InitializeComponent,The following statement contains a magic number: this.picPalette.Size = new System.Drawing.Size(160' 160);
Magic Number,Ekona.Images,PaletteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\PaletteControl.cs,InitializeComponent,The following statement contains a magic number: this.picPalette.Size = new System.Drawing.Size(160' 160);
Magic Number,Ekona.Images,PaletteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\PaletteControl.cs,InitializeComponent,The following statement contains a magic number: this.numericPalette.Location = new System.Drawing.Point(101' 182);
Magic Number,Ekona.Images,PaletteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\PaletteControl.cs,InitializeComponent,The following statement contains a magic number: this.numericPalette.Location = new System.Drawing.Point(101' 182);
Magic Number,Ekona.Images,PaletteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\PaletteControl.cs,InitializeComponent,The following statement contains a magic number: this.numericPalette.Size = new System.Drawing.Size(37' 20);
Magic Number,Ekona.Images,PaletteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\PaletteControl.cs,InitializeComponent,The following statement contains a magic number: this.numericPalette.Size = new System.Drawing.Size(37' 20);
Magic Number,Ekona.Images,PaletteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\PaletteControl.cs,InitializeComponent,The following statement contains a magic number: this.numericPalette.TabIndex = 2;
Magic Number,Ekona.Images,PaletteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\PaletteControl.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(3' 184);
Magic Number,Ekona.Images,PaletteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\PaletteControl.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(3' 184);
Magic Number,Ekona.Images,PaletteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\PaletteControl.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(26' 13);
Magic Number,Ekona.Images,PaletteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\PaletteControl.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(26' 13);
Magic Number,Ekona.Images,PaletteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\PaletteControl.cs,InitializeComponent,The following statement contains a magic number: this.label1.TabIndex = 3;
Magic Number,Ekona.Images,PaletteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\PaletteControl.cs,InitializeComponent,The following statement contains a magic number: this.btnShow.Location = new System.Drawing.Point(6' 208);
Magic Number,Ekona.Images,PaletteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\PaletteControl.cs,InitializeComponent,The following statement contains a magic number: this.btnShow.Location = new System.Drawing.Point(6' 208);
Magic Number,Ekona.Images,PaletteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\PaletteControl.cs,InitializeComponent,The following statement contains a magic number: this.btnShow.Size = new System.Drawing.Size(160' 30);
Magic Number,Ekona.Images,PaletteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\PaletteControl.cs,InitializeComponent,The following statement contains a magic number: this.btnShow.Size = new System.Drawing.Size(160' 30);
Magic Number,Ekona.Images,PaletteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\PaletteControl.cs,InitializeComponent,The following statement contains a magic number: this.btnShow.TabIndex = 4;
Magic Number,Ekona.Images,PaletteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\PaletteControl.cs,InitializeComponent,The following statement contains a magic number: this.btnExport.Location = new System.Drawing.Point(343' 3);
Magic Number,Ekona.Images,PaletteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\PaletteControl.cs,InitializeComponent,The following statement contains a magic number: this.btnExport.Location = new System.Drawing.Point(343' 3);
Magic Number,Ekona.Images,PaletteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\PaletteControl.cs,InitializeComponent,The following statement contains a magic number: this.btnExport.Size = new System.Drawing.Size(80' 40);
Magic Number,Ekona.Images,PaletteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\PaletteControl.cs,InitializeComponent,The following statement contains a magic number: this.btnExport.Size = new System.Drawing.Size(80' 40);
Magic Number,Ekona.Images,PaletteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\PaletteControl.cs,InitializeComponent,The following statement contains a magic number: this.btnExport.TabIndex = 6;
Magic Number,Ekona.Images,PaletteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\PaletteControl.cs,InitializeComponent,The following statement contains a magic number: this.lblRGB.Location = new System.Drawing.Point(3' 163);
Magic Number,Ekona.Images,PaletteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\PaletteControl.cs,InitializeComponent,The following statement contains a magic number: this.lblRGB.Location = new System.Drawing.Point(3' 163);
Magic Number,Ekona.Images,PaletteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\PaletteControl.cs,InitializeComponent,The following statement contains a magic number: this.lblRGB.Size = new System.Drawing.Size(33' 13);
Magic Number,Ekona.Images,PaletteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\PaletteControl.cs,InitializeComponent,The following statement contains a magic number: this.lblRGB.Size = new System.Drawing.Size(33' 13);
Magic Number,Ekona.Images,PaletteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\PaletteControl.cs,InitializeComponent,The following statement contains a magic number: this.lblRGB.TabIndex = 7;
Magic Number,Ekona.Images,PaletteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\PaletteControl.cs,InitializeComponent,The following statement contains a magic number: this.btnImport.Location = new System.Drawing.Point(429' 3);
Magic Number,Ekona.Images,PaletteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\PaletteControl.cs,InitializeComponent,The following statement contains a magic number: this.btnImport.Location = new System.Drawing.Point(429' 3);
Magic Number,Ekona.Images,PaletteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\PaletteControl.cs,InitializeComponent,The following statement contains a magic number: this.btnImport.Size = new System.Drawing.Size(80' 40);
Magic Number,Ekona.Images,PaletteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\PaletteControl.cs,InitializeComponent,The following statement contains a magic number: this.btnImport.Size = new System.Drawing.Size(80' 40);
Magic Number,Ekona.Images,PaletteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\PaletteControl.cs,InitializeComponent,The following statement contains a magic number: this.btnImport.TabIndex = 3;
Magic Number,Ekona.Images,PaletteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\PaletteControl.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point(313' 97);
Magic Number,Ekona.Images,PaletteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\PaletteControl.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point(313' 97);
Magic Number,Ekona.Images,PaletteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\PaletteControl.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size(26' 13);
Magic Number,Ekona.Images,PaletteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\PaletteControl.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size(26' 13);
Magic Number,Ekona.Images,PaletteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\PaletteControl.cs,InitializeComponent,The following statement contains a magic number: this.numericStartByte.Location = new System.Drawing.Point(400' 95);
Magic Number,Ekona.Images,PaletteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\PaletteControl.cs,InitializeComponent,The following statement contains a magic number: this.numericStartByte.Location = new System.Drawing.Point(400' 95);
Magic Number,Ekona.Images,PaletteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\PaletteControl.cs,InitializeComponent,The following statement contains a magic number: this.numericStartByte.Size = new System.Drawing.Size(106' 20);
Magic Number,Ekona.Images,PaletteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\PaletteControl.cs,InitializeComponent,The following statement contains a magic number: this.numericStartByte.Size = new System.Drawing.Size(106' 20);
Magic Number,Ekona.Images,PaletteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\PaletteControl.cs,InitializeComponent,The following statement contains a magic number: this.label3.Location = new System.Drawing.Point(142' 184);
Magic Number,Ekona.Images,PaletteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\PaletteControl.cs,InitializeComponent,The following statement contains a magic number: this.label3.Location = new System.Drawing.Point(142' 184);
Magic Number,Ekona.Images,PaletteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\PaletteControl.cs,InitializeComponent,The following statement contains a magic number: this.label3.Size = new System.Drawing.Size(26' 13);
Magic Number,Ekona.Images,PaletteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\PaletteControl.cs,InitializeComponent,The following statement contains a magic number: this.label3.Size = new System.Drawing.Size(26' 13);
Magic Number,Ekona.Images,PaletteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\PaletteControl.cs,InitializeComponent,The following statement contains a magic number: this.label3.TabIndex = 9;
Magic Number,Ekona.Images,PaletteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\PaletteControl.cs,InitializeComponent,The following statement contains a magic number: this.comboDepth.Location = new System.Drawing.Point(400' 121);
Magic Number,Ekona.Images,PaletteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\PaletteControl.cs,InitializeComponent,The following statement contains a magic number: this.comboDepth.Location = new System.Drawing.Point(400' 121);
Magic Number,Ekona.Images,PaletteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\PaletteControl.cs,InitializeComponent,The following statement contains a magic number: this.comboDepth.Size = new System.Drawing.Size(106' 21);
Magic Number,Ekona.Images,PaletteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\PaletteControl.cs,InitializeComponent,The following statement contains a magic number: this.comboDepth.Size = new System.Drawing.Size(106' 21);
Magic Number,Ekona.Images,PaletteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\PaletteControl.cs,InitializeComponent,The following statement contains a magic number: this.comboDepth.TabIndex = 10;
Magic Number,Ekona.Images,PaletteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\PaletteControl.cs,InitializeComponent,The following statement contains a magic number: this.label4.Location = new System.Drawing.Point(313' 124);
Magic Number,Ekona.Images,PaletteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\PaletteControl.cs,InitializeComponent,The following statement contains a magic number: this.label4.Location = new System.Drawing.Point(313' 124);
Magic Number,Ekona.Images,PaletteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\PaletteControl.cs,InitializeComponent,The following statement contains a magic number: this.label4.Size = new System.Drawing.Size(26' 13);
Magic Number,Ekona.Images,PaletteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\PaletteControl.cs,InitializeComponent,The following statement contains a magic number: this.label4.Size = new System.Drawing.Size(26' 13);
Magic Number,Ekona.Images,PaletteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\PaletteControl.cs,InitializeComponent,The following statement contains a magic number: this.label4.TabIndex = 11;
Magic Number,Ekona.Images,PaletteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\PaletteControl.cs,InitializeComponent,The following statement contains a magic number: this.checkHex.Location = new System.Drawing.Point(400' 72);
Magic Number,Ekona.Images,PaletteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\PaletteControl.cs,InitializeComponent,The following statement contains a magic number: this.checkHex.Location = new System.Drawing.Point(400' 72);
Magic Number,Ekona.Images,PaletteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\PaletteControl.cs,InitializeComponent,The following statement contains a magic number: this.checkHex.Size = new System.Drawing.Size(46' 17);
Magic Number,Ekona.Images,PaletteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\PaletteControl.cs,InitializeComponent,The following statement contains a magic number: this.checkHex.Size = new System.Drawing.Size(46' 17);
Magic Number,Ekona.Images,PaletteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\PaletteControl.cs,InitializeComponent,The following statement contains a magic number: this.checkHex.TabIndex = 12;
Magic Number,Ekona.Images,PaletteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\PaletteControl.cs,InitializeComponent,The following statement contains a magic number: this.btnUseThis.Location = new System.Drawing.Point(166' 3);
Magic Number,Ekona.Images,PaletteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\PaletteControl.cs,InitializeComponent,The following statement contains a magic number: this.btnUseThis.Location = new System.Drawing.Point(166' 3);
Magic Number,Ekona.Images,PaletteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\PaletteControl.cs,InitializeComponent,The following statement contains a magic number: this.btnUseThis.Size = new System.Drawing.Size(80' 40);
Magic Number,Ekona.Images,PaletteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\PaletteControl.cs,InitializeComponent,The following statement contains a magic number: this.btnUseThis.Size = new System.Drawing.Size(80' 40);
Magic Number,Ekona.Images,PaletteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\PaletteControl.cs,InitializeComponent,The following statement contains a magic number: this.btnUseThis.TabIndex = 13;
Magic Number,Ekona.Images,PaletteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\PaletteControl.cs,InitializeComponent,The following statement contains a magic number: this.label5.Location = new System.Drawing.Point(259' 208);
Magic Number,Ekona.Images,PaletteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\PaletteControl.cs,InitializeComponent,The following statement contains a magic number: this.label5.Location = new System.Drawing.Point(259' 208);
Magic Number,Ekona.Images,PaletteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\PaletteControl.cs,InitializeComponent,The following statement contains a magic number: this.label5.Size = new System.Drawing.Size(27' 13);
Magic Number,Ekona.Images,PaletteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\PaletteControl.cs,InitializeComponent,The following statement contains a magic number: this.label5.Size = new System.Drawing.Size(27' 13);
Magic Number,Ekona.Images,PaletteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\PaletteControl.cs,InitializeComponent,The following statement contains a magic number: this.label5.TabIndex = 14;
Magic Number,Ekona.Images,PaletteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\PaletteControl.cs,InitializeComponent,The following statement contains a magic number: this.numFillColors.Location = new System.Drawing.Point(345' 206);
Magic Number,Ekona.Images,PaletteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\PaletteControl.cs,InitializeComponent,The following statement contains a magic number: this.numFillColors.Location = new System.Drawing.Point(345' 206);
Magic Number,Ekona.Images,PaletteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\PaletteControl.cs,InitializeComponent,The following statement contains a magic number: this.numFillColors.Maximum = new decimal(new int[] {              65535'              0'              0'              0});
Magic Number,Ekona.Images,PaletteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\PaletteControl.cs,InitializeComponent,The following statement contains a magic number: this.numFillColors.Size = new System.Drawing.Size(78' 20);
Magic Number,Ekona.Images,PaletteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\PaletteControl.cs,InitializeComponent,The following statement contains a magic number: this.numFillColors.Size = new System.Drawing.Size(78' 20);
Magic Number,Ekona.Images,PaletteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\PaletteControl.cs,InitializeComponent,The following statement contains a magic number: this.numFillColors.TabIndex = 15;
Magic Number,Ekona.Images,PaletteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\PaletteControl.cs,InitializeComponent,The following statement contains a magic number: this.btnFillColors.Location = new System.Drawing.Point(429' 194);
Magic Number,Ekona.Images,PaletteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\PaletteControl.cs,InitializeComponent,The following statement contains a magic number: this.btnFillColors.Location = new System.Drawing.Point(429' 194);
Magic Number,Ekona.Images,PaletteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\PaletteControl.cs,InitializeComponent,The following statement contains a magic number: this.btnFillColors.Size = new System.Drawing.Size(80' 40);
Magic Number,Ekona.Images,PaletteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\PaletteControl.cs,InitializeComponent,The following statement contains a magic number: this.btnFillColors.Size = new System.Drawing.Size(80' 40);
Magic Number,Ekona.Images,PaletteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\PaletteControl.cs,InitializeComponent,The following statement contains a magic number: this.btnFillColors.TabIndex = 16;
Magic Number,Ekona.Images,PaletteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\PaletteControl.cs,InitializeComponent,The following statement contains a magic number: this.checkDuplicated.Location = new System.Drawing.Point(166' 72);
Magic Number,Ekona.Images,PaletteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\PaletteControl.cs,InitializeComponent,The following statement contains a magic number: this.checkDuplicated.Location = new System.Drawing.Point(166' 72);
Magic Number,Ekona.Images,PaletteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\PaletteControl.cs,InitializeComponent,The following statement contains a magic number: this.checkDuplicated.Size = new System.Drawing.Size(128' 17);
Magic Number,Ekona.Images,PaletteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\PaletteControl.cs,InitializeComponent,The following statement contains a magic number: this.checkDuplicated.Size = new System.Drawing.Size(128' 17);
Magic Number,Ekona.Images,PaletteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\PaletteControl.cs,InitializeComponent,The following statement contains a magic number: this.checkDuplicated.TabIndex = 17;
Magic Number,Ekona.Images,PaletteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\PaletteControl.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 13F);
Magic Number,Ekona.Images,PaletteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\PaletteControl.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 13F);
Magic Number,Ekona.Images,PaletteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\PaletteControl.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(512' 512);
Magic Number,Ekona.Images,PaletteControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\PaletteControl.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(512' 512);
Magic Number,Ekona.Images,RawMap,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\RawData.cs,Read,The following statement contains a magic number: NTFS[] map = new NTFS[file_size / 2];
Magic Number,Ekona.Images,RawMap,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\RawData.cs,Read,The following statement contains a magic number: int width = (map.Length * 8 >= 0x100 ? 0x100 : map.Length * 8);
Magic Number,Ekona.Images,RawMap,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\RawData.cs,Read,The following statement contains a magic number: int width = (map.Length * 8 >= 0x100 ? 0x100 : map.Length * 8);
Magic Number,Ekona.Images,RawMap,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\RawData.cs,Read,The following statement contains a magic number: int height = (map.Length / (width / 8)) * 8;
Magic Number,Ekona.Images,RawMap,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\RawData.cs,Read,The following statement contains a magic number: int height = (map.Length / (width / 8)) * 8;
Magic Number,Ekona.Images.Formats,APNG,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Formats\APNG.cs,Create,The following statement contains a magic number: byte[] pngSignature = new byte[] { 137' 80' 78' 71' 13' 10' 26' 10 };
Magic Number,Ekona.Images.Formats,APNG,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Formats\APNG.cs,Create,The following statement contains a magic number: byte[] pngSignature = new byte[] { 137' 80' 78' 71' 13' 10' 26' 10 };
Magic Number,Ekona.Images.Formats,APNG,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Formats\APNG.cs,Create,The following statement contains a magic number: byte[] pngSignature = new byte[] { 137' 80' 78' 71' 13' 10' 26' 10 };
Magic Number,Ekona.Images.Formats,APNG,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Formats\APNG.cs,Create,The following statement contains a magic number: byte[] pngSignature = new byte[] { 137' 80' 78' 71' 13' 10' 26' 10 };
Magic Number,Ekona.Images.Formats,APNG,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Formats\APNG.cs,Create,The following statement contains a magic number: byte[] pngSignature = new byte[] { 137' 80' 78' 71' 13' 10' 26' 10 };
Magic Number,Ekona.Images.Formats,APNG,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Formats\APNG.cs,Create,The following statement contains a magic number: byte[] pngSignature = new byte[] { 137' 80' 78' 71' 13' 10' 26' 10 };
Magic Number,Ekona.Images.Formats,APNG,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Formats\APNG.cs,Create,The following statement contains a magic number: byte[] pngSignature = new byte[] { 137' 80' 78' 71' 13' 10' 26' 10 };
Magic Number,Ekona.Images.Formats,APNG,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Formats\APNG.cs,Create,The following statement contains a magic number: byte[] pngSignature = new byte[] { 137' 80' 78' 71' 13' 10' 26' 10 };
Magic Number,Ekona.Images.Formats,APNG,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Formats\APNG.cs,Create,The following statement contains a magic number: actl.length = BitConverter.GetBytes(8).Reverse().ToArray();
Magic Number,Ekona.Images.Formats,APNG,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Formats\APNG.cs,Read_IHDR,The following statement contains a magic number: ihdr.length = br.ReadBytes(4);
Magic Number,Ekona.Images.Formats,APNG,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Formats\APNG.cs,Read_IHDR,The following statement contains a magic number: ihdr.id = br.ReadBytes(4);
Magic Number,Ekona.Images.Formats,APNG,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Formats\APNG.cs,Read_IHDR,The following statement contains a magic number: ihdr.crc = br.ReadBytes(4);
Magic Number,Ekona.Images.Formats,APNG,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Formats\APNG.cs,Read_fcTL,The following statement contains a magic number: fctl.length = BitConverter.GetBytes(26).Reverse().ToArray();
Magic Number,Ekona.Images.Formats,APNG,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Formats\APNG.cs,Read_fcTL,The following statement contains a magic number: fctl.width = br.ReadBytes(4);
Magic Number,Ekona.Images.Formats,APNG,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Formats\APNG.cs,Read_fcTL,The following statement contains a magic number: fctl.height = br.ReadBytes(4);
Magic Number,Ekona.Images.Formats,APNG,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Formats\APNG.cs,Read_fcTL,The following statement contains a magic number: fctl.delay_den = BitConverter.GetBytes((ushort)1000).Reverse().ToArray();
Magic Number,Ekona.Images.Formats,APNG,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Formats\APNG.cs,Read_IDAT,The following statement contains a magic number: br.BaseStream.Position -= 8;
Magic Number,Ekona.Images.Formats,APNG,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Formats\APNG.cs,Read_IDAT,The following statement contains a magic number: int length = BitConverter.ToInt32(br.ReadBytes(4).Reverse().ToArray()' 0);
Magic Number,Ekona.Images.Formats,APNG,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Formats\APNG.cs,Read_IDAT,The following statement contains a magic number: br.BaseStream.Position -= 4;
Magic Number,Ekona.Images.Formats,APNG,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Formats\APNG.cs,Read_IDAT,The following statement contains a magic number: buffer = br.ReadBytes(length + 12);
Magic Number,Ekona.Images.Formats,APNG,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Formats\APNG.cs,Read_fdAT,The following statement contains a magic number: br.BaseStream.Position -= 8;
Magic Number,Ekona.Images.Formats,APNG,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Formats\APNG.cs,Read_fdAT,The following statement contains a magic number: int length = BitConverter.ToInt32(br.ReadBytes(4).Reverse().ToArray()' 0);
Magic Number,Ekona.Images.Formats,APNG,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Formats\APNG.cs,Read_fdAT,The following statement contains a magic number: fdat.length = BitConverter.GetBytes(length + 4).Reverse().ToArray();
Magic Number,Ekona.Images.Formats,APNG,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Formats\APNG.cs,Read_fdAT,The following statement contains a magic number: br.BaseStream.Position += 4;
Magic Number,Ekona.Images.Formats,BMP,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Formats\Bitmap.cs,Read,The following statement contains a magic number: new String(br.ReadChars(2)) != "BM"
Magic Number,Ekona.Images.Formats,BMP,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Formats\Bitmap.cs,Read,The following statement contains a magic number: Byte[] color = br.ReadBytes(4);
Magic Number,Ekona.Images.Formats,BMP,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Formats\Bitmap.cs,Read,The following statement contains a magic number: colors[0][i] = Color.FromArgb(color[2]' color[1]' color[0]);
Magic Number,Ekona.Images.Formats,BMP,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Formats\Bitmap.cs,Read,The following statement contains a magic number: switch (bpp)              {                  case 4:                      int divisor = (int)width / 2;                      if (width % 4 != 0)                      {                          int res;                          Math.DivRem((int)width / 2' 4' out res);                          divisor = (int)width / 2 + (4 - res);                      }                        tiles = new byte[tiles.Length * 2];                      for (int h = (int)height - 1; h >= 0; h--)                      {                          for (int w = 0; w < width; w += 2)                          {                              byte b = br.ReadByte();                              tiles[w + h * width] = (byte)(b >> 4);                                if (w + 1 != width)                                  tiles[w + 1 + h * width] = (byte)(b & 0xF);                          }                          br.ReadBytes((int)(divisor - ((float)width / 2)));                      }                      tiles = Helper.BitsConverter.Bits4ToByte(tiles);                      break;                  case 8:                      divisor = (int)width;                      if (width % 4 != 0)                      {                          int res;                          Math.DivRem((int)width' 4' out res);                          divisor = (int)width + (4 - res);                      }                        for (int h = (int)height - 1; h >= 0; h--)                      {                          for (int w = 0; w < width; w++)                          {                              tiles[w + h * width] = br.ReadByte();                          }                          br.ReadBytes(divisor - (int)width);                      }                      break;              }
Magic Number,Ekona.Images.Formats,BMP,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Formats\Bitmap.cs,Read,The following statement contains a magic number: switch (bpp)              {                  case 4:                      int divisor = (int)width / 2;                      if (width % 4 != 0)                      {                          int res;                          Math.DivRem((int)width / 2' 4' out res);                          divisor = (int)width / 2 + (4 - res);                      }                        tiles = new byte[tiles.Length * 2];                      for (int h = (int)height - 1; h >= 0; h--)                      {                          for (int w = 0; w < width; w += 2)                          {                              byte b = br.ReadByte();                              tiles[w + h * width] = (byte)(b >> 4);                                if (w + 1 != width)                                  tiles[w + 1 + h * width] = (byte)(b & 0xF);                          }                          br.ReadBytes((int)(divisor - ((float)width / 2)));                      }                      tiles = Helper.BitsConverter.Bits4ToByte(tiles);                      break;                  case 8:                      divisor = (int)width;                      if (width % 4 != 0)                      {                          int res;                          Math.DivRem((int)width' 4' out res);                          divisor = (int)width + (4 - res);                      }                        for (int h = (int)height - 1; h >= 0; h--)                      {                          for (int w = 0; w < width; w++)                          {                              tiles[w + h * width] = br.ReadByte();                          }                          br.ReadBytes(divisor - (int)width);                      }                      break;              }
Magic Number,Ekona.Images.Formats,BMP,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Formats\Bitmap.cs,Read,The following statement contains a magic number: switch (bpp)              {                  case 4:                      int divisor = (int)width / 2;                      if (width % 4 != 0)                      {                          int res;                          Math.DivRem((int)width / 2' 4' out res);                          divisor = (int)width / 2 + (4 - res);                      }                        tiles = new byte[tiles.Length * 2];                      for (int h = (int)height - 1; h >= 0; h--)                      {                          for (int w = 0; w < width; w += 2)                          {                              byte b = br.ReadByte();                              tiles[w + h * width] = (byte)(b >> 4);                                if (w + 1 != width)                                  tiles[w + 1 + h * width] = (byte)(b & 0xF);                          }                          br.ReadBytes((int)(divisor - ((float)width / 2)));                      }                      tiles = Helper.BitsConverter.Bits4ToByte(tiles);                      break;                  case 8:                      divisor = (int)width;                      if (width % 4 != 0)                      {                          int res;                          Math.DivRem((int)width' 4' out res);                          divisor = (int)width + (4 - res);                      }                        for (int h = (int)height - 1; h >= 0; h--)                      {                          for (int w = 0; w < width; w++)                          {                              tiles[w + h * width] = br.ReadByte();                          }                          br.ReadBytes(divisor - (int)width);                      }                      break;              }
Magic Number,Ekona.Images.Formats,BMP,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Formats\Bitmap.cs,Read,The following statement contains a magic number: switch (bpp)              {                  case 4:                      int divisor = (int)width / 2;                      if (width % 4 != 0)                      {                          int res;                          Math.DivRem((int)width / 2' 4' out res);                          divisor = (int)width / 2 + (4 - res);                      }                        tiles = new byte[tiles.Length * 2];                      for (int h = (int)height - 1; h >= 0; h--)                      {                          for (int w = 0; w < width; w += 2)                          {                              byte b = br.ReadByte();                              tiles[w + h * width] = (byte)(b >> 4);                                if (w + 1 != width)                                  tiles[w + 1 + h * width] = (byte)(b & 0xF);                          }                          br.ReadBytes((int)(divisor - ((float)width / 2)));                      }                      tiles = Helper.BitsConverter.Bits4ToByte(tiles);                      break;                  case 8:                      divisor = (int)width;                      if (width % 4 != 0)                      {                          int res;                          Math.DivRem((int)width' 4' out res);                          divisor = (int)width + (4 - res);                      }                        for (int h = (int)height - 1; h >= 0; h--)                      {                          for (int w = 0; w < width; w++)                          {                              tiles[w + h * width] = br.ReadByte();                          }                          br.ReadBytes(divisor - (int)width);                      }                      break;              }
Magic Number,Ekona.Images.Formats,BMP,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Formats\Bitmap.cs,Read,The following statement contains a magic number: switch (bpp)              {                  case 4:                      int divisor = (int)width / 2;                      if (width % 4 != 0)                      {                          int res;                          Math.DivRem((int)width / 2' 4' out res);                          divisor = (int)width / 2 + (4 - res);                      }                        tiles = new byte[tiles.Length * 2];                      for (int h = (int)height - 1; h >= 0; h--)                      {                          for (int w = 0; w < width; w += 2)                          {                              byte b = br.ReadByte();                              tiles[w + h * width] = (byte)(b >> 4);                                if (w + 1 != width)                                  tiles[w + 1 + h * width] = (byte)(b & 0xF);                          }                          br.ReadBytes((int)(divisor - ((float)width / 2)));                      }                      tiles = Helper.BitsConverter.Bits4ToByte(tiles);                      break;                  case 8:                      divisor = (int)width;                      if (width % 4 != 0)                      {                          int res;                          Math.DivRem((int)width' 4' out res);                          divisor = (int)width + (4 - res);                      }                        for (int h = (int)height - 1; h >= 0; h--)                      {                          for (int w = 0; w < width; w++)                          {                              tiles[w + h * width] = br.ReadByte();                          }                          br.ReadBytes(divisor - (int)width);                      }                      break;              }
Magic Number,Ekona.Images.Formats,BMP,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Formats\Bitmap.cs,Read,The following statement contains a magic number: switch (bpp)              {                  case 4:                      int divisor = (int)width / 2;                      if (width % 4 != 0)                      {                          int res;                          Math.DivRem((int)width / 2' 4' out res);                          divisor = (int)width / 2 + (4 - res);                      }                        tiles = new byte[tiles.Length * 2];                      for (int h = (int)height - 1; h >= 0; h--)                      {                          for (int w = 0; w < width; w += 2)                          {                              byte b = br.ReadByte();                              tiles[w + h * width] = (byte)(b >> 4);                                if (w + 1 != width)                                  tiles[w + 1 + h * width] = (byte)(b & 0xF);                          }                          br.ReadBytes((int)(divisor - ((float)width / 2)));                      }                      tiles = Helper.BitsConverter.Bits4ToByte(tiles);                      break;                  case 8:                      divisor = (int)width;                      if (width % 4 != 0)                      {                          int res;                          Math.DivRem((int)width' 4' out res);                          divisor = (int)width + (4 - res);                      }                        for (int h = (int)height - 1; h >= 0; h--)                      {                          for (int w = 0; w < width; w++)                          {                              tiles[w + h * width] = br.ReadByte();                          }                          br.ReadBytes(divisor - (int)width);                      }                      break;              }
Magic Number,Ekona.Images.Formats,BMP,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Formats\Bitmap.cs,Read,The following statement contains a magic number: switch (bpp)              {                  case 4:                      int divisor = (int)width / 2;                      if (width % 4 != 0)                      {                          int res;                          Math.DivRem((int)width / 2' 4' out res);                          divisor = (int)width / 2 + (4 - res);                      }                        tiles = new byte[tiles.Length * 2];                      for (int h = (int)height - 1; h >= 0; h--)                      {                          for (int w = 0; w < width; w += 2)                          {                              byte b = br.ReadByte();                              tiles[w + h * width] = (byte)(b >> 4);                                if (w + 1 != width)                                  tiles[w + 1 + h * width] = (byte)(b & 0xF);                          }                          br.ReadBytes((int)(divisor - ((float)width / 2)));                      }                      tiles = Helper.BitsConverter.Bits4ToByte(tiles);                      break;                  case 8:                      divisor = (int)width;                      if (width % 4 != 0)                      {                          int res;                          Math.DivRem((int)width' 4' out res);                          divisor = (int)width + (4 - res);                      }                        for (int h = (int)height - 1; h >= 0; h--)                      {                          for (int w = 0; w < width; w++)                          {                              tiles[w + h * width] = br.ReadByte();                          }                          br.ReadBytes(divisor - (int)width);                      }                      break;              }
Magic Number,Ekona.Images.Formats,BMP,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Formats\Bitmap.cs,Read,The following statement contains a magic number: switch (bpp)              {                  case 4:                      int divisor = (int)width / 2;                      if (width % 4 != 0)                      {                          int res;                          Math.DivRem((int)width / 2' 4' out res);                          divisor = (int)width / 2 + (4 - res);                      }                        tiles = new byte[tiles.Length * 2];                      for (int h = (int)height - 1; h >= 0; h--)                      {                          for (int w = 0; w < width; w += 2)                          {                              byte b = br.ReadByte();                              tiles[w + h * width] = (byte)(b >> 4);                                if (w + 1 != width)                                  tiles[w + 1 + h * width] = (byte)(b & 0xF);                          }                          br.ReadBytes((int)(divisor - ((float)width / 2)));                      }                      tiles = Helper.BitsConverter.Bits4ToByte(tiles);                      break;                  case 8:                      divisor = (int)width;                      if (width % 4 != 0)                      {                          int res;                          Math.DivRem((int)width' 4' out res);                          divisor = (int)width + (4 - res);                      }                        for (int h = (int)height - 1; h >= 0; h--)                      {                          for (int w = 0; w < width; w++)                          {                              tiles[w + h * width] = br.ReadByte();                          }                          br.ReadBytes(divisor - (int)width);                      }                      break;              }
Magic Number,Ekona.Images.Formats,BMP,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Formats\Bitmap.cs,Read,The following statement contains a magic number: switch (bpp)              {                  case 4:                      int divisor = (int)width / 2;                      if (width % 4 != 0)                      {                          int res;                          Math.DivRem((int)width / 2' 4' out res);                          divisor = (int)width / 2 + (4 - res);                      }                        tiles = new byte[tiles.Length * 2];                      for (int h = (int)height - 1; h >= 0; h--)                      {                          for (int w = 0; w < width; w += 2)                          {                              byte b = br.ReadByte();                              tiles[w + h * width] = (byte)(b >> 4);                                if (w + 1 != width)                                  tiles[w + 1 + h * width] = (byte)(b & 0xF);                          }                          br.ReadBytes((int)(divisor - ((float)width / 2)));                      }                      tiles = Helper.BitsConverter.Bits4ToByte(tiles);                      break;                  case 8:                      divisor = (int)width;                      if (width % 4 != 0)                      {                          int res;                          Math.DivRem((int)width' 4' out res);                          divisor = (int)width + (4 - res);                      }                        for (int h = (int)height - 1; h >= 0; h--)                      {                          for (int w = 0; w < width; w++)                          {                              tiles[w + h * width] = br.ReadByte();                          }                          br.ReadBytes(divisor - (int)width);                      }                      break;              }
Magic Number,Ekona.Images.Formats,BMP,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Formats\Bitmap.cs,Read,The following statement contains a magic number: switch (bpp)              {                  case 4:                      int divisor = (int)width / 2;                      if (width % 4 != 0)                      {                          int res;                          Math.DivRem((int)width / 2' 4' out res);                          divisor = (int)width / 2 + (4 - res);                      }                        tiles = new byte[tiles.Length * 2];                      for (int h = (int)height - 1; h >= 0; h--)                      {                          for (int w = 0; w < width; w += 2)                          {                              byte b = br.ReadByte();                              tiles[w + h * width] = (byte)(b >> 4);                                if (w + 1 != width)                                  tiles[w + 1 + h * width] = (byte)(b & 0xF);                          }                          br.ReadBytes((int)(divisor - ((float)width / 2)));                      }                      tiles = Helper.BitsConverter.Bits4ToByte(tiles);                      break;                  case 8:                      divisor = (int)width;                      if (width % 4 != 0)                      {                          int res;                          Math.DivRem((int)width' 4' out res);                          divisor = (int)width + (4 - res);                      }                        for (int h = (int)height - 1; h >= 0; h--)                      {                          for (int w = 0; w < width; w++)                          {                              tiles[w + h * width] = br.ReadByte();                          }                          br.ReadBytes(divisor - (int)width);                      }                      break;              }
Magic Number,Ekona.Images.Formats,BMP,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Formats\Bitmap.cs,Read,The following statement contains a magic number: switch (bpp)              {                  case 4:                      int divisor = (int)width / 2;                      if (width % 4 != 0)                      {                          int res;                          Math.DivRem((int)width / 2' 4' out res);                          divisor = (int)width / 2 + (4 - res);                      }                        tiles = new byte[tiles.Length * 2];                      for (int h = (int)height - 1; h >= 0; h--)                      {                          for (int w = 0; w < width; w += 2)                          {                              byte b = br.ReadByte();                              tiles[w + h * width] = (byte)(b >> 4);                                if (w + 1 != width)                                  tiles[w + 1 + h * width] = (byte)(b & 0xF);                          }                          br.ReadBytes((int)(divisor - ((float)width / 2)));                      }                      tiles = Helper.BitsConverter.Bits4ToByte(tiles);                      break;                  case 8:                      divisor = (int)width;                      if (width % 4 != 0)                      {                          int res;                          Math.DivRem((int)width' 4' out res);                          divisor = (int)width + (4 - res);                      }                        for (int h = (int)height - 1; h >= 0; h--)                      {                          for (int w = 0; w < width; w++)                          {                              tiles[w + h * width] = br.ReadByte();                          }                          br.ReadBytes(divisor - (int)width);                      }                      break;              }
Magic Number,Ekona.Images.Formats,BMP,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Formats\Bitmap.cs,Read,The following statement contains a magic number: switch (bpp)              {                  case 4:                      int divisor = (int)width / 2;                      if (width % 4 != 0)                      {                          int res;                          Math.DivRem((int)width / 2' 4' out res);                          divisor = (int)width / 2 + (4 - res);                      }                        tiles = new byte[tiles.Length * 2];                      for (int h = (int)height - 1; h >= 0; h--)                      {                          for (int w = 0; w < width; w += 2)                          {                              byte b = br.ReadByte();                              tiles[w + h * width] = (byte)(b >> 4);                                if (w + 1 != width)                                  tiles[w + 1 + h * width] = (byte)(b & 0xF);                          }                          br.ReadBytes((int)(divisor - ((float)width / 2)));                      }                      tiles = Helper.BitsConverter.Bits4ToByte(tiles);                      break;                  case 8:                      divisor = (int)width;                      if (width % 4 != 0)                      {                          int res;                          Math.DivRem((int)width' 4' out res);                          divisor = (int)width + (4 - res);                      }                        for (int h = (int)height - 1; h >= 0; h--)                      {                          for (int w = 0; w < width; w++)                          {                              tiles[w + h * width] = br.ReadByte();                          }                          br.ReadBytes(divisor - (int)width);                      }                      break;              }
Magic Number,Ekona.Images.Formats,BMP,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Formats\Bitmap.cs,Read,The following statement contains a magic number: switch (bpp)              {                  case 4:                      int divisor = (int)width / 2;                      if (width % 4 != 0)                      {                          int res;                          Math.DivRem((int)width / 2' 4' out res);                          divisor = (int)width / 2 + (4 - res);                      }                        tiles = new byte[tiles.Length * 2];                      for (int h = (int)height - 1; h >= 0; h--)                      {                          for (int w = 0; w < width; w += 2)                          {                              byte b = br.ReadByte();                              tiles[w + h * width] = (byte)(b >> 4);                                if (w + 1 != width)                                  tiles[w + 1 + h * width] = (byte)(b & 0xF);                          }                          br.ReadBytes((int)(divisor - ((float)width / 2)));                      }                      tiles = Helper.BitsConverter.Bits4ToByte(tiles);                      break;                  case 8:                      divisor = (int)width;                      if (width % 4 != 0)                      {                          int res;                          Math.DivRem((int)width' 4' out res);                          divisor = (int)width + (4 - res);                      }                        for (int h = (int)height - 1; h >= 0; h--)                      {                          for (int w = 0; w < width; w++)                          {                              tiles[w + h * width] = br.ReadByte();                          }                          br.ReadBytes(divisor - (int)width);                      }                      break;              }
Magic Number,Ekona.Images.Formats,BMP,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Formats\Bitmap.cs,Read,The following statement contains a magic number: switch (bpp)              {                  case 4:                      int divisor = (int)width / 2;                      if (width % 4 != 0)                      {                          int res;                          Math.DivRem((int)width / 2' 4' out res);                          divisor = (int)width / 2 + (4 - res);                      }                        tiles = new byte[tiles.Length * 2];                      for (int h = (int)height - 1; h >= 0; h--)                      {                          for (int w = 0; w < width; w += 2)                          {                              byte b = br.ReadByte();                              tiles[w + h * width] = (byte)(b >> 4);                                if (w + 1 != width)                                  tiles[w + 1 + h * width] = (byte)(b & 0xF);                          }                          br.ReadBytes((int)(divisor - ((float)width / 2)));                      }                      tiles = Helper.BitsConverter.Bits4ToByte(tiles);                      break;                  case 8:                      divisor = (int)width;                      if (width % 4 != 0)                      {                          int res;                          Math.DivRem((int)width' 4' out res);                          divisor = (int)width + (4 - res);                      }                        for (int h = (int)height - 1; h >= 0; h--)                      {                          for (int w = 0; w < width; w++)                          {                              tiles[w + h * width] = br.ReadByte();                          }                          br.ReadBytes(divisor - (int)width);                      }                      break;              }
Magic Number,Ekona.Images.Formats,BMP,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Formats\Bitmap.cs,Read,The following statement contains a magic number: switch (bpp)              {                  case 4:                      int divisor = (int)width / 2;                      if (width % 4 != 0)                      {                          int res;                          Math.DivRem((int)width / 2' 4' out res);                          divisor = (int)width / 2 + (4 - res);                      }                        tiles = new byte[tiles.Length * 2];                      for (int h = (int)height - 1; h >= 0; h--)                      {                          for (int w = 0; w < width; w += 2)                          {                              byte b = br.ReadByte();                              tiles[w + h * width] = (byte)(b >> 4);                                if (w + 1 != width)                                  tiles[w + 1 + h * width] = (byte)(b & 0xF);                          }                          br.ReadBytes((int)(divisor - ((float)width / 2)));                      }                      tiles = Helper.BitsConverter.Bits4ToByte(tiles);                      break;                  case 8:                      divisor = (int)width;                      if (width % 4 != 0)                      {                          int res;                          Math.DivRem((int)width' 4' out res);                          divisor = (int)width + (4 - res);                      }                        for (int h = (int)height - 1; h >= 0; h--)                      {                          for (int w = 0; w < width; w++)                          {                              tiles[w + h * width] = br.ReadByte();                          }                          br.ReadBytes(divisor - (int)width);                      }                      break;              }
Magic Number,Ekona.Images.Formats,PaletteWin,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Formats\PaletteWin.cs,Read,The following statement contains a magic number: br.ReadChars(4);
Magic Number,Ekona.Images.Formats,PaletteWin,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Formats\PaletteWin.cs,Read,The following statement contains a magic number: br.ReadChars(4);
Magic Number,Ekona.Images.Formats,PaletteWin,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Formats\PaletteWin.cs,Read,The following statement contains a magic number: br.ReadChars(4);
Magic Number,Ekona.Images.Formats,PaletteWin,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Formats\PaletteWin.cs,Write,The following statement contains a magic number: bw.Write((uint)(0x10 + palette[0].Length * 4));
Magic Number,Ekona.Images.Formats,PaletteWin,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Formats\PaletteWin.cs,Write,The following statement contains a magic number: bw.Write((uint)palette[0].Length * 4 + 4);
Magic Number,Ekona.Images.Formats,PaletteWin,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Formats\PaletteWin.cs,Write,The following statement contains a magic number: bw.Write((uint)palette[0].Length * 4 + 4);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,Read_Language,The following statement contains a magic number: comboObjMode.Items[2] = xml.Element("S0C").Value;
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,Read_Language,The following statement contains a magic number: comboObjMode.Items[3] = xml.Element("S0D").Value;
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,Read_Language,The following statement contains a magic number: comboShape.Items[2] = xml.Element("S15").Value;
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,Read_Language,The following statement contains a magic number: comboShape.Items[3] = xml.Element("S0D").Value;
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,Read_Info,The following statement contains a magic number: switch (oam.obj0.shape)              {                  case 0:                      if (oam.obj1.size == 0) comboSize.SelectedIndex = 0;                      else if (oam.obj1.size == 1) comboSize.SelectedIndex = 1;                      else if (oam.obj1.size == 2) comboSize.SelectedIndex = 2;                      else if (oam.obj1.size == 3) comboSize.SelectedIndex = 3;                      break;                  case 1:                      if (oam.obj1.size == 0) comboSize.SelectedIndex = 4;                      else if (oam.obj1.size == 1) comboSize.SelectedIndex = 5;                      else if (oam.obj1.size == 2) comboSize.SelectedIndex = 6;                      else if (oam.obj1.size == 3) comboSize.SelectedIndex = 7;                      break;                  case 2:                      if (oam.obj1.size == 0) comboSize.SelectedIndex = 8;                      else if (oam.obj1.size == 1) comboSize.SelectedIndex = 9;                      else if (oam.obj1.size == 2) comboSize.SelectedIndex = 10;                      else if (oam.obj1.size == 3) comboSize.SelectedIndex = 11;                      break;              }
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,Read_Info,The following statement contains a magic number: switch (oam.obj0.shape)              {                  case 0:                      if (oam.obj1.size == 0) comboSize.SelectedIndex = 0;                      else if (oam.obj1.size == 1) comboSize.SelectedIndex = 1;                      else if (oam.obj1.size == 2) comboSize.SelectedIndex = 2;                      else if (oam.obj1.size == 3) comboSize.SelectedIndex = 3;                      break;                  case 1:                      if (oam.obj1.size == 0) comboSize.SelectedIndex = 4;                      else if (oam.obj1.size == 1) comboSize.SelectedIndex = 5;                      else if (oam.obj1.size == 2) comboSize.SelectedIndex = 6;                      else if (oam.obj1.size == 3) comboSize.SelectedIndex = 7;                      break;                  case 2:                      if (oam.obj1.size == 0) comboSize.SelectedIndex = 8;                      else if (oam.obj1.size == 1) comboSize.SelectedIndex = 9;                      else if (oam.obj1.size == 2) comboSize.SelectedIndex = 10;                      else if (oam.obj1.size == 3) comboSize.SelectedIndex = 11;                      break;              }
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,Read_Info,The following statement contains a magic number: switch (oam.obj0.shape)              {                  case 0:                      if (oam.obj1.size == 0) comboSize.SelectedIndex = 0;                      else if (oam.obj1.size == 1) comboSize.SelectedIndex = 1;                      else if (oam.obj1.size == 2) comboSize.SelectedIndex = 2;                      else if (oam.obj1.size == 3) comboSize.SelectedIndex = 3;                      break;                  case 1:                      if (oam.obj1.size == 0) comboSize.SelectedIndex = 4;                      else if (oam.obj1.size == 1) comboSize.SelectedIndex = 5;                      else if (oam.obj1.size == 2) comboSize.SelectedIndex = 6;                      else if (oam.obj1.size == 3) comboSize.SelectedIndex = 7;                      break;                  case 2:                      if (oam.obj1.size == 0) comboSize.SelectedIndex = 8;                      else if (oam.obj1.size == 1) comboSize.SelectedIndex = 9;                      else if (oam.obj1.size == 2) comboSize.SelectedIndex = 10;                      else if (oam.obj1.size == 3) comboSize.SelectedIndex = 11;                      break;              }
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,Read_Info,The following statement contains a magic number: switch (oam.obj0.shape)              {                  case 0:                      if (oam.obj1.size == 0) comboSize.SelectedIndex = 0;                      else if (oam.obj1.size == 1) comboSize.SelectedIndex = 1;                      else if (oam.obj1.size == 2) comboSize.SelectedIndex = 2;                      else if (oam.obj1.size == 3) comboSize.SelectedIndex = 3;                      break;                  case 1:                      if (oam.obj1.size == 0) comboSize.SelectedIndex = 4;                      else if (oam.obj1.size == 1) comboSize.SelectedIndex = 5;                      else if (oam.obj1.size == 2) comboSize.SelectedIndex = 6;                      else if (oam.obj1.size == 3) comboSize.SelectedIndex = 7;                      break;                  case 2:                      if (oam.obj1.size == 0) comboSize.SelectedIndex = 8;                      else if (oam.obj1.size == 1) comboSize.SelectedIndex = 9;                      else if (oam.obj1.size == 2) comboSize.SelectedIndex = 10;                      else if (oam.obj1.size == 3) comboSize.SelectedIndex = 11;                      break;              }
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,Read_Info,The following statement contains a magic number: switch (oam.obj0.shape)              {                  case 0:                      if (oam.obj1.size == 0) comboSize.SelectedIndex = 0;                      else if (oam.obj1.size == 1) comboSize.SelectedIndex = 1;                      else if (oam.obj1.size == 2) comboSize.SelectedIndex = 2;                      else if (oam.obj1.size == 3) comboSize.SelectedIndex = 3;                      break;                  case 1:                      if (oam.obj1.size == 0) comboSize.SelectedIndex = 4;                      else if (oam.obj1.size == 1) comboSize.SelectedIndex = 5;                      else if (oam.obj1.size == 2) comboSize.SelectedIndex = 6;                      else if (oam.obj1.size == 3) comboSize.SelectedIndex = 7;                      break;                  case 2:                      if (oam.obj1.size == 0) comboSize.SelectedIndex = 8;                      else if (oam.obj1.size == 1) comboSize.SelectedIndex = 9;                      else if (oam.obj1.size == 2) comboSize.SelectedIndex = 10;                      else if (oam.obj1.size == 3) comboSize.SelectedIndex = 11;                      break;              }
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,Read_Info,The following statement contains a magic number: switch (oam.obj0.shape)              {                  case 0:                      if (oam.obj1.size == 0) comboSize.SelectedIndex = 0;                      else if (oam.obj1.size == 1) comboSize.SelectedIndex = 1;                      else if (oam.obj1.size == 2) comboSize.SelectedIndex = 2;                      else if (oam.obj1.size == 3) comboSize.SelectedIndex = 3;                      break;                  case 1:                      if (oam.obj1.size == 0) comboSize.SelectedIndex = 4;                      else if (oam.obj1.size == 1) comboSize.SelectedIndex = 5;                      else if (oam.obj1.size == 2) comboSize.SelectedIndex = 6;                      else if (oam.obj1.size == 3) comboSize.SelectedIndex = 7;                      break;                  case 2:                      if (oam.obj1.size == 0) comboSize.SelectedIndex = 8;                      else if (oam.obj1.size == 1) comboSize.SelectedIndex = 9;                      else if (oam.obj1.size == 2) comboSize.SelectedIndex = 10;                      else if (oam.obj1.size == 3) comboSize.SelectedIndex = 11;                      break;              }
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,Read_Info,The following statement contains a magic number: switch (oam.obj0.shape)              {                  case 0:                      if (oam.obj1.size == 0) comboSize.SelectedIndex = 0;                      else if (oam.obj1.size == 1) comboSize.SelectedIndex = 1;                      else if (oam.obj1.size == 2) comboSize.SelectedIndex = 2;                      else if (oam.obj1.size == 3) comboSize.SelectedIndex = 3;                      break;                  case 1:                      if (oam.obj1.size == 0) comboSize.SelectedIndex = 4;                      else if (oam.obj1.size == 1) comboSize.SelectedIndex = 5;                      else if (oam.obj1.size == 2) comboSize.SelectedIndex = 6;                      else if (oam.obj1.size == 3) comboSize.SelectedIndex = 7;                      break;                  case 2:                      if (oam.obj1.size == 0) comboSize.SelectedIndex = 8;                      else if (oam.obj1.size == 1) comboSize.SelectedIndex = 9;                      else if (oam.obj1.size == 2) comboSize.SelectedIndex = 10;                      else if (oam.obj1.size == 3) comboSize.SelectedIndex = 11;                      break;              }
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,Read_Info,The following statement contains a magic number: switch (oam.obj0.shape)              {                  case 0:                      if (oam.obj1.size == 0) comboSize.SelectedIndex = 0;                      else if (oam.obj1.size == 1) comboSize.SelectedIndex = 1;                      else if (oam.obj1.size == 2) comboSize.SelectedIndex = 2;                      else if (oam.obj1.size == 3) comboSize.SelectedIndex = 3;                      break;                  case 1:                      if (oam.obj1.size == 0) comboSize.SelectedIndex = 4;                      else if (oam.obj1.size == 1) comboSize.SelectedIndex = 5;                      else if (oam.obj1.size == 2) comboSize.SelectedIndex = 6;                      else if (oam.obj1.size == 3) comboSize.SelectedIndex = 7;                      break;                  case 2:                      if (oam.obj1.size == 0) comboSize.SelectedIndex = 8;                      else if (oam.obj1.size == 1) comboSize.SelectedIndex = 9;                      else if (oam.obj1.size == 2) comboSize.SelectedIndex = 10;                      else if (oam.obj1.size == 3) comboSize.SelectedIndex = 11;                      break;              }
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,Read_Info,The following statement contains a magic number: switch (oam.obj0.shape)              {                  case 0:                      if (oam.obj1.size == 0) comboSize.SelectedIndex = 0;                      else if (oam.obj1.size == 1) comboSize.SelectedIndex = 1;                      else if (oam.obj1.size == 2) comboSize.SelectedIndex = 2;                      else if (oam.obj1.size == 3) comboSize.SelectedIndex = 3;                      break;                  case 1:                      if (oam.obj1.size == 0) comboSize.SelectedIndex = 4;                      else if (oam.obj1.size == 1) comboSize.SelectedIndex = 5;                      else if (oam.obj1.size == 2) comboSize.SelectedIndex = 6;                      else if (oam.obj1.size == 3) comboSize.SelectedIndex = 7;                      break;                  case 2:                      if (oam.obj1.size == 0) comboSize.SelectedIndex = 8;                      else if (oam.obj1.size == 1) comboSize.SelectedIndex = 9;                      else if (oam.obj1.size == 2) comboSize.SelectedIndex = 10;                      else if (oam.obj1.size == 3) comboSize.SelectedIndex = 11;                      break;              }
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,Read_Info,The following statement contains a magic number: switch (oam.obj0.shape)              {                  case 0:                      if (oam.obj1.size == 0) comboSize.SelectedIndex = 0;                      else if (oam.obj1.size == 1) comboSize.SelectedIndex = 1;                      else if (oam.obj1.size == 2) comboSize.SelectedIndex = 2;                      else if (oam.obj1.size == 3) comboSize.SelectedIndex = 3;                      break;                  case 1:                      if (oam.obj1.size == 0) comboSize.SelectedIndex = 4;                      else if (oam.obj1.size == 1) comboSize.SelectedIndex = 5;                      else if (oam.obj1.size == 2) comboSize.SelectedIndex = 6;                      else if (oam.obj1.size == 3) comboSize.SelectedIndex = 7;                      break;                  case 2:                      if (oam.obj1.size == 0) comboSize.SelectedIndex = 8;                      else if (oam.obj1.size == 1) comboSize.SelectedIndex = 9;                      else if (oam.obj1.size == 2) comboSize.SelectedIndex = 10;                      else if (oam.obj1.size == 3) comboSize.SelectedIndex = 11;                      break;              }
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,Read_Info,The following statement contains a magic number: switch (oam.obj0.shape)              {                  case 0:                      if (oam.obj1.size == 0) comboSize.SelectedIndex = 0;                      else if (oam.obj1.size == 1) comboSize.SelectedIndex = 1;                      else if (oam.obj1.size == 2) comboSize.SelectedIndex = 2;                      else if (oam.obj1.size == 3) comboSize.SelectedIndex = 3;                      break;                  case 1:                      if (oam.obj1.size == 0) comboSize.SelectedIndex = 4;                      else if (oam.obj1.size == 1) comboSize.SelectedIndex = 5;                      else if (oam.obj1.size == 2) comboSize.SelectedIndex = 6;                      else if (oam.obj1.size == 3) comboSize.SelectedIndex = 7;                      break;                  case 2:                      if (oam.obj1.size == 0) comboSize.SelectedIndex = 8;                      else if (oam.obj1.size == 1) comboSize.SelectedIndex = 9;                      else if (oam.obj1.size == 2) comboSize.SelectedIndex = 10;                      else if (oam.obj1.size == 3) comboSize.SelectedIndex = 11;                      break;              }
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,Read_Info,The following statement contains a magic number: switch (oam.obj0.shape)              {                  case 0:                      if (oam.obj1.size == 0) comboSize.SelectedIndex = 0;                      else if (oam.obj1.size == 1) comboSize.SelectedIndex = 1;                      else if (oam.obj1.size == 2) comboSize.SelectedIndex = 2;                      else if (oam.obj1.size == 3) comboSize.SelectedIndex = 3;                      break;                  case 1:                      if (oam.obj1.size == 0) comboSize.SelectedIndex = 4;                      else if (oam.obj1.size == 1) comboSize.SelectedIndex = 5;                      else if (oam.obj1.size == 2) comboSize.SelectedIndex = 6;                      else if (oam.obj1.size == 3) comboSize.SelectedIndex = 7;                      break;                  case 2:                      if (oam.obj1.size == 0) comboSize.SelectedIndex = 8;                      else if (oam.obj1.size == 1) comboSize.SelectedIndex = 9;                      else if (oam.obj1.size == 2) comboSize.SelectedIndex = 10;                      else if (oam.obj1.size == 3) comboSize.SelectedIndex = 11;                      break;              }
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,Read_Info,The following statement contains a magic number: switch (oam.obj0.shape)              {                  case 0:                      if (oam.obj1.size == 0) comboSize.SelectedIndex = 0;                      else if (oam.obj1.size == 1) comboSize.SelectedIndex = 1;                      else if (oam.obj1.size == 2) comboSize.SelectedIndex = 2;                      else if (oam.obj1.size == 3) comboSize.SelectedIndex = 3;                      break;                  case 1:                      if (oam.obj1.size == 0) comboSize.SelectedIndex = 4;                      else if (oam.obj1.size == 1) comboSize.SelectedIndex = 5;                      else if (oam.obj1.size == 2) comboSize.SelectedIndex = 6;                      else if (oam.obj1.size == 3) comboSize.SelectedIndex = 7;                      break;                  case 2:                      if (oam.obj1.size == 0) comboSize.SelectedIndex = 8;                      else if (oam.obj1.size == 1) comboSize.SelectedIndex = 9;                      else if (oam.obj1.size == 2) comboSize.SelectedIndex = 10;                      else if (oam.obj1.size == 3) comboSize.SelectedIndex = 11;                      break;              }
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,Read_Info,The following statement contains a magic number: switch (oam.obj0.shape)              {                  case 0:                      if (oam.obj1.size == 0) comboSize.SelectedIndex = 0;                      else if (oam.obj1.size == 1) comboSize.SelectedIndex = 1;                      else if (oam.obj1.size == 2) comboSize.SelectedIndex = 2;                      else if (oam.obj1.size == 3) comboSize.SelectedIndex = 3;                      break;                  case 1:                      if (oam.obj1.size == 0) comboSize.SelectedIndex = 4;                      else if (oam.obj1.size == 1) comboSize.SelectedIndex = 5;                      else if (oam.obj1.size == 2) comboSize.SelectedIndex = 6;                      else if (oam.obj1.size == 3) comboSize.SelectedIndex = 7;                      break;                  case 2:                      if (oam.obj1.size == 0) comboSize.SelectedIndex = 8;                      else if (oam.obj1.size == 1) comboSize.SelectedIndex = 9;                      else if (oam.obj1.size == 2) comboSize.SelectedIndex = 10;                      else if (oam.obj1.size == 3) comboSize.SelectedIndex = 11;                      break;              }
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,Read_Info,The following statement contains a magic number: switch (oam.obj0.shape)              {                  case 0:                      if (oam.obj1.size == 0) comboSize.SelectedIndex = 0;                      else if (oam.obj1.size == 1) comboSize.SelectedIndex = 1;                      else if (oam.obj1.size == 2) comboSize.SelectedIndex = 2;                      else if (oam.obj1.size == 3) comboSize.SelectedIndex = 3;                      break;                  case 1:                      if (oam.obj1.size == 0) comboSize.SelectedIndex = 4;                      else if (oam.obj1.size == 1) comboSize.SelectedIndex = 5;                      else if (oam.obj1.size == 2) comboSize.SelectedIndex = 6;                      else if (oam.obj1.size == 3) comboSize.SelectedIndex = 7;                      break;                  case 2:                      if (oam.obj1.size == 0) comboSize.SelectedIndex = 8;                      else if (oam.obj1.size == 1) comboSize.SelectedIndex = 9;                      else if (oam.obj1.size == 2) comboSize.SelectedIndex = 10;                      else if (oam.obj1.size == 3) comboSize.SelectedIndex = 11;                      break;              }
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,Read_Info,The following statement contains a magic number: switch (oam.obj0.shape)              {                  case 0:                      if (oam.obj1.size == 0) comboSize.SelectedIndex = 0;                      else if (oam.obj1.size == 1) comboSize.SelectedIndex = 1;                      else if (oam.obj1.size == 2) comboSize.SelectedIndex = 2;                      else if (oam.obj1.size == 3) comboSize.SelectedIndex = 3;                      break;                  case 1:                      if (oam.obj1.size == 0) comboSize.SelectedIndex = 4;                      else if (oam.obj1.size == 1) comboSize.SelectedIndex = 5;                      else if (oam.obj1.size == 2) comboSize.SelectedIndex = 6;                      else if (oam.obj1.size == 3) comboSize.SelectedIndex = 7;                      break;                  case 2:                      if (oam.obj1.size == 0) comboSize.SelectedIndex = 8;                      else if (oam.obj1.size == 1) comboSize.SelectedIndex = 9;                      else if (oam.obj1.size == 2) comboSize.SelectedIndex = 10;                      else if (oam.obj1.size == 3) comboSize.SelectedIndex = 11;                      break;              }
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,Read_Info,The following statement contains a magic number: switch (oam.obj0.shape)              {                  case 0:                      if (oam.obj1.size == 0) comboSize.SelectedIndex = 0;                      else if (oam.obj1.size == 1) comboSize.SelectedIndex = 1;                      else if (oam.obj1.size == 2) comboSize.SelectedIndex = 2;                      else if (oam.obj1.size == 3) comboSize.SelectedIndex = 3;                      break;                  case 1:                      if (oam.obj1.size == 0) comboSize.SelectedIndex = 4;                      else if (oam.obj1.size == 1) comboSize.SelectedIndex = 5;                      else if (oam.obj1.size == 2) comboSize.SelectedIndex = 6;                      else if (oam.obj1.size == 3) comboSize.SelectedIndex = 7;                      break;                  case 2:                      if (oam.obj1.size == 0) comboSize.SelectedIndex = 8;                      else if (oam.obj1.size == 1) comboSize.SelectedIndex = 9;                      else if (oam.obj1.size == 2) comboSize.SelectedIndex = 10;                      else if (oam.obj1.size == 3) comboSize.SelectedIndex = 11;                      break;              }
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,Update_Image,The following statement contains a magic number: numObj2.Value = objs[2];
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,Update_Image,The following statement contains a magic number: picBox.Image = sprite.Get_Image(image' palette' bank' 512' 256' checkGrid.Checked' checkOAM.Checked'                  checkNumbers.Checked' checkTrans.Checked' checkImage.Checked' (checkCurrOAM.Checked ? (int)numOAM.Value : -1));
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,Update_Image,The following statement contains a magic number: picBox.Image = sprite.Get_Image(image' palette' bank' 512' 256' checkGrid.Checked' checkOAM.Checked'                  checkNumbers.Checked' checkTrans.Checked' checkImage.Checked' (checkCurrOAM.Checked ? (int)numOAM.Value : -1));
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,comboSize_SelectedIndexChanged,The following statement contains a magic number: switch (comboSize.SelectedIndex)              {                  case 0:                      bank.oams[(int)numOAM.Value].obj0.shape = 0;                      bank.oams[(int)numOAM.Value].obj1.size = 0;                      break;                  case 1:                      bank.oams[(int)numOAM.Value].obj0.shape = 0;                      bank.oams[(int)numOAM.Value].obj1.size = 1;                      break;                  case 2:                      bank.oams[(int)numOAM.Value].obj0.shape = 0;                      bank.oams[(int)numOAM.Value].obj1.size = 2;                      break;                  case 3:                      bank.oams[(int)numOAM.Value].obj0.shape = 0;                      bank.oams[(int)numOAM.Value].obj1.size = 3;                      break;                  case 4:                      bank.oams[(int)numOAM.Value].obj0.shape = 1;                      bank.oams[(int)numOAM.Value].obj1.size = 0;                      break;                  case 5:                      bank.oams[(int)numOAM.Value].obj0.shape = 1;                      bank.oams[(int)numOAM.Value].obj1.size = 1;                      break;                  case 6:                      bank.oams[(int)numOAM.Value].obj0.shape = 1;                      bank.oams[(int)numOAM.Value].obj1.size = 2;                      break;                  case 7:                      bank.oams[(int)numOAM.Value].obj0.shape = 1;                      bank.oams[(int)numOAM.Value].obj1.size = 3;                      break;                  case 8:                      bank.oams[(int)numOAM.Value].obj0.shape = 2;                      bank.oams[(int)numOAM.Value].obj1.size = 0;                      break;                  case 9:                      bank.oams[(int)numOAM.Value].obj0.shape = 2;                      bank.oams[(int)numOAM.Value].obj1.size = 1;                      break;                  case 10:                      bank.oams[(int)numOAM.Value].obj0.shape = 2;                      bank.oams[(int)numOAM.Value].obj1.size = 2;                      break;                  case 11:                      bank.oams[(int)numOAM.Value].obj0.shape = 2;                      bank.oams[(int)numOAM.Value].obj1.size = 3;                      break;              }
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,comboSize_SelectedIndexChanged,The following statement contains a magic number: switch (comboSize.SelectedIndex)              {                  case 0:                      bank.oams[(int)numOAM.Value].obj0.shape = 0;                      bank.oams[(int)numOAM.Value].obj1.size = 0;                      break;                  case 1:                      bank.oams[(int)numOAM.Value].obj0.shape = 0;                      bank.oams[(int)numOAM.Value].obj1.size = 1;                      break;                  case 2:                      bank.oams[(int)numOAM.Value].obj0.shape = 0;                      bank.oams[(int)numOAM.Value].obj1.size = 2;                      break;                  case 3:                      bank.oams[(int)numOAM.Value].obj0.shape = 0;                      bank.oams[(int)numOAM.Value].obj1.size = 3;                      break;                  case 4:                      bank.oams[(int)numOAM.Value].obj0.shape = 1;                      bank.oams[(int)numOAM.Value].obj1.size = 0;                      break;                  case 5:                      bank.oams[(int)numOAM.Value].obj0.shape = 1;                      bank.oams[(int)numOAM.Value].obj1.size = 1;                      break;                  case 6:                      bank.oams[(int)numOAM.Value].obj0.shape = 1;                      bank.oams[(int)numOAM.Value].obj1.size = 2;                      break;                  case 7:                      bank.oams[(int)numOAM.Value].obj0.shape = 1;                      bank.oams[(int)numOAM.Value].obj1.size = 3;                      break;                  case 8:                      bank.oams[(int)numOAM.Value].obj0.shape = 2;                      bank.oams[(int)numOAM.Value].obj1.size = 0;                      break;                  case 9:                      bank.oams[(int)numOAM.Value].obj0.shape = 2;                      bank.oams[(int)numOAM.Value].obj1.size = 1;                      break;                  case 10:                      bank.oams[(int)numOAM.Value].obj0.shape = 2;                      bank.oams[(int)numOAM.Value].obj1.size = 2;                      break;                  case 11:                      bank.oams[(int)numOAM.Value].obj0.shape = 2;                      bank.oams[(int)numOAM.Value].obj1.size = 3;                      break;              }
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,comboSize_SelectedIndexChanged,The following statement contains a magic number: switch (comboSize.SelectedIndex)              {                  case 0:                      bank.oams[(int)numOAM.Value].obj0.shape = 0;                      bank.oams[(int)numOAM.Value].obj1.size = 0;                      break;                  case 1:                      bank.oams[(int)numOAM.Value].obj0.shape = 0;                      bank.oams[(int)numOAM.Value].obj1.size = 1;                      break;                  case 2:                      bank.oams[(int)numOAM.Value].obj0.shape = 0;                      bank.oams[(int)numOAM.Value].obj1.size = 2;                      break;                  case 3:                      bank.oams[(int)numOAM.Value].obj0.shape = 0;                      bank.oams[(int)numOAM.Value].obj1.size = 3;                      break;                  case 4:                      bank.oams[(int)numOAM.Value].obj0.shape = 1;                      bank.oams[(int)numOAM.Value].obj1.size = 0;                      break;                  case 5:                      bank.oams[(int)numOAM.Value].obj0.shape = 1;                      bank.oams[(int)numOAM.Value].obj1.size = 1;                      break;                  case 6:                      bank.oams[(int)numOAM.Value].obj0.shape = 1;                      bank.oams[(int)numOAM.Value].obj1.size = 2;                      break;                  case 7:                      bank.oams[(int)numOAM.Value].obj0.shape = 1;                      bank.oams[(int)numOAM.Value].obj1.size = 3;                      break;                  case 8:                      bank.oams[(int)numOAM.Value].obj0.shape = 2;                      bank.oams[(int)numOAM.Value].obj1.size = 0;                      break;                  case 9:                      bank.oams[(int)numOAM.Value].obj0.shape = 2;                      bank.oams[(int)numOAM.Value].obj1.size = 1;                      break;                  case 10:                      bank.oams[(int)numOAM.Value].obj0.shape = 2;                      bank.oams[(int)numOAM.Value].obj1.size = 2;                      break;                  case 11:                      bank.oams[(int)numOAM.Value].obj0.shape = 2;                      bank.oams[(int)numOAM.Value].obj1.size = 3;                      break;              }
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,comboSize_SelectedIndexChanged,The following statement contains a magic number: switch (comboSize.SelectedIndex)              {                  case 0:                      bank.oams[(int)numOAM.Value].obj0.shape = 0;                      bank.oams[(int)numOAM.Value].obj1.size = 0;                      break;                  case 1:                      bank.oams[(int)numOAM.Value].obj0.shape = 0;                      bank.oams[(int)numOAM.Value].obj1.size = 1;                      break;                  case 2:                      bank.oams[(int)numOAM.Value].obj0.shape = 0;                      bank.oams[(int)numOAM.Value].obj1.size = 2;                      break;                  case 3:                      bank.oams[(int)numOAM.Value].obj0.shape = 0;                      bank.oams[(int)numOAM.Value].obj1.size = 3;                      break;                  case 4:                      bank.oams[(int)numOAM.Value].obj0.shape = 1;                      bank.oams[(int)numOAM.Value].obj1.size = 0;                      break;                  case 5:                      bank.oams[(int)numOAM.Value].obj0.shape = 1;                      bank.oams[(int)numOAM.Value].obj1.size = 1;                      break;                  case 6:                      bank.oams[(int)numOAM.Value].obj0.shape = 1;                      bank.oams[(int)numOAM.Value].obj1.size = 2;                      break;                  case 7:                      bank.oams[(int)numOAM.Value].obj0.shape = 1;                      bank.oams[(int)numOAM.Value].obj1.size = 3;                      break;                  case 8:                      bank.oams[(int)numOAM.Value].obj0.shape = 2;                      bank.oams[(int)numOAM.Value].obj1.size = 0;                      break;                  case 9:                      bank.oams[(int)numOAM.Value].obj0.shape = 2;                      bank.oams[(int)numOAM.Value].obj1.size = 1;                      break;                  case 10:                      bank.oams[(int)numOAM.Value].obj0.shape = 2;                      bank.oams[(int)numOAM.Value].obj1.size = 2;                      break;                  case 11:                      bank.oams[(int)numOAM.Value].obj0.shape = 2;                      bank.oams[(int)numOAM.Value].obj1.size = 3;                      break;              }
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,comboSize_SelectedIndexChanged,The following statement contains a magic number: switch (comboSize.SelectedIndex)              {                  case 0:                      bank.oams[(int)numOAM.Value].obj0.shape = 0;                      bank.oams[(int)numOAM.Value].obj1.size = 0;                      break;                  case 1:                      bank.oams[(int)numOAM.Value].obj0.shape = 0;                      bank.oams[(int)numOAM.Value].obj1.size = 1;                      break;                  case 2:                      bank.oams[(int)numOAM.Value].obj0.shape = 0;                      bank.oams[(int)numOAM.Value].obj1.size = 2;                      break;                  case 3:                      bank.oams[(int)numOAM.Value].obj0.shape = 0;                      bank.oams[(int)numOAM.Value].obj1.size = 3;                      break;                  case 4:                      bank.oams[(int)numOAM.Value].obj0.shape = 1;                      bank.oams[(int)numOAM.Value].obj1.size = 0;                      break;                  case 5:                      bank.oams[(int)numOAM.Value].obj0.shape = 1;                      bank.oams[(int)numOAM.Value].obj1.size = 1;                      break;                  case 6:                      bank.oams[(int)numOAM.Value].obj0.shape = 1;                      bank.oams[(int)numOAM.Value].obj1.size = 2;                      break;                  case 7:                      bank.oams[(int)numOAM.Value].obj0.shape = 1;                      bank.oams[(int)numOAM.Value].obj1.size = 3;                      break;                  case 8:                      bank.oams[(int)numOAM.Value].obj0.shape = 2;                      bank.oams[(int)numOAM.Value].obj1.size = 0;                      break;                  case 9:                      bank.oams[(int)numOAM.Value].obj0.shape = 2;                      bank.oams[(int)numOAM.Value].obj1.size = 1;                      break;                  case 10:                      bank.oams[(int)numOAM.Value].obj0.shape = 2;                      bank.oams[(int)numOAM.Value].obj1.size = 2;                      break;                  case 11:                      bank.oams[(int)numOAM.Value].obj0.shape = 2;                      bank.oams[(int)numOAM.Value].obj1.size = 3;                      break;              }
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,comboSize_SelectedIndexChanged,The following statement contains a magic number: switch (comboSize.SelectedIndex)              {                  case 0:                      bank.oams[(int)numOAM.Value].obj0.shape = 0;                      bank.oams[(int)numOAM.Value].obj1.size = 0;                      break;                  case 1:                      bank.oams[(int)numOAM.Value].obj0.shape = 0;                      bank.oams[(int)numOAM.Value].obj1.size = 1;                      break;                  case 2:                      bank.oams[(int)numOAM.Value].obj0.shape = 0;                      bank.oams[(int)numOAM.Value].obj1.size = 2;                      break;                  case 3:                      bank.oams[(int)numOAM.Value].obj0.shape = 0;                      bank.oams[(int)numOAM.Value].obj1.size = 3;                      break;                  case 4:                      bank.oams[(int)numOAM.Value].obj0.shape = 1;                      bank.oams[(int)numOAM.Value].obj1.size = 0;                      break;                  case 5:                      bank.oams[(int)numOAM.Value].obj0.shape = 1;                      bank.oams[(int)numOAM.Value].obj1.size = 1;                      break;                  case 6:                      bank.oams[(int)numOAM.Value].obj0.shape = 1;                      bank.oams[(int)numOAM.Value].obj1.size = 2;                      break;                  case 7:                      bank.oams[(int)numOAM.Value].obj0.shape = 1;                      bank.oams[(int)numOAM.Value].obj1.size = 3;                      break;                  case 8:                      bank.oams[(int)numOAM.Value].obj0.shape = 2;                      bank.oams[(int)numOAM.Value].obj1.size = 0;                      break;                  case 9:                      bank.oams[(int)numOAM.Value].obj0.shape = 2;                      bank.oams[(int)numOAM.Value].obj1.size = 1;                      break;                  case 10:                      bank.oams[(int)numOAM.Value].obj0.shape = 2;                      bank.oams[(int)numOAM.Value].obj1.size = 2;                      break;                  case 11:                      bank.oams[(int)numOAM.Value].obj0.shape = 2;                      bank.oams[(int)numOAM.Value].obj1.size = 3;                      break;              }
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,comboSize_SelectedIndexChanged,The following statement contains a magic number: switch (comboSize.SelectedIndex)              {                  case 0:                      bank.oams[(int)numOAM.Value].obj0.shape = 0;                      bank.oams[(int)numOAM.Value].obj1.size = 0;                      break;                  case 1:                      bank.oams[(int)numOAM.Value].obj0.shape = 0;                      bank.oams[(int)numOAM.Value].obj1.size = 1;                      break;                  case 2:                      bank.oams[(int)numOAM.Value].obj0.shape = 0;                      bank.oams[(int)numOAM.Value].obj1.size = 2;                      break;                  case 3:                      bank.oams[(int)numOAM.Value].obj0.shape = 0;                      bank.oams[(int)numOAM.Value].obj1.size = 3;                      break;                  case 4:                      bank.oams[(int)numOAM.Value].obj0.shape = 1;                      bank.oams[(int)numOAM.Value].obj1.size = 0;                      break;                  case 5:                      bank.oams[(int)numOAM.Value].obj0.shape = 1;                      bank.oams[(int)numOAM.Value].obj1.size = 1;                      break;                  case 6:                      bank.oams[(int)numOAM.Value].obj0.shape = 1;                      bank.oams[(int)numOAM.Value].obj1.size = 2;                      break;                  case 7:                      bank.oams[(int)numOAM.Value].obj0.shape = 1;                      bank.oams[(int)numOAM.Value].obj1.size = 3;                      break;                  case 8:                      bank.oams[(int)numOAM.Value].obj0.shape = 2;                      bank.oams[(int)numOAM.Value].obj1.size = 0;                      break;                  case 9:                      bank.oams[(int)numOAM.Value].obj0.shape = 2;                      bank.oams[(int)numOAM.Value].obj1.size = 1;                      break;                  case 10:                      bank.oams[(int)numOAM.Value].obj0.shape = 2;                      bank.oams[(int)numOAM.Value].obj1.size = 2;                      break;                  case 11:                      bank.oams[(int)numOAM.Value].obj0.shape = 2;                      bank.oams[(int)numOAM.Value].obj1.size = 3;                      break;              }
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,comboSize_SelectedIndexChanged,The following statement contains a magic number: switch (comboSize.SelectedIndex)              {                  case 0:                      bank.oams[(int)numOAM.Value].obj0.shape = 0;                      bank.oams[(int)numOAM.Value].obj1.size = 0;                      break;                  case 1:                      bank.oams[(int)numOAM.Value].obj0.shape = 0;                      bank.oams[(int)numOAM.Value].obj1.size = 1;                      break;                  case 2:                      bank.oams[(int)numOAM.Value].obj0.shape = 0;                      bank.oams[(int)numOAM.Value].obj1.size = 2;                      break;                  case 3:                      bank.oams[(int)numOAM.Value].obj0.shape = 0;                      bank.oams[(int)numOAM.Value].obj1.size = 3;                      break;                  case 4:                      bank.oams[(int)numOAM.Value].obj0.shape = 1;                      bank.oams[(int)numOAM.Value].obj1.size = 0;                      break;                  case 5:                      bank.oams[(int)numOAM.Value].obj0.shape = 1;                      bank.oams[(int)numOAM.Value].obj1.size = 1;                      break;                  case 6:                      bank.oams[(int)numOAM.Value].obj0.shape = 1;                      bank.oams[(int)numOAM.Value].obj1.size = 2;                      break;                  case 7:                      bank.oams[(int)numOAM.Value].obj0.shape = 1;                      bank.oams[(int)numOAM.Value].obj1.size = 3;                      break;                  case 8:                      bank.oams[(int)numOAM.Value].obj0.shape = 2;                      bank.oams[(int)numOAM.Value].obj1.size = 0;                      break;                  case 9:                      bank.oams[(int)numOAM.Value].obj0.shape = 2;                      bank.oams[(int)numOAM.Value].obj1.size = 1;                      break;                  case 10:                      bank.oams[(int)numOAM.Value].obj0.shape = 2;                      bank.oams[(int)numOAM.Value].obj1.size = 2;                      break;                  case 11:                      bank.oams[(int)numOAM.Value].obj0.shape = 2;                      bank.oams[(int)numOAM.Value].obj1.size = 3;                      break;              }
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,comboSize_SelectedIndexChanged,The following statement contains a magic number: switch (comboSize.SelectedIndex)              {                  case 0:                      bank.oams[(int)numOAM.Value].obj0.shape = 0;                      bank.oams[(int)numOAM.Value].obj1.size = 0;                      break;                  case 1:                      bank.oams[(int)numOAM.Value].obj0.shape = 0;                      bank.oams[(int)numOAM.Value].obj1.size = 1;                      break;                  case 2:                      bank.oams[(int)numOAM.Value].obj0.shape = 0;                      bank.oams[(int)numOAM.Value].obj1.size = 2;                      break;                  case 3:                      bank.oams[(int)numOAM.Value].obj0.shape = 0;                      bank.oams[(int)numOAM.Value].obj1.size = 3;                      break;                  case 4:                      bank.oams[(int)numOAM.Value].obj0.shape = 1;                      bank.oams[(int)numOAM.Value].obj1.size = 0;                      break;                  case 5:                      bank.oams[(int)numOAM.Value].obj0.shape = 1;                      bank.oams[(int)numOAM.Value].obj1.size = 1;                      break;                  case 6:                      bank.oams[(int)numOAM.Value].obj0.shape = 1;                      bank.oams[(int)numOAM.Value].obj1.size = 2;                      break;                  case 7:                      bank.oams[(int)numOAM.Value].obj0.shape = 1;                      bank.oams[(int)numOAM.Value].obj1.size = 3;                      break;                  case 8:                      bank.oams[(int)numOAM.Value].obj0.shape = 2;                      bank.oams[(int)numOAM.Value].obj1.size = 0;                      break;                  case 9:                      bank.oams[(int)numOAM.Value].obj0.shape = 2;                      bank.oams[(int)numOAM.Value].obj1.size = 1;                      break;                  case 10:                      bank.oams[(int)numOAM.Value].obj0.shape = 2;                      bank.oams[(int)numOAM.Value].obj1.size = 2;                      break;                  case 11:                      bank.oams[(int)numOAM.Value].obj0.shape = 2;                      bank.oams[(int)numOAM.Value].obj1.size = 3;                      break;              }
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,comboSize_SelectedIndexChanged,The following statement contains a magic number: switch (comboSize.SelectedIndex)              {                  case 0:                      bank.oams[(int)numOAM.Value].obj0.shape = 0;                      bank.oams[(int)numOAM.Value].obj1.size = 0;                      break;                  case 1:                      bank.oams[(int)numOAM.Value].obj0.shape = 0;                      bank.oams[(int)numOAM.Value].obj1.size = 1;                      break;                  case 2:                      bank.oams[(int)numOAM.Value].obj0.shape = 0;                      bank.oams[(int)numOAM.Value].obj1.size = 2;                      break;                  case 3:                      bank.oams[(int)numOAM.Value].obj0.shape = 0;                      bank.oams[(int)numOAM.Value].obj1.size = 3;                      break;                  case 4:                      bank.oams[(int)numOAM.Value].obj0.shape = 1;                      bank.oams[(int)numOAM.Value].obj1.size = 0;                      break;                  case 5:                      bank.oams[(int)numOAM.Value].obj0.shape = 1;                      bank.oams[(int)numOAM.Value].obj1.size = 1;                      break;                  case 6:                      bank.oams[(int)numOAM.Value].obj0.shape = 1;                      bank.oams[(int)numOAM.Value].obj1.size = 2;                      break;                  case 7:                      bank.oams[(int)numOAM.Value].obj0.shape = 1;                      bank.oams[(int)numOAM.Value].obj1.size = 3;                      break;                  case 8:                      bank.oams[(int)numOAM.Value].obj0.shape = 2;                      bank.oams[(int)numOAM.Value].obj1.size = 0;                      break;                  case 9:                      bank.oams[(int)numOAM.Value].obj0.shape = 2;                      bank.oams[(int)numOAM.Value].obj1.size = 1;                      break;                  case 10:                      bank.oams[(int)numOAM.Value].obj0.shape = 2;                      bank.oams[(int)numOAM.Value].obj1.size = 2;                      break;                  case 11:                      bank.oams[(int)numOAM.Value].obj0.shape = 2;                      bank.oams[(int)numOAM.Value].obj1.size = 3;                      break;              }
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,comboSize_SelectedIndexChanged,The following statement contains a magic number: switch (comboSize.SelectedIndex)              {                  case 0:                      bank.oams[(int)numOAM.Value].obj0.shape = 0;                      bank.oams[(int)numOAM.Value].obj1.size = 0;                      break;                  case 1:                      bank.oams[(int)numOAM.Value].obj0.shape = 0;                      bank.oams[(int)numOAM.Value].obj1.size = 1;                      break;                  case 2:                      bank.oams[(int)numOAM.Value].obj0.shape = 0;                      bank.oams[(int)numOAM.Value].obj1.size = 2;                      break;                  case 3:                      bank.oams[(int)numOAM.Value].obj0.shape = 0;                      bank.oams[(int)numOAM.Value].obj1.size = 3;                      break;                  case 4:                      bank.oams[(int)numOAM.Value].obj0.shape = 1;                      bank.oams[(int)numOAM.Value].obj1.size = 0;                      break;                  case 5:                      bank.oams[(int)numOAM.Value].obj0.shape = 1;                      bank.oams[(int)numOAM.Value].obj1.size = 1;                      break;                  case 6:                      bank.oams[(int)numOAM.Value].obj0.shape = 1;                      bank.oams[(int)numOAM.Value].obj1.size = 2;                      break;                  case 7:                      bank.oams[(int)numOAM.Value].obj0.shape = 1;                      bank.oams[(int)numOAM.Value].obj1.size = 3;                      break;                  case 8:                      bank.oams[(int)numOAM.Value].obj0.shape = 2;                      bank.oams[(int)numOAM.Value].obj1.size = 0;                      break;                  case 9:                      bank.oams[(int)numOAM.Value].obj0.shape = 2;                      bank.oams[(int)numOAM.Value].obj1.size = 1;                      break;                  case 10:                      bank.oams[(int)numOAM.Value].obj0.shape = 2;                      bank.oams[(int)numOAM.Value].obj1.size = 2;                      break;                  case 11:                      bank.oams[(int)numOAM.Value].obj0.shape = 2;                      bank.oams[(int)numOAM.Value].obj1.size = 3;                      break;              }
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,comboSize_SelectedIndexChanged,The following statement contains a magic number: switch (comboSize.SelectedIndex)              {                  case 0:                      bank.oams[(int)numOAM.Value].obj0.shape = 0;                      bank.oams[(int)numOAM.Value].obj1.size = 0;                      break;                  case 1:                      bank.oams[(int)numOAM.Value].obj0.shape = 0;                      bank.oams[(int)numOAM.Value].obj1.size = 1;                      break;                  case 2:                      bank.oams[(int)numOAM.Value].obj0.shape = 0;                      bank.oams[(int)numOAM.Value].obj1.size = 2;                      break;                  case 3:                      bank.oams[(int)numOAM.Value].obj0.shape = 0;                      bank.oams[(int)numOAM.Value].obj1.size = 3;                      break;                  case 4:                      bank.oams[(int)numOAM.Value].obj0.shape = 1;                      bank.oams[(int)numOAM.Value].obj1.size = 0;                      break;                  case 5:                      bank.oams[(int)numOAM.Value].obj0.shape = 1;                      bank.oams[(int)numOAM.Value].obj1.size = 1;                      break;                  case 6:                      bank.oams[(int)numOAM.Value].obj0.shape = 1;                      bank.oams[(int)numOAM.Value].obj1.size = 2;                      break;                  case 7:                      bank.oams[(int)numOAM.Value].obj0.shape = 1;                      bank.oams[(int)numOAM.Value].obj1.size = 3;                      break;                  case 8:                      bank.oams[(int)numOAM.Value].obj0.shape = 2;                      bank.oams[(int)numOAM.Value].obj1.size = 0;                      break;                  case 9:                      bank.oams[(int)numOAM.Value].obj0.shape = 2;                      bank.oams[(int)numOAM.Value].obj1.size = 1;                      break;                  case 10:                      bank.oams[(int)numOAM.Value].obj0.shape = 2;                      bank.oams[(int)numOAM.Value].obj1.size = 2;                      break;                  case 11:                      bank.oams[(int)numOAM.Value].obj0.shape = 2;                      bank.oams[(int)numOAM.Value].obj1.size = 3;                      break;              }
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,comboSize_SelectedIndexChanged,The following statement contains a magic number: switch (comboSize.SelectedIndex)              {                  case 0:                      bank.oams[(int)numOAM.Value].obj0.shape = 0;                      bank.oams[(int)numOAM.Value].obj1.size = 0;                      break;                  case 1:                      bank.oams[(int)numOAM.Value].obj0.shape = 0;                      bank.oams[(int)numOAM.Value].obj1.size = 1;                      break;                  case 2:                      bank.oams[(int)numOAM.Value].obj0.shape = 0;                      bank.oams[(int)numOAM.Value].obj1.size = 2;                      break;                  case 3:                      bank.oams[(int)numOAM.Value].obj0.shape = 0;                      bank.oams[(int)numOAM.Value].obj1.size = 3;                      break;                  case 4:                      bank.oams[(int)numOAM.Value].obj0.shape = 1;                      bank.oams[(int)numOAM.Value].obj1.size = 0;                      break;                  case 5:                      bank.oams[(int)numOAM.Value].obj0.shape = 1;                      bank.oams[(int)numOAM.Value].obj1.size = 1;                      break;                  case 6:                      bank.oams[(int)numOAM.Value].obj0.shape = 1;                      bank.oams[(int)numOAM.Value].obj1.size = 2;                      break;                  case 7:                      bank.oams[(int)numOAM.Value].obj0.shape = 1;                      bank.oams[(int)numOAM.Value].obj1.size = 3;                      break;                  case 8:                      bank.oams[(int)numOAM.Value].obj0.shape = 2;                      bank.oams[(int)numOAM.Value].obj1.size = 0;                      break;                  case 9:                      bank.oams[(int)numOAM.Value].obj0.shape = 2;                      bank.oams[(int)numOAM.Value].obj1.size = 1;                      break;                  case 10:                      bank.oams[(int)numOAM.Value].obj0.shape = 2;                      bank.oams[(int)numOAM.Value].obj1.size = 2;                      break;                  case 11:                      bank.oams[(int)numOAM.Value].obj0.shape = 2;                      bank.oams[(int)numOAM.Value].obj1.size = 3;                      break;              }
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,comboSize_SelectedIndexChanged,The following statement contains a magic number: switch (comboSize.SelectedIndex)              {                  case 0:                      bank.oams[(int)numOAM.Value].obj0.shape = 0;                      bank.oams[(int)numOAM.Value].obj1.size = 0;                      break;                  case 1:                      bank.oams[(int)numOAM.Value].obj0.shape = 0;                      bank.oams[(int)numOAM.Value].obj1.size = 1;                      break;                  case 2:                      bank.oams[(int)numOAM.Value].obj0.shape = 0;                      bank.oams[(int)numOAM.Value].obj1.size = 2;                      break;                  case 3:                      bank.oams[(int)numOAM.Value].obj0.shape = 0;                      bank.oams[(int)numOAM.Value].obj1.size = 3;                      break;                  case 4:                      bank.oams[(int)numOAM.Value].obj0.shape = 1;                      bank.oams[(int)numOAM.Value].obj1.size = 0;                      break;                  case 5:                      bank.oams[(int)numOAM.Value].obj0.shape = 1;                      bank.oams[(int)numOAM.Value].obj1.size = 1;                      break;                  case 6:                      bank.oams[(int)numOAM.Value].obj0.shape = 1;                      bank.oams[(int)numOAM.Value].obj1.size = 2;                      break;                  case 7:                      bank.oams[(int)numOAM.Value].obj0.shape = 1;                      bank.oams[(int)numOAM.Value].obj1.size = 3;                      break;                  case 8:                      bank.oams[(int)numOAM.Value].obj0.shape = 2;                      bank.oams[(int)numOAM.Value].obj1.size = 0;                      break;                  case 9:                      bank.oams[(int)numOAM.Value].obj0.shape = 2;                      bank.oams[(int)numOAM.Value].obj1.size = 1;                      break;                  case 10:                      bank.oams[(int)numOAM.Value].obj0.shape = 2;                      bank.oams[(int)numOAM.Value].obj1.size = 2;                      break;                  case 11:                      bank.oams[(int)numOAM.Value].obj0.shape = 2;                      bank.oams[(int)numOAM.Value].obj1.size = 3;                      break;              }
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,comboSize_SelectedIndexChanged,The following statement contains a magic number: switch (comboSize.SelectedIndex)              {                  case 0:                      bank.oams[(int)numOAM.Value].obj0.shape = 0;                      bank.oams[(int)numOAM.Value].obj1.size = 0;                      break;                  case 1:                      bank.oams[(int)numOAM.Value].obj0.shape = 0;                      bank.oams[(int)numOAM.Value].obj1.size = 1;                      break;                  case 2:                      bank.oams[(int)numOAM.Value].obj0.shape = 0;                      bank.oams[(int)numOAM.Value].obj1.size = 2;                      break;                  case 3:                      bank.oams[(int)numOAM.Value].obj0.shape = 0;                      bank.oams[(int)numOAM.Value].obj1.size = 3;                      break;                  case 4:                      bank.oams[(int)numOAM.Value].obj0.shape = 1;                      bank.oams[(int)numOAM.Value].obj1.size = 0;                      break;                  case 5:                      bank.oams[(int)numOAM.Value].obj0.shape = 1;                      bank.oams[(int)numOAM.Value].obj1.size = 1;                      break;                  case 6:                      bank.oams[(int)numOAM.Value].obj0.shape = 1;                      bank.oams[(int)numOAM.Value].obj1.size = 2;                      break;                  case 7:                      bank.oams[(int)numOAM.Value].obj0.shape = 1;                      bank.oams[(int)numOAM.Value].obj1.size = 3;                      break;                  case 8:                      bank.oams[(int)numOAM.Value].obj0.shape = 2;                      bank.oams[(int)numOAM.Value].obj1.size = 0;                      break;                  case 9:                      bank.oams[(int)numOAM.Value].obj0.shape = 2;                      bank.oams[(int)numOAM.Value].obj1.size = 1;                      break;                  case 10:                      bank.oams[(int)numOAM.Value].obj0.shape = 2;                      bank.oams[(int)numOAM.Value].obj1.size = 2;                      break;                  case 11:                      bank.oams[(int)numOAM.Value].obj0.shape = 2;                      bank.oams[(int)numOAM.Value].obj1.size = 3;                      break;              }
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,comboSize_SelectedIndexChanged,The following statement contains a magic number: switch (comboSize.SelectedIndex)              {                  case 0:                      bank.oams[(int)numOAM.Value].obj0.shape = 0;                      bank.oams[(int)numOAM.Value].obj1.size = 0;                      break;                  case 1:                      bank.oams[(int)numOAM.Value].obj0.shape = 0;                      bank.oams[(int)numOAM.Value].obj1.size = 1;                      break;                  case 2:                      bank.oams[(int)numOAM.Value].obj0.shape = 0;                      bank.oams[(int)numOAM.Value].obj1.size = 2;                      break;                  case 3:                      bank.oams[(int)numOAM.Value].obj0.shape = 0;                      bank.oams[(int)numOAM.Value].obj1.size = 3;                      break;                  case 4:                      bank.oams[(int)numOAM.Value].obj0.shape = 1;                      bank.oams[(int)numOAM.Value].obj1.size = 0;                      break;                  case 5:                      bank.oams[(int)numOAM.Value].obj0.shape = 1;                      bank.oams[(int)numOAM.Value].obj1.size = 1;                      break;                  case 6:                      bank.oams[(int)numOAM.Value].obj0.shape = 1;                      bank.oams[(int)numOAM.Value].obj1.size = 2;                      break;                  case 7:                      bank.oams[(int)numOAM.Value].obj0.shape = 1;                      bank.oams[(int)numOAM.Value].obj1.size = 3;                      break;                  case 8:                      bank.oams[(int)numOAM.Value].obj0.shape = 2;                      bank.oams[(int)numOAM.Value].obj1.size = 0;                      break;                  case 9:                      bank.oams[(int)numOAM.Value].obj0.shape = 2;                      bank.oams[(int)numOAM.Value].obj1.size = 1;                      break;                  case 10:                      bank.oams[(int)numOAM.Value].obj0.shape = 2;                      bank.oams[(int)numOAM.Value].obj1.size = 2;                      break;                  case 11:                      bank.oams[(int)numOAM.Value].obj0.shape = 2;                      bank.oams[(int)numOAM.Value].obj1.size = 3;                      break;              }
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,comboSize_SelectedIndexChanged,The following statement contains a magic number: switch (comboSize.SelectedIndex)              {                  case 0:                      bank.oams[(int)numOAM.Value].obj0.shape = 0;                      bank.oams[(int)numOAM.Value].obj1.size = 0;                      break;                  case 1:                      bank.oams[(int)numOAM.Value].obj0.shape = 0;                      bank.oams[(int)numOAM.Value].obj1.size = 1;                      break;                  case 2:                      bank.oams[(int)numOAM.Value].obj0.shape = 0;                      bank.oams[(int)numOAM.Value].obj1.size = 2;                      break;                  case 3:                      bank.oams[(int)numOAM.Value].obj0.shape = 0;                      bank.oams[(int)numOAM.Value].obj1.size = 3;                      break;                  case 4:                      bank.oams[(int)numOAM.Value].obj0.shape = 1;                      bank.oams[(int)numOAM.Value].obj1.size = 0;                      break;                  case 5:                      bank.oams[(int)numOAM.Value].obj0.shape = 1;                      bank.oams[(int)numOAM.Value].obj1.size = 1;                      break;                  case 6:                      bank.oams[(int)numOAM.Value].obj0.shape = 1;                      bank.oams[(int)numOAM.Value].obj1.size = 2;                      break;                  case 7:                      bank.oams[(int)numOAM.Value].obj0.shape = 1;                      bank.oams[(int)numOAM.Value].obj1.size = 3;                      break;                  case 8:                      bank.oams[(int)numOAM.Value].obj0.shape = 2;                      bank.oams[(int)numOAM.Value].obj1.size = 0;                      break;                  case 9:                      bank.oams[(int)numOAM.Value].obj0.shape = 2;                      bank.oams[(int)numOAM.Value].obj1.size = 1;                      break;                  case 10:                      bank.oams[(int)numOAM.Value].obj0.shape = 2;                      bank.oams[(int)numOAM.Value].obj1.size = 2;                      break;                  case 11:                      bank.oams[(int)numOAM.Value].obj0.shape = 2;                      bank.oams[(int)numOAM.Value].obj1.size = 3;                      break;              }
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,comboSize_SelectedIndexChanged,The following statement contains a magic number: switch (comboSize.SelectedIndex)              {                  case 0:                      bank.oams[(int)numOAM.Value].obj0.shape = 0;                      bank.oams[(int)numOAM.Value].obj1.size = 0;                      break;                  case 1:                      bank.oams[(int)numOAM.Value].obj0.shape = 0;                      bank.oams[(int)numOAM.Value].obj1.size = 1;                      break;                  case 2:                      bank.oams[(int)numOAM.Value].obj0.shape = 0;                      bank.oams[(int)numOAM.Value].obj1.size = 2;                      break;                  case 3:                      bank.oams[(int)numOAM.Value].obj0.shape = 0;                      bank.oams[(int)numOAM.Value].obj1.size = 3;                      break;                  case 4:                      bank.oams[(int)numOAM.Value].obj0.shape = 1;                      bank.oams[(int)numOAM.Value].obj1.size = 0;                      break;                  case 5:                      bank.oams[(int)numOAM.Value].obj0.shape = 1;                      bank.oams[(int)numOAM.Value].obj1.size = 1;                      break;                  case 6:                      bank.oams[(int)numOAM.Value].obj0.shape = 1;                      bank.oams[(int)numOAM.Value].obj1.size = 2;                      break;                  case 7:                      bank.oams[(int)numOAM.Value].obj0.shape = 1;                      bank.oams[(int)numOAM.Value].obj1.size = 3;                      break;                  case 8:                      bank.oams[(int)numOAM.Value].obj0.shape = 2;                      bank.oams[(int)numOAM.Value].obj1.size = 0;                      break;                  case 9:                      bank.oams[(int)numOAM.Value].obj0.shape = 2;                      bank.oams[(int)numOAM.Value].obj1.size = 1;                      break;                  case 10:                      bank.oams[(int)numOAM.Value].obj0.shape = 2;                      bank.oams[(int)numOAM.Value].obj1.size = 2;                      break;                  case 11:                      bank.oams[(int)numOAM.Value].obj0.shape = 2;                      bank.oams[(int)numOAM.Value].obj1.size = 3;                      break;              }
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,comboSize_SelectedIndexChanged,The following statement contains a magic number: switch (comboSize.SelectedIndex)              {                  case 0:                      bank.oams[(int)numOAM.Value].obj0.shape = 0;                      bank.oams[(int)numOAM.Value].obj1.size = 0;                      break;                  case 1:                      bank.oams[(int)numOAM.Value].obj0.shape = 0;                      bank.oams[(int)numOAM.Value].obj1.size = 1;                      break;                  case 2:                      bank.oams[(int)numOAM.Value].obj0.shape = 0;                      bank.oams[(int)numOAM.Value].obj1.size = 2;                      break;                  case 3:                      bank.oams[(int)numOAM.Value].obj0.shape = 0;                      bank.oams[(int)numOAM.Value].obj1.size = 3;                      break;                  case 4:                      bank.oams[(int)numOAM.Value].obj0.shape = 1;                      bank.oams[(int)numOAM.Value].obj1.size = 0;                      break;                  case 5:                      bank.oams[(int)numOAM.Value].obj0.shape = 1;                      bank.oams[(int)numOAM.Value].obj1.size = 1;                      break;                  case 6:                      bank.oams[(int)numOAM.Value].obj0.shape = 1;                      bank.oams[(int)numOAM.Value].obj1.size = 2;                      break;                  case 7:                      bank.oams[(int)numOAM.Value].obj0.shape = 1;                      bank.oams[(int)numOAM.Value].obj1.size = 3;                      break;                  case 8:                      bank.oams[(int)numOAM.Value].obj0.shape = 2;                      bank.oams[(int)numOAM.Value].obj1.size = 0;                      break;                  case 9:                      bank.oams[(int)numOAM.Value].obj0.shape = 2;                      bank.oams[(int)numOAM.Value].obj1.size = 1;                      break;                  case 10:                      bank.oams[(int)numOAM.Value].obj0.shape = 2;                      bank.oams[(int)numOAM.Value].obj1.size = 2;                      break;                  case 11:                      bank.oams[(int)numOAM.Value].obj0.shape = 2;                      bank.oams[(int)numOAM.Value].obj1.size = 3;                      break;              }
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,comboSize_SelectedIndexChanged,The following statement contains a magic number: switch (comboSize.SelectedIndex)              {                  case 0:                      bank.oams[(int)numOAM.Value].obj0.shape = 0;                      bank.oams[(int)numOAM.Value].obj1.size = 0;                      break;                  case 1:                      bank.oams[(int)numOAM.Value].obj0.shape = 0;                      bank.oams[(int)numOAM.Value].obj1.size = 1;                      break;                  case 2:                      bank.oams[(int)numOAM.Value].obj0.shape = 0;                      bank.oams[(int)numOAM.Value].obj1.size = 2;                      break;                  case 3:                      bank.oams[(int)numOAM.Value].obj0.shape = 0;                      bank.oams[(int)numOAM.Value].obj1.size = 3;                      break;                  case 4:                      bank.oams[(int)numOAM.Value].obj0.shape = 1;                      bank.oams[(int)numOAM.Value].obj1.size = 0;                      break;                  case 5:                      bank.oams[(int)numOAM.Value].obj0.shape = 1;                      bank.oams[(int)numOAM.Value].obj1.size = 1;                      break;                  case 6:                      bank.oams[(int)numOAM.Value].obj0.shape = 1;                      bank.oams[(int)numOAM.Value].obj1.size = 2;                      break;                  case 7:                      bank.oams[(int)numOAM.Value].obj0.shape = 1;                      bank.oams[(int)numOAM.Value].obj1.size = 3;                      break;                  case 8:                      bank.oams[(int)numOAM.Value].obj0.shape = 2;                      bank.oams[(int)numOAM.Value].obj1.size = 0;                      break;                  case 9:                      bank.oams[(int)numOAM.Value].obj0.shape = 2;                      bank.oams[(int)numOAM.Value].obj1.size = 1;                      break;                  case 10:                      bank.oams[(int)numOAM.Value].obj0.shape = 2;                      bank.oams[(int)numOAM.Value].obj1.size = 2;                      break;                  case 11:                      bank.oams[(int)numOAM.Value].obj0.shape = 2;                      bank.oams[(int)numOAM.Value].obj1.size = 3;                      break;              }
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,btnAddOAM_Click,The following statement contains a magic number: newOAM[length].obj0.yOffset = -128;
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,btnAddOAM_Click,The following statement contains a magic number: newOAM[length].obj1.xOffset = -256;
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.groupObj0.Location = new System.Drawing.Point(14' 33);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.groupObj0.Location = new System.Drawing.Point(14' 33);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.groupObj0.Size = new System.Drawing.Size(222' 197);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.groupObj0.Size = new System.Drawing.Size(222' 197);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.comboShape.Location = new System.Drawing.Point(98' 169);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.comboShape.Location = new System.Drawing.Point(98' 169);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.comboShape.Size = new System.Drawing.Size(110' 21);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.comboShape.Size = new System.Drawing.Size(110' 21);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.comboShape.TabIndex = 22;
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.label5.Location = new System.Drawing.Point(7' 143);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.label5.Location = new System.Drawing.Point(7' 143);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.label5.Size = new System.Drawing.Size(39' 13);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.label5.Size = new System.Drawing.Size(39' 13);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.label5.TabIndex = 21;
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.comboDepth.Location = new System.Drawing.Point(98' 140);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.comboDepth.Location = new System.Drawing.Point(98' 140);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.comboDepth.Size = new System.Drawing.Size(110' 21);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.comboDepth.Size = new System.Drawing.Size(110' 21);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.comboDepth.TabIndex = 20;
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.comboObjMode.Location = new System.Drawing.Point(98' 91);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.comboObjMode.Location = new System.Drawing.Point(98' 91);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.comboObjMode.Size = new System.Drawing.Size(110' 21);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.comboObjMode.Size = new System.Drawing.Size(110' 21);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.comboObjMode.TabIndex = 19;
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.checkMosaic.Location = new System.Drawing.Point(9' 117);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.checkMosaic.Location = new System.Drawing.Point(9' 117);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.checkMosaic.Size = new System.Drawing.Size(60' 17);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.checkMosaic.Size = new System.Drawing.Size(60' 17);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.checkMosaic.TabIndex = 17;
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.checkDoubleSize.Location = new System.Drawing.Point(135' 68);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.checkDoubleSize.Location = new System.Drawing.Point(135' 68);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.checkDoubleSize.Size = new System.Drawing.Size(81' 17);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.checkDoubleSize.Size = new System.Drawing.Size(81' 17);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.checkDoubleSize.TabIndex = 16;
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.checkObjdisable.Location = new System.Drawing.Point(36' 68);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.checkObjdisable.Location = new System.Drawing.Point(36' 68);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.checkObjdisable.Size = new System.Drawing.Size(93' 17);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.checkObjdisable.Size = new System.Drawing.Size(93' 17);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.checkObjdisable.TabIndex = 15;
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.checkRSflag.Location = new System.Drawing.Point(10' 45);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.checkRSflag.Location = new System.Drawing.Point(10' 45);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.checkRSflag.Size = new System.Drawing.Size(104' 17);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.checkRSflag.Size = new System.Drawing.Size(104' 17);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.checkRSflag.TabIndex = 14;
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.label4.Location = new System.Drawing.Point(6' 169);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.label4.Location = new System.Drawing.Point(6' 169);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.label4.Size = new System.Drawing.Size(41' 13);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.label4.Size = new System.Drawing.Size(41' 13);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.label4.TabIndex = 4;
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.label3.Location = new System.Drawing.Point(6' 94);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.label3.Location = new System.Drawing.Point(6' 94);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.label3.Size = new System.Drawing.Size(70' 13);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.label3.Size = new System.Drawing.Size(70' 13);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.label3.TabIndex = 2;
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.numYoffset.Location = new System.Drawing.Point(98' 19);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.numYoffset.Location = new System.Drawing.Point(98' 19);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.numYoffset.Maximum = new decimal(new int[] {              127'              0'              0'              0});
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.numYoffset.Minimum = new decimal(new int[] {              128'              0'              0'              -2147483648});
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.numYoffset.Minimum = new decimal(new int[] {              128'              0'              0'              -2147483648});
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.numYoffset.Size = new System.Drawing.Size(60' 20);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.numYoffset.Size = new System.Drawing.Size(60' 20);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(6' 21);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(6' 21);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(56' 13);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(56' 13);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.groupObj1.Location = new System.Drawing.Point(242' 33);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.groupObj1.Location = new System.Drawing.Point(242' 33);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.groupObj1.Size = new System.Drawing.Size(169' 118);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.groupObj1.Size = new System.Drawing.Size(169' 118);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.numSize.Location = new System.Drawing.Point(99' 92);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.numSize.Location = new System.Drawing.Point(99' 92);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.numSize.Maximum = new decimal(new int[] {              3'              0'              0'              0});
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.numSize.Size = new System.Drawing.Size(60' 20);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.numSize.Size = new System.Drawing.Size(60' 20);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.numSize.TabIndex = 8;
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.label7.Location = new System.Drawing.Point(6' 94);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.label7.Location = new System.Drawing.Point(6' 94);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.label7.Size = new System.Drawing.Size(30' 13);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.label7.Size = new System.Drawing.Size(30' 13);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.label7.TabIndex = 7;
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.label6.Location = new System.Drawing.Point(6' 48);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.label6.Location = new System.Drawing.Point(6' 48);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.label6.Size = new System.Drawing.Size(72' 13);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.label6.Size = new System.Drawing.Size(72' 13);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.label6.TabIndex = 5;
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.checkFlipY.Location = new System.Drawing.Point(99' 72);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.checkFlipY.Location = new System.Drawing.Point(99' 72);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.checkFlipY.Size = new System.Drawing.Size(52' 17);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.checkFlipY.Size = new System.Drawing.Size(52' 17);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.checkFlipY.TabIndex = 4;
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.checkFlipX.Location = new System.Drawing.Point(9' 72);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.checkFlipX.Location = new System.Drawing.Point(9' 72);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.checkFlipX.Size = new System.Drawing.Size(52' 17);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.checkFlipX.Size = new System.Drawing.Size(52' 17);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.checkFlipX.TabIndex = 3;
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.numSelectPar.Location = new System.Drawing.Point(99' 46);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.numSelectPar.Location = new System.Drawing.Point(99' 46);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.numSelectPar.Maximum = new decimal(new int[] {              31'              0'              0'              0});
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.numSelectPar.Size = new System.Drawing.Size(60' 20);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.numSelectPar.Size = new System.Drawing.Size(60' 20);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.numSelectPar.TabIndex = 2;
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point(6' 21);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point(6' 21);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size(56' 13);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size(56' 13);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.numXpos.Location = new System.Drawing.Point(99' 19);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.numXpos.Location = new System.Drawing.Point(99' 19);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.numXpos.Maximum = new decimal(new int[] {              255'              0'              0'              0});
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.numXpos.Minimum = new decimal(new int[] {              256'              0'              0'              -2147483648});
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.numXpos.Minimum = new decimal(new int[] {              256'              0'              0'              -2147483648});
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.numXpos.Size = new System.Drawing.Size(60' 20);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.numXpos.Size = new System.Drawing.Size(60' 20);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.groupObj2.Location = new System.Drawing.Point(242' 157);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.groupObj2.Location = new System.Drawing.Point(242' 157);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.groupObj2.Size = new System.Drawing.Size(169' 100);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.groupObj2.Size = new System.Drawing.Size(169' 100);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.numPal.Location = new System.Drawing.Point(99' 71);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.numPal.Location = new System.Drawing.Point(99' 71);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.numPal.Maximum = new decimal(new int[] {              15'              0'              0'              0});
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.numPal.Size = new System.Drawing.Size(60' 20);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.numPal.Size = new System.Drawing.Size(60' 20);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.numPal.TabIndex = 7;
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.label10.Location = new System.Drawing.Point(7' 73);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.label10.Location = new System.Drawing.Point(7' 73);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.label10.Size = new System.Drawing.Size(71' 13);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.label10.Size = new System.Drawing.Size(71' 13);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.label10.TabIndex = 6;
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.numPrio.Location = new System.Drawing.Point(99' 45);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.numPrio.Location = new System.Drawing.Point(99' 45);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.numPrio.Maximum = new decimal(new int[] {              3'              0'              0'              0});
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.numPrio.Size = new System.Drawing.Size(60' 20);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.numPrio.Size = new System.Drawing.Size(60' 20);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.numPrio.TabIndex = 5;
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.label9.Location = new System.Drawing.Point(7' 47);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.label9.Location = new System.Drawing.Point(7' 47);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.label9.Size = new System.Drawing.Size(41' 13);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.label9.Size = new System.Drawing.Size(41' 13);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.label9.TabIndex = 4;
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.numOffset.Location = new System.Drawing.Point(99' 19);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.numOffset.Location = new System.Drawing.Point(99' 19);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.numOffset.Maximum = new decimal(new int[] {              1023'              0'              0'              0});
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.numOffset.Size = new System.Drawing.Size(60' 20);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.numOffset.Size = new System.Drawing.Size(60' 20);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.numOffset.TabIndex = 3;
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.label8.Location = new System.Drawing.Point(7' 21);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.label8.Location = new System.Drawing.Point(7' 21);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.label8.Size = new System.Drawing.Size(56' 13);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.label8.Size = new System.Drawing.Size(56' 13);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.label8.TabIndex = 2;
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.numOAM.Location = new System.Drawing.Point(52' 7);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.numOAM.Location = new System.Drawing.Point(52' 7);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.numOAM.Size = new System.Drawing.Size(60' 20);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.numOAM.Size = new System.Drawing.Size(60' 20);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.numOAM.TabIndex = 2;
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.label11.Location = new System.Drawing.Point(12' 9);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.label11.Location = new System.Drawing.Point(12' 9);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.label11.Size = new System.Drawing.Size(34' 13);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.label11.Size = new System.Drawing.Size(34' 13);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.label11.TabIndex = 3;
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.label12.Location = new System.Drawing.Point(118' 9);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.label12.Location = new System.Drawing.Point(118' 9);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.label12.Size = new System.Drawing.Size(19' 13);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.label12.Size = new System.Drawing.Size(19' 13);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.label12.TabIndex = 4;
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.picBox.Location = new System.Drawing.Point(14' 289);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.picBox.Location = new System.Drawing.Point(14' 289);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.picBox.Size = new System.Drawing.Size(512' 256);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.picBox.Size = new System.Drawing.Size(512' 256);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.picBox.TabIndex = 5;
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.label13.Location = new System.Drawing.Point(13' 270);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.label13.Location = new System.Drawing.Point(13' 270);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.label13.Size = new System.Drawing.Size(48' 13);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.label13.Size = new System.Drawing.Size(48' 13);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.label13.TabIndex = 6;
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.btnSave.Location = new System.Drawing.Point(449' 4);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.btnSave.Location = new System.Drawing.Point(449' 4);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.btnSave.Size = new System.Drawing.Size(80' 40);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.btnSave.Size = new System.Drawing.Size(80' 40);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.btnSave.TabIndex = 7;
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.label14.Location = new System.Drawing.Point(415' 57);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.label14.Location = new System.Drawing.Point(415' 57);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.label14.Size = new System.Drawing.Size(70' 13);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.label14.Size = new System.Drawing.Size(70' 13);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.label14.TabIndex = 8;
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.comboSize.Location = new System.Drawing.Point(415' 73);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.comboSize.Location = new System.Drawing.Point(415' 73);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.comboSize.Size = new System.Drawing.Size(110' 21);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.comboSize.Size = new System.Drawing.Size(110' 21);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.comboSize.TabIndex = 9;
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.checkGrid.Location = new System.Drawing.Point(3' 108);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.checkGrid.Location = new System.Drawing.Point(3' 108);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.checkGrid.Size = new System.Drawing.Size(69' 17);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.checkGrid.Size = new System.Drawing.Size(69' 17);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.checkGrid.TabIndex = 10;
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.checkNumbers.Location = new System.Drawing.Point(3' 85);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.checkNumbers.Location = new System.Drawing.Point(3' 85);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.checkNumbers.Size = new System.Drawing.Size(92' 17);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.checkNumbers.Size = new System.Drawing.Size(92' 17);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.checkNumbers.TabIndex = 11;
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.checkImage.Location = new System.Drawing.Point(3' 62);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.checkImage.Location = new System.Drawing.Point(3' 62);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.checkImage.Size = new System.Drawing.Size(80' 17);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.checkImage.Size = new System.Drawing.Size(80' 17);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.checkImage.TabIndex = 12;
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.checkOAM.Location = new System.Drawing.Point(3' 42);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.checkOAM.Location = new System.Drawing.Point(3' 42);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.checkOAM.Size = new System.Drawing.Size(105' 17);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.checkOAM.Size = new System.Drawing.Size(105' 17);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.checkOAM.TabIndex = 13;
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.checkTrans.Location = new System.Drawing.Point(3' 19);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.checkTrans.Location = new System.Drawing.Point(3' 19);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.checkTrans.Size = new System.Drawing.Size(91' 17);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.checkTrans.Size = new System.Drawing.Size(91' 17);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.checkTrans.TabIndex = 14;
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.groupPreview.Location = new System.Drawing.Point(418' 105);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.groupPreview.Location = new System.Drawing.Point(418' 105);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.groupPreview.Size = new System.Drawing.Size(111' 152);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.groupPreview.Size = new System.Drawing.Size(111' 152);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.groupPreview.TabIndex = 15;
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.checkCurrOAM.Location = new System.Drawing.Point(3' 129);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.checkCurrOAM.Location = new System.Drawing.Point(3' 129);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.checkCurrOAM.Size = new System.Drawing.Size(79' 17);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.checkCurrOAM.Size = new System.Drawing.Size(79' 17);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.checkCurrOAM.TabIndex = 15;
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.btnAddOAM.Location = new System.Drawing.Point(225' 4);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.btnAddOAM.Location = new System.Drawing.Point(225' 4);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.btnAddOAM.Size = new System.Drawing.Size(90' 23);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.btnAddOAM.Size = new System.Drawing.Size(90' 23);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.btnAddOAM.TabIndex = 16;
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.btnRemOAM.Location = new System.Drawing.Point(321' 4);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.btnRemOAM.Location = new System.Drawing.Point(321' 4);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.btnRemOAM.Size = new System.Drawing.Size(90' 23);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.btnRemOAM.Size = new System.Drawing.Size(90' 23);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.btnRemOAM.TabIndex = 17;
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.numNumOAM.Location = new System.Drawing.Point(176' 236);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.numNumOAM.Location = new System.Drawing.Point(176' 236);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.numNumOAM.Maximum = new decimal(new int[] {              65535'              0'              0'              0});
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.numNumOAM.Size = new System.Drawing.Size(60' 20);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.numNumOAM.Size = new System.Drawing.Size(60' 20);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.numNumOAM.TabIndex = 18;
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.label15.Location = new System.Drawing.Point(125' 238);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.label15.Location = new System.Drawing.Point(125' 238);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.label15.Size = new System.Drawing.Size(45' 13);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.label15.Size = new System.Drawing.Size(45' 13);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.label15.TabIndex = 19;
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.numObj0.Location = new System.Drawing.Point(176' 263);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.numObj0.Location = new System.Drawing.Point(176' 263);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.numObj0.Maximum = new decimal(new int[] {              65535'              0'              0'              0});
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.numObj0.Size = new System.Drawing.Size(60' 20);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.numObj0.Size = new System.Drawing.Size(60' 20);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.numObj0.TabIndex = 20;
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.numObj0.Value = new decimal(new int[] {              65535'              0'              0'              0});
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.label16.Location = new System.Drawing.Point(126' 265);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.label16.Location = new System.Drawing.Point(126' 265);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.label16.Size = new System.Drawing.Size(32' 13);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.label16.Size = new System.Drawing.Size(32' 13);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.label16.TabIndex = 21;
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.label17.Location = new System.Drawing.Point(257' 265);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.label17.Location = new System.Drawing.Point(257' 265);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.label17.Size = new System.Drawing.Size(32' 13);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.label17.Size = new System.Drawing.Size(32' 13);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.label17.TabIndex = 23;
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.numObj1.Location = new System.Drawing.Point(307' 263);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.numObj1.Location = new System.Drawing.Point(307' 263);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.numObj1.Maximum = new decimal(new int[] {              65535'              0'              0'              0});
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.numObj1.Size = new System.Drawing.Size(60' 20);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.numObj1.Size = new System.Drawing.Size(60' 20);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.numObj1.TabIndex = 22;
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.numObj1.Value = new decimal(new int[] {              65535'              0'              0'              0});
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.label18.Location = new System.Drawing.Point(383' 265);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.label18.Location = new System.Drawing.Point(383' 265);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.label18.Size = new System.Drawing.Size(32' 13);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.label18.Size = new System.Drawing.Size(32' 13);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.label18.TabIndex = 25;
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.numObj2.Location = new System.Drawing.Point(433' 263);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.numObj2.Location = new System.Drawing.Point(433' 263);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.numObj2.Maximum = new decimal(new int[] {              65535'              0'              0'              0});
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.numObj2.Size = new System.Drawing.Size(60' 20);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.numObj2.Size = new System.Drawing.Size(60' 20);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.numObj2.TabIndex = 24;
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.numObj2.Value = new decimal(new int[] {              65535'              0'              0'              0});
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.checkAddFirst.Location = new System.Drawing.Point(14' 234);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.checkAddFirst.Location = new System.Drawing.Point(14' 234);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.checkAddFirst.Size = new System.Drawing.Size(78' 17);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.checkAddFirst.Size = new System.Drawing.Size(78' 17);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.checkAddFirst.TabIndex = 26;
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 13F);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 13F);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(533' 550);
Magic Number,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(533' 550);
Magic Number,Ekona.Mathematics,Vector3,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Mathematics\Vector3.cs,Vector3,The following statement contains a magic number: this.z = coordinates[2];
Magic Number,Ekona.Mathematics,Vector3,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Mathematics\Vector3.cs,CounterclockwiseAngleBetween,The following statement contains a magic number: betweenAngle = factor > 0 ? betweenAngle : 2.0 * Math.PI - betweenAngle;
Magic Number,Ekona.Mathematics,Vector3,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Mathematics\Vector3.cs,CounterclockwiseAngleBetween,The following statement contains a magic number: angle = 2 * Math.PI - angle;
Magic Number,Ekona.Mathematics,Vector3,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Mathematics\Vector3.cs,Orthogonal,The following statement contains a magic number: i < 3
Magic Number,Ekona.Mathematics,Vector3,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Mathematics\Vector3.cs,Orthogonal,The following statement contains a magic number: result[(maxCoordIndex + 1) % 3] = 0;
Magic Number,Ekona.Mathematics,Vector3,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Mathematics\Vector3.cs,Orthogonal,The following statement contains a magic number: result[(maxCoordIndex + 2) % 3] = -this[maxCoordIndex];
Magic Number,Ekona.Mathematics,Vector3,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Mathematics\Vector3.cs,Orthogonal,The following statement contains a magic number: result[(maxCoordIndex + 2) % 3] = -this[maxCoordIndex];
Magic Number,Ekona.Mathematics,Vector3,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Mathematics\Vector3.cs,Orthogonal,The following statement contains a magic number: result[maxCoordIndex] = this[(maxCoordIndex + 2) % 3];
Magic Number,Ekona.Mathematics,Vector3,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Mathematics\Vector3.cs,Orthogonal,The following statement contains a magic number: result[maxCoordIndex] = this[(maxCoordIndex + 2) % 3];
Missing Default,Ekona.Helper,LNK,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Helper\LNK.cs,Read_Extra,The following switch statement is missing a default case: switch (sign)                  {                      case 0xA0000001:                          extra.environment.blockSize = size;                          extra.environment.blockSignature = sign;                          extra.environment.targetAnsi = Get_String(br' 260' false);                          extra.environment.targetUnicode = Get_String(br' 260' true);                          break;                        case 0xA0000002:                          CONSOLE_PROPS cp = new CONSOLE_PROPS();                          cp.blockSize = size;                          cp.blockSignature = sign;                          cp.fillAttributes = (FILL_ATTRIBUTES)br.ReadUInt16();                          cp.popupFillAttributes = br.ReadUInt16();                          cp.screenBufferSizeX = br.ReadUInt16();                          cp.screenBufferSizeY = br.ReadUInt16();                          cp.windowSizeX = br.ReadUInt16();                          cp.windowSizeY = br.ReadUInt16();                          cp.windowOriginX = br.ReadUInt16();                          cp.windowOriginY = br.ReadUInt16();                          cp.unused1 = br.ReadUInt32();                          cp.unused2 = br.ReadUInt32();                          cp.fontSize = br.ReadUInt32();                          cp.fontFamily = (FONT_FAMILY)br.ReadUInt32();                          cp.fontWeight = br.ReadUInt32();                          cp.faceName = Get_String(br' 32' true);                          cp.cursorSize = br.ReadUInt32();                          cp.fullScreen = br.ReadUInt32();                          cp.quickEdit = br.ReadUInt32();                          cp.insertMode = br.ReadUInt32();                          cp.autoPosition = br.ReadUInt32();                          cp.historyBufferSize = br.ReadUInt32();                          cp.numberOfHistoryBuffer = br.ReadUInt32();                          cp.historyNoDup = br.ReadUInt32();                          cp.colorTable = new uint[0x10];                          for (int i = 0; i < 0x10; i++)                              cp.colorTable[i] = br.ReadUInt32();                          extra.console = cp;                          break;                        case 0xA0000003:                          extra.tracker.blockSize = size;                          extra.tracker.blockSignature = sign;                          extra.tracker.length = br.ReadUInt32();                          extra.tracker.version = br.ReadUInt32();                          extra.tracker.machineID = Get_String(br' 0x10' false);                          extra.tracker.droid = br.ReadBytes(0x20);                          extra.tracker.droidBirth = br.ReadBytes(0x20);                          break;                        case 0xA0000004:                          extra.consoleFe.blockSize = size;                          extra.consoleFe.blockSignature = sign;                          extra.consoleFe.codePage = br.ReadUInt32();                          break;                        case 0xA0000005:                          extra.specialFolder.blockSize = size;                          extra.specialFolder.blockSignature = sign;                          extra.specialFolder.specialFolderID = br.ReadUInt32();                          extra.specialFolder.offset = br.ReadUInt32();                          break;                        case 0xA0000006:                          extra.darwin.blockSize = size;                          extra.darwin.blockSignature = sign;                          extra.darwin.darwinDataAnsi = Get_String(br' 260' false);                          extra.darwin.darwinDataUnicode = Get_String(br' 260' true);                          break;                        case 0xA0000007:                          extra.iconEnvironment.blockSize = size;                          extra.iconEnvironment.blockSignature = sign;                          extra.iconEnvironment.targetAnsi = Get_String(br' 260' false);                          extra.iconEnvironment.targetUnicode = Get_String(br' 260' true);                          break;                        case 0xA0000008:                          extra.shim.blockSize = size;                          extra.shim.blockSignature = sign;                          extra.shim.layerName = Get_String(br' (int)extra.shim.blockSize - 8'  true);                          break;                        case 0xA0000009:                          extra.propertyStore.blockSize = size;                          extra.propertyStore.blockSignature = sign;                          extra.propertyStore.propertyStore = null;                          break;                        case 0xA000000B:                          extra.knownFolder.blockSize = size;                          extra.knownFolder.blockSignature = sign;                          extra.knownFolder.knownFolderID = br.ReadBytes(0x10);                          extra.knownFolder.offset = br.ReadUInt32();                          break;                        case 0xA000000C:                          extra.vistaIDList.blockSize = size;                          extra.vistaIDList.blockSignature = sign;                          extra.vistaIDList.idlist = Read_IDList(br);                          break;                  }
Missing Default,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Indexed_Image,The following switch statement is missing a default case: switch (cf)              {                  case ColorFormat.A3I5: max_colors = 32; bpc = 8; break;                  case ColorFormat.colors4: max_colors = 4; bpc = 2; break;                  case ColorFormat.colors16: max_colors = 16; bpc = 4; break;                  case ColorFormat.colors256: max_colors = 256; bpc = 8; break;                  case ColorFormat.texel4x4: throw new NotSupportedException("Texel 4x4 not supported yet.");                  case ColorFormat.A5I3: max_colors = 8; bpc = 8; break;                  case ColorFormat.direct: max_colors = 0; bpc = 16; break;                  case ColorFormat.colors2: max_colors = 2; bpc = 1; break;                  case ColorFormat.A4I4: max_colors = 16; bpc = 8; break;              }
Missing Default,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Indexed_Image,The following switch statement is missing a default case: switch (cf)                  {                      case ColorFormat.colors2:                      case ColorFormat.colors4:                      case ColorFormat.colors16:                      case ColorFormat.colors256:                          for (int b = 0; b < 8; b += bpc)                              if (j < data.Length)                                  tiles[i] |= (byte)(data[j++' 0] << b);                            i++;                          break;                        case ColorFormat.A3I5:                          byte alpha1 = (byte)(data[j' 1] * 8 / 256);                          byte va1 = (byte)data[j++' 0];                          va1 |= (byte)(alpha1 << 5);                          tiles[i++] = va1;                          break;                      case ColorFormat.A4I4:                          byte alpha3 = (byte)(data[j' 1] * 16 / 256);                          byte va3 = (byte)data[j++' 0];                          va3 |= (byte)(alpha3 << 4);                          tiles[i++] = va3;                          break;                      case ColorFormat.A5I3:                          byte alpha2 = (byte)(data[j' 1] * 32 / 256);                          byte va2 = (byte)data[j++' 0];                          va2 |= (byte)(alpha2 << 3);                          tiles[i++] = va2;                          break;                        case ColorFormat.direct:                          byte[] v = ColorToBGRA555(Color.FromArgb(data[j' 1]' coldif[data[j++' 0]]));                          tiles[i++] = v[0];                          tiles[i++] = v[1];                          break;                        case ColorFormat.texel4x4:                          // Not supported                          break;                  }
Missing Default,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Get_OAMSize,The following switch statement is missing a default case: switch (shape)              {                  case 0x00:  // Square                      switch (size)                      {                          case 0x00:                              imageSize = new Size(8' 8);                              break;                          case 0x01:                              imageSize = new Size(16' 16);                              break;                          case 0x02:                              imageSize = new Size(32' 32);                              break;                          case 0x03:                              imageSize = new Size(64' 64);                              break;                      }                      break;                  case 0x01:  // Horizontal                      switch (size)                      {                          case 0x00:                              imageSize = new Size(16' 8);                              break;                          case 0x01:                              imageSize = new Size(32' 8);                              break;                          case 0x02:                              imageSize = new Size(32' 16);                              break;                          case 0x03:                              imageSize = new Size(64' 32);                              break;                      }                      break;                  case 0x02:  // Vertical                      switch (size)                      {                          case 0x00:                              imageSize = new Size(8' 16);                              break;                          case 0x01:                              imageSize = new Size(8' 32);                              break;                          case 0x02:                              imageSize = new Size(16' 32);                              break;                          case 0x03:                              imageSize = new Size(32' 64);                              break;                      }                      break;              }
Missing Default,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Get_OAMSize,The following switch statement is missing a default case: switch (size)                      {                          case 0x00:                              imageSize = new Size(8' 8);                              break;                          case 0x01:                              imageSize = new Size(16' 16);                              break;                          case 0x02:                              imageSize = new Size(32' 32);                              break;                          case 0x03:                              imageSize = new Size(64' 64);                              break;                      }
Missing Default,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Get_OAMSize,The following switch statement is missing a default case: switch (size)                      {                          case 0x00:                              imageSize = new Size(16' 8);                              break;                          case 0x01:                              imageSize = new Size(32' 8);                              break;                          case 0x02:                              imageSize = new Size(32' 16);                              break;                          case 0x03:                              imageSize = new Size(64' 32);                              break;                      }
Missing Default,Ekona.Images,Actions,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Actions.cs,Get_OAMSize,The following switch statement is missing a default case: switch (size)                      {                          case 0x00:                              imageSize = new Size(8' 16);                              break;                          case 0x01:                              imageSize = new Size(8' 32);                              break;                          case 0x02:                              imageSize = new Size(16' 32);                              break;                          case 0x03:                              imageSize = new Size(32' 64);                              break;                      }
Missing Default,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,Update_Info,The following switch statement is missing a default case: switch (image.FormatColor)              {                  case ColorFormat.A3I5: comboDepth.SelectedIndex = 4; break;                  case ColorFormat.A5I3: comboDepth.SelectedIndex = 5; break;                  case ColorFormat.colors4: comboDepth.SelectedIndex = 6; break;                  case ColorFormat.colors16: comboDepth.SelectedIndex = 0; break;                  case ColorFormat.colors256: comboDepth.SelectedIndex = 1; break;                  case ColorFormat.direct: comboDepth.SelectedIndex = 3; break;                  case ColorFormat.colors2: comboDepth.SelectedIndex = 2; break;              }
Missing Default,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,Update_Info,The following switch statement is missing a default case: switch (image.FormTile)                  {                      case TileForm.Lineal:                          comboBox1.SelectedIndex = 0;                          numericHeight.Minimum = 1;                          numericWidth.Minimum = 1;                          numericWidth.Increment = 1;                          numericHeight.Increment = 1;                          break;                      case TileForm.Horizontal:                          comboBox1.SelectedIndex = 1;                          numericHeight.Minimum = image.TileSize;                          numericWidth.Minimum = image.TileSize;                          numericWidth.Increment = image.TileSize;                          numericHeight.Increment = image.TileSize;                          break;                  }
Missing Default,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,comboDepth_SelectedIndexChanged,The following switch statement is missing a default case: switch (comboDepth.SelectedIndex)              {                  case 0: image.FormatColor = ColorFormat.colors16; break;                  case 1: image.FormatColor = ColorFormat.colors256; break;                  case 2: image.FormatColor = ColorFormat.colors2; break;                  case 3: image.FormatColor = ColorFormat.direct; break;                  case 4: image.FormatColor = ColorFormat.A3I5; break;                  case 5: image.FormatColor = ColorFormat.A5I3; break;                  case 6: image.FormatColor = ColorFormat.colors4; break;                  case 7: image.FormatColor = ColorFormat.A4I4; break;                  case 8: image.FormatColor = ColorFormat.BGRA32; break;                  case 9: image.FormatColor = ColorFormat.ABGR32; break;              }
Missing Default,Ekona.Images,ImageControl,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\ImageControl.cs,comboBox1_SelectedIndexChanged,The following switch statement is missing a default case: switch (comboBox1.SelectedIndex)              {                  case 0:                      image.FormTile = TileForm.Lineal;                      numericHeight.Minimum = 1;                      numericWidth.Minimum = 1;                      numericWidth.Increment = 1;                      numericHeight.Increment = 1;                      break;                  case 1:                      image.FormTile = TileForm.Horizontal;                      numericHeight.Minimum = image.TileSize;                      numericWidth.Minimum = image.TileSize;                      numericWidth.Increment = image.TileSize;                      numericHeight.Increment = image.TileSize;                      break;              }
Missing Default,Ekona.Images.Formats,BMP,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Formats\Bitmap.cs,Read,The following switch statement is missing a default case: switch (bpp)              {                  case 4:                      int divisor = (int)width / 2;                      if (width % 4 != 0)                      {                          int res;                          Math.DivRem((int)width / 2' 4' out res);                          divisor = (int)width / 2 + (4 - res);                      }                        tiles = new byte[tiles.Length * 2];                      for (int h = (int)height - 1; h >= 0; h--)                      {                          for (int w = 0; w < width; w += 2)                          {                              byte b = br.ReadByte();                              tiles[w + h * width] = (byte)(b >> 4);                                if (w + 1 != width)                                  tiles[w + 1 + h * width] = (byte)(b & 0xF);                          }                          br.ReadBytes((int)(divisor - ((float)width / 2)));                      }                      tiles = Helper.BitsConverter.Bits4ToByte(tiles);                      break;                  case 8:                      divisor = (int)width;                      if (width % 4 != 0)                      {                          int res;                          Math.DivRem((int)width' 4' out res);                          divisor = (int)width + (4 - res);                      }                        for (int h = (int)height - 1; h >= 0; h--)                      {                          for (int w = 0; w < width; w++)                          {                              tiles[w + h * width] = br.ReadByte();                          }                          br.ReadBytes(divisor - (int)width);                      }                      break;              }
Missing Default,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,Read_Info,The following switch statement is missing a default case: switch (oam.obj0.shape)              {                  case 0:                      if (oam.obj1.size == 0) comboSize.SelectedIndex = 0;                      else if (oam.obj1.size == 1) comboSize.SelectedIndex = 1;                      else if (oam.obj1.size == 2) comboSize.SelectedIndex = 2;                      else if (oam.obj1.size == 3) comboSize.SelectedIndex = 3;                      break;                  case 1:                      if (oam.obj1.size == 0) comboSize.SelectedIndex = 4;                      else if (oam.obj1.size == 1) comboSize.SelectedIndex = 5;                      else if (oam.obj1.size == 2) comboSize.SelectedIndex = 6;                      else if (oam.obj1.size == 3) comboSize.SelectedIndex = 7;                      break;                  case 2:                      if (oam.obj1.size == 0) comboSize.SelectedIndex = 8;                      else if (oam.obj1.size == 1) comboSize.SelectedIndex = 9;                      else if (oam.obj1.size == 2) comboSize.SelectedIndex = 10;                      else if (oam.obj1.size == 3) comboSize.SelectedIndex = 11;                      break;              }
Missing Default,Ekona.Images.Dialogs,OAMEditor,C:\research\architectureSmells\repos\pleonex_tinke\Ekona\Images\Dialogs\OAMEditor.cs,comboSize_SelectedIndexChanged,The following switch statement is missing a default case: switch (comboSize.SelectedIndex)              {                  case 0:                      bank.oams[(int)numOAM.Value].obj0.shape = 0;                      bank.oams[(int)numOAM.Value].obj1.size = 0;                      break;                  case 1:                      bank.oams[(int)numOAM.Value].obj0.shape = 0;                      bank.oams[(int)numOAM.Value].obj1.size = 1;                      break;                  case 2:                      bank.oams[(int)numOAM.Value].obj0.shape = 0;                      bank.oams[(int)numOAM.Value].obj1.size = 2;                      break;                  case 3:                      bank.oams[(int)numOAM.Value].obj0.shape = 0;                      bank.oams[(int)numOAM.Value].obj1.size = 3;                      break;                  case 4:                      bank.oams[(int)numOAM.Value].obj0.shape = 1;                      bank.oams[(int)numOAM.Value].obj1.size = 0;                      break;                  case 5:                      bank.oams[(int)numOAM.Value].obj0.shape = 1;                      bank.oams[(int)numOAM.Value].obj1.size = 1;                      break;                  case 6:                      bank.oams[(int)numOAM.Value].obj0.shape = 1;                      bank.oams[(int)numOAM.Value].obj1.size = 2;                      break;                  case 7:                      bank.oams[(int)numOAM.Value].obj0.shape = 1;                      bank.oams[(int)numOAM.Value].obj1.size = 3;                      break;                  case 8:                      bank.oams[(int)numOAM.Value].obj0.shape = 2;                      bank.oams[(int)numOAM.Value].obj1.size = 0;                      break;                  case 9:                      bank.oams[(int)numOAM.Value].obj0.shape = 2;                      bank.oams[(int)numOAM.Value].obj1.size = 1;                      break;                  case 10:                      bank.oams[(int)numOAM.Value].obj0.shape = 2;                      bank.oams[(int)numOAM.Value].obj1.size = 2;                      break;                  case 11:                      bank.oams[(int)numOAM.Value].obj0.shape = 2;                      bank.oams[(int)numOAM.Value].obj1.size = 3;                      break;              }
