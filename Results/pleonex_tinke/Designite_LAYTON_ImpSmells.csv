Implementation smell,Namespace,Class,File,Method,Description
Long Method,LAYTON,InfoAni,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoAni.cs,InitializeComponent,The method has 180 lines of code.
Long Method,LAYTON,InfoImage,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoImage.cs,InitializeComponent,The method has 165 lines of code.
Long Method,LAYTON,InfoParte,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoParte.cs,InitializeComponent,The method has 139 lines of code.
Long Method,LAYTON,InfoPicture,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoPicture.cs,InitializeComponent,The method has 106 lines of code.
Long Method,LAYTON,iText,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\iText.cs,Convertir_Especiales,The method has 117 lines of code.
Long Method,LAYTON,NazoTextControl,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\NazoTextControl.cs,InitializeComponent,The method has 104 lines of code.
Complex Method,LAYTON,Ani,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\Ani.cs,SaveToFile,Cyclomatic complexity of the method is 11
Complex Method,LAYTON,Ani,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\Ani.cs,Obtener_ARC,Cyclomatic complexity of the method is 9
Complex Method,LAYTON,Ani,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\Ani.cs,Obtener_ARJ,Cyclomatic complexity of the method is 9
Complex Method,LAYTON,Image,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\Ani.cs,Import,Cyclomatic complexity of the method is 8
Long Statement,LAYTON,Image,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\Ani.cs,Import,The length of the statement  "                        if (tiled) segmentos[i].datos = Actions.HorizontalToLineal(segmentos[i].datos' segmentos[i].width' segmentos[i].height' (int)tipo' 8); " is 134.
Long Statement,LAYTON,Image,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\Ani.cs,Import,The length of the statement  "                            if (tiled) segmentos[i].datos = Actions.HorizontalToLineal(segmentos[i].datos' segmentos[i].width' segmentos[i].height' (int)tipo' 8); " is 134.
Long Statement,LAYTON,Bg,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\Bg.cs,Read,The length of the statement  "            fileIn = Path.GetDirectoryName(temp) + Path.DirectorySeparatorChar + "de" + Path.DirectorySeparatorChar + Path.GetFileName(temp); " is 129.
Long Statement,LAYTON,InfoAni,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoAni.cs,LeerIdioma,The length of the statement  "                System.Xml.Linq.XElement xml = System.Xml.Linq.XElement.Load(Application.StartupPath + System.IO.Path.DirectorySeparatorChar + " is 126.
Long Statement,LAYTON,InfoBG,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoBG.cs,LeerIdioma,The length of the statement  "                System.Xml.Linq.XElement xml = System.Xml.Linq.XElement.Load(Application.StartupPath + System.IO.Path.DirectorySeparatorChar +  " is 126.
Long Statement,LAYTON,InfoPicture,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoPicture.cs,LeerIdioma,The length of the statement  "                System.Xml.Linq.XElement xml = System.Xml.Linq.XElement.Load(Application.StartupPath + System.IO.Path.DirectorySeparatorChar + " is 126.
Long Statement,LAYTON,iText,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\iText.cs,LeerIdioma,The length of the statement  "                System.Xml.Linq.XElement xml = System.Xml.Linq.XElement.Load(Application.StartupPath + System.IO.Path.DirectorySeparatorChar + " is 126.
Long Statement,LAYTON,iText,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\iText.cs,InitializeComponent,The length of the statement  "            this.txtBox.Font = new System.Drawing.Font("Consolas"' 9F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 141.
Long Statement,LAYTON,NazoTextControl,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\NazoTextControl.cs,LeerIdioma,The length of the statement  "                System.Xml.Linq.XElement xml = System.Xml.Linq.XElement.Load(Application.StartupPath + System.IO.Path.DirectorySeparatorChar + " is 126.
Long Statement,LAYTON,NazoTextControl,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\NazoTextControl.cs,InitializeComponent,The length of the statement  "            this.txtBox.Font = new System.Drawing.Font("Consolas"' 9F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 141.
Magic Number,LAYTON,Ani,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\Ani.cs,Show_Info,The following statement contains a magic number: Byte[] compressFile = new Byte[(new FileInfo(archivo).Length) - 4];
Magic Number,LAYTON,Ani,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\Ani.cs,Show_Info,The following statement contains a magic number: Array.Copy(File.ReadAllBytes(archivo)' 4' compressFile' 0' compressFile.Length);
Magic Number,LAYTON,Ani,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\Ani.cs,SaveToFile,The following statement contains a magic number: bw.Write((info.tipo == ColorDepth.Depth4Bit) ? (ushort)3 : (ushort)4);
Magic Number,LAYTON,Ani,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\Ani.cs,SaveToFile,The following statement contains a magic number: bw.Write((info.tipo == ColorDepth.Depth4Bit) ? (ushort)3 : (ushort)4);
Magic Number,LAYTON,Ani,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\Ani.cs,SaveToFile,The following statement contains a magic number: for (int i = 0; i < info.imgs; i++)              {                  bw.Write(info.imagenes[i].width);                  bw.Write(info.imagenes[i].height);                  bw.Write(info.imagenes[i].imgs);                  bw.Write((ushort)0);                  // Write parts (cells)                  for (int j = 0; j < info.imagenes[i].imgs; j++)                  {                      info.imagenes[i].segmentos[j].offSet = (ulong)bw.BaseStream.Position;                      if (info.type == 1)                      {                          bw.Write(info.imagenes[i].segmentos[j].glbX);                          bw.Write(info.imagenes[i].segmentos[j].glbY);                      }                        bw.Write(info.imagenes[i].segmentos[j].posX);                      bw.Write(info.imagenes[i].segmentos[j].posY);                      bw.Write((ushort)Math.Log(info.imagenes[i].segmentos[j].width / 8' 2));                      bw.Write((ushort)Math.Log(info.imagenes[i].segmentos[j].height / 8' 2));                      bw.Write(info.imagenes[i].segmentos[j].datos);                  }              }
Magic Number,LAYTON,Ani,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\Ani.cs,SaveToFile,The following statement contains a magic number: for (int i = 0; i < info.imgs; i++)              {                  bw.Write(info.imagenes[i].width);                  bw.Write(info.imagenes[i].height);                  bw.Write(info.imagenes[i].imgs);                  bw.Write((ushort)0);                  // Write parts (cells)                  for (int j = 0; j < info.imagenes[i].imgs; j++)                  {                      info.imagenes[i].segmentos[j].offSet = (ulong)bw.BaseStream.Position;                      if (info.type == 1)                      {                          bw.Write(info.imagenes[i].segmentos[j].glbX);                          bw.Write(info.imagenes[i].segmentos[j].glbY);                      }                        bw.Write(info.imagenes[i].segmentos[j].posX);                      bw.Write(info.imagenes[i].segmentos[j].posY);                      bw.Write((ushort)Math.Log(info.imagenes[i].segmentos[j].width / 8' 2));                      bw.Write((ushort)Math.Log(info.imagenes[i].segmentos[j].height / 8' 2));                      bw.Write(info.imagenes[i].segmentos[j].datos);                  }              }
Magic Number,LAYTON,Ani,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\Ani.cs,SaveToFile,The following statement contains a magic number: for (int i = 0; i < info.imgs; i++)              {                  bw.Write(info.imagenes[i].width);                  bw.Write(info.imagenes[i].height);                  bw.Write(info.imagenes[i].imgs);                  bw.Write((ushort)0);                  // Write parts (cells)                  for (int j = 0; j < info.imagenes[i].imgs; j++)                  {                      info.imagenes[i].segmentos[j].offSet = (ulong)bw.BaseStream.Position;                      if (info.type == 1)                      {                          bw.Write(info.imagenes[i].segmentos[j].glbX);                          bw.Write(info.imagenes[i].segmentos[j].glbY);                      }                        bw.Write(info.imagenes[i].segmentos[j].posX);                      bw.Write(info.imagenes[i].segmentos[j].posY);                      bw.Write((ushort)Math.Log(info.imagenes[i].segmentos[j].width / 8' 2));                      bw.Write((ushort)Math.Log(info.imagenes[i].segmentos[j].height / 8' 2));                      bw.Write(info.imagenes[i].segmentos[j].datos);                  }              }
Magic Number,LAYTON,Ani,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\Ani.cs,SaveToFile,The following statement contains a magic number: for (int i = 0; i < info.imgs; i++)              {                  bw.Write(info.imagenes[i].width);                  bw.Write(info.imagenes[i].height);                  bw.Write(info.imagenes[i].imgs);                  bw.Write((ushort)0);                  // Write parts (cells)                  for (int j = 0; j < info.imagenes[i].imgs; j++)                  {                      info.imagenes[i].segmentos[j].offSet = (ulong)bw.BaseStream.Position;                      if (info.type == 1)                      {                          bw.Write(info.imagenes[i].segmentos[j].glbX);                          bw.Write(info.imagenes[i].segmentos[j].glbY);                      }                        bw.Write(info.imagenes[i].segmentos[j].posX);                      bw.Write(info.imagenes[i].segmentos[j].posY);                      bw.Write((ushort)Math.Log(info.imagenes[i].segmentos[j].width / 8' 2));                      bw.Write((ushort)Math.Log(info.imagenes[i].segmentos[j].height / 8' 2));                      bw.Write(info.imagenes[i].segmentos[j].datos);                  }              }
Magic Number,LAYTON,Ani,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\Ani.cs,Obtener_Paleta,The following statement contains a magic number: paleta.length = (rdr.ReadUInt32() * 2);
Magic Number,LAYTON,Ani,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\Ani.cs,Obtener_Imagen,The following statement contains a magic number: rdr.BaseStream.Seek(2' SeekOrigin.Current);
Magic Number,LAYTON,Ani,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\Ani.cs,Obtener_Imagen,The following statement contains a magic number: for (int i = 0; i < imagen.imgs; i++)              {                  imagen.segmentos[i] = Obtener_Parte(rdr.BaseStream.Position' imagen.tipo);                  rdr.BaseStream.Seek(imagen.segmentos[i].length + 8' SeekOrigin.Current);              }
Magic Number,LAYTON,Ani,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\Ani.cs,Obtener_Parte,The following statement contains a magic number: parte.width = (ushort)Math.Pow(2' 3 + rdr.ReadUInt16());
Magic Number,LAYTON,Ani,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\Ani.cs,Obtener_Parte,The following statement contains a magic number: parte.width = (ushort)Math.Pow(2' 3 + rdr.ReadUInt16());
Magic Number,LAYTON,Ani,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\Ani.cs,Obtener_Parte,The following statement contains a magic number: parte.height = (ushort)Math.Pow(2' 3 + rdr.ReadUInt16());
Magic Number,LAYTON,Ani,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\Ani.cs,Obtener_Parte,The following statement contains a magic number: parte.height = (ushort)Math.Pow(2' 3 + rdr.ReadUInt16());
Magic Number,LAYTON,Ani,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\Ani.cs,Obtener_Parte,The following statement contains a magic number: if (tipo == ColorDepth.Depth8Bit)              {                  parte.length = (uint)parte.width * parte.height;                  parte.datos = rdr.ReadBytes((int)parte.length);              }              else              {                  parte.length = (uint)(parte.width * parte.height) / 2;                  parte.datos = /*Ekona.Helper.BitsConverter.BytesToBit4*/(rdr.ReadBytes((int)parte.length));              }
Magic Number,LAYTON,Ani,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\Ani.cs,Obtener_Final,The following statement contains a magic number: ColorDepth tipo = rdr.ReadUInt16() == 3 ? ColorDepth.Depth4Bit : ColorDepth.Depth8Bit;
Magic Number,LAYTON,Ani,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\Ani.cs,Obtener_Final,The following statement contains a magic number: for (int i = 0; i < imagenes.Length; i++)              {                  imagenes[i] = Obtener_Imagen(rdr.BaseStream.Position' tipo);                  rdr.BaseStream.Position = (long)imagenes[i].segmentos[imagenes[i].imgs - 1].offSet +                      imagenes[i].segmentos[imagenes[i].imgs - 1].length + 8;              }
Magic Number,LAYTON,Ani,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\Ani.cs,Obtener_ARC,The following statement contains a magic number: final.tipo = rdr.ReadUInt16() == 3 ? ColorDepth.Depth4Bit : ColorDepth.Depth8Bit;
Magic Number,LAYTON,Ani,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\Ani.cs,Obtener_ARC,The following statement contains a magic number: for (int i = 0; i < imagenes.Length; i++)              {                  imagenes[i] = Obtener_Imagen(rdr.BaseStream.Position' final.tipo);                  rdr.BaseStream.Position = (long)imagenes[i].segmentos[imagenes[i].imgs - 1].offSet +                      imagenes[i].segmentos[imagenes[i].imgs - 1].length + 8;              }
Magic Number,LAYTON,Ani,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\Ani.cs,Obtener_ARJ,The following statement contains a magic number: final.tipo = rdr.ReadUInt16() == 3 ? ColorDepth.Depth4Bit : ColorDepth.Depth8Bit;
Magic Number,LAYTON,Ani,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\Ani.cs,Obtener_ARJ,The following statement contains a magic number: for (int i = 0; i < imagenes.Length; i++)              {                  imagenes[i] = Obtener_ImagenARJ(rdr.BaseStream.Position' final.tipo);                  rdr.BaseStream.Position = (long)imagenes[i].segmentos[imagenes[i].imgs - 1].offSet +                      imagenes[i].segmentos[imagenes[i].imgs - 1].length + 12;              }
Magic Number,LAYTON,Ani,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\Ani.cs,Obtener_ImagenARJ,The following statement contains a magic number: rdr.BaseStream.Seek(2' SeekOrigin.Current);
Magic Number,LAYTON,Ani,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\Ani.cs,Obtener_ImagenARJ,The following statement contains a magic number: for (int i = 0; i < imagen.imgs; i++)              {                  imagen.segmentos[i] = Obtener_ParteARJ(rdr.BaseStream.Position' imagen.tipo);                  rdr.BaseStream.Seek(imagen.segmentos[i].length + 12' SeekOrigin.Current);              }
Magic Number,LAYTON,Ani,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\Ani.cs,Obtener_ParteARJ,The following statement contains a magic number: parte.width = (ushort)Math.Pow(2' 3 + rdr.ReadUInt16());
Magic Number,LAYTON,Ani,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\Ani.cs,Obtener_ParteARJ,The following statement contains a magic number: parte.width = (ushort)Math.Pow(2' 3 + rdr.ReadUInt16());
Magic Number,LAYTON,Ani,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\Ani.cs,Obtener_ParteARJ,The following statement contains a magic number: parte.height = (ushort)Math.Pow(2' 3 + rdr.ReadUInt16());
Magic Number,LAYTON,Ani,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\Ani.cs,Obtener_ParteARJ,The following statement contains a magic number: parte.height = (ushort)Math.Pow(2' 3 + rdr.ReadUInt16());
Magic Number,LAYTON,Ani,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\Ani.cs,Obtener_ParteARJ,The following statement contains a magic number: if (tipo == ColorDepth.Depth8Bit)              {                  parte.length = (uint)parte.width * parte.height;                  parte.datos = rdr.ReadBytes((int)parte.length);              }              else              {                  parte.length = (uint)(parte.width * parte.height) / 2;                  parte.datos = /*Ekona.Helper.BitsConverter.BytesToBit4*/(rdr.ReadBytes((int)parte.length));              }
Magic Number,LAYTON,Ani,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\Ani.cs,Obtener_PaletaARJ,The following statement contains a magic number: paleta.length = size * 2;
Magic Number,LAYTON,Ani,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\Ani.cs,Transformar_ImagenARJ,The following statement contains a magic number: for (int i = 0; i < imagen.imgs; i++)              {                  byte[] datos = (imagen.tipo == ColorDepth.Depth4Bit)                                     ? Ekona.Helper.BitsConverter.BytesToBit4(imagen.segmentos[i].datos)                                     : imagen.segmentos[i].datos;                  for (int ht = 0; ht < imagen.segmentos[i].height / 8; ht++)                  {                      for (int wt = 0; wt < imagen.segmentos[i].width / 8; wt++)                      {                          for (int h = 0; h < 8; h++)                          {                              for (int w = 0; w < 8; w++)                              {                                  final.SetPixel(w + wt * 8 + imagen.segmentos[i].posX' h + ht * 8 + imagen.segmentos[i].posY'                                      paleta.colores[datos[dato]]);                                  dato++;                              }                          }                      }                  }                  dato = 0;              }
Magic Number,LAYTON,Ani,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\Ani.cs,Transformar_ImagenARJ,The following statement contains a magic number: for (int i = 0; i < imagen.imgs; i++)              {                  byte[] datos = (imagen.tipo == ColorDepth.Depth4Bit)                                     ? Ekona.Helper.BitsConverter.BytesToBit4(imagen.segmentos[i].datos)                                     : imagen.segmentos[i].datos;                  for (int ht = 0; ht < imagen.segmentos[i].height / 8; ht++)                  {                      for (int wt = 0; wt < imagen.segmentos[i].width / 8; wt++)                      {                          for (int h = 0; h < 8; h++)                          {                              for (int w = 0; w < 8; w++)                              {                                  final.SetPixel(w + wt * 8 + imagen.segmentos[i].posX' h + ht * 8 + imagen.segmentos[i].posY'                                      paleta.colores[datos[dato]]);                                  dato++;                              }                          }                      }                  }                  dato = 0;              }
Magic Number,LAYTON,Ani,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\Ani.cs,Transformar_ImagenARJ,The following statement contains a magic number: for (int i = 0; i < imagen.imgs; i++)              {                  byte[] datos = (imagen.tipo == ColorDepth.Depth4Bit)                                     ? Ekona.Helper.BitsConverter.BytesToBit4(imagen.segmentos[i].datos)                                     : imagen.segmentos[i].datos;                  for (int ht = 0; ht < imagen.segmentos[i].height / 8; ht++)                  {                      for (int wt = 0; wt < imagen.segmentos[i].width / 8; wt++)                      {                          for (int h = 0; h < 8; h++)                          {                              for (int w = 0; w < 8; w++)                              {                                  final.SetPixel(w + wt * 8 + imagen.segmentos[i].posX' h + ht * 8 + imagen.segmentos[i].posY'                                      paleta.colores[datos[dato]]);                                  dato++;                              }                          }                      }                  }                  dato = 0;              }
Magic Number,LAYTON,Ani,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\Ani.cs,Transformar_ImagenARJ,The following statement contains a magic number: for (int i = 0; i < imagen.imgs; i++)              {                  byte[] datos = (imagen.tipo == ColorDepth.Depth4Bit)                                     ? Ekona.Helper.BitsConverter.BytesToBit4(imagen.segmentos[i].datos)                                     : imagen.segmentos[i].datos;                  for (int ht = 0; ht < imagen.segmentos[i].height / 8; ht++)                  {                      for (int wt = 0; wt < imagen.segmentos[i].width / 8; wt++)                      {                          for (int h = 0; h < 8; h++)                          {                              for (int w = 0; w < 8; w++)                              {                                  final.SetPixel(w + wt * 8 + imagen.segmentos[i].posX' h + ht * 8 + imagen.segmentos[i].posY'                                      paleta.colores[datos[dato]]);                                  dato++;                              }                          }                      }                  }                  dato = 0;              }
Magic Number,LAYTON,Ani,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\Ani.cs,Transformar_ImagenARJ,The following statement contains a magic number: for (int i = 0; i < imagen.imgs; i++)              {                  byte[] datos = (imagen.tipo == ColorDepth.Depth4Bit)                                     ? Ekona.Helper.BitsConverter.BytesToBit4(imagen.segmentos[i].datos)                                     : imagen.segmentos[i].datos;                  for (int ht = 0; ht < imagen.segmentos[i].height / 8; ht++)                  {                      for (int wt = 0; wt < imagen.segmentos[i].width / 8; wt++)                      {                          for (int h = 0; h < 8; h++)                          {                              for (int w = 0; w < 8; w++)                              {                                  final.SetPixel(w + wt * 8 + imagen.segmentos[i].posX' h + ht * 8 + imagen.segmentos[i].posY'                                      paleta.colores[datos[dato]]);                                  dato++;                              }                          }                      }                  }                  dato = 0;              }
Magic Number,LAYTON,Ani,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\Ani.cs,Transformar_ImagenARJ,The following statement contains a magic number: for (int i = 0; i < imagen.imgs; i++)              {                  byte[] datos = (imagen.tipo == ColorDepth.Depth4Bit)                                     ? Ekona.Helper.BitsConverter.BytesToBit4(imagen.segmentos[i].datos)                                     : imagen.segmentos[i].datos;                  for (int ht = 0; ht < imagen.segmentos[i].height / 8; ht++)                  {                      for (int wt = 0; wt < imagen.segmentos[i].width / 8; wt++)                      {                          for (int h = 0; h < 8; h++)                          {                              for (int w = 0; w < 8; w++)                              {                                  final.SetPixel(w + wt * 8 + imagen.segmentos[i].posX' h + ht * 8 + imagen.segmentos[i].posY'                                      paleta.colores[datos[dato]]);                                  dato++;                              }                          }                      }                  }                  dato = 0;              }
Magic Number,LAYTON,Image,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\Ani.cs,Import,The following statement contains a magic number: if (this.width == bmp.Width && this.height == bmp.Height)                  {                      for (int i = 0; i < imgs; i++)                      {                          Rectangle rect = new Rectangle(                              segmentos[i].posX'                              segmentos[i].posY'                              Math.Min(segmentos[i].width' width - segmentos[i].posX)'                              Math.Min(segmentos[i].height' height - segmentos[i].posY));                          Bitmap cell = bmp.Clone(rect' PixelFormat.Format32bppArgb);                                                    if (rect.Width < segmentos[i].width || rect.Height < segmentos[i].height)                          {                              var newcell = new Bitmap(segmentos[i].width' segmentos[i].height' cell.PixelFormat);                              for (int cx = 0; cx < cell.Width; cx++)                                  for (int cy = 0; cy < cell.Height; cy++)                                      newcell.SetPixel(cx' cy' cell.GetPixel(cx' cy));                                cell = newcell;                          }                            Actions.Indexed_Image(cell' f' out segmentos[i].datos' out pal);                          Actions.Swap_Palette(ref segmentos[i].datos' swapPalette' pal' f' decimal.MaxValue);                          if (tiled) segmentos[i].datos = Actions.HorizontalToLineal(segmentos[i].datos' segmentos[i].width' segmentos[i].height' (int)tipo' 8);                      }                  }                  else                  {                      this.length = 0;                      this.width = (ushort)bmp.Width;                      this.height = (ushort)bmp.Height;                      ushort cellCountHorizontal = (ushort)Math.Ceiling(this.width / 64.0);                      ushort cellCountVertical = (ushort)Math.Ceiling(this.height / 64.0);                      this.imgs = (ushort)(cellCountHorizontal * cellCountVertical);                      this.segmentos = new Parte[imgs];                      for (int x = 0; x < cellCountHorizontal; x++)                      {                          for (int y = 0; y < cellCountVertical; y++)                          {                              int i = (y * cellCountHorizontal + x);                              this.segmentos[i].posX = (ushort)(x * 64);                              this.segmentos[i].posY = (ushort)(y * 64);                              this.segmentos[i].width = (x < cellCountHorizontal - 1 || this.width % 64 == 0) ? (ushort)64 : (ushort)(width % 64);                              this.segmentos[i].height = (y < cellCountVertical - 1 || this.height % 64 == 0) ? (ushort)64 : (ushort)(height % 64);                                Rectangle rect = new Rectangle(segmentos[i].posX' segmentos[i].posY' segmentos[i].width' segmentos[i].height);                              Bitmap cell = bmp.Clone(rect' PixelFormat.Format32bppArgb);                                if (this.segmentos[i].width < 64 || this.segmentos[i].height < 64)                              {                                  if (this.segmentos[i].width < 64)                                  {                                      this.segmentos[i].width = (ushort)(1 << (int)Math.Ceiling(Math.Log(this.segmentos[i].width' 2)));                                      this.segmentos[i].width = Math.Max(this.segmentos[i].width' (ushort)8);                                  }                                    if (this.segmentos[i].height < 64)                                  {                                      this.segmentos[i].height = (ushort)(1 << (int)Math.Ceiling(Math.Log(this.segmentos[i].height' 2)));                                      this.segmentos[i].height = Math.Max(this.segmentos[i].height' (ushort)8);                                  }                                    var newcell = new Bitmap(segmentos[i].width' segmentos[i].height' cell.PixelFormat);                                  for (int cx = 0; cx < cell.Width; cx++)                                      for (int cy = 0; cy < cell.Height; cy++)                                          newcell.SetPixel(cx' cy' cell.GetPixel(cx' cy));                                    cell = newcell;                              }                                Actions.Indexed_Image(cell' f' out segmentos[i].datos' out pal);                              Actions.Swap_Palette(ref segmentos[i].datos' swapPalette' pal' f' decimal.MaxValue);                              if (tiled) segmentos[i].datos = Actions.HorizontalToLineal(segmentos[i].datos' segmentos[i].width' segmentos[i].height' (int)tipo' 8);                                this.segmentos[i].length = (ushort)segmentos[i].datos.Length;                              this.length += this.segmentos[i].length;                          }                      }                  }
Magic Number,LAYTON,Image,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\Ani.cs,Import,The following statement contains a magic number: if (this.width == bmp.Width && this.height == bmp.Height)                  {                      for (int i = 0; i < imgs; i++)                      {                          Rectangle rect = new Rectangle(                              segmentos[i].posX'                              segmentos[i].posY'                              Math.Min(segmentos[i].width' width - segmentos[i].posX)'                              Math.Min(segmentos[i].height' height - segmentos[i].posY));                          Bitmap cell = bmp.Clone(rect' PixelFormat.Format32bppArgb);                                                    if (rect.Width < segmentos[i].width || rect.Height < segmentos[i].height)                          {                              var newcell = new Bitmap(segmentos[i].width' segmentos[i].height' cell.PixelFormat);                              for (int cx = 0; cx < cell.Width; cx++)                                  for (int cy = 0; cy < cell.Height; cy++)                                      newcell.SetPixel(cx' cy' cell.GetPixel(cx' cy));                                cell = newcell;                          }                            Actions.Indexed_Image(cell' f' out segmentos[i].datos' out pal);                          Actions.Swap_Palette(ref segmentos[i].datos' swapPalette' pal' f' decimal.MaxValue);                          if (tiled) segmentos[i].datos = Actions.HorizontalToLineal(segmentos[i].datos' segmentos[i].width' segmentos[i].height' (int)tipo' 8);                      }                  }                  else                  {                      this.length = 0;                      this.width = (ushort)bmp.Width;                      this.height = (ushort)bmp.Height;                      ushort cellCountHorizontal = (ushort)Math.Ceiling(this.width / 64.0);                      ushort cellCountVertical = (ushort)Math.Ceiling(this.height / 64.0);                      this.imgs = (ushort)(cellCountHorizontal * cellCountVertical);                      this.segmentos = new Parte[imgs];                      for (int x = 0; x < cellCountHorizontal; x++)                      {                          for (int y = 0; y < cellCountVertical; y++)                          {                              int i = (y * cellCountHorizontal + x);                              this.segmentos[i].posX = (ushort)(x * 64);                              this.segmentos[i].posY = (ushort)(y * 64);                              this.segmentos[i].width = (x < cellCountHorizontal - 1 || this.width % 64 == 0) ? (ushort)64 : (ushort)(width % 64);                              this.segmentos[i].height = (y < cellCountVertical - 1 || this.height % 64 == 0) ? (ushort)64 : (ushort)(height % 64);                                Rectangle rect = new Rectangle(segmentos[i].posX' segmentos[i].posY' segmentos[i].width' segmentos[i].height);                              Bitmap cell = bmp.Clone(rect' PixelFormat.Format32bppArgb);                                if (this.segmentos[i].width < 64 || this.segmentos[i].height < 64)                              {                                  if (this.segmentos[i].width < 64)                                  {                                      this.segmentos[i].width = (ushort)(1 << (int)Math.Ceiling(Math.Log(this.segmentos[i].width' 2)));                                      this.segmentos[i].width = Math.Max(this.segmentos[i].width' (ushort)8);                                  }                                    if (this.segmentos[i].height < 64)                                  {                                      this.segmentos[i].height = (ushort)(1 << (int)Math.Ceiling(Math.Log(this.segmentos[i].height' 2)));                                      this.segmentos[i].height = Math.Max(this.segmentos[i].height' (ushort)8);                                  }                                    var newcell = new Bitmap(segmentos[i].width' segmentos[i].height' cell.PixelFormat);                                  for (int cx = 0; cx < cell.Width; cx++)                                      for (int cy = 0; cy < cell.Height; cy++)                                          newcell.SetPixel(cx' cy' cell.GetPixel(cx' cy));                                    cell = newcell;                              }                                Actions.Indexed_Image(cell' f' out segmentos[i].datos' out pal);                              Actions.Swap_Palette(ref segmentos[i].datos' swapPalette' pal' f' decimal.MaxValue);                              if (tiled) segmentos[i].datos = Actions.HorizontalToLineal(segmentos[i].datos' segmentos[i].width' segmentos[i].height' (int)tipo' 8);                                this.segmentos[i].length = (ushort)segmentos[i].datos.Length;                              this.length += this.segmentos[i].length;                          }                      }                  }
Magic Number,LAYTON,Image,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\Ani.cs,Import,The following statement contains a magic number: if (this.width == bmp.Width && this.height == bmp.Height)                  {                      for (int i = 0; i < imgs; i++)                      {                          Rectangle rect = new Rectangle(                              segmentos[i].posX'                              segmentos[i].posY'                              Math.Min(segmentos[i].width' width - segmentos[i].posX)'                              Math.Min(segmentos[i].height' height - segmentos[i].posY));                          Bitmap cell = bmp.Clone(rect' PixelFormat.Format32bppArgb);                                                    if (rect.Width < segmentos[i].width || rect.Height < segmentos[i].height)                          {                              var newcell = new Bitmap(segmentos[i].width' segmentos[i].height' cell.PixelFormat);                              for (int cx = 0; cx < cell.Width; cx++)                                  for (int cy = 0; cy < cell.Height; cy++)                                      newcell.SetPixel(cx' cy' cell.GetPixel(cx' cy));                                cell = newcell;                          }                            Actions.Indexed_Image(cell' f' out segmentos[i].datos' out pal);                          Actions.Swap_Palette(ref segmentos[i].datos' swapPalette' pal' f' decimal.MaxValue);                          if (tiled) segmentos[i].datos = Actions.HorizontalToLineal(segmentos[i].datos' segmentos[i].width' segmentos[i].height' (int)tipo' 8);                      }                  }                  else                  {                      this.length = 0;                      this.width = (ushort)bmp.Width;                      this.height = (ushort)bmp.Height;                      ushort cellCountHorizontal = (ushort)Math.Ceiling(this.width / 64.0);                      ushort cellCountVertical = (ushort)Math.Ceiling(this.height / 64.0);                      this.imgs = (ushort)(cellCountHorizontal * cellCountVertical);                      this.segmentos = new Parte[imgs];                      for (int x = 0; x < cellCountHorizontal; x++)                      {                          for (int y = 0; y < cellCountVertical; y++)                          {                              int i = (y * cellCountHorizontal + x);                              this.segmentos[i].posX = (ushort)(x * 64);                              this.segmentos[i].posY = (ushort)(y * 64);                              this.segmentos[i].width = (x < cellCountHorizontal - 1 || this.width % 64 == 0) ? (ushort)64 : (ushort)(width % 64);                              this.segmentos[i].height = (y < cellCountVertical - 1 || this.height % 64 == 0) ? (ushort)64 : (ushort)(height % 64);                                Rectangle rect = new Rectangle(segmentos[i].posX' segmentos[i].posY' segmentos[i].width' segmentos[i].height);                              Bitmap cell = bmp.Clone(rect' PixelFormat.Format32bppArgb);                                if (this.segmentos[i].width < 64 || this.segmentos[i].height < 64)                              {                                  if (this.segmentos[i].width < 64)                                  {                                      this.segmentos[i].width = (ushort)(1 << (int)Math.Ceiling(Math.Log(this.segmentos[i].width' 2)));                                      this.segmentos[i].width = Math.Max(this.segmentos[i].width' (ushort)8);                                  }                                    if (this.segmentos[i].height < 64)                                  {                                      this.segmentos[i].height = (ushort)(1 << (int)Math.Ceiling(Math.Log(this.segmentos[i].height' 2)));                                      this.segmentos[i].height = Math.Max(this.segmentos[i].height' (ushort)8);                                  }                                    var newcell = new Bitmap(segmentos[i].width' segmentos[i].height' cell.PixelFormat);                                  for (int cx = 0; cx < cell.Width; cx++)                                      for (int cy = 0; cy < cell.Height; cy++)                                          newcell.SetPixel(cx' cy' cell.GetPixel(cx' cy));                                    cell = newcell;                              }                                Actions.Indexed_Image(cell' f' out segmentos[i].datos' out pal);                              Actions.Swap_Palette(ref segmentos[i].datos' swapPalette' pal' f' decimal.MaxValue);                              if (tiled) segmentos[i].datos = Actions.HorizontalToLineal(segmentos[i].datos' segmentos[i].width' segmentos[i].height' (int)tipo' 8);                                this.segmentos[i].length = (ushort)segmentos[i].datos.Length;                              this.length += this.segmentos[i].length;                          }                      }                  }
Magic Number,LAYTON,Image,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\Ani.cs,Import,The following statement contains a magic number: if (this.width == bmp.Width && this.height == bmp.Height)                  {                      for (int i = 0; i < imgs; i++)                      {                          Rectangle rect = new Rectangle(                              segmentos[i].posX'                              segmentos[i].posY'                              Math.Min(segmentos[i].width' width - segmentos[i].posX)'                              Math.Min(segmentos[i].height' height - segmentos[i].posY));                          Bitmap cell = bmp.Clone(rect' PixelFormat.Format32bppArgb);                                                    if (rect.Width < segmentos[i].width || rect.Height < segmentos[i].height)                          {                              var newcell = new Bitmap(segmentos[i].width' segmentos[i].height' cell.PixelFormat);                              for (int cx = 0; cx < cell.Width; cx++)                                  for (int cy = 0; cy < cell.Height; cy++)                                      newcell.SetPixel(cx' cy' cell.GetPixel(cx' cy));                                cell = newcell;                          }                            Actions.Indexed_Image(cell' f' out segmentos[i].datos' out pal);                          Actions.Swap_Palette(ref segmentos[i].datos' swapPalette' pal' f' decimal.MaxValue);                          if (tiled) segmentos[i].datos = Actions.HorizontalToLineal(segmentos[i].datos' segmentos[i].width' segmentos[i].height' (int)tipo' 8);                      }                  }                  else                  {                      this.length = 0;                      this.width = (ushort)bmp.Width;                      this.height = (ushort)bmp.Height;                      ushort cellCountHorizontal = (ushort)Math.Ceiling(this.width / 64.0);                      ushort cellCountVertical = (ushort)Math.Ceiling(this.height / 64.0);                      this.imgs = (ushort)(cellCountHorizontal * cellCountVertical);                      this.segmentos = new Parte[imgs];                      for (int x = 0; x < cellCountHorizontal; x++)                      {                          for (int y = 0; y < cellCountVertical; y++)                          {                              int i = (y * cellCountHorizontal + x);                              this.segmentos[i].posX = (ushort)(x * 64);                              this.segmentos[i].posY = (ushort)(y * 64);                              this.segmentos[i].width = (x < cellCountHorizontal - 1 || this.width % 64 == 0) ? (ushort)64 : (ushort)(width % 64);                              this.segmentos[i].height = (y < cellCountVertical - 1 || this.height % 64 == 0) ? (ushort)64 : (ushort)(height % 64);                                Rectangle rect = new Rectangle(segmentos[i].posX' segmentos[i].posY' segmentos[i].width' segmentos[i].height);                              Bitmap cell = bmp.Clone(rect' PixelFormat.Format32bppArgb);                                if (this.segmentos[i].width < 64 || this.segmentos[i].height < 64)                              {                                  if (this.segmentos[i].width < 64)                                  {                                      this.segmentos[i].width = (ushort)(1 << (int)Math.Ceiling(Math.Log(this.segmentos[i].width' 2)));                                      this.segmentos[i].width = Math.Max(this.segmentos[i].width' (ushort)8);                                  }                                    if (this.segmentos[i].height < 64)                                  {                                      this.segmentos[i].height = (ushort)(1 << (int)Math.Ceiling(Math.Log(this.segmentos[i].height' 2)));                                      this.segmentos[i].height = Math.Max(this.segmentos[i].height' (ushort)8);                                  }                                    var newcell = new Bitmap(segmentos[i].width' segmentos[i].height' cell.PixelFormat);                                  for (int cx = 0; cx < cell.Width; cx++)                                      for (int cy = 0; cy < cell.Height; cy++)                                          newcell.SetPixel(cx' cy' cell.GetPixel(cx' cy));                                    cell = newcell;                              }                                Actions.Indexed_Image(cell' f' out segmentos[i].datos' out pal);                              Actions.Swap_Palette(ref segmentos[i].datos' swapPalette' pal' f' decimal.MaxValue);                              if (tiled) segmentos[i].datos = Actions.HorizontalToLineal(segmentos[i].datos' segmentos[i].width' segmentos[i].height' (int)tipo' 8);                                this.segmentos[i].length = (ushort)segmentos[i].datos.Length;                              this.length += this.segmentos[i].length;                          }                      }                  }
Magic Number,LAYTON,Image,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\Ani.cs,Import,The following statement contains a magic number: if (this.width == bmp.Width && this.height == bmp.Height)                  {                      for (int i = 0; i < imgs; i++)                      {                          Rectangle rect = new Rectangle(                              segmentos[i].posX'                              segmentos[i].posY'                              Math.Min(segmentos[i].width' width - segmentos[i].posX)'                              Math.Min(segmentos[i].height' height - segmentos[i].posY));                          Bitmap cell = bmp.Clone(rect' PixelFormat.Format32bppArgb);                                                    if (rect.Width < segmentos[i].width || rect.Height < segmentos[i].height)                          {                              var newcell = new Bitmap(segmentos[i].width' segmentos[i].height' cell.PixelFormat);                              for (int cx = 0; cx < cell.Width; cx++)                                  for (int cy = 0; cy < cell.Height; cy++)                                      newcell.SetPixel(cx' cy' cell.GetPixel(cx' cy));                                cell = newcell;                          }                            Actions.Indexed_Image(cell' f' out segmentos[i].datos' out pal);                          Actions.Swap_Palette(ref segmentos[i].datos' swapPalette' pal' f' decimal.MaxValue);                          if (tiled) segmentos[i].datos = Actions.HorizontalToLineal(segmentos[i].datos' segmentos[i].width' segmentos[i].height' (int)tipo' 8);                      }                  }                  else                  {                      this.length = 0;                      this.width = (ushort)bmp.Width;                      this.height = (ushort)bmp.Height;                      ushort cellCountHorizontal = (ushort)Math.Ceiling(this.width / 64.0);                      ushort cellCountVertical = (ushort)Math.Ceiling(this.height / 64.0);                      this.imgs = (ushort)(cellCountHorizontal * cellCountVertical);                      this.segmentos = new Parte[imgs];                      for (int x = 0; x < cellCountHorizontal; x++)                      {                          for (int y = 0; y < cellCountVertical; y++)                          {                              int i = (y * cellCountHorizontal + x);                              this.segmentos[i].posX = (ushort)(x * 64);                              this.segmentos[i].posY = (ushort)(y * 64);                              this.segmentos[i].width = (x < cellCountHorizontal - 1 || this.width % 64 == 0) ? (ushort)64 : (ushort)(width % 64);                              this.segmentos[i].height = (y < cellCountVertical - 1 || this.height % 64 == 0) ? (ushort)64 : (ushort)(height % 64);                                Rectangle rect = new Rectangle(segmentos[i].posX' segmentos[i].posY' segmentos[i].width' segmentos[i].height);                              Bitmap cell = bmp.Clone(rect' PixelFormat.Format32bppArgb);                                if (this.segmentos[i].width < 64 || this.segmentos[i].height < 64)                              {                                  if (this.segmentos[i].width < 64)                                  {                                      this.segmentos[i].width = (ushort)(1 << (int)Math.Ceiling(Math.Log(this.segmentos[i].width' 2)));                                      this.segmentos[i].width = Math.Max(this.segmentos[i].width' (ushort)8);                                  }                                    if (this.segmentos[i].height < 64)                                  {                                      this.segmentos[i].height = (ushort)(1 << (int)Math.Ceiling(Math.Log(this.segmentos[i].height' 2)));                                      this.segmentos[i].height = Math.Max(this.segmentos[i].height' (ushort)8);                                  }                                    var newcell = new Bitmap(segmentos[i].width' segmentos[i].height' cell.PixelFormat);                                  for (int cx = 0; cx < cell.Width; cx++)                                      for (int cy = 0; cy < cell.Height; cy++)                                          newcell.SetPixel(cx' cy' cell.GetPixel(cx' cy));                                    cell = newcell;                              }                                Actions.Indexed_Image(cell' f' out segmentos[i].datos' out pal);                              Actions.Swap_Palette(ref segmentos[i].datos' swapPalette' pal' f' decimal.MaxValue);                              if (tiled) segmentos[i].datos = Actions.HorizontalToLineal(segmentos[i].datos' segmentos[i].width' segmentos[i].height' (int)tipo' 8);                                this.segmentos[i].length = (ushort)segmentos[i].datos.Length;                              this.length += this.segmentos[i].length;                          }                      }                  }
Magic Number,LAYTON,Image,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\Ani.cs,Import,The following statement contains a magic number: if (this.width == bmp.Width && this.height == bmp.Height)                  {                      for (int i = 0; i < imgs; i++)                      {                          Rectangle rect = new Rectangle(                              segmentos[i].posX'                              segmentos[i].posY'                              Math.Min(segmentos[i].width' width - segmentos[i].posX)'                              Math.Min(segmentos[i].height' height - segmentos[i].posY));                          Bitmap cell = bmp.Clone(rect' PixelFormat.Format32bppArgb);                                                    if (rect.Width < segmentos[i].width || rect.Height < segmentos[i].height)                          {                              var newcell = new Bitmap(segmentos[i].width' segmentos[i].height' cell.PixelFormat);                              for (int cx = 0; cx < cell.Width; cx++)                                  for (int cy = 0; cy < cell.Height; cy++)                                      newcell.SetPixel(cx' cy' cell.GetPixel(cx' cy));                                cell = newcell;                          }                            Actions.Indexed_Image(cell' f' out segmentos[i].datos' out pal);                          Actions.Swap_Palette(ref segmentos[i].datos' swapPalette' pal' f' decimal.MaxValue);                          if (tiled) segmentos[i].datos = Actions.HorizontalToLineal(segmentos[i].datos' segmentos[i].width' segmentos[i].height' (int)tipo' 8);                      }                  }                  else                  {                      this.length = 0;                      this.width = (ushort)bmp.Width;                      this.height = (ushort)bmp.Height;                      ushort cellCountHorizontal = (ushort)Math.Ceiling(this.width / 64.0);                      ushort cellCountVertical = (ushort)Math.Ceiling(this.height / 64.0);                      this.imgs = (ushort)(cellCountHorizontal * cellCountVertical);                      this.segmentos = new Parte[imgs];                      for (int x = 0; x < cellCountHorizontal; x++)                      {                          for (int y = 0; y < cellCountVertical; y++)                          {                              int i = (y * cellCountHorizontal + x);                              this.segmentos[i].posX = (ushort)(x * 64);                              this.segmentos[i].posY = (ushort)(y * 64);                              this.segmentos[i].width = (x < cellCountHorizontal - 1 || this.width % 64 == 0) ? (ushort)64 : (ushort)(width % 64);                              this.segmentos[i].height = (y < cellCountVertical - 1 || this.height % 64 == 0) ? (ushort)64 : (ushort)(height % 64);                                Rectangle rect = new Rectangle(segmentos[i].posX' segmentos[i].posY' segmentos[i].width' segmentos[i].height);                              Bitmap cell = bmp.Clone(rect' PixelFormat.Format32bppArgb);                                if (this.segmentos[i].width < 64 || this.segmentos[i].height < 64)                              {                                  if (this.segmentos[i].width < 64)                                  {                                      this.segmentos[i].width = (ushort)(1 << (int)Math.Ceiling(Math.Log(this.segmentos[i].width' 2)));                                      this.segmentos[i].width = Math.Max(this.segmentos[i].width' (ushort)8);                                  }                                    if (this.segmentos[i].height < 64)                                  {                                      this.segmentos[i].height = (ushort)(1 << (int)Math.Ceiling(Math.Log(this.segmentos[i].height' 2)));                                      this.segmentos[i].height = Math.Max(this.segmentos[i].height' (ushort)8);                                  }                                    var newcell = new Bitmap(segmentos[i].width' segmentos[i].height' cell.PixelFormat);                                  for (int cx = 0; cx < cell.Width; cx++)                                      for (int cy = 0; cy < cell.Height; cy++)                                          newcell.SetPixel(cx' cy' cell.GetPixel(cx' cy));                                    cell = newcell;                              }                                Actions.Indexed_Image(cell' f' out segmentos[i].datos' out pal);                              Actions.Swap_Palette(ref segmentos[i].datos' swapPalette' pal' f' decimal.MaxValue);                              if (tiled) segmentos[i].datos = Actions.HorizontalToLineal(segmentos[i].datos' segmentos[i].width' segmentos[i].height' (int)tipo' 8);                                this.segmentos[i].length = (ushort)segmentos[i].datos.Length;                              this.length += this.segmentos[i].length;                          }                      }                  }
Magic Number,LAYTON,Image,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\Ani.cs,Import,The following statement contains a magic number: if (this.width == bmp.Width && this.height == bmp.Height)                  {                      for (int i = 0; i < imgs; i++)                      {                          Rectangle rect = new Rectangle(                              segmentos[i].posX'                              segmentos[i].posY'                              Math.Min(segmentos[i].width' width - segmentos[i].posX)'                              Math.Min(segmentos[i].height' height - segmentos[i].posY));                          Bitmap cell = bmp.Clone(rect' PixelFormat.Format32bppArgb);                                                    if (rect.Width < segmentos[i].width || rect.Height < segmentos[i].height)                          {                              var newcell = new Bitmap(segmentos[i].width' segmentos[i].height' cell.PixelFormat);                              for (int cx = 0; cx < cell.Width; cx++)                                  for (int cy = 0; cy < cell.Height; cy++)                                      newcell.SetPixel(cx' cy' cell.GetPixel(cx' cy));                                cell = newcell;                          }                            Actions.Indexed_Image(cell' f' out segmentos[i].datos' out pal);                          Actions.Swap_Palette(ref segmentos[i].datos' swapPalette' pal' f' decimal.MaxValue);                          if (tiled) segmentos[i].datos = Actions.HorizontalToLineal(segmentos[i].datos' segmentos[i].width' segmentos[i].height' (int)tipo' 8);                      }                  }                  else                  {                      this.length = 0;                      this.width = (ushort)bmp.Width;                      this.height = (ushort)bmp.Height;                      ushort cellCountHorizontal = (ushort)Math.Ceiling(this.width / 64.0);                      ushort cellCountVertical = (ushort)Math.Ceiling(this.height / 64.0);                      this.imgs = (ushort)(cellCountHorizontal * cellCountVertical);                      this.segmentos = new Parte[imgs];                      for (int x = 0; x < cellCountHorizontal; x++)                      {                          for (int y = 0; y < cellCountVertical; y++)                          {                              int i = (y * cellCountHorizontal + x);                              this.segmentos[i].posX = (ushort)(x * 64);                              this.segmentos[i].posY = (ushort)(y * 64);                              this.segmentos[i].width = (x < cellCountHorizontal - 1 || this.width % 64 == 0) ? (ushort)64 : (ushort)(width % 64);                              this.segmentos[i].height = (y < cellCountVertical - 1 || this.height % 64 == 0) ? (ushort)64 : (ushort)(height % 64);                                Rectangle rect = new Rectangle(segmentos[i].posX' segmentos[i].posY' segmentos[i].width' segmentos[i].height);                              Bitmap cell = bmp.Clone(rect' PixelFormat.Format32bppArgb);                                if (this.segmentos[i].width < 64 || this.segmentos[i].height < 64)                              {                                  if (this.segmentos[i].width < 64)                                  {                                      this.segmentos[i].width = (ushort)(1 << (int)Math.Ceiling(Math.Log(this.segmentos[i].width' 2)));                                      this.segmentos[i].width = Math.Max(this.segmentos[i].width' (ushort)8);                                  }                                    if (this.segmentos[i].height < 64)                                  {                                      this.segmentos[i].height = (ushort)(1 << (int)Math.Ceiling(Math.Log(this.segmentos[i].height' 2)));                                      this.segmentos[i].height = Math.Max(this.segmentos[i].height' (ushort)8);                                  }                                    var newcell = new Bitmap(segmentos[i].width' segmentos[i].height' cell.PixelFormat);                                  for (int cx = 0; cx < cell.Width; cx++)                                      for (int cy = 0; cy < cell.Height; cy++)                                          newcell.SetPixel(cx' cy' cell.GetPixel(cx' cy));                                    cell = newcell;                              }                                Actions.Indexed_Image(cell' f' out segmentos[i].datos' out pal);                              Actions.Swap_Palette(ref segmentos[i].datos' swapPalette' pal' f' decimal.MaxValue);                              if (tiled) segmentos[i].datos = Actions.HorizontalToLineal(segmentos[i].datos' segmentos[i].width' segmentos[i].height' (int)tipo' 8);                                this.segmentos[i].length = (ushort)segmentos[i].datos.Length;                              this.length += this.segmentos[i].length;                          }                      }                  }
Magic Number,LAYTON,Image,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\Ani.cs,Import,The following statement contains a magic number: if (this.width == bmp.Width && this.height == bmp.Height)                  {                      for (int i = 0; i < imgs; i++)                      {                          Rectangle rect = new Rectangle(                              segmentos[i].posX'                              segmentos[i].posY'                              Math.Min(segmentos[i].width' width - segmentos[i].posX)'                              Math.Min(segmentos[i].height' height - segmentos[i].posY));                          Bitmap cell = bmp.Clone(rect' PixelFormat.Format32bppArgb);                                                    if (rect.Width < segmentos[i].width || rect.Height < segmentos[i].height)                          {                              var newcell = new Bitmap(segmentos[i].width' segmentos[i].height' cell.PixelFormat);                              for (int cx = 0; cx < cell.Width; cx++)                                  for (int cy = 0; cy < cell.Height; cy++)                                      newcell.SetPixel(cx' cy' cell.GetPixel(cx' cy));                                cell = newcell;                          }                            Actions.Indexed_Image(cell' f' out segmentos[i].datos' out pal);                          Actions.Swap_Palette(ref segmentos[i].datos' swapPalette' pal' f' decimal.MaxValue);                          if (tiled) segmentos[i].datos = Actions.HorizontalToLineal(segmentos[i].datos' segmentos[i].width' segmentos[i].height' (int)tipo' 8);                      }                  }                  else                  {                      this.length = 0;                      this.width = (ushort)bmp.Width;                      this.height = (ushort)bmp.Height;                      ushort cellCountHorizontal = (ushort)Math.Ceiling(this.width / 64.0);                      ushort cellCountVertical = (ushort)Math.Ceiling(this.height / 64.0);                      this.imgs = (ushort)(cellCountHorizontal * cellCountVertical);                      this.segmentos = new Parte[imgs];                      for (int x = 0; x < cellCountHorizontal; x++)                      {                          for (int y = 0; y < cellCountVertical; y++)                          {                              int i = (y * cellCountHorizontal + x);                              this.segmentos[i].posX = (ushort)(x * 64);                              this.segmentos[i].posY = (ushort)(y * 64);                              this.segmentos[i].width = (x < cellCountHorizontal - 1 || this.width % 64 == 0) ? (ushort)64 : (ushort)(width % 64);                              this.segmentos[i].height = (y < cellCountVertical - 1 || this.height % 64 == 0) ? (ushort)64 : (ushort)(height % 64);                                Rectangle rect = new Rectangle(segmentos[i].posX' segmentos[i].posY' segmentos[i].width' segmentos[i].height);                              Bitmap cell = bmp.Clone(rect' PixelFormat.Format32bppArgb);                                if (this.segmentos[i].width < 64 || this.segmentos[i].height < 64)                              {                                  if (this.segmentos[i].width < 64)                                  {                                      this.segmentos[i].width = (ushort)(1 << (int)Math.Ceiling(Math.Log(this.segmentos[i].width' 2)));                                      this.segmentos[i].width = Math.Max(this.segmentos[i].width' (ushort)8);                                  }                                    if (this.segmentos[i].height < 64)                                  {                                      this.segmentos[i].height = (ushort)(1 << (int)Math.Ceiling(Math.Log(this.segmentos[i].height' 2)));                                      this.segmentos[i].height = Math.Max(this.segmentos[i].height' (ushort)8);                                  }                                    var newcell = new Bitmap(segmentos[i].width' segmentos[i].height' cell.PixelFormat);                                  for (int cx = 0; cx < cell.Width; cx++)                                      for (int cy = 0; cy < cell.Height; cy++)                                          newcell.SetPixel(cx' cy' cell.GetPixel(cx' cy));                                    cell = newcell;                              }                                Actions.Indexed_Image(cell' f' out segmentos[i].datos' out pal);                              Actions.Swap_Palette(ref segmentos[i].datos' swapPalette' pal' f' decimal.MaxValue);                              if (tiled) segmentos[i].datos = Actions.HorizontalToLineal(segmentos[i].datos' segmentos[i].width' segmentos[i].height' (int)tipo' 8);                                this.segmentos[i].length = (ushort)segmentos[i].datos.Length;                              this.length += this.segmentos[i].length;                          }                      }                  }
Magic Number,LAYTON,Image,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\Ani.cs,Import,The following statement contains a magic number: if (this.width == bmp.Width && this.height == bmp.Height)                  {                      for (int i = 0; i < imgs; i++)                      {                          Rectangle rect = new Rectangle(                              segmentos[i].posX'                              segmentos[i].posY'                              Math.Min(segmentos[i].width' width - segmentos[i].posX)'                              Math.Min(segmentos[i].height' height - segmentos[i].posY));                          Bitmap cell = bmp.Clone(rect' PixelFormat.Format32bppArgb);                                                    if (rect.Width < segmentos[i].width || rect.Height < segmentos[i].height)                          {                              var newcell = new Bitmap(segmentos[i].width' segmentos[i].height' cell.PixelFormat);                              for (int cx = 0; cx < cell.Width; cx++)                                  for (int cy = 0; cy < cell.Height; cy++)                                      newcell.SetPixel(cx' cy' cell.GetPixel(cx' cy));                                cell = newcell;                          }                            Actions.Indexed_Image(cell' f' out segmentos[i].datos' out pal);                          Actions.Swap_Palette(ref segmentos[i].datos' swapPalette' pal' f' decimal.MaxValue);                          if (tiled) segmentos[i].datos = Actions.HorizontalToLineal(segmentos[i].datos' segmentos[i].width' segmentos[i].height' (int)tipo' 8);                      }                  }                  else                  {                      this.length = 0;                      this.width = (ushort)bmp.Width;                      this.height = (ushort)bmp.Height;                      ushort cellCountHorizontal = (ushort)Math.Ceiling(this.width / 64.0);                      ushort cellCountVertical = (ushort)Math.Ceiling(this.height / 64.0);                      this.imgs = (ushort)(cellCountHorizontal * cellCountVertical);                      this.segmentos = new Parte[imgs];                      for (int x = 0; x < cellCountHorizontal; x++)                      {                          for (int y = 0; y < cellCountVertical; y++)                          {                              int i = (y * cellCountHorizontal + x);                              this.segmentos[i].posX = (ushort)(x * 64);                              this.segmentos[i].posY = (ushort)(y * 64);                              this.segmentos[i].width = (x < cellCountHorizontal - 1 || this.width % 64 == 0) ? (ushort)64 : (ushort)(width % 64);                              this.segmentos[i].height = (y < cellCountVertical - 1 || this.height % 64 == 0) ? (ushort)64 : (ushort)(height % 64);                                Rectangle rect = new Rectangle(segmentos[i].posX' segmentos[i].posY' segmentos[i].width' segmentos[i].height);                              Bitmap cell = bmp.Clone(rect' PixelFormat.Format32bppArgb);                                if (this.segmentos[i].width < 64 || this.segmentos[i].height < 64)                              {                                  if (this.segmentos[i].width < 64)                                  {                                      this.segmentos[i].width = (ushort)(1 << (int)Math.Ceiling(Math.Log(this.segmentos[i].width' 2)));                                      this.segmentos[i].width = Math.Max(this.segmentos[i].width' (ushort)8);                                  }                                    if (this.segmentos[i].height < 64)                                  {                                      this.segmentos[i].height = (ushort)(1 << (int)Math.Ceiling(Math.Log(this.segmentos[i].height' 2)));                                      this.segmentos[i].height = Math.Max(this.segmentos[i].height' (ushort)8);                                  }                                    var newcell = new Bitmap(segmentos[i].width' segmentos[i].height' cell.PixelFormat);                                  for (int cx = 0; cx < cell.Width; cx++)                                      for (int cy = 0; cy < cell.Height; cy++)                                          newcell.SetPixel(cx' cy' cell.GetPixel(cx' cy));                                    cell = newcell;                              }                                Actions.Indexed_Image(cell' f' out segmentos[i].datos' out pal);                              Actions.Swap_Palette(ref segmentos[i].datos' swapPalette' pal' f' decimal.MaxValue);                              if (tiled) segmentos[i].datos = Actions.HorizontalToLineal(segmentos[i].datos' segmentos[i].width' segmentos[i].height' (int)tipo' 8);                                this.segmentos[i].length = (ushort)segmentos[i].datos.Length;                              this.length += this.segmentos[i].length;                          }                      }                  }
Magic Number,LAYTON,Image,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\Ani.cs,Import,The following statement contains a magic number: if (this.width == bmp.Width && this.height == bmp.Height)                  {                      for (int i = 0; i < imgs; i++)                      {                          Rectangle rect = new Rectangle(                              segmentos[i].posX'                              segmentos[i].posY'                              Math.Min(segmentos[i].width' width - segmentos[i].posX)'                              Math.Min(segmentos[i].height' height - segmentos[i].posY));                          Bitmap cell = bmp.Clone(rect' PixelFormat.Format32bppArgb);                                                    if (rect.Width < segmentos[i].width || rect.Height < segmentos[i].height)                          {                              var newcell = new Bitmap(segmentos[i].width' segmentos[i].height' cell.PixelFormat);                              for (int cx = 0; cx < cell.Width; cx++)                                  for (int cy = 0; cy < cell.Height; cy++)                                      newcell.SetPixel(cx' cy' cell.GetPixel(cx' cy));                                cell = newcell;                          }                            Actions.Indexed_Image(cell' f' out segmentos[i].datos' out pal);                          Actions.Swap_Palette(ref segmentos[i].datos' swapPalette' pal' f' decimal.MaxValue);                          if (tiled) segmentos[i].datos = Actions.HorizontalToLineal(segmentos[i].datos' segmentos[i].width' segmentos[i].height' (int)tipo' 8);                      }                  }                  else                  {                      this.length = 0;                      this.width = (ushort)bmp.Width;                      this.height = (ushort)bmp.Height;                      ushort cellCountHorizontal = (ushort)Math.Ceiling(this.width / 64.0);                      ushort cellCountVertical = (ushort)Math.Ceiling(this.height / 64.0);                      this.imgs = (ushort)(cellCountHorizontal * cellCountVertical);                      this.segmentos = new Parte[imgs];                      for (int x = 0; x < cellCountHorizontal; x++)                      {                          for (int y = 0; y < cellCountVertical; y++)                          {                              int i = (y * cellCountHorizontal + x);                              this.segmentos[i].posX = (ushort)(x * 64);                              this.segmentos[i].posY = (ushort)(y * 64);                              this.segmentos[i].width = (x < cellCountHorizontal - 1 || this.width % 64 == 0) ? (ushort)64 : (ushort)(width % 64);                              this.segmentos[i].height = (y < cellCountVertical - 1 || this.height % 64 == 0) ? (ushort)64 : (ushort)(height % 64);                                Rectangle rect = new Rectangle(segmentos[i].posX' segmentos[i].posY' segmentos[i].width' segmentos[i].height);                              Bitmap cell = bmp.Clone(rect' PixelFormat.Format32bppArgb);                                if (this.segmentos[i].width < 64 || this.segmentos[i].height < 64)                              {                                  if (this.segmentos[i].width < 64)                                  {                                      this.segmentos[i].width = (ushort)(1 << (int)Math.Ceiling(Math.Log(this.segmentos[i].width' 2)));                                      this.segmentos[i].width = Math.Max(this.segmentos[i].width' (ushort)8);                                  }                                    if (this.segmentos[i].height < 64)                                  {                                      this.segmentos[i].height = (ushort)(1 << (int)Math.Ceiling(Math.Log(this.segmentos[i].height' 2)));                                      this.segmentos[i].height = Math.Max(this.segmentos[i].height' (ushort)8);                                  }                                    var newcell = new Bitmap(segmentos[i].width' segmentos[i].height' cell.PixelFormat);                                  for (int cx = 0; cx < cell.Width; cx++)                                      for (int cy = 0; cy < cell.Height; cy++)                                          newcell.SetPixel(cx' cy' cell.GetPixel(cx' cy));                                    cell = newcell;                              }                                Actions.Indexed_Image(cell' f' out segmentos[i].datos' out pal);                              Actions.Swap_Palette(ref segmentos[i].datos' swapPalette' pal' f' decimal.MaxValue);                              if (tiled) segmentos[i].datos = Actions.HorizontalToLineal(segmentos[i].datos' segmentos[i].width' segmentos[i].height' (int)tipo' 8);                                this.segmentos[i].length = (ushort)segmentos[i].datos.Length;                              this.length += this.segmentos[i].length;                          }                      }                  }
Magic Number,LAYTON,Image,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\Ani.cs,Import,The following statement contains a magic number: if (this.width == bmp.Width && this.height == bmp.Height)                  {                      for (int i = 0; i < imgs; i++)                      {                          Rectangle rect = new Rectangle(                              segmentos[i].posX'                              segmentos[i].posY'                              Math.Min(segmentos[i].width' width - segmentos[i].posX)'                              Math.Min(segmentos[i].height' height - segmentos[i].posY));                          Bitmap cell = bmp.Clone(rect' PixelFormat.Format32bppArgb);                                                    if (rect.Width < segmentos[i].width || rect.Height < segmentos[i].height)                          {                              var newcell = new Bitmap(segmentos[i].width' segmentos[i].height' cell.PixelFormat);                              for (int cx = 0; cx < cell.Width; cx++)                                  for (int cy = 0; cy < cell.Height; cy++)                                      newcell.SetPixel(cx' cy' cell.GetPixel(cx' cy));                                cell = newcell;                          }                            Actions.Indexed_Image(cell' f' out segmentos[i].datos' out pal);                          Actions.Swap_Palette(ref segmentos[i].datos' swapPalette' pal' f' decimal.MaxValue);                          if (tiled) segmentos[i].datos = Actions.HorizontalToLineal(segmentos[i].datos' segmentos[i].width' segmentos[i].height' (int)tipo' 8);                      }                  }                  else                  {                      this.length = 0;                      this.width = (ushort)bmp.Width;                      this.height = (ushort)bmp.Height;                      ushort cellCountHorizontal = (ushort)Math.Ceiling(this.width / 64.0);                      ushort cellCountVertical = (ushort)Math.Ceiling(this.height / 64.0);                      this.imgs = (ushort)(cellCountHorizontal * cellCountVertical);                      this.segmentos = new Parte[imgs];                      for (int x = 0; x < cellCountHorizontal; x++)                      {                          for (int y = 0; y < cellCountVertical; y++)                          {                              int i = (y * cellCountHorizontal + x);                              this.segmentos[i].posX = (ushort)(x * 64);                              this.segmentos[i].posY = (ushort)(y * 64);                              this.segmentos[i].width = (x < cellCountHorizontal - 1 || this.width % 64 == 0) ? (ushort)64 : (ushort)(width % 64);                              this.segmentos[i].height = (y < cellCountVertical - 1 || this.height % 64 == 0) ? (ushort)64 : (ushort)(height % 64);                                Rectangle rect = new Rectangle(segmentos[i].posX' segmentos[i].posY' segmentos[i].width' segmentos[i].height);                              Bitmap cell = bmp.Clone(rect' PixelFormat.Format32bppArgb);                                if (this.segmentos[i].width < 64 || this.segmentos[i].height < 64)                              {                                  if (this.segmentos[i].width < 64)                                  {                                      this.segmentos[i].width = (ushort)(1 << (int)Math.Ceiling(Math.Log(this.segmentos[i].width' 2)));                                      this.segmentos[i].width = Math.Max(this.segmentos[i].width' (ushort)8);                                  }                                    if (this.segmentos[i].height < 64)                                  {                                      this.segmentos[i].height = (ushort)(1 << (int)Math.Ceiling(Math.Log(this.segmentos[i].height' 2)));                                      this.segmentos[i].height = Math.Max(this.segmentos[i].height' (ushort)8);                                  }                                    var newcell = new Bitmap(segmentos[i].width' segmentos[i].height' cell.PixelFormat);                                  for (int cx = 0; cx < cell.Width; cx++)                                      for (int cy = 0; cy < cell.Height; cy++)                                          newcell.SetPixel(cx' cy' cell.GetPixel(cx' cy));                                    cell = newcell;                              }                                Actions.Indexed_Image(cell' f' out segmentos[i].datos' out pal);                              Actions.Swap_Palette(ref segmentos[i].datos' swapPalette' pal' f' decimal.MaxValue);                              if (tiled) segmentos[i].datos = Actions.HorizontalToLineal(segmentos[i].datos' segmentos[i].width' segmentos[i].height' (int)tipo' 8);                                this.segmentos[i].length = (ushort)segmentos[i].datos.Length;                              this.length += this.segmentos[i].length;                          }                      }                  }
Magic Number,LAYTON,Image,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\Ani.cs,Import,The following statement contains a magic number: if (this.width == bmp.Width && this.height == bmp.Height)                  {                      for (int i = 0; i < imgs; i++)                      {                          Rectangle rect = new Rectangle(                              segmentos[i].posX'                              segmentos[i].posY'                              Math.Min(segmentos[i].width' width - segmentos[i].posX)'                              Math.Min(segmentos[i].height' height - segmentos[i].posY));                          Bitmap cell = bmp.Clone(rect' PixelFormat.Format32bppArgb);                                                    if (rect.Width < segmentos[i].width || rect.Height < segmentos[i].height)                          {                              var newcell = new Bitmap(segmentos[i].width' segmentos[i].height' cell.PixelFormat);                              for (int cx = 0; cx < cell.Width; cx++)                                  for (int cy = 0; cy < cell.Height; cy++)                                      newcell.SetPixel(cx' cy' cell.GetPixel(cx' cy));                                cell = newcell;                          }                            Actions.Indexed_Image(cell' f' out segmentos[i].datos' out pal);                          Actions.Swap_Palette(ref segmentos[i].datos' swapPalette' pal' f' decimal.MaxValue);                          if (tiled) segmentos[i].datos = Actions.HorizontalToLineal(segmentos[i].datos' segmentos[i].width' segmentos[i].height' (int)tipo' 8);                      }                  }                  else                  {                      this.length = 0;                      this.width = (ushort)bmp.Width;                      this.height = (ushort)bmp.Height;                      ushort cellCountHorizontal = (ushort)Math.Ceiling(this.width / 64.0);                      ushort cellCountVertical = (ushort)Math.Ceiling(this.height / 64.0);                      this.imgs = (ushort)(cellCountHorizontal * cellCountVertical);                      this.segmentos = new Parte[imgs];                      for (int x = 0; x < cellCountHorizontal; x++)                      {                          for (int y = 0; y < cellCountVertical; y++)                          {                              int i = (y * cellCountHorizontal + x);                              this.segmentos[i].posX = (ushort)(x * 64);                              this.segmentos[i].posY = (ushort)(y * 64);                              this.segmentos[i].width = (x < cellCountHorizontal - 1 || this.width % 64 == 0) ? (ushort)64 : (ushort)(width % 64);                              this.segmentos[i].height = (y < cellCountVertical - 1 || this.height % 64 == 0) ? (ushort)64 : (ushort)(height % 64);                                Rectangle rect = new Rectangle(segmentos[i].posX' segmentos[i].posY' segmentos[i].width' segmentos[i].height);                              Bitmap cell = bmp.Clone(rect' PixelFormat.Format32bppArgb);                                if (this.segmentos[i].width < 64 || this.segmentos[i].height < 64)                              {                                  if (this.segmentos[i].width < 64)                                  {                                      this.segmentos[i].width = (ushort)(1 << (int)Math.Ceiling(Math.Log(this.segmentos[i].width' 2)));                                      this.segmentos[i].width = Math.Max(this.segmentos[i].width' (ushort)8);                                  }                                    if (this.segmentos[i].height < 64)                                  {                                      this.segmentos[i].height = (ushort)(1 << (int)Math.Ceiling(Math.Log(this.segmentos[i].height' 2)));                                      this.segmentos[i].height = Math.Max(this.segmentos[i].height' (ushort)8);                                  }                                    var newcell = new Bitmap(segmentos[i].width' segmentos[i].height' cell.PixelFormat);                                  for (int cx = 0; cx < cell.Width; cx++)                                      for (int cy = 0; cy < cell.Height; cy++)                                          newcell.SetPixel(cx' cy' cell.GetPixel(cx' cy));                                    cell = newcell;                              }                                Actions.Indexed_Image(cell' f' out segmentos[i].datos' out pal);                              Actions.Swap_Palette(ref segmentos[i].datos' swapPalette' pal' f' decimal.MaxValue);                              if (tiled) segmentos[i].datos = Actions.HorizontalToLineal(segmentos[i].datos' segmentos[i].width' segmentos[i].height' (int)tipo' 8);                                this.segmentos[i].length = (ushort)segmentos[i].datos.Length;                              this.length += this.segmentos[i].length;                          }                      }                  }
Magic Number,LAYTON,Image,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\Ani.cs,Import,The following statement contains a magic number: if (this.width == bmp.Width && this.height == bmp.Height)                  {                      for (int i = 0; i < imgs; i++)                      {                          Rectangle rect = new Rectangle(                              segmentos[i].posX'                              segmentos[i].posY'                              Math.Min(segmentos[i].width' width - segmentos[i].posX)'                              Math.Min(segmentos[i].height' height - segmentos[i].posY));                          Bitmap cell = bmp.Clone(rect' PixelFormat.Format32bppArgb);                                                    if (rect.Width < segmentos[i].width || rect.Height < segmentos[i].height)                          {                              var newcell = new Bitmap(segmentos[i].width' segmentos[i].height' cell.PixelFormat);                              for (int cx = 0; cx < cell.Width; cx++)                                  for (int cy = 0; cy < cell.Height; cy++)                                      newcell.SetPixel(cx' cy' cell.GetPixel(cx' cy));                                cell = newcell;                          }                            Actions.Indexed_Image(cell' f' out segmentos[i].datos' out pal);                          Actions.Swap_Palette(ref segmentos[i].datos' swapPalette' pal' f' decimal.MaxValue);                          if (tiled) segmentos[i].datos = Actions.HorizontalToLineal(segmentos[i].datos' segmentos[i].width' segmentos[i].height' (int)tipo' 8);                      }                  }                  else                  {                      this.length = 0;                      this.width = (ushort)bmp.Width;                      this.height = (ushort)bmp.Height;                      ushort cellCountHorizontal = (ushort)Math.Ceiling(this.width / 64.0);                      ushort cellCountVertical = (ushort)Math.Ceiling(this.height / 64.0);                      this.imgs = (ushort)(cellCountHorizontal * cellCountVertical);                      this.segmentos = new Parte[imgs];                      for (int x = 0; x < cellCountHorizontal; x++)                      {                          for (int y = 0; y < cellCountVertical; y++)                          {                              int i = (y * cellCountHorizontal + x);                              this.segmentos[i].posX = (ushort)(x * 64);                              this.segmentos[i].posY = (ushort)(y * 64);                              this.segmentos[i].width = (x < cellCountHorizontal - 1 || this.width % 64 == 0) ? (ushort)64 : (ushort)(width % 64);                              this.segmentos[i].height = (y < cellCountVertical - 1 || this.height % 64 == 0) ? (ushort)64 : (ushort)(height % 64);                                Rectangle rect = new Rectangle(segmentos[i].posX' segmentos[i].posY' segmentos[i].width' segmentos[i].height);                              Bitmap cell = bmp.Clone(rect' PixelFormat.Format32bppArgb);                                if (this.segmentos[i].width < 64 || this.segmentos[i].height < 64)                              {                                  if (this.segmentos[i].width < 64)                                  {                                      this.segmentos[i].width = (ushort)(1 << (int)Math.Ceiling(Math.Log(this.segmentos[i].width' 2)));                                      this.segmentos[i].width = Math.Max(this.segmentos[i].width' (ushort)8);                                  }                                    if (this.segmentos[i].height < 64)                                  {                                      this.segmentos[i].height = (ushort)(1 << (int)Math.Ceiling(Math.Log(this.segmentos[i].height' 2)));                                      this.segmentos[i].height = Math.Max(this.segmentos[i].height' (ushort)8);                                  }                                    var newcell = new Bitmap(segmentos[i].width' segmentos[i].height' cell.PixelFormat);                                  for (int cx = 0; cx < cell.Width; cx++)                                      for (int cy = 0; cy < cell.Height; cy++)                                          newcell.SetPixel(cx' cy' cell.GetPixel(cx' cy));                                    cell = newcell;                              }                                Actions.Indexed_Image(cell' f' out segmentos[i].datos' out pal);                              Actions.Swap_Palette(ref segmentos[i].datos' swapPalette' pal' f' decimal.MaxValue);                              if (tiled) segmentos[i].datos = Actions.HorizontalToLineal(segmentos[i].datos' segmentos[i].width' segmentos[i].height' (int)tipo' 8);                                this.segmentos[i].length = (ushort)segmentos[i].datos.Length;                              this.length += this.segmentos[i].length;                          }                      }                  }
Magic Number,LAYTON,Image,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\Ani.cs,Import,The following statement contains a magic number: if (this.width == bmp.Width && this.height == bmp.Height)                  {                      for (int i = 0; i < imgs; i++)                      {                          Rectangle rect = new Rectangle(                              segmentos[i].posX'                              segmentos[i].posY'                              Math.Min(segmentos[i].width' width - segmentos[i].posX)'                              Math.Min(segmentos[i].height' height - segmentos[i].posY));                          Bitmap cell = bmp.Clone(rect' PixelFormat.Format32bppArgb);                                                    if (rect.Width < segmentos[i].width || rect.Height < segmentos[i].height)                          {                              var newcell = new Bitmap(segmentos[i].width' segmentos[i].height' cell.PixelFormat);                              for (int cx = 0; cx < cell.Width; cx++)                                  for (int cy = 0; cy < cell.Height; cy++)                                      newcell.SetPixel(cx' cy' cell.GetPixel(cx' cy));                                cell = newcell;                          }                            Actions.Indexed_Image(cell' f' out segmentos[i].datos' out pal);                          Actions.Swap_Palette(ref segmentos[i].datos' swapPalette' pal' f' decimal.MaxValue);                          if (tiled) segmentos[i].datos = Actions.HorizontalToLineal(segmentos[i].datos' segmentos[i].width' segmentos[i].height' (int)tipo' 8);                      }                  }                  else                  {                      this.length = 0;                      this.width = (ushort)bmp.Width;                      this.height = (ushort)bmp.Height;                      ushort cellCountHorizontal = (ushort)Math.Ceiling(this.width / 64.0);                      ushort cellCountVertical = (ushort)Math.Ceiling(this.height / 64.0);                      this.imgs = (ushort)(cellCountHorizontal * cellCountVertical);                      this.segmentos = new Parte[imgs];                      for (int x = 0; x < cellCountHorizontal; x++)                      {                          for (int y = 0; y < cellCountVertical; y++)                          {                              int i = (y * cellCountHorizontal + x);                              this.segmentos[i].posX = (ushort)(x * 64);                              this.segmentos[i].posY = (ushort)(y * 64);                              this.segmentos[i].width = (x < cellCountHorizontal - 1 || this.width % 64 == 0) ? (ushort)64 : (ushort)(width % 64);                              this.segmentos[i].height = (y < cellCountVertical - 1 || this.height % 64 == 0) ? (ushort)64 : (ushort)(height % 64);                                Rectangle rect = new Rectangle(segmentos[i].posX' segmentos[i].posY' segmentos[i].width' segmentos[i].height);                              Bitmap cell = bmp.Clone(rect' PixelFormat.Format32bppArgb);                                if (this.segmentos[i].width < 64 || this.segmentos[i].height < 64)                              {                                  if (this.segmentos[i].width < 64)                                  {                                      this.segmentos[i].width = (ushort)(1 << (int)Math.Ceiling(Math.Log(this.segmentos[i].width' 2)));                                      this.segmentos[i].width = Math.Max(this.segmentos[i].width' (ushort)8);                                  }                                    if (this.segmentos[i].height < 64)                                  {                                      this.segmentos[i].height = (ushort)(1 << (int)Math.Ceiling(Math.Log(this.segmentos[i].height' 2)));                                      this.segmentos[i].height = Math.Max(this.segmentos[i].height' (ushort)8);                                  }                                    var newcell = new Bitmap(segmentos[i].width' segmentos[i].height' cell.PixelFormat);                                  for (int cx = 0; cx < cell.Width; cx++)                                      for (int cy = 0; cy < cell.Height; cy++)                                          newcell.SetPixel(cx' cy' cell.GetPixel(cx' cy));                                    cell = newcell;                              }                                Actions.Indexed_Image(cell' f' out segmentos[i].datos' out pal);                              Actions.Swap_Palette(ref segmentos[i].datos' swapPalette' pal' f' decimal.MaxValue);                              if (tiled) segmentos[i].datos = Actions.HorizontalToLineal(segmentos[i].datos' segmentos[i].width' segmentos[i].height' (int)tipo' 8);                                this.segmentos[i].length = (ushort)segmentos[i].datos.Length;                              this.length += this.segmentos[i].length;                          }                      }                  }
Magic Number,LAYTON,Image,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\Ani.cs,Import,The following statement contains a magic number: if (this.width == bmp.Width && this.height == bmp.Height)                  {                      for (int i = 0; i < imgs; i++)                      {                          Rectangle rect = new Rectangle(                              segmentos[i].posX'                              segmentos[i].posY'                              Math.Min(segmentos[i].width' width - segmentos[i].posX)'                              Math.Min(segmentos[i].height' height - segmentos[i].posY));                          Bitmap cell = bmp.Clone(rect' PixelFormat.Format32bppArgb);                                                    if (rect.Width < segmentos[i].width || rect.Height < segmentos[i].height)                          {                              var newcell = new Bitmap(segmentos[i].width' segmentos[i].height' cell.PixelFormat);                              for (int cx = 0; cx < cell.Width; cx++)                                  for (int cy = 0; cy < cell.Height; cy++)                                      newcell.SetPixel(cx' cy' cell.GetPixel(cx' cy));                                cell = newcell;                          }                            Actions.Indexed_Image(cell' f' out segmentos[i].datos' out pal);                          Actions.Swap_Palette(ref segmentos[i].datos' swapPalette' pal' f' decimal.MaxValue);                          if (tiled) segmentos[i].datos = Actions.HorizontalToLineal(segmentos[i].datos' segmentos[i].width' segmentos[i].height' (int)tipo' 8);                      }                  }                  else                  {                      this.length = 0;                      this.width = (ushort)bmp.Width;                      this.height = (ushort)bmp.Height;                      ushort cellCountHorizontal = (ushort)Math.Ceiling(this.width / 64.0);                      ushort cellCountVertical = (ushort)Math.Ceiling(this.height / 64.0);                      this.imgs = (ushort)(cellCountHorizontal * cellCountVertical);                      this.segmentos = new Parte[imgs];                      for (int x = 0; x < cellCountHorizontal; x++)                      {                          for (int y = 0; y < cellCountVertical; y++)                          {                              int i = (y * cellCountHorizontal + x);                              this.segmentos[i].posX = (ushort)(x * 64);                              this.segmentos[i].posY = (ushort)(y * 64);                              this.segmentos[i].width = (x < cellCountHorizontal - 1 || this.width % 64 == 0) ? (ushort)64 : (ushort)(width % 64);                              this.segmentos[i].height = (y < cellCountVertical - 1 || this.height % 64 == 0) ? (ushort)64 : (ushort)(height % 64);                                Rectangle rect = new Rectangle(segmentos[i].posX' segmentos[i].posY' segmentos[i].width' segmentos[i].height);                              Bitmap cell = bmp.Clone(rect' PixelFormat.Format32bppArgb);                                if (this.segmentos[i].width < 64 || this.segmentos[i].height < 64)                              {                                  if (this.segmentos[i].width < 64)                                  {                                      this.segmentos[i].width = (ushort)(1 << (int)Math.Ceiling(Math.Log(this.segmentos[i].width' 2)));                                      this.segmentos[i].width = Math.Max(this.segmentos[i].width' (ushort)8);                                  }                                    if (this.segmentos[i].height < 64)                                  {                                      this.segmentos[i].height = (ushort)(1 << (int)Math.Ceiling(Math.Log(this.segmentos[i].height' 2)));                                      this.segmentos[i].height = Math.Max(this.segmentos[i].height' (ushort)8);                                  }                                    var newcell = new Bitmap(segmentos[i].width' segmentos[i].height' cell.PixelFormat);                                  for (int cx = 0; cx < cell.Width; cx++)                                      for (int cy = 0; cy < cell.Height; cy++)                                          newcell.SetPixel(cx' cy' cell.GetPixel(cx' cy));                                    cell = newcell;                              }                                Actions.Indexed_Image(cell' f' out segmentos[i].datos' out pal);                              Actions.Swap_Palette(ref segmentos[i].datos' swapPalette' pal' f' decimal.MaxValue);                              if (tiled) segmentos[i].datos = Actions.HorizontalToLineal(segmentos[i].datos' segmentos[i].width' segmentos[i].height' (int)tipo' 8);                                this.segmentos[i].length = (ushort)segmentos[i].datos.Length;                              this.length += this.segmentos[i].length;                          }                      }                  }
Magic Number,LAYTON,Image,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\Ani.cs,Import,The following statement contains a magic number: if (this.width == bmp.Width && this.height == bmp.Height)                  {                      for (int i = 0; i < imgs; i++)                      {                          Rectangle rect = new Rectangle(                              segmentos[i].posX'                              segmentos[i].posY'                              Math.Min(segmentos[i].width' width - segmentos[i].posX)'                              Math.Min(segmentos[i].height' height - segmentos[i].posY));                          Bitmap cell = bmp.Clone(rect' PixelFormat.Format32bppArgb);                                                    if (rect.Width < segmentos[i].width || rect.Height < segmentos[i].height)                          {                              var newcell = new Bitmap(segmentos[i].width' segmentos[i].height' cell.PixelFormat);                              for (int cx = 0; cx < cell.Width; cx++)                                  for (int cy = 0; cy < cell.Height; cy++)                                      newcell.SetPixel(cx' cy' cell.GetPixel(cx' cy));                                cell = newcell;                          }                            Actions.Indexed_Image(cell' f' out segmentos[i].datos' out pal);                          Actions.Swap_Palette(ref segmentos[i].datos' swapPalette' pal' f' decimal.MaxValue);                          if (tiled) segmentos[i].datos = Actions.HorizontalToLineal(segmentos[i].datos' segmentos[i].width' segmentos[i].height' (int)tipo' 8);                      }                  }                  else                  {                      this.length = 0;                      this.width = (ushort)bmp.Width;                      this.height = (ushort)bmp.Height;                      ushort cellCountHorizontal = (ushort)Math.Ceiling(this.width / 64.0);                      ushort cellCountVertical = (ushort)Math.Ceiling(this.height / 64.0);                      this.imgs = (ushort)(cellCountHorizontal * cellCountVertical);                      this.segmentos = new Parte[imgs];                      for (int x = 0; x < cellCountHorizontal; x++)                      {                          for (int y = 0; y < cellCountVertical; y++)                          {                              int i = (y * cellCountHorizontal + x);                              this.segmentos[i].posX = (ushort)(x * 64);                              this.segmentos[i].posY = (ushort)(y * 64);                              this.segmentos[i].width = (x < cellCountHorizontal - 1 || this.width % 64 == 0) ? (ushort)64 : (ushort)(width % 64);                              this.segmentos[i].height = (y < cellCountVertical - 1 || this.height % 64 == 0) ? (ushort)64 : (ushort)(height % 64);                                Rectangle rect = new Rectangle(segmentos[i].posX' segmentos[i].posY' segmentos[i].width' segmentos[i].height);                              Bitmap cell = bmp.Clone(rect' PixelFormat.Format32bppArgb);                                if (this.segmentos[i].width < 64 || this.segmentos[i].height < 64)                              {                                  if (this.segmentos[i].width < 64)                                  {                                      this.segmentos[i].width = (ushort)(1 << (int)Math.Ceiling(Math.Log(this.segmentos[i].width' 2)));                                      this.segmentos[i].width = Math.Max(this.segmentos[i].width' (ushort)8);                                  }                                    if (this.segmentos[i].height < 64)                                  {                                      this.segmentos[i].height = (ushort)(1 << (int)Math.Ceiling(Math.Log(this.segmentos[i].height' 2)));                                      this.segmentos[i].height = Math.Max(this.segmentos[i].height' (ushort)8);                                  }                                    var newcell = new Bitmap(segmentos[i].width' segmentos[i].height' cell.PixelFormat);                                  for (int cx = 0; cx < cell.Width; cx++)                                      for (int cy = 0; cy < cell.Height; cy++)                                          newcell.SetPixel(cx' cy' cell.GetPixel(cx' cy));                                    cell = newcell;                              }                                Actions.Indexed_Image(cell' f' out segmentos[i].datos' out pal);                              Actions.Swap_Palette(ref segmentos[i].datos' swapPalette' pal' f' decimal.MaxValue);                              if (tiled) segmentos[i].datos = Actions.HorizontalToLineal(segmentos[i].datos' segmentos[i].width' segmentos[i].height' (int)tipo' 8);                                this.segmentos[i].length = (ushort)segmentos[i].datos.Length;                              this.length += this.segmentos[i].length;                          }                      }                  }
Magic Number,LAYTON,Image,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\Ani.cs,Import,The following statement contains a magic number: if (this.width == bmp.Width && this.height == bmp.Height)                  {                      for (int i = 0; i < imgs; i++)                      {                          Rectangle rect = new Rectangle(                              segmentos[i].posX'                              segmentos[i].posY'                              Math.Min(segmentos[i].width' width - segmentos[i].posX)'                              Math.Min(segmentos[i].height' height - segmentos[i].posY));                          Bitmap cell = bmp.Clone(rect' PixelFormat.Format32bppArgb);                                                    if (rect.Width < segmentos[i].width || rect.Height < segmentos[i].height)                          {                              var newcell = new Bitmap(segmentos[i].width' segmentos[i].height' cell.PixelFormat);                              for (int cx = 0; cx < cell.Width; cx++)                                  for (int cy = 0; cy < cell.Height; cy++)                                      newcell.SetPixel(cx' cy' cell.GetPixel(cx' cy));                                cell = newcell;                          }                            Actions.Indexed_Image(cell' f' out segmentos[i].datos' out pal);                          Actions.Swap_Palette(ref segmentos[i].datos' swapPalette' pal' f' decimal.MaxValue);                          if (tiled) segmentos[i].datos = Actions.HorizontalToLineal(segmentos[i].datos' segmentos[i].width' segmentos[i].height' (int)tipo' 8);                      }                  }                  else                  {                      this.length = 0;                      this.width = (ushort)bmp.Width;                      this.height = (ushort)bmp.Height;                      ushort cellCountHorizontal = (ushort)Math.Ceiling(this.width / 64.0);                      ushort cellCountVertical = (ushort)Math.Ceiling(this.height / 64.0);                      this.imgs = (ushort)(cellCountHorizontal * cellCountVertical);                      this.segmentos = new Parte[imgs];                      for (int x = 0; x < cellCountHorizontal; x++)                      {                          for (int y = 0; y < cellCountVertical; y++)                          {                              int i = (y * cellCountHorizontal + x);                              this.segmentos[i].posX = (ushort)(x * 64);                              this.segmentos[i].posY = (ushort)(y * 64);                              this.segmentos[i].width = (x < cellCountHorizontal - 1 || this.width % 64 == 0) ? (ushort)64 : (ushort)(width % 64);                              this.segmentos[i].height = (y < cellCountVertical - 1 || this.height % 64 == 0) ? (ushort)64 : (ushort)(height % 64);                                Rectangle rect = new Rectangle(segmentos[i].posX' segmentos[i].posY' segmentos[i].width' segmentos[i].height);                              Bitmap cell = bmp.Clone(rect' PixelFormat.Format32bppArgb);                                if (this.segmentos[i].width < 64 || this.segmentos[i].height < 64)                              {                                  if (this.segmentos[i].width < 64)                                  {                                      this.segmentos[i].width = (ushort)(1 << (int)Math.Ceiling(Math.Log(this.segmentos[i].width' 2)));                                      this.segmentos[i].width = Math.Max(this.segmentos[i].width' (ushort)8);                                  }                                    if (this.segmentos[i].height < 64)                                  {                                      this.segmentos[i].height = (ushort)(1 << (int)Math.Ceiling(Math.Log(this.segmentos[i].height' 2)));                                      this.segmentos[i].height = Math.Max(this.segmentos[i].height' (ushort)8);                                  }                                    var newcell = new Bitmap(segmentos[i].width' segmentos[i].height' cell.PixelFormat);                                  for (int cx = 0; cx < cell.Width; cx++)                                      for (int cy = 0; cy < cell.Height; cy++)                                          newcell.SetPixel(cx' cy' cell.GetPixel(cx' cy));                                    cell = newcell;                              }                                Actions.Indexed_Image(cell' f' out segmentos[i].datos' out pal);                              Actions.Swap_Palette(ref segmentos[i].datos' swapPalette' pal' f' decimal.MaxValue);                              if (tiled) segmentos[i].datos = Actions.HorizontalToLineal(segmentos[i].datos' segmentos[i].width' segmentos[i].height' (int)tipo' 8);                                this.segmentos[i].length = (ushort)segmentos[i].datos.Length;                              this.length += this.segmentos[i].length;                          }                      }                  }
Magic Number,LAYTON,Image,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\Ani.cs,Import,The following statement contains a magic number: if (this.width == bmp.Width && this.height == bmp.Height)                  {                      for (int i = 0; i < imgs; i++)                      {                          Rectangle rect = new Rectangle(                              segmentos[i].posX'                              segmentos[i].posY'                              Math.Min(segmentos[i].width' width - segmentos[i].posX)'                              Math.Min(segmentos[i].height' height - segmentos[i].posY));                          Bitmap cell = bmp.Clone(rect' PixelFormat.Format32bppArgb);                                                    if (rect.Width < segmentos[i].width || rect.Height < segmentos[i].height)                          {                              var newcell = new Bitmap(segmentos[i].width' segmentos[i].height' cell.PixelFormat);                              for (int cx = 0; cx < cell.Width; cx++)                                  for (int cy = 0; cy < cell.Height; cy++)                                      newcell.SetPixel(cx' cy' cell.GetPixel(cx' cy));                                cell = newcell;                          }                            Actions.Indexed_Image(cell' f' out segmentos[i].datos' out pal);                          Actions.Swap_Palette(ref segmentos[i].datos' swapPalette' pal' f' decimal.MaxValue);                          if (tiled) segmentos[i].datos = Actions.HorizontalToLineal(segmentos[i].datos' segmentos[i].width' segmentos[i].height' (int)tipo' 8);                      }                  }                  else                  {                      this.length = 0;                      this.width = (ushort)bmp.Width;                      this.height = (ushort)bmp.Height;                      ushort cellCountHorizontal = (ushort)Math.Ceiling(this.width / 64.0);                      ushort cellCountVertical = (ushort)Math.Ceiling(this.height / 64.0);                      this.imgs = (ushort)(cellCountHorizontal * cellCountVertical);                      this.segmentos = new Parte[imgs];                      for (int x = 0; x < cellCountHorizontal; x++)                      {                          for (int y = 0; y < cellCountVertical; y++)                          {                              int i = (y * cellCountHorizontal + x);                              this.segmentos[i].posX = (ushort)(x * 64);                              this.segmentos[i].posY = (ushort)(y * 64);                              this.segmentos[i].width = (x < cellCountHorizontal - 1 || this.width % 64 == 0) ? (ushort)64 : (ushort)(width % 64);                              this.segmentos[i].height = (y < cellCountVertical - 1 || this.height % 64 == 0) ? (ushort)64 : (ushort)(height % 64);                                Rectangle rect = new Rectangle(segmentos[i].posX' segmentos[i].posY' segmentos[i].width' segmentos[i].height);                              Bitmap cell = bmp.Clone(rect' PixelFormat.Format32bppArgb);                                if (this.segmentos[i].width < 64 || this.segmentos[i].height < 64)                              {                                  if (this.segmentos[i].width < 64)                                  {                                      this.segmentos[i].width = (ushort)(1 << (int)Math.Ceiling(Math.Log(this.segmentos[i].width' 2)));                                      this.segmentos[i].width = Math.Max(this.segmentos[i].width' (ushort)8);                                  }                                    if (this.segmentos[i].height < 64)                                  {                                      this.segmentos[i].height = (ushort)(1 << (int)Math.Ceiling(Math.Log(this.segmentos[i].height' 2)));                                      this.segmentos[i].height = Math.Max(this.segmentos[i].height' (ushort)8);                                  }                                    var newcell = new Bitmap(segmentos[i].width' segmentos[i].height' cell.PixelFormat);                                  for (int cx = 0; cx < cell.Width; cx++)                                      for (int cy = 0; cy < cell.Height; cy++)                                          newcell.SetPixel(cx' cy' cell.GetPixel(cx' cy));                                    cell = newcell;                              }                                Actions.Indexed_Image(cell' f' out segmentos[i].datos' out pal);                              Actions.Swap_Palette(ref segmentos[i].datos' swapPalette' pal' f' decimal.MaxValue);                              if (tiled) segmentos[i].datos = Actions.HorizontalToLineal(segmentos[i].datos' segmentos[i].width' segmentos[i].height' (int)tipo' 8);                                this.segmentos[i].length = (ushort)segmentos[i].datos.Length;                              this.length += this.segmentos[i].length;                          }                      }                  }
Magic Number,LAYTON,Image,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\Ani.cs,Import,The following statement contains a magic number: if (this.width == bmp.Width && this.height == bmp.Height)                  {                      for (int i = 0; i < imgs; i++)                      {                          Rectangle rect = new Rectangle(                              segmentos[i].posX'                              segmentos[i].posY'                              Math.Min(segmentos[i].width' width - segmentos[i].posX)'                              Math.Min(segmentos[i].height' height - segmentos[i].posY));                          Bitmap cell = bmp.Clone(rect' PixelFormat.Format32bppArgb);                                                    if (rect.Width < segmentos[i].width || rect.Height < segmentos[i].height)                          {                              var newcell = new Bitmap(segmentos[i].width' segmentos[i].height' cell.PixelFormat);                              for (int cx = 0; cx < cell.Width; cx++)                                  for (int cy = 0; cy < cell.Height; cy++)                                      newcell.SetPixel(cx' cy' cell.GetPixel(cx' cy));                                cell = newcell;                          }                            Actions.Indexed_Image(cell' f' out segmentos[i].datos' out pal);                          Actions.Swap_Palette(ref segmentos[i].datos' swapPalette' pal' f' decimal.MaxValue);                          if (tiled) segmentos[i].datos = Actions.HorizontalToLineal(segmentos[i].datos' segmentos[i].width' segmentos[i].height' (int)tipo' 8);                      }                  }                  else                  {                      this.length = 0;                      this.width = (ushort)bmp.Width;                      this.height = (ushort)bmp.Height;                      ushort cellCountHorizontal = (ushort)Math.Ceiling(this.width / 64.0);                      ushort cellCountVertical = (ushort)Math.Ceiling(this.height / 64.0);                      this.imgs = (ushort)(cellCountHorizontal * cellCountVertical);                      this.segmentos = new Parte[imgs];                      for (int x = 0; x < cellCountHorizontal; x++)                      {                          for (int y = 0; y < cellCountVertical; y++)                          {                              int i = (y * cellCountHorizontal + x);                              this.segmentos[i].posX = (ushort)(x * 64);                              this.segmentos[i].posY = (ushort)(y * 64);                              this.segmentos[i].width = (x < cellCountHorizontal - 1 || this.width % 64 == 0) ? (ushort)64 : (ushort)(width % 64);                              this.segmentos[i].height = (y < cellCountVertical - 1 || this.height % 64 == 0) ? (ushort)64 : (ushort)(height % 64);                                Rectangle rect = new Rectangle(segmentos[i].posX' segmentos[i].posY' segmentos[i].width' segmentos[i].height);                              Bitmap cell = bmp.Clone(rect' PixelFormat.Format32bppArgb);                                if (this.segmentos[i].width < 64 || this.segmentos[i].height < 64)                              {                                  if (this.segmentos[i].width < 64)                                  {                                      this.segmentos[i].width = (ushort)(1 << (int)Math.Ceiling(Math.Log(this.segmentos[i].width' 2)));                                      this.segmentos[i].width = Math.Max(this.segmentos[i].width' (ushort)8);                                  }                                    if (this.segmentos[i].height < 64)                                  {                                      this.segmentos[i].height = (ushort)(1 << (int)Math.Ceiling(Math.Log(this.segmentos[i].height' 2)));                                      this.segmentos[i].height = Math.Max(this.segmentos[i].height' (ushort)8);                                  }                                    var newcell = new Bitmap(segmentos[i].width' segmentos[i].height' cell.PixelFormat);                                  for (int cx = 0; cx < cell.Width; cx++)                                      for (int cy = 0; cy < cell.Height; cy++)                                          newcell.SetPixel(cx' cy' cell.GetPixel(cx' cy));                                    cell = newcell;                              }                                Actions.Indexed_Image(cell' f' out segmentos[i].datos' out pal);                              Actions.Swap_Palette(ref segmentos[i].datos' swapPalette' pal' f' decimal.MaxValue);                              if (tiled) segmentos[i].datos = Actions.HorizontalToLineal(segmentos[i].datos' segmentos[i].width' segmentos[i].height' (int)tipo' 8);                                this.segmentos[i].length = (ushort)segmentos[i].datos.Length;                              this.length += this.segmentos[i].length;                          }                      }                  }
Magic Number,LAYTON,Image,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\Ani.cs,Import,The following statement contains a magic number: if (this.width == bmp.Width && this.height == bmp.Height)                  {                      for (int i = 0; i < imgs; i++)                      {                          Rectangle rect = new Rectangle(                              segmentos[i].posX'                              segmentos[i].posY'                              Math.Min(segmentos[i].width' width - segmentos[i].posX)'                              Math.Min(segmentos[i].height' height - segmentos[i].posY));                          Bitmap cell = bmp.Clone(rect' PixelFormat.Format32bppArgb);                                                    if (rect.Width < segmentos[i].width || rect.Height < segmentos[i].height)                          {                              var newcell = new Bitmap(segmentos[i].width' segmentos[i].height' cell.PixelFormat);                              for (int cx = 0; cx < cell.Width; cx++)                                  for (int cy = 0; cy < cell.Height; cy++)                                      newcell.SetPixel(cx' cy' cell.GetPixel(cx' cy));                                cell = newcell;                          }                            Actions.Indexed_Image(cell' f' out segmentos[i].datos' out pal);                          Actions.Swap_Palette(ref segmentos[i].datos' swapPalette' pal' f' decimal.MaxValue);                          if (tiled) segmentos[i].datos = Actions.HorizontalToLineal(segmentos[i].datos' segmentos[i].width' segmentos[i].height' (int)tipo' 8);                      }                  }                  else                  {                      this.length = 0;                      this.width = (ushort)bmp.Width;                      this.height = (ushort)bmp.Height;                      ushort cellCountHorizontal = (ushort)Math.Ceiling(this.width / 64.0);                      ushort cellCountVertical = (ushort)Math.Ceiling(this.height / 64.0);                      this.imgs = (ushort)(cellCountHorizontal * cellCountVertical);                      this.segmentos = new Parte[imgs];                      for (int x = 0; x < cellCountHorizontal; x++)                      {                          for (int y = 0; y < cellCountVertical; y++)                          {                              int i = (y * cellCountHorizontal + x);                              this.segmentos[i].posX = (ushort)(x * 64);                              this.segmentos[i].posY = (ushort)(y * 64);                              this.segmentos[i].width = (x < cellCountHorizontal - 1 || this.width % 64 == 0) ? (ushort)64 : (ushort)(width % 64);                              this.segmentos[i].height = (y < cellCountVertical - 1 || this.height % 64 == 0) ? (ushort)64 : (ushort)(height % 64);                                Rectangle rect = new Rectangle(segmentos[i].posX' segmentos[i].posY' segmentos[i].width' segmentos[i].height);                              Bitmap cell = bmp.Clone(rect' PixelFormat.Format32bppArgb);                                if (this.segmentos[i].width < 64 || this.segmentos[i].height < 64)                              {                                  if (this.segmentos[i].width < 64)                                  {                                      this.segmentos[i].width = (ushort)(1 << (int)Math.Ceiling(Math.Log(this.segmentos[i].width' 2)));                                      this.segmentos[i].width = Math.Max(this.segmentos[i].width' (ushort)8);                                  }                                    if (this.segmentos[i].height < 64)                                  {                                      this.segmentos[i].height = (ushort)(1 << (int)Math.Ceiling(Math.Log(this.segmentos[i].height' 2)));                                      this.segmentos[i].height = Math.Max(this.segmentos[i].height' (ushort)8);                                  }                                    var newcell = new Bitmap(segmentos[i].width' segmentos[i].height' cell.PixelFormat);                                  for (int cx = 0; cx < cell.Width; cx++)                                      for (int cy = 0; cy < cell.Height; cy++)                                          newcell.SetPixel(cx' cy' cell.GetPixel(cx' cy));                                    cell = newcell;                              }                                Actions.Indexed_Image(cell' f' out segmentos[i].datos' out pal);                              Actions.Swap_Palette(ref segmentos[i].datos' swapPalette' pal' f' decimal.MaxValue);                              if (tiled) segmentos[i].datos = Actions.HorizontalToLineal(segmentos[i].datos' segmentos[i].width' segmentos[i].height' (int)tipo' 8);                                this.segmentos[i].length = (ushort)segmentos[i].datos.Length;                              this.length += this.segmentos[i].length;                          }                      }                  }
Magic Number,LAYTON,Bg,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\Bg.cs,Read,The following statement contains a magic number: Byte[] compressFile = new Byte[(new FileInfo(fileIn).Length) - 4];
Magic Number,LAYTON,Bg,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\Bg.cs,Read,The following statement contains a magic number: Array.Copy(File.ReadAllBytes(fileIn)' 4' compressFile' 0' compressFile.Length);
Magic Number,LAYTON,Bg,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\Bg.cs,Write,The following statement contains a magic number: int srcColorsCount = palette.Original.Length / 2;
Magic Number,LAYTON,Bg,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\Bg.cs,Write,The following statement contains a magic number: if (srcColorsCount != palette.NumberOfColors || !Actions.Compare_Array(palette.Original' colorsData))              {                  // Replaced palette                  if (srcColorsCount <= palette.NumberOfColors                      && MessageBox.Show(                          "The changed palette has more colors than the original.\r\n"                          + "In some cases this can lead to an incorrect display of the game.\r\n\r\n"                          + "Try to force swap at the original palette?"'                          "Layton Image Import"'                          MessageBoxButtons.YesNo) == DialogResult.Yes)                  {                      // Force swaping to the Original palette                      Color[] colors = Actions.BGR555ToColor(palette.Original);                      Actions.Swap_Palette(ref tiles' colors' palette.Palette[0]' ColorFormat.colors256' decimal.MaxValue);                      colorsData = palette.Original;                      palette.Palette[0] = colors;                  }                  else                  {                      // Add transparent color to the Replaced palette                      byte[] newColorsData = new byte[colorsData.Length + 2];                      Array.Copy(palette.Original' 0' newColorsData' 0' 2);                      Array.Copy(colorsData' 0' newColorsData' 2' colorsData.Length);                      colorsData = newColorsData;                        Color[] newColors = new Color[palette.Palette[0].Length + 1];                      newColors[0] = Actions.BGR555ToColor(palette.Original[0]' palette.Original[1]);                      Array.Copy(palette.Palette[0]' 0' newColors' 1' palette.Palette[0].Length);                      palette.Palette[0] = newColors;                        for (long i = 0; i < tiles.LongLength; i++) tiles[i]++;                  }              }
Magic Number,LAYTON,Bg,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\Bg.cs,Write,The following statement contains a magic number: if (srcColorsCount != palette.NumberOfColors || !Actions.Compare_Array(palette.Original' colorsData))              {                  // Replaced palette                  if (srcColorsCount <= palette.NumberOfColors                      && MessageBox.Show(                          "The changed palette has more colors than the original.\r\n"                          + "In some cases this can lead to an incorrect display of the game.\r\n\r\n"                          + "Try to force swap at the original palette?"'                          "Layton Image Import"'                          MessageBoxButtons.YesNo) == DialogResult.Yes)                  {                      // Force swaping to the Original palette                      Color[] colors = Actions.BGR555ToColor(palette.Original);                      Actions.Swap_Palette(ref tiles' colors' palette.Palette[0]' ColorFormat.colors256' decimal.MaxValue);                      colorsData = palette.Original;                      palette.Palette[0] = colors;                  }                  else                  {                      // Add transparent color to the Replaced palette                      byte[] newColorsData = new byte[colorsData.Length + 2];                      Array.Copy(palette.Original' 0' newColorsData' 0' 2);                      Array.Copy(colorsData' 0' newColorsData' 2' colorsData.Length);                      colorsData = newColorsData;                        Color[] newColors = new Color[palette.Palette[0].Length + 1];                      newColors[0] = Actions.BGR555ToColor(palette.Original[0]' palette.Original[1]);                      Array.Copy(palette.Palette[0]' 0' newColors' 1' palette.Palette[0].Length);                      palette.Palette[0] = newColors;                        for (long i = 0; i < tiles.LongLength; i++) tiles[i]++;                  }              }
Magic Number,LAYTON,Bg,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\Bg.cs,Write,The following statement contains a magic number: if (srcColorsCount != palette.NumberOfColors || !Actions.Compare_Array(palette.Original' colorsData))              {                  // Replaced palette                  if (srcColorsCount <= palette.NumberOfColors                      && MessageBox.Show(                          "The changed palette has more colors than the original.\r\n"                          + "In some cases this can lead to an incorrect display of the game.\r\n\r\n"                          + "Try to force swap at the original palette?"'                          "Layton Image Import"'                          MessageBoxButtons.YesNo) == DialogResult.Yes)                  {                      // Force swaping to the Original palette                      Color[] colors = Actions.BGR555ToColor(palette.Original);                      Actions.Swap_Palette(ref tiles' colors' palette.Palette[0]' ColorFormat.colors256' decimal.MaxValue);                      colorsData = palette.Original;                      palette.Palette[0] = colors;                  }                  else                  {                      // Add transparent color to the Replaced palette                      byte[] newColorsData = new byte[colorsData.Length + 2];                      Array.Copy(palette.Original' 0' newColorsData' 0' 2);                      Array.Copy(colorsData' 0' newColorsData' 2' colorsData.Length);                      colorsData = newColorsData;                        Color[] newColors = new Color[palette.Palette[0].Length + 1];                      newColors[0] = Actions.BGR555ToColor(palette.Original[0]' palette.Original[1]);                      Array.Copy(palette.Palette[0]' 0' newColors' 1' palette.Palette[0].Length);                      palette.Palette[0] = newColors;                        for (long i = 0; i < tiles.LongLength; i++) tiles[i]++;                  }              }
Magic Number,LAYTON,Bg,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\Bg.cs,Write,The following statement contains a magic number: bw.Write((uint)(colorsData.LongLength / 2));
Magic Number,LAYTON,Bg,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\Bg.cs,Write,The following statement contains a magic number: bw.Write((ushort)(this.Width / 8));
Magic Number,LAYTON,Bg,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\Bg.cs,Write,The following statement contains a magic number: bw.Write((ushort)(this.Height / 8));
Magic Number,LAYTON,Bg,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\Bg.cs,Write,The following statement contains a magic number: bw.Write(2);
Magic Number,LAYTON,Bg,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\Bg.cs,Get_Image,The following statement contains a magic number: colors[0] = Actions.BGR555ToColor(br.ReadBytes((int)num_colors * 2));
Magic Number,LAYTON,Bg,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\Bg.cs,Get_Image,The following statement contains a magic number: ushort width = (ushort)(br.ReadUInt16() * 8);
Magic Number,LAYTON,Bg,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\Bg.cs,Get_Image,The following statement contains a magic number: ushort height = (ushort)(br.ReadUInt16() * 8);
Magic Number,LAYTON,DARC,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\DARC.cs,Unpack,The following statement contains a magic number: char[] type = br.ReadChars(4);
Magic Number,LAYTON,DARC,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\DARC.cs,Unpack,The following statement contains a magic number: for (int i = 0; i < number_files; i++)              {                  sFile newFile = new sFile();                  newFile.name = name + '_' + i.ToString() + ".denc";                  newFile.offset = br.ReadUInt32() + (uint)br.BaseStream.Position;    // Relative offset                  newFile.path = file;                    long currPos = br.BaseStream.Position;                  br.BaseStream.Position = newFile.offset - 4;                  newFile.size = br.ReadUInt32();                  br.BaseStream.Position = currPos;                    unpacked.files.Add(newFile);              }
Magic Number,LAYTON,DARC,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\DARC.cs,Pack,The following statement contains a magic number: uint offset = (uint)unpacked.files.Count * 4 + 8;
Magic Number,LAYTON,DARC,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\DARC.cs,Pack,The following statement contains a magic number: uint offset = (uint)unpacked.files.Count * 4 + 8;
Magic Number,LAYTON,DARC,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\DARC.cs,Pack,The following statement contains a magic number: for (int i = 0; i < unpacked.files.Count; i++)              {                  offset_files[i] = (uint)(offset - bw.BaseStream.Position);                  if (offset_files[i] % 4 != 0)                      offset_files[i] += (4 - (offset_files[i] % 4));                  bw.Write(offset_files[i]);                  offset_files[i] += (uint)bw.BaseStream.Position;                    offset += unpacked.files[i].size + 4;              }
Magic Number,LAYTON,DARC,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\DARC.cs,Pack,The following statement contains a magic number: for (int i = 0; i < unpacked.files.Count; i++)              {                  offset_files[i] = (uint)(offset - bw.BaseStream.Position);                  if (offset_files[i] % 4 != 0)                      offset_files[i] += (4 - (offset_files[i] % 4));                  bw.Write(offset_files[i]);                  offset_files[i] += (uint)bw.BaseStream.Position;                    offset += unpacked.files[i].size + 4;              }
Magic Number,LAYTON,DARC,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\DARC.cs,Pack,The following statement contains a magic number: for (int i = 0; i < unpacked.files.Count; i++)              {                  offset_files[i] = (uint)(offset - bw.BaseStream.Position);                  if (offset_files[i] % 4 != 0)                      offset_files[i] += (4 - (offset_files[i] % 4));                  bw.Write(offset_files[i]);                  offset_files[i] += (uint)bw.BaseStream.Position;                    offset += unpacked.files[i].size + 4;              }
Magic Number,LAYTON,DARC,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\DARC.cs,Pack,The following statement contains a magic number: for (int i = 0; i < unpacked.files.Count; i++)              {                  offset_files[i] = (uint)(offset - bw.BaseStream.Position);                  if (offset_files[i] % 4 != 0)                      offset_files[i] += (4 - (offset_files[i] % 4));                  bw.Write(offset_files[i]);                  offset_files[i] += (uint)bw.BaseStream.Position;                    offset += unpacked.files[i].size + 4;              }
Magic Number,LAYTON,DARC,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\DARC.cs,Pack,The following statement contains a magic number: for (int i = 0; i < unpacked.files.Count; i++)              {                  bw.Write(unpacked.files[i].size);                    BinaryReader br = new BinaryReader(File.OpenRead(unpacked.files[i].path));                  br.BaseStream.Position = unpacked.files[i].offset;                  bw.Write(br.ReadBytes((int)unpacked.files[i].size));                  br.Close();                    int rem = (int)bw.BaseStream.Position % 4;                  if (rem != 0)                      for (; rem < 4; rem++)                          bw.Write((byte)0x00);                  bw.Flush();                    sFile newFile = unpacked.files[i];                  newFile.offset = offset_files[i];                  newFile.path = fileOut;                  unpacked.files[i] = newFile;              }
Magic Number,LAYTON,DARC,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\DARC.cs,Pack,The following statement contains a magic number: for (int i = 0; i < unpacked.files.Count; i++)              {                  bw.Write(unpacked.files[i].size);                    BinaryReader br = new BinaryReader(File.OpenRead(unpacked.files[i].path));                  br.BaseStream.Position = unpacked.files[i].offset;                  bw.Write(br.ReadBytes((int)unpacked.files[i].size));                  br.Close();                    int rem = (int)bw.BaseStream.Position % 4;                  if (rem != 0)                      for (; rem < 4; rem++)                          bw.Write((byte)0x00);                  bw.Flush();                    sFile newFile = unpacked.files[i];                  newFile.offset = offset_files[i];                  newFile.path = fileOut;                  unpacked.files[i] = newFile;              }
Magic Number,LAYTON,DENC,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\DARC.cs,Unpack,The following statement contains a magic number: char[] type = br.ReadChars(4);
Magic Number,LAYTON,DENC,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\DARC.cs,Unpack,The following statement contains a magic number: bool coded = (new String(br.ReadChars(4)) == "LZSS" ? true : false);
Magic Number,LAYTON,DENC,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\DARC.cs,Unpack,The following statement contains a magic number: if (!coded)              {                  sFile newFile = new sFile();                  newFile.name = name;                  newFile.offset = (uint)br.BaseStream.Position;                  newFile.size = decoded_length;                  newFile.path = file;                    newFile.name += '.' + new String(br.ReadChars(4));                    decode.files.Add(newFile);              }              else              {                  sFile newFile = new sFile();                  newFile.name = name;                  newFile.offset = 0;                  newFile.size = decoded_length;                  newFile.path = pluginHost.Get_TempFile();                    Decode_LZSS(br.ReadBytes((int)coded_length)' newFile.path' (int)decoded_length);                    br.Close();                  br = new BinaryReader(File.OpenRead(newFile.path));                  newFile.name += '.' + new String(br.ReadChars(4));                    decode.files.Add(newFile);              }
Magic Number,LAYTON,DENC,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\DARC.cs,Unpack,The following statement contains a magic number: if (!coded)              {                  sFile newFile = new sFile();                  newFile.name = name;                  newFile.offset = (uint)br.BaseStream.Position;                  newFile.size = decoded_length;                  newFile.path = file;                    newFile.name += '.' + new String(br.ReadChars(4));                    decode.files.Add(newFile);              }              else              {                  sFile newFile = new sFile();                  newFile.name = name;                  newFile.offset = 0;                  newFile.size = decoded_length;                  newFile.path = pluginHost.Get_TempFile();                    Decode_LZSS(br.ReadBytes((int)coded_length)' newFile.path' (int)decoded_length);                    br.Close();                  br = new BinaryReader(File.OpenRead(newFile.path));                  newFile.name += '.' + new String(br.ReadChars(4));                    decode.files.Add(newFile);              }
Magic Number,LAYTON,DENC,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\DARC.cs,Decode_LZSS,The following statement contains a magic number: while (pos_buf < decode_length)              {                  int length = 0;                  if ((encoded[pos_enc] & 1) == 0)    // No coded' just copy                  {                      length = encoded[pos_enc++] >> 1;                      for (int i = 0; i < length; i++)                          buffer[pos_buf++] = encoded[pos_enc++];                  }                  else                                // Coded' go back and copy                  {                      ushort value = BitConverter.ToUInt16(encoded' pos_enc);                      pos_enc += 2;                        length = (value >> 0xC) + 2;                      int cod_pos = pos_buf - ((value & 0xFFF) >> 1);                        for (int i = 0; i < length; i++)                          buffer[pos_buf++] = buffer[cod_pos++];                  }              }
Magic Number,LAYTON,DENC,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\DARC.cs,Decode_LZSS,The following statement contains a magic number: while (pos_buf < decode_length)              {                  int length = 0;                  if ((encoded[pos_enc] & 1) == 0)    // No coded' just copy                  {                      length = encoded[pos_enc++] >> 1;                      for (int i = 0; i < length; i++)                          buffer[pos_buf++] = encoded[pos_enc++];                  }                  else                                // Coded' go back and copy                  {                      ushort value = BitConverter.ToUInt16(encoded' pos_enc);                      pos_enc += 2;                        length = (value >> 0xC) + 2;                      int cod_pos = pos_buf - ((value & 0xFFF) >> 1);                        for (int i = 0; i < length; i++)                          buffer[pos_buf++] = buffer[cod_pos++];                  }              }
Magic Number,LAYTON,GDS,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\GDS.cs,Read,The following statement contains a magic number: while (br.BaseStream.Position - 4 < file_size)              {                  ushort id = br.ReadUInt16();                  switch (id)                  {                      case 0x00:                          current++;                          Command cmd = new Command();                          cmd.param = new List<Param>();                            cmd.cmd = br.ReadUInt16();                          cmds.Add(cmd);                          break;                        case 0x01:  // uint                          Param uintp = new Param();                          uintp.type = id;                          uintp.value = br.ReadBytes(4);                          cmds[current].param.Add(uintp);                          break;                        case 0x02:  // unknown                          Param ushortp = new Param();                          ushortp.type = id;                          ushortp.value = br.ReadBytes(4);                          cmds[current].param.Add(ushortp);                          break;                        case 0x03:                          Param variable = new Param();                          variable.type = id;                          ushort length = br.ReadUInt16();                          variable.value = br.ReadBytes(length);                          cmds[current].param.Add(variable);                          break;                        case 0x06:  // unknown                          Param unk1 = new Param();                          unk1.type = id;                          unk1.value = br.ReadBytes(4);                          cmds[current].param.Add(unk1);                          break;                        case 0x07:  // unknown                          Param unk3 = new Param();                          unk3.type = id;                          unk3.value = br.ReadBytes(4);                          cmds[current].param.Add(unk3);                          break;                          case 0x08:  // unknown                          Param unk2 = new Param();                          unk2.type = id;                          unk2.value = new byte[0];                          cmds[current].param.Add(unk2);                          break;                          case 0x0C:                          Command end = new Command();                          end.param = new List<Param>();                          end.cmd = id;                          cmds.Add(end);                            goto End;                      default:                          System.Windows.Forms.MessageBox.Show("Unknown type of value: " + id.ToString("x") + "\r\n" +                              "at: 0x" + br.BaseStream.Position.ToString("x"));                          goto End;                    }              }
Magic Number,LAYTON,GDS,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\GDS.cs,Read,The following statement contains a magic number: while (br.BaseStream.Position - 4 < file_size)              {                  ushort id = br.ReadUInt16();                  switch (id)                  {                      case 0x00:                          current++;                          Command cmd = new Command();                          cmd.param = new List<Param>();                            cmd.cmd = br.ReadUInt16();                          cmds.Add(cmd);                          break;                        case 0x01:  // uint                          Param uintp = new Param();                          uintp.type = id;                          uintp.value = br.ReadBytes(4);                          cmds[current].param.Add(uintp);                          break;                        case 0x02:  // unknown                          Param ushortp = new Param();                          ushortp.type = id;                          ushortp.value = br.ReadBytes(4);                          cmds[current].param.Add(ushortp);                          break;                        case 0x03:                          Param variable = new Param();                          variable.type = id;                          ushort length = br.ReadUInt16();                          variable.value = br.ReadBytes(length);                          cmds[current].param.Add(variable);                          break;                        case 0x06:  // unknown                          Param unk1 = new Param();                          unk1.type = id;                          unk1.value = br.ReadBytes(4);                          cmds[current].param.Add(unk1);                          break;                        case 0x07:  // unknown                          Param unk3 = new Param();                          unk3.type = id;                          unk3.value = br.ReadBytes(4);                          cmds[current].param.Add(unk3);                          break;                          case 0x08:  // unknown                          Param unk2 = new Param();                          unk2.type = id;                          unk2.value = new byte[0];                          cmds[current].param.Add(unk2);                          break;                          case 0x0C:                          Command end = new Command();                          end.param = new List<Param>();                          end.cmd = id;                          cmds.Add(end);                            goto End;                      default:                          System.Windows.Forms.MessageBox.Show("Unknown type of value: " + id.ToString("x") + "\r\n" +                              "at: 0x" + br.BaseStream.Position.ToString("x"));                          goto End;                    }              }
Magic Number,LAYTON,GDS,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\GDS.cs,Read,The following statement contains a magic number: while (br.BaseStream.Position - 4 < file_size)              {                  ushort id = br.ReadUInt16();                  switch (id)                  {                      case 0x00:                          current++;                          Command cmd = new Command();                          cmd.param = new List<Param>();                            cmd.cmd = br.ReadUInt16();                          cmds.Add(cmd);                          break;                        case 0x01:  // uint                          Param uintp = new Param();                          uintp.type = id;                          uintp.value = br.ReadBytes(4);                          cmds[current].param.Add(uintp);                          break;                        case 0x02:  // unknown                          Param ushortp = new Param();                          ushortp.type = id;                          ushortp.value = br.ReadBytes(4);                          cmds[current].param.Add(ushortp);                          break;                        case 0x03:                          Param variable = new Param();                          variable.type = id;                          ushort length = br.ReadUInt16();                          variable.value = br.ReadBytes(length);                          cmds[current].param.Add(variable);                          break;                        case 0x06:  // unknown                          Param unk1 = new Param();                          unk1.type = id;                          unk1.value = br.ReadBytes(4);                          cmds[current].param.Add(unk1);                          break;                        case 0x07:  // unknown                          Param unk3 = new Param();                          unk3.type = id;                          unk3.value = br.ReadBytes(4);                          cmds[current].param.Add(unk3);                          break;                          case 0x08:  // unknown                          Param unk2 = new Param();                          unk2.type = id;                          unk2.value = new byte[0];                          cmds[current].param.Add(unk2);                          break;                          case 0x0C:                          Command end = new Command();                          end.param = new List<Param>();                          end.cmd = id;                          cmds.Add(end);                            goto End;                      default:                          System.Windows.Forms.MessageBox.Show("Unknown type of value: " + id.ToString("x") + "\r\n" +                              "at: 0x" + br.BaseStream.Position.ToString("x"));                          goto End;                    }              }
Magic Number,LAYTON,GDS,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\GDS.cs,Read,The following statement contains a magic number: while (br.BaseStream.Position - 4 < file_size)              {                  ushort id = br.ReadUInt16();                  switch (id)                  {                      case 0x00:                          current++;                          Command cmd = new Command();                          cmd.param = new List<Param>();                            cmd.cmd = br.ReadUInt16();                          cmds.Add(cmd);                          break;                        case 0x01:  // uint                          Param uintp = new Param();                          uintp.type = id;                          uintp.value = br.ReadBytes(4);                          cmds[current].param.Add(uintp);                          break;                        case 0x02:  // unknown                          Param ushortp = new Param();                          ushortp.type = id;                          ushortp.value = br.ReadBytes(4);                          cmds[current].param.Add(ushortp);                          break;                        case 0x03:                          Param variable = new Param();                          variable.type = id;                          ushort length = br.ReadUInt16();                          variable.value = br.ReadBytes(length);                          cmds[current].param.Add(variable);                          break;                        case 0x06:  // unknown                          Param unk1 = new Param();                          unk1.type = id;                          unk1.value = br.ReadBytes(4);                          cmds[current].param.Add(unk1);                          break;                        case 0x07:  // unknown                          Param unk3 = new Param();                          unk3.type = id;                          unk3.value = br.ReadBytes(4);                          cmds[current].param.Add(unk3);                          break;                          case 0x08:  // unknown                          Param unk2 = new Param();                          unk2.type = id;                          unk2.value = new byte[0];                          cmds[current].param.Add(unk2);                          break;                          case 0x0C:                          Command end = new Command();                          end.param = new List<Param>();                          end.cmd = id;                          cmds.Add(end);                            goto End;                      default:                          System.Windows.Forms.MessageBox.Show("Unknown type of value: " + id.ToString("x") + "\r\n" +                              "at: 0x" + br.BaseStream.Position.ToString("x"));                          goto End;                    }              }
Magic Number,LAYTON,GDS,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\GDS.cs,Read,The following statement contains a magic number: while (br.BaseStream.Position - 4 < file_size)              {                  ushort id = br.ReadUInt16();                  switch (id)                  {                      case 0x00:                          current++;                          Command cmd = new Command();                          cmd.param = new List<Param>();                            cmd.cmd = br.ReadUInt16();                          cmds.Add(cmd);                          break;                        case 0x01:  // uint                          Param uintp = new Param();                          uintp.type = id;                          uintp.value = br.ReadBytes(4);                          cmds[current].param.Add(uintp);                          break;                        case 0x02:  // unknown                          Param ushortp = new Param();                          ushortp.type = id;                          ushortp.value = br.ReadBytes(4);                          cmds[current].param.Add(ushortp);                          break;                        case 0x03:                          Param variable = new Param();                          variable.type = id;                          ushort length = br.ReadUInt16();                          variable.value = br.ReadBytes(length);                          cmds[current].param.Add(variable);                          break;                        case 0x06:  // unknown                          Param unk1 = new Param();                          unk1.type = id;                          unk1.value = br.ReadBytes(4);                          cmds[current].param.Add(unk1);                          break;                        case 0x07:  // unknown                          Param unk3 = new Param();                          unk3.type = id;                          unk3.value = br.ReadBytes(4);                          cmds[current].param.Add(unk3);                          break;                          case 0x08:  // unknown                          Param unk2 = new Param();                          unk2.type = id;                          unk2.value = new byte[0];                          cmds[current].param.Add(unk2);                          break;                          case 0x0C:                          Command end = new Command();                          end.param = new List<Param>();                          end.cmd = id;                          cmds.Add(end);                            goto End;                      default:                          System.Windows.Forms.MessageBox.Show("Unknown type of value: " + id.ToString("x") + "\r\n" +                              "at: 0x" + br.BaseStream.Position.ToString("x"));                          goto End;                    }              }
Magic Number,LAYTON,InfoAni,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoAni.cs,btnImport_Click,The following statement contains a magic number: if (o.ShowDialog() == DialogResult.OK)              {                  Bitmap bmp = new Bitmap(o.FileName);                                    Color[] palette = (this.info.imgs > 1) ? this.info.paleta.colores : null;                  palette = this.info.paleta.colores;                  int selIndex = GetSelectedIndex();                  if (info.imagenes[selIndex].Import(bmp' info.type == 1' ref palette))                  {                      // Update structures                      if (palette != this.info.paleta.colores && palette != null) this.info.paleta.Update(palette);                      imagenes[selIndex] = (Bitmap)info.imagenes[selIndex].bitmap.Clone();                      if (checkBox1.Checked) imagenes[selIndex].MakeTransparent();                      infoPicture1.UpdateSelected(info.imagenes[selIndex]);                      infoPicture1.Imagen_Seleccionada = selIndex;                        // Write file                      string tempFile = this.pluginHost.Get_TempFile();                      Ani.SaveToFile(this.info' tempFile);                        // Compress file                      string compressedFile = this.pluginHost.Get_TempFile();                      this.pluginHost.Compress(tempFile' compressedFile' FormatCompress.LZ10);                        System.IO.BinaryWriter bw = new System.IO.BinaryWriter(System.IO.File.OpenWrite(tempFile));                      bw.BaseStream.SetLength(0);                      bw.Write((uint)2);                      bw.Write(System.IO.File.ReadAllBytes(compressedFile));                      bw.Close();                      System.IO.File.Delete(compressedFile);                        this.pluginHost.ChangeFile(id' tempFile);                  }              }
Magic Number,LAYTON,InfoAni,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoAni.cs,InitializeComponent,The following statement contains a magic number: this.comboBox1.Location = new System.Drawing.Point(390' 12);
Magic Number,LAYTON,InfoAni,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoAni.cs,InitializeComponent,The following statement contains a magic number: this.comboBox1.Location = new System.Drawing.Point(390' 12);
Magic Number,LAYTON,InfoAni,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoAni.cs,InitializeComponent,The following statement contains a magic number: this.comboBox1.Size = new System.Drawing.Size(117' 21);
Magic Number,LAYTON,InfoAni,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoAni.cs,InitializeComponent,The following statement contains a magic number: this.comboBox1.Size = new System.Drawing.Size(117' 21);
Magic Number,LAYTON,InfoAni,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoAni.cs,InitializeComponent,The following statement contains a magic number: this.comboBox1.TabIndex = 4;
Magic Number,LAYTON,InfoAni,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoAni.cs,InitializeComponent,The following statement contains a magic number: this.btnSaveAni.Location = new System.Drawing.Point(390' 129);
Magic Number,LAYTON,InfoAni,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoAni.cs,InitializeComponent,The following statement contains a magic number: this.btnSaveAni.Location = new System.Drawing.Point(390' 129);
Magic Number,LAYTON,InfoAni,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoAni.cs,InitializeComponent,The following statement contains a magic number: this.btnSaveAni.Size = new System.Drawing.Size(117' 34);
Magic Number,LAYTON,InfoAni,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoAni.cs,InitializeComponent,The following statement contains a magic number: this.btnSaveAni.Size = new System.Drawing.Size(117' 34);
Magic Number,LAYTON,InfoAni,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoAni.cs,InitializeComponent,The following statement contains a magic number: this.btnSaveAni.TabIndex = 6;
Magic Number,LAYTON,InfoAni,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoAni.cs,InitializeComponent,The following statement contains a magic number: this.maskedTextBox1.Location = new System.Drawing.Point(447' 39);
Magic Number,LAYTON,InfoAni,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoAni.cs,InitializeComponent,The following statement contains a magic number: this.maskedTextBox1.Location = new System.Drawing.Point(447' 39);
Magic Number,LAYTON,InfoAni,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoAni.cs,InitializeComponent,The following statement contains a magic number: this.maskedTextBox1.Size = new System.Drawing.Size(35' 20);
Magic Number,LAYTON,InfoAni,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoAni.cs,InitializeComponent,The following statement contains a magic number: this.maskedTextBox1.Size = new System.Drawing.Size(35' 20);
Magic Number,LAYTON,InfoAni,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoAni.cs,InitializeComponent,The following statement contains a magic number: this.maskedTextBox1.TabIndex = 7;
Magic Number,LAYTON,InfoAni,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoAni.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(388' 42);
Magic Number,LAYTON,InfoAni,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoAni.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(388' 42);
Magic Number,LAYTON,InfoAni,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoAni.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(26' 13);
Magic Number,LAYTON,InfoAni,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoAni.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(26' 13);
Magic Number,LAYTON,InfoAni,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoAni.cs,InitializeComponent,The following statement contains a magic number: this.label1.TabIndex = 8;
Magic Number,LAYTON,InfoAni,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoAni.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point(488' 42);
Magic Number,LAYTON,InfoAni,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoAni.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point(488' 42);
Magic Number,LAYTON,InfoAni,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoAni.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size(20' 13);
Magic Number,LAYTON,InfoAni,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoAni.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size(20' 13);
Magic Number,LAYTON,InfoAni,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoAni.cs,InitializeComponent,The following statement contains a magic number: this.label2.TabIndex = 9;
Magic Number,LAYTON,InfoAni,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoAni.cs,InitializeComponent,The following statement contains a magic number: this.btnNext.Location = new System.Drawing.Point(483' 77);
Magic Number,LAYTON,InfoAni,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoAni.cs,InitializeComponent,The following statement contains a magic number: this.btnNext.Location = new System.Drawing.Point(483' 77);
Magic Number,LAYTON,InfoAni,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoAni.cs,InitializeComponent,The following statement contains a magic number: this.btnNext.Size = new System.Drawing.Size(25' 23);
Magic Number,LAYTON,InfoAni,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoAni.cs,InitializeComponent,The following statement contains a magic number: this.btnNext.Size = new System.Drawing.Size(25' 23);
Magic Number,LAYTON,InfoAni,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoAni.cs,InitializeComponent,The following statement contains a magic number: this.btnNext.TabIndex = 10;
Magic Number,LAYTON,InfoAni,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoAni.cs,InitializeComponent,The following statement contains a magic number: this.timer1.Interval = 320;
Magic Number,LAYTON,InfoAni,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoAni.cs,InitializeComponent,The following statement contains a magic number: this.btnPrevious.Location = new System.Drawing.Point(390' 77);
Magic Number,LAYTON,InfoAni,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoAni.cs,InitializeComponent,The following statement contains a magic number: this.btnPrevious.Location = new System.Drawing.Point(390' 77);
Magic Number,LAYTON,InfoAni,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoAni.cs,InitializeComponent,The following statement contains a magic number: this.btnPrevious.Size = new System.Drawing.Size(25' 23);
Magic Number,LAYTON,InfoAni,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoAni.cs,InitializeComponent,The following statement contains a magic number: this.btnPrevious.Size = new System.Drawing.Size(25' 23);
Magic Number,LAYTON,InfoAni,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoAni.cs,InitializeComponent,The following statement contains a magic number: this.btnPrevious.TabIndex = 11;
Magic Number,LAYTON,InfoAni,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoAni.cs,InitializeComponent,The following statement contains a magic number: this.btnStop.Location = new System.Drawing.Point(421' 77);
Magic Number,LAYTON,InfoAni,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoAni.cs,InitializeComponent,The following statement contains a magic number: this.btnStop.Location = new System.Drawing.Point(421' 77);
Magic Number,LAYTON,InfoAni,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoAni.cs,InitializeComponent,The following statement contains a magic number: this.btnStop.Size = new System.Drawing.Size(25' 23);
Magic Number,LAYTON,InfoAni,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoAni.cs,InitializeComponent,The following statement contains a magic number: this.btnStop.Size = new System.Drawing.Size(25' 23);
Magic Number,LAYTON,InfoAni,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoAni.cs,InitializeComponent,The following statement contains a magic number: this.btnStop.TabIndex = 12;
Magic Number,LAYTON,InfoAni,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoAni.cs,InitializeComponent,The following statement contains a magic number: this.btnPlay.Location = new System.Drawing.Point(452' 77);
Magic Number,LAYTON,InfoAni,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoAni.cs,InitializeComponent,The following statement contains a magic number: this.btnPlay.Location = new System.Drawing.Point(452' 77);
Magic Number,LAYTON,InfoAni,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoAni.cs,InitializeComponent,The following statement contains a magic number: this.btnPlay.Size = new System.Drawing.Size(25' 23);
Magic Number,LAYTON,InfoAni,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoAni.cs,InitializeComponent,The following statement contains a magic number: this.btnPlay.Size = new System.Drawing.Size(25' 23);
Magic Number,LAYTON,InfoAni,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoAni.cs,InitializeComponent,The following statement contains a magic number: this.btnPlay.TabIndex = 13;
Magic Number,LAYTON,InfoAni,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoAni.cs,InitializeComponent,The following statement contains a magic number: this.checkBox1.Location = new System.Drawing.Point(391' 106);
Magic Number,LAYTON,InfoAni,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoAni.cs,InitializeComponent,The following statement contains a magic number: this.checkBox1.Location = new System.Drawing.Point(391' 106);
Magic Number,LAYTON,InfoAni,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoAni.cs,InitializeComponent,The following statement contains a magic number: this.checkBox1.Size = new System.Drawing.Size(45' 17);
Magic Number,LAYTON,InfoAni,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoAni.cs,InitializeComponent,The following statement contains a magic number: this.checkBox1.Size = new System.Drawing.Size(45' 17);
Magic Number,LAYTON,InfoAni,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoAni.cs,InitializeComponent,The following statement contains a magic number: this.checkBox1.TabIndex = 14;
Magic Number,LAYTON,InfoAni,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoAni.cs,InitializeComponent,The following statement contains a magic number: this.btnImport.Location = new System.Drawing.Point(390' 437);
Magic Number,LAYTON,InfoAni,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoAni.cs,InitializeComponent,The following statement contains a magic number: this.btnImport.Location = new System.Drawing.Point(390' 437);
Magic Number,LAYTON,InfoAni,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoAni.cs,InitializeComponent,The following statement contains a magic number: this.btnImport.Size = new System.Drawing.Size(117' 34);
Magic Number,LAYTON,InfoAni,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoAni.cs,InitializeComponent,The following statement contains a magic number: this.btnImport.Size = new System.Drawing.Size(117' 34);
Magic Number,LAYTON,InfoAni,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoAni.cs,InitializeComponent,The following statement contains a magic number: this.btnImport.TabIndex = 58;
Magic Number,LAYTON,InfoAni,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoAni.cs,InitializeComponent,The following statement contains a magic number: this.btnSave.Location = new System.Drawing.Point(390' 477);
Magic Number,LAYTON,InfoAni,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoAni.cs,InitializeComponent,The following statement contains a magic number: this.btnSave.Location = new System.Drawing.Point(390' 477);
Magic Number,LAYTON,InfoAni,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoAni.cs,InitializeComponent,The following statement contains a magic number: this.btnSave.Size = new System.Drawing.Size(117' 34);
Magic Number,LAYTON,InfoAni,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoAni.cs,InitializeComponent,The following statement contains a magic number: this.btnSave.Size = new System.Drawing.Size(117' 34);
Magic Number,LAYTON,InfoAni,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoAni.cs,InitializeComponent,The following statement contains a magic number: this.btnSave.TabIndex = 57;
Magic Number,LAYTON,InfoAni,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoAni.cs,InitializeComponent,The following statement contains a magic number: this.infoPicture1.Size = new System.Drawing.Size(384' 518);
Magic Number,LAYTON,InfoAni,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoAni.cs,InitializeComponent,The following statement contains a magic number: this.infoPicture1.Size = new System.Drawing.Size(384' 518);
Magic Number,LAYTON,InfoAni,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoAni.cs,InitializeComponent,The following statement contains a magic number: this.infoPicture1.TabIndex = 2;
Magic Number,LAYTON,InfoAni,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoAni.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(511' 514);
Magic Number,LAYTON,InfoAni,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoAni.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(511' 514);
Magic Number,LAYTON,InfoBG,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoBG.cs,InitializeComponent,The following statement contains a magic number: this.pic.Location = new System.Drawing.Point(4' 4);
Magic Number,LAYTON,InfoBG,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoBG.cs,InitializeComponent,The following statement contains a magic number: this.pic.Location = new System.Drawing.Point(4' 4);
Magic Number,LAYTON,InfoBG,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoBG.cs,InitializeComponent,The following statement contains a magic number: this.pic.Size = new System.Drawing.Size(100' 50);
Magic Number,LAYTON,InfoBG,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoBG.cs,InitializeComponent,The following statement contains a magic number: this.pic.Size = new System.Drawing.Size(100' 50);
Magic Number,LAYTON,InfoBG,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoBG.cs,InitializeComponent,The following statement contains a magic number: this.btnSave.Location = new System.Drawing.Point(4' 462);
Magic Number,LAYTON,InfoBG,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoBG.cs,InitializeComponent,The following statement contains a magic number: this.btnSave.Location = new System.Drawing.Point(4' 462);
Magic Number,LAYTON,InfoBG,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoBG.cs,InitializeComponent,The following statement contains a magic number: this.btnSave.Size = new System.Drawing.Size(130' 45);
Magic Number,LAYTON,InfoBG,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoBG.cs,InitializeComponent,The following statement contains a magic number: this.btnSave.Size = new System.Drawing.Size(130' 45);
Magic Number,LAYTON,InfoBG,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoBG.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(510' 510);
Magic Number,LAYTON,InfoBG,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoBG.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(510' 510);
Magic Number,LAYTON,InfoImage,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoImage.cs,InitializeComponent,The following statement contains a magic number: this.groupBox1.Location = new System.Drawing.Point(4' 80);
Magic Number,LAYTON,InfoImage,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoImage.cs,InitializeComponent,The following statement contains a magic number: this.groupBox1.Location = new System.Drawing.Point(4' 80);
Magic Number,LAYTON,InfoImage,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoImage.cs,InitializeComponent,The following statement contains a magic number: this.groupBox1.Size = new System.Drawing.Size(351' 122);
Magic Number,LAYTON,InfoImage,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoImage.cs,InitializeComponent,The following statement contains a magic number: this.groupBox1.Size = new System.Drawing.Size(351' 122);
Magic Number,LAYTON,InfoImage,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoImage.cs,InitializeComponent,The following statement contains a magic number: this.groupBox1.TabIndex = 45;
Magic Number,LAYTON,InfoImage,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoImage.cs,InitializeComponent,The following statement contains a magic number: this.tabPartes.Location = new System.Drawing.Point(3' 16);
Magic Number,LAYTON,InfoImage,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoImage.cs,InitializeComponent,The following statement contains a magic number: this.tabPartes.Location = new System.Drawing.Point(3' 16);
Magic Number,LAYTON,InfoImage,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoImage.cs,InitializeComponent,The following statement contains a magic number: this.tabPartes.Size = new System.Drawing.Size(345' 103);
Magic Number,LAYTON,InfoImage,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoImage.cs,InitializeComponent,The following statement contains a magic number: this.tabPartes.Size = new System.Drawing.Size(345' 103);
Magic Number,LAYTON,InfoImage,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoImage.cs,InitializeComponent,The following statement contains a magic number: this.tabPartes.TabIndex = 35;
Magic Number,LAYTON,InfoImage,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoImage.cs,InitializeComponent,The following statement contains a magic number: this.lblNPartes.Location = new System.Drawing.Point(1' 58);
Magic Number,LAYTON,InfoImage,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoImage.cs,InitializeComponent,The following statement contains a magic number: this.lblNPartes.Size = new System.Drawing.Size(26' 13);
Magic Number,LAYTON,InfoImage,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoImage.cs,InitializeComponent,The following statement contains a magic number: this.lblNPartes.Size = new System.Drawing.Size(26' 13);
Magic Number,LAYTON,InfoImage,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoImage.cs,InitializeComponent,The following statement contains a magic number: this.lblNPartes.TabIndex = 37;
Magic Number,LAYTON,InfoImage,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoImage.cs,InitializeComponent,The following statement contains a magic number: this.txtNPartes.Location = new System.Drawing.Point(100' 55);
Magic Number,LAYTON,InfoImage,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoImage.cs,InitializeComponent,The following statement contains a magic number: this.txtNPartes.Location = new System.Drawing.Point(100' 55);
Magic Number,LAYTON,InfoImage,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoImage.cs,InitializeComponent,The following statement contains a magic number: this.txtNPartes.Size = new System.Drawing.Size(60' 20);
Magic Number,LAYTON,InfoImage,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoImage.cs,InitializeComponent,The following statement contains a magic number: this.txtNPartes.Size = new System.Drawing.Size(60' 20);
Magic Number,LAYTON,InfoImage,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoImage.cs,InitializeComponent,The following statement contains a magic number: this.txtNPartes.TabIndex = 38;
Magic Number,LAYTON,InfoImage,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoImage.cs,InitializeComponent,The following statement contains a magic number: this.lblTamanoImg.Location = new System.Drawing.Point(166' 6);
Magic Number,LAYTON,InfoImage,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoImage.cs,InitializeComponent,The following statement contains a magic number: this.lblTamanoImg.Location = new System.Drawing.Point(166' 6);
Magic Number,LAYTON,InfoImage,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoImage.cs,InitializeComponent,The following statement contains a magic number: this.lblTamanoImg.Size = new System.Drawing.Size(26' 13);
Magic Number,LAYTON,InfoImage,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoImage.cs,InitializeComponent,The following statement contains a magic number: this.lblTamanoImg.Size = new System.Drawing.Size(26' 13);
Magic Number,LAYTON,InfoImage,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoImage.cs,InitializeComponent,The following statement contains a magic number: this.lblTamanoImg.TabIndex = 47;
Magic Number,LAYTON,InfoImage,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoImage.cs,InitializeComponent,The following statement contains a magic number: this.txtTamanoImg.Location = new System.Drawing.Point(280' 3);
Magic Number,LAYTON,InfoImage,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoImage.cs,InitializeComponent,The following statement contains a magic number: this.txtTamanoImg.Location = new System.Drawing.Point(280' 3);
Magic Number,LAYTON,InfoImage,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoImage.cs,InitializeComponent,The following statement contains a magic number: this.txtTamanoImg.Size = new System.Drawing.Size(60' 20);
Magic Number,LAYTON,InfoImage,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoImage.cs,InitializeComponent,The following statement contains a magic number: this.txtTamanoImg.Size = new System.Drawing.Size(60' 20);
Magic Number,LAYTON,InfoImage,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoImage.cs,InitializeComponent,The following statement contains a magic number: this.txtTamanoImg.TabIndex = 46;
Magic Number,LAYTON,InfoImage,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoImage.cs,InitializeComponent,The following statement contains a magic number: this.txtImgs.Location = new System.Drawing.Point(100' 3);
Magic Number,LAYTON,InfoImage,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoImage.cs,InitializeComponent,The following statement contains a magic number: this.txtImgs.Location = new System.Drawing.Point(100' 3);
Magic Number,LAYTON,InfoImage,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoImage.cs,InitializeComponent,The following statement contains a magic number: this.txtImgs.Size = new System.Drawing.Size(60' 20);
Magic Number,LAYTON,InfoImage,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoImage.cs,InitializeComponent,The following statement contains a magic number: this.txtImgs.Size = new System.Drawing.Size(60' 20);
Magic Number,LAYTON,InfoImage,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoImage.cs,InitializeComponent,The following statement contains a magic number: this.txtImgs.TabIndex = 40;
Magic Number,LAYTON,InfoImage,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoImage.cs,InitializeComponent,The following statement contains a magic number: this.lblImgs.Location = new System.Drawing.Point(1' 6);
Magic Number,LAYTON,InfoImage,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoImage.cs,InitializeComponent,The following statement contains a magic number: this.lblImgs.Size = new System.Drawing.Size(26' 13);
Magic Number,LAYTON,InfoImage,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoImage.cs,InitializeComponent,The following statement contains a magic number: this.lblImgs.Size = new System.Drawing.Size(26' 13);
Magic Number,LAYTON,InfoImage,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoImage.cs,InitializeComponent,The following statement contains a magic number: this.lblImgs.TabIndex = 39;
Magic Number,LAYTON,InfoImage,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoImage.cs,InitializeComponent,The following statement contains a magic number: this.lblAncho.Location = new System.Drawing.Point(1' 32);
Magic Number,LAYTON,InfoImage,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoImage.cs,InitializeComponent,The following statement contains a magic number: this.lblAncho.Size = new System.Drawing.Size(26' 13);
Magic Number,LAYTON,InfoImage,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoImage.cs,InitializeComponent,The following statement contains a magic number: this.lblAncho.Size = new System.Drawing.Size(26' 13);
Magic Number,LAYTON,InfoImage,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoImage.cs,InitializeComponent,The following statement contains a magic number: this.lblAncho.TabIndex = 41;
Magic Number,LAYTON,InfoImage,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoImage.cs,InitializeComponent,The following statement contains a magic number: this.txtAlto.Location = new System.Drawing.Point(280' 29);
Magic Number,LAYTON,InfoImage,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoImage.cs,InitializeComponent,The following statement contains a magic number: this.txtAlto.Location = new System.Drawing.Point(280' 29);
Magic Number,LAYTON,InfoImage,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoImage.cs,InitializeComponent,The following statement contains a magic number: this.txtAlto.Size = new System.Drawing.Size(60' 20);
Magic Number,LAYTON,InfoImage,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoImage.cs,InitializeComponent,The following statement contains a magic number: this.txtAlto.Size = new System.Drawing.Size(60' 20);
Magic Number,LAYTON,InfoImage,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoImage.cs,InitializeComponent,The following statement contains a magic number: this.txtAlto.TabIndex = 43;
Magic Number,LAYTON,InfoImage,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoImage.cs,InitializeComponent,The following statement contains a magic number: this.lblAlto.Location = new System.Drawing.Point(166' 32);
Magic Number,LAYTON,InfoImage,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoImage.cs,InitializeComponent,The following statement contains a magic number: this.lblAlto.Location = new System.Drawing.Point(166' 32);
Magic Number,LAYTON,InfoImage,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoImage.cs,InitializeComponent,The following statement contains a magic number: this.lblAlto.Size = new System.Drawing.Size(26' 13);
Magic Number,LAYTON,InfoImage,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoImage.cs,InitializeComponent,The following statement contains a magic number: this.lblAlto.Size = new System.Drawing.Size(26' 13);
Magic Number,LAYTON,InfoImage,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoImage.cs,InitializeComponent,The following statement contains a magic number: this.lblAlto.TabIndex = 44;
Magic Number,LAYTON,InfoImage,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoImage.cs,InitializeComponent,The following statement contains a magic number: this.txtAncho.Location = new System.Drawing.Point(100' 29);
Magic Number,LAYTON,InfoImage,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoImage.cs,InitializeComponent,The following statement contains a magic number: this.txtAncho.Location = new System.Drawing.Point(100' 29);
Magic Number,LAYTON,InfoImage,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoImage.cs,InitializeComponent,The following statement contains a magic number: this.txtAncho.Size = new System.Drawing.Size(60' 20);
Magic Number,LAYTON,InfoImage,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoImage.cs,InitializeComponent,The following statement contains a magic number: this.txtAncho.Size = new System.Drawing.Size(60' 20);
Magic Number,LAYTON,InfoImage,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoImage.cs,InitializeComponent,The following statement contains a magic number: this.txtAncho.TabIndex = 42;
Magic Number,LAYTON,InfoImage,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoImage.cs,InitializeComponent,The following statement contains a magic number: this.lblName.Location = new System.Drawing.Point(166' 58);
Magic Number,LAYTON,InfoImage,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoImage.cs,InitializeComponent,The following statement contains a magic number: this.lblName.Location = new System.Drawing.Point(166' 58);
Magic Number,LAYTON,InfoImage,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoImage.cs,InitializeComponent,The following statement contains a magic number: this.lblName.Size = new System.Drawing.Size(26' 13);
Magic Number,LAYTON,InfoImage,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoImage.cs,InitializeComponent,The following statement contains a magic number: this.lblName.Size = new System.Drawing.Size(26' 13);
Magic Number,LAYTON,InfoImage,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoImage.cs,InitializeComponent,The following statement contains a magic number: this.lblName.TabIndex = 48;
Magic Number,LAYTON,InfoImage,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoImage.cs,InitializeComponent,The following statement contains a magic number: this.txtName.Location = new System.Drawing.Point(280' 55);
Magic Number,LAYTON,InfoImage,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoImage.cs,InitializeComponent,The following statement contains a magic number: this.txtName.Location = new System.Drawing.Point(280' 55);
Magic Number,LAYTON,InfoImage,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoImage.cs,InitializeComponent,The following statement contains a magic number: this.txtName.Size = new System.Drawing.Size(60' 20);
Magic Number,LAYTON,InfoImage,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoImage.cs,InitializeComponent,The following statement contains a magic number: this.txtName.Size = new System.Drawing.Size(60' 20);
Magic Number,LAYTON,InfoImage,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoImage.cs,InitializeComponent,The following statement contains a magic number: this.txtName.TabIndex = 49;
Magic Number,LAYTON,InfoImage,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoImage.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(365' 205);
Magic Number,LAYTON,InfoImage,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoImage.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(365' 205);
Magic Number,LAYTON,InfoParte,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoParte.cs,InitializeComponent,The following statement contains a magic number: this.txtAnchoP.Location = new System.Drawing.Point(82' 27);
Magic Number,LAYTON,InfoParte,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoParte.cs,InitializeComponent,The following statement contains a magic number: this.txtAnchoP.Location = new System.Drawing.Point(82' 27);
Magic Number,LAYTON,InfoParte,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoParte.cs,InitializeComponent,The following statement contains a magic number: this.txtAnchoP.Size = new System.Drawing.Size(75' 20);
Magic Number,LAYTON,InfoParte,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoParte.cs,InitializeComponent,The following statement contains a magic number: this.txtAnchoP.Size = new System.Drawing.Size(75' 20);
Magic Number,LAYTON,InfoParte,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoParte.cs,InitializeComponent,The following statement contains a magic number: this.txtAnchoP.TabIndex = 40;
Magic Number,LAYTON,InfoParte,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoParte.cs,InitializeComponent,The following statement contains a magic number: this.txtPos.Location = new System.Drawing.Point(82' 1);
Magic Number,LAYTON,InfoParte,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoParte.cs,InitializeComponent,The following statement contains a magic number: this.txtPos.Size = new System.Drawing.Size(75' 20);
Magic Number,LAYTON,InfoParte,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoParte.cs,InitializeComponent,The following statement contains a magic number: this.txtPos.Size = new System.Drawing.Size(75' 20);
Magic Number,LAYTON,InfoParte,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoParte.cs,InitializeComponent,The following statement contains a magic number: this.txtPos.TabIndex = 36;
Magic Number,LAYTON,InfoParte,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoParte.cs,InitializeComponent,The following statement contains a magic number: this.txtAltoP.Location = new System.Drawing.Point(249' 27);
Magic Number,LAYTON,InfoParte,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoParte.cs,InitializeComponent,The following statement contains a magic number: this.txtAltoP.Location = new System.Drawing.Point(249' 27);
Magic Number,LAYTON,InfoParte,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoParte.cs,InitializeComponent,The following statement contains a magic number: this.txtAltoP.Size = new System.Drawing.Size(75' 20);
Magic Number,LAYTON,InfoParte,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoParte.cs,InitializeComponent,The following statement contains a magic number: this.txtAltoP.Size = new System.Drawing.Size(75' 20);
Magic Number,LAYTON,InfoParte,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoParte.cs,InitializeComponent,The following statement contains a magic number: this.txtAltoP.TabIndex = 42;
Magic Number,LAYTON,InfoParte,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoParte.cs,InitializeComponent,The following statement contains a magic number: this.lblPos.Location = new System.Drawing.Point(3' 4);
Magic Number,LAYTON,InfoParte,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoParte.cs,InitializeComponent,The following statement contains a magic number: this.lblPos.Location = new System.Drawing.Point(3' 4);
Magic Number,LAYTON,InfoParte,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoParte.cs,InitializeComponent,The following statement contains a magic number: this.lblPos.Size = new System.Drawing.Size(26' 13);
Magic Number,LAYTON,InfoParte,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoParte.cs,InitializeComponent,The following statement contains a magic number: this.lblPos.Size = new System.Drawing.Size(26' 13);
Magic Number,LAYTON,InfoParte,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoParte.cs,InitializeComponent,The following statement contains a magic number: this.lblPos.TabIndex = 35;
Magic Number,LAYTON,InfoParte,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoParte.cs,InitializeComponent,The following statement contains a magic number: this.lblAltoP.Location = new System.Drawing.Point(182' 30);
Magic Number,LAYTON,InfoParte,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoParte.cs,InitializeComponent,The following statement contains a magic number: this.lblAltoP.Location = new System.Drawing.Point(182' 30);
Magic Number,LAYTON,InfoParte,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoParte.cs,InitializeComponent,The following statement contains a magic number: this.lblAltoP.Size = new System.Drawing.Size(26' 13);
Magic Number,LAYTON,InfoParte,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoParte.cs,InitializeComponent,The following statement contains a magic number: this.lblAltoP.Size = new System.Drawing.Size(26' 13);
Magic Number,LAYTON,InfoParte,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoParte.cs,InitializeComponent,The following statement contains a magic number: this.lblAltoP.TabIndex = 41;
Magic Number,LAYTON,InfoParte,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoParte.cs,InitializeComponent,The following statement contains a magic number: this.lblTamanoP.Location = new System.Drawing.Point(182' 4);
Magic Number,LAYTON,InfoParte,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoParte.cs,InitializeComponent,The following statement contains a magic number: this.lblTamanoP.Location = new System.Drawing.Point(182' 4);
Magic Number,LAYTON,InfoParte,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoParte.cs,InitializeComponent,The following statement contains a magic number: this.lblTamanoP.Size = new System.Drawing.Size(26' 13);
Magic Number,LAYTON,InfoParte,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoParte.cs,InitializeComponent,The following statement contains a magic number: this.lblTamanoP.Size = new System.Drawing.Size(26' 13);
Magic Number,LAYTON,InfoParte,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoParte.cs,InitializeComponent,The following statement contains a magic number: this.lblTamanoP.TabIndex = 37;
Magic Number,LAYTON,InfoParte,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoParte.cs,InitializeComponent,The following statement contains a magic number: this.txtTamanoP.Location = new System.Drawing.Point(249' 1);
Magic Number,LAYTON,InfoParte,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoParte.cs,InitializeComponent,The following statement contains a magic number: this.txtTamanoP.Size = new System.Drawing.Size(75' 20);
Magic Number,LAYTON,InfoParte,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoParte.cs,InitializeComponent,The following statement contains a magic number: this.txtTamanoP.Size = new System.Drawing.Size(75' 20);
Magic Number,LAYTON,InfoParte,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoParte.cs,InitializeComponent,The following statement contains a magic number: this.txtTamanoP.TabIndex = 38;
Magic Number,LAYTON,InfoParte,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoParte.cs,InitializeComponent,The following statement contains a magic number: this.lblAnchoP.Location = new System.Drawing.Point(3' 30);
Magic Number,LAYTON,InfoParte,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoParte.cs,InitializeComponent,The following statement contains a magic number: this.lblAnchoP.Location = new System.Drawing.Point(3' 30);
Magic Number,LAYTON,InfoParte,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoParte.cs,InitializeComponent,The following statement contains a magic number: this.lblAnchoP.Size = new System.Drawing.Size(26' 13);
Magic Number,LAYTON,InfoParte,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoParte.cs,InitializeComponent,The following statement contains a magic number: this.lblAnchoP.Size = new System.Drawing.Size(26' 13);
Magic Number,LAYTON,InfoParte,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoParte.cs,InitializeComponent,The following statement contains a magic number: this.lblAnchoP.TabIndex = 39;
Magic Number,LAYTON,InfoParte,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoParte.cs,InitializeComponent,The following statement contains a magic number: this.txtPosY.Location = new System.Drawing.Point(249' 53);
Magic Number,LAYTON,InfoParte,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoParte.cs,InitializeComponent,The following statement contains a magic number: this.txtPosY.Location = new System.Drawing.Point(249' 53);
Magic Number,LAYTON,InfoParte,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoParte.cs,InitializeComponent,The following statement contains a magic number: this.txtPosY.Size = new System.Drawing.Size(75' 20);
Magic Number,LAYTON,InfoParte,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoParte.cs,InitializeComponent,The following statement contains a magic number: this.txtPosY.Size = new System.Drawing.Size(75' 20);
Magic Number,LAYTON,InfoParte,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoParte.cs,InitializeComponent,The following statement contains a magic number: this.txtPosY.TabIndex = 44;
Magic Number,LAYTON,InfoParte,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoParte.cs,InitializeComponent,The following statement contains a magic number: this.txtPosX.Location = new System.Drawing.Point(82' 55);
Magic Number,LAYTON,InfoParte,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoParte.cs,InitializeComponent,The following statement contains a magic number: this.txtPosX.Location = new System.Drawing.Point(82' 55);
Magic Number,LAYTON,InfoParte,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoParte.cs,InitializeComponent,The following statement contains a magic number: this.txtPosX.Size = new System.Drawing.Size(75' 20);
Magic Number,LAYTON,InfoParte,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoParte.cs,InitializeComponent,The following statement contains a magic number: this.txtPosX.Size = new System.Drawing.Size(75' 20);
Magic Number,LAYTON,InfoParte,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoParte.cs,InitializeComponent,The following statement contains a magic number: this.txtPosX.TabIndex = 45;
Magic Number,LAYTON,InfoParte,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoParte.cs,InitializeComponent,The following statement contains a magic number: this.lblPosY.Location = new System.Drawing.Point(182' 56);
Magic Number,LAYTON,InfoParte,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoParte.cs,InitializeComponent,The following statement contains a magic number: this.lblPosY.Location = new System.Drawing.Point(182' 56);
Magic Number,LAYTON,InfoParte,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoParte.cs,InitializeComponent,The following statement contains a magic number: this.lblPosY.Size = new System.Drawing.Size(26' 13);
Magic Number,LAYTON,InfoParte,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoParte.cs,InitializeComponent,The following statement contains a magic number: this.lblPosY.Size = new System.Drawing.Size(26' 13);
Magic Number,LAYTON,InfoParte,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoParte.cs,InitializeComponent,The following statement contains a magic number: this.lblPosY.TabIndex = 46;
Magic Number,LAYTON,InfoParte,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoParte.cs,InitializeComponent,The following statement contains a magic number: this.lblPosX.Location = new System.Drawing.Point(3' 58);
Magic Number,LAYTON,InfoParte,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoParte.cs,InitializeComponent,The following statement contains a magic number: this.lblPosX.Location = new System.Drawing.Point(3' 58);
Magic Number,LAYTON,InfoParte,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoParte.cs,InitializeComponent,The following statement contains a magic number: this.lblPosX.Size = new System.Drawing.Size(26' 13);
Magic Number,LAYTON,InfoParte,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoParte.cs,InitializeComponent,The following statement contains a magic number: this.lblPosX.Size = new System.Drawing.Size(26' 13);
Magic Number,LAYTON,InfoParte,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoParte.cs,InitializeComponent,The following statement contains a magic number: this.lblPosX.TabIndex = 47;
Magic Number,LAYTON,InfoParte,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoParte.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(327' 77);
Magic Number,LAYTON,InfoParte,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoParte.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(327' 77);
Magic Number,LAYTON,InfoPicture,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoPicture.cs,InitializeComponent,The following statement contains a magic number: this.lblTipo.Location = new System.Drawing.Point(6' 22);
Magic Number,LAYTON,InfoPicture,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoPicture.cs,InitializeComponent,The following statement contains a magic number: this.lblTipo.Location = new System.Drawing.Point(6' 22);
Magic Number,LAYTON,InfoPicture,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoPicture.cs,InitializeComponent,The following statement contains a magic number: this.lblTipo.Size = new System.Drawing.Size(26' 13);
Magic Number,LAYTON,InfoPicture,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoPicture.cs,InitializeComponent,The following statement contains a magic number: this.lblTipo.Size = new System.Drawing.Size(26' 13);
Magic Number,LAYTON,InfoPicture,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoPicture.cs,InitializeComponent,The following statement contains a magic number: this.lblTipo.TabIndex = 40;
Magic Number,LAYTON,InfoPicture,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoPicture.cs,InitializeComponent,The following statement contains a magic number: this.lblNImgs.Location = new System.Drawing.Point(167' 22);
Magic Number,LAYTON,InfoPicture,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoPicture.cs,InitializeComponent,The following statement contains a magic number: this.lblNImgs.Location = new System.Drawing.Point(167' 22);
Magic Number,LAYTON,InfoPicture,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoPicture.cs,InitializeComponent,The following statement contains a magic number: this.lblNImgs.Size = new System.Drawing.Size(26' 13);
Magic Number,LAYTON,InfoPicture,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoPicture.cs,InitializeComponent,The following statement contains a magic number: this.lblNImgs.Size = new System.Drawing.Size(26' 13);
Magic Number,LAYTON,InfoPicture,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoPicture.cs,InitializeComponent,The following statement contains a magic number: this.lblNImgs.TabIndex = 41;
Magic Number,LAYTON,InfoPicture,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoPicture.cs,InitializeComponent,The following statement contains a magic number: this.txtNImgs.Location = new System.Drawing.Point(277' 19);
Magic Number,LAYTON,InfoPicture,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoPicture.cs,InitializeComponent,The following statement contains a magic number: this.txtNImgs.Location = new System.Drawing.Point(277' 19);
Magic Number,LAYTON,InfoPicture,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoPicture.cs,InitializeComponent,The following statement contains a magic number: this.txtNImgs.Size = new System.Drawing.Size(80' 20);
Magic Number,LAYTON,InfoPicture,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoPicture.cs,InitializeComponent,The following statement contains a magic number: this.txtNImgs.Size = new System.Drawing.Size(80' 20);
Magic Number,LAYTON,InfoPicture,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoPicture.cs,InitializeComponent,The following statement contains a magic number: this.txtNImgs.TabIndex = 42;
Magic Number,LAYTON,InfoPicture,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoPicture.cs,InitializeComponent,The following statement contains a magic number: this.groupBox1.Location = new System.Drawing.Point(6' 45);
Magic Number,LAYTON,InfoPicture,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoPicture.cs,InitializeComponent,The following statement contains a magic number: this.groupBox1.Location = new System.Drawing.Point(6' 45);
Magic Number,LAYTON,InfoPicture,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoPicture.cs,InitializeComponent,The following statement contains a magic number: this.groupBox1.Size = new System.Drawing.Size(373' 245);
Magic Number,LAYTON,InfoPicture,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoPicture.cs,InitializeComponent,The following statement contains a magic number: this.groupBox1.Size = new System.Drawing.Size(373' 245);
Magic Number,LAYTON,InfoPicture,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoPicture.cs,InitializeComponent,The following statement contains a magic number: this.groupBox1.TabIndex = 43;
Magic Number,LAYTON,InfoPicture,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoPicture.cs,InitializeComponent,The following statement contains a magic number: this.tabImags.Location = new System.Drawing.Point(3' 16);
Magic Number,LAYTON,InfoPicture,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoPicture.cs,InitializeComponent,The following statement contains a magic number: this.tabImags.Location = new System.Drawing.Point(3' 16);
Magic Number,LAYTON,InfoPicture,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoPicture.cs,InitializeComponent,The following statement contains a magic number: this.tabImags.Size = new System.Drawing.Size(367' 226);
Magic Number,LAYTON,InfoPicture,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoPicture.cs,InitializeComponent,The following statement contains a magic number: this.tabImags.Size = new System.Drawing.Size(367' 226);
Magic Number,LAYTON,InfoPicture,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoPicture.cs,InitializeComponent,The following statement contains a magic number: this.groupImage.Size = new System.Drawing.Size(385' 292);
Magic Number,LAYTON,InfoPicture,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoPicture.cs,InitializeComponent,The following statement contains a magic number: this.groupImage.Size = new System.Drawing.Size(385' 292);
Magic Number,LAYTON,InfoPicture,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoPicture.cs,InitializeComponent,The following statement contains a magic number: this.groupImage.TabIndex = 41;
Magic Number,LAYTON,InfoPicture,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoPicture.cs,InitializeComponent,The following statement contains a magic number: this.txtTipo.Location = new System.Drawing.Point(81' 19);
Magic Number,LAYTON,InfoPicture,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoPicture.cs,InitializeComponent,The following statement contains a magic number: this.txtTipo.Location = new System.Drawing.Point(81' 19);
Magic Number,LAYTON,InfoPicture,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoPicture.cs,InitializeComponent,The following statement contains a magic number: this.txtTipo.Size = new System.Drawing.Size(80' 20);
Magic Number,LAYTON,InfoPicture,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoPicture.cs,InitializeComponent,The following statement contains a magic number: this.txtTipo.Size = new System.Drawing.Size(80' 20);
Magic Number,LAYTON,InfoPicture,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoPicture.cs,InitializeComponent,The following statement contains a magic number: this.txtTipo.TabIndex = 44;
Magic Number,LAYTON,InfoPicture,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoPicture.cs,InitializeComponent,The following statement contains a magic number: this.pictureBox1.Location = new System.Drawing.Point(9' 298);
Magic Number,LAYTON,InfoPicture,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoPicture.cs,InitializeComponent,The following statement contains a magic number: this.pictureBox1.Location = new System.Drawing.Point(9' 298);
Magic Number,LAYTON,InfoPicture,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoPicture.cs,InitializeComponent,The following statement contains a magic number: this.pictureBox1.Size = new System.Drawing.Size(367' 215);
Magic Number,LAYTON,InfoPicture,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoPicture.cs,InitializeComponent,The following statement contains a magic number: this.pictureBox1.Size = new System.Drawing.Size(367' 215);
Magic Number,LAYTON,InfoPicture,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoPicture.cs,InitializeComponent,The following statement contains a magic number: this.pictureBox1.TabIndex = 54;
Magic Number,LAYTON,InfoPicture,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoPicture.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(387' 521);
Magic Number,LAYTON,InfoPicture,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\InfoPicture.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(387' 521);
Magic Number,LAYTON,iText,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\iText.cs,InitializeComponent,The following statement contains a magic number: this.txtBox.Size = new System.Drawing.Size(512' 471);
Magic Number,LAYTON,iText,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\iText.cs,InitializeComponent,The following statement contains a magic number: this.txtBox.Size = new System.Drawing.Size(512' 471);
Magic Number,LAYTON,iText,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\iText.cs,InitializeComponent,The following statement contains a magic number: this.btnSave.Location = new System.Drawing.Point(427' 477);
Magic Number,LAYTON,iText,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\iText.cs,InitializeComponent,The following statement contains a magic number: this.btnSave.Location = new System.Drawing.Point(427' 477);
Magic Number,LAYTON,iText,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\iText.cs,InitializeComponent,The following statement contains a magic number: this.btnSave.Size = new System.Drawing.Size(82' 32);
Magic Number,LAYTON,iText,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\iText.cs,InitializeComponent,The following statement contains a magic number: this.btnSave.Size = new System.Drawing.Size(82' 32);
Magic Number,LAYTON,iText,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\iText.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(512' 512);
Magic Number,LAYTON,iText,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\iText.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(512' 512);
Magic Number,LAYTON,LAYTON4,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\LAYTON4.cs,Unpack_ARCHIVE,The following statement contains a magic number: uint number_files = br.ReadUInt32() / 8;
Magic Number,LAYTON,NazoTextControl,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\NazoTextControl.cs,InitializeComponent,The following statement contains a magic number: this.txtBox.Size = new System.Drawing.Size(512' 441);
Magic Number,LAYTON,NazoTextControl,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\NazoTextControl.cs,InitializeComponent,The following statement contains a magic number: this.txtBox.Size = new System.Drawing.Size(512' 441);
Magic Number,LAYTON,NazoTextControl,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\NazoTextControl.cs,InitializeComponent,The following statement contains a magic number: this.btnSave.Location = new System.Drawing.Point(427' 477);
Magic Number,LAYTON,NazoTextControl,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\NazoTextControl.cs,InitializeComponent,The following statement contains a magic number: this.btnSave.Location = new System.Drawing.Point(427' 477);
Magic Number,LAYTON,NazoTextControl,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\NazoTextControl.cs,InitializeComponent,The following statement contains a magic number: this.btnSave.Size = new System.Drawing.Size(82' 32);
Magic Number,LAYTON,NazoTextControl,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\NazoTextControl.cs,InitializeComponent,The following statement contains a magic number: this.btnSave.Size = new System.Drawing.Size(82' 32);
Magic Number,LAYTON,NazoTextControl,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\NazoTextControl.cs,InitializeComponent,The following statement contains a magic number: this.btnSave.TabIndex = 2;
Magic Number,LAYTON,NazoTextControl,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\NazoTextControl.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(3' 487);
Magic Number,LAYTON,NazoTextControl,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\NazoTextControl.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(3' 487);
Magic Number,LAYTON,NazoTextControl,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\NazoTextControl.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(21' 13);
Magic Number,LAYTON,NazoTextControl,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\NazoTextControl.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(21' 13);
Magic Number,LAYTON,NazoTextControl,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\NazoTextControl.cs,InitializeComponent,The following statement contains a magic number: this.label1.TabIndex = 3;
Magic Number,LAYTON,NazoTextControl,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\NazoTextControl.cs,InitializeComponent,The following statement contains a magic number: this.textBoxId.Location = new System.Drawing.Point(30' 484);
Magic Number,LAYTON,NazoTextControl,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\NazoTextControl.cs,InitializeComponent,The following statement contains a magic number: this.textBoxId.Location = new System.Drawing.Point(30' 484);
Magic Number,LAYTON,NazoTextControl,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\NazoTextControl.cs,InitializeComponent,The following statement contains a magic number: this.textBoxId.Size = new System.Drawing.Size(66' 20);
Magic Number,LAYTON,NazoTextControl,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\NazoTextControl.cs,InitializeComponent,The following statement contains a magic number: this.textBoxId.Size = new System.Drawing.Size(66' 20);
Magic Number,LAYTON,NazoTextControl,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\NazoTextControl.cs,InitializeComponent,The following statement contains a magic number: this.textBoxId.TabIndex = 4;
Magic Number,LAYTON,NazoTextControl,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\NazoTextControl.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point(111' 487);
Magic Number,LAYTON,NazoTextControl,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\NazoTextControl.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point(111' 487);
Magic Number,LAYTON,NazoTextControl,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\NazoTextControl.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size(38' 13);
Magic Number,LAYTON,NazoTextControl,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\NazoTextControl.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size(38' 13);
Magic Number,LAYTON,NazoTextControl,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\NazoTextControl.cs,InitializeComponent,The following statement contains a magic number: this.label2.TabIndex = 5;
Magic Number,LAYTON,NazoTextControl,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\NazoTextControl.cs,InitializeComponent,The following statement contains a magic number: this.textBoxName.Location = new System.Drawing.Point(155' 484);
Magic Number,LAYTON,NazoTextControl,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\NazoTextControl.cs,InitializeComponent,The following statement contains a magic number: this.textBoxName.Location = new System.Drawing.Point(155' 484);
Magic Number,LAYTON,NazoTextControl,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\NazoTextControl.cs,InitializeComponent,The following statement contains a magic number: this.textBoxName.Size = new System.Drawing.Size(266' 20);
Magic Number,LAYTON,NazoTextControl,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\NazoTextControl.cs,InitializeComponent,The following statement contains a magic number: this.textBoxName.Size = new System.Drawing.Size(266' 20);
Magic Number,LAYTON,NazoTextControl,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\NazoTextControl.cs,InitializeComponent,The following statement contains a magic number: this.textBoxName.TabIndex = 6;
Magic Number,LAYTON,NazoTextControl,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\NazoTextControl.cs,InitializeComponent,The following statement contains a magic number: this.label3.Location = new System.Drawing.Point(3' 454);
Magic Number,LAYTON,NazoTextControl,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\NazoTextControl.cs,InitializeComponent,The following statement contains a magic number: this.label3.Location = new System.Drawing.Point(3' 454);
Magic Number,LAYTON,NazoTextControl,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\NazoTextControl.cs,InitializeComponent,The following statement contains a magic number: this.label3.Size = new System.Drawing.Size(85' 13);
Magic Number,LAYTON,NazoTextControl,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\NazoTextControl.cs,InitializeComponent,The following statement contains a magic number: this.label3.Size = new System.Drawing.Size(85' 13);
Magic Number,LAYTON,NazoTextControl,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\NazoTextControl.cs,InitializeComponent,The following statement contains a magic number: this.label3.TabIndex = 7;
Magic Number,LAYTON,NazoTextControl,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\NazoTextControl.cs,InitializeComponent,The following statement contains a magic number: this.comboBox1.Location = new System.Drawing.Point(94' 451);
Magic Number,LAYTON,NazoTextControl,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\NazoTextControl.cs,InitializeComponent,The following statement contains a magic number: this.comboBox1.Location = new System.Drawing.Point(94' 451);
Magic Number,LAYTON,NazoTextControl,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\NazoTextControl.cs,InitializeComponent,The following statement contains a magic number: this.comboBox1.Size = new System.Drawing.Size(121' 21);
Magic Number,LAYTON,NazoTextControl,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\NazoTextControl.cs,InitializeComponent,The following statement contains a magic number: this.comboBox1.Size = new System.Drawing.Size(121' 21);
Magic Number,LAYTON,NazoTextControl,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\NazoTextControl.cs,InitializeComponent,The following statement contains a magic number: this.comboBox1.TabIndex = 8;
Magic Number,LAYTON,NazoTextControl,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\NazoTextControl.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(512' 512);
Magic Number,LAYTON,NazoTextControl,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\NazoTextControl.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(512' 512);
Magic Number,LAYTON,PCK2,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\PCK2.cs,Read,The following statement contains a magic number: pck2.header.id = br.ReadChars(4);
Magic Number,LAYTON,PCK2,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\PCK2.cs,Pack,The following statement contains a magic number: for (int i = 0; i < files.Count; i++)              {                  sPCK2.File file = new sPCK2.File();                  file.unknown = 0;                  file.name = files[i].name;                  file.data_size = files[i].size;                  file.header_size = (uint)(0x10 + files[i].name.Length);                  file.header_size += 4 - file.header_size % 4;                  file.size = file.data_size + file.header_size;                  file.size += 4 - file.size % 4;                  pack.header.file_size += file.size;                    BinaryReader br = new BinaryReader(File.OpenRead(files[i].path));                  br.BaseStream.Position = files[i].offset;                  file.data = br.ReadBytes((int)files[i].size);                  br.Close();                    pack.files.Add(file);              }
Magic Number,LAYTON,PCK2,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\PCK2.cs,Pack,The following statement contains a magic number: for (int i = 0; i < files.Count; i++)              {                  sPCK2.File file = new sPCK2.File();                  file.unknown = 0;                  file.name = files[i].name;                  file.data_size = files[i].size;                  file.header_size = (uint)(0x10 + files[i].name.Length);                  file.header_size += 4 - file.header_size % 4;                  file.size = file.data_size + file.header_size;                  file.size += 4 - file.size % 4;                  pack.header.file_size += file.size;                    BinaryReader br = new BinaryReader(File.OpenRead(files[i].path));                  br.BaseStream.Position = files[i].offset;                  file.data = br.ReadBytes((int)files[i].size);                  br.Close();                    pack.files.Add(file);              }
Magic Number,LAYTON,PCK2,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\PCK2.cs,Pack,The following statement contains a magic number: for (int i = 0; i < files.Count; i++)              {                  sPCK2.File file = new sPCK2.File();                  file.unknown = 0;                  file.name = files[i].name;                  file.data_size = files[i].size;                  file.header_size = (uint)(0x10 + files[i].name.Length);                  file.header_size += 4 - file.header_size % 4;                  file.size = file.data_size + file.header_size;                  file.size += 4 - file.size % 4;                  pack.header.file_size += file.size;                    BinaryReader br = new BinaryReader(File.OpenRead(files[i].path));                  br.BaseStream.Position = files[i].offset;                  file.data = br.ReadBytes((int)files[i].size);                  br.Close();                    pack.files.Add(file);              }
Magic Number,LAYTON,PCK2,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\PCK2.cs,Pack,The following statement contains a magic number: for (int i = 0; i < files.Count; i++)              {                  sPCK2.File file = new sPCK2.File();                  file.unknown = 0;                  file.name = files[i].name;                  file.data_size = files[i].size;                  file.header_size = (uint)(0x10 + files[i].name.Length);                  file.header_size += 4 - file.header_size % 4;                  file.size = file.data_size + file.header_size;                  file.size += 4 - file.size % 4;                  pack.header.file_size += file.size;                    BinaryReader br = new BinaryReader(File.OpenRead(files[i].path));                  br.BaseStream.Position = files[i].offset;                  file.data = br.ReadBytes((int)files[i].size);                  br.Close();                    pack.files.Add(file);              }
Magic Number,LAYTON,PCM,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\PCM.cs,Unpack,The following statement contains a magic number: pcm.id = br.ReadChars(4);
Magic Number,LAYTON,PCM,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\PCM.cs,Unpack,The following statement contains a magic number: for (int i = 0; i < pcm.nFiles; i++)              {                  long f_offset = br.BaseStream.Position;                    pcm.files[i].header_size = br.ReadUInt32();     // ALWAYS 0x20                  pcm.files[i].file_size = br.ReadUInt32();       // Include padding and header                  pcm.files[i].unknown = br.ReadUInt32();         // ALWAYS 0x00                  pcm.files[i].data_size = br.ReadUInt32();       // Size of the file                  pcm.files[i].name = new String(br.ReadChars(16)).Replace("\0"' "");                  pcm.files[i].offset = (uint)(f_offset + pcm.files[i].header_size);                  br.BaseStream.Position = f_offset + pcm.files[i].file_size;                    sFile cfile = new sFile();                  cfile.name = pcm.files[i].name;                  cfile.path = file;                  cfile.offset = pcm.files[i].offset;                  cfile.size = pcm.files[i].data_size;                  unpacked.files.Add(cfile);              }
Magic Number,LAYTON,ScriptControl,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\ScriptControl.cs,Get_Text,The following statement contains a magic number: for (int p = 0; p < cmd.param.Count; p++)              {                  txtOriginal.Text += "\tType " + cmd.param[p].type.ToString() + " - ";                  if (cmd.param[p].type == 0x01)                      txtOriginal.Text += BitConverter.ToUInt32(cmd.param[p].value' 0);                  else if (cmd.param[p].type == 0x03)                      txtOriginal.Text += new String(Encoding.ASCII.GetChars(cmd.param[p].value)).Replace("\0"' "");                  else if (cmd.param[p].type == 0x02)                  {                      txtOriginal.Text += "\r\n\t\tValue1: 0x" + BitConverter.ToUInt16(cmd.param[p].value' 0).ToString("x");                      txtOriginal.Text += "\r\n\t\tValue2: 0x" + BitConverter.ToUInt16(cmd.param[p].value' 2).ToString("x");                  }                    txtOriginal.Text += "\r\n";              }
Magic Number,LAYTON,ScriptControl,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\ScriptControl.cs,InitializeComponent,The following statement contains a magic number: this.treeCommands.Size = new System.Drawing.Size(144' 512);
Magic Number,LAYTON,ScriptControl,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\ScriptControl.cs,InitializeComponent,The following statement contains a magic number: this.treeCommands.Size = new System.Drawing.Size(144' 512);
Magic Number,LAYTON,ScriptControl,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\ScriptControl.cs,InitializeComponent,The following statement contains a magic number: this.txtOriginal.Location = new System.Drawing.Point(150' 0);
Magic Number,LAYTON,ScriptControl,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\ScriptControl.cs,InitializeComponent,The following statement contains a magic number: this.txtOriginal.Size = new System.Drawing.Size(359' 125);
Magic Number,LAYTON,ScriptControl,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\ScriptControl.cs,InitializeComponent,The following statement contains a magic number: this.txtOriginal.Size = new System.Drawing.Size(359' 125);
Magic Number,LAYTON,ScriptControl,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\ScriptControl.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(512' 512);
Magic Number,LAYTON,ScriptControl,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\ScriptControl.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(512' 512);
Missing Default,LAYTON,Main,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\Main.cs,Get_Format,The following switch statement is missing a default case: switch (gameCode)              {                  case "A5FE":    // Layton 1 - USA                      if (file.id >= 0x0001 && file.id <= 0x02CA)                          return new Ani(pluginHost' gameCode' "").Get_Formato(file.name);                      else if (file.id >= 0x02CD && file.id <= 0x0765)                          return Format.FullImage;                      else if (file.id == 0x0766)                          return Format.System;   // The same as id 0xB73 in A5FP                      break;                                    case "A5FP":    // Layton 1 - EUR                      if (file.id >= 0x0001 && file.id <= 0x04E7)                          return new Ani(pluginHost' gameCode' "").Get_Formato(file.name);                      else if (file.id >= 0x04E8 && file.id <= 0x0B72)                          return Format.FullImage;                      else if (file.id == 0x0B73)                          return Format.System;   // Dummy' it was text to test the puzzle system' nothing interesing and not used                      else if (file.name.EndsWith(".TXT"))                          return Format.Text;                      break;                    // Professor Layton and the Diabolical Box                  case "YLTS":                  case "YLTP":                  case "YLTH":                      if (file.id >= 0x37 && file.id <= 0x408)                          return new Ani(pluginHost' gameCode' "").Get_Formato(file.name);                      else if (file.id >= 0x409 & file.id <= 0x808)                          return Format.FullImage;                      else if (Path.GetExtension(file.name) == ".DAT" && file.name[0] == 'N'                               && ushort.TryParse(                                   Path.GetFileNameWithoutExtension(file.name).Remove(0' 1)'                                   NumberStyles.Integer'                                   CultureInfo.CurrentUICulture'                                   out nazeId)) return Format.Text;                      break;                  case "YLTE":                      if (file.id >= 0x37 && file.id <= 0x412)                          return new Ani(pluginHost' gameCode' "").Get_Formato(file.name);                      else if (file.id >= 0x413 && file.id <= 0x818)                          return Format.FullImage;                      else if (Path.GetExtension(file.name) == ".DAT" && file.name[0] == 'N'                               && ushort.TryParse(                                   Path.GetFileNameWithoutExtension(file.name).Remove(0' 1)'                                   NumberStyles.Integer'                                   CultureInfo.CurrentUICulture'                                   out nazeId)) return Format.Text;                      break;                                    // Layton 4 US (London life files)                  case "BLFE":                      if (file.name.EndsWith(".DARC"))                          return Format.Pack;                      else if (file.name.EndsWith(".DENC"))                          return Format.Compressed;                      else if (file.name.EndsWith(".ARCHIVE"))                          return Format.Pack;                      break;                    case "C2AJ":                      if (file.id >= 0x35 && file.id <= 0xEF)                          return new Ani(pluginHost' gameCode' "").Get_Formato(file.name);                      else if (file.id >= 0xF0 && file.id <= 0x193)                          return Format.FullImage;                      break;              }
Missing Default,LAYTON,Main,C:\repos\pleonex_tinke\Plugins\LAYTON\LAYTON\Main.cs,Show_Info,The following switch statement is missing a default case: switch (gameCode)              {                  case "A5FE":                      if (file.id >= 0x0001 && file.id <= 0x02CA)                          return new Ani(pluginHost' gameCode' file.path).Show_Info(file.id);                      else if (file.id >= 0x02CD && file.id <= 0x0765)                      {                          Bg bg = new Bg(pluginHost' file.path' file.id' file.name);                          return bg.Get_Control();                      }                      break;                  case "A5FP":                      if (file.id >= 0x0001 && file.id <= 0x04E7)                          return new Ani(pluginHost' gameCode' file.path).Show_Info(file.id);                      else if (file.id >= 0x04E8 && file.id <= 0x0B72)                      {                          Bg bg = new Bg(pluginHost' file.path' file.id' file.name);                          return bg.Get_Control();                      }                      break;                    // Professor Layton and the Diabolical Box                  case "YLTS":                  case "YLTP":                  case "YLTH":                      if (file.id >= 0x37 && file.id <= 0x408)                          return new Ani(pluginHost' gameCode' file.path).Show_Info(file.id);                      else if (file.id >= 0x409 && file.id <= 0x808)                      {                          Bg bg = new Bg(pluginHost' file.path' file.id' file.name);                          return bg.Get_Control();                      }                      break;                  case "YLTE":                      if (file.id >= 0x37 && file.id <= 0x412)                          return new Ani(pluginHost' gameCode' file.path).Show_Info(file.id);                      else if (file.id >= 0x413 && file.id <= 0x818)                      {                          Bg bg = new Bg(pluginHost' file.path' file.id' file.name);                          return bg.Get_Control();                      }                      break;                    case "C2AJ":                      if (file.id >= 0x35 && file.id <= 0xEF)                          return new Ani(pluginHost' gameCode' file.path).Show_Info(file.id);                      else if (file.id >= 0xF0 && file.id <= 0x193)                      {                          Bg bg = new Bg(pluginHost' file.path' file.id' file.name);                          return bg.Get_Control();                      }                      break;              }
