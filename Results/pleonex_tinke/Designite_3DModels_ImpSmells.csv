Implementation smell,Namespace,Class,File,Method,Description
Long Method,_3DModels,BMD0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BMD0.cs,Read,The method has 539 lines of code.
Long Method,_3DModels,BMD0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BMD0.cs,Write_Info,The method has 128 lines of code.
Long Method,_3DModels,BMD0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BMD0.cs,GeometryCommands,The method has 142 lines of code.
Long Method,_3DModels,BTX0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BTX0.cs,Read,The method has 150 lines of code.
Long Method,_3DModels,BTX0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BTX0.cs,Read_Section,The method has 131 lines of code.
Long Method,_3DModels,ModelControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\ModelControl.cs,InitializeComponent,The method has 104 lines of code.
Long Method,_3DModels,TextureControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\TextureControl.cs,InitializeComponent,The method has 204 lines of code.
Complex Method,_3DModels,BMD0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BMD0.cs,Read,Cyclomatic complexity of the method is 60
Complex Method,_3DModels,BMD0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BMD0.cs,Write_Info,Cyclomatic complexity of the method is 16
Complex Method,_3DModels,BMD0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BMD0.cs,Get_CommandSize,Cyclomatic complexity of the method is 39
Complex Method,_3DModels,BMD0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BMD0.cs,GeometryCommands,Cyclomatic complexity of the method is 44
Complex Method,_3DModels,BTX0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BTX0.cs,Read,Cyclomatic complexity of the method is 14
Complex Method,_3DModels,BTX0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BTX0.cs,Read_Section,Cyclomatic complexity of the method is 12
Complex Method,_3DModels,BTX0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BTX0.cs,Draw_Texture,Cyclomatic complexity of the method is 10
Complex Method,_3DModels,BTX0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BTX0.cs,Draw_CompressedTexture,Cyclomatic complexity of the method is 26
Complex Method,_3DModels,BTX0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BTX0.cs,Match_Textures,Cyclomatic complexity of the method is 8
Complex Method,_3DModels,ModelControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\ModelControl.cs,glControl1_KeyDown,Cyclomatic complexity of the method is 10
Complex Method,_3DModels,TextureControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\TextureControl.cs,Draw_Texture,Cyclomatic complexity of the method is 11
Complex Method,_3DModels,TextureControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\TextureControl.cs,Draw_CompressedTexture,Cyclomatic complexity of the method is 26
Complex Method,_3DModels,TextureControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\TextureControl.cs,btnSave_Click,Cyclomatic complexity of the method is 8
Long Parameter List,_3DModels,BTX0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BTX0.cs,Draw_Texture,The method has 5 parameters. Parameters: pluginHost' btx0' data' info' palette
Long Parameter List,_3DModels,BTX0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BTX0.cs,Draw_CompressedTexture,The method has 5 parameters. Parameters: pluginHost' btx0' data' info' num_pal
Long Parameter List,_3DModels,BTX0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BTX0.cs,Find_IDs,The method has 5 parameters. Parameters: num_tex' num_pal' tex_name' pal_name' texture
Long Statement,_3DModels,BMD0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BMD0.cs,Read,The length of the statement  "                    br.BaseStream.Position = modelOffset + data.header.materialOffset + (uint)data.material.definition.infoBlock.infoData[i]; " is 121.
Long Statement,_3DModels,BMD0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BMD0.cs,Read,The length of the statement  "                            sBMD0.Model.ModelData.Material.TexPalData tex = (sBMD0.Model.ModelData.Material.TexPalData)data.material.texture.infoBlock.infoData[t]; " is 135.
Long Statement,_3DModels,BMD0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BMD0.cs,Read,The length of the statement  "                            sBMD0.Model.ModelData.Material.TexPalData pal = (sBMD0.Model.ModelData.Material.TexPalData)data.material.palette.infoBlock.infoData[p]; " is 135.
Long Statement,_3DModels,BMD0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BMD0.cs,Read,The length of the statement  "                    br.BaseStream.Position = modelOffset + data.header.polygonStartOffset + (uint)data.polygon.header.infoBlock.infoData[i]; " is 120.
Long Statement,_3DModels,BMD0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BMD0.cs,Write_Info,The length of the statement  "                System.Xml.Linq.XElement xml = System.Xml.Linq.XElement.Load(System.Windows.Forms.Application.StartupPath + Path.DirectorySeparatorChar + " is 137.
Long Statement,_3DModels,BMD0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BMD0.cs,Write_Info,The length of the statement  "                    Console.WriteLine("-------------------<h4>" + xml.Element("S04").Value + "</h4>"' m.ToString()' bmd.model.mdlInfo.names[m]); " is 124.
Long Statement,_3DModels,BMD0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BMD0.cs,Write_Info,The length of the statement  "                            bmd.model.mdlData[m].bones.commands[i].size' BitConverter.ToString(bmd.model.mdlData[m].bones.commands[i].parameters' 0)); " is 122.
Long Statement,_3DModels,BMD0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BMD0.cs,Write_Info,The length of the statement  "                        Console.WriteLine("|__" + xml.Element("S2B").Value' BitConverter.ToString(bmd.model.mdlData[m].material.material[i].definition' 0)); " is 132.
Long Statement,_3DModels,BMD0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BMD0.cs,Write_Info,The length of the statement  "                        sBMD0.Model.ModelData.Material.TexPalData texInfo = (sBMD0.Model.ModelData.Material.TexPalData)bmd.model.mdlData[m].material.texture.infoBlock.infoData[i]; " is 155.
Long Statement,_3DModels,BMD0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BMD0.cs,Write_Info,The length of the statement  "                        sBMD0.Model.ModelData.Material.TexPalData palInfo = (sBMD0.Model.ModelData.Material.TexPalData)bmd.model.mdlData[m].material.palette.infoBlock.infoData[i]; " is 155.
Long Statement,_3DModels,BTX0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BTX0.cs,Write_Info,The length of the statement  "                    Console.WriteLine(xml.Element("S17").Value' texInfo.unknown.ToString()' texInfo.unknown2.ToString()' texInfo.unknown3.ToString()); " is 130.
Long Statement,_3DModels,BTX0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BTX0.cs,Write_Info,The length of the statement  "                    Console.WriteLine(xml.Element("S17").Value' texInfo.unknown.ToString()' texInfo.unknown2.ToString()' texInfo.unknown3.ToString()); " is 130.
Long Statement,_3DModels,BTX0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BTX0.cs,GetTexture,The length of the statement  "                br.BaseStream.Position = btx0.header.offset[0] + btx0.texture.header.textCompressedData_offset + texInfo.tex_offset * 8; " is 120.
Long Statement,_3DModels,BTX0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BTX0.cs,Draw_CompressedTexture,The length of the statement  "            br.BaseStream.Position = btx0.header.offset[0] + btx0.texture.header.textCompressedInfoData_offset + info.compressedDataStart; " is 126.
Long Statement,_3DModels,ModelControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\ModelControl.cs,LoadAllTex,The length of the statement  "                sBMD0.Model.ModelData.Material.MatDef mat = (sBMD0.Model.ModelData.Material.MatDef)model.model.mdlData[0].material.material[i]; " is 127.
Long Statement,_3DModels,ModelControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\ModelControl.cs,Render,The length of the statement  "                    sBMD0.Model.ModelData.Material.MatDef mat = (sBMD0.Model.ModelData.Material.MatDef)model.model.mdlData[0].material.material[poly.materialID]; " is 141.
Long Statement,_3DModels,ModelControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\ModelControl.cs,Render,The length of the statement  "                sBMD0.Model.ModelData.Material.MatDef mat = (sBMD0.Model.ModelData.Material.MatDef)model.model.mdlData[0].material.material[poly.materialID]; " is 141.
Long Statement,_3DModels,ModelControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\ModelControl.cs,LoadTextures,The length of the statement  "            System.Drawing.Imaging.BitmapData bmp_data = bmp.LockBits(new Rectangle(0' 0' bmp.Width' bmp.Height)' ImageLockMode.ReadOnly' System.Drawing.Imaging.PixelFormat.Format32bppRgb); " is 177.
Long Statement,_3DModels,TextureControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\TextureControl.cs,UpdateTexture,The length of the statement  "                br.BaseStream.Position = btx0.header.offset[0] + btx0.texture.header.textCompressedData_offset + texInfo.tex_offset * 8; " is 120.
Long Statement,_3DModels,TextureControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\TextureControl.cs,Draw_CompressedTexture,The length of the statement  "            sBTX0.Texture.PalInfo palInfo = (sBTX0.Texture.PalInfo)btx0.texture.palInfo.infoBlock.infoData[listPalettes.SelectedIndex]; " is 123.
Long Statement,_3DModels,TextureControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\TextureControl.cs,Draw_CompressedTexture,The length of the statement  "            br.BaseStream.Position = btx0.header.offset[0] + btx0.texture.header.textCompressedInfoData_offset + info.compressedDataStart; " is 126.
Long Statement,_3DModels,TextureControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\TextureControl.cs,Info,The length of the statement  "            listProp.Items[10].SubItems.Add(texInfo.coord_transf.ToString() + " (" + (TextureCoordTransf)texInfo.coord_transf + ')'); " is 121.
Long Statement,_3DModels,TextureControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\TextureControl.cs,InitializeComponent,The length of the statement  "            "S03"}' -1' System.Drawing.Color.Empty' System.Drawing.Color.Empty' new System.Drawing.Font("Microsoft Sans Serif"' 9F' System.Drawing.FontStyle.Bold' System.Drawing.GraphicsUnit.Point' ((byte)(0)))); " is 200.
Long Statement,_3DModels,TextureControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\TextureControl.cs,InitializeComponent,The length of the statement  "            "S0E"}' -1' System.Drawing.Color.Empty' System.Drawing.Color.Empty' new System.Drawing.Font("Microsoft Sans Serif"' 9F' System.Drawing.FontStyle.Bold' System.Drawing.GraphicsUnit.Point' ((byte)(0)))); " is 200.
Empty Catch Block,_3DModels,BTX0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BTX0.cs,Draw_Texture,The method has an empty catch block.
Empty Catch Block,_3DModels,TextureControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\TextureControl.cs,Draw_Texture,The method has an empty catch block.
Magic Number,_3DModels,BMD0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BMD0.cs,Read,The following statement contains a magic number: bmd.header.type = br.ReadChars(4);
Magic Number,_3DModels,BMD0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BMD0.cs,Read,The following statement contains a magic number: bmd.model.type = br.ReadChars(4);
Magic Number,_3DModels,BMD0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BMD0.cs,Read,The following statement contains a magic number: objData.S = (byte)((objData.transFlag >> 2) & 1);
Magic Number,_3DModels,BMD0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BMD0.cs,Read,The following statement contains a magic number: objData.P = (byte)((objData.transFlag >> 3) & 1);
Magic Number,_3DModels,BMD0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BMD0.cs,Read,The following statement contains a magic number: objData.N = (byte)((objData.transFlag >> 4) & 0xF);
Magic Number,_3DModels,BMD0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BMD0.cs,Read,The following statement contains a magic number: switch (cmd)                      {                          case 0x00:  // Padding                              command.size = 0;                              break;                          case 0x01:  // End of bones                              command.size = 0;                              break;                          case 0x02:                              command.size = 2;                              command.parameters = new byte[2];                              command.parameters[0] = br.ReadByte();  // Node ID                              command.parameters[1] = br.ReadByte();  // Visibility                              break;                          case 0x03:                              command.size = 1;                              command.parameters = new byte[1];                              command.parameters[0] = br.ReadByte();  // Set Polygon Stack ID?                              break;                          case 0x04:                              command.size = 3;                              command.parameters = new byte[3];                              command.parameters[0] = br.ReadByte();  // Material ID                              command.parameters[1] = br.ReadByte();  // 0x05                              command.parameters[2] = br.ReadByte();  // Polygon ID                              break;                          case 0x05:                              command.size = 1;                              command.parameters = new byte[1];                              command.parameters[0] = br.ReadByte();                              break;                          case 0x06:                              command.size = 3;                              command.parameters = new byte[3];                              command.parameters[0] = br.ReadByte();  // Object ID                              command.parameters[1] = br.ReadByte();  // Parent ID                              command.parameters[2] = br.ReadByte();  // Dummy 0                              break;                          case 0x07:                              command.size = 1;                              command.parameters = new byte[1];                              command.parameters[0] = br.ReadByte();                              break;                          case 0x08:                              command.size = 1;                              command.parameters = new byte[1];                              command.parameters[0] = br.ReadByte();                              break;                          case 0x09:                              command.size = 8;                              command.parameters = new byte[8];                              command.parameters[0] = br.ReadByte();                              command.parameters[1] = br.ReadByte();                              command.parameters[2] = br.ReadByte();                              command.parameters[3] = br.ReadByte();                              command.parameters[4] = br.ReadByte();                              command.parameters[5] = br.ReadByte();                              command.parameters[6] = br.ReadByte();                              command.parameters[7] = br.ReadByte();                              break;                          case 0x0B:                              command.size = 0;   // Begin Polygon/Material pairing                              break;                          case 0x24:                              command.size = 3;                              command.parameters = new byte[3];                              command.parameters[0] = br.ReadByte();  // Material ID                              command.parameters[1] = br.ReadByte();  // 0x05                              command.parameters[2] = br.ReadByte();  // Polygon ID                              break;                          case 0x26:                              command.size = 4;                              command.parameters = new byte[4];                              command.parameters[0] = br.ReadByte();  // Object ID                              command.parameters[1] = br.ReadByte();  // Parent ID                              command.parameters[2] = br.ReadByte();  // Dummy 0                              command.parameters[3] = br.ReadByte();  // Stack ID                              break;                          case 0x2B:                              command.size = 0;   // End Polygon/Material Pairing                              break;                          case 0x44:                              command.size = 3;                              command.parameters = new byte[3];                              command.parameters[0] = br.ReadByte();  // Material ID                              command.parameters[1] = br.ReadByte();  // 0x05                              command.parameters[2] = br.ReadByte();  // Polygon ID                              break;                          case 0x46:                              command.size = 4;                              command.parameters = new byte[4];                              command.parameters[0] = br.ReadByte();  // Object ID                              command.parameters[1] = br.ReadByte();  // Parent ID                              command.parameters[2] = br.ReadByte();  // Dummy 0                              command.parameters[3] = br.ReadByte();  // Restore ID                              break;                          case 0x66:                              command.size = 5;                              command.parameters = new byte[5];                              command.parameters[0] = br.ReadByte();  // Object ID                              command.parameters[1] = br.ReadByte();  // Parent ID                              command.parameters[2] = br.ReadByte();  // Dummy 0                              command.parameters[3] = br.ReadByte();  // Stack ID                              command.parameters[4] = br.ReadByte();  // Restore ID                              break;                      }
Magic Number,_3DModels,BMD0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BMD0.cs,Read,The following statement contains a magic number: switch (cmd)                      {                          case 0x00:  // Padding                              command.size = 0;                              break;                          case 0x01:  // End of bones                              command.size = 0;                              break;                          case 0x02:                              command.size = 2;                              command.parameters = new byte[2];                              command.parameters[0] = br.ReadByte();  // Node ID                              command.parameters[1] = br.ReadByte();  // Visibility                              break;                          case 0x03:                              command.size = 1;                              command.parameters = new byte[1];                              command.parameters[0] = br.ReadByte();  // Set Polygon Stack ID?                              break;                          case 0x04:                              command.size = 3;                              command.parameters = new byte[3];                              command.parameters[0] = br.ReadByte();  // Material ID                              command.parameters[1] = br.ReadByte();  // 0x05                              command.parameters[2] = br.ReadByte();  // Polygon ID                              break;                          case 0x05:                              command.size = 1;                              command.parameters = new byte[1];                              command.parameters[0] = br.ReadByte();                              break;                          case 0x06:                              command.size = 3;                              command.parameters = new byte[3];                              command.parameters[0] = br.ReadByte();  // Object ID                              command.parameters[1] = br.ReadByte();  // Parent ID                              command.parameters[2] = br.ReadByte();  // Dummy 0                              break;                          case 0x07:                              command.size = 1;                              command.parameters = new byte[1];                              command.parameters[0] = br.ReadByte();                              break;                          case 0x08:                              command.size = 1;                              command.parameters = new byte[1];                              command.parameters[0] = br.ReadByte();                              break;                          case 0x09:                              command.size = 8;                              command.parameters = new byte[8];                              command.parameters[0] = br.ReadByte();                              command.parameters[1] = br.ReadByte();                              command.parameters[2] = br.ReadByte();                              command.parameters[3] = br.ReadByte();                              command.parameters[4] = br.ReadByte();                              command.parameters[5] = br.ReadByte();                              command.parameters[6] = br.ReadByte();                              command.parameters[7] = br.ReadByte();                              break;                          case 0x0B:                              command.size = 0;   // Begin Polygon/Material pairing                              break;                          case 0x24:                              command.size = 3;                              command.parameters = new byte[3];                              command.parameters[0] = br.ReadByte();  // Material ID                              command.parameters[1] = br.ReadByte();  // 0x05                              command.parameters[2] = br.ReadByte();  // Polygon ID                              break;                          case 0x26:                              command.size = 4;                              command.parameters = new byte[4];                              command.parameters[0] = br.ReadByte();  // Object ID                              command.parameters[1] = br.ReadByte();  // Parent ID                              command.parameters[2] = br.ReadByte();  // Dummy 0                              command.parameters[3] = br.ReadByte();  // Stack ID                              break;                          case 0x2B:                              command.size = 0;   // End Polygon/Material Pairing                              break;                          case 0x44:                              command.size = 3;                              command.parameters = new byte[3];                              command.parameters[0] = br.ReadByte();  // Material ID                              command.parameters[1] = br.ReadByte();  // 0x05                              command.parameters[2] = br.ReadByte();  // Polygon ID                              break;                          case 0x46:                              command.size = 4;                              command.parameters = new byte[4];                              command.parameters[0] = br.ReadByte();  // Object ID                              command.parameters[1] = br.ReadByte();  // Parent ID                              command.parameters[2] = br.ReadByte();  // Dummy 0                              command.parameters[3] = br.ReadByte();  // Restore ID                              break;                          case 0x66:                              command.size = 5;                              command.parameters = new byte[5];                              command.parameters[0] = br.ReadByte();  // Object ID                              command.parameters[1] = br.ReadByte();  // Parent ID                              command.parameters[2] = br.ReadByte();  // Dummy 0                              command.parameters[3] = br.ReadByte();  // Stack ID                              command.parameters[4] = br.ReadByte();  // Restore ID                              break;                      }
Magic Number,_3DModels,BMD0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BMD0.cs,Read,The following statement contains a magic number: switch (cmd)                      {                          case 0x00:  // Padding                              command.size = 0;                              break;                          case 0x01:  // End of bones                              command.size = 0;                              break;                          case 0x02:                              command.size = 2;                              command.parameters = new byte[2];                              command.parameters[0] = br.ReadByte();  // Node ID                              command.parameters[1] = br.ReadByte();  // Visibility                              break;                          case 0x03:                              command.size = 1;                              command.parameters = new byte[1];                              command.parameters[0] = br.ReadByte();  // Set Polygon Stack ID?                              break;                          case 0x04:                              command.size = 3;                              command.parameters = new byte[3];                              command.parameters[0] = br.ReadByte();  // Material ID                              command.parameters[1] = br.ReadByte();  // 0x05                              command.parameters[2] = br.ReadByte();  // Polygon ID                              break;                          case 0x05:                              command.size = 1;                              command.parameters = new byte[1];                              command.parameters[0] = br.ReadByte();                              break;                          case 0x06:                              command.size = 3;                              command.parameters = new byte[3];                              command.parameters[0] = br.ReadByte();  // Object ID                              command.parameters[1] = br.ReadByte();  // Parent ID                              command.parameters[2] = br.ReadByte();  // Dummy 0                              break;                          case 0x07:                              command.size = 1;                              command.parameters = new byte[1];                              command.parameters[0] = br.ReadByte();                              break;                          case 0x08:                              command.size = 1;                              command.parameters = new byte[1];                              command.parameters[0] = br.ReadByte();                              break;                          case 0x09:                              command.size = 8;                              command.parameters = new byte[8];                              command.parameters[0] = br.ReadByte();                              command.parameters[1] = br.ReadByte();                              command.parameters[2] = br.ReadByte();                              command.parameters[3] = br.ReadByte();                              command.parameters[4] = br.ReadByte();                              command.parameters[5] = br.ReadByte();                              command.parameters[6] = br.ReadByte();                              command.parameters[7] = br.ReadByte();                              break;                          case 0x0B:                              command.size = 0;   // Begin Polygon/Material pairing                              break;                          case 0x24:                              command.size = 3;                              command.parameters = new byte[3];                              command.parameters[0] = br.ReadByte();  // Material ID                              command.parameters[1] = br.ReadByte();  // 0x05                              command.parameters[2] = br.ReadByte();  // Polygon ID                              break;                          case 0x26:                              command.size = 4;                              command.parameters = new byte[4];                              command.parameters[0] = br.ReadByte();  // Object ID                              command.parameters[1] = br.ReadByte();  // Parent ID                              command.parameters[2] = br.ReadByte();  // Dummy 0                              command.parameters[3] = br.ReadByte();  // Stack ID                              break;                          case 0x2B:                              command.size = 0;   // End Polygon/Material Pairing                              break;                          case 0x44:                              command.size = 3;                              command.parameters = new byte[3];                              command.parameters[0] = br.ReadByte();  // Material ID                              command.parameters[1] = br.ReadByte();  // 0x05                              command.parameters[2] = br.ReadByte();  // Polygon ID                              break;                          case 0x46:                              command.size = 4;                              command.parameters = new byte[4];                              command.parameters[0] = br.ReadByte();  // Object ID                              command.parameters[1] = br.ReadByte();  // Parent ID                              command.parameters[2] = br.ReadByte();  // Dummy 0                              command.parameters[3] = br.ReadByte();  // Restore ID                              break;                          case 0x66:                              command.size = 5;                              command.parameters = new byte[5];                              command.parameters[0] = br.ReadByte();  // Object ID                              command.parameters[1] = br.ReadByte();  // Parent ID                              command.parameters[2] = br.ReadByte();  // Dummy 0                              command.parameters[3] = br.ReadByte();  // Stack ID                              command.parameters[4] = br.ReadByte();  // Restore ID                              break;                      }
Magic Number,_3DModels,BMD0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BMD0.cs,Read,The following statement contains a magic number: switch (cmd)                      {                          case 0x00:  // Padding                              command.size = 0;                              break;                          case 0x01:  // End of bones                              command.size = 0;                              break;                          case 0x02:                              command.size = 2;                              command.parameters = new byte[2];                              command.parameters[0] = br.ReadByte();  // Node ID                              command.parameters[1] = br.ReadByte();  // Visibility                              break;                          case 0x03:                              command.size = 1;                              command.parameters = new byte[1];                              command.parameters[0] = br.ReadByte();  // Set Polygon Stack ID?                              break;                          case 0x04:                              command.size = 3;                              command.parameters = new byte[3];                              command.parameters[0] = br.ReadByte();  // Material ID                              command.parameters[1] = br.ReadByte();  // 0x05                              command.parameters[2] = br.ReadByte();  // Polygon ID                              break;                          case 0x05:                              command.size = 1;                              command.parameters = new byte[1];                              command.parameters[0] = br.ReadByte();                              break;                          case 0x06:                              command.size = 3;                              command.parameters = new byte[3];                              command.parameters[0] = br.ReadByte();  // Object ID                              command.parameters[1] = br.ReadByte();  // Parent ID                              command.parameters[2] = br.ReadByte();  // Dummy 0                              break;                          case 0x07:                              command.size = 1;                              command.parameters = new byte[1];                              command.parameters[0] = br.ReadByte();                              break;                          case 0x08:                              command.size = 1;                              command.parameters = new byte[1];                              command.parameters[0] = br.ReadByte();                              break;                          case 0x09:                              command.size = 8;                              command.parameters = new byte[8];                              command.parameters[0] = br.ReadByte();                              command.parameters[1] = br.ReadByte();                              command.parameters[2] = br.ReadByte();                              command.parameters[3] = br.ReadByte();                              command.parameters[4] = br.ReadByte();                              command.parameters[5] = br.ReadByte();                              command.parameters[6] = br.ReadByte();                              command.parameters[7] = br.ReadByte();                              break;                          case 0x0B:                              command.size = 0;   // Begin Polygon/Material pairing                              break;                          case 0x24:                              command.size = 3;                              command.parameters = new byte[3];                              command.parameters[0] = br.ReadByte();  // Material ID                              command.parameters[1] = br.ReadByte();  // 0x05                              command.parameters[2] = br.ReadByte();  // Polygon ID                              break;                          case 0x26:                              command.size = 4;                              command.parameters = new byte[4];                              command.parameters[0] = br.ReadByte();  // Object ID                              command.parameters[1] = br.ReadByte();  // Parent ID                              command.parameters[2] = br.ReadByte();  // Dummy 0                              command.parameters[3] = br.ReadByte();  // Stack ID                              break;                          case 0x2B:                              command.size = 0;   // End Polygon/Material Pairing                              break;                          case 0x44:                              command.size = 3;                              command.parameters = new byte[3];                              command.parameters[0] = br.ReadByte();  // Material ID                              command.parameters[1] = br.ReadByte();  // 0x05                              command.parameters[2] = br.ReadByte();  // Polygon ID                              break;                          case 0x46:                              command.size = 4;                              command.parameters = new byte[4];                              command.parameters[0] = br.ReadByte();  // Object ID                              command.parameters[1] = br.ReadByte();  // Parent ID                              command.parameters[2] = br.ReadByte();  // Dummy 0                              command.parameters[3] = br.ReadByte();  // Restore ID                              break;                          case 0x66:                              command.size = 5;                              command.parameters = new byte[5];                              command.parameters[0] = br.ReadByte();  // Object ID                              command.parameters[1] = br.ReadByte();  // Parent ID                              command.parameters[2] = br.ReadByte();  // Dummy 0                              command.parameters[3] = br.ReadByte();  // Stack ID                              command.parameters[4] = br.ReadByte();  // Restore ID                              break;                      }
Magic Number,_3DModels,BMD0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BMD0.cs,Read,The following statement contains a magic number: switch (cmd)                      {                          case 0x00:  // Padding                              command.size = 0;                              break;                          case 0x01:  // End of bones                              command.size = 0;                              break;                          case 0x02:                              command.size = 2;                              command.parameters = new byte[2];                              command.parameters[0] = br.ReadByte();  // Node ID                              command.parameters[1] = br.ReadByte();  // Visibility                              break;                          case 0x03:                              command.size = 1;                              command.parameters = new byte[1];                              command.parameters[0] = br.ReadByte();  // Set Polygon Stack ID?                              break;                          case 0x04:                              command.size = 3;                              command.parameters = new byte[3];                              command.parameters[0] = br.ReadByte();  // Material ID                              command.parameters[1] = br.ReadByte();  // 0x05                              command.parameters[2] = br.ReadByte();  // Polygon ID                              break;                          case 0x05:                              command.size = 1;                              command.parameters = new byte[1];                              command.parameters[0] = br.ReadByte();                              break;                          case 0x06:                              command.size = 3;                              command.parameters = new byte[3];                              command.parameters[0] = br.ReadByte();  // Object ID                              command.parameters[1] = br.ReadByte();  // Parent ID                              command.parameters[2] = br.ReadByte();  // Dummy 0                              break;                          case 0x07:                              command.size = 1;                              command.parameters = new byte[1];                              command.parameters[0] = br.ReadByte();                              break;                          case 0x08:                              command.size = 1;                              command.parameters = new byte[1];                              command.parameters[0] = br.ReadByte();                              break;                          case 0x09:                              command.size = 8;                              command.parameters = new byte[8];                              command.parameters[0] = br.ReadByte();                              command.parameters[1] = br.ReadByte();                              command.parameters[2] = br.ReadByte();                              command.parameters[3] = br.ReadByte();                              command.parameters[4] = br.ReadByte();                              command.parameters[5] = br.ReadByte();                              command.parameters[6] = br.ReadByte();                              command.parameters[7] = br.ReadByte();                              break;                          case 0x0B:                              command.size = 0;   // Begin Polygon/Material pairing                              break;                          case 0x24:                              command.size = 3;                              command.parameters = new byte[3];                              command.parameters[0] = br.ReadByte();  // Material ID                              command.parameters[1] = br.ReadByte();  // 0x05                              command.parameters[2] = br.ReadByte();  // Polygon ID                              break;                          case 0x26:                              command.size = 4;                              command.parameters = new byte[4];                              command.parameters[0] = br.ReadByte();  // Object ID                              command.parameters[1] = br.ReadByte();  // Parent ID                              command.parameters[2] = br.ReadByte();  // Dummy 0                              command.parameters[3] = br.ReadByte();  // Stack ID                              break;                          case 0x2B:                              command.size = 0;   // End Polygon/Material Pairing                              break;                          case 0x44:                              command.size = 3;                              command.parameters = new byte[3];                              command.parameters[0] = br.ReadByte();  // Material ID                              command.parameters[1] = br.ReadByte();  // 0x05                              command.parameters[2] = br.ReadByte();  // Polygon ID                              break;                          case 0x46:                              command.size = 4;                              command.parameters = new byte[4];                              command.parameters[0] = br.ReadByte();  // Object ID                              command.parameters[1] = br.ReadByte();  // Parent ID                              command.parameters[2] = br.ReadByte();  // Dummy 0                              command.parameters[3] = br.ReadByte();  // Restore ID                              break;                          case 0x66:                              command.size = 5;                              command.parameters = new byte[5];                              command.parameters[0] = br.ReadByte();  // Object ID                              command.parameters[1] = br.ReadByte();  // Parent ID                              command.parameters[2] = br.ReadByte();  // Dummy 0                              command.parameters[3] = br.ReadByte();  // Stack ID                              command.parameters[4] = br.ReadByte();  // Restore ID                              break;                      }
Magic Number,_3DModels,BMD0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BMD0.cs,Read,The following statement contains a magic number: switch (cmd)                      {                          case 0x00:  // Padding                              command.size = 0;                              break;                          case 0x01:  // End of bones                              command.size = 0;                              break;                          case 0x02:                              command.size = 2;                              command.parameters = new byte[2];                              command.parameters[0] = br.ReadByte();  // Node ID                              command.parameters[1] = br.ReadByte();  // Visibility                              break;                          case 0x03:                              command.size = 1;                              command.parameters = new byte[1];                              command.parameters[0] = br.ReadByte();  // Set Polygon Stack ID?                              break;                          case 0x04:                              command.size = 3;                              command.parameters = new byte[3];                              command.parameters[0] = br.ReadByte();  // Material ID                              command.parameters[1] = br.ReadByte();  // 0x05                              command.parameters[2] = br.ReadByte();  // Polygon ID                              break;                          case 0x05:                              command.size = 1;                              command.parameters = new byte[1];                              command.parameters[0] = br.ReadByte();                              break;                          case 0x06:                              command.size = 3;                              command.parameters = new byte[3];                              command.parameters[0] = br.ReadByte();  // Object ID                              command.parameters[1] = br.ReadByte();  // Parent ID                              command.parameters[2] = br.ReadByte();  // Dummy 0                              break;                          case 0x07:                              command.size = 1;                              command.parameters = new byte[1];                              command.parameters[0] = br.ReadByte();                              break;                          case 0x08:                              command.size = 1;                              command.parameters = new byte[1];                              command.parameters[0] = br.ReadByte();                              break;                          case 0x09:                              command.size = 8;                              command.parameters = new byte[8];                              command.parameters[0] = br.ReadByte();                              command.parameters[1] = br.ReadByte();                              command.parameters[2] = br.ReadByte();                              command.parameters[3] = br.ReadByte();                              command.parameters[4] = br.ReadByte();                              command.parameters[5] = br.ReadByte();                              command.parameters[6] = br.ReadByte();                              command.parameters[7] = br.ReadByte();                              break;                          case 0x0B:                              command.size = 0;   // Begin Polygon/Material pairing                              break;                          case 0x24:                              command.size = 3;                              command.parameters = new byte[3];                              command.parameters[0] = br.ReadByte();  // Material ID                              command.parameters[1] = br.ReadByte();  // 0x05                              command.parameters[2] = br.ReadByte();  // Polygon ID                              break;                          case 0x26:                              command.size = 4;                              command.parameters = new byte[4];                              command.parameters[0] = br.ReadByte();  // Object ID                              command.parameters[1] = br.ReadByte();  // Parent ID                              command.parameters[2] = br.ReadByte();  // Dummy 0                              command.parameters[3] = br.ReadByte();  // Stack ID                              break;                          case 0x2B:                              command.size = 0;   // End Polygon/Material Pairing                              break;                          case 0x44:                              command.size = 3;                              command.parameters = new byte[3];                              command.parameters[0] = br.ReadByte();  // Material ID                              command.parameters[1] = br.ReadByte();  // 0x05                              command.parameters[2] = br.ReadByte();  // Polygon ID                              break;                          case 0x46:                              command.size = 4;                              command.parameters = new byte[4];                              command.parameters[0] = br.ReadByte();  // Object ID                              command.parameters[1] = br.ReadByte();  // Parent ID                              command.parameters[2] = br.ReadByte();  // Dummy 0                              command.parameters[3] = br.ReadByte();  // Restore ID                              break;                          case 0x66:                              command.size = 5;                              command.parameters = new byte[5];                              command.parameters[0] = br.ReadByte();  // Object ID                              command.parameters[1] = br.ReadByte();  // Parent ID                              command.parameters[2] = br.ReadByte();  // Dummy 0                              command.parameters[3] = br.ReadByte();  // Stack ID                              command.parameters[4] = br.ReadByte();  // Restore ID                              break;                      }
Magic Number,_3DModels,BMD0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BMD0.cs,Read,The following statement contains a magic number: switch (cmd)                      {                          case 0x00:  // Padding                              command.size = 0;                              break;                          case 0x01:  // End of bones                              command.size = 0;                              break;                          case 0x02:                              command.size = 2;                              command.parameters = new byte[2];                              command.parameters[0] = br.ReadByte();  // Node ID                              command.parameters[1] = br.ReadByte();  // Visibility                              break;                          case 0x03:                              command.size = 1;                              command.parameters = new byte[1];                              command.parameters[0] = br.ReadByte();  // Set Polygon Stack ID?                              break;                          case 0x04:                              command.size = 3;                              command.parameters = new byte[3];                              command.parameters[0] = br.ReadByte();  // Material ID                              command.parameters[1] = br.ReadByte();  // 0x05                              command.parameters[2] = br.ReadByte();  // Polygon ID                              break;                          case 0x05:                              command.size = 1;                              command.parameters = new byte[1];                              command.parameters[0] = br.ReadByte();                              break;                          case 0x06:                              command.size = 3;                              command.parameters = new byte[3];                              command.parameters[0] = br.ReadByte();  // Object ID                              command.parameters[1] = br.ReadByte();  // Parent ID                              command.parameters[2] = br.ReadByte();  // Dummy 0                              break;                          case 0x07:                              command.size = 1;                              command.parameters = new byte[1];                              command.parameters[0] = br.ReadByte();                              break;                          case 0x08:                              command.size = 1;                              command.parameters = new byte[1];                              command.parameters[0] = br.ReadByte();                              break;                          case 0x09:                              command.size = 8;                              command.parameters = new byte[8];                              command.parameters[0] = br.ReadByte();                              command.parameters[1] = br.ReadByte();                              command.parameters[2] = br.ReadByte();                              command.parameters[3] = br.ReadByte();                              command.parameters[4] = br.ReadByte();                              command.parameters[5] = br.ReadByte();                              command.parameters[6] = br.ReadByte();                              command.parameters[7] = br.ReadByte();                              break;                          case 0x0B:                              command.size = 0;   // Begin Polygon/Material pairing                              break;                          case 0x24:                              command.size = 3;                              command.parameters = new byte[3];                              command.parameters[0] = br.ReadByte();  // Material ID                              command.parameters[1] = br.ReadByte();  // 0x05                              command.parameters[2] = br.ReadByte();  // Polygon ID                              break;                          case 0x26:                              command.size = 4;                              command.parameters = new byte[4];                              command.parameters[0] = br.ReadByte();  // Object ID                              command.parameters[1] = br.ReadByte();  // Parent ID                              command.parameters[2] = br.ReadByte();  // Dummy 0                              command.parameters[3] = br.ReadByte();  // Stack ID                              break;                          case 0x2B:                              command.size = 0;   // End Polygon/Material Pairing                              break;                          case 0x44:                              command.size = 3;                              command.parameters = new byte[3];                              command.parameters[0] = br.ReadByte();  // Material ID                              command.parameters[1] = br.ReadByte();  // 0x05                              command.parameters[2] = br.ReadByte();  // Polygon ID                              break;                          case 0x46:                              command.size = 4;                              command.parameters = new byte[4];                              command.parameters[0] = br.ReadByte();  // Object ID                              command.parameters[1] = br.ReadByte();  // Parent ID                              command.parameters[2] = br.ReadByte();  // Dummy 0                              command.parameters[3] = br.ReadByte();  // Restore ID                              break;                          case 0x66:                              command.size = 5;                              command.parameters = new byte[5];                              command.parameters[0] = br.ReadByte();  // Object ID                              command.parameters[1] = br.ReadByte();  // Parent ID                              command.parameters[2] = br.ReadByte();  // Dummy 0                              command.parameters[3] = br.ReadByte();  // Stack ID                              command.parameters[4] = br.ReadByte();  // Restore ID                              break;                      }
Magic Number,_3DModels,BMD0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BMD0.cs,Read,The following statement contains a magic number: switch (cmd)                      {                          case 0x00:  // Padding                              command.size = 0;                              break;                          case 0x01:  // End of bones                              command.size = 0;                              break;                          case 0x02:                              command.size = 2;                              command.parameters = new byte[2];                              command.parameters[0] = br.ReadByte();  // Node ID                              command.parameters[1] = br.ReadByte();  // Visibility                              break;                          case 0x03:                              command.size = 1;                              command.parameters = new byte[1];                              command.parameters[0] = br.ReadByte();  // Set Polygon Stack ID?                              break;                          case 0x04:                              command.size = 3;                              command.parameters = new byte[3];                              command.parameters[0] = br.ReadByte();  // Material ID                              command.parameters[1] = br.ReadByte();  // 0x05                              command.parameters[2] = br.ReadByte();  // Polygon ID                              break;                          case 0x05:                              command.size = 1;                              command.parameters = new byte[1];                              command.parameters[0] = br.ReadByte();                              break;                          case 0x06:                              command.size = 3;                              command.parameters = new byte[3];                              command.parameters[0] = br.ReadByte();  // Object ID                              command.parameters[1] = br.ReadByte();  // Parent ID                              command.parameters[2] = br.ReadByte();  // Dummy 0                              break;                          case 0x07:                              command.size = 1;                              command.parameters = new byte[1];                              command.parameters[0] = br.ReadByte();                              break;                          case 0x08:                              command.size = 1;                              command.parameters = new byte[1];                              command.parameters[0] = br.ReadByte();                              break;                          case 0x09:                              command.size = 8;                              command.parameters = new byte[8];                              command.parameters[0] = br.ReadByte();                              command.parameters[1] = br.ReadByte();                              command.parameters[2] = br.ReadByte();                              command.parameters[3] = br.ReadByte();                              command.parameters[4] = br.ReadByte();                              command.parameters[5] = br.ReadByte();                              command.parameters[6] = br.ReadByte();                              command.parameters[7] = br.ReadByte();                              break;                          case 0x0B:                              command.size = 0;   // Begin Polygon/Material pairing                              break;                          case 0x24:                              command.size = 3;                              command.parameters = new byte[3];                              command.parameters[0] = br.ReadByte();  // Material ID                              command.parameters[1] = br.ReadByte();  // 0x05                              command.parameters[2] = br.ReadByte();  // Polygon ID                              break;                          case 0x26:                              command.size = 4;                              command.parameters = new byte[4];                              command.parameters[0] = br.ReadByte();  // Object ID                              command.parameters[1] = br.ReadByte();  // Parent ID                              command.parameters[2] = br.ReadByte();  // Dummy 0                              command.parameters[3] = br.ReadByte();  // Stack ID                              break;                          case 0x2B:                              command.size = 0;   // End Polygon/Material Pairing                              break;                          case 0x44:                              command.size = 3;                              command.parameters = new byte[3];                              command.parameters[0] = br.ReadByte();  // Material ID                              command.parameters[1] = br.ReadByte();  // 0x05                              command.parameters[2] = br.ReadByte();  // Polygon ID                              break;                          case 0x46:                              command.size = 4;                              command.parameters = new byte[4];                              command.parameters[0] = br.ReadByte();  // Object ID                              command.parameters[1] = br.ReadByte();  // Parent ID                              command.parameters[2] = br.ReadByte();  // Dummy 0                              command.parameters[3] = br.ReadByte();  // Restore ID                              break;                          case 0x66:                              command.size = 5;                              command.parameters = new byte[5];                              command.parameters[0] = br.ReadByte();  // Object ID                              command.parameters[1] = br.ReadByte();  // Parent ID                              command.parameters[2] = br.ReadByte();  // Dummy 0                              command.parameters[3] = br.ReadByte();  // Stack ID                              command.parameters[4] = br.ReadByte();  // Restore ID                              break;                      }
Magic Number,_3DModels,BMD0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BMD0.cs,Read,The following statement contains a magic number: switch (cmd)                      {                          case 0x00:  // Padding                              command.size = 0;                              break;                          case 0x01:  // End of bones                              command.size = 0;                              break;                          case 0x02:                              command.size = 2;                              command.parameters = new byte[2];                              command.parameters[0] = br.ReadByte();  // Node ID                              command.parameters[1] = br.ReadByte();  // Visibility                              break;                          case 0x03:                              command.size = 1;                              command.parameters = new byte[1];                              command.parameters[0] = br.ReadByte();  // Set Polygon Stack ID?                              break;                          case 0x04:                              command.size = 3;                              command.parameters = new byte[3];                              command.parameters[0] = br.ReadByte();  // Material ID                              command.parameters[1] = br.ReadByte();  // 0x05                              command.parameters[2] = br.ReadByte();  // Polygon ID                              break;                          case 0x05:                              command.size = 1;                              command.parameters = new byte[1];                              command.parameters[0] = br.ReadByte();                              break;                          case 0x06:                              command.size = 3;                              command.parameters = new byte[3];                              command.parameters[0] = br.ReadByte();  // Object ID                              command.parameters[1] = br.ReadByte();  // Parent ID                              command.parameters[2] = br.ReadByte();  // Dummy 0                              break;                          case 0x07:                              command.size = 1;                              command.parameters = new byte[1];                              command.parameters[0] = br.ReadByte();                              break;                          case 0x08:                              command.size = 1;                              command.parameters = new byte[1];                              command.parameters[0] = br.ReadByte();                              break;                          case 0x09:                              command.size = 8;                              command.parameters = new byte[8];                              command.parameters[0] = br.ReadByte();                              command.parameters[1] = br.ReadByte();                              command.parameters[2] = br.ReadByte();                              command.parameters[3] = br.ReadByte();                              command.parameters[4] = br.ReadByte();                              command.parameters[5] = br.ReadByte();                              command.parameters[6] = br.ReadByte();                              command.parameters[7] = br.ReadByte();                              break;                          case 0x0B:                              command.size = 0;   // Begin Polygon/Material pairing                              break;                          case 0x24:                              command.size = 3;                              command.parameters = new byte[3];                              command.parameters[0] = br.ReadByte();  // Material ID                              command.parameters[1] = br.ReadByte();  // 0x05                              command.parameters[2] = br.ReadByte();  // Polygon ID                              break;                          case 0x26:                              command.size = 4;                              command.parameters = new byte[4];                              command.parameters[0] = br.ReadByte();  // Object ID                              command.parameters[1] = br.ReadByte();  // Parent ID                              command.parameters[2] = br.ReadByte();  // Dummy 0                              command.parameters[3] = br.ReadByte();  // Stack ID                              break;                          case 0x2B:                              command.size = 0;   // End Polygon/Material Pairing                              break;                          case 0x44:                              command.size = 3;                              command.parameters = new byte[3];                              command.parameters[0] = br.ReadByte();  // Material ID                              command.parameters[1] = br.ReadByte();  // 0x05                              command.parameters[2] = br.ReadByte();  // Polygon ID                              break;                          case 0x46:                              command.size = 4;                              command.parameters = new byte[4];                              command.parameters[0] = br.ReadByte();  // Object ID                              command.parameters[1] = br.ReadByte();  // Parent ID                              command.parameters[2] = br.ReadByte();  // Dummy 0                              command.parameters[3] = br.ReadByte();  // Restore ID                              break;                          case 0x66:                              command.size = 5;                              command.parameters = new byte[5];                              command.parameters[0] = br.ReadByte();  // Object ID                              command.parameters[1] = br.ReadByte();  // Parent ID                              command.parameters[2] = br.ReadByte();  // Dummy 0                              command.parameters[3] = br.ReadByte();  // Stack ID                              command.parameters[4] = br.ReadByte();  // Restore ID                              break;                      }
Magic Number,_3DModels,BMD0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BMD0.cs,Read,The following statement contains a magic number: switch (cmd)                      {                          case 0x00:  // Padding                              command.size = 0;                              break;                          case 0x01:  // End of bones                              command.size = 0;                              break;                          case 0x02:                              command.size = 2;                              command.parameters = new byte[2];                              command.parameters[0] = br.ReadByte();  // Node ID                              command.parameters[1] = br.ReadByte();  // Visibility                              break;                          case 0x03:                              command.size = 1;                              command.parameters = new byte[1];                              command.parameters[0] = br.ReadByte();  // Set Polygon Stack ID?                              break;                          case 0x04:                              command.size = 3;                              command.parameters = new byte[3];                              command.parameters[0] = br.ReadByte();  // Material ID                              command.parameters[1] = br.ReadByte();  // 0x05                              command.parameters[2] = br.ReadByte();  // Polygon ID                              break;                          case 0x05:                              command.size = 1;                              command.parameters = new byte[1];                              command.parameters[0] = br.ReadByte();                              break;                          case 0x06:                              command.size = 3;                              command.parameters = new byte[3];                              command.parameters[0] = br.ReadByte();  // Object ID                              command.parameters[1] = br.ReadByte();  // Parent ID                              command.parameters[2] = br.ReadByte();  // Dummy 0                              break;                          case 0x07:                              command.size = 1;                              command.parameters = new byte[1];                              command.parameters[0] = br.ReadByte();                              break;                          case 0x08:                              command.size = 1;                              command.parameters = new byte[1];                              command.parameters[0] = br.ReadByte();                              break;                          case 0x09:                              command.size = 8;                              command.parameters = new byte[8];                              command.parameters[0] = br.ReadByte();                              command.parameters[1] = br.ReadByte();                              command.parameters[2] = br.ReadByte();                              command.parameters[3] = br.ReadByte();                              command.parameters[4] = br.ReadByte();                              command.parameters[5] = br.ReadByte();                              command.parameters[6] = br.ReadByte();                              command.parameters[7] = br.ReadByte();                              break;                          case 0x0B:                              command.size = 0;   // Begin Polygon/Material pairing                              break;                          case 0x24:                              command.size = 3;                              command.parameters = new byte[3];                              command.parameters[0] = br.ReadByte();  // Material ID                              command.parameters[1] = br.ReadByte();  // 0x05                              command.parameters[2] = br.ReadByte();  // Polygon ID                              break;                          case 0x26:                              command.size = 4;                              command.parameters = new byte[4];                              command.parameters[0] = br.ReadByte();  // Object ID                              command.parameters[1] = br.ReadByte();  // Parent ID                              command.parameters[2] = br.ReadByte();  // Dummy 0                              command.parameters[3] = br.ReadByte();  // Stack ID                              break;                          case 0x2B:                              command.size = 0;   // End Polygon/Material Pairing                              break;                          case 0x44:                              command.size = 3;                              command.parameters = new byte[3];                              command.parameters[0] = br.ReadByte();  // Material ID                              command.parameters[1] = br.ReadByte();  // 0x05                              command.parameters[2] = br.ReadByte();  // Polygon ID                              break;                          case 0x46:                              command.size = 4;                              command.parameters = new byte[4];                              command.parameters[0] = br.ReadByte();  // Object ID                              command.parameters[1] = br.ReadByte();  // Parent ID                              command.parameters[2] = br.ReadByte();  // Dummy 0                              command.parameters[3] = br.ReadByte();  // Restore ID                              break;                          case 0x66:                              command.size = 5;                              command.parameters = new byte[5];                              command.parameters[0] = br.ReadByte();  // Object ID                              command.parameters[1] = br.ReadByte();  // Parent ID                              command.parameters[2] = br.ReadByte();  // Dummy 0                              command.parameters[3] = br.ReadByte();  // Stack ID                              command.parameters[4] = br.ReadByte();  // Restore ID                              break;                      }
Magic Number,_3DModels,BMD0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BMD0.cs,Read,The following statement contains a magic number: switch (cmd)                      {                          case 0x00:  // Padding                              command.size = 0;                              break;                          case 0x01:  // End of bones                              command.size = 0;                              break;                          case 0x02:                              command.size = 2;                              command.parameters = new byte[2];                              command.parameters[0] = br.ReadByte();  // Node ID                              command.parameters[1] = br.ReadByte();  // Visibility                              break;                          case 0x03:                              command.size = 1;                              command.parameters = new byte[1];                              command.parameters[0] = br.ReadByte();  // Set Polygon Stack ID?                              break;                          case 0x04:                              command.size = 3;                              command.parameters = new byte[3];                              command.parameters[0] = br.ReadByte();  // Material ID                              command.parameters[1] = br.ReadByte();  // 0x05                              command.parameters[2] = br.ReadByte();  // Polygon ID                              break;                          case 0x05:                              command.size = 1;                              command.parameters = new byte[1];                              command.parameters[0] = br.ReadByte();                              break;                          case 0x06:                              command.size = 3;                              command.parameters = new byte[3];                              command.parameters[0] = br.ReadByte();  // Object ID                              command.parameters[1] = br.ReadByte();  // Parent ID                              command.parameters[2] = br.ReadByte();  // Dummy 0                              break;                          case 0x07:                              command.size = 1;                              command.parameters = new byte[1];                              command.parameters[0] = br.ReadByte();                              break;                          case 0x08:                              command.size = 1;                              command.parameters = new byte[1];                              command.parameters[0] = br.ReadByte();                              break;                          case 0x09:                              command.size = 8;                              command.parameters = new byte[8];                              command.parameters[0] = br.ReadByte();                              command.parameters[1] = br.ReadByte();                              command.parameters[2] = br.ReadByte();                              command.parameters[3] = br.ReadByte();                              command.parameters[4] = br.ReadByte();                              command.parameters[5] = br.ReadByte();                              command.parameters[6] = br.ReadByte();                              command.parameters[7] = br.ReadByte();                              break;                          case 0x0B:                              command.size = 0;   // Begin Polygon/Material pairing                              break;                          case 0x24:                              command.size = 3;                              command.parameters = new byte[3];                              command.parameters[0] = br.ReadByte();  // Material ID                              command.parameters[1] = br.ReadByte();  // 0x05                              command.parameters[2] = br.ReadByte();  // Polygon ID                              break;                          case 0x26:                              command.size = 4;                              command.parameters = new byte[4];                              command.parameters[0] = br.ReadByte();  // Object ID                              command.parameters[1] = br.ReadByte();  // Parent ID                              command.parameters[2] = br.ReadByte();  // Dummy 0                              command.parameters[3] = br.ReadByte();  // Stack ID                              break;                          case 0x2B:                              command.size = 0;   // End Polygon/Material Pairing                              break;                          case 0x44:                              command.size = 3;                              command.parameters = new byte[3];                              command.parameters[0] = br.ReadByte();  // Material ID                              command.parameters[1] = br.ReadByte();  // 0x05                              command.parameters[2] = br.ReadByte();  // Polygon ID                              break;                          case 0x46:                              command.size = 4;                              command.parameters = new byte[4];                              command.parameters[0] = br.ReadByte();  // Object ID                              command.parameters[1] = br.ReadByte();  // Parent ID                              command.parameters[2] = br.ReadByte();  // Dummy 0                              command.parameters[3] = br.ReadByte();  // Restore ID                              break;                          case 0x66:                              command.size = 5;                              command.parameters = new byte[5];                              command.parameters[0] = br.ReadByte();  // Object ID                              command.parameters[1] = br.ReadByte();  // Parent ID                              command.parameters[2] = br.ReadByte();  // Dummy 0                              command.parameters[3] = br.ReadByte();  // Stack ID                              command.parameters[4] = br.ReadByte();  // Restore ID                              break;                      }
Magic Number,_3DModels,BMD0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BMD0.cs,Read,The following statement contains a magic number: switch (cmd)                      {                          case 0x00:  // Padding                              command.size = 0;                              break;                          case 0x01:  // End of bones                              command.size = 0;                              break;                          case 0x02:                              command.size = 2;                              command.parameters = new byte[2];                              command.parameters[0] = br.ReadByte();  // Node ID                              command.parameters[1] = br.ReadByte();  // Visibility                              break;                          case 0x03:                              command.size = 1;                              command.parameters = new byte[1];                              command.parameters[0] = br.ReadByte();  // Set Polygon Stack ID?                              break;                          case 0x04:                              command.size = 3;                              command.parameters = new byte[3];                              command.parameters[0] = br.ReadByte();  // Material ID                              command.parameters[1] = br.ReadByte();  // 0x05                              command.parameters[2] = br.ReadByte();  // Polygon ID                              break;                          case 0x05:                              command.size = 1;                              command.parameters = new byte[1];                              command.parameters[0] = br.ReadByte();                              break;                          case 0x06:                              command.size = 3;                              command.parameters = new byte[3];                              command.parameters[0] = br.ReadByte();  // Object ID                              command.parameters[1] = br.ReadByte();  // Parent ID                              command.parameters[2] = br.ReadByte();  // Dummy 0                              break;                          case 0x07:                              command.size = 1;                              command.parameters = new byte[1];                              command.parameters[0] = br.ReadByte();                              break;                          case 0x08:                              command.size = 1;                              command.parameters = new byte[1];                              command.parameters[0] = br.ReadByte();                              break;                          case 0x09:                              command.size = 8;                              command.parameters = new byte[8];                              command.parameters[0] = br.ReadByte();                              command.parameters[1] = br.ReadByte();                              command.parameters[2] = br.ReadByte();                              command.parameters[3] = br.ReadByte();                              command.parameters[4] = br.ReadByte();                              command.parameters[5] = br.ReadByte();                              command.parameters[6] = br.ReadByte();                              command.parameters[7] = br.ReadByte();                              break;                          case 0x0B:                              command.size = 0;   // Begin Polygon/Material pairing                              break;                          case 0x24:                              command.size = 3;                              command.parameters = new byte[3];                              command.parameters[0] = br.ReadByte();  // Material ID                              command.parameters[1] = br.ReadByte();  // 0x05                              command.parameters[2] = br.ReadByte();  // Polygon ID                              break;                          case 0x26:                              command.size = 4;                              command.parameters = new byte[4];                              command.parameters[0] = br.ReadByte();  // Object ID                              command.parameters[1] = br.ReadByte();  // Parent ID                              command.parameters[2] = br.ReadByte();  // Dummy 0                              command.parameters[3] = br.ReadByte();  // Stack ID                              break;                          case 0x2B:                              command.size = 0;   // End Polygon/Material Pairing                              break;                          case 0x44:                              command.size = 3;                              command.parameters = new byte[3];                              command.parameters[0] = br.ReadByte();  // Material ID                              command.parameters[1] = br.ReadByte();  // 0x05                              command.parameters[2] = br.ReadByte();  // Polygon ID                              break;                          case 0x46:                              command.size = 4;                              command.parameters = new byte[4];                              command.parameters[0] = br.ReadByte();  // Object ID                              command.parameters[1] = br.ReadByte();  // Parent ID                              command.parameters[2] = br.ReadByte();  // Dummy 0                              command.parameters[3] = br.ReadByte();  // Restore ID                              break;                          case 0x66:                              command.size = 5;                              command.parameters = new byte[5];                              command.parameters[0] = br.ReadByte();  // Object ID                              command.parameters[1] = br.ReadByte();  // Parent ID                              command.parameters[2] = br.ReadByte();  // Dummy 0                              command.parameters[3] = br.ReadByte();  // Stack ID                              command.parameters[4] = br.ReadByte();  // Restore ID                              break;                      }
Magic Number,_3DModels,BMD0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BMD0.cs,Read,The following statement contains a magic number: switch (cmd)                      {                          case 0x00:  // Padding                              command.size = 0;                              break;                          case 0x01:  // End of bones                              command.size = 0;                              break;                          case 0x02:                              command.size = 2;                              command.parameters = new byte[2];                              command.parameters[0] = br.ReadByte();  // Node ID                              command.parameters[1] = br.ReadByte();  // Visibility                              break;                          case 0x03:                              command.size = 1;                              command.parameters = new byte[1];                              command.parameters[0] = br.ReadByte();  // Set Polygon Stack ID?                              break;                          case 0x04:                              command.size = 3;                              command.parameters = new byte[3];                              command.parameters[0] = br.ReadByte();  // Material ID                              command.parameters[1] = br.ReadByte();  // 0x05                              command.parameters[2] = br.ReadByte();  // Polygon ID                              break;                          case 0x05:                              command.size = 1;                              command.parameters = new byte[1];                              command.parameters[0] = br.ReadByte();                              break;                          case 0x06:                              command.size = 3;                              command.parameters = new byte[3];                              command.parameters[0] = br.ReadByte();  // Object ID                              command.parameters[1] = br.ReadByte();  // Parent ID                              command.parameters[2] = br.ReadByte();  // Dummy 0                              break;                          case 0x07:                              command.size = 1;                              command.parameters = new byte[1];                              command.parameters[0] = br.ReadByte();                              break;                          case 0x08:                              command.size = 1;                              command.parameters = new byte[1];                              command.parameters[0] = br.ReadByte();                              break;                          case 0x09:                              command.size = 8;                              command.parameters = new byte[8];                              command.parameters[0] = br.ReadByte();                              command.parameters[1] = br.ReadByte();                              command.parameters[2] = br.ReadByte();                              command.parameters[3] = br.ReadByte();                              command.parameters[4] = br.ReadByte();                              command.parameters[5] = br.ReadByte();                              command.parameters[6] = br.ReadByte();                              command.parameters[7] = br.ReadByte();                              break;                          case 0x0B:                              command.size = 0;   // Begin Polygon/Material pairing                              break;                          case 0x24:                              command.size = 3;                              command.parameters = new byte[3];                              command.parameters[0] = br.ReadByte();  // Material ID                              command.parameters[1] = br.ReadByte();  // 0x05                              command.parameters[2] = br.ReadByte();  // Polygon ID                              break;                          case 0x26:                              command.size = 4;                              command.parameters = new byte[4];                              command.parameters[0] = br.ReadByte();  // Object ID                              command.parameters[1] = br.ReadByte();  // Parent ID                              command.parameters[2] = br.ReadByte();  // Dummy 0                              command.parameters[3] = br.ReadByte();  // Stack ID                              break;                          case 0x2B:                              command.size = 0;   // End Polygon/Material Pairing                              break;                          case 0x44:                              command.size = 3;                              command.parameters = new byte[3];                              command.parameters[0] = br.ReadByte();  // Material ID                              command.parameters[1] = br.ReadByte();  // 0x05                              command.parameters[2] = br.ReadByte();  // Polygon ID                              break;                          case 0x46:                              command.size = 4;                              command.parameters = new byte[4];                              command.parameters[0] = br.ReadByte();  // Object ID                              command.parameters[1] = br.ReadByte();  // Parent ID                              command.parameters[2] = br.ReadByte();  // Dummy 0                              command.parameters[3] = br.ReadByte();  // Restore ID                              break;                          case 0x66:                              command.size = 5;                              command.parameters = new byte[5];                              command.parameters[0] = br.ReadByte();  // Object ID                              command.parameters[1] = br.ReadByte();  // Parent ID                              command.parameters[2] = br.ReadByte();  // Dummy 0                              command.parameters[3] = br.ReadByte();  // Stack ID                              command.parameters[4] = br.ReadByte();  // Restore ID                              break;                      }
Magic Number,_3DModels,BMD0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BMD0.cs,Read,The following statement contains a magic number: switch (cmd)                      {                          case 0x00:  // Padding                              command.size = 0;                              break;                          case 0x01:  // End of bones                              command.size = 0;                              break;                          case 0x02:                              command.size = 2;                              command.parameters = new byte[2];                              command.parameters[0] = br.ReadByte();  // Node ID                              command.parameters[1] = br.ReadByte();  // Visibility                              break;                          case 0x03:                              command.size = 1;                              command.parameters = new byte[1];                              command.parameters[0] = br.ReadByte();  // Set Polygon Stack ID?                              break;                          case 0x04:                              command.size = 3;                              command.parameters = new byte[3];                              command.parameters[0] = br.ReadByte();  // Material ID                              command.parameters[1] = br.ReadByte();  // 0x05                              command.parameters[2] = br.ReadByte();  // Polygon ID                              break;                          case 0x05:                              command.size = 1;                              command.parameters = new byte[1];                              command.parameters[0] = br.ReadByte();                              break;                          case 0x06:                              command.size = 3;                              command.parameters = new byte[3];                              command.parameters[0] = br.ReadByte();  // Object ID                              command.parameters[1] = br.ReadByte();  // Parent ID                              command.parameters[2] = br.ReadByte();  // Dummy 0                              break;                          case 0x07:                              command.size = 1;                              command.parameters = new byte[1];                              command.parameters[0] = br.ReadByte();                              break;                          case 0x08:                              command.size = 1;                              command.parameters = new byte[1];                              command.parameters[0] = br.ReadByte();                              break;                          case 0x09:                              command.size = 8;                              command.parameters = new byte[8];                              command.parameters[0] = br.ReadByte();                              command.parameters[1] = br.ReadByte();                              command.parameters[2] = br.ReadByte();                              command.parameters[3] = br.ReadByte();                              command.parameters[4] = br.ReadByte();                              command.parameters[5] = br.ReadByte();                              command.parameters[6] = br.ReadByte();                              command.parameters[7] = br.ReadByte();                              break;                          case 0x0B:                              command.size = 0;   // Begin Polygon/Material pairing                              break;                          case 0x24:                              command.size = 3;                              command.parameters = new byte[3];                              command.parameters[0] = br.ReadByte();  // Material ID                              command.parameters[1] = br.ReadByte();  // 0x05                              command.parameters[2] = br.ReadByte();  // Polygon ID                              break;                          case 0x26:                              command.size = 4;                              command.parameters = new byte[4];                              command.parameters[0] = br.ReadByte();  // Object ID                              command.parameters[1] = br.ReadByte();  // Parent ID                              command.parameters[2] = br.ReadByte();  // Dummy 0                              command.parameters[3] = br.ReadByte();  // Stack ID                              break;                          case 0x2B:                              command.size = 0;   // End Polygon/Material Pairing                              break;                          case 0x44:                              command.size = 3;                              command.parameters = new byte[3];                              command.parameters[0] = br.ReadByte();  // Material ID                              command.parameters[1] = br.ReadByte();  // 0x05                              command.parameters[2] = br.ReadByte();  // Polygon ID                              break;                          case 0x46:                              command.size = 4;                              command.parameters = new byte[4];                              command.parameters[0] = br.ReadByte();  // Object ID                              command.parameters[1] = br.ReadByte();  // Parent ID                              command.parameters[2] = br.ReadByte();  // Dummy 0                              command.parameters[3] = br.ReadByte();  // Restore ID                              break;                          case 0x66:                              command.size = 5;                              command.parameters = new byte[5];                              command.parameters[0] = br.ReadByte();  // Object ID                              command.parameters[1] = br.ReadByte();  // Parent ID                              command.parameters[2] = br.ReadByte();  // Dummy 0                              command.parameters[3] = br.ReadByte();  // Stack ID                              command.parameters[4] = br.ReadByte();  // Restore ID                              break;                      }
Magic Number,_3DModels,BMD0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BMD0.cs,Read,The following statement contains a magic number: switch (cmd)                      {                          case 0x00:  // Padding                              command.size = 0;                              break;                          case 0x01:  // End of bones                              command.size = 0;                              break;                          case 0x02:                              command.size = 2;                              command.parameters = new byte[2];                              command.parameters[0] = br.ReadByte();  // Node ID                              command.parameters[1] = br.ReadByte();  // Visibility                              break;                          case 0x03:                              command.size = 1;                              command.parameters = new byte[1];                              command.parameters[0] = br.ReadByte();  // Set Polygon Stack ID?                              break;                          case 0x04:                              command.size = 3;                              command.parameters = new byte[3];                              command.parameters[0] = br.ReadByte();  // Material ID                              command.parameters[1] = br.ReadByte();  // 0x05                              command.parameters[2] = br.ReadByte();  // Polygon ID                              break;                          case 0x05:                              command.size = 1;                              command.parameters = new byte[1];                              command.parameters[0] = br.ReadByte();                              break;                          case 0x06:                              command.size = 3;                              command.parameters = new byte[3];                              command.parameters[0] = br.ReadByte();  // Object ID                              command.parameters[1] = br.ReadByte();  // Parent ID                              command.parameters[2] = br.ReadByte();  // Dummy 0                              break;                          case 0x07:                              command.size = 1;                              command.parameters = new byte[1];                              command.parameters[0] = br.ReadByte();                              break;                          case 0x08:                              command.size = 1;                              command.parameters = new byte[1];                              command.parameters[0] = br.ReadByte();                              break;                          case 0x09:                              command.size = 8;                              command.parameters = new byte[8];                              command.parameters[0] = br.ReadByte();                              command.parameters[1] = br.ReadByte();                              command.parameters[2] = br.ReadByte();                              command.parameters[3] = br.ReadByte();                              command.parameters[4] = br.ReadByte();                              command.parameters[5] = br.ReadByte();                              command.parameters[6] = br.ReadByte();                              command.parameters[7] = br.ReadByte();                              break;                          case 0x0B:                              command.size = 0;   // Begin Polygon/Material pairing                              break;                          case 0x24:                              command.size = 3;                              command.parameters = new byte[3];                              command.parameters[0] = br.ReadByte();  // Material ID                              command.parameters[1] = br.ReadByte();  // 0x05                              command.parameters[2] = br.ReadByte();  // Polygon ID                              break;                          case 0x26:                              command.size = 4;                              command.parameters = new byte[4];                              command.parameters[0] = br.ReadByte();  // Object ID                              command.parameters[1] = br.ReadByte();  // Parent ID                              command.parameters[2] = br.ReadByte();  // Dummy 0                              command.parameters[3] = br.ReadByte();  // Stack ID                              break;                          case 0x2B:                              command.size = 0;   // End Polygon/Material Pairing                              break;                          case 0x44:                              command.size = 3;                              command.parameters = new byte[3];                              command.parameters[0] = br.ReadByte();  // Material ID                              command.parameters[1] = br.ReadByte();  // 0x05                              command.parameters[2] = br.ReadByte();  // Polygon ID                              break;                          case 0x46:                              command.size = 4;                              command.parameters = new byte[4];                              command.parameters[0] = br.ReadByte();  // Object ID                              command.parameters[1] = br.ReadByte();  // Parent ID                              command.parameters[2] = br.ReadByte();  // Dummy 0                              command.parameters[3] = br.ReadByte();  // Restore ID                              break;                          case 0x66:                              command.size = 5;                              command.parameters = new byte[5];                              command.parameters[0] = br.ReadByte();  // Object ID                              command.parameters[1] = br.ReadByte();  // Parent ID                              command.parameters[2] = br.ReadByte();  // Dummy 0                              command.parameters[3] = br.ReadByte();  // Stack ID                              command.parameters[4] = br.ReadByte();  // Restore ID                              break;                      }
Magic Number,_3DModels,BMD0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BMD0.cs,Read,The following statement contains a magic number: switch (cmd)                      {                          case 0x00:  // Padding                              command.size = 0;                              break;                          case 0x01:  // End of bones                              command.size = 0;                              break;                          case 0x02:                              command.size = 2;                              command.parameters = new byte[2];                              command.parameters[0] = br.ReadByte();  // Node ID                              command.parameters[1] = br.ReadByte();  // Visibility                              break;                          case 0x03:                              command.size = 1;                              command.parameters = new byte[1];                              command.parameters[0] = br.ReadByte();  // Set Polygon Stack ID?                              break;                          case 0x04:                              command.size = 3;                              command.parameters = new byte[3];                              command.parameters[0] = br.ReadByte();  // Material ID                              command.parameters[1] = br.ReadByte();  // 0x05                              command.parameters[2] = br.ReadByte();  // Polygon ID                              break;                          case 0x05:                              command.size = 1;                              command.parameters = new byte[1];                              command.parameters[0] = br.ReadByte();                              break;                          case 0x06:                              command.size = 3;                              command.parameters = new byte[3];                              command.parameters[0] = br.ReadByte();  // Object ID                              command.parameters[1] = br.ReadByte();  // Parent ID                              command.parameters[2] = br.ReadByte();  // Dummy 0                              break;                          case 0x07:                              command.size = 1;                              command.parameters = new byte[1];                              command.parameters[0] = br.ReadByte();                              break;                          case 0x08:                              command.size = 1;                              command.parameters = new byte[1];                              command.parameters[0] = br.ReadByte();                              break;                          case 0x09:                              command.size = 8;                              command.parameters = new byte[8];                              command.parameters[0] = br.ReadByte();                              command.parameters[1] = br.ReadByte();                              command.parameters[2] = br.ReadByte();                              command.parameters[3] = br.ReadByte();                              command.parameters[4] = br.ReadByte();                              command.parameters[5] = br.ReadByte();                              command.parameters[6] = br.ReadByte();                              command.parameters[7] = br.ReadByte();                              break;                          case 0x0B:                              command.size = 0;   // Begin Polygon/Material pairing                              break;                          case 0x24:                              command.size = 3;                              command.parameters = new byte[3];                              command.parameters[0] = br.ReadByte();  // Material ID                              command.parameters[1] = br.ReadByte();  // 0x05                              command.parameters[2] = br.ReadByte();  // Polygon ID                              break;                          case 0x26:                              command.size = 4;                              command.parameters = new byte[4];                              command.parameters[0] = br.ReadByte();  // Object ID                              command.parameters[1] = br.ReadByte();  // Parent ID                              command.parameters[2] = br.ReadByte();  // Dummy 0                              command.parameters[3] = br.ReadByte();  // Stack ID                              break;                          case 0x2B:                              command.size = 0;   // End Polygon/Material Pairing                              break;                          case 0x44:                              command.size = 3;                              command.parameters = new byte[3];                              command.parameters[0] = br.ReadByte();  // Material ID                              command.parameters[1] = br.ReadByte();  // 0x05                              command.parameters[2] = br.ReadByte();  // Polygon ID                              break;                          case 0x46:                              command.size = 4;                              command.parameters = new byte[4];                              command.parameters[0] = br.ReadByte();  // Object ID                              command.parameters[1] = br.ReadByte();  // Parent ID                              command.parameters[2] = br.ReadByte();  // Dummy 0                              command.parameters[3] = br.ReadByte();  // Restore ID                              break;                          case 0x66:                              command.size = 5;                              command.parameters = new byte[5];                              command.parameters[0] = br.ReadByte();  // Object ID                              command.parameters[1] = br.ReadByte();  // Parent ID                              command.parameters[2] = br.ReadByte();  // Dummy 0                              command.parameters[3] = br.ReadByte();  // Stack ID                              command.parameters[4] = br.ReadByte();  // Restore ID                              break;                      }
Magic Number,_3DModels,BMD0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BMD0.cs,Read,The following statement contains a magic number: switch (cmd)                      {                          case 0x00:  // Padding                              command.size = 0;                              break;                          case 0x01:  // End of bones                              command.size = 0;                              break;                          case 0x02:                              command.size = 2;                              command.parameters = new byte[2];                              command.parameters[0] = br.ReadByte();  // Node ID                              command.parameters[1] = br.ReadByte();  // Visibility                              break;                          case 0x03:                              command.size = 1;                              command.parameters = new byte[1];                              command.parameters[0] = br.ReadByte();  // Set Polygon Stack ID?                              break;                          case 0x04:                              command.size = 3;                              command.parameters = new byte[3];                              command.parameters[0] = br.ReadByte();  // Material ID                              command.parameters[1] = br.ReadByte();  // 0x05                              command.parameters[2] = br.ReadByte();  // Polygon ID                              break;                          case 0x05:                              command.size = 1;                              command.parameters = new byte[1];                              command.parameters[0] = br.ReadByte();                              break;                          case 0x06:                              command.size = 3;                              command.parameters = new byte[3];                              command.parameters[0] = br.ReadByte();  // Object ID                              command.parameters[1] = br.ReadByte();  // Parent ID                              command.parameters[2] = br.ReadByte();  // Dummy 0                              break;                          case 0x07:                              command.size = 1;                              command.parameters = new byte[1];                              command.parameters[0] = br.ReadByte();                              break;                          case 0x08:                              command.size = 1;                              command.parameters = new byte[1];                              command.parameters[0] = br.ReadByte();                              break;                          case 0x09:                              command.size = 8;                              command.parameters = new byte[8];                              command.parameters[0] = br.ReadByte();                              command.parameters[1] = br.ReadByte();                              command.parameters[2] = br.ReadByte();                              command.parameters[3] = br.ReadByte();                              command.parameters[4] = br.ReadByte();                              command.parameters[5] = br.ReadByte();                              command.parameters[6] = br.ReadByte();                              command.parameters[7] = br.ReadByte();                              break;                          case 0x0B:                              command.size = 0;   // Begin Polygon/Material pairing                              break;                          case 0x24:                              command.size = 3;                              command.parameters = new byte[3];                              command.parameters[0] = br.ReadByte();  // Material ID                              command.parameters[1] = br.ReadByte();  // 0x05                              command.parameters[2] = br.ReadByte();  // Polygon ID                              break;                          case 0x26:                              command.size = 4;                              command.parameters = new byte[4];                              command.parameters[0] = br.ReadByte();  // Object ID                              command.parameters[1] = br.ReadByte();  // Parent ID                              command.parameters[2] = br.ReadByte();  // Dummy 0                              command.parameters[3] = br.ReadByte();  // Stack ID                              break;                          case 0x2B:                              command.size = 0;   // End Polygon/Material Pairing                              break;                          case 0x44:                              command.size = 3;                              command.parameters = new byte[3];                              command.parameters[0] = br.ReadByte();  // Material ID                              command.parameters[1] = br.ReadByte();  // 0x05                              command.parameters[2] = br.ReadByte();  // Polygon ID                              break;                          case 0x46:                              command.size = 4;                              command.parameters = new byte[4];                              command.parameters[0] = br.ReadByte();  // Object ID                              command.parameters[1] = br.ReadByte();  // Parent ID                              command.parameters[2] = br.ReadByte();  // Dummy 0                              command.parameters[3] = br.ReadByte();  // Restore ID                              break;                          case 0x66:                              command.size = 5;                              command.parameters = new byte[5];                              command.parameters[0] = br.ReadByte();  // Object ID                              command.parameters[1] = br.ReadByte();  // Parent ID                              command.parameters[2] = br.ReadByte();  // Dummy 0                              command.parameters[3] = br.ReadByte();  // Stack ID                              command.parameters[4] = br.ReadByte();  // Restore ID                              break;                      }
Magic Number,_3DModels,BMD0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BMD0.cs,Read,The following statement contains a magic number: switch (cmd)                      {                          case 0x00:  // Padding                              command.size = 0;                              break;                          case 0x01:  // End of bones                              command.size = 0;                              break;                          case 0x02:                              command.size = 2;                              command.parameters = new byte[2];                              command.parameters[0] = br.ReadByte();  // Node ID                              command.parameters[1] = br.ReadByte();  // Visibility                              break;                          case 0x03:                              command.size = 1;                              command.parameters = new byte[1];                              command.parameters[0] = br.ReadByte();  // Set Polygon Stack ID?                              break;                          case 0x04:                              command.size = 3;                              command.parameters = new byte[3];                              command.parameters[0] = br.ReadByte();  // Material ID                              command.parameters[1] = br.ReadByte();  // 0x05                              command.parameters[2] = br.ReadByte();  // Polygon ID                              break;                          case 0x05:                              command.size = 1;                              command.parameters = new byte[1];                              command.parameters[0] = br.ReadByte();                              break;                          case 0x06:                              command.size = 3;                              command.parameters = new byte[3];                              command.parameters[0] = br.ReadByte();  // Object ID                              command.parameters[1] = br.ReadByte();  // Parent ID                              command.parameters[2] = br.ReadByte();  // Dummy 0                              break;                          case 0x07:                              command.size = 1;                              command.parameters = new byte[1];                              command.parameters[0] = br.ReadByte();                              break;                          case 0x08:                              command.size = 1;                              command.parameters = new byte[1];                              command.parameters[0] = br.ReadByte();                              break;                          case 0x09:                              command.size = 8;                              command.parameters = new byte[8];                              command.parameters[0] = br.ReadByte();                              command.parameters[1] = br.ReadByte();                              command.parameters[2] = br.ReadByte();                              command.parameters[3] = br.ReadByte();                              command.parameters[4] = br.ReadByte();                              command.parameters[5] = br.ReadByte();                              command.parameters[6] = br.ReadByte();                              command.parameters[7] = br.ReadByte();                              break;                          case 0x0B:                              command.size = 0;   // Begin Polygon/Material pairing                              break;                          case 0x24:                              command.size = 3;                              command.parameters = new byte[3];                              command.parameters[0] = br.ReadByte();  // Material ID                              command.parameters[1] = br.ReadByte();  // 0x05                              command.parameters[2] = br.ReadByte();  // Polygon ID                              break;                          case 0x26:                              command.size = 4;                              command.parameters = new byte[4];                              command.parameters[0] = br.ReadByte();  // Object ID                              command.parameters[1] = br.ReadByte();  // Parent ID                              command.parameters[2] = br.ReadByte();  // Dummy 0                              command.parameters[3] = br.ReadByte();  // Stack ID                              break;                          case 0x2B:                              command.size = 0;   // End Polygon/Material Pairing                              break;                          case 0x44:                              command.size = 3;                              command.parameters = new byte[3];                              command.parameters[0] = br.ReadByte();  // Material ID                              command.parameters[1] = br.ReadByte();  // 0x05                              command.parameters[2] = br.ReadByte();  // Polygon ID                              break;                          case 0x46:                              command.size = 4;                              command.parameters = new byte[4];                              command.parameters[0] = br.ReadByte();  // Object ID                              command.parameters[1] = br.ReadByte();  // Parent ID                              command.parameters[2] = br.ReadByte();  // Dummy 0                              command.parameters[3] = br.ReadByte();  // Restore ID                              break;                          case 0x66:                              command.size = 5;                              command.parameters = new byte[5];                              command.parameters[0] = br.ReadByte();  // Object ID                              command.parameters[1] = br.ReadByte();  // Parent ID                              command.parameters[2] = br.ReadByte();  // Dummy 0                              command.parameters[3] = br.ReadByte();  // Stack ID                              command.parameters[4] = br.ReadByte();  // Restore ID                              break;                      }
Magic Number,_3DModels,BMD0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BMD0.cs,Read,The following statement contains a magic number: switch (cmd)                      {                          case 0x00:  // Padding                              command.size = 0;                              break;                          case 0x01:  // End of bones                              command.size = 0;                              break;                          case 0x02:                              command.size = 2;                              command.parameters = new byte[2];                              command.parameters[0] = br.ReadByte();  // Node ID                              command.parameters[1] = br.ReadByte();  // Visibility                              break;                          case 0x03:                              command.size = 1;                              command.parameters = new byte[1];                              command.parameters[0] = br.ReadByte();  // Set Polygon Stack ID?                              break;                          case 0x04:                              command.size = 3;                              command.parameters = new byte[3];                              command.parameters[0] = br.ReadByte();  // Material ID                              command.parameters[1] = br.ReadByte();  // 0x05                              command.parameters[2] = br.ReadByte();  // Polygon ID                              break;                          case 0x05:                              command.size = 1;                              command.parameters = new byte[1];                              command.parameters[0] = br.ReadByte();                              break;                          case 0x06:                              command.size = 3;                              command.parameters = new byte[3];                              command.parameters[0] = br.ReadByte();  // Object ID                              command.parameters[1] = br.ReadByte();  // Parent ID                              command.parameters[2] = br.ReadByte();  // Dummy 0                              break;                          case 0x07:                              command.size = 1;                              command.parameters = new byte[1];                              command.parameters[0] = br.ReadByte();                              break;                          case 0x08:                              command.size = 1;                              command.parameters = new byte[1];                              command.parameters[0] = br.ReadByte();                              break;                          case 0x09:                              command.size = 8;                              command.parameters = new byte[8];                              command.parameters[0] = br.ReadByte();                              command.parameters[1] = br.ReadByte();                              command.parameters[2] = br.ReadByte();                              command.parameters[3] = br.ReadByte();                              command.parameters[4] = br.ReadByte();                              command.parameters[5] = br.ReadByte();                              command.parameters[6] = br.ReadByte();                              command.parameters[7] = br.ReadByte();                              break;                          case 0x0B:                              command.size = 0;   // Begin Polygon/Material pairing                              break;                          case 0x24:                              command.size = 3;                              command.parameters = new byte[3];                              command.parameters[0] = br.ReadByte();  // Material ID                              command.parameters[1] = br.ReadByte();  // 0x05                              command.parameters[2] = br.ReadByte();  // Polygon ID                              break;                          case 0x26:                              command.size = 4;                              command.parameters = new byte[4];                              command.parameters[0] = br.ReadByte();  // Object ID                              command.parameters[1] = br.ReadByte();  // Parent ID                              command.parameters[2] = br.ReadByte();  // Dummy 0                              command.parameters[3] = br.ReadByte();  // Stack ID                              break;                          case 0x2B:                              command.size = 0;   // End Polygon/Material Pairing                              break;                          case 0x44:                              command.size = 3;                              command.parameters = new byte[3];                              command.parameters[0] = br.ReadByte();  // Material ID                              command.parameters[1] = br.ReadByte();  // 0x05                              command.parameters[2] = br.ReadByte();  // Polygon ID                              break;                          case 0x46:                              command.size = 4;                              command.parameters = new byte[4];                              command.parameters[0] = br.ReadByte();  // Object ID                              command.parameters[1] = br.ReadByte();  // Parent ID                              command.parameters[2] = br.ReadByte();  // Dummy 0                              command.parameters[3] = br.ReadByte();  // Restore ID                              break;                          case 0x66:                              command.size = 5;                              command.parameters = new byte[5];                              command.parameters[0] = br.ReadByte();  // Object ID                              command.parameters[1] = br.ReadByte();  // Parent ID                              command.parameters[2] = br.ReadByte();  // Dummy 0                              command.parameters[3] = br.ReadByte();  // Stack ID                              command.parameters[4] = br.ReadByte();  // Restore ID                              break;                      }
Magic Number,_3DModels,BMD0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BMD0.cs,Read,The following statement contains a magic number: switch (cmd)                      {                          case 0x00:  // Padding                              command.size = 0;                              break;                          case 0x01:  // End of bones                              command.size = 0;                              break;                          case 0x02:                              command.size = 2;                              command.parameters = new byte[2];                              command.parameters[0] = br.ReadByte();  // Node ID                              command.parameters[1] = br.ReadByte();  // Visibility                              break;                          case 0x03:                              command.size = 1;                              command.parameters = new byte[1];                              command.parameters[0] = br.ReadByte();  // Set Polygon Stack ID?                              break;                          case 0x04:                              command.size = 3;                              command.parameters = new byte[3];                              command.parameters[0] = br.ReadByte();  // Material ID                              command.parameters[1] = br.ReadByte();  // 0x05                              command.parameters[2] = br.ReadByte();  // Polygon ID                              break;                          case 0x05:                              command.size = 1;                              command.parameters = new byte[1];                              command.parameters[0] = br.ReadByte();                              break;                          case 0x06:                              command.size = 3;                              command.parameters = new byte[3];                              command.parameters[0] = br.ReadByte();  // Object ID                              command.parameters[1] = br.ReadByte();  // Parent ID                              command.parameters[2] = br.ReadByte();  // Dummy 0                              break;                          case 0x07:                              command.size = 1;                              command.parameters = new byte[1];                              command.parameters[0] = br.ReadByte();                              break;                          case 0x08:                              command.size = 1;                              command.parameters = new byte[1];                              command.parameters[0] = br.ReadByte();                              break;                          case 0x09:                              command.size = 8;                              command.parameters = new byte[8];                              command.parameters[0] = br.ReadByte();                              command.parameters[1] = br.ReadByte();                              command.parameters[2] = br.ReadByte();                              command.parameters[3] = br.ReadByte();                              command.parameters[4] = br.ReadByte();                              command.parameters[5] = br.ReadByte();                              command.parameters[6] = br.ReadByte();                              command.parameters[7] = br.ReadByte();                              break;                          case 0x0B:                              command.size = 0;   // Begin Polygon/Material pairing                              break;                          case 0x24:                              command.size = 3;                              command.parameters = new byte[3];                              command.parameters[0] = br.ReadByte();  // Material ID                              command.parameters[1] = br.ReadByte();  // 0x05                              command.parameters[2] = br.ReadByte();  // Polygon ID                              break;                          case 0x26:                              command.size = 4;                              command.parameters = new byte[4];                              command.parameters[0] = br.ReadByte();  // Object ID                              command.parameters[1] = br.ReadByte();  // Parent ID                              command.parameters[2] = br.ReadByte();  // Dummy 0                              command.parameters[3] = br.ReadByte();  // Stack ID                              break;                          case 0x2B:                              command.size = 0;   // End Polygon/Material Pairing                              break;                          case 0x44:                              command.size = 3;                              command.parameters = new byte[3];                              command.parameters[0] = br.ReadByte();  // Material ID                              command.parameters[1] = br.ReadByte();  // 0x05                              command.parameters[2] = br.ReadByte();  // Polygon ID                              break;                          case 0x46:                              command.size = 4;                              command.parameters = new byte[4];                              command.parameters[0] = br.ReadByte();  // Object ID                              command.parameters[1] = br.ReadByte();  // Parent ID                              command.parameters[2] = br.ReadByte();  // Dummy 0                              command.parameters[3] = br.ReadByte();  // Restore ID                              break;                          case 0x66:                              command.size = 5;                              command.parameters = new byte[5];                              command.parameters[0] = br.ReadByte();  // Object ID                              command.parameters[1] = br.ReadByte();  // Parent ID                              command.parameters[2] = br.ReadByte();  // Dummy 0                              command.parameters[3] = br.ReadByte();  // Stack ID                              command.parameters[4] = br.ReadByte();  // Restore ID                              break;                      }
Magic Number,_3DModels,BMD0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BMD0.cs,Read,The following statement contains a magic number: switch (cmd)                      {                          case 0x00:  // Padding                              command.size = 0;                              break;                          case 0x01:  // End of bones                              command.size = 0;                              break;                          case 0x02:                              command.size = 2;                              command.parameters = new byte[2];                              command.parameters[0] = br.ReadByte();  // Node ID                              command.parameters[1] = br.ReadByte();  // Visibility                              break;                          case 0x03:                              command.size = 1;                              command.parameters = new byte[1];                              command.parameters[0] = br.ReadByte();  // Set Polygon Stack ID?                              break;                          case 0x04:                              command.size = 3;                              command.parameters = new byte[3];                              command.parameters[0] = br.ReadByte();  // Material ID                              command.parameters[1] = br.ReadByte();  // 0x05                              command.parameters[2] = br.ReadByte();  // Polygon ID                              break;                          case 0x05:                              command.size = 1;                              command.parameters = new byte[1];                              command.parameters[0] = br.ReadByte();                              break;                          case 0x06:                              command.size = 3;                              command.parameters = new byte[3];                              command.parameters[0] = br.ReadByte();  // Object ID                              command.parameters[1] = br.ReadByte();  // Parent ID                              command.parameters[2] = br.ReadByte();  // Dummy 0                              break;                          case 0x07:                              command.size = 1;                              command.parameters = new byte[1];                              command.parameters[0] = br.ReadByte();                              break;                          case 0x08:                              command.size = 1;                              command.parameters = new byte[1];                              command.parameters[0] = br.ReadByte();                              break;                          case 0x09:                              command.size = 8;                              command.parameters = new byte[8];                              command.parameters[0] = br.ReadByte();                              command.parameters[1] = br.ReadByte();                              command.parameters[2] = br.ReadByte();                              command.parameters[3] = br.ReadByte();                              command.parameters[4] = br.ReadByte();                              command.parameters[5] = br.ReadByte();                              command.parameters[6] = br.ReadByte();                              command.parameters[7] = br.ReadByte();                              break;                          case 0x0B:                              command.size = 0;   // Begin Polygon/Material pairing                              break;                          case 0x24:                              command.size = 3;                              command.parameters = new byte[3];                              command.parameters[0] = br.ReadByte();  // Material ID                              command.parameters[1] = br.ReadByte();  // 0x05                              command.parameters[2] = br.ReadByte();  // Polygon ID                              break;                          case 0x26:                              command.size = 4;                              command.parameters = new byte[4];                              command.parameters[0] = br.ReadByte();  // Object ID                              command.parameters[1] = br.ReadByte();  // Parent ID                              command.parameters[2] = br.ReadByte();  // Dummy 0                              command.parameters[3] = br.ReadByte();  // Stack ID                              break;                          case 0x2B:                              command.size = 0;   // End Polygon/Material Pairing                              break;                          case 0x44:                              command.size = 3;                              command.parameters = new byte[3];                              command.parameters[0] = br.ReadByte();  // Material ID                              command.parameters[1] = br.ReadByte();  // 0x05                              command.parameters[2] = br.ReadByte();  // Polygon ID                              break;                          case 0x46:                              command.size = 4;                              command.parameters = new byte[4];                              command.parameters[0] = br.ReadByte();  // Object ID                              command.parameters[1] = br.ReadByte();  // Parent ID                              command.parameters[2] = br.ReadByte();  // Dummy 0                              command.parameters[3] = br.ReadByte();  // Restore ID                              break;                          case 0x66:                              command.size = 5;                              command.parameters = new byte[5];                              command.parameters[0] = br.ReadByte();  // Object ID                              command.parameters[1] = br.ReadByte();  // Parent ID                              command.parameters[2] = br.ReadByte();  // Dummy 0                              command.parameters[3] = br.ReadByte();  // Stack ID                              command.parameters[4] = br.ReadByte();  // Restore ID                              break;                      }
Magic Number,_3DModels,BMD0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BMD0.cs,Read,The following statement contains a magic number: switch (cmd)                      {                          case 0x00:  // Padding                              command.size = 0;                              break;                          case 0x01:  // End of bones                              command.size = 0;                              break;                          case 0x02:                              command.size = 2;                              command.parameters = new byte[2];                              command.parameters[0] = br.ReadByte();  // Node ID                              command.parameters[1] = br.ReadByte();  // Visibility                              break;                          case 0x03:                              command.size = 1;                              command.parameters = new byte[1];                              command.parameters[0] = br.ReadByte();  // Set Polygon Stack ID?                              break;                          case 0x04:                              command.size = 3;                              command.parameters = new byte[3];                              command.parameters[0] = br.ReadByte();  // Material ID                              command.parameters[1] = br.ReadByte();  // 0x05                              command.parameters[2] = br.ReadByte();  // Polygon ID                              break;                          case 0x05:                              command.size = 1;                              command.parameters = new byte[1];                              command.parameters[0] = br.ReadByte();                              break;                          case 0x06:                              command.size = 3;                              command.parameters = new byte[3];                              command.parameters[0] = br.ReadByte();  // Object ID                              command.parameters[1] = br.ReadByte();  // Parent ID                              command.parameters[2] = br.ReadByte();  // Dummy 0                              break;                          case 0x07:                              command.size = 1;                              command.parameters = new byte[1];                              command.parameters[0] = br.ReadByte();                              break;                          case 0x08:                              command.size = 1;                              command.parameters = new byte[1];                              command.parameters[0] = br.ReadByte();                              break;                          case 0x09:                              command.size = 8;                              command.parameters = new byte[8];                              command.parameters[0] = br.ReadByte();                              command.parameters[1] = br.ReadByte();                              command.parameters[2] = br.ReadByte();                              command.parameters[3] = br.ReadByte();                              command.parameters[4] = br.ReadByte();                              command.parameters[5] = br.ReadByte();                              command.parameters[6] = br.ReadByte();                              command.parameters[7] = br.ReadByte();                              break;                          case 0x0B:                              command.size = 0;   // Begin Polygon/Material pairing                              break;                          case 0x24:                              command.size = 3;                              command.parameters = new byte[3];                              command.parameters[0] = br.ReadByte();  // Material ID                              command.parameters[1] = br.ReadByte();  // 0x05                              command.parameters[2] = br.ReadByte();  // Polygon ID                              break;                          case 0x26:                              command.size = 4;                              command.parameters = new byte[4];                              command.parameters[0] = br.ReadByte();  // Object ID                              command.parameters[1] = br.ReadByte();  // Parent ID                              command.parameters[2] = br.ReadByte();  // Dummy 0                              command.parameters[3] = br.ReadByte();  // Stack ID                              break;                          case 0x2B:                              command.size = 0;   // End Polygon/Material Pairing                              break;                          case 0x44:                              command.size = 3;                              command.parameters = new byte[3];                              command.parameters[0] = br.ReadByte();  // Material ID                              command.parameters[1] = br.ReadByte();  // 0x05                              command.parameters[2] = br.ReadByte();  // Polygon ID                              break;                          case 0x46:                              command.size = 4;                              command.parameters = new byte[4];                              command.parameters[0] = br.ReadByte();  // Object ID                              command.parameters[1] = br.ReadByte();  // Parent ID                              command.parameters[2] = br.ReadByte();  // Dummy 0                              command.parameters[3] = br.ReadByte();  // Restore ID                              break;                          case 0x66:                              command.size = 5;                              command.parameters = new byte[5];                              command.parameters[0] = br.ReadByte();  // Object ID                              command.parameters[1] = br.ReadByte();  // Parent ID                              command.parameters[2] = br.ReadByte();  // Dummy 0                              command.parameters[3] = br.ReadByte();  // Stack ID                              command.parameters[4] = br.ReadByte();  // Restore ID                              break;                      }
Magic Number,_3DModels,BMD0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BMD0.cs,Read,The following statement contains a magic number: switch (cmd)                      {                          case 0x00:  // Padding                              command.size = 0;                              break;                          case 0x01:  // End of bones                              command.size = 0;                              break;                          case 0x02:                              command.size = 2;                              command.parameters = new byte[2];                              command.parameters[0] = br.ReadByte();  // Node ID                              command.parameters[1] = br.ReadByte();  // Visibility                              break;                          case 0x03:                              command.size = 1;                              command.parameters = new byte[1];                              command.parameters[0] = br.ReadByte();  // Set Polygon Stack ID?                              break;                          case 0x04:                              command.size = 3;                              command.parameters = new byte[3];                              command.parameters[0] = br.ReadByte();  // Material ID                              command.parameters[1] = br.ReadByte();  // 0x05                              command.parameters[2] = br.ReadByte();  // Polygon ID                              break;                          case 0x05:                              command.size = 1;                              command.parameters = new byte[1];                              command.parameters[0] = br.ReadByte();                              break;                          case 0x06:                              command.size = 3;                              command.parameters = new byte[3];                              command.parameters[0] = br.ReadByte();  // Object ID                              command.parameters[1] = br.ReadByte();  // Parent ID                              command.parameters[2] = br.ReadByte();  // Dummy 0                              break;                          case 0x07:                              command.size = 1;                              command.parameters = new byte[1];                              command.parameters[0] = br.ReadByte();                              break;                          case 0x08:                              command.size = 1;                              command.parameters = new byte[1];                              command.parameters[0] = br.ReadByte();                              break;                          case 0x09:                              command.size = 8;                              command.parameters = new byte[8];                              command.parameters[0] = br.ReadByte();                              command.parameters[1] = br.ReadByte();                              command.parameters[2] = br.ReadByte();                              command.parameters[3] = br.ReadByte();                              command.parameters[4] = br.ReadByte();                              command.parameters[5] = br.ReadByte();                              command.parameters[6] = br.ReadByte();                              command.parameters[7] = br.ReadByte();                              break;                          case 0x0B:                              command.size = 0;   // Begin Polygon/Material pairing                              break;                          case 0x24:                              command.size = 3;                              command.parameters = new byte[3];                              command.parameters[0] = br.ReadByte();  // Material ID                              command.parameters[1] = br.ReadByte();  // 0x05                              command.parameters[2] = br.ReadByte();  // Polygon ID                              break;                          case 0x26:                              command.size = 4;                              command.parameters = new byte[4];                              command.parameters[0] = br.ReadByte();  // Object ID                              command.parameters[1] = br.ReadByte();  // Parent ID                              command.parameters[2] = br.ReadByte();  // Dummy 0                              command.parameters[3] = br.ReadByte();  // Stack ID                              break;                          case 0x2B:                              command.size = 0;   // End Polygon/Material Pairing                              break;                          case 0x44:                              command.size = 3;                              command.parameters = new byte[3];                              command.parameters[0] = br.ReadByte();  // Material ID                              command.parameters[1] = br.ReadByte();  // 0x05                              command.parameters[2] = br.ReadByte();  // Polygon ID                              break;                          case 0x46:                              command.size = 4;                              command.parameters = new byte[4];                              command.parameters[0] = br.ReadByte();  // Object ID                              command.parameters[1] = br.ReadByte();  // Parent ID                              command.parameters[2] = br.ReadByte();  // Dummy 0                              command.parameters[3] = br.ReadByte();  // Restore ID                              break;                          case 0x66:                              command.size = 5;                              command.parameters = new byte[5];                              command.parameters[0] = br.ReadByte();  // Object ID                              command.parameters[1] = br.ReadByte();  // Parent ID                              command.parameters[2] = br.ReadByte();  // Dummy 0                              command.parameters[3] = br.ReadByte();  // Stack ID                              command.parameters[4] = br.ReadByte();  // Restore ID                              break;                      }
Magic Number,_3DModels,BMD0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BMD0.cs,Read,The following statement contains a magic number: switch (cmd)                      {                          case 0x00:  // Padding                              command.size = 0;                              break;                          case 0x01:  // End of bones                              command.size = 0;                              break;                          case 0x02:                              command.size = 2;                              command.parameters = new byte[2];                              command.parameters[0] = br.ReadByte();  // Node ID                              command.parameters[1] = br.ReadByte();  // Visibility                              break;                          case 0x03:                              command.size = 1;                              command.parameters = new byte[1];                              command.parameters[0] = br.ReadByte();  // Set Polygon Stack ID?                              break;                          case 0x04:                              command.size = 3;                              command.parameters = new byte[3];                              command.parameters[0] = br.ReadByte();  // Material ID                              command.parameters[1] = br.ReadByte();  // 0x05                              command.parameters[2] = br.ReadByte();  // Polygon ID                              break;                          case 0x05:                              command.size = 1;                              command.parameters = new byte[1];                              command.parameters[0] = br.ReadByte();                              break;                          case 0x06:                              command.size = 3;                              command.parameters = new byte[3];                              command.parameters[0] = br.ReadByte();  // Object ID                              command.parameters[1] = br.ReadByte();  // Parent ID                              command.parameters[2] = br.ReadByte();  // Dummy 0                              break;                          case 0x07:                              command.size = 1;                              command.parameters = new byte[1];                              command.parameters[0] = br.ReadByte();                              break;                          case 0x08:                              command.size = 1;                              command.parameters = new byte[1];                              command.parameters[0] = br.ReadByte();                              break;                          case 0x09:                              command.size = 8;                              command.parameters = new byte[8];                              command.parameters[0] = br.ReadByte();                              command.parameters[1] = br.ReadByte();                              command.parameters[2] = br.ReadByte();                              command.parameters[3] = br.ReadByte();                              command.parameters[4] = br.ReadByte();                              command.parameters[5] = br.ReadByte();                              command.parameters[6] = br.ReadByte();                              command.parameters[7] = br.ReadByte();                              break;                          case 0x0B:                              command.size = 0;   // Begin Polygon/Material pairing                              break;                          case 0x24:                              command.size = 3;                              command.parameters = new byte[3];                              command.parameters[0] = br.ReadByte();  // Material ID                              command.parameters[1] = br.ReadByte();  // 0x05                              command.parameters[2] = br.ReadByte();  // Polygon ID                              break;                          case 0x26:                              command.size = 4;                              command.parameters = new byte[4];                              command.parameters[0] = br.ReadByte();  // Object ID                              command.parameters[1] = br.ReadByte();  // Parent ID                              command.parameters[2] = br.ReadByte();  // Dummy 0                              command.parameters[3] = br.ReadByte();  // Stack ID                              break;                          case 0x2B:                              command.size = 0;   // End Polygon/Material Pairing                              break;                          case 0x44:                              command.size = 3;                              command.parameters = new byte[3];                              command.parameters[0] = br.ReadByte();  // Material ID                              command.parameters[1] = br.ReadByte();  // 0x05                              command.parameters[2] = br.ReadByte();  // Polygon ID                              break;                          case 0x46:                              command.size = 4;                              command.parameters = new byte[4];                              command.parameters[0] = br.ReadByte();  // Object ID                              command.parameters[1] = br.ReadByte();  // Parent ID                              command.parameters[2] = br.ReadByte();  // Dummy 0                              command.parameters[3] = br.ReadByte();  // Restore ID                              break;                          case 0x66:                              command.size = 5;                              command.parameters = new byte[5];                              command.parameters[0] = br.ReadByte();  // Object ID                              command.parameters[1] = br.ReadByte();  // Parent ID                              command.parameters[2] = br.ReadByte();  // Dummy 0                              command.parameters[3] = br.ReadByte();  // Stack ID                              command.parameters[4] = br.ReadByte();  // Restore ID                              break;                      }
Magic Number,_3DModels,BMD0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BMD0.cs,Read,The following statement contains a magic number: switch (cmd)                      {                          case 0x00:  // Padding                              command.size = 0;                              break;                          case 0x01:  // End of bones                              command.size = 0;                              break;                          case 0x02:                              command.size = 2;                              command.parameters = new byte[2];                              command.parameters[0] = br.ReadByte();  // Node ID                              command.parameters[1] = br.ReadByte();  // Visibility                              break;                          case 0x03:                              command.size = 1;                              command.parameters = new byte[1];                              command.parameters[0] = br.ReadByte();  // Set Polygon Stack ID?                              break;                          case 0x04:                              command.size = 3;                              command.parameters = new byte[3];                              command.parameters[0] = br.ReadByte();  // Material ID                              command.parameters[1] = br.ReadByte();  // 0x05                              command.parameters[2] = br.ReadByte();  // Polygon ID                              break;                          case 0x05:                              command.size = 1;                              command.parameters = new byte[1];                              command.parameters[0] = br.ReadByte();                              break;                          case 0x06:                              command.size = 3;                              command.parameters = new byte[3];                              command.parameters[0] = br.ReadByte();  // Object ID                              command.parameters[1] = br.ReadByte();  // Parent ID                              command.parameters[2] = br.ReadByte();  // Dummy 0                              break;                          case 0x07:                              command.size = 1;                              command.parameters = new byte[1];                              command.parameters[0] = br.ReadByte();                              break;                          case 0x08:                              command.size = 1;                              command.parameters = new byte[1];                              command.parameters[0] = br.ReadByte();                              break;                          case 0x09:                              command.size = 8;                              command.parameters = new byte[8];                              command.parameters[0] = br.ReadByte();                              command.parameters[1] = br.ReadByte();                              command.parameters[2] = br.ReadByte();                              command.parameters[3] = br.ReadByte();                              command.parameters[4] = br.ReadByte();                              command.parameters[5] = br.ReadByte();                              command.parameters[6] = br.ReadByte();                              command.parameters[7] = br.ReadByte();                              break;                          case 0x0B:                              command.size = 0;   // Begin Polygon/Material pairing                              break;                          case 0x24:                              command.size = 3;                              command.parameters = new byte[3];                              command.parameters[0] = br.ReadByte();  // Material ID                              command.parameters[1] = br.ReadByte();  // 0x05                              command.parameters[2] = br.ReadByte();  // Polygon ID                              break;                          case 0x26:                              command.size = 4;                              command.parameters = new byte[4];                              command.parameters[0] = br.ReadByte();  // Object ID                              command.parameters[1] = br.ReadByte();  // Parent ID                              command.parameters[2] = br.ReadByte();  // Dummy 0                              command.parameters[3] = br.ReadByte();  // Stack ID                              break;                          case 0x2B:                              command.size = 0;   // End Polygon/Material Pairing                              break;                          case 0x44:                              command.size = 3;                              command.parameters = new byte[3];                              command.parameters[0] = br.ReadByte();  // Material ID                              command.parameters[1] = br.ReadByte();  // 0x05                              command.parameters[2] = br.ReadByte();  // Polygon ID                              break;                          case 0x46:                              command.size = 4;                              command.parameters = new byte[4];                              command.parameters[0] = br.ReadByte();  // Object ID                              command.parameters[1] = br.ReadByte();  // Parent ID                              command.parameters[2] = br.ReadByte();  // Dummy 0                              command.parameters[3] = br.ReadByte();  // Restore ID                              break;                          case 0x66:                              command.size = 5;                              command.parameters = new byte[5];                              command.parameters[0] = br.ReadByte();  // Object ID                              command.parameters[1] = br.ReadByte();  // Parent ID                              command.parameters[2] = br.ReadByte();  // Dummy 0                              command.parameters[3] = br.ReadByte();  // Stack ID                              command.parameters[4] = br.ReadByte();  // Restore ID                              break;                      }
Magic Number,_3DModels,BMD0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BMD0.cs,Read,The following statement contains a magic number: switch (cmd)                      {                          case 0x00:  // Padding                              command.size = 0;                              break;                          case 0x01:  // End of bones                              command.size = 0;                              break;                          case 0x02:                              command.size = 2;                              command.parameters = new byte[2];                              command.parameters[0] = br.ReadByte();  // Node ID                              command.parameters[1] = br.ReadByte();  // Visibility                              break;                          case 0x03:                              command.size = 1;                              command.parameters = new byte[1];                              command.parameters[0] = br.ReadByte();  // Set Polygon Stack ID?                              break;                          case 0x04:                              command.size = 3;                              command.parameters = new byte[3];                              command.parameters[0] = br.ReadByte();  // Material ID                              command.parameters[1] = br.ReadByte();  // 0x05                              command.parameters[2] = br.ReadByte();  // Polygon ID                              break;                          case 0x05:                              command.size = 1;                              command.parameters = new byte[1];                              command.parameters[0] = br.ReadByte();                              break;                          case 0x06:                              command.size = 3;                              command.parameters = new byte[3];                              command.parameters[0] = br.ReadByte();  // Object ID                              command.parameters[1] = br.ReadByte();  // Parent ID                              command.parameters[2] = br.ReadByte();  // Dummy 0                              break;                          case 0x07:                              command.size = 1;                              command.parameters = new byte[1];                              command.parameters[0] = br.ReadByte();                              break;                          case 0x08:                              command.size = 1;                              command.parameters = new byte[1];                              command.parameters[0] = br.ReadByte();                              break;                          case 0x09:                              command.size = 8;                              command.parameters = new byte[8];                              command.parameters[0] = br.ReadByte();                              command.parameters[1] = br.ReadByte();                              command.parameters[2] = br.ReadByte();                              command.parameters[3] = br.ReadByte();                              command.parameters[4] = br.ReadByte();                              command.parameters[5] = br.ReadByte();                              command.parameters[6] = br.ReadByte();                              command.parameters[7] = br.ReadByte();                              break;                          case 0x0B:                              command.size = 0;   // Begin Polygon/Material pairing                              break;                          case 0x24:                              command.size = 3;                              command.parameters = new byte[3];                              command.parameters[0] = br.ReadByte();  // Material ID                              command.parameters[1] = br.ReadByte();  // 0x05                              command.parameters[2] = br.ReadByte();  // Polygon ID                              break;                          case 0x26:                              command.size = 4;                              command.parameters = new byte[4];                              command.parameters[0] = br.ReadByte();  // Object ID                              command.parameters[1] = br.ReadByte();  // Parent ID                              command.parameters[2] = br.ReadByte();  // Dummy 0                              command.parameters[3] = br.ReadByte();  // Stack ID                              break;                          case 0x2B:                              command.size = 0;   // End Polygon/Material Pairing                              break;                          case 0x44:                              command.size = 3;                              command.parameters = new byte[3];                              command.parameters[0] = br.ReadByte();  // Material ID                              command.parameters[1] = br.ReadByte();  // 0x05                              command.parameters[2] = br.ReadByte();  // Polygon ID                              break;                          case 0x46:                              command.size = 4;                              command.parameters = new byte[4];                              command.parameters[0] = br.ReadByte();  // Object ID                              command.parameters[1] = br.ReadByte();  // Parent ID                              command.parameters[2] = br.ReadByte();  // Dummy 0                              command.parameters[3] = br.ReadByte();  // Restore ID                              break;                          case 0x66:                              command.size = 5;                              command.parameters = new byte[5];                              command.parameters[0] = br.ReadByte();  // Object ID                              command.parameters[1] = br.ReadByte();  // Parent ID                              command.parameters[2] = br.ReadByte();  // Dummy 0                              command.parameters[3] = br.ReadByte();  // Stack ID                              command.parameters[4] = br.ReadByte();  // Restore ID                              break;                      }
Magic Number,_3DModels,BMD0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BMD0.cs,Read,The following statement contains a magic number: switch (cmd)                      {                          case 0x00:  // Padding                              command.size = 0;                              break;                          case 0x01:  // End of bones                              command.size = 0;                              break;                          case 0x02:                              command.size = 2;                              command.parameters = new byte[2];                              command.parameters[0] = br.ReadByte();  // Node ID                              command.parameters[1] = br.ReadByte();  // Visibility                              break;                          case 0x03:                              command.size = 1;                              command.parameters = new byte[1];                              command.parameters[0] = br.ReadByte();  // Set Polygon Stack ID?                              break;                          case 0x04:                              command.size = 3;                              command.parameters = new byte[3];                              command.parameters[0] = br.ReadByte();  // Material ID                              command.parameters[1] = br.ReadByte();  // 0x05                              command.parameters[2] = br.ReadByte();  // Polygon ID                              break;                          case 0x05:                              command.size = 1;                              command.parameters = new byte[1];                              command.parameters[0] = br.ReadByte();                              break;                          case 0x06:                              command.size = 3;                              command.parameters = new byte[3];                              command.parameters[0] = br.ReadByte();  // Object ID                              command.parameters[1] = br.ReadByte();  // Parent ID                              command.parameters[2] = br.ReadByte();  // Dummy 0                              break;                          case 0x07:                              command.size = 1;                              command.parameters = new byte[1];                              command.parameters[0] = br.ReadByte();                              break;                          case 0x08:                              command.size = 1;                              command.parameters = new byte[1];                              command.parameters[0] = br.ReadByte();                              break;                          case 0x09:                              command.size = 8;                              command.parameters = new byte[8];                              command.parameters[0] = br.ReadByte();                              command.parameters[1] = br.ReadByte();                              command.parameters[2] = br.ReadByte();                              command.parameters[3] = br.ReadByte();                              command.parameters[4] = br.ReadByte();                              command.parameters[5] = br.ReadByte();                              command.parameters[6] = br.ReadByte();                              command.parameters[7] = br.ReadByte();                              break;                          case 0x0B:                              command.size = 0;   // Begin Polygon/Material pairing                              break;                          case 0x24:                              command.size = 3;                              command.parameters = new byte[3];                              command.parameters[0] = br.ReadByte();  // Material ID                              command.parameters[1] = br.ReadByte();  // 0x05                              command.parameters[2] = br.ReadByte();  // Polygon ID                              break;                          case 0x26:                              command.size = 4;                              command.parameters = new byte[4];                              command.parameters[0] = br.ReadByte();  // Object ID                              command.parameters[1] = br.ReadByte();  // Parent ID                              command.parameters[2] = br.ReadByte();  // Dummy 0                              command.parameters[3] = br.ReadByte();  // Stack ID                              break;                          case 0x2B:                              command.size = 0;   // End Polygon/Material Pairing                              break;                          case 0x44:                              command.size = 3;                              command.parameters = new byte[3];                              command.parameters[0] = br.ReadByte();  // Material ID                              command.parameters[1] = br.ReadByte();  // 0x05                              command.parameters[2] = br.ReadByte();  // Polygon ID                              break;                          case 0x46:                              command.size = 4;                              command.parameters = new byte[4];                              command.parameters[0] = br.ReadByte();  // Object ID                              command.parameters[1] = br.ReadByte();  // Parent ID                              command.parameters[2] = br.ReadByte();  // Dummy 0                              command.parameters[3] = br.ReadByte();  // Restore ID                              break;                          case 0x66:                              command.size = 5;                              command.parameters = new byte[5];                              command.parameters[0] = br.ReadByte();  // Object ID                              command.parameters[1] = br.ReadByte();  // Parent ID                              command.parameters[2] = br.ReadByte();  // Dummy 0                              command.parameters[3] = br.ReadByte();  // Stack ID                              command.parameters[4] = br.ReadByte();  // Restore ID                              break;                      }
Magic Number,_3DModels,BMD0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BMD0.cs,Read,The following statement contains a magic number: switch (cmd)                      {                          case 0x00:  // Padding                              command.size = 0;                              break;                          case 0x01:  // End of bones                              command.size = 0;                              break;                          case 0x02:                              command.size = 2;                              command.parameters = new byte[2];                              command.parameters[0] = br.ReadByte();  // Node ID                              command.parameters[1] = br.ReadByte();  // Visibility                              break;                          case 0x03:                              command.size = 1;                              command.parameters = new byte[1];                              command.parameters[0] = br.ReadByte();  // Set Polygon Stack ID?                              break;                          case 0x04:                              command.size = 3;                              command.parameters = new byte[3];                              command.parameters[0] = br.ReadByte();  // Material ID                              command.parameters[1] = br.ReadByte();  // 0x05                              command.parameters[2] = br.ReadByte();  // Polygon ID                              break;                          case 0x05:                              command.size = 1;                              command.parameters = new byte[1];                              command.parameters[0] = br.ReadByte();                              break;                          case 0x06:                              command.size = 3;                              command.parameters = new byte[3];                              command.parameters[0] = br.ReadByte();  // Object ID                              command.parameters[1] = br.ReadByte();  // Parent ID                              command.parameters[2] = br.ReadByte();  // Dummy 0                              break;                          case 0x07:                              command.size = 1;                              command.parameters = new byte[1];                              command.parameters[0] = br.ReadByte();                              break;                          case 0x08:                              command.size = 1;                              command.parameters = new byte[1];                              command.parameters[0] = br.ReadByte();                              break;                          case 0x09:                              command.size = 8;                              command.parameters = new byte[8];                              command.parameters[0] = br.ReadByte();                              command.parameters[1] = br.ReadByte();                              command.parameters[2] = br.ReadByte();                              command.parameters[3] = br.ReadByte();                              command.parameters[4] = br.ReadByte();                              command.parameters[5] = br.ReadByte();                              command.parameters[6] = br.ReadByte();                              command.parameters[7] = br.ReadByte();                              break;                          case 0x0B:                              command.size = 0;   // Begin Polygon/Material pairing                              break;                          case 0x24:                              command.size = 3;                              command.parameters = new byte[3];                              command.parameters[0] = br.ReadByte();  // Material ID                              command.parameters[1] = br.ReadByte();  // 0x05                              command.parameters[2] = br.ReadByte();  // Polygon ID                              break;                          case 0x26:                              command.size = 4;                              command.parameters = new byte[4];                              command.parameters[0] = br.ReadByte();  // Object ID                              command.parameters[1] = br.ReadByte();  // Parent ID                              command.parameters[2] = br.ReadByte();  // Dummy 0                              command.parameters[3] = br.ReadByte();  // Stack ID                              break;                          case 0x2B:                              command.size = 0;   // End Polygon/Material Pairing                              break;                          case 0x44:                              command.size = 3;                              command.parameters = new byte[3];                              command.parameters[0] = br.ReadByte();  // Material ID                              command.parameters[1] = br.ReadByte();  // 0x05                              command.parameters[2] = br.ReadByte();  // Polygon ID                              break;                          case 0x46:                              command.size = 4;                              command.parameters = new byte[4];                              command.parameters[0] = br.ReadByte();  // Object ID                              command.parameters[1] = br.ReadByte();  // Parent ID                              command.parameters[2] = br.ReadByte();  // Dummy 0                              command.parameters[3] = br.ReadByte();  // Restore ID                              break;                          case 0x66:                              command.size = 5;                              command.parameters = new byte[5];                              command.parameters[0] = br.ReadByte();  // Object ID                              command.parameters[1] = br.ReadByte();  // Parent ID                              command.parameters[2] = br.ReadByte();  // Dummy 0                              command.parameters[3] = br.ReadByte();  // Stack ID                              command.parameters[4] = br.ReadByte();  // Restore ID                              break;                      }
Magic Number,_3DModels,BMD0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BMD0.cs,Read,The following statement contains a magic number: switch (cmd)                      {                          case 0x00:  // Padding                              command.size = 0;                              break;                          case 0x01:  // End of bones                              command.size = 0;                              break;                          case 0x02:                              command.size = 2;                              command.parameters = new byte[2];                              command.parameters[0] = br.ReadByte();  // Node ID                              command.parameters[1] = br.ReadByte();  // Visibility                              break;                          case 0x03:                              command.size = 1;                              command.parameters = new byte[1];                              command.parameters[0] = br.ReadByte();  // Set Polygon Stack ID?                              break;                          case 0x04:                              command.size = 3;                              command.parameters = new byte[3];                              command.parameters[0] = br.ReadByte();  // Material ID                              command.parameters[1] = br.ReadByte();  // 0x05                              command.parameters[2] = br.ReadByte();  // Polygon ID                              break;                          case 0x05:                              command.size = 1;                              command.parameters = new byte[1];                              command.parameters[0] = br.ReadByte();                              break;                          case 0x06:                              command.size = 3;                              command.parameters = new byte[3];                              command.parameters[0] = br.ReadByte();  // Object ID                              command.parameters[1] = br.ReadByte();  // Parent ID                              command.parameters[2] = br.ReadByte();  // Dummy 0                              break;                          case 0x07:                              command.size = 1;                              command.parameters = new byte[1];                              command.parameters[0] = br.ReadByte();                              break;                          case 0x08:                              command.size = 1;                              command.parameters = new byte[1];                              command.parameters[0] = br.ReadByte();                              break;                          case 0x09:                              command.size = 8;                              command.parameters = new byte[8];                              command.parameters[0] = br.ReadByte();                              command.parameters[1] = br.ReadByte();                              command.parameters[2] = br.ReadByte();                              command.parameters[3] = br.ReadByte();                              command.parameters[4] = br.ReadByte();                              command.parameters[5] = br.ReadByte();                              command.parameters[6] = br.ReadByte();                              command.parameters[7] = br.ReadByte();                              break;                          case 0x0B:                              command.size = 0;   // Begin Polygon/Material pairing                              break;                          case 0x24:                              command.size = 3;                              command.parameters = new byte[3];                              command.parameters[0] = br.ReadByte();  // Material ID                              command.parameters[1] = br.ReadByte();  // 0x05                              command.parameters[2] = br.ReadByte();  // Polygon ID                              break;                          case 0x26:                              command.size = 4;                              command.parameters = new byte[4];                              command.parameters[0] = br.ReadByte();  // Object ID                              command.parameters[1] = br.ReadByte();  // Parent ID                              command.parameters[2] = br.ReadByte();  // Dummy 0                              command.parameters[3] = br.ReadByte();  // Stack ID                              break;                          case 0x2B:                              command.size = 0;   // End Polygon/Material Pairing                              break;                          case 0x44:                              command.size = 3;                              command.parameters = new byte[3];                              command.parameters[0] = br.ReadByte();  // Material ID                              command.parameters[1] = br.ReadByte();  // 0x05                              command.parameters[2] = br.ReadByte();  // Polygon ID                              break;                          case 0x46:                              command.size = 4;                              command.parameters = new byte[4];                              command.parameters[0] = br.ReadByte();  // Object ID                              command.parameters[1] = br.ReadByte();  // Parent ID                              command.parameters[2] = br.ReadByte();  // Dummy 0                              command.parameters[3] = br.ReadByte();  // Restore ID                              break;                          case 0x66:                              command.size = 5;                              command.parameters = new byte[5];                              command.parameters[0] = br.ReadByte();  // Object ID                              command.parameters[1] = br.ReadByte();  // Parent ID                              command.parameters[2] = br.ReadByte();  // Dummy 0                              command.parameters[3] = br.ReadByte();  // Stack ID                              command.parameters[4] = br.ReadByte();  // Restore ID                              break;                      }
Magic Number,_3DModels,BMD0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BMD0.cs,Read,The following statement contains a magic number: switch (cmd)                      {                          case 0x00:  // Padding                              command.size = 0;                              break;                          case 0x01:  // End of bones                              command.size = 0;                              break;                          case 0x02:                              command.size = 2;                              command.parameters = new byte[2];                              command.parameters[0] = br.ReadByte();  // Node ID                              command.parameters[1] = br.ReadByte();  // Visibility                              break;                          case 0x03:                              command.size = 1;                              command.parameters = new byte[1];                              command.parameters[0] = br.ReadByte();  // Set Polygon Stack ID?                              break;                          case 0x04:                              command.size = 3;                              command.parameters = new byte[3];                              command.parameters[0] = br.ReadByte();  // Material ID                              command.parameters[1] = br.ReadByte();  // 0x05                              command.parameters[2] = br.ReadByte();  // Polygon ID                              break;                          case 0x05:                              command.size = 1;                              command.parameters = new byte[1];                              command.parameters[0] = br.ReadByte();                              break;                          case 0x06:                              command.size = 3;                              command.parameters = new byte[3];                              command.parameters[0] = br.ReadByte();  // Object ID                              command.parameters[1] = br.ReadByte();  // Parent ID                              command.parameters[2] = br.ReadByte();  // Dummy 0                              break;                          case 0x07:                              command.size = 1;                              command.parameters = new byte[1];                              command.parameters[0] = br.ReadByte();                              break;                          case 0x08:                              command.size = 1;                              command.parameters = new byte[1];                              command.parameters[0] = br.ReadByte();                              break;                          case 0x09:                              command.size = 8;                              command.parameters = new byte[8];                              command.parameters[0] = br.ReadByte();                              command.parameters[1] = br.ReadByte();                              command.parameters[2] = br.ReadByte();                              command.parameters[3] = br.ReadByte();                              command.parameters[4] = br.ReadByte();                              command.parameters[5] = br.ReadByte();                              command.parameters[6] = br.ReadByte();                              command.parameters[7] = br.ReadByte();                              break;                          case 0x0B:                              command.size = 0;   // Begin Polygon/Material pairing                              break;                          case 0x24:                              command.size = 3;                              command.parameters = new byte[3];                              command.parameters[0] = br.ReadByte();  // Material ID                              command.parameters[1] = br.ReadByte();  // 0x05                              command.parameters[2] = br.ReadByte();  // Polygon ID                              break;                          case 0x26:                              command.size = 4;                              command.parameters = new byte[4];                              command.parameters[0] = br.ReadByte();  // Object ID                              command.parameters[1] = br.ReadByte();  // Parent ID                              command.parameters[2] = br.ReadByte();  // Dummy 0                              command.parameters[3] = br.ReadByte();  // Stack ID                              break;                          case 0x2B:                              command.size = 0;   // End Polygon/Material Pairing                              break;                          case 0x44:                              command.size = 3;                              command.parameters = new byte[3];                              command.parameters[0] = br.ReadByte();  // Material ID                              command.parameters[1] = br.ReadByte();  // 0x05                              command.parameters[2] = br.ReadByte();  // Polygon ID                              break;                          case 0x46:                              command.size = 4;                              command.parameters = new byte[4];                              command.parameters[0] = br.ReadByte();  // Object ID                              command.parameters[1] = br.ReadByte();  // Parent ID                              command.parameters[2] = br.ReadByte();  // Dummy 0                              command.parameters[3] = br.ReadByte();  // Restore ID                              break;                          case 0x66:                              command.size = 5;                              command.parameters = new byte[5];                              command.parameters[0] = br.ReadByte();  // Object ID                              command.parameters[1] = br.ReadByte();  // Parent ID                              command.parameters[2] = br.ReadByte();  // Dummy 0                              command.parameters[3] = br.ReadByte();  // Stack ID                              command.parameters[4] = br.ReadByte();  // Restore ID                              break;                      }
Magic Number,_3DModels,BMD0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BMD0.cs,Read,The following statement contains a magic number: switch (cmd)                      {                          case 0x00:  // Padding                              command.size = 0;                              break;                          case 0x01:  // End of bones                              command.size = 0;                              break;                          case 0x02:                              command.size = 2;                              command.parameters = new byte[2];                              command.parameters[0] = br.ReadByte();  // Node ID                              command.parameters[1] = br.ReadByte();  // Visibility                              break;                          case 0x03:                              command.size = 1;                              command.parameters = new byte[1];                              command.parameters[0] = br.ReadByte();  // Set Polygon Stack ID?                              break;                          case 0x04:                              command.size = 3;                              command.parameters = new byte[3];                              command.parameters[0] = br.ReadByte();  // Material ID                              command.parameters[1] = br.ReadByte();  // 0x05                              command.parameters[2] = br.ReadByte();  // Polygon ID                              break;                          case 0x05:                              command.size = 1;                              command.parameters = new byte[1];                              command.parameters[0] = br.ReadByte();                              break;                          case 0x06:                              command.size = 3;                              command.parameters = new byte[3];                              command.parameters[0] = br.ReadByte();  // Object ID                              command.parameters[1] = br.ReadByte();  // Parent ID                              command.parameters[2] = br.ReadByte();  // Dummy 0                              break;                          case 0x07:                              command.size = 1;                              command.parameters = new byte[1];                              command.parameters[0] = br.ReadByte();                              break;                          case 0x08:                              command.size = 1;                              command.parameters = new byte[1];                              command.parameters[0] = br.ReadByte();                              break;                          case 0x09:                              command.size = 8;                              command.parameters = new byte[8];                              command.parameters[0] = br.ReadByte();                              command.parameters[1] = br.ReadByte();                              command.parameters[2] = br.ReadByte();                              command.parameters[3] = br.ReadByte();                              command.parameters[4] = br.ReadByte();                              command.parameters[5] = br.ReadByte();                              command.parameters[6] = br.ReadByte();                              command.parameters[7] = br.ReadByte();                              break;                          case 0x0B:                              command.size = 0;   // Begin Polygon/Material pairing                              break;                          case 0x24:                              command.size = 3;                              command.parameters = new byte[3];                              command.parameters[0] = br.ReadByte();  // Material ID                              command.parameters[1] = br.ReadByte();  // 0x05                              command.parameters[2] = br.ReadByte();  // Polygon ID                              break;                          case 0x26:                              command.size = 4;                              command.parameters = new byte[4];                              command.parameters[0] = br.ReadByte();  // Object ID                              command.parameters[1] = br.ReadByte();  // Parent ID                              command.parameters[2] = br.ReadByte();  // Dummy 0                              command.parameters[3] = br.ReadByte();  // Stack ID                              break;                          case 0x2B:                              command.size = 0;   // End Polygon/Material Pairing                              break;                          case 0x44:                              command.size = 3;                              command.parameters = new byte[3];                              command.parameters[0] = br.ReadByte();  // Material ID                              command.parameters[1] = br.ReadByte();  // 0x05                              command.parameters[2] = br.ReadByte();  // Polygon ID                              break;                          case 0x46:                              command.size = 4;                              command.parameters = new byte[4];                              command.parameters[0] = br.ReadByte();  // Object ID                              command.parameters[1] = br.ReadByte();  // Parent ID                              command.parameters[2] = br.ReadByte();  // Dummy 0                              command.parameters[3] = br.ReadByte();  // Restore ID                              break;                          case 0x66:                              command.size = 5;                              command.parameters = new byte[5];                              command.parameters[0] = br.ReadByte();  // Object ID                              command.parameters[1] = br.ReadByte();  // Parent ID                              command.parameters[2] = br.ReadByte();  // Dummy 0                              command.parameters[3] = br.ReadByte();  // Stack ID                              command.parameters[4] = br.ReadByte();  // Restore ID                              break;                      }
Magic Number,_3DModels,BMD0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BMD0.cs,Read,The following statement contains a magic number: switch (cmd)                      {                          case 0x00:  // Padding                              command.size = 0;                              break;                          case 0x01:  // End of bones                              command.size = 0;                              break;                          case 0x02:                              command.size = 2;                              command.parameters = new byte[2];                              command.parameters[0] = br.ReadByte();  // Node ID                              command.parameters[1] = br.ReadByte();  // Visibility                              break;                          case 0x03:                              command.size = 1;                              command.parameters = new byte[1];                              command.parameters[0] = br.ReadByte();  // Set Polygon Stack ID?                              break;                          case 0x04:                              command.size = 3;                              command.parameters = new byte[3];                              command.parameters[0] = br.ReadByte();  // Material ID                              command.parameters[1] = br.ReadByte();  // 0x05                              command.parameters[2] = br.ReadByte();  // Polygon ID                              break;                          case 0x05:                              command.size = 1;                              command.parameters = new byte[1];                              command.parameters[0] = br.ReadByte();                              break;                          case 0x06:                              command.size = 3;                              command.parameters = new byte[3];                              command.parameters[0] = br.ReadByte();  // Object ID                              command.parameters[1] = br.ReadByte();  // Parent ID                              command.parameters[2] = br.ReadByte();  // Dummy 0                              break;                          case 0x07:                              command.size = 1;                              command.parameters = new byte[1];                              command.parameters[0] = br.ReadByte();                              break;                          case 0x08:                              command.size = 1;                              command.parameters = new byte[1];                              command.parameters[0] = br.ReadByte();                              break;                          case 0x09:                              command.size = 8;                              command.parameters = new byte[8];                              command.parameters[0] = br.ReadByte();                              command.parameters[1] = br.ReadByte();                              command.parameters[2] = br.ReadByte();                              command.parameters[3] = br.ReadByte();                              command.parameters[4] = br.ReadByte();                              command.parameters[5] = br.ReadByte();                              command.parameters[6] = br.ReadByte();                              command.parameters[7] = br.ReadByte();                              break;                          case 0x0B:                              command.size = 0;   // Begin Polygon/Material pairing                              break;                          case 0x24:                              command.size = 3;                              command.parameters = new byte[3];                              command.parameters[0] = br.ReadByte();  // Material ID                              command.parameters[1] = br.ReadByte();  // 0x05                              command.parameters[2] = br.ReadByte();  // Polygon ID                              break;                          case 0x26:                              command.size = 4;                              command.parameters = new byte[4];                              command.parameters[0] = br.ReadByte();  // Object ID                              command.parameters[1] = br.ReadByte();  // Parent ID                              command.parameters[2] = br.ReadByte();  // Dummy 0                              command.parameters[3] = br.ReadByte();  // Stack ID                              break;                          case 0x2B:                              command.size = 0;   // End Polygon/Material Pairing                              break;                          case 0x44:                              command.size = 3;                              command.parameters = new byte[3];                              command.parameters[0] = br.ReadByte();  // Material ID                              command.parameters[1] = br.ReadByte();  // 0x05                              command.parameters[2] = br.ReadByte();  // Polygon ID                              break;                          case 0x46:                              command.size = 4;                              command.parameters = new byte[4];                              command.parameters[0] = br.ReadByte();  // Object ID                              command.parameters[1] = br.ReadByte();  // Parent ID                              command.parameters[2] = br.ReadByte();  // Dummy 0                              command.parameters[3] = br.ReadByte();  // Restore ID                              break;                          case 0x66:                              command.size = 5;                              command.parameters = new byte[5];                              command.parameters[0] = br.ReadByte();  // Object ID                              command.parameters[1] = br.ReadByte();  // Parent ID                              command.parameters[2] = br.ReadByte();  // Dummy 0                              command.parameters[3] = br.ReadByte();  // Stack ID                              command.parameters[4] = br.ReadByte();  // Restore ID                              break;                      }
Magic Number,_3DModels,BMD0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BMD0.cs,Read,The following statement contains a magic number: switch (cmd)                      {                          case 0x00:  // Padding                              command.size = 0;                              break;                          case 0x01:  // End of bones                              command.size = 0;                              break;                          case 0x02:                              command.size = 2;                              command.parameters = new byte[2];                              command.parameters[0] = br.ReadByte();  // Node ID                              command.parameters[1] = br.ReadByte();  // Visibility                              break;                          case 0x03:                              command.size = 1;                              command.parameters = new byte[1];                              command.parameters[0] = br.ReadByte();  // Set Polygon Stack ID?                              break;                          case 0x04:                              command.size = 3;                              command.parameters = new byte[3];                              command.parameters[0] = br.ReadByte();  // Material ID                              command.parameters[1] = br.ReadByte();  // 0x05                              command.parameters[2] = br.ReadByte();  // Polygon ID                              break;                          case 0x05:                              command.size = 1;                              command.parameters = new byte[1];                              command.parameters[0] = br.ReadByte();                              break;                          case 0x06:                              command.size = 3;                              command.parameters = new byte[3];                              command.parameters[0] = br.ReadByte();  // Object ID                              command.parameters[1] = br.ReadByte();  // Parent ID                              command.parameters[2] = br.ReadByte();  // Dummy 0                              break;                          case 0x07:                              command.size = 1;                              command.parameters = new byte[1];                              command.parameters[0] = br.ReadByte();                              break;                          case 0x08:                              command.size = 1;                              command.parameters = new byte[1];                              command.parameters[0] = br.ReadByte();                              break;                          case 0x09:                              command.size = 8;                              command.parameters = new byte[8];                              command.parameters[0] = br.ReadByte();                              command.parameters[1] = br.ReadByte();                              command.parameters[2] = br.ReadByte();                              command.parameters[3] = br.ReadByte();                              command.parameters[4] = br.ReadByte();                              command.parameters[5] = br.ReadByte();                              command.parameters[6] = br.ReadByte();                              command.parameters[7] = br.ReadByte();                              break;                          case 0x0B:                              command.size = 0;   // Begin Polygon/Material pairing                              break;                          case 0x24:                              command.size = 3;                              command.parameters = new byte[3];                              command.parameters[0] = br.ReadByte();  // Material ID                              command.parameters[1] = br.ReadByte();  // 0x05                              command.parameters[2] = br.ReadByte();  // Polygon ID                              break;                          case 0x26:                              command.size = 4;                              command.parameters = new byte[4];                              command.parameters[0] = br.ReadByte();  // Object ID                              command.parameters[1] = br.ReadByte();  // Parent ID                              command.parameters[2] = br.ReadByte();  // Dummy 0                              command.parameters[3] = br.ReadByte();  // Stack ID                              break;                          case 0x2B:                              command.size = 0;   // End Polygon/Material Pairing                              break;                          case 0x44:                              command.size = 3;                              command.parameters = new byte[3];                              command.parameters[0] = br.ReadByte();  // Material ID                              command.parameters[1] = br.ReadByte();  // 0x05                              command.parameters[2] = br.ReadByte();  // Polygon ID                              break;                          case 0x46:                              command.size = 4;                              command.parameters = new byte[4];                              command.parameters[0] = br.ReadByte();  // Object ID                              command.parameters[1] = br.ReadByte();  // Parent ID                              command.parameters[2] = br.ReadByte();  // Dummy 0                              command.parameters[3] = br.ReadByte();  // Restore ID                              break;                          case 0x66:                              command.size = 5;                              command.parameters = new byte[5];                              command.parameters[0] = br.ReadByte();  // Object ID                              command.parameters[1] = br.ReadByte();  // Parent ID                              command.parameters[2] = br.ReadByte();  // Dummy 0                              command.parameters[3] = br.ReadByte();  // Stack ID                              command.parameters[4] = br.ReadByte();  // Restore ID                              break;                      }
Magic Number,_3DModels,BMD0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BMD0.cs,Read,The following statement contains a magic number: switch (cmd)                      {                          case 0x00:  // Padding                              command.size = 0;                              break;                          case 0x01:  // End of bones                              command.size = 0;                              break;                          case 0x02:                              command.size = 2;                              command.parameters = new byte[2];                              command.parameters[0] = br.ReadByte();  // Node ID                              command.parameters[1] = br.ReadByte();  // Visibility                              break;                          case 0x03:                              command.size = 1;                              command.parameters = new byte[1];                              command.parameters[0] = br.ReadByte();  // Set Polygon Stack ID?                              break;                          case 0x04:                              command.size = 3;                              command.parameters = new byte[3];                              command.parameters[0] = br.ReadByte();  // Material ID                              command.parameters[1] = br.ReadByte();  // 0x05                              command.parameters[2] = br.ReadByte();  // Polygon ID                              break;                          case 0x05:                              command.size = 1;                              command.parameters = new byte[1];                              command.parameters[0] = br.ReadByte();                              break;                          case 0x06:                              command.size = 3;                              command.parameters = new byte[3];                              command.parameters[0] = br.ReadByte();  // Object ID                              command.parameters[1] = br.ReadByte();  // Parent ID                              command.parameters[2] = br.ReadByte();  // Dummy 0                              break;                          case 0x07:                              command.size = 1;                              command.parameters = new byte[1];                              command.parameters[0] = br.ReadByte();                              break;                          case 0x08:                              command.size = 1;                              command.parameters = new byte[1];                              command.parameters[0] = br.ReadByte();                              break;                          case 0x09:                              command.size = 8;                              command.parameters = new byte[8];                              command.parameters[0] = br.ReadByte();                              command.parameters[1] = br.ReadByte();                              command.parameters[2] = br.ReadByte();                              command.parameters[3] = br.ReadByte();                              command.parameters[4] = br.ReadByte();                              command.parameters[5] = br.ReadByte();                              command.parameters[6] = br.ReadByte();                              command.parameters[7] = br.ReadByte();                              break;                          case 0x0B:                              command.size = 0;   // Begin Polygon/Material pairing                              break;                          case 0x24:                              command.size = 3;                              command.parameters = new byte[3];                              command.parameters[0] = br.ReadByte();  // Material ID                              command.parameters[1] = br.ReadByte();  // 0x05                              command.parameters[2] = br.ReadByte();  // Polygon ID                              break;                          case 0x26:                              command.size = 4;                              command.parameters = new byte[4];                              command.parameters[0] = br.ReadByte();  // Object ID                              command.parameters[1] = br.ReadByte();  // Parent ID                              command.parameters[2] = br.ReadByte();  // Dummy 0                              command.parameters[3] = br.ReadByte();  // Stack ID                              break;                          case 0x2B:                              command.size = 0;   // End Polygon/Material Pairing                              break;                          case 0x44:                              command.size = 3;                              command.parameters = new byte[3];                              command.parameters[0] = br.ReadByte();  // Material ID                              command.parameters[1] = br.ReadByte();  // 0x05                              command.parameters[2] = br.ReadByte();  // Polygon ID                              break;                          case 0x46:                              command.size = 4;                              command.parameters = new byte[4];                              command.parameters[0] = br.ReadByte();  // Object ID                              command.parameters[1] = br.ReadByte();  // Parent ID                              command.parameters[2] = br.ReadByte();  // Dummy 0                              command.parameters[3] = br.ReadByte();  // Restore ID                              break;                          case 0x66:                              command.size = 5;                              command.parameters = new byte[5];                              command.parameters[0] = br.ReadByte();  // Object ID                              command.parameters[1] = br.ReadByte();  // Parent ID                              command.parameters[2] = br.ReadByte();  // Dummy 0                              command.parameters[3] = br.ReadByte();  // Stack ID                              command.parameters[4] = br.ReadByte();  // Restore ID                              break;                      }
Magic Number,_3DModels,BMD0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BMD0.cs,Read,The following statement contains a magic number: switch (cmd)                      {                          case 0x00:  // Padding                              command.size = 0;                              break;                          case 0x01:  // End of bones                              command.size = 0;                              break;                          case 0x02:                              command.size = 2;                              command.parameters = new byte[2];                              command.parameters[0] = br.ReadByte();  // Node ID                              command.parameters[1] = br.ReadByte();  // Visibility                              break;                          case 0x03:                              command.size = 1;                              command.parameters = new byte[1];                              command.parameters[0] = br.ReadByte();  // Set Polygon Stack ID?                              break;                          case 0x04:                              command.size = 3;                              command.parameters = new byte[3];                              command.parameters[0] = br.ReadByte();  // Material ID                              command.parameters[1] = br.ReadByte();  // 0x05                              command.parameters[2] = br.ReadByte();  // Polygon ID                              break;                          case 0x05:                              command.size = 1;                              command.parameters = new byte[1];                              command.parameters[0] = br.ReadByte();                              break;                          case 0x06:                              command.size = 3;                              command.parameters = new byte[3];                              command.parameters[0] = br.ReadByte();  // Object ID                              command.parameters[1] = br.ReadByte();  // Parent ID                              command.parameters[2] = br.ReadByte();  // Dummy 0                              break;                          case 0x07:                              command.size = 1;                              command.parameters = new byte[1];                              command.parameters[0] = br.ReadByte();                              break;                          case 0x08:                              command.size = 1;                              command.parameters = new byte[1];                              command.parameters[0] = br.ReadByte();                              break;                          case 0x09:                              command.size = 8;                              command.parameters = new byte[8];                              command.parameters[0] = br.ReadByte();                              command.parameters[1] = br.ReadByte();                              command.parameters[2] = br.ReadByte();                              command.parameters[3] = br.ReadByte();                              command.parameters[4] = br.ReadByte();                              command.parameters[5] = br.ReadByte();                              command.parameters[6] = br.ReadByte();                              command.parameters[7] = br.ReadByte();                              break;                          case 0x0B:                              command.size = 0;   // Begin Polygon/Material pairing                              break;                          case 0x24:                              command.size = 3;                              command.parameters = new byte[3];                              command.parameters[0] = br.ReadByte();  // Material ID                              command.parameters[1] = br.ReadByte();  // 0x05                              command.parameters[2] = br.ReadByte();  // Polygon ID                              break;                          case 0x26:                              command.size = 4;                              command.parameters = new byte[4];                              command.parameters[0] = br.ReadByte();  // Object ID                              command.parameters[1] = br.ReadByte();  // Parent ID                              command.parameters[2] = br.ReadByte();  // Dummy 0                              command.parameters[3] = br.ReadByte();  // Stack ID                              break;                          case 0x2B:                              command.size = 0;   // End Polygon/Material Pairing                              break;                          case 0x44:                              command.size = 3;                              command.parameters = new byte[3];                              command.parameters[0] = br.ReadByte();  // Material ID                              command.parameters[1] = br.ReadByte();  // 0x05                              command.parameters[2] = br.ReadByte();  // Polygon ID                              break;                          case 0x46:                              command.size = 4;                              command.parameters = new byte[4];                              command.parameters[0] = br.ReadByte();  // Object ID                              command.parameters[1] = br.ReadByte();  // Parent ID                              command.parameters[2] = br.ReadByte();  // Dummy 0                              command.parameters[3] = br.ReadByte();  // Restore ID                              break;                          case 0x66:                              command.size = 5;                              command.parameters = new byte[5];                              command.parameters[0] = br.ReadByte();  // Object ID                              command.parameters[1] = br.ReadByte();  // Parent ID                              command.parameters[2] = br.ReadByte();  // Dummy 0                              command.parameters[3] = br.ReadByte();  // Stack ID                              command.parameters[4] = br.ReadByte();  // Restore ID                              break;                      }
Magic Number,_3DModels,BMD0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BMD0.cs,Read,The following statement contains a magic number: br.BaseStream.Position += 4 + 18;
Magic Number,_3DModels,BMD0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BMD0.cs,Read,The following statement contains a magic number: br.BaseStream.Position += 4 + 18;
Magic Number,_3DModels,BMD0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BMD0.cs,Read,The following statement contains a magic number: byte[] cmdID = new byte[] { display_list[l]' display_list[l + 1]' display_list[l + 2]' display_list[l + 3] };
Magic Number,_3DModels,BMD0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BMD0.cs,Read,The following statement contains a magic number: byte[] cmdID = new byte[] { display_list[l]' display_list[l + 1]' display_list[l + 2]' display_list[l + 3] };
Magic Number,_3DModels,BMD0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BMD0.cs,Read,The following statement contains a magic number: l += 4;
Magic Number,_3DModels,BMD0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BMD0.cs,Read,The following statement contains a magic number: Command[] commands = new Command[4];
Magic Number,_3DModels,BMD0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BMD0.cs,Read,The following statement contains a magic number: p < cmd_size && l + 4 < display_list.Length
Magic Number,_3DModels,BMD0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BMD0.cs,Read,The following statement contains a magic number: c < 4
Magic Number,_3DModels,BMD0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BMD0.cs,Read,The following statement contains a magic number: l + 4 < display_list.Length
Magic Number,_3DModels,BMD0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BMD0.cs,Read,The following statement contains a magic number: bmd.header.numSect == 2
Magic Number,_3DModels,BMD0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BMD0.cs,Get_SignedFixedPoint,The following statement contains a magic number: double point = ((value >> 12) & 7);
Magic Number,_3DModels,BMD0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BMD0.cs,Get_SignedFixedPoint,The following statement contains a magic number: double point = ((value >> 12) & 7);
Magic Number,_3DModels,BMD0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BMD0.cs,Get_SignedFixedPoint,The following statement contains a magic number: (value >> 15) == 1
Magic Number,_3DModels,BMD0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BMD0.cs,Get_Double,The following statement contains a magic number: integerMask = (int)Math.Pow(2' integer + 1) - 1;
Magic Number,_3DModels,BMD0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BMD0.cs,Get_Double,The following statement contains a magic number: point = intPart - (int)Math.Pow(2' integer + 1);
Magic Number,_3DModels,BMD0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BMD0.cs,Get_Double,The following statement contains a magic number: int fractionalMask = (int)Math.Pow(2' fractional) - 1;
Magic Number,_3DModels,BMD0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BMD0.cs,Get_CommandSize,The following statement contains a magic number: switch (cmd)              {                  case 0: return 0;                    case 0x10: return 1;                  case 0x11: return 0;                  case 0x12: return 1;                  case 0x13: return 1;                  case 0x14: return 1;                  case 0x15: return 0;                  case 0x16: return 16;                  case 0x17: return 12;                  case 0x18: return 16;                  case 0x19: return 12;                  case 0x1A: return 9;                  case 0x1B: return 3;                  case 0x1C: return 3;                    case 0x20: return 1;                  case 0x21: return 1;                  case 0x22: return 1;                  case 0x23: return 2;                  case 0x24: return 1;                  case 0x25: return 1;                  case 0x26: return 1;                  case 0x27: return 1;                  case 0x28: return 1;                    case 0x29: return 1;                  case 0x2A: return 1;                  case 0x2B: return 1;                    case 0x30: return 1;                  case 0x31: return 1;                  case 0x32: return 1;                  case 0x33: return 1;                  case 0x34: return 32;                    case 0x40: return 1;                  case 0x41: return 0;                    case 0x50: return 1;                    case 0x60: return 1;                    case 0x70: return 3;                  case 0x71: return 2;                  case 0x72: return 1;                    default:                      return 0;              }
Magic Number,_3DModels,BMD0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BMD0.cs,Get_CommandSize,The following statement contains a magic number: switch (cmd)              {                  case 0: return 0;                    case 0x10: return 1;                  case 0x11: return 0;                  case 0x12: return 1;                  case 0x13: return 1;                  case 0x14: return 1;                  case 0x15: return 0;                  case 0x16: return 16;                  case 0x17: return 12;                  case 0x18: return 16;                  case 0x19: return 12;                  case 0x1A: return 9;                  case 0x1B: return 3;                  case 0x1C: return 3;                    case 0x20: return 1;                  case 0x21: return 1;                  case 0x22: return 1;                  case 0x23: return 2;                  case 0x24: return 1;                  case 0x25: return 1;                  case 0x26: return 1;                  case 0x27: return 1;                  case 0x28: return 1;                    case 0x29: return 1;                  case 0x2A: return 1;                  case 0x2B: return 1;                    case 0x30: return 1;                  case 0x31: return 1;                  case 0x32: return 1;                  case 0x33: return 1;                  case 0x34: return 32;                    case 0x40: return 1;                  case 0x41: return 0;                    case 0x50: return 1;                    case 0x60: return 1;                    case 0x70: return 3;                  case 0x71: return 2;                  case 0x72: return 1;                    default:                      return 0;              }
Magic Number,_3DModels,BMD0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BMD0.cs,Get_CommandSize,The following statement contains a magic number: switch (cmd)              {                  case 0: return 0;                    case 0x10: return 1;                  case 0x11: return 0;                  case 0x12: return 1;                  case 0x13: return 1;                  case 0x14: return 1;                  case 0x15: return 0;                  case 0x16: return 16;                  case 0x17: return 12;                  case 0x18: return 16;                  case 0x19: return 12;                  case 0x1A: return 9;                  case 0x1B: return 3;                  case 0x1C: return 3;                    case 0x20: return 1;                  case 0x21: return 1;                  case 0x22: return 1;                  case 0x23: return 2;                  case 0x24: return 1;                  case 0x25: return 1;                  case 0x26: return 1;                  case 0x27: return 1;                  case 0x28: return 1;                    case 0x29: return 1;                  case 0x2A: return 1;                  case 0x2B: return 1;                    case 0x30: return 1;                  case 0x31: return 1;                  case 0x32: return 1;                  case 0x33: return 1;                  case 0x34: return 32;                    case 0x40: return 1;                  case 0x41: return 0;                    case 0x50: return 1;                    case 0x60: return 1;                    case 0x70: return 3;                  case 0x71: return 2;                  case 0x72: return 1;                    default:                      return 0;              }
Magic Number,_3DModels,BMD0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BMD0.cs,Get_CommandSize,The following statement contains a magic number: switch (cmd)              {                  case 0: return 0;                    case 0x10: return 1;                  case 0x11: return 0;                  case 0x12: return 1;                  case 0x13: return 1;                  case 0x14: return 1;                  case 0x15: return 0;                  case 0x16: return 16;                  case 0x17: return 12;                  case 0x18: return 16;                  case 0x19: return 12;                  case 0x1A: return 9;                  case 0x1B: return 3;                  case 0x1C: return 3;                    case 0x20: return 1;                  case 0x21: return 1;                  case 0x22: return 1;                  case 0x23: return 2;                  case 0x24: return 1;                  case 0x25: return 1;                  case 0x26: return 1;                  case 0x27: return 1;                  case 0x28: return 1;                    case 0x29: return 1;                  case 0x2A: return 1;                  case 0x2B: return 1;                    case 0x30: return 1;                  case 0x31: return 1;                  case 0x32: return 1;                  case 0x33: return 1;                  case 0x34: return 32;                    case 0x40: return 1;                  case 0x41: return 0;                    case 0x50: return 1;                    case 0x60: return 1;                    case 0x70: return 3;                  case 0x71: return 2;                  case 0x72: return 1;                    default:                      return 0;              }
Magic Number,_3DModels,BMD0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BMD0.cs,Get_CommandSize,The following statement contains a magic number: switch (cmd)              {                  case 0: return 0;                    case 0x10: return 1;                  case 0x11: return 0;                  case 0x12: return 1;                  case 0x13: return 1;                  case 0x14: return 1;                  case 0x15: return 0;                  case 0x16: return 16;                  case 0x17: return 12;                  case 0x18: return 16;                  case 0x19: return 12;                  case 0x1A: return 9;                  case 0x1B: return 3;                  case 0x1C: return 3;                    case 0x20: return 1;                  case 0x21: return 1;                  case 0x22: return 1;                  case 0x23: return 2;                  case 0x24: return 1;                  case 0x25: return 1;                  case 0x26: return 1;                  case 0x27: return 1;                  case 0x28: return 1;                    case 0x29: return 1;                  case 0x2A: return 1;                  case 0x2B: return 1;                    case 0x30: return 1;                  case 0x31: return 1;                  case 0x32: return 1;                  case 0x33: return 1;                  case 0x34: return 32;                    case 0x40: return 1;                  case 0x41: return 0;                    case 0x50: return 1;                    case 0x60: return 1;                    case 0x70: return 3;                  case 0x71: return 2;                  case 0x72: return 1;                    default:                      return 0;              }
Magic Number,_3DModels,BMD0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BMD0.cs,Get_CommandSize,The following statement contains a magic number: switch (cmd)              {                  case 0: return 0;                    case 0x10: return 1;                  case 0x11: return 0;                  case 0x12: return 1;                  case 0x13: return 1;                  case 0x14: return 1;                  case 0x15: return 0;                  case 0x16: return 16;                  case 0x17: return 12;                  case 0x18: return 16;                  case 0x19: return 12;                  case 0x1A: return 9;                  case 0x1B: return 3;                  case 0x1C: return 3;                    case 0x20: return 1;                  case 0x21: return 1;                  case 0x22: return 1;                  case 0x23: return 2;                  case 0x24: return 1;                  case 0x25: return 1;                  case 0x26: return 1;                  case 0x27: return 1;                  case 0x28: return 1;                    case 0x29: return 1;                  case 0x2A: return 1;                  case 0x2B: return 1;                    case 0x30: return 1;                  case 0x31: return 1;                  case 0x32: return 1;                  case 0x33: return 1;                  case 0x34: return 32;                    case 0x40: return 1;                  case 0x41: return 0;                    case 0x50: return 1;                    case 0x60: return 1;                    case 0x70: return 3;                  case 0x71: return 2;                  case 0x72: return 1;                    default:                      return 0;              }
Magic Number,_3DModels,BMD0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BMD0.cs,Get_CommandSize,The following statement contains a magic number: switch (cmd)              {                  case 0: return 0;                    case 0x10: return 1;                  case 0x11: return 0;                  case 0x12: return 1;                  case 0x13: return 1;                  case 0x14: return 1;                  case 0x15: return 0;                  case 0x16: return 16;                  case 0x17: return 12;                  case 0x18: return 16;                  case 0x19: return 12;                  case 0x1A: return 9;                  case 0x1B: return 3;                  case 0x1C: return 3;                    case 0x20: return 1;                  case 0x21: return 1;                  case 0x22: return 1;                  case 0x23: return 2;                  case 0x24: return 1;                  case 0x25: return 1;                  case 0x26: return 1;                  case 0x27: return 1;                  case 0x28: return 1;                    case 0x29: return 1;                  case 0x2A: return 1;                  case 0x2B: return 1;                    case 0x30: return 1;                  case 0x31: return 1;                  case 0x32: return 1;                  case 0x33: return 1;                  case 0x34: return 32;                    case 0x40: return 1;                  case 0x41: return 0;                    case 0x50: return 1;                    case 0x60: return 1;                    case 0x70: return 3;                  case 0x71: return 2;                  case 0x72: return 1;                    default:                      return 0;              }
Magic Number,_3DModels,BMD0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BMD0.cs,Get_CommandSize,The following statement contains a magic number: switch (cmd)              {                  case 0: return 0;                    case 0x10: return 1;                  case 0x11: return 0;                  case 0x12: return 1;                  case 0x13: return 1;                  case 0x14: return 1;                  case 0x15: return 0;                  case 0x16: return 16;                  case 0x17: return 12;                  case 0x18: return 16;                  case 0x19: return 12;                  case 0x1A: return 9;                  case 0x1B: return 3;                  case 0x1C: return 3;                    case 0x20: return 1;                  case 0x21: return 1;                  case 0x22: return 1;                  case 0x23: return 2;                  case 0x24: return 1;                  case 0x25: return 1;                  case 0x26: return 1;                  case 0x27: return 1;                  case 0x28: return 1;                    case 0x29: return 1;                  case 0x2A: return 1;                  case 0x2B: return 1;                    case 0x30: return 1;                  case 0x31: return 1;                  case 0x32: return 1;                  case 0x33: return 1;                  case 0x34: return 32;                    case 0x40: return 1;                  case 0x41: return 0;                    case 0x50: return 1;                    case 0x60: return 1;                    case 0x70: return 3;                  case 0x71: return 2;                  case 0x72: return 1;                    default:                      return 0;              }
Magic Number,_3DModels,BMD0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BMD0.cs,Get_CommandSize,The following statement contains a magic number: switch (cmd)              {                  case 0: return 0;                    case 0x10: return 1;                  case 0x11: return 0;                  case 0x12: return 1;                  case 0x13: return 1;                  case 0x14: return 1;                  case 0x15: return 0;                  case 0x16: return 16;                  case 0x17: return 12;                  case 0x18: return 16;                  case 0x19: return 12;                  case 0x1A: return 9;                  case 0x1B: return 3;                  case 0x1C: return 3;                    case 0x20: return 1;                  case 0x21: return 1;                  case 0x22: return 1;                  case 0x23: return 2;                  case 0x24: return 1;                  case 0x25: return 1;                  case 0x26: return 1;                  case 0x27: return 1;                  case 0x28: return 1;                    case 0x29: return 1;                  case 0x2A: return 1;                  case 0x2B: return 1;                    case 0x30: return 1;                  case 0x31: return 1;                  case 0x32: return 1;                  case 0x33: return 1;                  case 0x34: return 32;                    case 0x40: return 1;                  case 0x41: return 0;                    case 0x50: return 1;                    case 0x60: return 1;                    case 0x70: return 3;                  case 0x71: return 2;                  case 0x72: return 1;                    default:                      return 0;              }
Magic Number,_3DModels,BMD0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BMD0.cs,Get_CommandSize,The following statement contains a magic number: switch (cmd)              {                  case 0: return 0;                    case 0x10: return 1;                  case 0x11: return 0;                  case 0x12: return 1;                  case 0x13: return 1;                  case 0x14: return 1;                  case 0x15: return 0;                  case 0x16: return 16;                  case 0x17: return 12;                  case 0x18: return 16;                  case 0x19: return 12;                  case 0x1A: return 9;                  case 0x1B: return 3;                  case 0x1C: return 3;                    case 0x20: return 1;                  case 0x21: return 1;                  case 0x22: return 1;                  case 0x23: return 2;                  case 0x24: return 1;                  case 0x25: return 1;                  case 0x26: return 1;                  case 0x27: return 1;                  case 0x28: return 1;                    case 0x29: return 1;                  case 0x2A: return 1;                  case 0x2B: return 1;                    case 0x30: return 1;                  case 0x31: return 1;                  case 0x32: return 1;                  case 0x33: return 1;                  case 0x34: return 32;                    case 0x40: return 1;                  case 0x41: return 0;                    case 0x50: return 1;                    case 0x60: return 1;                    case 0x70: return 3;                  case 0x71: return 2;                  case 0x72: return 1;                    default:                      return 0;              }
Magic Number,_3DModels,BMD0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BMD0.cs,Get_CommandSize,The following statement contains a magic number: switch (cmd)              {                  case 0: return 0;                    case 0x10: return 1;                  case 0x11: return 0;                  case 0x12: return 1;                  case 0x13: return 1;                  case 0x14: return 1;                  case 0x15: return 0;                  case 0x16: return 16;                  case 0x17: return 12;                  case 0x18: return 16;                  case 0x19: return 12;                  case 0x1A: return 9;                  case 0x1B: return 3;                  case 0x1C: return 3;                    case 0x20: return 1;                  case 0x21: return 1;                  case 0x22: return 1;                  case 0x23: return 2;                  case 0x24: return 1;                  case 0x25: return 1;                  case 0x26: return 1;                  case 0x27: return 1;                  case 0x28: return 1;                    case 0x29: return 1;                  case 0x2A: return 1;                  case 0x2B: return 1;                    case 0x30: return 1;                  case 0x31: return 1;                  case 0x32: return 1;                  case 0x33: return 1;                  case 0x34: return 32;                    case 0x40: return 1;                  case 0x41: return 0;                    case 0x50: return 1;                    case 0x60: return 1;                    case 0x70: return 3;                  case 0x71: return 2;                  case 0x72: return 1;                    default:                      return 0;              }
Magic Number,_3DModels,BMD0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BMD0.cs,GeometryCommands,The following statement contains a magic number: switch ((GeometryCmd)geoCmd[i].cmd)                  {                      case GeometryCmd.NOP:                          break;                      case GeometryCmd.MTX_MODE:                          break;                      case GeometryCmd.MTX_PUSH:                          break;                      case GeometryCmd.MTX_POP:                          break;                      case GeometryCmd.MTX_STORE:                          break;                      case GeometryCmd.MTX_RESTORE:                          break;                      case GeometryCmd.MTX_IDENTITY:                          break;                      case GeometryCmd.MTX_LOAD_4x4:                          break;                      case GeometryCmd.MTX_LOAD_4x3:                          break;                      case GeometryCmd.MTX_MULT_4x4:                          break;                      case GeometryCmd.MTX_MULT_4x3:                          break;                      case GeometryCmd.MTX_MULT_3x3:                          break;                      case GeometryCmd.MTX_SCALE:                          break;                      case GeometryCmd.MTX_TRANS:                          break;                        #region Vertex commands                      // Multiply by the clipmatrix                      case GeometryCmd.VTX_16:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Y = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[1] & 0xFFFF)' true' 3' 12);                            GL.Vertex3(vector);                          break;                        case GeometryCmd.VTX_10:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0x3FF)' true' 3' 6);                          vector.Y = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FF)' true' 3' 6);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 3' 6);                            GL.Vertex3(vector);                          break;                        case GeometryCmd.VTX_XY:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Y = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_XZ:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_YZ:                          vector.Y = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_DIFF:                          float diffX' diffY' diffZ;                            diffX = Get_Double((int)(geoCmd[i].param[0] & 0x3FF)' true' 0' 9);                          diffY = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FFF)' true' 0' 9);                          diffZ = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 0' 9);                            vector.X += (diffX / 8);                          vector.Y += (diffY / 8);                          vector.Z += (diffZ / 8);                            GL.Vertex3(vector);                          break;                      #endregion                        case GeometryCmd.COLOR:                          // Convert the param to RGB555 color                          int r = (int)(geoCmd[i].param[0] & 0x1F);                          int g = (int)((geoCmd[i].param[0] >> 5) & 0x1F);                          int b = (int)((geoCmd[i].param[0] >> 10) & 0x1F);                            GL.Color3((float)r / 31.0f' (float)g / 31.0f' (float)b / 31.0f);                          break;                      case GeometryCmd.POLYGON_ATTR:                          break;                        #region Texture attributes                      case GeometryCmd.TEXCOORD:                          double s' t;                          s = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 11' 4);                          t = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 11' 4);                          GL.TexCoord2(s' t);                          break;                        case GeometryCmd.TEXIMAGE_PARAM:                          break;                      case GeometryCmd.PLTT_BASE:                          break;                      #endregion                        case GeometryCmd.DIF_AMB:                          break;                      case GeometryCmd.SPE_EMI:                          break;                      case GeometryCmd.LIGHT_VECTOR:                          break;                      case GeometryCmd.LIGHT_COLOR:                          break;                      case GeometryCmd.SHININESS:                          break;                        case GeometryCmd.NORMAL:                          float x' y' z;                          x = Get_Double((int)(geoCmd[i].param[0] & 0x3FFF)' true' 0' 9);                          y = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FFF)' true' 0' 9);                          z = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 0' 9);                            // Multiplay by the directional matrix                          GL.Normal3(x' y' z);                          break;                        case GeometryCmd.BEGIN_VTXS:                          if (geoCmd[i].param[0] == 0)                              GL.Begin(BeginMode.Triangles);                          else if (geoCmd[i].param[0] == 1)                              GL.Begin(BeginMode.Quads);                          else if (geoCmd[i].param[0] == 2)                              GL.Begin(BeginMode.TriangleStrip);                          else if (geoCmd[i].param[0] == 3)                              GL.Begin(BeginMode.QuadStrip);                          break;                      case GeometryCmd.END_VTXS:                          GL.End();                          break;                        case GeometryCmd.SWAP_BUFFERS:                          break;                      case GeometryCmd.VIEWPORT:                          break;                      case GeometryCmd.BOX_TEST:                          break;                      case GeometryCmd.POS_TEST:                          break;                      case GeometryCmd.VEC_TEST:                          break;                      default:                          break;                  }
Magic Number,_3DModels,BMD0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BMD0.cs,GeometryCommands,The following statement contains a magic number: switch ((GeometryCmd)geoCmd[i].cmd)                  {                      case GeometryCmd.NOP:                          break;                      case GeometryCmd.MTX_MODE:                          break;                      case GeometryCmd.MTX_PUSH:                          break;                      case GeometryCmd.MTX_POP:                          break;                      case GeometryCmd.MTX_STORE:                          break;                      case GeometryCmd.MTX_RESTORE:                          break;                      case GeometryCmd.MTX_IDENTITY:                          break;                      case GeometryCmd.MTX_LOAD_4x4:                          break;                      case GeometryCmd.MTX_LOAD_4x3:                          break;                      case GeometryCmd.MTX_MULT_4x4:                          break;                      case GeometryCmd.MTX_MULT_4x3:                          break;                      case GeometryCmd.MTX_MULT_3x3:                          break;                      case GeometryCmd.MTX_SCALE:                          break;                      case GeometryCmd.MTX_TRANS:                          break;                        #region Vertex commands                      // Multiply by the clipmatrix                      case GeometryCmd.VTX_16:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Y = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[1] & 0xFFFF)' true' 3' 12);                            GL.Vertex3(vector);                          break;                        case GeometryCmd.VTX_10:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0x3FF)' true' 3' 6);                          vector.Y = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FF)' true' 3' 6);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 3' 6);                            GL.Vertex3(vector);                          break;                        case GeometryCmd.VTX_XY:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Y = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_XZ:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_YZ:                          vector.Y = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_DIFF:                          float diffX' diffY' diffZ;                            diffX = Get_Double((int)(geoCmd[i].param[0] & 0x3FF)' true' 0' 9);                          diffY = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FFF)' true' 0' 9);                          diffZ = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 0' 9);                            vector.X += (diffX / 8);                          vector.Y += (diffY / 8);                          vector.Z += (diffZ / 8);                            GL.Vertex3(vector);                          break;                      #endregion                        case GeometryCmd.COLOR:                          // Convert the param to RGB555 color                          int r = (int)(geoCmd[i].param[0] & 0x1F);                          int g = (int)((geoCmd[i].param[0] >> 5) & 0x1F);                          int b = (int)((geoCmd[i].param[0] >> 10) & 0x1F);                            GL.Color3((float)r / 31.0f' (float)g / 31.0f' (float)b / 31.0f);                          break;                      case GeometryCmd.POLYGON_ATTR:                          break;                        #region Texture attributes                      case GeometryCmd.TEXCOORD:                          double s' t;                          s = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 11' 4);                          t = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 11' 4);                          GL.TexCoord2(s' t);                          break;                        case GeometryCmd.TEXIMAGE_PARAM:                          break;                      case GeometryCmd.PLTT_BASE:                          break;                      #endregion                        case GeometryCmd.DIF_AMB:                          break;                      case GeometryCmd.SPE_EMI:                          break;                      case GeometryCmd.LIGHT_VECTOR:                          break;                      case GeometryCmd.LIGHT_COLOR:                          break;                      case GeometryCmd.SHININESS:                          break;                        case GeometryCmd.NORMAL:                          float x' y' z;                          x = Get_Double((int)(geoCmd[i].param[0] & 0x3FFF)' true' 0' 9);                          y = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FFF)' true' 0' 9);                          z = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 0' 9);                            // Multiplay by the directional matrix                          GL.Normal3(x' y' z);                          break;                        case GeometryCmd.BEGIN_VTXS:                          if (geoCmd[i].param[0] == 0)                              GL.Begin(BeginMode.Triangles);                          else if (geoCmd[i].param[0] == 1)                              GL.Begin(BeginMode.Quads);                          else if (geoCmd[i].param[0] == 2)                              GL.Begin(BeginMode.TriangleStrip);                          else if (geoCmd[i].param[0] == 3)                              GL.Begin(BeginMode.QuadStrip);                          break;                      case GeometryCmd.END_VTXS:                          GL.End();                          break;                        case GeometryCmd.SWAP_BUFFERS:                          break;                      case GeometryCmd.VIEWPORT:                          break;                      case GeometryCmd.BOX_TEST:                          break;                      case GeometryCmd.POS_TEST:                          break;                      case GeometryCmd.VEC_TEST:                          break;                      default:                          break;                  }
Magic Number,_3DModels,BMD0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BMD0.cs,GeometryCommands,The following statement contains a magic number: switch ((GeometryCmd)geoCmd[i].cmd)                  {                      case GeometryCmd.NOP:                          break;                      case GeometryCmd.MTX_MODE:                          break;                      case GeometryCmd.MTX_PUSH:                          break;                      case GeometryCmd.MTX_POP:                          break;                      case GeometryCmd.MTX_STORE:                          break;                      case GeometryCmd.MTX_RESTORE:                          break;                      case GeometryCmd.MTX_IDENTITY:                          break;                      case GeometryCmd.MTX_LOAD_4x4:                          break;                      case GeometryCmd.MTX_LOAD_4x3:                          break;                      case GeometryCmd.MTX_MULT_4x4:                          break;                      case GeometryCmd.MTX_MULT_4x3:                          break;                      case GeometryCmd.MTX_MULT_3x3:                          break;                      case GeometryCmd.MTX_SCALE:                          break;                      case GeometryCmd.MTX_TRANS:                          break;                        #region Vertex commands                      // Multiply by the clipmatrix                      case GeometryCmd.VTX_16:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Y = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[1] & 0xFFFF)' true' 3' 12);                            GL.Vertex3(vector);                          break;                        case GeometryCmd.VTX_10:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0x3FF)' true' 3' 6);                          vector.Y = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FF)' true' 3' 6);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 3' 6);                            GL.Vertex3(vector);                          break;                        case GeometryCmd.VTX_XY:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Y = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_XZ:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_YZ:                          vector.Y = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_DIFF:                          float diffX' diffY' diffZ;                            diffX = Get_Double((int)(geoCmd[i].param[0] & 0x3FF)' true' 0' 9);                          diffY = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FFF)' true' 0' 9);                          diffZ = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 0' 9);                            vector.X += (diffX / 8);                          vector.Y += (diffY / 8);                          vector.Z += (diffZ / 8);                            GL.Vertex3(vector);                          break;                      #endregion                        case GeometryCmd.COLOR:                          // Convert the param to RGB555 color                          int r = (int)(geoCmd[i].param[0] & 0x1F);                          int g = (int)((geoCmd[i].param[0] >> 5) & 0x1F);                          int b = (int)((geoCmd[i].param[0] >> 10) & 0x1F);                            GL.Color3((float)r / 31.0f' (float)g / 31.0f' (float)b / 31.0f);                          break;                      case GeometryCmd.POLYGON_ATTR:                          break;                        #region Texture attributes                      case GeometryCmd.TEXCOORD:                          double s' t;                          s = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 11' 4);                          t = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 11' 4);                          GL.TexCoord2(s' t);                          break;                        case GeometryCmd.TEXIMAGE_PARAM:                          break;                      case GeometryCmd.PLTT_BASE:                          break;                      #endregion                        case GeometryCmd.DIF_AMB:                          break;                      case GeometryCmd.SPE_EMI:                          break;                      case GeometryCmd.LIGHT_VECTOR:                          break;                      case GeometryCmd.LIGHT_COLOR:                          break;                      case GeometryCmd.SHININESS:                          break;                        case GeometryCmd.NORMAL:                          float x' y' z;                          x = Get_Double((int)(geoCmd[i].param[0] & 0x3FFF)' true' 0' 9);                          y = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FFF)' true' 0' 9);                          z = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 0' 9);                            // Multiplay by the directional matrix                          GL.Normal3(x' y' z);                          break;                        case GeometryCmd.BEGIN_VTXS:                          if (geoCmd[i].param[0] == 0)                              GL.Begin(BeginMode.Triangles);                          else if (geoCmd[i].param[0] == 1)                              GL.Begin(BeginMode.Quads);                          else if (geoCmd[i].param[0] == 2)                              GL.Begin(BeginMode.TriangleStrip);                          else if (geoCmd[i].param[0] == 3)                              GL.Begin(BeginMode.QuadStrip);                          break;                      case GeometryCmd.END_VTXS:                          GL.End();                          break;                        case GeometryCmd.SWAP_BUFFERS:                          break;                      case GeometryCmd.VIEWPORT:                          break;                      case GeometryCmd.BOX_TEST:                          break;                      case GeometryCmd.POS_TEST:                          break;                      case GeometryCmd.VEC_TEST:                          break;                      default:                          break;                  }
Magic Number,_3DModels,BMD0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BMD0.cs,GeometryCommands,The following statement contains a magic number: switch ((GeometryCmd)geoCmd[i].cmd)                  {                      case GeometryCmd.NOP:                          break;                      case GeometryCmd.MTX_MODE:                          break;                      case GeometryCmd.MTX_PUSH:                          break;                      case GeometryCmd.MTX_POP:                          break;                      case GeometryCmd.MTX_STORE:                          break;                      case GeometryCmd.MTX_RESTORE:                          break;                      case GeometryCmd.MTX_IDENTITY:                          break;                      case GeometryCmd.MTX_LOAD_4x4:                          break;                      case GeometryCmd.MTX_LOAD_4x3:                          break;                      case GeometryCmd.MTX_MULT_4x4:                          break;                      case GeometryCmd.MTX_MULT_4x3:                          break;                      case GeometryCmd.MTX_MULT_3x3:                          break;                      case GeometryCmd.MTX_SCALE:                          break;                      case GeometryCmd.MTX_TRANS:                          break;                        #region Vertex commands                      // Multiply by the clipmatrix                      case GeometryCmd.VTX_16:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Y = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[1] & 0xFFFF)' true' 3' 12);                            GL.Vertex3(vector);                          break;                        case GeometryCmd.VTX_10:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0x3FF)' true' 3' 6);                          vector.Y = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FF)' true' 3' 6);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 3' 6);                            GL.Vertex3(vector);                          break;                        case GeometryCmd.VTX_XY:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Y = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_XZ:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_YZ:                          vector.Y = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_DIFF:                          float diffX' diffY' diffZ;                            diffX = Get_Double((int)(geoCmd[i].param[0] & 0x3FF)' true' 0' 9);                          diffY = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FFF)' true' 0' 9);                          diffZ = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 0' 9);                            vector.X += (diffX / 8);                          vector.Y += (diffY / 8);                          vector.Z += (diffZ / 8);                            GL.Vertex3(vector);                          break;                      #endregion                        case GeometryCmd.COLOR:                          // Convert the param to RGB555 color                          int r = (int)(geoCmd[i].param[0] & 0x1F);                          int g = (int)((geoCmd[i].param[0] >> 5) & 0x1F);                          int b = (int)((geoCmd[i].param[0] >> 10) & 0x1F);                            GL.Color3((float)r / 31.0f' (float)g / 31.0f' (float)b / 31.0f);                          break;                      case GeometryCmd.POLYGON_ATTR:                          break;                        #region Texture attributes                      case GeometryCmd.TEXCOORD:                          double s' t;                          s = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 11' 4);                          t = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 11' 4);                          GL.TexCoord2(s' t);                          break;                        case GeometryCmd.TEXIMAGE_PARAM:                          break;                      case GeometryCmd.PLTT_BASE:                          break;                      #endregion                        case GeometryCmd.DIF_AMB:                          break;                      case GeometryCmd.SPE_EMI:                          break;                      case GeometryCmd.LIGHT_VECTOR:                          break;                      case GeometryCmd.LIGHT_COLOR:                          break;                      case GeometryCmd.SHININESS:                          break;                        case GeometryCmd.NORMAL:                          float x' y' z;                          x = Get_Double((int)(geoCmd[i].param[0] & 0x3FFF)' true' 0' 9);                          y = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FFF)' true' 0' 9);                          z = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 0' 9);                            // Multiplay by the directional matrix                          GL.Normal3(x' y' z);                          break;                        case GeometryCmd.BEGIN_VTXS:                          if (geoCmd[i].param[0] == 0)                              GL.Begin(BeginMode.Triangles);                          else if (geoCmd[i].param[0] == 1)                              GL.Begin(BeginMode.Quads);                          else if (geoCmd[i].param[0] == 2)                              GL.Begin(BeginMode.TriangleStrip);                          else if (geoCmd[i].param[0] == 3)                              GL.Begin(BeginMode.QuadStrip);                          break;                      case GeometryCmd.END_VTXS:                          GL.End();                          break;                        case GeometryCmd.SWAP_BUFFERS:                          break;                      case GeometryCmd.VIEWPORT:                          break;                      case GeometryCmd.BOX_TEST:                          break;                      case GeometryCmd.POS_TEST:                          break;                      case GeometryCmd.VEC_TEST:                          break;                      default:                          break;                  }
Magic Number,_3DModels,BMD0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BMD0.cs,GeometryCommands,The following statement contains a magic number: switch ((GeometryCmd)geoCmd[i].cmd)                  {                      case GeometryCmd.NOP:                          break;                      case GeometryCmd.MTX_MODE:                          break;                      case GeometryCmd.MTX_PUSH:                          break;                      case GeometryCmd.MTX_POP:                          break;                      case GeometryCmd.MTX_STORE:                          break;                      case GeometryCmd.MTX_RESTORE:                          break;                      case GeometryCmd.MTX_IDENTITY:                          break;                      case GeometryCmd.MTX_LOAD_4x4:                          break;                      case GeometryCmd.MTX_LOAD_4x3:                          break;                      case GeometryCmd.MTX_MULT_4x4:                          break;                      case GeometryCmd.MTX_MULT_4x3:                          break;                      case GeometryCmd.MTX_MULT_3x3:                          break;                      case GeometryCmd.MTX_SCALE:                          break;                      case GeometryCmd.MTX_TRANS:                          break;                        #region Vertex commands                      // Multiply by the clipmatrix                      case GeometryCmd.VTX_16:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Y = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[1] & 0xFFFF)' true' 3' 12);                            GL.Vertex3(vector);                          break;                        case GeometryCmd.VTX_10:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0x3FF)' true' 3' 6);                          vector.Y = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FF)' true' 3' 6);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 3' 6);                            GL.Vertex3(vector);                          break;                        case GeometryCmd.VTX_XY:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Y = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_XZ:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_YZ:                          vector.Y = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_DIFF:                          float diffX' diffY' diffZ;                            diffX = Get_Double((int)(geoCmd[i].param[0] & 0x3FF)' true' 0' 9);                          diffY = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FFF)' true' 0' 9);                          diffZ = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 0' 9);                            vector.X += (diffX / 8);                          vector.Y += (diffY / 8);                          vector.Z += (diffZ / 8);                            GL.Vertex3(vector);                          break;                      #endregion                        case GeometryCmd.COLOR:                          // Convert the param to RGB555 color                          int r = (int)(geoCmd[i].param[0] & 0x1F);                          int g = (int)((geoCmd[i].param[0] >> 5) & 0x1F);                          int b = (int)((geoCmd[i].param[0] >> 10) & 0x1F);                            GL.Color3((float)r / 31.0f' (float)g / 31.0f' (float)b / 31.0f);                          break;                      case GeometryCmd.POLYGON_ATTR:                          break;                        #region Texture attributes                      case GeometryCmd.TEXCOORD:                          double s' t;                          s = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 11' 4);                          t = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 11' 4);                          GL.TexCoord2(s' t);                          break;                        case GeometryCmd.TEXIMAGE_PARAM:                          break;                      case GeometryCmd.PLTT_BASE:                          break;                      #endregion                        case GeometryCmd.DIF_AMB:                          break;                      case GeometryCmd.SPE_EMI:                          break;                      case GeometryCmd.LIGHT_VECTOR:                          break;                      case GeometryCmd.LIGHT_COLOR:                          break;                      case GeometryCmd.SHININESS:                          break;                        case GeometryCmd.NORMAL:                          float x' y' z;                          x = Get_Double((int)(geoCmd[i].param[0] & 0x3FFF)' true' 0' 9);                          y = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FFF)' true' 0' 9);                          z = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 0' 9);                            // Multiplay by the directional matrix                          GL.Normal3(x' y' z);                          break;                        case GeometryCmd.BEGIN_VTXS:                          if (geoCmd[i].param[0] == 0)                              GL.Begin(BeginMode.Triangles);                          else if (geoCmd[i].param[0] == 1)                              GL.Begin(BeginMode.Quads);                          else if (geoCmd[i].param[0] == 2)                              GL.Begin(BeginMode.TriangleStrip);                          else if (geoCmd[i].param[0] == 3)                              GL.Begin(BeginMode.QuadStrip);                          break;                      case GeometryCmd.END_VTXS:                          GL.End();                          break;                        case GeometryCmd.SWAP_BUFFERS:                          break;                      case GeometryCmd.VIEWPORT:                          break;                      case GeometryCmd.BOX_TEST:                          break;                      case GeometryCmd.POS_TEST:                          break;                      case GeometryCmd.VEC_TEST:                          break;                      default:                          break;                  }
Magic Number,_3DModels,BMD0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BMD0.cs,GeometryCommands,The following statement contains a magic number: switch ((GeometryCmd)geoCmd[i].cmd)                  {                      case GeometryCmd.NOP:                          break;                      case GeometryCmd.MTX_MODE:                          break;                      case GeometryCmd.MTX_PUSH:                          break;                      case GeometryCmd.MTX_POP:                          break;                      case GeometryCmd.MTX_STORE:                          break;                      case GeometryCmd.MTX_RESTORE:                          break;                      case GeometryCmd.MTX_IDENTITY:                          break;                      case GeometryCmd.MTX_LOAD_4x4:                          break;                      case GeometryCmd.MTX_LOAD_4x3:                          break;                      case GeometryCmd.MTX_MULT_4x4:                          break;                      case GeometryCmd.MTX_MULT_4x3:                          break;                      case GeometryCmd.MTX_MULT_3x3:                          break;                      case GeometryCmd.MTX_SCALE:                          break;                      case GeometryCmd.MTX_TRANS:                          break;                        #region Vertex commands                      // Multiply by the clipmatrix                      case GeometryCmd.VTX_16:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Y = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[1] & 0xFFFF)' true' 3' 12);                            GL.Vertex3(vector);                          break;                        case GeometryCmd.VTX_10:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0x3FF)' true' 3' 6);                          vector.Y = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FF)' true' 3' 6);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 3' 6);                            GL.Vertex3(vector);                          break;                        case GeometryCmd.VTX_XY:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Y = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_XZ:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_YZ:                          vector.Y = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_DIFF:                          float diffX' diffY' diffZ;                            diffX = Get_Double((int)(geoCmd[i].param[0] & 0x3FF)' true' 0' 9);                          diffY = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FFF)' true' 0' 9);                          diffZ = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 0' 9);                            vector.X += (diffX / 8);                          vector.Y += (diffY / 8);                          vector.Z += (diffZ / 8);                            GL.Vertex3(vector);                          break;                      #endregion                        case GeometryCmd.COLOR:                          // Convert the param to RGB555 color                          int r = (int)(geoCmd[i].param[0] & 0x1F);                          int g = (int)((geoCmd[i].param[0] >> 5) & 0x1F);                          int b = (int)((geoCmd[i].param[0] >> 10) & 0x1F);                            GL.Color3((float)r / 31.0f' (float)g / 31.0f' (float)b / 31.0f);                          break;                      case GeometryCmd.POLYGON_ATTR:                          break;                        #region Texture attributes                      case GeometryCmd.TEXCOORD:                          double s' t;                          s = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 11' 4);                          t = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 11' 4);                          GL.TexCoord2(s' t);                          break;                        case GeometryCmd.TEXIMAGE_PARAM:                          break;                      case GeometryCmd.PLTT_BASE:                          break;                      #endregion                        case GeometryCmd.DIF_AMB:                          break;                      case GeometryCmd.SPE_EMI:                          break;                      case GeometryCmd.LIGHT_VECTOR:                          break;                      case GeometryCmd.LIGHT_COLOR:                          break;                      case GeometryCmd.SHININESS:                          break;                        case GeometryCmd.NORMAL:                          float x' y' z;                          x = Get_Double((int)(geoCmd[i].param[0] & 0x3FFF)' true' 0' 9);                          y = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FFF)' true' 0' 9);                          z = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 0' 9);                            // Multiplay by the directional matrix                          GL.Normal3(x' y' z);                          break;                        case GeometryCmd.BEGIN_VTXS:                          if (geoCmd[i].param[0] == 0)                              GL.Begin(BeginMode.Triangles);                          else if (geoCmd[i].param[0] == 1)                              GL.Begin(BeginMode.Quads);                          else if (geoCmd[i].param[0] == 2)                              GL.Begin(BeginMode.TriangleStrip);                          else if (geoCmd[i].param[0] == 3)                              GL.Begin(BeginMode.QuadStrip);                          break;                      case GeometryCmd.END_VTXS:                          GL.End();                          break;                        case GeometryCmd.SWAP_BUFFERS:                          break;                      case GeometryCmd.VIEWPORT:                          break;                      case GeometryCmd.BOX_TEST:                          break;                      case GeometryCmd.POS_TEST:                          break;                      case GeometryCmd.VEC_TEST:                          break;                      default:                          break;                  }
Magic Number,_3DModels,BMD0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BMD0.cs,GeometryCommands,The following statement contains a magic number: switch ((GeometryCmd)geoCmd[i].cmd)                  {                      case GeometryCmd.NOP:                          break;                      case GeometryCmd.MTX_MODE:                          break;                      case GeometryCmd.MTX_PUSH:                          break;                      case GeometryCmd.MTX_POP:                          break;                      case GeometryCmd.MTX_STORE:                          break;                      case GeometryCmd.MTX_RESTORE:                          break;                      case GeometryCmd.MTX_IDENTITY:                          break;                      case GeometryCmd.MTX_LOAD_4x4:                          break;                      case GeometryCmd.MTX_LOAD_4x3:                          break;                      case GeometryCmd.MTX_MULT_4x4:                          break;                      case GeometryCmd.MTX_MULT_4x3:                          break;                      case GeometryCmd.MTX_MULT_3x3:                          break;                      case GeometryCmd.MTX_SCALE:                          break;                      case GeometryCmd.MTX_TRANS:                          break;                        #region Vertex commands                      // Multiply by the clipmatrix                      case GeometryCmd.VTX_16:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Y = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[1] & 0xFFFF)' true' 3' 12);                            GL.Vertex3(vector);                          break;                        case GeometryCmd.VTX_10:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0x3FF)' true' 3' 6);                          vector.Y = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FF)' true' 3' 6);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 3' 6);                            GL.Vertex3(vector);                          break;                        case GeometryCmd.VTX_XY:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Y = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_XZ:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_YZ:                          vector.Y = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_DIFF:                          float diffX' diffY' diffZ;                            diffX = Get_Double((int)(geoCmd[i].param[0] & 0x3FF)' true' 0' 9);                          diffY = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FFF)' true' 0' 9);                          diffZ = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 0' 9);                            vector.X += (diffX / 8);                          vector.Y += (diffY / 8);                          vector.Z += (diffZ / 8);                            GL.Vertex3(vector);                          break;                      #endregion                        case GeometryCmd.COLOR:                          // Convert the param to RGB555 color                          int r = (int)(geoCmd[i].param[0] & 0x1F);                          int g = (int)((geoCmd[i].param[0] >> 5) & 0x1F);                          int b = (int)((geoCmd[i].param[0] >> 10) & 0x1F);                            GL.Color3((float)r / 31.0f' (float)g / 31.0f' (float)b / 31.0f);                          break;                      case GeometryCmd.POLYGON_ATTR:                          break;                        #region Texture attributes                      case GeometryCmd.TEXCOORD:                          double s' t;                          s = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 11' 4);                          t = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 11' 4);                          GL.TexCoord2(s' t);                          break;                        case GeometryCmd.TEXIMAGE_PARAM:                          break;                      case GeometryCmd.PLTT_BASE:                          break;                      #endregion                        case GeometryCmd.DIF_AMB:                          break;                      case GeometryCmd.SPE_EMI:                          break;                      case GeometryCmd.LIGHT_VECTOR:                          break;                      case GeometryCmd.LIGHT_COLOR:                          break;                      case GeometryCmd.SHININESS:                          break;                        case GeometryCmd.NORMAL:                          float x' y' z;                          x = Get_Double((int)(geoCmd[i].param[0] & 0x3FFF)' true' 0' 9);                          y = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FFF)' true' 0' 9);                          z = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 0' 9);                            // Multiplay by the directional matrix                          GL.Normal3(x' y' z);                          break;                        case GeometryCmd.BEGIN_VTXS:                          if (geoCmd[i].param[0] == 0)                              GL.Begin(BeginMode.Triangles);                          else if (geoCmd[i].param[0] == 1)                              GL.Begin(BeginMode.Quads);                          else if (geoCmd[i].param[0] == 2)                              GL.Begin(BeginMode.TriangleStrip);                          else if (geoCmd[i].param[0] == 3)                              GL.Begin(BeginMode.QuadStrip);                          break;                      case GeometryCmd.END_VTXS:                          GL.End();                          break;                        case GeometryCmd.SWAP_BUFFERS:                          break;                      case GeometryCmd.VIEWPORT:                          break;                      case GeometryCmd.BOX_TEST:                          break;                      case GeometryCmd.POS_TEST:                          break;                      case GeometryCmd.VEC_TEST:                          break;                      default:                          break;                  }
Magic Number,_3DModels,BMD0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BMD0.cs,GeometryCommands,The following statement contains a magic number: switch ((GeometryCmd)geoCmd[i].cmd)                  {                      case GeometryCmd.NOP:                          break;                      case GeometryCmd.MTX_MODE:                          break;                      case GeometryCmd.MTX_PUSH:                          break;                      case GeometryCmd.MTX_POP:                          break;                      case GeometryCmd.MTX_STORE:                          break;                      case GeometryCmd.MTX_RESTORE:                          break;                      case GeometryCmd.MTX_IDENTITY:                          break;                      case GeometryCmd.MTX_LOAD_4x4:                          break;                      case GeometryCmd.MTX_LOAD_4x3:                          break;                      case GeometryCmd.MTX_MULT_4x4:                          break;                      case GeometryCmd.MTX_MULT_4x3:                          break;                      case GeometryCmd.MTX_MULT_3x3:                          break;                      case GeometryCmd.MTX_SCALE:                          break;                      case GeometryCmd.MTX_TRANS:                          break;                        #region Vertex commands                      // Multiply by the clipmatrix                      case GeometryCmd.VTX_16:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Y = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[1] & 0xFFFF)' true' 3' 12);                            GL.Vertex3(vector);                          break;                        case GeometryCmd.VTX_10:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0x3FF)' true' 3' 6);                          vector.Y = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FF)' true' 3' 6);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 3' 6);                            GL.Vertex3(vector);                          break;                        case GeometryCmd.VTX_XY:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Y = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_XZ:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_YZ:                          vector.Y = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_DIFF:                          float diffX' diffY' diffZ;                            diffX = Get_Double((int)(geoCmd[i].param[0] & 0x3FF)' true' 0' 9);                          diffY = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FFF)' true' 0' 9);                          diffZ = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 0' 9);                            vector.X += (diffX / 8);                          vector.Y += (diffY / 8);                          vector.Z += (diffZ / 8);                            GL.Vertex3(vector);                          break;                      #endregion                        case GeometryCmd.COLOR:                          // Convert the param to RGB555 color                          int r = (int)(geoCmd[i].param[0] & 0x1F);                          int g = (int)((geoCmd[i].param[0] >> 5) & 0x1F);                          int b = (int)((geoCmd[i].param[0] >> 10) & 0x1F);                            GL.Color3((float)r / 31.0f' (float)g / 31.0f' (float)b / 31.0f);                          break;                      case GeometryCmd.POLYGON_ATTR:                          break;                        #region Texture attributes                      case GeometryCmd.TEXCOORD:                          double s' t;                          s = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 11' 4);                          t = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 11' 4);                          GL.TexCoord2(s' t);                          break;                        case GeometryCmd.TEXIMAGE_PARAM:                          break;                      case GeometryCmd.PLTT_BASE:                          break;                      #endregion                        case GeometryCmd.DIF_AMB:                          break;                      case GeometryCmd.SPE_EMI:                          break;                      case GeometryCmd.LIGHT_VECTOR:                          break;                      case GeometryCmd.LIGHT_COLOR:                          break;                      case GeometryCmd.SHININESS:                          break;                        case GeometryCmd.NORMAL:                          float x' y' z;                          x = Get_Double((int)(geoCmd[i].param[0] & 0x3FFF)' true' 0' 9);                          y = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FFF)' true' 0' 9);                          z = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 0' 9);                            // Multiplay by the directional matrix                          GL.Normal3(x' y' z);                          break;                        case GeometryCmd.BEGIN_VTXS:                          if (geoCmd[i].param[0] == 0)                              GL.Begin(BeginMode.Triangles);                          else if (geoCmd[i].param[0] == 1)                              GL.Begin(BeginMode.Quads);                          else if (geoCmd[i].param[0] == 2)                              GL.Begin(BeginMode.TriangleStrip);                          else if (geoCmd[i].param[0] == 3)                              GL.Begin(BeginMode.QuadStrip);                          break;                      case GeometryCmd.END_VTXS:                          GL.End();                          break;                        case GeometryCmd.SWAP_BUFFERS:                          break;                      case GeometryCmd.VIEWPORT:                          break;                      case GeometryCmd.BOX_TEST:                          break;                      case GeometryCmd.POS_TEST:                          break;                      case GeometryCmd.VEC_TEST:                          break;                      default:                          break;                  }
Magic Number,_3DModels,BMD0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BMD0.cs,GeometryCommands,The following statement contains a magic number: switch ((GeometryCmd)geoCmd[i].cmd)                  {                      case GeometryCmd.NOP:                          break;                      case GeometryCmd.MTX_MODE:                          break;                      case GeometryCmd.MTX_PUSH:                          break;                      case GeometryCmd.MTX_POP:                          break;                      case GeometryCmd.MTX_STORE:                          break;                      case GeometryCmd.MTX_RESTORE:                          break;                      case GeometryCmd.MTX_IDENTITY:                          break;                      case GeometryCmd.MTX_LOAD_4x4:                          break;                      case GeometryCmd.MTX_LOAD_4x3:                          break;                      case GeometryCmd.MTX_MULT_4x4:                          break;                      case GeometryCmd.MTX_MULT_4x3:                          break;                      case GeometryCmd.MTX_MULT_3x3:                          break;                      case GeometryCmd.MTX_SCALE:                          break;                      case GeometryCmd.MTX_TRANS:                          break;                        #region Vertex commands                      // Multiply by the clipmatrix                      case GeometryCmd.VTX_16:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Y = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[1] & 0xFFFF)' true' 3' 12);                            GL.Vertex3(vector);                          break;                        case GeometryCmd.VTX_10:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0x3FF)' true' 3' 6);                          vector.Y = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FF)' true' 3' 6);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 3' 6);                            GL.Vertex3(vector);                          break;                        case GeometryCmd.VTX_XY:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Y = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_XZ:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_YZ:                          vector.Y = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_DIFF:                          float diffX' diffY' diffZ;                            diffX = Get_Double((int)(geoCmd[i].param[0] & 0x3FF)' true' 0' 9);                          diffY = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FFF)' true' 0' 9);                          diffZ = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 0' 9);                            vector.X += (diffX / 8);                          vector.Y += (diffY / 8);                          vector.Z += (diffZ / 8);                            GL.Vertex3(vector);                          break;                      #endregion                        case GeometryCmd.COLOR:                          // Convert the param to RGB555 color                          int r = (int)(geoCmd[i].param[0] & 0x1F);                          int g = (int)((geoCmd[i].param[0] >> 5) & 0x1F);                          int b = (int)((geoCmd[i].param[0] >> 10) & 0x1F);                            GL.Color3((float)r / 31.0f' (float)g / 31.0f' (float)b / 31.0f);                          break;                      case GeometryCmd.POLYGON_ATTR:                          break;                        #region Texture attributes                      case GeometryCmd.TEXCOORD:                          double s' t;                          s = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 11' 4);                          t = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 11' 4);                          GL.TexCoord2(s' t);                          break;                        case GeometryCmd.TEXIMAGE_PARAM:                          break;                      case GeometryCmd.PLTT_BASE:                          break;                      #endregion                        case GeometryCmd.DIF_AMB:                          break;                      case GeometryCmd.SPE_EMI:                          break;                      case GeometryCmd.LIGHT_VECTOR:                          break;                      case GeometryCmd.LIGHT_COLOR:                          break;                      case GeometryCmd.SHININESS:                          break;                        case GeometryCmd.NORMAL:                          float x' y' z;                          x = Get_Double((int)(geoCmd[i].param[0] & 0x3FFF)' true' 0' 9);                          y = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FFF)' true' 0' 9);                          z = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 0' 9);                            // Multiplay by the directional matrix                          GL.Normal3(x' y' z);                          break;                        case GeometryCmd.BEGIN_VTXS:                          if (geoCmd[i].param[0] == 0)                              GL.Begin(BeginMode.Triangles);                          else if (geoCmd[i].param[0] == 1)                              GL.Begin(BeginMode.Quads);                          else if (geoCmd[i].param[0] == 2)                              GL.Begin(BeginMode.TriangleStrip);                          else if (geoCmd[i].param[0] == 3)                              GL.Begin(BeginMode.QuadStrip);                          break;                      case GeometryCmd.END_VTXS:                          GL.End();                          break;                        case GeometryCmd.SWAP_BUFFERS:                          break;                      case GeometryCmd.VIEWPORT:                          break;                      case GeometryCmd.BOX_TEST:                          break;                      case GeometryCmd.POS_TEST:                          break;                      case GeometryCmd.VEC_TEST:                          break;                      default:                          break;                  }
Magic Number,_3DModels,BMD0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BMD0.cs,GeometryCommands,The following statement contains a magic number: switch ((GeometryCmd)geoCmd[i].cmd)                  {                      case GeometryCmd.NOP:                          break;                      case GeometryCmd.MTX_MODE:                          break;                      case GeometryCmd.MTX_PUSH:                          break;                      case GeometryCmd.MTX_POP:                          break;                      case GeometryCmd.MTX_STORE:                          break;                      case GeometryCmd.MTX_RESTORE:                          break;                      case GeometryCmd.MTX_IDENTITY:                          break;                      case GeometryCmd.MTX_LOAD_4x4:                          break;                      case GeometryCmd.MTX_LOAD_4x3:                          break;                      case GeometryCmd.MTX_MULT_4x4:                          break;                      case GeometryCmd.MTX_MULT_4x3:                          break;                      case GeometryCmd.MTX_MULT_3x3:                          break;                      case GeometryCmd.MTX_SCALE:                          break;                      case GeometryCmd.MTX_TRANS:                          break;                        #region Vertex commands                      // Multiply by the clipmatrix                      case GeometryCmd.VTX_16:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Y = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[1] & 0xFFFF)' true' 3' 12);                            GL.Vertex3(vector);                          break;                        case GeometryCmd.VTX_10:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0x3FF)' true' 3' 6);                          vector.Y = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FF)' true' 3' 6);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 3' 6);                            GL.Vertex3(vector);                          break;                        case GeometryCmd.VTX_XY:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Y = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_XZ:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_YZ:                          vector.Y = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_DIFF:                          float diffX' diffY' diffZ;                            diffX = Get_Double((int)(geoCmd[i].param[0] & 0x3FF)' true' 0' 9);                          diffY = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FFF)' true' 0' 9);                          diffZ = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 0' 9);                            vector.X += (diffX / 8);                          vector.Y += (diffY / 8);                          vector.Z += (diffZ / 8);                            GL.Vertex3(vector);                          break;                      #endregion                        case GeometryCmd.COLOR:                          // Convert the param to RGB555 color                          int r = (int)(geoCmd[i].param[0] & 0x1F);                          int g = (int)((geoCmd[i].param[0] >> 5) & 0x1F);                          int b = (int)((geoCmd[i].param[0] >> 10) & 0x1F);                            GL.Color3((float)r / 31.0f' (float)g / 31.0f' (float)b / 31.0f);                          break;                      case GeometryCmd.POLYGON_ATTR:                          break;                        #region Texture attributes                      case GeometryCmd.TEXCOORD:                          double s' t;                          s = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 11' 4);                          t = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 11' 4);                          GL.TexCoord2(s' t);                          break;                        case GeometryCmd.TEXIMAGE_PARAM:                          break;                      case GeometryCmd.PLTT_BASE:                          break;                      #endregion                        case GeometryCmd.DIF_AMB:                          break;                      case GeometryCmd.SPE_EMI:                          break;                      case GeometryCmd.LIGHT_VECTOR:                          break;                      case GeometryCmd.LIGHT_COLOR:                          break;                      case GeometryCmd.SHININESS:                          break;                        case GeometryCmd.NORMAL:                          float x' y' z;                          x = Get_Double((int)(geoCmd[i].param[0] & 0x3FFF)' true' 0' 9);                          y = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FFF)' true' 0' 9);                          z = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 0' 9);                            // Multiplay by the directional matrix                          GL.Normal3(x' y' z);                          break;                        case GeometryCmd.BEGIN_VTXS:                          if (geoCmd[i].param[0] == 0)                              GL.Begin(BeginMode.Triangles);                          else if (geoCmd[i].param[0] == 1)                              GL.Begin(BeginMode.Quads);                          else if (geoCmd[i].param[0] == 2)                              GL.Begin(BeginMode.TriangleStrip);                          else if (geoCmd[i].param[0] == 3)                              GL.Begin(BeginMode.QuadStrip);                          break;                      case GeometryCmd.END_VTXS:                          GL.End();                          break;                        case GeometryCmd.SWAP_BUFFERS:                          break;                      case GeometryCmd.VIEWPORT:                          break;                      case GeometryCmd.BOX_TEST:                          break;                      case GeometryCmd.POS_TEST:                          break;                      case GeometryCmd.VEC_TEST:                          break;                      default:                          break;                  }
Magic Number,_3DModels,BMD0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BMD0.cs,GeometryCommands,The following statement contains a magic number: switch ((GeometryCmd)geoCmd[i].cmd)                  {                      case GeometryCmd.NOP:                          break;                      case GeometryCmd.MTX_MODE:                          break;                      case GeometryCmd.MTX_PUSH:                          break;                      case GeometryCmd.MTX_POP:                          break;                      case GeometryCmd.MTX_STORE:                          break;                      case GeometryCmd.MTX_RESTORE:                          break;                      case GeometryCmd.MTX_IDENTITY:                          break;                      case GeometryCmd.MTX_LOAD_4x4:                          break;                      case GeometryCmd.MTX_LOAD_4x3:                          break;                      case GeometryCmd.MTX_MULT_4x4:                          break;                      case GeometryCmd.MTX_MULT_4x3:                          break;                      case GeometryCmd.MTX_MULT_3x3:                          break;                      case GeometryCmd.MTX_SCALE:                          break;                      case GeometryCmd.MTX_TRANS:                          break;                        #region Vertex commands                      // Multiply by the clipmatrix                      case GeometryCmd.VTX_16:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Y = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[1] & 0xFFFF)' true' 3' 12);                            GL.Vertex3(vector);                          break;                        case GeometryCmd.VTX_10:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0x3FF)' true' 3' 6);                          vector.Y = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FF)' true' 3' 6);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 3' 6);                            GL.Vertex3(vector);                          break;                        case GeometryCmd.VTX_XY:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Y = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_XZ:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_YZ:                          vector.Y = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_DIFF:                          float diffX' diffY' diffZ;                            diffX = Get_Double((int)(geoCmd[i].param[0] & 0x3FF)' true' 0' 9);                          diffY = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FFF)' true' 0' 9);                          diffZ = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 0' 9);                            vector.X += (diffX / 8);                          vector.Y += (diffY / 8);                          vector.Z += (diffZ / 8);                            GL.Vertex3(vector);                          break;                      #endregion                        case GeometryCmd.COLOR:                          // Convert the param to RGB555 color                          int r = (int)(geoCmd[i].param[0] & 0x1F);                          int g = (int)((geoCmd[i].param[0] >> 5) & 0x1F);                          int b = (int)((geoCmd[i].param[0] >> 10) & 0x1F);                            GL.Color3((float)r / 31.0f' (float)g / 31.0f' (float)b / 31.0f);                          break;                      case GeometryCmd.POLYGON_ATTR:                          break;                        #region Texture attributes                      case GeometryCmd.TEXCOORD:                          double s' t;                          s = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 11' 4);                          t = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 11' 4);                          GL.TexCoord2(s' t);                          break;                        case GeometryCmd.TEXIMAGE_PARAM:                          break;                      case GeometryCmd.PLTT_BASE:                          break;                      #endregion                        case GeometryCmd.DIF_AMB:                          break;                      case GeometryCmd.SPE_EMI:                          break;                      case GeometryCmd.LIGHT_VECTOR:                          break;                      case GeometryCmd.LIGHT_COLOR:                          break;                      case GeometryCmd.SHININESS:                          break;                        case GeometryCmd.NORMAL:                          float x' y' z;                          x = Get_Double((int)(geoCmd[i].param[0] & 0x3FFF)' true' 0' 9);                          y = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FFF)' true' 0' 9);                          z = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 0' 9);                            // Multiplay by the directional matrix                          GL.Normal3(x' y' z);                          break;                        case GeometryCmd.BEGIN_VTXS:                          if (geoCmd[i].param[0] == 0)                              GL.Begin(BeginMode.Triangles);                          else if (geoCmd[i].param[0] == 1)                              GL.Begin(BeginMode.Quads);                          else if (geoCmd[i].param[0] == 2)                              GL.Begin(BeginMode.TriangleStrip);                          else if (geoCmd[i].param[0] == 3)                              GL.Begin(BeginMode.QuadStrip);                          break;                      case GeometryCmd.END_VTXS:                          GL.End();                          break;                        case GeometryCmd.SWAP_BUFFERS:                          break;                      case GeometryCmd.VIEWPORT:                          break;                      case GeometryCmd.BOX_TEST:                          break;                      case GeometryCmd.POS_TEST:                          break;                      case GeometryCmd.VEC_TEST:                          break;                      default:                          break;                  }
Magic Number,_3DModels,BMD0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BMD0.cs,GeometryCommands,The following statement contains a magic number: switch ((GeometryCmd)geoCmd[i].cmd)                  {                      case GeometryCmd.NOP:                          break;                      case GeometryCmd.MTX_MODE:                          break;                      case GeometryCmd.MTX_PUSH:                          break;                      case GeometryCmd.MTX_POP:                          break;                      case GeometryCmd.MTX_STORE:                          break;                      case GeometryCmd.MTX_RESTORE:                          break;                      case GeometryCmd.MTX_IDENTITY:                          break;                      case GeometryCmd.MTX_LOAD_4x4:                          break;                      case GeometryCmd.MTX_LOAD_4x3:                          break;                      case GeometryCmd.MTX_MULT_4x4:                          break;                      case GeometryCmd.MTX_MULT_4x3:                          break;                      case GeometryCmd.MTX_MULT_3x3:                          break;                      case GeometryCmd.MTX_SCALE:                          break;                      case GeometryCmd.MTX_TRANS:                          break;                        #region Vertex commands                      // Multiply by the clipmatrix                      case GeometryCmd.VTX_16:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Y = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[1] & 0xFFFF)' true' 3' 12);                            GL.Vertex3(vector);                          break;                        case GeometryCmd.VTX_10:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0x3FF)' true' 3' 6);                          vector.Y = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FF)' true' 3' 6);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 3' 6);                            GL.Vertex3(vector);                          break;                        case GeometryCmd.VTX_XY:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Y = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_XZ:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_YZ:                          vector.Y = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_DIFF:                          float diffX' diffY' diffZ;                            diffX = Get_Double((int)(geoCmd[i].param[0] & 0x3FF)' true' 0' 9);                          diffY = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FFF)' true' 0' 9);                          diffZ = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 0' 9);                            vector.X += (diffX / 8);                          vector.Y += (diffY / 8);                          vector.Z += (diffZ / 8);                            GL.Vertex3(vector);                          break;                      #endregion                        case GeometryCmd.COLOR:                          // Convert the param to RGB555 color                          int r = (int)(geoCmd[i].param[0] & 0x1F);                          int g = (int)((geoCmd[i].param[0] >> 5) & 0x1F);                          int b = (int)((geoCmd[i].param[0] >> 10) & 0x1F);                            GL.Color3((float)r / 31.0f' (float)g / 31.0f' (float)b / 31.0f);                          break;                      case GeometryCmd.POLYGON_ATTR:                          break;                        #region Texture attributes                      case GeometryCmd.TEXCOORD:                          double s' t;                          s = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 11' 4);                          t = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 11' 4);                          GL.TexCoord2(s' t);                          break;                        case GeometryCmd.TEXIMAGE_PARAM:                          break;                      case GeometryCmd.PLTT_BASE:                          break;                      #endregion                        case GeometryCmd.DIF_AMB:                          break;                      case GeometryCmd.SPE_EMI:                          break;                      case GeometryCmd.LIGHT_VECTOR:                          break;                      case GeometryCmd.LIGHT_COLOR:                          break;                      case GeometryCmd.SHININESS:                          break;                        case GeometryCmd.NORMAL:                          float x' y' z;                          x = Get_Double((int)(geoCmd[i].param[0] & 0x3FFF)' true' 0' 9);                          y = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FFF)' true' 0' 9);                          z = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 0' 9);                            // Multiplay by the directional matrix                          GL.Normal3(x' y' z);                          break;                        case GeometryCmd.BEGIN_VTXS:                          if (geoCmd[i].param[0] == 0)                              GL.Begin(BeginMode.Triangles);                          else if (geoCmd[i].param[0] == 1)                              GL.Begin(BeginMode.Quads);                          else if (geoCmd[i].param[0] == 2)                              GL.Begin(BeginMode.TriangleStrip);                          else if (geoCmd[i].param[0] == 3)                              GL.Begin(BeginMode.QuadStrip);                          break;                      case GeometryCmd.END_VTXS:                          GL.End();                          break;                        case GeometryCmd.SWAP_BUFFERS:                          break;                      case GeometryCmd.VIEWPORT:                          break;                      case GeometryCmd.BOX_TEST:                          break;                      case GeometryCmd.POS_TEST:                          break;                      case GeometryCmd.VEC_TEST:                          break;                      default:                          break;                  }
Magic Number,_3DModels,BMD0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BMD0.cs,GeometryCommands,The following statement contains a magic number: switch ((GeometryCmd)geoCmd[i].cmd)                  {                      case GeometryCmd.NOP:                          break;                      case GeometryCmd.MTX_MODE:                          break;                      case GeometryCmd.MTX_PUSH:                          break;                      case GeometryCmd.MTX_POP:                          break;                      case GeometryCmd.MTX_STORE:                          break;                      case GeometryCmd.MTX_RESTORE:                          break;                      case GeometryCmd.MTX_IDENTITY:                          break;                      case GeometryCmd.MTX_LOAD_4x4:                          break;                      case GeometryCmd.MTX_LOAD_4x3:                          break;                      case GeometryCmd.MTX_MULT_4x4:                          break;                      case GeometryCmd.MTX_MULT_4x3:                          break;                      case GeometryCmd.MTX_MULT_3x3:                          break;                      case GeometryCmd.MTX_SCALE:                          break;                      case GeometryCmd.MTX_TRANS:                          break;                        #region Vertex commands                      // Multiply by the clipmatrix                      case GeometryCmd.VTX_16:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Y = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[1] & 0xFFFF)' true' 3' 12);                            GL.Vertex3(vector);                          break;                        case GeometryCmd.VTX_10:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0x3FF)' true' 3' 6);                          vector.Y = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FF)' true' 3' 6);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 3' 6);                            GL.Vertex3(vector);                          break;                        case GeometryCmd.VTX_XY:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Y = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_XZ:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_YZ:                          vector.Y = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_DIFF:                          float diffX' diffY' diffZ;                            diffX = Get_Double((int)(geoCmd[i].param[0] & 0x3FF)' true' 0' 9);                          diffY = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FFF)' true' 0' 9);                          diffZ = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 0' 9);                            vector.X += (diffX / 8);                          vector.Y += (diffY / 8);                          vector.Z += (diffZ / 8);                            GL.Vertex3(vector);                          break;                      #endregion                        case GeometryCmd.COLOR:                          // Convert the param to RGB555 color                          int r = (int)(geoCmd[i].param[0] & 0x1F);                          int g = (int)((geoCmd[i].param[0] >> 5) & 0x1F);                          int b = (int)((geoCmd[i].param[0] >> 10) & 0x1F);                            GL.Color3((float)r / 31.0f' (float)g / 31.0f' (float)b / 31.0f);                          break;                      case GeometryCmd.POLYGON_ATTR:                          break;                        #region Texture attributes                      case GeometryCmd.TEXCOORD:                          double s' t;                          s = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 11' 4);                          t = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 11' 4);                          GL.TexCoord2(s' t);                          break;                        case GeometryCmd.TEXIMAGE_PARAM:                          break;                      case GeometryCmd.PLTT_BASE:                          break;                      #endregion                        case GeometryCmd.DIF_AMB:                          break;                      case GeometryCmd.SPE_EMI:                          break;                      case GeometryCmd.LIGHT_VECTOR:                          break;                      case GeometryCmd.LIGHT_COLOR:                          break;                      case GeometryCmd.SHININESS:                          break;                        case GeometryCmd.NORMAL:                          float x' y' z;                          x = Get_Double((int)(geoCmd[i].param[0] & 0x3FFF)' true' 0' 9);                          y = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FFF)' true' 0' 9);                          z = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 0' 9);                            // Multiplay by the directional matrix                          GL.Normal3(x' y' z);                          break;                        case GeometryCmd.BEGIN_VTXS:                          if (geoCmd[i].param[0] == 0)                              GL.Begin(BeginMode.Triangles);                          else if (geoCmd[i].param[0] == 1)                              GL.Begin(BeginMode.Quads);                          else if (geoCmd[i].param[0] == 2)                              GL.Begin(BeginMode.TriangleStrip);                          else if (geoCmd[i].param[0] == 3)                              GL.Begin(BeginMode.QuadStrip);                          break;                      case GeometryCmd.END_VTXS:                          GL.End();                          break;                        case GeometryCmd.SWAP_BUFFERS:                          break;                      case GeometryCmd.VIEWPORT:                          break;                      case GeometryCmd.BOX_TEST:                          break;                      case GeometryCmd.POS_TEST:                          break;                      case GeometryCmd.VEC_TEST:                          break;                      default:                          break;                  }
Magic Number,_3DModels,BMD0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BMD0.cs,GeometryCommands,The following statement contains a magic number: switch ((GeometryCmd)geoCmd[i].cmd)                  {                      case GeometryCmd.NOP:                          break;                      case GeometryCmd.MTX_MODE:                          break;                      case GeometryCmd.MTX_PUSH:                          break;                      case GeometryCmd.MTX_POP:                          break;                      case GeometryCmd.MTX_STORE:                          break;                      case GeometryCmd.MTX_RESTORE:                          break;                      case GeometryCmd.MTX_IDENTITY:                          break;                      case GeometryCmd.MTX_LOAD_4x4:                          break;                      case GeometryCmd.MTX_LOAD_4x3:                          break;                      case GeometryCmd.MTX_MULT_4x4:                          break;                      case GeometryCmd.MTX_MULT_4x3:                          break;                      case GeometryCmd.MTX_MULT_3x3:                          break;                      case GeometryCmd.MTX_SCALE:                          break;                      case GeometryCmd.MTX_TRANS:                          break;                        #region Vertex commands                      // Multiply by the clipmatrix                      case GeometryCmd.VTX_16:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Y = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[1] & 0xFFFF)' true' 3' 12);                            GL.Vertex3(vector);                          break;                        case GeometryCmd.VTX_10:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0x3FF)' true' 3' 6);                          vector.Y = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FF)' true' 3' 6);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 3' 6);                            GL.Vertex3(vector);                          break;                        case GeometryCmd.VTX_XY:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Y = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_XZ:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_YZ:                          vector.Y = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_DIFF:                          float diffX' diffY' diffZ;                            diffX = Get_Double((int)(geoCmd[i].param[0] & 0x3FF)' true' 0' 9);                          diffY = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FFF)' true' 0' 9);                          diffZ = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 0' 9);                            vector.X += (diffX / 8);                          vector.Y += (diffY / 8);                          vector.Z += (diffZ / 8);                            GL.Vertex3(vector);                          break;                      #endregion                        case GeometryCmd.COLOR:                          // Convert the param to RGB555 color                          int r = (int)(geoCmd[i].param[0] & 0x1F);                          int g = (int)((geoCmd[i].param[0] >> 5) & 0x1F);                          int b = (int)((geoCmd[i].param[0] >> 10) & 0x1F);                            GL.Color3((float)r / 31.0f' (float)g / 31.0f' (float)b / 31.0f);                          break;                      case GeometryCmd.POLYGON_ATTR:                          break;                        #region Texture attributes                      case GeometryCmd.TEXCOORD:                          double s' t;                          s = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 11' 4);                          t = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 11' 4);                          GL.TexCoord2(s' t);                          break;                        case GeometryCmd.TEXIMAGE_PARAM:                          break;                      case GeometryCmd.PLTT_BASE:                          break;                      #endregion                        case GeometryCmd.DIF_AMB:                          break;                      case GeometryCmd.SPE_EMI:                          break;                      case GeometryCmd.LIGHT_VECTOR:                          break;                      case GeometryCmd.LIGHT_COLOR:                          break;                      case GeometryCmd.SHININESS:                          break;                        case GeometryCmd.NORMAL:                          float x' y' z;                          x = Get_Double((int)(geoCmd[i].param[0] & 0x3FFF)' true' 0' 9);                          y = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FFF)' true' 0' 9);                          z = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 0' 9);                            // Multiplay by the directional matrix                          GL.Normal3(x' y' z);                          break;                        case GeometryCmd.BEGIN_VTXS:                          if (geoCmd[i].param[0] == 0)                              GL.Begin(BeginMode.Triangles);                          else if (geoCmd[i].param[0] == 1)                              GL.Begin(BeginMode.Quads);                          else if (geoCmd[i].param[0] == 2)                              GL.Begin(BeginMode.TriangleStrip);                          else if (geoCmd[i].param[0] == 3)                              GL.Begin(BeginMode.QuadStrip);                          break;                      case GeometryCmd.END_VTXS:                          GL.End();                          break;                        case GeometryCmd.SWAP_BUFFERS:                          break;                      case GeometryCmd.VIEWPORT:                          break;                      case GeometryCmd.BOX_TEST:                          break;                      case GeometryCmd.POS_TEST:                          break;                      case GeometryCmd.VEC_TEST:                          break;                      default:                          break;                  }
Magic Number,_3DModels,BMD0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BMD0.cs,GeometryCommands,The following statement contains a magic number: switch ((GeometryCmd)geoCmd[i].cmd)                  {                      case GeometryCmd.NOP:                          break;                      case GeometryCmd.MTX_MODE:                          break;                      case GeometryCmd.MTX_PUSH:                          break;                      case GeometryCmd.MTX_POP:                          break;                      case GeometryCmd.MTX_STORE:                          break;                      case GeometryCmd.MTX_RESTORE:                          break;                      case GeometryCmd.MTX_IDENTITY:                          break;                      case GeometryCmd.MTX_LOAD_4x4:                          break;                      case GeometryCmd.MTX_LOAD_4x3:                          break;                      case GeometryCmd.MTX_MULT_4x4:                          break;                      case GeometryCmd.MTX_MULT_4x3:                          break;                      case GeometryCmd.MTX_MULT_3x3:                          break;                      case GeometryCmd.MTX_SCALE:                          break;                      case GeometryCmd.MTX_TRANS:                          break;                        #region Vertex commands                      // Multiply by the clipmatrix                      case GeometryCmd.VTX_16:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Y = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[1] & 0xFFFF)' true' 3' 12);                            GL.Vertex3(vector);                          break;                        case GeometryCmd.VTX_10:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0x3FF)' true' 3' 6);                          vector.Y = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FF)' true' 3' 6);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 3' 6);                            GL.Vertex3(vector);                          break;                        case GeometryCmd.VTX_XY:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Y = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_XZ:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_YZ:                          vector.Y = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_DIFF:                          float diffX' diffY' diffZ;                            diffX = Get_Double((int)(geoCmd[i].param[0] & 0x3FF)' true' 0' 9);                          diffY = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FFF)' true' 0' 9);                          diffZ = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 0' 9);                            vector.X += (diffX / 8);                          vector.Y += (diffY / 8);                          vector.Z += (diffZ / 8);                            GL.Vertex3(vector);                          break;                      #endregion                        case GeometryCmd.COLOR:                          // Convert the param to RGB555 color                          int r = (int)(geoCmd[i].param[0] & 0x1F);                          int g = (int)((geoCmd[i].param[0] >> 5) & 0x1F);                          int b = (int)((geoCmd[i].param[0] >> 10) & 0x1F);                            GL.Color3((float)r / 31.0f' (float)g / 31.0f' (float)b / 31.0f);                          break;                      case GeometryCmd.POLYGON_ATTR:                          break;                        #region Texture attributes                      case GeometryCmd.TEXCOORD:                          double s' t;                          s = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 11' 4);                          t = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 11' 4);                          GL.TexCoord2(s' t);                          break;                        case GeometryCmd.TEXIMAGE_PARAM:                          break;                      case GeometryCmd.PLTT_BASE:                          break;                      #endregion                        case GeometryCmd.DIF_AMB:                          break;                      case GeometryCmd.SPE_EMI:                          break;                      case GeometryCmd.LIGHT_VECTOR:                          break;                      case GeometryCmd.LIGHT_COLOR:                          break;                      case GeometryCmd.SHININESS:                          break;                        case GeometryCmd.NORMAL:                          float x' y' z;                          x = Get_Double((int)(geoCmd[i].param[0] & 0x3FFF)' true' 0' 9);                          y = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FFF)' true' 0' 9);                          z = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 0' 9);                            // Multiplay by the directional matrix                          GL.Normal3(x' y' z);                          break;                        case GeometryCmd.BEGIN_VTXS:                          if (geoCmd[i].param[0] == 0)                              GL.Begin(BeginMode.Triangles);                          else if (geoCmd[i].param[0] == 1)                              GL.Begin(BeginMode.Quads);                          else if (geoCmd[i].param[0] == 2)                              GL.Begin(BeginMode.TriangleStrip);                          else if (geoCmd[i].param[0] == 3)                              GL.Begin(BeginMode.QuadStrip);                          break;                      case GeometryCmd.END_VTXS:                          GL.End();                          break;                        case GeometryCmd.SWAP_BUFFERS:                          break;                      case GeometryCmd.VIEWPORT:                          break;                      case GeometryCmd.BOX_TEST:                          break;                      case GeometryCmd.POS_TEST:                          break;                      case GeometryCmd.VEC_TEST:                          break;                      default:                          break;                  }
Magic Number,_3DModels,BMD0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BMD0.cs,GeometryCommands,The following statement contains a magic number: switch ((GeometryCmd)geoCmd[i].cmd)                  {                      case GeometryCmd.NOP:                          break;                      case GeometryCmd.MTX_MODE:                          break;                      case GeometryCmd.MTX_PUSH:                          break;                      case GeometryCmd.MTX_POP:                          break;                      case GeometryCmd.MTX_STORE:                          break;                      case GeometryCmd.MTX_RESTORE:                          break;                      case GeometryCmd.MTX_IDENTITY:                          break;                      case GeometryCmd.MTX_LOAD_4x4:                          break;                      case GeometryCmd.MTX_LOAD_4x3:                          break;                      case GeometryCmd.MTX_MULT_4x4:                          break;                      case GeometryCmd.MTX_MULT_4x3:                          break;                      case GeometryCmd.MTX_MULT_3x3:                          break;                      case GeometryCmd.MTX_SCALE:                          break;                      case GeometryCmd.MTX_TRANS:                          break;                        #region Vertex commands                      // Multiply by the clipmatrix                      case GeometryCmd.VTX_16:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Y = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[1] & 0xFFFF)' true' 3' 12);                            GL.Vertex3(vector);                          break;                        case GeometryCmd.VTX_10:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0x3FF)' true' 3' 6);                          vector.Y = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FF)' true' 3' 6);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 3' 6);                            GL.Vertex3(vector);                          break;                        case GeometryCmd.VTX_XY:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Y = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_XZ:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_YZ:                          vector.Y = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_DIFF:                          float diffX' diffY' diffZ;                            diffX = Get_Double((int)(geoCmd[i].param[0] & 0x3FF)' true' 0' 9);                          diffY = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FFF)' true' 0' 9);                          diffZ = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 0' 9);                            vector.X += (diffX / 8);                          vector.Y += (diffY / 8);                          vector.Z += (diffZ / 8);                            GL.Vertex3(vector);                          break;                      #endregion                        case GeometryCmd.COLOR:                          // Convert the param to RGB555 color                          int r = (int)(geoCmd[i].param[0] & 0x1F);                          int g = (int)((geoCmd[i].param[0] >> 5) & 0x1F);                          int b = (int)((geoCmd[i].param[0] >> 10) & 0x1F);                            GL.Color3((float)r / 31.0f' (float)g / 31.0f' (float)b / 31.0f);                          break;                      case GeometryCmd.POLYGON_ATTR:                          break;                        #region Texture attributes                      case GeometryCmd.TEXCOORD:                          double s' t;                          s = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 11' 4);                          t = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 11' 4);                          GL.TexCoord2(s' t);                          break;                        case GeometryCmd.TEXIMAGE_PARAM:                          break;                      case GeometryCmd.PLTT_BASE:                          break;                      #endregion                        case GeometryCmd.DIF_AMB:                          break;                      case GeometryCmd.SPE_EMI:                          break;                      case GeometryCmd.LIGHT_VECTOR:                          break;                      case GeometryCmd.LIGHT_COLOR:                          break;                      case GeometryCmd.SHININESS:                          break;                        case GeometryCmd.NORMAL:                          float x' y' z;                          x = Get_Double((int)(geoCmd[i].param[0] & 0x3FFF)' true' 0' 9);                          y = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FFF)' true' 0' 9);                          z = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 0' 9);                            // Multiplay by the directional matrix                          GL.Normal3(x' y' z);                          break;                        case GeometryCmd.BEGIN_VTXS:                          if (geoCmd[i].param[0] == 0)                              GL.Begin(BeginMode.Triangles);                          else if (geoCmd[i].param[0] == 1)                              GL.Begin(BeginMode.Quads);                          else if (geoCmd[i].param[0] == 2)                              GL.Begin(BeginMode.TriangleStrip);                          else if (geoCmd[i].param[0] == 3)                              GL.Begin(BeginMode.QuadStrip);                          break;                      case GeometryCmd.END_VTXS:                          GL.End();                          break;                        case GeometryCmd.SWAP_BUFFERS:                          break;                      case GeometryCmd.VIEWPORT:                          break;                      case GeometryCmd.BOX_TEST:                          break;                      case GeometryCmd.POS_TEST:                          break;                      case GeometryCmd.VEC_TEST:                          break;                      default:                          break;                  }
Magic Number,_3DModels,BMD0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BMD0.cs,GeometryCommands,The following statement contains a magic number: switch ((GeometryCmd)geoCmd[i].cmd)                  {                      case GeometryCmd.NOP:                          break;                      case GeometryCmd.MTX_MODE:                          break;                      case GeometryCmd.MTX_PUSH:                          break;                      case GeometryCmd.MTX_POP:                          break;                      case GeometryCmd.MTX_STORE:                          break;                      case GeometryCmd.MTX_RESTORE:                          break;                      case GeometryCmd.MTX_IDENTITY:                          break;                      case GeometryCmd.MTX_LOAD_4x4:                          break;                      case GeometryCmd.MTX_LOAD_4x3:                          break;                      case GeometryCmd.MTX_MULT_4x4:                          break;                      case GeometryCmd.MTX_MULT_4x3:                          break;                      case GeometryCmd.MTX_MULT_3x3:                          break;                      case GeometryCmd.MTX_SCALE:                          break;                      case GeometryCmd.MTX_TRANS:                          break;                        #region Vertex commands                      // Multiply by the clipmatrix                      case GeometryCmd.VTX_16:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Y = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[1] & 0xFFFF)' true' 3' 12);                            GL.Vertex3(vector);                          break;                        case GeometryCmd.VTX_10:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0x3FF)' true' 3' 6);                          vector.Y = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FF)' true' 3' 6);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 3' 6);                            GL.Vertex3(vector);                          break;                        case GeometryCmd.VTX_XY:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Y = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_XZ:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_YZ:                          vector.Y = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_DIFF:                          float diffX' diffY' diffZ;                            diffX = Get_Double((int)(geoCmd[i].param[0] & 0x3FF)' true' 0' 9);                          diffY = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FFF)' true' 0' 9);                          diffZ = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 0' 9);                            vector.X += (diffX / 8);                          vector.Y += (diffY / 8);                          vector.Z += (diffZ / 8);                            GL.Vertex3(vector);                          break;                      #endregion                        case GeometryCmd.COLOR:                          // Convert the param to RGB555 color                          int r = (int)(geoCmd[i].param[0] & 0x1F);                          int g = (int)((geoCmd[i].param[0] >> 5) & 0x1F);                          int b = (int)((geoCmd[i].param[0] >> 10) & 0x1F);                            GL.Color3((float)r / 31.0f' (float)g / 31.0f' (float)b / 31.0f);                          break;                      case GeometryCmd.POLYGON_ATTR:                          break;                        #region Texture attributes                      case GeometryCmd.TEXCOORD:                          double s' t;                          s = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 11' 4);                          t = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 11' 4);                          GL.TexCoord2(s' t);                          break;                        case GeometryCmd.TEXIMAGE_PARAM:                          break;                      case GeometryCmd.PLTT_BASE:                          break;                      #endregion                        case GeometryCmd.DIF_AMB:                          break;                      case GeometryCmd.SPE_EMI:                          break;                      case GeometryCmd.LIGHT_VECTOR:                          break;                      case GeometryCmd.LIGHT_COLOR:                          break;                      case GeometryCmd.SHININESS:                          break;                        case GeometryCmd.NORMAL:                          float x' y' z;                          x = Get_Double((int)(geoCmd[i].param[0] & 0x3FFF)' true' 0' 9);                          y = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FFF)' true' 0' 9);                          z = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 0' 9);                            // Multiplay by the directional matrix                          GL.Normal3(x' y' z);                          break;                        case GeometryCmd.BEGIN_VTXS:                          if (geoCmd[i].param[0] == 0)                              GL.Begin(BeginMode.Triangles);                          else if (geoCmd[i].param[0] == 1)                              GL.Begin(BeginMode.Quads);                          else if (geoCmd[i].param[0] == 2)                              GL.Begin(BeginMode.TriangleStrip);                          else if (geoCmd[i].param[0] == 3)                              GL.Begin(BeginMode.QuadStrip);                          break;                      case GeometryCmd.END_VTXS:                          GL.End();                          break;                        case GeometryCmd.SWAP_BUFFERS:                          break;                      case GeometryCmd.VIEWPORT:                          break;                      case GeometryCmd.BOX_TEST:                          break;                      case GeometryCmd.POS_TEST:                          break;                      case GeometryCmd.VEC_TEST:                          break;                      default:                          break;                  }
Magic Number,_3DModels,BMD0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BMD0.cs,GeometryCommands,The following statement contains a magic number: switch ((GeometryCmd)geoCmd[i].cmd)                  {                      case GeometryCmd.NOP:                          break;                      case GeometryCmd.MTX_MODE:                          break;                      case GeometryCmd.MTX_PUSH:                          break;                      case GeometryCmd.MTX_POP:                          break;                      case GeometryCmd.MTX_STORE:                          break;                      case GeometryCmd.MTX_RESTORE:                          break;                      case GeometryCmd.MTX_IDENTITY:                          break;                      case GeometryCmd.MTX_LOAD_4x4:                          break;                      case GeometryCmd.MTX_LOAD_4x3:                          break;                      case GeometryCmd.MTX_MULT_4x4:                          break;                      case GeometryCmd.MTX_MULT_4x3:                          break;                      case GeometryCmd.MTX_MULT_3x3:                          break;                      case GeometryCmd.MTX_SCALE:                          break;                      case GeometryCmd.MTX_TRANS:                          break;                        #region Vertex commands                      // Multiply by the clipmatrix                      case GeometryCmd.VTX_16:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Y = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[1] & 0xFFFF)' true' 3' 12);                            GL.Vertex3(vector);                          break;                        case GeometryCmd.VTX_10:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0x3FF)' true' 3' 6);                          vector.Y = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FF)' true' 3' 6);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 3' 6);                            GL.Vertex3(vector);                          break;                        case GeometryCmd.VTX_XY:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Y = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_XZ:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_YZ:                          vector.Y = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_DIFF:                          float diffX' diffY' diffZ;                            diffX = Get_Double((int)(geoCmd[i].param[0] & 0x3FF)' true' 0' 9);                          diffY = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FFF)' true' 0' 9);                          diffZ = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 0' 9);                            vector.X += (diffX / 8);                          vector.Y += (diffY / 8);                          vector.Z += (diffZ / 8);                            GL.Vertex3(vector);                          break;                      #endregion                        case GeometryCmd.COLOR:                          // Convert the param to RGB555 color                          int r = (int)(geoCmd[i].param[0] & 0x1F);                          int g = (int)((geoCmd[i].param[0] >> 5) & 0x1F);                          int b = (int)((geoCmd[i].param[0] >> 10) & 0x1F);                            GL.Color3((float)r / 31.0f' (float)g / 31.0f' (float)b / 31.0f);                          break;                      case GeometryCmd.POLYGON_ATTR:                          break;                        #region Texture attributes                      case GeometryCmd.TEXCOORD:                          double s' t;                          s = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 11' 4);                          t = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 11' 4);                          GL.TexCoord2(s' t);                          break;                        case GeometryCmd.TEXIMAGE_PARAM:                          break;                      case GeometryCmd.PLTT_BASE:                          break;                      #endregion                        case GeometryCmd.DIF_AMB:                          break;                      case GeometryCmd.SPE_EMI:                          break;                      case GeometryCmd.LIGHT_VECTOR:                          break;                      case GeometryCmd.LIGHT_COLOR:                          break;                      case GeometryCmd.SHININESS:                          break;                        case GeometryCmd.NORMAL:                          float x' y' z;                          x = Get_Double((int)(geoCmd[i].param[0] & 0x3FFF)' true' 0' 9);                          y = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FFF)' true' 0' 9);                          z = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 0' 9);                            // Multiplay by the directional matrix                          GL.Normal3(x' y' z);                          break;                        case GeometryCmd.BEGIN_VTXS:                          if (geoCmd[i].param[0] == 0)                              GL.Begin(BeginMode.Triangles);                          else if (geoCmd[i].param[0] == 1)                              GL.Begin(BeginMode.Quads);                          else if (geoCmd[i].param[0] == 2)                              GL.Begin(BeginMode.TriangleStrip);                          else if (geoCmd[i].param[0] == 3)                              GL.Begin(BeginMode.QuadStrip);                          break;                      case GeometryCmd.END_VTXS:                          GL.End();                          break;                        case GeometryCmd.SWAP_BUFFERS:                          break;                      case GeometryCmd.VIEWPORT:                          break;                      case GeometryCmd.BOX_TEST:                          break;                      case GeometryCmd.POS_TEST:                          break;                      case GeometryCmd.VEC_TEST:                          break;                      default:                          break;                  }
Magic Number,_3DModels,BMD0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BMD0.cs,GeometryCommands,The following statement contains a magic number: switch ((GeometryCmd)geoCmd[i].cmd)                  {                      case GeometryCmd.NOP:                          break;                      case GeometryCmd.MTX_MODE:                          break;                      case GeometryCmd.MTX_PUSH:                          break;                      case GeometryCmd.MTX_POP:                          break;                      case GeometryCmd.MTX_STORE:                          break;                      case GeometryCmd.MTX_RESTORE:                          break;                      case GeometryCmd.MTX_IDENTITY:                          break;                      case GeometryCmd.MTX_LOAD_4x4:                          break;                      case GeometryCmd.MTX_LOAD_4x3:                          break;                      case GeometryCmd.MTX_MULT_4x4:                          break;                      case GeometryCmd.MTX_MULT_4x3:                          break;                      case GeometryCmd.MTX_MULT_3x3:                          break;                      case GeometryCmd.MTX_SCALE:                          break;                      case GeometryCmd.MTX_TRANS:                          break;                        #region Vertex commands                      // Multiply by the clipmatrix                      case GeometryCmd.VTX_16:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Y = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[1] & 0xFFFF)' true' 3' 12);                            GL.Vertex3(vector);                          break;                        case GeometryCmd.VTX_10:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0x3FF)' true' 3' 6);                          vector.Y = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FF)' true' 3' 6);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 3' 6);                            GL.Vertex3(vector);                          break;                        case GeometryCmd.VTX_XY:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Y = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_XZ:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_YZ:                          vector.Y = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_DIFF:                          float diffX' diffY' diffZ;                            diffX = Get_Double((int)(geoCmd[i].param[0] & 0x3FF)' true' 0' 9);                          diffY = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FFF)' true' 0' 9);                          diffZ = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 0' 9);                            vector.X += (diffX / 8);                          vector.Y += (diffY / 8);                          vector.Z += (diffZ / 8);                            GL.Vertex3(vector);                          break;                      #endregion                        case GeometryCmd.COLOR:                          // Convert the param to RGB555 color                          int r = (int)(geoCmd[i].param[0] & 0x1F);                          int g = (int)((geoCmd[i].param[0] >> 5) & 0x1F);                          int b = (int)((geoCmd[i].param[0] >> 10) & 0x1F);                            GL.Color3((float)r / 31.0f' (float)g / 31.0f' (float)b / 31.0f);                          break;                      case GeometryCmd.POLYGON_ATTR:                          break;                        #region Texture attributes                      case GeometryCmd.TEXCOORD:                          double s' t;                          s = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 11' 4);                          t = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 11' 4);                          GL.TexCoord2(s' t);                          break;                        case GeometryCmd.TEXIMAGE_PARAM:                          break;                      case GeometryCmd.PLTT_BASE:                          break;                      #endregion                        case GeometryCmd.DIF_AMB:                          break;                      case GeometryCmd.SPE_EMI:                          break;                      case GeometryCmd.LIGHT_VECTOR:                          break;                      case GeometryCmd.LIGHT_COLOR:                          break;                      case GeometryCmd.SHININESS:                          break;                        case GeometryCmd.NORMAL:                          float x' y' z;                          x = Get_Double((int)(geoCmd[i].param[0] & 0x3FFF)' true' 0' 9);                          y = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FFF)' true' 0' 9);                          z = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 0' 9);                            // Multiplay by the directional matrix                          GL.Normal3(x' y' z);                          break;                        case GeometryCmd.BEGIN_VTXS:                          if (geoCmd[i].param[0] == 0)                              GL.Begin(BeginMode.Triangles);                          else if (geoCmd[i].param[0] == 1)                              GL.Begin(BeginMode.Quads);                          else if (geoCmd[i].param[0] == 2)                              GL.Begin(BeginMode.TriangleStrip);                          else if (geoCmd[i].param[0] == 3)                              GL.Begin(BeginMode.QuadStrip);                          break;                      case GeometryCmd.END_VTXS:                          GL.End();                          break;                        case GeometryCmd.SWAP_BUFFERS:                          break;                      case GeometryCmd.VIEWPORT:                          break;                      case GeometryCmd.BOX_TEST:                          break;                      case GeometryCmd.POS_TEST:                          break;                      case GeometryCmd.VEC_TEST:                          break;                      default:                          break;                  }
Magic Number,_3DModels,BMD0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BMD0.cs,GeometryCommands,The following statement contains a magic number: switch ((GeometryCmd)geoCmd[i].cmd)                  {                      case GeometryCmd.NOP:                          break;                      case GeometryCmd.MTX_MODE:                          break;                      case GeometryCmd.MTX_PUSH:                          break;                      case GeometryCmd.MTX_POP:                          break;                      case GeometryCmd.MTX_STORE:                          break;                      case GeometryCmd.MTX_RESTORE:                          break;                      case GeometryCmd.MTX_IDENTITY:                          break;                      case GeometryCmd.MTX_LOAD_4x4:                          break;                      case GeometryCmd.MTX_LOAD_4x3:                          break;                      case GeometryCmd.MTX_MULT_4x4:                          break;                      case GeometryCmd.MTX_MULT_4x3:                          break;                      case GeometryCmd.MTX_MULT_3x3:                          break;                      case GeometryCmd.MTX_SCALE:                          break;                      case GeometryCmd.MTX_TRANS:                          break;                        #region Vertex commands                      // Multiply by the clipmatrix                      case GeometryCmd.VTX_16:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Y = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[1] & 0xFFFF)' true' 3' 12);                            GL.Vertex3(vector);                          break;                        case GeometryCmd.VTX_10:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0x3FF)' true' 3' 6);                          vector.Y = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FF)' true' 3' 6);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 3' 6);                            GL.Vertex3(vector);                          break;                        case GeometryCmd.VTX_XY:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Y = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_XZ:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_YZ:                          vector.Y = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_DIFF:                          float diffX' diffY' diffZ;                            diffX = Get_Double((int)(geoCmd[i].param[0] & 0x3FF)' true' 0' 9);                          diffY = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FFF)' true' 0' 9);                          diffZ = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 0' 9);                            vector.X += (diffX / 8);                          vector.Y += (diffY / 8);                          vector.Z += (diffZ / 8);                            GL.Vertex3(vector);                          break;                      #endregion                        case GeometryCmd.COLOR:                          // Convert the param to RGB555 color                          int r = (int)(geoCmd[i].param[0] & 0x1F);                          int g = (int)((geoCmd[i].param[0] >> 5) & 0x1F);                          int b = (int)((geoCmd[i].param[0] >> 10) & 0x1F);                            GL.Color3((float)r / 31.0f' (float)g / 31.0f' (float)b / 31.0f);                          break;                      case GeometryCmd.POLYGON_ATTR:                          break;                        #region Texture attributes                      case GeometryCmd.TEXCOORD:                          double s' t;                          s = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 11' 4);                          t = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 11' 4);                          GL.TexCoord2(s' t);                          break;                        case GeometryCmd.TEXIMAGE_PARAM:                          break;                      case GeometryCmd.PLTT_BASE:                          break;                      #endregion                        case GeometryCmd.DIF_AMB:                          break;                      case GeometryCmd.SPE_EMI:                          break;                      case GeometryCmd.LIGHT_VECTOR:                          break;                      case GeometryCmd.LIGHT_COLOR:                          break;                      case GeometryCmd.SHININESS:                          break;                        case GeometryCmd.NORMAL:                          float x' y' z;                          x = Get_Double((int)(geoCmd[i].param[0] & 0x3FFF)' true' 0' 9);                          y = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FFF)' true' 0' 9);                          z = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 0' 9);                            // Multiplay by the directional matrix                          GL.Normal3(x' y' z);                          break;                        case GeometryCmd.BEGIN_VTXS:                          if (geoCmd[i].param[0] == 0)                              GL.Begin(BeginMode.Triangles);                          else if (geoCmd[i].param[0] == 1)                              GL.Begin(BeginMode.Quads);                          else if (geoCmd[i].param[0] == 2)                              GL.Begin(BeginMode.TriangleStrip);                          else if (geoCmd[i].param[0] == 3)                              GL.Begin(BeginMode.QuadStrip);                          break;                      case GeometryCmd.END_VTXS:                          GL.End();                          break;                        case GeometryCmd.SWAP_BUFFERS:                          break;                      case GeometryCmd.VIEWPORT:                          break;                      case GeometryCmd.BOX_TEST:                          break;                      case GeometryCmd.POS_TEST:                          break;                      case GeometryCmd.VEC_TEST:                          break;                      default:                          break;                  }
Magic Number,_3DModels,BMD0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BMD0.cs,GeometryCommands,The following statement contains a magic number: switch ((GeometryCmd)geoCmd[i].cmd)                  {                      case GeometryCmd.NOP:                          break;                      case GeometryCmd.MTX_MODE:                          break;                      case GeometryCmd.MTX_PUSH:                          break;                      case GeometryCmd.MTX_POP:                          break;                      case GeometryCmd.MTX_STORE:                          break;                      case GeometryCmd.MTX_RESTORE:                          break;                      case GeometryCmd.MTX_IDENTITY:                          break;                      case GeometryCmd.MTX_LOAD_4x4:                          break;                      case GeometryCmd.MTX_LOAD_4x3:                          break;                      case GeometryCmd.MTX_MULT_4x4:                          break;                      case GeometryCmd.MTX_MULT_4x3:                          break;                      case GeometryCmd.MTX_MULT_3x3:                          break;                      case GeometryCmd.MTX_SCALE:                          break;                      case GeometryCmd.MTX_TRANS:                          break;                        #region Vertex commands                      // Multiply by the clipmatrix                      case GeometryCmd.VTX_16:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Y = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[1] & 0xFFFF)' true' 3' 12);                            GL.Vertex3(vector);                          break;                        case GeometryCmd.VTX_10:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0x3FF)' true' 3' 6);                          vector.Y = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FF)' true' 3' 6);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 3' 6);                            GL.Vertex3(vector);                          break;                        case GeometryCmd.VTX_XY:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Y = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_XZ:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_YZ:                          vector.Y = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_DIFF:                          float diffX' diffY' diffZ;                            diffX = Get_Double((int)(geoCmd[i].param[0] & 0x3FF)' true' 0' 9);                          diffY = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FFF)' true' 0' 9);                          diffZ = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 0' 9);                            vector.X += (diffX / 8);                          vector.Y += (diffY / 8);                          vector.Z += (diffZ / 8);                            GL.Vertex3(vector);                          break;                      #endregion                        case GeometryCmd.COLOR:                          // Convert the param to RGB555 color                          int r = (int)(geoCmd[i].param[0] & 0x1F);                          int g = (int)((geoCmd[i].param[0] >> 5) & 0x1F);                          int b = (int)((geoCmd[i].param[0] >> 10) & 0x1F);                            GL.Color3((float)r / 31.0f' (float)g / 31.0f' (float)b / 31.0f);                          break;                      case GeometryCmd.POLYGON_ATTR:                          break;                        #region Texture attributes                      case GeometryCmd.TEXCOORD:                          double s' t;                          s = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 11' 4);                          t = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 11' 4);                          GL.TexCoord2(s' t);                          break;                        case GeometryCmd.TEXIMAGE_PARAM:                          break;                      case GeometryCmd.PLTT_BASE:                          break;                      #endregion                        case GeometryCmd.DIF_AMB:                          break;                      case GeometryCmd.SPE_EMI:                          break;                      case GeometryCmd.LIGHT_VECTOR:                          break;                      case GeometryCmd.LIGHT_COLOR:                          break;                      case GeometryCmd.SHININESS:                          break;                        case GeometryCmd.NORMAL:                          float x' y' z;                          x = Get_Double((int)(geoCmd[i].param[0] & 0x3FFF)' true' 0' 9);                          y = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FFF)' true' 0' 9);                          z = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 0' 9);                            // Multiplay by the directional matrix                          GL.Normal3(x' y' z);                          break;                        case GeometryCmd.BEGIN_VTXS:                          if (geoCmd[i].param[0] == 0)                              GL.Begin(BeginMode.Triangles);                          else if (geoCmd[i].param[0] == 1)                              GL.Begin(BeginMode.Quads);                          else if (geoCmd[i].param[0] == 2)                              GL.Begin(BeginMode.TriangleStrip);                          else if (geoCmd[i].param[0] == 3)                              GL.Begin(BeginMode.QuadStrip);                          break;                      case GeometryCmd.END_VTXS:                          GL.End();                          break;                        case GeometryCmd.SWAP_BUFFERS:                          break;                      case GeometryCmd.VIEWPORT:                          break;                      case GeometryCmd.BOX_TEST:                          break;                      case GeometryCmd.POS_TEST:                          break;                      case GeometryCmd.VEC_TEST:                          break;                      default:                          break;                  }
Magic Number,_3DModels,BMD0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BMD0.cs,GeometryCommands,The following statement contains a magic number: switch ((GeometryCmd)geoCmd[i].cmd)                  {                      case GeometryCmd.NOP:                          break;                      case GeometryCmd.MTX_MODE:                          break;                      case GeometryCmd.MTX_PUSH:                          break;                      case GeometryCmd.MTX_POP:                          break;                      case GeometryCmd.MTX_STORE:                          break;                      case GeometryCmd.MTX_RESTORE:                          break;                      case GeometryCmd.MTX_IDENTITY:                          break;                      case GeometryCmd.MTX_LOAD_4x4:                          break;                      case GeometryCmd.MTX_LOAD_4x3:                          break;                      case GeometryCmd.MTX_MULT_4x4:                          break;                      case GeometryCmd.MTX_MULT_4x3:                          break;                      case GeometryCmd.MTX_MULT_3x3:                          break;                      case GeometryCmd.MTX_SCALE:                          break;                      case GeometryCmd.MTX_TRANS:                          break;                        #region Vertex commands                      // Multiply by the clipmatrix                      case GeometryCmd.VTX_16:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Y = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[1] & 0xFFFF)' true' 3' 12);                            GL.Vertex3(vector);                          break;                        case GeometryCmd.VTX_10:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0x3FF)' true' 3' 6);                          vector.Y = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FF)' true' 3' 6);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 3' 6);                            GL.Vertex3(vector);                          break;                        case GeometryCmd.VTX_XY:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Y = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_XZ:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_YZ:                          vector.Y = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_DIFF:                          float diffX' diffY' diffZ;                            diffX = Get_Double((int)(geoCmd[i].param[0] & 0x3FF)' true' 0' 9);                          diffY = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FFF)' true' 0' 9);                          diffZ = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 0' 9);                            vector.X += (diffX / 8);                          vector.Y += (diffY / 8);                          vector.Z += (diffZ / 8);                            GL.Vertex3(vector);                          break;                      #endregion                        case GeometryCmd.COLOR:                          // Convert the param to RGB555 color                          int r = (int)(geoCmd[i].param[0] & 0x1F);                          int g = (int)((geoCmd[i].param[0] >> 5) & 0x1F);                          int b = (int)((geoCmd[i].param[0] >> 10) & 0x1F);                            GL.Color3((float)r / 31.0f' (float)g / 31.0f' (float)b / 31.0f);                          break;                      case GeometryCmd.POLYGON_ATTR:                          break;                        #region Texture attributes                      case GeometryCmd.TEXCOORD:                          double s' t;                          s = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 11' 4);                          t = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 11' 4);                          GL.TexCoord2(s' t);                          break;                        case GeometryCmd.TEXIMAGE_PARAM:                          break;                      case GeometryCmd.PLTT_BASE:                          break;                      #endregion                        case GeometryCmd.DIF_AMB:                          break;                      case GeometryCmd.SPE_EMI:                          break;                      case GeometryCmd.LIGHT_VECTOR:                          break;                      case GeometryCmd.LIGHT_COLOR:                          break;                      case GeometryCmd.SHININESS:                          break;                        case GeometryCmd.NORMAL:                          float x' y' z;                          x = Get_Double((int)(geoCmd[i].param[0] & 0x3FFF)' true' 0' 9);                          y = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FFF)' true' 0' 9);                          z = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 0' 9);                            // Multiplay by the directional matrix                          GL.Normal3(x' y' z);                          break;                        case GeometryCmd.BEGIN_VTXS:                          if (geoCmd[i].param[0] == 0)                              GL.Begin(BeginMode.Triangles);                          else if (geoCmd[i].param[0] == 1)                              GL.Begin(BeginMode.Quads);                          else if (geoCmd[i].param[0] == 2)                              GL.Begin(BeginMode.TriangleStrip);                          else if (geoCmd[i].param[0] == 3)                              GL.Begin(BeginMode.QuadStrip);                          break;                      case GeometryCmd.END_VTXS:                          GL.End();                          break;                        case GeometryCmd.SWAP_BUFFERS:                          break;                      case GeometryCmd.VIEWPORT:                          break;                      case GeometryCmd.BOX_TEST:                          break;                      case GeometryCmd.POS_TEST:                          break;                      case GeometryCmd.VEC_TEST:                          break;                      default:                          break;                  }
Magic Number,_3DModels,BMD0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BMD0.cs,GeometryCommands,The following statement contains a magic number: switch ((GeometryCmd)geoCmd[i].cmd)                  {                      case GeometryCmd.NOP:                          break;                      case GeometryCmd.MTX_MODE:                          break;                      case GeometryCmd.MTX_PUSH:                          break;                      case GeometryCmd.MTX_POP:                          break;                      case GeometryCmd.MTX_STORE:                          break;                      case GeometryCmd.MTX_RESTORE:                          break;                      case GeometryCmd.MTX_IDENTITY:                          break;                      case GeometryCmd.MTX_LOAD_4x4:                          break;                      case GeometryCmd.MTX_LOAD_4x3:                          break;                      case GeometryCmd.MTX_MULT_4x4:                          break;                      case GeometryCmd.MTX_MULT_4x3:                          break;                      case GeometryCmd.MTX_MULT_3x3:                          break;                      case GeometryCmd.MTX_SCALE:                          break;                      case GeometryCmd.MTX_TRANS:                          break;                        #region Vertex commands                      // Multiply by the clipmatrix                      case GeometryCmd.VTX_16:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Y = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[1] & 0xFFFF)' true' 3' 12);                            GL.Vertex3(vector);                          break;                        case GeometryCmd.VTX_10:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0x3FF)' true' 3' 6);                          vector.Y = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FF)' true' 3' 6);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 3' 6);                            GL.Vertex3(vector);                          break;                        case GeometryCmd.VTX_XY:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Y = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_XZ:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_YZ:                          vector.Y = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_DIFF:                          float diffX' diffY' diffZ;                            diffX = Get_Double((int)(geoCmd[i].param[0] & 0x3FF)' true' 0' 9);                          diffY = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FFF)' true' 0' 9);                          diffZ = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 0' 9);                            vector.X += (diffX / 8);                          vector.Y += (diffY / 8);                          vector.Z += (diffZ / 8);                            GL.Vertex3(vector);                          break;                      #endregion                        case GeometryCmd.COLOR:                          // Convert the param to RGB555 color                          int r = (int)(geoCmd[i].param[0] & 0x1F);                          int g = (int)((geoCmd[i].param[0] >> 5) & 0x1F);                          int b = (int)((geoCmd[i].param[0] >> 10) & 0x1F);                            GL.Color3((float)r / 31.0f' (float)g / 31.0f' (float)b / 31.0f);                          break;                      case GeometryCmd.POLYGON_ATTR:                          break;                        #region Texture attributes                      case GeometryCmd.TEXCOORD:                          double s' t;                          s = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 11' 4);                          t = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 11' 4);                          GL.TexCoord2(s' t);                          break;                        case GeometryCmd.TEXIMAGE_PARAM:                          break;                      case GeometryCmd.PLTT_BASE:                          break;                      #endregion                        case GeometryCmd.DIF_AMB:                          break;                      case GeometryCmd.SPE_EMI:                          break;                      case GeometryCmd.LIGHT_VECTOR:                          break;                      case GeometryCmd.LIGHT_COLOR:                          break;                      case GeometryCmd.SHININESS:                          break;                        case GeometryCmd.NORMAL:                          float x' y' z;                          x = Get_Double((int)(geoCmd[i].param[0] & 0x3FFF)' true' 0' 9);                          y = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FFF)' true' 0' 9);                          z = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 0' 9);                            // Multiplay by the directional matrix                          GL.Normal3(x' y' z);                          break;                        case GeometryCmd.BEGIN_VTXS:                          if (geoCmd[i].param[0] == 0)                              GL.Begin(BeginMode.Triangles);                          else if (geoCmd[i].param[0] == 1)                              GL.Begin(BeginMode.Quads);                          else if (geoCmd[i].param[0] == 2)                              GL.Begin(BeginMode.TriangleStrip);                          else if (geoCmd[i].param[0] == 3)                              GL.Begin(BeginMode.QuadStrip);                          break;                      case GeometryCmd.END_VTXS:                          GL.End();                          break;                        case GeometryCmd.SWAP_BUFFERS:                          break;                      case GeometryCmd.VIEWPORT:                          break;                      case GeometryCmd.BOX_TEST:                          break;                      case GeometryCmd.POS_TEST:                          break;                      case GeometryCmd.VEC_TEST:                          break;                      default:                          break;                  }
Magic Number,_3DModels,BMD0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BMD0.cs,GeometryCommands,The following statement contains a magic number: switch ((GeometryCmd)geoCmd[i].cmd)                  {                      case GeometryCmd.NOP:                          break;                      case GeometryCmd.MTX_MODE:                          break;                      case GeometryCmd.MTX_PUSH:                          break;                      case GeometryCmd.MTX_POP:                          break;                      case GeometryCmd.MTX_STORE:                          break;                      case GeometryCmd.MTX_RESTORE:                          break;                      case GeometryCmd.MTX_IDENTITY:                          break;                      case GeometryCmd.MTX_LOAD_4x4:                          break;                      case GeometryCmd.MTX_LOAD_4x3:                          break;                      case GeometryCmd.MTX_MULT_4x4:                          break;                      case GeometryCmd.MTX_MULT_4x3:                          break;                      case GeometryCmd.MTX_MULT_3x3:                          break;                      case GeometryCmd.MTX_SCALE:                          break;                      case GeometryCmd.MTX_TRANS:                          break;                        #region Vertex commands                      // Multiply by the clipmatrix                      case GeometryCmd.VTX_16:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Y = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[1] & 0xFFFF)' true' 3' 12);                            GL.Vertex3(vector);                          break;                        case GeometryCmd.VTX_10:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0x3FF)' true' 3' 6);                          vector.Y = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FF)' true' 3' 6);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 3' 6);                            GL.Vertex3(vector);                          break;                        case GeometryCmd.VTX_XY:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Y = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_XZ:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_YZ:                          vector.Y = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_DIFF:                          float diffX' diffY' diffZ;                            diffX = Get_Double((int)(geoCmd[i].param[0] & 0x3FF)' true' 0' 9);                          diffY = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FFF)' true' 0' 9);                          diffZ = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 0' 9);                            vector.X += (diffX / 8);                          vector.Y += (diffY / 8);                          vector.Z += (diffZ / 8);                            GL.Vertex3(vector);                          break;                      #endregion                        case GeometryCmd.COLOR:                          // Convert the param to RGB555 color                          int r = (int)(geoCmd[i].param[0] & 0x1F);                          int g = (int)((geoCmd[i].param[0] >> 5) & 0x1F);                          int b = (int)((geoCmd[i].param[0] >> 10) & 0x1F);                            GL.Color3((float)r / 31.0f' (float)g / 31.0f' (float)b / 31.0f);                          break;                      case GeometryCmd.POLYGON_ATTR:                          break;                        #region Texture attributes                      case GeometryCmd.TEXCOORD:                          double s' t;                          s = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 11' 4);                          t = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 11' 4);                          GL.TexCoord2(s' t);                          break;                        case GeometryCmd.TEXIMAGE_PARAM:                          break;                      case GeometryCmd.PLTT_BASE:                          break;                      #endregion                        case GeometryCmd.DIF_AMB:                          break;                      case GeometryCmd.SPE_EMI:                          break;                      case GeometryCmd.LIGHT_VECTOR:                          break;                      case GeometryCmd.LIGHT_COLOR:                          break;                      case GeometryCmd.SHININESS:                          break;                        case GeometryCmd.NORMAL:                          float x' y' z;                          x = Get_Double((int)(geoCmd[i].param[0] & 0x3FFF)' true' 0' 9);                          y = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FFF)' true' 0' 9);                          z = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 0' 9);                            // Multiplay by the directional matrix                          GL.Normal3(x' y' z);                          break;                        case GeometryCmd.BEGIN_VTXS:                          if (geoCmd[i].param[0] == 0)                              GL.Begin(BeginMode.Triangles);                          else if (geoCmd[i].param[0] == 1)                              GL.Begin(BeginMode.Quads);                          else if (geoCmd[i].param[0] == 2)                              GL.Begin(BeginMode.TriangleStrip);                          else if (geoCmd[i].param[0] == 3)                              GL.Begin(BeginMode.QuadStrip);                          break;                      case GeometryCmd.END_VTXS:                          GL.End();                          break;                        case GeometryCmd.SWAP_BUFFERS:                          break;                      case GeometryCmd.VIEWPORT:                          break;                      case GeometryCmd.BOX_TEST:                          break;                      case GeometryCmd.POS_TEST:                          break;                      case GeometryCmd.VEC_TEST:                          break;                      default:                          break;                  }
Magic Number,_3DModels,BMD0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BMD0.cs,GeometryCommands,The following statement contains a magic number: switch ((GeometryCmd)geoCmd[i].cmd)                  {                      case GeometryCmd.NOP:                          break;                      case GeometryCmd.MTX_MODE:                          break;                      case GeometryCmd.MTX_PUSH:                          break;                      case GeometryCmd.MTX_POP:                          break;                      case GeometryCmd.MTX_STORE:                          break;                      case GeometryCmd.MTX_RESTORE:                          break;                      case GeometryCmd.MTX_IDENTITY:                          break;                      case GeometryCmd.MTX_LOAD_4x4:                          break;                      case GeometryCmd.MTX_LOAD_4x3:                          break;                      case GeometryCmd.MTX_MULT_4x4:                          break;                      case GeometryCmd.MTX_MULT_4x3:                          break;                      case GeometryCmd.MTX_MULT_3x3:                          break;                      case GeometryCmd.MTX_SCALE:                          break;                      case GeometryCmd.MTX_TRANS:                          break;                        #region Vertex commands                      // Multiply by the clipmatrix                      case GeometryCmd.VTX_16:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Y = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[1] & 0xFFFF)' true' 3' 12);                            GL.Vertex3(vector);                          break;                        case GeometryCmd.VTX_10:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0x3FF)' true' 3' 6);                          vector.Y = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FF)' true' 3' 6);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 3' 6);                            GL.Vertex3(vector);                          break;                        case GeometryCmd.VTX_XY:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Y = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_XZ:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_YZ:                          vector.Y = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_DIFF:                          float diffX' diffY' diffZ;                            diffX = Get_Double((int)(geoCmd[i].param[0] & 0x3FF)' true' 0' 9);                          diffY = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FFF)' true' 0' 9);                          diffZ = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 0' 9);                            vector.X += (diffX / 8);                          vector.Y += (diffY / 8);                          vector.Z += (diffZ / 8);                            GL.Vertex3(vector);                          break;                      #endregion                        case GeometryCmd.COLOR:                          // Convert the param to RGB555 color                          int r = (int)(geoCmd[i].param[0] & 0x1F);                          int g = (int)((geoCmd[i].param[0] >> 5) & 0x1F);                          int b = (int)((geoCmd[i].param[0] >> 10) & 0x1F);                            GL.Color3((float)r / 31.0f' (float)g / 31.0f' (float)b / 31.0f);                          break;                      case GeometryCmd.POLYGON_ATTR:                          break;                        #region Texture attributes                      case GeometryCmd.TEXCOORD:                          double s' t;                          s = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 11' 4);                          t = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 11' 4);                          GL.TexCoord2(s' t);                          break;                        case GeometryCmd.TEXIMAGE_PARAM:                          break;                      case GeometryCmd.PLTT_BASE:                          break;                      #endregion                        case GeometryCmd.DIF_AMB:                          break;                      case GeometryCmd.SPE_EMI:                          break;                      case GeometryCmd.LIGHT_VECTOR:                          break;                      case GeometryCmd.LIGHT_COLOR:                          break;                      case GeometryCmd.SHININESS:                          break;                        case GeometryCmd.NORMAL:                          float x' y' z;                          x = Get_Double((int)(geoCmd[i].param[0] & 0x3FFF)' true' 0' 9);                          y = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FFF)' true' 0' 9);                          z = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 0' 9);                            // Multiplay by the directional matrix                          GL.Normal3(x' y' z);                          break;                        case GeometryCmd.BEGIN_VTXS:                          if (geoCmd[i].param[0] == 0)                              GL.Begin(BeginMode.Triangles);                          else if (geoCmd[i].param[0] == 1)                              GL.Begin(BeginMode.Quads);                          else if (geoCmd[i].param[0] == 2)                              GL.Begin(BeginMode.TriangleStrip);                          else if (geoCmd[i].param[0] == 3)                              GL.Begin(BeginMode.QuadStrip);                          break;                      case GeometryCmd.END_VTXS:                          GL.End();                          break;                        case GeometryCmd.SWAP_BUFFERS:                          break;                      case GeometryCmd.VIEWPORT:                          break;                      case GeometryCmd.BOX_TEST:                          break;                      case GeometryCmd.POS_TEST:                          break;                      case GeometryCmd.VEC_TEST:                          break;                      default:                          break;                  }
Magic Number,_3DModels,BMD0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BMD0.cs,GeometryCommands,The following statement contains a magic number: switch ((GeometryCmd)geoCmd[i].cmd)                  {                      case GeometryCmd.NOP:                          break;                      case GeometryCmd.MTX_MODE:                          break;                      case GeometryCmd.MTX_PUSH:                          break;                      case GeometryCmd.MTX_POP:                          break;                      case GeometryCmd.MTX_STORE:                          break;                      case GeometryCmd.MTX_RESTORE:                          break;                      case GeometryCmd.MTX_IDENTITY:                          break;                      case GeometryCmd.MTX_LOAD_4x4:                          break;                      case GeometryCmd.MTX_LOAD_4x3:                          break;                      case GeometryCmd.MTX_MULT_4x4:                          break;                      case GeometryCmd.MTX_MULT_4x3:                          break;                      case GeometryCmd.MTX_MULT_3x3:                          break;                      case GeometryCmd.MTX_SCALE:                          break;                      case GeometryCmd.MTX_TRANS:                          break;                        #region Vertex commands                      // Multiply by the clipmatrix                      case GeometryCmd.VTX_16:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Y = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[1] & 0xFFFF)' true' 3' 12);                            GL.Vertex3(vector);                          break;                        case GeometryCmd.VTX_10:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0x3FF)' true' 3' 6);                          vector.Y = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FF)' true' 3' 6);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 3' 6);                            GL.Vertex3(vector);                          break;                        case GeometryCmd.VTX_XY:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Y = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_XZ:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_YZ:                          vector.Y = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_DIFF:                          float diffX' diffY' diffZ;                            diffX = Get_Double((int)(geoCmd[i].param[0] & 0x3FF)' true' 0' 9);                          diffY = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FFF)' true' 0' 9);                          diffZ = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 0' 9);                            vector.X += (diffX / 8);                          vector.Y += (diffY / 8);                          vector.Z += (diffZ / 8);                            GL.Vertex3(vector);                          break;                      #endregion                        case GeometryCmd.COLOR:                          // Convert the param to RGB555 color                          int r = (int)(geoCmd[i].param[0] & 0x1F);                          int g = (int)((geoCmd[i].param[0] >> 5) & 0x1F);                          int b = (int)((geoCmd[i].param[0] >> 10) & 0x1F);                            GL.Color3((float)r / 31.0f' (float)g / 31.0f' (float)b / 31.0f);                          break;                      case GeometryCmd.POLYGON_ATTR:                          break;                        #region Texture attributes                      case GeometryCmd.TEXCOORD:                          double s' t;                          s = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 11' 4);                          t = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 11' 4);                          GL.TexCoord2(s' t);                          break;                        case GeometryCmd.TEXIMAGE_PARAM:                          break;                      case GeometryCmd.PLTT_BASE:                          break;                      #endregion                        case GeometryCmd.DIF_AMB:                          break;                      case GeometryCmd.SPE_EMI:                          break;                      case GeometryCmd.LIGHT_VECTOR:                          break;                      case GeometryCmd.LIGHT_COLOR:                          break;                      case GeometryCmd.SHININESS:                          break;                        case GeometryCmd.NORMAL:                          float x' y' z;                          x = Get_Double((int)(geoCmd[i].param[0] & 0x3FFF)' true' 0' 9);                          y = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FFF)' true' 0' 9);                          z = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 0' 9);                            // Multiplay by the directional matrix                          GL.Normal3(x' y' z);                          break;                        case GeometryCmd.BEGIN_VTXS:                          if (geoCmd[i].param[0] == 0)                              GL.Begin(BeginMode.Triangles);                          else if (geoCmd[i].param[0] == 1)                              GL.Begin(BeginMode.Quads);                          else if (geoCmd[i].param[0] == 2)                              GL.Begin(BeginMode.TriangleStrip);                          else if (geoCmd[i].param[0] == 3)                              GL.Begin(BeginMode.QuadStrip);                          break;                      case GeometryCmd.END_VTXS:                          GL.End();                          break;                        case GeometryCmd.SWAP_BUFFERS:                          break;                      case GeometryCmd.VIEWPORT:                          break;                      case GeometryCmd.BOX_TEST:                          break;                      case GeometryCmd.POS_TEST:                          break;                      case GeometryCmd.VEC_TEST:                          break;                      default:                          break;                  }
Magic Number,_3DModels,BMD0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BMD0.cs,GeometryCommands,The following statement contains a magic number: switch ((GeometryCmd)geoCmd[i].cmd)                  {                      case GeometryCmd.NOP:                          break;                      case GeometryCmd.MTX_MODE:                          break;                      case GeometryCmd.MTX_PUSH:                          break;                      case GeometryCmd.MTX_POP:                          break;                      case GeometryCmd.MTX_STORE:                          break;                      case GeometryCmd.MTX_RESTORE:                          break;                      case GeometryCmd.MTX_IDENTITY:                          break;                      case GeometryCmd.MTX_LOAD_4x4:                          break;                      case GeometryCmd.MTX_LOAD_4x3:                          break;                      case GeometryCmd.MTX_MULT_4x4:                          break;                      case GeometryCmd.MTX_MULT_4x3:                          break;                      case GeometryCmd.MTX_MULT_3x3:                          break;                      case GeometryCmd.MTX_SCALE:                          break;                      case GeometryCmd.MTX_TRANS:                          break;                        #region Vertex commands                      // Multiply by the clipmatrix                      case GeometryCmd.VTX_16:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Y = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[1] & 0xFFFF)' true' 3' 12);                            GL.Vertex3(vector);                          break;                        case GeometryCmd.VTX_10:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0x3FF)' true' 3' 6);                          vector.Y = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FF)' true' 3' 6);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 3' 6);                            GL.Vertex3(vector);                          break;                        case GeometryCmd.VTX_XY:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Y = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_XZ:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_YZ:                          vector.Y = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_DIFF:                          float diffX' diffY' diffZ;                            diffX = Get_Double((int)(geoCmd[i].param[0] & 0x3FF)' true' 0' 9);                          diffY = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FFF)' true' 0' 9);                          diffZ = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 0' 9);                            vector.X += (diffX / 8);                          vector.Y += (diffY / 8);                          vector.Z += (diffZ / 8);                            GL.Vertex3(vector);                          break;                      #endregion                        case GeometryCmd.COLOR:                          // Convert the param to RGB555 color                          int r = (int)(geoCmd[i].param[0] & 0x1F);                          int g = (int)((geoCmd[i].param[0] >> 5) & 0x1F);                          int b = (int)((geoCmd[i].param[0] >> 10) & 0x1F);                            GL.Color3((float)r / 31.0f' (float)g / 31.0f' (float)b / 31.0f);                          break;                      case GeometryCmd.POLYGON_ATTR:                          break;                        #region Texture attributes                      case GeometryCmd.TEXCOORD:                          double s' t;                          s = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 11' 4);                          t = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 11' 4);                          GL.TexCoord2(s' t);                          break;                        case GeometryCmd.TEXIMAGE_PARAM:                          break;                      case GeometryCmd.PLTT_BASE:                          break;                      #endregion                        case GeometryCmd.DIF_AMB:                          break;                      case GeometryCmd.SPE_EMI:                          break;                      case GeometryCmd.LIGHT_VECTOR:                          break;                      case GeometryCmd.LIGHT_COLOR:                          break;                      case GeometryCmd.SHININESS:                          break;                        case GeometryCmd.NORMAL:                          float x' y' z;                          x = Get_Double((int)(geoCmd[i].param[0] & 0x3FFF)' true' 0' 9);                          y = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FFF)' true' 0' 9);                          z = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 0' 9);                            // Multiplay by the directional matrix                          GL.Normal3(x' y' z);                          break;                        case GeometryCmd.BEGIN_VTXS:                          if (geoCmd[i].param[0] == 0)                              GL.Begin(BeginMode.Triangles);                          else if (geoCmd[i].param[0] == 1)                              GL.Begin(BeginMode.Quads);                          else if (geoCmd[i].param[0] == 2)                              GL.Begin(BeginMode.TriangleStrip);                          else if (geoCmd[i].param[0] == 3)                              GL.Begin(BeginMode.QuadStrip);                          break;                      case GeometryCmd.END_VTXS:                          GL.End();                          break;                        case GeometryCmd.SWAP_BUFFERS:                          break;                      case GeometryCmd.VIEWPORT:                          break;                      case GeometryCmd.BOX_TEST:                          break;                      case GeometryCmd.POS_TEST:                          break;                      case GeometryCmd.VEC_TEST:                          break;                      default:                          break;                  }
Magic Number,_3DModels,BMD0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BMD0.cs,GeometryCommands,The following statement contains a magic number: switch ((GeometryCmd)geoCmd[i].cmd)                  {                      case GeometryCmd.NOP:                          break;                      case GeometryCmd.MTX_MODE:                          break;                      case GeometryCmd.MTX_PUSH:                          break;                      case GeometryCmd.MTX_POP:                          break;                      case GeometryCmd.MTX_STORE:                          break;                      case GeometryCmd.MTX_RESTORE:                          break;                      case GeometryCmd.MTX_IDENTITY:                          break;                      case GeometryCmd.MTX_LOAD_4x4:                          break;                      case GeometryCmd.MTX_LOAD_4x3:                          break;                      case GeometryCmd.MTX_MULT_4x4:                          break;                      case GeometryCmd.MTX_MULT_4x3:                          break;                      case GeometryCmd.MTX_MULT_3x3:                          break;                      case GeometryCmd.MTX_SCALE:                          break;                      case GeometryCmd.MTX_TRANS:                          break;                        #region Vertex commands                      // Multiply by the clipmatrix                      case GeometryCmd.VTX_16:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Y = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[1] & 0xFFFF)' true' 3' 12);                            GL.Vertex3(vector);                          break;                        case GeometryCmd.VTX_10:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0x3FF)' true' 3' 6);                          vector.Y = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FF)' true' 3' 6);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 3' 6);                            GL.Vertex3(vector);                          break;                        case GeometryCmd.VTX_XY:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Y = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_XZ:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_YZ:                          vector.Y = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_DIFF:                          float diffX' diffY' diffZ;                            diffX = Get_Double((int)(geoCmd[i].param[0] & 0x3FF)' true' 0' 9);                          diffY = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FFF)' true' 0' 9);                          diffZ = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 0' 9);                            vector.X += (diffX / 8);                          vector.Y += (diffY / 8);                          vector.Z += (diffZ / 8);                            GL.Vertex3(vector);                          break;                      #endregion                        case GeometryCmd.COLOR:                          // Convert the param to RGB555 color                          int r = (int)(geoCmd[i].param[0] & 0x1F);                          int g = (int)((geoCmd[i].param[0] >> 5) & 0x1F);                          int b = (int)((geoCmd[i].param[0] >> 10) & 0x1F);                            GL.Color3((float)r / 31.0f' (float)g / 31.0f' (float)b / 31.0f);                          break;                      case GeometryCmd.POLYGON_ATTR:                          break;                        #region Texture attributes                      case GeometryCmd.TEXCOORD:                          double s' t;                          s = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 11' 4);                          t = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 11' 4);                          GL.TexCoord2(s' t);                          break;                        case GeometryCmd.TEXIMAGE_PARAM:                          break;                      case GeometryCmd.PLTT_BASE:                          break;                      #endregion                        case GeometryCmd.DIF_AMB:                          break;                      case GeometryCmd.SPE_EMI:                          break;                      case GeometryCmd.LIGHT_VECTOR:                          break;                      case GeometryCmd.LIGHT_COLOR:                          break;                      case GeometryCmd.SHININESS:                          break;                        case GeometryCmd.NORMAL:                          float x' y' z;                          x = Get_Double((int)(geoCmd[i].param[0] & 0x3FFF)' true' 0' 9);                          y = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FFF)' true' 0' 9);                          z = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 0' 9);                            // Multiplay by the directional matrix                          GL.Normal3(x' y' z);                          break;                        case GeometryCmd.BEGIN_VTXS:                          if (geoCmd[i].param[0] == 0)                              GL.Begin(BeginMode.Triangles);                          else if (geoCmd[i].param[0] == 1)                              GL.Begin(BeginMode.Quads);                          else if (geoCmd[i].param[0] == 2)                              GL.Begin(BeginMode.TriangleStrip);                          else if (geoCmd[i].param[0] == 3)                              GL.Begin(BeginMode.QuadStrip);                          break;                      case GeometryCmd.END_VTXS:                          GL.End();                          break;                        case GeometryCmd.SWAP_BUFFERS:                          break;                      case GeometryCmd.VIEWPORT:                          break;                      case GeometryCmd.BOX_TEST:                          break;                      case GeometryCmd.POS_TEST:                          break;                      case GeometryCmd.VEC_TEST:                          break;                      default:                          break;                  }
Magic Number,_3DModels,BMD0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BMD0.cs,GeometryCommands,The following statement contains a magic number: switch ((GeometryCmd)geoCmd[i].cmd)                  {                      case GeometryCmd.NOP:                          break;                      case GeometryCmd.MTX_MODE:                          break;                      case GeometryCmd.MTX_PUSH:                          break;                      case GeometryCmd.MTX_POP:                          break;                      case GeometryCmd.MTX_STORE:                          break;                      case GeometryCmd.MTX_RESTORE:                          break;                      case GeometryCmd.MTX_IDENTITY:                          break;                      case GeometryCmd.MTX_LOAD_4x4:                          break;                      case GeometryCmd.MTX_LOAD_4x3:                          break;                      case GeometryCmd.MTX_MULT_4x4:                          break;                      case GeometryCmd.MTX_MULT_4x3:                          break;                      case GeometryCmd.MTX_MULT_3x3:                          break;                      case GeometryCmd.MTX_SCALE:                          break;                      case GeometryCmd.MTX_TRANS:                          break;                        #region Vertex commands                      // Multiply by the clipmatrix                      case GeometryCmd.VTX_16:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Y = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[1] & 0xFFFF)' true' 3' 12);                            GL.Vertex3(vector);                          break;                        case GeometryCmd.VTX_10:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0x3FF)' true' 3' 6);                          vector.Y = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FF)' true' 3' 6);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 3' 6);                            GL.Vertex3(vector);                          break;                        case GeometryCmd.VTX_XY:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Y = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_XZ:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_YZ:                          vector.Y = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_DIFF:                          float diffX' diffY' diffZ;                            diffX = Get_Double((int)(geoCmd[i].param[0] & 0x3FF)' true' 0' 9);                          diffY = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FFF)' true' 0' 9);                          diffZ = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 0' 9);                            vector.X += (diffX / 8);                          vector.Y += (diffY / 8);                          vector.Z += (diffZ / 8);                            GL.Vertex3(vector);                          break;                      #endregion                        case GeometryCmd.COLOR:                          // Convert the param to RGB555 color                          int r = (int)(geoCmd[i].param[0] & 0x1F);                          int g = (int)((geoCmd[i].param[0] >> 5) & 0x1F);                          int b = (int)((geoCmd[i].param[0] >> 10) & 0x1F);                            GL.Color3((float)r / 31.0f' (float)g / 31.0f' (float)b / 31.0f);                          break;                      case GeometryCmd.POLYGON_ATTR:                          break;                        #region Texture attributes                      case GeometryCmd.TEXCOORD:                          double s' t;                          s = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 11' 4);                          t = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 11' 4);                          GL.TexCoord2(s' t);                          break;                        case GeometryCmd.TEXIMAGE_PARAM:                          break;                      case GeometryCmd.PLTT_BASE:                          break;                      #endregion                        case GeometryCmd.DIF_AMB:                          break;                      case GeometryCmd.SPE_EMI:                          break;                      case GeometryCmd.LIGHT_VECTOR:                          break;                      case GeometryCmd.LIGHT_COLOR:                          break;                      case GeometryCmd.SHININESS:                          break;                        case GeometryCmd.NORMAL:                          float x' y' z;                          x = Get_Double((int)(geoCmd[i].param[0] & 0x3FFF)' true' 0' 9);                          y = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FFF)' true' 0' 9);                          z = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 0' 9);                            // Multiplay by the directional matrix                          GL.Normal3(x' y' z);                          break;                        case GeometryCmd.BEGIN_VTXS:                          if (geoCmd[i].param[0] == 0)                              GL.Begin(BeginMode.Triangles);                          else if (geoCmd[i].param[0] == 1)                              GL.Begin(BeginMode.Quads);                          else if (geoCmd[i].param[0] == 2)                              GL.Begin(BeginMode.TriangleStrip);                          else if (geoCmd[i].param[0] == 3)                              GL.Begin(BeginMode.QuadStrip);                          break;                      case GeometryCmd.END_VTXS:                          GL.End();                          break;                        case GeometryCmd.SWAP_BUFFERS:                          break;                      case GeometryCmd.VIEWPORT:                          break;                      case GeometryCmd.BOX_TEST:                          break;                      case GeometryCmd.POS_TEST:                          break;                      case GeometryCmd.VEC_TEST:                          break;                      default:                          break;                  }
Magic Number,_3DModels,BMD0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BMD0.cs,GeometryCommands,The following statement contains a magic number: switch ((GeometryCmd)geoCmd[i].cmd)                  {                      case GeometryCmd.NOP:                          break;                      case GeometryCmd.MTX_MODE:                          break;                      case GeometryCmd.MTX_PUSH:                          break;                      case GeometryCmd.MTX_POP:                          break;                      case GeometryCmd.MTX_STORE:                          break;                      case GeometryCmd.MTX_RESTORE:                          break;                      case GeometryCmd.MTX_IDENTITY:                          break;                      case GeometryCmd.MTX_LOAD_4x4:                          break;                      case GeometryCmd.MTX_LOAD_4x3:                          break;                      case GeometryCmd.MTX_MULT_4x4:                          break;                      case GeometryCmd.MTX_MULT_4x3:                          break;                      case GeometryCmd.MTX_MULT_3x3:                          break;                      case GeometryCmd.MTX_SCALE:                          break;                      case GeometryCmd.MTX_TRANS:                          break;                        #region Vertex commands                      // Multiply by the clipmatrix                      case GeometryCmd.VTX_16:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Y = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[1] & 0xFFFF)' true' 3' 12);                            GL.Vertex3(vector);                          break;                        case GeometryCmd.VTX_10:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0x3FF)' true' 3' 6);                          vector.Y = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FF)' true' 3' 6);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 3' 6);                            GL.Vertex3(vector);                          break;                        case GeometryCmd.VTX_XY:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Y = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_XZ:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_YZ:                          vector.Y = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_DIFF:                          float diffX' diffY' diffZ;                            diffX = Get_Double((int)(geoCmd[i].param[0] & 0x3FF)' true' 0' 9);                          diffY = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FFF)' true' 0' 9);                          diffZ = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 0' 9);                            vector.X += (diffX / 8);                          vector.Y += (diffY / 8);                          vector.Z += (diffZ / 8);                            GL.Vertex3(vector);                          break;                      #endregion                        case GeometryCmd.COLOR:                          // Convert the param to RGB555 color                          int r = (int)(geoCmd[i].param[0] & 0x1F);                          int g = (int)((geoCmd[i].param[0] >> 5) & 0x1F);                          int b = (int)((geoCmd[i].param[0] >> 10) & 0x1F);                            GL.Color3((float)r / 31.0f' (float)g / 31.0f' (float)b / 31.0f);                          break;                      case GeometryCmd.POLYGON_ATTR:                          break;                        #region Texture attributes                      case GeometryCmd.TEXCOORD:                          double s' t;                          s = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 11' 4);                          t = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 11' 4);                          GL.TexCoord2(s' t);                          break;                        case GeometryCmd.TEXIMAGE_PARAM:                          break;                      case GeometryCmd.PLTT_BASE:                          break;                      #endregion                        case GeometryCmd.DIF_AMB:                          break;                      case GeometryCmd.SPE_EMI:                          break;                      case GeometryCmd.LIGHT_VECTOR:                          break;                      case GeometryCmd.LIGHT_COLOR:                          break;                      case GeometryCmd.SHININESS:                          break;                        case GeometryCmd.NORMAL:                          float x' y' z;                          x = Get_Double((int)(geoCmd[i].param[0] & 0x3FFF)' true' 0' 9);                          y = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FFF)' true' 0' 9);                          z = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 0' 9);                            // Multiplay by the directional matrix                          GL.Normal3(x' y' z);                          break;                        case GeometryCmd.BEGIN_VTXS:                          if (geoCmd[i].param[0] == 0)                              GL.Begin(BeginMode.Triangles);                          else if (geoCmd[i].param[0] == 1)                              GL.Begin(BeginMode.Quads);                          else if (geoCmd[i].param[0] == 2)                              GL.Begin(BeginMode.TriangleStrip);                          else if (geoCmd[i].param[0] == 3)                              GL.Begin(BeginMode.QuadStrip);                          break;                      case GeometryCmd.END_VTXS:                          GL.End();                          break;                        case GeometryCmd.SWAP_BUFFERS:                          break;                      case GeometryCmd.VIEWPORT:                          break;                      case GeometryCmd.BOX_TEST:                          break;                      case GeometryCmd.POS_TEST:                          break;                      case GeometryCmd.VEC_TEST:                          break;                      default:                          break;                  }
Magic Number,_3DModels,BMD0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BMD0.cs,GeometryCommands,The following statement contains a magic number: switch ((GeometryCmd)geoCmd[i].cmd)                  {                      case GeometryCmd.NOP:                          break;                      case GeometryCmd.MTX_MODE:                          break;                      case GeometryCmd.MTX_PUSH:                          break;                      case GeometryCmd.MTX_POP:                          break;                      case GeometryCmd.MTX_STORE:                          break;                      case GeometryCmd.MTX_RESTORE:                          break;                      case GeometryCmd.MTX_IDENTITY:                          break;                      case GeometryCmd.MTX_LOAD_4x4:                          break;                      case GeometryCmd.MTX_LOAD_4x3:                          break;                      case GeometryCmd.MTX_MULT_4x4:                          break;                      case GeometryCmd.MTX_MULT_4x3:                          break;                      case GeometryCmd.MTX_MULT_3x3:                          break;                      case GeometryCmd.MTX_SCALE:                          break;                      case GeometryCmd.MTX_TRANS:                          break;                        #region Vertex commands                      // Multiply by the clipmatrix                      case GeometryCmd.VTX_16:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Y = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[1] & 0xFFFF)' true' 3' 12);                            GL.Vertex3(vector);                          break;                        case GeometryCmd.VTX_10:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0x3FF)' true' 3' 6);                          vector.Y = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FF)' true' 3' 6);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 3' 6);                            GL.Vertex3(vector);                          break;                        case GeometryCmd.VTX_XY:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Y = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_XZ:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_YZ:                          vector.Y = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_DIFF:                          float diffX' diffY' diffZ;                            diffX = Get_Double((int)(geoCmd[i].param[0] & 0x3FF)' true' 0' 9);                          diffY = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FFF)' true' 0' 9);                          diffZ = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 0' 9);                            vector.X += (diffX / 8);                          vector.Y += (diffY / 8);                          vector.Z += (diffZ / 8);                            GL.Vertex3(vector);                          break;                      #endregion                        case GeometryCmd.COLOR:                          // Convert the param to RGB555 color                          int r = (int)(geoCmd[i].param[0] & 0x1F);                          int g = (int)((geoCmd[i].param[0] >> 5) & 0x1F);                          int b = (int)((geoCmd[i].param[0] >> 10) & 0x1F);                            GL.Color3((float)r / 31.0f' (float)g / 31.0f' (float)b / 31.0f);                          break;                      case GeometryCmd.POLYGON_ATTR:                          break;                        #region Texture attributes                      case GeometryCmd.TEXCOORD:                          double s' t;                          s = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 11' 4);                          t = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 11' 4);                          GL.TexCoord2(s' t);                          break;                        case GeometryCmd.TEXIMAGE_PARAM:                          break;                      case GeometryCmd.PLTT_BASE:                          break;                      #endregion                        case GeometryCmd.DIF_AMB:                          break;                      case GeometryCmd.SPE_EMI:                          break;                      case GeometryCmd.LIGHT_VECTOR:                          break;                      case GeometryCmd.LIGHT_COLOR:                          break;                      case GeometryCmd.SHININESS:                          break;                        case GeometryCmd.NORMAL:                          float x' y' z;                          x = Get_Double((int)(geoCmd[i].param[0] & 0x3FFF)' true' 0' 9);                          y = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FFF)' true' 0' 9);                          z = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 0' 9);                            // Multiplay by the directional matrix                          GL.Normal3(x' y' z);                          break;                        case GeometryCmd.BEGIN_VTXS:                          if (geoCmd[i].param[0] == 0)                              GL.Begin(BeginMode.Triangles);                          else if (geoCmd[i].param[0] == 1)                              GL.Begin(BeginMode.Quads);                          else if (geoCmd[i].param[0] == 2)                              GL.Begin(BeginMode.TriangleStrip);                          else if (geoCmd[i].param[0] == 3)                              GL.Begin(BeginMode.QuadStrip);                          break;                      case GeometryCmd.END_VTXS:                          GL.End();                          break;                        case GeometryCmd.SWAP_BUFFERS:                          break;                      case GeometryCmd.VIEWPORT:                          break;                      case GeometryCmd.BOX_TEST:                          break;                      case GeometryCmd.POS_TEST:                          break;                      case GeometryCmd.VEC_TEST:                          break;                      default:                          break;                  }
Magic Number,_3DModels,BMD0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BMD0.cs,GeometryCommands,The following statement contains a magic number: switch ((GeometryCmd)geoCmd[i].cmd)                  {                      case GeometryCmd.NOP:                          break;                      case GeometryCmd.MTX_MODE:                          break;                      case GeometryCmd.MTX_PUSH:                          break;                      case GeometryCmd.MTX_POP:                          break;                      case GeometryCmd.MTX_STORE:                          break;                      case GeometryCmd.MTX_RESTORE:                          break;                      case GeometryCmd.MTX_IDENTITY:                          break;                      case GeometryCmd.MTX_LOAD_4x4:                          break;                      case GeometryCmd.MTX_LOAD_4x3:                          break;                      case GeometryCmd.MTX_MULT_4x4:                          break;                      case GeometryCmd.MTX_MULT_4x3:                          break;                      case GeometryCmd.MTX_MULT_3x3:                          break;                      case GeometryCmd.MTX_SCALE:                          break;                      case GeometryCmd.MTX_TRANS:                          break;                        #region Vertex commands                      // Multiply by the clipmatrix                      case GeometryCmd.VTX_16:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Y = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[1] & 0xFFFF)' true' 3' 12);                            GL.Vertex3(vector);                          break;                        case GeometryCmd.VTX_10:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0x3FF)' true' 3' 6);                          vector.Y = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FF)' true' 3' 6);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 3' 6);                            GL.Vertex3(vector);                          break;                        case GeometryCmd.VTX_XY:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Y = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_XZ:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_YZ:                          vector.Y = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_DIFF:                          float diffX' diffY' diffZ;                            diffX = Get_Double((int)(geoCmd[i].param[0] & 0x3FF)' true' 0' 9);                          diffY = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FFF)' true' 0' 9);                          diffZ = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 0' 9);                            vector.X += (diffX / 8);                          vector.Y += (diffY / 8);                          vector.Z += (diffZ / 8);                            GL.Vertex3(vector);                          break;                      #endregion                        case GeometryCmd.COLOR:                          // Convert the param to RGB555 color                          int r = (int)(geoCmd[i].param[0] & 0x1F);                          int g = (int)((geoCmd[i].param[0] >> 5) & 0x1F);                          int b = (int)((geoCmd[i].param[0] >> 10) & 0x1F);                            GL.Color3((float)r / 31.0f' (float)g / 31.0f' (float)b / 31.0f);                          break;                      case GeometryCmd.POLYGON_ATTR:                          break;                        #region Texture attributes                      case GeometryCmd.TEXCOORD:                          double s' t;                          s = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 11' 4);                          t = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 11' 4);                          GL.TexCoord2(s' t);                          break;                        case GeometryCmd.TEXIMAGE_PARAM:                          break;                      case GeometryCmd.PLTT_BASE:                          break;                      #endregion                        case GeometryCmd.DIF_AMB:                          break;                      case GeometryCmd.SPE_EMI:                          break;                      case GeometryCmd.LIGHT_VECTOR:                          break;                      case GeometryCmd.LIGHT_COLOR:                          break;                      case GeometryCmd.SHININESS:                          break;                        case GeometryCmd.NORMAL:                          float x' y' z;                          x = Get_Double((int)(geoCmd[i].param[0] & 0x3FFF)' true' 0' 9);                          y = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FFF)' true' 0' 9);                          z = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 0' 9);                            // Multiplay by the directional matrix                          GL.Normal3(x' y' z);                          break;                        case GeometryCmd.BEGIN_VTXS:                          if (geoCmd[i].param[0] == 0)                              GL.Begin(BeginMode.Triangles);                          else if (geoCmd[i].param[0] == 1)                              GL.Begin(BeginMode.Quads);                          else if (geoCmd[i].param[0] == 2)                              GL.Begin(BeginMode.TriangleStrip);                          else if (geoCmd[i].param[0] == 3)                              GL.Begin(BeginMode.QuadStrip);                          break;                      case GeometryCmd.END_VTXS:                          GL.End();                          break;                        case GeometryCmd.SWAP_BUFFERS:                          break;                      case GeometryCmd.VIEWPORT:                          break;                      case GeometryCmd.BOX_TEST:                          break;                      case GeometryCmd.POS_TEST:                          break;                      case GeometryCmd.VEC_TEST:                          break;                      default:                          break;                  }
Magic Number,_3DModels,BMD0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BMD0.cs,GeometryCommands,The following statement contains a magic number: switch ((GeometryCmd)geoCmd[i].cmd)                  {                      case GeometryCmd.NOP:                          break;                      case GeometryCmd.MTX_MODE:                          break;                      case GeometryCmd.MTX_PUSH:                          break;                      case GeometryCmd.MTX_POP:                          break;                      case GeometryCmd.MTX_STORE:                          break;                      case GeometryCmd.MTX_RESTORE:                          break;                      case GeometryCmd.MTX_IDENTITY:                          break;                      case GeometryCmd.MTX_LOAD_4x4:                          break;                      case GeometryCmd.MTX_LOAD_4x3:                          break;                      case GeometryCmd.MTX_MULT_4x4:                          break;                      case GeometryCmd.MTX_MULT_4x3:                          break;                      case GeometryCmd.MTX_MULT_3x3:                          break;                      case GeometryCmd.MTX_SCALE:                          break;                      case GeometryCmd.MTX_TRANS:                          break;                        #region Vertex commands                      // Multiply by the clipmatrix                      case GeometryCmd.VTX_16:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Y = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[1] & 0xFFFF)' true' 3' 12);                            GL.Vertex3(vector);                          break;                        case GeometryCmd.VTX_10:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0x3FF)' true' 3' 6);                          vector.Y = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FF)' true' 3' 6);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 3' 6);                            GL.Vertex3(vector);                          break;                        case GeometryCmd.VTX_XY:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Y = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_XZ:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_YZ:                          vector.Y = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_DIFF:                          float diffX' diffY' diffZ;                            diffX = Get_Double((int)(geoCmd[i].param[0] & 0x3FF)' true' 0' 9);                          diffY = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FFF)' true' 0' 9);                          diffZ = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 0' 9);                            vector.X += (diffX / 8);                          vector.Y += (diffY / 8);                          vector.Z += (diffZ / 8);                            GL.Vertex3(vector);                          break;                      #endregion                        case GeometryCmd.COLOR:                          // Convert the param to RGB555 color                          int r = (int)(geoCmd[i].param[0] & 0x1F);                          int g = (int)((geoCmd[i].param[0] >> 5) & 0x1F);                          int b = (int)((geoCmd[i].param[0] >> 10) & 0x1F);                            GL.Color3((float)r / 31.0f' (float)g / 31.0f' (float)b / 31.0f);                          break;                      case GeometryCmd.POLYGON_ATTR:                          break;                        #region Texture attributes                      case GeometryCmd.TEXCOORD:                          double s' t;                          s = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 11' 4);                          t = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 11' 4);                          GL.TexCoord2(s' t);                          break;                        case GeometryCmd.TEXIMAGE_PARAM:                          break;                      case GeometryCmd.PLTT_BASE:                          break;                      #endregion                        case GeometryCmd.DIF_AMB:                          break;                      case GeometryCmd.SPE_EMI:                          break;                      case GeometryCmd.LIGHT_VECTOR:                          break;                      case GeometryCmd.LIGHT_COLOR:                          break;                      case GeometryCmd.SHININESS:                          break;                        case GeometryCmd.NORMAL:                          float x' y' z;                          x = Get_Double((int)(geoCmd[i].param[0] & 0x3FFF)' true' 0' 9);                          y = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FFF)' true' 0' 9);                          z = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 0' 9);                            // Multiplay by the directional matrix                          GL.Normal3(x' y' z);                          break;                        case GeometryCmd.BEGIN_VTXS:                          if (geoCmd[i].param[0] == 0)                              GL.Begin(BeginMode.Triangles);                          else if (geoCmd[i].param[0] == 1)                              GL.Begin(BeginMode.Quads);                          else if (geoCmd[i].param[0] == 2)                              GL.Begin(BeginMode.TriangleStrip);                          else if (geoCmd[i].param[0] == 3)                              GL.Begin(BeginMode.QuadStrip);                          break;                      case GeometryCmd.END_VTXS:                          GL.End();                          break;                        case GeometryCmd.SWAP_BUFFERS:                          break;                      case GeometryCmd.VIEWPORT:                          break;                      case GeometryCmd.BOX_TEST:                          break;                      case GeometryCmd.POS_TEST:                          break;                      case GeometryCmd.VEC_TEST:                          break;                      default:                          break;                  }
Magic Number,_3DModels,BMD0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BMD0.cs,GeometryCommands,The following statement contains a magic number: switch ((GeometryCmd)geoCmd[i].cmd)                  {                      case GeometryCmd.NOP:                          break;                      case GeometryCmd.MTX_MODE:                          break;                      case GeometryCmd.MTX_PUSH:                          break;                      case GeometryCmd.MTX_POP:                          break;                      case GeometryCmd.MTX_STORE:                          break;                      case GeometryCmd.MTX_RESTORE:                          break;                      case GeometryCmd.MTX_IDENTITY:                          break;                      case GeometryCmd.MTX_LOAD_4x4:                          break;                      case GeometryCmd.MTX_LOAD_4x3:                          break;                      case GeometryCmd.MTX_MULT_4x4:                          break;                      case GeometryCmd.MTX_MULT_4x3:                          break;                      case GeometryCmd.MTX_MULT_3x3:                          break;                      case GeometryCmd.MTX_SCALE:                          break;                      case GeometryCmd.MTX_TRANS:                          break;                        #region Vertex commands                      // Multiply by the clipmatrix                      case GeometryCmd.VTX_16:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Y = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[1] & 0xFFFF)' true' 3' 12);                            GL.Vertex3(vector);                          break;                        case GeometryCmd.VTX_10:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0x3FF)' true' 3' 6);                          vector.Y = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FF)' true' 3' 6);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 3' 6);                            GL.Vertex3(vector);                          break;                        case GeometryCmd.VTX_XY:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Y = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_XZ:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_YZ:                          vector.Y = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_DIFF:                          float diffX' diffY' diffZ;                            diffX = Get_Double((int)(geoCmd[i].param[0] & 0x3FF)' true' 0' 9);                          diffY = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FFF)' true' 0' 9);                          diffZ = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 0' 9);                            vector.X += (diffX / 8);                          vector.Y += (diffY / 8);                          vector.Z += (diffZ / 8);                            GL.Vertex3(vector);                          break;                      #endregion                        case GeometryCmd.COLOR:                          // Convert the param to RGB555 color                          int r = (int)(geoCmd[i].param[0] & 0x1F);                          int g = (int)((geoCmd[i].param[0] >> 5) & 0x1F);                          int b = (int)((geoCmd[i].param[0] >> 10) & 0x1F);                            GL.Color3((float)r / 31.0f' (float)g / 31.0f' (float)b / 31.0f);                          break;                      case GeometryCmd.POLYGON_ATTR:                          break;                        #region Texture attributes                      case GeometryCmd.TEXCOORD:                          double s' t;                          s = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 11' 4);                          t = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 11' 4);                          GL.TexCoord2(s' t);                          break;                        case GeometryCmd.TEXIMAGE_PARAM:                          break;                      case GeometryCmd.PLTT_BASE:                          break;                      #endregion                        case GeometryCmd.DIF_AMB:                          break;                      case GeometryCmd.SPE_EMI:                          break;                      case GeometryCmd.LIGHT_VECTOR:                          break;                      case GeometryCmd.LIGHT_COLOR:                          break;                      case GeometryCmd.SHININESS:                          break;                        case GeometryCmd.NORMAL:                          float x' y' z;                          x = Get_Double((int)(geoCmd[i].param[0] & 0x3FFF)' true' 0' 9);                          y = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FFF)' true' 0' 9);                          z = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 0' 9);                            // Multiplay by the directional matrix                          GL.Normal3(x' y' z);                          break;                        case GeometryCmd.BEGIN_VTXS:                          if (geoCmd[i].param[0] == 0)                              GL.Begin(BeginMode.Triangles);                          else if (geoCmd[i].param[0] == 1)                              GL.Begin(BeginMode.Quads);                          else if (geoCmd[i].param[0] == 2)                              GL.Begin(BeginMode.TriangleStrip);                          else if (geoCmd[i].param[0] == 3)                              GL.Begin(BeginMode.QuadStrip);                          break;                      case GeometryCmd.END_VTXS:                          GL.End();                          break;                        case GeometryCmd.SWAP_BUFFERS:                          break;                      case GeometryCmd.VIEWPORT:                          break;                      case GeometryCmd.BOX_TEST:                          break;                      case GeometryCmd.POS_TEST:                          break;                      case GeometryCmd.VEC_TEST:                          break;                      default:                          break;                  }
Magic Number,_3DModels,BMD0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BMD0.cs,GeometryCommands,The following statement contains a magic number: switch ((GeometryCmd)geoCmd[i].cmd)                  {                      case GeometryCmd.NOP:                          break;                      case GeometryCmd.MTX_MODE:                          break;                      case GeometryCmd.MTX_PUSH:                          break;                      case GeometryCmd.MTX_POP:                          break;                      case GeometryCmd.MTX_STORE:                          break;                      case GeometryCmd.MTX_RESTORE:                          break;                      case GeometryCmd.MTX_IDENTITY:                          break;                      case GeometryCmd.MTX_LOAD_4x4:                          break;                      case GeometryCmd.MTX_LOAD_4x3:                          break;                      case GeometryCmd.MTX_MULT_4x4:                          break;                      case GeometryCmd.MTX_MULT_4x3:                          break;                      case GeometryCmd.MTX_MULT_3x3:                          break;                      case GeometryCmd.MTX_SCALE:                          break;                      case GeometryCmd.MTX_TRANS:                          break;                        #region Vertex commands                      // Multiply by the clipmatrix                      case GeometryCmd.VTX_16:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Y = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[1] & 0xFFFF)' true' 3' 12);                            GL.Vertex3(vector);                          break;                        case GeometryCmd.VTX_10:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0x3FF)' true' 3' 6);                          vector.Y = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FF)' true' 3' 6);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 3' 6);                            GL.Vertex3(vector);                          break;                        case GeometryCmd.VTX_XY:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Y = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_XZ:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_YZ:                          vector.Y = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_DIFF:                          float diffX' diffY' diffZ;                            diffX = Get_Double((int)(geoCmd[i].param[0] & 0x3FF)' true' 0' 9);                          diffY = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FFF)' true' 0' 9);                          diffZ = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 0' 9);                            vector.X += (diffX / 8);                          vector.Y += (diffY / 8);                          vector.Z += (diffZ / 8);                            GL.Vertex3(vector);                          break;                      #endregion                        case GeometryCmd.COLOR:                          // Convert the param to RGB555 color                          int r = (int)(geoCmd[i].param[0] & 0x1F);                          int g = (int)((geoCmd[i].param[0] >> 5) & 0x1F);                          int b = (int)((geoCmd[i].param[0] >> 10) & 0x1F);                            GL.Color3((float)r / 31.0f' (float)g / 31.0f' (float)b / 31.0f);                          break;                      case GeometryCmd.POLYGON_ATTR:                          break;                        #region Texture attributes                      case GeometryCmd.TEXCOORD:                          double s' t;                          s = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 11' 4);                          t = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 11' 4);                          GL.TexCoord2(s' t);                          break;                        case GeometryCmd.TEXIMAGE_PARAM:                          break;                      case GeometryCmd.PLTT_BASE:                          break;                      #endregion                        case GeometryCmd.DIF_AMB:                          break;                      case GeometryCmd.SPE_EMI:                          break;                      case GeometryCmd.LIGHT_VECTOR:                          break;                      case GeometryCmd.LIGHT_COLOR:                          break;                      case GeometryCmd.SHININESS:                          break;                        case GeometryCmd.NORMAL:                          float x' y' z;                          x = Get_Double((int)(geoCmd[i].param[0] & 0x3FFF)' true' 0' 9);                          y = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FFF)' true' 0' 9);                          z = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 0' 9);                            // Multiplay by the directional matrix                          GL.Normal3(x' y' z);                          break;                        case GeometryCmd.BEGIN_VTXS:                          if (geoCmd[i].param[0] == 0)                              GL.Begin(BeginMode.Triangles);                          else if (geoCmd[i].param[0] == 1)                              GL.Begin(BeginMode.Quads);                          else if (geoCmd[i].param[0] == 2)                              GL.Begin(BeginMode.TriangleStrip);                          else if (geoCmd[i].param[0] == 3)                              GL.Begin(BeginMode.QuadStrip);                          break;                      case GeometryCmd.END_VTXS:                          GL.End();                          break;                        case GeometryCmd.SWAP_BUFFERS:                          break;                      case GeometryCmd.VIEWPORT:                          break;                      case GeometryCmd.BOX_TEST:                          break;                      case GeometryCmd.POS_TEST:                          break;                      case GeometryCmd.VEC_TEST:                          break;                      default:                          break;                  }
Magic Number,_3DModels,BMD0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BMD0.cs,GeometryCommands,The following statement contains a magic number: switch ((GeometryCmd)geoCmd[i].cmd)                  {                      case GeometryCmd.NOP:                          break;                      case GeometryCmd.MTX_MODE:                          break;                      case GeometryCmd.MTX_PUSH:                          break;                      case GeometryCmd.MTX_POP:                          break;                      case GeometryCmd.MTX_STORE:                          break;                      case GeometryCmd.MTX_RESTORE:                          break;                      case GeometryCmd.MTX_IDENTITY:                          break;                      case GeometryCmd.MTX_LOAD_4x4:                          break;                      case GeometryCmd.MTX_LOAD_4x3:                          break;                      case GeometryCmd.MTX_MULT_4x4:                          break;                      case GeometryCmd.MTX_MULT_4x3:                          break;                      case GeometryCmd.MTX_MULT_3x3:                          break;                      case GeometryCmd.MTX_SCALE:                          break;                      case GeometryCmd.MTX_TRANS:                          break;                        #region Vertex commands                      // Multiply by the clipmatrix                      case GeometryCmd.VTX_16:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Y = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[1] & 0xFFFF)' true' 3' 12);                            GL.Vertex3(vector);                          break;                        case GeometryCmd.VTX_10:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0x3FF)' true' 3' 6);                          vector.Y = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FF)' true' 3' 6);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 3' 6);                            GL.Vertex3(vector);                          break;                        case GeometryCmd.VTX_XY:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Y = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_XZ:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_YZ:                          vector.Y = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_DIFF:                          float diffX' diffY' diffZ;                            diffX = Get_Double((int)(geoCmd[i].param[0] & 0x3FF)' true' 0' 9);                          diffY = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FFF)' true' 0' 9);                          diffZ = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 0' 9);                            vector.X += (diffX / 8);                          vector.Y += (diffY / 8);                          vector.Z += (diffZ / 8);                            GL.Vertex3(vector);                          break;                      #endregion                        case GeometryCmd.COLOR:                          // Convert the param to RGB555 color                          int r = (int)(geoCmd[i].param[0] & 0x1F);                          int g = (int)((geoCmd[i].param[0] >> 5) & 0x1F);                          int b = (int)((geoCmd[i].param[0] >> 10) & 0x1F);                            GL.Color3((float)r / 31.0f' (float)g / 31.0f' (float)b / 31.0f);                          break;                      case GeometryCmd.POLYGON_ATTR:                          break;                        #region Texture attributes                      case GeometryCmd.TEXCOORD:                          double s' t;                          s = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 11' 4);                          t = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 11' 4);                          GL.TexCoord2(s' t);                          break;                        case GeometryCmd.TEXIMAGE_PARAM:                          break;                      case GeometryCmd.PLTT_BASE:                          break;                      #endregion                        case GeometryCmd.DIF_AMB:                          break;                      case GeometryCmd.SPE_EMI:                          break;                      case GeometryCmd.LIGHT_VECTOR:                          break;                      case GeometryCmd.LIGHT_COLOR:                          break;                      case GeometryCmd.SHININESS:                          break;                        case GeometryCmd.NORMAL:                          float x' y' z;                          x = Get_Double((int)(geoCmd[i].param[0] & 0x3FFF)' true' 0' 9);                          y = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FFF)' true' 0' 9);                          z = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 0' 9);                            // Multiplay by the directional matrix                          GL.Normal3(x' y' z);                          break;                        case GeometryCmd.BEGIN_VTXS:                          if (geoCmd[i].param[0] == 0)                              GL.Begin(BeginMode.Triangles);                          else if (geoCmd[i].param[0] == 1)                              GL.Begin(BeginMode.Quads);                          else if (geoCmd[i].param[0] == 2)                              GL.Begin(BeginMode.TriangleStrip);                          else if (geoCmd[i].param[0] == 3)                              GL.Begin(BeginMode.QuadStrip);                          break;                      case GeometryCmd.END_VTXS:                          GL.End();                          break;                        case GeometryCmd.SWAP_BUFFERS:                          break;                      case GeometryCmd.VIEWPORT:                          break;                      case GeometryCmd.BOX_TEST:                          break;                      case GeometryCmd.POS_TEST:                          break;                      case GeometryCmd.VEC_TEST:                          break;                      default:                          break;                  }
Magic Number,_3DModels,BMD0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BMD0.cs,GeometryCommands,The following statement contains a magic number: switch ((GeometryCmd)geoCmd[i].cmd)                  {                      case GeometryCmd.NOP:                          break;                      case GeometryCmd.MTX_MODE:                          break;                      case GeometryCmd.MTX_PUSH:                          break;                      case GeometryCmd.MTX_POP:                          break;                      case GeometryCmd.MTX_STORE:                          break;                      case GeometryCmd.MTX_RESTORE:                          break;                      case GeometryCmd.MTX_IDENTITY:                          break;                      case GeometryCmd.MTX_LOAD_4x4:                          break;                      case GeometryCmd.MTX_LOAD_4x3:                          break;                      case GeometryCmd.MTX_MULT_4x4:                          break;                      case GeometryCmd.MTX_MULT_4x3:                          break;                      case GeometryCmd.MTX_MULT_3x3:                          break;                      case GeometryCmd.MTX_SCALE:                          break;                      case GeometryCmd.MTX_TRANS:                          break;                        #region Vertex commands                      // Multiply by the clipmatrix                      case GeometryCmd.VTX_16:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Y = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[1] & 0xFFFF)' true' 3' 12);                            GL.Vertex3(vector);                          break;                        case GeometryCmd.VTX_10:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0x3FF)' true' 3' 6);                          vector.Y = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FF)' true' 3' 6);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 3' 6);                            GL.Vertex3(vector);                          break;                        case GeometryCmd.VTX_XY:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Y = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_XZ:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_YZ:                          vector.Y = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_DIFF:                          float diffX' diffY' diffZ;                            diffX = Get_Double((int)(geoCmd[i].param[0] & 0x3FF)' true' 0' 9);                          diffY = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FFF)' true' 0' 9);                          diffZ = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 0' 9);                            vector.X += (diffX / 8);                          vector.Y += (diffY / 8);                          vector.Z += (diffZ / 8);                            GL.Vertex3(vector);                          break;                      #endregion                        case GeometryCmd.COLOR:                          // Convert the param to RGB555 color                          int r = (int)(geoCmd[i].param[0] & 0x1F);                          int g = (int)((geoCmd[i].param[0] >> 5) & 0x1F);                          int b = (int)((geoCmd[i].param[0] >> 10) & 0x1F);                            GL.Color3((float)r / 31.0f' (float)g / 31.0f' (float)b / 31.0f);                          break;                      case GeometryCmd.POLYGON_ATTR:                          break;                        #region Texture attributes                      case GeometryCmd.TEXCOORD:                          double s' t;                          s = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 11' 4);                          t = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 11' 4);                          GL.TexCoord2(s' t);                          break;                        case GeometryCmd.TEXIMAGE_PARAM:                          break;                      case GeometryCmd.PLTT_BASE:                          break;                      #endregion                        case GeometryCmd.DIF_AMB:                          break;                      case GeometryCmd.SPE_EMI:                          break;                      case GeometryCmd.LIGHT_VECTOR:                          break;                      case GeometryCmd.LIGHT_COLOR:                          break;                      case GeometryCmd.SHININESS:                          break;                        case GeometryCmd.NORMAL:                          float x' y' z;                          x = Get_Double((int)(geoCmd[i].param[0] & 0x3FFF)' true' 0' 9);                          y = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FFF)' true' 0' 9);                          z = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 0' 9);                            // Multiplay by the directional matrix                          GL.Normal3(x' y' z);                          break;                        case GeometryCmd.BEGIN_VTXS:                          if (geoCmd[i].param[0] == 0)                              GL.Begin(BeginMode.Triangles);                          else if (geoCmd[i].param[0] == 1)                              GL.Begin(BeginMode.Quads);                          else if (geoCmd[i].param[0] == 2)                              GL.Begin(BeginMode.TriangleStrip);                          else if (geoCmd[i].param[0] == 3)                              GL.Begin(BeginMode.QuadStrip);                          break;                      case GeometryCmd.END_VTXS:                          GL.End();                          break;                        case GeometryCmd.SWAP_BUFFERS:                          break;                      case GeometryCmd.VIEWPORT:                          break;                      case GeometryCmd.BOX_TEST:                          break;                      case GeometryCmd.POS_TEST:                          break;                      case GeometryCmd.VEC_TEST:                          break;                      default:                          break;                  }
Magic Number,_3DModels,BMD0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BMD0.cs,GeometryCommands,The following statement contains a magic number: switch ((GeometryCmd)geoCmd[i].cmd)                  {                      case GeometryCmd.NOP:                          break;                      case GeometryCmd.MTX_MODE:                          break;                      case GeometryCmd.MTX_PUSH:                          break;                      case GeometryCmd.MTX_POP:                          break;                      case GeometryCmd.MTX_STORE:                          break;                      case GeometryCmd.MTX_RESTORE:                          break;                      case GeometryCmd.MTX_IDENTITY:                          break;                      case GeometryCmd.MTX_LOAD_4x4:                          break;                      case GeometryCmd.MTX_LOAD_4x3:                          break;                      case GeometryCmd.MTX_MULT_4x4:                          break;                      case GeometryCmd.MTX_MULT_4x3:                          break;                      case GeometryCmd.MTX_MULT_3x3:                          break;                      case GeometryCmd.MTX_SCALE:                          break;                      case GeometryCmd.MTX_TRANS:                          break;                        #region Vertex commands                      // Multiply by the clipmatrix                      case GeometryCmd.VTX_16:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Y = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[1] & 0xFFFF)' true' 3' 12);                            GL.Vertex3(vector);                          break;                        case GeometryCmd.VTX_10:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0x3FF)' true' 3' 6);                          vector.Y = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FF)' true' 3' 6);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 3' 6);                            GL.Vertex3(vector);                          break;                        case GeometryCmd.VTX_XY:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Y = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_XZ:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_YZ:                          vector.Y = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_DIFF:                          float diffX' diffY' diffZ;                            diffX = Get_Double((int)(geoCmd[i].param[0] & 0x3FF)' true' 0' 9);                          diffY = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FFF)' true' 0' 9);                          diffZ = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 0' 9);                            vector.X += (diffX / 8);                          vector.Y += (diffY / 8);                          vector.Z += (diffZ / 8);                            GL.Vertex3(vector);                          break;                      #endregion                        case GeometryCmd.COLOR:                          // Convert the param to RGB555 color                          int r = (int)(geoCmd[i].param[0] & 0x1F);                          int g = (int)((geoCmd[i].param[0] >> 5) & 0x1F);                          int b = (int)((geoCmd[i].param[0] >> 10) & 0x1F);                            GL.Color3((float)r / 31.0f' (float)g / 31.0f' (float)b / 31.0f);                          break;                      case GeometryCmd.POLYGON_ATTR:                          break;                        #region Texture attributes                      case GeometryCmd.TEXCOORD:                          double s' t;                          s = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 11' 4);                          t = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 11' 4);                          GL.TexCoord2(s' t);                          break;                        case GeometryCmd.TEXIMAGE_PARAM:                          break;                      case GeometryCmd.PLTT_BASE:                          break;                      #endregion                        case GeometryCmd.DIF_AMB:                          break;                      case GeometryCmd.SPE_EMI:                          break;                      case GeometryCmd.LIGHT_VECTOR:                          break;                      case GeometryCmd.LIGHT_COLOR:                          break;                      case GeometryCmd.SHININESS:                          break;                        case GeometryCmd.NORMAL:                          float x' y' z;                          x = Get_Double((int)(geoCmd[i].param[0] & 0x3FFF)' true' 0' 9);                          y = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FFF)' true' 0' 9);                          z = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 0' 9);                            // Multiplay by the directional matrix                          GL.Normal3(x' y' z);                          break;                        case GeometryCmd.BEGIN_VTXS:                          if (geoCmd[i].param[0] == 0)                              GL.Begin(BeginMode.Triangles);                          else if (geoCmd[i].param[0] == 1)                              GL.Begin(BeginMode.Quads);                          else if (geoCmd[i].param[0] == 2)                              GL.Begin(BeginMode.TriangleStrip);                          else if (geoCmd[i].param[0] == 3)                              GL.Begin(BeginMode.QuadStrip);                          break;                      case GeometryCmd.END_VTXS:                          GL.End();                          break;                        case GeometryCmd.SWAP_BUFFERS:                          break;                      case GeometryCmd.VIEWPORT:                          break;                      case GeometryCmd.BOX_TEST:                          break;                      case GeometryCmd.POS_TEST:                          break;                      case GeometryCmd.VEC_TEST:                          break;                      default:                          break;                  }
Magic Number,_3DModels,BMD0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BMD0.cs,GeometryCommands,The following statement contains a magic number: switch ((GeometryCmd)geoCmd[i].cmd)                  {                      case GeometryCmd.NOP:                          break;                      case GeometryCmd.MTX_MODE:                          break;                      case GeometryCmd.MTX_PUSH:                          break;                      case GeometryCmd.MTX_POP:                          break;                      case GeometryCmd.MTX_STORE:                          break;                      case GeometryCmd.MTX_RESTORE:                          break;                      case GeometryCmd.MTX_IDENTITY:                          break;                      case GeometryCmd.MTX_LOAD_4x4:                          break;                      case GeometryCmd.MTX_LOAD_4x3:                          break;                      case GeometryCmd.MTX_MULT_4x4:                          break;                      case GeometryCmd.MTX_MULT_4x3:                          break;                      case GeometryCmd.MTX_MULT_3x3:                          break;                      case GeometryCmd.MTX_SCALE:                          break;                      case GeometryCmd.MTX_TRANS:                          break;                        #region Vertex commands                      // Multiply by the clipmatrix                      case GeometryCmd.VTX_16:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Y = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[1] & 0xFFFF)' true' 3' 12);                            GL.Vertex3(vector);                          break;                        case GeometryCmd.VTX_10:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0x3FF)' true' 3' 6);                          vector.Y = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FF)' true' 3' 6);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 3' 6);                            GL.Vertex3(vector);                          break;                        case GeometryCmd.VTX_XY:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Y = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_XZ:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_YZ:                          vector.Y = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_DIFF:                          float diffX' diffY' diffZ;                            diffX = Get_Double((int)(geoCmd[i].param[0] & 0x3FF)' true' 0' 9);                          diffY = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FFF)' true' 0' 9);                          diffZ = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 0' 9);                            vector.X += (diffX / 8);                          vector.Y += (diffY / 8);                          vector.Z += (diffZ / 8);                            GL.Vertex3(vector);                          break;                      #endregion                        case GeometryCmd.COLOR:                          // Convert the param to RGB555 color                          int r = (int)(geoCmd[i].param[0] & 0x1F);                          int g = (int)((geoCmd[i].param[0] >> 5) & 0x1F);                          int b = (int)((geoCmd[i].param[0] >> 10) & 0x1F);                            GL.Color3((float)r / 31.0f' (float)g / 31.0f' (float)b / 31.0f);                          break;                      case GeometryCmd.POLYGON_ATTR:                          break;                        #region Texture attributes                      case GeometryCmd.TEXCOORD:                          double s' t;                          s = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 11' 4);                          t = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 11' 4);                          GL.TexCoord2(s' t);                          break;                        case GeometryCmd.TEXIMAGE_PARAM:                          break;                      case GeometryCmd.PLTT_BASE:                          break;                      #endregion                        case GeometryCmd.DIF_AMB:                          break;                      case GeometryCmd.SPE_EMI:                          break;                      case GeometryCmd.LIGHT_VECTOR:                          break;                      case GeometryCmd.LIGHT_COLOR:                          break;                      case GeometryCmd.SHININESS:                          break;                        case GeometryCmd.NORMAL:                          float x' y' z;                          x = Get_Double((int)(geoCmd[i].param[0] & 0x3FFF)' true' 0' 9);                          y = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FFF)' true' 0' 9);                          z = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 0' 9);                            // Multiplay by the directional matrix                          GL.Normal3(x' y' z);                          break;                        case GeometryCmd.BEGIN_VTXS:                          if (geoCmd[i].param[0] == 0)                              GL.Begin(BeginMode.Triangles);                          else if (geoCmd[i].param[0] == 1)                              GL.Begin(BeginMode.Quads);                          else if (geoCmd[i].param[0] == 2)                              GL.Begin(BeginMode.TriangleStrip);                          else if (geoCmd[i].param[0] == 3)                              GL.Begin(BeginMode.QuadStrip);                          break;                      case GeometryCmd.END_VTXS:                          GL.End();                          break;                        case GeometryCmd.SWAP_BUFFERS:                          break;                      case GeometryCmd.VIEWPORT:                          break;                      case GeometryCmd.BOX_TEST:                          break;                      case GeometryCmd.POS_TEST:                          break;                      case GeometryCmd.VEC_TEST:                          break;                      default:                          break;                  }
Magic Number,_3DModels,BMD0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BMD0.cs,GeometryCommands,The following statement contains a magic number: switch ((GeometryCmd)geoCmd[i].cmd)                  {                      case GeometryCmd.NOP:                          break;                      case GeometryCmd.MTX_MODE:                          break;                      case GeometryCmd.MTX_PUSH:                          break;                      case GeometryCmd.MTX_POP:                          break;                      case GeometryCmd.MTX_STORE:                          break;                      case GeometryCmd.MTX_RESTORE:                          break;                      case GeometryCmd.MTX_IDENTITY:                          break;                      case GeometryCmd.MTX_LOAD_4x4:                          break;                      case GeometryCmd.MTX_LOAD_4x3:                          break;                      case GeometryCmd.MTX_MULT_4x4:                          break;                      case GeometryCmd.MTX_MULT_4x3:                          break;                      case GeometryCmd.MTX_MULT_3x3:                          break;                      case GeometryCmd.MTX_SCALE:                          break;                      case GeometryCmd.MTX_TRANS:                          break;                        #region Vertex commands                      // Multiply by the clipmatrix                      case GeometryCmd.VTX_16:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Y = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[1] & 0xFFFF)' true' 3' 12);                            GL.Vertex3(vector);                          break;                        case GeometryCmd.VTX_10:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0x3FF)' true' 3' 6);                          vector.Y = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FF)' true' 3' 6);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 3' 6);                            GL.Vertex3(vector);                          break;                        case GeometryCmd.VTX_XY:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Y = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_XZ:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_YZ:                          vector.Y = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_DIFF:                          float diffX' diffY' diffZ;                            diffX = Get_Double((int)(geoCmd[i].param[0] & 0x3FF)' true' 0' 9);                          diffY = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FFF)' true' 0' 9);                          diffZ = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 0' 9);                            vector.X += (diffX / 8);                          vector.Y += (diffY / 8);                          vector.Z += (diffZ / 8);                            GL.Vertex3(vector);                          break;                      #endregion                        case GeometryCmd.COLOR:                          // Convert the param to RGB555 color                          int r = (int)(geoCmd[i].param[0] & 0x1F);                          int g = (int)((geoCmd[i].param[0] >> 5) & 0x1F);                          int b = (int)((geoCmd[i].param[0] >> 10) & 0x1F);                            GL.Color3((float)r / 31.0f' (float)g / 31.0f' (float)b / 31.0f);                          break;                      case GeometryCmd.POLYGON_ATTR:                          break;                        #region Texture attributes                      case GeometryCmd.TEXCOORD:                          double s' t;                          s = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 11' 4);                          t = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 11' 4);                          GL.TexCoord2(s' t);                          break;                        case GeometryCmd.TEXIMAGE_PARAM:                          break;                      case GeometryCmd.PLTT_BASE:                          break;                      #endregion                        case GeometryCmd.DIF_AMB:                          break;                      case GeometryCmd.SPE_EMI:                          break;                      case GeometryCmd.LIGHT_VECTOR:                          break;                      case GeometryCmd.LIGHT_COLOR:                          break;                      case GeometryCmd.SHININESS:                          break;                        case GeometryCmd.NORMAL:                          float x' y' z;                          x = Get_Double((int)(geoCmd[i].param[0] & 0x3FFF)' true' 0' 9);                          y = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FFF)' true' 0' 9);                          z = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 0' 9);                            // Multiplay by the directional matrix                          GL.Normal3(x' y' z);                          break;                        case GeometryCmd.BEGIN_VTXS:                          if (geoCmd[i].param[0] == 0)                              GL.Begin(BeginMode.Triangles);                          else if (geoCmd[i].param[0] == 1)                              GL.Begin(BeginMode.Quads);                          else if (geoCmd[i].param[0] == 2)                              GL.Begin(BeginMode.TriangleStrip);                          else if (geoCmd[i].param[0] == 3)                              GL.Begin(BeginMode.QuadStrip);                          break;                      case GeometryCmd.END_VTXS:                          GL.End();                          break;                        case GeometryCmd.SWAP_BUFFERS:                          break;                      case GeometryCmd.VIEWPORT:                          break;                      case GeometryCmd.BOX_TEST:                          break;                      case GeometryCmd.POS_TEST:                          break;                      case GeometryCmd.VEC_TEST:                          break;                      default:                          break;                  }
Magic Number,_3DModels,BMD0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BMD0.cs,GeometryCommands,The following statement contains a magic number: switch ((GeometryCmd)geoCmd[i].cmd)                  {                      case GeometryCmd.NOP:                          break;                      case GeometryCmd.MTX_MODE:                          break;                      case GeometryCmd.MTX_PUSH:                          break;                      case GeometryCmd.MTX_POP:                          break;                      case GeometryCmd.MTX_STORE:                          break;                      case GeometryCmd.MTX_RESTORE:                          break;                      case GeometryCmd.MTX_IDENTITY:                          break;                      case GeometryCmd.MTX_LOAD_4x4:                          break;                      case GeometryCmd.MTX_LOAD_4x3:                          break;                      case GeometryCmd.MTX_MULT_4x4:                          break;                      case GeometryCmd.MTX_MULT_4x3:                          break;                      case GeometryCmd.MTX_MULT_3x3:                          break;                      case GeometryCmd.MTX_SCALE:                          break;                      case GeometryCmd.MTX_TRANS:                          break;                        #region Vertex commands                      // Multiply by the clipmatrix                      case GeometryCmd.VTX_16:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Y = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[1] & 0xFFFF)' true' 3' 12);                            GL.Vertex3(vector);                          break;                        case GeometryCmd.VTX_10:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0x3FF)' true' 3' 6);                          vector.Y = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FF)' true' 3' 6);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 3' 6);                            GL.Vertex3(vector);                          break;                        case GeometryCmd.VTX_XY:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Y = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_XZ:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_YZ:                          vector.Y = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_DIFF:                          float diffX' diffY' diffZ;                            diffX = Get_Double((int)(geoCmd[i].param[0] & 0x3FF)' true' 0' 9);                          diffY = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FFF)' true' 0' 9);                          diffZ = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 0' 9);                            vector.X += (diffX / 8);                          vector.Y += (diffY / 8);                          vector.Z += (diffZ / 8);                            GL.Vertex3(vector);                          break;                      #endregion                        case GeometryCmd.COLOR:                          // Convert the param to RGB555 color                          int r = (int)(geoCmd[i].param[0] & 0x1F);                          int g = (int)((geoCmd[i].param[0] >> 5) & 0x1F);                          int b = (int)((geoCmd[i].param[0] >> 10) & 0x1F);                            GL.Color3((float)r / 31.0f' (float)g / 31.0f' (float)b / 31.0f);                          break;                      case GeometryCmd.POLYGON_ATTR:                          break;                        #region Texture attributes                      case GeometryCmd.TEXCOORD:                          double s' t;                          s = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 11' 4);                          t = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 11' 4);                          GL.TexCoord2(s' t);                          break;                        case GeometryCmd.TEXIMAGE_PARAM:                          break;                      case GeometryCmd.PLTT_BASE:                          break;                      #endregion                        case GeometryCmd.DIF_AMB:                          break;                      case GeometryCmd.SPE_EMI:                          break;                      case GeometryCmd.LIGHT_VECTOR:                          break;                      case GeometryCmd.LIGHT_COLOR:                          break;                      case GeometryCmd.SHININESS:                          break;                        case GeometryCmd.NORMAL:                          float x' y' z;                          x = Get_Double((int)(geoCmd[i].param[0] & 0x3FFF)' true' 0' 9);                          y = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FFF)' true' 0' 9);                          z = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 0' 9);                            // Multiplay by the directional matrix                          GL.Normal3(x' y' z);                          break;                        case GeometryCmd.BEGIN_VTXS:                          if (geoCmd[i].param[0] == 0)                              GL.Begin(BeginMode.Triangles);                          else if (geoCmd[i].param[0] == 1)                              GL.Begin(BeginMode.Quads);                          else if (geoCmd[i].param[0] == 2)                              GL.Begin(BeginMode.TriangleStrip);                          else if (geoCmd[i].param[0] == 3)                              GL.Begin(BeginMode.QuadStrip);                          break;                      case GeometryCmd.END_VTXS:                          GL.End();                          break;                        case GeometryCmd.SWAP_BUFFERS:                          break;                      case GeometryCmd.VIEWPORT:                          break;                      case GeometryCmd.BOX_TEST:                          break;                      case GeometryCmd.POS_TEST:                          break;                      case GeometryCmd.VEC_TEST:                          break;                      default:                          break;                  }
Magic Number,_3DModels,BMD0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BMD0.cs,GeometryCommands,The following statement contains a magic number: switch ((GeometryCmd)geoCmd[i].cmd)                  {                      case GeometryCmd.NOP:                          break;                      case GeometryCmd.MTX_MODE:                          break;                      case GeometryCmd.MTX_PUSH:                          break;                      case GeometryCmd.MTX_POP:                          break;                      case GeometryCmd.MTX_STORE:                          break;                      case GeometryCmd.MTX_RESTORE:                          break;                      case GeometryCmd.MTX_IDENTITY:                          break;                      case GeometryCmd.MTX_LOAD_4x4:                          break;                      case GeometryCmd.MTX_LOAD_4x3:                          break;                      case GeometryCmd.MTX_MULT_4x4:                          break;                      case GeometryCmd.MTX_MULT_4x3:                          break;                      case GeometryCmd.MTX_MULT_3x3:                          break;                      case GeometryCmd.MTX_SCALE:                          break;                      case GeometryCmd.MTX_TRANS:                          break;                        #region Vertex commands                      // Multiply by the clipmatrix                      case GeometryCmd.VTX_16:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Y = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[1] & 0xFFFF)' true' 3' 12);                            GL.Vertex3(vector);                          break;                        case GeometryCmd.VTX_10:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0x3FF)' true' 3' 6);                          vector.Y = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FF)' true' 3' 6);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 3' 6);                            GL.Vertex3(vector);                          break;                        case GeometryCmd.VTX_XY:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Y = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_XZ:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_YZ:                          vector.Y = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_DIFF:                          float diffX' diffY' diffZ;                            diffX = Get_Double((int)(geoCmd[i].param[0] & 0x3FF)' true' 0' 9);                          diffY = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FFF)' true' 0' 9);                          diffZ = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 0' 9);                            vector.X += (diffX / 8);                          vector.Y += (diffY / 8);                          vector.Z += (diffZ / 8);                            GL.Vertex3(vector);                          break;                      #endregion                        case GeometryCmd.COLOR:                          // Convert the param to RGB555 color                          int r = (int)(geoCmd[i].param[0] & 0x1F);                          int g = (int)((geoCmd[i].param[0] >> 5) & 0x1F);                          int b = (int)((geoCmd[i].param[0] >> 10) & 0x1F);                            GL.Color3((float)r / 31.0f' (float)g / 31.0f' (float)b / 31.0f);                          break;                      case GeometryCmd.POLYGON_ATTR:                          break;                        #region Texture attributes                      case GeometryCmd.TEXCOORD:                          double s' t;                          s = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 11' 4);                          t = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 11' 4);                          GL.TexCoord2(s' t);                          break;                        case GeometryCmd.TEXIMAGE_PARAM:                          break;                      case GeometryCmd.PLTT_BASE:                          break;                      #endregion                        case GeometryCmd.DIF_AMB:                          break;                      case GeometryCmd.SPE_EMI:                          break;                      case GeometryCmd.LIGHT_VECTOR:                          break;                      case GeometryCmd.LIGHT_COLOR:                          break;                      case GeometryCmd.SHININESS:                          break;                        case GeometryCmd.NORMAL:                          float x' y' z;                          x = Get_Double((int)(geoCmd[i].param[0] & 0x3FFF)' true' 0' 9);                          y = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FFF)' true' 0' 9);                          z = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 0' 9);                            // Multiplay by the directional matrix                          GL.Normal3(x' y' z);                          break;                        case GeometryCmd.BEGIN_VTXS:                          if (geoCmd[i].param[0] == 0)                              GL.Begin(BeginMode.Triangles);                          else if (geoCmd[i].param[0] == 1)                              GL.Begin(BeginMode.Quads);                          else if (geoCmd[i].param[0] == 2)                              GL.Begin(BeginMode.TriangleStrip);                          else if (geoCmd[i].param[0] == 3)                              GL.Begin(BeginMode.QuadStrip);                          break;                      case GeometryCmd.END_VTXS:                          GL.End();                          break;                        case GeometryCmd.SWAP_BUFFERS:                          break;                      case GeometryCmd.VIEWPORT:                          break;                      case GeometryCmd.BOX_TEST:                          break;                      case GeometryCmd.POS_TEST:                          break;                      case GeometryCmd.VEC_TEST:                          break;                      default:                          break;                  }
Magic Number,_3DModels,BMD0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BMD0.cs,GeometryCommands,The following statement contains a magic number: switch ((GeometryCmd)geoCmd[i].cmd)                  {                      case GeometryCmd.NOP:                          break;                      case GeometryCmd.MTX_MODE:                          break;                      case GeometryCmd.MTX_PUSH:                          break;                      case GeometryCmd.MTX_POP:                          break;                      case GeometryCmd.MTX_STORE:                          break;                      case GeometryCmd.MTX_RESTORE:                          break;                      case GeometryCmd.MTX_IDENTITY:                          break;                      case GeometryCmd.MTX_LOAD_4x4:                          break;                      case GeometryCmd.MTX_LOAD_4x3:                          break;                      case GeometryCmd.MTX_MULT_4x4:                          break;                      case GeometryCmd.MTX_MULT_4x3:                          break;                      case GeometryCmd.MTX_MULT_3x3:                          break;                      case GeometryCmd.MTX_SCALE:                          break;                      case GeometryCmd.MTX_TRANS:                          break;                        #region Vertex commands                      // Multiply by the clipmatrix                      case GeometryCmd.VTX_16:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Y = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[1] & 0xFFFF)' true' 3' 12);                            GL.Vertex3(vector);                          break;                        case GeometryCmd.VTX_10:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0x3FF)' true' 3' 6);                          vector.Y = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FF)' true' 3' 6);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 3' 6);                            GL.Vertex3(vector);                          break;                        case GeometryCmd.VTX_XY:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Y = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_XZ:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_YZ:                          vector.Y = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_DIFF:                          float diffX' diffY' diffZ;                            diffX = Get_Double((int)(geoCmd[i].param[0] & 0x3FF)' true' 0' 9);                          diffY = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FFF)' true' 0' 9);                          diffZ = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 0' 9);                            vector.X += (diffX / 8);                          vector.Y += (diffY / 8);                          vector.Z += (diffZ / 8);                            GL.Vertex3(vector);                          break;                      #endregion                        case GeometryCmd.COLOR:                          // Convert the param to RGB555 color                          int r = (int)(geoCmd[i].param[0] & 0x1F);                          int g = (int)((geoCmd[i].param[0] >> 5) & 0x1F);                          int b = (int)((geoCmd[i].param[0] >> 10) & 0x1F);                            GL.Color3((float)r / 31.0f' (float)g / 31.0f' (float)b / 31.0f);                          break;                      case GeometryCmd.POLYGON_ATTR:                          break;                        #region Texture attributes                      case GeometryCmd.TEXCOORD:                          double s' t;                          s = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 11' 4);                          t = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 11' 4);                          GL.TexCoord2(s' t);                          break;                        case GeometryCmd.TEXIMAGE_PARAM:                          break;                      case GeometryCmd.PLTT_BASE:                          break;                      #endregion                        case GeometryCmd.DIF_AMB:                          break;                      case GeometryCmd.SPE_EMI:                          break;                      case GeometryCmd.LIGHT_VECTOR:                          break;                      case GeometryCmd.LIGHT_COLOR:                          break;                      case GeometryCmd.SHININESS:                          break;                        case GeometryCmd.NORMAL:                          float x' y' z;                          x = Get_Double((int)(geoCmd[i].param[0] & 0x3FFF)' true' 0' 9);                          y = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FFF)' true' 0' 9);                          z = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 0' 9);                            // Multiplay by the directional matrix                          GL.Normal3(x' y' z);                          break;                        case GeometryCmd.BEGIN_VTXS:                          if (geoCmd[i].param[0] == 0)                              GL.Begin(BeginMode.Triangles);                          else if (geoCmd[i].param[0] == 1)                              GL.Begin(BeginMode.Quads);                          else if (geoCmd[i].param[0] == 2)                              GL.Begin(BeginMode.TriangleStrip);                          else if (geoCmd[i].param[0] == 3)                              GL.Begin(BeginMode.QuadStrip);                          break;                      case GeometryCmd.END_VTXS:                          GL.End();                          break;                        case GeometryCmd.SWAP_BUFFERS:                          break;                      case GeometryCmd.VIEWPORT:                          break;                      case GeometryCmd.BOX_TEST:                          break;                      case GeometryCmd.POS_TEST:                          break;                      case GeometryCmd.VEC_TEST:                          break;                      default:                          break;                  }
Magic Number,_3DModels,BMD0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BMD0.cs,GeometryCommands,The following statement contains a magic number: switch ((GeometryCmd)geoCmd[i].cmd)                  {                      case GeometryCmd.NOP:                          break;                      case GeometryCmd.MTX_MODE:                          break;                      case GeometryCmd.MTX_PUSH:                          break;                      case GeometryCmd.MTX_POP:                          break;                      case GeometryCmd.MTX_STORE:                          break;                      case GeometryCmd.MTX_RESTORE:                          break;                      case GeometryCmd.MTX_IDENTITY:                          break;                      case GeometryCmd.MTX_LOAD_4x4:                          break;                      case GeometryCmd.MTX_LOAD_4x3:                          break;                      case GeometryCmd.MTX_MULT_4x4:                          break;                      case GeometryCmd.MTX_MULT_4x3:                          break;                      case GeometryCmd.MTX_MULT_3x3:                          break;                      case GeometryCmd.MTX_SCALE:                          break;                      case GeometryCmd.MTX_TRANS:                          break;                        #region Vertex commands                      // Multiply by the clipmatrix                      case GeometryCmd.VTX_16:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Y = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[1] & 0xFFFF)' true' 3' 12);                            GL.Vertex3(vector);                          break;                        case GeometryCmd.VTX_10:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0x3FF)' true' 3' 6);                          vector.Y = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FF)' true' 3' 6);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 3' 6);                            GL.Vertex3(vector);                          break;                        case GeometryCmd.VTX_XY:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Y = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_XZ:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_YZ:                          vector.Y = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_DIFF:                          float diffX' diffY' diffZ;                            diffX = Get_Double((int)(geoCmd[i].param[0] & 0x3FF)' true' 0' 9);                          diffY = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FFF)' true' 0' 9);                          diffZ = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 0' 9);                            vector.X += (diffX / 8);                          vector.Y += (diffY / 8);                          vector.Z += (diffZ / 8);                            GL.Vertex3(vector);                          break;                      #endregion                        case GeometryCmd.COLOR:                          // Convert the param to RGB555 color                          int r = (int)(geoCmd[i].param[0] & 0x1F);                          int g = (int)((geoCmd[i].param[0] >> 5) & 0x1F);                          int b = (int)((geoCmd[i].param[0] >> 10) & 0x1F);                            GL.Color3((float)r / 31.0f' (float)g / 31.0f' (float)b / 31.0f);                          break;                      case GeometryCmd.POLYGON_ATTR:                          break;                        #region Texture attributes                      case GeometryCmd.TEXCOORD:                          double s' t;                          s = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 11' 4);                          t = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 11' 4);                          GL.TexCoord2(s' t);                          break;                        case GeometryCmd.TEXIMAGE_PARAM:                          break;                      case GeometryCmd.PLTT_BASE:                          break;                      #endregion                        case GeometryCmd.DIF_AMB:                          break;                      case GeometryCmd.SPE_EMI:                          break;                      case GeometryCmd.LIGHT_VECTOR:                          break;                      case GeometryCmd.LIGHT_COLOR:                          break;                      case GeometryCmd.SHININESS:                          break;                        case GeometryCmd.NORMAL:                          float x' y' z;                          x = Get_Double((int)(geoCmd[i].param[0] & 0x3FFF)' true' 0' 9);                          y = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FFF)' true' 0' 9);                          z = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 0' 9);                            // Multiplay by the directional matrix                          GL.Normal3(x' y' z);                          break;                        case GeometryCmd.BEGIN_VTXS:                          if (geoCmd[i].param[0] == 0)                              GL.Begin(BeginMode.Triangles);                          else if (geoCmd[i].param[0] == 1)                              GL.Begin(BeginMode.Quads);                          else if (geoCmd[i].param[0] == 2)                              GL.Begin(BeginMode.TriangleStrip);                          else if (geoCmd[i].param[0] == 3)                              GL.Begin(BeginMode.QuadStrip);                          break;                      case GeometryCmd.END_VTXS:                          GL.End();                          break;                        case GeometryCmd.SWAP_BUFFERS:                          break;                      case GeometryCmd.VIEWPORT:                          break;                      case GeometryCmd.BOX_TEST:                          break;                      case GeometryCmd.POS_TEST:                          break;                      case GeometryCmd.VEC_TEST:                          break;                      default:                          break;                  }
Magic Number,_3DModels,BMD0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BMD0.cs,GeometryCommands,The following statement contains a magic number: switch ((GeometryCmd)geoCmd[i].cmd)                  {                      case GeometryCmd.NOP:                          break;                      case GeometryCmd.MTX_MODE:                          break;                      case GeometryCmd.MTX_PUSH:                          break;                      case GeometryCmd.MTX_POP:                          break;                      case GeometryCmd.MTX_STORE:                          break;                      case GeometryCmd.MTX_RESTORE:                          break;                      case GeometryCmd.MTX_IDENTITY:                          break;                      case GeometryCmd.MTX_LOAD_4x4:                          break;                      case GeometryCmd.MTX_LOAD_4x3:                          break;                      case GeometryCmd.MTX_MULT_4x4:                          break;                      case GeometryCmd.MTX_MULT_4x3:                          break;                      case GeometryCmd.MTX_MULT_3x3:                          break;                      case GeometryCmd.MTX_SCALE:                          break;                      case GeometryCmd.MTX_TRANS:                          break;                        #region Vertex commands                      // Multiply by the clipmatrix                      case GeometryCmd.VTX_16:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Y = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[1] & 0xFFFF)' true' 3' 12);                            GL.Vertex3(vector);                          break;                        case GeometryCmd.VTX_10:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0x3FF)' true' 3' 6);                          vector.Y = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FF)' true' 3' 6);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 3' 6);                            GL.Vertex3(vector);                          break;                        case GeometryCmd.VTX_XY:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Y = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_XZ:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_YZ:                          vector.Y = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_DIFF:                          float diffX' diffY' diffZ;                            diffX = Get_Double((int)(geoCmd[i].param[0] & 0x3FF)' true' 0' 9);                          diffY = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FFF)' true' 0' 9);                          diffZ = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 0' 9);                            vector.X += (diffX / 8);                          vector.Y += (diffY / 8);                          vector.Z += (diffZ / 8);                            GL.Vertex3(vector);                          break;                      #endregion                        case GeometryCmd.COLOR:                          // Convert the param to RGB555 color                          int r = (int)(geoCmd[i].param[0] & 0x1F);                          int g = (int)((geoCmd[i].param[0] >> 5) & 0x1F);                          int b = (int)((geoCmd[i].param[0] >> 10) & 0x1F);                            GL.Color3((float)r / 31.0f' (float)g / 31.0f' (float)b / 31.0f);                          break;                      case GeometryCmd.POLYGON_ATTR:                          break;                        #region Texture attributes                      case GeometryCmd.TEXCOORD:                          double s' t;                          s = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 11' 4);                          t = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 11' 4);                          GL.TexCoord2(s' t);                          break;                        case GeometryCmd.TEXIMAGE_PARAM:                          break;                      case GeometryCmd.PLTT_BASE:                          break;                      #endregion                        case GeometryCmd.DIF_AMB:                          break;                      case GeometryCmd.SPE_EMI:                          break;                      case GeometryCmd.LIGHT_VECTOR:                          break;                      case GeometryCmd.LIGHT_COLOR:                          break;                      case GeometryCmd.SHININESS:                          break;                        case GeometryCmd.NORMAL:                          float x' y' z;                          x = Get_Double((int)(geoCmd[i].param[0] & 0x3FFF)' true' 0' 9);                          y = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FFF)' true' 0' 9);                          z = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 0' 9);                            // Multiplay by the directional matrix                          GL.Normal3(x' y' z);                          break;                        case GeometryCmd.BEGIN_VTXS:                          if (geoCmd[i].param[0] == 0)                              GL.Begin(BeginMode.Triangles);                          else if (geoCmd[i].param[0] == 1)                              GL.Begin(BeginMode.Quads);                          else if (geoCmd[i].param[0] == 2)                              GL.Begin(BeginMode.TriangleStrip);                          else if (geoCmd[i].param[0] == 3)                              GL.Begin(BeginMode.QuadStrip);                          break;                      case GeometryCmd.END_VTXS:                          GL.End();                          break;                        case GeometryCmd.SWAP_BUFFERS:                          break;                      case GeometryCmd.VIEWPORT:                          break;                      case GeometryCmd.BOX_TEST:                          break;                      case GeometryCmd.POS_TEST:                          break;                      case GeometryCmd.VEC_TEST:                          break;                      default:                          break;                  }
Magic Number,_3DModels,BMD0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BMD0.cs,GeometryCommands,The following statement contains a magic number: switch ((GeometryCmd)geoCmd[i].cmd)                  {                      case GeometryCmd.NOP:                          break;                      case GeometryCmd.MTX_MODE:                          break;                      case GeometryCmd.MTX_PUSH:                          break;                      case GeometryCmd.MTX_POP:                          break;                      case GeometryCmd.MTX_STORE:                          break;                      case GeometryCmd.MTX_RESTORE:                          break;                      case GeometryCmd.MTX_IDENTITY:                          break;                      case GeometryCmd.MTX_LOAD_4x4:                          break;                      case GeometryCmd.MTX_LOAD_4x3:                          break;                      case GeometryCmd.MTX_MULT_4x4:                          break;                      case GeometryCmd.MTX_MULT_4x3:                          break;                      case GeometryCmd.MTX_MULT_3x3:                          break;                      case GeometryCmd.MTX_SCALE:                          break;                      case GeometryCmd.MTX_TRANS:                          break;                        #region Vertex commands                      // Multiply by the clipmatrix                      case GeometryCmd.VTX_16:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Y = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[1] & 0xFFFF)' true' 3' 12);                            GL.Vertex3(vector);                          break;                        case GeometryCmd.VTX_10:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0x3FF)' true' 3' 6);                          vector.Y = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FF)' true' 3' 6);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 3' 6);                            GL.Vertex3(vector);                          break;                        case GeometryCmd.VTX_XY:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Y = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_XZ:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_YZ:                          vector.Y = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_DIFF:                          float diffX' diffY' diffZ;                            diffX = Get_Double((int)(geoCmd[i].param[0] & 0x3FF)' true' 0' 9);                          diffY = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FFF)' true' 0' 9);                          diffZ = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 0' 9);                            vector.X += (diffX / 8);                          vector.Y += (diffY / 8);                          vector.Z += (diffZ / 8);                            GL.Vertex3(vector);                          break;                      #endregion                        case GeometryCmd.COLOR:                          // Convert the param to RGB555 color                          int r = (int)(geoCmd[i].param[0] & 0x1F);                          int g = (int)((geoCmd[i].param[0] >> 5) & 0x1F);                          int b = (int)((geoCmd[i].param[0] >> 10) & 0x1F);                            GL.Color3((float)r / 31.0f' (float)g / 31.0f' (float)b / 31.0f);                          break;                      case GeometryCmd.POLYGON_ATTR:                          break;                        #region Texture attributes                      case GeometryCmd.TEXCOORD:                          double s' t;                          s = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 11' 4);                          t = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 11' 4);                          GL.TexCoord2(s' t);                          break;                        case GeometryCmd.TEXIMAGE_PARAM:                          break;                      case GeometryCmd.PLTT_BASE:                          break;                      #endregion                        case GeometryCmd.DIF_AMB:                          break;                      case GeometryCmd.SPE_EMI:                          break;                      case GeometryCmd.LIGHT_VECTOR:                          break;                      case GeometryCmd.LIGHT_COLOR:                          break;                      case GeometryCmd.SHININESS:                          break;                        case GeometryCmd.NORMAL:                          float x' y' z;                          x = Get_Double((int)(geoCmd[i].param[0] & 0x3FFF)' true' 0' 9);                          y = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FFF)' true' 0' 9);                          z = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 0' 9);                            // Multiplay by the directional matrix                          GL.Normal3(x' y' z);                          break;                        case GeometryCmd.BEGIN_VTXS:                          if (geoCmd[i].param[0] == 0)                              GL.Begin(BeginMode.Triangles);                          else if (geoCmd[i].param[0] == 1)                              GL.Begin(BeginMode.Quads);                          else if (geoCmd[i].param[0] == 2)                              GL.Begin(BeginMode.TriangleStrip);                          else if (geoCmd[i].param[0] == 3)                              GL.Begin(BeginMode.QuadStrip);                          break;                      case GeometryCmd.END_VTXS:                          GL.End();                          break;                        case GeometryCmd.SWAP_BUFFERS:                          break;                      case GeometryCmd.VIEWPORT:                          break;                      case GeometryCmd.BOX_TEST:                          break;                      case GeometryCmd.POS_TEST:                          break;                      case GeometryCmd.VEC_TEST:                          break;                      default:                          break;                  }
Magic Number,_3DModels,BMD0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BMD0.cs,GeometryCommands,The following statement contains a magic number: switch ((GeometryCmd)geoCmd[i].cmd)                  {                      case GeometryCmd.NOP:                          break;                      case GeometryCmd.MTX_MODE:                          break;                      case GeometryCmd.MTX_PUSH:                          break;                      case GeometryCmd.MTX_POP:                          break;                      case GeometryCmd.MTX_STORE:                          break;                      case GeometryCmd.MTX_RESTORE:                          break;                      case GeometryCmd.MTX_IDENTITY:                          break;                      case GeometryCmd.MTX_LOAD_4x4:                          break;                      case GeometryCmd.MTX_LOAD_4x3:                          break;                      case GeometryCmd.MTX_MULT_4x4:                          break;                      case GeometryCmd.MTX_MULT_4x3:                          break;                      case GeometryCmd.MTX_MULT_3x3:                          break;                      case GeometryCmd.MTX_SCALE:                          break;                      case GeometryCmd.MTX_TRANS:                          break;                        #region Vertex commands                      // Multiply by the clipmatrix                      case GeometryCmd.VTX_16:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Y = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[1] & 0xFFFF)' true' 3' 12);                            GL.Vertex3(vector);                          break;                        case GeometryCmd.VTX_10:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0x3FF)' true' 3' 6);                          vector.Y = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FF)' true' 3' 6);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 3' 6);                            GL.Vertex3(vector);                          break;                        case GeometryCmd.VTX_XY:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Y = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_XZ:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_YZ:                          vector.Y = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_DIFF:                          float diffX' diffY' diffZ;                            diffX = Get_Double((int)(geoCmd[i].param[0] & 0x3FF)' true' 0' 9);                          diffY = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FFF)' true' 0' 9);                          diffZ = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 0' 9);                            vector.X += (diffX / 8);                          vector.Y += (diffY / 8);                          vector.Z += (diffZ / 8);                            GL.Vertex3(vector);                          break;                      #endregion                        case GeometryCmd.COLOR:                          // Convert the param to RGB555 color                          int r = (int)(geoCmd[i].param[0] & 0x1F);                          int g = (int)((geoCmd[i].param[0] >> 5) & 0x1F);                          int b = (int)((geoCmd[i].param[0] >> 10) & 0x1F);                            GL.Color3((float)r / 31.0f' (float)g / 31.0f' (float)b / 31.0f);                          break;                      case GeometryCmd.POLYGON_ATTR:                          break;                        #region Texture attributes                      case GeometryCmd.TEXCOORD:                          double s' t;                          s = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 11' 4);                          t = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 11' 4);                          GL.TexCoord2(s' t);                          break;                        case GeometryCmd.TEXIMAGE_PARAM:                          break;                      case GeometryCmd.PLTT_BASE:                          break;                      #endregion                        case GeometryCmd.DIF_AMB:                          break;                      case GeometryCmd.SPE_EMI:                          break;                      case GeometryCmd.LIGHT_VECTOR:                          break;                      case GeometryCmd.LIGHT_COLOR:                          break;                      case GeometryCmd.SHININESS:                          break;                        case GeometryCmd.NORMAL:                          float x' y' z;                          x = Get_Double((int)(geoCmd[i].param[0] & 0x3FFF)' true' 0' 9);                          y = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FFF)' true' 0' 9);                          z = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 0' 9);                            // Multiplay by the directional matrix                          GL.Normal3(x' y' z);                          break;                        case GeometryCmd.BEGIN_VTXS:                          if (geoCmd[i].param[0] == 0)                              GL.Begin(BeginMode.Triangles);                          else if (geoCmd[i].param[0] == 1)                              GL.Begin(BeginMode.Quads);                          else if (geoCmd[i].param[0] == 2)                              GL.Begin(BeginMode.TriangleStrip);                          else if (geoCmd[i].param[0] == 3)                              GL.Begin(BeginMode.QuadStrip);                          break;                      case GeometryCmd.END_VTXS:                          GL.End();                          break;                        case GeometryCmd.SWAP_BUFFERS:                          break;                      case GeometryCmd.VIEWPORT:                          break;                      case GeometryCmd.BOX_TEST:                          break;                      case GeometryCmd.POS_TEST:                          break;                      case GeometryCmd.VEC_TEST:                          break;                      default:                          break;                  }
Magic Number,_3DModels,BMD0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BMD0.cs,GeometryCommands,The following statement contains a magic number: switch ((GeometryCmd)geoCmd[i].cmd)                  {                      case GeometryCmd.NOP:                          break;                      case GeometryCmd.MTX_MODE:                          break;                      case GeometryCmd.MTX_PUSH:                          break;                      case GeometryCmd.MTX_POP:                          break;                      case GeometryCmd.MTX_STORE:                          break;                      case GeometryCmd.MTX_RESTORE:                          break;                      case GeometryCmd.MTX_IDENTITY:                          break;                      case GeometryCmd.MTX_LOAD_4x4:                          break;                      case GeometryCmd.MTX_LOAD_4x3:                          break;                      case GeometryCmd.MTX_MULT_4x4:                          break;                      case GeometryCmd.MTX_MULT_4x3:                          break;                      case GeometryCmd.MTX_MULT_3x3:                          break;                      case GeometryCmd.MTX_SCALE:                          break;                      case GeometryCmd.MTX_TRANS:                          break;                        #region Vertex commands                      // Multiply by the clipmatrix                      case GeometryCmd.VTX_16:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Y = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[1] & 0xFFFF)' true' 3' 12);                            GL.Vertex3(vector);                          break;                        case GeometryCmd.VTX_10:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0x3FF)' true' 3' 6);                          vector.Y = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FF)' true' 3' 6);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 3' 6);                            GL.Vertex3(vector);                          break;                        case GeometryCmd.VTX_XY:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Y = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_XZ:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_YZ:                          vector.Y = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_DIFF:                          float diffX' diffY' diffZ;                            diffX = Get_Double((int)(geoCmd[i].param[0] & 0x3FF)' true' 0' 9);                          diffY = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FFF)' true' 0' 9);                          diffZ = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 0' 9);                            vector.X += (diffX / 8);                          vector.Y += (diffY / 8);                          vector.Z += (diffZ / 8);                            GL.Vertex3(vector);                          break;                      #endregion                        case GeometryCmd.COLOR:                          // Convert the param to RGB555 color                          int r = (int)(geoCmd[i].param[0] & 0x1F);                          int g = (int)((geoCmd[i].param[0] >> 5) & 0x1F);                          int b = (int)((geoCmd[i].param[0] >> 10) & 0x1F);                            GL.Color3((float)r / 31.0f' (float)g / 31.0f' (float)b / 31.0f);                          break;                      case GeometryCmd.POLYGON_ATTR:                          break;                        #region Texture attributes                      case GeometryCmd.TEXCOORD:                          double s' t;                          s = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 11' 4);                          t = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 11' 4);                          GL.TexCoord2(s' t);                          break;                        case GeometryCmd.TEXIMAGE_PARAM:                          break;                      case GeometryCmd.PLTT_BASE:                          break;                      #endregion                        case GeometryCmd.DIF_AMB:                          break;                      case GeometryCmd.SPE_EMI:                          break;                      case GeometryCmd.LIGHT_VECTOR:                          break;                      case GeometryCmd.LIGHT_COLOR:                          break;                      case GeometryCmd.SHININESS:                          break;                        case GeometryCmd.NORMAL:                          float x' y' z;                          x = Get_Double((int)(geoCmd[i].param[0] & 0x3FFF)' true' 0' 9);                          y = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FFF)' true' 0' 9);                          z = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 0' 9);                            // Multiplay by the directional matrix                          GL.Normal3(x' y' z);                          break;                        case GeometryCmd.BEGIN_VTXS:                          if (geoCmd[i].param[0] == 0)                              GL.Begin(BeginMode.Triangles);                          else if (geoCmd[i].param[0] == 1)                              GL.Begin(BeginMode.Quads);                          else if (geoCmd[i].param[0] == 2)                              GL.Begin(BeginMode.TriangleStrip);                          else if (geoCmd[i].param[0] == 3)                              GL.Begin(BeginMode.QuadStrip);                          break;                      case GeometryCmd.END_VTXS:                          GL.End();                          break;                        case GeometryCmd.SWAP_BUFFERS:                          break;                      case GeometryCmd.VIEWPORT:                          break;                      case GeometryCmd.BOX_TEST:                          break;                      case GeometryCmd.POS_TEST:                          break;                      case GeometryCmd.VEC_TEST:                          break;                      default:                          break;                  }
Magic Number,_3DModels,BMD0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BMD0.cs,GeometryCommands,The following statement contains a magic number: switch ((GeometryCmd)geoCmd[i].cmd)                  {                      case GeometryCmd.NOP:                          break;                      case GeometryCmd.MTX_MODE:                          break;                      case GeometryCmd.MTX_PUSH:                          break;                      case GeometryCmd.MTX_POP:                          break;                      case GeometryCmd.MTX_STORE:                          break;                      case GeometryCmd.MTX_RESTORE:                          break;                      case GeometryCmd.MTX_IDENTITY:                          break;                      case GeometryCmd.MTX_LOAD_4x4:                          break;                      case GeometryCmd.MTX_LOAD_4x3:                          break;                      case GeometryCmd.MTX_MULT_4x4:                          break;                      case GeometryCmd.MTX_MULT_4x3:                          break;                      case GeometryCmd.MTX_MULT_3x3:                          break;                      case GeometryCmd.MTX_SCALE:                          break;                      case GeometryCmd.MTX_TRANS:                          break;                        #region Vertex commands                      // Multiply by the clipmatrix                      case GeometryCmd.VTX_16:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Y = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[1] & 0xFFFF)' true' 3' 12);                            GL.Vertex3(vector);                          break;                        case GeometryCmd.VTX_10:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0x3FF)' true' 3' 6);                          vector.Y = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FF)' true' 3' 6);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 3' 6);                            GL.Vertex3(vector);                          break;                        case GeometryCmd.VTX_XY:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Y = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_XZ:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_YZ:                          vector.Y = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_DIFF:                          float diffX' diffY' diffZ;                            diffX = Get_Double((int)(geoCmd[i].param[0] & 0x3FF)' true' 0' 9);                          diffY = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FFF)' true' 0' 9);                          diffZ = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 0' 9);                            vector.X += (diffX / 8);                          vector.Y += (diffY / 8);                          vector.Z += (diffZ / 8);                            GL.Vertex3(vector);                          break;                      #endregion                        case GeometryCmd.COLOR:                          // Convert the param to RGB555 color                          int r = (int)(geoCmd[i].param[0] & 0x1F);                          int g = (int)((geoCmd[i].param[0] >> 5) & 0x1F);                          int b = (int)((geoCmd[i].param[0] >> 10) & 0x1F);                            GL.Color3((float)r / 31.0f' (float)g / 31.0f' (float)b / 31.0f);                          break;                      case GeometryCmd.POLYGON_ATTR:                          break;                        #region Texture attributes                      case GeometryCmd.TEXCOORD:                          double s' t;                          s = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 11' 4);                          t = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 11' 4);                          GL.TexCoord2(s' t);                          break;                        case GeometryCmd.TEXIMAGE_PARAM:                          break;                      case GeometryCmd.PLTT_BASE:                          break;                      #endregion                        case GeometryCmd.DIF_AMB:                          break;                      case GeometryCmd.SPE_EMI:                          break;                      case GeometryCmd.LIGHT_VECTOR:                          break;                      case GeometryCmd.LIGHT_COLOR:                          break;                      case GeometryCmd.SHININESS:                          break;                        case GeometryCmd.NORMAL:                          float x' y' z;                          x = Get_Double((int)(geoCmd[i].param[0] & 0x3FFF)' true' 0' 9);                          y = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FFF)' true' 0' 9);                          z = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 0' 9);                            // Multiplay by the directional matrix                          GL.Normal3(x' y' z);                          break;                        case GeometryCmd.BEGIN_VTXS:                          if (geoCmd[i].param[0] == 0)                              GL.Begin(BeginMode.Triangles);                          else if (geoCmd[i].param[0] == 1)                              GL.Begin(BeginMode.Quads);                          else if (geoCmd[i].param[0] == 2)                              GL.Begin(BeginMode.TriangleStrip);                          else if (geoCmd[i].param[0] == 3)                              GL.Begin(BeginMode.QuadStrip);                          break;                      case GeometryCmd.END_VTXS:                          GL.End();                          break;                        case GeometryCmd.SWAP_BUFFERS:                          break;                      case GeometryCmd.VIEWPORT:                          break;                      case GeometryCmd.BOX_TEST:                          break;                      case GeometryCmd.POS_TEST:                          break;                      case GeometryCmd.VEC_TEST:                          break;                      default:                          break;                  }
Magic Number,_3DModels,BMD0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BMD0.cs,GeometryCommands,The following statement contains a magic number: switch ((GeometryCmd)geoCmd[i].cmd)                  {                      case GeometryCmd.NOP:                          break;                      case GeometryCmd.MTX_MODE:                          break;                      case GeometryCmd.MTX_PUSH:                          break;                      case GeometryCmd.MTX_POP:                          break;                      case GeometryCmd.MTX_STORE:                          break;                      case GeometryCmd.MTX_RESTORE:                          break;                      case GeometryCmd.MTX_IDENTITY:                          break;                      case GeometryCmd.MTX_LOAD_4x4:                          break;                      case GeometryCmd.MTX_LOAD_4x3:                          break;                      case GeometryCmd.MTX_MULT_4x4:                          break;                      case GeometryCmd.MTX_MULT_4x3:                          break;                      case GeometryCmd.MTX_MULT_3x3:                          break;                      case GeometryCmd.MTX_SCALE:                          break;                      case GeometryCmd.MTX_TRANS:                          break;                        #region Vertex commands                      // Multiply by the clipmatrix                      case GeometryCmd.VTX_16:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Y = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[1] & 0xFFFF)' true' 3' 12);                            GL.Vertex3(vector);                          break;                        case GeometryCmd.VTX_10:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0x3FF)' true' 3' 6);                          vector.Y = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FF)' true' 3' 6);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 3' 6);                            GL.Vertex3(vector);                          break;                        case GeometryCmd.VTX_XY:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Y = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_XZ:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_YZ:                          vector.Y = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_DIFF:                          float diffX' diffY' diffZ;                            diffX = Get_Double((int)(geoCmd[i].param[0] & 0x3FF)' true' 0' 9);                          diffY = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FFF)' true' 0' 9);                          diffZ = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 0' 9);                            vector.X += (diffX / 8);                          vector.Y += (diffY / 8);                          vector.Z += (diffZ / 8);                            GL.Vertex3(vector);                          break;                      #endregion                        case GeometryCmd.COLOR:                          // Convert the param to RGB555 color                          int r = (int)(geoCmd[i].param[0] & 0x1F);                          int g = (int)((geoCmd[i].param[0] >> 5) & 0x1F);                          int b = (int)((geoCmd[i].param[0] >> 10) & 0x1F);                            GL.Color3((float)r / 31.0f' (float)g / 31.0f' (float)b / 31.0f);                          break;                      case GeometryCmd.POLYGON_ATTR:                          break;                        #region Texture attributes                      case GeometryCmd.TEXCOORD:                          double s' t;                          s = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 11' 4);                          t = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 11' 4);                          GL.TexCoord2(s' t);                          break;                        case GeometryCmd.TEXIMAGE_PARAM:                          break;                      case GeometryCmd.PLTT_BASE:                          break;                      #endregion                        case GeometryCmd.DIF_AMB:                          break;                      case GeometryCmd.SPE_EMI:                          break;                      case GeometryCmd.LIGHT_VECTOR:                          break;                      case GeometryCmd.LIGHT_COLOR:                          break;                      case GeometryCmd.SHININESS:                          break;                        case GeometryCmd.NORMAL:                          float x' y' z;                          x = Get_Double((int)(geoCmd[i].param[0] & 0x3FFF)' true' 0' 9);                          y = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FFF)' true' 0' 9);                          z = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 0' 9);                            // Multiplay by the directional matrix                          GL.Normal3(x' y' z);                          break;                        case GeometryCmd.BEGIN_VTXS:                          if (geoCmd[i].param[0] == 0)                              GL.Begin(BeginMode.Triangles);                          else if (geoCmd[i].param[0] == 1)                              GL.Begin(BeginMode.Quads);                          else if (geoCmd[i].param[0] == 2)                              GL.Begin(BeginMode.TriangleStrip);                          else if (geoCmd[i].param[0] == 3)                              GL.Begin(BeginMode.QuadStrip);                          break;                      case GeometryCmd.END_VTXS:                          GL.End();                          break;                        case GeometryCmd.SWAP_BUFFERS:                          break;                      case GeometryCmd.VIEWPORT:                          break;                      case GeometryCmd.BOX_TEST:                          break;                      case GeometryCmd.POS_TEST:                          break;                      case GeometryCmd.VEC_TEST:                          break;                      default:                          break;                  }
Magic Number,_3DModels,BMD0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BMD0.cs,GeometryCommands,The following statement contains a magic number: switch ((GeometryCmd)geoCmd[i].cmd)                  {                      case GeometryCmd.NOP:                          break;                      case GeometryCmd.MTX_MODE:                          break;                      case GeometryCmd.MTX_PUSH:                          break;                      case GeometryCmd.MTX_POP:                          break;                      case GeometryCmd.MTX_STORE:                          break;                      case GeometryCmd.MTX_RESTORE:                          break;                      case GeometryCmd.MTX_IDENTITY:                          break;                      case GeometryCmd.MTX_LOAD_4x4:                          break;                      case GeometryCmd.MTX_LOAD_4x3:                          break;                      case GeometryCmd.MTX_MULT_4x4:                          break;                      case GeometryCmd.MTX_MULT_4x3:                          break;                      case GeometryCmd.MTX_MULT_3x3:                          break;                      case GeometryCmd.MTX_SCALE:                          break;                      case GeometryCmd.MTX_TRANS:                          break;                        #region Vertex commands                      // Multiply by the clipmatrix                      case GeometryCmd.VTX_16:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Y = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[1] & 0xFFFF)' true' 3' 12);                            GL.Vertex3(vector);                          break;                        case GeometryCmd.VTX_10:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0x3FF)' true' 3' 6);                          vector.Y = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FF)' true' 3' 6);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 3' 6);                            GL.Vertex3(vector);                          break;                        case GeometryCmd.VTX_XY:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Y = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_XZ:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_YZ:                          vector.Y = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_DIFF:                          float diffX' diffY' diffZ;                            diffX = Get_Double((int)(geoCmd[i].param[0] & 0x3FF)' true' 0' 9);                          diffY = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FFF)' true' 0' 9);                          diffZ = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 0' 9);                            vector.X += (diffX / 8);                          vector.Y += (diffY / 8);                          vector.Z += (diffZ / 8);                            GL.Vertex3(vector);                          break;                      #endregion                        case GeometryCmd.COLOR:                          // Convert the param to RGB555 color                          int r = (int)(geoCmd[i].param[0] & 0x1F);                          int g = (int)((geoCmd[i].param[0] >> 5) & 0x1F);                          int b = (int)((geoCmd[i].param[0] >> 10) & 0x1F);                            GL.Color3((float)r / 31.0f' (float)g / 31.0f' (float)b / 31.0f);                          break;                      case GeometryCmd.POLYGON_ATTR:                          break;                        #region Texture attributes                      case GeometryCmd.TEXCOORD:                          double s' t;                          s = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 11' 4);                          t = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 11' 4);                          GL.TexCoord2(s' t);                          break;                        case GeometryCmd.TEXIMAGE_PARAM:                          break;                      case GeometryCmd.PLTT_BASE:                          break;                      #endregion                        case GeometryCmd.DIF_AMB:                          break;                      case GeometryCmd.SPE_EMI:                          break;                      case GeometryCmd.LIGHT_VECTOR:                          break;                      case GeometryCmd.LIGHT_COLOR:                          break;                      case GeometryCmd.SHININESS:                          break;                        case GeometryCmd.NORMAL:                          float x' y' z;                          x = Get_Double((int)(geoCmd[i].param[0] & 0x3FFF)' true' 0' 9);                          y = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FFF)' true' 0' 9);                          z = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 0' 9);                            // Multiplay by the directional matrix                          GL.Normal3(x' y' z);                          break;                        case GeometryCmd.BEGIN_VTXS:                          if (geoCmd[i].param[0] == 0)                              GL.Begin(BeginMode.Triangles);                          else if (geoCmd[i].param[0] == 1)                              GL.Begin(BeginMode.Quads);                          else if (geoCmd[i].param[0] == 2)                              GL.Begin(BeginMode.TriangleStrip);                          else if (geoCmd[i].param[0] == 3)                              GL.Begin(BeginMode.QuadStrip);                          break;                      case GeometryCmd.END_VTXS:                          GL.End();                          break;                        case GeometryCmd.SWAP_BUFFERS:                          break;                      case GeometryCmd.VIEWPORT:                          break;                      case GeometryCmd.BOX_TEST:                          break;                      case GeometryCmd.POS_TEST:                          break;                      case GeometryCmd.VEC_TEST:                          break;                      default:                          break;                  }
Magic Number,_3DModels,BMD0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BMD0.cs,GeometryCommands,The following statement contains a magic number: switch ((GeometryCmd)geoCmd[i].cmd)                  {                      case GeometryCmd.NOP:                          break;                      case GeometryCmd.MTX_MODE:                          break;                      case GeometryCmd.MTX_PUSH:                          break;                      case GeometryCmd.MTX_POP:                          break;                      case GeometryCmd.MTX_STORE:                          break;                      case GeometryCmd.MTX_RESTORE:                          break;                      case GeometryCmd.MTX_IDENTITY:                          break;                      case GeometryCmd.MTX_LOAD_4x4:                          break;                      case GeometryCmd.MTX_LOAD_4x3:                          break;                      case GeometryCmd.MTX_MULT_4x4:                          break;                      case GeometryCmd.MTX_MULT_4x3:                          break;                      case GeometryCmd.MTX_MULT_3x3:                          break;                      case GeometryCmd.MTX_SCALE:                          break;                      case GeometryCmd.MTX_TRANS:                          break;                        #region Vertex commands                      // Multiply by the clipmatrix                      case GeometryCmd.VTX_16:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Y = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[1] & 0xFFFF)' true' 3' 12);                            GL.Vertex3(vector);                          break;                        case GeometryCmd.VTX_10:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0x3FF)' true' 3' 6);                          vector.Y = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FF)' true' 3' 6);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 3' 6);                            GL.Vertex3(vector);                          break;                        case GeometryCmd.VTX_XY:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Y = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_XZ:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_YZ:                          vector.Y = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_DIFF:                          float diffX' diffY' diffZ;                            diffX = Get_Double((int)(geoCmd[i].param[0] & 0x3FF)' true' 0' 9);                          diffY = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FFF)' true' 0' 9);                          diffZ = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 0' 9);                            vector.X += (diffX / 8);                          vector.Y += (diffY / 8);                          vector.Z += (diffZ / 8);                            GL.Vertex3(vector);                          break;                      #endregion                        case GeometryCmd.COLOR:                          // Convert the param to RGB555 color                          int r = (int)(geoCmd[i].param[0] & 0x1F);                          int g = (int)((geoCmd[i].param[0] >> 5) & 0x1F);                          int b = (int)((geoCmd[i].param[0] >> 10) & 0x1F);                            GL.Color3((float)r / 31.0f' (float)g / 31.0f' (float)b / 31.0f);                          break;                      case GeometryCmd.POLYGON_ATTR:                          break;                        #region Texture attributes                      case GeometryCmd.TEXCOORD:                          double s' t;                          s = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 11' 4);                          t = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 11' 4);                          GL.TexCoord2(s' t);                          break;                        case GeometryCmd.TEXIMAGE_PARAM:                          break;                      case GeometryCmd.PLTT_BASE:                          break;                      #endregion                        case GeometryCmd.DIF_AMB:                          break;                      case GeometryCmd.SPE_EMI:                          break;                      case GeometryCmd.LIGHT_VECTOR:                          break;                      case GeometryCmd.LIGHT_COLOR:                          break;                      case GeometryCmd.SHININESS:                          break;                        case GeometryCmd.NORMAL:                          float x' y' z;                          x = Get_Double((int)(geoCmd[i].param[0] & 0x3FFF)' true' 0' 9);                          y = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FFF)' true' 0' 9);                          z = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 0' 9);                            // Multiplay by the directional matrix                          GL.Normal3(x' y' z);                          break;                        case GeometryCmd.BEGIN_VTXS:                          if (geoCmd[i].param[0] == 0)                              GL.Begin(BeginMode.Triangles);                          else if (geoCmd[i].param[0] == 1)                              GL.Begin(BeginMode.Quads);                          else if (geoCmd[i].param[0] == 2)                              GL.Begin(BeginMode.TriangleStrip);                          else if (geoCmd[i].param[0] == 3)                              GL.Begin(BeginMode.QuadStrip);                          break;                      case GeometryCmd.END_VTXS:                          GL.End();                          break;                        case GeometryCmd.SWAP_BUFFERS:                          break;                      case GeometryCmd.VIEWPORT:                          break;                      case GeometryCmd.BOX_TEST:                          break;                      case GeometryCmd.POS_TEST:                          break;                      case GeometryCmd.VEC_TEST:                          break;                      default:                          break;                  }
Magic Number,_3DModels,BMD0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BMD0.cs,GeometryCommands,The following statement contains a magic number: switch ((GeometryCmd)geoCmd[i].cmd)                  {                      case GeometryCmd.NOP:                          break;                      case GeometryCmd.MTX_MODE:                          break;                      case GeometryCmd.MTX_PUSH:                          break;                      case GeometryCmd.MTX_POP:                          break;                      case GeometryCmd.MTX_STORE:                          break;                      case GeometryCmd.MTX_RESTORE:                          break;                      case GeometryCmd.MTX_IDENTITY:                          break;                      case GeometryCmd.MTX_LOAD_4x4:                          break;                      case GeometryCmd.MTX_LOAD_4x3:                          break;                      case GeometryCmd.MTX_MULT_4x4:                          break;                      case GeometryCmd.MTX_MULT_4x3:                          break;                      case GeometryCmd.MTX_MULT_3x3:                          break;                      case GeometryCmd.MTX_SCALE:                          break;                      case GeometryCmd.MTX_TRANS:                          break;                        #region Vertex commands                      // Multiply by the clipmatrix                      case GeometryCmd.VTX_16:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Y = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[1] & 0xFFFF)' true' 3' 12);                            GL.Vertex3(vector);                          break;                        case GeometryCmd.VTX_10:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0x3FF)' true' 3' 6);                          vector.Y = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FF)' true' 3' 6);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 3' 6);                            GL.Vertex3(vector);                          break;                        case GeometryCmd.VTX_XY:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Y = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_XZ:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_YZ:                          vector.Y = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_DIFF:                          float diffX' diffY' diffZ;                            diffX = Get_Double((int)(geoCmd[i].param[0] & 0x3FF)' true' 0' 9);                          diffY = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FFF)' true' 0' 9);                          diffZ = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 0' 9);                            vector.X += (diffX / 8);                          vector.Y += (diffY / 8);                          vector.Z += (diffZ / 8);                            GL.Vertex3(vector);                          break;                      #endregion                        case GeometryCmd.COLOR:                          // Convert the param to RGB555 color                          int r = (int)(geoCmd[i].param[0] & 0x1F);                          int g = (int)((geoCmd[i].param[0] >> 5) & 0x1F);                          int b = (int)((geoCmd[i].param[0] >> 10) & 0x1F);                            GL.Color3((float)r / 31.0f' (float)g / 31.0f' (float)b / 31.0f);                          break;                      case GeometryCmd.POLYGON_ATTR:                          break;                        #region Texture attributes                      case GeometryCmd.TEXCOORD:                          double s' t;                          s = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 11' 4);                          t = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 11' 4);                          GL.TexCoord2(s' t);                          break;                        case GeometryCmd.TEXIMAGE_PARAM:                          break;                      case GeometryCmd.PLTT_BASE:                          break;                      #endregion                        case GeometryCmd.DIF_AMB:                          break;                      case GeometryCmd.SPE_EMI:                          break;                      case GeometryCmd.LIGHT_VECTOR:                          break;                      case GeometryCmd.LIGHT_COLOR:                          break;                      case GeometryCmd.SHININESS:                          break;                        case GeometryCmd.NORMAL:                          float x' y' z;                          x = Get_Double((int)(geoCmd[i].param[0] & 0x3FFF)' true' 0' 9);                          y = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FFF)' true' 0' 9);                          z = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 0' 9);                            // Multiplay by the directional matrix                          GL.Normal3(x' y' z);                          break;                        case GeometryCmd.BEGIN_VTXS:                          if (geoCmd[i].param[0] == 0)                              GL.Begin(BeginMode.Triangles);                          else if (geoCmd[i].param[0] == 1)                              GL.Begin(BeginMode.Quads);                          else if (geoCmd[i].param[0] == 2)                              GL.Begin(BeginMode.TriangleStrip);                          else if (geoCmd[i].param[0] == 3)                              GL.Begin(BeginMode.QuadStrip);                          break;                      case GeometryCmd.END_VTXS:                          GL.End();                          break;                        case GeometryCmd.SWAP_BUFFERS:                          break;                      case GeometryCmd.VIEWPORT:                          break;                      case GeometryCmd.BOX_TEST:                          break;                      case GeometryCmd.POS_TEST:                          break;                      case GeometryCmd.VEC_TEST:                          break;                      default:                          break;                  }
Magic Number,_3DModels,BMD0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BMD0.cs,GeometryCommands,The following statement contains a magic number: switch ((GeometryCmd)geoCmd[i].cmd)                  {                      case GeometryCmd.NOP:                          break;                      case GeometryCmd.MTX_MODE:                          break;                      case GeometryCmd.MTX_PUSH:                          break;                      case GeometryCmd.MTX_POP:                          break;                      case GeometryCmd.MTX_STORE:                          break;                      case GeometryCmd.MTX_RESTORE:                          break;                      case GeometryCmd.MTX_IDENTITY:                          break;                      case GeometryCmd.MTX_LOAD_4x4:                          break;                      case GeometryCmd.MTX_LOAD_4x3:                          break;                      case GeometryCmd.MTX_MULT_4x4:                          break;                      case GeometryCmd.MTX_MULT_4x3:                          break;                      case GeometryCmd.MTX_MULT_3x3:                          break;                      case GeometryCmd.MTX_SCALE:                          break;                      case GeometryCmd.MTX_TRANS:                          break;                        #region Vertex commands                      // Multiply by the clipmatrix                      case GeometryCmd.VTX_16:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Y = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[1] & 0xFFFF)' true' 3' 12);                            GL.Vertex3(vector);                          break;                        case GeometryCmd.VTX_10:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0x3FF)' true' 3' 6);                          vector.Y = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FF)' true' 3' 6);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 3' 6);                            GL.Vertex3(vector);                          break;                        case GeometryCmd.VTX_XY:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Y = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_XZ:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_YZ:                          vector.Y = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_DIFF:                          float diffX' diffY' diffZ;                            diffX = Get_Double((int)(geoCmd[i].param[0] & 0x3FF)' true' 0' 9);                          diffY = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FFF)' true' 0' 9);                          diffZ = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 0' 9);                            vector.X += (diffX / 8);                          vector.Y += (diffY / 8);                          vector.Z += (diffZ / 8);                            GL.Vertex3(vector);                          break;                      #endregion                        case GeometryCmd.COLOR:                          // Convert the param to RGB555 color                          int r = (int)(geoCmd[i].param[0] & 0x1F);                          int g = (int)((geoCmd[i].param[0] >> 5) & 0x1F);                          int b = (int)((geoCmd[i].param[0] >> 10) & 0x1F);                            GL.Color3((float)r / 31.0f' (float)g / 31.0f' (float)b / 31.0f);                          break;                      case GeometryCmd.POLYGON_ATTR:                          break;                        #region Texture attributes                      case GeometryCmd.TEXCOORD:                          double s' t;                          s = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 11' 4);                          t = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 11' 4);                          GL.TexCoord2(s' t);                          break;                        case GeometryCmd.TEXIMAGE_PARAM:                          break;                      case GeometryCmd.PLTT_BASE:                          break;                      #endregion                        case GeometryCmd.DIF_AMB:                          break;                      case GeometryCmd.SPE_EMI:                          break;                      case GeometryCmd.LIGHT_VECTOR:                          break;                      case GeometryCmd.LIGHT_COLOR:                          break;                      case GeometryCmd.SHININESS:                          break;                        case GeometryCmd.NORMAL:                          float x' y' z;                          x = Get_Double((int)(geoCmd[i].param[0] & 0x3FFF)' true' 0' 9);                          y = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FFF)' true' 0' 9);                          z = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 0' 9);                            // Multiplay by the directional matrix                          GL.Normal3(x' y' z);                          break;                        case GeometryCmd.BEGIN_VTXS:                          if (geoCmd[i].param[0] == 0)                              GL.Begin(BeginMode.Triangles);                          else if (geoCmd[i].param[0] == 1)                              GL.Begin(BeginMode.Quads);                          else if (geoCmd[i].param[0] == 2)                              GL.Begin(BeginMode.TriangleStrip);                          else if (geoCmd[i].param[0] == 3)                              GL.Begin(BeginMode.QuadStrip);                          break;                      case GeometryCmd.END_VTXS:                          GL.End();                          break;                        case GeometryCmd.SWAP_BUFFERS:                          break;                      case GeometryCmd.VIEWPORT:                          break;                      case GeometryCmd.BOX_TEST:                          break;                      case GeometryCmd.POS_TEST:                          break;                      case GeometryCmd.VEC_TEST:                          break;                      default:                          break;                  }
Magic Number,_3DModels,BMD0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BMD0.cs,GeometryCommands,The following statement contains a magic number: switch ((GeometryCmd)geoCmd[i].cmd)                  {                      case GeometryCmd.NOP:                          break;                      case GeometryCmd.MTX_MODE:                          break;                      case GeometryCmd.MTX_PUSH:                          break;                      case GeometryCmd.MTX_POP:                          break;                      case GeometryCmd.MTX_STORE:                          break;                      case GeometryCmd.MTX_RESTORE:                          break;                      case GeometryCmd.MTX_IDENTITY:                          break;                      case GeometryCmd.MTX_LOAD_4x4:                          break;                      case GeometryCmd.MTX_LOAD_4x3:                          break;                      case GeometryCmd.MTX_MULT_4x4:                          break;                      case GeometryCmd.MTX_MULT_4x3:                          break;                      case GeometryCmd.MTX_MULT_3x3:                          break;                      case GeometryCmd.MTX_SCALE:                          break;                      case GeometryCmd.MTX_TRANS:                          break;                        #region Vertex commands                      // Multiply by the clipmatrix                      case GeometryCmd.VTX_16:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Y = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[1] & 0xFFFF)' true' 3' 12);                            GL.Vertex3(vector);                          break;                        case GeometryCmd.VTX_10:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0x3FF)' true' 3' 6);                          vector.Y = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FF)' true' 3' 6);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 3' 6);                            GL.Vertex3(vector);                          break;                        case GeometryCmd.VTX_XY:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Y = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_XZ:                          vector.X = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_YZ:                          vector.Y = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 3' 12);                          vector.Z = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 3' 12);                            GL.Vertex3(vector);                            break;                        case GeometryCmd.VTX_DIFF:                          float diffX' diffY' diffZ;                            diffX = Get_Double((int)(geoCmd[i].param[0] & 0x3FF)' true' 0' 9);                          diffY = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FFF)' true' 0' 9);                          diffZ = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 0' 9);                            vector.X += (diffX / 8);                          vector.Y += (diffY / 8);                          vector.Z += (diffZ / 8);                            GL.Vertex3(vector);                          break;                      #endregion                        case GeometryCmd.COLOR:                          // Convert the param to RGB555 color                          int r = (int)(geoCmd[i].param[0] & 0x1F);                          int g = (int)((geoCmd[i].param[0] >> 5) & 0x1F);                          int b = (int)((geoCmd[i].param[0] >> 10) & 0x1F);                            GL.Color3((float)r / 31.0f' (float)g / 31.0f' (float)b / 31.0f);                          break;                      case GeometryCmd.POLYGON_ATTR:                          break;                        #region Texture attributes                      case GeometryCmd.TEXCOORD:                          double s' t;                          s = Get_Double((int)(geoCmd[i].param[0] & 0xFFFF)' true' 11' 4);                          t = Get_Double((int)(geoCmd[i].param[0] >> 16)' true' 11' 4);                          GL.TexCoord2(s' t);                          break;                        case GeometryCmd.TEXIMAGE_PARAM:                          break;                      case GeometryCmd.PLTT_BASE:                          break;                      #endregion                        case GeometryCmd.DIF_AMB:                          break;                      case GeometryCmd.SPE_EMI:                          break;                      case GeometryCmd.LIGHT_VECTOR:                          break;                      case GeometryCmd.LIGHT_COLOR:                          break;                      case GeometryCmd.SHININESS:                          break;                        case GeometryCmd.NORMAL:                          float x' y' z;                          x = Get_Double((int)(geoCmd[i].param[0] & 0x3FFF)' true' 0' 9);                          y = Get_Double((int)((geoCmd[i].param[0] >> 10) & 0x3FFF)' true' 0' 9);                          z = Get_Double((int)(geoCmd[i].param[0] >> 20)' true' 0' 9);                            // Multiplay by the directional matrix                          GL.Normal3(x' y' z);                          break;                        case GeometryCmd.BEGIN_VTXS:                          if (geoCmd[i].param[0] == 0)                              GL.Begin(BeginMode.Triangles);                          else if (geoCmd[i].param[0] == 1)                              GL.Begin(BeginMode.Quads);                          else if (geoCmd[i].param[0] == 2)                              GL.Begin(BeginMode.TriangleStrip);                          else if (geoCmd[i].param[0] == 3)                              GL.Begin(BeginMode.QuadStrip);                          break;                      case GeometryCmd.END_VTXS:                          GL.End();                          break;                        case GeometryCmd.SWAP_BUFFERS:                          break;                      case GeometryCmd.VIEWPORT:                          break;                      case GeometryCmd.BOX_TEST:                          break;                      case GeometryCmd.POS_TEST:                          break;                      case GeometryCmd.VEC_TEST:                          break;                      default:                          break;                  }
Magic Number,_3DModels,BTX0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BTX0.cs,Read,The following statement contains a magic number: btx.header.type = br.ReadChars(4);
Magic Number,_3DModels,BTX0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BTX0.cs,Read,The following statement contains a magic number: tex.header.type = br.ReadChars(4);
Magic Number,_3DModels,BTX0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BTX0.cs,Read,The following statement contains a magic number: tex.header.textCompressedData_size = (ushort)(br.ReadUInt16() << 3);
Magic Number,_3DModels,BTX0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BTX0.cs,Read,The following statement contains a magic number: tex.header.paletteData_size = (uint)(br.ReadUInt32() << 3);
Magic Number,_3DModels,BTX0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BTX0.cs,Read,The following statement contains a magic number: texInfo.coord_transf = (byte)(texInfo.parameters & 14);
Magic Number,_3DModels,BTX0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BTX0.cs,Read,The following statement contains a magic number: texInfo.color0 = (byte)((texInfo.parameters >> 13) & 1);
Magic Number,_3DModels,BTX0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BTX0.cs,Read,The following statement contains a magic number: texInfo.format = (byte)((texInfo.parameters >> 10) & 7);
Magic Number,_3DModels,BTX0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BTX0.cs,Read,The following statement contains a magic number: texInfo.format = (byte)((texInfo.parameters >> 10) & 7);
Magic Number,_3DModels,BTX0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BTX0.cs,Read,The following statement contains a magic number: texInfo.height = (byte)(8 << ((texInfo.parameters >> 7) & 7));
Magic Number,_3DModels,BTX0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BTX0.cs,Read,The following statement contains a magic number: texInfo.height = (byte)(8 << ((texInfo.parameters >> 7) & 7));
Magic Number,_3DModels,BTX0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BTX0.cs,Read,The following statement contains a magic number: texInfo.height = (byte)(8 << ((texInfo.parameters >> 7) & 7));
Magic Number,_3DModels,BTX0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BTX0.cs,Read,The following statement contains a magic number: texInfo.width = (byte)(8 << ((texInfo.parameters >> 4) & 7));
Magic Number,_3DModels,BTX0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BTX0.cs,Read,The following statement contains a magic number: texInfo.width = (byte)(8 << ((texInfo.parameters >> 4) & 7));
Magic Number,_3DModels,BTX0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BTX0.cs,Read,The following statement contains a magic number: texInfo.width = (byte)(8 << ((texInfo.parameters >> 4) & 7));
Magic Number,_3DModels,BTX0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BTX0.cs,Read,The following statement contains a magic number: texInfo.flip_Y = (byte)((texInfo.parameters >> 3) & 1);
Magic Number,_3DModels,BTX0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BTX0.cs,Read,The following statement contains a magic number: texInfo.flip_X = (byte)((texInfo.parameters >> 2) & 1);
Magic Number,_3DModels,BTX0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BTX0.cs,Read,The following statement contains a magic number: compressedStartOffset += (uint)(texInfo.width * texInfo.height / 8);
Magic Number,_3DModels,BTX0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BTX0.cs,Read,The following statement contains a magic number: texInfo.format == 5
Magic Number,_3DModels,BTX0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BTX0.cs,Read_Section,The following statement contains a magic number: tex.header.type = br.ReadChars(4);
Magic Number,_3DModels,BTX0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BTX0.cs,Read_Section,The following statement contains a magic number: tex.header.textCompressedData_size = (ushort)(br.ReadUInt16() << 3);
Magic Number,_3DModels,BTX0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BTX0.cs,Read_Section,The following statement contains a magic number: tex.header.paletteData_size = (uint)(br.ReadUInt32() << 3);
Magic Number,_3DModels,BTX0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BTX0.cs,Read_Section,The following statement contains a magic number: texInfo.coord_transf = (byte)(texInfo.parameters & 14);
Magic Number,_3DModels,BTX0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BTX0.cs,Read_Section,The following statement contains a magic number: texInfo.color0 = (byte)((texInfo.parameters >> 13) & 1);
Magic Number,_3DModels,BTX0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BTX0.cs,Read_Section,The following statement contains a magic number: texInfo.format = (byte)((texInfo.parameters >> 10) & 7);
Magic Number,_3DModels,BTX0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BTX0.cs,Read_Section,The following statement contains a magic number: texInfo.format = (byte)((texInfo.parameters >> 10) & 7);
Magic Number,_3DModels,BTX0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BTX0.cs,Read_Section,The following statement contains a magic number: texInfo.height = (byte)(8 << ((texInfo.parameters >> 7) & 7));
Magic Number,_3DModels,BTX0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BTX0.cs,Read_Section,The following statement contains a magic number: texInfo.height = (byte)(8 << ((texInfo.parameters >> 7) & 7));
Magic Number,_3DModels,BTX0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BTX0.cs,Read_Section,The following statement contains a magic number: texInfo.height = (byte)(8 << ((texInfo.parameters >> 7) & 7));
Magic Number,_3DModels,BTX0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BTX0.cs,Read_Section,The following statement contains a magic number: texInfo.width = (byte)(8 << ((texInfo.parameters >> 4) & 7));
Magic Number,_3DModels,BTX0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BTX0.cs,Read_Section,The following statement contains a magic number: texInfo.width = (byte)(8 << ((texInfo.parameters >> 4) & 7));
Magic Number,_3DModels,BTX0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BTX0.cs,Read_Section,The following statement contains a magic number: texInfo.width = (byte)(8 << ((texInfo.parameters >> 4) & 7));
Magic Number,_3DModels,BTX0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BTX0.cs,Read_Section,The following statement contains a magic number: texInfo.flip_Y = (byte)((texInfo.parameters >> 3) & 1);
Magic Number,_3DModels,BTX0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BTX0.cs,Read_Section,The following statement contains a magic number: texInfo.flip_X = (byte)((texInfo.parameters >> 2) & 1);
Magic Number,_3DModels,BTX0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BTX0.cs,Read_Section,The following statement contains a magic number: compressedStartOffset += (uint)(texInfo.width * texInfo.height / 8);
Magic Number,_3DModels,BTX0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BTX0.cs,Read_Section,The following statement contains a magic number: texInfo.format == 5
Magic Number,_3DModels,BTX0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BTX0.cs,GetTexture,The following statement contains a magic number: br.BaseStream.Position = texInfo.tex_offset * 8 + btx0.header.offset[0] + btx0.texture.header.textData_offset;
Magic Number,_3DModels,BTX0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BTX0.cs,GetTexture,The following statement contains a magic number: texInfo.format != 5
Magic Number,_3DModels,BTX0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BTX0.cs,GetTexture,The following statement contains a magic number: Byte[] tile_data = br.ReadBytes((int)(texInfo.width * texInfo.height * texInfo.depth / 8));
Magic Number,_3DModels,BTX0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BTX0.cs,GetTexture,The following statement contains a magic number: br.BaseStream.Position += palInfo.palette_offset * 8;
Magic Number,_3DModels,BTX0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BTX0.cs,GetTexture,The following statement contains a magic number: texInfo.format != 5
Magic Number,_3DModels,BTX0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BTX0.cs,Draw_Texture,The following statement contains a magic number: info.format == 3
Magic Number,_3DModels,BTX0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BTX0.cs,Draw_Texture,The following statement contains a magic number: info.format == 2 || info.format == 3 || info.format == 4
Magic Number,_3DModels,BTX0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BTX0.cs,Draw_Texture,The following statement contains a magic number: info.format == 2 || info.format == 3 || info.format == 4
Magic Number,_3DModels,BTX0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BTX0.cs,Draw_Texture,The following statement contains a magic number: info.format == 2 || info.format == 3 || info.format == 4
Magic Number,_3DModels,BTX0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BTX0.cs,Draw_CompressedTexture,The following statement contains a magic number: uint texData = BitConverter.ToUInt32(data' w + h * info.width / 4);
Magic Number,_3DModels,BTX0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BTX0.cs,Draw_CompressedTexture,The following statement contains a magic number: int pal_mode = (pal_info >> 14);
Magic Number,_3DModels,BTX0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BTX0.cs,Draw_CompressedTexture,The following statement contains a magic number: br.BaseStream.Position = btx0.header.offset[0] + btx0.texture.header.paletteData_offset + palInfo.palette_offset * 8;
Magic Number,_3DModels,BTX0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BTX0.cs,Draw_CompressedTexture,The following statement contains a magic number: br.BaseStream.Position += pal_offset * 4;
Magic Number,_3DModels,BTX0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BTX0.cs,Draw_CompressedTexture,The following statement contains a magic number: br.BaseStream.Position -= pal_offset * 4;
Magic Number,_3DModels,BTX0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BTX0.cs,Draw_CompressedTexture,The following statement contains a magic number: byte texel_row = (byte)((texData >> (hTex * 8)) & 0xFF);
Magic Number,_3DModels,BTX0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BTX0.cs,Draw_CompressedTexture,The following statement contains a magic number: byte texel = (byte)((texel_row >> (wTex * 2)) & 0x3);
Magic Number,_3DModels,BTX0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BTX0.cs,Draw_CompressedTexture,The following statement contains a magic number: palette.Length < 4 && pal_mode != 1 && pal_mode != 3
Magic Number,_3DModels,BTX0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BTX0.cs,Draw_CompressedTexture,The following statement contains a magic number: palette.Length < 4 && pal_mode != 1 && pal_mode != 3
Magic Number,_3DModels,BTX0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BTX0.cs,Draw_CompressedTexture,The following statement contains a magic number: switch (pal_mode)                              {                                  case 0:                                      if (texel == 0) color = palette[0];                                      else if (texel == 1) color = palette[1];                                      else if (texel == 2) color = palette[2];                                      else if (texel == 3) color = Color.FromArgb(0' 0' 0' 0);  // Transparent color                                      break;                                    case 1:                                      if (texel == 0) color = palette[0];                                      else if (texel == 1) color = palette[1];                                      else if (texel == 2) color = SumColors(palette[0]' palette[1]' 1' 1);                                      else if (texel == 3) color = Color.FromArgb(0' 0' 0' 0); // Transparent color                                      break;                                    case 2:                                      if (texel == 0) color = palette[0];                                      else if (texel == 1) color = palette[1];                                      else if (texel == 2) color = palette[2];                                      else if (texel == 3) color = palette[3];                                      break;                                    case 3:                                      if (texel == 0) color = palette[0];                                      else if (texel == 1) color = palette[1];                                      else if (texel == 2) color = SumColors(palette[0]' palette[1]' 5' 3);                                      else if (texel == 3) color = SumColors(palette[0]' palette[1]' 3' 5);                                      break;                              }
Magic Number,_3DModels,BTX0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BTX0.cs,Draw_CompressedTexture,The following statement contains a magic number: switch (pal_mode)                              {                                  case 0:                                      if (texel == 0) color = palette[0];                                      else if (texel == 1) color = palette[1];                                      else if (texel == 2) color = palette[2];                                      else if (texel == 3) color = Color.FromArgb(0' 0' 0' 0);  // Transparent color                                      break;                                    case 1:                                      if (texel == 0) color = palette[0];                                      else if (texel == 1) color = palette[1];                                      else if (texel == 2) color = SumColors(palette[0]' palette[1]' 1' 1);                                      else if (texel == 3) color = Color.FromArgb(0' 0' 0' 0); // Transparent color                                      break;                                    case 2:                                      if (texel == 0) color = palette[0];                                      else if (texel == 1) color = palette[1];                                      else if (texel == 2) color = palette[2];                                      else if (texel == 3) color = palette[3];                                      break;                                    case 3:                                      if (texel == 0) color = palette[0];                                      else if (texel == 1) color = palette[1];                                      else if (texel == 2) color = SumColors(palette[0]' palette[1]' 5' 3);                                      else if (texel == 3) color = SumColors(palette[0]' palette[1]' 3' 5);                                      break;                              }
Magic Number,_3DModels,BTX0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BTX0.cs,Draw_CompressedTexture,The following statement contains a magic number: switch (pal_mode)                              {                                  case 0:                                      if (texel == 0) color = palette[0];                                      else if (texel == 1) color = palette[1];                                      else if (texel == 2) color = palette[2];                                      else if (texel == 3) color = Color.FromArgb(0' 0' 0' 0);  // Transparent color                                      break;                                    case 1:                                      if (texel == 0) color = palette[0];                                      else if (texel == 1) color = palette[1];                                      else if (texel == 2) color = SumColors(palette[0]' palette[1]' 1' 1);                                      else if (texel == 3) color = Color.FromArgb(0' 0' 0' 0); // Transparent color                                      break;                                    case 2:                                      if (texel == 0) color = palette[0];                                      else if (texel == 1) color = palette[1];                                      else if (texel == 2) color = palette[2];                                      else if (texel == 3) color = palette[3];                                      break;                                    case 3:                                      if (texel == 0) color = palette[0];                                      else if (texel == 1) color = palette[1];                                      else if (texel == 2) color = SumColors(palette[0]' palette[1]' 5' 3);                                      else if (texel == 3) color = SumColors(palette[0]' palette[1]' 3' 5);                                      break;                              }
Magic Number,_3DModels,BTX0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BTX0.cs,Draw_CompressedTexture,The following statement contains a magic number: switch (pal_mode)                              {                                  case 0:                                      if (texel == 0) color = palette[0];                                      else if (texel == 1) color = palette[1];                                      else if (texel == 2) color = palette[2];                                      else if (texel == 3) color = Color.FromArgb(0' 0' 0' 0);  // Transparent color                                      break;                                    case 1:                                      if (texel == 0) color = palette[0];                                      else if (texel == 1) color = palette[1];                                      else if (texel == 2) color = SumColors(palette[0]' palette[1]' 1' 1);                                      else if (texel == 3) color = Color.FromArgb(0' 0' 0' 0); // Transparent color                                      break;                                    case 2:                                      if (texel == 0) color = palette[0];                                      else if (texel == 1) color = palette[1];                                      else if (texel == 2) color = palette[2];                                      else if (texel == 3) color = palette[3];                                      break;                                    case 3:                                      if (texel == 0) color = palette[0];                                      else if (texel == 1) color = palette[1];                                      else if (texel == 2) color = SumColors(palette[0]' palette[1]' 5' 3);                                      else if (texel == 3) color = SumColors(palette[0]' palette[1]' 3' 5);                                      break;                              }
Magic Number,_3DModels,BTX0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BTX0.cs,Draw_CompressedTexture,The following statement contains a magic number: switch (pal_mode)                              {                                  case 0:                                      if (texel == 0) color = palette[0];                                      else if (texel == 1) color = palette[1];                                      else if (texel == 2) color = palette[2];                                      else if (texel == 3) color = Color.FromArgb(0' 0' 0' 0);  // Transparent color                                      break;                                    case 1:                                      if (texel == 0) color = palette[0];                                      else if (texel == 1) color = palette[1];                                      else if (texel == 2) color = SumColors(palette[0]' palette[1]' 1' 1);                                      else if (texel == 3) color = Color.FromArgb(0' 0' 0' 0); // Transparent color                                      break;                                    case 2:                                      if (texel == 0) color = palette[0];                                      else if (texel == 1) color = palette[1];                                      else if (texel == 2) color = palette[2];                                      else if (texel == 3) color = palette[3];                                      break;                                    case 3:                                      if (texel == 0) color = palette[0];                                      else if (texel == 1) color = palette[1];                                      else if (texel == 2) color = SumColors(palette[0]' palette[1]' 5' 3);                                      else if (texel == 3) color = SumColors(palette[0]' palette[1]' 3' 5);                                      break;                              }
Magic Number,_3DModels,BTX0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BTX0.cs,Draw_CompressedTexture,The following statement contains a magic number: switch (pal_mode)                              {                                  case 0:                                      if (texel == 0) color = palette[0];                                      else if (texel == 1) color = palette[1];                                      else if (texel == 2) color = palette[2];                                      else if (texel == 3) color = Color.FromArgb(0' 0' 0' 0);  // Transparent color                                      break;                                    case 1:                                      if (texel == 0) color = palette[0];                                      else if (texel == 1) color = palette[1];                                      else if (texel == 2) color = SumColors(palette[0]' palette[1]' 1' 1);                                      else if (texel == 3) color = Color.FromArgb(0' 0' 0' 0); // Transparent color                                      break;                                    case 2:                                      if (texel == 0) color = palette[0];                                      else if (texel == 1) color = palette[1];                                      else if (texel == 2) color = palette[2];                                      else if (texel == 3) color = palette[3];                                      break;                                    case 3:                                      if (texel == 0) color = palette[0];                                      else if (texel == 1) color = palette[1];                                      else if (texel == 2) color = SumColors(palette[0]' palette[1]' 5' 3);                                      else if (texel == 3) color = SumColors(palette[0]' palette[1]' 3' 5);                                      break;                              }
Magic Number,_3DModels,BTX0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BTX0.cs,Draw_CompressedTexture,The following statement contains a magic number: switch (pal_mode)                              {                                  case 0:                                      if (texel == 0) color = palette[0];                                      else if (texel == 1) color = palette[1];                                      else if (texel == 2) color = palette[2];                                      else if (texel == 3) color = Color.FromArgb(0' 0' 0' 0);  // Transparent color                                      break;                                    case 1:                                      if (texel == 0) color = palette[0];                                      else if (texel == 1) color = palette[1];                                      else if (texel == 2) color = SumColors(palette[0]' palette[1]' 1' 1);                                      else if (texel == 3) color = Color.FromArgb(0' 0' 0' 0); // Transparent color                                      break;                                    case 2:                                      if (texel == 0) color = palette[0];                                      else if (texel == 1) color = palette[1];                                      else if (texel == 2) color = palette[2];                                      else if (texel == 3) color = palette[3];                                      break;                                    case 3:                                      if (texel == 0) color = palette[0];                                      else if (texel == 1) color = palette[1];                                      else if (texel == 2) color = SumColors(palette[0]' palette[1]' 5' 3);                                      else if (texel == 3) color = SumColors(palette[0]' palette[1]' 3' 5);                                      break;                              }
Magic Number,_3DModels,BTX0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BTX0.cs,Draw_CompressedTexture,The following statement contains a magic number: switch (pal_mode)                              {                                  case 0:                                      if (texel == 0) color = palette[0];                                      else if (texel == 1) color = palette[1];                                      else if (texel == 2) color = palette[2];                                      else if (texel == 3) color = Color.FromArgb(0' 0' 0' 0);  // Transparent color                                      break;                                    case 1:                                      if (texel == 0) color = palette[0];                                      else if (texel == 1) color = palette[1];                                      else if (texel == 2) color = SumColors(palette[0]' palette[1]' 1' 1);                                      else if (texel == 3) color = Color.FromArgb(0' 0' 0' 0); // Transparent color                                      break;                                    case 2:                                      if (texel == 0) color = palette[0];                                      else if (texel == 1) color = palette[1];                                      else if (texel == 2) color = palette[2];                                      else if (texel == 3) color = palette[3];                                      break;                                    case 3:                                      if (texel == 0) color = palette[0];                                      else if (texel == 1) color = palette[1];                                      else if (texel == 2) color = SumColors(palette[0]' palette[1]' 5' 3);                                      else if (texel == 3) color = SumColors(palette[0]' palette[1]' 3' 5);                                      break;                              }
Magic Number,_3DModels,BTX0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BTX0.cs,Draw_CompressedTexture,The following statement contains a magic number: switch (pal_mode)                              {                                  case 0:                                      if (texel == 0) color = palette[0];                                      else if (texel == 1) color = palette[1];                                      else if (texel == 2) color = palette[2];                                      else if (texel == 3) color = Color.FromArgb(0' 0' 0' 0);  // Transparent color                                      break;                                    case 1:                                      if (texel == 0) color = palette[0];                                      else if (texel == 1) color = palette[1];                                      else if (texel == 2) color = SumColors(palette[0]' palette[1]' 1' 1);                                      else if (texel == 3) color = Color.FromArgb(0' 0' 0' 0); // Transparent color                                      break;                                    case 2:                                      if (texel == 0) color = palette[0];                                      else if (texel == 1) color = palette[1];                                      else if (texel == 2) color = palette[2];                                      else if (texel == 3) color = palette[3];                                      break;                                    case 3:                                      if (texel == 0) color = palette[0];                                      else if (texel == 1) color = palette[1];                                      else if (texel == 2) color = SumColors(palette[0]' palette[1]' 5' 3);                                      else if (texel == 3) color = SumColors(palette[0]' palette[1]' 3' 5);                                      break;                              }
Magic Number,_3DModels,BTX0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BTX0.cs,Draw_CompressedTexture,The following statement contains a magic number: switch (pal_mode)                              {                                  case 0:                                      if (texel == 0) color = palette[0];                                      else if (texel == 1) color = palette[1];                                      else if (texel == 2) color = palette[2];                                      else if (texel == 3) color = Color.FromArgb(0' 0' 0' 0);  // Transparent color                                      break;                                    case 1:                                      if (texel == 0) color = palette[0];                                      else if (texel == 1) color = palette[1];                                      else if (texel == 2) color = SumColors(palette[0]' palette[1]' 1' 1);                                      else if (texel == 3) color = Color.FromArgb(0' 0' 0' 0); // Transparent color                                      break;                                    case 2:                                      if (texel == 0) color = palette[0];                                      else if (texel == 1) color = palette[1];                                      else if (texel == 2) color = palette[2];                                      else if (texel == 3) color = palette[3];                                      break;                                    case 3:                                      if (texel == 0) color = palette[0];                                      else if (texel == 1) color = palette[1];                                      else if (texel == 2) color = SumColors(palette[0]' palette[1]' 5' 3);                                      else if (texel == 3) color = SumColors(palette[0]' palette[1]' 3' 5);                                      break;                              }
Magic Number,_3DModels,BTX0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BTX0.cs,Draw_CompressedTexture,The following statement contains a magic number: switch (pal_mode)                              {                                  case 0:                                      if (texel == 0) color = palette[0];                                      else if (texel == 1) color = palette[1];                                      else if (texel == 2) color = palette[2];                                      else if (texel == 3) color = Color.FromArgb(0' 0' 0' 0);  // Transparent color                                      break;                                    case 1:                                      if (texel == 0) color = palette[0];                                      else if (texel == 1) color = palette[1];                                      else if (texel == 2) color = SumColors(palette[0]' palette[1]' 1' 1);                                      else if (texel == 3) color = Color.FromArgb(0' 0' 0' 0); // Transparent color                                      break;                                    case 2:                                      if (texel == 0) color = palette[0];                                      else if (texel == 1) color = palette[1];                                      else if (texel == 2) color = palette[2];                                      else if (texel == 3) color = palette[3];                                      break;                                    case 3:                                      if (texel == 0) color = palette[0];                                      else if (texel == 1) color = palette[1];                                      else if (texel == 2) color = SumColors(palette[0]' palette[1]' 5' 3);                                      else if (texel == 3) color = SumColors(palette[0]' palette[1]' 3' 5);                                      break;                              }
Magic Number,_3DModels,BTX0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BTX0.cs,Draw_CompressedTexture,The following statement contains a magic number: switch (pal_mode)                              {                                  case 0:                                      if (texel == 0) color = palette[0];                                      else if (texel == 1) color = palette[1];                                      else if (texel == 2) color = palette[2];                                      else if (texel == 3) color = Color.FromArgb(0' 0' 0' 0);  // Transparent color                                      break;                                    case 1:                                      if (texel == 0) color = palette[0];                                      else if (texel == 1) color = palette[1];                                      else if (texel == 2) color = SumColors(palette[0]' palette[1]' 1' 1);                                      else if (texel == 3) color = Color.FromArgb(0' 0' 0' 0); // Transparent color                                      break;                                    case 2:                                      if (texel == 0) color = palette[0];                                      else if (texel == 1) color = palette[1];                                      else if (texel == 2) color = palette[2];                                      else if (texel == 3) color = palette[3];                                      break;                                    case 3:                                      if (texel == 0) color = palette[0];                                      else if (texel == 1) color = palette[1];                                      else if (texel == 2) color = SumColors(palette[0]' palette[1]' 5' 3);                                      else if (texel == 3) color = SumColors(palette[0]' palette[1]' 3' 5);                                      break;                              }
Magic Number,_3DModels,BTX0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BTX0.cs,Draw_CompressedTexture,The following statement contains a magic number: switch (pal_mode)                              {                                  case 0:                                      if (texel == 0) color = palette[0];                                      else if (texel == 1) color = palette[1];                                      else if (texel == 2) color = palette[2];                                      else if (texel == 3) color = Color.FromArgb(0' 0' 0' 0);  // Transparent color                                      break;                                    case 1:                                      if (texel == 0) color = palette[0];                                      else if (texel == 1) color = palette[1];                                      else if (texel == 2) color = SumColors(palette[0]' palette[1]' 1' 1);                                      else if (texel == 3) color = Color.FromArgb(0' 0' 0' 0); // Transparent color                                      break;                                    case 2:                                      if (texel == 0) color = palette[0];                                      else if (texel == 1) color = palette[1];                                      else if (texel == 2) color = palette[2];                                      else if (texel == 3) color = palette[3];                                      break;                                    case 3:                                      if (texel == 0) color = palette[0];                                      else if (texel == 1) color = palette[1];                                      else if (texel == 2) color = SumColors(palette[0]' palette[1]' 5' 3);                                      else if (texel == 3) color = SumColors(palette[0]' palette[1]' 3' 5);                                      break;                              }
Magic Number,_3DModels,BTX0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BTX0.cs,Draw_CompressedTexture,The following statement contains a magic number: switch (pal_mode)                              {                                  case 0:                                      if (texel == 0) color = palette[0];                                      else if (texel == 1) color = palette[1];                                      else if (texel == 2) color = palette[2];                                      else if (texel == 3) color = Color.FromArgb(0' 0' 0' 0);  // Transparent color                                      break;                                    case 1:                                      if (texel == 0) color = palette[0];                                      else if (texel == 1) color = palette[1];                                      else if (texel == 2) color = SumColors(palette[0]' palette[1]' 1' 1);                                      else if (texel == 3) color = Color.FromArgb(0' 0' 0' 0); // Transparent color                                      break;                                    case 2:                                      if (texel == 0) color = palette[0];                                      else if (texel == 1) color = palette[1];                                      else if (texel == 2) color = palette[2];                                      else if (texel == 3) color = palette[3];                                      break;                                    case 3:                                      if (texel == 0) color = palette[0];                                      else if (texel == 1) color = palette[1];                                      else if (texel == 2) color = SumColors(palette[0]' palette[1]' 5' 3);                                      else if (texel == 3) color = SumColors(palette[0]' palette[1]' 3' 5);                                      break;                              }
Magic Number,_3DModels,BTX0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BTX0.cs,Draw_CompressedTexture,The following statement contains a magic number: switch (pal_mode)                              {                                  case 0:                                      if (texel == 0) color = palette[0];                                      else if (texel == 1) color = palette[1];                                      else if (texel == 2) color = palette[2];                                      else if (texel == 3) color = Color.FromArgb(0' 0' 0' 0);  // Transparent color                                      break;                                    case 1:                                      if (texel == 0) color = palette[0];                                      else if (texel == 1) color = palette[1];                                      else if (texel == 2) color = SumColors(palette[0]' palette[1]' 1' 1);                                      else if (texel == 3) color = Color.FromArgb(0' 0' 0' 0); // Transparent color                                      break;                                    case 2:                                      if (texel == 0) color = palette[0];                                      else if (texel == 1) color = palette[1];                                      else if (texel == 2) color = palette[2];                                      else if (texel == 3) color = palette[3];                                      break;                                    case 3:                                      if (texel == 0) color = palette[0];                                      else if (texel == 1) color = palette[1];                                      else if (texel == 2) color = SumColors(palette[0]' palette[1]' 5' 3);                                      else if (texel == 3) color = SumColors(palette[0]' palette[1]' 3' 5);                                      break;                              }
Magic Number,_3DModels,BTX0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BTX0.cs,Draw_CompressedTexture,The following statement contains a magic number: switch (pal_mode)                              {                                  case 0:                                      if (texel == 0) color = palette[0];                                      else if (texel == 1) color = palette[1];                                      else if (texel == 2) color = palette[2];                                      else if (texel == 3) color = Color.FromArgb(0' 0' 0' 0);  // Transparent color                                      break;                                    case 1:                                      if (texel == 0) color = palette[0];                                      else if (texel == 1) color = palette[1];                                      else if (texel == 2) color = SumColors(palette[0]' palette[1]' 1' 1);                                      else if (texel == 3) color = Color.FromArgb(0' 0' 0' 0); // Transparent color                                      break;                                    case 2:                                      if (texel == 0) color = palette[0];                                      else if (texel == 1) color = palette[1];                                      else if (texel == 2) color = palette[2];                                      else if (texel == 3) color = palette[3];                                      break;                                    case 3:                                      if (texel == 0) color = palette[0];                                      else if (texel == 1) color = palette[1];                                      else if (texel == 2) color = SumColors(palette[0]' palette[1]' 5' 3);                                      else if (texel == 3) color = SumColors(palette[0]' palette[1]' 3' 5);                                      break;                              }
Magic Number,_3DModels,BTX0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BTX0.cs,Draw_CompressedTexture,The following statement contains a magic number: switch (pal_mode)                              {                                  case 0:                                      if (texel == 0) color = palette[0];                                      else if (texel == 1) color = palette[1];                                      else if (texel == 2) color = palette[2];                                      else if (texel == 3) color = Color.FromArgb(0' 0' 0' 0);  // Transparent color                                      break;                                    case 1:                                      if (texel == 0) color = palette[0];                                      else if (texel == 1) color = palette[1];                                      else if (texel == 2) color = SumColors(palette[0]' palette[1]' 1' 1);                                      else if (texel == 3) color = Color.FromArgb(0' 0' 0' 0); // Transparent color                                      break;                                    case 2:                                      if (texel == 0) color = palette[0];                                      else if (texel == 1) color = palette[1];                                      else if (texel == 2) color = palette[2];                                      else if (texel == 3) color = palette[3];                                      break;                                    case 3:                                      if (texel == 0) color = palette[0];                                      else if (texel == 1) color = palette[1];                                      else if (texel == 2) color = SumColors(palette[0]' palette[1]' 5' 3);                                      else if (texel == 3) color = SumColors(palette[0]' palette[1]' 3' 5);                                      break;                              }
Magic Number,_3DModels,BTX0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BTX0.cs,Draw_CompressedTexture,The following statement contains a magic number: wTex < 4
Magic Number,_3DModels,BTX0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BTX0.cs,Draw_CompressedTexture,The following statement contains a magic number: hTex < 4
Magic Number,_3DModels,BTX0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BTX0.cs,Bit8ToBit2,The following statement contains a magic number: bit2.Add((byte)((data[i] >> 2) & 0x3));
Magic Number,_3DModels,BTX0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BTX0.cs,Bit8ToBit2,The following statement contains a magic number: bit2.Add((byte)((data[i] >> 4) & 0x3));
Magic Number,_3DModels,BTX0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BTX0.cs,Bit8ToBit2,The following statement contains a magic number: bit2.Add((byte)((data[i] >> 6) & 0x3));
Magic Number,_3DModels,Main,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\Main.cs,Read,The following statement contains a magic number: string ext = new String(br.ReadChars(4));
Magic Number,_3DModels,Main,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\Main.cs,Show_Info,The following statement contains a magic number: string ext = new String(br.ReadChars(4));
Magic Number,_3DModels,ModelControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\ModelControl.cs,ModelControl_Load,The following statement contains a magic number: GL.Viewport(new Size(512' 512));
Magic Number,_3DModels,ModelControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\ModelControl.cs,ModelControl_Load,The following statement contains a magic number: GL.Viewport(new Size(512' 512));
Magic Number,_3DModels,ModelControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\ModelControl.cs,ProcessBones,The following statement contains a magic number: switch (cmd.command)                  {                      case 0x44:                      case 0x24:                      case 0x04:                          int currTex = 0;                          if (texturesGL.ContainsKey(cmd.parameters[0]))                              currTex = cmd.parameters[0];                          else                              texturesGL.TryGetValue(1' out currTex);                            model.model.mdlData[0].polygon.display[cmd.parameters[2]].materialAssoc = texturesGL[currTex];                          model.model.mdlData[0].polygon.display[cmd.parameters[2]].materialID = cmd.parameters[0];                          break;                      default:                          break;                  }
Magic Number,_3DModels,ModelControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\ModelControl.cs,ProcessBones,The following statement contains a magic number: switch (cmd.command)                  {                      case 0x44:                      case 0x24:                      case 0x04:                          int currTex = 0;                          if (texturesGL.ContainsKey(cmd.parameters[0]))                              currTex = cmd.parameters[0];                          else                              texturesGL.TryGetValue(1' out currTex);                            model.model.mdlData[0].polygon.display[cmd.parameters[2]].materialAssoc = texturesGL[currTex];                          model.model.mdlData[0].polygon.display[cmd.parameters[2]].materialID = cmd.parameters[0];                          break;                      default:                          break;                  }
Magic Number,_3DModels,ModelControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\ModelControl.cs,DrawEdges,The following statement contains a magic number: GL.Vertex3(10f' 0f' 0f);
Magic Number,_3DModels,ModelControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\ModelControl.cs,DrawEdges,The following statement contains a magic number: GL.Vertex3(0f' 10f' 0f);
Magic Number,_3DModels,ModelControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\ModelControl.cs,DrawEdges,The following statement contains a magic number: GL.Vertex3(0f' 0f' 10f);
Magic Number,_3DModels,ModelControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\ModelControl.cs,glControl1_MouseMove,The following statement contains a magic number: distance = 3;
Magic Number,_3DModels,ModelControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\ModelControl.cs,glControl1_MouseMove,The following statement contains a magic number: distance > 3
Magic Number,_3DModels,ModelControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\ModelControl.cs,button1_Click,The following statement contains a magic number: ven.Size = new Size(530' 530);
Magic Number,_3DModels,ModelControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\ModelControl.cs,button1_Click,The following statement contains a magic number: ven.Size = new Size(530' 530);
Magic Number,_3DModels,ModelControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\ModelControl.cs,InitializeComponent,The following statement contains a magic number: this.glControl1.Location = new System.Drawing.Point(3' 3);
Magic Number,_3DModels,ModelControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\ModelControl.cs,InitializeComponent,The following statement contains a magic number: this.glControl1.Location = new System.Drawing.Point(3' 3);
Magic Number,_3DModels,ModelControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\ModelControl.cs,InitializeComponent,The following statement contains a magic number: this.glControl1.Size = new System.Drawing.Size(506' 382);
Magic Number,_3DModels,ModelControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\ModelControl.cs,InitializeComponent,The following statement contains a magic number: this.glControl1.Size = new System.Drawing.Size(506' 382);
Magic Number,_3DModels,ModelControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\ModelControl.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(3' 388);
Magic Number,_3DModels,ModelControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\ModelControl.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(3' 388);
Magic Number,_3DModels,ModelControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\ModelControl.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(35' 13);
Magic Number,_3DModels,ModelControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\ModelControl.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(35' 13);
Magic Number,_3DModels,ModelControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\ModelControl.cs,InitializeComponent,The following statement contains a magic number: this.button1.Location = new System.Drawing.Point(429' 469);
Magic Number,_3DModels,ModelControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\ModelControl.cs,InitializeComponent,The following statement contains a magic number: this.button1.Location = new System.Drawing.Point(429' 469);
Magic Number,_3DModels,ModelControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\ModelControl.cs,InitializeComponent,The following statement contains a magic number: this.button1.Size = new System.Drawing.Size(80' 40);
Magic Number,_3DModels,ModelControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\ModelControl.cs,InitializeComponent,The following statement contains a magic number: this.button1.Size = new System.Drawing.Size(80' 40);
Magic Number,_3DModels,ModelControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\ModelControl.cs,InitializeComponent,The following statement contains a magic number: this.button1.TabIndex = 2;
Magic Number,_3DModels,ModelControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\ModelControl.cs,InitializeComponent,The following statement contains a magic number: this.numericPoly.Location = new System.Drawing.Point(90' 483);
Magic Number,_3DModels,ModelControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\ModelControl.cs,InitializeComponent,The following statement contains a magic number: this.numericPoly.Location = new System.Drawing.Point(90' 483);
Magic Number,_3DModels,ModelControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\ModelControl.cs,InitializeComponent,The following statement contains a magic number: this.numericPoly.Size = new System.Drawing.Size(63' 20);
Magic Number,_3DModels,ModelControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\ModelControl.cs,InitializeComponent,The following statement contains a magic number: this.numericPoly.Size = new System.Drawing.Size(63' 20);
Magic Number,_3DModels,ModelControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\ModelControl.cs,InitializeComponent,The following statement contains a magic number: this.numericPoly.TabIndex = 3;
Magic Number,_3DModels,ModelControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\ModelControl.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point(3' 485);
Magic Number,_3DModels,ModelControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\ModelControl.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point(3' 485);
Magic Number,_3DModels,ModelControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\ModelControl.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size(81' 13);
Magic Number,_3DModels,ModelControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\ModelControl.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size(81' 13);
Magic Number,_3DModels,ModelControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\ModelControl.cs,InitializeComponent,The following statement contains a magic number: this.label2.TabIndex = 4;
Magic Number,_3DModels,ModelControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\ModelControl.cs,InitializeComponent,The following statement contains a magic number: this.checkManual.Location = new System.Drawing.Point(4' 457);
Magic Number,_3DModels,ModelControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\ModelControl.cs,InitializeComponent,The following statement contains a magic number: this.checkManual.Location = new System.Drawing.Point(4' 457);
Magic Number,_3DModels,ModelControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\ModelControl.cs,InitializeComponent,The following statement contains a magic number: this.checkManual.Size = new System.Drawing.Size(68' 17);
Magic Number,_3DModels,ModelControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\ModelControl.cs,InitializeComponent,The following statement contains a magic number: this.checkManual.Size = new System.Drawing.Size(68' 17);
Magic Number,_3DModels,ModelControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\ModelControl.cs,InitializeComponent,The following statement contains a magic number: this.checkManual.TabIndex = 5;
Magic Number,_3DModels,ModelControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\ModelControl.cs,InitializeComponent,The following statement contains a magic number: this.button2.Location = new System.Drawing.Point(343' 469);
Magic Number,_3DModels,ModelControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\ModelControl.cs,InitializeComponent,The following statement contains a magic number: this.button2.Location = new System.Drawing.Point(343' 469);
Magic Number,_3DModels,ModelControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\ModelControl.cs,InitializeComponent,The following statement contains a magic number: this.button2.Size = new System.Drawing.Size(80' 40);
Magic Number,_3DModels,ModelControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\ModelControl.cs,InitializeComponent,The following statement contains a magic number: this.button2.Size = new System.Drawing.Size(80' 40);
Magic Number,_3DModels,ModelControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\ModelControl.cs,InitializeComponent,The following statement contains a magic number: this.button2.TabIndex = 6;
Magic Number,_3DModels,ModelControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\ModelControl.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 13F);
Magic Number,_3DModels,ModelControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\ModelControl.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 13F);
Magic Number,_3DModels,ModelControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\ModelControl.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(512' 512);
Magic Number,_3DModels,ModelControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\ModelControl.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(512' 512);
Magic Number,_3DModels,TextureControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\TextureControl.cs,ReadLanguage,The following statement contains a magic number: listProp.Items[2].Text = xml.Element("S05").Value;
Magic Number,_3DModels,TextureControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\TextureControl.cs,ReadLanguage,The following statement contains a magic number: listProp.Items[3].Text = xml.Element("S06").Value;
Magic Number,_3DModels,TextureControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\TextureControl.cs,ReadLanguage,The following statement contains a magic number: listProp.Items[4].Text = xml.Element("S07").Value;
Magic Number,_3DModels,TextureControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\TextureControl.cs,ReadLanguage,The following statement contains a magic number: listProp.Items[5].Text = xml.Element("S08").Value;
Magic Number,_3DModels,TextureControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\TextureControl.cs,ReadLanguage,The following statement contains a magic number: listProp.Items[6].Text = xml.Element("S09").Value;
Magic Number,_3DModels,TextureControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\TextureControl.cs,ReadLanguage,The following statement contains a magic number: listProp.Items[7].Text = xml.Element("S0A").Value;
Magic Number,_3DModels,TextureControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\TextureControl.cs,ReadLanguage,The following statement contains a magic number: listProp.Items[8].Text = xml.Element("S0B").Value;
Magic Number,_3DModels,TextureControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\TextureControl.cs,ReadLanguage,The following statement contains a magic number: listProp.Items[9].Text = xml.Element("S0C").Value;
Magic Number,_3DModels,TextureControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\TextureControl.cs,ReadLanguage,The following statement contains a magic number: listProp.Items[10].Text = xml.Element("S0D").Value;
Magic Number,_3DModels,TextureControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\TextureControl.cs,ReadLanguage,The following statement contains a magic number: listProp.Items[11].Text = xml.Element("S02").Value;
Magic Number,_3DModels,TextureControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\TextureControl.cs,ReadLanguage,The following statement contains a magic number: listProp.Items[11].SubItems[1].Text = xml.Element("S0E").Value;
Magic Number,_3DModels,TextureControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\TextureControl.cs,ReadLanguage,The following statement contains a magic number: listProp.Items[12].Text = xml.Element("S04").Value;
Magic Number,_3DModels,TextureControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\TextureControl.cs,UpdateTexture,The following statement contains a magic number: br.BaseStream.Position = texInfo.tex_offset * 8 + btx0.header.offset[0] + btx0.texture.header.textData_offset;
Magic Number,_3DModels,TextureControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\TextureControl.cs,UpdateTexture,The following statement contains a magic number: texInfo.format != 5
Magic Number,_3DModels,TextureControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\TextureControl.cs,UpdateTexture,The following statement contains a magic number: Byte[] tile_data = br.ReadBytes((int)(texInfo.width * texInfo.height * texInfo.depth / 8));
Magic Number,_3DModels,TextureControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\TextureControl.cs,UpdateTexture,The following statement contains a magic number: br.BaseStream.Position += palInfo.palette_offset * 8;
Magic Number,_3DModels,TextureControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\TextureControl.cs,Draw_Texture,The following statement contains a magic number: info.format == 5
Magic Number,_3DModels,TextureControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\TextureControl.cs,Draw_Texture,The following statement contains a magic number: info.format == 3
Magic Number,_3DModels,TextureControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\TextureControl.cs,Draw_Texture,The following statement contains a magic number: info.format == 2 || info.format == 3 || info.format == 4
Magic Number,_3DModels,TextureControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\TextureControl.cs,Draw_Texture,The following statement contains a magic number: info.format == 2 || info.format == 3 || info.format == 4
Magic Number,_3DModels,TextureControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\TextureControl.cs,Draw_Texture,The following statement contains a magic number: info.format == 2 || info.format == 3 || info.format == 4
Magic Number,_3DModels,TextureControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\TextureControl.cs,Draw_CompressedTexture,The following statement contains a magic number: uint texData = BitConverter.ToUInt32(data' w + h * info.width / 4);
Magic Number,_3DModels,TextureControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\TextureControl.cs,Draw_CompressedTexture,The following statement contains a magic number: int pal_mode = (pal_info >> 14);
Magic Number,_3DModels,TextureControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\TextureControl.cs,Draw_CompressedTexture,The following statement contains a magic number: br.BaseStream.Position = btx0.header.offset[0] + btx0.texture.header.paletteData_offset + palInfo.palette_offset * 8;
Magic Number,_3DModels,TextureControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\TextureControl.cs,Draw_CompressedTexture,The following statement contains a magic number: br.BaseStream.Position += pal_offset * 4;
Magic Number,_3DModels,TextureControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\TextureControl.cs,Draw_CompressedTexture,The following statement contains a magic number: br.BaseStream.Position -= pal_offset * 4;
Magic Number,_3DModels,TextureControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\TextureControl.cs,Draw_CompressedTexture,The following statement contains a magic number: byte texel_row = (byte)((texData >> (hTex * 8)) & 0xFF);
Magic Number,_3DModels,TextureControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\TextureControl.cs,Draw_CompressedTexture,The following statement contains a magic number: byte texel = (byte)((texel_row >> (wTex * 2)) & 0x3);
Magic Number,_3DModels,TextureControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\TextureControl.cs,Draw_CompressedTexture,The following statement contains a magic number: palette.Length < 4 && pal_mode != 1 && pal_mode != 3
Magic Number,_3DModels,TextureControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\TextureControl.cs,Draw_CompressedTexture,The following statement contains a magic number: palette.Length < 4 && pal_mode != 1 && pal_mode != 3
Magic Number,_3DModels,TextureControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\TextureControl.cs,Draw_CompressedTexture,The following statement contains a magic number: switch (pal_mode)                              {                                  case 0:                                      if (texel == 0) color = palette[0];                                      else if (texel == 1) color = palette[1];                                      else if (texel == 2) color = palette[2];                                      else if (texel == 3) color = Color.FromArgb(0' 0' 0' 0);  // Transparent color                                      break;                                    case 1:                                      if (texel == 0) color = palette[0];                                      else if (texel == 1) color = palette[1];                                      else if (texel == 2) color = SumColors(palette[0]' palette[1]' 1' 1);                                      else if (texel == 3) color = Color.FromArgb(0' 0' 0' 0); // Transparent color                                      break;                                    case 2:                                      if (texel == 0) color = palette[0];                                      else if (texel == 1) color = palette[1];                                      else if (texel == 2) color = palette[2];                                      else if (texel == 3) color = palette[3];                                      break;                                    case 3:                                      if (texel == 0) color = palette[0];                                      else if (texel == 1) color = palette[1];                                      else if (texel == 2) color = SumColors(palette[0]' palette[1]' 5' 3);                                      else if (texel == 3) color = SumColors(palette[0]' palette[1]' 3' 5);                                      break;                              }
Magic Number,_3DModels,TextureControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\TextureControl.cs,Draw_CompressedTexture,The following statement contains a magic number: switch (pal_mode)                              {                                  case 0:                                      if (texel == 0) color = palette[0];                                      else if (texel == 1) color = palette[1];                                      else if (texel == 2) color = palette[2];                                      else if (texel == 3) color = Color.FromArgb(0' 0' 0' 0);  // Transparent color                                      break;                                    case 1:                                      if (texel == 0) color = palette[0];                                      else if (texel == 1) color = palette[1];                                      else if (texel == 2) color = SumColors(palette[0]' palette[1]' 1' 1);                                      else if (texel == 3) color = Color.FromArgb(0' 0' 0' 0); // Transparent color                                      break;                                    case 2:                                      if (texel == 0) color = palette[0];                                      else if (texel == 1) color = palette[1];                                      else if (texel == 2) color = palette[2];                                      else if (texel == 3) color = palette[3];                                      break;                                    case 3:                                      if (texel == 0) color = palette[0];                                      else if (texel == 1) color = palette[1];                                      else if (texel == 2) color = SumColors(palette[0]' palette[1]' 5' 3);                                      else if (texel == 3) color = SumColors(palette[0]' palette[1]' 3' 5);                                      break;                              }
Magic Number,_3DModels,TextureControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\TextureControl.cs,Draw_CompressedTexture,The following statement contains a magic number: switch (pal_mode)                              {                                  case 0:                                      if (texel == 0) color = palette[0];                                      else if (texel == 1) color = palette[1];                                      else if (texel == 2) color = palette[2];                                      else if (texel == 3) color = Color.FromArgb(0' 0' 0' 0);  // Transparent color                                      break;                                    case 1:                                      if (texel == 0) color = palette[0];                                      else if (texel == 1) color = palette[1];                                      else if (texel == 2) color = SumColors(palette[0]' palette[1]' 1' 1);                                      else if (texel == 3) color = Color.FromArgb(0' 0' 0' 0); // Transparent color                                      break;                                    case 2:                                      if (texel == 0) color = palette[0];                                      else if (texel == 1) color = palette[1];                                      else if (texel == 2) color = palette[2];                                      else if (texel == 3) color = palette[3];                                      break;                                    case 3:                                      if (texel == 0) color = palette[0];                                      else if (texel == 1) color = palette[1];                                      else if (texel == 2) color = SumColors(palette[0]' palette[1]' 5' 3);                                      else if (texel == 3) color = SumColors(palette[0]' palette[1]' 3' 5);                                      break;                              }
Magic Number,_3DModels,TextureControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\TextureControl.cs,Draw_CompressedTexture,The following statement contains a magic number: switch (pal_mode)                              {                                  case 0:                                      if (texel == 0) color = palette[0];                                      else if (texel == 1) color = palette[1];                                      else if (texel == 2) color = palette[2];                                      else if (texel == 3) color = Color.FromArgb(0' 0' 0' 0);  // Transparent color                                      break;                                    case 1:                                      if (texel == 0) color = palette[0];                                      else if (texel == 1) color = palette[1];                                      else if (texel == 2) color = SumColors(palette[0]' palette[1]' 1' 1);                                      else if (texel == 3) color = Color.FromArgb(0' 0' 0' 0); // Transparent color                                      break;                                    case 2:                                      if (texel == 0) color = palette[0];                                      else if (texel == 1) color = palette[1];                                      else if (texel == 2) color = palette[2];                                      else if (texel == 3) color = palette[3];                                      break;                                    case 3:                                      if (texel == 0) color = palette[0];                                      else if (texel == 1) color = palette[1];                                      else if (texel == 2) color = SumColors(palette[0]' palette[1]' 5' 3);                                      else if (texel == 3) color = SumColors(palette[0]' palette[1]' 3' 5);                                      break;                              }
Magic Number,_3DModels,TextureControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\TextureControl.cs,Draw_CompressedTexture,The following statement contains a magic number: switch (pal_mode)                              {                                  case 0:                                      if (texel == 0) color = palette[0];                                      else if (texel == 1) color = palette[1];                                      else if (texel == 2) color = palette[2];                                      else if (texel == 3) color = Color.FromArgb(0' 0' 0' 0);  // Transparent color                                      break;                                    case 1:                                      if (texel == 0) color = palette[0];                                      else if (texel == 1) color = palette[1];                                      else if (texel == 2) color = SumColors(palette[0]' palette[1]' 1' 1);                                      else if (texel == 3) color = Color.FromArgb(0' 0' 0' 0); // Transparent color                                      break;                                    case 2:                                      if (texel == 0) color = palette[0];                                      else if (texel == 1) color = palette[1];                                      else if (texel == 2) color = palette[2];                                      else if (texel == 3) color = palette[3];                                      break;                                    case 3:                                      if (texel == 0) color = palette[0];                                      else if (texel == 1) color = palette[1];                                      else if (texel == 2) color = SumColors(palette[0]' palette[1]' 5' 3);                                      else if (texel == 3) color = SumColors(palette[0]' palette[1]' 3' 5);                                      break;                              }
Magic Number,_3DModels,TextureControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\TextureControl.cs,Draw_CompressedTexture,The following statement contains a magic number: switch (pal_mode)                              {                                  case 0:                                      if (texel == 0) color = palette[0];                                      else if (texel == 1) color = palette[1];                                      else if (texel == 2) color = palette[2];                                      else if (texel == 3) color = Color.FromArgb(0' 0' 0' 0);  // Transparent color                                      break;                                    case 1:                                      if (texel == 0) color = palette[0];                                      else if (texel == 1) color = palette[1];                                      else if (texel == 2) color = SumColors(palette[0]' palette[1]' 1' 1);                                      else if (texel == 3) color = Color.FromArgb(0' 0' 0' 0); // Transparent color                                      break;                                    case 2:                                      if (texel == 0) color = palette[0];                                      else if (texel == 1) color = palette[1];                                      else if (texel == 2) color = palette[2];                                      else if (texel == 3) color = palette[3];                                      break;                                    case 3:                                      if (texel == 0) color = palette[0];                                      else if (texel == 1) color = palette[1];                                      else if (texel == 2) color = SumColors(palette[0]' palette[1]' 5' 3);                                      else if (texel == 3) color = SumColors(palette[0]' palette[1]' 3' 5);                                      break;                              }
Magic Number,_3DModels,TextureControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\TextureControl.cs,Draw_CompressedTexture,The following statement contains a magic number: switch (pal_mode)                              {                                  case 0:                                      if (texel == 0) color = palette[0];                                      else if (texel == 1) color = palette[1];                                      else if (texel == 2) color = palette[2];                                      else if (texel == 3) color = Color.FromArgb(0' 0' 0' 0);  // Transparent color                                      break;                                    case 1:                                      if (texel == 0) color = palette[0];                                      else if (texel == 1) color = palette[1];                                      else if (texel == 2) color = SumColors(palette[0]' palette[1]' 1' 1);                                      else if (texel == 3) color = Color.FromArgb(0' 0' 0' 0); // Transparent color                                      break;                                    case 2:                                      if (texel == 0) color = palette[0];                                      else if (texel == 1) color = palette[1];                                      else if (texel == 2) color = palette[2];                                      else if (texel == 3) color = palette[3];                                      break;                                    case 3:                                      if (texel == 0) color = palette[0];                                      else if (texel == 1) color = palette[1];                                      else if (texel == 2) color = SumColors(palette[0]' palette[1]' 5' 3);                                      else if (texel == 3) color = SumColors(palette[0]' palette[1]' 3' 5);                                      break;                              }
Magic Number,_3DModels,TextureControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\TextureControl.cs,Draw_CompressedTexture,The following statement contains a magic number: switch (pal_mode)                              {                                  case 0:                                      if (texel == 0) color = palette[0];                                      else if (texel == 1) color = palette[1];                                      else if (texel == 2) color = palette[2];                                      else if (texel == 3) color = Color.FromArgb(0' 0' 0' 0);  // Transparent color                                      break;                                    case 1:                                      if (texel == 0) color = palette[0];                                      else if (texel == 1) color = palette[1];                                      else if (texel == 2) color = SumColors(palette[0]' palette[1]' 1' 1);                                      else if (texel == 3) color = Color.FromArgb(0' 0' 0' 0); // Transparent color                                      break;                                    case 2:                                      if (texel == 0) color = palette[0];                                      else if (texel == 1) color = palette[1];                                      else if (texel == 2) color = palette[2];                                      else if (texel == 3) color = palette[3];                                      break;                                    case 3:                                      if (texel == 0) color = palette[0];                                      else if (texel == 1) color = palette[1];                                      else if (texel == 2) color = SumColors(palette[0]' palette[1]' 5' 3);                                      else if (texel == 3) color = SumColors(palette[0]' palette[1]' 3' 5);                                      break;                              }
Magic Number,_3DModels,TextureControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\TextureControl.cs,Draw_CompressedTexture,The following statement contains a magic number: switch (pal_mode)                              {                                  case 0:                                      if (texel == 0) color = palette[0];                                      else if (texel == 1) color = palette[1];                                      else if (texel == 2) color = palette[2];                                      else if (texel == 3) color = Color.FromArgb(0' 0' 0' 0);  // Transparent color                                      break;                                    case 1:                                      if (texel == 0) color = palette[0];                                      else if (texel == 1) color = palette[1];                                      else if (texel == 2) color = SumColors(palette[0]' palette[1]' 1' 1);                                      else if (texel == 3) color = Color.FromArgb(0' 0' 0' 0); // Transparent color                                      break;                                    case 2:                                      if (texel == 0) color = palette[0];                                      else if (texel == 1) color = palette[1];                                      else if (texel == 2) color = palette[2];                                      else if (texel == 3) color = palette[3];                                      break;                                    case 3:                                      if (texel == 0) color = palette[0];                                      else if (texel == 1) color = palette[1];                                      else if (texel == 2) color = SumColors(palette[0]' palette[1]' 5' 3);                                      else if (texel == 3) color = SumColors(palette[0]' palette[1]' 3' 5);                                      break;                              }
Magic Number,_3DModels,TextureControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\TextureControl.cs,Draw_CompressedTexture,The following statement contains a magic number: switch (pal_mode)                              {                                  case 0:                                      if (texel == 0) color = palette[0];                                      else if (texel == 1) color = palette[1];                                      else if (texel == 2) color = palette[2];                                      else if (texel == 3) color = Color.FromArgb(0' 0' 0' 0);  // Transparent color                                      break;                                    case 1:                                      if (texel == 0) color = palette[0];                                      else if (texel == 1) color = palette[1];                                      else if (texel == 2) color = SumColors(palette[0]' palette[1]' 1' 1);                                      else if (texel == 3) color = Color.FromArgb(0' 0' 0' 0); // Transparent color                                      break;                                    case 2:                                      if (texel == 0) color = palette[0];                                      else if (texel == 1) color = palette[1];                                      else if (texel == 2) color = palette[2];                                      else if (texel == 3) color = palette[3];                                      break;                                    case 3:                                      if (texel == 0) color = palette[0];                                      else if (texel == 1) color = palette[1];                                      else if (texel == 2) color = SumColors(palette[0]' palette[1]' 5' 3);                                      else if (texel == 3) color = SumColors(palette[0]' palette[1]' 3' 5);                                      break;                              }
Magic Number,_3DModels,TextureControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\TextureControl.cs,Draw_CompressedTexture,The following statement contains a magic number: switch (pal_mode)                              {                                  case 0:                                      if (texel == 0) color = palette[0];                                      else if (texel == 1) color = palette[1];                                      else if (texel == 2) color = palette[2];                                      else if (texel == 3) color = Color.FromArgb(0' 0' 0' 0);  // Transparent color                                      break;                                    case 1:                                      if (texel == 0) color = palette[0];                                      else if (texel == 1) color = palette[1];                                      else if (texel == 2) color = SumColors(palette[0]' palette[1]' 1' 1);                                      else if (texel == 3) color = Color.FromArgb(0' 0' 0' 0); // Transparent color                                      break;                                    case 2:                                      if (texel == 0) color = palette[0];                                      else if (texel == 1) color = palette[1];                                      else if (texel == 2) color = palette[2];                                      else if (texel == 3) color = palette[3];                                      break;                                    case 3:                                      if (texel == 0) color = palette[0];                                      else if (texel == 1) color = palette[1];                                      else if (texel == 2) color = SumColors(palette[0]' palette[1]' 5' 3);                                      else if (texel == 3) color = SumColors(palette[0]' palette[1]' 3' 5);                                      break;                              }
Magic Number,_3DModels,TextureControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\TextureControl.cs,Draw_CompressedTexture,The following statement contains a magic number: switch (pal_mode)                              {                                  case 0:                                      if (texel == 0) color = palette[0];                                      else if (texel == 1) color = palette[1];                                      else if (texel == 2) color = palette[2];                                      else if (texel == 3) color = Color.FromArgb(0' 0' 0' 0);  // Transparent color                                      break;                                    case 1:                                      if (texel == 0) color = palette[0];                                      else if (texel == 1) color = palette[1];                                      else if (texel == 2) color = SumColors(palette[0]' palette[1]' 1' 1);                                      else if (texel == 3) color = Color.FromArgb(0' 0' 0' 0); // Transparent color                                      break;                                    case 2:                                      if (texel == 0) color = palette[0];                                      else if (texel == 1) color = palette[1];                                      else if (texel == 2) color = palette[2];                                      else if (texel == 3) color = palette[3];                                      break;                                    case 3:                                      if (texel == 0) color = palette[0];                                      else if (texel == 1) color = palette[1];                                      else if (texel == 2) color = SumColors(palette[0]' palette[1]' 5' 3);                                      else if (texel == 3) color = SumColors(palette[0]' palette[1]' 3' 5);                                      break;                              }
Magic Number,_3DModels,TextureControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\TextureControl.cs,Draw_CompressedTexture,The following statement contains a magic number: switch (pal_mode)                              {                                  case 0:                                      if (texel == 0) color = palette[0];                                      else if (texel == 1) color = palette[1];                                      else if (texel == 2) color = palette[2];                                      else if (texel == 3) color = Color.FromArgb(0' 0' 0' 0);  // Transparent color                                      break;                                    case 1:                                      if (texel == 0) color = palette[0];                                      else if (texel == 1) color = palette[1];                                      else if (texel == 2) color = SumColors(palette[0]' palette[1]' 1' 1);                                      else if (texel == 3) color = Color.FromArgb(0' 0' 0' 0); // Transparent color                                      break;                                    case 2:                                      if (texel == 0) color = palette[0];                                      else if (texel == 1) color = palette[1];                                      else if (texel == 2) color = palette[2];                                      else if (texel == 3) color = palette[3];                                      break;                                    case 3:                                      if (texel == 0) color = palette[0];                                      else if (texel == 1) color = palette[1];                                      else if (texel == 2) color = SumColors(palette[0]' palette[1]' 5' 3);                                      else if (texel == 3) color = SumColors(palette[0]' palette[1]' 3' 5);                                      break;                              }
Magic Number,_3DModels,TextureControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\TextureControl.cs,Draw_CompressedTexture,The following statement contains a magic number: switch (pal_mode)                              {                                  case 0:                                      if (texel == 0) color = palette[0];                                      else if (texel == 1) color = palette[1];                                      else if (texel == 2) color = palette[2];                                      else if (texel == 3) color = Color.FromArgb(0' 0' 0' 0);  // Transparent color                                      break;                                    case 1:                                      if (texel == 0) color = palette[0];                                      else if (texel == 1) color = palette[1];                                      else if (texel == 2) color = SumColors(palette[0]' palette[1]' 1' 1);                                      else if (texel == 3) color = Color.FromArgb(0' 0' 0' 0); // Transparent color                                      break;                                    case 2:                                      if (texel == 0) color = palette[0];                                      else if (texel == 1) color = palette[1];                                      else if (texel == 2) color = palette[2];                                      else if (texel == 3) color = palette[3];                                      break;                                    case 3:                                      if (texel == 0) color = palette[0];                                      else if (texel == 1) color = palette[1];                                      else if (texel == 2) color = SumColors(palette[0]' palette[1]' 5' 3);                                      else if (texel == 3) color = SumColors(palette[0]' palette[1]' 3' 5);                                      break;                              }
Magic Number,_3DModels,TextureControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\TextureControl.cs,Draw_CompressedTexture,The following statement contains a magic number: switch (pal_mode)                              {                                  case 0:                                      if (texel == 0) color = palette[0];                                      else if (texel == 1) color = palette[1];                                      else if (texel == 2) color = palette[2];                                      else if (texel == 3) color = Color.FromArgb(0' 0' 0' 0);  // Transparent color                                      break;                                    case 1:                                      if (texel == 0) color = palette[0];                                      else if (texel == 1) color = palette[1];                                      else if (texel == 2) color = SumColors(palette[0]' palette[1]' 1' 1);                                      else if (texel == 3) color = Color.FromArgb(0' 0' 0' 0); // Transparent color                                      break;                                    case 2:                                      if (texel == 0) color = palette[0];                                      else if (texel == 1) color = palette[1];                                      else if (texel == 2) color = palette[2];                                      else if (texel == 3) color = palette[3];                                      break;                                    case 3:                                      if (texel == 0) color = palette[0];                                      else if (texel == 1) color = palette[1];                                      else if (texel == 2) color = SumColors(palette[0]' palette[1]' 5' 3);                                      else if (texel == 3) color = SumColors(palette[0]' palette[1]' 3' 5);                                      break;                              }
Magic Number,_3DModels,TextureControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\TextureControl.cs,Draw_CompressedTexture,The following statement contains a magic number: switch (pal_mode)                              {                                  case 0:                                      if (texel == 0) color = palette[0];                                      else if (texel == 1) color = palette[1];                                      else if (texel == 2) color = palette[2];                                      else if (texel == 3) color = Color.FromArgb(0' 0' 0' 0);  // Transparent color                                      break;                                    case 1:                                      if (texel == 0) color = palette[0];                                      else if (texel == 1) color = palette[1];                                      else if (texel == 2) color = SumColors(palette[0]' palette[1]' 1' 1);                                      else if (texel == 3) color = Color.FromArgb(0' 0' 0' 0); // Transparent color                                      break;                                    case 2:                                      if (texel == 0) color = palette[0];                                      else if (texel == 1) color = palette[1];                                      else if (texel == 2) color = palette[2];                                      else if (texel == 3) color = palette[3];                                      break;                                    case 3:                                      if (texel == 0) color = palette[0];                                      else if (texel == 1) color = palette[1];                                      else if (texel == 2) color = SumColors(palette[0]' palette[1]' 5' 3);                                      else if (texel == 3) color = SumColors(palette[0]' palette[1]' 3' 5);                                      break;                              }
Magic Number,_3DModels,TextureControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\TextureControl.cs,Draw_CompressedTexture,The following statement contains a magic number: switch (pal_mode)                              {                                  case 0:                                      if (texel == 0) color = palette[0];                                      else if (texel == 1) color = palette[1];                                      else if (texel == 2) color = palette[2];                                      else if (texel == 3) color = Color.FromArgb(0' 0' 0' 0);  // Transparent color                                      break;                                    case 1:                                      if (texel == 0) color = palette[0];                                      else if (texel == 1) color = palette[1];                                      else if (texel == 2) color = SumColors(palette[0]' palette[1]' 1' 1);                                      else if (texel == 3) color = Color.FromArgb(0' 0' 0' 0); // Transparent color                                      break;                                    case 2:                                      if (texel == 0) color = palette[0];                                      else if (texel == 1) color = palette[1];                                      else if (texel == 2) color = palette[2];                                      else if (texel == 3) color = palette[3];                                      break;                                    case 3:                                      if (texel == 0) color = palette[0];                                      else if (texel == 1) color = palette[1];                                      else if (texel == 2) color = SumColors(palette[0]' palette[1]' 5' 3);                                      else if (texel == 3) color = SumColors(palette[0]' palette[1]' 3' 5);                                      break;                              }
Magic Number,_3DModels,TextureControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\TextureControl.cs,Draw_CompressedTexture,The following statement contains a magic number: wTex < 4
Magic Number,_3DModels,TextureControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\TextureControl.cs,Draw_CompressedTexture,The following statement contains a magic number: hTex < 4
Magic Number,_3DModels,TextureControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\TextureControl.cs,Bit8ToBit2,The following statement contains a magic number: bit2.Add((byte)((data[i] >> 2) & 0x3));
Magic Number,_3DModels,TextureControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\TextureControl.cs,Bit8ToBit2,The following statement contains a magic number: bit2.Add((byte)((data[i] >> 4) & 0x3));
Magic Number,_3DModels,TextureControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\TextureControl.cs,Bit8ToBit2,The following statement contains a magic number: bit2.Add((byte)((data[i] >> 6) & 0x3));
Magic Number,_3DModels,TextureControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\TextureControl.cs,Info,The following statement contains a magic number: i < 11
Magic Number,_3DModels,TextureControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\TextureControl.cs,Info,The following statement contains a magic number: listProp.Items[12].SubItems.RemoveAt(1);
Magic Number,_3DModels,TextureControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\TextureControl.cs,Info,The following statement contains a magic number: listProp.Items[12].SubItems.Count > 1
Magic Number,_3DModels,TextureControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\TextureControl.cs,Info,The following statement contains a magic number: listProp.Items[1].SubItems.Add((texInfo.tex_offset * 8).ToString("x"));
Magic Number,_3DModels,TextureControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\TextureControl.cs,Info,The following statement contains a magic number: listProp.Items[2].SubItems.Add(texInfo.repeat_X.ToString());
Magic Number,_3DModels,TextureControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\TextureControl.cs,Info,The following statement contains a magic number: listProp.Items[3].SubItems.Add(texInfo.repeat_Y.ToString());
Magic Number,_3DModels,TextureControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\TextureControl.cs,Info,The following statement contains a magic number: listProp.Items[4].SubItems.Add(texInfo.flip_X.ToString());
Magic Number,_3DModels,TextureControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\TextureControl.cs,Info,The following statement contains a magic number: listProp.Items[5].SubItems.Add(texInfo.flip_Y.ToString());
Magic Number,_3DModels,TextureControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\TextureControl.cs,Info,The following statement contains a magic number: listProp.Items[6].SubItems.Add(texInfo.width.ToString());
Magic Number,_3DModels,TextureControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\TextureControl.cs,Info,The following statement contains a magic number: listProp.Items[7].SubItems.Add(texInfo.height.ToString());
Magic Number,_3DModels,TextureControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\TextureControl.cs,Info,The following statement contains a magic number: listProp.Items[8].SubItems.Add(texInfo.format.ToString() + " (" + (TextureFormat)texInfo.format + ')');
Magic Number,_3DModels,TextureControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\TextureControl.cs,Info,The following statement contains a magic number: listProp.Items[9].SubItems.Add(texInfo.color0.ToString());
Magic Number,_3DModels,TextureControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\TextureControl.cs,Info,The following statement contains a magic number: listProp.Items[10].SubItems.Add(texInfo.coord_transf.ToString() + " (" + (TextureCoordTransf)texInfo.coord_transf + ')');
Magic Number,_3DModels,TextureControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\TextureControl.cs,Info,The following statement contains a magic number: palOffset *= (texInfo.format == 2 ? 8 : 16);
Magic Number,_3DModels,TextureControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\TextureControl.cs,Info,The following statement contains a magic number: palOffset *= (texInfo.format == 2 ? 8 : 16);
Magic Number,_3DModels,TextureControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\TextureControl.cs,Info,The following statement contains a magic number: palOffset *= (texInfo.format == 2 ? 8 : 16);
Magic Number,_3DModels,TextureControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\TextureControl.cs,Info,The following statement contains a magic number: listProp.Items[12].SubItems.Add(palOffset.ToString("x"));
Magic Number,_3DModels,TextureControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\TextureControl.cs,btnSave_Click,The following statement contains a magic number: o.FilterIndex == 2
Magic Number,_3DModels,TextureControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\TextureControl.cs,button1_Click,The following statement contains a magic number: br.BaseStream.Position += palInfo.palette_offset * 8;
Magic Number,_3DModels,TextureControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\TextureControl.cs,button1_Click,The following statement contains a magic number: o.FilterIndex == 3
Magic Number,_3DModels,TextureControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\TextureControl.cs,InitializeComponent,The following statement contains a magic number: System.Windows.Forms.ListViewItem listViewItem1 = new System.Windows.Forms.ListViewItem(new string[] {              "S02"'              "S03"}' -1' System.Drawing.Color.Empty' System.Drawing.Color.Empty' new System.Drawing.Font("Microsoft Sans Serif"' 9F' System.Drawing.FontStyle.Bold' System.Drawing.GraphicsUnit.Point' ((byte)(0))));
Magic Number,_3DModels,TextureControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\TextureControl.cs,InitializeComponent,The following statement contains a magic number: System.Windows.Forms.ListViewItem listViewItem12 = new System.Windows.Forms.ListViewItem(new string[] {              "S02"'              "S0E"}' -1' System.Drawing.Color.Empty' System.Drawing.Color.Empty' new System.Drawing.Font("Microsoft Sans Serif"' 9F' System.Drawing.FontStyle.Bold' System.Drawing.GraphicsUnit.Point' ((byte)(0))));
Magic Number,_3DModels,TextureControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\TextureControl.cs,InitializeComponent,The following statement contains a magic number: this.picTex.Size = new System.Drawing.Size(100' 100);
Magic Number,_3DModels,TextureControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\TextureControl.cs,InitializeComponent,The following statement contains a magic number: this.picTex.Size = new System.Drawing.Size(100' 100);
Magic Number,_3DModels,TextureControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\TextureControl.cs,InitializeComponent,The following statement contains a magic number: this.picPalette.Location = new System.Drawing.Point(349' 275);
Magic Number,_3DModels,TextureControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\TextureControl.cs,InitializeComponent,The following statement contains a magic number: this.picPalette.Location = new System.Drawing.Point(349' 275);
Magic Number,_3DModels,TextureControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\TextureControl.cs,InitializeComponent,The following statement contains a magic number: this.picPalette.Size = new System.Drawing.Size(160' 160);
Magic Number,_3DModels,TextureControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\TextureControl.cs,InitializeComponent,The following statement contains a magic number: this.picPalette.Size = new System.Drawing.Size(160' 160);
Magic Number,_3DModels,TextureControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\TextureControl.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(175' 386);
Magic Number,_3DModels,TextureControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\TextureControl.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(175' 386);
Magic Number,_3DModels,TextureControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\TextureControl.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(26' 13);
Magic Number,_3DModels,TextureControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\TextureControl.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(26' 13);
Magic Number,_3DModels,TextureControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\TextureControl.cs,InitializeComponent,The following statement contains a magic number: this.label1.TabIndex = 3;
Magic Number,_3DModels,TextureControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\TextureControl.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point(175' 259);
Magic Number,_3DModels,TextureControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\TextureControl.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point(175' 259);
Magic Number,_3DModels,TextureControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\TextureControl.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size(26' 13);
Magic Number,_3DModels,TextureControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\TextureControl.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size(26' 13);
Magic Number,_3DModels,TextureControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\TextureControl.cs,InitializeComponent,The following statement contains a magic number: this.label2.TabIndex = 5;
Magic Number,_3DModels,TextureControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\TextureControl.cs,InitializeComponent,The following statement contains a magic number: this.listProp.Location = new System.Drawing.Point(0' 259);
Magic Number,_3DModels,TextureControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\TextureControl.cs,InitializeComponent,The following statement contains a magic number: this.listProp.Size = new System.Drawing.Size(169' 251);
Magic Number,_3DModels,TextureControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\TextureControl.cs,InitializeComponent,The following statement contains a magic number: this.listProp.Size = new System.Drawing.Size(169' 251);
Magic Number,_3DModels,TextureControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\TextureControl.cs,InitializeComponent,The following statement contains a magic number: this.listProp.TabIndex = 8;
Magic Number,_3DModels,TextureControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\TextureControl.cs,InitializeComponent,The following statement contains a magic number: this.columnProperty.Width = 62;
Magic Number,_3DModels,TextureControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\TextureControl.cs,InitializeComponent,The following statement contains a magic number: this.columnValue.Width = 89;
Magic Number,_3DModels,TextureControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\TextureControl.cs,InitializeComponent,The following statement contains a magic number: this.btnSetTransparent.Location = new System.Drawing.Point(349' 441);
Magic Number,_3DModels,TextureControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\TextureControl.cs,InitializeComponent,The following statement contains a magic number: this.btnSetTransparent.Location = new System.Drawing.Point(349' 441);
Magic Number,_3DModels,TextureControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\TextureControl.cs,InitializeComponent,The following statement contains a magic number: this.btnSetTransparent.Size = new System.Drawing.Size(160' 23);
Magic Number,_3DModels,TextureControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\TextureControl.cs,InitializeComponent,The following statement contains a magic number: this.btnSetTransparent.Size = new System.Drawing.Size(160' 23);
Magic Number,_3DModels,TextureControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\TextureControl.cs,InitializeComponent,The following statement contains a magic number: this.btnSetTransparent.TabIndex = 9;
Magic Number,_3DModels,TextureControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\TextureControl.cs,InitializeComponent,The following statement contains a magic number: this.listTextures.Location = new System.Drawing.Point(173' 275);
Magic Number,_3DModels,TextureControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\TextureControl.cs,InitializeComponent,The following statement contains a magic number: this.listTextures.Location = new System.Drawing.Point(173' 275);
Magic Number,_3DModels,TextureControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\TextureControl.cs,InitializeComponent,The following statement contains a magic number: this.listTextures.Size = new System.Drawing.Size(170' 108);
Magic Number,_3DModels,TextureControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\TextureControl.cs,InitializeComponent,The following statement contains a magic number: this.listTextures.Size = new System.Drawing.Size(170' 108);
Magic Number,_3DModels,TextureControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\TextureControl.cs,InitializeComponent,The following statement contains a magic number: this.listTextures.TabIndex = 11;
Magic Number,_3DModels,TextureControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\TextureControl.cs,InitializeComponent,The following statement contains a magic number: this.listPalettes.Location = new System.Drawing.Point(174' 401);
Magic Number,_3DModels,TextureControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\TextureControl.cs,InitializeComponent,The following statement contains a magic number: this.listPalettes.Location = new System.Drawing.Point(174' 401);
Magic Number,_3DModels,TextureControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\TextureControl.cs,InitializeComponent,The following statement contains a magic number: this.listPalettes.Size = new System.Drawing.Size(169' 108);
Magic Number,_3DModels,TextureControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\TextureControl.cs,InitializeComponent,The following statement contains a magic number: this.listPalettes.Size = new System.Drawing.Size(169' 108);
Magic Number,_3DModels,TextureControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\TextureControl.cs,InitializeComponent,The following statement contains a magic number: this.listPalettes.TabIndex = 12;
Magic Number,_3DModels,TextureControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\TextureControl.cs,InitializeComponent,The following statement contains a magic number: this.panelTex.Size = new System.Drawing.Size(512' 256);
Magic Number,_3DModels,TextureControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\TextureControl.cs,InitializeComponent,The following statement contains a magic number: this.panelTex.Size = new System.Drawing.Size(512' 256);
Magic Number,_3DModels,TextureControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\TextureControl.cs,InitializeComponent,The following statement contains a magic number: this.panelTex.TabIndex = 13;
Magic Number,_3DModels,TextureControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\TextureControl.cs,InitializeComponent,The following statement contains a magic number: this.btnSave.Location = new System.Drawing.Point(349' 470);
Magic Number,_3DModels,TextureControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\TextureControl.cs,InitializeComponent,The following statement contains a magic number: this.btnSave.Location = new System.Drawing.Point(349' 470);
Magic Number,_3DModels,TextureControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\TextureControl.cs,InitializeComponent,The following statement contains a magic number: this.btnSave.Size = new System.Drawing.Size(77' 37);
Magic Number,_3DModels,TextureControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\TextureControl.cs,InitializeComponent,The following statement contains a magic number: this.btnSave.Size = new System.Drawing.Size(77' 37);
Magic Number,_3DModels,TextureControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\TextureControl.cs,InitializeComponent,The following statement contains a magic number: this.btnSave.TabIndex = 2;
Magic Number,_3DModels,TextureControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\TextureControl.cs,InitializeComponent,The following statement contains a magic number: this.label3.Location = new System.Drawing.Point(346' 259);
Magic Number,_3DModels,TextureControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\TextureControl.cs,InitializeComponent,The following statement contains a magic number: this.label3.Location = new System.Drawing.Point(346' 259);
Magic Number,_3DModels,TextureControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\TextureControl.cs,InitializeComponent,The following statement contains a magic number: this.label3.Size = new System.Drawing.Size(26' 13);
Magic Number,_3DModels,TextureControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\TextureControl.cs,InitializeComponent,The following statement contains a magic number: this.label3.Size = new System.Drawing.Size(26' 13);
Magic Number,_3DModels,TextureControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\TextureControl.cs,InitializeComponent,The following statement contains a magic number: this.label3.TabIndex = 14;
Magic Number,_3DModels,TextureControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\TextureControl.cs,InitializeComponent,The following statement contains a magic number: this.button1.Location = new System.Drawing.Point(430' 470);
Magic Number,_3DModels,TextureControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\TextureControl.cs,InitializeComponent,The following statement contains a magic number: this.button1.Location = new System.Drawing.Point(430' 470);
Magic Number,_3DModels,TextureControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\TextureControl.cs,InitializeComponent,The following statement contains a magic number: this.button1.Size = new System.Drawing.Size(77' 37);
Magic Number,_3DModels,TextureControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\TextureControl.cs,InitializeComponent,The following statement contains a magic number: this.button1.Size = new System.Drawing.Size(77' 37);
Magic Number,_3DModels,TextureControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\TextureControl.cs,InitializeComponent,The following statement contains a magic number: this.button1.TabIndex = 15;
Magic Number,_3DModels,TextureControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\TextureControl.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(512' 512);
Magic Number,_3DModels,TextureControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\TextureControl.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(512' 512);
Duplicate Code,_3DModels,BMD0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BMD0.cs,Read,The method contains a code clone-set at the following line numbers (starting from the method definition): ((24' 56)' (101' 133))
Duplicate Code,_3DModels,BMD0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BMD0.cs,Read,The method contains a code clone-set at the following line numbers (starting from the method definition): ((314' 338)' (352' 376)' (401' 425)' (514' 538))
Duplicate Code,_3DModels,BMD0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BMD0.cs,Read,The method contains a code clone-set at the following line numbers (starting from the method definition): ((314' 346)' (514' 546))
Duplicate Code,_3DModels,BMD0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BMD0.cs,Read,The method contains a code clone-set at the following line numbers (starting from the method definition): ((351' 370)' (400' 419)' (513' 532))
Missing Default,_3DModels,BMD0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BMD0.cs,Read,The following switch statement is missing a default case: switch (cmd)                      {                          case 0x00:  // Padding                              command.size = 0;                              break;                          case 0x01:  // End of bones                              command.size = 0;                              break;                          case 0x02:                              command.size = 2;                              command.parameters = new byte[2];                              command.parameters[0] = br.ReadByte();  // Node ID                              command.parameters[1] = br.ReadByte();  // Visibility                              break;                          case 0x03:                              command.size = 1;                              command.parameters = new byte[1];                              command.parameters[0] = br.ReadByte();  // Set Polygon Stack ID?                              break;                          case 0x04:                              command.size = 3;                              command.parameters = new byte[3];                              command.parameters[0] = br.ReadByte();  // Material ID                              command.parameters[1] = br.ReadByte();  // 0x05                              command.parameters[2] = br.ReadByte();  // Polygon ID                              break;                          case 0x05:                              command.size = 1;                              command.parameters = new byte[1];                              command.parameters[0] = br.ReadByte();                              break;                          case 0x06:                              command.size = 3;                              command.parameters = new byte[3];                              command.parameters[0] = br.ReadByte();  // Object ID                              command.parameters[1] = br.ReadByte();  // Parent ID                              command.parameters[2] = br.ReadByte();  // Dummy 0                              break;                          case 0x07:                              command.size = 1;                              command.parameters = new byte[1];                              command.parameters[0] = br.ReadByte();                              break;                          case 0x08:                              command.size = 1;                              command.parameters = new byte[1];                              command.parameters[0] = br.ReadByte();                              break;                          case 0x09:                              command.size = 8;                              command.parameters = new byte[8];                              command.parameters[0] = br.ReadByte();                              command.parameters[1] = br.ReadByte();                              command.parameters[2] = br.ReadByte();                              command.parameters[3] = br.ReadByte();                              command.parameters[4] = br.ReadByte();                              command.parameters[5] = br.ReadByte();                              command.parameters[6] = br.ReadByte();                              command.parameters[7] = br.ReadByte();                              break;                          case 0x0B:                              command.size = 0;   // Begin Polygon/Material pairing                              break;                          case 0x24:                              command.size = 3;                              command.parameters = new byte[3];                              command.parameters[0] = br.ReadByte();  // Material ID                              command.parameters[1] = br.ReadByte();  // 0x05                              command.parameters[2] = br.ReadByte();  // Polygon ID                              break;                          case 0x26:                              command.size = 4;                              command.parameters = new byte[4];                              command.parameters[0] = br.ReadByte();  // Object ID                              command.parameters[1] = br.ReadByte();  // Parent ID                              command.parameters[2] = br.ReadByte();  // Dummy 0                              command.parameters[3] = br.ReadByte();  // Stack ID                              break;                          case 0x2B:                              command.size = 0;   // End Polygon/Material Pairing                              break;                          case 0x44:                              command.size = 3;                              command.parameters = new byte[3];                              command.parameters[0] = br.ReadByte();  // Material ID                              command.parameters[1] = br.ReadByte();  // 0x05                              command.parameters[2] = br.ReadByte();  // Polygon ID                              break;                          case 0x46:                              command.size = 4;                              command.parameters = new byte[4];                              command.parameters[0] = br.ReadByte();  // Object ID                              command.parameters[1] = br.ReadByte();  // Parent ID                              command.parameters[2] = br.ReadByte();  // Dummy 0                              command.parameters[3] = br.ReadByte();  // Restore ID                              break;                          case 0x66:                              command.size = 5;                              command.parameters = new byte[5];                              command.parameters[0] = br.ReadByte();  // Object ID                              command.parameters[1] = br.ReadByte();  // Parent ID                              command.parameters[2] = br.ReadByte();  // Dummy 0                              command.parameters[3] = br.ReadByte();  // Stack ID                              command.parameters[4] = br.ReadByte();  // Restore ID                              break;                      }
Missing Default,_3DModels,BTX0,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\BTX0.cs,Draw_CompressedTexture,The following switch statement is missing a default case: switch (pal_mode)                              {                                  case 0:                                      if (texel == 0) color = palette[0];                                      else if (texel == 1) color = palette[1];                                      else if (texel == 2) color = palette[2];                                      else if (texel == 3) color = Color.FromArgb(0' 0' 0' 0);  // Transparent color                                      break;                                    case 1:                                      if (texel == 0) color = palette[0];                                      else if (texel == 1) color = palette[1];                                      else if (texel == 2) color = SumColors(palette[0]' palette[1]' 1' 1);                                      else if (texel == 3) color = Color.FromArgb(0' 0' 0' 0); // Transparent color                                      break;                                    case 2:                                      if (texel == 0) color = palette[0];                                      else if (texel == 1) color = palette[1];                                      else if (texel == 2) color = palette[2];                                      else if (texel == 3) color = palette[3];                                      break;                                    case 3:                                      if (texel == 0) color = palette[0];                                      else if (texel == 1) color = palette[1];                                      else if (texel == 2) color = SumColors(palette[0]' palette[1]' 5' 3);                                      else if (texel == 3) color = SumColors(palette[0]' palette[1]' 3' 5);                                      break;                              }
Missing Default,_3DModels,TextureControl,C:\research\architectureSmells\repos\pleonex_tinke\Plugins\3DModels\3DModels\TextureControl.cs,Draw_CompressedTexture,The following switch statement is missing a default case: switch (pal_mode)                              {                                  case 0:                                      if (texel == 0) color = palette[0];                                      else if (texel == 1) color = palette[1];                                      else if (texel == 2) color = palette[2];                                      else if (texel == 3) color = Color.FromArgb(0' 0' 0' 0);  // Transparent color                                      break;                                    case 1:                                      if (texel == 0) color = palette[0];                                      else if (texel == 1) color = palette[1];                                      else if (texel == 2) color = SumColors(palette[0]' palette[1]' 1' 1);                                      else if (texel == 3) color = Color.FromArgb(0' 0' 0' 0); // Transparent color                                      break;                                    case 2:                                      if (texel == 0) color = palette[0];                                      else if (texel == 1) color = palette[1];                                      else if (texel == 2) color = palette[2];                                      else if (texel == 3) color = palette[3];                                      break;                                    case 3:                                      if (texel == 0) color = palette[0];                                      else if (texel == 1) color = palette[1];                                      else if (texel == 2) color = SumColors(palette[0]' palette[1]' 5' 3);                                      else if (texel == 3) color = SumColors(palette[0]' palette[1]' 3' 5);                                      break;                              }
