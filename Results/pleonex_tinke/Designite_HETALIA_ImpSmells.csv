Implementation smell,Namespace,Class,File,Method,Description
Magic Number,HETALIA,IMY,C:\repos\pleonex_tinke\Plugins\HETALIA\HETALIA\IMY.cs,Read,The following statement contains a magic number: int width = BitConverter.ToInt16(data' 8);
Magic Number,HETALIA,IMY,C:\repos\pleonex_tinke\Plugins\HETALIA\HETALIA\IMY.cs,Read,The following statement contains a magic number: int img_pos = num_colors * 2 + 0x20;
Magic Number,HETALIA,IMY,C:\repos\pleonex_tinke\Plugins\HETALIA\HETALIA\IMY.cs,Read,The following statement contains a magic number: if (num_colors == 0x10)              {                  format = ColorFormat.colors16;                  width *= 2;              }
Magic Number,HETALIA,IMY,C:\repos\pleonex_tinke\Plugins\HETALIA\HETALIA\IMY.cs,Read,The following statement contains a magic number: byte[] pal = new byte[num_colors * 2];
Magic Number,HETALIA,MAP,C:\repos\pleonex_tinke\Plugins\HETALIA\HETALIA\MAP.cs,Read,The following statement contains a magic number: br.ReadChars(4);
Magic Number,HETALIA,MAP,C:\repos\pleonex_tinke\Plugins\HETALIA\HETALIA\MAP.cs,Read,The following statement contains a magic number: NTFS[] map = new NTFS[(map_size - 0x20) / 2];
Magic Number,HETALIA,MAP,C:\repos\pleonex_tinke\Plugins\HETALIA\HETALIA\MAP.cs,Read,The following statement contains a magic number: int tile_size = tile_width * tile_height * img.BPP / 8;
Magic Number,HETALIA.Pack,DATA,C:\repos\pleonex_tinke\Plugins\HETALIA\HETALIA\Pack\DATA.cs,Unpack,The following statement contains a magic number: for (int i = 0; i < num_files; i++)              {                  sFile newFile = new sFile();                  newFile.name = "File_" + i.ToString() + '.';                  newFile.size = br.ReadUInt32();                  newFile.offset = br.ReadUInt32();                  newFile.path = file.path;                    long currPos = br.BaseStream.Position;                  br.BaseStream.Position = newFile.offset;                  string ext = new String(br.ReadChars(3));                  if (ext != "IMY" && ext != "MAP")                      ext = "BIN";                  newFile.name += ext;                  br.BaseStream.Position = currPos;                    unpack.files.Add(newFile);              }
Magic Number,HETALIA.Encryption,Image,C:\repos\pleonex_tinke\Plugins\HETALIA\HETALIA\Encryption\Image.cs,Decrypt,The following statement contains a magic number: int width = BitConverter.ToInt16(data' 8);
Magic Number,HETALIA.Encryption,Image,C:\repos\pleonex_tinke\Plugins\HETALIA\HETALIA\Encryption\Image.cs,Decrypt,The following statement contains a magic number: int height = BitConverter.ToInt16(data' 12);
Magic Number,HETALIA.Encryption,Image,C:\repos\pleonex_tinke\Plugins\HETALIA\HETALIA\Encryption\Image.cs,Decrypt,The following statement contains a magic number: int img_pos = num_colors * 2 + 0x20;
Magic Number,HETALIA.Encryption,Image,C:\repos\pleonex_tinke\Plugins\HETALIA\HETALIA\Encryption\Image.cs,Decrypt,The following statement contains a magic number: if (pos_enc == pos_control) // pos_enc == 0              {                  pos_enc = BitConverter.ToInt32(data' pos_control);                  pos_control += 2;              }
Magic Number,HETALIA.Encryption,Image,C:\repos\pleonex_tinke\Plugins\HETALIA\HETALIA\Encryption\Image.cs,Decrypt,The following statement contains a magic number: pos_control += 2;
Magic Number,HETALIA.Encryption,Image,C:\repos\pleonex_tinke\Plugins\HETALIA\HETALIA\Encryption\Image.cs,Decrypt,The following statement contains a magic number: Array.Copy(BitConverter.GetBytes(0xFFFFFFFE)' 0' list' 0' 4);
Magic Number,HETALIA.Encryption,Image,C:\repos\pleonex_tinke\Plugins\HETALIA\HETALIA\Encryption\Image.cs,Decrypt,The following statement contains a magic number: Array.Copy(BitConverter.GetBytes(0 - width)' 0' list' 4' 4);
Magic Number,HETALIA.Encryption,Image,C:\repos\pleonex_tinke\Plugins\HETALIA\HETALIA\Encryption\Image.cs,Decrypt,The following statement contains a magic number: Array.Copy(BitConverter.GetBytes(0 - width)' 0' list' 4' 4);
Magic Number,HETALIA.Encryption,Image,C:\repos\pleonex_tinke\Plugins\HETALIA\HETALIA\Encryption\Image.cs,Decrypt,The following statement contains a magic number: Array.Copy(BitConverter.GetBytes(0 - width - 2)' 0' list' 8' 4);
Magic Number,HETALIA.Encryption,Image,C:\repos\pleonex_tinke\Plugins\HETALIA\HETALIA\Encryption\Image.cs,Decrypt,The following statement contains a magic number: Array.Copy(BitConverter.GetBytes(0 - width - 2)' 0' list' 8' 4);
Magic Number,HETALIA.Encryption,Image,C:\repos\pleonex_tinke\Plugins\HETALIA\HETALIA\Encryption\Image.cs,Decrypt,The following statement contains a magic number: Array.Copy(BitConverter.GetBytes(0 - width - 2)' 0' list' 8' 4);
Magic Number,HETALIA.Encryption,Image,C:\repos\pleonex_tinke\Plugins\HETALIA\HETALIA\Encryption\Image.cs,Decrypt,The following statement contains a magic number: Array.Copy(BitConverter.GetBytes(0 - width + 2)' 0' list' 12' 4);
Magic Number,HETALIA.Encryption,Image,C:\repos\pleonex_tinke\Plugins\HETALIA\HETALIA\Encryption\Image.cs,Decrypt,The following statement contains a magic number: Array.Copy(BitConverter.GetBytes(0 - width + 2)' 0' list' 12' 4);
Magic Number,HETALIA.Encryption,Image,C:\repos\pleonex_tinke\Plugins\HETALIA\HETALIA\Encryption\Image.cs,Decrypt,The following statement contains a magic number: Array.Copy(BitConverter.GetBytes(0 - width + 2)' 0' list' 12' 4);
Magic Number,HETALIA.Encryption,Image,C:\repos\pleonex_tinke\Plugins\HETALIA\HETALIA\Encryption\Image.cs,Decrypt,The following statement contains a magic number: while (pos_buf < dec_size)              {                  // Read encryption control code                  int control = data[pos_control++];                    // Check type of encryption                  if (control < 0x10)     // Copy X bytes                  {                      int loop = control + 1;                      for (; loop != 0; loop--' pos_enc += 2' pos_buf += 2)                      {                          short value = BitConverter.ToInt16(data' pos_enc);                          Array.Copy(BitConverter.GetBytes(value)' 0' buffer' pos_buf' 2);                      }                  }                  else if (control < 0xC0)                  {                      int pos = -1 - control + 0x10;                      pos <<= 1;                      // Read past value                      short value = BitConverter.ToInt16(data' pos_enc + pos);                      Array.Copy(BitConverter.GetBytes(value)' 0' buffer' pos_buf' 2);                      pos_buf += 2;                  }                  else                  {                      control -= 0xC0;                        int pos = control >> 4;                      pos <<= 2;                      pos = BitConverter.ToInt32(list' pos);                      pos += pos_buf;                        int loop = control & 0xF;                      loop++;                        for (; loop != 0; loop--' pos += 2' pos_buf += 2)                      {                          short value = BitConverter.ToInt16(buffer' pos);                          Array.Copy(BitConverter.GetBytes(value)' 0' buffer' pos_buf' 2);                      }                  }              }
Magic Number,HETALIA.Encryption,Image,C:\repos\pleonex_tinke\Plugins\HETALIA\HETALIA\Encryption\Image.cs,Decrypt,The following statement contains a magic number: while (pos_buf < dec_size)              {                  // Read encryption control code                  int control = data[pos_control++];                    // Check type of encryption                  if (control < 0x10)     // Copy X bytes                  {                      int loop = control + 1;                      for (; loop != 0; loop--' pos_enc += 2' pos_buf += 2)                      {                          short value = BitConverter.ToInt16(data' pos_enc);                          Array.Copy(BitConverter.GetBytes(value)' 0' buffer' pos_buf' 2);                      }                  }                  else if (control < 0xC0)                  {                      int pos = -1 - control + 0x10;                      pos <<= 1;                      // Read past value                      short value = BitConverter.ToInt16(data' pos_enc + pos);                      Array.Copy(BitConverter.GetBytes(value)' 0' buffer' pos_buf' 2);                      pos_buf += 2;                  }                  else                  {                      control -= 0xC0;                        int pos = control >> 4;                      pos <<= 2;                      pos = BitConverter.ToInt32(list' pos);                      pos += pos_buf;                        int loop = control & 0xF;                      loop++;                        for (; loop != 0; loop--' pos += 2' pos_buf += 2)                      {                          short value = BitConverter.ToInt16(buffer' pos);                          Array.Copy(BitConverter.GetBytes(value)' 0' buffer' pos_buf' 2);                      }                  }              }
Magic Number,HETALIA.Encryption,Image,C:\repos\pleonex_tinke\Plugins\HETALIA\HETALIA\Encryption\Image.cs,Decrypt,The following statement contains a magic number: while (pos_buf < dec_size)              {                  // Read encryption control code                  int control = data[pos_control++];                    // Check type of encryption                  if (control < 0x10)     // Copy X bytes                  {                      int loop = control + 1;                      for (; loop != 0; loop--' pos_enc += 2' pos_buf += 2)                      {                          short value = BitConverter.ToInt16(data' pos_enc);                          Array.Copy(BitConverter.GetBytes(value)' 0' buffer' pos_buf' 2);                      }                  }                  else if (control < 0xC0)                  {                      int pos = -1 - control + 0x10;                      pos <<= 1;                      // Read past value                      short value = BitConverter.ToInt16(data' pos_enc + pos);                      Array.Copy(BitConverter.GetBytes(value)' 0' buffer' pos_buf' 2);                      pos_buf += 2;                  }                  else                  {                      control -= 0xC0;                        int pos = control >> 4;                      pos <<= 2;                      pos = BitConverter.ToInt32(list' pos);                      pos += pos_buf;                        int loop = control & 0xF;                      loop++;                        for (; loop != 0; loop--' pos += 2' pos_buf += 2)                      {                          short value = BitConverter.ToInt16(buffer' pos);                          Array.Copy(BitConverter.GetBytes(value)' 0' buffer' pos_buf' 2);                      }                  }              }
Magic Number,HETALIA.Encryption,Image,C:\repos\pleonex_tinke\Plugins\HETALIA\HETALIA\Encryption\Image.cs,Decrypt,The following statement contains a magic number: while (pos_buf < dec_size)              {                  // Read encryption control code                  int control = data[pos_control++];                    // Check type of encryption                  if (control < 0x10)     // Copy X bytes                  {                      int loop = control + 1;                      for (; loop != 0; loop--' pos_enc += 2' pos_buf += 2)                      {                          short value = BitConverter.ToInt16(data' pos_enc);                          Array.Copy(BitConverter.GetBytes(value)' 0' buffer' pos_buf' 2);                      }                  }                  else if (control < 0xC0)                  {                      int pos = -1 - control + 0x10;                      pos <<= 1;                      // Read past value                      short value = BitConverter.ToInt16(data' pos_enc + pos);                      Array.Copy(BitConverter.GetBytes(value)' 0' buffer' pos_buf' 2);                      pos_buf += 2;                  }                  else                  {                      control -= 0xC0;                        int pos = control >> 4;                      pos <<= 2;                      pos = BitConverter.ToInt32(list' pos);                      pos += pos_buf;                        int loop = control & 0xF;                      loop++;                        for (; loop != 0; loop--' pos += 2' pos_buf += 2)                      {                          short value = BitConverter.ToInt16(buffer' pos);                          Array.Copy(BitConverter.GetBytes(value)' 0' buffer' pos_buf' 2);                      }                  }              }
Magic Number,HETALIA.Encryption,Image,C:\repos\pleonex_tinke\Plugins\HETALIA\HETALIA\Encryption\Image.cs,Decrypt,The following statement contains a magic number: while (pos_buf < dec_size)              {                  // Read encryption control code                  int control = data[pos_control++];                    // Check type of encryption                  if (control < 0x10)     // Copy X bytes                  {                      int loop = control + 1;                      for (; loop != 0; loop--' pos_enc += 2' pos_buf += 2)                      {                          short value = BitConverter.ToInt16(data' pos_enc);                          Array.Copy(BitConverter.GetBytes(value)' 0' buffer' pos_buf' 2);                      }                  }                  else if (control < 0xC0)                  {                      int pos = -1 - control + 0x10;                      pos <<= 1;                      // Read past value                      short value = BitConverter.ToInt16(data' pos_enc + pos);                      Array.Copy(BitConverter.GetBytes(value)' 0' buffer' pos_buf' 2);                      pos_buf += 2;                  }                  else                  {                      control -= 0xC0;                        int pos = control >> 4;                      pos <<= 2;                      pos = BitConverter.ToInt32(list' pos);                      pos += pos_buf;                        int loop = control & 0xF;                      loop++;                        for (; loop != 0; loop--' pos += 2' pos_buf += 2)                      {                          short value = BitConverter.ToInt16(buffer' pos);                          Array.Copy(BitConverter.GetBytes(value)' 0' buffer' pos_buf' 2);                      }                  }              }
Magic Number,HETALIA.Encryption,Image,C:\repos\pleonex_tinke\Plugins\HETALIA\HETALIA\Encryption\Image.cs,Decrypt,The following statement contains a magic number: while (pos_buf < dec_size)              {                  // Read encryption control code                  int control = data[pos_control++];                    // Check type of encryption                  if (control < 0x10)     // Copy X bytes                  {                      int loop = control + 1;                      for (; loop != 0; loop--' pos_enc += 2' pos_buf += 2)                      {                          short value = BitConverter.ToInt16(data' pos_enc);                          Array.Copy(BitConverter.GetBytes(value)' 0' buffer' pos_buf' 2);                      }                  }                  else if (control < 0xC0)                  {                      int pos = -1 - control + 0x10;                      pos <<= 1;                      // Read past value                      short value = BitConverter.ToInt16(data' pos_enc + pos);                      Array.Copy(BitConverter.GetBytes(value)' 0' buffer' pos_buf' 2);                      pos_buf += 2;                  }                  else                  {                      control -= 0xC0;                        int pos = control >> 4;                      pos <<= 2;                      pos = BitConverter.ToInt32(list' pos);                      pos += pos_buf;                        int loop = control & 0xF;                      loop++;                        for (; loop != 0; loop--' pos += 2' pos_buf += 2)                      {                          short value = BitConverter.ToInt16(buffer' pos);                          Array.Copy(BitConverter.GetBytes(value)' 0' buffer' pos_buf' 2);                      }                  }              }
Magic Number,HETALIA.Encryption,Image,C:\repos\pleonex_tinke\Plugins\HETALIA\HETALIA\Encryption\Image.cs,Decrypt,The following statement contains a magic number: while (pos_buf < dec_size)              {                  // Read encryption control code                  int control = data[pos_control++];                    // Check type of encryption                  if (control < 0x10)     // Copy X bytes                  {                      int loop = control + 1;                      for (; loop != 0; loop--' pos_enc += 2' pos_buf += 2)                      {                          short value = BitConverter.ToInt16(data' pos_enc);                          Array.Copy(BitConverter.GetBytes(value)' 0' buffer' pos_buf' 2);                      }                  }                  else if (control < 0xC0)                  {                      int pos = -1 - control + 0x10;                      pos <<= 1;                      // Read past value                      short value = BitConverter.ToInt16(data' pos_enc + pos);                      Array.Copy(BitConverter.GetBytes(value)' 0' buffer' pos_buf' 2);                      pos_buf += 2;                  }                  else                  {                      control -= 0xC0;                        int pos = control >> 4;                      pos <<= 2;                      pos = BitConverter.ToInt32(list' pos);                      pos += pos_buf;                        int loop = control & 0xF;                      loop++;                        for (; loop != 0; loop--' pos += 2' pos_buf += 2)                      {                          short value = BitConverter.ToInt16(buffer' pos);                          Array.Copy(BitConverter.GetBytes(value)' 0' buffer' pos_buf' 2);                      }                  }              }
Magic Number,HETALIA.Encryption,Image,C:\repos\pleonex_tinke\Plugins\HETALIA\HETALIA\Encryption\Image.cs,Decrypt,The following statement contains a magic number: while (pos_buf < dec_size)              {                  // Read encryption control code                  int control = data[pos_control++];                    // Check type of encryption                  if (control < 0x10)     // Copy X bytes                  {                      int loop = control + 1;                      for (; loop != 0; loop--' pos_enc += 2' pos_buf += 2)                      {                          short value = BitConverter.ToInt16(data' pos_enc);                          Array.Copy(BitConverter.GetBytes(value)' 0' buffer' pos_buf' 2);                      }                  }                  else if (control < 0xC0)                  {                      int pos = -1 - control + 0x10;                      pos <<= 1;                      // Read past value                      short value = BitConverter.ToInt16(data' pos_enc + pos);                      Array.Copy(BitConverter.GetBytes(value)' 0' buffer' pos_buf' 2);                      pos_buf += 2;                  }                  else                  {                      control -= 0xC0;                        int pos = control >> 4;                      pos <<= 2;                      pos = BitConverter.ToInt32(list' pos);                      pos += pos_buf;                        int loop = control & 0xF;                      loop++;                        for (; loop != 0; loop--' pos += 2' pos_buf += 2)                      {                          short value = BitConverter.ToInt16(buffer' pos);                          Array.Copy(BitConverter.GetBytes(value)' 0' buffer' pos_buf' 2);                      }                  }              }
Magic Number,HETALIA.Encryption,Image,C:\repos\pleonex_tinke\Plugins\HETALIA\HETALIA\Encryption\Image.cs,Decrypt,The following statement contains a magic number: while (pos_buf < dec_size)              {                  // Read encryption control code                  int control = data[pos_control++];                    // Check type of encryption                  if (control < 0x10)     // Copy X bytes                  {                      int loop = control + 1;                      for (; loop != 0; loop--' pos_enc += 2' pos_buf += 2)                      {                          short value = BitConverter.ToInt16(data' pos_enc);                          Array.Copy(BitConverter.GetBytes(value)' 0' buffer' pos_buf' 2);                      }                  }                  else if (control < 0xC0)                  {                      int pos = -1 - control + 0x10;                      pos <<= 1;                      // Read past value                      short value = BitConverter.ToInt16(data' pos_enc + pos);                      Array.Copy(BitConverter.GetBytes(value)' 0' buffer' pos_buf' 2);                      pos_buf += 2;                  }                  else                  {                      control -= 0xC0;                        int pos = control >> 4;                      pos <<= 2;                      pos = BitConverter.ToInt32(list' pos);                      pos += pos_buf;                        int loop = control & 0xF;                      loop++;                        for (; loop != 0; loop--' pos += 2' pos_buf += 2)                      {                          short value = BitConverter.ToInt16(buffer' pos);                          Array.Copy(BitConverter.GetBytes(value)' 0' buffer' pos_buf' 2);                      }                  }              }
Magic Number,HETALIA.Encryption,Image,C:\repos\pleonex_tinke\Plugins\HETALIA\HETALIA\Encryption\Image.cs,Decrypt,The following statement contains a magic number: while (pos_buf < dec_size)              {                  // Read encryption control code                  int control = data[pos_control++];                    // Check type of encryption                  if (control < 0x10)     // Copy X bytes                  {                      int loop = control + 1;                      for (; loop != 0; loop--' pos_enc += 2' pos_buf += 2)                      {                          short value = BitConverter.ToInt16(data' pos_enc);                          Array.Copy(BitConverter.GetBytes(value)' 0' buffer' pos_buf' 2);                      }                  }                  else if (control < 0xC0)                  {                      int pos = -1 - control + 0x10;                      pos <<= 1;                      // Read past value                      short value = BitConverter.ToInt16(data' pos_enc + pos);                      Array.Copy(BitConverter.GetBytes(value)' 0' buffer' pos_buf' 2);                      pos_buf += 2;                  }                  else                  {                      control -= 0xC0;                        int pos = control >> 4;                      pos <<= 2;                      pos = BitConverter.ToInt32(list' pos);                      pos += pos_buf;                        int loop = control & 0xF;                      loop++;                        for (; loop != 0; loop--' pos += 2' pos_buf += 2)                      {                          short value = BitConverter.ToInt16(buffer' pos);                          Array.Copy(BitConverter.GetBytes(value)' 0' buffer' pos_buf' 2);                      }                  }              }
Magic Number,HETALIA.Encryption,Text,C:\repos\pleonex_tinke\Plugins\HETALIA\HETALIA\Encryption\Text.cs,Decrypt,The following statement contains a magic number: byte check = (byte)((header >> 24) & 0xFF);
