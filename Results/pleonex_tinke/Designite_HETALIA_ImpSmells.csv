Implementation smell,Namespace,Class,File,Method,Description
Long Method,HETALIA.Encryption,Image,D:\newReposJune17\pleonex_tinke\Plugins\HETALIA\HETALIA\Encryption\Image.cs,Decrypt,The method has 62 lines of code.
Complex Method,HETALIA.Encryption,Image,D:\newReposJune17\pleonex_tinke\Plugins\HETALIA\HETALIA\Encryption\Image.cs,Decrypt,Cyclomatic complexity of the method is 7
Long Parameter List,HETALIA,IMY,D:\newReposJune17\pleonex_tinke\Plugins\HETALIA\HETALIA\IMY.cs,IMY,The method has 4 parameters.
Long Parameter List,HETALIA,MAP,D:\newReposJune17\pleonex_tinke\Plugins\HETALIA\HETALIA\MAP.cs,MAP,The method has 4 parameters.
Long Statement,HETALIA,MAP,D:\newReposJune17\pleonex_tinke\Plugins\HETALIA\HETALIA\MAP.cs,Read,The length of the statement  "		System.Windows.Forms.MessageBox.Show ("Tile dimension doesn't agree!\nWidth:" + tile_width.ToString () + " Height: " + tile_height.ToString ()); " is 144.
Magic Number,HETALIA,IMY,D:\newReposJune17\pleonex_tinke\Plugins\HETALIA\HETALIA\IMY.cs,Read,The following statement contains a magic number: if (num_colors == 0x10) {  	format = ColorFormat.colors16;  	width *= 2;  }  
Magic Number,HETALIA,IMY,D:\newReposJune17\pleonex_tinke\Plugins\HETALIA\HETALIA\IMY.cs,Read,The following statement contains a magic number: width *= 2;  
Magic Number,HETALIA,MAP,D:\newReposJune17\pleonex_tinke\Plugins\HETALIA\HETALIA\MAP.cs,Read,The following statement contains a magic number: br.ReadChars (4);  
Magic Number,HETALIA.Pack,DATA,D:\newReposJune17\pleonex_tinke\Plugins\HETALIA\HETALIA\Pack\DATA.cs,Unpack,The following statement contains a magic number: for (int i = 0; i < num_files; i++) {  	sFile newFile = new sFile ();  	newFile.name = "File_" + i.ToString () + '.';  	newFile.size = br.ReadUInt32 ();  	newFile.offset = br.ReadUInt32 ();  	newFile.path = file.path;  	long currPos = br.BaseStream.Position;  	br.BaseStream.Position = newFile.offset;  	string ext = new String (br.ReadChars (3));  	if (ext != "IMY" && ext != "MAP")  		ext = "BIN";  	newFile.name += ext;  	br.BaseStream.Position = currPos;  	unpack.files.Add (newFile);  }  
Magic Number,HETALIA.Encryption,Image,D:\newReposJune17\pleonex_tinke\Plugins\HETALIA\HETALIA\Encryption\Image.cs,Decrypt,The following statement contains a magic number: if (pos_enc == pos_control)// pos_enc == 0   {  	pos_enc = BitConverter.ToInt32 (data' pos_control);  	pos_control += 2;  }  
Magic Number,HETALIA.Encryption,Image,D:\newReposJune17\pleonex_tinke\Plugins\HETALIA\HETALIA\Encryption\Image.cs,Decrypt,The following statement contains a magic number: pos_control += 2;  
Magic Number,HETALIA.Encryption,Image,D:\newReposJune17\pleonex_tinke\Plugins\HETALIA\HETALIA\Encryption\Image.cs,Decrypt,The following statement contains a magic number: pos_control += 2;  
Magic Number,HETALIA.Encryption,Image,D:\newReposJune17\pleonex_tinke\Plugins\HETALIA\HETALIA\Encryption\Image.cs,Decrypt,The following statement contains a magic number: Array.Copy (BitConverter.GetBytes (0xFFFFFFFE)' 0' list' 0' 4);  
Magic Number,HETALIA.Encryption,Image,D:\newReposJune17\pleonex_tinke\Plugins\HETALIA\HETALIA\Encryption\Image.cs,Decrypt,The following statement contains a magic number: Array.Copy (BitConverter.GetBytes (0 - width)' 0' list' 4' 4);  
Magic Number,HETALIA.Encryption,Image,D:\newReposJune17\pleonex_tinke\Plugins\HETALIA\HETALIA\Encryption\Image.cs,Decrypt,The following statement contains a magic number: Array.Copy (BitConverter.GetBytes (0 - width)' 0' list' 4' 4);  
Magic Number,HETALIA.Encryption,Image,D:\newReposJune17\pleonex_tinke\Plugins\HETALIA\HETALIA\Encryption\Image.cs,Decrypt,The following statement contains a magic number: Array.Copy (BitConverter.GetBytes (0 - width - 2)' 0' list' 8' 4);  
Magic Number,HETALIA.Encryption,Image,D:\newReposJune17\pleonex_tinke\Plugins\HETALIA\HETALIA\Encryption\Image.cs,Decrypt,The following statement contains a magic number: Array.Copy (BitConverter.GetBytes (0 - width - 2)' 0' list' 8' 4);  
Magic Number,HETALIA.Encryption,Image,D:\newReposJune17\pleonex_tinke\Plugins\HETALIA\HETALIA\Encryption\Image.cs,Decrypt,The following statement contains a magic number: Array.Copy (BitConverter.GetBytes (0 - width - 2)' 0' list' 8' 4);  
Magic Number,HETALIA.Encryption,Image,D:\newReposJune17\pleonex_tinke\Plugins\HETALIA\HETALIA\Encryption\Image.cs,Decrypt,The following statement contains a magic number: Array.Copy (BitConverter.GetBytes (0 - width + 2)' 0' list' 12' 4);  
Magic Number,HETALIA.Encryption,Image,D:\newReposJune17\pleonex_tinke\Plugins\HETALIA\HETALIA\Encryption\Image.cs,Decrypt,The following statement contains a magic number: Array.Copy (BitConverter.GetBytes (0 - width + 2)' 0' list' 12' 4);  
Magic Number,HETALIA.Encryption,Image,D:\newReposJune17\pleonex_tinke\Plugins\HETALIA\HETALIA\Encryption\Image.cs,Decrypt,The following statement contains a magic number: Array.Copy (BitConverter.GetBytes (0 - width + 2)' 0' list' 12' 4);  
Magic Number,HETALIA.Encryption,Image,D:\newReposJune17\pleonex_tinke\Plugins\HETALIA\HETALIA\Encryption\Image.cs,Decrypt,The following statement contains a magic number: while (pos_buf < dec_size) {  	// Read encryption control code  	int control = data [pos_control++];  	// Check type of encryption  	if (control < 0x10)// Copy X bytes  	 {  		int loop = control + 1;  		for (; loop != 0; loop--' pos_enc += 2' pos_buf += 2) {  			short value = BitConverter.ToInt16 (data' pos_enc);  			Array.Copy (BitConverter.GetBytes (value)' 0' buffer' pos_buf' 2);  		}  	} else if (control < 0xC0) {  		int pos = -1 - control + 0x10;  		pos <<= 1;  		// Read past value  		short value = BitConverter.ToInt16 (data' pos_enc + pos);  		Array.Copy (BitConverter.GetBytes (value)' 0' buffer' pos_buf' 2);  		pos_buf += 2;  	} else {  		control -= 0xC0;  		int pos = control >> 4;  		pos <<= 2;  		pos = BitConverter.ToInt32 (list' pos);  		pos += pos_buf;  		int loop = control & 0xF;  		loop++;  		for (; loop != 0; loop--' pos += 2' pos_buf += 2) {  			short value = BitConverter.ToInt16 (buffer' pos);  			Array.Copy (BitConverter.GetBytes (value)' 0' buffer' pos_buf' 2);  		}  	}  }  
Magic Number,HETALIA.Encryption,Image,D:\newReposJune17\pleonex_tinke\Plugins\HETALIA\HETALIA\Encryption\Image.cs,Decrypt,The following statement contains a magic number: while (pos_buf < dec_size) {  	// Read encryption control code  	int control = data [pos_control++];  	// Check type of encryption  	if (control < 0x10)// Copy X bytes  	 {  		int loop = control + 1;  		for (; loop != 0; loop--' pos_enc += 2' pos_buf += 2) {  			short value = BitConverter.ToInt16 (data' pos_enc);  			Array.Copy (BitConverter.GetBytes (value)' 0' buffer' pos_buf' 2);  		}  	} else if (control < 0xC0) {  		int pos = -1 - control + 0x10;  		pos <<= 1;  		// Read past value  		short value = BitConverter.ToInt16 (data' pos_enc + pos);  		Array.Copy (BitConverter.GetBytes (value)' 0' buffer' pos_buf' 2);  		pos_buf += 2;  	} else {  		control -= 0xC0;  		int pos = control >> 4;  		pos <<= 2;  		pos = BitConverter.ToInt32 (list' pos);  		pos += pos_buf;  		int loop = control & 0xF;  		loop++;  		for (; loop != 0; loop--' pos += 2' pos_buf += 2) {  			short value = BitConverter.ToInt16 (buffer' pos);  			Array.Copy (BitConverter.GetBytes (value)' 0' buffer' pos_buf' 2);  		}  	}  }  
Magic Number,HETALIA.Encryption,Image,D:\newReposJune17\pleonex_tinke\Plugins\HETALIA\HETALIA\Encryption\Image.cs,Decrypt,The following statement contains a magic number: while (pos_buf < dec_size) {  	// Read encryption control code  	int control = data [pos_control++];  	// Check type of encryption  	if (control < 0x10)// Copy X bytes  	 {  		int loop = control + 1;  		for (; loop != 0; loop--' pos_enc += 2' pos_buf += 2) {  			short value = BitConverter.ToInt16 (data' pos_enc);  			Array.Copy (BitConverter.GetBytes (value)' 0' buffer' pos_buf' 2);  		}  	} else if (control < 0xC0) {  		int pos = -1 - control + 0x10;  		pos <<= 1;  		// Read past value  		short value = BitConverter.ToInt16 (data' pos_enc + pos);  		Array.Copy (BitConverter.GetBytes (value)' 0' buffer' pos_buf' 2);  		pos_buf += 2;  	} else {  		control -= 0xC0;  		int pos = control >> 4;  		pos <<= 2;  		pos = BitConverter.ToInt32 (list' pos);  		pos += pos_buf;  		int loop = control & 0xF;  		loop++;  		for (; loop != 0; loop--' pos += 2' pos_buf += 2) {  			short value = BitConverter.ToInt16 (buffer' pos);  			Array.Copy (BitConverter.GetBytes (value)' 0' buffer' pos_buf' 2);  		}  	}  }  
Magic Number,HETALIA.Encryption,Image,D:\newReposJune17\pleonex_tinke\Plugins\HETALIA\HETALIA\Encryption\Image.cs,Decrypt,The following statement contains a magic number: while (pos_buf < dec_size) {  	// Read encryption control code  	int control = data [pos_control++];  	// Check type of encryption  	if (control < 0x10)// Copy X bytes  	 {  		int loop = control + 1;  		for (; loop != 0; loop--' pos_enc += 2' pos_buf += 2) {  			short value = BitConverter.ToInt16 (data' pos_enc);  			Array.Copy (BitConverter.GetBytes (value)' 0' buffer' pos_buf' 2);  		}  	} else if (control < 0xC0) {  		int pos = -1 - control + 0x10;  		pos <<= 1;  		// Read past value  		short value = BitConverter.ToInt16 (data' pos_enc + pos);  		Array.Copy (BitConverter.GetBytes (value)' 0' buffer' pos_buf' 2);  		pos_buf += 2;  	} else {  		control -= 0xC0;  		int pos = control >> 4;  		pos <<= 2;  		pos = BitConverter.ToInt32 (list' pos);  		pos += pos_buf;  		int loop = control & 0xF;  		loop++;  		for (; loop != 0; loop--' pos += 2' pos_buf += 2) {  			short value = BitConverter.ToInt16 (buffer' pos);  			Array.Copy (BitConverter.GetBytes (value)' 0' buffer' pos_buf' 2);  		}  	}  }  
Magic Number,HETALIA.Encryption,Image,D:\newReposJune17\pleonex_tinke\Plugins\HETALIA\HETALIA\Encryption\Image.cs,Decrypt,The following statement contains a magic number: while (pos_buf < dec_size) {  	// Read encryption control code  	int control = data [pos_control++];  	// Check type of encryption  	if (control < 0x10)// Copy X bytes  	 {  		int loop = control + 1;  		for (; loop != 0; loop--' pos_enc += 2' pos_buf += 2) {  			short value = BitConverter.ToInt16 (data' pos_enc);  			Array.Copy (BitConverter.GetBytes (value)' 0' buffer' pos_buf' 2);  		}  	} else if (control < 0xC0) {  		int pos = -1 - control + 0x10;  		pos <<= 1;  		// Read past value  		short value = BitConverter.ToInt16 (data' pos_enc + pos);  		Array.Copy (BitConverter.GetBytes (value)' 0' buffer' pos_buf' 2);  		pos_buf += 2;  	} else {  		control -= 0xC0;  		int pos = control >> 4;  		pos <<= 2;  		pos = BitConverter.ToInt32 (list' pos);  		pos += pos_buf;  		int loop = control & 0xF;  		loop++;  		for (; loop != 0; loop--' pos += 2' pos_buf += 2) {  			short value = BitConverter.ToInt16 (buffer' pos);  			Array.Copy (BitConverter.GetBytes (value)' 0' buffer' pos_buf' 2);  		}  	}  }  
Magic Number,HETALIA.Encryption,Image,D:\newReposJune17\pleonex_tinke\Plugins\HETALIA\HETALIA\Encryption\Image.cs,Decrypt,The following statement contains a magic number: while (pos_buf < dec_size) {  	// Read encryption control code  	int control = data [pos_control++];  	// Check type of encryption  	if (control < 0x10)// Copy X bytes  	 {  		int loop = control + 1;  		for (; loop != 0; loop--' pos_enc += 2' pos_buf += 2) {  			short value = BitConverter.ToInt16 (data' pos_enc);  			Array.Copy (BitConverter.GetBytes (value)' 0' buffer' pos_buf' 2);  		}  	} else if (control < 0xC0) {  		int pos = -1 - control + 0x10;  		pos <<= 1;  		// Read past value  		short value = BitConverter.ToInt16 (data' pos_enc + pos);  		Array.Copy (BitConverter.GetBytes (value)' 0' buffer' pos_buf' 2);  		pos_buf += 2;  	} else {  		control -= 0xC0;  		int pos = control >> 4;  		pos <<= 2;  		pos = BitConverter.ToInt32 (list' pos);  		pos += pos_buf;  		int loop = control & 0xF;  		loop++;  		for (; loop != 0; loop--' pos += 2' pos_buf += 2) {  			short value = BitConverter.ToInt16 (buffer' pos);  			Array.Copy (BitConverter.GetBytes (value)' 0' buffer' pos_buf' 2);  		}  	}  }  
Magic Number,HETALIA.Encryption,Image,D:\newReposJune17\pleonex_tinke\Plugins\HETALIA\HETALIA\Encryption\Image.cs,Decrypt,The following statement contains a magic number: while (pos_buf < dec_size) {  	// Read encryption control code  	int control = data [pos_control++];  	// Check type of encryption  	if (control < 0x10)// Copy X bytes  	 {  		int loop = control + 1;  		for (; loop != 0; loop--' pos_enc += 2' pos_buf += 2) {  			short value = BitConverter.ToInt16 (data' pos_enc);  			Array.Copy (BitConverter.GetBytes (value)' 0' buffer' pos_buf' 2);  		}  	} else if (control < 0xC0) {  		int pos = -1 - control + 0x10;  		pos <<= 1;  		// Read past value  		short value = BitConverter.ToInt16 (data' pos_enc + pos);  		Array.Copy (BitConverter.GetBytes (value)' 0' buffer' pos_buf' 2);  		pos_buf += 2;  	} else {  		control -= 0xC0;  		int pos = control >> 4;  		pos <<= 2;  		pos = BitConverter.ToInt32 (list' pos);  		pos += pos_buf;  		int loop = control & 0xF;  		loop++;  		for (; loop != 0; loop--' pos += 2' pos_buf += 2) {  			short value = BitConverter.ToInt16 (buffer' pos);  			Array.Copy (BitConverter.GetBytes (value)' 0' buffer' pos_buf' 2);  		}  	}  }  
Magic Number,HETALIA.Encryption,Image,D:\newReposJune17\pleonex_tinke\Plugins\HETALIA\HETALIA\Encryption\Image.cs,Decrypt,The following statement contains a magic number: while (pos_buf < dec_size) {  	// Read encryption control code  	int control = data [pos_control++];  	// Check type of encryption  	if (control < 0x10)// Copy X bytes  	 {  		int loop = control + 1;  		for (; loop != 0; loop--' pos_enc += 2' pos_buf += 2) {  			short value = BitConverter.ToInt16 (data' pos_enc);  			Array.Copy (BitConverter.GetBytes (value)' 0' buffer' pos_buf' 2);  		}  	} else if (control < 0xC0) {  		int pos = -1 - control + 0x10;  		pos <<= 1;  		// Read past value  		short value = BitConverter.ToInt16 (data' pos_enc + pos);  		Array.Copy (BitConverter.GetBytes (value)' 0' buffer' pos_buf' 2);  		pos_buf += 2;  	} else {  		control -= 0xC0;  		int pos = control >> 4;  		pos <<= 2;  		pos = BitConverter.ToInt32 (list' pos);  		pos += pos_buf;  		int loop = control & 0xF;  		loop++;  		for (; loop != 0; loop--' pos += 2' pos_buf += 2) {  			short value = BitConverter.ToInt16 (buffer' pos);  			Array.Copy (BitConverter.GetBytes (value)' 0' buffer' pos_buf' 2);  		}  	}  }  
Magic Number,HETALIA.Encryption,Image,D:\newReposJune17\pleonex_tinke\Plugins\HETALIA\HETALIA\Encryption\Image.cs,Decrypt,The following statement contains a magic number: while (pos_buf < dec_size) {  	// Read encryption control code  	int control = data [pos_control++];  	// Check type of encryption  	if (control < 0x10)// Copy X bytes  	 {  		int loop = control + 1;  		for (; loop != 0; loop--' pos_enc += 2' pos_buf += 2) {  			short value = BitConverter.ToInt16 (data' pos_enc);  			Array.Copy (BitConverter.GetBytes (value)' 0' buffer' pos_buf' 2);  		}  	} else if (control < 0xC0) {  		int pos = -1 - control + 0x10;  		pos <<= 1;  		// Read past value  		short value = BitConverter.ToInt16 (data' pos_enc + pos);  		Array.Copy (BitConverter.GetBytes (value)' 0' buffer' pos_buf' 2);  		pos_buf += 2;  	} else {  		control -= 0xC0;  		int pos = control >> 4;  		pos <<= 2;  		pos = BitConverter.ToInt32 (list' pos);  		pos += pos_buf;  		int loop = control & 0xF;  		loop++;  		for (; loop != 0; loop--' pos += 2' pos_buf += 2) {  			short value = BitConverter.ToInt16 (buffer' pos);  			Array.Copy (BitConverter.GetBytes (value)' 0' buffer' pos_buf' 2);  		}  	}  }  
Magic Number,HETALIA.Encryption,Image,D:\newReposJune17\pleonex_tinke\Plugins\HETALIA\HETALIA\Encryption\Image.cs,Decrypt,The following statement contains a magic number: while (pos_buf < dec_size) {  	// Read encryption control code  	int control = data [pos_control++];  	// Check type of encryption  	if (control < 0x10)// Copy X bytes  	 {  		int loop = control + 1;  		for (; loop != 0; loop--' pos_enc += 2' pos_buf += 2) {  			short value = BitConverter.ToInt16 (data' pos_enc);  			Array.Copy (BitConverter.GetBytes (value)' 0' buffer' pos_buf' 2);  		}  	} else if (control < 0xC0) {  		int pos = -1 - control + 0x10;  		pos <<= 1;  		// Read past value  		short value = BitConverter.ToInt16 (data' pos_enc + pos);  		Array.Copy (BitConverter.GetBytes (value)' 0' buffer' pos_buf' 2);  		pos_buf += 2;  	} else {  		control -= 0xC0;  		int pos = control >> 4;  		pos <<= 2;  		pos = BitConverter.ToInt32 (list' pos);  		pos += pos_buf;  		int loop = control & 0xF;  		loop++;  		for (; loop != 0; loop--' pos += 2' pos_buf += 2) {  			short value = BitConverter.ToInt16 (buffer' pos);  			Array.Copy (BitConverter.GetBytes (value)' 0' buffer' pos_buf' 2);  		}  	}  }  
Magic Number,HETALIA.Encryption,Image,D:\newReposJune17\pleonex_tinke\Plugins\HETALIA\HETALIA\Encryption\Image.cs,Decrypt,The following statement contains a magic number: if (control < 0x10)// Copy X bytes   {  	int loop = control + 1;  	for (; loop != 0; loop--' pos_enc += 2' pos_buf += 2) {  		short value = BitConverter.ToInt16 (data' pos_enc);  		Array.Copy (BitConverter.GetBytes (value)' 0' buffer' pos_buf' 2);  	}  } else if (control < 0xC0) {  	int pos = -1 - control + 0x10;  	pos <<= 1;  	// Read past value  	short value = BitConverter.ToInt16 (data' pos_enc + pos);  	Array.Copy (BitConverter.GetBytes (value)' 0' buffer' pos_buf' 2);  	pos_buf += 2;  } else {  	control -= 0xC0;  	int pos = control >> 4;  	pos <<= 2;  	pos = BitConverter.ToInt32 (list' pos);  	pos += pos_buf;  	int loop = control & 0xF;  	loop++;  	for (; loop != 0; loop--' pos += 2' pos_buf += 2) {  		short value = BitConverter.ToInt16 (buffer' pos);  		Array.Copy (BitConverter.GetBytes (value)' 0' buffer' pos_buf' 2);  	}  }  
Magic Number,HETALIA.Encryption,Image,D:\newReposJune17\pleonex_tinke\Plugins\HETALIA\HETALIA\Encryption\Image.cs,Decrypt,The following statement contains a magic number: if (control < 0x10)// Copy X bytes   {  	int loop = control + 1;  	for (; loop != 0; loop--' pos_enc += 2' pos_buf += 2) {  		short value = BitConverter.ToInt16 (data' pos_enc);  		Array.Copy (BitConverter.GetBytes (value)' 0' buffer' pos_buf' 2);  	}  } else if (control < 0xC0) {  	int pos = -1 - control + 0x10;  	pos <<= 1;  	// Read past value  	short value = BitConverter.ToInt16 (data' pos_enc + pos);  	Array.Copy (BitConverter.GetBytes (value)' 0' buffer' pos_buf' 2);  	pos_buf += 2;  } else {  	control -= 0xC0;  	int pos = control >> 4;  	pos <<= 2;  	pos = BitConverter.ToInt32 (list' pos);  	pos += pos_buf;  	int loop = control & 0xF;  	loop++;  	for (; loop != 0; loop--' pos += 2' pos_buf += 2) {  		short value = BitConverter.ToInt16 (buffer' pos);  		Array.Copy (BitConverter.GetBytes (value)' 0' buffer' pos_buf' 2);  	}  }  
Magic Number,HETALIA.Encryption,Image,D:\newReposJune17\pleonex_tinke\Plugins\HETALIA\HETALIA\Encryption\Image.cs,Decrypt,The following statement contains a magic number: if (control < 0x10)// Copy X bytes   {  	int loop = control + 1;  	for (; loop != 0; loop--' pos_enc += 2' pos_buf += 2) {  		short value = BitConverter.ToInt16 (data' pos_enc);  		Array.Copy (BitConverter.GetBytes (value)' 0' buffer' pos_buf' 2);  	}  } else if (control < 0xC0) {  	int pos = -1 - control + 0x10;  	pos <<= 1;  	// Read past value  	short value = BitConverter.ToInt16 (data' pos_enc + pos);  	Array.Copy (BitConverter.GetBytes (value)' 0' buffer' pos_buf' 2);  	pos_buf += 2;  } else {  	control -= 0xC0;  	int pos = control >> 4;  	pos <<= 2;  	pos = BitConverter.ToInt32 (list' pos);  	pos += pos_buf;  	int loop = control & 0xF;  	loop++;  	for (; loop != 0; loop--' pos += 2' pos_buf += 2) {  		short value = BitConverter.ToInt16 (buffer' pos);  		Array.Copy (BitConverter.GetBytes (value)' 0' buffer' pos_buf' 2);  	}  }  
Magic Number,HETALIA.Encryption,Image,D:\newReposJune17\pleonex_tinke\Plugins\HETALIA\HETALIA\Encryption\Image.cs,Decrypt,The following statement contains a magic number: if (control < 0x10)// Copy X bytes   {  	int loop = control + 1;  	for (; loop != 0; loop--' pos_enc += 2' pos_buf += 2) {  		short value = BitConverter.ToInt16 (data' pos_enc);  		Array.Copy (BitConverter.GetBytes (value)' 0' buffer' pos_buf' 2);  	}  } else if (control < 0xC0) {  	int pos = -1 - control + 0x10;  	pos <<= 1;  	// Read past value  	short value = BitConverter.ToInt16 (data' pos_enc + pos);  	Array.Copy (BitConverter.GetBytes (value)' 0' buffer' pos_buf' 2);  	pos_buf += 2;  } else {  	control -= 0xC0;  	int pos = control >> 4;  	pos <<= 2;  	pos = BitConverter.ToInt32 (list' pos);  	pos += pos_buf;  	int loop = control & 0xF;  	loop++;  	for (; loop != 0; loop--' pos += 2' pos_buf += 2) {  		short value = BitConverter.ToInt16 (buffer' pos);  		Array.Copy (BitConverter.GetBytes (value)' 0' buffer' pos_buf' 2);  	}  }  
Magic Number,HETALIA.Encryption,Image,D:\newReposJune17\pleonex_tinke\Plugins\HETALIA\HETALIA\Encryption\Image.cs,Decrypt,The following statement contains a magic number: if (control < 0x10)// Copy X bytes   {  	int loop = control + 1;  	for (; loop != 0; loop--' pos_enc += 2' pos_buf += 2) {  		short value = BitConverter.ToInt16 (data' pos_enc);  		Array.Copy (BitConverter.GetBytes (value)' 0' buffer' pos_buf' 2);  	}  } else if (control < 0xC0) {  	int pos = -1 - control + 0x10;  	pos <<= 1;  	// Read past value  	short value = BitConverter.ToInt16 (data' pos_enc + pos);  	Array.Copy (BitConverter.GetBytes (value)' 0' buffer' pos_buf' 2);  	pos_buf += 2;  } else {  	control -= 0xC0;  	int pos = control >> 4;  	pos <<= 2;  	pos = BitConverter.ToInt32 (list' pos);  	pos += pos_buf;  	int loop = control & 0xF;  	loop++;  	for (; loop != 0; loop--' pos += 2' pos_buf += 2) {  		short value = BitConverter.ToInt16 (buffer' pos);  		Array.Copy (BitConverter.GetBytes (value)' 0' buffer' pos_buf' 2);  	}  }  
Magic Number,HETALIA.Encryption,Image,D:\newReposJune17\pleonex_tinke\Plugins\HETALIA\HETALIA\Encryption\Image.cs,Decrypt,The following statement contains a magic number: if (control < 0x10)// Copy X bytes   {  	int loop = control + 1;  	for (; loop != 0; loop--' pos_enc += 2' pos_buf += 2) {  		short value = BitConverter.ToInt16 (data' pos_enc);  		Array.Copy (BitConverter.GetBytes (value)' 0' buffer' pos_buf' 2);  	}  } else if (control < 0xC0) {  	int pos = -1 - control + 0x10;  	pos <<= 1;  	// Read past value  	short value = BitConverter.ToInt16 (data' pos_enc + pos);  	Array.Copy (BitConverter.GetBytes (value)' 0' buffer' pos_buf' 2);  	pos_buf += 2;  } else {  	control -= 0xC0;  	int pos = control >> 4;  	pos <<= 2;  	pos = BitConverter.ToInt32 (list' pos);  	pos += pos_buf;  	int loop = control & 0xF;  	loop++;  	for (; loop != 0; loop--' pos += 2' pos_buf += 2) {  		short value = BitConverter.ToInt16 (buffer' pos);  		Array.Copy (BitConverter.GetBytes (value)' 0' buffer' pos_buf' 2);  	}  }  
Magic Number,HETALIA.Encryption,Image,D:\newReposJune17\pleonex_tinke\Plugins\HETALIA\HETALIA\Encryption\Image.cs,Decrypt,The following statement contains a magic number: if (control < 0x10)// Copy X bytes   {  	int loop = control + 1;  	for (; loop != 0; loop--' pos_enc += 2' pos_buf += 2) {  		short value = BitConverter.ToInt16 (data' pos_enc);  		Array.Copy (BitConverter.GetBytes (value)' 0' buffer' pos_buf' 2);  	}  } else if (control < 0xC0) {  	int pos = -1 - control + 0x10;  	pos <<= 1;  	// Read past value  	short value = BitConverter.ToInt16 (data' pos_enc + pos);  	Array.Copy (BitConverter.GetBytes (value)' 0' buffer' pos_buf' 2);  	pos_buf += 2;  } else {  	control -= 0xC0;  	int pos = control >> 4;  	pos <<= 2;  	pos = BitConverter.ToInt32 (list' pos);  	pos += pos_buf;  	int loop = control & 0xF;  	loop++;  	for (; loop != 0; loop--' pos += 2' pos_buf += 2) {  		short value = BitConverter.ToInt16 (buffer' pos);  		Array.Copy (BitConverter.GetBytes (value)' 0' buffer' pos_buf' 2);  	}  }  
Magic Number,HETALIA.Encryption,Image,D:\newReposJune17\pleonex_tinke\Plugins\HETALIA\HETALIA\Encryption\Image.cs,Decrypt,The following statement contains a magic number: if (control < 0x10)// Copy X bytes   {  	int loop = control + 1;  	for (; loop != 0; loop--' pos_enc += 2' pos_buf += 2) {  		short value = BitConverter.ToInt16 (data' pos_enc);  		Array.Copy (BitConverter.GetBytes (value)' 0' buffer' pos_buf' 2);  	}  } else if (control < 0xC0) {  	int pos = -1 - control + 0x10;  	pos <<= 1;  	// Read past value  	short value = BitConverter.ToInt16 (data' pos_enc + pos);  	Array.Copy (BitConverter.GetBytes (value)' 0' buffer' pos_buf' 2);  	pos_buf += 2;  } else {  	control -= 0xC0;  	int pos = control >> 4;  	pos <<= 2;  	pos = BitConverter.ToInt32 (list' pos);  	pos += pos_buf;  	int loop = control & 0xF;  	loop++;  	for (; loop != 0; loop--' pos += 2' pos_buf += 2) {  		short value = BitConverter.ToInt16 (buffer' pos);  		Array.Copy (BitConverter.GetBytes (value)' 0' buffer' pos_buf' 2);  	}  }  
Magic Number,HETALIA.Encryption,Image,D:\newReposJune17\pleonex_tinke\Plugins\HETALIA\HETALIA\Encryption\Image.cs,Decrypt,The following statement contains a magic number: if (control < 0x10)// Copy X bytes   {  	int loop = control + 1;  	for (; loop != 0; loop--' pos_enc += 2' pos_buf += 2) {  		short value = BitConverter.ToInt16 (data' pos_enc);  		Array.Copy (BitConverter.GetBytes (value)' 0' buffer' pos_buf' 2);  	}  } else if (control < 0xC0) {  	int pos = -1 - control + 0x10;  	pos <<= 1;  	// Read past value  	short value = BitConverter.ToInt16 (data' pos_enc + pos);  	Array.Copy (BitConverter.GetBytes (value)' 0' buffer' pos_buf' 2);  	pos_buf += 2;  } else {  	control -= 0xC0;  	int pos = control >> 4;  	pos <<= 2;  	pos = BitConverter.ToInt32 (list' pos);  	pos += pos_buf;  	int loop = control & 0xF;  	loop++;  	for (; loop != 0; loop--' pos += 2' pos_buf += 2) {  		short value = BitConverter.ToInt16 (buffer' pos);  		Array.Copy (BitConverter.GetBytes (value)' 0' buffer' pos_buf' 2);  	}  }  
Magic Number,HETALIA.Encryption,Image,D:\newReposJune17\pleonex_tinke\Plugins\HETALIA\HETALIA\Encryption\Image.cs,Decrypt,The following statement contains a magic number: if (control < 0x10)// Copy X bytes   {  	int loop = control + 1;  	for (; loop != 0; loop--' pos_enc += 2' pos_buf += 2) {  		short value = BitConverter.ToInt16 (data' pos_enc);  		Array.Copy (BitConverter.GetBytes (value)' 0' buffer' pos_buf' 2);  	}  } else if (control < 0xC0) {  	int pos = -1 - control + 0x10;  	pos <<= 1;  	// Read past value  	short value = BitConverter.ToInt16 (data' pos_enc + pos);  	Array.Copy (BitConverter.GetBytes (value)' 0' buffer' pos_buf' 2);  	pos_buf += 2;  } else {  	control -= 0xC0;  	int pos = control >> 4;  	pos <<= 2;  	pos = BitConverter.ToInt32 (list' pos);  	pos += pos_buf;  	int loop = control & 0xF;  	loop++;  	for (; loop != 0; loop--' pos += 2' pos_buf += 2) {  		short value = BitConverter.ToInt16 (buffer' pos);  		Array.Copy (BitConverter.GetBytes (value)' 0' buffer' pos_buf' 2);  	}  }  
Magic Number,HETALIA.Encryption,Image,D:\newReposJune17\pleonex_tinke\Plugins\HETALIA\HETALIA\Encryption\Image.cs,Decrypt,The following statement contains a magic number: for (; loop != 0; loop--' pos_enc += 2' pos_buf += 2) {  	short value = BitConverter.ToInt16 (data' pos_enc);  	Array.Copy (BitConverter.GetBytes (value)' 0' buffer' pos_buf' 2);  }  
Magic Number,HETALIA.Encryption,Image,D:\newReposJune17\pleonex_tinke\Plugins\HETALIA\HETALIA\Encryption\Image.cs,Decrypt,The following statement contains a magic number: for (; loop != 0; loop--' pos_enc += 2' pos_buf += 2) {  	short value = BitConverter.ToInt16 (data' pos_enc);  	Array.Copy (BitConverter.GetBytes (value)' 0' buffer' pos_buf' 2);  }  
Magic Number,HETALIA.Encryption,Image,D:\newReposJune17\pleonex_tinke\Plugins\HETALIA\HETALIA\Encryption\Image.cs,Decrypt,The following statement contains a magic number: for (; loop != 0; loop--' pos_enc += 2' pos_buf += 2) {  	short value = BitConverter.ToInt16 (data' pos_enc);  	Array.Copy (BitConverter.GetBytes (value)' 0' buffer' pos_buf' 2);  }  
Magic Number,HETALIA.Encryption,Image,D:\newReposJune17\pleonex_tinke\Plugins\HETALIA\HETALIA\Encryption\Image.cs,Decrypt,The following statement contains a magic number: pos_enc += 2
Magic Number,HETALIA.Encryption,Image,D:\newReposJune17\pleonex_tinke\Plugins\HETALIA\HETALIA\Encryption\Image.cs,Decrypt,The following statement contains a magic number: pos_buf += 2
Magic Number,HETALIA.Encryption,Image,D:\newReposJune17\pleonex_tinke\Plugins\HETALIA\HETALIA\Encryption\Image.cs,Decrypt,The following statement contains a magic number: Array.Copy (BitConverter.GetBytes (value)' 0' buffer' pos_buf' 2);  
Magic Number,HETALIA.Encryption,Image,D:\newReposJune17\pleonex_tinke\Plugins\HETALIA\HETALIA\Encryption\Image.cs,Decrypt,The following statement contains a magic number: if (control < 0xC0) {  	int pos = -1 - control + 0x10;  	pos <<= 1;  	// Read past value  	short value = BitConverter.ToInt16 (data' pos_enc + pos);  	Array.Copy (BitConverter.GetBytes (value)' 0' buffer' pos_buf' 2);  	pos_buf += 2;  } else {  	control -= 0xC0;  	int pos = control >> 4;  	pos <<= 2;  	pos = BitConverter.ToInt32 (list' pos);  	pos += pos_buf;  	int loop = control & 0xF;  	loop++;  	for (; loop != 0; loop--' pos += 2' pos_buf += 2) {  		short value = BitConverter.ToInt16 (buffer' pos);  		Array.Copy (BitConverter.GetBytes (value)' 0' buffer' pos_buf' 2);  	}  }  
Magic Number,HETALIA.Encryption,Image,D:\newReposJune17\pleonex_tinke\Plugins\HETALIA\HETALIA\Encryption\Image.cs,Decrypt,The following statement contains a magic number: if (control < 0xC0) {  	int pos = -1 - control + 0x10;  	pos <<= 1;  	// Read past value  	short value = BitConverter.ToInt16 (data' pos_enc + pos);  	Array.Copy (BitConverter.GetBytes (value)' 0' buffer' pos_buf' 2);  	pos_buf += 2;  } else {  	control -= 0xC0;  	int pos = control >> 4;  	pos <<= 2;  	pos = BitConverter.ToInt32 (list' pos);  	pos += pos_buf;  	int loop = control & 0xF;  	loop++;  	for (; loop != 0; loop--' pos += 2' pos_buf += 2) {  		short value = BitConverter.ToInt16 (buffer' pos);  		Array.Copy (BitConverter.GetBytes (value)' 0' buffer' pos_buf' 2);  	}  }  
Magic Number,HETALIA.Encryption,Image,D:\newReposJune17\pleonex_tinke\Plugins\HETALIA\HETALIA\Encryption\Image.cs,Decrypt,The following statement contains a magic number: if (control < 0xC0) {  	int pos = -1 - control + 0x10;  	pos <<= 1;  	// Read past value  	short value = BitConverter.ToInt16 (data' pos_enc + pos);  	Array.Copy (BitConverter.GetBytes (value)' 0' buffer' pos_buf' 2);  	pos_buf += 2;  } else {  	control -= 0xC0;  	int pos = control >> 4;  	pos <<= 2;  	pos = BitConverter.ToInt32 (list' pos);  	pos += pos_buf;  	int loop = control & 0xF;  	loop++;  	for (; loop != 0; loop--' pos += 2' pos_buf += 2) {  		short value = BitConverter.ToInt16 (buffer' pos);  		Array.Copy (BitConverter.GetBytes (value)' 0' buffer' pos_buf' 2);  	}  }  
Magic Number,HETALIA.Encryption,Image,D:\newReposJune17\pleonex_tinke\Plugins\HETALIA\HETALIA\Encryption\Image.cs,Decrypt,The following statement contains a magic number: if (control < 0xC0) {  	int pos = -1 - control + 0x10;  	pos <<= 1;  	// Read past value  	short value = BitConverter.ToInt16 (data' pos_enc + pos);  	Array.Copy (BitConverter.GetBytes (value)' 0' buffer' pos_buf' 2);  	pos_buf += 2;  } else {  	control -= 0xC0;  	int pos = control >> 4;  	pos <<= 2;  	pos = BitConverter.ToInt32 (list' pos);  	pos += pos_buf;  	int loop = control & 0xF;  	loop++;  	for (; loop != 0; loop--' pos += 2' pos_buf += 2) {  		short value = BitConverter.ToInt16 (buffer' pos);  		Array.Copy (BitConverter.GetBytes (value)' 0' buffer' pos_buf' 2);  	}  }  
Magic Number,HETALIA.Encryption,Image,D:\newReposJune17\pleonex_tinke\Plugins\HETALIA\HETALIA\Encryption\Image.cs,Decrypt,The following statement contains a magic number: if (control < 0xC0) {  	int pos = -1 - control + 0x10;  	pos <<= 1;  	// Read past value  	short value = BitConverter.ToInt16 (data' pos_enc + pos);  	Array.Copy (BitConverter.GetBytes (value)' 0' buffer' pos_buf' 2);  	pos_buf += 2;  } else {  	control -= 0xC0;  	int pos = control >> 4;  	pos <<= 2;  	pos = BitConverter.ToInt32 (list' pos);  	pos += pos_buf;  	int loop = control & 0xF;  	loop++;  	for (; loop != 0; loop--' pos += 2' pos_buf += 2) {  		short value = BitConverter.ToInt16 (buffer' pos);  		Array.Copy (BitConverter.GetBytes (value)' 0' buffer' pos_buf' 2);  	}  }  
Magic Number,HETALIA.Encryption,Image,D:\newReposJune17\pleonex_tinke\Plugins\HETALIA\HETALIA\Encryption\Image.cs,Decrypt,The following statement contains a magic number: if (control < 0xC0) {  	int pos = -1 - control + 0x10;  	pos <<= 1;  	// Read past value  	short value = BitConverter.ToInt16 (data' pos_enc + pos);  	Array.Copy (BitConverter.GetBytes (value)' 0' buffer' pos_buf' 2);  	pos_buf += 2;  } else {  	control -= 0xC0;  	int pos = control >> 4;  	pos <<= 2;  	pos = BitConverter.ToInt32 (list' pos);  	pos += pos_buf;  	int loop = control & 0xF;  	loop++;  	for (; loop != 0; loop--' pos += 2' pos_buf += 2) {  		short value = BitConverter.ToInt16 (buffer' pos);  		Array.Copy (BitConverter.GetBytes (value)' 0' buffer' pos_buf' 2);  	}  }  
Magic Number,HETALIA.Encryption,Image,D:\newReposJune17\pleonex_tinke\Plugins\HETALIA\HETALIA\Encryption\Image.cs,Decrypt,The following statement contains a magic number: if (control < 0xC0) {  	int pos = -1 - control + 0x10;  	pos <<= 1;  	// Read past value  	short value = BitConverter.ToInt16 (data' pos_enc + pos);  	Array.Copy (BitConverter.GetBytes (value)' 0' buffer' pos_buf' 2);  	pos_buf += 2;  } else {  	control -= 0xC0;  	int pos = control >> 4;  	pos <<= 2;  	pos = BitConverter.ToInt32 (list' pos);  	pos += pos_buf;  	int loop = control & 0xF;  	loop++;  	for (; loop != 0; loop--' pos += 2' pos_buf += 2) {  		short value = BitConverter.ToInt16 (buffer' pos);  		Array.Copy (BitConverter.GetBytes (value)' 0' buffer' pos_buf' 2);  	}  }  
Magic Number,HETALIA.Encryption,Image,D:\newReposJune17\pleonex_tinke\Plugins\HETALIA\HETALIA\Encryption\Image.cs,Decrypt,The following statement contains a magic number: Array.Copy (BitConverter.GetBytes (value)' 0' buffer' pos_buf' 2);  
Magic Number,HETALIA.Encryption,Image,D:\newReposJune17\pleonex_tinke\Plugins\HETALIA\HETALIA\Encryption\Image.cs,Decrypt,The following statement contains a magic number: pos_buf += 2;  
Magic Number,HETALIA.Encryption,Image,D:\newReposJune17\pleonex_tinke\Plugins\HETALIA\HETALIA\Encryption\Image.cs,Decrypt,The following statement contains a magic number: pos <<= 2;  
Magic Number,HETALIA.Encryption,Image,D:\newReposJune17\pleonex_tinke\Plugins\HETALIA\HETALIA\Encryption\Image.cs,Decrypt,The following statement contains a magic number: for (; loop != 0; loop--' pos += 2' pos_buf += 2) {  	short value = BitConverter.ToInt16 (buffer' pos);  	Array.Copy (BitConverter.GetBytes (value)' 0' buffer' pos_buf' 2);  }  
Magic Number,HETALIA.Encryption,Image,D:\newReposJune17\pleonex_tinke\Plugins\HETALIA\HETALIA\Encryption\Image.cs,Decrypt,The following statement contains a magic number: for (; loop != 0; loop--' pos += 2' pos_buf += 2) {  	short value = BitConverter.ToInt16 (buffer' pos);  	Array.Copy (BitConverter.GetBytes (value)' 0' buffer' pos_buf' 2);  }  
Magic Number,HETALIA.Encryption,Image,D:\newReposJune17\pleonex_tinke\Plugins\HETALIA\HETALIA\Encryption\Image.cs,Decrypt,The following statement contains a magic number: for (; loop != 0; loop--' pos += 2' pos_buf += 2) {  	short value = BitConverter.ToInt16 (buffer' pos);  	Array.Copy (BitConverter.GetBytes (value)' 0' buffer' pos_buf' 2);  }  
Magic Number,HETALIA.Encryption,Image,D:\newReposJune17\pleonex_tinke\Plugins\HETALIA\HETALIA\Encryption\Image.cs,Decrypt,The following statement contains a magic number: pos += 2
Magic Number,HETALIA.Encryption,Image,D:\newReposJune17\pleonex_tinke\Plugins\HETALIA\HETALIA\Encryption\Image.cs,Decrypt,The following statement contains a magic number: pos_buf += 2
Magic Number,HETALIA.Encryption,Image,D:\newReposJune17\pleonex_tinke\Plugins\HETALIA\HETALIA\Encryption\Image.cs,Decrypt,The following statement contains a magic number: Array.Copy (BitConverter.GetBytes (value)' 0' buffer' pos_buf' 2);  
