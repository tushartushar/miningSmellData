Implementation smell,Namespace,Class,File,Method,Description
Long Method,Common,TGA,D:\newReposJune17\pleonex_tinke\Plugins\Common\Common\Imagen\TGA.cs,Leer,The method has 112 lines of code.
Complex Method,Common,TGA,D:\newReposJune17\pleonex_tinke\Plugins\Common\Common\Imagen\TGA.cs,Leer,Cyclomatic complexity of the method is 58
Complex Method,Common,RLE,D:\newReposJune17\pleonex_tinke\Plugins\Common\Common\RLE.cs,Descomprimir_Pixel,Cyclomatic complexity of the method is 12
Complex Method,Common,RLE,D:\newReposJune17\pleonex_tinke\Plugins\Common\Common\RLE.cs,Descomprimir_Pixel,Cyclomatic complexity of the method is 8
Long Parameter List,Common,RLE,D:\newReposJune17\pleonex_tinke\Plugins\Common\Common\RLE.cs,Descomprimir_Pixel,The method has 5 parameters.
Long Statement,Common,BasicControl,D:\newReposJune17\pleonex_tinke\Plugins\Common\Common\Imagen\BasicControl.cs,ReadLanguage,The length of the statement  "		System.Xml.Linq.XElement xml = System.Xml.Linq.XElement.Load (Application.StartupPath + Path.DirectorySeparatorChar + "Plugins" + Path.DirectorySeparatorChar + "CommonLang.xml"); " is 178.
Long Statement,Common,TGA,D:\newReposJune17\pleonex_tinke\Plugins\Common\Common\Imagen\TGA.cs,Leer,The length of the statement  "		tga.imageData.image = RLE.Descomprimir_Pixel (archivo' ref pos' tga.header.image_spec.depth' tga.header.image_spec.width' tga.header.image_spec.height); " is 152.
Long Statement,Common,TGA,D:\newReposJune17\pleonex_tinke\Plugins\Common\Common\Imagen\TGA.cs,Leer,The length of the statement  "				colores [j] = Color.FromArgb (tga.imageData.image [4 * j + 3]' tga.imageData.image [4 * j]' tga.imageData.image [4 * j + 1]' tga.imageData.image [4 * j + 2]); " is 158.
Long Statement,Common,TGA,D:\newReposJune17\pleonex_tinke\Plugins\Common\Common\Imagen\TGA.cs,Leer,The length of the statement  "				colores [j] = Color.FromArgb (255' tga.imageData.image [3 * j]' tga.imageData.image [3 * j + 1]' tga.imageData.image [3 * j + 2]); " is 130.
Long Statement,Common,Main,D:\newReposJune17\pleonex_tinke\Plugins\Common\Common\Main.cs,Get_Format,The length of the statement  "	if (file.name.ToUpper ().EndsWith (".TGA") || file.name.ToUpper ().EndsWith (".GIF") || file.name.ToUpper ().EndsWith (".JPG") || file.name.ToUpper ().EndsWith (".PNG")) " is 169.
Long Statement,Common,iWav,D:\newReposJune17\pleonex_tinke\Plugins\Common\Common\Sonido\iWav.cs,ReadLanguage,The length of the statement  "		System.Xml.Linq.XElement xml = System.Xml.Linq.XElement.Load (Application.StartupPath + Path.DirectorySeparatorChar + "Plugins" + Path.DirectorySeparatorChar + "CommonLang.xml"); " is 178.
Complex Conditional,Common,Main,D:\newReposJune17\pleonex_tinke\Plugins\Common\Common\Main.cs,Get_Format,The conditional expression  "file.name.ToUpper ().EndsWith (".TGA") || file.name.ToUpper ().EndsWith (".GIF") || file.name.ToUpper ().EndsWith (".JPG") || file.name.ToUpper ().EndsWith (".PNG")"  is complex.
Empty Catch Block,Common,Main,D:\newReposJune17\pleonex_tinke\Plugins\Common\Common\Main.cs,Show_Info,The method has an empty catch block.
Magic Number,Common,BasicControl,D:\newReposJune17\pleonex_tinke\Plugins\Common\Common\Imagen\BasicControl.cs,InitializeComponent,The following statement contains a magic number: this.btnSave.Location = new System.Drawing.Point (405' 472);  
Magic Number,Common,BasicControl,D:\newReposJune17\pleonex_tinke\Plugins\Common\Common\Imagen\BasicControl.cs,InitializeComponent,The following statement contains a magic number: this.btnSave.Location = new System.Drawing.Point (405' 472);  
Magic Number,Common,BasicControl,D:\newReposJune17\pleonex_tinke\Plugins\Common\Common\Imagen\BasicControl.cs,InitializeComponent,The following statement contains a magic number: this.btnSave.Size = new System.Drawing.Size (102' 35);  
Magic Number,Common,BasicControl,D:\newReposJune17\pleonex_tinke\Plugins\Common\Common\Imagen\BasicControl.cs,InitializeComponent,The following statement contains a magic number: this.btnSave.Size = new System.Drawing.Size (102' 35);  
Magic Number,Common,BasicControl,D:\newReposJune17\pleonex_tinke\Plugins\Common\Common\Imagen\BasicControl.cs,InitializeComponent,The following statement contains a magic number: this.picBox.Location = new System.Drawing.Point (4' 4);  
Magic Number,Common,BasicControl,D:\newReposJune17\pleonex_tinke\Plugins\Common\Common\Imagen\BasicControl.cs,InitializeComponent,The following statement contains a magic number: this.picBox.Location = new System.Drawing.Point (4' 4);  
Magic Number,Common,BasicControl,D:\newReposJune17\pleonex_tinke\Plugins\Common\Common\Imagen\BasicControl.cs,InitializeComponent,The following statement contains a magic number: this.picBox.Size = new System.Drawing.Size (256' 192);  
Magic Number,Common,BasicControl,D:\newReposJune17\pleonex_tinke\Plugins\Common\Common\Imagen\BasicControl.cs,InitializeComponent,The following statement contains a magic number: this.picBox.Size = new System.Drawing.Size (256' 192);  
Magic Number,Common,BasicControl,D:\newReposJune17\pleonex_tinke\Plugins\Common\Common\Imagen\BasicControl.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size (510' 510);  
Magic Number,Common,BasicControl,D:\newReposJune17\pleonex_tinke\Plugins\Common\Common\Imagen\BasicControl.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size (510' 510);  
Magic Number,Common,TGA,D:\newReposJune17\pleonex_tinke\Plugins\Common\Common\Imagen\TGA.cs,Leer,The following statement contains a magic number: if (tga.header.colorMap) {  	tga.imageData.colorMap = new Color[tga.header.colorMap_spec.length / (tga.header.colorMap_spec.entry_size / 8)];  	switch (tga.header.colorMap_spec.entry_size) {  	case 24:  		for (int c = 0; c < tga.imageData.colorMap.Length; c++) {  			Color newColor = Color.FromArgb (br.ReadByte ()' br.ReadByte ()' br.ReadByte ());  			tga.imageData.colorMap [c] = newColor;  		}  		br.ReadBytes (tga.header.colorMap_spec.length - tga.imageData.colorMap.Length * 3);  		break;  	}  }  
Magic Number,Common,TGA,D:\newReposJune17\pleonex_tinke\Plugins\Common\Common\Imagen\TGA.cs,Leer,The following statement contains a magic number: if (tga.header.colorMap) {  	tga.imageData.colorMap = new Color[tga.header.colorMap_spec.length / (tga.header.colorMap_spec.entry_size / 8)];  	switch (tga.header.colorMap_spec.entry_size) {  	case 24:  		for (int c = 0; c < tga.imageData.colorMap.Length; c++) {  			Color newColor = Color.FromArgb (br.ReadByte ()' br.ReadByte ()' br.ReadByte ());  			tga.imageData.colorMap [c] = newColor;  		}  		br.ReadBytes (tga.header.colorMap_spec.length - tga.imageData.colorMap.Length * 3);  		break;  	}  }  
Magic Number,Common,TGA,D:\newReposJune17\pleonex_tinke\Plugins\Common\Common\Imagen\TGA.cs,Leer,The following statement contains a magic number: if (tga.header.colorMap) {  	tga.imageData.colorMap = new Color[tga.header.colorMap_spec.length / (tga.header.colorMap_spec.entry_size / 8)];  	switch (tga.header.colorMap_spec.entry_size) {  	case 24:  		for (int c = 0; c < tga.imageData.colorMap.Length; c++) {  			Color newColor = Color.FromArgb (br.ReadByte ()' br.ReadByte ()' br.ReadByte ());  			tga.imageData.colorMap [c] = newColor;  		}  		br.ReadBytes (tga.header.colorMap_spec.length - tga.imageData.colorMap.Length * 3);  		break;  	}  }  
Magic Number,Common,TGA,D:\newReposJune17\pleonex_tinke\Plugins\Common\Common\Imagen\TGA.cs,Leer,The following statement contains a magic number: tga.imageData.colorMap = new Color[tga.header.colorMap_spec.length / (tga.header.colorMap_spec.entry_size / 8)];  
Magic Number,Common,TGA,D:\newReposJune17\pleonex_tinke\Plugins\Common\Common\Imagen\TGA.cs,Leer,The following statement contains a magic number: switch (tga.header.colorMap_spec.entry_size) {  case 24:  	for (int c = 0; c < tga.imageData.colorMap.Length; c++) {  		Color newColor = Color.FromArgb (br.ReadByte ()' br.ReadByte ()' br.ReadByte ());  		tga.imageData.colorMap [c] = newColor;  	}  	br.ReadBytes (tga.header.colorMap_spec.length - tga.imageData.colorMap.Length * 3);  	break;  }  
Magic Number,Common,TGA,D:\newReposJune17\pleonex_tinke\Plugins\Common\Common\Imagen\TGA.cs,Leer,The following statement contains a magic number: switch (tga.header.colorMap_spec.entry_size) {  case 24:  	for (int c = 0; c < tga.imageData.colorMap.Length; c++) {  		Color newColor = Color.FromArgb (br.ReadByte ()' br.ReadByte ()' br.ReadByte ());  		tga.imageData.colorMap [c] = newColor;  	}  	br.ReadBytes (tga.header.colorMap_spec.length - tga.imageData.colorMap.Length * 3);  	break;  }  
Magic Number,Common,TGA,D:\newReposJune17\pleonex_tinke\Plugins\Common\Common\Imagen\TGA.cs,Leer,The following statement contains a magic number: br.ReadBytes (tga.header.colorMap_spec.length - tga.imageData.colorMap.Length * 3);  
Magic Number,Common,TGA,D:\newReposJune17\pleonex_tinke\Plugins\Common\Common\Imagen\TGA.cs,Leer,The following statement contains a magic number: switch (tga.header.image_type) {  case TGA.ImageType.RLE_TrueColor:  	// Primero descomprimimos  	long pos = br.BaseStream.Position;  	br.Close ();  	tga.imageData.image = RLE.Descomprimir_Pixel (archivo' ref pos' tga.header.image_spec.depth' tga.header.image_spec.width' tga.header.image_spec.height);  	br = new BinaryReader (File.OpenRead (archivo));  	br.BaseStream.Position = pos;  	// Luego convertimos los colores  	for (int j = 0; j < colores.Length; j++) {  		if (tga.header.image_spec.depth == 0x20)  			colores [j] = Color.FromArgb (tga.imageData.image [4 * j + 3]' tga.imageData.image [4 * j]' tga.imageData.image [4 * j + 1]' tga.imageData.image [4 * j + 2]);  		else  			colores [j] = Color.FromArgb (255' tga.imageData.image [3 * j]' tga.imageData.image [3 * j + 1]' tga.imageData.image [3 * j + 2]);  	}  	// Set pixels colors  	for (int y = tga.header.image_spec.height - 1; y > 0; y--) {  		for (int x = 0; x < tga.header.image_spec.width; x++) {  			imagen.SetPixel (x' y' colores [i]);  			i++;  		}  	}  	break;  case TGA.ImageType.Uncompressed_TrueColor:  	colores = Actions.BGR555ToColor (br.ReadBytes (tga.header.image_spec.height * tga.header.image_spec.width * 2));  	for (int y = tga.header.image_spec.height - 1; y > 0; y--) {  		for (int x = 0; x < tga.header.image_spec.width; x++) {  			imagen.SetPixel (x' y' colores [i]);  			i++;  		}  	}  	break;  case TGA.ImageType.Uncompressed_ColorMapped:  	for (int y = 0; y < tga.header.image_spec.height; y++) {  		for (int x = 0; x < tga.header.image_spec.width; x++) {  			imagen.SetPixel (x' y' tga.imageData.colorMap [br.ReadByte ()]);  			i++;  		}  	}  	break;  case TGA.ImageType.Uncompressed_BlackWhite:  case TGA.ImageType.RLE_BlackWhite:  case TGA.ImageType.RLE_ColorMapped:  case TGA.ImageType.noSopported:  default:  	throw new Exception ("Invalid value for ImageType");  }  
Magic Number,Common,TGA,D:\newReposJune17\pleonex_tinke\Plugins\Common\Common\Imagen\TGA.cs,Leer,The following statement contains a magic number: switch (tga.header.image_type) {  case TGA.ImageType.RLE_TrueColor:  	// Primero descomprimimos  	long pos = br.BaseStream.Position;  	br.Close ();  	tga.imageData.image = RLE.Descomprimir_Pixel (archivo' ref pos' tga.header.image_spec.depth' tga.header.image_spec.width' tga.header.image_spec.height);  	br = new BinaryReader (File.OpenRead (archivo));  	br.BaseStream.Position = pos;  	// Luego convertimos los colores  	for (int j = 0; j < colores.Length; j++) {  		if (tga.header.image_spec.depth == 0x20)  			colores [j] = Color.FromArgb (tga.imageData.image [4 * j + 3]' tga.imageData.image [4 * j]' tga.imageData.image [4 * j + 1]' tga.imageData.image [4 * j + 2]);  		else  			colores [j] = Color.FromArgb (255' tga.imageData.image [3 * j]' tga.imageData.image [3 * j + 1]' tga.imageData.image [3 * j + 2]);  	}  	// Set pixels colors  	for (int y = tga.header.image_spec.height - 1; y > 0; y--) {  		for (int x = 0; x < tga.header.image_spec.width; x++) {  			imagen.SetPixel (x' y' colores [i]);  			i++;  		}  	}  	break;  case TGA.ImageType.Uncompressed_TrueColor:  	colores = Actions.BGR555ToColor (br.ReadBytes (tga.header.image_spec.height * tga.header.image_spec.width * 2));  	for (int y = tga.header.image_spec.height - 1; y > 0; y--) {  		for (int x = 0; x < tga.header.image_spec.width; x++) {  			imagen.SetPixel (x' y' colores [i]);  			i++;  		}  	}  	break;  case TGA.ImageType.Uncompressed_ColorMapped:  	for (int y = 0; y < tga.header.image_spec.height; y++) {  		for (int x = 0; x < tga.header.image_spec.width; x++) {  			imagen.SetPixel (x' y' tga.imageData.colorMap [br.ReadByte ()]);  			i++;  		}  	}  	break;  case TGA.ImageType.Uncompressed_BlackWhite:  case TGA.ImageType.RLE_BlackWhite:  case TGA.ImageType.RLE_ColorMapped:  case TGA.ImageType.noSopported:  default:  	throw new Exception ("Invalid value for ImageType");  }  
Magic Number,Common,TGA,D:\newReposJune17\pleonex_tinke\Plugins\Common\Common\Imagen\TGA.cs,Leer,The following statement contains a magic number: switch (tga.header.image_type) {  case TGA.ImageType.RLE_TrueColor:  	// Primero descomprimimos  	long pos = br.BaseStream.Position;  	br.Close ();  	tga.imageData.image = RLE.Descomprimir_Pixel (archivo' ref pos' tga.header.image_spec.depth' tga.header.image_spec.width' tga.header.image_spec.height);  	br = new BinaryReader (File.OpenRead (archivo));  	br.BaseStream.Position = pos;  	// Luego convertimos los colores  	for (int j = 0; j < colores.Length; j++) {  		if (tga.header.image_spec.depth == 0x20)  			colores [j] = Color.FromArgb (tga.imageData.image [4 * j + 3]' tga.imageData.image [4 * j]' tga.imageData.image [4 * j + 1]' tga.imageData.image [4 * j + 2]);  		else  			colores [j] = Color.FromArgb (255' tga.imageData.image [3 * j]' tga.imageData.image [3 * j + 1]' tga.imageData.image [3 * j + 2]);  	}  	// Set pixels colors  	for (int y = tga.header.image_spec.height - 1; y > 0; y--) {  		for (int x = 0; x < tga.header.image_spec.width; x++) {  			imagen.SetPixel (x' y' colores [i]);  			i++;  		}  	}  	break;  case TGA.ImageType.Uncompressed_TrueColor:  	colores = Actions.BGR555ToColor (br.ReadBytes (tga.header.image_spec.height * tga.header.image_spec.width * 2));  	for (int y = tga.header.image_spec.height - 1; y > 0; y--) {  		for (int x = 0; x < tga.header.image_spec.width; x++) {  			imagen.SetPixel (x' y' colores [i]);  			i++;  		}  	}  	break;  case TGA.ImageType.Uncompressed_ColorMapped:  	for (int y = 0; y < tga.header.image_spec.height; y++) {  		for (int x = 0; x < tga.header.image_spec.width; x++) {  			imagen.SetPixel (x' y' tga.imageData.colorMap [br.ReadByte ()]);  			i++;  		}  	}  	break;  case TGA.ImageType.Uncompressed_BlackWhite:  case TGA.ImageType.RLE_BlackWhite:  case TGA.ImageType.RLE_ColorMapped:  case TGA.ImageType.noSopported:  default:  	throw new Exception ("Invalid value for ImageType");  }  
Magic Number,Common,TGA,D:\newReposJune17\pleonex_tinke\Plugins\Common\Common\Imagen\TGA.cs,Leer,The following statement contains a magic number: switch (tga.header.image_type) {  case TGA.ImageType.RLE_TrueColor:  	// Primero descomprimimos  	long pos = br.BaseStream.Position;  	br.Close ();  	tga.imageData.image = RLE.Descomprimir_Pixel (archivo' ref pos' tga.header.image_spec.depth' tga.header.image_spec.width' tga.header.image_spec.height);  	br = new BinaryReader (File.OpenRead (archivo));  	br.BaseStream.Position = pos;  	// Luego convertimos los colores  	for (int j = 0; j < colores.Length; j++) {  		if (tga.header.image_spec.depth == 0x20)  			colores [j] = Color.FromArgb (tga.imageData.image [4 * j + 3]' tga.imageData.image [4 * j]' tga.imageData.image [4 * j + 1]' tga.imageData.image [4 * j + 2]);  		else  			colores [j] = Color.FromArgb (255' tga.imageData.image [3 * j]' tga.imageData.image [3 * j + 1]' tga.imageData.image [3 * j + 2]);  	}  	// Set pixels colors  	for (int y = tga.header.image_spec.height - 1; y > 0; y--) {  		for (int x = 0; x < tga.header.image_spec.width; x++) {  			imagen.SetPixel (x' y' colores [i]);  			i++;  		}  	}  	break;  case TGA.ImageType.Uncompressed_TrueColor:  	colores = Actions.BGR555ToColor (br.ReadBytes (tga.header.image_spec.height * tga.header.image_spec.width * 2));  	for (int y = tga.header.image_spec.height - 1; y > 0; y--) {  		for (int x = 0; x < tga.header.image_spec.width; x++) {  			imagen.SetPixel (x' y' colores [i]);  			i++;  		}  	}  	break;  case TGA.ImageType.Uncompressed_ColorMapped:  	for (int y = 0; y < tga.header.image_spec.height; y++) {  		for (int x = 0; x < tga.header.image_spec.width; x++) {  			imagen.SetPixel (x' y' tga.imageData.colorMap [br.ReadByte ()]);  			i++;  		}  	}  	break;  case TGA.ImageType.Uncompressed_BlackWhite:  case TGA.ImageType.RLE_BlackWhite:  case TGA.ImageType.RLE_ColorMapped:  case TGA.ImageType.noSopported:  default:  	throw new Exception ("Invalid value for ImageType");  }  
Magic Number,Common,TGA,D:\newReposJune17\pleonex_tinke\Plugins\Common\Common\Imagen\TGA.cs,Leer,The following statement contains a magic number: switch (tga.header.image_type) {  case TGA.ImageType.RLE_TrueColor:  	// Primero descomprimimos  	long pos = br.BaseStream.Position;  	br.Close ();  	tga.imageData.image = RLE.Descomprimir_Pixel (archivo' ref pos' tga.header.image_spec.depth' tga.header.image_spec.width' tga.header.image_spec.height);  	br = new BinaryReader (File.OpenRead (archivo));  	br.BaseStream.Position = pos;  	// Luego convertimos los colores  	for (int j = 0; j < colores.Length; j++) {  		if (tga.header.image_spec.depth == 0x20)  			colores [j] = Color.FromArgb (tga.imageData.image [4 * j + 3]' tga.imageData.image [4 * j]' tga.imageData.image [4 * j + 1]' tga.imageData.image [4 * j + 2]);  		else  			colores [j] = Color.FromArgb (255' tga.imageData.image [3 * j]' tga.imageData.image [3 * j + 1]' tga.imageData.image [3 * j + 2]);  	}  	// Set pixels colors  	for (int y = tga.header.image_spec.height - 1; y > 0; y--) {  		for (int x = 0; x < tga.header.image_spec.width; x++) {  			imagen.SetPixel (x' y' colores [i]);  			i++;  		}  	}  	break;  case TGA.ImageType.Uncompressed_TrueColor:  	colores = Actions.BGR555ToColor (br.ReadBytes (tga.header.image_spec.height * tga.header.image_spec.width * 2));  	for (int y = tga.header.image_spec.height - 1; y > 0; y--) {  		for (int x = 0; x < tga.header.image_spec.width; x++) {  			imagen.SetPixel (x' y' colores [i]);  			i++;  		}  	}  	break;  case TGA.ImageType.Uncompressed_ColorMapped:  	for (int y = 0; y < tga.header.image_spec.height; y++) {  		for (int x = 0; x < tga.header.image_spec.width; x++) {  			imagen.SetPixel (x' y' tga.imageData.colorMap [br.ReadByte ()]);  			i++;  		}  	}  	break;  case TGA.ImageType.Uncompressed_BlackWhite:  case TGA.ImageType.RLE_BlackWhite:  case TGA.ImageType.RLE_ColorMapped:  case TGA.ImageType.noSopported:  default:  	throw new Exception ("Invalid value for ImageType");  }  
Magic Number,Common,TGA,D:\newReposJune17\pleonex_tinke\Plugins\Common\Common\Imagen\TGA.cs,Leer,The following statement contains a magic number: switch (tga.header.image_type) {  case TGA.ImageType.RLE_TrueColor:  	// Primero descomprimimos  	long pos = br.BaseStream.Position;  	br.Close ();  	tga.imageData.image = RLE.Descomprimir_Pixel (archivo' ref pos' tga.header.image_spec.depth' tga.header.image_spec.width' tga.header.image_spec.height);  	br = new BinaryReader (File.OpenRead (archivo));  	br.BaseStream.Position = pos;  	// Luego convertimos los colores  	for (int j = 0; j < colores.Length; j++) {  		if (tga.header.image_spec.depth == 0x20)  			colores [j] = Color.FromArgb (tga.imageData.image [4 * j + 3]' tga.imageData.image [4 * j]' tga.imageData.image [4 * j + 1]' tga.imageData.image [4 * j + 2]);  		else  			colores [j] = Color.FromArgb (255' tga.imageData.image [3 * j]' tga.imageData.image [3 * j + 1]' tga.imageData.image [3 * j + 2]);  	}  	// Set pixels colors  	for (int y = tga.header.image_spec.height - 1; y > 0; y--) {  		for (int x = 0; x < tga.header.image_spec.width; x++) {  			imagen.SetPixel (x' y' colores [i]);  			i++;  		}  	}  	break;  case TGA.ImageType.Uncompressed_TrueColor:  	colores = Actions.BGR555ToColor (br.ReadBytes (tga.header.image_spec.height * tga.header.image_spec.width * 2));  	for (int y = tga.header.image_spec.height - 1; y > 0; y--) {  		for (int x = 0; x < tga.header.image_spec.width; x++) {  			imagen.SetPixel (x' y' colores [i]);  			i++;  		}  	}  	break;  case TGA.ImageType.Uncompressed_ColorMapped:  	for (int y = 0; y < tga.header.image_spec.height; y++) {  		for (int x = 0; x < tga.header.image_spec.width; x++) {  			imagen.SetPixel (x' y' tga.imageData.colorMap [br.ReadByte ()]);  			i++;  		}  	}  	break;  case TGA.ImageType.Uncompressed_BlackWhite:  case TGA.ImageType.RLE_BlackWhite:  case TGA.ImageType.RLE_ColorMapped:  case TGA.ImageType.noSopported:  default:  	throw new Exception ("Invalid value for ImageType");  }  
Magic Number,Common,TGA,D:\newReposJune17\pleonex_tinke\Plugins\Common\Common\Imagen\TGA.cs,Leer,The following statement contains a magic number: switch (tga.header.image_type) {  case TGA.ImageType.RLE_TrueColor:  	// Primero descomprimimos  	long pos = br.BaseStream.Position;  	br.Close ();  	tga.imageData.image = RLE.Descomprimir_Pixel (archivo' ref pos' tga.header.image_spec.depth' tga.header.image_spec.width' tga.header.image_spec.height);  	br = new BinaryReader (File.OpenRead (archivo));  	br.BaseStream.Position = pos;  	// Luego convertimos los colores  	for (int j = 0; j < colores.Length; j++) {  		if (tga.header.image_spec.depth == 0x20)  			colores [j] = Color.FromArgb (tga.imageData.image [4 * j + 3]' tga.imageData.image [4 * j]' tga.imageData.image [4 * j + 1]' tga.imageData.image [4 * j + 2]);  		else  			colores [j] = Color.FromArgb (255' tga.imageData.image [3 * j]' tga.imageData.image [3 * j + 1]' tga.imageData.image [3 * j + 2]);  	}  	// Set pixels colors  	for (int y = tga.header.image_spec.height - 1; y > 0; y--) {  		for (int x = 0; x < tga.header.image_spec.width; x++) {  			imagen.SetPixel (x' y' colores [i]);  			i++;  		}  	}  	break;  case TGA.ImageType.Uncompressed_TrueColor:  	colores = Actions.BGR555ToColor (br.ReadBytes (tga.header.image_spec.height * tga.header.image_spec.width * 2));  	for (int y = tga.header.image_spec.height - 1; y > 0; y--) {  		for (int x = 0; x < tga.header.image_spec.width; x++) {  			imagen.SetPixel (x' y' colores [i]);  			i++;  		}  	}  	break;  case TGA.ImageType.Uncompressed_ColorMapped:  	for (int y = 0; y < tga.header.image_spec.height; y++) {  		for (int x = 0; x < tga.header.image_spec.width; x++) {  			imagen.SetPixel (x' y' tga.imageData.colorMap [br.ReadByte ()]);  			i++;  		}  	}  	break;  case TGA.ImageType.Uncompressed_BlackWhite:  case TGA.ImageType.RLE_BlackWhite:  case TGA.ImageType.RLE_ColorMapped:  case TGA.ImageType.noSopported:  default:  	throw new Exception ("Invalid value for ImageType");  }  
Magic Number,Common,TGA,D:\newReposJune17\pleonex_tinke\Plugins\Common\Common\Imagen\TGA.cs,Leer,The following statement contains a magic number: switch (tga.header.image_type) {  case TGA.ImageType.RLE_TrueColor:  	// Primero descomprimimos  	long pos = br.BaseStream.Position;  	br.Close ();  	tga.imageData.image = RLE.Descomprimir_Pixel (archivo' ref pos' tga.header.image_spec.depth' tga.header.image_spec.width' tga.header.image_spec.height);  	br = new BinaryReader (File.OpenRead (archivo));  	br.BaseStream.Position = pos;  	// Luego convertimos los colores  	for (int j = 0; j < colores.Length; j++) {  		if (tga.header.image_spec.depth == 0x20)  			colores [j] = Color.FromArgb (tga.imageData.image [4 * j + 3]' tga.imageData.image [4 * j]' tga.imageData.image [4 * j + 1]' tga.imageData.image [4 * j + 2]);  		else  			colores [j] = Color.FromArgb (255' tga.imageData.image [3 * j]' tga.imageData.image [3 * j + 1]' tga.imageData.image [3 * j + 2]);  	}  	// Set pixels colors  	for (int y = tga.header.image_spec.height - 1; y > 0; y--) {  		for (int x = 0; x < tga.header.image_spec.width; x++) {  			imagen.SetPixel (x' y' colores [i]);  			i++;  		}  	}  	break;  case TGA.ImageType.Uncompressed_TrueColor:  	colores = Actions.BGR555ToColor (br.ReadBytes (tga.header.image_spec.height * tga.header.image_spec.width * 2));  	for (int y = tga.header.image_spec.height - 1; y > 0; y--) {  		for (int x = 0; x < tga.header.image_spec.width; x++) {  			imagen.SetPixel (x' y' colores [i]);  			i++;  		}  	}  	break;  case TGA.ImageType.Uncompressed_ColorMapped:  	for (int y = 0; y < tga.header.image_spec.height; y++) {  		for (int x = 0; x < tga.header.image_spec.width; x++) {  			imagen.SetPixel (x' y' tga.imageData.colorMap [br.ReadByte ()]);  			i++;  		}  	}  	break;  case TGA.ImageType.Uncompressed_BlackWhite:  case TGA.ImageType.RLE_BlackWhite:  case TGA.ImageType.RLE_ColorMapped:  case TGA.ImageType.noSopported:  default:  	throw new Exception ("Invalid value for ImageType");  }  
Magic Number,Common,TGA,D:\newReposJune17\pleonex_tinke\Plugins\Common\Common\Imagen\TGA.cs,Leer,The following statement contains a magic number: switch (tga.header.image_type) {  case TGA.ImageType.RLE_TrueColor:  	// Primero descomprimimos  	long pos = br.BaseStream.Position;  	br.Close ();  	tga.imageData.image = RLE.Descomprimir_Pixel (archivo' ref pos' tga.header.image_spec.depth' tga.header.image_spec.width' tga.header.image_spec.height);  	br = new BinaryReader (File.OpenRead (archivo));  	br.BaseStream.Position = pos;  	// Luego convertimos los colores  	for (int j = 0; j < colores.Length; j++) {  		if (tga.header.image_spec.depth == 0x20)  			colores [j] = Color.FromArgb (tga.imageData.image [4 * j + 3]' tga.imageData.image [4 * j]' tga.imageData.image [4 * j + 1]' tga.imageData.image [4 * j + 2]);  		else  			colores [j] = Color.FromArgb (255' tga.imageData.image [3 * j]' tga.imageData.image [3 * j + 1]' tga.imageData.image [3 * j + 2]);  	}  	// Set pixels colors  	for (int y = tga.header.image_spec.height - 1; y > 0; y--) {  		for (int x = 0; x < tga.header.image_spec.width; x++) {  			imagen.SetPixel (x' y' colores [i]);  			i++;  		}  	}  	break;  case TGA.ImageType.Uncompressed_TrueColor:  	colores = Actions.BGR555ToColor (br.ReadBytes (tga.header.image_spec.height * tga.header.image_spec.width * 2));  	for (int y = tga.header.image_spec.height - 1; y > 0; y--) {  		for (int x = 0; x < tga.header.image_spec.width; x++) {  			imagen.SetPixel (x' y' colores [i]);  			i++;  		}  	}  	break;  case TGA.ImageType.Uncompressed_ColorMapped:  	for (int y = 0; y < tga.header.image_spec.height; y++) {  		for (int x = 0; x < tga.header.image_spec.width; x++) {  			imagen.SetPixel (x' y' tga.imageData.colorMap [br.ReadByte ()]);  			i++;  		}  	}  	break;  case TGA.ImageType.Uncompressed_BlackWhite:  case TGA.ImageType.RLE_BlackWhite:  case TGA.ImageType.RLE_ColorMapped:  case TGA.ImageType.noSopported:  default:  	throw new Exception ("Invalid value for ImageType");  }  
Magic Number,Common,TGA,D:\newReposJune17\pleonex_tinke\Plugins\Common\Common\Imagen\TGA.cs,Leer,The following statement contains a magic number: switch (tga.header.image_type) {  case TGA.ImageType.RLE_TrueColor:  	// Primero descomprimimos  	long pos = br.BaseStream.Position;  	br.Close ();  	tga.imageData.image = RLE.Descomprimir_Pixel (archivo' ref pos' tga.header.image_spec.depth' tga.header.image_spec.width' tga.header.image_spec.height);  	br = new BinaryReader (File.OpenRead (archivo));  	br.BaseStream.Position = pos;  	// Luego convertimos los colores  	for (int j = 0; j < colores.Length; j++) {  		if (tga.header.image_spec.depth == 0x20)  			colores [j] = Color.FromArgb (tga.imageData.image [4 * j + 3]' tga.imageData.image [4 * j]' tga.imageData.image [4 * j + 1]' tga.imageData.image [4 * j + 2]);  		else  			colores [j] = Color.FromArgb (255' tga.imageData.image [3 * j]' tga.imageData.image [3 * j + 1]' tga.imageData.image [3 * j + 2]);  	}  	// Set pixels colors  	for (int y = tga.header.image_spec.height - 1; y > 0; y--) {  		for (int x = 0; x < tga.header.image_spec.width; x++) {  			imagen.SetPixel (x' y' colores [i]);  			i++;  		}  	}  	break;  case TGA.ImageType.Uncompressed_TrueColor:  	colores = Actions.BGR555ToColor (br.ReadBytes (tga.header.image_spec.height * tga.header.image_spec.width * 2));  	for (int y = tga.header.image_spec.height - 1; y > 0; y--) {  		for (int x = 0; x < tga.header.image_spec.width; x++) {  			imagen.SetPixel (x' y' colores [i]);  			i++;  		}  	}  	break;  case TGA.ImageType.Uncompressed_ColorMapped:  	for (int y = 0; y < tga.header.image_spec.height; y++) {  		for (int x = 0; x < tga.header.image_spec.width; x++) {  			imagen.SetPixel (x' y' tga.imageData.colorMap [br.ReadByte ()]);  			i++;  		}  	}  	break;  case TGA.ImageType.Uncompressed_BlackWhite:  case TGA.ImageType.RLE_BlackWhite:  case TGA.ImageType.RLE_ColorMapped:  case TGA.ImageType.noSopported:  default:  	throw new Exception ("Invalid value for ImageType");  }  
Magic Number,Common,TGA,D:\newReposJune17\pleonex_tinke\Plugins\Common\Common\Imagen\TGA.cs,Leer,The following statement contains a magic number: switch (tga.header.image_type) {  case TGA.ImageType.RLE_TrueColor:  	// Primero descomprimimos  	long pos = br.BaseStream.Position;  	br.Close ();  	tga.imageData.image = RLE.Descomprimir_Pixel (archivo' ref pos' tga.header.image_spec.depth' tga.header.image_spec.width' tga.header.image_spec.height);  	br = new BinaryReader (File.OpenRead (archivo));  	br.BaseStream.Position = pos;  	// Luego convertimos los colores  	for (int j = 0; j < colores.Length; j++) {  		if (tga.header.image_spec.depth == 0x20)  			colores [j] = Color.FromArgb (tga.imageData.image [4 * j + 3]' tga.imageData.image [4 * j]' tga.imageData.image [4 * j + 1]' tga.imageData.image [4 * j + 2]);  		else  			colores [j] = Color.FromArgb (255' tga.imageData.image [3 * j]' tga.imageData.image [3 * j + 1]' tga.imageData.image [3 * j + 2]);  	}  	// Set pixels colors  	for (int y = tga.header.image_spec.height - 1; y > 0; y--) {  		for (int x = 0; x < tga.header.image_spec.width; x++) {  			imagen.SetPixel (x' y' colores [i]);  			i++;  		}  	}  	break;  case TGA.ImageType.Uncompressed_TrueColor:  	colores = Actions.BGR555ToColor (br.ReadBytes (tga.header.image_spec.height * tga.header.image_spec.width * 2));  	for (int y = tga.header.image_spec.height - 1; y > 0; y--) {  		for (int x = 0; x < tga.header.image_spec.width; x++) {  			imagen.SetPixel (x' y' colores [i]);  			i++;  		}  	}  	break;  case TGA.ImageType.Uncompressed_ColorMapped:  	for (int y = 0; y < tga.header.image_spec.height; y++) {  		for (int x = 0; x < tga.header.image_spec.width; x++) {  			imagen.SetPixel (x' y' tga.imageData.colorMap [br.ReadByte ()]);  			i++;  		}  	}  	break;  case TGA.ImageType.Uncompressed_BlackWhite:  case TGA.ImageType.RLE_BlackWhite:  case TGA.ImageType.RLE_ColorMapped:  case TGA.ImageType.noSopported:  default:  	throw new Exception ("Invalid value for ImageType");  }  
Magic Number,Common,TGA,D:\newReposJune17\pleonex_tinke\Plugins\Common\Common\Imagen\TGA.cs,Leer,The following statement contains a magic number: switch (tga.header.image_type) {  case TGA.ImageType.RLE_TrueColor:  	// Primero descomprimimos  	long pos = br.BaseStream.Position;  	br.Close ();  	tga.imageData.image = RLE.Descomprimir_Pixel (archivo' ref pos' tga.header.image_spec.depth' tga.header.image_spec.width' tga.header.image_spec.height);  	br = new BinaryReader (File.OpenRead (archivo));  	br.BaseStream.Position = pos;  	// Luego convertimos los colores  	for (int j = 0; j < colores.Length; j++) {  		if (tga.header.image_spec.depth == 0x20)  			colores [j] = Color.FromArgb (tga.imageData.image [4 * j + 3]' tga.imageData.image [4 * j]' tga.imageData.image [4 * j + 1]' tga.imageData.image [4 * j + 2]);  		else  			colores [j] = Color.FromArgb (255' tga.imageData.image [3 * j]' tga.imageData.image [3 * j + 1]' tga.imageData.image [3 * j + 2]);  	}  	// Set pixels colors  	for (int y = tga.header.image_spec.height - 1; y > 0; y--) {  		for (int x = 0; x < tga.header.image_spec.width; x++) {  			imagen.SetPixel (x' y' colores [i]);  			i++;  		}  	}  	break;  case TGA.ImageType.Uncompressed_TrueColor:  	colores = Actions.BGR555ToColor (br.ReadBytes (tga.header.image_spec.height * tga.header.image_spec.width * 2));  	for (int y = tga.header.image_spec.height - 1; y > 0; y--) {  		for (int x = 0; x < tga.header.image_spec.width; x++) {  			imagen.SetPixel (x' y' colores [i]);  			i++;  		}  	}  	break;  case TGA.ImageType.Uncompressed_ColorMapped:  	for (int y = 0; y < tga.header.image_spec.height; y++) {  		for (int x = 0; x < tga.header.image_spec.width; x++) {  			imagen.SetPixel (x' y' tga.imageData.colorMap [br.ReadByte ()]);  			i++;  		}  	}  	break;  case TGA.ImageType.Uncompressed_BlackWhite:  case TGA.ImageType.RLE_BlackWhite:  case TGA.ImageType.RLE_ColorMapped:  case TGA.ImageType.noSopported:  default:  	throw new Exception ("Invalid value for ImageType");  }  
Magic Number,Common,TGA,D:\newReposJune17\pleonex_tinke\Plugins\Common\Common\Imagen\TGA.cs,Leer,The following statement contains a magic number: for (int j = 0; j < colores.Length; j++) {  	if (tga.header.image_spec.depth == 0x20)  		colores [j] = Color.FromArgb (tga.imageData.image [4 * j + 3]' tga.imageData.image [4 * j]' tga.imageData.image [4 * j + 1]' tga.imageData.image [4 * j + 2]);  	else  		colores [j] = Color.FromArgb (255' tga.imageData.image [3 * j]' tga.imageData.image [3 * j + 1]' tga.imageData.image [3 * j + 2]);  }  
Magic Number,Common,TGA,D:\newReposJune17\pleonex_tinke\Plugins\Common\Common\Imagen\TGA.cs,Leer,The following statement contains a magic number: for (int j = 0; j < colores.Length; j++) {  	if (tga.header.image_spec.depth == 0x20)  		colores [j] = Color.FromArgb (tga.imageData.image [4 * j + 3]' tga.imageData.image [4 * j]' tga.imageData.image [4 * j + 1]' tga.imageData.image [4 * j + 2]);  	else  		colores [j] = Color.FromArgb (255' tga.imageData.image [3 * j]' tga.imageData.image [3 * j + 1]' tga.imageData.image [3 * j + 2]);  }  
Magic Number,Common,TGA,D:\newReposJune17\pleonex_tinke\Plugins\Common\Common\Imagen\TGA.cs,Leer,The following statement contains a magic number: for (int j = 0; j < colores.Length; j++) {  	if (tga.header.image_spec.depth == 0x20)  		colores [j] = Color.FromArgb (tga.imageData.image [4 * j + 3]' tga.imageData.image [4 * j]' tga.imageData.image [4 * j + 1]' tga.imageData.image [4 * j + 2]);  	else  		colores [j] = Color.FromArgb (255' tga.imageData.image [3 * j]' tga.imageData.image [3 * j + 1]' tga.imageData.image [3 * j + 2]);  }  
Magic Number,Common,TGA,D:\newReposJune17\pleonex_tinke\Plugins\Common\Common\Imagen\TGA.cs,Leer,The following statement contains a magic number: for (int j = 0; j < colores.Length; j++) {  	if (tga.header.image_spec.depth == 0x20)  		colores [j] = Color.FromArgb (tga.imageData.image [4 * j + 3]' tga.imageData.image [4 * j]' tga.imageData.image [4 * j + 1]' tga.imageData.image [4 * j + 2]);  	else  		colores [j] = Color.FromArgb (255' tga.imageData.image [3 * j]' tga.imageData.image [3 * j + 1]' tga.imageData.image [3 * j + 2]);  }  
Magic Number,Common,TGA,D:\newReposJune17\pleonex_tinke\Plugins\Common\Common\Imagen\TGA.cs,Leer,The following statement contains a magic number: for (int j = 0; j < colores.Length; j++) {  	if (tga.header.image_spec.depth == 0x20)  		colores [j] = Color.FromArgb (tga.imageData.image [4 * j + 3]' tga.imageData.image [4 * j]' tga.imageData.image [4 * j + 1]' tga.imageData.image [4 * j + 2]);  	else  		colores [j] = Color.FromArgb (255' tga.imageData.image [3 * j]' tga.imageData.image [3 * j + 1]' tga.imageData.image [3 * j + 2]);  }  
Magic Number,Common,TGA,D:\newReposJune17\pleonex_tinke\Plugins\Common\Common\Imagen\TGA.cs,Leer,The following statement contains a magic number: for (int j = 0; j < colores.Length; j++) {  	if (tga.header.image_spec.depth == 0x20)  		colores [j] = Color.FromArgb (tga.imageData.image [4 * j + 3]' tga.imageData.image [4 * j]' tga.imageData.image [4 * j + 1]' tga.imageData.image [4 * j + 2]);  	else  		colores [j] = Color.FromArgb (255' tga.imageData.image [3 * j]' tga.imageData.image [3 * j + 1]' tga.imageData.image [3 * j + 2]);  }  
Magic Number,Common,TGA,D:\newReposJune17\pleonex_tinke\Plugins\Common\Common\Imagen\TGA.cs,Leer,The following statement contains a magic number: for (int j = 0; j < colores.Length; j++) {  	if (tga.header.image_spec.depth == 0x20)  		colores [j] = Color.FromArgb (tga.imageData.image [4 * j + 3]' tga.imageData.image [4 * j]' tga.imageData.image [4 * j + 1]' tga.imageData.image [4 * j + 2]);  	else  		colores [j] = Color.FromArgb (255' tga.imageData.image [3 * j]' tga.imageData.image [3 * j + 1]' tga.imageData.image [3 * j + 2]);  }  
Magic Number,Common,TGA,D:\newReposJune17\pleonex_tinke\Plugins\Common\Common\Imagen\TGA.cs,Leer,The following statement contains a magic number: for (int j = 0; j < colores.Length; j++) {  	if (tga.header.image_spec.depth == 0x20)  		colores [j] = Color.FromArgb (tga.imageData.image [4 * j + 3]' tga.imageData.image [4 * j]' tga.imageData.image [4 * j + 1]' tga.imageData.image [4 * j + 2]);  	else  		colores [j] = Color.FromArgb (255' tga.imageData.image [3 * j]' tga.imageData.image [3 * j + 1]' tga.imageData.image [3 * j + 2]);  }  
Magic Number,Common,TGA,D:\newReposJune17\pleonex_tinke\Plugins\Common\Common\Imagen\TGA.cs,Leer,The following statement contains a magic number: for (int j = 0; j < colores.Length; j++) {  	if (tga.header.image_spec.depth == 0x20)  		colores [j] = Color.FromArgb (tga.imageData.image [4 * j + 3]' tga.imageData.image [4 * j]' tga.imageData.image [4 * j + 1]' tga.imageData.image [4 * j + 2]);  	else  		colores [j] = Color.FromArgb (255' tga.imageData.image [3 * j]' tga.imageData.image [3 * j + 1]' tga.imageData.image [3 * j + 2]);  }  
Magic Number,Common,TGA,D:\newReposJune17\pleonex_tinke\Plugins\Common\Common\Imagen\TGA.cs,Leer,The following statement contains a magic number: for (int j = 0; j < colores.Length; j++) {  	if (tga.header.image_spec.depth == 0x20)  		colores [j] = Color.FromArgb (tga.imageData.image [4 * j + 3]' tga.imageData.image [4 * j]' tga.imageData.image [4 * j + 1]' tga.imageData.image [4 * j + 2]);  	else  		colores [j] = Color.FromArgb (255' tga.imageData.image [3 * j]' tga.imageData.image [3 * j + 1]' tga.imageData.image [3 * j + 2]);  }  
Magic Number,Common,TGA,D:\newReposJune17\pleonex_tinke\Plugins\Common\Common\Imagen\TGA.cs,Leer,The following statement contains a magic number: for (int j = 0; j < colores.Length; j++) {  	if (tga.header.image_spec.depth == 0x20)  		colores [j] = Color.FromArgb (tga.imageData.image [4 * j + 3]' tga.imageData.image [4 * j]' tga.imageData.image [4 * j + 1]' tga.imageData.image [4 * j + 2]);  	else  		colores [j] = Color.FromArgb (255' tga.imageData.image [3 * j]' tga.imageData.image [3 * j + 1]' tga.imageData.image [3 * j + 2]);  }  
Magic Number,Common,TGA,D:\newReposJune17\pleonex_tinke\Plugins\Common\Common\Imagen\TGA.cs,Leer,The following statement contains a magic number: if (tga.header.image_spec.depth == 0x20)  	colores [j] = Color.FromArgb (tga.imageData.image [4 * j + 3]' tga.imageData.image [4 * j]' tga.imageData.image [4 * j + 1]' tga.imageData.image [4 * j + 2]);  else  	colores [j] = Color.FromArgb (255' tga.imageData.image [3 * j]' tga.imageData.image [3 * j + 1]' tga.imageData.image [3 * j + 2]);  
Magic Number,Common,TGA,D:\newReposJune17\pleonex_tinke\Plugins\Common\Common\Imagen\TGA.cs,Leer,The following statement contains a magic number: if (tga.header.image_spec.depth == 0x20)  	colores [j] = Color.FromArgb (tga.imageData.image [4 * j + 3]' tga.imageData.image [4 * j]' tga.imageData.image [4 * j + 1]' tga.imageData.image [4 * j + 2]);  else  	colores [j] = Color.FromArgb (255' tga.imageData.image [3 * j]' tga.imageData.image [3 * j + 1]' tga.imageData.image [3 * j + 2]);  
Magic Number,Common,TGA,D:\newReposJune17\pleonex_tinke\Plugins\Common\Common\Imagen\TGA.cs,Leer,The following statement contains a magic number: if (tga.header.image_spec.depth == 0x20)  	colores [j] = Color.FromArgb (tga.imageData.image [4 * j + 3]' tga.imageData.image [4 * j]' tga.imageData.image [4 * j + 1]' tga.imageData.image [4 * j + 2]);  else  	colores [j] = Color.FromArgb (255' tga.imageData.image [3 * j]' tga.imageData.image [3 * j + 1]' tga.imageData.image [3 * j + 2]);  
Magic Number,Common,TGA,D:\newReposJune17\pleonex_tinke\Plugins\Common\Common\Imagen\TGA.cs,Leer,The following statement contains a magic number: if (tga.header.image_spec.depth == 0x20)  	colores [j] = Color.FromArgb (tga.imageData.image [4 * j + 3]' tga.imageData.image [4 * j]' tga.imageData.image [4 * j + 1]' tga.imageData.image [4 * j + 2]);  else  	colores [j] = Color.FromArgb (255' tga.imageData.image [3 * j]' tga.imageData.image [3 * j + 1]' tga.imageData.image [3 * j + 2]);  
Magic Number,Common,TGA,D:\newReposJune17\pleonex_tinke\Plugins\Common\Common\Imagen\TGA.cs,Leer,The following statement contains a magic number: if (tga.header.image_spec.depth == 0x20)  	colores [j] = Color.FromArgb (tga.imageData.image [4 * j + 3]' tga.imageData.image [4 * j]' tga.imageData.image [4 * j + 1]' tga.imageData.image [4 * j + 2]);  else  	colores [j] = Color.FromArgb (255' tga.imageData.image [3 * j]' tga.imageData.image [3 * j + 1]' tga.imageData.image [3 * j + 2]);  
Magic Number,Common,TGA,D:\newReposJune17\pleonex_tinke\Plugins\Common\Common\Imagen\TGA.cs,Leer,The following statement contains a magic number: if (tga.header.image_spec.depth == 0x20)  	colores [j] = Color.FromArgb (tga.imageData.image [4 * j + 3]' tga.imageData.image [4 * j]' tga.imageData.image [4 * j + 1]' tga.imageData.image [4 * j + 2]);  else  	colores [j] = Color.FromArgb (255' tga.imageData.image [3 * j]' tga.imageData.image [3 * j + 1]' tga.imageData.image [3 * j + 2]);  
Magic Number,Common,TGA,D:\newReposJune17\pleonex_tinke\Plugins\Common\Common\Imagen\TGA.cs,Leer,The following statement contains a magic number: if (tga.header.image_spec.depth == 0x20)  	colores [j] = Color.FromArgb (tga.imageData.image [4 * j + 3]' tga.imageData.image [4 * j]' tga.imageData.image [4 * j + 1]' tga.imageData.image [4 * j + 2]);  else  	colores [j] = Color.FromArgb (255' tga.imageData.image [3 * j]' tga.imageData.image [3 * j + 1]' tga.imageData.image [3 * j + 2]);  
Magic Number,Common,TGA,D:\newReposJune17\pleonex_tinke\Plugins\Common\Common\Imagen\TGA.cs,Leer,The following statement contains a magic number: if (tga.header.image_spec.depth == 0x20)  	colores [j] = Color.FromArgb (tga.imageData.image [4 * j + 3]' tga.imageData.image [4 * j]' tga.imageData.image [4 * j + 1]' tga.imageData.image [4 * j + 2]);  else  	colores [j] = Color.FromArgb (255' tga.imageData.image [3 * j]' tga.imageData.image [3 * j + 1]' tga.imageData.image [3 * j + 2]);  
Magic Number,Common,TGA,D:\newReposJune17\pleonex_tinke\Plugins\Common\Common\Imagen\TGA.cs,Leer,The following statement contains a magic number: if (tga.header.image_spec.depth == 0x20)  	colores [j] = Color.FromArgb (tga.imageData.image [4 * j + 3]' tga.imageData.image [4 * j]' tga.imageData.image [4 * j + 1]' tga.imageData.image [4 * j + 2]);  else  	colores [j] = Color.FromArgb (255' tga.imageData.image [3 * j]' tga.imageData.image [3 * j + 1]' tga.imageData.image [3 * j + 2]);  
Magic Number,Common,TGA,D:\newReposJune17\pleonex_tinke\Plugins\Common\Common\Imagen\TGA.cs,Leer,The following statement contains a magic number: if (tga.header.image_spec.depth == 0x20)  	colores [j] = Color.FromArgb (tga.imageData.image [4 * j + 3]' tga.imageData.image [4 * j]' tga.imageData.image [4 * j + 1]' tga.imageData.image [4 * j + 2]);  else  	colores [j] = Color.FromArgb (255' tga.imageData.image [3 * j]' tga.imageData.image [3 * j + 1]' tga.imageData.image [3 * j + 2]);  
Magic Number,Common,TGA,D:\newReposJune17\pleonex_tinke\Plugins\Common\Common\Imagen\TGA.cs,Leer,The following statement contains a magic number: if (tga.header.image_spec.depth == 0x20)  	colores [j] = Color.FromArgb (tga.imageData.image [4 * j + 3]' tga.imageData.image [4 * j]' tga.imageData.image [4 * j + 1]' tga.imageData.image [4 * j + 2]);  else  	colores [j] = Color.FromArgb (255' tga.imageData.image [3 * j]' tga.imageData.image [3 * j + 1]' tga.imageData.image [3 * j + 2]);  
Magic Number,Common,TGA,D:\newReposJune17\pleonex_tinke\Plugins\Common\Common\Imagen\TGA.cs,Leer,The following statement contains a magic number: colores [j] = Color.FromArgb (tga.imageData.image [4 * j + 3]' tga.imageData.image [4 * j]' tga.imageData.image [4 * j + 1]' tga.imageData.image [4 * j + 2]);  
Magic Number,Common,TGA,D:\newReposJune17\pleonex_tinke\Plugins\Common\Common\Imagen\TGA.cs,Leer,The following statement contains a magic number: colores [j] = Color.FromArgb (tga.imageData.image [4 * j + 3]' tga.imageData.image [4 * j]' tga.imageData.image [4 * j + 1]' tga.imageData.image [4 * j + 2]);  
Magic Number,Common,TGA,D:\newReposJune17\pleonex_tinke\Plugins\Common\Common\Imagen\TGA.cs,Leer,The following statement contains a magic number: colores [j] = Color.FromArgb (tga.imageData.image [4 * j + 3]' tga.imageData.image [4 * j]' tga.imageData.image [4 * j + 1]' tga.imageData.image [4 * j + 2]);  
Magic Number,Common,TGA,D:\newReposJune17\pleonex_tinke\Plugins\Common\Common\Imagen\TGA.cs,Leer,The following statement contains a magic number: colores [j] = Color.FromArgb (tga.imageData.image [4 * j + 3]' tga.imageData.image [4 * j]' tga.imageData.image [4 * j + 1]' tga.imageData.image [4 * j + 2]);  
Magic Number,Common,TGA,D:\newReposJune17\pleonex_tinke\Plugins\Common\Common\Imagen\TGA.cs,Leer,The following statement contains a magic number: colores [j] = Color.FromArgb (tga.imageData.image [4 * j + 3]' tga.imageData.image [4 * j]' tga.imageData.image [4 * j + 1]' tga.imageData.image [4 * j + 2]);  
Magic Number,Common,TGA,D:\newReposJune17\pleonex_tinke\Plugins\Common\Common\Imagen\TGA.cs,Leer,The following statement contains a magic number: colores [j] = Color.FromArgb (tga.imageData.image [4 * j + 3]' tga.imageData.image [4 * j]' tga.imageData.image [4 * j + 1]' tga.imageData.image [4 * j + 2]);  
Magic Number,Common,TGA,D:\newReposJune17\pleonex_tinke\Plugins\Common\Common\Imagen\TGA.cs,Leer,The following statement contains a magic number: colores [j] = Color.FromArgb (255' tga.imageData.image [3 * j]' tga.imageData.image [3 * j + 1]' tga.imageData.image [3 * j + 2]);  
Magic Number,Common,TGA,D:\newReposJune17\pleonex_tinke\Plugins\Common\Common\Imagen\TGA.cs,Leer,The following statement contains a magic number: colores [j] = Color.FromArgb (255' tga.imageData.image [3 * j]' tga.imageData.image [3 * j + 1]' tga.imageData.image [3 * j + 2]);  
Magic Number,Common,TGA,D:\newReposJune17\pleonex_tinke\Plugins\Common\Common\Imagen\TGA.cs,Leer,The following statement contains a magic number: colores [j] = Color.FromArgb (255' tga.imageData.image [3 * j]' tga.imageData.image [3 * j + 1]' tga.imageData.image [3 * j + 2]);  
Magic Number,Common,TGA,D:\newReposJune17\pleonex_tinke\Plugins\Common\Common\Imagen\TGA.cs,Leer,The following statement contains a magic number: colores [j] = Color.FromArgb (255' tga.imageData.image [3 * j]' tga.imageData.image [3 * j + 1]' tga.imageData.image [3 * j + 2]);  
Magic Number,Common,TGA,D:\newReposJune17\pleonex_tinke\Plugins\Common\Common\Imagen\TGA.cs,Leer,The following statement contains a magic number: colores [j] = Color.FromArgb (255' tga.imageData.image [3 * j]' tga.imageData.image [3 * j + 1]' tga.imageData.image [3 * j + 2]);  
Magic Number,Common,TGA,D:\newReposJune17\pleonex_tinke\Plugins\Common\Common\Imagen\TGA.cs,Leer,The following statement contains a magic number: colores = Actions.BGR555ToColor (br.ReadBytes (tga.header.image_spec.height * tga.header.image_spec.width * 2));  
Magic Number,Common,Main,D:\newReposJune17\pleonex_tinke\Plugins\Common\Common\Main.cs,Show_Info,The following statement contains a magic number: try {  	ext = new String (br.ReadChars (4));  } catch {  }  
Magic Number,Common,Main,D:\newReposJune17\pleonex_tinke\Plugins\Common\Common\Main.cs,Show_Info,The following statement contains a magic number: ext = new String (br.ReadChars (4));  
Magic Number,Common,RLE,D:\newReposJune17\pleonex_tinke\Plugins\Common\Common\RLE.cs,Descomprimir_Pixel,The following statement contains a magic number: if (depth % 8 != 0)  	throw new NotImplementedException ("Profundidad no soportada: " + depth.ToString ());  
Magic Number,Common,RLE,D:\newReposJune17\pleonex_tinke\Plugins\Common\Common\RLE.cs,Descomprimir_Pixel,The following statement contains a magic number: for (int pos = 0; pos < datos.Length;) {  	if (datos [pos] >= 0x80) {  		int rep = datos [pos] - 0x80 + 1;  		pos++;  		for (; rep > 0; rep--)  			for (int d = 0; d < (depth / 8); d++)  				des.Add (datos [pos]);  	} else {  		int rep = datos [pos] + 1;  		pos++;  		for (; rep > 0; rep--)  			for (int d = 0; d < (depth / 8); d++' pos++)  				des.Add (datos [pos]);  	}  	pos++;  }  
Magic Number,Common,RLE,D:\newReposJune17\pleonex_tinke\Plugins\Common\Common\RLE.cs,Descomprimir_Pixel,The following statement contains a magic number: for (int pos = 0; pos < datos.Length;) {  	if (datos [pos] >= 0x80) {  		int rep = datos [pos] - 0x80 + 1;  		pos++;  		for (; rep > 0; rep--)  			for (int d = 0; d < (depth / 8); d++)  				des.Add (datos [pos]);  	} else {  		int rep = datos [pos] + 1;  		pos++;  		for (; rep > 0; rep--)  			for (int d = 0; d < (depth / 8); d++' pos++)  				des.Add (datos [pos]);  	}  	pos++;  }  
Magic Number,Common,RLE,D:\newReposJune17\pleonex_tinke\Plugins\Common\Common\RLE.cs,Descomprimir_Pixel,The following statement contains a magic number: if (datos [pos] >= 0x80) {  	int rep = datos [pos] - 0x80 + 1;  	pos++;  	for (; rep > 0; rep--)  		for (int d = 0; d < (depth / 8); d++)  			des.Add (datos [pos]);  } else {  	int rep = datos [pos] + 1;  	pos++;  	for (; rep > 0; rep--)  		for (int d = 0; d < (depth / 8); d++' pos++)  			des.Add (datos [pos]);  }  
Magic Number,Common,RLE,D:\newReposJune17\pleonex_tinke\Plugins\Common\Common\RLE.cs,Descomprimir_Pixel,The following statement contains a magic number: if (datos [pos] >= 0x80) {  	int rep = datos [pos] - 0x80 + 1;  	pos++;  	for (; rep > 0; rep--)  		for (int d = 0; d < (depth / 8); d++)  			des.Add (datos [pos]);  } else {  	int rep = datos [pos] + 1;  	pos++;  	for (; rep > 0; rep--)  		for (int d = 0; d < (depth / 8); d++' pos++)  			des.Add (datos [pos]);  }  
Magic Number,Common,RLE,D:\newReposJune17\pleonex_tinke\Plugins\Common\Common\RLE.cs,Descomprimir_Pixel,The following statement contains a magic number: for (; rep > 0; rep--)  	for (int d = 0; d < (depth / 8); d++)  		des.Add (datos [pos]);  
Magic Number,Common,RLE,D:\newReposJune17\pleonex_tinke\Plugins\Common\Common\RLE.cs,Descomprimir_Pixel,The following statement contains a magic number: for (int d = 0; d < (depth / 8); d++)  	des.Add (datos [pos]);  
Magic Number,Common,RLE,D:\newReposJune17\pleonex_tinke\Plugins\Common\Common\RLE.cs,Descomprimir_Pixel,The following statement contains a magic number: for (; rep > 0; rep--)  	for (int d = 0; d < (depth / 8); d++' pos++)  		des.Add (datos [pos]);  
Magic Number,Common,RLE,D:\newReposJune17\pleonex_tinke\Plugins\Common\Common\RLE.cs,Descomprimir_Pixel,The following statement contains a magic number: for (int d = 0; d < (depth / 8); d++' pos++)  	des.Add (datos [pos]);  
Magic Number,Common,RLE,D:\newReposJune17\pleonex_tinke\Plugins\Common\Common\RLE.cs,Descomprimir_Pixel,The following statement contains a magic number: if (depth % 8 != 0)  	throw new NotImplementedException ("Profundidad no soportada: " + depth.ToString ());  
Magic Number,Common,RLE,D:\newReposJune17\pleonex_tinke\Plugins\Common\Common\RLE.cs,Descomprimir_Pixel,The following statement contains a magic number: for (; des.Count < ((width * height) * (depth / 8));)// Paramos cuando se tengan todos los pixels   {  	byte id = br.ReadByte ();  	if (id >= 0x80) {  		int rep = id - 0x80 + 1;  		byte[] dato = br.ReadBytes (depth / 8);  		for (; rep > 0; rep--)  			des.AddRange (dato);  	} else {  		int rep = id + 1;  		for (; rep > 0; rep--)  			des.AddRange (br.ReadBytes (depth / 8));  	}  }  
Magic Number,Common,RLE,D:\newReposJune17\pleonex_tinke\Plugins\Common\Common\RLE.cs,Descomprimir_Pixel,The following statement contains a magic number: for (; des.Count < ((width * height) * (depth / 8));)// Paramos cuando se tengan todos los pixels   {  	byte id = br.ReadByte ();  	if (id >= 0x80) {  		int rep = id - 0x80 + 1;  		byte[] dato = br.ReadBytes (depth / 8);  		for (; rep > 0; rep--)  			des.AddRange (dato);  	} else {  		int rep = id + 1;  		for (; rep > 0; rep--)  			des.AddRange (br.ReadBytes (depth / 8));  	}  }  
Magic Number,Common,RLE,D:\newReposJune17\pleonex_tinke\Plugins\Common\Common\RLE.cs,Descomprimir_Pixel,The following statement contains a magic number: for (; des.Count < ((width * height) * (depth / 8));)// Paramos cuando se tengan todos los pixels   {  	byte id = br.ReadByte ();  	if (id >= 0x80) {  		int rep = id - 0x80 + 1;  		byte[] dato = br.ReadBytes (depth / 8);  		for (; rep > 0; rep--)  			des.AddRange (dato);  	} else {  		int rep = id + 1;  		for (; rep > 0; rep--)  			des.AddRange (br.ReadBytes (depth / 8));  	}  }  
Magic Number,Common,RLE,D:\newReposJune17\pleonex_tinke\Plugins\Common\Common\RLE.cs,Descomprimir_Pixel,The following statement contains a magic number: if (id >= 0x80) {  	int rep = id - 0x80 + 1;  	byte[] dato = br.ReadBytes (depth / 8);  	for (; rep > 0; rep--)  		des.AddRange (dato);  } else {  	int rep = id + 1;  	for (; rep > 0; rep--)  		des.AddRange (br.ReadBytes (depth / 8));  }  
Magic Number,Common,RLE,D:\newReposJune17\pleonex_tinke\Plugins\Common\Common\RLE.cs,Descomprimir_Pixel,The following statement contains a magic number: if (id >= 0x80) {  	int rep = id - 0x80 + 1;  	byte[] dato = br.ReadBytes (depth / 8);  	for (; rep > 0; rep--)  		des.AddRange (dato);  } else {  	int rep = id + 1;  	for (; rep > 0; rep--)  		des.AddRange (br.ReadBytes (depth / 8));  }  
Magic Number,Common,RLE,D:\newReposJune17\pleonex_tinke\Plugins\Common\Common\RLE.cs,Descomprimir_Pixel,The following statement contains a magic number: for (; rep > 0; rep--)  	des.AddRange (br.ReadBytes (depth / 8));  
Magic Number,Common,RLE,D:\newReposJune17\pleonex_tinke\Plugins\Common\Common\RLE.cs,Descomprimir_Pixel,The following statement contains a magic number: des.AddRange (br.ReadBytes (depth / 8));  
Magic Number,Common,iWav,D:\newReposJune17\pleonex_tinke\Plugins\Common\Common\Sonido\iWav.cs,InitializeComponent,The following statement contains a magic number: this.btnPlay.Location = new System.Drawing.Point (3' 3);  
Magic Number,Common,iWav,D:\newReposJune17\pleonex_tinke\Plugins\Common\Common\Sonido\iWav.cs,InitializeComponent,The following statement contains a magic number: this.btnPlay.Location = new System.Drawing.Point (3' 3);  
Magic Number,Common,iWav,D:\newReposJune17\pleonex_tinke\Plugins\Common\Common\Sonido\iWav.cs,InitializeComponent,The following statement contains a magic number: this.btnPlay.Size = new System.Drawing.Size (108' 23);  
Magic Number,Common,iWav,D:\newReposJune17\pleonex_tinke\Plugins\Common\Common\Sonido\iWav.cs,InitializeComponent,The following statement contains a magic number: this.btnPlay.Size = new System.Drawing.Size (108' 23);  
Magic Number,Common,iWav,D:\newReposJune17\pleonex_tinke\Plugins\Common\Common\Sonido\iWav.cs,InitializeComponent,The following statement contains a magic number: this.btnStop.Location = new System.Drawing.Point (3' 32);  
Magic Number,Common,iWav,D:\newReposJune17\pleonex_tinke\Plugins\Common\Common\Sonido\iWav.cs,InitializeComponent,The following statement contains a magic number: this.btnStop.Location = new System.Drawing.Point (3' 32);  
Magic Number,Common,iWav,D:\newReposJune17\pleonex_tinke\Plugins\Common\Common\Sonido\iWav.cs,InitializeComponent,The following statement contains a magic number: this.btnStop.Size = new System.Drawing.Size (108' 23);  
Magic Number,Common,iWav,D:\newReposJune17\pleonex_tinke\Plugins\Common\Common\Sonido\iWav.cs,InitializeComponent,The following statement contains a magic number: this.btnStop.Size = new System.Drawing.Size (108' 23);  
Magic Number,Common,iWav,D:\newReposJune17\pleonex_tinke\Plugins\Common\Common\Sonido\iWav.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size (267' 108);  
Magic Number,Common,iWav,D:\newReposJune17\pleonex_tinke\Plugins\Common\Common\Sonido\iWav.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size (267' 108);  
Missing Default,Common,TGA,D:\newReposJune17\pleonex_tinke\Plugins\Common\Common\Imagen\TGA.cs,Leer,The following switch statement is missing a default case: switch (tga.header.colorMap_spec.entry_size) {  case 24:  	for (int c = 0; c < tga.imageData.colorMap.Length; c++) {  		Color newColor = Color.FromArgb (br.ReadByte ()' br.ReadByte ()' br.ReadByte ());  		tga.imageData.colorMap [c] = newColor;  	}  	br.ReadBytes (tga.header.colorMap_spec.length - tga.imageData.colorMap.Length * 3);  	break;  }  
