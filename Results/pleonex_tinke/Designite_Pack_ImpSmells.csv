Implementation smell,Namespace,Class,File,Method,Description
Long Method,Pack,Arch,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\Arch.cs,Pack,The method has 90 lines of code.
Long Method,Pack,NARC,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\NARC.cs,Unpack,The method has 113 lines of code.
Long Method,Pack,Utility,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\Utility.cs,Unpack,The method has 64 lines of code.
Long Method,Pack.Games,BSIGILBE,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\Games\BSIGILBE.cs,Decrypt,The method has 116 lines of code.
Long Method,Pack.Games,DGamerArchive,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\Games\DGAMERARCHIVE.cs,Unpack,The method has 65 lines of code.
Complex Method,Pack,Decoder,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\Arch.cs,FillBuffer,Cyclomatic complexity of the method is 7
Complex Method,Pack,NARC,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\NARC.cs,Unpack,Cyclomatic complexity of the method is 16
Complex Method,Pack,Utility,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\Utility.cs,Unpack,Cyclomatic complexity of the method is 7
Complex Method,Pack.Games,BSIGILBE,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\Games\BSIGILBE.cs,Decrypt,Cyclomatic complexity of the method is 16
Complex Method,Pack.Games,DGamerArchive,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\Games\DGAMERARCHIVE.cs,Unpack,Cyclomatic complexity of the method is 7
Complex Method,Pack.Games,RR3BACE,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\Games\RR3BACE.cs,Unpack,Cyclomatic complexity of the method is 7
Long Parameter List,Pack,Decoder,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\Arch.cs,Decoder,The method has 4 parameters.
Long Parameter List,Pack,Utility,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\Utility.cs,Get_File,The method has 4 parameters.
Long Statement,Pack,Utility,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\Utility.cs,Pack,The length of the statement  "	String fileOut = pluginHost.Get_TempFolder () + Path.DirectorySeparatorChar + "newUtility_" + Path.GetRandomFileName (); " is 120.
Long Statement,Pack.Games,BSIGILBE,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\Games\BSIGILBE.cs,Decrypt,The length of the statement  "	string tempFile = pluginHost.Get_TempFolder () + Path.DirectorySeparatorChar + Path.GetRandomFileName () + Path.GetFileNameWithoutExtension (fileIn) + ".dec"; " is 158.
Long Statement,Pack.Games,ENDLESS_F,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\Games\ENDLESS_F.cs,Get_Format,The length of the statement  "	if ((file.name.EndsWith (".pk1") || file.name.EndsWith (".pk2") || file.name.EndsWith (".pk")) && (magic [0] == 0 && magic [1] == 0)) " is 133.
Complex Conditional,Pack.Games,ENDLESS_F,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\Games\ENDLESS_F.cs,Get_Format,The conditional expression  "(file.name.EndsWith (".pk1") || file.name.EndsWith (".pk2") || file.name.EndsWith (".pk")) && (magic [0] == 0 && magic [1] == 0)"  is complex.
Complex Conditional,Pack.Games,ROCKMAN_EXE,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\Games\ROCKMAN_EXE.cs,Get_Format,The conditional expression  "file.id == 0x461 || file.id == 0x462 || file.id == 0x45D || file.id == 0x45F"  is complex.
Magic Number,Pack,ALAR,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\ALAR.cs,Unpack,The following statement contains a magic number: br.BaseStream.Position = 4;  
Magic Number,Pack,ALAR,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\ALAR.cs,Unpack_Type2,The following statement contains a magic number: for (int i = 0; i < 8; i++)  	ids [i] = br.ReadByte ();  
Magic Number,Pack,ALAR,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\ALAR.cs,Unpack_Type2,The following statement contains a magic number: for (int i = 0; i < num_files; i++) {  	uint unk1 = br.ReadUInt32 ();  	sFile cfile = new sFile ();  	cfile.path = file.path;  	cfile.offset = br.ReadUInt32 ();  	cfile.size = br.ReadUInt32 ();  	uint unk2 = br.ReadUInt32 ();  	long curpos = br.BaseStream.Position;  	br.BaseStream.Position = name_offset + 2;  	cfile.name = new String (Encoding.GetEncoding ("shift_jis").GetChars (br.ReadBytes (0x20))).Replace ("\0"' "");  	name_offset += cfile.size + 0x24;  	br.BaseStream.Position = curpos;  	unpacked.files.Add (cfile);  }  
Magic Number,Pack,ALAR,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\ALAR.cs,Unpack_Type2,The following statement contains a magic number: br.BaseStream.Position = name_offset + 2;  
Magic Number,Pack,Main,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\Main.cs,Get_Format,The following statement contains a magic number: if (type == "NARC" || type == "CRAN")  	return Format.Pack;  else if (file.name.ToUpper ().EndsWith ("UTILITY.BIN") && magic [0] == 0x10)  	return Format.Pack;  else if (type == "ALAR") {  	// Check type  	BinaryReader br = new BinaryReader (File.OpenRead (file.path));  	Console.WriteLine ("Offset: " + (file.offset + 4).ToString ("x"));  	br.BaseStream.Position = file.offset + 4;  	byte alar_type = br.ReadByte ();  	br.Close ();  	if (alar_type == 0x02)  		return Format.Pack;  }  
Magic Number,Pack,Main,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\Main.cs,Get_Format,The following statement contains a magic number: if (type == "NARC" || type == "CRAN")  	return Format.Pack;  else if (file.name.ToUpper ().EndsWith ("UTILITY.BIN") && magic [0] == 0x10)  	return Format.Pack;  else if (type == "ALAR") {  	// Check type  	BinaryReader br = new BinaryReader (File.OpenRead (file.path));  	Console.WriteLine ("Offset: " + (file.offset + 4).ToString ("x"));  	br.BaseStream.Position = file.offset + 4;  	byte alar_type = br.ReadByte ();  	br.Close ();  	if (alar_type == 0x02)  		return Format.Pack;  }  
Magic Number,Pack,Main,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\Main.cs,Get_Format,The following statement contains a magic number: if (file.name.ToUpper ().EndsWith ("UTILITY.BIN") && magic [0] == 0x10)  	return Format.Pack;  else if (type == "ALAR") {  	// Check type  	BinaryReader br = new BinaryReader (File.OpenRead (file.path));  	Console.WriteLine ("Offset: " + (file.offset + 4).ToString ("x"));  	br.BaseStream.Position = file.offset + 4;  	byte alar_type = br.ReadByte ();  	br.Close ();  	if (alar_type == 0x02)  		return Format.Pack;  }  
Magic Number,Pack,Main,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\Main.cs,Get_Format,The following statement contains a magic number: if (file.name.ToUpper ().EndsWith ("UTILITY.BIN") && magic [0] == 0x10)  	return Format.Pack;  else if (type == "ALAR") {  	// Check type  	BinaryReader br = new BinaryReader (File.OpenRead (file.path));  	Console.WriteLine ("Offset: " + (file.offset + 4).ToString ("x"));  	br.BaseStream.Position = file.offset + 4;  	byte alar_type = br.ReadByte ();  	br.Close ();  	if (alar_type == 0x02)  		return Format.Pack;  }  
Magic Number,Pack,Main,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\Main.cs,Get_Format,The following statement contains a magic number: if (type == "ALAR") {  	// Check type  	BinaryReader br = new BinaryReader (File.OpenRead (file.path));  	Console.WriteLine ("Offset: " + (file.offset + 4).ToString ("x"));  	br.BaseStream.Position = file.offset + 4;  	byte alar_type = br.ReadByte ();  	br.Close ();  	if (alar_type == 0x02)  		return Format.Pack;  }  
Magic Number,Pack,Main,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\Main.cs,Get_Format,The following statement contains a magic number: if (type == "ALAR") {  	// Check type  	BinaryReader br = new BinaryReader (File.OpenRead (file.path));  	Console.WriteLine ("Offset: " + (file.offset + 4).ToString ("x"));  	br.BaseStream.Position = file.offset + 4;  	byte alar_type = br.ReadByte ();  	br.Close ();  	if (alar_type == 0x02)  		return Format.Pack;  }  
Magic Number,Pack,Main,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\Main.cs,Get_Format,The following statement contains a magic number: Console.WriteLine ("Offset: " + (file.offset + 4).ToString ("x"));  
Magic Number,Pack,Main,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\Main.cs,Get_Format,The following statement contains a magic number: br.BaseStream.Position = file.offset + 4;  
Magic Number,Pack,NARC,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\NARC.cs,Unpack,The following statement contains a magic number: arc.id = br.ReadChars (4);  
Magic Number,Pack,NARC,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\NARC.cs,Unpack,The following statement contains a magic number: arc.btaf.id = br.ReadChars (4);  
Magic Number,Pack,NARC,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\NARC.cs,Unpack,The following statement contains a magic number: arc.btnf.id = br.ReadChars (4);  
Magic Number,Pack,NARC,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\NARC.cs,Unpack,The following statement contains a magic number: br.BaseStream.Position += 6;  
Magic Number,Pack,NARC,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\NARC.cs,Unpack,The following statement contains a magic number: br.BaseStream.Position -= 8;  
Magic Number,Pack,NARC,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\NARC.cs,Unpack,The following statement contains a magic number: for (int m = 0; m < num_mains; m++) {  	BTNF_MainEntry main = new BTNF_MainEntry ();  	main.offset = br.ReadUInt32 ();  	main.first_pos = br.ReadUInt16 ();  	main.parent = br.ReadUInt16 ();  	uint idFile = main.first_pos;  	if (main.offset < 0x8)// There aren't names (in Pokemon games)  	 {  		for (int i = 0; i < arc.btaf.nFiles; i++) {  			sFile currFile = new sFile ();  			currFile.name = Path.GetFileNameWithoutExtension (file.name) + '_' + idFile.ToString ();  			currFile.id = (ushort)idFile++;  			// FAT data  			currFile.path = file.path;  			currFile.offset = arc.btaf.entries [currFile.id].start_offset + gmif_offset;  			currFile.size = (arc.btaf.entries [currFile.id].end_offset - arc.btaf.entries [currFile.id].start_offset);  			// Get the extension  			long currPos = br.BaseStream.Position;  			br.BaseStream.Position = currFile.offset;  			char[] ext;  			if (currFile.size < 4)  				ext = Encoding.ASCII.GetChars (br.ReadBytes ((int)currFile.size));  			else  				ext = Encoding.ASCII.GetChars (br.ReadBytes (4));  			String extS = ".";  			for (int s = 0; s < ext.Length; s++)  				if (Char.IsLetterOrDigit (ext [s]) || ext [s] == 0x20)  					extS += ext [s];  			if (extS != "." && extS.Length == 5 && currFile.size >= 4)  				currFile.name += extS;  			else  				currFile.name += ".bin";  			br.BaseStream.Position = currPos;  			if (!(main.files is List<sFile>))  				main.files = new List<sFile> ();  			main.files.Add (currFile);  		}  		arc.btnf.entries.Add (main);  		continue;  	}  	long posmain = br.BaseStream.Position;  	br.BaseStream.Position = main.offset + mainTables_offset;  	int id = br.ReadByte ();  	while (id != 0x0)// Indicate the end of the subtable  	 {  		if ((id & 0x80) == 0)// File  		 {  			sFile currFile = new sFile ();  			currFile.id = (ushort)idFile++;  			currFile.name = new String (br.ReadChars (id));  			// FAT data  			currFile.path = file.path;  			currFile.offset = arc.btaf.entries [currFile.id].start_offset + gmif_offset;  			currFile.size = (arc.btaf.entries [currFile.id].end_offset - arc.btaf.entries [currFile.id].start_offset);  			if (!(main.files is List<sFile>))  				main.files = new List<sFile> ();  			main.files.Add (currFile);  		} else// Directory  		 {  			sFolder currFolder = new sFolder ();  			currFolder.name = new String (br.ReadChars (id - 0x80));  			currFolder.id = br.ReadUInt16 ();  			if (!(main.folders is List<sFolder>))  				main.folders = new List<sFolder> ();  			main.folders.Add (currFolder);  		}  		id = br.ReadByte ();  	}  	arc.btnf.entries.Add (main);  	br.BaseStream.Position = posmain;  }  
Magic Number,Pack,NARC,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\NARC.cs,Unpack,The following statement contains a magic number: for (int m = 0; m < num_mains; m++) {  	BTNF_MainEntry main = new BTNF_MainEntry ();  	main.offset = br.ReadUInt32 ();  	main.first_pos = br.ReadUInt16 ();  	main.parent = br.ReadUInt16 ();  	uint idFile = main.first_pos;  	if (main.offset < 0x8)// There aren't names (in Pokemon games)  	 {  		for (int i = 0; i < arc.btaf.nFiles; i++) {  			sFile currFile = new sFile ();  			currFile.name = Path.GetFileNameWithoutExtension (file.name) + '_' + idFile.ToString ();  			currFile.id = (ushort)idFile++;  			// FAT data  			currFile.path = file.path;  			currFile.offset = arc.btaf.entries [currFile.id].start_offset + gmif_offset;  			currFile.size = (arc.btaf.entries [currFile.id].end_offset - arc.btaf.entries [currFile.id].start_offset);  			// Get the extension  			long currPos = br.BaseStream.Position;  			br.BaseStream.Position = currFile.offset;  			char[] ext;  			if (currFile.size < 4)  				ext = Encoding.ASCII.GetChars (br.ReadBytes ((int)currFile.size));  			else  				ext = Encoding.ASCII.GetChars (br.ReadBytes (4));  			String extS = ".";  			for (int s = 0; s < ext.Length; s++)  				if (Char.IsLetterOrDigit (ext [s]) || ext [s] == 0x20)  					extS += ext [s];  			if (extS != "." && extS.Length == 5 && currFile.size >= 4)  				currFile.name += extS;  			else  				currFile.name += ".bin";  			br.BaseStream.Position = currPos;  			if (!(main.files is List<sFile>))  				main.files = new List<sFile> ();  			main.files.Add (currFile);  		}  		arc.btnf.entries.Add (main);  		continue;  	}  	long posmain = br.BaseStream.Position;  	br.BaseStream.Position = main.offset + mainTables_offset;  	int id = br.ReadByte ();  	while (id != 0x0)// Indicate the end of the subtable  	 {  		if ((id & 0x80) == 0)// File  		 {  			sFile currFile = new sFile ();  			currFile.id = (ushort)idFile++;  			currFile.name = new String (br.ReadChars (id));  			// FAT data  			currFile.path = file.path;  			currFile.offset = arc.btaf.entries [currFile.id].start_offset + gmif_offset;  			currFile.size = (arc.btaf.entries [currFile.id].end_offset - arc.btaf.entries [currFile.id].start_offset);  			if (!(main.files is List<sFile>))  				main.files = new List<sFile> ();  			main.files.Add (currFile);  		} else// Directory  		 {  			sFolder currFolder = new sFolder ();  			currFolder.name = new String (br.ReadChars (id - 0x80));  			currFolder.id = br.ReadUInt16 ();  			if (!(main.folders is List<sFolder>))  				main.folders = new List<sFolder> ();  			main.folders.Add (currFolder);  		}  		id = br.ReadByte ();  	}  	arc.btnf.entries.Add (main);  	br.BaseStream.Position = posmain;  }  
Magic Number,Pack,NARC,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\NARC.cs,Unpack,The following statement contains a magic number: for (int m = 0; m < num_mains; m++) {  	BTNF_MainEntry main = new BTNF_MainEntry ();  	main.offset = br.ReadUInt32 ();  	main.first_pos = br.ReadUInt16 ();  	main.parent = br.ReadUInt16 ();  	uint idFile = main.first_pos;  	if (main.offset < 0x8)// There aren't names (in Pokemon games)  	 {  		for (int i = 0; i < arc.btaf.nFiles; i++) {  			sFile currFile = new sFile ();  			currFile.name = Path.GetFileNameWithoutExtension (file.name) + '_' + idFile.ToString ();  			currFile.id = (ushort)idFile++;  			// FAT data  			currFile.path = file.path;  			currFile.offset = arc.btaf.entries [currFile.id].start_offset + gmif_offset;  			currFile.size = (arc.btaf.entries [currFile.id].end_offset - arc.btaf.entries [currFile.id].start_offset);  			// Get the extension  			long currPos = br.BaseStream.Position;  			br.BaseStream.Position = currFile.offset;  			char[] ext;  			if (currFile.size < 4)  				ext = Encoding.ASCII.GetChars (br.ReadBytes ((int)currFile.size));  			else  				ext = Encoding.ASCII.GetChars (br.ReadBytes (4));  			String extS = ".";  			for (int s = 0; s < ext.Length; s++)  				if (Char.IsLetterOrDigit (ext [s]) || ext [s] == 0x20)  					extS += ext [s];  			if (extS != "." && extS.Length == 5 && currFile.size >= 4)  				currFile.name += extS;  			else  				currFile.name += ".bin";  			br.BaseStream.Position = currPos;  			if (!(main.files is List<sFile>))  				main.files = new List<sFile> ();  			main.files.Add (currFile);  		}  		arc.btnf.entries.Add (main);  		continue;  	}  	long posmain = br.BaseStream.Position;  	br.BaseStream.Position = main.offset + mainTables_offset;  	int id = br.ReadByte ();  	while (id != 0x0)// Indicate the end of the subtable  	 {  		if ((id & 0x80) == 0)// File  		 {  			sFile currFile = new sFile ();  			currFile.id = (ushort)idFile++;  			currFile.name = new String (br.ReadChars (id));  			// FAT data  			currFile.path = file.path;  			currFile.offset = arc.btaf.entries [currFile.id].start_offset + gmif_offset;  			currFile.size = (arc.btaf.entries [currFile.id].end_offset - arc.btaf.entries [currFile.id].start_offset);  			if (!(main.files is List<sFile>))  				main.files = new List<sFile> ();  			main.files.Add (currFile);  		} else// Directory  		 {  			sFolder currFolder = new sFolder ();  			currFolder.name = new String (br.ReadChars (id - 0x80));  			currFolder.id = br.ReadUInt16 ();  			if (!(main.folders is List<sFolder>))  				main.folders = new List<sFolder> ();  			main.folders.Add (currFolder);  		}  		id = br.ReadByte ();  	}  	arc.btnf.entries.Add (main);  	br.BaseStream.Position = posmain;  }  
Magic Number,Pack,NARC,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\NARC.cs,Unpack,The following statement contains a magic number: for (int m = 0; m < num_mains; m++) {  	BTNF_MainEntry main = new BTNF_MainEntry ();  	main.offset = br.ReadUInt32 ();  	main.first_pos = br.ReadUInt16 ();  	main.parent = br.ReadUInt16 ();  	uint idFile = main.first_pos;  	if (main.offset < 0x8)// There aren't names (in Pokemon games)  	 {  		for (int i = 0; i < arc.btaf.nFiles; i++) {  			sFile currFile = new sFile ();  			currFile.name = Path.GetFileNameWithoutExtension (file.name) + '_' + idFile.ToString ();  			currFile.id = (ushort)idFile++;  			// FAT data  			currFile.path = file.path;  			currFile.offset = arc.btaf.entries [currFile.id].start_offset + gmif_offset;  			currFile.size = (arc.btaf.entries [currFile.id].end_offset - arc.btaf.entries [currFile.id].start_offset);  			// Get the extension  			long currPos = br.BaseStream.Position;  			br.BaseStream.Position = currFile.offset;  			char[] ext;  			if (currFile.size < 4)  				ext = Encoding.ASCII.GetChars (br.ReadBytes ((int)currFile.size));  			else  				ext = Encoding.ASCII.GetChars (br.ReadBytes (4));  			String extS = ".";  			for (int s = 0; s < ext.Length; s++)  				if (Char.IsLetterOrDigit (ext [s]) || ext [s] == 0x20)  					extS += ext [s];  			if (extS != "." && extS.Length == 5 && currFile.size >= 4)  				currFile.name += extS;  			else  				currFile.name += ".bin";  			br.BaseStream.Position = currPos;  			if (!(main.files is List<sFile>))  				main.files = new List<sFile> ();  			main.files.Add (currFile);  		}  		arc.btnf.entries.Add (main);  		continue;  	}  	long posmain = br.BaseStream.Position;  	br.BaseStream.Position = main.offset + mainTables_offset;  	int id = br.ReadByte ();  	while (id != 0x0)// Indicate the end of the subtable  	 {  		if ((id & 0x80) == 0)// File  		 {  			sFile currFile = new sFile ();  			currFile.id = (ushort)idFile++;  			currFile.name = new String (br.ReadChars (id));  			// FAT data  			currFile.path = file.path;  			currFile.offset = arc.btaf.entries [currFile.id].start_offset + gmif_offset;  			currFile.size = (arc.btaf.entries [currFile.id].end_offset - arc.btaf.entries [currFile.id].start_offset);  			if (!(main.files is List<sFile>))  				main.files = new List<sFile> ();  			main.files.Add (currFile);  		} else// Directory  		 {  			sFolder currFolder = new sFolder ();  			currFolder.name = new String (br.ReadChars (id - 0x80));  			currFolder.id = br.ReadUInt16 ();  			if (!(main.folders is List<sFolder>))  				main.folders = new List<sFolder> ();  			main.folders.Add (currFolder);  		}  		id = br.ReadByte ();  	}  	arc.btnf.entries.Add (main);  	br.BaseStream.Position = posmain;  }  
Magic Number,Pack,NARC,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\NARC.cs,Unpack,The following statement contains a magic number: if (main.offset < 0x8)// There aren't names (in Pokemon games)   {  	for (int i = 0; i < arc.btaf.nFiles; i++) {  		sFile currFile = new sFile ();  		currFile.name = Path.GetFileNameWithoutExtension (file.name) + '_' + idFile.ToString ();  		currFile.id = (ushort)idFile++;  		// FAT data  		currFile.path = file.path;  		currFile.offset = arc.btaf.entries [currFile.id].start_offset + gmif_offset;  		currFile.size = (arc.btaf.entries [currFile.id].end_offset - arc.btaf.entries [currFile.id].start_offset);  		// Get the extension  		long currPos = br.BaseStream.Position;  		br.BaseStream.Position = currFile.offset;  		char[] ext;  		if (currFile.size < 4)  			ext = Encoding.ASCII.GetChars (br.ReadBytes ((int)currFile.size));  		else  			ext = Encoding.ASCII.GetChars (br.ReadBytes (4));  		String extS = ".";  		for (int s = 0; s < ext.Length; s++)  			if (Char.IsLetterOrDigit (ext [s]) || ext [s] == 0x20)  				extS += ext [s];  		if (extS != "." && extS.Length == 5 && currFile.size >= 4)  			currFile.name += extS;  		else  			currFile.name += ".bin";  		br.BaseStream.Position = currPos;  		if (!(main.files is List<sFile>))  			main.files = new List<sFile> ();  		main.files.Add (currFile);  	}  	arc.btnf.entries.Add (main);  	continue;  }  
Magic Number,Pack,NARC,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\NARC.cs,Unpack,The following statement contains a magic number: if (main.offset < 0x8)// There aren't names (in Pokemon games)   {  	for (int i = 0; i < arc.btaf.nFiles; i++) {  		sFile currFile = new sFile ();  		currFile.name = Path.GetFileNameWithoutExtension (file.name) + '_' + idFile.ToString ();  		currFile.id = (ushort)idFile++;  		// FAT data  		currFile.path = file.path;  		currFile.offset = arc.btaf.entries [currFile.id].start_offset + gmif_offset;  		currFile.size = (arc.btaf.entries [currFile.id].end_offset - arc.btaf.entries [currFile.id].start_offset);  		// Get the extension  		long currPos = br.BaseStream.Position;  		br.BaseStream.Position = currFile.offset;  		char[] ext;  		if (currFile.size < 4)  			ext = Encoding.ASCII.GetChars (br.ReadBytes ((int)currFile.size));  		else  			ext = Encoding.ASCII.GetChars (br.ReadBytes (4));  		String extS = ".";  		for (int s = 0; s < ext.Length; s++)  			if (Char.IsLetterOrDigit (ext [s]) || ext [s] == 0x20)  				extS += ext [s];  		if (extS != "." && extS.Length == 5 && currFile.size >= 4)  			currFile.name += extS;  		else  			currFile.name += ".bin";  		br.BaseStream.Position = currPos;  		if (!(main.files is List<sFile>))  			main.files = new List<sFile> ();  		main.files.Add (currFile);  	}  	arc.btnf.entries.Add (main);  	continue;  }  
Magic Number,Pack,NARC,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\NARC.cs,Unpack,The following statement contains a magic number: if (main.offset < 0x8)// There aren't names (in Pokemon games)   {  	for (int i = 0; i < arc.btaf.nFiles; i++) {  		sFile currFile = new sFile ();  		currFile.name = Path.GetFileNameWithoutExtension (file.name) + '_' + idFile.ToString ();  		currFile.id = (ushort)idFile++;  		// FAT data  		currFile.path = file.path;  		currFile.offset = arc.btaf.entries [currFile.id].start_offset + gmif_offset;  		currFile.size = (arc.btaf.entries [currFile.id].end_offset - arc.btaf.entries [currFile.id].start_offset);  		// Get the extension  		long currPos = br.BaseStream.Position;  		br.BaseStream.Position = currFile.offset;  		char[] ext;  		if (currFile.size < 4)  			ext = Encoding.ASCII.GetChars (br.ReadBytes ((int)currFile.size));  		else  			ext = Encoding.ASCII.GetChars (br.ReadBytes (4));  		String extS = ".";  		for (int s = 0; s < ext.Length; s++)  			if (Char.IsLetterOrDigit (ext [s]) || ext [s] == 0x20)  				extS += ext [s];  		if (extS != "." && extS.Length == 5 && currFile.size >= 4)  			currFile.name += extS;  		else  			currFile.name += ".bin";  		br.BaseStream.Position = currPos;  		if (!(main.files is List<sFile>))  			main.files = new List<sFile> ();  		main.files.Add (currFile);  	}  	arc.btnf.entries.Add (main);  	continue;  }  
Magic Number,Pack,NARC,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\NARC.cs,Unpack,The following statement contains a magic number: if (main.offset < 0x8)// There aren't names (in Pokemon games)   {  	for (int i = 0; i < arc.btaf.nFiles; i++) {  		sFile currFile = new sFile ();  		currFile.name = Path.GetFileNameWithoutExtension (file.name) + '_' + idFile.ToString ();  		currFile.id = (ushort)idFile++;  		// FAT data  		currFile.path = file.path;  		currFile.offset = arc.btaf.entries [currFile.id].start_offset + gmif_offset;  		currFile.size = (arc.btaf.entries [currFile.id].end_offset - arc.btaf.entries [currFile.id].start_offset);  		// Get the extension  		long currPos = br.BaseStream.Position;  		br.BaseStream.Position = currFile.offset;  		char[] ext;  		if (currFile.size < 4)  			ext = Encoding.ASCII.GetChars (br.ReadBytes ((int)currFile.size));  		else  			ext = Encoding.ASCII.GetChars (br.ReadBytes (4));  		String extS = ".";  		for (int s = 0; s < ext.Length; s++)  			if (Char.IsLetterOrDigit (ext [s]) || ext [s] == 0x20)  				extS += ext [s];  		if (extS != "." && extS.Length == 5 && currFile.size >= 4)  			currFile.name += extS;  		else  			currFile.name += ".bin";  		br.BaseStream.Position = currPos;  		if (!(main.files is List<sFile>))  			main.files = new List<sFile> ();  		main.files.Add (currFile);  	}  	arc.btnf.entries.Add (main);  	continue;  }  
Magic Number,Pack,NARC,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\NARC.cs,Unpack,The following statement contains a magic number: for (int i = 0; i < arc.btaf.nFiles; i++) {  	sFile currFile = new sFile ();  	currFile.name = Path.GetFileNameWithoutExtension (file.name) + '_' + idFile.ToString ();  	currFile.id = (ushort)idFile++;  	// FAT data  	currFile.path = file.path;  	currFile.offset = arc.btaf.entries [currFile.id].start_offset + gmif_offset;  	currFile.size = (arc.btaf.entries [currFile.id].end_offset - arc.btaf.entries [currFile.id].start_offset);  	// Get the extension  	long currPos = br.BaseStream.Position;  	br.BaseStream.Position = currFile.offset;  	char[] ext;  	if (currFile.size < 4)  		ext = Encoding.ASCII.GetChars (br.ReadBytes ((int)currFile.size));  	else  		ext = Encoding.ASCII.GetChars (br.ReadBytes (4));  	String extS = ".";  	for (int s = 0; s < ext.Length; s++)  		if (Char.IsLetterOrDigit (ext [s]) || ext [s] == 0x20)  			extS += ext [s];  	if (extS != "." && extS.Length == 5 && currFile.size >= 4)  		currFile.name += extS;  	else  		currFile.name += ".bin";  	br.BaseStream.Position = currPos;  	if (!(main.files is List<sFile>))  		main.files = new List<sFile> ();  	main.files.Add (currFile);  }  
Magic Number,Pack,NARC,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\NARC.cs,Unpack,The following statement contains a magic number: for (int i = 0; i < arc.btaf.nFiles; i++) {  	sFile currFile = new sFile ();  	currFile.name = Path.GetFileNameWithoutExtension (file.name) + '_' + idFile.ToString ();  	currFile.id = (ushort)idFile++;  	// FAT data  	currFile.path = file.path;  	currFile.offset = arc.btaf.entries [currFile.id].start_offset + gmif_offset;  	currFile.size = (arc.btaf.entries [currFile.id].end_offset - arc.btaf.entries [currFile.id].start_offset);  	// Get the extension  	long currPos = br.BaseStream.Position;  	br.BaseStream.Position = currFile.offset;  	char[] ext;  	if (currFile.size < 4)  		ext = Encoding.ASCII.GetChars (br.ReadBytes ((int)currFile.size));  	else  		ext = Encoding.ASCII.GetChars (br.ReadBytes (4));  	String extS = ".";  	for (int s = 0; s < ext.Length; s++)  		if (Char.IsLetterOrDigit (ext [s]) || ext [s] == 0x20)  			extS += ext [s];  	if (extS != "." && extS.Length == 5 && currFile.size >= 4)  		currFile.name += extS;  	else  		currFile.name += ".bin";  	br.BaseStream.Position = currPos;  	if (!(main.files is List<sFile>))  		main.files = new List<sFile> ();  	main.files.Add (currFile);  }  
Magic Number,Pack,NARC,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\NARC.cs,Unpack,The following statement contains a magic number: for (int i = 0; i < arc.btaf.nFiles; i++) {  	sFile currFile = new sFile ();  	currFile.name = Path.GetFileNameWithoutExtension (file.name) + '_' + idFile.ToString ();  	currFile.id = (ushort)idFile++;  	// FAT data  	currFile.path = file.path;  	currFile.offset = arc.btaf.entries [currFile.id].start_offset + gmif_offset;  	currFile.size = (arc.btaf.entries [currFile.id].end_offset - arc.btaf.entries [currFile.id].start_offset);  	// Get the extension  	long currPos = br.BaseStream.Position;  	br.BaseStream.Position = currFile.offset;  	char[] ext;  	if (currFile.size < 4)  		ext = Encoding.ASCII.GetChars (br.ReadBytes ((int)currFile.size));  	else  		ext = Encoding.ASCII.GetChars (br.ReadBytes (4));  	String extS = ".";  	for (int s = 0; s < ext.Length; s++)  		if (Char.IsLetterOrDigit (ext [s]) || ext [s] == 0x20)  			extS += ext [s];  	if (extS != "." && extS.Length == 5 && currFile.size >= 4)  		currFile.name += extS;  	else  		currFile.name += ".bin";  	br.BaseStream.Position = currPos;  	if (!(main.files is List<sFile>))  		main.files = new List<sFile> ();  	main.files.Add (currFile);  }  
Magic Number,Pack,NARC,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\NARC.cs,Unpack,The following statement contains a magic number: for (int i = 0; i < arc.btaf.nFiles; i++) {  	sFile currFile = new sFile ();  	currFile.name = Path.GetFileNameWithoutExtension (file.name) + '_' + idFile.ToString ();  	currFile.id = (ushort)idFile++;  	// FAT data  	currFile.path = file.path;  	currFile.offset = arc.btaf.entries [currFile.id].start_offset + gmif_offset;  	currFile.size = (arc.btaf.entries [currFile.id].end_offset - arc.btaf.entries [currFile.id].start_offset);  	// Get the extension  	long currPos = br.BaseStream.Position;  	br.BaseStream.Position = currFile.offset;  	char[] ext;  	if (currFile.size < 4)  		ext = Encoding.ASCII.GetChars (br.ReadBytes ((int)currFile.size));  	else  		ext = Encoding.ASCII.GetChars (br.ReadBytes (4));  	String extS = ".";  	for (int s = 0; s < ext.Length; s++)  		if (Char.IsLetterOrDigit (ext [s]) || ext [s] == 0x20)  			extS += ext [s];  	if (extS != "." && extS.Length == 5 && currFile.size >= 4)  		currFile.name += extS;  	else  		currFile.name += ".bin";  	br.BaseStream.Position = currPos;  	if (!(main.files is List<sFile>))  		main.files = new List<sFile> ();  	main.files.Add (currFile);  }  
Magic Number,Pack,NARC,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\NARC.cs,Unpack,The following statement contains a magic number: if (currFile.size < 4)  	ext = Encoding.ASCII.GetChars (br.ReadBytes ((int)currFile.size));  else  	ext = Encoding.ASCII.GetChars (br.ReadBytes (4));  
Magic Number,Pack,NARC,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\NARC.cs,Unpack,The following statement contains a magic number: if (currFile.size < 4)  	ext = Encoding.ASCII.GetChars (br.ReadBytes ((int)currFile.size));  else  	ext = Encoding.ASCII.GetChars (br.ReadBytes (4));  
Magic Number,Pack,NARC,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\NARC.cs,Unpack,The following statement contains a magic number: ext = Encoding.ASCII.GetChars (br.ReadBytes (4));  
Magic Number,Pack,NARC,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\NARC.cs,Unpack,The following statement contains a magic number: if (extS != "." && extS.Length == 5 && currFile.size >= 4)  	currFile.name += extS;  else  	currFile.name += ".bin";  
Magic Number,Pack,NARC,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\NARC.cs,Unpack,The following statement contains a magic number: if (extS != "." && extS.Length == 5 && currFile.size >= 4)  	currFile.name += extS;  else  	currFile.name += ".bin";  
Magic Number,Pack,NARC,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\NARC.cs,Unpack,The following statement contains a magic number: br.BaseStream.Position = gmif_offset - 8;  
Magic Number,Pack,NARC,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\NARC.cs,Unpack,The following statement contains a magic number: arc.gmif.id = br.ReadChars (4);  
Magic Number,Pack,NARC,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\NARC.cs,Write_GMIF,The following statement contains a magic number: while (bw.BaseStream.Position % 4 != 0)  	bw.Write ((byte)0xFF);  
Magic Number,Pack,Utility,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\Utility.cs,Pack,The following statement contains a magic number: for (int i = 0; i < fatSize / 8; i++) {  	bw.Write (offset);  	sFile currFile = Get_File (i + unpacked.id' offset' fileOut' unpacked);  	offset += currFile.size;  	bw.Write (offset);  	// Write the file to the buffer  	br = new BinaryReader (File.OpenRead (currFile.path));  	br.BaseStream.Position = currFile.offset;  	buffer.AddRange (br.ReadBytes ((int)currFile.size));  	br.Close ();  	// Padding  	if (offset % 4 != 0) {  		for (int r = 0; r < 4 - (offset % 4); r++)  			buffer.Add (0xFF);  		offset += 4 - (offset % 4);  	}  }  
Magic Number,Pack,Utility,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\Utility.cs,Pack,The following statement contains a magic number: for (int i = 0; i < fatSize / 8; i++) {  	bw.Write (offset);  	sFile currFile = Get_File (i + unpacked.id' offset' fileOut' unpacked);  	offset += currFile.size;  	bw.Write (offset);  	// Write the file to the buffer  	br = new BinaryReader (File.OpenRead (currFile.path));  	br.BaseStream.Position = currFile.offset;  	buffer.AddRange (br.ReadBytes ((int)currFile.size));  	br.Close ();  	// Padding  	if (offset % 4 != 0) {  		for (int r = 0; r < 4 - (offset % 4); r++)  			buffer.Add (0xFF);  		offset += 4 - (offset % 4);  	}  }  
Magic Number,Pack,Utility,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\Utility.cs,Pack,The following statement contains a magic number: for (int i = 0; i < fatSize / 8; i++) {  	bw.Write (offset);  	sFile currFile = Get_File (i + unpacked.id' offset' fileOut' unpacked);  	offset += currFile.size;  	bw.Write (offset);  	// Write the file to the buffer  	br = new BinaryReader (File.OpenRead (currFile.path));  	br.BaseStream.Position = currFile.offset;  	buffer.AddRange (br.ReadBytes ((int)currFile.size));  	br.Close ();  	// Padding  	if (offset % 4 != 0) {  		for (int r = 0; r < 4 - (offset % 4); r++)  			buffer.Add (0xFF);  		offset += 4 - (offset % 4);  	}  }  
Magic Number,Pack,Utility,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\Utility.cs,Pack,The following statement contains a magic number: for (int i = 0; i < fatSize / 8; i++) {  	bw.Write (offset);  	sFile currFile = Get_File (i + unpacked.id' offset' fileOut' unpacked);  	offset += currFile.size;  	bw.Write (offset);  	// Write the file to the buffer  	br = new BinaryReader (File.OpenRead (currFile.path));  	br.BaseStream.Position = currFile.offset;  	buffer.AddRange (br.ReadBytes ((int)currFile.size));  	br.Close ();  	// Padding  	if (offset % 4 != 0) {  		for (int r = 0; r < 4 - (offset % 4); r++)  			buffer.Add (0xFF);  		offset += 4 - (offset % 4);  	}  }  
Magic Number,Pack,Utility,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\Utility.cs,Pack,The following statement contains a magic number: for (int i = 0; i < fatSize / 8; i++) {  	bw.Write (offset);  	sFile currFile = Get_File (i + unpacked.id' offset' fileOut' unpacked);  	offset += currFile.size;  	bw.Write (offset);  	// Write the file to the buffer  	br = new BinaryReader (File.OpenRead (currFile.path));  	br.BaseStream.Position = currFile.offset;  	buffer.AddRange (br.ReadBytes ((int)currFile.size));  	br.Close ();  	// Padding  	if (offset % 4 != 0) {  		for (int r = 0; r < 4 - (offset % 4); r++)  			buffer.Add (0xFF);  		offset += 4 - (offset % 4);  	}  }  
Magic Number,Pack,Utility,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\Utility.cs,Pack,The following statement contains a magic number: for (int i = 0; i < fatSize / 8; i++) {  	bw.Write (offset);  	sFile currFile = Get_File (i + unpacked.id' offset' fileOut' unpacked);  	offset += currFile.size;  	bw.Write (offset);  	// Write the file to the buffer  	br = new BinaryReader (File.OpenRead (currFile.path));  	br.BaseStream.Position = currFile.offset;  	buffer.AddRange (br.ReadBytes ((int)currFile.size));  	br.Close ();  	// Padding  	if (offset % 4 != 0) {  		for (int r = 0; r < 4 - (offset % 4); r++)  			buffer.Add (0xFF);  		offset += 4 - (offset % 4);  	}  }  
Magic Number,Pack,Utility,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\Utility.cs,Pack,The following statement contains a magic number: if (offset % 4 != 0) {  	for (int r = 0; r < 4 - (offset % 4); r++)  		buffer.Add (0xFF);  	offset += 4 - (offset % 4);  }  
Magic Number,Pack,Utility,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\Utility.cs,Pack,The following statement contains a magic number: if (offset % 4 != 0) {  	for (int r = 0; r < 4 - (offset % 4); r++)  		buffer.Add (0xFF);  	offset += 4 - (offset % 4);  }  
Magic Number,Pack,Utility,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\Utility.cs,Pack,The following statement contains a magic number: if (offset % 4 != 0) {  	for (int r = 0; r < 4 - (offset % 4); r++)  		buffer.Add (0xFF);  	offset += 4 - (offset % 4);  }  
Magic Number,Pack,Utility,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\Utility.cs,Pack,The following statement contains a magic number: if (offset % 4 != 0) {  	for (int r = 0; r < 4 - (offset % 4); r++)  		buffer.Add (0xFF);  	offset += 4 - (offset % 4);  }  
Magic Number,Pack,Utility,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\Utility.cs,Pack,The following statement contains a magic number: if (offset % 4 != 0) {  	for (int r = 0; r < 4 - (offset % 4); r++)  		buffer.Add (0xFF);  	offset += 4 - (offset % 4);  }  
Magic Number,Pack,Utility,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\Utility.cs,Pack,The following statement contains a magic number: for (int r = 0; r < 4 - (offset % 4); r++)  	buffer.Add (0xFF);  
Magic Number,Pack,Utility,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\Utility.cs,Pack,The following statement contains a magic number: for (int r = 0; r < 4 - (offset % 4); r++)  	buffer.Add (0xFF);  
Magic Number,Pack,Utility,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\Utility.cs,Pack,The following statement contains a magic number: offset += 4 - (offset % 4);  
Magic Number,Pack,Utility,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\Utility.cs,Pack,The following statement contains a magic number: offset += 4 - (offset % 4);  
Magic Number,Pack.Games,_4HEROSLIGHT,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\Games\4HEROSLIGHT.cs,Unpack_FLSC,The following statement contains a magic number: for (int i = 0; i < num_files; i++) {  	sFile newFile = new sFile ();  	newFile.name = name + '_' + i.ToString ();  	newFile.offset = br.ReadUInt32 ();  	newFile.size = br.ReadUInt32 ();  	newFile.path = fileIn;  	// Get the extension  	long currPos = br.BaseStream.Position;  	br.BaseStream.Position = newFile.offset;  	newFile.name += new String (Encoding.ASCII.GetChars (br.ReadBytes (4)));  	br.BaseStream.Position = currPos;  	unpacked.files.Add (newFile);  }  
Magic Number,Pack.Games,_4HEROSLIGHT,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\Games\4HEROSLIGHT.cs,Unpack_FLSC,The following statement contains a magic number: newFile.name += new String (Encoding.ASCII.GetChars (br.ReadBytes (4)));  
Magic Number,Pack.Games,AWITCHSTALE,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\Games\AWITCHSTALE.cs,Unpack,The following statement contains a magic number: if (file.id == 0x3F) {  	sFolder unpack = new sFolder ();  	unpack.files = new List<sFile> ();  	BinaryReader br = new BinaryReader (File.OpenRead (file.path));  	uint fat_size = br.ReadUInt32 ();  	uint num_files = fat_size / 4 - 1;  	// Include a ptr to the fat section  	for (int i = 0; i < num_files; i++) {  		sFile cfile = new sFile ();  		cfile.name = "File" + i.ToString () + ".bin";  		cfile.path = file.path;  		br.BaseStream.Position = 8 + i * 4;  		cfile.offset = br.ReadUInt32 ();  		br.BaseStream.Position = cfile.offset;  		cfile.size = br.ReadUInt32 ();  		cfile.offset += 4;  		unpack.files.Add (cfile);  	}  	br.Close ();  	br = null;  	return unpack;  }  
Magic Number,Pack.Games,AWITCHSTALE,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\Games\AWITCHSTALE.cs,Unpack,The following statement contains a magic number: if (file.id == 0x3F) {  	sFolder unpack = new sFolder ();  	unpack.files = new List<sFile> ();  	BinaryReader br = new BinaryReader (File.OpenRead (file.path));  	uint fat_size = br.ReadUInt32 ();  	uint num_files = fat_size / 4 - 1;  	// Include a ptr to the fat section  	for (int i = 0; i < num_files; i++) {  		sFile cfile = new sFile ();  		cfile.name = "File" + i.ToString () + ".bin";  		cfile.path = file.path;  		br.BaseStream.Position = 8 + i * 4;  		cfile.offset = br.ReadUInt32 ();  		br.BaseStream.Position = cfile.offset;  		cfile.size = br.ReadUInt32 ();  		cfile.offset += 4;  		unpack.files.Add (cfile);  	}  	br.Close ();  	br = null;  	return unpack;  }  
Magic Number,Pack.Games,AWITCHSTALE,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\Games\AWITCHSTALE.cs,Unpack,The following statement contains a magic number: if (file.id == 0x3F) {  	sFolder unpack = new sFolder ();  	unpack.files = new List<sFile> ();  	BinaryReader br = new BinaryReader (File.OpenRead (file.path));  	uint fat_size = br.ReadUInt32 ();  	uint num_files = fat_size / 4 - 1;  	// Include a ptr to the fat section  	for (int i = 0; i < num_files; i++) {  		sFile cfile = new sFile ();  		cfile.name = "File" + i.ToString () + ".bin";  		cfile.path = file.path;  		br.BaseStream.Position = 8 + i * 4;  		cfile.offset = br.ReadUInt32 ();  		br.BaseStream.Position = cfile.offset;  		cfile.size = br.ReadUInt32 ();  		cfile.offset += 4;  		unpack.files.Add (cfile);  	}  	br.Close ();  	br = null;  	return unpack;  }  
Magic Number,Pack.Games,AWITCHSTALE,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\Games\AWITCHSTALE.cs,Unpack,The following statement contains a magic number: if (file.id == 0x3F) {  	sFolder unpack = new sFolder ();  	unpack.files = new List<sFile> ();  	BinaryReader br = new BinaryReader (File.OpenRead (file.path));  	uint fat_size = br.ReadUInt32 ();  	uint num_files = fat_size / 4 - 1;  	// Include a ptr to the fat section  	for (int i = 0; i < num_files; i++) {  		sFile cfile = new sFile ();  		cfile.name = "File" + i.ToString () + ".bin";  		cfile.path = file.path;  		br.BaseStream.Position = 8 + i * 4;  		cfile.offset = br.ReadUInt32 ();  		br.BaseStream.Position = cfile.offset;  		cfile.size = br.ReadUInt32 ();  		cfile.offset += 4;  		unpack.files.Add (cfile);  	}  	br.Close ();  	br = null;  	return unpack;  }  
Magic Number,Pack.Games,AWITCHSTALE,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\Games\AWITCHSTALE.cs,Unpack,The following statement contains a magic number: for (int i = 0; i < num_files; i++) {  	sFile cfile = new sFile ();  	cfile.name = "File" + i.ToString () + ".bin";  	cfile.path = file.path;  	br.BaseStream.Position = 8 + i * 4;  	cfile.offset = br.ReadUInt32 ();  	br.BaseStream.Position = cfile.offset;  	cfile.size = br.ReadUInt32 ();  	cfile.offset += 4;  	unpack.files.Add (cfile);  }  
Magic Number,Pack.Games,AWITCHSTALE,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\Games\AWITCHSTALE.cs,Unpack,The following statement contains a magic number: for (int i = 0; i < num_files; i++) {  	sFile cfile = new sFile ();  	cfile.name = "File" + i.ToString () + ".bin";  	cfile.path = file.path;  	br.BaseStream.Position = 8 + i * 4;  	cfile.offset = br.ReadUInt32 ();  	br.BaseStream.Position = cfile.offset;  	cfile.size = br.ReadUInt32 ();  	cfile.offset += 4;  	unpack.files.Add (cfile);  }  
Magic Number,Pack.Games,AWITCHSTALE,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\Games\AWITCHSTALE.cs,Unpack,The following statement contains a magic number: for (int i = 0; i < num_files; i++) {  	sFile cfile = new sFile ();  	cfile.name = "File" + i.ToString () + ".bin";  	cfile.path = file.path;  	br.BaseStream.Position = 8 + i * 4;  	cfile.offset = br.ReadUInt32 ();  	br.BaseStream.Position = cfile.offset;  	cfile.size = br.ReadUInt32 ();  	cfile.offset += 4;  	unpack.files.Add (cfile);  }  
Magic Number,Pack.Games,AWITCHSTALE,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\Games\AWITCHSTALE.cs,Unpack,The following statement contains a magic number: br.BaseStream.Position = 8 + i * 4;  
Magic Number,Pack.Games,AWITCHSTALE,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\Games\AWITCHSTALE.cs,Unpack,The following statement contains a magic number: br.BaseStream.Position = 8 + i * 4;  
Magic Number,Pack.Games,AWITCHSTALE,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\Games\AWITCHSTALE.cs,Unpack,The following statement contains a magic number: cfile.offset += 4;  
Magic Number,Pack.Games,BSIGILBE,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\Games\BSIGILBE.cs,Decrypt,The following statement contains a magic number: control += (uint)(dataIn [3] << 8);  
Magic Number,Pack.Games,BSIGILBE,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\Games\BSIGILBE.cs,Decrypt,The following statement contains a magic number: control += (uint)(dataIn [3] << 8);  
Magic Number,Pack.Games,BSIGILBE,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\Games\BSIGILBE.cs,Decrypt,The following statement contains a magic number: control += (uint)(dataIn [4] << 16);  
Magic Number,Pack.Games,BSIGILBE,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\Games\BSIGILBE.cs,Decrypt,The following statement contains a magic number: control += (uint)(dataIn [4] << 16);  
Magic Number,Pack.Games,BSIGILBE,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\Games\BSIGILBE.cs,Decrypt,The following statement contains a magic number: control += (uint)(dataIn [5] << 24);  
Magic Number,Pack.Games,BSIGILBE,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\Games\BSIGILBE.cs,Decrypt,The following statement contains a magic number: control += (uint)(dataIn [5] << 24);  
Magic Number,Pack.Games,BSIGILBE,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\Games\BSIGILBE.cs,Decrypt,The following statement contains a magic number: while (pos_buf < dec_size) {  	tcontrol = control >> 1;  	if ((control & 1) == 0) {  		buffer [pos_buf++] = (byte)tcontrol;  		control = tcontrol >> 8;  		unread_bits -= 9;  		if (pos_buf >= max_byte_read) {  			max_byte_read <<= 1;  			bits_mask++;  			mask <<= 1;  			mask++;  		}  	} else {  		int index = (int)(tcontrol & mask);  		control = tcontrol >> bits_mask;  		int it = (int)(min_it & (tcontrol >> bits_mask));  		it++;  		control >>= upd_bit;  		for (int i = 0; i < it; i++) {  			if (pos_buf == buffer.Length)  				Array.Resize (ref buffer' buffer.Length + 1);  			buffer [pos_buf++] = buffer [index++];  		}  		int bits_read = bits_mask + upd_bit;  		bits_read++;  		unread_bits -= bits_read;  		while (pos_buf >= max_byte_read) {  			max_byte_read <<= 1;  			bits_mask++;  			mask <<= 1;  			mask++;  		}  	}  	// Update control              	while (unread_bits <= 0x18) {  		byte bc = dataIn [pos_dat++];  		control |= (uint)(bc << unread_bits);  		unread_bits += 8;  	}  }  
Magic Number,Pack.Games,BSIGILBE,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\Games\BSIGILBE.cs,Decrypt,The following statement contains a magic number: while (pos_buf < dec_size) {  	tcontrol = control >> 1;  	if ((control & 1) == 0) {  		buffer [pos_buf++] = (byte)tcontrol;  		control = tcontrol >> 8;  		unread_bits -= 9;  		if (pos_buf >= max_byte_read) {  			max_byte_read <<= 1;  			bits_mask++;  			mask <<= 1;  			mask++;  		}  	} else {  		int index = (int)(tcontrol & mask);  		control = tcontrol >> bits_mask;  		int it = (int)(min_it & (tcontrol >> bits_mask));  		it++;  		control >>= upd_bit;  		for (int i = 0; i < it; i++) {  			if (pos_buf == buffer.Length)  				Array.Resize (ref buffer' buffer.Length + 1);  			buffer [pos_buf++] = buffer [index++];  		}  		int bits_read = bits_mask + upd_bit;  		bits_read++;  		unread_bits -= bits_read;  		while (pos_buf >= max_byte_read) {  			max_byte_read <<= 1;  			bits_mask++;  			mask <<= 1;  			mask++;  		}  	}  	// Update control              	while (unread_bits <= 0x18) {  		byte bc = dataIn [pos_dat++];  		control |= (uint)(bc << unread_bits);  		unread_bits += 8;  	}  }  
Magic Number,Pack.Games,BSIGILBE,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\Games\BSIGILBE.cs,Decrypt,The following statement contains a magic number: while (pos_buf < dec_size) {  	tcontrol = control >> 1;  	if ((control & 1) == 0) {  		buffer [pos_buf++] = (byte)tcontrol;  		control = tcontrol >> 8;  		unread_bits -= 9;  		if (pos_buf >= max_byte_read) {  			max_byte_read <<= 1;  			bits_mask++;  			mask <<= 1;  			mask++;  		}  	} else {  		int index = (int)(tcontrol & mask);  		control = tcontrol >> bits_mask;  		int it = (int)(min_it & (tcontrol >> bits_mask));  		it++;  		control >>= upd_bit;  		for (int i = 0; i < it; i++) {  			if (pos_buf == buffer.Length)  				Array.Resize (ref buffer' buffer.Length + 1);  			buffer [pos_buf++] = buffer [index++];  		}  		int bits_read = bits_mask + upd_bit;  		bits_read++;  		unread_bits -= bits_read;  		while (pos_buf >= max_byte_read) {  			max_byte_read <<= 1;  			bits_mask++;  			mask <<= 1;  			mask++;  		}  	}  	// Update control              	while (unread_bits <= 0x18) {  		byte bc = dataIn [pos_dat++];  		control |= (uint)(bc << unread_bits);  		unread_bits += 8;  	}  }  
Magic Number,Pack.Games,BSIGILBE,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\Games\BSIGILBE.cs,Decrypt,The following statement contains a magic number: if ((control & 1) == 0) {  	buffer [pos_buf++] = (byte)tcontrol;  	control = tcontrol >> 8;  	unread_bits -= 9;  	if (pos_buf >= max_byte_read) {  		max_byte_read <<= 1;  		bits_mask++;  		mask <<= 1;  		mask++;  	}  } else {  	int index = (int)(tcontrol & mask);  	control = tcontrol >> bits_mask;  	int it = (int)(min_it & (tcontrol >> bits_mask));  	it++;  	control >>= upd_bit;  	for (int i = 0; i < it; i++) {  		if (pos_buf == buffer.Length)  			Array.Resize (ref buffer' buffer.Length + 1);  		buffer [pos_buf++] = buffer [index++];  	}  	int bits_read = bits_mask + upd_bit;  	bits_read++;  	unread_bits -= bits_read;  	while (pos_buf >= max_byte_read) {  		max_byte_read <<= 1;  		bits_mask++;  		mask <<= 1;  		mask++;  	}  }  
Magic Number,Pack.Games,BSIGILBE,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\Games\BSIGILBE.cs,Decrypt,The following statement contains a magic number: if ((control & 1) == 0) {  	buffer [pos_buf++] = (byte)tcontrol;  	control = tcontrol >> 8;  	unread_bits -= 9;  	if (pos_buf >= max_byte_read) {  		max_byte_read <<= 1;  		bits_mask++;  		mask <<= 1;  		mask++;  	}  } else {  	int index = (int)(tcontrol & mask);  	control = tcontrol >> bits_mask;  	int it = (int)(min_it & (tcontrol >> bits_mask));  	it++;  	control >>= upd_bit;  	for (int i = 0; i < it; i++) {  		if (pos_buf == buffer.Length)  			Array.Resize (ref buffer' buffer.Length + 1);  		buffer [pos_buf++] = buffer [index++];  	}  	int bits_read = bits_mask + upd_bit;  	bits_read++;  	unread_bits -= bits_read;  	while (pos_buf >= max_byte_read) {  		max_byte_read <<= 1;  		bits_mask++;  		mask <<= 1;  		mask++;  	}  }  
Magic Number,Pack.Games,BSIGILBE,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\Games\BSIGILBE.cs,Decrypt,The following statement contains a magic number: control = tcontrol >> 8;  
Magic Number,Pack.Games,BSIGILBE,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\Games\BSIGILBE.cs,Decrypt,The following statement contains a magic number: unread_bits -= 9;  
Magic Number,Pack.Games,BSIGILBE,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\Games\BSIGILBE.cs,Decrypt,The following statement contains a magic number: while (unread_bits <= 0x18) {  	byte bc = dataIn [pos_dat++];  	control |= (uint)(bc << unread_bits);  	unread_bits += 8;  }  
Magic Number,Pack.Games,BSIGILBE,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\Games\BSIGILBE.cs,Decrypt,The following statement contains a magic number: unread_bits += 8;  
Magic Number,Pack.Games,BSIGILBE,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\Games\BSIGILBE.cs,Decrypt,The following statement contains a magic number: while (pos_dat < dataIn.Length) {  	tcontrol = control >> 1;  	if ((control & 1) == 0) {  		if (pos_buf == buffer.Length)  			Array.Resize (ref buffer' buffer.Length + 1);  		buffer [pos_buf++] = (byte)tcontrol;  		control = tcontrol >> 8;  		unread_bits -= 9;  	} else {  		int index = dec_size - 1;  		index = (int)(tcontrol & index);  		index += pos_buf;  		index -= dec_size;  		uint bit_c = tcontrol >> h1;  		int it = (int)(min_it & (tcontrol >> h1));  		it++;  		control = bit_c >> upd_bit;  		for (int i = 0; i < it; i++) {  			if (pos_buf == buffer.Length)  				Array.Resize (ref buffer' buffer.Length + 1);  			buffer [pos_buf++] = buffer [index++];  		}  		unread_bits -= bits_mask;  	}  	// Update control  	do {  		if (pos_dat >= dataIn.Length)  			break;  		byte bc = dataIn [pos_dat++];  		control |= (uint)(bc << unread_bits);  		unread_bits += 8;  	} while (unread_bits <= 0x18);  }  
Magic Number,Pack.Games,BSIGILBE,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\Games\BSIGILBE.cs,Decrypt,The following statement contains a magic number: while (pos_dat < dataIn.Length) {  	tcontrol = control >> 1;  	if ((control & 1) == 0) {  		if (pos_buf == buffer.Length)  			Array.Resize (ref buffer' buffer.Length + 1);  		buffer [pos_buf++] = (byte)tcontrol;  		control = tcontrol >> 8;  		unread_bits -= 9;  	} else {  		int index = dec_size - 1;  		index = (int)(tcontrol & index);  		index += pos_buf;  		index -= dec_size;  		uint bit_c = tcontrol >> h1;  		int it = (int)(min_it & (tcontrol >> h1));  		it++;  		control = bit_c >> upd_bit;  		for (int i = 0; i < it; i++) {  			if (pos_buf == buffer.Length)  				Array.Resize (ref buffer' buffer.Length + 1);  			buffer [pos_buf++] = buffer [index++];  		}  		unread_bits -= bits_mask;  	}  	// Update control  	do {  		if (pos_dat >= dataIn.Length)  			break;  		byte bc = dataIn [pos_dat++];  		control |= (uint)(bc << unread_bits);  		unread_bits += 8;  	} while (unread_bits <= 0x18);  }  
Magic Number,Pack.Games,BSIGILBE,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\Games\BSIGILBE.cs,Decrypt,The following statement contains a magic number: while (pos_dat < dataIn.Length) {  	tcontrol = control >> 1;  	if ((control & 1) == 0) {  		if (pos_buf == buffer.Length)  			Array.Resize (ref buffer' buffer.Length + 1);  		buffer [pos_buf++] = (byte)tcontrol;  		control = tcontrol >> 8;  		unread_bits -= 9;  	} else {  		int index = dec_size - 1;  		index = (int)(tcontrol & index);  		index += pos_buf;  		index -= dec_size;  		uint bit_c = tcontrol >> h1;  		int it = (int)(min_it & (tcontrol >> h1));  		it++;  		control = bit_c >> upd_bit;  		for (int i = 0; i < it; i++) {  			if (pos_buf == buffer.Length)  				Array.Resize (ref buffer' buffer.Length + 1);  			buffer [pos_buf++] = buffer [index++];  		}  		unread_bits -= bits_mask;  	}  	// Update control  	do {  		if (pos_dat >= dataIn.Length)  			break;  		byte bc = dataIn [pos_dat++];  		control |= (uint)(bc << unread_bits);  		unread_bits += 8;  	} while (unread_bits <= 0x18);  }  
Magic Number,Pack.Games,BSIGILBE,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\Games\BSIGILBE.cs,Decrypt,The following statement contains a magic number: if ((control & 1) == 0) {  	if (pos_buf == buffer.Length)  		Array.Resize (ref buffer' buffer.Length + 1);  	buffer [pos_buf++] = (byte)tcontrol;  	control = tcontrol >> 8;  	unread_bits -= 9;  } else {  	int index = dec_size - 1;  	index = (int)(tcontrol & index);  	index += pos_buf;  	index -= dec_size;  	uint bit_c = tcontrol >> h1;  	int it = (int)(min_it & (tcontrol >> h1));  	it++;  	control = bit_c >> upd_bit;  	for (int i = 0; i < it; i++) {  		if (pos_buf == buffer.Length)  			Array.Resize (ref buffer' buffer.Length + 1);  		buffer [pos_buf++] = buffer [index++];  	}  	unread_bits -= bits_mask;  }  
Magic Number,Pack.Games,BSIGILBE,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\Games\BSIGILBE.cs,Decrypt,The following statement contains a magic number: if ((control & 1) == 0) {  	if (pos_buf == buffer.Length)  		Array.Resize (ref buffer' buffer.Length + 1);  	buffer [pos_buf++] = (byte)tcontrol;  	control = tcontrol >> 8;  	unread_bits -= 9;  } else {  	int index = dec_size - 1;  	index = (int)(tcontrol & index);  	index += pos_buf;  	index -= dec_size;  	uint bit_c = tcontrol >> h1;  	int it = (int)(min_it & (tcontrol >> h1));  	it++;  	control = bit_c >> upd_bit;  	for (int i = 0; i < it; i++) {  		if (pos_buf == buffer.Length)  			Array.Resize (ref buffer' buffer.Length + 1);  		buffer [pos_buf++] = buffer [index++];  	}  	unread_bits -= bits_mask;  }  
Magic Number,Pack.Games,BSIGILBE,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\Games\BSIGILBE.cs,Decrypt,The following statement contains a magic number: control = tcontrol >> 8;  
Magic Number,Pack.Games,BSIGILBE,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\Games\BSIGILBE.cs,Decrypt,The following statement contains a magic number: unread_bits -= 9;  
Magic Number,Pack.Games,BSIGILBE,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\Games\BSIGILBE.cs,Decrypt,The following statement contains a magic number: do {  	if (pos_dat >= dataIn.Length)  		break;  	byte bc = dataIn [pos_dat++];  	control |= (uint)(bc << unread_bits);  	unread_bits += 8;  } while (unread_bits <= 0x18);  
Magic Number,Pack.Games,BSIGILBE,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\Games\BSIGILBE.cs,Decrypt,The following statement contains a magic number: unread_bits += 8;  
Magic Number,Pack.Games,DGamerArchive,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\Games\DGAMERARCHIVE.cs,Unpack,The following statement contains a magic number: arc.btaf.nFiles = fat_length / 8;  
Magic Number,Pack.Games,DGamerArchive,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\Games\DGAMERARCHIVE.cs,Unpack,The following statement contains a magic number: br.BaseStream.Position += 6;  
Magic Number,Pack.Games,DGamerArchive,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\Games\DGAMERARCHIVE.cs,Unpack,The following statement contains a magic number: br.BaseStream.Position -= 8;  
Magic Number,Pack.Games,GENSUIKODS,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\Games\GENSUIKODS.cs,Unpack_Sound,The following statement contains a magic number: for (int i = 0; i < num_files; i++) {  	sFile newFile = new sFile ();  	newFile.name = name + '_' + i.ToString () + ".bin";  	newFile.offset = br.ReadUInt32 ();  	if (i + 1 != num_files)  		newFile.size = br.ReadUInt32 () - newFile.offset;  	newFile.offset += fat_size + 4;  	if (i + 1 == num_files)  		newFile.size = (uint)br.BaseStream.Length - newFile.offset;  	newFile.path = file;  	unpacked.files.Add (newFile);  }  
Magic Number,Pack.Games,GENSUIKODS,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\Games\GENSUIKODS.cs,Unpack_Sound,The following statement contains a magic number: newFile.offset += fat_size + 4;  
Magic Number,Pack.Games,GTACTW,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\Games\GTACTW.cs,Unpack_ROM,The following statement contains a magic number: for (int i = 0; i < num_files; i++) {  	br.BaseStream.Position += 3;  	// ID of the file  	uint offset = br.ReadUInt32 ();  	offset &= 0xFFFFFF;  	// It's only 3 bytes  	offset <<= 8;  	// Blocks of 256 bytes (padded)  	br.BaseStream.Position--;  	ushort size_ptr = br.ReadUInt16 ();  	size_ptr <<= 2;  	// They are uint values (4bytes)  	// Go to the size table to get the size  	long currPos = br.BaseStream.Position;  	br.BaseStream.Position = size_table + size_ptr;  	uint size = br.ReadUInt32 ();  	// Get the size of the file  	br.BaseStream.Position = currPos;  	// Set file  	sFile newFile = new sFile ();  	newFile.name = "File" + i.ToString () + ".bin";  	newFile.offset = offset;  	newFile.size = size;  	newFile.path = wad;  	unpacked.files.Add (newFile);  }  
Magic Number,Pack.Games,GTACTW,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\Games\GTACTW.cs,Unpack_ROM,The following statement contains a magic number: for (int i = 0; i < num_files; i++) {  	br.BaseStream.Position += 3;  	// ID of the file  	uint offset = br.ReadUInt32 ();  	offset &= 0xFFFFFF;  	// It's only 3 bytes  	offset <<= 8;  	// Blocks of 256 bytes (padded)  	br.BaseStream.Position--;  	ushort size_ptr = br.ReadUInt16 ();  	size_ptr <<= 2;  	// They are uint values (4bytes)  	// Go to the size table to get the size  	long currPos = br.BaseStream.Position;  	br.BaseStream.Position = size_table + size_ptr;  	uint size = br.ReadUInt32 ();  	// Get the size of the file  	br.BaseStream.Position = currPos;  	// Set file  	sFile newFile = new sFile ();  	newFile.name = "File" + i.ToString () + ".bin";  	newFile.offset = offset;  	newFile.size = size;  	newFile.path = wad;  	unpacked.files.Add (newFile);  }  
Magic Number,Pack.Games,GTACTW,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\Games\GTACTW.cs,Unpack_ROM,The following statement contains a magic number: for (int i = 0; i < num_files; i++) {  	br.BaseStream.Position += 3;  	// ID of the file  	uint offset = br.ReadUInt32 ();  	offset &= 0xFFFFFF;  	// It's only 3 bytes  	offset <<= 8;  	// Blocks of 256 bytes (padded)  	br.BaseStream.Position--;  	ushort size_ptr = br.ReadUInt16 ();  	size_ptr <<= 2;  	// They are uint values (4bytes)  	// Go to the size table to get the size  	long currPos = br.BaseStream.Position;  	br.BaseStream.Position = size_table + size_ptr;  	uint size = br.ReadUInt32 ();  	// Get the size of the file  	br.BaseStream.Position = currPos;  	// Set file  	sFile newFile = new sFile ();  	newFile.name = "File" + i.ToString () + ".bin";  	newFile.offset = offset;  	newFile.size = size;  	newFile.path = wad;  	unpacked.files.Add (newFile);  }  
Magic Number,Pack.Games,GTACTW,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\Games\GTACTW.cs,Unpack_ROM,The following statement contains a magic number: br.BaseStream.Position += 3;  
Magic Number,Pack.Games,GTACTW,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\Games\GTACTW.cs,Unpack_ROM,The following statement contains a magic number: offset <<= 8;  
Magic Number,Pack.Games,GTACTW,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\Games\GTACTW.cs,Unpack_ROM,The following statement contains a magic number: size_ptr <<= 2;  
Magic Number,Pack.Games,HONZ_Books,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\Games\HONZ_Books.cs,Unpack,The following statement contains a magic number: if (file.id >= 0x23 && file.id <= 0x93) {  	sFolder unpack = new sFolder ();  	unpack.files = new List<sFile> ();  	BinaryReader br = new BinaryReader (File.OpenRead (file.path));  	for (int i = 0; i < 0x17; i++) {  		sFile cfile = new sFile ();  		cfile.name = "Block " + i.ToString () + ".bin";  		cfile.path = file.path;  		br.BaseStream.Position = 0x14 + i * 4;  		cfile.offset = br.ReadUInt32 ();  		br.BaseStream.Position = 0x70 + i * 4;  		cfile.size = br.ReadUInt32 ();  		unpack.files.Add (cfile);  	}  	br.Close ();  	br = null;  	return unpack;  }  
Magic Number,Pack.Games,HONZ_Books,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\Games\HONZ_Books.cs,Unpack,The following statement contains a magic number: if (file.id >= 0x23 && file.id <= 0x93) {  	sFolder unpack = new sFolder ();  	unpack.files = new List<sFile> ();  	BinaryReader br = new BinaryReader (File.OpenRead (file.path));  	for (int i = 0; i < 0x17; i++) {  		sFile cfile = new sFile ();  		cfile.name = "Block " + i.ToString () + ".bin";  		cfile.path = file.path;  		br.BaseStream.Position = 0x14 + i * 4;  		cfile.offset = br.ReadUInt32 ();  		br.BaseStream.Position = 0x70 + i * 4;  		cfile.size = br.ReadUInt32 ();  		unpack.files.Add (cfile);  	}  	br.Close ();  	br = null;  	return unpack;  }  
Magic Number,Pack.Games,HONZ_Books,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\Games\HONZ_Books.cs,Unpack,The following statement contains a magic number: for (int i = 0; i < 0x17; i++) {  	sFile cfile = new sFile ();  	cfile.name = "Block " + i.ToString () + ".bin";  	cfile.path = file.path;  	br.BaseStream.Position = 0x14 + i * 4;  	cfile.offset = br.ReadUInt32 ();  	br.BaseStream.Position = 0x70 + i * 4;  	cfile.size = br.ReadUInt32 ();  	unpack.files.Add (cfile);  }  
Magic Number,Pack.Games,HONZ_Books,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\Games\HONZ_Books.cs,Unpack,The following statement contains a magic number: for (int i = 0; i < 0x17; i++) {  	sFile cfile = new sFile ();  	cfile.name = "Block " + i.ToString () + ".bin";  	cfile.path = file.path;  	br.BaseStream.Position = 0x14 + i * 4;  	cfile.offset = br.ReadUInt32 ();  	br.BaseStream.Position = 0x70 + i * 4;  	cfile.size = br.ReadUInt32 ();  	unpack.files.Add (cfile);  }  
Magic Number,Pack.Games,HONZ_Books,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\Games\HONZ_Books.cs,Unpack,The following statement contains a magic number: br.BaseStream.Position = 0x14 + i * 4;  
Magic Number,Pack.Games,HONZ_Books,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\Games\HONZ_Books.cs,Unpack,The following statement contains a magic number: br.BaseStream.Position = 0x70 + i * 4;  
Magic Number,Pack.Games,ROCKMAN_EXE,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\Games\ROCKMAN_EXE.cs,Unpack,The following statement contains a magic number: for (int i = 0; i < num_files; i++) {  	sFile newFile = new sFile ();  	newFile.name = file.name + '_' + i.ToString () + ".bin";  	newFile.offset = br.ReadUInt32 ();  	newFile.path = file.path;  	uint size = br.ReadUInt32 ();  	if ((size >> 31) == 1)// The file it's compressed with LZ11  	 {  		uint next_offset = br.ReadUInt32 ();  		newFile.size = next_offset - newFile.offset;  		br.BaseStream.Position -= 4;  	} else  		newFile.size = size;  	unpack.files.Add (newFile);  }  
Magic Number,Pack.Games,ROCKMAN_EXE,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\Games\ROCKMAN_EXE.cs,Unpack,The following statement contains a magic number: for (int i = 0; i < num_files; i++) {  	sFile newFile = new sFile ();  	newFile.name = file.name + '_' + i.ToString () + ".bin";  	newFile.offset = br.ReadUInt32 ();  	newFile.path = file.path;  	uint size = br.ReadUInt32 ();  	if ((size >> 31) == 1)// The file it's compressed with LZ11  	 {  		uint next_offset = br.ReadUInt32 ();  		newFile.size = next_offset - newFile.offset;  		br.BaseStream.Position -= 4;  	} else  		newFile.size = size;  	unpack.files.Add (newFile);  }  
Magic Number,Pack.Games,ROCKMAN_EXE,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\Games\ROCKMAN_EXE.cs,Unpack,The following statement contains a magic number: if ((size >> 31) == 1)// The file it's compressed with LZ11   {  	uint next_offset = br.ReadUInt32 ();  	newFile.size = next_offset - newFile.offset;  	br.BaseStream.Position -= 4;  } else  	newFile.size = size;  
Magic Number,Pack.Games,ROCKMAN_EXE,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\Games\ROCKMAN_EXE.cs,Unpack,The following statement contains a magic number: if ((size >> 31) == 1)// The file it's compressed with LZ11   {  	uint next_offset = br.ReadUInt32 ();  	newFile.size = next_offset - newFile.offset;  	br.BaseStream.Position -= 4;  } else  	newFile.size = size;  
Magic Number,Pack.Games,ROCKMAN_EXE,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\Games\ROCKMAN_EXE.cs,Unpack,The following statement contains a magic number: br.BaseStream.Position -= 4;  
Magic Number,Pack.Games,RR3BACE,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\Games\RR3BACE.cs,Unpack,The following statement contains a magic number: for (int i = 0; i < num_files; i++) {  	sFile newFile = new sFile ();  	newFile.offset = br.ReadUInt32 ();  	newFile.size = br.ReadUInt32 () & 0x7FFFFFF;  	// The last bit indicates if the file it's compressed  	newFile.path = file;  	newFile.name = name + '_' + i.ToString ();  	#region Get the extension  	long currPos = br.BaseStream.Position;  	br.BaseStream.Position = newFile.offset;  	char[] ext;  	if (newFile.size < 4)  		ext = Encoding.ASCII.GetChars (br.ReadBytes ((int)newFile.size));  	else  		ext = Encoding.ASCII.GetChars (br.ReadBytes (4));  	String extS = ".";  	for (int s = 0; s < ext.Length; s++)  		if (Char.IsLetterOrDigit (ext [s]) || ext [s] == 0x20)  			extS += ext [s];  	if (extS != "." && extS.Length == 5 && newFile.size >= 4)  		newFile.name += extS;  	else  		newFile.name += ".bin";  	br.BaseStream.Position = currPos;  	#endregion  	unpacked.files.Add (newFile);  }  
Magic Number,Pack.Games,RR3BACE,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\Games\RR3BACE.cs,Unpack,The following statement contains a magic number: for (int i = 0; i < num_files; i++) {  	sFile newFile = new sFile ();  	newFile.offset = br.ReadUInt32 ();  	newFile.size = br.ReadUInt32 () & 0x7FFFFFF;  	// The last bit indicates if the file it's compressed  	newFile.path = file;  	newFile.name = name + '_' + i.ToString ();  	#region Get the extension  	long currPos = br.BaseStream.Position;  	br.BaseStream.Position = newFile.offset;  	char[] ext;  	if (newFile.size < 4)  		ext = Encoding.ASCII.GetChars (br.ReadBytes ((int)newFile.size));  	else  		ext = Encoding.ASCII.GetChars (br.ReadBytes (4));  	String extS = ".";  	for (int s = 0; s < ext.Length; s++)  		if (Char.IsLetterOrDigit (ext [s]) || ext [s] == 0x20)  			extS += ext [s];  	if (extS != "." && extS.Length == 5 && newFile.size >= 4)  		newFile.name += extS;  	else  		newFile.name += ".bin";  	br.BaseStream.Position = currPos;  	#endregion  	unpacked.files.Add (newFile);  }  
Magic Number,Pack.Games,RR3BACE,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\Games\RR3BACE.cs,Unpack,The following statement contains a magic number: for (int i = 0; i < num_files; i++) {  	sFile newFile = new sFile ();  	newFile.offset = br.ReadUInt32 ();  	newFile.size = br.ReadUInt32 () & 0x7FFFFFF;  	// The last bit indicates if the file it's compressed  	newFile.path = file;  	newFile.name = name + '_' + i.ToString ();  	#region Get the extension  	long currPos = br.BaseStream.Position;  	br.BaseStream.Position = newFile.offset;  	char[] ext;  	if (newFile.size < 4)  		ext = Encoding.ASCII.GetChars (br.ReadBytes ((int)newFile.size));  	else  		ext = Encoding.ASCII.GetChars (br.ReadBytes (4));  	String extS = ".";  	for (int s = 0; s < ext.Length; s++)  		if (Char.IsLetterOrDigit (ext [s]) || ext [s] == 0x20)  			extS += ext [s];  	if (extS != "." && extS.Length == 5 && newFile.size >= 4)  		newFile.name += extS;  	else  		newFile.name += ".bin";  	br.BaseStream.Position = currPos;  	#endregion  	unpacked.files.Add (newFile);  }  
Magic Number,Pack.Games,RR3BACE,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\Games\RR3BACE.cs,Unpack,The following statement contains a magic number: for (int i = 0; i < num_files; i++) {  	sFile newFile = new sFile ();  	newFile.offset = br.ReadUInt32 ();  	newFile.size = br.ReadUInt32 () & 0x7FFFFFF;  	// The last bit indicates if the file it's compressed  	newFile.path = file;  	newFile.name = name + '_' + i.ToString ();  	#region Get the extension  	long currPos = br.BaseStream.Position;  	br.BaseStream.Position = newFile.offset;  	char[] ext;  	if (newFile.size < 4)  		ext = Encoding.ASCII.GetChars (br.ReadBytes ((int)newFile.size));  	else  		ext = Encoding.ASCII.GetChars (br.ReadBytes (4));  	String extS = ".";  	for (int s = 0; s < ext.Length; s++)  		if (Char.IsLetterOrDigit (ext [s]) || ext [s] == 0x20)  			extS += ext [s];  	if (extS != "." && extS.Length == 5 && newFile.size >= 4)  		newFile.name += extS;  	else  		newFile.name += ".bin";  	br.BaseStream.Position = currPos;  	#endregion  	unpacked.files.Add (newFile);  }  
Magic Number,Pack.Games,RR3BACE,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\Games\RR3BACE.cs,Unpack,The following statement contains a magic number: if (newFile.size < 4)  	ext = Encoding.ASCII.GetChars (br.ReadBytes ((int)newFile.size));  else  	ext = Encoding.ASCII.GetChars (br.ReadBytes (4));  
Magic Number,Pack.Games,RR3BACE,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\Games\RR3BACE.cs,Unpack,The following statement contains a magic number: if (newFile.size < 4)  	ext = Encoding.ASCII.GetChars (br.ReadBytes ((int)newFile.size));  else  	ext = Encoding.ASCII.GetChars (br.ReadBytes (4));  
Magic Number,Pack.Games,RR3BACE,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\Games\RR3BACE.cs,Unpack,The following statement contains a magic number: ext = Encoding.ASCII.GetChars (br.ReadBytes (4));  
Magic Number,Pack.Games,RR3BACE,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\Games\RR3BACE.cs,Unpack,The following statement contains a magic number: if (extS != "." && extS.Length == 5 && newFile.size >= 4)  	newFile.name += extS;  else  	newFile.name += ".bin";  
Magic Number,Pack.Games,RR3BACE,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\Games\RR3BACE.cs,Unpack,The following statement contains a magic number: if (extS != "." && extS.Length == 5 && newFile.size >= 4)  	newFile.name += extS;  else  	newFile.name += ".bin";  
Magic Number,Pack.Games,SUBARASHIKI,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\Games\SUBARASHIKI.cs,Unpack,The following statement contains a magic number: br.ReadBytes (16);  
Magic Number,Pack.Games,WARIO7,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\Games\WARIO7.cs,UnpackArc,The following statement contains a magic number: for (int i = 0; i < numFolders; i++) {  	Console.WriteLine ("Reading folder " + i);  	reader.BaseStream.Position = 4 + i * 8;  	uint fatOffset = reader.ReadUInt32 ();  	uint numFiles = reader.ReadUInt32 ();  	var subfolder = new sFolder ();  	subfolder.name = "Folder" + i;  	subfolder.files = new List<sFile> ();  	for (int j = 0; j < numFiles; j++) {  		reader.BaseStream.Position = fatOffset + j * 4;  		uint fileOffset = reader.ReadUInt32 ();  		var subfile = new sFile ();  		subfile.name = "file" + i + "_" + j;  		subfile.offset = fileOffset + 8;  		subfile.path = fileIn;  		reader.BaseStream.Position = fileOffset;  		subfile.size = reader.ReadUInt32 ();  		uint unknown = reader.ReadUInt32 ();  		Console.WriteLine ("\tunknown for {0} is {1}"' subfile.name' unknown);  		subfolder.files.Add (subfile);  	}  	unpacked.folders.Add (subfolder);  }  
Magic Number,Pack.Games,WARIO7,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\Games\WARIO7.cs,UnpackArc,The following statement contains a magic number: for (int i = 0; i < numFolders; i++) {  	Console.WriteLine ("Reading folder " + i);  	reader.BaseStream.Position = 4 + i * 8;  	uint fatOffset = reader.ReadUInt32 ();  	uint numFiles = reader.ReadUInt32 ();  	var subfolder = new sFolder ();  	subfolder.name = "Folder" + i;  	subfolder.files = new List<sFile> ();  	for (int j = 0; j < numFiles; j++) {  		reader.BaseStream.Position = fatOffset + j * 4;  		uint fileOffset = reader.ReadUInt32 ();  		var subfile = new sFile ();  		subfile.name = "file" + i + "_" + j;  		subfile.offset = fileOffset + 8;  		subfile.path = fileIn;  		reader.BaseStream.Position = fileOffset;  		subfile.size = reader.ReadUInt32 ();  		uint unknown = reader.ReadUInt32 ();  		Console.WriteLine ("\tunknown for {0} is {1}"' subfile.name' unknown);  		subfolder.files.Add (subfile);  	}  	unpacked.folders.Add (subfolder);  }  
Magic Number,Pack.Games,WARIO7,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\Games\WARIO7.cs,UnpackArc,The following statement contains a magic number: for (int i = 0; i < numFolders; i++) {  	Console.WriteLine ("Reading folder " + i);  	reader.BaseStream.Position = 4 + i * 8;  	uint fatOffset = reader.ReadUInt32 ();  	uint numFiles = reader.ReadUInt32 ();  	var subfolder = new sFolder ();  	subfolder.name = "Folder" + i;  	subfolder.files = new List<sFile> ();  	for (int j = 0; j < numFiles; j++) {  		reader.BaseStream.Position = fatOffset + j * 4;  		uint fileOffset = reader.ReadUInt32 ();  		var subfile = new sFile ();  		subfile.name = "file" + i + "_" + j;  		subfile.offset = fileOffset + 8;  		subfile.path = fileIn;  		reader.BaseStream.Position = fileOffset;  		subfile.size = reader.ReadUInt32 ();  		uint unknown = reader.ReadUInt32 ();  		Console.WriteLine ("\tunknown for {0} is {1}"' subfile.name' unknown);  		subfolder.files.Add (subfile);  	}  	unpacked.folders.Add (subfolder);  }  
Magic Number,Pack.Games,WARIO7,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\Games\WARIO7.cs,UnpackArc,The following statement contains a magic number: for (int i = 0; i < numFolders; i++) {  	Console.WriteLine ("Reading folder " + i);  	reader.BaseStream.Position = 4 + i * 8;  	uint fatOffset = reader.ReadUInt32 ();  	uint numFiles = reader.ReadUInt32 ();  	var subfolder = new sFolder ();  	subfolder.name = "Folder" + i;  	subfolder.files = new List<sFile> ();  	for (int j = 0; j < numFiles; j++) {  		reader.BaseStream.Position = fatOffset + j * 4;  		uint fileOffset = reader.ReadUInt32 ();  		var subfile = new sFile ();  		subfile.name = "file" + i + "_" + j;  		subfile.offset = fileOffset + 8;  		subfile.path = fileIn;  		reader.BaseStream.Position = fileOffset;  		subfile.size = reader.ReadUInt32 ();  		uint unknown = reader.ReadUInt32 ();  		Console.WriteLine ("\tunknown for {0} is {1}"' subfile.name' unknown);  		subfolder.files.Add (subfile);  	}  	unpacked.folders.Add (subfolder);  }  
Magic Number,Pack.Games,WARIO7,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\Games\WARIO7.cs,UnpackArc,The following statement contains a magic number: reader.BaseStream.Position = 4 + i * 8;  
Magic Number,Pack.Games,WARIO7,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\Games\WARIO7.cs,UnpackArc,The following statement contains a magic number: reader.BaseStream.Position = 4 + i * 8;  
Magic Number,Pack.Games,WARIO7,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\Games\WARIO7.cs,UnpackArc,The following statement contains a magic number: for (int j = 0; j < numFiles; j++) {  	reader.BaseStream.Position = fatOffset + j * 4;  	uint fileOffset = reader.ReadUInt32 ();  	var subfile = new sFile ();  	subfile.name = "file" + i + "_" + j;  	subfile.offset = fileOffset + 8;  	subfile.path = fileIn;  	reader.BaseStream.Position = fileOffset;  	subfile.size = reader.ReadUInt32 ();  	uint unknown = reader.ReadUInt32 ();  	Console.WriteLine ("\tunknown for {0} is {1}"' subfile.name' unknown);  	subfolder.files.Add (subfile);  }  
Magic Number,Pack.Games,WARIO7,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\Games\WARIO7.cs,UnpackArc,The following statement contains a magic number: for (int j = 0; j < numFiles; j++) {  	reader.BaseStream.Position = fatOffset + j * 4;  	uint fileOffset = reader.ReadUInt32 ();  	var subfile = new sFile ();  	subfile.name = "file" + i + "_" + j;  	subfile.offset = fileOffset + 8;  	subfile.path = fileIn;  	reader.BaseStream.Position = fileOffset;  	subfile.size = reader.ReadUInt32 ();  	uint unknown = reader.ReadUInt32 ();  	Console.WriteLine ("\tunknown for {0} is {1}"' subfile.name' unknown);  	subfolder.files.Add (subfile);  }  
Magic Number,Pack.Games,WARIO7,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\Games\WARIO7.cs,UnpackArc,The following statement contains a magic number: reader.BaseStream.Position = fatOffset + j * 4;  
Magic Number,Pack.Games,WARIO7,D:\newReposJune17\pleonex_tinke\Plugins\Pack\Pack\Games\WARIO7.cs,UnpackArc,The following statement contains a magic number: subfile.offset = fileOffset + 8;  
