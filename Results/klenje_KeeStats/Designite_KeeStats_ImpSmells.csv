Implementation smell,Namespace,Class,File,Method,Description
Long Method,KeeStats,StatComputer,C:\repos\klenje_KeeStats\StatComputer.cs,ComputeStats,The method has 121 lines of code.
Complex Method,KeeStats,StatComputer,C:\repos\klenje_KeeStats\StatComputer.cs,ComputeStats,Cyclomatic complexity of the method is 16
Long Statement,KeeStats,StatComputer,C:\repos\klenje_KeeStats\StatComputer.cs,ComputeStats,The length of the statement  "	genericStats.Add (new StatItem ("% of passwords accessed recently"' (passwordsAccessedRecently / (float)totalNumber) * 100)); " is 125.
Long Statement,KeeStats,StatsSummaryWindow,C:\repos\klenje_KeeStats\StatsSummaryWindow.cs,qualityStatsView_CellClick,The length of the statement  "		MessageBox.Show ("Error while loading the edit window: " + ex.Message' "KeeStats"' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 127.
Magic Number,KeeStats,StatComputer,C:\repos\klenje_KeeStats\StatComputer.cs,ComputeStats,The following statement contains a magic number: genericStats.Add (new StatItem ("% of unique pwds"' (passwords.Count / (float)totalNumber) * 100));  
Magic Number,KeeStats,StatComputer,C:\repos\klenje_KeeStats\StatComputer.cs,ComputeStats,The following statement contains a magic number: genericStats.Add (new StatItem ("Percentage of entries with an URL"' (entriesWithURL / (float)totalNumber) * 100));  
Magic Number,KeeStats,StatComputer,C:\repos\klenje_KeeStats\StatComputer.cs,ComputeStats,The following statement contains a magic number: genericStats.Add (new StatItem ("% of passwords accessed recently"' (passwordsAccessedRecently / (float)totalNumber) * 100));  
Magic Number,KeeStats.test,StatComputerTest,C:\repos\klenje_KeeStats\test\StatComputerTest.cs,TestSingleGroup,The following statement contains a magic number: foreach (PwGroup pwgroup in list) {  	if (pwgroup.Name == "Internet") {  		StatComputer.ComputeStats (pwgroup' ref statsList' ref qualityStats' true);  		Assert.AreEqual (normalStatsCount' statsList.Count);  		Assert.AreEqual ("Count"' statsList [0].Name);  		Assert.AreEqual (1' statsList [3].Value);  		// unique pwds  		// Shortest and longest is 20  		Assert.AreEqual (20' qualityStats [0].Value);  		Assert.AreEqual (20' qualityStats [1].Value);  	}  }  
Magic Number,KeeStats.test,StatComputerTest,C:\repos\klenje_KeeStats\test\StatComputerTest.cs,TestSingleGroup,The following statement contains a magic number: foreach (PwGroup pwgroup in list) {  	if (pwgroup.Name == "Internet") {  		StatComputer.ComputeStats (pwgroup' ref statsList' ref qualityStats' true);  		Assert.AreEqual (normalStatsCount' statsList.Count);  		Assert.AreEqual ("Count"' statsList [0].Name);  		Assert.AreEqual (1' statsList [3].Value);  		// unique pwds  		// Shortest and longest is 20  		Assert.AreEqual (20' qualityStats [0].Value);  		Assert.AreEqual (20' qualityStats [1].Value);  	}  }  
Magic Number,KeeStats.test,StatComputerTest,C:\repos\klenje_KeeStats\test\StatComputerTest.cs,TestSingleGroup,The following statement contains a magic number: foreach (PwGroup pwgroup in list) {  	if (pwgroup.Name == "Internet") {  		StatComputer.ComputeStats (pwgroup' ref statsList' ref qualityStats' true);  		Assert.AreEqual (normalStatsCount' statsList.Count);  		Assert.AreEqual ("Count"' statsList [0].Name);  		Assert.AreEqual (1' statsList [3].Value);  		// unique pwds  		// Shortest and longest is 20  		Assert.AreEqual (20' qualityStats [0].Value);  		Assert.AreEqual (20' qualityStats [1].Value);  	}  }  
Magic Number,KeeStats.test,StatComputerTest,C:\repos\klenje_KeeStats\test\StatComputerTest.cs,TestSingleGroup,The following statement contains a magic number: if (pwgroup.Name == "Internet") {  	StatComputer.ComputeStats (pwgroup' ref statsList' ref qualityStats' true);  	Assert.AreEqual (normalStatsCount' statsList.Count);  	Assert.AreEqual ("Count"' statsList [0].Name);  	Assert.AreEqual (1' statsList [3].Value);  	// unique pwds  	// Shortest and longest is 20  	Assert.AreEqual (20' qualityStats [0].Value);  	Assert.AreEqual (20' qualityStats [1].Value);  }  
Magic Number,KeeStats.test,StatComputerTest,C:\repos\klenje_KeeStats\test\StatComputerTest.cs,TestSingleGroup,The following statement contains a magic number: if (pwgroup.Name == "Internet") {  	StatComputer.ComputeStats (pwgroup' ref statsList' ref qualityStats' true);  	Assert.AreEqual (normalStatsCount' statsList.Count);  	Assert.AreEqual ("Count"' statsList [0].Name);  	Assert.AreEqual (1' statsList [3].Value);  	// unique pwds  	// Shortest and longest is 20  	Assert.AreEqual (20' qualityStats [0].Value);  	Assert.AreEqual (20' qualityStats [1].Value);  }  
Magic Number,KeeStats.test,StatComputerTest,C:\repos\klenje_KeeStats\test\StatComputerTest.cs,TestSingleGroup,The following statement contains a magic number: if (pwgroup.Name == "Internet") {  	StatComputer.ComputeStats (pwgroup' ref statsList' ref qualityStats' true);  	Assert.AreEqual (normalStatsCount' statsList.Count);  	Assert.AreEqual ("Count"' statsList [0].Name);  	Assert.AreEqual (1' statsList [3].Value);  	// unique pwds  	// Shortest and longest is 20  	Assert.AreEqual (20' qualityStats [0].Value);  	Assert.AreEqual (20' qualityStats [1].Value);  }  
Magic Number,KeeStats.test,StatComputerTest,C:\repos\klenje_KeeStats\test\StatComputerTest.cs,TestSingleGroup,The following statement contains a magic number: Assert.AreEqual (1' statsList [3].Value);  
Magic Number,KeeStats.test,StatComputerTest,C:\repos\klenje_KeeStats\test\StatComputerTest.cs,TestSingleGroup,The following statement contains a magic number: Assert.AreEqual (20' qualityStats [0].Value);  
Magic Number,KeeStats.test,StatComputerTest,C:\repos\klenje_KeeStats\test\StatComputerTest.cs,TestSingleGroup,The following statement contains a magic number: Assert.AreEqual (20' qualityStats [1].Value);  
Magic Number,KeeStats.test,StatComputerTest,C:\repos\klenje_KeeStats\test\StatComputerTest.cs,TestEmptyPasswords,The following statement contains a magic number: foreach (PwGroup pwgroup in list) {  	if (pwgroup.Name == "eMail") {  		bool result = StatComputer.ComputeStats (pwgroup' ref statsList' ref qualityStats' true);  		Assert.IsTrue (result);  		Assert.AreEqual (normalStatsCount' statsList.Count);  		// only an empty password  		Assert.AreEqual (0' qualityStats.Count);  		Assert.AreEqual ("Unique pwds"' statsList [3].Name);  		Assert.AreEqual (0' statsList [3].Value);  		// unique pwds  		Assert.AreEqual (1' statsList [2].Value);  		// empty pwds  	}  }  
Magic Number,KeeStats.test,StatComputerTest,C:\repos\klenje_KeeStats\test\StatComputerTest.cs,TestEmptyPasswords,The following statement contains a magic number: foreach (PwGroup pwgroup in list) {  	if (pwgroup.Name == "eMail") {  		bool result = StatComputer.ComputeStats (pwgroup' ref statsList' ref qualityStats' true);  		Assert.IsTrue (result);  		Assert.AreEqual (normalStatsCount' statsList.Count);  		// only an empty password  		Assert.AreEqual (0' qualityStats.Count);  		Assert.AreEqual ("Unique pwds"' statsList [3].Name);  		Assert.AreEqual (0' statsList [3].Value);  		// unique pwds  		Assert.AreEqual (1' statsList [2].Value);  		// empty pwds  	}  }  
Magic Number,KeeStats.test,StatComputerTest,C:\repos\klenje_KeeStats\test\StatComputerTest.cs,TestEmptyPasswords,The following statement contains a magic number: foreach (PwGroup pwgroup in list) {  	if (pwgroup.Name == "eMail") {  		bool result = StatComputer.ComputeStats (pwgroup' ref statsList' ref qualityStats' true);  		Assert.IsTrue (result);  		Assert.AreEqual (normalStatsCount' statsList.Count);  		// only an empty password  		Assert.AreEqual (0' qualityStats.Count);  		Assert.AreEqual ("Unique pwds"' statsList [3].Name);  		Assert.AreEqual (0' statsList [3].Value);  		// unique pwds  		Assert.AreEqual (1' statsList [2].Value);  		// empty pwds  	}  }  
Magic Number,KeeStats.test,StatComputerTest,C:\repos\klenje_KeeStats\test\StatComputerTest.cs,TestEmptyPasswords,The following statement contains a magic number: if (pwgroup.Name == "eMail") {  	bool result = StatComputer.ComputeStats (pwgroup' ref statsList' ref qualityStats' true);  	Assert.IsTrue (result);  	Assert.AreEqual (normalStatsCount' statsList.Count);  	// only an empty password  	Assert.AreEqual (0' qualityStats.Count);  	Assert.AreEqual ("Unique pwds"' statsList [3].Name);  	Assert.AreEqual (0' statsList [3].Value);  	// unique pwds  	Assert.AreEqual (1' statsList [2].Value);  	// empty pwds  }  
Magic Number,KeeStats.test,StatComputerTest,C:\repos\klenje_KeeStats\test\StatComputerTest.cs,TestEmptyPasswords,The following statement contains a magic number: if (pwgroup.Name == "eMail") {  	bool result = StatComputer.ComputeStats (pwgroup' ref statsList' ref qualityStats' true);  	Assert.IsTrue (result);  	Assert.AreEqual (normalStatsCount' statsList.Count);  	// only an empty password  	Assert.AreEqual (0' qualityStats.Count);  	Assert.AreEqual ("Unique pwds"' statsList [3].Name);  	Assert.AreEqual (0' statsList [3].Value);  	// unique pwds  	Assert.AreEqual (1' statsList [2].Value);  	// empty pwds  }  
Magic Number,KeeStats.test,StatComputerTest,C:\repos\klenje_KeeStats\test\StatComputerTest.cs,TestEmptyPasswords,The following statement contains a magic number: if (pwgroup.Name == "eMail") {  	bool result = StatComputer.ComputeStats (pwgroup' ref statsList' ref qualityStats' true);  	Assert.IsTrue (result);  	Assert.AreEqual (normalStatsCount' statsList.Count);  	// only an empty password  	Assert.AreEqual (0' qualityStats.Count);  	Assert.AreEqual ("Unique pwds"' statsList [3].Name);  	Assert.AreEqual (0' statsList [3].Value);  	// unique pwds  	Assert.AreEqual (1' statsList [2].Value);  	// empty pwds  }  
Magic Number,KeeStats.test,StatComputerTest,C:\repos\klenje_KeeStats\test\StatComputerTest.cs,TestEmptyPasswords,The following statement contains a magic number: Assert.AreEqual ("Unique pwds"' statsList [3].Name);  
Magic Number,KeeStats.test,StatComputerTest,C:\repos\klenje_KeeStats\test\StatComputerTest.cs,TestEmptyPasswords,The following statement contains a magic number: Assert.AreEqual (0' statsList [3].Value);  
Magic Number,KeeStats.test,StatComputerTest,C:\repos\klenje_KeeStats\test\StatComputerTest.cs,TestEmptyPasswords,The following statement contains a magic number: Assert.AreEqual (1' statsList [2].Value);  
Magic Number,KeeStats.test,StatComputerTest,C:\repos\klenje_KeeStats\test\StatComputerTest.cs,TestUniquePasswords,The following statement contains a magic number: foreach (PwGroup pwgroup in list) {  	if (pwgroup.Name == "Network") {  		bool result = StatComputer.ComputeStats (pwgroup' ref statsList' ref qualityStats' true);  		Assert.IsTrue (result);  		Assert.AreEqual (normalStatsCount' statsList.Count);  		Assert.AreEqual (qualityStatsCount' qualityStats.Count);  		Assert.AreEqual ("Count"' statsList [0].Name);  		Assert.AreEqual (3' statsList [0].Value);  		Assert.AreEqual ("Unique pwds"' statsList [3].Name);  		Assert.AreEqual (2' statsList [3].Value);  		// unique pwds  		Assert.AreEqual (0' statsList [2].Value);  		// empty pwds  		Assert.AreEqual ("Average length"' statsList [5].Name);  		Assert.AreEqual (3.5' statsList [5].Value);  		Assert.AreEqual ("Percentage of entries with an URL"' statsList [6].Name);  		Assert.AreEqual (0' statsList [6].Value);  		Assert.AreEqual ("Referenced passwords"' statsList [7].Name);  		Assert.AreEqual (0' statsList [7].Value);  		Assert.AreEqual ("Shortest password"' qualityStats [0].Name);  		Assert.AreEqual (3' qualityStats [0].Value);  		Assert.AreEqual ("Longest password"' qualityStats [1].Name);  		Assert.AreEqual (4' qualityStats [1].Value);  	}  }  
Magic Number,KeeStats.test,StatComputerTest,C:\repos\klenje_KeeStats\test\StatComputerTest.cs,TestUniquePasswords,The following statement contains a magic number: foreach (PwGroup pwgroup in list) {  	if (pwgroup.Name == "Network") {  		bool result = StatComputer.ComputeStats (pwgroup' ref statsList' ref qualityStats' true);  		Assert.IsTrue (result);  		Assert.AreEqual (normalStatsCount' statsList.Count);  		Assert.AreEqual (qualityStatsCount' qualityStats.Count);  		Assert.AreEqual ("Count"' statsList [0].Name);  		Assert.AreEqual (3' statsList [0].Value);  		Assert.AreEqual ("Unique pwds"' statsList [3].Name);  		Assert.AreEqual (2' statsList [3].Value);  		// unique pwds  		Assert.AreEqual (0' statsList [2].Value);  		// empty pwds  		Assert.AreEqual ("Average length"' statsList [5].Name);  		Assert.AreEqual (3.5' statsList [5].Value);  		Assert.AreEqual ("Percentage of entries with an URL"' statsList [6].Name);  		Assert.AreEqual (0' statsList [6].Value);  		Assert.AreEqual ("Referenced passwords"' statsList [7].Name);  		Assert.AreEqual (0' statsList [7].Value);  		Assert.AreEqual ("Shortest password"' qualityStats [0].Name);  		Assert.AreEqual (3' qualityStats [0].Value);  		Assert.AreEqual ("Longest password"' qualityStats [1].Name);  		Assert.AreEqual (4' qualityStats [1].Value);  	}  }  
Magic Number,KeeStats.test,StatComputerTest,C:\repos\klenje_KeeStats\test\StatComputerTest.cs,TestUniquePasswords,The following statement contains a magic number: foreach (PwGroup pwgroup in list) {  	if (pwgroup.Name == "Network") {  		bool result = StatComputer.ComputeStats (pwgroup' ref statsList' ref qualityStats' true);  		Assert.IsTrue (result);  		Assert.AreEqual (normalStatsCount' statsList.Count);  		Assert.AreEqual (qualityStatsCount' qualityStats.Count);  		Assert.AreEqual ("Count"' statsList [0].Name);  		Assert.AreEqual (3' statsList [0].Value);  		Assert.AreEqual ("Unique pwds"' statsList [3].Name);  		Assert.AreEqual (2' statsList [3].Value);  		// unique pwds  		Assert.AreEqual (0' statsList [2].Value);  		// empty pwds  		Assert.AreEqual ("Average length"' statsList [5].Name);  		Assert.AreEqual (3.5' statsList [5].Value);  		Assert.AreEqual ("Percentage of entries with an URL"' statsList [6].Name);  		Assert.AreEqual (0' statsList [6].Value);  		Assert.AreEqual ("Referenced passwords"' statsList [7].Name);  		Assert.AreEqual (0' statsList [7].Value);  		Assert.AreEqual ("Shortest password"' qualityStats [0].Name);  		Assert.AreEqual (3' qualityStats [0].Value);  		Assert.AreEqual ("Longest password"' qualityStats [1].Name);  		Assert.AreEqual (4' qualityStats [1].Value);  	}  }  
Magic Number,KeeStats.test,StatComputerTest,C:\repos\klenje_KeeStats\test\StatComputerTest.cs,TestUniquePasswords,The following statement contains a magic number: foreach (PwGroup pwgroup in list) {  	if (pwgroup.Name == "Network") {  		bool result = StatComputer.ComputeStats (pwgroup' ref statsList' ref qualityStats' true);  		Assert.IsTrue (result);  		Assert.AreEqual (normalStatsCount' statsList.Count);  		Assert.AreEqual (qualityStatsCount' qualityStats.Count);  		Assert.AreEqual ("Count"' statsList [0].Name);  		Assert.AreEqual (3' statsList [0].Value);  		Assert.AreEqual ("Unique pwds"' statsList [3].Name);  		Assert.AreEqual (2' statsList [3].Value);  		// unique pwds  		Assert.AreEqual (0' statsList [2].Value);  		// empty pwds  		Assert.AreEqual ("Average length"' statsList [5].Name);  		Assert.AreEqual (3.5' statsList [5].Value);  		Assert.AreEqual ("Percentage of entries with an URL"' statsList [6].Name);  		Assert.AreEqual (0' statsList [6].Value);  		Assert.AreEqual ("Referenced passwords"' statsList [7].Name);  		Assert.AreEqual (0' statsList [7].Value);  		Assert.AreEqual ("Shortest password"' qualityStats [0].Name);  		Assert.AreEqual (3' qualityStats [0].Value);  		Assert.AreEqual ("Longest password"' qualityStats [1].Name);  		Assert.AreEqual (4' qualityStats [1].Value);  	}  }  
Magic Number,KeeStats.test,StatComputerTest,C:\repos\klenje_KeeStats\test\StatComputerTest.cs,TestUniquePasswords,The following statement contains a magic number: foreach (PwGroup pwgroup in list) {  	if (pwgroup.Name == "Network") {  		bool result = StatComputer.ComputeStats (pwgroup' ref statsList' ref qualityStats' true);  		Assert.IsTrue (result);  		Assert.AreEqual (normalStatsCount' statsList.Count);  		Assert.AreEqual (qualityStatsCount' qualityStats.Count);  		Assert.AreEqual ("Count"' statsList [0].Name);  		Assert.AreEqual (3' statsList [0].Value);  		Assert.AreEqual ("Unique pwds"' statsList [3].Name);  		Assert.AreEqual (2' statsList [3].Value);  		// unique pwds  		Assert.AreEqual (0' statsList [2].Value);  		// empty pwds  		Assert.AreEqual ("Average length"' statsList [5].Name);  		Assert.AreEqual (3.5' statsList [5].Value);  		Assert.AreEqual ("Percentage of entries with an URL"' statsList [6].Name);  		Assert.AreEqual (0' statsList [6].Value);  		Assert.AreEqual ("Referenced passwords"' statsList [7].Name);  		Assert.AreEqual (0' statsList [7].Value);  		Assert.AreEqual ("Shortest password"' qualityStats [0].Name);  		Assert.AreEqual (3' qualityStats [0].Value);  		Assert.AreEqual ("Longest password"' qualityStats [1].Name);  		Assert.AreEqual (4' qualityStats [1].Value);  	}  }  
Magic Number,KeeStats.test,StatComputerTest,C:\repos\klenje_KeeStats\test\StatComputerTest.cs,TestUniquePasswords,The following statement contains a magic number: foreach (PwGroup pwgroup in list) {  	if (pwgroup.Name == "Network") {  		bool result = StatComputer.ComputeStats (pwgroup' ref statsList' ref qualityStats' true);  		Assert.IsTrue (result);  		Assert.AreEqual (normalStatsCount' statsList.Count);  		Assert.AreEqual (qualityStatsCount' qualityStats.Count);  		Assert.AreEqual ("Count"' statsList [0].Name);  		Assert.AreEqual (3' statsList [0].Value);  		Assert.AreEqual ("Unique pwds"' statsList [3].Name);  		Assert.AreEqual (2' statsList [3].Value);  		// unique pwds  		Assert.AreEqual (0' statsList [2].Value);  		// empty pwds  		Assert.AreEqual ("Average length"' statsList [5].Name);  		Assert.AreEqual (3.5' statsList [5].Value);  		Assert.AreEqual ("Percentage of entries with an URL"' statsList [6].Name);  		Assert.AreEqual (0' statsList [6].Value);  		Assert.AreEqual ("Referenced passwords"' statsList [7].Name);  		Assert.AreEqual (0' statsList [7].Value);  		Assert.AreEqual ("Shortest password"' qualityStats [0].Name);  		Assert.AreEqual (3' qualityStats [0].Value);  		Assert.AreEqual ("Longest password"' qualityStats [1].Name);  		Assert.AreEqual (4' qualityStats [1].Value);  	}  }  
Magic Number,KeeStats.test,StatComputerTest,C:\repos\klenje_KeeStats\test\StatComputerTest.cs,TestUniquePasswords,The following statement contains a magic number: foreach (PwGroup pwgroup in list) {  	if (pwgroup.Name == "Network") {  		bool result = StatComputer.ComputeStats (pwgroup' ref statsList' ref qualityStats' true);  		Assert.IsTrue (result);  		Assert.AreEqual (normalStatsCount' statsList.Count);  		Assert.AreEqual (qualityStatsCount' qualityStats.Count);  		Assert.AreEqual ("Count"' statsList [0].Name);  		Assert.AreEqual (3' statsList [0].Value);  		Assert.AreEqual ("Unique pwds"' statsList [3].Name);  		Assert.AreEqual (2' statsList [3].Value);  		// unique pwds  		Assert.AreEqual (0' statsList [2].Value);  		// empty pwds  		Assert.AreEqual ("Average length"' statsList [5].Name);  		Assert.AreEqual (3.5' statsList [5].Value);  		Assert.AreEqual ("Percentage of entries with an URL"' statsList [6].Name);  		Assert.AreEqual (0' statsList [6].Value);  		Assert.AreEqual ("Referenced passwords"' statsList [7].Name);  		Assert.AreEqual (0' statsList [7].Value);  		Assert.AreEqual ("Shortest password"' qualityStats [0].Name);  		Assert.AreEqual (3' qualityStats [0].Value);  		Assert.AreEqual ("Longest password"' qualityStats [1].Name);  		Assert.AreEqual (4' qualityStats [1].Value);  	}  }  
Magic Number,KeeStats.test,StatComputerTest,C:\repos\klenje_KeeStats\test\StatComputerTest.cs,TestUniquePasswords,The following statement contains a magic number: foreach (PwGroup pwgroup in list) {  	if (pwgroup.Name == "Network") {  		bool result = StatComputer.ComputeStats (pwgroup' ref statsList' ref qualityStats' true);  		Assert.IsTrue (result);  		Assert.AreEqual (normalStatsCount' statsList.Count);  		Assert.AreEqual (qualityStatsCount' qualityStats.Count);  		Assert.AreEqual ("Count"' statsList [0].Name);  		Assert.AreEqual (3' statsList [0].Value);  		Assert.AreEqual ("Unique pwds"' statsList [3].Name);  		Assert.AreEqual (2' statsList [3].Value);  		// unique pwds  		Assert.AreEqual (0' statsList [2].Value);  		// empty pwds  		Assert.AreEqual ("Average length"' statsList [5].Name);  		Assert.AreEqual (3.5' statsList [5].Value);  		Assert.AreEqual ("Percentage of entries with an URL"' statsList [6].Name);  		Assert.AreEqual (0' statsList [6].Value);  		Assert.AreEqual ("Referenced passwords"' statsList [7].Name);  		Assert.AreEqual (0' statsList [7].Value);  		Assert.AreEqual ("Shortest password"' qualityStats [0].Name);  		Assert.AreEqual (3' qualityStats [0].Value);  		Assert.AreEqual ("Longest password"' qualityStats [1].Name);  		Assert.AreEqual (4' qualityStats [1].Value);  	}  }  
Magic Number,KeeStats.test,StatComputerTest,C:\repos\klenje_KeeStats\test\StatComputerTest.cs,TestUniquePasswords,The following statement contains a magic number: foreach (PwGroup pwgroup in list) {  	if (pwgroup.Name == "Network") {  		bool result = StatComputer.ComputeStats (pwgroup' ref statsList' ref qualityStats' true);  		Assert.IsTrue (result);  		Assert.AreEqual (normalStatsCount' statsList.Count);  		Assert.AreEqual (qualityStatsCount' qualityStats.Count);  		Assert.AreEqual ("Count"' statsList [0].Name);  		Assert.AreEqual (3' statsList [0].Value);  		Assert.AreEqual ("Unique pwds"' statsList [3].Name);  		Assert.AreEqual (2' statsList [3].Value);  		// unique pwds  		Assert.AreEqual (0' statsList [2].Value);  		// empty pwds  		Assert.AreEqual ("Average length"' statsList [5].Name);  		Assert.AreEqual (3.5' statsList [5].Value);  		Assert.AreEqual ("Percentage of entries with an URL"' statsList [6].Name);  		Assert.AreEqual (0' statsList [6].Value);  		Assert.AreEqual ("Referenced passwords"' statsList [7].Name);  		Assert.AreEqual (0' statsList [7].Value);  		Assert.AreEqual ("Shortest password"' qualityStats [0].Name);  		Assert.AreEqual (3' qualityStats [0].Value);  		Assert.AreEqual ("Longest password"' qualityStats [1].Name);  		Assert.AreEqual (4' qualityStats [1].Value);  	}  }  
Magic Number,KeeStats.test,StatComputerTest,C:\repos\klenje_KeeStats\test\StatComputerTest.cs,TestUniquePasswords,The following statement contains a magic number: foreach (PwGroup pwgroup in list) {  	if (pwgroup.Name == "Network") {  		bool result = StatComputer.ComputeStats (pwgroup' ref statsList' ref qualityStats' true);  		Assert.IsTrue (result);  		Assert.AreEqual (normalStatsCount' statsList.Count);  		Assert.AreEqual (qualityStatsCount' qualityStats.Count);  		Assert.AreEqual ("Count"' statsList [0].Name);  		Assert.AreEqual (3' statsList [0].Value);  		Assert.AreEqual ("Unique pwds"' statsList [3].Name);  		Assert.AreEqual (2' statsList [3].Value);  		// unique pwds  		Assert.AreEqual (0' statsList [2].Value);  		// empty pwds  		Assert.AreEqual ("Average length"' statsList [5].Name);  		Assert.AreEqual (3.5' statsList [5].Value);  		Assert.AreEqual ("Percentage of entries with an URL"' statsList [6].Name);  		Assert.AreEqual (0' statsList [6].Value);  		Assert.AreEqual ("Referenced passwords"' statsList [7].Name);  		Assert.AreEqual (0' statsList [7].Value);  		Assert.AreEqual ("Shortest password"' qualityStats [0].Name);  		Assert.AreEqual (3' qualityStats [0].Value);  		Assert.AreEqual ("Longest password"' qualityStats [1].Name);  		Assert.AreEqual (4' qualityStats [1].Value);  	}  }  
Magic Number,KeeStats.test,StatComputerTest,C:\repos\klenje_KeeStats\test\StatComputerTest.cs,TestUniquePasswords,The following statement contains a magic number: foreach (PwGroup pwgroup in list) {  	if (pwgroup.Name == "Network") {  		bool result = StatComputer.ComputeStats (pwgroup' ref statsList' ref qualityStats' true);  		Assert.IsTrue (result);  		Assert.AreEqual (normalStatsCount' statsList.Count);  		Assert.AreEqual (qualityStatsCount' qualityStats.Count);  		Assert.AreEqual ("Count"' statsList [0].Name);  		Assert.AreEqual (3' statsList [0].Value);  		Assert.AreEqual ("Unique pwds"' statsList [3].Name);  		Assert.AreEqual (2' statsList [3].Value);  		// unique pwds  		Assert.AreEqual (0' statsList [2].Value);  		// empty pwds  		Assert.AreEqual ("Average length"' statsList [5].Name);  		Assert.AreEqual (3.5' statsList [5].Value);  		Assert.AreEqual ("Percentage of entries with an URL"' statsList [6].Name);  		Assert.AreEqual (0' statsList [6].Value);  		Assert.AreEqual ("Referenced passwords"' statsList [7].Name);  		Assert.AreEqual (0' statsList [7].Value);  		Assert.AreEqual ("Shortest password"' qualityStats [0].Name);  		Assert.AreEqual (3' qualityStats [0].Value);  		Assert.AreEqual ("Longest password"' qualityStats [1].Name);  		Assert.AreEqual (4' qualityStats [1].Value);  	}  }  
Magic Number,KeeStats.test,StatComputerTest,C:\repos\klenje_KeeStats\test\StatComputerTest.cs,TestUniquePasswords,The following statement contains a magic number: foreach (PwGroup pwgroup in list) {  	if (pwgroup.Name == "Network") {  		bool result = StatComputer.ComputeStats (pwgroup' ref statsList' ref qualityStats' true);  		Assert.IsTrue (result);  		Assert.AreEqual (normalStatsCount' statsList.Count);  		Assert.AreEqual (qualityStatsCount' qualityStats.Count);  		Assert.AreEqual ("Count"' statsList [0].Name);  		Assert.AreEqual (3' statsList [0].Value);  		Assert.AreEqual ("Unique pwds"' statsList [3].Name);  		Assert.AreEqual (2' statsList [3].Value);  		// unique pwds  		Assert.AreEqual (0' statsList [2].Value);  		// empty pwds  		Assert.AreEqual ("Average length"' statsList [5].Name);  		Assert.AreEqual (3.5' statsList [5].Value);  		Assert.AreEqual ("Percentage of entries with an URL"' statsList [6].Name);  		Assert.AreEqual (0' statsList [6].Value);  		Assert.AreEqual ("Referenced passwords"' statsList [7].Name);  		Assert.AreEqual (0' statsList [7].Value);  		Assert.AreEqual ("Shortest password"' qualityStats [0].Name);  		Assert.AreEqual (3' qualityStats [0].Value);  		Assert.AreEqual ("Longest password"' qualityStats [1].Name);  		Assert.AreEqual (4' qualityStats [1].Value);  	}  }  
Magic Number,KeeStats.test,StatComputerTest,C:\repos\klenje_KeeStats\test\StatComputerTest.cs,TestUniquePasswords,The following statement contains a magic number: foreach (PwGroup pwgroup in list) {  	if (pwgroup.Name == "Network") {  		bool result = StatComputer.ComputeStats (pwgroup' ref statsList' ref qualityStats' true);  		Assert.IsTrue (result);  		Assert.AreEqual (normalStatsCount' statsList.Count);  		Assert.AreEqual (qualityStatsCount' qualityStats.Count);  		Assert.AreEqual ("Count"' statsList [0].Name);  		Assert.AreEqual (3' statsList [0].Value);  		Assert.AreEqual ("Unique pwds"' statsList [3].Name);  		Assert.AreEqual (2' statsList [3].Value);  		// unique pwds  		Assert.AreEqual (0' statsList [2].Value);  		// empty pwds  		Assert.AreEqual ("Average length"' statsList [5].Name);  		Assert.AreEqual (3.5' statsList [5].Value);  		Assert.AreEqual ("Percentage of entries with an URL"' statsList [6].Name);  		Assert.AreEqual (0' statsList [6].Value);  		Assert.AreEqual ("Referenced passwords"' statsList [7].Name);  		Assert.AreEqual (0' statsList [7].Value);  		Assert.AreEqual ("Shortest password"' qualityStats [0].Name);  		Assert.AreEqual (3' qualityStats [0].Value);  		Assert.AreEqual ("Longest password"' qualityStats [1].Name);  		Assert.AreEqual (4' qualityStats [1].Value);  	}  }  
Magic Number,KeeStats.test,StatComputerTest,C:\repos\klenje_KeeStats\test\StatComputerTest.cs,TestUniquePasswords,The following statement contains a magic number: foreach (PwGroup pwgroup in list) {  	if (pwgroup.Name == "Network") {  		bool result = StatComputer.ComputeStats (pwgroup' ref statsList' ref qualityStats' true);  		Assert.IsTrue (result);  		Assert.AreEqual (normalStatsCount' statsList.Count);  		Assert.AreEqual (qualityStatsCount' qualityStats.Count);  		Assert.AreEqual ("Count"' statsList [0].Name);  		Assert.AreEqual (3' statsList [0].Value);  		Assert.AreEqual ("Unique pwds"' statsList [3].Name);  		Assert.AreEqual (2' statsList [3].Value);  		// unique pwds  		Assert.AreEqual (0' statsList [2].Value);  		// empty pwds  		Assert.AreEqual ("Average length"' statsList [5].Name);  		Assert.AreEqual (3.5' statsList [5].Value);  		Assert.AreEqual ("Percentage of entries with an URL"' statsList [6].Name);  		Assert.AreEqual (0' statsList [6].Value);  		Assert.AreEqual ("Referenced passwords"' statsList [7].Name);  		Assert.AreEqual (0' statsList [7].Value);  		Assert.AreEqual ("Shortest password"' qualityStats [0].Name);  		Assert.AreEqual (3' qualityStats [0].Value);  		Assert.AreEqual ("Longest password"' qualityStats [1].Name);  		Assert.AreEqual (4' qualityStats [1].Value);  	}  }  
Magic Number,KeeStats.test,StatComputerTest,C:\repos\klenje_KeeStats\test\StatComputerTest.cs,TestUniquePasswords,The following statement contains a magic number: if (pwgroup.Name == "Network") {  	bool result = StatComputer.ComputeStats (pwgroup' ref statsList' ref qualityStats' true);  	Assert.IsTrue (result);  	Assert.AreEqual (normalStatsCount' statsList.Count);  	Assert.AreEqual (qualityStatsCount' qualityStats.Count);  	Assert.AreEqual ("Count"' statsList [0].Name);  	Assert.AreEqual (3' statsList [0].Value);  	Assert.AreEqual ("Unique pwds"' statsList [3].Name);  	Assert.AreEqual (2' statsList [3].Value);  	// unique pwds  	Assert.AreEqual (0' statsList [2].Value);  	// empty pwds  	Assert.AreEqual ("Average length"' statsList [5].Name);  	Assert.AreEqual (3.5' statsList [5].Value);  	Assert.AreEqual ("Percentage of entries with an URL"' statsList [6].Name);  	Assert.AreEqual (0' statsList [6].Value);  	Assert.AreEqual ("Referenced passwords"' statsList [7].Name);  	Assert.AreEqual (0' statsList [7].Value);  	Assert.AreEqual ("Shortest password"' qualityStats [0].Name);  	Assert.AreEqual (3' qualityStats [0].Value);  	Assert.AreEqual ("Longest password"' qualityStats [1].Name);  	Assert.AreEqual (4' qualityStats [1].Value);  }  
Magic Number,KeeStats.test,StatComputerTest,C:\repos\klenje_KeeStats\test\StatComputerTest.cs,TestUniquePasswords,The following statement contains a magic number: if (pwgroup.Name == "Network") {  	bool result = StatComputer.ComputeStats (pwgroup' ref statsList' ref qualityStats' true);  	Assert.IsTrue (result);  	Assert.AreEqual (normalStatsCount' statsList.Count);  	Assert.AreEqual (qualityStatsCount' qualityStats.Count);  	Assert.AreEqual ("Count"' statsList [0].Name);  	Assert.AreEqual (3' statsList [0].Value);  	Assert.AreEqual ("Unique pwds"' statsList [3].Name);  	Assert.AreEqual (2' statsList [3].Value);  	// unique pwds  	Assert.AreEqual (0' statsList [2].Value);  	// empty pwds  	Assert.AreEqual ("Average length"' statsList [5].Name);  	Assert.AreEqual (3.5' statsList [5].Value);  	Assert.AreEqual ("Percentage of entries with an URL"' statsList [6].Name);  	Assert.AreEqual (0' statsList [6].Value);  	Assert.AreEqual ("Referenced passwords"' statsList [7].Name);  	Assert.AreEqual (0' statsList [7].Value);  	Assert.AreEqual ("Shortest password"' qualityStats [0].Name);  	Assert.AreEqual (3' qualityStats [0].Value);  	Assert.AreEqual ("Longest password"' qualityStats [1].Name);  	Assert.AreEqual (4' qualityStats [1].Value);  }  
Magic Number,KeeStats.test,StatComputerTest,C:\repos\klenje_KeeStats\test\StatComputerTest.cs,TestUniquePasswords,The following statement contains a magic number: if (pwgroup.Name == "Network") {  	bool result = StatComputer.ComputeStats (pwgroup' ref statsList' ref qualityStats' true);  	Assert.IsTrue (result);  	Assert.AreEqual (normalStatsCount' statsList.Count);  	Assert.AreEqual (qualityStatsCount' qualityStats.Count);  	Assert.AreEqual ("Count"' statsList [0].Name);  	Assert.AreEqual (3' statsList [0].Value);  	Assert.AreEqual ("Unique pwds"' statsList [3].Name);  	Assert.AreEqual (2' statsList [3].Value);  	// unique pwds  	Assert.AreEqual (0' statsList [2].Value);  	// empty pwds  	Assert.AreEqual ("Average length"' statsList [5].Name);  	Assert.AreEqual (3.5' statsList [5].Value);  	Assert.AreEqual ("Percentage of entries with an URL"' statsList [6].Name);  	Assert.AreEqual (0' statsList [6].Value);  	Assert.AreEqual ("Referenced passwords"' statsList [7].Name);  	Assert.AreEqual (0' statsList [7].Value);  	Assert.AreEqual ("Shortest password"' qualityStats [0].Name);  	Assert.AreEqual (3' qualityStats [0].Value);  	Assert.AreEqual ("Longest password"' qualityStats [1].Name);  	Assert.AreEqual (4' qualityStats [1].Value);  }  
Magic Number,KeeStats.test,StatComputerTest,C:\repos\klenje_KeeStats\test\StatComputerTest.cs,TestUniquePasswords,The following statement contains a magic number: if (pwgroup.Name == "Network") {  	bool result = StatComputer.ComputeStats (pwgroup' ref statsList' ref qualityStats' true);  	Assert.IsTrue (result);  	Assert.AreEqual (normalStatsCount' statsList.Count);  	Assert.AreEqual (qualityStatsCount' qualityStats.Count);  	Assert.AreEqual ("Count"' statsList [0].Name);  	Assert.AreEqual (3' statsList [0].Value);  	Assert.AreEqual ("Unique pwds"' statsList [3].Name);  	Assert.AreEqual (2' statsList [3].Value);  	// unique pwds  	Assert.AreEqual (0' statsList [2].Value);  	// empty pwds  	Assert.AreEqual ("Average length"' statsList [5].Name);  	Assert.AreEqual (3.5' statsList [5].Value);  	Assert.AreEqual ("Percentage of entries with an URL"' statsList [6].Name);  	Assert.AreEqual (0' statsList [6].Value);  	Assert.AreEqual ("Referenced passwords"' statsList [7].Name);  	Assert.AreEqual (0' statsList [7].Value);  	Assert.AreEqual ("Shortest password"' qualityStats [0].Name);  	Assert.AreEqual (3' qualityStats [0].Value);  	Assert.AreEqual ("Longest password"' qualityStats [1].Name);  	Assert.AreEqual (4' qualityStats [1].Value);  }  
Magic Number,KeeStats.test,StatComputerTest,C:\repos\klenje_KeeStats\test\StatComputerTest.cs,TestUniquePasswords,The following statement contains a magic number: if (pwgroup.Name == "Network") {  	bool result = StatComputer.ComputeStats (pwgroup' ref statsList' ref qualityStats' true);  	Assert.IsTrue (result);  	Assert.AreEqual (normalStatsCount' statsList.Count);  	Assert.AreEqual (qualityStatsCount' qualityStats.Count);  	Assert.AreEqual ("Count"' statsList [0].Name);  	Assert.AreEqual (3' statsList [0].Value);  	Assert.AreEqual ("Unique pwds"' statsList [3].Name);  	Assert.AreEqual (2' statsList [3].Value);  	// unique pwds  	Assert.AreEqual (0' statsList [2].Value);  	// empty pwds  	Assert.AreEqual ("Average length"' statsList [5].Name);  	Assert.AreEqual (3.5' statsList [5].Value);  	Assert.AreEqual ("Percentage of entries with an URL"' statsList [6].Name);  	Assert.AreEqual (0' statsList [6].Value);  	Assert.AreEqual ("Referenced passwords"' statsList [7].Name);  	Assert.AreEqual (0' statsList [7].Value);  	Assert.AreEqual ("Shortest password"' qualityStats [0].Name);  	Assert.AreEqual (3' qualityStats [0].Value);  	Assert.AreEqual ("Longest password"' qualityStats [1].Name);  	Assert.AreEqual (4' qualityStats [1].Value);  }  
Magic Number,KeeStats.test,StatComputerTest,C:\repos\klenje_KeeStats\test\StatComputerTest.cs,TestUniquePasswords,The following statement contains a magic number: if (pwgroup.Name == "Network") {  	bool result = StatComputer.ComputeStats (pwgroup' ref statsList' ref qualityStats' true);  	Assert.IsTrue (result);  	Assert.AreEqual (normalStatsCount' statsList.Count);  	Assert.AreEqual (qualityStatsCount' qualityStats.Count);  	Assert.AreEqual ("Count"' statsList [0].Name);  	Assert.AreEqual (3' statsList [0].Value);  	Assert.AreEqual ("Unique pwds"' statsList [3].Name);  	Assert.AreEqual (2' statsList [3].Value);  	// unique pwds  	Assert.AreEqual (0' statsList [2].Value);  	// empty pwds  	Assert.AreEqual ("Average length"' statsList [5].Name);  	Assert.AreEqual (3.5' statsList [5].Value);  	Assert.AreEqual ("Percentage of entries with an URL"' statsList [6].Name);  	Assert.AreEqual (0' statsList [6].Value);  	Assert.AreEqual ("Referenced passwords"' statsList [7].Name);  	Assert.AreEqual (0' statsList [7].Value);  	Assert.AreEqual ("Shortest password"' qualityStats [0].Name);  	Assert.AreEqual (3' qualityStats [0].Value);  	Assert.AreEqual ("Longest password"' qualityStats [1].Name);  	Assert.AreEqual (4' qualityStats [1].Value);  }  
Magic Number,KeeStats.test,StatComputerTest,C:\repos\klenje_KeeStats\test\StatComputerTest.cs,TestUniquePasswords,The following statement contains a magic number: if (pwgroup.Name == "Network") {  	bool result = StatComputer.ComputeStats (pwgroup' ref statsList' ref qualityStats' true);  	Assert.IsTrue (result);  	Assert.AreEqual (normalStatsCount' statsList.Count);  	Assert.AreEqual (qualityStatsCount' qualityStats.Count);  	Assert.AreEqual ("Count"' statsList [0].Name);  	Assert.AreEqual (3' statsList [0].Value);  	Assert.AreEqual ("Unique pwds"' statsList [3].Name);  	Assert.AreEqual (2' statsList [3].Value);  	// unique pwds  	Assert.AreEqual (0' statsList [2].Value);  	// empty pwds  	Assert.AreEqual ("Average length"' statsList [5].Name);  	Assert.AreEqual (3.5' statsList [5].Value);  	Assert.AreEqual ("Percentage of entries with an URL"' statsList [6].Name);  	Assert.AreEqual (0' statsList [6].Value);  	Assert.AreEqual ("Referenced passwords"' statsList [7].Name);  	Assert.AreEqual (0' statsList [7].Value);  	Assert.AreEqual ("Shortest password"' qualityStats [0].Name);  	Assert.AreEqual (3' qualityStats [0].Value);  	Assert.AreEqual ("Longest password"' qualityStats [1].Name);  	Assert.AreEqual (4' qualityStats [1].Value);  }  
Magic Number,KeeStats.test,StatComputerTest,C:\repos\klenje_KeeStats\test\StatComputerTest.cs,TestUniquePasswords,The following statement contains a magic number: if (pwgroup.Name == "Network") {  	bool result = StatComputer.ComputeStats (pwgroup' ref statsList' ref qualityStats' true);  	Assert.IsTrue (result);  	Assert.AreEqual (normalStatsCount' statsList.Count);  	Assert.AreEqual (qualityStatsCount' qualityStats.Count);  	Assert.AreEqual ("Count"' statsList [0].Name);  	Assert.AreEqual (3' statsList [0].Value);  	Assert.AreEqual ("Unique pwds"' statsList [3].Name);  	Assert.AreEqual (2' statsList [3].Value);  	// unique pwds  	Assert.AreEqual (0' statsList [2].Value);  	// empty pwds  	Assert.AreEqual ("Average length"' statsList [5].Name);  	Assert.AreEqual (3.5' statsList [5].Value);  	Assert.AreEqual ("Percentage of entries with an URL"' statsList [6].Name);  	Assert.AreEqual (0' statsList [6].Value);  	Assert.AreEqual ("Referenced passwords"' statsList [7].Name);  	Assert.AreEqual (0' statsList [7].Value);  	Assert.AreEqual ("Shortest password"' qualityStats [0].Name);  	Assert.AreEqual (3' qualityStats [0].Value);  	Assert.AreEqual ("Longest password"' qualityStats [1].Name);  	Assert.AreEqual (4' qualityStats [1].Value);  }  
Magic Number,KeeStats.test,StatComputerTest,C:\repos\klenje_KeeStats\test\StatComputerTest.cs,TestUniquePasswords,The following statement contains a magic number: if (pwgroup.Name == "Network") {  	bool result = StatComputer.ComputeStats (pwgroup' ref statsList' ref qualityStats' true);  	Assert.IsTrue (result);  	Assert.AreEqual (normalStatsCount' statsList.Count);  	Assert.AreEqual (qualityStatsCount' qualityStats.Count);  	Assert.AreEqual ("Count"' statsList [0].Name);  	Assert.AreEqual (3' statsList [0].Value);  	Assert.AreEqual ("Unique pwds"' statsList [3].Name);  	Assert.AreEqual (2' statsList [3].Value);  	// unique pwds  	Assert.AreEqual (0' statsList [2].Value);  	// empty pwds  	Assert.AreEqual ("Average length"' statsList [5].Name);  	Assert.AreEqual (3.5' statsList [5].Value);  	Assert.AreEqual ("Percentage of entries with an URL"' statsList [6].Name);  	Assert.AreEqual (0' statsList [6].Value);  	Assert.AreEqual ("Referenced passwords"' statsList [7].Name);  	Assert.AreEqual (0' statsList [7].Value);  	Assert.AreEqual ("Shortest password"' qualityStats [0].Name);  	Assert.AreEqual (3' qualityStats [0].Value);  	Assert.AreEqual ("Longest password"' qualityStats [1].Name);  	Assert.AreEqual (4' qualityStats [1].Value);  }  
Magic Number,KeeStats.test,StatComputerTest,C:\repos\klenje_KeeStats\test\StatComputerTest.cs,TestUniquePasswords,The following statement contains a magic number: if (pwgroup.Name == "Network") {  	bool result = StatComputer.ComputeStats (pwgroup' ref statsList' ref qualityStats' true);  	Assert.IsTrue (result);  	Assert.AreEqual (normalStatsCount' statsList.Count);  	Assert.AreEqual (qualityStatsCount' qualityStats.Count);  	Assert.AreEqual ("Count"' statsList [0].Name);  	Assert.AreEqual (3' statsList [0].Value);  	Assert.AreEqual ("Unique pwds"' statsList [3].Name);  	Assert.AreEqual (2' statsList [3].Value);  	// unique pwds  	Assert.AreEqual (0' statsList [2].Value);  	// empty pwds  	Assert.AreEqual ("Average length"' statsList [5].Name);  	Assert.AreEqual (3.5' statsList [5].Value);  	Assert.AreEqual ("Percentage of entries with an URL"' statsList [6].Name);  	Assert.AreEqual (0' statsList [6].Value);  	Assert.AreEqual ("Referenced passwords"' statsList [7].Name);  	Assert.AreEqual (0' statsList [7].Value);  	Assert.AreEqual ("Shortest password"' qualityStats [0].Name);  	Assert.AreEqual (3' qualityStats [0].Value);  	Assert.AreEqual ("Longest password"' qualityStats [1].Name);  	Assert.AreEqual (4' qualityStats [1].Value);  }  
Magic Number,KeeStats.test,StatComputerTest,C:\repos\klenje_KeeStats\test\StatComputerTest.cs,TestUniquePasswords,The following statement contains a magic number: if (pwgroup.Name == "Network") {  	bool result = StatComputer.ComputeStats (pwgroup' ref statsList' ref qualityStats' true);  	Assert.IsTrue (result);  	Assert.AreEqual (normalStatsCount' statsList.Count);  	Assert.AreEqual (qualityStatsCount' qualityStats.Count);  	Assert.AreEqual ("Count"' statsList [0].Name);  	Assert.AreEqual (3' statsList [0].Value);  	Assert.AreEqual ("Unique pwds"' statsList [3].Name);  	Assert.AreEqual (2' statsList [3].Value);  	// unique pwds  	Assert.AreEqual (0' statsList [2].Value);  	// empty pwds  	Assert.AreEqual ("Average length"' statsList [5].Name);  	Assert.AreEqual (3.5' statsList [5].Value);  	Assert.AreEqual ("Percentage of entries with an URL"' statsList [6].Name);  	Assert.AreEqual (0' statsList [6].Value);  	Assert.AreEqual ("Referenced passwords"' statsList [7].Name);  	Assert.AreEqual (0' statsList [7].Value);  	Assert.AreEqual ("Shortest password"' qualityStats [0].Name);  	Assert.AreEqual (3' qualityStats [0].Value);  	Assert.AreEqual ("Longest password"' qualityStats [1].Name);  	Assert.AreEqual (4' qualityStats [1].Value);  }  
Magic Number,KeeStats.test,StatComputerTest,C:\repos\klenje_KeeStats\test\StatComputerTest.cs,TestUniquePasswords,The following statement contains a magic number: if (pwgroup.Name == "Network") {  	bool result = StatComputer.ComputeStats (pwgroup' ref statsList' ref qualityStats' true);  	Assert.IsTrue (result);  	Assert.AreEqual (normalStatsCount' statsList.Count);  	Assert.AreEqual (qualityStatsCount' qualityStats.Count);  	Assert.AreEqual ("Count"' statsList [0].Name);  	Assert.AreEqual (3' statsList [0].Value);  	Assert.AreEqual ("Unique pwds"' statsList [3].Name);  	Assert.AreEqual (2' statsList [3].Value);  	// unique pwds  	Assert.AreEqual (0' statsList [2].Value);  	// empty pwds  	Assert.AreEqual ("Average length"' statsList [5].Name);  	Assert.AreEqual (3.5' statsList [5].Value);  	Assert.AreEqual ("Percentage of entries with an URL"' statsList [6].Name);  	Assert.AreEqual (0' statsList [6].Value);  	Assert.AreEqual ("Referenced passwords"' statsList [7].Name);  	Assert.AreEqual (0' statsList [7].Value);  	Assert.AreEqual ("Shortest password"' qualityStats [0].Name);  	Assert.AreEqual (3' qualityStats [0].Value);  	Assert.AreEqual ("Longest password"' qualityStats [1].Name);  	Assert.AreEqual (4' qualityStats [1].Value);  }  
Magic Number,KeeStats.test,StatComputerTest,C:\repos\klenje_KeeStats\test\StatComputerTest.cs,TestUniquePasswords,The following statement contains a magic number: if (pwgroup.Name == "Network") {  	bool result = StatComputer.ComputeStats (pwgroup' ref statsList' ref qualityStats' true);  	Assert.IsTrue (result);  	Assert.AreEqual (normalStatsCount' statsList.Count);  	Assert.AreEqual (qualityStatsCount' qualityStats.Count);  	Assert.AreEqual ("Count"' statsList [0].Name);  	Assert.AreEqual (3' statsList [0].Value);  	Assert.AreEqual ("Unique pwds"' statsList [3].Name);  	Assert.AreEqual (2' statsList [3].Value);  	// unique pwds  	Assert.AreEqual (0' statsList [2].Value);  	// empty pwds  	Assert.AreEqual ("Average length"' statsList [5].Name);  	Assert.AreEqual (3.5' statsList [5].Value);  	Assert.AreEqual ("Percentage of entries with an URL"' statsList [6].Name);  	Assert.AreEqual (0' statsList [6].Value);  	Assert.AreEqual ("Referenced passwords"' statsList [7].Name);  	Assert.AreEqual (0' statsList [7].Value);  	Assert.AreEqual ("Shortest password"' qualityStats [0].Name);  	Assert.AreEqual (3' qualityStats [0].Value);  	Assert.AreEqual ("Longest password"' qualityStats [1].Name);  	Assert.AreEqual (4' qualityStats [1].Value);  }  
Magic Number,KeeStats.test,StatComputerTest,C:\repos\klenje_KeeStats\test\StatComputerTest.cs,TestUniquePasswords,The following statement contains a magic number: if (pwgroup.Name == "Network") {  	bool result = StatComputer.ComputeStats (pwgroup' ref statsList' ref qualityStats' true);  	Assert.IsTrue (result);  	Assert.AreEqual (normalStatsCount' statsList.Count);  	Assert.AreEqual (qualityStatsCount' qualityStats.Count);  	Assert.AreEqual ("Count"' statsList [0].Name);  	Assert.AreEqual (3' statsList [0].Value);  	Assert.AreEqual ("Unique pwds"' statsList [3].Name);  	Assert.AreEqual (2' statsList [3].Value);  	// unique pwds  	Assert.AreEqual (0' statsList [2].Value);  	// empty pwds  	Assert.AreEqual ("Average length"' statsList [5].Name);  	Assert.AreEqual (3.5' statsList [5].Value);  	Assert.AreEqual ("Percentage of entries with an URL"' statsList [6].Name);  	Assert.AreEqual (0' statsList [6].Value);  	Assert.AreEqual ("Referenced passwords"' statsList [7].Name);  	Assert.AreEqual (0' statsList [7].Value);  	Assert.AreEqual ("Shortest password"' qualityStats [0].Name);  	Assert.AreEqual (3' qualityStats [0].Value);  	Assert.AreEqual ("Longest password"' qualityStats [1].Name);  	Assert.AreEqual (4' qualityStats [1].Value);  }  
Magic Number,KeeStats.test,StatComputerTest,C:\repos\klenje_KeeStats\test\StatComputerTest.cs,TestUniquePasswords,The following statement contains a magic number: Assert.AreEqual (3' statsList [0].Value);  
Magic Number,KeeStats.test,StatComputerTest,C:\repos\klenje_KeeStats\test\StatComputerTest.cs,TestUniquePasswords,The following statement contains a magic number: Assert.AreEqual ("Unique pwds"' statsList [3].Name);  
Magic Number,KeeStats.test,StatComputerTest,C:\repos\klenje_KeeStats\test\StatComputerTest.cs,TestUniquePasswords,The following statement contains a magic number: Assert.AreEqual (2' statsList [3].Value);  
Magic Number,KeeStats.test,StatComputerTest,C:\repos\klenje_KeeStats\test\StatComputerTest.cs,TestUniquePasswords,The following statement contains a magic number: Assert.AreEqual (2' statsList [3].Value);  
Magic Number,KeeStats.test,StatComputerTest,C:\repos\klenje_KeeStats\test\StatComputerTest.cs,TestUniquePasswords,The following statement contains a magic number: Assert.AreEqual (0' statsList [2].Value);  
Magic Number,KeeStats.test,StatComputerTest,C:\repos\klenje_KeeStats\test\StatComputerTest.cs,TestUniquePasswords,The following statement contains a magic number: Assert.AreEqual ("Average length"' statsList [5].Name);  
Magic Number,KeeStats.test,StatComputerTest,C:\repos\klenje_KeeStats\test\StatComputerTest.cs,TestUniquePasswords,The following statement contains a magic number: Assert.AreEqual (3.5' statsList [5].Value);  
Magic Number,KeeStats.test,StatComputerTest,C:\repos\klenje_KeeStats\test\StatComputerTest.cs,TestUniquePasswords,The following statement contains a magic number: Assert.AreEqual (3.5' statsList [5].Value);  
Magic Number,KeeStats.test,StatComputerTest,C:\repos\klenje_KeeStats\test\StatComputerTest.cs,TestUniquePasswords,The following statement contains a magic number: Assert.AreEqual ("Percentage of entries with an URL"' statsList [6].Name);  
Magic Number,KeeStats.test,StatComputerTest,C:\repos\klenje_KeeStats\test\StatComputerTest.cs,TestUniquePasswords,The following statement contains a magic number: Assert.AreEqual (0' statsList [6].Value);  
Magic Number,KeeStats.test,StatComputerTest,C:\repos\klenje_KeeStats\test\StatComputerTest.cs,TestUniquePasswords,The following statement contains a magic number: Assert.AreEqual ("Referenced passwords"' statsList [7].Name);  
Magic Number,KeeStats.test,StatComputerTest,C:\repos\klenje_KeeStats\test\StatComputerTest.cs,TestUniquePasswords,The following statement contains a magic number: Assert.AreEqual (0' statsList [7].Value);  
Magic Number,KeeStats.test,StatComputerTest,C:\repos\klenje_KeeStats\test\StatComputerTest.cs,TestUniquePasswords,The following statement contains a magic number: Assert.AreEqual (3' qualityStats [0].Value);  
Magic Number,KeeStats.test,StatComputerTest,C:\repos\klenje_KeeStats\test\StatComputerTest.cs,TestUniquePasswords,The following statement contains a magic number: Assert.AreEqual (4' qualityStats [1].Value);  
Magic Number,KeeStats.test,StatComputerTest,C:\repos\klenje_KeeStats\test\StatComputerTest.cs,TestReferencedPasswords,The following statement contains a magic number: foreach (PwGroup pwgroup in list) {  	if (pwgroup.Name == "Windows") {  		bool result = StatComputer.ComputeStats (pwgroup' ref statsList' ref qualityStats' true);  		Assert.IsTrue (result);  		Assert.AreEqual (normalStatsCount' statsList.Count);  		Assert.AreEqual (0' qualityStats.Count);  		Assert.AreEqual ("Count"' statsList [0].Name);  		Assert.AreEqual (1' statsList [0].Value);  		Assert.AreEqual ("Referenced passwords"' statsList [7].Name);  		Assert.AreEqual (1' statsList [7].Value);  	}  }  
Magic Number,KeeStats.test,StatComputerTest,C:\repos\klenje_KeeStats\test\StatComputerTest.cs,TestReferencedPasswords,The following statement contains a magic number: foreach (PwGroup pwgroup in list) {  	if (pwgroup.Name == "Windows") {  		bool result = StatComputer.ComputeStats (pwgroup' ref statsList' ref qualityStats' true);  		Assert.IsTrue (result);  		Assert.AreEqual (normalStatsCount' statsList.Count);  		Assert.AreEqual (0' qualityStats.Count);  		Assert.AreEqual ("Count"' statsList [0].Name);  		Assert.AreEqual (1' statsList [0].Value);  		Assert.AreEqual ("Referenced passwords"' statsList [7].Name);  		Assert.AreEqual (1' statsList [7].Value);  	}  }  
Magic Number,KeeStats.test,StatComputerTest,C:\repos\klenje_KeeStats\test\StatComputerTest.cs,TestReferencedPasswords,The following statement contains a magic number: if (pwgroup.Name == "Windows") {  	bool result = StatComputer.ComputeStats (pwgroup' ref statsList' ref qualityStats' true);  	Assert.IsTrue (result);  	Assert.AreEqual (normalStatsCount' statsList.Count);  	Assert.AreEqual (0' qualityStats.Count);  	Assert.AreEqual ("Count"' statsList [0].Name);  	Assert.AreEqual (1' statsList [0].Value);  	Assert.AreEqual ("Referenced passwords"' statsList [7].Name);  	Assert.AreEqual (1' statsList [7].Value);  }  
Magic Number,KeeStats.test,StatComputerTest,C:\repos\klenje_KeeStats\test\StatComputerTest.cs,TestReferencedPasswords,The following statement contains a magic number: if (pwgroup.Name == "Windows") {  	bool result = StatComputer.ComputeStats (pwgroup' ref statsList' ref qualityStats' true);  	Assert.IsTrue (result);  	Assert.AreEqual (normalStatsCount' statsList.Count);  	Assert.AreEqual (0' qualityStats.Count);  	Assert.AreEqual ("Count"' statsList [0].Name);  	Assert.AreEqual (1' statsList [0].Value);  	Assert.AreEqual ("Referenced passwords"' statsList [7].Name);  	Assert.AreEqual (1' statsList [7].Value);  }  
Magic Number,KeeStats.test,StatComputerTest,C:\repos\klenje_KeeStats\test\StatComputerTest.cs,TestReferencedPasswords,The following statement contains a magic number: Assert.AreEqual ("Referenced passwords"' statsList [7].Name);  
Magic Number,KeeStats.test,StatComputerTest,C:\repos\klenje_KeeStats\test\StatComputerTest.cs,TestReferencedPasswords,The following statement contains a magic number: Assert.AreEqual (1' statsList [7].Value);  
Magic Number,KeeStats.test,StatComputerTest,C:\repos\klenje_KeeStats\test\StatComputerTest.cs,TestQualityOfPasswords,The following statement contains a magic number: Assert.AreEqual (6' statsList [0].Value);  
Magic Number,KeeStats.test,StatComputerTest,C:\repos\klenje_KeeStats\test\StatComputerTest.cs,TestQualityOfPasswords,The following statement contains a magic number: Assert.AreEqual ("Unique pwds"' statsList [3].Name);  
Magic Number,KeeStats.test,StatComputerTest,C:\repos\klenje_KeeStats\test\StatComputerTest.cs,TestQualityOfPasswords,The following statement contains a magic number: Assert.AreEqual (6' statsList [3].Value);  
Magic Number,KeeStats.test,StatComputerTest,C:\repos\klenje_KeeStats\test\StatComputerTest.cs,TestQualityOfPasswords,The following statement contains a magic number: Assert.AreEqual (6' statsList [3].Value);  
Magic Number,KeeStats.test,StatComputerTest,C:\repos\klenje_KeeStats\test\StatComputerTest.cs,TestQualityOfPasswords,The following statement contains a magic number: Assert.AreEqual (0' statsList [2].Value);  
Magic Number,KeeStats.test,StatComputerTest,C:\repos\klenje_KeeStats\test\StatComputerTest.cs,TestQualityOfPasswords,The following statement contains a magic number: Assert.AreEqual ("Average length"' statsList [5].Name);  
Magic Number,KeeStats.test,StatComputerTest,C:\repos\klenje_KeeStats\test\StatComputerTest.cs,TestQualityOfPasswords,The following statement contains a magic number: Assert.AreEqual (4.5' statsList [5].Value);  
Magic Number,KeeStats.test,StatComputerTest,C:\repos\klenje_KeeStats\test\StatComputerTest.cs,TestQualityOfPasswords,The following statement contains a magic number: Assert.AreEqual (4.5' statsList [5].Value);  
Magic Number,KeeStats.test,StatComputerTest,C:\repos\klenje_KeeStats\test\StatComputerTest.cs,TestQualityOfPasswords,The following statement contains a magic number: Assert.AreEqual ("Percentage of entries with an URL"' statsList [6].Name);  
Magic Number,KeeStats.test,StatComputerTest,C:\repos\klenje_KeeStats\test\StatComputerTest.cs,TestQualityOfPasswords,The following statement contains a magic number: Assert.AreEqual (0' statsList [6].Value);  
Magic Number,KeeStats.test,StatComputerTest,C:\repos\klenje_KeeStats\test\StatComputerTest.cs,TestQualityOfPasswords,The following statement contains a magic number: Assert.AreEqual ("Referenced passwords"' statsList [7].Name);  
Magic Number,KeeStats.test,StatComputerTest,C:\repos\klenje_KeeStats\test\StatComputerTest.cs,TestQualityOfPasswords,The following statement contains a magic number: Assert.AreEqual (0' statsList [7].Value);  
Magic Number,KeeStats.test,StatComputerTest,C:\repos\klenje_KeeStats\test\StatComputerTest.cs,TestQualityOfPasswords,The following statement contains a magic number: Assert.AreEqual (3' qualityStats [0].Value);  
Magic Number,KeeStats.test,StatComputerTest,C:\repos\klenje_KeeStats\test\StatComputerTest.cs,TestQualityOfPasswords,The following statement contains a magic number: Assert.AreEqual (7' qualityStats [1].Value);  
Magic Number,KeeStats.test,StatComputerTest,C:\repos\klenje_KeeStats\test\StatComputerTest.cs,TestQualityOfPasswords,The following statement contains a magic number: Assert.AreEqual ("Lowercase only passwords"' qualityStats [2].Name);  
Magic Number,KeeStats.test,StatComputerTest,C:\repos\klenje_KeeStats\test\StatComputerTest.cs,TestQualityOfPasswords,The following statement contains a magic number: Assert.AreEqual (1' qualityStats [2].Value);  
Magic Number,KeeStats.test,StatComputerTest,C:\repos\klenje_KeeStats\test\StatComputerTest.cs,TestQualityOfPasswords,The following statement contains a magic number: Assert.AreEqual ("Uppercase only passwords"' qualityStats [3].Name);  
Magic Number,KeeStats.test,StatComputerTest,C:\repos\klenje_KeeStats\test\StatComputerTest.cs,TestQualityOfPasswords,The following statement contains a magic number: Assert.AreEqual (1' qualityStats [3].Value);  
Magic Number,KeeStats.test,StatComputerTest,C:\repos\klenje_KeeStats\test\StatComputerTest.cs,TestQualityOfPasswords,The following statement contains a magic number: Assert.AreEqual ("Numeric only passwords"' qualityStats [4].Name);  
Magic Number,KeeStats.test,StatComputerTest,C:\repos\klenje_KeeStats\test\StatComputerTest.cs,TestQualityOfPasswords,The following statement contains a magic number: Assert.AreEqual (1' qualityStats [4].Value);  
Magic Number,KeeStats.test,StatComputerTest,C:\repos\klenje_KeeStats\test\StatComputerTest.cs,TestQualityOfPasswords,The following statement contains a magic number: Assert.AreEqual ("Alphanumeric only passwords"' qualityStats [5].Name);  
Magic Number,KeeStats.test,StatComputerTest,C:\repos\klenje_KeeStats\test\StatComputerTest.cs,TestQualityOfPasswords,The following statement contains a magic number: Assert.AreEqual (1' qualityStats [5].Value);  
Magic Number,KeeStats.test,StatComputerTest,C:\repos\klenje_KeeStats\test\StatComputerTest.cs,TestQualityOfPasswords,The following statement contains a magic number: Assert.AreEqual ("Not alphanumeric passwords"' qualityStats [6].Name);  
Magic Number,KeeStats.test,StatComputerTest,C:\repos\klenje_KeeStats\test\StatComputerTest.cs,TestQualityOfPasswords,The following statement contains a magic number: Assert.AreEqual (1' qualityStats [6].Value);  
Magic Number,KeeStats.test,StatComputerTest,C:\repos\klenje_KeeStats\test\StatComputerTest.cs,TestRecentPasswords,The following statement contains a magic number: entry1.LastAccessTime = DateTime.Now.Subtract (TimeSpan.FromDays (40));  
Magic Number,KeeStats.test,StatComputerTest,C:\repos\klenje_KeeStats\test\StatComputerTest.cs,TestRecentPasswords,The following statement contains a magic number: entry2.LastAccessTime = DateTime.Now.Subtract (TimeSpan.FromDays (20));  
Magic Number,KeeStats.test,StatComputerTest,C:\repos\klenje_KeeStats\test\StatComputerTest.cs,TestRecentPasswords,The following statement contains a magic number: entry4.LastAccessTime = DateTime.Now.Subtract (TimeSpan.FromDays (300));  
Magic Number,KeeStats.test,StatComputerTest,C:\repos\klenje_KeeStats\test\StatComputerTest.cs,TestRecentPasswords,The following statement contains a magic number: Assert.AreEqual (4' statsList [0].Value);  
Magic Number,KeeStats.test,StatComputerTest,C:\repos\klenje_KeeStats\test\StatComputerTest.cs,TestRecentPasswords,The following statement contains a magic number: Assert.AreEqual ("% of passwords accessed recently"' statsList [8].Name);  
Magic Number,KeeStats.test,StatComputerTest,C:\repos\klenje_KeeStats\test\StatComputerTest.cs,TestRecentPasswords,The following statement contains a magic number: Assert.AreEqual (50' statsList [8].Value);  
Magic Number,KeeStats.test,StatComputerTest,C:\repos\klenje_KeeStats\test\StatComputerTest.cs,TestRecentPasswords,The following statement contains a magic number: Assert.AreEqual (50' statsList [8].Value);  
