Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Thalmic.Myo,Hub,C:\repos\RSenApps_Metacast\Unity\Assets\Myo\Scripts\Myo.NET\Hub.cs,HandleEvent,Cyclomatic complexity of the method is 10
Complex Method,Thalmic.Myo,Myo,C:\repos\RSenApps_Metacast\Unity\Assets\Myo\Scripts\Myo.NET\Myo.cs,HandleEvent,Cyclomatic complexity of the method is 40
Complex Method,HTTP,Cookie,C:\repos\RSenApps_Metacast\Unity\Assets\UnityHTTP-master\src\CookieJar.cs,Cookie,Cyclomatic complexity of the method is 20
Complex Method,HTTP,DiskCache,C:\repos\RSenApps_Metacast\Unity\Assets\UnityHTTP-master\src\DiskCache.cs,DownloadAndSave,Cyclomatic complexity of the method is 9
Complex Method,HTTP,Request,C:\repos\RSenApps_Metacast\Unity\Assets\UnityHTTP-master\src\Request.cs,GetResponse,Cyclomatic complexity of the method is 23
Complex Method,HTTP,Request,C:\repos\RSenApps_Metacast\Unity\Assets\UnityHTTP-master\src\Request.cs,Send,Cyclomatic complexity of the method is 12
Complex Method,HTTP,Response,C:\repos\RSenApps_Metacast\Unity\Assets\UnityHTTP-master\src\Response.cs,ReadFromStream,Cyclomatic complexity of the method is 20
Long Parameter List,Thalmic.Myo,libmyo,C:\repos\RSenApps_Metacast\Unity\Assets\Myo\Scripts\Myo.NET\libmyo.cs,run,The method has 5 parameters.
Long Statement,Thalmic.Myo,Quaternion,C:\repos\RSenApps_Metacast\Unity\Assets\Myo\Scripts\Myo.NET\Quaternion.cs,Roll,The length of the statement  "	return (float)Math.Atan2 (2.0f * (quat._w * quat._x + quat._y * quat._z)' 1.0f - 2.0f * (quat._x * quat._x + quat._y * quat._y)); " is 129.
Long Statement,Thalmic.Myo,Quaternion,C:\repos\RSenApps_Metacast\Unity\Assets\Myo\Scripts\Myo.NET\Quaternion.cs,Yaw,The length of the statement  "	return (float)Math.Atan2 (2.0f * (quat._w * quat._z + quat._x * quat._y)' 1.0f - 2.0f * (quat._y * quat._y + quat._z * quat._z)); " is 129.
Long Statement,HTTP,DiskCache,C:\repos\RSenApps_Metacast\Unity\Assets\UnityHTTP-master\src\DiskCache.cs,Awake,The length of the statement  "	cachePath = System.IO.Path.Combine (Environment.GetFolderPath (Environment.SpecialFolder.LocalApplicationData)' "uwcache"); " is 123.
Long Statement,HTTP,Request,C:\repos\RSenApps_Metacast\Unity\Assets\UnityHTTP-master\src\Request.cs,Send,The length of the statement  "		SetHeader ("Authorization"' "Basic " + System.Convert.ToBase64String (System.Text.ASCIIEncoding.ASCII.GetBytes (uri.UserInfo))); " is 128.
Long Statement,HTTP,Request,C:\repos\RSenApps_Metacast\Unity\Assets\UnityHTTP-master\src\Request.cs,InfoString,The length of the statement  "	string result = uri.ToString () + " [ " + method.ToUpper () + " ] [ " + status + " " + message + " ] [ " + sizeString + " ] [ " + responseTime + "ms ]"; " is 152.
Complex Conditional,HTTP,Cookie,C:\repos\RSenApps_Metacast\Unity\Assets\UnityHTTP-master\src\CookieJar.cs,CollidesWith,The conditional expression  "(this.path != null && accessInfo.path == null) || (this.domain != null && accessInfo.domain == null)"  is complex.
Magic Number,Thalmic.Myo,Hub,C:\repos\RSenApps_Metacast\Unity\Assets\Myo\Scripts\Myo.NET\Hub.cs,EventThreadFn,The following statement contains a magic number: while (!_eventThreadShutdown) {  	GCHandle gch = GCHandle.Alloc (this);  	libmyo.run (_handle' 1000' (libmyo.Handler)HandleEvent' (IntPtr)gch' IntPtr.Zero);  }  
Magic Number,Thalmic.Myo,Hub,C:\repos\RSenApps_Metacast\Unity\Assets\Myo\Scripts\Myo.NET\Hub.cs,EventThreadFn,The following statement contains a magic number: libmyo.run (_handle' 1000' (libmyo.Handler)HandleEvent' (IntPtr)gch' IntPtr.Zero);  
Magic Number,Thalmic.Myo,Myo,C:\repos\RSenApps_Metacast\Unity\Assets\Myo\Scripts\Myo.NET\Myo.cs,HandleEvent,The following statement contains a magic number: switch (type) {  case libmyo.EventType.Connected:  	if (Connected != null) {  		Connected (this' new MyoEventArgs (this' timestamp));  	}  	break;  case libmyo.EventType.Disconnected:  	if (Disconnected != null) {  		Disconnected (this' new MyoEventArgs (this' timestamp));  	}  	break;  case libmyo.EventType.ArmSynced:  	if (ArmSynced != null) {  		Arm arm = (Arm)libmyo.event_get_arm (evt);  		XDirection xDirection = (XDirection)libmyo.event_get_x_direction (evt);  		ArmSynced (this' new ArmSyncedEventArgs (this' timestamp' arm' xDirection));  	}  	break;  case libmyo.EventType.ArmUnsynced:  	if (ArmUnsynced != null) {  		ArmUnsynced (this' new MyoEventArgs (this' timestamp));  	}  	break;  case libmyo.EventType.Orientation:  	if (AccelerometerData != null) {  		float x = libmyo.event_get_accelerometer (evt' 0);  		float y = libmyo.event_get_accelerometer (evt' 1);  		float z = libmyo.event_get_accelerometer (evt' 2);  		var accelerometer = new Vector3 (x' y' z);  		AccelerometerData (this' new AccelerometerDataEventArgs (this' timestamp' accelerometer));  	}  	if (GyroscopeData != null) {  		float x = libmyo.event_get_gyroscope (evt' 0);  		float y = libmyo.event_get_gyroscope (evt' 1);  		float z = libmyo.event_get_gyroscope (evt' 2);  		var gyroscope = new Vector3 (x' y' z);  		GyroscopeData (this' new GyroscopeDataEventArgs (this' timestamp' gyroscope));  	}  	if (OrientationData != null) {  		float x = libmyo.event_get_orientation (evt' libmyo.OrientationIndex.X);  		float y = libmyo.event_get_orientation (evt' libmyo.OrientationIndex.Y);  		float z = libmyo.event_get_orientation (evt' libmyo.OrientationIndex.Z);  		float w = libmyo.event_get_orientation (evt' libmyo.OrientationIndex.W);  		var orientation = new Quaternion (x' y' z' w);  		OrientationData (this' new OrientationDataEventArgs (this' timestamp' orientation));  	}  	break;  case libmyo.EventType.Pose:  	if (PoseChange != null) {  		var pose = (Pose)libmyo.event_get_pose (evt);  		PoseChange (this' new PoseEventArgs (this' timestamp' pose));  	}  	break;  case libmyo.EventType.Rssi:  	if (Rssi != null) {  		var rssi = libmyo.event_get_rssi (evt);  		Rssi (this' new RssiEventArgs (this' timestamp' rssi));  	}  	break;  case libmyo.EventType.Unlocked:  	if (Unlocked != null) {  		Unlocked (this' new MyoEventArgs (this' timestamp));  	}  	break;  case libmyo.EventType.Locked:  	if (Locked != null) {  		Locked (this' new MyoEventArgs (this' timestamp));  	}  	break;  }  
Magic Number,Thalmic.Myo,Myo,C:\repos\RSenApps_Metacast\Unity\Assets\Myo\Scripts\Myo.NET\Myo.cs,HandleEvent,The following statement contains a magic number: switch (type) {  case libmyo.EventType.Connected:  	if (Connected != null) {  		Connected (this' new MyoEventArgs (this' timestamp));  	}  	break;  case libmyo.EventType.Disconnected:  	if (Disconnected != null) {  		Disconnected (this' new MyoEventArgs (this' timestamp));  	}  	break;  case libmyo.EventType.ArmSynced:  	if (ArmSynced != null) {  		Arm arm = (Arm)libmyo.event_get_arm (evt);  		XDirection xDirection = (XDirection)libmyo.event_get_x_direction (evt);  		ArmSynced (this' new ArmSyncedEventArgs (this' timestamp' arm' xDirection));  	}  	break;  case libmyo.EventType.ArmUnsynced:  	if (ArmUnsynced != null) {  		ArmUnsynced (this' new MyoEventArgs (this' timestamp));  	}  	break;  case libmyo.EventType.Orientation:  	if (AccelerometerData != null) {  		float x = libmyo.event_get_accelerometer (evt' 0);  		float y = libmyo.event_get_accelerometer (evt' 1);  		float z = libmyo.event_get_accelerometer (evt' 2);  		var accelerometer = new Vector3 (x' y' z);  		AccelerometerData (this' new AccelerometerDataEventArgs (this' timestamp' accelerometer));  	}  	if (GyroscopeData != null) {  		float x = libmyo.event_get_gyroscope (evt' 0);  		float y = libmyo.event_get_gyroscope (evt' 1);  		float z = libmyo.event_get_gyroscope (evt' 2);  		var gyroscope = new Vector3 (x' y' z);  		GyroscopeData (this' new GyroscopeDataEventArgs (this' timestamp' gyroscope));  	}  	if (OrientationData != null) {  		float x = libmyo.event_get_orientation (evt' libmyo.OrientationIndex.X);  		float y = libmyo.event_get_orientation (evt' libmyo.OrientationIndex.Y);  		float z = libmyo.event_get_orientation (evt' libmyo.OrientationIndex.Z);  		float w = libmyo.event_get_orientation (evt' libmyo.OrientationIndex.W);  		var orientation = new Quaternion (x' y' z' w);  		OrientationData (this' new OrientationDataEventArgs (this' timestamp' orientation));  	}  	break;  case libmyo.EventType.Pose:  	if (PoseChange != null) {  		var pose = (Pose)libmyo.event_get_pose (evt);  		PoseChange (this' new PoseEventArgs (this' timestamp' pose));  	}  	break;  case libmyo.EventType.Rssi:  	if (Rssi != null) {  		var rssi = libmyo.event_get_rssi (evt);  		Rssi (this' new RssiEventArgs (this' timestamp' rssi));  	}  	break;  case libmyo.EventType.Unlocked:  	if (Unlocked != null) {  		Unlocked (this' new MyoEventArgs (this' timestamp));  	}  	break;  case libmyo.EventType.Locked:  	if (Locked != null) {  		Locked (this' new MyoEventArgs (this' timestamp));  	}  	break;  }  
Magic Number,Thalmic.Myo,Myo,C:\repos\RSenApps_Metacast\Unity\Assets\Myo\Scripts\Myo.NET\Myo.cs,HandleEvent,The following statement contains a magic number: if (AccelerometerData != null) {  	float x = libmyo.event_get_accelerometer (evt' 0);  	float y = libmyo.event_get_accelerometer (evt' 1);  	float z = libmyo.event_get_accelerometer (evt' 2);  	var accelerometer = new Vector3 (x' y' z);  	AccelerometerData (this' new AccelerometerDataEventArgs (this' timestamp' accelerometer));  }  
Magic Number,Thalmic.Myo,Myo,C:\repos\RSenApps_Metacast\Unity\Assets\Myo\Scripts\Myo.NET\Myo.cs,HandleEvent,The following statement contains a magic number: if (GyroscopeData != null) {  	float x = libmyo.event_get_gyroscope (evt' 0);  	float y = libmyo.event_get_gyroscope (evt' 1);  	float z = libmyo.event_get_gyroscope (evt' 2);  	var gyroscope = new Vector3 (x' y' z);  	GyroscopeData (this' new GyroscopeDataEventArgs (this' timestamp' gyroscope));  }  
Magic Number,Thalmic.Myo,Vector3,C:\repos\RSenApps_Metacast\Unity\Assets\Myo\Scripts\Myo.NET\Vector3.cs,Vector3,The following statement contains a magic number: _data = new float[3];  
Magic Number,Thalmic.Myo,Vector3,C:\repos\RSenApps_Metacast\Unity\Assets\Myo\Scripts\Myo.NET\Vector3.cs,Vector3,The following statement contains a magic number: _data [2] = z;  
Magic Number,HTTP,Cookie,C:\repos\RSenApps_Metacast\Unity\Assets\UnityHTTP-master\src\CookieJar.cs,Cookie,The following statement contains a magic number: foreach (string part in parts) {  	Match match = Regex.Match (part' cookiePattern);  	if (!match.Success) {  		throw new Exception ("Could not parse cookie string: " + cookieString);  	}  	if (this.name == null) {  		this.name = match.Groups [1].Value;  		this.value = match.Groups [2].Value;  		continue;  	}  	switch (match.Groups [1].Value.ToLower ()) {  	case "httponly":  		this.scriptAccessible = false;  		break;  	case "expires":  		this.expirationDate = DateTime.Parse (match.Groups [2].Value);  		break;  	case "path":  		this.path = match.Groups [2].Value;  		break;  	case "domain":  		this.domain = match.Groups [2].Value;  		break;  	case "secure":  		this.secure = true;  		break;  	default:  		// TODO: warn of unknown cookie setting?  		break;  	}  }  
Magic Number,HTTP,Cookie,C:\repos\RSenApps_Metacast\Unity\Assets\UnityHTTP-master\src\CookieJar.cs,Cookie,The following statement contains a magic number: foreach (string part in parts) {  	Match match = Regex.Match (part' cookiePattern);  	if (!match.Success) {  		throw new Exception ("Could not parse cookie string: " + cookieString);  	}  	if (this.name == null) {  		this.name = match.Groups [1].Value;  		this.value = match.Groups [2].Value;  		continue;  	}  	switch (match.Groups [1].Value.ToLower ()) {  	case "httponly":  		this.scriptAccessible = false;  		break;  	case "expires":  		this.expirationDate = DateTime.Parse (match.Groups [2].Value);  		break;  	case "path":  		this.path = match.Groups [2].Value;  		break;  	case "domain":  		this.domain = match.Groups [2].Value;  		break;  	case "secure":  		this.secure = true;  		break;  	default:  		// TODO: warn of unknown cookie setting?  		break;  	}  }  
Magic Number,HTTP,Cookie,C:\repos\RSenApps_Metacast\Unity\Assets\UnityHTTP-master\src\CookieJar.cs,Cookie,The following statement contains a magic number: foreach (string part in parts) {  	Match match = Regex.Match (part' cookiePattern);  	if (!match.Success) {  		throw new Exception ("Could not parse cookie string: " + cookieString);  	}  	if (this.name == null) {  		this.name = match.Groups [1].Value;  		this.value = match.Groups [2].Value;  		continue;  	}  	switch (match.Groups [1].Value.ToLower ()) {  	case "httponly":  		this.scriptAccessible = false;  		break;  	case "expires":  		this.expirationDate = DateTime.Parse (match.Groups [2].Value);  		break;  	case "path":  		this.path = match.Groups [2].Value;  		break;  	case "domain":  		this.domain = match.Groups [2].Value;  		break;  	case "secure":  		this.secure = true;  		break;  	default:  		// TODO: warn of unknown cookie setting?  		break;  	}  }  
Magic Number,HTTP,Cookie,C:\repos\RSenApps_Metacast\Unity\Assets\UnityHTTP-master\src\CookieJar.cs,Cookie,The following statement contains a magic number: foreach (string part in parts) {  	Match match = Regex.Match (part' cookiePattern);  	if (!match.Success) {  		throw new Exception ("Could not parse cookie string: " + cookieString);  	}  	if (this.name == null) {  		this.name = match.Groups [1].Value;  		this.value = match.Groups [2].Value;  		continue;  	}  	switch (match.Groups [1].Value.ToLower ()) {  	case "httponly":  		this.scriptAccessible = false;  		break;  	case "expires":  		this.expirationDate = DateTime.Parse (match.Groups [2].Value);  		break;  	case "path":  		this.path = match.Groups [2].Value;  		break;  	case "domain":  		this.domain = match.Groups [2].Value;  		break;  	case "secure":  		this.secure = true;  		break;  	default:  		// TODO: warn of unknown cookie setting?  		break;  	}  }  
Magic Number,HTTP,Cookie,C:\repos\RSenApps_Metacast\Unity\Assets\UnityHTTP-master\src\CookieJar.cs,Cookie,The following statement contains a magic number: if (this.name == null) {  	this.name = match.Groups [1].Value;  	this.value = match.Groups [2].Value;  	continue;  }  
Magic Number,HTTP,Cookie,C:\repos\RSenApps_Metacast\Unity\Assets\UnityHTTP-master\src\CookieJar.cs,Cookie,The following statement contains a magic number: this.value = match.Groups [2].Value;  
Magic Number,HTTP,Cookie,C:\repos\RSenApps_Metacast\Unity\Assets\UnityHTTP-master\src\CookieJar.cs,Cookie,The following statement contains a magic number: switch (match.Groups [1].Value.ToLower ()) {  case "httponly":  	this.scriptAccessible = false;  	break;  case "expires":  	this.expirationDate = DateTime.Parse (match.Groups [2].Value);  	break;  case "path":  	this.path = match.Groups [2].Value;  	break;  case "domain":  	this.domain = match.Groups [2].Value;  	break;  case "secure":  	this.secure = true;  	break;  default:  	// TODO: warn of unknown cookie setting?  	break;  }  
Magic Number,HTTP,Cookie,C:\repos\RSenApps_Metacast\Unity\Assets\UnityHTTP-master\src\CookieJar.cs,Cookie,The following statement contains a magic number: switch (match.Groups [1].Value.ToLower ()) {  case "httponly":  	this.scriptAccessible = false;  	break;  case "expires":  	this.expirationDate = DateTime.Parse (match.Groups [2].Value);  	break;  case "path":  	this.path = match.Groups [2].Value;  	break;  case "domain":  	this.domain = match.Groups [2].Value;  	break;  case "secure":  	this.secure = true;  	break;  default:  	// TODO: warn of unknown cookie setting?  	break;  }  
Magic Number,HTTP,Cookie,C:\repos\RSenApps_Metacast\Unity\Assets\UnityHTTP-master\src\CookieJar.cs,Cookie,The following statement contains a magic number: switch (match.Groups [1].Value.ToLower ()) {  case "httponly":  	this.scriptAccessible = false;  	break;  case "expires":  	this.expirationDate = DateTime.Parse (match.Groups [2].Value);  	break;  case "path":  	this.path = match.Groups [2].Value;  	break;  case "domain":  	this.domain = match.Groups [2].Value;  	break;  case "secure":  	this.secure = true;  	break;  default:  	// TODO: warn of unknown cookie setting?  	break;  }  
Magic Number,HTTP,Cookie,C:\repos\RSenApps_Metacast\Unity\Assets\UnityHTTP-master\src\CookieJar.cs,Cookie,The following statement contains a magic number: this.expirationDate = DateTime.Parse (match.Groups [2].Value);  
Magic Number,HTTP,Cookie,C:\repos\RSenApps_Metacast\Unity\Assets\UnityHTTP-master\src\CookieJar.cs,Cookie,The following statement contains a magic number: this.path = match.Groups [2].Value;  
Magic Number,HTTP,Cookie,C:\repos\RSenApps_Metacast\Unity\Assets\UnityHTTP-master\src\CookieJar.cs,Cookie,The following statement contains a magic number: this.domain = match.Groups [2].Value;  
Magic Number,HTTP,DiskCache,C:\repos\RSenApps_Metacast\Unity\Assets\UnityHTTP-master\src\DiskCache.cs,DownloadAndSave,The following statement contains a magic number: if (request.exception == null && request.response != null) {  	if (request.response.status == 200) {  		var etag = request.response.GetHeader ("etag");  		if (etag != string.Empty) {  			File.WriteAllBytes (filename' request.response.bytes);  			File.WriteAllText (filename + ".etag"' etag);  		}  		useCachedVersion = false;  	}  }  
Magic Number,HTTP,DiskCache,C:\repos\RSenApps_Metacast\Unity\Assets\UnityHTTP-master\src\DiskCache.cs,DownloadAndSave,The following statement contains a magic number: if (request.response.status == 200) {  	var etag = request.response.GetHeader ("etag");  	if (etag != string.Empty) {  		File.WriteAllBytes (filename' request.response.bytes);  		File.WriteAllText (filename + ".etag"' etag);  	}  	useCachedVersion = false;  }  
Magic Number,HTTP,DiskCache,C:\repos\RSenApps_Metacast\Unity\Assets\UnityHTTP-master\src\DiskCache.cs,DownloadAndSave,The following statement contains a magic number: if (useCachedVersion) {  	if (request.exception != null) {  		Debug.LogWarning ("Using cached version due to exception:" + request.exception);  		request.exception = null;  	}  	request.response.status = 304;  	request.response.bytes = File.ReadAllBytes (filename);  	request.isDone = true;  }  
Magic Number,HTTP,DiskCache,C:\repos\RSenApps_Metacast\Unity\Assets\UnityHTTP-master\src\DiskCache.cs,DownloadAndSave,The following statement contains a magic number: request.response.status = 304;  
Magic Number,HTTP,Request,C:\repos\RSenApps_Metacast\Unity\Assets\UnityHTTP-master\src\Request.cs,GetResponse,The following statement contains a magic number: try {  	var retry = 0;  	while (++retry < maximumRetryCount) {  		if (useCache) {  			string etag = "";  			if (etags.TryGetValue (uri.AbsoluteUri' out etag)) {  				SetHeader ("If-None-Match"' etag);  			}  		}  		SetHeader ("Host"' uri.Host);  		var client = new TcpClient ();  		client.Connect (uri.Host' uri.Port);  		using (var stream = client.GetStream ()) {  			var ostream = stream as Stream;  			if (uri.Scheme.ToLower () == "https") {  				ostream = new SslStream (stream' false' new RemoteCertificateValidationCallback (ValidateServerCertificate));  				try {  					var ssl = ostream as SslStream;  					ssl.AuthenticateAsClient (uri.Host);  				}  				catch (Exception e) {  					Debug.LogError ("Exception: " + e.Message);  					return;  				}  			}  			WriteToStream (ostream);  			response = new Response ();  			response.request = this;  			state = RequestState.Reading;  			response.ReadFromStream (ostream);  		}  		client.Close ();  		switch (response.status) {  		case 307:  		case 302:  		case 301:  			uri = new Uri (response.GetHeader ("Location"));  			continue;  		default:  			retry = maximumRetryCount;  			break;  		}  	}  	if (useCache) {  		string etag = response.GetHeader ("etag");  		if (etag.Length > 0)  			etags [uri.AbsoluteUri] = etag;  	}  }  catch (Exception e) {  	Console.WriteLine ("Unhandled Exception' aborting request.");  	Console.WriteLine (e);  	exception = e;  	response = null;  }  
Magic Number,HTTP,Request,C:\repos\RSenApps_Metacast\Unity\Assets\UnityHTTP-master\src\Request.cs,GetResponse,The following statement contains a magic number: try {  	var retry = 0;  	while (++retry < maximumRetryCount) {  		if (useCache) {  			string etag = "";  			if (etags.TryGetValue (uri.AbsoluteUri' out etag)) {  				SetHeader ("If-None-Match"' etag);  			}  		}  		SetHeader ("Host"' uri.Host);  		var client = new TcpClient ();  		client.Connect (uri.Host' uri.Port);  		using (var stream = client.GetStream ()) {  			var ostream = stream as Stream;  			if (uri.Scheme.ToLower () == "https") {  				ostream = new SslStream (stream' false' new RemoteCertificateValidationCallback (ValidateServerCertificate));  				try {  					var ssl = ostream as SslStream;  					ssl.AuthenticateAsClient (uri.Host);  				}  				catch (Exception e) {  					Debug.LogError ("Exception: " + e.Message);  					return;  				}  			}  			WriteToStream (ostream);  			response = new Response ();  			response.request = this;  			state = RequestState.Reading;  			response.ReadFromStream (ostream);  		}  		client.Close ();  		switch (response.status) {  		case 307:  		case 302:  		case 301:  			uri = new Uri (response.GetHeader ("Location"));  			continue;  		default:  			retry = maximumRetryCount;  			break;  		}  	}  	if (useCache) {  		string etag = response.GetHeader ("etag");  		if (etag.Length > 0)  			etags [uri.AbsoluteUri] = etag;  	}  }  catch (Exception e) {  	Console.WriteLine ("Unhandled Exception' aborting request.");  	Console.WriteLine (e);  	exception = e;  	response = null;  }  
Magic Number,HTTP,Request,C:\repos\RSenApps_Metacast\Unity\Assets\UnityHTTP-master\src\Request.cs,GetResponse,The following statement contains a magic number: try {  	var retry = 0;  	while (++retry < maximumRetryCount) {  		if (useCache) {  			string etag = "";  			if (etags.TryGetValue (uri.AbsoluteUri' out etag)) {  				SetHeader ("If-None-Match"' etag);  			}  		}  		SetHeader ("Host"' uri.Host);  		var client = new TcpClient ();  		client.Connect (uri.Host' uri.Port);  		using (var stream = client.GetStream ()) {  			var ostream = stream as Stream;  			if (uri.Scheme.ToLower () == "https") {  				ostream = new SslStream (stream' false' new RemoteCertificateValidationCallback (ValidateServerCertificate));  				try {  					var ssl = ostream as SslStream;  					ssl.AuthenticateAsClient (uri.Host);  				}  				catch (Exception e) {  					Debug.LogError ("Exception: " + e.Message);  					return;  				}  			}  			WriteToStream (ostream);  			response = new Response ();  			response.request = this;  			state = RequestState.Reading;  			response.ReadFromStream (ostream);  		}  		client.Close ();  		switch (response.status) {  		case 307:  		case 302:  		case 301:  			uri = new Uri (response.GetHeader ("Location"));  			continue;  		default:  			retry = maximumRetryCount;  			break;  		}  	}  	if (useCache) {  		string etag = response.GetHeader ("etag");  		if (etag.Length > 0)  			etags [uri.AbsoluteUri] = etag;  	}  }  catch (Exception e) {  	Console.WriteLine ("Unhandled Exception' aborting request.");  	Console.WriteLine (e);  	exception = e;  	response = null;  }  
Magic Number,HTTP,Request,C:\repos\RSenApps_Metacast\Unity\Assets\UnityHTTP-master\src\Request.cs,GetResponse,The following statement contains a magic number: while (++retry < maximumRetryCount) {  	if (useCache) {  		string etag = "";  		if (etags.TryGetValue (uri.AbsoluteUri' out etag)) {  			SetHeader ("If-None-Match"' etag);  		}  	}  	SetHeader ("Host"' uri.Host);  	var client = new TcpClient ();  	client.Connect (uri.Host' uri.Port);  	using (var stream = client.GetStream ()) {  		var ostream = stream as Stream;  		if (uri.Scheme.ToLower () == "https") {  			ostream = new SslStream (stream' false' new RemoteCertificateValidationCallback (ValidateServerCertificate));  			try {  				var ssl = ostream as SslStream;  				ssl.AuthenticateAsClient (uri.Host);  			}  			catch (Exception e) {  				Debug.LogError ("Exception: " + e.Message);  				return;  			}  		}  		WriteToStream (ostream);  		response = new Response ();  		response.request = this;  		state = RequestState.Reading;  		response.ReadFromStream (ostream);  	}  	client.Close ();  	switch (response.status) {  	case 307:  	case 302:  	case 301:  		uri = new Uri (response.GetHeader ("Location"));  		continue;  	default:  		retry = maximumRetryCount;  		break;  	}  }  
Magic Number,HTTP,Request,C:\repos\RSenApps_Metacast\Unity\Assets\UnityHTTP-master\src\Request.cs,GetResponse,The following statement contains a magic number: while (++retry < maximumRetryCount) {  	if (useCache) {  		string etag = "";  		if (etags.TryGetValue (uri.AbsoluteUri' out etag)) {  			SetHeader ("If-None-Match"' etag);  		}  	}  	SetHeader ("Host"' uri.Host);  	var client = new TcpClient ();  	client.Connect (uri.Host' uri.Port);  	using (var stream = client.GetStream ()) {  		var ostream = stream as Stream;  		if (uri.Scheme.ToLower () == "https") {  			ostream = new SslStream (stream' false' new RemoteCertificateValidationCallback (ValidateServerCertificate));  			try {  				var ssl = ostream as SslStream;  				ssl.AuthenticateAsClient (uri.Host);  			}  			catch (Exception e) {  				Debug.LogError ("Exception: " + e.Message);  				return;  			}  		}  		WriteToStream (ostream);  		response = new Response ();  		response.request = this;  		state = RequestState.Reading;  		response.ReadFromStream (ostream);  	}  	client.Close ();  	switch (response.status) {  	case 307:  	case 302:  	case 301:  		uri = new Uri (response.GetHeader ("Location"));  		continue;  	default:  		retry = maximumRetryCount;  		break;  	}  }  
Magic Number,HTTP,Request,C:\repos\RSenApps_Metacast\Unity\Assets\UnityHTTP-master\src\Request.cs,GetResponse,The following statement contains a magic number: while (++retry < maximumRetryCount) {  	if (useCache) {  		string etag = "";  		if (etags.TryGetValue (uri.AbsoluteUri' out etag)) {  			SetHeader ("If-None-Match"' etag);  		}  	}  	SetHeader ("Host"' uri.Host);  	var client = new TcpClient ();  	client.Connect (uri.Host' uri.Port);  	using (var stream = client.GetStream ()) {  		var ostream = stream as Stream;  		if (uri.Scheme.ToLower () == "https") {  			ostream = new SslStream (stream' false' new RemoteCertificateValidationCallback (ValidateServerCertificate));  			try {  				var ssl = ostream as SslStream;  				ssl.AuthenticateAsClient (uri.Host);  			}  			catch (Exception e) {  				Debug.LogError ("Exception: " + e.Message);  				return;  			}  		}  		WriteToStream (ostream);  		response = new Response ();  		response.request = this;  		state = RequestState.Reading;  		response.ReadFromStream (ostream);  	}  	client.Close ();  	switch (response.status) {  	case 307:  	case 302:  	case 301:  		uri = new Uri (response.GetHeader ("Location"));  		continue;  	default:  		retry = maximumRetryCount;  		break;  	}  }  
Magic Number,HTTP,Request,C:\repos\RSenApps_Metacast\Unity\Assets\UnityHTTP-master\src\Request.cs,GetResponse,The following statement contains a magic number: switch (response.status) {  case 307:  case 302:  case 301:  	uri = new Uri (response.GetHeader ("Location"));  	continue;  default:  	retry = maximumRetryCount;  	break;  }  
Magic Number,HTTP,Request,C:\repos\RSenApps_Metacast\Unity\Assets\UnityHTTP-master\src\Request.cs,GetResponse,The following statement contains a magic number: switch (response.status) {  case 307:  case 302:  case 301:  	uri = new Uri (response.GetHeader ("Location"));  	continue;  default:  	retry = maximumRetryCount;  	break;  }  
Magic Number,HTTP,Request,C:\repos\RSenApps_Metacast\Unity\Assets\UnityHTTP-master\src\Request.cs,GetResponse,The following statement contains a magic number: switch (response.status) {  case 307:  case 302:  case 301:  	uri = new Uri (response.GetHeader ("Location"));  	continue;  default:  	retry = maximumRetryCount;  	break;  }  
Magic Number,HTTP,Request,C:\repos\RSenApps_Metacast\Unity\Assets\UnityHTTP-master\src\Request.cs,GetResponse,The following statement contains a magic number: if (LogAllRequests) {  	#if !UNITY_EDITOR  	                System.Console.WriteLine("NET: " + InfoString( VerboseLogging )); #else  	if (response != null && response.status >= 200 && response.status < 300) {  		Debug.Log (InfoString (VerboseLogging));  	}  	else if (response != null && response.status >= 400) {  		Debug.LogError (InfoString (VerboseLogging));  	}  	else {  		Debug.LogWarning (InfoString (VerboseLogging));  	}  	#endif  }  
Magic Number,HTTP,Request,C:\repos\RSenApps_Metacast\Unity\Assets\UnityHTTP-master\src\Request.cs,GetResponse,The following statement contains a magic number: if (LogAllRequests) {  	#if !UNITY_EDITOR  	                System.Console.WriteLine("NET: " + InfoString( VerboseLogging )); #else  	if (response != null && response.status >= 200 && response.status < 300) {  		Debug.Log (InfoString (VerboseLogging));  	}  	else if (response != null && response.status >= 400) {  		Debug.LogError (InfoString (VerboseLogging));  	}  	else {  		Debug.LogWarning (InfoString (VerboseLogging));  	}  	#endif  }  
Magic Number,HTTP,Request,C:\repos\RSenApps_Metacast\Unity\Assets\UnityHTTP-master\src\Request.cs,GetResponse,The following statement contains a magic number: if (LogAllRequests) {  	#if !UNITY_EDITOR  	                System.Console.WriteLine("NET: " + InfoString( VerboseLogging )); #else  	if (response != null && response.status >= 200 && response.status < 300) {  		Debug.Log (InfoString (VerboseLogging));  	}  	else if (response != null && response.status >= 400) {  		Debug.LogError (InfoString (VerboseLogging));  	}  	else {  		Debug.LogWarning (InfoString (VerboseLogging));  	}  	#endif  }  
Magic Number,HTTP,Request,C:\repos\RSenApps_Metacast\Unity\Assets\UnityHTTP-master\src\Request.cs,GetResponse,The following statement contains a magic number: if (response != null && response.status >= 200 && response.status < 300) {  	Debug.Log (InfoString (VerboseLogging));  }  else if (response != null && response.status >= 400) {  	Debug.LogError (InfoString (VerboseLogging));  }  else {  	Debug.LogWarning (InfoString (VerboseLogging));  }  
Magic Number,HTTP,Request,C:\repos\RSenApps_Metacast\Unity\Assets\UnityHTTP-master\src\Request.cs,GetResponse,The following statement contains a magic number: if (response != null && response.status >= 200 && response.status < 300) {  	Debug.Log (InfoString (VerboseLogging));  }  else if (response != null && response.status >= 400) {  	Debug.LogError (InfoString (VerboseLogging));  }  else {  	Debug.LogWarning (InfoString (VerboseLogging));  }  
Magic Number,HTTP,Request,C:\repos\RSenApps_Metacast\Unity\Assets\UnityHTTP-master\src\Request.cs,GetResponse,The following statement contains a magic number: if (response != null && response.status >= 200 && response.status < 300) {  	Debug.Log (InfoString (VerboseLogging));  }  else if (response != null && response.status >= 400) {  	Debug.LogError (InfoString (VerboseLogging));  }  else {  	Debug.LogWarning (InfoString (VerboseLogging));  }  
Magic Number,HTTP,Request,C:\repos\RSenApps_Metacast\Unity\Assets\UnityHTTP-master\src\Request.cs,GetResponse,The following statement contains a magic number: if (response != null && response.status >= 400) {  	Debug.LogError (InfoString (VerboseLogging));  }  else {  	Debug.LogWarning (InfoString (VerboseLogging));  }  
Magic Number,HTTP,Response,C:\repos\RSenApps_Metacast\Unity\Assets\UnityHTTP-master\src\Response.cs,ReadKeyValue,The following statement contains a magic number: if (line == "")  	return null;  else {  	var split = line.IndexOf (':');  	if (split == -1)  		return null;  	var parts = new string[2];  	parts [0] = line.Substring (0' split).Trim ();  	parts [1] = line.Substring (split + 1).Trim ();  	return parts;  }  
Magic Number,HTTP,Response,C:\repos\RSenApps_Metacast\Unity\Assets\UnityHTTP-master\src\Response.cs,ReadFromStream,The following statement contains a magic number: using (var output = new MemoryStream ()) {  	message = string.Join (" "' top' 2' top.Length - 2);  	headers.Clear ();  	while (true) {  		// Collect Headers  		string[] parts = ReadKeyValue (inputStream);  		if (parts == null)  			break;  		AddHeader (parts [0]' parts [1]);  	}  	if (request.cookieJar != null) {  		List<string> cookies = GetHeaders ("set-cookie");  		for (int cookieIndex = 0; cookieIndex < cookies.Count; ++cookieIndex) {  			string cookieString = cookies [cookieIndex];  			if (cookieString.IndexOf ("domain="' StringComparison.CurrentCultureIgnoreCase) == -1) {  				cookieString += "; domain=" + request.uri.Host;  			}  			if (cookieString.IndexOf ("path="' StringComparison.CurrentCultureIgnoreCase) == -1) {  				cookieString += "; path=" + request.uri.AbsolutePath;  			}  			request.cookieJar.SetCookie (new Cookie (cookieString));  		}  	}  	if (GetHeader ("transfer-encoding") == "chunked") {  		while (true) {  			// Collect Body  			int length = int.Parse (ReadLine (inputStream)' NumberStyles.AllowHexSpecifier);  			if (length == 0) {  				break;  			}  			for (int i = 0; i < length; i++) {  				output.WriteByte ((byte)inputStream.ReadByte ());  			}  			//forget the CRLF.  			inputStream.ReadByte ();  			inputStream.ReadByte ();  		}  		while (true) {  			//Collect Trailers  			string[] parts = ReadKeyValue (inputStream);  			if (parts == null)  				break;  			AddHeader (parts [0]' parts [1]);  		}  	}  	else {  		// Read Body  		int contentLength = 0;  		try {  			contentLength = int.Parse (GetHeader ("content-length"));  		}  		catch {  			contentLength = 0;  		}  		int _b;  		while ((contentLength == 0 || output.Length < contentLength) && (_b = inputStream.ReadByte ()) != -1) {  			output.WriteByte ((byte)_b);  		}  		if (contentLength > 0 && output.Length != contentLength) {  			throw new HTTPException ("Response length does not match content length");  		}  	}  	if (GetHeader ("content-encoding").Contains ("gzip")) {  		bytes = UnZip (output);  	}  	else {  		bytes = output.ToArray ();  	}  }  
Magic Number,HTTP,Response,C:\repos\RSenApps_Metacast\Unity\Assets\UnityHTTP-master\src\Response.cs,ReadFromStream,The following statement contains a magic number: using (var output = new MemoryStream ()) {  	message = string.Join (" "' top' 2' top.Length - 2);  	headers.Clear ();  	while (true) {  		// Collect Headers  		string[] parts = ReadKeyValue (inputStream);  		if (parts == null)  			break;  		AddHeader (parts [0]' parts [1]);  	}  	if (request.cookieJar != null) {  		List<string> cookies = GetHeaders ("set-cookie");  		for (int cookieIndex = 0; cookieIndex < cookies.Count; ++cookieIndex) {  			string cookieString = cookies [cookieIndex];  			if (cookieString.IndexOf ("domain="' StringComparison.CurrentCultureIgnoreCase) == -1) {  				cookieString += "; domain=" + request.uri.Host;  			}  			if (cookieString.IndexOf ("path="' StringComparison.CurrentCultureIgnoreCase) == -1) {  				cookieString += "; path=" + request.uri.AbsolutePath;  			}  			request.cookieJar.SetCookie (new Cookie (cookieString));  		}  	}  	if (GetHeader ("transfer-encoding") == "chunked") {  		while (true) {  			// Collect Body  			int length = int.Parse (ReadLine (inputStream)' NumberStyles.AllowHexSpecifier);  			if (length == 0) {  				break;  			}  			for (int i = 0; i < length; i++) {  				output.WriteByte ((byte)inputStream.ReadByte ());  			}  			//forget the CRLF.  			inputStream.ReadByte ();  			inputStream.ReadByte ();  		}  		while (true) {  			//Collect Trailers  			string[] parts = ReadKeyValue (inputStream);  			if (parts == null)  				break;  			AddHeader (parts [0]' parts [1]);  		}  	}  	else {  		// Read Body  		int contentLength = 0;  		try {  			contentLength = int.Parse (GetHeader ("content-length"));  		}  		catch {  			contentLength = 0;  		}  		int _b;  		while ((contentLength == 0 || output.Length < contentLength) && (_b = inputStream.ReadByte ()) != -1) {  			output.WriteByte ((byte)_b);  		}  		if (contentLength > 0 && output.Length != contentLength) {  			throw new HTTPException ("Response length does not match content length");  		}  	}  	if (GetHeader ("content-encoding").Contains ("gzip")) {  		bytes = UnZip (output);  	}  	else {  		bytes = output.ToArray ();  	}  }  
Magic Number,HTTP,Response,C:\repos\RSenApps_Metacast\Unity\Assets\UnityHTTP-master\src\Response.cs,ReadFromStream,The following statement contains a magic number: message = string.Join (" "' top' 2' top.Length - 2);  
Magic Number,HTTP,Response,C:\repos\RSenApps_Metacast\Unity\Assets\UnityHTTP-master\src\Response.cs,ReadFromStream,The following statement contains a magic number: message = string.Join (" "' top' 2' top.Length - 2);  
Magic Number,HTTP,Response,C:\repos\RSenApps_Metacast\Unity\Assets\UnityHTTP-master\src\Response.cs,UnZip,The following statement contains a magic number: using (var gz = new GZipStream (output' CompressionMode.Decompress)) {  	var buf = new byte[1024];  	int byteCount = 0;  	while ((byteCount = gz.Read (buf' 0' buf.Length)) > 0) {  		cms.Write (buf' 0' byteCount);  	}  }  
Missing Default,Thalmic.Myo,Myo,C:\repos\RSenApps_Metacast\Unity\Assets\Myo\Scripts\Myo.NET\Myo.cs,HandleEvent,The following switch statement is missing a default case: switch (type) {  case libmyo.EventType.Connected:  	if (Connected != null) {  		Connected (this' new MyoEventArgs (this' timestamp));  	}  	break;  case libmyo.EventType.Disconnected:  	if (Disconnected != null) {  		Disconnected (this' new MyoEventArgs (this' timestamp));  	}  	break;  case libmyo.EventType.ArmSynced:  	if (ArmSynced != null) {  		Arm arm = (Arm)libmyo.event_get_arm (evt);  		XDirection xDirection = (XDirection)libmyo.event_get_x_direction (evt);  		ArmSynced (this' new ArmSyncedEventArgs (this' timestamp' arm' xDirection));  	}  	break;  case libmyo.EventType.ArmUnsynced:  	if (ArmUnsynced != null) {  		ArmUnsynced (this' new MyoEventArgs (this' timestamp));  	}  	break;  case libmyo.EventType.Orientation:  	if (AccelerometerData != null) {  		float x = libmyo.event_get_accelerometer (evt' 0);  		float y = libmyo.event_get_accelerometer (evt' 1);  		float z = libmyo.event_get_accelerometer (evt' 2);  		var accelerometer = new Vector3 (x' y' z);  		AccelerometerData (this' new AccelerometerDataEventArgs (this' timestamp' accelerometer));  	}  	if (GyroscopeData != null) {  		float x = libmyo.event_get_gyroscope (evt' 0);  		float y = libmyo.event_get_gyroscope (evt' 1);  		float z = libmyo.event_get_gyroscope (evt' 2);  		var gyroscope = new Vector3 (x' y' z);  		GyroscopeData (this' new GyroscopeDataEventArgs (this' timestamp' gyroscope));  	}  	if (OrientationData != null) {  		float x = libmyo.event_get_orientation (evt' libmyo.OrientationIndex.X);  		float y = libmyo.event_get_orientation (evt' libmyo.OrientationIndex.Y);  		float z = libmyo.event_get_orientation (evt' libmyo.OrientationIndex.Z);  		float w = libmyo.event_get_orientation (evt' libmyo.OrientationIndex.W);  		var orientation = new Quaternion (x' y' z' w);  		OrientationData (this' new OrientationDataEventArgs (this' timestamp' orientation));  	}  	break;  case libmyo.EventType.Pose:  	if (PoseChange != null) {  		var pose = (Pose)libmyo.event_get_pose (evt);  		PoseChange (this' new PoseEventArgs (this' timestamp' pose));  	}  	break;  case libmyo.EventType.Rssi:  	if (Rssi != null) {  		var rssi = libmyo.event_get_rssi (evt);  		Rssi (this' new RssiEventArgs (this' timestamp' rssi));  	}  	break;  case libmyo.EventType.Unlocked:  	if (Unlocked != null) {  		Unlocked (this' new MyoEventArgs (this' timestamp));  	}  	break;  case libmyo.EventType.Locked:  	if (Locked != null) {  		Locked (this' new MyoEventArgs (this' timestamp));  	}  	break;  }  
