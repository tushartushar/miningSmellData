Implementation smell,Namespace,Class,File,Method,Description
Long Statement,Dota2ChatInterface,AdapterChooser,C:\repos\patriksletmo_Dota2Translator\Dota2ChatInterface\Windows\AdapterChooser.xaml.cs,LoadAdapters,The length of the statement  "                MessageBox.Show("It appears that Microsoft Visual C++ 2010 Redistributable is not installed' please run the installer found in the installation directory and then re-run this program."' "Could not detect any device"); " is 217.
Long Statement,Dota2ChatInterface,AdapterChooser,C:\repos\patriksletmo_Dota2Translator\Dota2ChatInterface\Windows\AdapterChooser.xaml.cs,LoadAdapters,The length of the statement  "                Dispatcher.Invoke(Delegate.CreateDelegate(typeof(VoidDelegate)' this' typeof(AdapterChooser).GetMethod("CloseWindow"))' new object[] { }); " is 138.
Long Statement,Dota2ChatInterface,AdapterChooser,C:\repos\patriksletmo_Dota2Translator\Dota2ChatInterface\Windows\AdapterChooser.xaml.cs,LoadAdapters,The length of the statement  "                MessageBox.Show("It appears that WinPcap is not installed' please run the WinPcap installer found in the installation directory and then re-run this program."' "Could not detect any device"); " is 191.
Long Statement,Dota2ChatInterface,AdapterChooser,C:\repos\patriksletmo_Dota2Translator\Dota2ChatInterface\Windows\AdapterChooser.xaml.cs,LoadAdapters,The length of the statement  "                Dispatcher.Invoke(Delegate.CreateDelegate(typeof(VoidDelegate)' this' typeof(AdapterChooser).GetMethod("CloseWindow"))' new object[] { }); " is 138.
Long Statement,Dota2ChatInterface,AdapterChooser,C:\repos\patriksletmo_Dota2Translator\Dota2ChatInterface\Windows\AdapterChooser.xaml.cs,LoadAdapters,The length of the statement  "                        Dispatcher.Invoke(Delegate.CreateDelegate(typeof(LaunchProgramDelegate)' this' typeof(AdapterChooser).GetMethod("LaunchProgram"))' new object[] { adapter.Index }); " is 163.
Long Statement,Dota2ChatInterface,AdapterChooser,C:\repos\patriksletmo_Dota2Translator\Dota2ChatInterface\Windows\AdapterChooser.xaml.cs,LoadAdapters,The length of the statement  "            Dispatcher.Invoke(Delegate.CreateDelegate(typeof(VoidDelegate)' this' typeof(AdapterChooser).GetMethod("DisplayAdapterResults"))' new object[] {} ); " is 148.
Long Statement,Dota2ChatInterface,AdapterChooser,C:\repos\patriksletmo_Dota2Translator\Dota2ChatInterface\Windows\AdapterChooser.xaml.cs,LoadAdapters,The length of the statement  "                Dispatcher.Invoke(Delegate.CreateDelegate(typeof(VoidDelegate)' this' typeof(AdapterChooser).GetMethod("ShowMainLayout"))' new object[] { }); " is 141.
Long Statement,Dota2ChatInterface,AdapterChooser,C:\repos\patriksletmo_Dota2Translator\Dota2ChatInterface\Windows\AdapterChooser.xaml.cs,GetDefaultAdapter,The length of the statement  "                ManagementObjectSearcher searcher = new ManagementObjectSearcher("Select MACAddress'PNPDeviceID FROM Win32_NetworkAdapter WHERE MACAddress IS NOT NULL AND PNPDeviceID IS NOT NULL"); " is 181.
Long Statement,Dota2ChatInterface,AdapterChooser,C:\repos\patriksletmo_Dota2Translator\Dota2ChatInterface\Windows\AdapterChooser.xaml.cs,GetDefaultAdapter,The length of the statement  "                MessageBox.Show("The service 'Windows Management Instrumentation' has to be running in order to determine the default network adapter. All adapters will be shown."' "Unable to find default adapter."); " is 200.
Long Statement,Dota2ChatInterface,AdapterChooser,C:\repos\patriksletmo_Dota2Translator\Dota2ChatInterface\Windows\AdapterChooser.xaml.cs,ShowMainLayout,The length of the statement  "            MessageBox.Show("The default adapter could not be found' please select a new one to start from.\n\nNote that your current default adapter will not be overwritten if you don't explicitly choose to."' "Failed to start using the default adapter"); " is 244.
Long Statement,Dota2ChatInterface,AdapterChooser,C:\repos\patriksletmo_Dota2Translator\Dota2ChatInterface\Windows\AdapterChooser.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/Dota2ChatInterface;component/windows/adapterchooser.xaml"' System.UriKind.Relative); " is 130.
Long Statement,Dota2ChatInterface,ChatItem,C:\repos\patriksletmo_Dota2Translator\Dota2ChatInterface\Usercontrols\ChatItem.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/Dota2ChatInterface;component/usercontrols/chatitem.xaml"' System.UriKind.Relative); " is 129.
Long Statement,Dota2ChatInterface,InjectionHelper,C:\repos\patriksletmo_Dota2Translator\Dota2ChatInterface\Classes\InjectionHelper.cs,AttachToProcess,The length of the statement  "                    System.Windows.MessageBox.Show("It appears that SlimDX is not installed' please run the SlimDX installer found in the installation directory and then attempt to add the overlay again. You do NOT have to close this program.\n\nIt should be noted that the installation of SlimDX not always works. Make sure that Dota 2 is closed before attempting to install it."' "Couldn't add overlay"); " is 386.
Long Statement,Dota2ChatInterface,InjectionHelper,C:\repos\patriksletmo_Dota2Translator\Dota2ChatInterface\Classes\InjectionHelper.cs,AttachToProcess,The length of the statement  "                // The game can end up in a state where no user input is received until a double tab out of/into the game. The window is brought to front in order to avoid this. " is 161.
Long Statement,Dota2ChatInterface,NetworkAdapterItem,C:\repos\patriksletmo_Dota2Translator\Dota2ChatInterface\Usercontrols\NetworkAdapterItem.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/Dota2ChatInterface;component/usercontrols/networkadapteritem.xaml"' System.UriKind.Relative); " is 139.
Long Statement,Dota2ChatInterface,Settings,C:\repos\patriksletmo_Dota2Translator\Dota2ChatInterface\Windows\Settings.xaml.cs,StoreTemporarily,The length of the statement  "            // Indicates whether or not all fields were successfully parsed' if one field or more was not parsed the window will not close. " is 127.
Long Statement,Dota2ChatInterface,Settings,C:\repos\patriksletmo_Dota2Translator\Dota2ChatInterface\Windows\Settings.xaml.cs,StoreTemporarily,The length of the statement  "            LoadedSettings.ExeName = EXE_NAME.Text.Trim(); // One does not simply use whitespace right before or after the file extension. " is 126.
Long Statement,Dota2ChatInterface,Settings,C:\repos\patriksletmo_Dota2Translator\Dota2ChatInterface\Windows\Settings.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/Dota2ChatInterface;component/windows/settings.xaml"' System.UriKind.Relative); " is 124.
Long Statement,Dota2ChatInterface,SettingsHandler,C:\repos\patriksletmo_Dota2Translator\Dota2ChatInterface\Windows\Settings.xaml.cs,GetFileStream,The length of the statement  "            String path = System.IO.Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData)' App.AppDataFolder); " is 126.
Long Statement,Dota2ChatInterface,Translate,C:\repos\patriksletmo_Dota2Translator\Dota2ChatInterface\Classes\Translate.cs,TranslateString,The length of the statement  "                request.Proxy = null; // Disable proxy lookup. Saves us around 7 seconds of waiting for one (which might not even exist). " is 121.
Long Statement,Dota2ChatInterface,Translate,C:\repos\patriksletmo_Dota2Translator\Dota2ChatInterface\Classes\Translate.cs,TranslateString,The length of the statement  "                request.UserAgent = "Mozilla/5.0 (Windows NT 6.1; WOW64; rv:19.0) Gecko/20100101 Firefox/19.0"; // Mozilla Firefox 19.0. Windows 7 64-bit. Updated 23/2 - 2013. " is 159.
Long Statement,Dota2ChatInterface,App,C:\repos\patriksletmo_Dota2Translator\Dota2ChatInterface\App.xaml.cs,OnStartup,The length of the statement  "            String path = System.IO.Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData)' AppDataFolder); " is 122.
Long Statement,Dota2ChatInterface,App,C:\repos\patriksletmo_Dota2Translator\Dota2ChatInterface\App.xaml.cs,CheckForUpdate,The length of the statement  "                MessageBoxResult result = MessageBox.Show("There is an update available' do you want to update now?"' "An update is available"' MessageBoxButton.YesNo); " is 152.
Long Statement,Dota2ChatInterface,App,C:\repos\patriksletmo_Dota2Translator\Dota2ChatInterface\App.xaml.cs,CheckForUpdate,The length of the statement  "                    Dispatcher.Invoke(Delegate.CreateDelegate(typeof(ShutdownDelegate)' this' typeof(App).GetMethod("Shutdown"' new Type[0]))' new object[] { }); " is 141.
Long Statement,Dota2ChatInterface,App,C:\repos\patriksletmo_Dota2Translator\Dota2ChatInterface\App.xaml.cs,HasWriteAccess,The length of the statement  "            AuthorizationRuleCollection rules = File.GetAccessControl(fileName).GetAccessRules(true' true' typeof(System.Security.Principal.SecurityIdentifier)); " is 149.
Long Statement,Dota2ChatInterface,App,C:\repos\patriksletmo_Dota2Translator\Dota2ChatInterface\App.xaml.cs,HasWriteAccess,The length of the statement  "            if (rules.OfType<FileSystemAccessRule>().Any(r => (groups.Contains(r.IdentityReference) || r.IdentityReference.Value == sidCurrentUser) && r.AccessControlType == AccessControlType.Deny && (r.FileSystemRights & FileSystemRights.WriteData) == FileSystemRights.WriteData)) " is 269.
Long Statement,Dota2ChatInterface,App,C:\repos\patriksletmo_Dota2Translator\Dota2ChatInterface\App.xaml.cs,HasWriteAccess,The length of the statement  "            return rules.OfType<FileSystemAccessRule>().Any(r => (groups.Contains(r.IdentityReference) || r.IdentityReference.Value == sidCurrentUser) && r.AccessControlType == AccessControlType.Allow && (r.FileSystemRights & FileSystemRights.WriteData) == FileSystemRights.WriteData); " is 273.
Long Statement,Dota2ChatInterface,MainWindow,C:\repos\patriksletmo_Dota2Translator\Dota2ChatInterface\Windows\MainWindow.xaml.cs,AddChatItem_Invoke,The length of the statement  "            Dispatcher.Invoke(Delegate.CreateDelegate(typeof(addChatItem_delegate)' this' typeof(MainWindow).GetMethod("AddChatItem"))' new object[] { scope' sender' message }); " is 165.
Long Statement,Dota2ChatInterface,MainWindow,C:\repos\patriksletmo_Dota2Translator\Dota2ChatInterface\Windows\MainWindow.xaml.cs,SetInjectOverlayButtonState_Invoke,The length of the statement  "            Dispatcher.Invoke(Delegate.CreateDelegate(typeof(SetInjectOverlayButtonState_Delegate)' this' typeof(MainWindow).GetMethod("SetInjectOverlayButtonState"))' new object[] { enabled }); " is 182.
Long Statement,Dota2ChatInterface,MainWindow,C:\repos\patriksletmo_Dota2Translator\Dota2ChatInterface\Windows\MainWindow.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/Dota2ChatInterface;component/windows/mainwindow.xaml"' System.UriKind.Relative); " is 126.
Long Statement,XamlGeneratedNamespace,GeneratedInternalTypeHelper,C:\repos\patriksletmo_Dota2Translator\Dota2ChatInterface\obj\x86\Release\GeneratedInternalTypeHelper.g.cs,CreateInstance,The length of the statement  "            return System.Activator.CreateInstance(type' ((System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic)  " is 128.
Complex Conditional,Dota2ChatInterface,App,C:\repos\patriksletmo_Dota2Translator\Dota2ChatInterface\App.xaml.cs,HasWriteAccess,The conditional expression  "rules.OfType<FileSystemAccessRule>().Any(r => (groups.Contains(r.IdentityReference) || r.IdentityReference.Value == sidCurrentUser) && r.AccessControlType == AccessControlType.Deny && (r.FileSystemRights & FileSystemRights.WriteData) == FileSystemRights.WriteData)"  is complex.
Empty Catch Block,Dota2ChatInterface,AdapterChooser,C:\repos\patriksletmo_Dota2Translator\Dota2ChatInterface\Windows\AdapterChooser.xaml.cs,GetDefaultAdapter,The method has an empty catch block.
Empty Catch Block,Dota2ChatInterface,SettingsHandler,C:\repos\patriksletmo_Dota2Translator\Dota2ChatInterface\Windows\Settings.xaml.cs,LoadSettings,The method has an empty catch block.
Magic Number,Dota2ChatInterface,AdapterChooser,C:\repos\patriksletmo_Dota2Translator\Dota2ChatInterface\Windows\AdapterChooser.xaml.cs,LoadAdapters,The following statement contains a magic number: AllAdapters = new Adapter[(deviceData.Length - 1) / 3];
Magic Number,Dota2ChatInterface,AdapterChooser,C:\repos\patriksletmo_Dota2Translator\Dota2ChatInterface\Windows\AdapterChooser.xaml.cs,LoadAdapters,The following statement contains a magic number: for (int i = 0; i < AllAdapters.Length; i++)              {                  // Put all the fields in an Adapter struct.                  Adapter adapter = new Adapter();                  adapter.Index = i;                  adapter.MAC = deviceData[i * 3];                  adapter.IP = deviceData[i * 3 + 1];                  adapter.Description = deviceData[i * 3 + 2];                  adapter.Found = true;                    if (HasDefaultAdapter)                  {                      // Check if this is our default adapter.                      if (adapter.MAC.ToLower().Equals(DefaultAdapterMAC.ToLower()))                      {                          Dispatcher.Invoke(Delegate.CreateDelegate(typeof(LaunchProgramDelegate)' this' typeof(AdapterChooser).GetMethod("LaunchProgram"))' new object[] { adapter.Index });                          return;                      }                  }                    AllAdapters[i] = adapter;              }
Magic Number,Dota2ChatInterface,AdapterChooser,C:\repos\patriksletmo_Dota2Translator\Dota2ChatInterface\Windows\AdapterChooser.xaml.cs,LoadAdapters,The following statement contains a magic number: for (int i = 0; i < AllAdapters.Length; i++)              {                  // Put all the fields in an Adapter struct.                  Adapter adapter = new Adapter();                  adapter.Index = i;                  adapter.MAC = deviceData[i * 3];                  adapter.IP = deviceData[i * 3 + 1];                  adapter.Description = deviceData[i * 3 + 2];                  adapter.Found = true;                    if (HasDefaultAdapter)                  {                      // Check if this is our default adapter.                      if (adapter.MAC.ToLower().Equals(DefaultAdapterMAC.ToLower()))                      {                          Dispatcher.Invoke(Delegate.CreateDelegate(typeof(LaunchProgramDelegate)' this' typeof(AdapterChooser).GetMethod("LaunchProgram"))' new object[] { adapter.Index });                          return;                      }                  }                    AllAdapters[i] = adapter;              }
Magic Number,Dota2ChatInterface,AdapterChooser,C:\repos\patriksletmo_Dota2Translator\Dota2ChatInterface\Windows\AdapterChooser.xaml.cs,LoadAdapters,The following statement contains a magic number: for (int i = 0; i < AllAdapters.Length; i++)              {                  // Put all the fields in an Adapter struct.                  Adapter adapter = new Adapter();                  adapter.Index = i;                  adapter.MAC = deviceData[i * 3];                  adapter.IP = deviceData[i * 3 + 1];                  adapter.Description = deviceData[i * 3 + 2];                  adapter.Found = true;                    if (HasDefaultAdapter)                  {                      // Check if this is our default adapter.                      if (adapter.MAC.ToLower().Equals(DefaultAdapterMAC.ToLower()))                      {                          Dispatcher.Invoke(Delegate.CreateDelegate(typeof(LaunchProgramDelegate)' this' typeof(AdapterChooser).GetMethod("LaunchProgram"))' new object[] { adapter.Index });                          return;                      }                  }                    AllAdapters[i] = adapter;              }
Magic Number,Dota2ChatInterface,AdapterChooser,C:\repos\patriksletmo_Dota2Translator\Dota2ChatInterface\Windows\AdapterChooser.xaml.cs,LoadAdapters,The following statement contains a magic number: for (int i = 0; i < AllAdapters.Length; i++)              {                  // Put all the fields in an Adapter struct.                  Adapter adapter = new Adapter();                  adapter.Index = i;                  adapter.MAC = deviceData[i * 3];                  adapter.IP = deviceData[i * 3 + 1];                  adapter.Description = deviceData[i * 3 + 2];                  adapter.Found = true;                    if (HasDefaultAdapter)                  {                      // Check if this is our default adapter.                      if (adapter.MAC.ToLower().Equals(DefaultAdapterMAC.ToLower()))                      {                          Dispatcher.Invoke(Delegate.CreateDelegate(typeof(LaunchProgramDelegate)' this' typeof(AdapterChooser).GetMethod("LaunchProgram"))' new object[] { adapter.Index });                          return;                      }                  }                    AllAdapters[i] = adapter;              }
Magic Number,Dota2ChatInterface,AdapterChooser,C:\repos\patriksletmo_Dota2Translator\Dota2ChatInterface\Windows\AdapterChooser.xaml.cs,AdvancedButton_Click,The following statement contains a magic number: Height += 200;
Magic Number,Dota2ChatInterface,AdapterChooser,C:\repos\patriksletmo_Dota2Translator\Dota2ChatInterface\Windows\AdapterChooser.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.MainLayout = ((System.Windows.Controls.Grid)(target));              return;              case 2:              this.DefaultIP = ((System.Windows.Controls.Label)(target));              return;              case 3:              this.DefaultDescription = ((System.Windows.Controls.Label)(target));              return;              case 4:              this.DefaultButton = ((System.Windows.Controls.Button)(target));              return;              case 5:              this.AdvancedButton = ((System.Windows.Controls.Button)(target));              return;              case 6:              this.AlwaysUseMain = ((System.Windows.Controls.CheckBox)(target));              return;              case 7:              this.AdvancedLayout = ((System.Windows.Controls.Grid)(target));              return;              case 8:              this.AvailableNetworkAdapters = ((System.Windows.Controls.ListBox)(target));              return;              case 9:              this.SelectButton = ((System.Windows.Controls.Button)(target));              return;              case 10:              this.AlwaysUseAdvanced = ((System.Windows.Controls.CheckBox)(target));              return;              case 11:              this.LoadingDefaultLayout = ((System.Windows.Controls.Grid)(target));              return;              }
Magic Number,Dota2ChatInterface,AdapterChooser,C:\repos\patriksletmo_Dota2Translator\Dota2ChatInterface\Windows\AdapterChooser.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.MainLayout = ((System.Windows.Controls.Grid)(target));              return;              case 2:              this.DefaultIP = ((System.Windows.Controls.Label)(target));              return;              case 3:              this.DefaultDescription = ((System.Windows.Controls.Label)(target));              return;              case 4:              this.DefaultButton = ((System.Windows.Controls.Button)(target));              return;              case 5:              this.AdvancedButton = ((System.Windows.Controls.Button)(target));              return;              case 6:              this.AlwaysUseMain = ((System.Windows.Controls.CheckBox)(target));              return;              case 7:              this.AdvancedLayout = ((System.Windows.Controls.Grid)(target));              return;              case 8:              this.AvailableNetworkAdapters = ((System.Windows.Controls.ListBox)(target));              return;              case 9:              this.SelectButton = ((System.Windows.Controls.Button)(target));              return;              case 10:              this.AlwaysUseAdvanced = ((System.Windows.Controls.CheckBox)(target));              return;              case 11:              this.LoadingDefaultLayout = ((System.Windows.Controls.Grid)(target));              return;              }
Magic Number,Dota2ChatInterface,AdapterChooser,C:\repos\patriksletmo_Dota2Translator\Dota2ChatInterface\Windows\AdapterChooser.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.MainLayout = ((System.Windows.Controls.Grid)(target));              return;              case 2:              this.DefaultIP = ((System.Windows.Controls.Label)(target));              return;              case 3:              this.DefaultDescription = ((System.Windows.Controls.Label)(target));              return;              case 4:              this.DefaultButton = ((System.Windows.Controls.Button)(target));              return;              case 5:              this.AdvancedButton = ((System.Windows.Controls.Button)(target));              return;              case 6:              this.AlwaysUseMain = ((System.Windows.Controls.CheckBox)(target));              return;              case 7:              this.AdvancedLayout = ((System.Windows.Controls.Grid)(target));              return;              case 8:              this.AvailableNetworkAdapters = ((System.Windows.Controls.ListBox)(target));              return;              case 9:              this.SelectButton = ((System.Windows.Controls.Button)(target));              return;              case 10:              this.AlwaysUseAdvanced = ((System.Windows.Controls.CheckBox)(target));              return;              case 11:              this.LoadingDefaultLayout = ((System.Windows.Controls.Grid)(target));              return;              }
Magic Number,Dota2ChatInterface,AdapterChooser,C:\repos\patriksletmo_Dota2Translator\Dota2ChatInterface\Windows\AdapterChooser.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.MainLayout = ((System.Windows.Controls.Grid)(target));              return;              case 2:              this.DefaultIP = ((System.Windows.Controls.Label)(target));              return;              case 3:              this.DefaultDescription = ((System.Windows.Controls.Label)(target));              return;              case 4:              this.DefaultButton = ((System.Windows.Controls.Button)(target));              return;              case 5:              this.AdvancedButton = ((System.Windows.Controls.Button)(target));              return;              case 6:              this.AlwaysUseMain = ((System.Windows.Controls.CheckBox)(target));              return;              case 7:              this.AdvancedLayout = ((System.Windows.Controls.Grid)(target));              return;              case 8:              this.AvailableNetworkAdapters = ((System.Windows.Controls.ListBox)(target));              return;              case 9:              this.SelectButton = ((System.Windows.Controls.Button)(target));              return;              case 10:              this.AlwaysUseAdvanced = ((System.Windows.Controls.CheckBox)(target));              return;              case 11:              this.LoadingDefaultLayout = ((System.Windows.Controls.Grid)(target));              return;              }
Magic Number,Dota2ChatInterface,AdapterChooser,C:\repos\patriksletmo_Dota2Translator\Dota2ChatInterface\Windows\AdapterChooser.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.MainLayout = ((System.Windows.Controls.Grid)(target));              return;              case 2:              this.DefaultIP = ((System.Windows.Controls.Label)(target));              return;              case 3:              this.DefaultDescription = ((System.Windows.Controls.Label)(target));              return;              case 4:              this.DefaultButton = ((System.Windows.Controls.Button)(target));              return;              case 5:              this.AdvancedButton = ((System.Windows.Controls.Button)(target));              return;              case 6:              this.AlwaysUseMain = ((System.Windows.Controls.CheckBox)(target));              return;              case 7:              this.AdvancedLayout = ((System.Windows.Controls.Grid)(target));              return;              case 8:              this.AvailableNetworkAdapters = ((System.Windows.Controls.ListBox)(target));              return;              case 9:              this.SelectButton = ((System.Windows.Controls.Button)(target));              return;              case 10:              this.AlwaysUseAdvanced = ((System.Windows.Controls.CheckBox)(target));              return;              case 11:              this.LoadingDefaultLayout = ((System.Windows.Controls.Grid)(target));              return;              }
Magic Number,Dota2ChatInterface,AdapterChooser,C:\repos\patriksletmo_Dota2Translator\Dota2ChatInterface\Windows\AdapterChooser.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.MainLayout = ((System.Windows.Controls.Grid)(target));              return;              case 2:              this.DefaultIP = ((System.Windows.Controls.Label)(target));              return;              case 3:              this.DefaultDescription = ((System.Windows.Controls.Label)(target));              return;              case 4:              this.DefaultButton = ((System.Windows.Controls.Button)(target));              return;              case 5:              this.AdvancedButton = ((System.Windows.Controls.Button)(target));              return;              case 6:              this.AlwaysUseMain = ((System.Windows.Controls.CheckBox)(target));              return;              case 7:              this.AdvancedLayout = ((System.Windows.Controls.Grid)(target));              return;              case 8:              this.AvailableNetworkAdapters = ((System.Windows.Controls.ListBox)(target));              return;              case 9:              this.SelectButton = ((System.Windows.Controls.Button)(target));              return;              case 10:              this.AlwaysUseAdvanced = ((System.Windows.Controls.CheckBox)(target));              return;              case 11:              this.LoadingDefaultLayout = ((System.Windows.Controls.Grid)(target));              return;              }
Magic Number,Dota2ChatInterface,AdapterChooser,C:\repos\patriksletmo_Dota2Translator\Dota2ChatInterface\Windows\AdapterChooser.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.MainLayout = ((System.Windows.Controls.Grid)(target));              return;              case 2:              this.DefaultIP = ((System.Windows.Controls.Label)(target));              return;              case 3:              this.DefaultDescription = ((System.Windows.Controls.Label)(target));              return;              case 4:              this.DefaultButton = ((System.Windows.Controls.Button)(target));              return;              case 5:              this.AdvancedButton = ((System.Windows.Controls.Button)(target));              return;              case 6:              this.AlwaysUseMain = ((System.Windows.Controls.CheckBox)(target));              return;              case 7:              this.AdvancedLayout = ((System.Windows.Controls.Grid)(target));              return;              case 8:              this.AvailableNetworkAdapters = ((System.Windows.Controls.ListBox)(target));              return;              case 9:              this.SelectButton = ((System.Windows.Controls.Button)(target));              return;              case 10:              this.AlwaysUseAdvanced = ((System.Windows.Controls.CheckBox)(target));              return;              case 11:              this.LoadingDefaultLayout = ((System.Windows.Controls.Grid)(target));              return;              }
Magic Number,Dota2ChatInterface,AdapterChooser,C:\repos\patriksletmo_Dota2Translator\Dota2ChatInterface\Windows\AdapterChooser.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.MainLayout = ((System.Windows.Controls.Grid)(target));              return;              case 2:              this.DefaultIP = ((System.Windows.Controls.Label)(target));              return;              case 3:              this.DefaultDescription = ((System.Windows.Controls.Label)(target));              return;              case 4:              this.DefaultButton = ((System.Windows.Controls.Button)(target));              return;              case 5:              this.AdvancedButton = ((System.Windows.Controls.Button)(target));              return;              case 6:              this.AlwaysUseMain = ((System.Windows.Controls.CheckBox)(target));              return;              case 7:              this.AdvancedLayout = ((System.Windows.Controls.Grid)(target));              return;              case 8:              this.AvailableNetworkAdapters = ((System.Windows.Controls.ListBox)(target));              return;              case 9:              this.SelectButton = ((System.Windows.Controls.Button)(target));              return;              case 10:              this.AlwaysUseAdvanced = ((System.Windows.Controls.CheckBox)(target));              return;              case 11:              this.LoadingDefaultLayout = ((System.Windows.Controls.Grid)(target));              return;              }
Magic Number,Dota2ChatInterface,AdapterChooser,C:\repos\patriksletmo_Dota2Translator\Dota2ChatInterface\Windows\AdapterChooser.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.MainLayout = ((System.Windows.Controls.Grid)(target));              return;              case 2:              this.DefaultIP = ((System.Windows.Controls.Label)(target));              return;              case 3:              this.DefaultDescription = ((System.Windows.Controls.Label)(target));              return;              case 4:              this.DefaultButton = ((System.Windows.Controls.Button)(target));              return;              case 5:              this.AdvancedButton = ((System.Windows.Controls.Button)(target));              return;              case 6:              this.AlwaysUseMain = ((System.Windows.Controls.CheckBox)(target));              return;              case 7:              this.AdvancedLayout = ((System.Windows.Controls.Grid)(target));              return;              case 8:              this.AvailableNetworkAdapters = ((System.Windows.Controls.ListBox)(target));              return;              case 9:              this.SelectButton = ((System.Windows.Controls.Button)(target));              return;              case 10:              this.AlwaysUseAdvanced = ((System.Windows.Controls.CheckBox)(target));              return;              case 11:              this.LoadingDefaultLayout = ((System.Windows.Controls.Grid)(target));              return;              }
Magic Number,Dota2ChatInterface,AdapterChooser,C:\repos\patriksletmo_Dota2Translator\Dota2ChatInterface\Windows\AdapterChooser.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.MainLayout = ((System.Windows.Controls.Grid)(target));              return;              case 2:              this.DefaultIP = ((System.Windows.Controls.Label)(target));              return;              case 3:              this.DefaultDescription = ((System.Windows.Controls.Label)(target));              return;              case 4:              this.DefaultButton = ((System.Windows.Controls.Button)(target));              return;              case 5:              this.AdvancedButton = ((System.Windows.Controls.Button)(target));              return;              case 6:              this.AlwaysUseMain = ((System.Windows.Controls.CheckBox)(target));              return;              case 7:              this.AdvancedLayout = ((System.Windows.Controls.Grid)(target));              return;              case 8:              this.AvailableNetworkAdapters = ((System.Windows.Controls.ListBox)(target));              return;              case 9:              this.SelectButton = ((System.Windows.Controls.Button)(target));              return;              case 10:              this.AlwaysUseAdvanced = ((System.Windows.Controls.CheckBox)(target));              return;              case 11:              this.LoadingDefaultLayout = ((System.Windows.Controls.Grid)(target));              return;              }
Magic Number,Dota2ChatInterface,ChatItem,C:\repos\patriksletmo_Dota2Translator\Dota2ChatInterface\Usercontrols\ChatItem.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this._Scope = ((System.Windows.Controls.Label)(target));              return;              case 2:              this._Sender = ((System.Windows.Controls.Label)(target));              return;              case 3:              this._Message = ((System.Windows.Controls.TextBlock)(target));              return;              }
Magic Number,Dota2ChatInterface,ChatItem,C:\repos\patriksletmo_Dota2Translator\Dota2ChatInterface\Usercontrols\ChatItem.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this._Scope = ((System.Windows.Controls.Label)(target));              return;              case 2:              this._Sender = ((System.Windows.Controls.Label)(target));              return;              case 3:              this._Message = ((System.Windows.Controls.TextBlock)(target));              return;              }
Magic Number,Dota2ChatInterface,InjectionHelper,C:\repos\patriksletmo_Dota2Translator\Dota2ChatInterface\Classes\InjectionHelper.cs,SendSetting,The following statement contains a magic number: MessageManager.AddPendingEvent(                  2'                  new object[] { name' value }                  );
Magic Number,Dota2ChatInterface,InjectionHelper,C:\repos\patriksletmo_Dota2Translator\Dota2ChatInterface\Classes\InjectionHelper.cs,BringProcessWindowToFront,The following statement contains a magic number: while (!NativeMethods.IsWindowInForeground(handle))              {                  if (i == 0)                  {                      // Wait before the initial attempt to bring the window to front.                      Thread.Sleep(250);                  }                    // Checks if the window is minimized.                  if (NativeMethods.IsIconic(handle))                  {                      // Call the restore method.                      NativeMethods.ShowWindow(handle' NativeMethods.WindowShowStyle.Restore);                  }                  else                  {                      // Already visible' just bring the window to front.                      NativeMethods.SetForegroundWindow(handle);                  }                  Thread.Sleep(250);                    // Check if the window is in front.                  if (NativeMethods.IsWindowInForeground(handle))                  {                      // Wait (enough time) for the screen to re-draw.                      Thread.Sleep(1000);                      return true;                  }                    // Don't loop forever.                  if (i > 40) // Abort if no success has been made the first 10 seconds.                  {                      return false;                  }                  i++;              }
Magic Number,Dota2ChatInterface,InjectionHelper,C:\repos\patriksletmo_Dota2Translator\Dota2ChatInterface\Classes\InjectionHelper.cs,BringProcessWindowToFront,The following statement contains a magic number: while (!NativeMethods.IsWindowInForeground(handle))              {                  if (i == 0)                  {                      // Wait before the initial attempt to bring the window to front.                      Thread.Sleep(250);                  }                    // Checks if the window is minimized.                  if (NativeMethods.IsIconic(handle))                  {                      // Call the restore method.                      NativeMethods.ShowWindow(handle' NativeMethods.WindowShowStyle.Restore);                  }                  else                  {                      // Already visible' just bring the window to front.                      NativeMethods.SetForegroundWindow(handle);                  }                  Thread.Sleep(250);                    // Check if the window is in front.                  if (NativeMethods.IsWindowInForeground(handle))                  {                      // Wait (enough time) for the screen to re-draw.                      Thread.Sleep(1000);                      return true;                  }                    // Don't loop forever.                  if (i > 40) // Abort if no success has been made the first 10 seconds.                  {                      return false;                  }                  i++;              }
Magic Number,Dota2ChatInterface,InjectionHelper,C:\repos\patriksletmo_Dota2Translator\Dota2ChatInterface\Classes\InjectionHelper.cs,BringProcessWindowToFront,The following statement contains a magic number: while (!NativeMethods.IsWindowInForeground(handle))              {                  if (i == 0)                  {                      // Wait before the initial attempt to bring the window to front.                      Thread.Sleep(250);                  }                    // Checks if the window is minimized.                  if (NativeMethods.IsIconic(handle))                  {                      // Call the restore method.                      NativeMethods.ShowWindow(handle' NativeMethods.WindowShowStyle.Restore);                  }                  else                  {                      // Already visible' just bring the window to front.                      NativeMethods.SetForegroundWindow(handle);                  }                  Thread.Sleep(250);                    // Check if the window is in front.                  if (NativeMethods.IsWindowInForeground(handle))                  {                      // Wait (enough time) for the screen to re-draw.                      Thread.Sleep(1000);                      return true;                  }                    // Don't loop forever.                  if (i > 40) // Abort if no success has been made the first 10 seconds.                  {                      return false;                  }                  i++;              }
Magic Number,Dota2ChatInterface,InjectionHelper,C:\repos\patriksletmo_Dota2Translator\Dota2ChatInterface\Classes\InjectionHelper.cs,BringProcessWindowToFront,The following statement contains a magic number: while (!NativeMethods.IsWindowInForeground(handle))              {                  if (i == 0)                  {                      // Wait before the initial attempt to bring the window to front.                      Thread.Sleep(250);                  }                    // Checks if the window is minimized.                  if (NativeMethods.IsIconic(handle))                  {                      // Call the restore method.                      NativeMethods.ShowWindow(handle' NativeMethods.WindowShowStyle.Restore);                  }                  else                  {                      // Already visible' just bring the window to front.                      NativeMethods.SetForegroundWindow(handle);                  }                  Thread.Sleep(250);                    // Check if the window is in front.                  if (NativeMethods.IsWindowInForeground(handle))                  {                      // Wait (enough time) for the screen to re-draw.                      Thread.Sleep(1000);                      return true;                  }                    // Don't loop forever.                  if (i > 40) // Abort if no success has been made the first 10 seconds.                  {                      return false;                  }                  i++;              }
Magic Number,Dota2ChatInterface,NetworkAdapterItem,C:\repos\patriksletmo_Dota2Translator\Dota2ChatInterface\Usercontrols\NetworkAdapterItem.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.ItemIP = ((System.Windows.Controls.Label)(target));              return;              case 2:              this.ItemDescription = ((System.Windows.Controls.Label)(target));              return;              }
Magic Number,Dota2ChatInterface,Settings,C:\repos\patriksletmo_Dota2Translator\Dota2ChatInterface\Windows\Settings.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.EXE_NAME = ((System.Windows.Controls.TextBox)(target));              return;              case 2:              this.AUTO_HIDE = ((System.Windows.Controls.CheckBox)(target));              return;              case 3:              this.ADD_ON_STARTUP = ((System.Windows.Controls.CheckBox)(target));              return;              case 4:              this.FONT_NAME = ((System.Windows.Controls.ComboBox)(target));              return;              case 5:              this.TRANSLATE_TO = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.OUTPUT_ALL = ((System.Windows.Controls.CheckBox)(target));              return;              case 7:              this.IsComicSans = ((System.Windows.Controls.StackPanel)(target));              return;              case 8:              this.MESSAGES_SHOWN = ((System.Windows.Controls.TextBox)(target));              return;              case 9:              this.FADE_MESSAGES = ((System.Windows.Controls.CheckBox)(target));              return;              case 10:              this.FADE_WAIT = ((System.Windows.Controls.TextBox)(target));              return;              case 11:              this.FADE_DURATION = ((System.Windows.Controls.TextBox)(target));              return;              case 12:              this.CancelButton = ((System.Windows.Controls.Button)(target));              return;              case 13:              this.SaveButton = ((System.Windows.Controls.Button)(target));              return;              case 14:              this.DefaultFontButton = ((System.Windows.Controls.Button)(target));              return;              case 15:              this.MESSAGE_HEIGHT = ((System.Windows.Controls.TextBox)(target));              return;              case 16:              this.AUTO_MESSAGE_HEIGHT = ((System.Windows.Controls.CheckBox)(target));              return;              case 17:              this.USE_DEFAULT_ADAPTER = ((System.Windows.Controls.CheckBox)(target));              return;              case 18:              this.AUTO_DETECT_PORT = ((System.Windows.Controls.CheckBox)(target));              return;              case 19:              this.AUTO_DETECT_PROGRAM = ((System.Windows.Controls.TextBox)(target));              return;              }
Magic Number,Dota2ChatInterface,Settings,C:\repos\patriksletmo_Dota2Translator\Dota2ChatInterface\Windows\Settings.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.EXE_NAME = ((System.Windows.Controls.TextBox)(target));              return;              case 2:              this.AUTO_HIDE = ((System.Windows.Controls.CheckBox)(target));              return;              case 3:              this.ADD_ON_STARTUP = ((System.Windows.Controls.CheckBox)(target));              return;              case 4:              this.FONT_NAME = ((System.Windows.Controls.ComboBox)(target));              return;              case 5:              this.TRANSLATE_TO = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.OUTPUT_ALL = ((System.Windows.Controls.CheckBox)(target));              return;              case 7:              this.IsComicSans = ((System.Windows.Controls.StackPanel)(target));              return;              case 8:              this.MESSAGES_SHOWN = ((System.Windows.Controls.TextBox)(target));              return;              case 9:              this.FADE_MESSAGES = ((System.Windows.Controls.CheckBox)(target));              return;              case 10:              this.FADE_WAIT = ((System.Windows.Controls.TextBox)(target));              return;              case 11:              this.FADE_DURATION = ((System.Windows.Controls.TextBox)(target));              return;              case 12:              this.CancelButton = ((System.Windows.Controls.Button)(target));              return;              case 13:              this.SaveButton = ((System.Windows.Controls.Button)(target));              return;              case 14:              this.DefaultFontButton = ((System.Windows.Controls.Button)(target));              return;              case 15:              this.MESSAGE_HEIGHT = ((System.Windows.Controls.TextBox)(target));              return;              case 16:              this.AUTO_MESSAGE_HEIGHT = ((System.Windows.Controls.CheckBox)(target));              return;              case 17:              this.USE_DEFAULT_ADAPTER = ((System.Windows.Controls.CheckBox)(target));              return;              case 18:              this.AUTO_DETECT_PORT = ((System.Windows.Controls.CheckBox)(target));              return;              case 19:              this.AUTO_DETECT_PROGRAM = ((System.Windows.Controls.TextBox)(target));              return;              }
Magic Number,Dota2ChatInterface,Settings,C:\repos\patriksletmo_Dota2Translator\Dota2ChatInterface\Windows\Settings.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.EXE_NAME = ((System.Windows.Controls.TextBox)(target));              return;              case 2:              this.AUTO_HIDE = ((System.Windows.Controls.CheckBox)(target));              return;              case 3:              this.ADD_ON_STARTUP = ((System.Windows.Controls.CheckBox)(target));              return;              case 4:              this.FONT_NAME = ((System.Windows.Controls.ComboBox)(target));              return;              case 5:              this.TRANSLATE_TO = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.OUTPUT_ALL = ((System.Windows.Controls.CheckBox)(target));              return;              case 7:              this.IsComicSans = ((System.Windows.Controls.StackPanel)(target));              return;              case 8:              this.MESSAGES_SHOWN = ((System.Windows.Controls.TextBox)(target));              return;              case 9:              this.FADE_MESSAGES = ((System.Windows.Controls.CheckBox)(target));              return;              case 10:              this.FADE_WAIT = ((System.Windows.Controls.TextBox)(target));              return;              case 11:              this.FADE_DURATION = ((System.Windows.Controls.TextBox)(target));              return;              case 12:              this.CancelButton = ((System.Windows.Controls.Button)(target));              return;              case 13:              this.SaveButton = ((System.Windows.Controls.Button)(target));              return;              case 14:              this.DefaultFontButton = ((System.Windows.Controls.Button)(target));              return;              case 15:              this.MESSAGE_HEIGHT = ((System.Windows.Controls.TextBox)(target));              return;              case 16:              this.AUTO_MESSAGE_HEIGHT = ((System.Windows.Controls.CheckBox)(target));              return;              case 17:              this.USE_DEFAULT_ADAPTER = ((System.Windows.Controls.CheckBox)(target));              return;              case 18:              this.AUTO_DETECT_PORT = ((System.Windows.Controls.CheckBox)(target));              return;              case 19:              this.AUTO_DETECT_PROGRAM = ((System.Windows.Controls.TextBox)(target));              return;              }
Magic Number,Dota2ChatInterface,Settings,C:\repos\patriksletmo_Dota2Translator\Dota2ChatInterface\Windows\Settings.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.EXE_NAME = ((System.Windows.Controls.TextBox)(target));              return;              case 2:              this.AUTO_HIDE = ((System.Windows.Controls.CheckBox)(target));              return;              case 3:              this.ADD_ON_STARTUP = ((System.Windows.Controls.CheckBox)(target));              return;              case 4:              this.FONT_NAME = ((System.Windows.Controls.ComboBox)(target));              return;              case 5:              this.TRANSLATE_TO = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.OUTPUT_ALL = ((System.Windows.Controls.CheckBox)(target));              return;              case 7:              this.IsComicSans = ((System.Windows.Controls.StackPanel)(target));              return;              case 8:              this.MESSAGES_SHOWN = ((System.Windows.Controls.TextBox)(target));              return;              case 9:              this.FADE_MESSAGES = ((System.Windows.Controls.CheckBox)(target));              return;              case 10:              this.FADE_WAIT = ((System.Windows.Controls.TextBox)(target));              return;              case 11:              this.FADE_DURATION = ((System.Windows.Controls.TextBox)(target));              return;              case 12:              this.CancelButton = ((System.Windows.Controls.Button)(target));              return;              case 13:              this.SaveButton = ((System.Windows.Controls.Button)(target));              return;              case 14:              this.DefaultFontButton = ((System.Windows.Controls.Button)(target));              return;              case 15:              this.MESSAGE_HEIGHT = ((System.Windows.Controls.TextBox)(target));              return;              case 16:              this.AUTO_MESSAGE_HEIGHT = ((System.Windows.Controls.CheckBox)(target));              return;              case 17:              this.USE_DEFAULT_ADAPTER = ((System.Windows.Controls.CheckBox)(target));              return;              case 18:              this.AUTO_DETECT_PORT = ((System.Windows.Controls.CheckBox)(target));              return;              case 19:              this.AUTO_DETECT_PROGRAM = ((System.Windows.Controls.TextBox)(target));              return;              }
Magic Number,Dota2ChatInterface,Settings,C:\repos\patriksletmo_Dota2Translator\Dota2ChatInterface\Windows\Settings.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.EXE_NAME = ((System.Windows.Controls.TextBox)(target));              return;              case 2:              this.AUTO_HIDE = ((System.Windows.Controls.CheckBox)(target));              return;              case 3:              this.ADD_ON_STARTUP = ((System.Windows.Controls.CheckBox)(target));              return;              case 4:              this.FONT_NAME = ((System.Windows.Controls.ComboBox)(target));              return;              case 5:              this.TRANSLATE_TO = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.OUTPUT_ALL = ((System.Windows.Controls.CheckBox)(target));              return;              case 7:              this.IsComicSans = ((System.Windows.Controls.StackPanel)(target));              return;              case 8:              this.MESSAGES_SHOWN = ((System.Windows.Controls.TextBox)(target));              return;              case 9:              this.FADE_MESSAGES = ((System.Windows.Controls.CheckBox)(target));              return;              case 10:              this.FADE_WAIT = ((System.Windows.Controls.TextBox)(target));              return;              case 11:              this.FADE_DURATION = ((System.Windows.Controls.TextBox)(target));              return;              case 12:              this.CancelButton = ((System.Windows.Controls.Button)(target));              return;              case 13:              this.SaveButton = ((System.Windows.Controls.Button)(target));              return;              case 14:              this.DefaultFontButton = ((System.Windows.Controls.Button)(target));              return;              case 15:              this.MESSAGE_HEIGHT = ((System.Windows.Controls.TextBox)(target));              return;              case 16:              this.AUTO_MESSAGE_HEIGHT = ((System.Windows.Controls.CheckBox)(target));              return;              case 17:              this.USE_DEFAULT_ADAPTER = ((System.Windows.Controls.CheckBox)(target));              return;              case 18:              this.AUTO_DETECT_PORT = ((System.Windows.Controls.CheckBox)(target));              return;              case 19:              this.AUTO_DETECT_PROGRAM = ((System.Windows.Controls.TextBox)(target));              return;              }
Magic Number,Dota2ChatInterface,Settings,C:\repos\patriksletmo_Dota2Translator\Dota2ChatInterface\Windows\Settings.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.EXE_NAME = ((System.Windows.Controls.TextBox)(target));              return;              case 2:              this.AUTO_HIDE = ((System.Windows.Controls.CheckBox)(target));              return;              case 3:              this.ADD_ON_STARTUP = ((System.Windows.Controls.CheckBox)(target));              return;              case 4:              this.FONT_NAME = ((System.Windows.Controls.ComboBox)(target));              return;              case 5:              this.TRANSLATE_TO = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.OUTPUT_ALL = ((System.Windows.Controls.CheckBox)(target));              return;              case 7:              this.IsComicSans = ((System.Windows.Controls.StackPanel)(target));              return;              case 8:              this.MESSAGES_SHOWN = ((System.Windows.Controls.TextBox)(target));              return;              case 9:              this.FADE_MESSAGES = ((System.Windows.Controls.CheckBox)(target));              return;              case 10:              this.FADE_WAIT = ((System.Windows.Controls.TextBox)(target));              return;              case 11:              this.FADE_DURATION = ((System.Windows.Controls.TextBox)(target));              return;              case 12:              this.CancelButton = ((System.Windows.Controls.Button)(target));              return;              case 13:              this.SaveButton = ((System.Windows.Controls.Button)(target));              return;              case 14:              this.DefaultFontButton = ((System.Windows.Controls.Button)(target));              return;              case 15:              this.MESSAGE_HEIGHT = ((System.Windows.Controls.TextBox)(target));              return;              case 16:              this.AUTO_MESSAGE_HEIGHT = ((System.Windows.Controls.CheckBox)(target));              return;              case 17:              this.USE_DEFAULT_ADAPTER = ((System.Windows.Controls.CheckBox)(target));              return;              case 18:              this.AUTO_DETECT_PORT = ((System.Windows.Controls.CheckBox)(target));              return;              case 19:              this.AUTO_DETECT_PROGRAM = ((System.Windows.Controls.TextBox)(target));              return;              }
Magic Number,Dota2ChatInterface,Settings,C:\repos\patriksletmo_Dota2Translator\Dota2ChatInterface\Windows\Settings.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.EXE_NAME = ((System.Windows.Controls.TextBox)(target));              return;              case 2:              this.AUTO_HIDE = ((System.Windows.Controls.CheckBox)(target));              return;              case 3:              this.ADD_ON_STARTUP = ((System.Windows.Controls.CheckBox)(target));              return;              case 4:              this.FONT_NAME = ((System.Windows.Controls.ComboBox)(target));              return;              case 5:              this.TRANSLATE_TO = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.OUTPUT_ALL = ((System.Windows.Controls.CheckBox)(target));              return;              case 7:              this.IsComicSans = ((System.Windows.Controls.StackPanel)(target));              return;              case 8:              this.MESSAGES_SHOWN = ((System.Windows.Controls.TextBox)(target));              return;              case 9:              this.FADE_MESSAGES = ((System.Windows.Controls.CheckBox)(target));              return;              case 10:              this.FADE_WAIT = ((System.Windows.Controls.TextBox)(target));              return;              case 11:              this.FADE_DURATION = ((System.Windows.Controls.TextBox)(target));              return;              case 12:              this.CancelButton = ((System.Windows.Controls.Button)(target));              return;              case 13:              this.SaveButton = ((System.Windows.Controls.Button)(target));              return;              case 14:              this.DefaultFontButton = ((System.Windows.Controls.Button)(target));              return;              case 15:              this.MESSAGE_HEIGHT = ((System.Windows.Controls.TextBox)(target));              return;              case 16:              this.AUTO_MESSAGE_HEIGHT = ((System.Windows.Controls.CheckBox)(target));              return;              case 17:              this.USE_DEFAULT_ADAPTER = ((System.Windows.Controls.CheckBox)(target));              return;              case 18:              this.AUTO_DETECT_PORT = ((System.Windows.Controls.CheckBox)(target));              return;              case 19:              this.AUTO_DETECT_PROGRAM = ((System.Windows.Controls.TextBox)(target));              return;              }
Magic Number,Dota2ChatInterface,Settings,C:\repos\patriksletmo_Dota2Translator\Dota2ChatInterface\Windows\Settings.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.EXE_NAME = ((System.Windows.Controls.TextBox)(target));              return;              case 2:              this.AUTO_HIDE = ((System.Windows.Controls.CheckBox)(target));              return;              case 3:              this.ADD_ON_STARTUP = ((System.Windows.Controls.CheckBox)(target));              return;              case 4:              this.FONT_NAME = ((System.Windows.Controls.ComboBox)(target));              return;              case 5:              this.TRANSLATE_TO = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.OUTPUT_ALL = ((System.Windows.Controls.CheckBox)(target));              return;              case 7:              this.IsComicSans = ((System.Windows.Controls.StackPanel)(target));              return;              case 8:              this.MESSAGES_SHOWN = ((System.Windows.Controls.TextBox)(target));              return;              case 9:              this.FADE_MESSAGES = ((System.Windows.Controls.CheckBox)(target));              return;              case 10:              this.FADE_WAIT = ((System.Windows.Controls.TextBox)(target));              return;              case 11:              this.FADE_DURATION = ((System.Windows.Controls.TextBox)(target));              return;              case 12:              this.CancelButton = ((System.Windows.Controls.Button)(target));              return;              case 13:              this.SaveButton = ((System.Windows.Controls.Button)(target));              return;              case 14:              this.DefaultFontButton = ((System.Windows.Controls.Button)(target));              return;              case 15:              this.MESSAGE_HEIGHT = ((System.Windows.Controls.TextBox)(target));              return;              case 16:              this.AUTO_MESSAGE_HEIGHT = ((System.Windows.Controls.CheckBox)(target));              return;              case 17:              this.USE_DEFAULT_ADAPTER = ((System.Windows.Controls.CheckBox)(target));              return;              case 18:              this.AUTO_DETECT_PORT = ((System.Windows.Controls.CheckBox)(target));              return;              case 19:              this.AUTO_DETECT_PROGRAM = ((System.Windows.Controls.TextBox)(target));              return;              }
Magic Number,Dota2ChatInterface,Settings,C:\repos\patriksletmo_Dota2Translator\Dota2ChatInterface\Windows\Settings.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.EXE_NAME = ((System.Windows.Controls.TextBox)(target));              return;              case 2:              this.AUTO_HIDE = ((System.Windows.Controls.CheckBox)(target));              return;              case 3:              this.ADD_ON_STARTUP = ((System.Windows.Controls.CheckBox)(target));              return;              case 4:              this.FONT_NAME = ((System.Windows.Controls.ComboBox)(target));              return;              case 5:              this.TRANSLATE_TO = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.OUTPUT_ALL = ((System.Windows.Controls.CheckBox)(target));              return;              case 7:              this.IsComicSans = ((System.Windows.Controls.StackPanel)(target));              return;              case 8:              this.MESSAGES_SHOWN = ((System.Windows.Controls.TextBox)(target));              return;              case 9:              this.FADE_MESSAGES = ((System.Windows.Controls.CheckBox)(target));              return;              case 10:              this.FADE_WAIT = ((System.Windows.Controls.TextBox)(target));              return;              case 11:              this.FADE_DURATION = ((System.Windows.Controls.TextBox)(target));              return;              case 12:              this.CancelButton = ((System.Windows.Controls.Button)(target));              return;              case 13:              this.SaveButton = ((System.Windows.Controls.Button)(target));              return;              case 14:              this.DefaultFontButton = ((System.Windows.Controls.Button)(target));              return;              case 15:              this.MESSAGE_HEIGHT = ((System.Windows.Controls.TextBox)(target));              return;              case 16:              this.AUTO_MESSAGE_HEIGHT = ((System.Windows.Controls.CheckBox)(target));              return;              case 17:              this.USE_DEFAULT_ADAPTER = ((System.Windows.Controls.CheckBox)(target));              return;              case 18:              this.AUTO_DETECT_PORT = ((System.Windows.Controls.CheckBox)(target));              return;              case 19:              this.AUTO_DETECT_PROGRAM = ((System.Windows.Controls.TextBox)(target));              return;              }
Magic Number,Dota2ChatInterface,Settings,C:\repos\patriksletmo_Dota2Translator\Dota2ChatInterface\Windows\Settings.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.EXE_NAME = ((System.Windows.Controls.TextBox)(target));              return;              case 2:              this.AUTO_HIDE = ((System.Windows.Controls.CheckBox)(target));              return;              case 3:              this.ADD_ON_STARTUP = ((System.Windows.Controls.CheckBox)(target));              return;              case 4:              this.FONT_NAME = ((System.Windows.Controls.ComboBox)(target));              return;              case 5:              this.TRANSLATE_TO = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.OUTPUT_ALL = ((System.Windows.Controls.CheckBox)(target));              return;              case 7:              this.IsComicSans = ((System.Windows.Controls.StackPanel)(target));              return;              case 8:              this.MESSAGES_SHOWN = ((System.Windows.Controls.TextBox)(target));              return;              case 9:              this.FADE_MESSAGES = ((System.Windows.Controls.CheckBox)(target));              return;              case 10:              this.FADE_WAIT = ((System.Windows.Controls.TextBox)(target));              return;              case 11:              this.FADE_DURATION = ((System.Windows.Controls.TextBox)(target));              return;              case 12:              this.CancelButton = ((System.Windows.Controls.Button)(target));              return;              case 13:              this.SaveButton = ((System.Windows.Controls.Button)(target));              return;              case 14:              this.DefaultFontButton = ((System.Windows.Controls.Button)(target));              return;              case 15:              this.MESSAGE_HEIGHT = ((System.Windows.Controls.TextBox)(target));              return;              case 16:              this.AUTO_MESSAGE_HEIGHT = ((System.Windows.Controls.CheckBox)(target));              return;              case 17:              this.USE_DEFAULT_ADAPTER = ((System.Windows.Controls.CheckBox)(target));              return;              case 18:              this.AUTO_DETECT_PORT = ((System.Windows.Controls.CheckBox)(target));              return;              case 19:              this.AUTO_DETECT_PROGRAM = ((System.Windows.Controls.TextBox)(target));              return;              }
Magic Number,Dota2ChatInterface,Settings,C:\repos\patriksletmo_Dota2Translator\Dota2ChatInterface\Windows\Settings.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.EXE_NAME = ((System.Windows.Controls.TextBox)(target));              return;              case 2:              this.AUTO_HIDE = ((System.Windows.Controls.CheckBox)(target));              return;              case 3:              this.ADD_ON_STARTUP = ((System.Windows.Controls.CheckBox)(target));              return;              case 4:              this.FONT_NAME = ((System.Windows.Controls.ComboBox)(target));              return;              case 5:              this.TRANSLATE_TO = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.OUTPUT_ALL = ((System.Windows.Controls.CheckBox)(target));              return;              case 7:              this.IsComicSans = ((System.Windows.Controls.StackPanel)(target));              return;              case 8:              this.MESSAGES_SHOWN = ((System.Windows.Controls.TextBox)(target));              return;              case 9:              this.FADE_MESSAGES = ((System.Windows.Controls.CheckBox)(target));              return;              case 10:              this.FADE_WAIT = ((System.Windows.Controls.TextBox)(target));              return;              case 11:              this.FADE_DURATION = ((System.Windows.Controls.TextBox)(target));              return;              case 12:              this.CancelButton = ((System.Windows.Controls.Button)(target));              return;              case 13:              this.SaveButton = ((System.Windows.Controls.Button)(target));              return;              case 14:              this.DefaultFontButton = ((System.Windows.Controls.Button)(target));              return;              case 15:              this.MESSAGE_HEIGHT = ((System.Windows.Controls.TextBox)(target));              return;              case 16:              this.AUTO_MESSAGE_HEIGHT = ((System.Windows.Controls.CheckBox)(target));              return;              case 17:              this.USE_DEFAULT_ADAPTER = ((System.Windows.Controls.CheckBox)(target));              return;              case 18:              this.AUTO_DETECT_PORT = ((System.Windows.Controls.CheckBox)(target));              return;              case 19:              this.AUTO_DETECT_PROGRAM = ((System.Windows.Controls.TextBox)(target));              return;              }
Magic Number,Dota2ChatInterface,Settings,C:\repos\patriksletmo_Dota2Translator\Dota2ChatInterface\Windows\Settings.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.EXE_NAME = ((System.Windows.Controls.TextBox)(target));              return;              case 2:              this.AUTO_HIDE = ((System.Windows.Controls.CheckBox)(target));              return;              case 3:              this.ADD_ON_STARTUP = ((System.Windows.Controls.CheckBox)(target));              return;              case 4:              this.FONT_NAME = ((System.Windows.Controls.ComboBox)(target));              return;              case 5:              this.TRANSLATE_TO = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.OUTPUT_ALL = ((System.Windows.Controls.CheckBox)(target));              return;              case 7:              this.IsComicSans = ((System.Windows.Controls.StackPanel)(target));              return;              case 8:              this.MESSAGES_SHOWN = ((System.Windows.Controls.TextBox)(target));              return;              case 9:              this.FADE_MESSAGES = ((System.Windows.Controls.CheckBox)(target));              return;              case 10:              this.FADE_WAIT = ((System.Windows.Controls.TextBox)(target));              return;              case 11:              this.FADE_DURATION = ((System.Windows.Controls.TextBox)(target));              return;              case 12:              this.CancelButton = ((System.Windows.Controls.Button)(target));              return;              case 13:              this.SaveButton = ((System.Windows.Controls.Button)(target));              return;              case 14:              this.DefaultFontButton = ((System.Windows.Controls.Button)(target));              return;              case 15:              this.MESSAGE_HEIGHT = ((System.Windows.Controls.TextBox)(target));              return;              case 16:              this.AUTO_MESSAGE_HEIGHT = ((System.Windows.Controls.CheckBox)(target));              return;              case 17:              this.USE_DEFAULT_ADAPTER = ((System.Windows.Controls.CheckBox)(target));              return;              case 18:              this.AUTO_DETECT_PORT = ((System.Windows.Controls.CheckBox)(target));              return;              case 19:              this.AUTO_DETECT_PROGRAM = ((System.Windows.Controls.TextBox)(target));              return;              }
Magic Number,Dota2ChatInterface,Settings,C:\repos\patriksletmo_Dota2Translator\Dota2ChatInterface\Windows\Settings.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.EXE_NAME = ((System.Windows.Controls.TextBox)(target));              return;              case 2:              this.AUTO_HIDE = ((System.Windows.Controls.CheckBox)(target));              return;              case 3:              this.ADD_ON_STARTUP = ((System.Windows.Controls.CheckBox)(target));              return;              case 4:              this.FONT_NAME = ((System.Windows.Controls.ComboBox)(target));              return;              case 5:              this.TRANSLATE_TO = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.OUTPUT_ALL = ((System.Windows.Controls.CheckBox)(target));              return;              case 7:              this.IsComicSans = ((System.Windows.Controls.StackPanel)(target));              return;              case 8:              this.MESSAGES_SHOWN = ((System.Windows.Controls.TextBox)(target));              return;              case 9:              this.FADE_MESSAGES = ((System.Windows.Controls.CheckBox)(target));              return;              case 10:              this.FADE_WAIT = ((System.Windows.Controls.TextBox)(target));              return;              case 11:              this.FADE_DURATION = ((System.Windows.Controls.TextBox)(target));              return;              case 12:              this.CancelButton = ((System.Windows.Controls.Button)(target));              return;              case 13:              this.SaveButton = ((System.Windows.Controls.Button)(target));              return;              case 14:              this.DefaultFontButton = ((System.Windows.Controls.Button)(target));              return;              case 15:              this.MESSAGE_HEIGHT = ((System.Windows.Controls.TextBox)(target));              return;              case 16:              this.AUTO_MESSAGE_HEIGHT = ((System.Windows.Controls.CheckBox)(target));              return;              case 17:              this.USE_DEFAULT_ADAPTER = ((System.Windows.Controls.CheckBox)(target));              return;              case 18:              this.AUTO_DETECT_PORT = ((System.Windows.Controls.CheckBox)(target));              return;              case 19:              this.AUTO_DETECT_PROGRAM = ((System.Windows.Controls.TextBox)(target));              return;              }
Magic Number,Dota2ChatInterface,Settings,C:\repos\patriksletmo_Dota2Translator\Dota2ChatInterface\Windows\Settings.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.EXE_NAME = ((System.Windows.Controls.TextBox)(target));              return;              case 2:              this.AUTO_HIDE = ((System.Windows.Controls.CheckBox)(target));              return;              case 3:              this.ADD_ON_STARTUP = ((System.Windows.Controls.CheckBox)(target));              return;              case 4:              this.FONT_NAME = ((System.Windows.Controls.ComboBox)(target));              return;              case 5:              this.TRANSLATE_TO = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.OUTPUT_ALL = ((System.Windows.Controls.CheckBox)(target));              return;              case 7:              this.IsComicSans = ((System.Windows.Controls.StackPanel)(target));              return;              case 8:              this.MESSAGES_SHOWN = ((System.Windows.Controls.TextBox)(target));              return;              case 9:              this.FADE_MESSAGES = ((System.Windows.Controls.CheckBox)(target));              return;              case 10:              this.FADE_WAIT = ((System.Windows.Controls.TextBox)(target));              return;              case 11:              this.FADE_DURATION = ((System.Windows.Controls.TextBox)(target));              return;              case 12:              this.CancelButton = ((System.Windows.Controls.Button)(target));              return;              case 13:              this.SaveButton = ((System.Windows.Controls.Button)(target));              return;              case 14:              this.DefaultFontButton = ((System.Windows.Controls.Button)(target));              return;              case 15:              this.MESSAGE_HEIGHT = ((System.Windows.Controls.TextBox)(target));              return;              case 16:              this.AUTO_MESSAGE_HEIGHT = ((System.Windows.Controls.CheckBox)(target));              return;              case 17:              this.USE_DEFAULT_ADAPTER = ((System.Windows.Controls.CheckBox)(target));              return;              case 18:              this.AUTO_DETECT_PORT = ((System.Windows.Controls.CheckBox)(target));              return;              case 19:              this.AUTO_DETECT_PROGRAM = ((System.Windows.Controls.TextBox)(target));              return;              }
Magic Number,Dota2ChatInterface,Settings,C:\repos\patriksletmo_Dota2Translator\Dota2ChatInterface\Windows\Settings.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.EXE_NAME = ((System.Windows.Controls.TextBox)(target));              return;              case 2:              this.AUTO_HIDE = ((System.Windows.Controls.CheckBox)(target));              return;              case 3:              this.ADD_ON_STARTUP = ((System.Windows.Controls.CheckBox)(target));              return;              case 4:              this.FONT_NAME = ((System.Windows.Controls.ComboBox)(target));              return;              case 5:              this.TRANSLATE_TO = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.OUTPUT_ALL = ((System.Windows.Controls.CheckBox)(target));              return;              case 7:              this.IsComicSans = ((System.Windows.Controls.StackPanel)(target));              return;              case 8:              this.MESSAGES_SHOWN = ((System.Windows.Controls.TextBox)(target));              return;              case 9:              this.FADE_MESSAGES = ((System.Windows.Controls.CheckBox)(target));              return;              case 10:              this.FADE_WAIT = ((System.Windows.Controls.TextBox)(target));              return;              case 11:              this.FADE_DURATION = ((System.Windows.Controls.TextBox)(target));              return;              case 12:              this.CancelButton = ((System.Windows.Controls.Button)(target));              return;              case 13:              this.SaveButton = ((System.Windows.Controls.Button)(target));              return;              case 14:              this.DefaultFontButton = ((System.Windows.Controls.Button)(target));              return;              case 15:              this.MESSAGE_HEIGHT = ((System.Windows.Controls.TextBox)(target));              return;              case 16:              this.AUTO_MESSAGE_HEIGHT = ((System.Windows.Controls.CheckBox)(target));              return;              case 17:              this.USE_DEFAULT_ADAPTER = ((System.Windows.Controls.CheckBox)(target));              return;              case 18:              this.AUTO_DETECT_PORT = ((System.Windows.Controls.CheckBox)(target));              return;              case 19:              this.AUTO_DETECT_PROGRAM = ((System.Windows.Controls.TextBox)(target));              return;              }
Magic Number,Dota2ChatInterface,Settings,C:\repos\patriksletmo_Dota2Translator\Dota2ChatInterface\Windows\Settings.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.EXE_NAME = ((System.Windows.Controls.TextBox)(target));              return;              case 2:              this.AUTO_HIDE = ((System.Windows.Controls.CheckBox)(target));              return;              case 3:              this.ADD_ON_STARTUP = ((System.Windows.Controls.CheckBox)(target));              return;              case 4:              this.FONT_NAME = ((System.Windows.Controls.ComboBox)(target));              return;              case 5:              this.TRANSLATE_TO = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.OUTPUT_ALL = ((System.Windows.Controls.CheckBox)(target));              return;              case 7:              this.IsComicSans = ((System.Windows.Controls.StackPanel)(target));              return;              case 8:              this.MESSAGES_SHOWN = ((System.Windows.Controls.TextBox)(target));              return;              case 9:              this.FADE_MESSAGES = ((System.Windows.Controls.CheckBox)(target));              return;              case 10:              this.FADE_WAIT = ((System.Windows.Controls.TextBox)(target));              return;              case 11:              this.FADE_DURATION = ((System.Windows.Controls.TextBox)(target));              return;              case 12:              this.CancelButton = ((System.Windows.Controls.Button)(target));              return;              case 13:              this.SaveButton = ((System.Windows.Controls.Button)(target));              return;              case 14:              this.DefaultFontButton = ((System.Windows.Controls.Button)(target));              return;              case 15:              this.MESSAGE_HEIGHT = ((System.Windows.Controls.TextBox)(target));              return;              case 16:              this.AUTO_MESSAGE_HEIGHT = ((System.Windows.Controls.CheckBox)(target));              return;              case 17:              this.USE_DEFAULT_ADAPTER = ((System.Windows.Controls.CheckBox)(target));              return;              case 18:              this.AUTO_DETECT_PORT = ((System.Windows.Controls.CheckBox)(target));              return;              case 19:              this.AUTO_DETECT_PROGRAM = ((System.Windows.Controls.TextBox)(target));              return;              }
Magic Number,Dota2ChatInterface,Settings,C:\repos\patriksletmo_Dota2Translator\Dota2ChatInterface\Windows\Settings.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.EXE_NAME = ((System.Windows.Controls.TextBox)(target));              return;              case 2:              this.AUTO_HIDE = ((System.Windows.Controls.CheckBox)(target));              return;              case 3:              this.ADD_ON_STARTUP = ((System.Windows.Controls.CheckBox)(target));              return;              case 4:              this.FONT_NAME = ((System.Windows.Controls.ComboBox)(target));              return;              case 5:              this.TRANSLATE_TO = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.OUTPUT_ALL = ((System.Windows.Controls.CheckBox)(target));              return;              case 7:              this.IsComicSans = ((System.Windows.Controls.StackPanel)(target));              return;              case 8:              this.MESSAGES_SHOWN = ((System.Windows.Controls.TextBox)(target));              return;              case 9:              this.FADE_MESSAGES = ((System.Windows.Controls.CheckBox)(target));              return;              case 10:              this.FADE_WAIT = ((System.Windows.Controls.TextBox)(target));              return;              case 11:              this.FADE_DURATION = ((System.Windows.Controls.TextBox)(target));              return;              case 12:              this.CancelButton = ((System.Windows.Controls.Button)(target));              return;              case 13:              this.SaveButton = ((System.Windows.Controls.Button)(target));              return;              case 14:              this.DefaultFontButton = ((System.Windows.Controls.Button)(target));              return;              case 15:              this.MESSAGE_HEIGHT = ((System.Windows.Controls.TextBox)(target));              return;              case 16:              this.AUTO_MESSAGE_HEIGHT = ((System.Windows.Controls.CheckBox)(target));              return;              case 17:              this.USE_DEFAULT_ADAPTER = ((System.Windows.Controls.CheckBox)(target));              return;              case 18:              this.AUTO_DETECT_PORT = ((System.Windows.Controls.CheckBox)(target));              return;              case 19:              this.AUTO_DETECT_PROGRAM = ((System.Windows.Controls.TextBox)(target));              return;              }
Magic Number,Dota2ChatInterface,Settings,C:\repos\patriksletmo_Dota2Translator\Dota2ChatInterface\Windows\Settings.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.EXE_NAME = ((System.Windows.Controls.TextBox)(target));              return;              case 2:              this.AUTO_HIDE = ((System.Windows.Controls.CheckBox)(target));              return;              case 3:              this.ADD_ON_STARTUP = ((System.Windows.Controls.CheckBox)(target));              return;              case 4:              this.FONT_NAME = ((System.Windows.Controls.ComboBox)(target));              return;              case 5:              this.TRANSLATE_TO = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.OUTPUT_ALL = ((System.Windows.Controls.CheckBox)(target));              return;              case 7:              this.IsComicSans = ((System.Windows.Controls.StackPanel)(target));              return;              case 8:              this.MESSAGES_SHOWN = ((System.Windows.Controls.TextBox)(target));              return;              case 9:              this.FADE_MESSAGES = ((System.Windows.Controls.CheckBox)(target));              return;              case 10:              this.FADE_WAIT = ((System.Windows.Controls.TextBox)(target));              return;              case 11:              this.FADE_DURATION = ((System.Windows.Controls.TextBox)(target));              return;              case 12:              this.CancelButton = ((System.Windows.Controls.Button)(target));              return;              case 13:              this.SaveButton = ((System.Windows.Controls.Button)(target));              return;              case 14:              this.DefaultFontButton = ((System.Windows.Controls.Button)(target));              return;              case 15:              this.MESSAGE_HEIGHT = ((System.Windows.Controls.TextBox)(target));              return;              case 16:              this.AUTO_MESSAGE_HEIGHT = ((System.Windows.Controls.CheckBox)(target));              return;              case 17:              this.USE_DEFAULT_ADAPTER = ((System.Windows.Controls.CheckBox)(target));              return;              case 18:              this.AUTO_DETECT_PORT = ((System.Windows.Controls.CheckBox)(target));              return;              case 19:              this.AUTO_DETECT_PROGRAM = ((System.Windows.Controls.TextBox)(target));              return;              }
Magic Number,Dota2ChatInterface,Translate,C:\repos\patriksletmo_Dota2Translator\Dota2ChatInterface\Classes\Translate.cs,TranslateString,The following statement contains a magic number: try              {                  // Encode the message for use in url.                  String encodedMessage = Uri.EscapeDataString(str);                  String encodedLanguage = Uri.EscapeDataString(settings.TranslateTo);                    // Create an url.                  String url = requestURL + "&hl=" + encodedLanguage + "&tl=" + encodedLanguage + "&text=" + encodedMessage;                    // Create a request that looks like it came from a normal Google Translate session.                  HttpWebRequest request = (HttpWebRequest)WebRequest.Create(url);                  request.Proxy = null; // Disable proxy lookup. Saves us around 7 seconds of waiting for one (which might not even exist).                  request.Host = "translate.google.com";                  request.UserAgent = "Mozilla/5.0 (Windows NT 6.1; WOW64; rv:19.0) Gecko/20100101 Firefox/19.0"; // Mozilla Firefox 19.0. Windows 7 64-bit. Updated 23/2 - 2013.                    // Get the response.                  HttpWebResponse response = (HttpWebResponse)request.GetResponse();                    // Read the data.                  Stream stream = response.GetResponseStream();                  String result = "";                  byte[] buf = new byte[8192];                  int count = 0;                  while ((count = stream.Read(buf' 0' buf.Length)) > 0)                  {                      result += Encoding.UTF8.GetString(buf' 0' count);                  }                    // Parse the received data as a JSON array.                  JArray arr = (JArray)JsonConvert.DeserializeObject(result);                  JValue translatedObject = (JValue)((JArray)((JArray)arr[0])[0])[0]; //Them casts.                  String translatedMessage = (String)translatedObject.Value;                    return translatedMessage;              }              catch              {                  // An invalid message' non-existant translation language or network error could cause the main application to crash.                  // Return the original message if any of these erros occurred.                    return str;              }
Magic Number,Dota2ChatInterface,MainWindow,C:\repos\patriksletmo_Dota2Translator\Dota2ChatInterface\Windows\MainWindow.xaml.cs,TranslateMessageAndAdd,The following statement contains a magic number: String message = (String)args[2];
Magic Number,Dota2ChatInterface,MainWindow,C:\repos\patriksletmo_Dota2Translator\Dota2ChatInterface\Windows\MainWindow.xaml.cs,OnMessageReceived,The following statement contains a magic number: switch (data.Type)              {                  // Hide status has been changed' report to DLL.                  case -2:                  case -1:                      InjectionHelper.SendHideShowMessage(data.Type == -1);                        break;                    // A message has been received' display in main window and send to DLL.                  case 0:                  case 1:                  case 2:                      // Scope is determined by the type value: 0 = All' 1 = Team.                      String scope = (data.Type == 0) ? "ALL" : ((data.Type == 1) ? "TEAM" : "TV");                        // Make sure the data is read as UTF8.                      String sender = ToUTF(data.Sender);                      String message = ToUTF(data.Message);                        // Translate the message and add it.                      new Thread(new ParameterizedThreadStart(TranslateMessageAndAdd)).Start(new object[] { scope' sender' message });                        break;                }
Magic Number,Dota2ChatInterface,MainWindow,C:\repos\patriksletmo_Dota2Translator\Dota2ChatInterface\Windows\MainWindow.xaml.cs,OnMessageReceived,The following statement contains a magic number: switch (data.Type)              {                  // Hide status has been changed' report to DLL.                  case -2:                  case -1:                      InjectionHelper.SendHideShowMessage(data.Type == -1);                        break;                    // A message has been received' display in main window and send to DLL.                  case 0:                  case 1:                  case 2:                      // Scope is determined by the type value: 0 = All' 1 = Team.                      String scope = (data.Type == 0) ? "ALL" : ((data.Type == 1) ? "TEAM" : "TV");                        // Make sure the data is read as UTF8.                      String sender = ToUTF(data.Sender);                      String message = ToUTF(data.Message);                        // Translate the message and add it.                      new Thread(new ParameterizedThreadStart(TranslateMessageAndAdd)).Start(new object[] { scope' sender' message });                        break;                }
Magic Number,Dota2ChatInterface,MainWindow,C:\repos\patriksletmo_Dota2Translator\Dota2ChatInterface\Windows\MainWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.Scroller = ((System.Windows.Controls.ScrollViewer)(target));              return;              case 2:              this.ChatContainer = ((System.Windows.Controls.StackPanel)(target));              return;              case 3:              this.InjectButton = ((System.Windows.Controls.Button)(target));              return;              case 4:              this.SettingsButton = ((System.Windows.Controls.Button)(target));              return;              }
Magic Number,Dota2ChatInterface,MainWindow,C:\repos\patriksletmo_Dota2Translator\Dota2ChatInterface\Windows\MainWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.Scroller = ((System.Windows.Controls.ScrollViewer)(target));              return;              case 2:              this.ChatContainer = ((System.Windows.Controls.StackPanel)(target));              return;              case 3:              this.InjectButton = ((System.Windows.Controls.Button)(target));              return;              case 4:              this.SettingsButton = ((System.Windows.Controls.Button)(target));              return;              }
Magic Number,Dota2ChatInterface,MainWindow,C:\repos\patriksletmo_Dota2Translator\Dota2ChatInterface\Windows\MainWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.Scroller = ((System.Windows.Controls.ScrollViewer)(target));              return;              case 2:              this.ChatContainer = ((System.Windows.Controls.StackPanel)(target));              return;              case 3:              this.InjectButton = ((System.Windows.Controls.Button)(target));              return;              case 4:              this.SettingsButton = ((System.Windows.Controls.Button)(target));              return;              }
Missing Default,Dota2ChatInterface,AdapterChooser,C:\repos\patriksletmo_Dota2Translator\Dota2ChatInterface\Windows\AdapterChooser.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.MainLayout = ((System.Windows.Controls.Grid)(target));              return;              case 2:              this.DefaultIP = ((System.Windows.Controls.Label)(target));              return;              case 3:              this.DefaultDescription = ((System.Windows.Controls.Label)(target));              return;              case 4:              this.DefaultButton = ((System.Windows.Controls.Button)(target));              return;              case 5:              this.AdvancedButton = ((System.Windows.Controls.Button)(target));              return;              case 6:              this.AlwaysUseMain = ((System.Windows.Controls.CheckBox)(target));              return;              case 7:              this.AdvancedLayout = ((System.Windows.Controls.Grid)(target));              return;              case 8:              this.AvailableNetworkAdapters = ((System.Windows.Controls.ListBox)(target));              return;              case 9:              this.SelectButton = ((System.Windows.Controls.Button)(target));              return;              case 10:              this.AlwaysUseAdvanced = ((System.Windows.Controls.CheckBox)(target));              return;              case 11:              this.LoadingDefaultLayout = ((System.Windows.Controls.Grid)(target));              return;              }
Missing Default,Dota2ChatInterface,ChatItem,C:\repos\patriksletmo_Dota2Translator\Dota2ChatInterface\Usercontrols\ChatItem.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this._Scope = ((System.Windows.Controls.Label)(target));              return;              case 2:              this._Sender = ((System.Windows.Controls.Label)(target));              return;              case 3:              this._Message = ((System.Windows.Controls.TextBlock)(target));              return;              }
Missing Default,Dota2ChatInterface,NetworkAdapterItem,C:\repos\patriksletmo_Dota2Translator\Dota2ChatInterface\Usercontrols\NetworkAdapterItem.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.ItemIP = ((System.Windows.Controls.Label)(target));              return;              case 2:              this.ItemDescription = ((System.Windows.Controls.Label)(target));              return;              }
Missing Default,Dota2ChatInterface,Settings,C:\repos\patriksletmo_Dota2Translator\Dota2ChatInterface\Windows\Settings.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.EXE_NAME = ((System.Windows.Controls.TextBox)(target));              return;              case 2:              this.AUTO_HIDE = ((System.Windows.Controls.CheckBox)(target));              return;              case 3:              this.ADD_ON_STARTUP = ((System.Windows.Controls.CheckBox)(target));              return;              case 4:              this.FONT_NAME = ((System.Windows.Controls.ComboBox)(target));              return;              case 5:              this.TRANSLATE_TO = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.OUTPUT_ALL = ((System.Windows.Controls.CheckBox)(target));              return;              case 7:              this.IsComicSans = ((System.Windows.Controls.StackPanel)(target));              return;              case 8:              this.MESSAGES_SHOWN = ((System.Windows.Controls.TextBox)(target));              return;              case 9:              this.FADE_MESSAGES = ((System.Windows.Controls.CheckBox)(target));              return;              case 10:              this.FADE_WAIT = ((System.Windows.Controls.TextBox)(target));              return;              case 11:              this.FADE_DURATION = ((System.Windows.Controls.TextBox)(target));              return;              case 12:              this.CancelButton = ((System.Windows.Controls.Button)(target));              return;              case 13:              this.SaveButton = ((System.Windows.Controls.Button)(target));              return;              case 14:              this.DefaultFontButton = ((System.Windows.Controls.Button)(target));              return;              case 15:              this.MESSAGE_HEIGHT = ((System.Windows.Controls.TextBox)(target));              return;              case 16:              this.AUTO_MESSAGE_HEIGHT = ((System.Windows.Controls.CheckBox)(target));              return;              case 17:              this.USE_DEFAULT_ADAPTER = ((System.Windows.Controls.CheckBox)(target));              return;              case 18:              this.AUTO_DETECT_PORT = ((System.Windows.Controls.CheckBox)(target));              return;              case 19:              this.AUTO_DETECT_PROGRAM = ((System.Windows.Controls.TextBox)(target));              return;              }
Missing Default,Dota2ChatInterface,MainWindow,C:\repos\patriksletmo_Dota2Translator\Dota2ChatInterface\Windows\MainWindow.xaml.cs,OnMessageReceived,The following switch statement is missing a default case: switch (data.Type)              {                  // Hide status has been changed' report to DLL.                  case -2:                  case -1:                      InjectionHelper.SendHideShowMessage(data.Type == -1);                        break;                    // A message has been received' display in main window and send to DLL.                  case 0:                  case 1:                  case 2:                      // Scope is determined by the type value: 0 = All' 1 = Team.                      String scope = (data.Type == 0) ? "ALL" : ((data.Type == 1) ? "TEAM" : "TV");                        // Make sure the data is read as UTF8.                      String sender = ToUTF(data.Sender);                      String message = ToUTF(data.Message);                        // Translate the message and add it.                      new Thread(new ParameterizedThreadStart(TranslateMessageAndAdd)).Start(new object[] { scope' sender' message });                        break;                }
Missing Default,Dota2ChatInterface,MainWindow,C:\repos\patriksletmo_Dota2Translator\Dota2ChatInterface\Windows\MainWindow.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.Scroller = ((System.Windows.Controls.ScrollViewer)(target));              return;              case 2:              this.ChatContainer = ((System.Windows.Controls.StackPanel)(target));              return;              case 3:              this.InjectButton = ((System.Windows.Controls.Button)(target));              return;              case 4:              this.SettingsButton = ((System.Windows.Controls.Button)(target));              return;              }
