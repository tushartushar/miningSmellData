Implementation smell,Namespace,Class,File,Method,Description
Long Method,NHibernate.OData,ODataRequest,C:\repos\pvginkel_NHibernate.OData\NHibernate.OData\ODataRequest.cs,PrepareDataResponse,The method has 136 lines of code.
Long Method,NHibernate.OData,ODataService,C:\repos\pvginkel_NHibernate.OData\NHibernate.OData\ODataService.cs,CreateMetadataResponse,The method has 121 lines of code.
Long Method,NHibernate.OData,Lexer,C:\repos\pvginkel_NHibernate.OData\NHibernate.OData\Lexer.cs,ParseNumeric,The method has 115 lines of code.
Complex Method,NHibernate.OData,CriterionMethodVisitor,C:\repos\pvginkel_NHibernate.OData\NHibernate.OData\CriterionMethodVisitor.cs,CreateAnyOrAllCriterion,Cyclomatic complexity of the method is 11
Complex Method,NHibernate.OData,AliasingNormalizeVisitor,C:\repos\pvginkel_NHibernate.OData\NHibernate.OData\AliasingNormalizeVisitor.cs,MemberExpression,Cyclomatic complexity of the method is 9
Complex Method,NHibernate.OData,ODataExpression,C:\repos\pvginkel_NHibernate.OData\NHibernate.OData\ODataExpression.cs,BuildCriteria,Cyclomatic complexity of the method is 11
Complex Method,NHibernate.OData,Lexer,C:\repos\pvginkel_NHibernate.OData\NHibernate.OData\Lexer.cs,ParseNumeric,Cyclomatic complexity of the method is 12
Long Parameter List,NHibernate.OData,XmlTimeSpan,C:\repos\pvginkel_NHibernate.OData\NHibernate.OData\XmlTimeSpan.cs,XmlTimeSpan,The method has 7 parameters. Parameters: positive' years' months' days' hours' minutes' seconds
Long Parameter List,NHibernate.OData.Extensions,OperatorProjection,C:\repos\pvginkel_NHibernate.OData\NHibernate.OData\Extensions\OperatorProjection.cs,GetProjectionArgument,The method has 5 parameters. Parameters: criteriaQuery' criteria' projection' loc' enabledFilters
Long Identifier,NHibernate.OData,MappedClassMetadata,C:\repos\pvginkel_NHibernate.OData\NHibernate.OData\MappedClassMetadata.cs,,The length of the parameter _caseSensitiveDynamicProperties is 31.
Long Identifier,NHibernate.OData,MappedClassMetadata,C:\repos\pvginkel_NHibernate.OData\NHibernate.OData\MappedClassMetadata.cs,,The length of the parameter _caseInsensitiveDynamicProperties is 33.
Long Statement,NHibernate.OData,CriterionMethodVisitor,C:\repos\pvginkel_NHibernate.OData\NHibernate.OData\CriterionMethodVisitor.cs,AllMethod,The length of the statement  "            if (arguments.Length != 2 || arguments[0].Type != ExpressionType.ResolvedMember || arguments[1].Type != ExpressionType.Lambda) " is 126.
Long Statement,NHibernate.OData,CriterionMethodVisitor,C:\repos\pvginkel_NHibernate.OData\NHibernate.OData\CriterionMethodVisitor.cs,CreateLikeCriterion,The length of the statement  "            return _context.CaseSensitiveLike ? Restrictions.Like(projection' value' matchMode) : Restrictions.InsensitiveLike(projection' value' matchMode); " is 145.
Long Statement,NHibernate.OData,CriterionMethodVisitor,C:\repos\pvginkel_NHibernate.OData\NHibernate.OData\CriterionMethodVisitor.cs,CreateAnyOrAllCriterion,The length of the statement  "            Require.That(method.MethodType == MethodType.Any || method.MethodType == MethodType.All' "Invalid method type"' "method"); " is 122.
Long Statement,NHibernate.OData,CriterionMethodVisitor,C:\repos\pvginkel_NHibernate.OData\NHibernate.OData\CriterionMethodVisitor.cs,CreateAnyOrAllCriterion,The length of the statement  "                throw new ODataException(string.Format("The type '{0}' isn't a NHibernate-mapped class."' collectionHolderAlias.ReturnedType.FullName)); " is 136.
Long Statement,NHibernate.OData,CriterionMethodVisitor,C:\repos\pvginkel_NHibernate.OData\NHibernate.OData\CriterionMethodVisitor.cs,CreateAnyOrAllCriterion,The length of the statement  "                throw new ODataException(string.Format("The type '{0}' doesn't have an identifier property."' collectionHolderAlias.ReturnedType.FullName)); " is 140.
Long Statement,NHibernate.OData,CriterionMethodVisitor,C:\repos\pvginkel_NHibernate.OData\NHibernate.OData\CriterionMethodVisitor.cs,CreateAnyOrAllCriterion,The length of the statement  "            if (resolvedMember.ReturnedType == null || (itemType = TypeUtil.TryGetCollectionItemType(resolvedMember.ReturnedType)) == null) " is 127.
Long Statement,NHibernate.OData,CriterionMethodVisitor,C:\repos\pvginkel_NHibernate.OData\NHibernate.OData\CriterionMethodVisitor.cs,CreateAnyOrAllCriterion,The length of the statement  "            // The inner joined alias to collection items must be created in any case (whether the lambda expression is specified or not) " is 125.
Long Statement,NHibernate.OData,ExpressionUtil,C:\repos\pvginkel_NHibernate.OData\NHibernate.OData\ExpressionUtil.cs,CoerceBoolExpression,The length of the statement  "                        return new ResolvedMemberExpression(MemberType.Boolean' ((ResolvedMemberExpression)expression).Member' ((ResolvedMemberExpression)expression).ReturnedType); " is 156.
Long Statement,NHibernate.OData,Inflector,C:\repos\pvginkel_NHibernate.OData\NHibernate.OData\Inflector.cs,AddIrregular,The length of the statement  "            AddPlural(singular.Substring(0' 1).ToLower() + singular.Substring(1) + "$"' plural.Substring(0' 1).ToLower() + plural.Substring(1)); " is 132.
Long Statement,NHibernate.OData,Inflector,C:\repos\pvginkel_NHibernate.OData\NHibernate.OData\Inflector.cs,AddIrregular,The length of the statement  "            AddPlural(singular.Substring(0' 1).ToUpper() + singular.Substring(1) + "$"' plural.Substring(0' 1).ToUpper() + plural.Substring(1)); " is 132.
Long Statement,NHibernate.OData,Inflector,C:\repos\pvginkel_NHibernate.OData\NHibernate.OData\Inflector.cs,AddIrregular,The length of the statement  "            AddSingular(plural.Substring(0' 1).ToLower() + plural.Substring(1) + "$"' singular.Substring(0' 1).ToLower() + singular.Substring(1)); " is 134.
Long Statement,NHibernate.OData,Inflector,C:\repos\pvginkel_NHibernate.OData\NHibernate.OData\Inflector.cs,AddIrregular,The length of the statement  "            AddSingular(plural.Substring(0' 1).ToUpper() + plural.Substring(1) + "$"' singular.Substring(0' 1).ToUpper() + singular.Substring(1)); " is 134.
Long Statement,NHibernate.OData,ODataContext,C:\repos\pvginkel_NHibernate.OData\NHibernate.OData\ODataContext.cs,ODataQuery,The length of the statement  "            var expression = new ODataExpression(GetSessionFactoryContext(session.SessionFactory)' queryString' persistenceClass' configuration ?? new ODataParserConfiguration()); " is 167.
Long Statement,NHibernate.OData,ODataContext,C:\repos\pvginkel_NHibernate.OData\NHibernate.OData\ODataContext.cs,ODataQuery,The length of the statement  "            var expression = new ODataExpression(GetSessionFactoryContext(session.SessionFactory)' queryStringParts' persistenceClass' configuration ?? new ODataParserConfiguration()); " is 172.
Long Statement,NHibernate.OData,ODataContext,C:\repos\pvginkel_NHibernate.OData\NHibernate.OData\ODataContext.cs,ODataQuery,The length of the statement  "            var expression = new ODataExpression(GetSessionFactoryContext(session.SessionFactory)' queryString' persistentClass' configuration ?? new ODataParserConfiguration()); " is 166.
Long Statement,NHibernate.OData,ODataContext,C:\repos\pvginkel_NHibernate.OData\NHibernate.OData\ODataContext.cs,ODataQuery,The length of the statement  "            var expression = new ODataExpression(GetSessionFactoryContext(session.SessionFactory)' queryStringParts' persistentClass' configuration ?? new ODataParserConfiguration()); " is 171.
Long Statement,NHibernate.OData,ODataRequest,C:\repos\pvginkel_NHibernate.OData\NHibernate.OData\ODataRequest.cs,PrepareDataResponse,The length of the statement  "                        throw new ODataException(String.Format(ErrorMessages.ODataRequest_PropertyNotARelationship' path.Members[1].Name' parentPersister.EntityType.ReturnedClass.Name)); " is 162.
Long Statement,NHibernate.OData,ODataRequest,C:\repos\pvginkel_NHibernate.OData\NHibernate.OData\ODataRequest.cs,PrepareDataResponse,The length of the statement  "                string id = Inflector.Pluralize(entityName) + "(" + LiteralUtil.EscapeValue(persister.GetIdentifier(entity' EntityMode.Poco)) + ")"; " is 132.
Long Statement,NHibernate.OData,ODataRequest,C:\repos\pvginkel_NHibernate.OData\NHibernate.OData\ODataRequest.cs,PrepareDataResponse,The length of the statement  "                propertiesElement.Add(AddProperty(persister.IdentifierPropertyName' persister.IdentifierType' persister.GetIdentifier(entity' EntityMode.Poco))); " is 145.
Long Statement,NHibernate.OData,ODataRequest,C:\repos\pvginkel_NHibernate.OData\NHibernate.OData\ODataRequest.cs,AddProperty,The length of the statement  "                propertyElement.Add(new XAttribute(ODataService.NsMetadata + "type"' LiteralUtil.GetEdmType(propertyType.ReturnedClass))); " is 122.
Long Statement,NHibernate.OData,ODataRequest,C:\repos\pvginkel_NHibernate.OData\NHibernate.OData\ODataRequest.cs,GetProperty,The length of the statement  "            throw new ODataException(String.Format(ErrorMessages.ODataRequest_PropertyDoesNotExistOnParent' persister.EntityType.ReturnedClass.Name' propertyName)); " is 152.
Long Statement,NHibernate.OData,ODataService,C:\repos\pvginkel_NHibernate.OData\NHibernate.OData\ODataService.cs,GetPersister,The length of the statement  "                throw new ODataException(String.Format(ErrorMessages.ODataService_PersisterMustHaveIdentifierProperty' type.GetType().FullName)); " is 129.
Long Statement,NHibernate.OData,Parser,C:\repos\pvginkel_NHibernate.OData\NHibernate.OData\Parser.cs,ParseCommon,The length of the statement  "            while (!(AtEnd || Current == SyntaxToken.ParenClose || Current == SyntaxToken.Comma || GetOrderByDirection(Current).HasValue)) " is 126.
Complex Conditional,NHibernate.OData,MethodCallExpression,C:\repos\pvginkel_NHibernate.OData\NHibernate.OData\Expression.cs,Equals,The conditional expression  "other == null ||                  MethodCallType != other.MethodCallType ||                  Method != other.Method ||                  Arguments.Length != other.Arguments.Length"  is complex.
Complex Conditional,NHibernate.OData,HttpUtil,C:\repos\pvginkel_NHibernate.OData\NHibernate.OData\HttpUtil.cs,UriDecode,The conditional expression  "value[i] == '%' &&                      i < value.Length - 2 &&                      IsHex(value[i + 1]) &&                      IsHex(value[i + 2])"  is complex.
Complex Conditional,NHibernate.OData,Parser,C:\repos\pvginkel_NHibernate.OData\NHibernate.OData\Parser.cs,ParseCommon,The conditional expression  "!(AtEnd || Current == SyntaxToken.ParenClose || Current == SyntaxToken.Comma || GetOrderByDirection(Current).HasValue)"  is complex.
Magic Number,NHibernate.OData,CriterionMethodVisitor,C:\repos\pvginkel_NHibernate.OData\NHibernate.OData\CriterionMethodVisitor.cs,AnyMethod,The following statement contains a magic number: if (arguments.Length < 2)                  lambdaExpression = null;              else if (arguments[1].Type == ExpressionType.Lambda)                  lambdaExpression = (LambdaExpression)arguments[1];              else                  return base.AnyMethod(method' arguments);
Magic Number,NHibernate.OData,CriterionMethodVisitor,C:\repos\pvginkel_NHibernate.OData\NHibernate.OData\CriterionMethodVisitor.cs,AllMethod,The following statement contains a magic number: if (arguments.Length != 2 || arguments[0].Type != ExpressionType.ResolvedMember || arguments[1].Type != ExpressionType.Lambda)                  return base.AllMethod(method' arguments);
Magic Number,NHibernate.OData,HttpUtil,C:\repos\pvginkel_NHibernate.OData\NHibernate.OData\HttpUtil.cs,UriDecode,The following statement contains a magic number: for (int i = 0; i < value.Length; i++)              {                  if (                      value[i] == '%' &&                      i < value.Length - 2 &&                      IsHex(value[i + 1]) &&                      IsHex(value[i + 2])                  )                  {                      sb.Append(                          (char)(HexToInt(value[i + 1]) * 16 + HexToInt(value[i + 2]))                      );                        i += 2;                  }                  else if (value[i] == '+')                  {                      sb.Append(' ');                  }                  else                  {                      sb.Append(value[i]);                  }              }
Magic Number,NHibernate.OData,HttpUtil,C:\repos\pvginkel_NHibernate.OData\NHibernate.OData\HttpUtil.cs,UriDecode,The following statement contains a magic number: for (int i = 0; i < value.Length; i++)              {                  if (                      value[i] == '%' &&                      i < value.Length - 2 &&                      IsHex(value[i + 1]) &&                      IsHex(value[i + 2])                  )                  {                      sb.Append(                          (char)(HexToInt(value[i + 1]) * 16 + HexToInt(value[i + 2]))                      );                        i += 2;                  }                  else if (value[i] == '+')                  {                      sb.Append(' ');                  }                  else                  {                      sb.Append(value[i]);                  }              }
Magic Number,NHibernate.OData,HttpUtil,C:\repos\pvginkel_NHibernate.OData\NHibernate.OData\HttpUtil.cs,UriDecode,The following statement contains a magic number: for (int i = 0; i < value.Length; i++)              {                  if (                      value[i] == '%' &&                      i < value.Length - 2 &&                      IsHex(value[i + 1]) &&                      IsHex(value[i + 2])                  )                  {                      sb.Append(                          (char)(HexToInt(value[i + 1]) * 16 + HexToInt(value[i + 2]))                      );                        i += 2;                  }                  else if (value[i] == '+')                  {                      sb.Append(' ');                  }                  else                  {                      sb.Append(value[i]);                  }              }
Magic Number,NHibernate.OData,HttpUtil,C:\repos\pvginkel_NHibernate.OData\NHibernate.OData\HttpUtil.cs,UriDecode,The following statement contains a magic number: for (int i = 0; i < value.Length; i++)              {                  if (                      value[i] == '%' &&                      i < value.Length - 2 &&                      IsHex(value[i + 1]) &&                      IsHex(value[i + 2])                  )                  {                      sb.Append(                          (char)(HexToInt(value[i + 1]) * 16 + HexToInt(value[i + 2]))                      );                        i += 2;                  }                  else if (value[i] == '+')                  {                      sb.Append(' ');                  }                  else                  {                      sb.Append(value[i]);                  }              }
Magic Number,NHibernate.OData,HttpUtil,C:\repos\pvginkel_NHibernate.OData\NHibernate.OData\HttpUtil.cs,UriDecode,The following statement contains a magic number: for (int i = 0; i < value.Length; i++)              {                  if (                      value[i] == '%' &&                      i < value.Length - 2 &&                      IsHex(value[i + 1]) &&                      IsHex(value[i + 2])                  )                  {                      sb.Append(                          (char)(HexToInt(value[i + 1]) * 16 + HexToInt(value[i + 2]))                      );                        i += 2;                  }                  else if (value[i] == '+')                  {                      sb.Append(' ');                  }                  else                  {                      sb.Append(value[i]);                  }              }
Magic Number,NHibernate.OData,HttpUtil,C:\repos\pvginkel_NHibernate.OData\NHibernate.OData\HttpUtil.cs,HexToInt,The following statement contains a magic number: switch (value)              {                  case '0':                  case '1':                  case '2':                  case '3':                  case '4':                  case '5':                  case '6':                  case '7':                  case '8':                  case '9':                      return value - '0';                    case 'a':                  case 'b':                  case 'c':                  case 'd':                  case 'e':                  case 'f':                      return (value - 'a') + 10;                    case 'A':                  case 'B':                  case 'C':                  case 'D':                  case 'E':                  case 'F':                      return (value - 'A') + 10;                    default:                      throw new ArgumentOutOfRangeException("value");              }
Magic Number,NHibernate.OData,HttpUtil,C:\repos\pvginkel_NHibernate.OData\NHibernate.OData\HttpUtil.cs,HexToInt,The following statement contains a magic number: switch (value)              {                  case '0':                  case '1':                  case '2':                  case '3':                  case '4':                  case '5':                  case '6':                  case '7':                  case '8':                  case '9':                      return value - '0';                    case 'a':                  case 'b':                  case 'c':                  case 'd':                  case 'e':                  case 'f':                      return (value - 'a') + 10;                    case 'A':                  case 'B':                  case 'C':                  case 'D':                  case 'E':                  case 'F':                      return (value - 'A') + 10;                    default:                      throw new ArgumentOutOfRangeException("value");              }
Magic Number,NHibernate.OData,Inflector,C:\repos\pvginkel_NHibernate.OData\NHibernate.OData\Inflector.cs,Underscore,The following statement contains a magic number: value = Regex.Replace(value' "([A-Z]+)([A-Z][a-z])"' p => p.Groups[1].Value + "_" + p.Groups[2].Value);
Magic Number,NHibernate.OData,Inflector,C:\repos\pvginkel_NHibernate.OData\NHibernate.OData\Inflector.cs,Underscore,The following statement contains a magic number: value = Regex.Replace(value' "([a-z\\d])([A-Z])"' p => p.Groups[1].Value + "_" + p.Groups[2].Value);
Magic Number,NHibernate.OData,ODataRequest,C:\repos\pvginkel_NHibernate.OData\NHibernate.OData\ODataRequest.cs,PrepareDataResponse,The following statement contains a magic number: if (path.Members.Count > 2)                  throw new ODataException(ErrorMessages.PathParser_InvalidPath);
Magic Number,NHibernate.OData,ODataRequest,C:\repos\pvginkel_NHibernate.OData\NHibernate.OData\ODataRequest.cs,PrepareDataResponse,The following statement contains a magic number: if (parentEntity != null && path.Members.Count == 1)              {                  entities = new[] { parentEntity };              }              else              {                  var criteria =                      String.IsNullOrEmpty(_queryString)                      ? _session.CreateCriteria(entityName)                      : _session.ODataQuery(entityName' _queryString);                    if (path.Members.Count == 2)                  {                      if (parentEntity == null || path.Members[1].IdExpression != null)                          throw new ODataException(ErrorMessages.PathParser_InvalidPath);                        var parentPersister = _service.GetPersister(parentEntityName);                      var property = GetProperty(parentPersister' path.Members[1].Name);                      var collectionType = property.Type as CollectionType;                      var manyToOneType = property.Type as ManyToOneType;                        if (collectionType != null)                      {                          criteria.Add(Restrictions.Eq(parentEntityName' parentEntity));                      }                      else if (manyToOneType != null)                      {                          var childEntity = parentPersister.GetPropertyValue(parentEntity' property.Name' EntityMode.Poco);                          var childPersister = _service.GetPersister(property.Type.ReturnedClass);                            object idValue = childPersister.GetIdentifier(childEntity' EntityMode.Poco);                            criteria.Add(Restrictions.Eq(childPersister.IdentifierPropertyName' idValue));                      }                      else                      {                          throw new ODataException(String.Format(ErrorMessages.ODataRequest_PropertyNotARelationship' path.Members[1].Name' parentPersister.EntityType.ReturnedClass.Name));                      }                  }                    entities = criteria.List();              }
Magic Number,NHibernate.OData,ProjectionMethodVisitor,C:\repos\pvginkel_NHibernate.OData\NHibernate.OData\ProjectionMethodVisitor.cs,SubStringMethod,The following statement contains a magic number: if (arguments.Length == 2)              {                  return new SqlFunctionProjection(                      "substring"'                      NHibernateUtil.String'                      ProjectionVisitor.CreateProjection(arguments[0])'                      ProjectionVisitor.CreateProjection(arguments[1])                  );              }              else              {                  return new SqlFunctionProjection(                      "substring"'                      NHibernateUtil.String'                      ProjectionVisitor.CreateProjection(arguments[0])'                      ProjectionVisitor.CreateProjection(arguments[1])'                      ProjectionVisitor.CreateProjection(arguments[2])                  );              }
Magic Number,NHibernate.OData,ProjectionMethodVisitor,C:\repos\pvginkel_NHibernate.OData\NHibernate.OData\ProjectionMethodVisitor.cs,SubStringMethod,The following statement contains a magic number: if (arguments.Length == 2)              {                  return new SqlFunctionProjection(                      "substring"'                      NHibernateUtil.String'                      ProjectionVisitor.CreateProjection(arguments[0])'                      ProjectionVisitor.CreateProjection(arguments[1])                  );              }              else              {                  return new SqlFunctionProjection(                      "substring"'                      NHibernateUtil.String'                      ProjectionVisitor.CreateProjection(arguments[0])'                      ProjectionVisitor.CreateProjection(arguments[1])'                      ProjectionVisitor.CreateProjection(arguments[2])                  );              }
Magic Number,NHibernate.OData,ProjectionMethodVisitor,C:\repos\pvginkel_NHibernate.OData\NHibernate.OData\ProjectionMethodVisitor.cs,ReplaceMethod,The following statement contains a magic number: return new SqlFunctionProjection(                  "replace"'                  NHibernateUtil.String'                  ProjectionVisitor.CreateProjection(arguments[0])'                  ProjectionVisitor.CreateProjection(arguments[1])'                  ProjectionVisitor.CreateProjection(arguments[2])              );
Magic Number,NHibernate.OData,NormalizeMethodVisitor,C:\repos\pvginkel_NHibernate.OData\NHibernate.OData\NormalizeMethodVisitor.cs,ReplaceMethod,The following statement contains a magic number: if (LiteralUtil.IsAnyNull(arguments))              {                  return new LiteralExpression(null' LiteralType.Null);              }              else              {                  string result = LiteralUtil.CoerceString(arguments[0]).Replace(                      LiteralUtil.CoerceString(arguments[1])'                      LiteralUtil.CoerceString(arguments[2])                  );                    return new LiteralExpression(result' LiteralType.String);              }
Magic Number,NHibernate.OData,NormalizeMethodVisitor,C:\repos\pvginkel_NHibernate.OData\NHibernate.OData\NormalizeMethodVisitor.cs,SubStringMethod,The following statement contains a magic number: if (arguments[0].LiteralType == LiteralType.Null)              {                  return arguments[0];              }              else              {                  int startIndex;                  int length;                  string result;                    if (!LiteralUtil.TryCoerceInt(arguments[1]' out startIndex))                  {                      throw new ODataException(String.Format(                          ErrorMessages.Method_InvalidArgumentType'                          method.MethodType' 2' "Edm.Int32"                      ));                  }                    if (arguments.Length == 3)                  {                      if (!LiteralUtil.TryCoerceInt(arguments[2]' out length))                      {                          throw new ODataException(String.Format(                              ErrorMessages.Method_InvalidArgumentType'                              method.MethodType' 3' "Edm.Int32"                          ));                      }                        result = LiteralUtil.CoerceString(arguments[0]).Substring(startIndex - 1' length);                  }                  else                  {                      result = LiteralUtil.CoerceString(arguments[0]).Substring(startIndex - 1);                  }                    return new LiteralExpression(result' LiteralType.String);              }
Magic Number,NHibernate.OData,NormalizeMethodVisitor,C:\repos\pvginkel_NHibernate.OData\NHibernate.OData\NormalizeMethodVisitor.cs,SubStringMethod,The following statement contains a magic number: if (arguments[0].LiteralType == LiteralType.Null)              {                  return arguments[0];              }              else              {                  int startIndex;                  int length;                  string result;                    if (!LiteralUtil.TryCoerceInt(arguments[1]' out startIndex))                  {                      throw new ODataException(String.Format(                          ErrorMessages.Method_InvalidArgumentType'                          method.MethodType' 2' "Edm.Int32"                      ));                  }                    if (arguments.Length == 3)                  {                      if (!LiteralUtil.TryCoerceInt(arguments[2]' out length))                      {                          throw new ODataException(String.Format(                              ErrorMessages.Method_InvalidArgumentType'                              method.MethodType' 3' "Edm.Int32"                          ));                      }                        result = LiteralUtil.CoerceString(arguments[0]).Substring(startIndex - 1' length);                  }                  else                  {                      result = LiteralUtil.CoerceString(arguments[0]).Substring(startIndex - 1);                  }                    return new LiteralExpression(result' LiteralType.String);              }
Magic Number,NHibernate.OData,NormalizeMethodVisitor,C:\repos\pvginkel_NHibernate.OData\NHibernate.OData\NormalizeMethodVisitor.cs,SubStringMethod,The following statement contains a magic number: if (arguments[0].LiteralType == LiteralType.Null)              {                  return arguments[0];              }              else              {                  int startIndex;                  int length;                  string result;                    if (!LiteralUtil.TryCoerceInt(arguments[1]' out startIndex))                  {                      throw new ODataException(String.Format(                          ErrorMessages.Method_InvalidArgumentType'                          method.MethodType' 2' "Edm.Int32"                      ));                  }                    if (arguments.Length == 3)                  {                      if (!LiteralUtil.TryCoerceInt(arguments[2]' out length))                      {                          throw new ODataException(String.Format(                              ErrorMessages.Method_InvalidArgumentType'                              method.MethodType' 3' "Edm.Int32"                          ));                      }                        result = LiteralUtil.CoerceString(arguments[0]).Substring(startIndex - 1' length);                  }                  else                  {                      result = LiteralUtil.CoerceString(arguments[0]).Substring(startIndex - 1);                  }                    return new LiteralExpression(result' LiteralType.String);              }
Magic Number,NHibernate.OData,NormalizeMethodVisitor,C:\repos\pvginkel_NHibernate.OData\NHibernate.OData\NormalizeMethodVisitor.cs,SubStringMethod,The following statement contains a magic number: if (arguments[0].LiteralType == LiteralType.Null)              {                  return arguments[0];              }              else              {                  int startIndex;                  int length;                  string result;                    if (!LiteralUtil.TryCoerceInt(arguments[1]' out startIndex))                  {                      throw new ODataException(String.Format(                          ErrorMessages.Method_InvalidArgumentType'                          method.MethodType' 2' "Edm.Int32"                      ));                  }                    if (arguments.Length == 3)                  {                      if (!LiteralUtil.TryCoerceInt(arguments[2]' out length))                      {                          throw new ODataException(String.Format(                              ErrorMessages.Method_InvalidArgumentType'                              method.MethodType' 3' "Edm.Int32"                          ));                      }                        result = LiteralUtil.CoerceString(arguments[0]).Substring(startIndex - 1' length);                  }                  else                  {                      result = LiteralUtil.CoerceString(arguments[0]).Substring(startIndex - 1);                  }                    return new LiteralExpression(result' LiteralType.String);              }
Magic Number,NHibernate.OData,LiteralUtil,C:\repos\pvginkel_NHibernate.OData\NHibernate.OData\LiteralUtil.cs,SerializeBinary,The following statement contains a magic number: for (int i = 0; i < value.Length; i++)              {                  byte c = value[i];                    sb.Append(HexChars[c / 16]);                  sb.Append(HexChars[c % 16]);              }
Magic Number,NHibernate.OData,LiteralUtil,C:\repos\pvginkel_NHibernate.OData\NHibernate.OData\LiteralUtil.cs,SerializeBinary,The following statement contains a magic number: for (int i = 0; i < value.Length; i++)              {                  byte c = value[i];                    sb.Append(HexChars[c / 16]);                  sb.Append(HexChars[c % 16]);              }
Magic Number,NHibernate.OData,ODataExpression,C:\repos\pvginkel_NHibernate.OData\NHibernate.OData\ODataExpression.cs,ParseQueryString,The following statement contains a magic number: for (int i = 0; i < queryElements.Length; i++)              {                  string[] elementParts = queryElements[i].Split(new[] { '=' }' 2);                    string key = HttpUtil.UriDecode(elementParts[0]' _configuration.UTF8Unescape);                  string value = elementParts.Length == 2 ? HttpUtil.UriDecode(elementParts[1]' _configuration.UTF8Unescape) : "";                    ProcessQueryStringPart(key' value);              }
Magic Number,NHibernate.OData,ODataExpression,C:\repos\pvginkel_NHibernate.OData\NHibernate.OData\ODataExpression.cs,ParseQueryString,The following statement contains a magic number: for (int i = 0; i < queryElements.Length; i++)              {                  string[] elementParts = queryElements[i].Split(new[] { '=' }' 2);                    string key = HttpUtil.UriDecode(elementParts[0]' _configuration.UTF8Unescape);                  string value = elementParts.Length == 2 ? HttpUtil.UriDecode(elementParts[1]' _configuration.UTF8Unescape) : "";                    ProcessQueryStringPart(key' value);              }
Magic Number,NHibernate.OData,Parser,C:\repos\pvginkel_NHibernate.OData\NHibernate.OData\Parser.cs,ParseCollectionMethodCall,The following statement contains a magic number: var arguments = new List<Expression>(2)              {                  new MemberExpression(MemberType.Normal' collectionMembers)              };
Magic Number,NHibernate.OData,Lexer,C:\repos\pvginkel_NHibernate.OData\NHibernate.OData\Lexer.cs,ParseBinaryString,The following statement contains a magic number: if (value.Length % 2 == 0)              {                  byte[] result = new byte[value.Length / 2];                    for (int i = 0; i < result.Length; i++)                  {                      if (HttpUtil.IsHex(value[i * 2]) && HttpUtil.IsHex(value[i * 2 + 1]))                      {                          result[i] = (byte)(HttpUtil.HexToInt(value[i * 2]) * 16 + HttpUtil.HexToInt(value[i * 2 + 1]));                      }                      else                      {                          throw new ODataException(String.Format(                              ErrorMessages.Lexer_InvalidBinaryFormat' _offset                          ));                      }                  }                    return new LiteralToken(result' LiteralType.Binary);              }              else              {                  throw new ODataException(String.Format(                      ErrorMessages.Lexer_InvalidBinaryFormat' _offset                  ));              }
Magic Number,NHibernate.OData,Lexer,C:\repos\pvginkel_NHibernate.OData\NHibernate.OData\Lexer.cs,ParseBinaryString,The following statement contains a magic number: if (value.Length % 2 == 0)              {                  byte[] result = new byte[value.Length / 2];                    for (int i = 0; i < result.Length; i++)                  {                      if (HttpUtil.IsHex(value[i * 2]) && HttpUtil.IsHex(value[i * 2 + 1]))                      {                          result[i] = (byte)(HttpUtil.HexToInt(value[i * 2]) * 16 + HttpUtil.HexToInt(value[i * 2 + 1]));                      }                      else                      {                          throw new ODataException(String.Format(                              ErrorMessages.Lexer_InvalidBinaryFormat' _offset                          ));                      }                  }                    return new LiteralToken(result' LiteralType.Binary);              }              else              {                  throw new ODataException(String.Format(                      ErrorMessages.Lexer_InvalidBinaryFormat' _offset                  ));              }
Magic Number,NHibernate.OData,Lexer,C:\repos\pvginkel_NHibernate.OData\NHibernate.OData\Lexer.cs,ParseBinaryString,The following statement contains a magic number: if (value.Length % 2 == 0)              {                  byte[] result = new byte[value.Length / 2];                    for (int i = 0; i < result.Length; i++)                  {                      if (HttpUtil.IsHex(value[i * 2]) && HttpUtil.IsHex(value[i * 2 + 1]))                      {                          result[i] = (byte)(HttpUtil.HexToInt(value[i * 2]) * 16 + HttpUtil.HexToInt(value[i * 2 + 1]));                      }                      else                      {                          throw new ODataException(String.Format(                              ErrorMessages.Lexer_InvalidBinaryFormat' _offset                          ));                      }                  }                    return new LiteralToken(result' LiteralType.Binary);              }              else              {                  throw new ODataException(String.Format(                      ErrorMessages.Lexer_InvalidBinaryFormat' _offset                  ));              }
Magic Number,NHibernate.OData,Lexer,C:\repos\pvginkel_NHibernate.OData\NHibernate.OData\Lexer.cs,ParseBinaryString,The following statement contains a magic number: if (value.Length % 2 == 0)              {                  byte[] result = new byte[value.Length / 2];                    for (int i = 0; i < result.Length; i++)                  {                      if (HttpUtil.IsHex(value[i * 2]) && HttpUtil.IsHex(value[i * 2 + 1]))                      {                          result[i] = (byte)(HttpUtil.HexToInt(value[i * 2]) * 16 + HttpUtil.HexToInt(value[i * 2 + 1]));                      }                      else                      {                          throw new ODataException(String.Format(                              ErrorMessages.Lexer_InvalidBinaryFormat' _offset                          ));                      }                  }                    return new LiteralToken(result' LiteralType.Binary);              }              else              {                  throw new ODataException(String.Format(                      ErrorMessages.Lexer_InvalidBinaryFormat' _offset                  ));              }
Magic Number,NHibernate.OData,Lexer,C:\repos\pvginkel_NHibernate.OData\NHibernate.OData\Lexer.cs,ParseBinaryString,The following statement contains a magic number: if (value.Length % 2 == 0)              {                  byte[] result = new byte[value.Length / 2];                    for (int i = 0; i < result.Length; i++)                  {                      if (HttpUtil.IsHex(value[i * 2]) && HttpUtil.IsHex(value[i * 2 + 1]))                      {                          result[i] = (byte)(HttpUtil.HexToInt(value[i * 2]) * 16 + HttpUtil.HexToInt(value[i * 2 + 1]));                      }                      else                      {                          throw new ODataException(String.Format(                              ErrorMessages.Lexer_InvalidBinaryFormat' _offset                          ));                      }                  }                    return new LiteralToken(result' LiteralType.Binary);              }              else              {                  throw new ODataException(String.Format(                      ErrorMessages.Lexer_InvalidBinaryFormat' _offset                  ));              }
Magic Number,NHibernate.OData,Lexer,C:\repos\pvginkel_NHibernate.OData\NHibernate.OData\Lexer.cs,ParseBinaryString,The following statement contains a magic number: if (value.Length % 2 == 0)              {                  byte[] result = new byte[value.Length / 2];                    for (int i = 0; i < result.Length; i++)                  {                      if (HttpUtil.IsHex(value[i * 2]) && HttpUtil.IsHex(value[i * 2 + 1]))                      {                          result[i] = (byte)(HttpUtil.HexToInt(value[i * 2]) * 16 + HttpUtil.HexToInt(value[i * 2 + 1]));                      }                      else                      {                          throw new ODataException(String.Format(                              ErrorMessages.Lexer_InvalidBinaryFormat' _offset                          ));                      }                  }                    return new LiteralToken(result' LiteralType.Binary);              }              else              {                  throw new ODataException(String.Format(                      ErrorMessages.Lexer_InvalidBinaryFormat' _offset                  ));              }
Magic Number,NHibernate.OData,Lexer,C:\repos\pvginkel_NHibernate.OData\NHibernate.OData\Lexer.cs,ParseBinaryString,The following statement contains a magic number: if (value.Length % 2 == 0)              {                  byte[] result = new byte[value.Length / 2];                    for (int i = 0; i < result.Length; i++)                  {                      if (HttpUtil.IsHex(value[i * 2]) && HttpUtil.IsHex(value[i * 2 + 1]))                      {                          result[i] = (byte)(HttpUtil.HexToInt(value[i * 2]) * 16 + HttpUtil.HexToInt(value[i * 2 + 1]));                      }                      else                      {                          throw new ODataException(String.Format(                              ErrorMessages.Lexer_InvalidBinaryFormat' _offset                          ));                      }                  }                    return new LiteralToken(result' LiteralType.Binary);              }              else              {                  throw new ODataException(String.Format(                      ErrorMessages.Lexer_InvalidBinaryFormat' _offset                  ));              }
Magic Number,NHibernate.OData,Lexer,C:\repos\pvginkel_NHibernate.OData\NHibernate.OData\Lexer.cs,ParseDateTimeString,The following statement contains a magic number: if (match.Success)              {                  int year = int.Parse(match.Groups[1].Value' ParseCulture);                  int month = int.Parse(match.Groups[2].Value' ParseCulture);                  int day = int.Parse(match.Groups[3].Value' ParseCulture);                  int hour = int.Parse(match.Groups[4].Value' ParseCulture);                  int minute = int.Parse(match.Groups[5].Value' ParseCulture);                  int second = match.Groups[6].Value.Length > 0 ? int.Parse(match.Groups[6].Value' ParseCulture) : 0;                  int nanoSecond = match.Groups[7].Value.Length > 0 ? int.Parse(match.Groups[7].Value' ParseCulture) : 0;                    // Parse timezone offset                    string timeZoneString = match.Groups[8].Value;                  TimeSpan? timeZoneOffset = null;                    if (timeZoneString.Equals("Z"' StringComparison.Ordinal))                      timeZoneOffset = TimeSpan.Zero;                  else if (timeZoneString.Length > 0)                  {                      int tzHour = int.Parse(match.Groups[9].Value' ParseCulture);                      int tzMinute = int.Parse(match.Groups[10].Value' ParseCulture);                        timeZoneOffset = new TimeSpan(tzHour' tzMinute' 0);                        if (timeZoneString[0] == '-')                          timeZoneOffset = -timeZoneOffset;                  }                    // We let DateTime take care of validating the input.                  // If the timezone was not specified' default to local timezone                    DateTimeOffset dateTimeOffset = new DateTimeOffset(                      year' month' day' hour' minute' second' nanoSecond / 1000'                      timeZoneOffset ?? DateTimeOffset.Now.Offset                  );                    // If the timezone was specified' return it as UTC DateTime;                  // else return it as is (DateTimeKind.Unspecified)                    DateTime dateTime = timeZoneOffset != null ? dateTimeOffset.UtcDateTime : dateTimeOffset.DateTime;                    return new LiteralToken(dateTime' LiteralType.DateTime);              }              else              {                  throw new ODataException(String.Format(                      ErrorMessages.Lexer_InvalidDateTimeFormat' _offset                  ));              }
Magic Number,NHibernate.OData,Lexer,C:\repos\pvginkel_NHibernate.OData\NHibernate.OData\Lexer.cs,ParseDateTimeString,The following statement contains a magic number: if (match.Success)              {                  int year = int.Parse(match.Groups[1].Value' ParseCulture);                  int month = int.Parse(match.Groups[2].Value' ParseCulture);                  int day = int.Parse(match.Groups[3].Value' ParseCulture);                  int hour = int.Parse(match.Groups[4].Value' ParseCulture);                  int minute = int.Parse(match.Groups[5].Value' ParseCulture);                  int second = match.Groups[6].Value.Length > 0 ? int.Parse(match.Groups[6].Value' ParseCulture) : 0;                  int nanoSecond = match.Groups[7].Value.Length > 0 ? int.Parse(match.Groups[7].Value' ParseCulture) : 0;                    // Parse timezone offset                    string timeZoneString = match.Groups[8].Value;                  TimeSpan? timeZoneOffset = null;                    if (timeZoneString.Equals("Z"' StringComparison.Ordinal))                      timeZoneOffset = TimeSpan.Zero;                  else if (timeZoneString.Length > 0)                  {                      int tzHour = int.Parse(match.Groups[9].Value' ParseCulture);                      int tzMinute = int.Parse(match.Groups[10].Value' ParseCulture);                        timeZoneOffset = new TimeSpan(tzHour' tzMinute' 0);                        if (timeZoneString[0] == '-')                          timeZoneOffset = -timeZoneOffset;                  }                    // We let DateTime take care of validating the input.                  // If the timezone was not specified' default to local timezone                    DateTimeOffset dateTimeOffset = new DateTimeOffset(                      year' month' day' hour' minute' second' nanoSecond / 1000'                      timeZoneOffset ?? DateTimeOffset.Now.Offset                  );                    // If the timezone was specified' return it as UTC DateTime;                  // else return it as is (DateTimeKind.Unspecified)                    DateTime dateTime = timeZoneOffset != null ? dateTimeOffset.UtcDateTime : dateTimeOffset.DateTime;                    return new LiteralToken(dateTime' LiteralType.DateTime);              }              else              {                  throw new ODataException(String.Format(                      ErrorMessages.Lexer_InvalidDateTimeFormat' _offset                  ));              }
Magic Number,NHibernate.OData,Lexer,C:\repos\pvginkel_NHibernate.OData\NHibernate.OData\Lexer.cs,ParseDateTimeString,The following statement contains a magic number: if (match.Success)              {                  int year = int.Parse(match.Groups[1].Value' ParseCulture);                  int month = int.Parse(match.Groups[2].Value' ParseCulture);                  int day = int.Parse(match.Groups[3].Value' ParseCulture);                  int hour = int.Parse(match.Groups[4].Value' ParseCulture);                  int minute = int.Parse(match.Groups[5].Value' ParseCulture);                  int second = match.Groups[6].Value.Length > 0 ? int.Parse(match.Groups[6].Value' ParseCulture) : 0;                  int nanoSecond = match.Groups[7].Value.Length > 0 ? int.Parse(match.Groups[7].Value' ParseCulture) : 0;                    // Parse timezone offset                    string timeZoneString = match.Groups[8].Value;                  TimeSpan? timeZoneOffset = null;                    if (timeZoneString.Equals("Z"' StringComparison.Ordinal))                      timeZoneOffset = TimeSpan.Zero;                  else if (timeZoneString.Length > 0)                  {                      int tzHour = int.Parse(match.Groups[9].Value' ParseCulture);                      int tzMinute = int.Parse(match.Groups[10].Value' ParseCulture);                        timeZoneOffset = new TimeSpan(tzHour' tzMinute' 0);                        if (timeZoneString[0] == '-')                          timeZoneOffset = -timeZoneOffset;                  }                    // We let DateTime take care of validating the input.                  // If the timezone was not specified' default to local timezone                    DateTimeOffset dateTimeOffset = new DateTimeOffset(                      year' month' day' hour' minute' second' nanoSecond / 1000'                      timeZoneOffset ?? DateTimeOffset.Now.Offset                  );                    // If the timezone was specified' return it as UTC DateTime;                  // else return it as is (DateTimeKind.Unspecified)                    DateTime dateTime = timeZoneOffset != null ? dateTimeOffset.UtcDateTime : dateTimeOffset.DateTime;                    return new LiteralToken(dateTime' LiteralType.DateTime);              }              else              {                  throw new ODataException(String.Format(                      ErrorMessages.Lexer_InvalidDateTimeFormat' _offset                  ));              }
Magic Number,NHibernate.OData,Lexer,C:\repos\pvginkel_NHibernate.OData\NHibernate.OData\Lexer.cs,ParseDateTimeString,The following statement contains a magic number: if (match.Success)              {                  int year = int.Parse(match.Groups[1].Value' ParseCulture);                  int month = int.Parse(match.Groups[2].Value' ParseCulture);                  int day = int.Parse(match.Groups[3].Value' ParseCulture);                  int hour = int.Parse(match.Groups[4].Value' ParseCulture);                  int minute = int.Parse(match.Groups[5].Value' ParseCulture);                  int second = match.Groups[6].Value.Length > 0 ? int.Parse(match.Groups[6].Value' ParseCulture) : 0;                  int nanoSecond = match.Groups[7].Value.Length > 0 ? int.Parse(match.Groups[7].Value' ParseCulture) : 0;                    // Parse timezone offset                    string timeZoneString = match.Groups[8].Value;                  TimeSpan? timeZoneOffset = null;                    if (timeZoneString.Equals("Z"' StringComparison.Ordinal))                      timeZoneOffset = TimeSpan.Zero;                  else if (timeZoneString.Length > 0)                  {                      int tzHour = int.Parse(match.Groups[9].Value' ParseCulture);                      int tzMinute = int.Parse(match.Groups[10].Value' ParseCulture);                        timeZoneOffset = new TimeSpan(tzHour' tzMinute' 0);                        if (timeZoneString[0] == '-')                          timeZoneOffset = -timeZoneOffset;                  }                    // We let DateTime take care of validating the input.                  // If the timezone was not specified' default to local timezone                    DateTimeOffset dateTimeOffset = new DateTimeOffset(                      year' month' day' hour' minute' second' nanoSecond / 1000'                      timeZoneOffset ?? DateTimeOffset.Now.Offset                  );                    // If the timezone was specified' return it as UTC DateTime;                  // else return it as is (DateTimeKind.Unspecified)                    DateTime dateTime = timeZoneOffset != null ? dateTimeOffset.UtcDateTime : dateTimeOffset.DateTime;                    return new LiteralToken(dateTime' LiteralType.DateTime);              }              else              {                  throw new ODataException(String.Format(                      ErrorMessages.Lexer_InvalidDateTimeFormat' _offset                  ));              }
Magic Number,NHibernate.OData,Lexer,C:\repos\pvginkel_NHibernate.OData\NHibernate.OData\Lexer.cs,ParseDateTimeString,The following statement contains a magic number: if (match.Success)              {                  int year = int.Parse(match.Groups[1].Value' ParseCulture);                  int month = int.Parse(match.Groups[2].Value' ParseCulture);                  int day = int.Parse(match.Groups[3].Value' ParseCulture);                  int hour = int.Parse(match.Groups[4].Value' ParseCulture);                  int minute = int.Parse(match.Groups[5].Value' ParseCulture);                  int second = match.Groups[6].Value.Length > 0 ? int.Parse(match.Groups[6].Value' ParseCulture) : 0;                  int nanoSecond = match.Groups[7].Value.Length > 0 ? int.Parse(match.Groups[7].Value' ParseCulture) : 0;                    // Parse timezone offset                    string timeZoneString = match.Groups[8].Value;                  TimeSpan? timeZoneOffset = null;                    if (timeZoneString.Equals("Z"' StringComparison.Ordinal))                      timeZoneOffset = TimeSpan.Zero;                  else if (timeZoneString.Length > 0)                  {                      int tzHour = int.Parse(match.Groups[9].Value' ParseCulture);                      int tzMinute = int.Parse(match.Groups[10].Value' ParseCulture);                        timeZoneOffset = new TimeSpan(tzHour' tzMinute' 0);                        if (timeZoneString[0] == '-')                          timeZoneOffset = -timeZoneOffset;                  }                    // We let DateTime take care of validating the input.                  // If the timezone was not specified' default to local timezone                    DateTimeOffset dateTimeOffset = new DateTimeOffset(                      year' month' day' hour' minute' second' nanoSecond / 1000'                      timeZoneOffset ?? DateTimeOffset.Now.Offset                  );                    // If the timezone was specified' return it as UTC DateTime;                  // else return it as is (DateTimeKind.Unspecified)                    DateTime dateTime = timeZoneOffset != null ? dateTimeOffset.UtcDateTime : dateTimeOffset.DateTime;                    return new LiteralToken(dateTime' LiteralType.DateTime);              }              else              {                  throw new ODataException(String.Format(                      ErrorMessages.Lexer_InvalidDateTimeFormat' _offset                  ));              }
Magic Number,NHibernate.OData,Lexer,C:\repos\pvginkel_NHibernate.OData\NHibernate.OData\Lexer.cs,ParseDateTimeString,The following statement contains a magic number: if (match.Success)              {                  int year = int.Parse(match.Groups[1].Value' ParseCulture);                  int month = int.Parse(match.Groups[2].Value' ParseCulture);                  int day = int.Parse(match.Groups[3].Value' ParseCulture);                  int hour = int.Parse(match.Groups[4].Value' ParseCulture);                  int minute = int.Parse(match.Groups[5].Value' ParseCulture);                  int second = match.Groups[6].Value.Length > 0 ? int.Parse(match.Groups[6].Value' ParseCulture) : 0;                  int nanoSecond = match.Groups[7].Value.Length > 0 ? int.Parse(match.Groups[7].Value' ParseCulture) : 0;                    // Parse timezone offset                    string timeZoneString = match.Groups[8].Value;                  TimeSpan? timeZoneOffset = null;                    if (timeZoneString.Equals("Z"' StringComparison.Ordinal))                      timeZoneOffset = TimeSpan.Zero;                  else if (timeZoneString.Length > 0)                  {                      int tzHour = int.Parse(match.Groups[9].Value' ParseCulture);                      int tzMinute = int.Parse(match.Groups[10].Value' ParseCulture);                        timeZoneOffset = new TimeSpan(tzHour' tzMinute' 0);                        if (timeZoneString[0] == '-')                          timeZoneOffset = -timeZoneOffset;                  }                    // We let DateTime take care of validating the input.                  // If the timezone was not specified' default to local timezone                    DateTimeOffset dateTimeOffset = new DateTimeOffset(                      year' month' day' hour' minute' second' nanoSecond / 1000'                      timeZoneOffset ?? DateTimeOffset.Now.Offset                  );                    // If the timezone was specified' return it as UTC DateTime;                  // else return it as is (DateTimeKind.Unspecified)                    DateTime dateTime = timeZoneOffset != null ? dateTimeOffset.UtcDateTime : dateTimeOffset.DateTime;                    return new LiteralToken(dateTime' LiteralType.DateTime);              }              else              {                  throw new ODataException(String.Format(                      ErrorMessages.Lexer_InvalidDateTimeFormat' _offset                  ));              }
Magic Number,NHibernate.OData,Lexer,C:\repos\pvginkel_NHibernate.OData\NHibernate.OData\Lexer.cs,ParseDateTimeString,The following statement contains a magic number: if (match.Success)              {                  int year = int.Parse(match.Groups[1].Value' ParseCulture);                  int month = int.Parse(match.Groups[2].Value' ParseCulture);                  int day = int.Parse(match.Groups[3].Value' ParseCulture);                  int hour = int.Parse(match.Groups[4].Value' ParseCulture);                  int minute = int.Parse(match.Groups[5].Value' ParseCulture);                  int second = match.Groups[6].Value.Length > 0 ? int.Parse(match.Groups[6].Value' ParseCulture) : 0;                  int nanoSecond = match.Groups[7].Value.Length > 0 ? int.Parse(match.Groups[7].Value' ParseCulture) : 0;                    // Parse timezone offset                    string timeZoneString = match.Groups[8].Value;                  TimeSpan? timeZoneOffset = null;                    if (timeZoneString.Equals("Z"' StringComparison.Ordinal))                      timeZoneOffset = TimeSpan.Zero;                  else if (timeZoneString.Length > 0)                  {                      int tzHour = int.Parse(match.Groups[9].Value' ParseCulture);                      int tzMinute = int.Parse(match.Groups[10].Value' ParseCulture);                        timeZoneOffset = new TimeSpan(tzHour' tzMinute' 0);                        if (timeZoneString[0] == '-')                          timeZoneOffset = -timeZoneOffset;                  }                    // We let DateTime take care of validating the input.                  // If the timezone was not specified' default to local timezone                    DateTimeOffset dateTimeOffset = new DateTimeOffset(                      year' month' day' hour' minute' second' nanoSecond / 1000'                      timeZoneOffset ?? DateTimeOffset.Now.Offset                  );                    // If the timezone was specified' return it as UTC DateTime;                  // else return it as is (DateTimeKind.Unspecified)                    DateTime dateTime = timeZoneOffset != null ? dateTimeOffset.UtcDateTime : dateTimeOffset.DateTime;                    return new LiteralToken(dateTime' LiteralType.DateTime);              }              else              {                  throw new ODataException(String.Format(                      ErrorMessages.Lexer_InvalidDateTimeFormat' _offset                  ));              }
Magic Number,NHibernate.OData,Lexer,C:\repos\pvginkel_NHibernate.OData\NHibernate.OData\Lexer.cs,ParseDateTimeString,The following statement contains a magic number: if (match.Success)              {                  int year = int.Parse(match.Groups[1].Value' ParseCulture);                  int month = int.Parse(match.Groups[2].Value' ParseCulture);                  int day = int.Parse(match.Groups[3].Value' ParseCulture);                  int hour = int.Parse(match.Groups[4].Value' ParseCulture);                  int minute = int.Parse(match.Groups[5].Value' ParseCulture);                  int second = match.Groups[6].Value.Length > 0 ? int.Parse(match.Groups[6].Value' ParseCulture) : 0;                  int nanoSecond = match.Groups[7].Value.Length > 0 ? int.Parse(match.Groups[7].Value' ParseCulture) : 0;                    // Parse timezone offset                    string timeZoneString = match.Groups[8].Value;                  TimeSpan? timeZoneOffset = null;                    if (timeZoneString.Equals("Z"' StringComparison.Ordinal))                      timeZoneOffset = TimeSpan.Zero;                  else if (timeZoneString.Length > 0)                  {                      int tzHour = int.Parse(match.Groups[9].Value' ParseCulture);                      int tzMinute = int.Parse(match.Groups[10].Value' ParseCulture);                        timeZoneOffset = new TimeSpan(tzHour' tzMinute' 0);                        if (timeZoneString[0] == '-')                          timeZoneOffset = -timeZoneOffset;                  }                    // We let DateTime take care of validating the input.                  // If the timezone was not specified' default to local timezone                    DateTimeOffset dateTimeOffset = new DateTimeOffset(                      year' month' day' hour' minute' second' nanoSecond / 1000'                      timeZoneOffset ?? DateTimeOffset.Now.Offset                  );                    // If the timezone was specified' return it as UTC DateTime;                  // else return it as is (DateTimeKind.Unspecified)                    DateTime dateTime = timeZoneOffset != null ? dateTimeOffset.UtcDateTime : dateTimeOffset.DateTime;                    return new LiteralToken(dateTime' LiteralType.DateTime);              }              else              {                  throw new ODataException(String.Format(                      ErrorMessages.Lexer_InvalidDateTimeFormat' _offset                  ));              }
Magic Number,NHibernate.OData,Lexer,C:\repos\pvginkel_NHibernate.OData\NHibernate.OData\Lexer.cs,ParseDateTimeString,The following statement contains a magic number: if (match.Success)              {                  int year = int.Parse(match.Groups[1].Value' ParseCulture);                  int month = int.Parse(match.Groups[2].Value' ParseCulture);                  int day = int.Parse(match.Groups[3].Value' ParseCulture);                  int hour = int.Parse(match.Groups[4].Value' ParseCulture);                  int minute = int.Parse(match.Groups[5].Value' ParseCulture);                  int second = match.Groups[6].Value.Length > 0 ? int.Parse(match.Groups[6].Value' ParseCulture) : 0;                  int nanoSecond = match.Groups[7].Value.Length > 0 ? int.Parse(match.Groups[7].Value' ParseCulture) : 0;                    // Parse timezone offset                    string timeZoneString = match.Groups[8].Value;                  TimeSpan? timeZoneOffset = null;                    if (timeZoneString.Equals("Z"' StringComparison.Ordinal))                      timeZoneOffset = TimeSpan.Zero;                  else if (timeZoneString.Length > 0)                  {                      int tzHour = int.Parse(match.Groups[9].Value' ParseCulture);                      int tzMinute = int.Parse(match.Groups[10].Value' ParseCulture);                        timeZoneOffset = new TimeSpan(tzHour' tzMinute' 0);                        if (timeZoneString[0] == '-')                          timeZoneOffset = -timeZoneOffset;                  }                    // We let DateTime take care of validating the input.                  // If the timezone was not specified' default to local timezone                    DateTimeOffset dateTimeOffset = new DateTimeOffset(                      year' month' day' hour' minute' second' nanoSecond / 1000'                      timeZoneOffset ?? DateTimeOffset.Now.Offset                  );                    // If the timezone was specified' return it as UTC DateTime;                  // else return it as is (DateTimeKind.Unspecified)                    DateTime dateTime = timeZoneOffset != null ? dateTimeOffset.UtcDateTime : dateTimeOffset.DateTime;                    return new LiteralToken(dateTime' LiteralType.DateTime);              }              else              {                  throw new ODataException(String.Format(                      ErrorMessages.Lexer_InvalidDateTimeFormat' _offset                  ));              }
Magic Number,NHibernate.OData,Lexer,C:\repos\pvginkel_NHibernate.OData\NHibernate.OData\Lexer.cs,ParseDateTimeString,The following statement contains a magic number: if (match.Success)              {                  int year = int.Parse(match.Groups[1].Value' ParseCulture);                  int month = int.Parse(match.Groups[2].Value' ParseCulture);                  int day = int.Parse(match.Groups[3].Value' ParseCulture);                  int hour = int.Parse(match.Groups[4].Value' ParseCulture);                  int minute = int.Parse(match.Groups[5].Value' ParseCulture);                  int second = match.Groups[6].Value.Length > 0 ? int.Parse(match.Groups[6].Value' ParseCulture) : 0;                  int nanoSecond = match.Groups[7].Value.Length > 0 ? int.Parse(match.Groups[7].Value' ParseCulture) : 0;                    // Parse timezone offset                    string timeZoneString = match.Groups[8].Value;                  TimeSpan? timeZoneOffset = null;                    if (timeZoneString.Equals("Z"' StringComparison.Ordinal))                      timeZoneOffset = TimeSpan.Zero;                  else if (timeZoneString.Length > 0)                  {                      int tzHour = int.Parse(match.Groups[9].Value' ParseCulture);                      int tzMinute = int.Parse(match.Groups[10].Value' ParseCulture);                        timeZoneOffset = new TimeSpan(tzHour' tzMinute' 0);                        if (timeZoneString[0] == '-')                          timeZoneOffset = -timeZoneOffset;                  }                    // We let DateTime take care of validating the input.                  // If the timezone was not specified' default to local timezone                    DateTimeOffset dateTimeOffset = new DateTimeOffset(                      year' month' day' hour' minute' second' nanoSecond / 1000'                      timeZoneOffset ?? DateTimeOffset.Now.Offset                  );                    // If the timezone was specified' return it as UTC DateTime;                  // else return it as is (DateTimeKind.Unspecified)                    DateTime dateTime = timeZoneOffset != null ? dateTimeOffset.UtcDateTime : dateTimeOffset.DateTime;                    return new LiteralToken(dateTime' LiteralType.DateTime);              }              else              {                  throw new ODataException(String.Format(                      ErrorMessages.Lexer_InvalidDateTimeFormat' _offset                  ));              }
Magic Number,NHibernate.OData,Lexer,C:\repos\pvginkel_NHibernate.OData\NHibernate.OData\Lexer.cs,ParseDateTimeString,The following statement contains a magic number: if (match.Success)              {                  int year = int.Parse(match.Groups[1].Value' ParseCulture);                  int month = int.Parse(match.Groups[2].Value' ParseCulture);                  int day = int.Parse(match.Groups[3].Value' ParseCulture);                  int hour = int.Parse(match.Groups[4].Value' ParseCulture);                  int minute = int.Parse(match.Groups[5].Value' ParseCulture);                  int second = match.Groups[6].Value.Length > 0 ? int.Parse(match.Groups[6].Value' ParseCulture) : 0;                  int nanoSecond = match.Groups[7].Value.Length > 0 ? int.Parse(match.Groups[7].Value' ParseCulture) : 0;                    // Parse timezone offset                    string timeZoneString = match.Groups[8].Value;                  TimeSpan? timeZoneOffset = null;                    if (timeZoneString.Equals("Z"' StringComparison.Ordinal))                      timeZoneOffset = TimeSpan.Zero;                  else if (timeZoneString.Length > 0)                  {                      int tzHour = int.Parse(match.Groups[9].Value' ParseCulture);                      int tzMinute = int.Parse(match.Groups[10].Value' ParseCulture);                        timeZoneOffset = new TimeSpan(tzHour' tzMinute' 0);                        if (timeZoneString[0] == '-')                          timeZoneOffset = -timeZoneOffset;                  }                    // We let DateTime take care of validating the input.                  // If the timezone was not specified' default to local timezone                    DateTimeOffset dateTimeOffset = new DateTimeOffset(                      year' month' day' hour' minute' second' nanoSecond / 1000'                      timeZoneOffset ?? DateTimeOffset.Now.Offset                  );                    // If the timezone was specified' return it as UTC DateTime;                  // else return it as is (DateTimeKind.Unspecified)                    DateTime dateTime = timeZoneOffset != null ? dateTimeOffset.UtcDateTime : dateTimeOffset.DateTime;                    return new LiteralToken(dateTime' LiteralType.DateTime);              }              else              {                  throw new ODataException(String.Format(                      ErrorMessages.Lexer_InvalidDateTimeFormat' _offset                  ));              }
Magic Number,NHibernate.OData,Lexer,C:\repos\pvginkel_NHibernate.OData\NHibernate.OData\Lexer.cs,ParseDateTimeString,The following statement contains a magic number: if (match.Success)              {                  int year = int.Parse(match.Groups[1].Value' ParseCulture);                  int month = int.Parse(match.Groups[2].Value' ParseCulture);                  int day = int.Parse(match.Groups[3].Value' ParseCulture);                  int hour = int.Parse(match.Groups[4].Value' ParseCulture);                  int minute = int.Parse(match.Groups[5].Value' ParseCulture);                  int second = match.Groups[6].Value.Length > 0 ? int.Parse(match.Groups[6].Value' ParseCulture) : 0;                  int nanoSecond = match.Groups[7].Value.Length > 0 ? int.Parse(match.Groups[7].Value' ParseCulture) : 0;                    // Parse timezone offset                    string timeZoneString = match.Groups[8].Value;                  TimeSpan? timeZoneOffset = null;                    if (timeZoneString.Equals("Z"' StringComparison.Ordinal))                      timeZoneOffset = TimeSpan.Zero;                  else if (timeZoneString.Length > 0)                  {                      int tzHour = int.Parse(match.Groups[9].Value' ParseCulture);                      int tzMinute = int.Parse(match.Groups[10].Value' ParseCulture);                        timeZoneOffset = new TimeSpan(tzHour' tzMinute' 0);                        if (timeZoneString[0] == '-')                          timeZoneOffset = -timeZoneOffset;                  }                    // We let DateTime take care of validating the input.                  // If the timezone was not specified' default to local timezone                    DateTimeOffset dateTimeOffset = new DateTimeOffset(                      year' month' day' hour' minute' second' nanoSecond / 1000'                      timeZoneOffset ?? DateTimeOffset.Now.Offset                  );                    // If the timezone was specified' return it as UTC DateTime;                  // else return it as is (DateTimeKind.Unspecified)                    DateTime dateTime = timeZoneOffset != null ? dateTimeOffset.UtcDateTime : dateTimeOffset.DateTime;                    return new LiteralToken(dateTime' LiteralType.DateTime);              }              else              {                  throw new ODataException(String.Format(                      ErrorMessages.Lexer_InvalidDateTimeFormat' _offset                  ));              }
Magic Number,NHibernate.OData,Lexer,C:\repos\pvginkel_NHibernate.OData\NHibernate.OData\Lexer.cs,ParseTimeString,The following statement contains a magic number: if (match.Success)              {                  bool negative = match.Groups[1].Value == "-";                  int year = match.Groups[2].Value.Length > 0 ? int.Parse(match.Groups[2].Value' ParseCulture) : 0;                  int month = match.Groups[3].Value.Length > 0 ? int.Parse(match.Groups[3].Value' ParseCulture) : 0;                  int day = match.Groups[4].Value.Length > 0 ? int.Parse(match.Groups[4].Value' ParseCulture) : 0;                  int hour = match.Groups[5].Value.Length > 0 ? int.Parse(match.Groups[5].Value' ParseCulture) : 0;                  int minute = match.Groups[6].Value.Length > 0 ? int.Parse(match.Groups[6].Value' ParseCulture) : 0;                  double second = match.Groups[7].Value.Length > 0 ? double.Parse(match.Groups[7].Value' ParseCulture) : 0;                    return new LiteralToken(new XmlTimeSpan(!negative' year' month' day' hour' minute' second)' LiteralType.Duration);              }              else              {                  throw new ODataException(String.Format(                      ErrorMessages.Lexer_InvalidDurationFormat' _offset                  ));              }
Magic Number,NHibernate.OData,Lexer,C:\repos\pvginkel_NHibernate.OData\NHibernate.OData\Lexer.cs,ParseTimeString,The following statement contains a magic number: if (match.Success)              {                  bool negative = match.Groups[1].Value == "-";                  int year = match.Groups[2].Value.Length > 0 ? int.Parse(match.Groups[2].Value' ParseCulture) : 0;                  int month = match.Groups[3].Value.Length > 0 ? int.Parse(match.Groups[3].Value' ParseCulture) : 0;                  int day = match.Groups[4].Value.Length > 0 ? int.Parse(match.Groups[4].Value' ParseCulture) : 0;                  int hour = match.Groups[5].Value.Length > 0 ? int.Parse(match.Groups[5].Value' ParseCulture) : 0;                  int minute = match.Groups[6].Value.Length > 0 ? int.Parse(match.Groups[6].Value' ParseCulture) : 0;                  double second = match.Groups[7].Value.Length > 0 ? double.Parse(match.Groups[7].Value' ParseCulture) : 0;                    return new LiteralToken(new XmlTimeSpan(!negative' year' month' day' hour' minute' second)' LiteralType.Duration);              }              else              {                  throw new ODataException(String.Format(                      ErrorMessages.Lexer_InvalidDurationFormat' _offset                  ));              }
Magic Number,NHibernate.OData,Lexer,C:\repos\pvginkel_NHibernate.OData\NHibernate.OData\Lexer.cs,ParseTimeString,The following statement contains a magic number: if (match.Success)              {                  bool negative = match.Groups[1].Value == "-";                  int year = match.Groups[2].Value.Length > 0 ? int.Parse(match.Groups[2].Value' ParseCulture) : 0;                  int month = match.Groups[3].Value.Length > 0 ? int.Parse(match.Groups[3].Value' ParseCulture) : 0;                  int day = match.Groups[4].Value.Length > 0 ? int.Parse(match.Groups[4].Value' ParseCulture) : 0;                  int hour = match.Groups[5].Value.Length > 0 ? int.Parse(match.Groups[5].Value' ParseCulture) : 0;                  int minute = match.Groups[6].Value.Length > 0 ? int.Parse(match.Groups[6].Value' ParseCulture) : 0;                  double second = match.Groups[7].Value.Length > 0 ? double.Parse(match.Groups[7].Value' ParseCulture) : 0;                    return new LiteralToken(new XmlTimeSpan(!negative' year' month' day' hour' minute' second)' LiteralType.Duration);              }              else              {                  throw new ODataException(String.Format(                      ErrorMessages.Lexer_InvalidDurationFormat' _offset                  ));              }
Magic Number,NHibernate.OData,Lexer,C:\repos\pvginkel_NHibernate.OData\NHibernate.OData\Lexer.cs,ParseTimeString,The following statement contains a magic number: if (match.Success)              {                  bool negative = match.Groups[1].Value == "-";                  int year = match.Groups[2].Value.Length > 0 ? int.Parse(match.Groups[2].Value' ParseCulture) : 0;                  int month = match.Groups[3].Value.Length > 0 ? int.Parse(match.Groups[3].Value' ParseCulture) : 0;                  int day = match.Groups[4].Value.Length > 0 ? int.Parse(match.Groups[4].Value' ParseCulture) : 0;                  int hour = match.Groups[5].Value.Length > 0 ? int.Parse(match.Groups[5].Value' ParseCulture) : 0;                  int minute = match.Groups[6].Value.Length > 0 ? int.Parse(match.Groups[6].Value' ParseCulture) : 0;                  double second = match.Groups[7].Value.Length > 0 ? double.Parse(match.Groups[7].Value' ParseCulture) : 0;                    return new LiteralToken(new XmlTimeSpan(!negative' year' month' day' hour' minute' second)' LiteralType.Duration);              }              else              {                  throw new ODataException(String.Format(                      ErrorMessages.Lexer_InvalidDurationFormat' _offset                  ));              }
Magic Number,NHibernate.OData,Lexer,C:\repos\pvginkel_NHibernate.OData\NHibernate.OData\Lexer.cs,ParseTimeString,The following statement contains a magic number: if (match.Success)              {                  bool negative = match.Groups[1].Value == "-";                  int year = match.Groups[2].Value.Length > 0 ? int.Parse(match.Groups[2].Value' ParseCulture) : 0;                  int month = match.Groups[3].Value.Length > 0 ? int.Parse(match.Groups[3].Value' ParseCulture) : 0;                  int day = match.Groups[4].Value.Length > 0 ? int.Parse(match.Groups[4].Value' ParseCulture) : 0;                  int hour = match.Groups[5].Value.Length > 0 ? int.Parse(match.Groups[5].Value' ParseCulture) : 0;                  int minute = match.Groups[6].Value.Length > 0 ? int.Parse(match.Groups[6].Value' ParseCulture) : 0;                  double second = match.Groups[7].Value.Length > 0 ? double.Parse(match.Groups[7].Value' ParseCulture) : 0;                    return new LiteralToken(new XmlTimeSpan(!negative' year' month' day' hour' minute' second)' LiteralType.Duration);              }              else              {                  throw new ODataException(String.Format(                      ErrorMessages.Lexer_InvalidDurationFormat' _offset                  ));              }
Magic Number,NHibernate.OData,Lexer,C:\repos\pvginkel_NHibernate.OData\NHibernate.OData\Lexer.cs,ParseTimeString,The following statement contains a magic number: if (match.Success)              {                  bool negative = match.Groups[1].Value == "-";                  int year = match.Groups[2].Value.Length > 0 ? int.Parse(match.Groups[2].Value' ParseCulture) : 0;                  int month = match.Groups[3].Value.Length > 0 ? int.Parse(match.Groups[3].Value' ParseCulture) : 0;                  int day = match.Groups[4].Value.Length > 0 ? int.Parse(match.Groups[4].Value' ParseCulture) : 0;                  int hour = match.Groups[5].Value.Length > 0 ? int.Parse(match.Groups[5].Value' ParseCulture) : 0;                  int minute = match.Groups[6].Value.Length > 0 ? int.Parse(match.Groups[6].Value' ParseCulture) : 0;                  double second = match.Groups[7].Value.Length > 0 ? double.Parse(match.Groups[7].Value' ParseCulture) : 0;                    return new LiteralToken(new XmlTimeSpan(!negative' year' month' day' hour' minute' second)' LiteralType.Duration);              }              else              {                  throw new ODataException(String.Format(                      ErrorMessages.Lexer_InvalidDurationFormat' _offset                  ));              }
Magic Number,NHibernate.OData,Lexer,C:\repos\pvginkel_NHibernate.OData\NHibernate.OData\Lexer.cs,ParseTimeString,The following statement contains a magic number: if (match.Success)              {                  bool negative = match.Groups[1].Value == "-";                  int year = match.Groups[2].Value.Length > 0 ? int.Parse(match.Groups[2].Value' ParseCulture) : 0;                  int month = match.Groups[3].Value.Length > 0 ? int.Parse(match.Groups[3].Value' ParseCulture) : 0;                  int day = match.Groups[4].Value.Length > 0 ? int.Parse(match.Groups[4].Value' ParseCulture) : 0;                  int hour = match.Groups[5].Value.Length > 0 ? int.Parse(match.Groups[5].Value' ParseCulture) : 0;                  int minute = match.Groups[6].Value.Length > 0 ? int.Parse(match.Groups[6].Value' ParseCulture) : 0;                  double second = match.Groups[7].Value.Length > 0 ? double.Parse(match.Groups[7].Value' ParseCulture) : 0;                    return new LiteralToken(new XmlTimeSpan(!negative' year' month' day' hour' minute' second)' LiteralType.Duration);              }              else              {                  throw new ODataException(String.Format(                      ErrorMessages.Lexer_InvalidDurationFormat' _offset                  ));              }
Magic Number,NHibernate.OData,Lexer,C:\repos\pvginkel_NHibernate.OData\NHibernate.OData\Lexer.cs,ParseTimeString,The following statement contains a magic number: if (match.Success)              {                  bool negative = match.Groups[1].Value == "-";                  int year = match.Groups[2].Value.Length > 0 ? int.Parse(match.Groups[2].Value' ParseCulture) : 0;                  int month = match.Groups[3].Value.Length > 0 ? int.Parse(match.Groups[3].Value' ParseCulture) : 0;                  int day = match.Groups[4].Value.Length > 0 ? int.Parse(match.Groups[4].Value' ParseCulture) : 0;                  int hour = match.Groups[5].Value.Length > 0 ? int.Parse(match.Groups[5].Value' ParseCulture) : 0;                  int minute = match.Groups[6].Value.Length > 0 ? int.Parse(match.Groups[6].Value' ParseCulture) : 0;                  double second = match.Groups[7].Value.Length > 0 ? double.Parse(match.Groups[7].Value' ParseCulture) : 0;                    return new LiteralToken(new XmlTimeSpan(!negative' year' month' day' hour' minute' second)' LiteralType.Duration);              }              else              {                  throw new ODataException(String.Format(                      ErrorMessages.Lexer_InvalidDurationFormat' _offset                  ));              }
Magic Number,NHibernate.OData,Lexer,C:\repos\pvginkel_NHibernate.OData\NHibernate.OData\Lexer.cs,ParseTimeString,The following statement contains a magic number: if (match.Success)              {                  bool negative = match.Groups[1].Value == "-";                  int year = match.Groups[2].Value.Length > 0 ? int.Parse(match.Groups[2].Value' ParseCulture) : 0;                  int month = match.Groups[3].Value.Length > 0 ? int.Parse(match.Groups[3].Value' ParseCulture) : 0;                  int day = match.Groups[4].Value.Length > 0 ? int.Parse(match.Groups[4].Value' ParseCulture) : 0;                  int hour = match.Groups[5].Value.Length > 0 ? int.Parse(match.Groups[5].Value' ParseCulture) : 0;                  int minute = match.Groups[6].Value.Length > 0 ? int.Parse(match.Groups[6].Value' ParseCulture) : 0;                  double second = match.Groups[7].Value.Length > 0 ? double.Parse(match.Groups[7].Value' ParseCulture) : 0;                    return new LiteralToken(new XmlTimeSpan(!negative' year' month' day' hour' minute' second)' LiteralType.Duration);              }              else              {                  throw new ODataException(String.Format(                      ErrorMessages.Lexer_InvalidDurationFormat' _offset                  ));              }
Magic Number,NHibernate.OData,Lexer,C:\repos\pvginkel_NHibernate.OData\NHibernate.OData\Lexer.cs,ParseTimeString,The following statement contains a magic number: if (match.Success)              {                  bool negative = match.Groups[1].Value == "-";                  int year = match.Groups[2].Value.Length > 0 ? int.Parse(match.Groups[2].Value' ParseCulture) : 0;                  int month = match.Groups[3].Value.Length > 0 ? int.Parse(match.Groups[3].Value' ParseCulture) : 0;                  int day = match.Groups[4].Value.Length > 0 ? int.Parse(match.Groups[4].Value' ParseCulture) : 0;                  int hour = match.Groups[5].Value.Length > 0 ? int.Parse(match.Groups[5].Value' ParseCulture) : 0;                  int minute = match.Groups[6].Value.Length > 0 ? int.Parse(match.Groups[6].Value' ParseCulture) : 0;                  double second = match.Groups[7].Value.Length > 0 ? double.Parse(match.Groups[7].Value' ParseCulture) : 0;                    return new LiteralToken(new XmlTimeSpan(!negative' year' month' day' hour' minute' second)' LiteralType.Duration);              }              else              {                  throw new ODataException(String.Format(                      ErrorMessages.Lexer_InvalidDurationFormat' _offset                  ));              }
Magic Number,NHibernate.OData,Lexer,C:\repos\pvginkel_NHibernate.OData\NHibernate.OData\Lexer.cs,ParseTimeString,The following statement contains a magic number: if (match.Success)              {                  bool negative = match.Groups[1].Value == "-";                  int year = match.Groups[2].Value.Length > 0 ? int.Parse(match.Groups[2].Value' ParseCulture) : 0;                  int month = match.Groups[3].Value.Length > 0 ? int.Parse(match.Groups[3].Value' ParseCulture) : 0;                  int day = match.Groups[4].Value.Length > 0 ? int.Parse(match.Groups[4].Value' ParseCulture) : 0;                  int hour = match.Groups[5].Value.Length > 0 ? int.Parse(match.Groups[5].Value' ParseCulture) : 0;                  int minute = match.Groups[6].Value.Length > 0 ? int.Parse(match.Groups[6].Value' ParseCulture) : 0;                  double second = match.Groups[7].Value.Length > 0 ? double.Parse(match.Groups[7].Value' ParseCulture) : 0;                    return new LiteralToken(new XmlTimeSpan(!negative' year' month' day' hour' minute' second)' LiteralType.Duration);              }              else              {                  throw new ODataException(String.Format(                      ErrorMessages.Lexer_InvalidDurationFormat' _offset                  ));              }
Magic Number,NHibernate.OData,Lexer,C:\repos\pvginkel_NHibernate.OData\NHibernate.OData\Lexer.cs,ParseTimeString,The following statement contains a magic number: if (match.Success)              {                  bool negative = match.Groups[1].Value == "-";                  int year = match.Groups[2].Value.Length > 0 ? int.Parse(match.Groups[2].Value' ParseCulture) : 0;                  int month = match.Groups[3].Value.Length > 0 ? int.Parse(match.Groups[3].Value' ParseCulture) : 0;                  int day = match.Groups[4].Value.Length > 0 ? int.Parse(match.Groups[4].Value' ParseCulture) : 0;                  int hour = match.Groups[5].Value.Length > 0 ? int.Parse(match.Groups[5].Value' ParseCulture) : 0;                  int minute = match.Groups[6].Value.Length > 0 ? int.Parse(match.Groups[6].Value' ParseCulture) : 0;                  double second = match.Groups[7].Value.Length > 0 ? double.Parse(match.Groups[7].Value' ParseCulture) : 0;                    return new LiteralToken(new XmlTimeSpan(!negative' year' month' day' hour' minute' second)' LiteralType.Duration);              }              else              {                  throw new ODataException(String.Format(                      ErrorMessages.Lexer_InvalidDurationFormat' _offset                  ));              }
Magic Number,NHibernate.OData,XmlTimeSpan,C:\repos\pvginkel_NHibernate.OData\NHibernate.OData\XmlTimeSpan.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int result = _positive.GetHashCode();                  result = (result << 5 + result) ^ _years.GetHashCode();                  result = (result << 5 + result) ^ _months.GetHashCode();                  result = (result << 5 + result) ^ _days.GetHashCode();                  result = (result << 5 + result) ^ _hours.GetHashCode();                  result = (result << 5 + result) ^ _minutes.GetHashCode();                  result = (result << 5 + result) ^ _seconds.GetHashCode();                    return result;              }
Magic Number,NHibernate.OData,XmlTimeSpan,C:\repos\pvginkel_NHibernate.OData\NHibernate.OData\XmlTimeSpan.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int result = _positive.GetHashCode();                  result = (result << 5 + result) ^ _years.GetHashCode();                  result = (result << 5 + result) ^ _months.GetHashCode();                  result = (result << 5 + result) ^ _days.GetHashCode();                  result = (result << 5 + result) ^ _hours.GetHashCode();                  result = (result << 5 + result) ^ _minutes.GetHashCode();                  result = (result << 5 + result) ^ _seconds.GetHashCode();                    return result;              }
Magic Number,NHibernate.OData,XmlTimeSpan,C:\repos\pvginkel_NHibernate.OData\NHibernate.OData\XmlTimeSpan.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int result = _positive.GetHashCode();                  result = (result << 5 + result) ^ _years.GetHashCode();                  result = (result << 5 + result) ^ _months.GetHashCode();                  result = (result << 5 + result) ^ _days.GetHashCode();                  result = (result << 5 + result) ^ _hours.GetHashCode();                  result = (result << 5 + result) ^ _minutes.GetHashCode();                  result = (result << 5 + result) ^ _seconds.GetHashCode();                    return result;              }
Magic Number,NHibernate.OData,XmlTimeSpan,C:\repos\pvginkel_NHibernate.OData\NHibernate.OData\XmlTimeSpan.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int result = _positive.GetHashCode();                  result = (result << 5 + result) ^ _years.GetHashCode();                  result = (result << 5 + result) ^ _months.GetHashCode();                  result = (result << 5 + result) ^ _days.GetHashCode();                  result = (result << 5 + result) ^ _hours.GetHashCode();                  result = (result << 5 + result) ^ _minutes.GetHashCode();                  result = (result << 5 + result) ^ _seconds.GetHashCode();                    return result;              }
Magic Number,NHibernate.OData,XmlTimeSpan,C:\repos\pvginkel_NHibernate.OData\NHibernate.OData\XmlTimeSpan.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int result = _positive.GetHashCode();                  result = (result << 5 + result) ^ _years.GetHashCode();                  result = (result << 5 + result) ^ _months.GetHashCode();                  result = (result << 5 + result) ^ _days.GetHashCode();                  result = (result << 5 + result) ^ _hours.GetHashCode();                  result = (result << 5 + result) ^ _minutes.GetHashCode();                  result = (result << 5 + result) ^ _seconds.GetHashCode();                    return result;              }
Magic Number,NHibernate.OData,XmlTimeSpan,C:\repos\pvginkel_NHibernate.OData\NHibernate.OData\XmlTimeSpan.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int result = _positive.GetHashCode();                  result = (result << 5 + result) ^ _years.GetHashCode();                  result = (result << 5 + result) ^ _months.GetHashCode();                  result = (result << 5 + result) ^ _days.GetHashCode();                  result = (result << 5 + result) ^ _hours.GetHashCode();                  result = (result << 5 + result) ^ _minutes.GetHashCode();                  result = (result << 5 + result) ^ _seconds.GetHashCode();                    return result;              }
Magic Number,NHibernate.OData.Extensions,ArithmeticOperatorProjection,C:\repos\pvginkel_NHibernate.OData\NHibernate.OData\Extensions\ArithmeticOperatorProjection.cs,ArithmeticOperatorProjection,The following statement contains a magic number: if (args.Length < 2)                  throw new ArgumentOutOfRangeException("args"' args.Length' "Requires at least 2 projections");
Magic Number,NHibernate.OData.Extensions,BitwiseOperatorProjection,C:\repos\pvginkel_NHibernate.OData\NHibernate.OData\Extensions\BitwiseOperatorProjection.cs,BitwiseOperatorProjection,The following statement contains a magic number: if (args.Length < 2)                  throw new ArgumentOutOfRangeException("args"' args.Length' "Requires at least 2 projections");
Magic Number,NHibernate.OData.Extensions,OperatorProjection,C:\repos\pvginkel_NHibernate.OData\NHibernate.OData\Extensions\OperatorProjection.cs,ToSqlString,The following statement contains a magic number: for (int i = 0; i < args.Length; i++)              {                  int loc = (position + 1) * 1000 + i;                  SqlString projectArg = GetProjectionArgument(criteriaQuery' criteria' args[i]' loc' enabledFilters);                  sb.Add(projectArg);                    if (i < args.Length - 1)                      sb.Add(Op);              }
Magic Number,NHibernate.OData.Extensions,OperatorProjection,C:\repos\pvginkel_NHibernate.OData\NHibernate.OData\Extensions\OperatorProjection.cs,ToGroupSqlString,The following statement contains a magic number: if (buf.Count >= 2)              {                  buf.RemoveAt(buf.Count - 1);              }
Missing Default,NHibernate.OData,CriterionVisitor,C:\repos\pvginkel_NHibernate.OData\NHibernate.OData\CriterionVisitor.cs,ComparisonExpression,The following switch statement is missing a default case: switch (expression.Operator)                      {                          case Operator.Eq: return Restrictions.IsNull(property.PropertyName);                          case Operator.Ne: return Restrictions.IsNotNull(property.PropertyName);                      }
Missing Default,NHibernate.OData,CriterionVisitor,C:\repos\pvginkel_NHibernate.OData\NHibernate.OData\CriterionVisitor.cs,ComparisonExpression,The following switch statement is missing a default case: switch (expression.Operator)                      {                          case Operator.Eq: return Restrictions.IsNull(left);                          case Operator.Ne: return Restrictions.IsNotNull(left);                      }
Missing Default,NHibernate.OData,ExpressionUtil,C:\repos\pvginkel_NHibernate.OData\NHibernate.OData\ExpressionUtil.cs,CoerceLiteralExpression,The following switch statement is missing a default case: switch ((int)literal.Value)                  {                      case 0:                          return new LiteralExpression(false' LiteralType.Boolean);                        case 1:                          return new LiteralExpression(true' LiteralType.Boolean);                  }
Missing Default,NHibernate.OData,Parser,C:\repos\pvginkel_NHibernate.OData\NHibernate.OData\Parser.cs,GetOperator,The following switch statement is missing a default case: switch (identifier.Identifier)                  {                      case "and": return Operator.And;                      case "or": return Operator.Or;                      case "eq": return Operator.Eq;                      case "ne": return Operator.Ne;                      case "lt": return Operator.Lt;                      case "le": return Operator.Le;                      case "gt": return Operator.Gt;                      case "ge": return Operator.Ge;                      case "add": return Operator.Add;                      case "sub": return Operator.Sub;                      case "mul": return Operator.Mul;                      case "div": return Operator.Div;                      case "mod": return Operator.Mod;                      case "not": return Operator.Not;                  }
Missing Default,NHibernate.OData,Parser,C:\repos\pvginkel_NHibernate.OData\NHibernate.OData\Parser.cs,GetOrderByDirection,The following switch statement is missing a default case: switch (identifier.Identifier)                  {                      case "asc": return OrderByDirection.Ascending;                      case "desc": return OrderByDirection.Descending;                  }
Missing Default,NHibernate.OData,Parser,C:\repos\pvginkel_NHibernate.OData\NHibernate.OData\Parser.cs,ParseMethodCall,The following switch statement is missing a default case: switch (method.MethodType)              {                  case MethodType.StartsWith:                  case MethodType.EndsWith:                  case MethodType.SubStringOf:                  case MethodType.IsOf:                      isBool = true;                      break;                    case MethodType.Cast:                      if ((string)((LiteralExpression)arguments[1]).Value == "Edm.Boolean")                          isBool = true;                      break;              }
