Implementation smell,Namespace,Class,File,Method,Description
Complex Method,JTL.Tax1040.Core.Process,BusinessValidationRepository,C:\repos\vivekkumarm_Tax1040EZ\Feature\Code\JTL.Tax1040.Core.Process\BusinessValidationRepository.cs,IsValidCreditCardNumber,Cyclomatic complexity of the method is 11
Complex Method,JTL.Tax1040.Core.Process,MessagesRepository,C:\repos\vivekkumarm_Tax1040EZ\Feature\Code\JTL.Tax1040.Core.Process\MessagesRepository.cs,GetErrorMessages,Cyclomatic complexity of the method is 9
Complex Method,JTL.Tax1040.Core.Process,MessagesRepository,C:\repos\vivekkumarm_Tax1040EZ\Feature\Code\JTL.Tax1040.Core.Process\MessagesRepository.cs,GetEfileErrorMessage,Cyclomatic complexity of the method is 9
Long Parameter List,JTL.Tax1040.Core.Process,BusinessValidationRepository,C:\repos\vivekkumarm_Tax1040EZ\Feature\Code\JTL.Tax1040.Core.Process\BusinessValidationRepository.cs,AssertIsWithinRange,The method has 5 parameters.
Long Parameter List,JTL.Tax1040.Core.Process,BusinessValidationRepository,C:\repos\vivekkumarm_Tax1040EZ\Feature\Code\JTL.Tax1040.Core.Process\BusinessValidationRepository.cs,AssertIsWithinRange,The method has 5 parameters.
Long Parameter List,JTL.Tax1040.Core.Process,BusinessValidationRepository,C:\repos\vivekkumarm_Tax1040EZ\Feature\Code\JTL.Tax1040.Core.Process\BusinessValidationRepository.cs,AssertIsWithinPhoneNoRange,The method has 5 parameters.
Long Parameter List,JTL.Tax1040.Core.Process,BusinessValidationRepository,C:\repos\vivekkumarm_Tax1040EZ\Feature\Code\JTL.Tax1040.Core.Process\BusinessValidationRepository.cs,AssertIsWithinRange,The method has 5 parameters.
Long Parameter List,JTL.Tax1040.Core.Process,BusinessValidationRepository,C:\repos\vivekkumarm_Tax1040EZ\Feature\Code\JTL.Tax1040.Core.Process\BusinessValidationRepository.cs,AssertIsWithinRangeInclusive,The method has 5 parameters.
Long Parameter List,JTL.Tax1040.Core.Process,BusinessValidationRepository,C:\repos\vivekkumarm_Tax1040EZ\Feature\Code\JTL.Tax1040.Core.Process\BusinessValidationRepository.cs,AssertIsWithinRangeInclusive,The method has 5 parameters.
Long Parameter List,JTL.Tax1040.Core.Process,MessagesRepository,C:\repos\vivekkumarm_Tax1040EZ\Feature\Code\JTL.Tax1040.Core.Process\MessagesRepository.cs,ClearErrorMessages,The method has 8 parameters.
Long Parameter List,JTL.Tax1040.Core.Process,TaxRateCalculation,C:\repos\vivekkumarm_Tax1040EZ\Feature\Code\JTL.Tax1040.Core.Process\TaxRateCalculation.cs,TaxCalculation,The method has 8 parameters.
Long Parameter List,JTL.Tax1040.Core.Process,Utilities,C:\repos\vivekkumarm_Tax1040EZ\Feature\Code\JTL.Tax1040.Core.Process\Utilities.cs,SendMail,The method has 5 parameters.
Long Parameter List,JTL.Tax1040.Core.Process,Utilities,C:\repos\vivekkumarm_Tax1040EZ\Feature\Code\JTL.Tax1040.Core.Process\Utilities.cs,PersistAuditInfo,The method has 7 parameters.
Long Statement,JTL.Tax1040.Core.Process,BusinessValidationRepository,C:\repos\vivekkumarm_Tax1040EZ\Feature\Code\JTL.Tax1040.Core.Process\BusinessValidationRepository.cs,DateFormate,The length of the statement  "	return (!Utilities.IsValidRegexPattern (Convert.ToString (value)' @"[^(0[1-9]|1[012])[- /.](0[1-9]|[12][0-9]|3[01])[- /.](19|20)\d\d+$")) ? errorMessages [errorCode] : null; " is 173.
Long Statement,JTL.Tax1040.Core.Process,BusinessValidationRepository,C:\repos\vivekkumarm_Tax1040EZ\Feature\Code\JTL.Tax1040.Core.Process\BusinessValidationRepository.cs,AssertIsWithinPhoneNoRange,The length of the statement  "	return (value.Length < minValue || value.Length > maxValue || (!Utilities.IsValidPhone (value))) ? errorMessages [errorCode] : null; " is 132.
Long Statement,JTL.Tax1040.Core.Process,BusinessValidationRepository,C:\repos\vivekkumarm_Tax1040EZ\Feature\Code\JTL.Tax1040.Core.Process\BusinessValidationRepository.cs,AssertIsWithinForeignPhoneNo,The length of the statement  "	return (!Utilities.IsValidRegexPattern (value' @"[0-9]{1'20}") || (!Utilities.IsValidForeignPhone (value))) ? errorMessages [errorCode] : null; " is 143.
Long Statement,JTL.Tax1040.Core.Process,BusinessValidationRepository,C:\repos\vivekkumarm_Tax1040EZ\Feature\Code\JTL.Tax1040.Core.Process\BusinessValidationRepository.cs,AssertIsValidRTN,The length of the statement  "	return (!Utilities.IsValidRegexPattern (value' @"(01|02|03|04|05|06|07|08|09|10|11|12|20|21|22|23|24|25|26|27|28|29|30|31|32)[0-9]{7}")) ? errorMessages [errorCode] : null; " is 172.
Long Statement,JTL.Tax1040.Core.Process,BusinessValidationRepository,C:\repos\vivekkumarm_Tax1040EZ\Feature\Code\JTL.Tax1040.Core.Process\BusinessValidationRepository.cs,AssertIsAccountNumber,The length of the statement  "		return (accValue <= Constants.intZero || !Utilities.IsValidRegexPattern (value' @"[A-Za-z0-9-]{4'17}")) ? errorMessages [errorCode] : null; " is 139.
Long Statement,JTL.Tax1040.Core.Process,BusinessValidationRepository,C:\repos\vivekkumarm_Tax1040EZ\Feature\Code\JTL.Tax1040.Core.Process\BusinessValidationRepository.cs,AssertIsOnlyNumber,The length of the statement  "	return (accValue <= Constants.intZero || !Utilities.IsValidRegexPattern (value' @"[0-9]{1'5}")) ? errorMessages [errorCode] : null; " is 131.
Long Statement,JTL.Tax1040.Core.Process,MessagesRepository,C:\repos\vivekkumarm_Tax1040EZ\Feature\Code\JTL.Tax1040.Core.Process\MessagesRepository.cs,GetErrorMessages,The length of the statement  "							FieldDescription = sqlDataReader.IsDBNull (fieldDescriptionOrdinal) ? string.Empty : sqlDataReader.GetString (fieldDescriptionOrdinal)' " is 135.
Long Statement,JTL.Tax1040.Core.Process,MessagesRepository,C:\repos\vivekkumarm_Tax1040EZ\Feature\Code\JTL.Tax1040.Core.Process\MessagesRepository.cs,GetErrorMessages,The length of the statement  "							MessageType = sqlDataReader.IsDBNull (messageTypeOrdinal) ? string.Empty : sqlDataReader.GetString (messageTypeOrdinal)' " is 120.
Long Statement,JTL.Tax1040.Core.Process,MessagesRepository,C:\repos\vivekkumarm_Tax1040EZ\Feature\Code\JTL.Tax1040.Core.Process\MessagesRepository.cs,GetErrorMessages,The length of the statement  "							ErrorText = sqlDataReader.IsDBNull (shortErrorTextOrdinal) ? string.Empty : sqlDataReader.GetString (shortErrorTextOrdinal)' " is 124.
Long Statement,JTL.Tax1040.Core.Process,MessagesRepository,C:\repos\vivekkumarm_Tax1040EZ\Feature\Code\JTL.Tax1040.Core.Process\MessagesRepository.cs,GetErrorMessages,The length of the statement  "							LongErrorText = sqlDataReader.IsDBNull (longErrorTextOrdinal) ? string.Empty : sqlDataReader.GetString (longErrorTextOrdinal)' " is 126.
Long Statement,JTL.Tax1040.Core.Process,MessagesRepository,C:\repos\vivekkumarm_Tax1040EZ\Feature\Code\JTL.Tax1040.Core.Process\MessagesRepository.cs,GetErrorMessages,The length of the statement  "							MessageTarget = sqlDataReader.IsDBNull (messageTargetOrdinal) ? string.Empty : sqlDataReader.GetString (messageTargetOrdinal)' " is 126.
Long Statement,JTL.Tax1040.Core.Process,MessagesRepository,C:\repos\vivekkumarm_Tax1040EZ\Feature\Code\JTL.Tax1040.Core.Process\MessagesRepository.cs,ClearErrorMessages,The length of the statement  "				errorMessages.RemoveAll (errMsg => errMsg.Topic == topic && errMsg.FormId == formId && errMsg.ErrorCode.StartsWith (errorCode)); " is 128.
Long Statement,JTL.Tax1040.Core.Process,TaxRateCalculation,C:\repos\vivekkumarm_Tax1040EZ\Feature\Code\JTL.Tax1040.Core.Process\TaxRateCalculation.cs,TaxCalculation,The length of the statement  "	//07Jul2014 Sathish Checked the filling status to avoid error while doing calcuation for filing status other that single or MFJ #TAX1040-14100 " is 142.
Long Statement,JTL.Tax1040.Core.Process,TaxRateCalculation,C:\repos\vivekkumarm_Tax1040EZ\Feature\Code\JTL.Tax1040.Core.Process\TaxRateCalculation.cs,TaxCalculation,The length of the statement  "		var xdoc = XDocument.Load (Assembly.GetExecutingAssembly ().GetManifestResourceStream (ConfigurationManager.AppSettings ["TaxSlabRate"])); " is 138.
Long Statement,JTL.Tax1040.Core.Process,TaxRateCalculation,C:\repos\vivekkumarm_Tax1040EZ\Feature\Code\JTL.Tax1040.Core.Process\TaxRateCalculation.cs,TaxCalculation,The length of the statement  "		var slabs = xdoc.Descendants ("FilingStatus").Single (a => a.Attribute ("Type").Value == filingStatus.ToString ()).Elements (); " is 127.
Long Statement,JTL.Tax1040.Core.Process,TaxRateCalculation,C:\repos\vivekkumarm_Tax1040EZ\Feature\Code\JTL.Tax1040.Core.Process\TaxRateCalculation.cs,TaxCalculation,The length of the statement  "		var calculatedTax = (allSlabs.Where (sla => sla.EndRange < taxableIncome).Sum (su => ((su.EndRange - ((su.StartRange > 0) ? (su.StartRange - 1) : su.StartRange)) * su.TaxRate))) + (matchingSlab.TaxRate * (taxableIncome - ((matchingSlab.StartRange > 0) ? (matchingSlab.StartRange - 1) : matchingSlab.StartRange))); " is 313.
Long Statement,JTL.Tax1040.Core.Process,Utilities,C:\repos\vivekkumarm_Tax1040EZ\Feature\Code\JTL.Tax1040.Core.Process\Utilities.cs,SendMail,The length of the statement  "	if (!string.IsNullOrEmpty (ConfigurationManager.AppSettings [Constants.APP_SETTING_KEY_FROM_MAIL]) && !string.IsNullOrEmpty (ConfigurationManager.AppSettings [Constants.APP_SETTING_EXCEPTIONGROUPMAIL]) && !string.IsNullOrEmpty (ConfigurationManager.AppSettings [Constants.APP_SETTING_ERROR_FROM_WHICH_SERVER]) && !string.IsNullOrEmpty (ConfigurationManager.AppSettings [Constants.APP_SETTING_KEY_MAIL_HOST])) { " is 410.
Long Statement,JTL.Tax1040.Core.Process,Utilities,C:\repos\vivekkumarm_Tax1040EZ\Feature\Code\JTL.Tax1040.Core.Process\Utilities.cs,IsValidPhone,The length of the statement  "			if (phonenumber == Constants.TenZeros || phonenumber == Constants.TenNines || phonenumber.Length != Constants.PhoneNumerLength) { " is 129.
Long Statement,JTL.Tax1040.Core.Process,Utilities,C:\repos\vivekkumarm_Tax1040EZ\Feature\Code\JTL.Tax1040.Core.Process\Utilities.cs,IsValidSSNorITIN,The length of the statement  "				if (ssn == Constants.NaturalNumbers || areaCode == Constants.InvalidSsnAreaCode1 || areaCode1 == Constants.InvalidSsnAreaCode2 || groupCode == Constants.InvalidSsnGroupCode || serialNo == Constants.InvalidSsnSerialNo || areaCode > Constants.InvalidSsnAreaCodeRange) { " is 267.
Long Statement,JTL.Tax1040.Core.Process,Utilities,C:\repos\vivekkumarm_Tax1040EZ\Feature\Code\JTL.Tax1040.Core.Process\Utilities.cs,IsValidSSN,The length of the statement  "				if (ssn == Constants.NaturalNumbers || areaCode == Constants.InvalidSsnAreaCode1 || areaCode1 == Constants.InvalidSsnAreaCode2 || groupCode == Constants.InvalidSsnGroupCode || serialNo == Constants.InvalidSsnSerialNo || areaCode > Constants.InvalidSsnAreaCodeRange) { " is 267.
Long Statement,JTL.Tax1040.Core.Process,Utilities,C:\repos\vivekkumarm_Tax1040EZ\Feature\Code\JTL.Tax1040.Core.Process\Utilities.cs,IsValidITIN,The length of the statement  "			if (firstDigit == 9 && fourthandFiftDigits >= 70 && fourthandFiftDigits <= 99 && fourthandFiftDigits != 89 && fourthandFiftDigits != 93) { " is 138.
Long Statement,JTL.Tax1040.Core.Process,Utilities,C:\repos\vivekkumarm_Tax1040EZ\Feature\Code\JTL.Tax1040.Core.Process\Utilities.cs,GetEnumDescription,The length of the statement  "	DescriptionAttribute attribute = Attribute.GetCustomAttribute (field' typeof(DescriptionAttribute)) as DescriptionAttribute; " is 124.
Long Statement,JTL.Tax1040.Core.Process,Utilities,C:\repos\vivekkumarm_Tax1040EZ\Feature\Code\JTL.Tax1040.Core.Process\Utilities.cs,GetTaxPayerAndSpouseName,The length of the statement  "	return new Tuple<string' string' string' string> (primaryTaxPayerFirstName' primaryTaxPayerLastName' spouseFirstName' spouseLastName); " is 134.
Long Statement,JTL.Tax1040.Core.Process,Utilities,C:\repos\vivekkumarm_Tax1040EZ\Feature\Code\JTL.Tax1040.Core.Process\Utilities.cs,GetTaxPayerFirstNameOrNickName,The length of the statement  "	if (taxObject.PersonalDetails != null && taxObject.PersonalDetails.PrimaryTaxPayer != null && taxObject.PersonalDetails.PrimaryTaxPayer.Person != null) { " is 153.
Long Statement,JTL.Tax1040.Core.Process,Utilities,C:\repos\vivekkumarm_Tax1040EZ\Feature\Code\JTL.Tax1040.Core.Process\Utilities.cs,GetTaxPayerFirstNameOrNickName,The length of the statement  "		if (taxObject.PersonalDetails.PrimaryTaxPayer.Person.NickName != null && taxObject.PersonalDetails.PrimaryTaxPayer.Person.NickName != string.Empty) " is 147.
Long Statement,JTL.Tax1040.Core.Process,Utilities,C:\repos\vivekkumarm_Tax1040EZ\Feature\Code\JTL.Tax1040.Core.Process\Utilities.cs,GetTaxPayerFirstNameOrNickName,The length of the statement  "		else if (taxObject.PersonalDetails.PrimaryTaxPayer.Person.FirstName != null && taxObject.PersonalDetails.PrimaryTaxPayer.Person.FirstName != string.Empty) " is 154.
Long Statement,JTL.Tax1040.Core.Process,Utilities,C:\repos\vivekkumarm_Tax1040EZ\Feature\Code\JTL.Tax1040.Core.Process\Utilities.cs,EICEligibilityCheck,The length of the statement  "			//If EIC eligbility fails in AGI calculation' worksheet EIC object should be cleared in output form while loading this page.                    " is 124.
Complex Conditional,JTL.Tax1040.Core.Process,Utilities,C:\repos\vivekkumarm_Tax1040EZ\Feature\Code\JTL.Tax1040.Core.Process\Utilities.cs,SendMail,The conditional expression  "!string.IsNullOrEmpty (ConfigurationManager.AppSettings [Constants.APP_SETTING_KEY_FROM_MAIL]) && !string.IsNullOrEmpty (ConfigurationManager.AppSettings [Constants.APP_SETTING_EXCEPTIONGROUPMAIL]) && !string.IsNullOrEmpty (ConfigurationManager.AppSettings [Constants.APP_SETTING_ERROR_FROM_WHICH_SERVER]) && !string.IsNullOrEmpty (ConfigurationManager.AppSettings [Constants.APP_SETTING_KEY_MAIL_HOST])"  is complex.
Complex Conditional,JTL.Tax1040.Core.Process,Utilities,C:\repos\vivekkumarm_Tax1040EZ\Feature\Code\JTL.Tax1040.Core.Process\Utilities.cs,IsValidSSNorITIN,The conditional expression  "ssn.Length == Constants.SSNLength && IsNumeric (ssn) && ssn != Constants.NineZeros && ssn != Constants.NineNines"  is complex.
Complex Conditional,JTL.Tax1040.Core.Process,Utilities,C:\repos\vivekkumarm_Tax1040EZ\Feature\Code\JTL.Tax1040.Core.Process\Utilities.cs,IsValidSSNorITIN,The conditional expression  "ssn == Constants.NaturalNumbers || areaCode == Constants.InvalidSsnAreaCode1 || areaCode1 == Constants.InvalidSsnAreaCode2 || groupCode == Constants.InvalidSsnGroupCode || serialNo == Constants.InvalidSsnSerialNo || areaCode > Constants.InvalidSsnAreaCodeRange"  is complex.
Complex Conditional,JTL.Tax1040.Core.Process,Utilities,C:\repos\vivekkumarm_Tax1040EZ\Feature\Code\JTL.Tax1040.Core.Process\Utilities.cs,IsValidSSN,The conditional expression  "ssn.Length == Constants.SSNLength && IsNumeric (ssn) && ssn != Constants.NineZeros && ssn != Constants.NineNines"  is complex.
Complex Conditional,JTL.Tax1040.Core.Process,Utilities,C:\repos\vivekkumarm_Tax1040EZ\Feature\Code\JTL.Tax1040.Core.Process\Utilities.cs,IsValidSSN,The conditional expression  "ssn == Constants.NaturalNumbers || areaCode == Constants.InvalidSsnAreaCode1 || areaCode1 == Constants.InvalidSsnAreaCode2 || groupCode == Constants.InvalidSsnGroupCode || serialNo == Constants.InvalidSsnSerialNo || areaCode > Constants.InvalidSsnAreaCodeRange"  is complex.
Complex Conditional,JTL.Tax1040.Core.Process,Utilities,C:\repos\vivekkumarm_Tax1040EZ\Feature\Code\JTL.Tax1040.Core.Process\Utilities.cs,IsValidITIN,The conditional expression  "firstDigit == 9 && fourthandFiftDigits >= 70 && fourthandFiftDigits <= 99 && fourthandFiftDigits != 89 && fourthandFiftDigits != 93"  is complex.
Empty Catch Block,JTL.Tax1040.Core.Process,Utilities,C:\repos\vivekkumarm_Tax1040EZ\Feature\Code\JTL.Tax1040.Core.Process\Utilities.cs,SendMail,The method has an empty catch block.
Magic Number,JTL.Tax1040.Core.Process,Utilities,C:\repos\vivekkumarm_Tax1040EZ\Feature\Code\JTL.Tax1040.Core.Process\Utilities.cs,IsValidSSNorITIN,The following statement contains a magic number: if (!string.IsNullOrEmpty (value)) {  	string ssn = RemoveCloseBracket (value);  	ssn = RemoveOpenBracket (ssn);  	ssn = RemoveHiphen (ssn);  	//Bala' 6Aug2014' Condition modified  	if (ssn.Length == Constants.SSNLength && IsNumeric (ssn) && ssn != Constants.NineZeros && ssn != Constants.NineNines) {  		//4Aug2014' Bala' ignore the SSN validation If valid ITIN  		if (!IsValidITIN (ssn)) {  			int areaCode = int.Parse (ssn.Substring (0' 3));  			string areaCode1 = ssn.Substring (0' 3);  			string groupCode = ssn.Substring (3' 2);  			string serialNo = ssn.Substring (5' 4);  			if (ssn == Constants.NaturalNumbers || areaCode == Constants.InvalidSsnAreaCode1 || areaCode1 == Constants.InvalidSsnAreaCode2 || groupCode == Constants.InvalidSsnGroupCode || serialNo == Constants.InvalidSsnSerialNo || areaCode > Constants.InvalidSsnAreaCodeRange) {  				return false;  			}  			else {  				return true;  			}  		}  		else  			return true;  	}  	else {  		return false;  	}  }  else {  	return false;  }  
Magic Number,JTL.Tax1040.Core.Process,Utilities,C:\repos\vivekkumarm_Tax1040EZ\Feature\Code\JTL.Tax1040.Core.Process\Utilities.cs,IsValidSSNorITIN,The following statement contains a magic number: if (!string.IsNullOrEmpty (value)) {  	string ssn = RemoveCloseBracket (value);  	ssn = RemoveOpenBracket (ssn);  	ssn = RemoveHiphen (ssn);  	//Bala' 6Aug2014' Condition modified  	if (ssn.Length == Constants.SSNLength && IsNumeric (ssn) && ssn != Constants.NineZeros && ssn != Constants.NineNines) {  		//4Aug2014' Bala' ignore the SSN validation If valid ITIN  		if (!IsValidITIN (ssn)) {  			int areaCode = int.Parse (ssn.Substring (0' 3));  			string areaCode1 = ssn.Substring (0' 3);  			string groupCode = ssn.Substring (3' 2);  			string serialNo = ssn.Substring (5' 4);  			if (ssn == Constants.NaturalNumbers || areaCode == Constants.InvalidSsnAreaCode1 || areaCode1 == Constants.InvalidSsnAreaCode2 || groupCode == Constants.InvalidSsnGroupCode || serialNo == Constants.InvalidSsnSerialNo || areaCode > Constants.InvalidSsnAreaCodeRange) {  				return false;  			}  			else {  				return true;  			}  		}  		else  			return true;  	}  	else {  		return false;  	}  }  else {  	return false;  }  
Magic Number,JTL.Tax1040.Core.Process,Utilities,C:\repos\vivekkumarm_Tax1040EZ\Feature\Code\JTL.Tax1040.Core.Process\Utilities.cs,IsValidSSNorITIN,The following statement contains a magic number: if (!string.IsNullOrEmpty (value)) {  	string ssn = RemoveCloseBracket (value);  	ssn = RemoveOpenBracket (ssn);  	ssn = RemoveHiphen (ssn);  	//Bala' 6Aug2014' Condition modified  	if (ssn.Length == Constants.SSNLength && IsNumeric (ssn) && ssn != Constants.NineZeros && ssn != Constants.NineNines) {  		//4Aug2014' Bala' ignore the SSN validation If valid ITIN  		if (!IsValidITIN (ssn)) {  			int areaCode = int.Parse (ssn.Substring (0' 3));  			string areaCode1 = ssn.Substring (0' 3);  			string groupCode = ssn.Substring (3' 2);  			string serialNo = ssn.Substring (5' 4);  			if (ssn == Constants.NaturalNumbers || areaCode == Constants.InvalidSsnAreaCode1 || areaCode1 == Constants.InvalidSsnAreaCode2 || groupCode == Constants.InvalidSsnGroupCode || serialNo == Constants.InvalidSsnSerialNo || areaCode > Constants.InvalidSsnAreaCodeRange) {  				return false;  			}  			else {  				return true;  			}  		}  		else  			return true;  	}  	else {  		return false;  	}  }  else {  	return false;  }  
Magic Number,JTL.Tax1040.Core.Process,Utilities,C:\repos\vivekkumarm_Tax1040EZ\Feature\Code\JTL.Tax1040.Core.Process\Utilities.cs,IsValidSSNorITIN,The following statement contains a magic number: if (!string.IsNullOrEmpty (value)) {  	string ssn = RemoveCloseBracket (value);  	ssn = RemoveOpenBracket (ssn);  	ssn = RemoveHiphen (ssn);  	//Bala' 6Aug2014' Condition modified  	if (ssn.Length == Constants.SSNLength && IsNumeric (ssn) && ssn != Constants.NineZeros && ssn != Constants.NineNines) {  		//4Aug2014' Bala' ignore the SSN validation If valid ITIN  		if (!IsValidITIN (ssn)) {  			int areaCode = int.Parse (ssn.Substring (0' 3));  			string areaCode1 = ssn.Substring (0' 3);  			string groupCode = ssn.Substring (3' 2);  			string serialNo = ssn.Substring (5' 4);  			if (ssn == Constants.NaturalNumbers || areaCode == Constants.InvalidSsnAreaCode1 || areaCode1 == Constants.InvalidSsnAreaCode2 || groupCode == Constants.InvalidSsnGroupCode || serialNo == Constants.InvalidSsnSerialNo || areaCode > Constants.InvalidSsnAreaCodeRange) {  				return false;  			}  			else {  				return true;  			}  		}  		else  			return true;  	}  	else {  		return false;  	}  }  else {  	return false;  }  
Magic Number,JTL.Tax1040.Core.Process,Utilities,C:\repos\vivekkumarm_Tax1040EZ\Feature\Code\JTL.Tax1040.Core.Process\Utilities.cs,IsValidSSNorITIN,The following statement contains a magic number: if (!string.IsNullOrEmpty (value)) {  	string ssn = RemoveCloseBracket (value);  	ssn = RemoveOpenBracket (ssn);  	ssn = RemoveHiphen (ssn);  	//Bala' 6Aug2014' Condition modified  	if (ssn.Length == Constants.SSNLength && IsNumeric (ssn) && ssn != Constants.NineZeros && ssn != Constants.NineNines) {  		//4Aug2014' Bala' ignore the SSN validation If valid ITIN  		if (!IsValidITIN (ssn)) {  			int areaCode = int.Parse (ssn.Substring (0' 3));  			string areaCode1 = ssn.Substring (0' 3);  			string groupCode = ssn.Substring (3' 2);  			string serialNo = ssn.Substring (5' 4);  			if (ssn == Constants.NaturalNumbers || areaCode == Constants.InvalidSsnAreaCode1 || areaCode1 == Constants.InvalidSsnAreaCode2 || groupCode == Constants.InvalidSsnGroupCode || serialNo == Constants.InvalidSsnSerialNo || areaCode > Constants.InvalidSsnAreaCodeRange) {  				return false;  			}  			else {  				return true;  			}  		}  		else  			return true;  	}  	else {  		return false;  	}  }  else {  	return false;  }  
Magic Number,JTL.Tax1040.Core.Process,Utilities,C:\repos\vivekkumarm_Tax1040EZ\Feature\Code\JTL.Tax1040.Core.Process\Utilities.cs,IsValidSSNorITIN,The following statement contains a magic number: if (!string.IsNullOrEmpty (value)) {  	string ssn = RemoveCloseBracket (value);  	ssn = RemoveOpenBracket (ssn);  	ssn = RemoveHiphen (ssn);  	//Bala' 6Aug2014' Condition modified  	if (ssn.Length == Constants.SSNLength && IsNumeric (ssn) && ssn != Constants.NineZeros && ssn != Constants.NineNines) {  		//4Aug2014' Bala' ignore the SSN validation If valid ITIN  		if (!IsValidITIN (ssn)) {  			int areaCode = int.Parse (ssn.Substring (0' 3));  			string areaCode1 = ssn.Substring (0' 3);  			string groupCode = ssn.Substring (3' 2);  			string serialNo = ssn.Substring (5' 4);  			if (ssn == Constants.NaturalNumbers || areaCode == Constants.InvalidSsnAreaCode1 || areaCode1 == Constants.InvalidSsnAreaCode2 || groupCode == Constants.InvalidSsnGroupCode || serialNo == Constants.InvalidSsnSerialNo || areaCode > Constants.InvalidSsnAreaCodeRange) {  				return false;  			}  			else {  				return true;  			}  		}  		else  			return true;  	}  	else {  		return false;  	}  }  else {  	return false;  }  
Magic Number,JTL.Tax1040.Core.Process,Utilities,C:\repos\vivekkumarm_Tax1040EZ\Feature\Code\JTL.Tax1040.Core.Process\Utilities.cs,IsValidSSNorITIN,The following statement contains a magic number: if (ssn.Length == Constants.SSNLength && IsNumeric (ssn) && ssn != Constants.NineZeros && ssn != Constants.NineNines) {  	//4Aug2014' Bala' ignore the SSN validation If valid ITIN  	if (!IsValidITIN (ssn)) {  		int areaCode = int.Parse (ssn.Substring (0' 3));  		string areaCode1 = ssn.Substring (0' 3);  		string groupCode = ssn.Substring (3' 2);  		string serialNo = ssn.Substring (5' 4);  		if (ssn == Constants.NaturalNumbers || areaCode == Constants.InvalidSsnAreaCode1 || areaCode1 == Constants.InvalidSsnAreaCode2 || groupCode == Constants.InvalidSsnGroupCode || serialNo == Constants.InvalidSsnSerialNo || areaCode > Constants.InvalidSsnAreaCodeRange) {  			return false;  		}  		else {  			return true;  		}  	}  	else  		return true;  }  else {  	return false;  }  
Magic Number,JTL.Tax1040.Core.Process,Utilities,C:\repos\vivekkumarm_Tax1040EZ\Feature\Code\JTL.Tax1040.Core.Process\Utilities.cs,IsValidSSNorITIN,The following statement contains a magic number: if (ssn.Length == Constants.SSNLength && IsNumeric (ssn) && ssn != Constants.NineZeros && ssn != Constants.NineNines) {  	//4Aug2014' Bala' ignore the SSN validation If valid ITIN  	if (!IsValidITIN (ssn)) {  		int areaCode = int.Parse (ssn.Substring (0' 3));  		string areaCode1 = ssn.Substring (0' 3);  		string groupCode = ssn.Substring (3' 2);  		string serialNo = ssn.Substring (5' 4);  		if (ssn == Constants.NaturalNumbers || areaCode == Constants.InvalidSsnAreaCode1 || areaCode1 == Constants.InvalidSsnAreaCode2 || groupCode == Constants.InvalidSsnGroupCode || serialNo == Constants.InvalidSsnSerialNo || areaCode > Constants.InvalidSsnAreaCodeRange) {  			return false;  		}  		else {  			return true;  		}  	}  	else  		return true;  }  else {  	return false;  }  
Magic Number,JTL.Tax1040.Core.Process,Utilities,C:\repos\vivekkumarm_Tax1040EZ\Feature\Code\JTL.Tax1040.Core.Process\Utilities.cs,IsValidSSNorITIN,The following statement contains a magic number: if (ssn.Length == Constants.SSNLength && IsNumeric (ssn) && ssn != Constants.NineZeros && ssn != Constants.NineNines) {  	//4Aug2014' Bala' ignore the SSN validation If valid ITIN  	if (!IsValidITIN (ssn)) {  		int areaCode = int.Parse (ssn.Substring (0' 3));  		string areaCode1 = ssn.Substring (0' 3);  		string groupCode = ssn.Substring (3' 2);  		string serialNo = ssn.Substring (5' 4);  		if (ssn == Constants.NaturalNumbers || areaCode == Constants.InvalidSsnAreaCode1 || areaCode1 == Constants.InvalidSsnAreaCode2 || groupCode == Constants.InvalidSsnGroupCode || serialNo == Constants.InvalidSsnSerialNo || areaCode > Constants.InvalidSsnAreaCodeRange) {  			return false;  		}  		else {  			return true;  		}  	}  	else  		return true;  }  else {  	return false;  }  
Magic Number,JTL.Tax1040.Core.Process,Utilities,C:\repos\vivekkumarm_Tax1040EZ\Feature\Code\JTL.Tax1040.Core.Process\Utilities.cs,IsValidSSNorITIN,The following statement contains a magic number: if (ssn.Length == Constants.SSNLength && IsNumeric (ssn) && ssn != Constants.NineZeros && ssn != Constants.NineNines) {  	//4Aug2014' Bala' ignore the SSN validation If valid ITIN  	if (!IsValidITIN (ssn)) {  		int areaCode = int.Parse (ssn.Substring (0' 3));  		string areaCode1 = ssn.Substring (0' 3);  		string groupCode = ssn.Substring (3' 2);  		string serialNo = ssn.Substring (5' 4);  		if (ssn == Constants.NaturalNumbers || areaCode == Constants.InvalidSsnAreaCode1 || areaCode1 == Constants.InvalidSsnAreaCode2 || groupCode == Constants.InvalidSsnGroupCode || serialNo == Constants.InvalidSsnSerialNo || areaCode > Constants.InvalidSsnAreaCodeRange) {  			return false;  		}  		else {  			return true;  		}  	}  	else  		return true;  }  else {  	return false;  }  
Magic Number,JTL.Tax1040.Core.Process,Utilities,C:\repos\vivekkumarm_Tax1040EZ\Feature\Code\JTL.Tax1040.Core.Process\Utilities.cs,IsValidSSNorITIN,The following statement contains a magic number: if (ssn.Length == Constants.SSNLength && IsNumeric (ssn) && ssn != Constants.NineZeros && ssn != Constants.NineNines) {  	//4Aug2014' Bala' ignore the SSN validation If valid ITIN  	if (!IsValidITIN (ssn)) {  		int areaCode = int.Parse (ssn.Substring (0' 3));  		string areaCode1 = ssn.Substring (0' 3);  		string groupCode = ssn.Substring (3' 2);  		string serialNo = ssn.Substring (5' 4);  		if (ssn == Constants.NaturalNumbers || areaCode == Constants.InvalidSsnAreaCode1 || areaCode1 == Constants.InvalidSsnAreaCode2 || groupCode == Constants.InvalidSsnGroupCode || serialNo == Constants.InvalidSsnSerialNo || areaCode > Constants.InvalidSsnAreaCodeRange) {  			return false;  		}  		else {  			return true;  		}  	}  	else  		return true;  }  else {  	return false;  }  
Magic Number,JTL.Tax1040.Core.Process,Utilities,C:\repos\vivekkumarm_Tax1040EZ\Feature\Code\JTL.Tax1040.Core.Process\Utilities.cs,IsValidSSNorITIN,The following statement contains a magic number: if (ssn.Length == Constants.SSNLength && IsNumeric (ssn) && ssn != Constants.NineZeros && ssn != Constants.NineNines) {  	//4Aug2014' Bala' ignore the SSN validation If valid ITIN  	if (!IsValidITIN (ssn)) {  		int areaCode = int.Parse (ssn.Substring (0' 3));  		string areaCode1 = ssn.Substring (0' 3);  		string groupCode = ssn.Substring (3' 2);  		string serialNo = ssn.Substring (5' 4);  		if (ssn == Constants.NaturalNumbers || areaCode == Constants.InvalidSsnAreaCode1 || areaCode1 == Constants.InvalidSsnAreaCode2 || groupCode == Constants.InvalidSsnGroupCode || serialNo == Constants.InvalidSsnSerialNo || areaCode > Constants.InvalidSsnAreaCodeRange) {  			return false;  		}  		else {  			return true;  		}  	}  	else  		return true;  }  else {  	return false;  }  
Magic Number,JTL.Tax1040.Core.Process,Utilities,C:\repos\vivekkumarm_Tax1040EZ\Feature\Code\JTL.Tax1040.Core.Process\Utilities.cs,IsValidSSNorITIN,The following statement contains a magic number: if (!IsValidITIN (ssn)) {  	int areaCode = int.Parse (ssn.Substring (0' 3));  	string areaCode1 = ssn.Substring (0' 3);  	string groupCode = ssn.Substring (3' 2);  	string serialNo = ssn.Substring (5' 4);  	if (ssn == Constants.NaturalNumbers || areaCode == Constants.InvalidSsnAreaCode1 || areaCode1 == Constants.InvalidSsnAreaCode2 || groupCode == Constants.InvalidSsnGroupCode || serialNo == Constants.InvalidSsnSerialNo || areaCode > Constants.InvalidSsnAreaCodeRange) {  		return false;  	}  	else {  		return true;  	}  }  else  	return true;  
Magic Number,JTL.Tax1040.Core.Process,Utilities,C:\repos\vivekkumarm_Tax1040EZ\Feature\Code\JTL.Tax1040.Core.Process\Utilities.cs,IsValidSSNorITIN,The following statement contains a magic number: if (!IsValidITIN (ssn)) {  	int areaCode = int.Parse (ssn.Substring (0' 3));  	string areaCode1 = ssn.Substring (0' 3);  	string groupCode = ssn.Substring (3' 2);  	string serialNo = ssn.Substring (5' 4);  	if (ssn == Constants.NaturalNumbers || areaCode == Constants.InvalidSsnAreaCode1 || areaCode1 == Constants.InvalidSsnAreaCode2 || groupCode == Constants.InvalidSsnGroupCode || serialNo == Constants.InvalidSsnSerialNo || areaCode > Constants.InvalidSsnAreaCodeRange) {  		return false;  	}  	else {  		return true;  	}  }  else  	return true;  
Magic Number,JTL.Tax1040.Core.Process,Utilities,C:\repos\vivekkumarm_Tax1040EZ\Feature\Code\JTL.Tax1040.Core.Process\Utilities.cs,IsValidSSNorITIN,The following statement contains a magic number: if (!IsValidITIN (ssn)) {  	int areaCode = int.Parse (ssn.Substring (0' 3));  	string areaCode1 = ssn.Substring (0' 3);  	string groupCode = ssn.Substring (3' 2);  	string serialNo = ssn.Substring (5' 4);  	if (ssn == Constants.NaturalNumbers || areaCode == Constants.InvalidSsnAreaCode1 || areaCode1 == Constants.InvalidSsnAreaCode2 || groupCode == Constants.InvalidSsnGroupCode || serialNo == Constants.InvalidSsnSerialNo || areaCode > Constants.InvalidSsnAreaCodeRange) {  		return false;  	}  	else {  		return true;  	}  }  else  	return true;  
Magic Number,JTL.Tax1040.Core.Process,Utilities,C:\repos\vivekkumarm_Tax1040EZ\Feature\Code\JTL.Tax1040.Core.Process\Utilities.cs,IsValidSSNorITIN,The following statement contains a magic number: if (!IsValidITIN (ssn)) {  	int areaCode = int.Parse (ssn.Substring (0' 3));  	string areaCode1 = ssn.Substring (0' 3);  	string groupCode = ssn.Substring (3' 2);  	string serialNo = ssn.Substring (5' 4);  	if (ssn == Constants.NaturalNumbers || areaCode == Constants.InvalidSsnAreaCode1 || areaCode1 == Constants.InvalidSsnAreaCode2 || groupCode == Constants.InvalidSsnGroupCode || serialNo == Constants.InvalidSsnSerialNo || areaCode > Constants.InvalidSsnAreaCodeRange) {  		return false;  	}  	else {  		return true;  	}  }  else  	return true;  
Magic Number,JTL.Tax1040.Core.Process,Utilities,C:\repos\vivekkumarm_Tax1040EZ\Feature\Code\JTL.Tax1040.Core.Process\Utilities.cs,IsValidSSNorITIN,The following statement contains a magic number: if (!IsValidITIN (ssn)) {  	int areaCode = int.Parse (ssn.Substring (0' 3));  	string areaCode1 = ssn.Substring (0' 3);  	string groupCode = ssn.Substring (3' 2);  	string serialNo = ssn.Substring (5' 4);  	if (ssn == Constants.NaturalNumbers || areaCode == Constants.InvalidSsnAreaCode1 || areaCode1 == Constants.InvalidSsnAreaCode2 || groupCode == Constants.InvalidSsnGroupCode || serialNo == Constants.InvalidSsnSerialNo || areaCode > Constants.InvalidSsnAreaCodeRange) {  		return false;  	}  	else {  		return true;  	}  }  else  	return true;  
Magic Number,JTL.Tax1040.Core.Process,Utilities,C:\repos\vivekkumarm_Tax1040EZ\Feature\Code\JTL.Tax1040.Core.Process\Utilities.cs,IsValidSSNorITIN,The following statement contains a magic number: if (!IsValidITIN (ssn)) {  	int areaCode = int.Parse (ssn.Substring (0' 3));  	string areaCode1 = ssn.Substring (0' 3);  	string groupCode = ssn.Substring (3' 2);  	string serialNo = ssn.Substring (5' 4);  	if (ssn == Constants.NaturalNumbers || areaCode == Constants.InvalidSsnAreaCode1 || areaCode1 == Constants.InvalidSsnAreaCode2 || groupCode == Constants.InvalidSsnGroupCode || serialNo == Constants.InvalidSsnSerialNo || areaCode > Constants.InvalidSsnAreaCodeRange) {  		return false;  	}  	else {  		return true;  	}  }  else  	return true;  
Magic Number,JTL.Tax1040.Core.Process,Utilities,C:\repos\vivekkumarm_Tax1040EZ\Feature\Code\JTL.Tax1040.Core.Process\Utilities.cs,IsValidSSN,The following statement contains a magic number: if (!string.IsNullOrEmpty (value)) {  	string ssn = RemoveCloseBracket (value);  	ssn = RemoveOpenBracket (ssn);  	ssn = RemoveHiphen (ssn);  	if (ssn.Length == Constants.SSNLength && IsNumeric (ssn) && ssn != Constants.NineZeros && ssn != Constants.NineNines) {  		if (!IsValidITIN (ssn)) {  			int areaCode = int.Parse (ssn.Substring (0' 3));  			string areaCode1 = ssn.Substring (0' 3);  			string groupCode = ssn.Substring (3' 2);  			string serialNo = ssn.Substring (5' 4);  			if (ssn == Constants.NaturalNumbers || areaCode == Constants.InvalidSsnAreaCode1 || areaCode1 == Constants.InvalidSsnAreaCode2 || groupCode == Constants.InvalidSsnGroupCode || serialNo == Constants.InvalidSsnSerialNo || areaCode > Constants.InvalidSsnAreaCodeRange) {  				return false;  			}  			else {  				return true;  			}  		}  		else  			return false;  	}  	else {  		return false;  	}  }  else {  	return false;  }  
Magic Number,JTL.Tax1040.Core.Process,Utilities,C:\repos\vivekkumarm_Tax1040EZ\Feature\Code\JTL.Tax1040.Core.Process\Utilities.cs,IsValidSSN,The following statement contains a magic number: if (!string.IsNullOrEmpty (value)) {  	string ssn = RemoveCloseBracket (value);  	ssn = RemoveOpenBracket (ssn);  	ssn = RemoveHiphen (ssn);  	if (ssn.Length == Constants.SSNLength && IsNumeric (ssn) && ssn != Constants.NineZeros && ssn != Constants.NineNines) {  		if (!IsValidITIN (ssn)) {  			int areaCode = int.Parse (ssn.Substring (0' 3));  			string areaCode1 = ssn.Substring (0' 3);  			string groupCode = ssn.Substring (3' 2);  			string serialNo = ssn.Substring (5' 4);  			if (ssn == Constants.NaturalNumbers || areaCode == Constants.InvalidSsnAreaCode1 || areaCode1 == Constants.InvalidSsnAreaCode2 || groupCode == Constants.InvalidSsnGroupCode || serialNo == Constants.InvalidSsnSerialNo || areaCode > Constants.InvalidSsnAreaCodeRange) {  				return false;  			}  			else {  				return true;  			}  		}  		else  			return false;  	}  	else {  		return false;  	}  }  else {  	return false;  }  
Magic Number,JTL.Tax1040.Core.Process,Utilities,C:\repos\vivekkumarm_Tax1040EZ\Feature\Code\JTL.Tax1040.Core.Process\Utilities.cs,IsValidSSN,The following statement contains a magic number: if (!string.IsNullOrEmpty (value)) {  	string ssn = RemoveCloseBracket (value);  	ssn = RemoveOpenBracket (ssn);  	ssn = RemoveHiphen (ssn);  	if (ssn.Length == Constants.SSNLength && IsNumeric (ssn) && ssn != Constants.NineZeros && ssn != Constants.NineNines) {  		if (!IsValidITIN (ssn)) {  			int areaCode = int.Parse (ssn.Substring (0' 3));  			string areaCode1 = ssn.Substring (0' 3);  			string groupCode = ssn.Substring (3' 2);  			string serialNo = ssn.Substring (5' 4);  			if (ssn == Constants.NaturalNumbers || areaCode == Constants.InvalidSsnAreaCode1 || areaCode1 == Constants.InvalidSsnAreaCode2 || groupCode == Constants.InvalidSsnGroupCode || serialNo == Constants.InvalidSsnSerialNo || areaCode > Constants.InvalidSsnAreaCodeRange) {  				return false;  			}  			else {  				return true;  			}  		}  		else  			return false;  	}  	else {  		return false;  	}  }  else {  	return false;  }  
Magic Number,JTL.Tax1040.Core.Process,Utilities,C:\repos\vivekkumarm_Tax1040EZ\Feature\Code\JTL.Tax1040.Core.Process\Utilities.cs,IsValidSSN,The following statement contains a magic number: if (!string.IsNullOrEmpty (value)) {  	string ssn = RemoveCloseBracket (value);  	ssn = RemoveOpenBracket (ssn);  	ssn = RemoveHiphen (ssn);  	if (ssn.Length == Constants.SSNLength && IsNumeric (ssn) && ssn != Constants.NineZeros && ssn != Constants.NineNines) {  		if (!IsValidITIN (ssn)) {  			int areaCode = int.Parse (ssn.Substring (0' 3));  			string areaCode1 = ssn.Substring (0' 3);  			string groupCode = ssn.Substring (3' 2);  			string serialNo = ssn.Substring (5' 4);  			if (ssn == Constants.NaturalNumbers || areaCode == Constants.InvalidSsnAreaCode1 || areaCode1 == Constants.InvalidSsnAreaCode2 || groupCode == Constants.InvalidSsnGroupCode || serialNo == Constants.InvalidSsnSerialNo || areaCode > Constants.InvalidSsnAreaCodeRange) {  				return false;  			}  			else {  				return true;  			}  		}  		else  			return false;  	}  	else {  		return false;  	}  }  else {  	return false;  }  
Magic Number,JTL.Tax1040.Core.Process,Utilities,C:\repos\vivekkumarm_Tax1040EZ\Feature\Code\JTL.Tax1040.Core.Process\Utilities.cs,IsValidSSN,The following statement contains a magic number: if (!string.IsNullOrEmpty (value)) {  	string ssn = RemoveCloseBracket (value);  	ssn = RemoveOpenBracket (ssn);  	ssn = RemoveHiphen (ssn);  	if (ssn.Length == Constants.SSNLength && IsNumeric (ssn) && ssn != Constants.NineZeros && ssn != Constants.NineNines) {  		if (!IsValidITIN (ssn)) {  			int areaCode = int.Parse (ssn.Substring (0' 3));  			string areaCode1 = ssn.Substring (0' 3);  			string groupCode = ssn.Substring (3' 2);  			string serialNo = ssn.Substring (5' 4);  			if (ssn == Constants.NaturalNumbers || areaCode == Constants.InvalidSsnAreaCode1 || areaCode1 == Constants.InvalidSsnAreaCode2 || groupCode == Constants.InvalidSsnGroupCode || serialNo == Constants.InvalidSsnSerialNo || areaCode > Constants.InvalidSsnAreaCodeRange) {  				return false;  			}  			else {  				return true;  			}  		}  		else  			return false;  	}  	else {  		return false;  	}  }  else {  	return false;  }  
Magic Number,JTL.Tax1040.Core.Process,Utilities,C:\repos\vivekkumarm_Tax1040EZ\Feature\Code\JTL.Tax1040.Core.Process\Utilities.cs,IsValidSSN,The following statement contains a magic number: if (!string.IsNullOrEmpty (value)) {  	string ssn = RemoveCloseBracket (value);  	ssn = RemoveOpenBracket (ssn);  	ssn = RemoveHiphen (ssn);  	if (ssn.Length == Constants.SSNLength && IsNumeric (ssn) && ssn != Constants.NineZeros && ssn != Constants.NineNines) {  		if (!IsValidITIN (ssn)) {  			int areaCode = int.Parse (ssn.Substring (0' 3));  			string areaCode1 = ssn.Substring (0' 3);  			string groupCode = ssn.Substring (3' 2);  			string serialNo = ssn.Substring (5' 4);  			if (ssn == Constants.NaturalNumbers || areaCode == Constants.InvalidSsnAreaCode1 || areaCode1 == Constants.InvalidSsnAreaCode2 || groupCode == Constants.InvalidSsnGroupCode || serialNo == Constants.InvalidSsnSerialNo || areaCode > Constants.InvalidSsnAreaCodeRange) {  				return false;  			}  			else {  				return true;  			}  		}  		else  			return false;  	}  	else {  		return false;  	}  }  else {  	return false;  }  
Magic Number,JTL.Tax1040.Core.Process,Utilities,C:\repos\vivekkumarm_Tax1040EZ\Feature\Code\JTL.Tax1040.Core.Process\Utilities.cs,IsValidSSN,The following statement contains a magic number: if (ssn.Length == Constants.SSNLength && IsNumeric (ssn) && ssn != Constants.NineZeros && ssn != Constants.NineNines) {  	if (!IsValidITIN (ssn)) {  		int areaCode = int.Parse (ssn.Substring (0' 3));  		string areaCode1 = ssn.Substring (0' 3);  		string groupCode = ssn.Substring (3' 2);  		string serialNo = ssn.Substring (5' 4);  		if (ssn == Constants.NaturalNumbers || areaCode == Constants.InvalidSsnAreaCode1 || areaCode1 == Constants.InvalidSsnAreaCode2 || groupCode == Constants.InvalidSsnGroupCode || serialNo == Constants.InvalidSsnSerialNo || areaCode > Constants.InvalidSsnAreaCodeRange) {  			return false;  		}  		else {  			return true;  		}  	}  	else  		return false;  }  else {  	return false;  }  
Magic Number,JTL.Tax1040.Core.Process,Utilities,C:\repos\vivekkumarm_Tax1040EZ\Feature\Code\JTL.Tax1040.Core.Process\Utilities.cs,IsValidSSN,The following statement contains a magic number: if (ssn.Length == Constants.SSNLength && IsNumeric (ssn) && ssn != Constants.NineZeros && ssn != Constants.NineNines) {  	if (!IsValidITIN (ssn)) {  		int areaCode = int.Parse (ssn.Substring (0' 3));  		string areaCode1 = ssn.Substring (0' 3);  		string groupCode = ssn.Substring (3' 2);  		string serialNo = ssn.Substring (5' 4);  		if (ssn == Constants.NaturalNumbers || areaCode == Constants.InvalidSsnAreaCode1 || areaCode1 == Constants.InvalidSsnAreaCode2 || groupCode == Constants.InvalidSsnGroupCode || serialNo == Constants.InvalidSsnSerialNo || areaCode > Constants.InvalidSsnAreaCodeRange) {  			return false;  		}  		else {  			return true;  		}  	}  	else  		return false;  }  else {  	return false;  }  
Magic Number,JTL.Tax1040.Core.Process,Utilities,C:\repos\vivekkumarm_Tax1040EZ\Feature\Code\JTL.Tax1040.Core.Process\Utilities.cs,IsValidSSN,The following statement contains a magic number: if (ssn.Length == Constants.SSNLength && IsNumeric (ssn) && ssn != Constants.NineZeros && ssn != Constants.NineNines) {  	if (!IsValidITIN (ssn)) {  		int areaCode = int.Parse (ssn.Substring (0' 3));  		string areaCode1 = ssn.Substring (0' 3);  		string groupCode = ssn.Substring (3' 2);  		string serialNo = ssn.Substring (5' 4);  		if (ssn == Constants.NaturalNumbers || areaCode == Constants.InvalidSsnAreaCode1 || areaCode1 == Constants.InvalidSsnAreaCode2 || groupCode == Constants.InvalidSsnGroupCode || serialNo == Constants.InvalidSsnSerialNo || areaCode > Constants.InvalidSsnAreaCodeRange) {  			return false;  		}  		else {  			return true;  		}  	}  	else  		return false;  }  else {  	return false;  }  
Magic Number,JTL.Tax1040.Core.Process,Utilities,C:\repos\vivekkumarm_Tax1040EZ\Feature\Code\JTL.Tax1040.Core.Process\Utilities.cs,IsValidSSN,The following statement contains a magic number: if (ssn.Length == Constants.SSNLength && IsNumeric (ssn) && ssn != Constants.NineZeros && ssn != Constants.NineNines) {  	if (!IsValidITIN (ssn)) {  		int areaCode = int.Parse (ssn.Substring (0' 3));  		string areaCode1 = ssn.Substring (0' 3);  		string groupCode = ssn.Substring (3' 2);  		string serialNo = ssn.Substring (5' 4);  		if (ssn == Constants.NaturalNumbers || areaCode == Constants.InvalidSsnAreaCode1 || areaCode1 == Constants.InvalidSsnAreaCode2 || groupCode == Constants.InvalidSsnGroupCode || serialNo == Constants.InvalidSsnSerialNo || areaCode > Constants.InvalidSsnAreaCodeRange) {  			return false;  		}  		else {  			return true;  		}  	}  	else  		return false;  }  else {  	return false;  }  
Magic Number,JTL.Tax1040.Core.Process,Utilities,C:\repos\vivekkumarm_Tax1040EZ\Feature\Code\JTL.Tax1040.Core.Process\Utilities.cs,IsValidSSN,The following statement contains a magic number: if (ssn.Length == Constants.SSNLength && IsNumeric (ssn) && ssn != Constants.NineZeros && ssn != Constants.NineNines) {  	if (!IsValidITIN (ssn)) {  		int areaCode = int.Parse (ssn.Substring (0' 3));  		string areaCode1 = ssn.Substring (0' 3);  		string groupCode = ssn.Substring (3' 2);  		string serialNo = ssn.Substring (5' 4);  		if (ssn == Constants.NaturalNumbers || areaCode == Constants.InvalidSsnAreaCode1 || areaCode1 == Constants.InvalidSsnAreaCode2 || groupCode == Constants.InvalidSsnGroupCode || serialNo == Constants.InvalidSsnSerialNo || areaCode > Constants.InvalidSsnAreaCodeRange) {  			return false;  		}  		else {  			return true;  		}  	}  	else  		return false;  }  else {  	return false;  }  
Magic Number,JTL.Tax1040.Core.Process,Utilities,C:\repos\vivekkumarm_Tax1040EZ\Feature\Code\JTL.Tax1040.Core.Process\Utilities.cs,IsValidSSN,The following statement contains a magic number: if (ssn.Length == Constants.SSNLength && IsNumeric (ssn) && ssn != Constants.NineZeros && ssn != Constants.NineNines) {  	if (!IsValidITIN (ssn)) {  		int areaCode = int.Parse (ssn.Substring (0' 3));  		string areaCode1 = ssn.Substring (0' 3);  		string groupCode = ssn.Substring (3' 2);  		string serialNo = ssn.Substring (5' 4);  		if (ssn == Constants.NaturalNumbers || areaCode == Constants.InvalidSsnAreaCode1 || areaCode1 == Constants.InvalidSsnAreaCode2 || groupCode == Constants.InvalidSsnGroupCode || serialNo == Constants.InvalidSsnSerialNo || areaCode > Constants.InvalidSsnAreaCodeRange) {  			return false;  		}  		else {  			return true;  		}  	}  	else  		return false;  }  else {  	return false;  }  
Magic Number,JTL.Tax1040.Core.Process,Utilities,C:\repos\vivekkumarm_Tax1040EZ\Feature\Code\JTL.Tax1040.Core.Process\Utilities.cs,IsValidSSN,The following statement contains a magic number: if (!IsValidITIN (ssn)) {  	int areaCode = int.Parse (ssn.Substring (0' 3));  	string areaCode1 = ssn.Substring (0' 3);  	string groupCode = ssn.Substring (3' 2);  	string serialNo = ssn.Substring (5' 4);  	if (ssn == Constants.NaturalNumbers || areaCode == Constants.InvalidSsnAreaCode1 || areaCode1 == Constants.InvalidSsnAreaCode2 || groupCode == Constants.InvalidSsnGroupCode || serialNo == Constants.InvalidSsnSerialNo || areaCode > Constants.InvalidSsnAreaCodeRange) {  		return false;  	}  	else {  		return true;  	}  }  else  	return false;  
Magic Number,JTL.Tax1040.Core.Process,Utilities,C:\repos\vivekkumarm_Tax1040EZ\Feature\Code\JTL.Tax1040.Core.Process\Utilities.cs,IsValidSSN,The following statement contains a magic number: if (!IsValidITIN (ssn)) {  	int areaCode = int.Parse (ssn.Substring (0' 3));  	string areaCode1 = ssn.Substring (0' 3);  	string groupCode = ssn.Substring (3' 2);  	string serialNo = ssn.Substring (5' 4);  	if (ssn == Constants.NaturalNumbers || areaCode == Constants.InvalidSsnAreaCode1 || areaCode1 == Constants.InvalidSsnAreaCode2 || groupCode == Constants.InvalidSsnGroupCode || serialNo == Constants.InvalidSsnSerialNo || areaCode > Constants.InvalidSsnAreaCodeRange) {  		return false;  	}  	else {  		return true;  	}  }  else  	return false;  
Magic Number,JTL.Tax1040.Core.Process,Utilities,C:\repos\vivekkumarm_Tax1040EZ\Feature\Code\JTL.Tax1040.Core.Process\Utilities.cs,IsValidSSN,The following statement contains a magic number: if (!IsValidITIN (ssn)) {  	int areaCode = int.Parse (ssn.Substring (0' 3));  	string areaCode1 = ssn.Substring (0' 3);  	string groupCode = ssn.Substring (3' 2);  	string serialNo = ssn.Substring (5' 4);  	if (ssn == Constants.NaturalNumbers || areaCode == Constants.InvalidSsnAreaCode1 || areaCode1 == Constants.InvalidSsnAreaCode2 || groupCode == Constants.InvalidSsnGroupCode || serialNo == Constants.InvalidSsnSerialNo || areaCode > Constants.InvalidSsnAreaCodeRange) {  		return false;  	}  	else {  		return true;  	}  }  else  	return false;  
Magic Number,JTL.Tax1040.Core.Process,Utilities,C:\repos\vivekkumarm_Tax1040EZ\Feature\Code\JTL.Tax1040.Core.Process\Utilities.cs,IsValidSSN,The following statement contains a magic number: if (!IsValidITIN (ssn)) {  	int areaCode = int.Parse (ssn.Substring (0' 3));  	string areaCode1 = ssn.Substring (0' 3);  	string groupCode = ssn.Substring (3' 2);  	string serialNo = ssn.Substring (5' 4);  	if (ssn == Constants.NaturalNumbers || areaCode == Constants.InvalidSsnAreaCode1 || areaCode1 == Constants.InvalidSsnAreaCode2 || groupCode == Constants.InvalidSsnGroupCode || serialNo == Constants.InvalidSsnSerialNo || areaCode > Constants.InvalidSsnAreaCodeRange) {  		return false;  	}  	else {  		return true;  	}  }  else  	return false;  
Magic Number,JTL.Tax1040.Core.Process,Utilities,C:\repos\vivekkumarm_Tax1040EZ\Feature\Code\JTL.Tax1040.Core.Process\Utilities.cs,IsValidSSN,The following statement contains a magic number: if (!IsValidITIN (ssn)) {  	int areaCode = int.Parse (ssn.Substring (0' 3));  	string areaCode1 = ssn.Substring (0' 3);  	string groupCode = ssn.Substring (3' 2);  	string serialNo = ssn.Substring (5' 4);  	if (ssn == Constants.NaturalNumbers || areaCode == Constants.InvalidSsnAreaCode1 || areaCode1 == Constants.InvalidSsnAreaCode2 || groupCode == Constants.InvalidSsnGroupCode || serialNo == Constants.InvalidSsnSerialNo || areaCode > Constants.InvalidSsnAreaCodeRange) {  		return false;  	}  	else {  		return true;  	}  }  else  	return false;  
Magic Number,JTL.Tax1040.Core.Process,Utilities,C:\repos\vivekkumarm_Tax1040EZ\Feature\Code\JTL.Tax1040.Core.Process\Utilities.cs,IsValidSSN,The following statement contains a magic number: if (!IsValidITIN (ssn)) {  	int areaCode = int.Parse (ssn.Substring (0' 3));  	string areaCode1 = ssn.Substring (0' 3);  	string groupCode = ssn.Substring (3' 2);  	string serialNo = ssn.Substring (5' 4);  	if (ssn == Constants.NaturalNumbers || areaCode == Constants.InvalidSsnAreaCode1 || areaCode1 == Constants.InvalidSsnAreaCode2 || groupCode == Constants.InvalidSsnGroupCode || serialNo == Constants.InvalidSsnSerialNo || areaCode > Constants.InvalidSsnAreaCodeRange) {  		return false;  	}  	else {  		return true;  	}  }  else  	return false;  
Magic Number,JTL.Tax1040.Core.Process,Utilities,C:\repos\vivekkumarm_Tax1040EZ\Feature\Code\JTL.Tax1040.Core.Process\Utilities.cs,IsValidITIN,The following statement contains a magic number: if (!string.IsNullOrEmpty (value)) {  	string ssnVal = RemoveCloseBracket (value);  	ssnVal = RemoveOpenBracket (ssnVal);  	ssnVal = RemoveHiphen (ssnVal);  	if (ssnVal.Length == Constants.SSNLength && IsNumeric (ssnVal)) {  		int firstDigit = int.Parse (ssnVal.Substring (0' 1));  		string fourthandFiftDigit = ssnVal.Substring (3' 2);  		int fourthandFiftDigits = int.Parse (fourthandFiftDigit);  		if (firstDigit == 9 && fourthandFiftDigits >= 70 && fourthandFiftDigits <= 99 && fourthandFiftDigits != 89 && fourthandFiftDigits != 93) {  			return true;  		}  		else {  			return false;  		}  	}  	else {  		return false;  	}  }  else {  	return false;  }  
Magic Number,JTL.Tax1040.Core.Process,Utilities,C:\repos\vivekkumarm_Tax1040EZ\Feature\Code\JTL.Tax1040.Core.Process\Utilities.cs,IsValidITIN,The following statement contains a magic number: if (!string.IsNullOrEmpty (value)) {  	string ssnVal = RemoveCloseBracket (value);  	ssnVal = RemoveOpenBracket (ssnVal);  	ssnVal = RemoveHiphen (ssnVal);  	if (ssnVal.Length == Constants.SSNLength && IsNumeric (ssnVal)) {  		int firstDigit = int.Parse (ssnVal.Substring (0' 1));  		string fourthandFiftDigit = ssnVal.Substring (3' 2);  		int fourthandFiftDigits = int.Parse (fourthandFiftDigit);  		if (firstDigit == 9 && fourthandFiftDigits >= 70 && fourthandFiftDigits <= 99 && fourthandFiftDigits != 89 && fourthandFiftDigits != 93) {  			return true;  		}  		else {  			return false;  		}  	}  	else {  		return false;  	}  }  else {  	return false;  }  
Magic Number,JTL.Tax1040.Core.Process,Utilities,C:\repos\vivekkumarm_Tax1040EZ\Feature\Code\JTL.Tax1040.Core.Process\Utilities.cs,IsValidITIN,The following statement contains a magic number: if (!string.IsNullOrEmpty (value)) {  	string ssnVal = RemoveCloseBracket (value);  	ssnVal = RemoveOpenBracket (ssnVal);  	ssnVal = RemoveHiphen (ssnVal);  	if (ssnVal.Length == Constants.SSNLength && IsNumeric (ssnVal)) {  		int firstDigit = int.Parse (ssnVal.Substring (0' 1));  		string fourthandFiftDigit = ssnVal.Substring (3' 2);  		int fourthandFiftDigits = int.Parse (fourthandFiftDigit);  		if (firstDigit == 9 && fourthandFiftDigits >= 70 && fourthandFiftDigits <= 99 && fourthandFiftDigits != 89 && fourthandFiftDigits != 93) {  			return true;  		}  		else {  			return false;  		}  	}  	else {  		return false;  	}  }  else {  	return false;  }  
Magic Number,JTL.Tax1040.Core.Process,Utilities,C:\repos\vivekkumarm_Tax1040EZ\Feature\Code\JTL.Tax1040.Core.Process\Utilities.cs,IsValidITIN,The following statement contains a magic number: if (!string.IsNullOrEmpty (value)) {  	string ssnVal = RemoveCloseBracket (value);  	ssnVal = RemoveOpenBracket (ssnVal);  	ssnVal = RemoveHiphen (ssnVal);  	if (ssnVal.Length == Constants.SSNLength && IsNumeric (ssnVal)) {  		int firstDigit = int.Parse (ssnVal.Substring (0' 1));  		string fourthandFiftDigit = ssnVal.Substring (3' 2);  		int fourthandFiftDigits = int.Parse (fourthandFiftDigit);  		if (firstDigit == 9 && fourthandFiftDigits >= 70 && fourthandFiftDigits <= 99 && fourthandFiftDigits != 89 && fourthandFiftDigits != 93) {  			return true;  		}  		else {  			return false;  		}  	}  	else {  		return false;  	}  }  else {  	return false;  }  
Magic Number,JTL.Tax1040.Core.Process,Utilities,C:\repos\vivekkumarm_Tax1040EZ\Feature\Code\JTL.Tax1040.Core.Process\Utilities.cs,IsValidITIN,The following statement contains a magic number: if (!string.IsNullOrEmpty (value)) {  	string ssnVal = RemoveCloseBracket (value);  	ssnVal = RemoveOpenBracket (ssnVal);  	ssnVal = RemoveHiphen (ssnVal);  	if (ssnVal.Length == Constants.SSNLength && IsNumeric (ssnVal)) {  		int firstDigit = int.Parse (ssnVal.Substring (0' 1));  		string fourthandFiftDigit = ssnVal.Substring (3' 2);  		int fourthandFiftDigits = int.Parse (fourthandFiftDigit);  		if (firstDigit == 9 && fourthandFiftDigits >= 70 && fourthandFiftDigits <= 99 && fourthandFiftDigits != 89 && fourthandFiftDigits != 93) {  			return true;  		}  		else {  			return false;  		}  	}  	else {  		return false;  	}  }  else {  	return false;  }  
Magic Number,JTL.Tax1040.Core.Process,Utilities,C:\repos\vivekkumarm_Tax1040EZ\Feature\Code\JTL.Tax1040.Core.Process\Utilities.cs,IsValidITIN,The following statement contains a magic number: if (!string.IsNullOrEmpty (value)) {  	string ssnVal = RemoveCloseBracket (value);  	ssnVal = RemoveOpenBracket (ssnVal);  	ssnVal = RemoveHiphen (ssnVal);  	if (ssnVal.Length == Constants.SSNLength && IsNumeric (ssnVal)) {  		int firstDigit = int.Parse (ssnVal.Substring (0' 1));  		string fourthandFiftDigit = ssnVal.Substring (3' 2);  		int fourthandFiftDigits = int.Parse (fourthandFiftDigit);  		if (firstDigit == 9 && fourthandFiftDigits >= 70 && fourthandFiftDigits <= 99 && fourthandFiftDigits != 89 && fourthandFiftDigits != 93) {  			return true;  		}  		else {  			return false;  		}  	}  	else {  		return false;  	}  }  else {  	return false;  }  
Magic Number,JTL.Tax1040.Core.Process,Utilities,C:\repos\vivekkumarm_Tax1040EZ\Feature\Code\JTL.Tax1040.Core.Process\Utilities.cs,IsValidITIN,The following statement contains a magic number: if (!string.IsNullOrEmpty (value)) {  	string ssnVal = RemoveCloseBracket (value);  	ssnVal = RemoveOpenBracket (ssnVal);  	ssnVal = RemoveHiphen (ssnVal);  	if (ssnVal.Length == Constants.SSNLength && IsNumeric (ssnVal)) {  		int firstDigit = int.Parse (ssnVal.Substring (0' 1));  		string fourthandFiftDigit = ssnVal.Substring (3' 2);  		int fourthandFiftDigits = int.Parse (fourthandFiftDigit);  		if (firstDigit == 9 && fourthandFiftDigits >= 70 && fourthandFiftDigits <= 99 && fourthandFiftDigits != 89 && fourthandFiftDigits != 93) {  			return true;  		}  		else {  			return false;  		}  	}  	else {  		return false;  	}  }  else {  	return false;  }  
Magic Number,JTL.Tax1040.Core.Process,Utilities,C:\repos\vivekkumarm_Tax1040EZ\Feature\Code\JTL.Tax1040.Core.Process\Utilities.cs,IsValidITIN,The following statement contains a magic number: if (ssnVal.Length == Constants.SSNLength && IsNumeric (ssnVal)) {  	int firstDigit = int.Parse (ssnVal.Substring (0' 1));  	string fourthandFiftDigit = ssnVal.Substring (3' 2);  	int fourthandFiftDigits = int.Parse (fourthandFiftDigit);  	if (firstDigit == 9 && fourthandFiftDigits >= 70 && fourthandFiftDigits <= 99 && fourthandFiftDigits != 89 && fourthandFiftDigits != 93) {  		return true;  	}  	else {  		return false;  	}  }  else {  	return false;  }  
Magic Number,JTL.Tax1040.Core.Process,Utilities,C:\repos\vivekkumarm_Tax1040EZ\Feature\Code\JTL.Tax1040.Core.Process\Utilities.cs,IsValidITIN,The following statement contains a magic number: if (ssnVal.Length == Constants.SSNLength && IsNumeric (ssnVal)) {  	int firstDigit = int.Parse (ssnVal.Substring (0' 1));  	string fourthandFiftDigit = ssnVal.Substring (3' 2);  	int fourthandFiftDigits = int.Parse (fourthandFiftDigit);  	if (firstDigit == 9 && fourthandFiftDigits >= 70 && fourthandFiftDigits <= 99 && fourthandFiftDigits != 89 && fourthandFiftDigits != 93) {  		return true;  	}  	else {  		return false;  	}  }  else {  	return false;  }  
Magic Number,JTL.Tax1040.Core.Process,Utilities,C:\repos\vivekkumarm_Tax1040EZ\Feature\Code\JTL.Tax1040.Core.Process\Utilities.cs,IsValidITIN,The following statement contains a magic number: if (ssnVal.Length == Constants.SSNLength && IsNumeric (ssnVal)) {  	int firstDigit = int.Parse (ssnVal.Substring (0' 1));  	string fourthandFiftDigit = ssnVal.Substring (3' 2);  	int fourthandFiftDigits = int.Parse (fourthandFiftDigit);  	if (firstDigit == 9 && fourthandFiftDigits >= 70 && fourthandFiftDigits <= 99 && fourthandFiftDigits != 89 && fourthandFiftDigits != 93) {  		return true;  	}  	else {  		return false;  	}  }  else {  	return false;  }  
Magic Number,JTL.Tax1040.Core.Process,Utilities,C:\repos\vivekkumarm_Tax1040EZ\Feature\Code\JTL.Tax1040.Core.Process\Utilities.cs,IsValidITIN,The following statement contains a magic number: if (ssnVal.Length == Constants.SSNLength && IsNumeric (ssnVal)) {  	int firstDigit = int.Parse (ssnVal.Substring (0' 1));  	string fourthandFiftDigit = ssnVal.Substring (3' 2);  	int fourthandFiftDigits = int.Parse (fourthandFiftDigit);  	if (firstDigit == 9 && fourthandFiftDigits >= 70 && fourthandFiftDigits <= 99 && fourthandFiftDigits != 89 && fourthandFiftDigits != 93) {  		return true;  	}  	else {  		return false;  	}  }  else {  	return false;  }  
Magic Number,JTL.Tax1040.Core.Process,Utilities,C:\repos\vivekkumarm_Tax1040EZ\Feature\Code\JTL.Tax1040.Core.Process\Utilities.cs,IsValidITIN,The following statement contains a magic number: if (ssnVal.Length == Constants.SSNLength && IsNumeric (ssnVal)) {  	int firstDigit = int.Parse (ssnVal.Substring (0' 1));  	string fourthandFiftDigit = ssnVal.Substring (3' 2);  	int fourthandFiftDigits = int.Parse (fourthandFiftDigit);  	if (firstDigit == 9 && fourthandFiftDigits >= 70 && fourthandFiftDigits <= 99 && fourthandFiftDigits != 89 && fourthandFiftDigits != 93) {  		return true;  	}  	else {  		return false;  	}  }  else {  	return false;  }  
Magic Number,JTL.Tax1040.Core.Process,Utilities,C:\repos\vivekkumarm_Tax1040EZ\Feature\Code\JTL.Tax1040.Core.Process\Utilities.cs,IsValidITIN,The following statement contains a magic number: if (ssnVal.Length == Constants.SSNLength && IsNumeric (ssnVal)) {  	int firstDigit = int.Parse (ssnVal.Substring (0' 1));  	string fourthandFiftDigit = ssnVal.Substring (3' 2);  	int fourthandFiftDigits = int.Parse (fourthandFiftDigit);  	if (firstDigit == 9 && fourthandFiftDigits >= 70 && fourthandFiftDigits <= 99 && fourthandFiftDigits != 89 && fourthandFiftDigits != 93) {  		return true;  	}  	else {  		return false;  	}  }  else {  	return false;  }  
Magic Number,JTL.Tax1040.Core.Process,Utilities,C:\repos\vivekkumarm_Tax1040EZ\Feature\Code\JTL.Tax1040.Core.Process\Utilities.cs,IsValidITIN,The following statement contains a magic number: if (ssnVal.Length == Constants.SSNLength && IsNumeric (ssnVal)) {  	int firstDigit = int.Parse (ssnVal.Substring (0' 1));  	string fourthandFiftDigit = ssnVal.Substring (3' 2);  	int fourthandFiftDigits = int.Parse (fourthandFiftDigit);  	if (firstDigit == 9 && fourthandFiftDigits >= 70 && fourthandFiftDigits <= 99 && fourthandFiftDigits != 89 && fourthandFiftDigits != 93) {  		return true;  	}  	else {  		return false;  	}  }  else {  	return false;  }  
Magic Number,JTL.Tax1040.Core.Process,Utilities,C:\repos\vivekkumarm_Tax1040EZ\Feature\Code\JTL.Tax1040.Core.Process\Utilities.cs,IsValidITIN,The following statement contains a magic number: if (firstDigit == 9 && fourthandFiftDigits >= 70 && fourthandFiftDigits <= 99 && fourthandFiftDigits != 89 && fourthandFiftDigits != 93) {  	return true;  }  else {  	return false;  }  
Magic Number,JTL.Tax1040.Core.Process,Utilities,C:\repos\vivekkumarm_Tax1040EZ\Feature\Code\JTL.Tax1040.Core.Process\Utilities.cs,IsValidITIN,The following statement contains a magic number: if (firstDigit == 9 && fourthandFiftDigits >= 70 && fourthandFiftDigits <= 99 && fourthandFiftDigits != 89 && fourthandFiftDigits != 93) {  	return true;  }  else {  	return false;  }  
Magic Number,JTL.Tax1040.Core.Process,Utilities,C:\repos\vivekkumarm_Tax1040EZ\Feature\Code\JTL.Tax1040.Core.Process\Utilities.cs,IsValidITIN,The following statement contains a magic number: if (firstDigit == 9 && fourthandFiftDigits >= 70 && fourthandFiftDigits <= 99 && fourthandFiftDigits != 89 && fourthandFiftDigits != 93) {  	return true;  }  else {  	return false;  }  
Magic Number,JTL.Tax1040.Core.Process,Utilities,C:\repos\vivekkumarm_Tax1040EZ\Feature\Code\JTL.Tax1040.Core.Process\Utilities.cs,IsValidITIN,The following statement contains a magic number: if (firstDigit == 9 && fourthandFiftDigits >= 70 && fourthandFiftDigits <= 99 && fourthandFiftDigits != 89 && fourthandFiftDigits != 93) {  	return true;  }  else {  	return false;  }  
Magic Number,JTL.Tax1040.Core.Process,Utilities,C:\repos\vivekkumarm_Tax1040EZ\Feature\Code\JTL.Tax1040.Core.Process\Utilities.cs,IsValidITIN,The following statement contains a magic number: if (firstDigit == 9 && fourthandFiftDigits >= 70 && fourthandFiftDigits <= 99 && fourthandFiftDigits != 89 && fourthandFiftDigits != 93) {  	return true;  }  else {  	return false;  }  
Magic Number,JTL.Tax1040.Core.Process,Utilities,C:\repos\vivekkumarm_Tax1040EZ\Feature\Code\JTL.Tax1040.Core.Process\Utilities.cs,GetRijndaelManaged,The following statement contains a magic number: return new RijndaelManaged {  	Mode = CipherMode.CBC'  	Padding = PaddingMode.PKCS7'  	KeySize = 128'  	BlockSize = 128'  	Key = keyBytes'  	IV = keyBytes  };  
Magic Number,JTL.Tax1040.Core.Process,Utilities,C:\repos\vivekkumarm_Tax1040EZ\Feature\Code\JTL.Tax1040.Core.Process\Utilities.cs,GetRijndaelManaged,The following statement contains a magic number: return new RijndaelManaged {  	Mode = CipherMode.CBC'  	Padding = PaddingMode.PKCS7'  	KeySize = 128'  	BlockSize = 128'  	Key = keyBytes'  	IV = keyBytes  };  
Magic Number,JTL.Tax1040.Core.Process,Utilities,C:\repos\vivekkumarm_Tax1040EZ\Feature\Code\JTL.Tax1040.Core.Process\Utilities.cs,MinimumDOB,The following statement contains a magic number: return new DateTime (Constants.TAX_YEAR - 64' 01' 01);  
Magic Number,JTL.Tax1040.Core.Process,Utilities,C:\repos\vivekkumarm_Tax1040EZ\Feature\Code\JTL.Tax1040.Core.Process\Utilities.cs,MaximumDOB,The following statement contains a magic number: return new DateTime (Constants.TAX_YEAR - 24' 01' 02);  
Magic Number,JTL.Tax1040.Core.Process,Utilities,C:\repos\vivekkumarm_Tax1040EZ\Feature\Code\JTL.Tax1040.Core.Process\Utilities.cs,MaximumDOB,The following statement contains a magic number: return new DateTime (Constants.TAX_YEAR - 24' 01' 02);  
Missing Default,JTL.Tax1040.Core.Process,BusinessValidationRepository,C:\repos\vivekkumarm_Tax1040EZ\Feature\Code\JTL.Tax1040.Core.Process\BusinessValidationRepository.cs,IsValidCreditCardNumber,The following switch statement is missing a default case: switch (cardType) {  case CardType.AmericanExpress:  	validateRegex = Constants.REGEX_AMEX_CARD;  	break;  case CardType.Discover:  	validateRegex = Constants.REGEX_DISCOVER_CARD;  	break;  case CardType.MasterCard:  	validateRegex = Constants.REGEX_MASTER_CARD;  	break;  case CardType.Visa:  	validateRegex = Constants.REGEX_VISA_CARD;  	break;  }  
