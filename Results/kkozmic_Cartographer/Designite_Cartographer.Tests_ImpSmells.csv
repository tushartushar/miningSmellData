Implementation smell,Namespace,Class,File,Method,Description
Long Statement,CartographerTests,ComplexMappingTests,D:\research\architectureSmells\repos\kkozmic_Cartographer\src\Cartographer.Tests\ComplexMappingTests.cs,Can_use_call_site_arguments_in_mapping,The length of the statement  "			var timeZone = TimeZoneInfo.CreateCustomTimeZone("My time zone"' utcOffset' "x"' "x"' "x"' null' disableDaylightSavingTime: true); " is 130.
Long Statement,CartographerTests,CustomConstructorTests,D:\research\architectureSmells\repos\kkozmic_Cartographer\src\Cartographer.Tests\CustomConstructorTests.cs,Can_map_when_target_exists,The length of the statement  "			var dto = mapper.Convert(new Account { Number = "abc123"' Owner = new Person { Id = 42 } }' new AccountWith3CtorsDto()); " is 120.
Long Statement,CartographerTests,CustomConstructorTests,D:\research\architectureSmells\repos\kkozmic_Cartographer\src\Cartographer.Tests\CustomConstructorTests.cs,Can_map_with_callsite_parameter,The length of the statement  "			var dto = mapper.ConvertWithArguments<AccountWithAdditionalParameterDto>(new Account { Number = "abc123"' Owner = new Person { Id = 42 } }' new { language = "en-AU" }); " is 168.
Long Statement,CartographerTests,CustomConstructorTests,D:\research\architectureSmells\repos\kkozmic_Cartographer\src\Cartographer.Tests\CustomConstructorTests.cs,Can_map_with_callsite_parameter_via_custom_mapping_step,The length of the statement  "			var dto = mapper.ConvertWithArguments<AccountWithAdditionalParameterDto>(new Account { Number = "abc123"' Owner = new Person { Id = 42 } }' new { language = "en-AU" }); " is 168.
Long Statement,CartographerTests,OneToOneMappingTests,D:\research\architectureSmells\repos\kkozmic_Cartographer\src\Cartographer.Tests\OneToOneMappingTests.cs,Can_flatten_deep_path_with_nullable_and_non_nullable,The length of the statement  "			var dto = mapper.Convert<Account3Dto>(new Account2 { Number = "abc123"' Owner = new Person2 { Id = 42' Address = new Address2 { Zip = new ZipCode { Number = 4000 } } } }); " is 171.
Long Statement,CartographerTests,OneToOneMappingTests,D:\research\architectureSmells\repos\kkozmic_Cartographer\src\Cartographer.Tests\OneToOneMappingTests.cs,Can_map_to_type_with_non_accessible_setter,The length of the statement  "			var dto = mapper.Convert<Account7Dto>(new Account2 { Number = "abc123"' Owner = new Person2 { Id = 42' Address = new Address2 { Zip = new ZipCode { Number = 4000 } } } }); " is 171.
Long Statement,CartographerTests.MappingPatterns,MapMissingCtorParametersFromCallSite,D:\research\architectureSmells\repos\kkozmic_Cartographer\src\Cartographer.Tests\MappingPatterns\MapMissingCtorParametersFromCallSite.cs,Contribute,The length of the statement  "					                            (s' c) => Expression.Call(s.ContextExpression' MappingContextMeta.Argument.MakeGenericMethod(mappingStep.Key.ParameterType))); " is 126.
Long Statement,CartographerTests.MappingPatterns,TargetSuffixMappingPattern,D:\research\architectureSmells\repos\kkozmic_Cartographer\src\Cartographer.Tests\MappingPatterns\TargetSuffixMappingPattern.cs,Contribute,The length of the statement  "			foreach (var targetProperty in strategy.Target.GetProperties().Where(p => p.Name.EndsWith(targetPropertyNameSuffix' StringComparison.OrdinalIgnoreCase))) " is 153.
Virtual Method Call from Constructor,CartographerTests,AbstractMappingTests,D:\research\architectureSmells\repos\kkozmic_Cartographer\src\Cartographer.Tests\AbstractMappingTests.cs,AbstractMappingTests,The constructor "AbstractMappingTests" calls a virtual method "BuildMapper".
Virtual Method Call from Constructor,CartographerTests,MappingDescriptorTests,D:\research\architectureSmells\repos\kkozmic_Cartographer\src\Cartographer.Tests\MappingDescriptorTests.cs,MappingDescriptorTests,The constructor "MappingDescriptorTests" calls a virtual method "BuildMapper".
Virtual Method Call from Constructor,CartographerTests,OneToOneMappingTests,D:\research\architectureSmells\repos\kkozmic_Cartographer\src\Cartographer.Tests\OneToOneMappingTests.cs,OneToOneMappingTests,The constructor "OneToOneMappingTests" calls a virtual method "BuildMapper".
Magic Number,CartographerTests,CloningTests,D:\research\architectureSmells\repos\kkozmic_Cartographer\src\Cartographer.Tests\CloningTests.cs,Can_map_type_with_property_of_type_shared_between_left_and_right,The following statement contains a magic number: var source = new Order4  			{  				CustomerIdentifier = new Identifier(1' DateTime.Now)'  				OrderLines = new[]  				{  					new OrderLine { ItemId = 1' ItemName = "1" }'  					new OrderLine { ItemId = 2' ItemName = "2" }'  					new OrderLine { ItemId = 3' ItemName = "3" }'  				}  			};
Magic Number,CartographerTests,CloningTests,D:\research\architectureSmells\repos\kkozmic_Cartographer\src\Cartographer.Tests\CloningTests.cs,Can_map_type_with_property_of_type_shared_between_left_and_right,The following statement contains a magic number: var source = new Order4  			{  				CustomerIdentifier = new Identifier(1' DateTime.Now)'  				OrderLines = new[]  				{  					new OrderLine { ItemId = 1' ItemName = "1" }'  					new OrderLine { ItemId = 2' ItemName = "2" }'  					new OrderLine { ItemId = 3' ItemName = "3" }'  				}  			};
Magic Number,CartographerTests,CollectionMappingTests,D:\research\architectureSmells\repos\kkozmic_Cartographer\src\Cartographer.Tests\CollectionMappingTests.cs,Can_properly_map_collection_to_a_new_collection,The following statement contains a magic number: var dtos = mapper.Convert<OrderLineDto[]>(new[]  			{  				new OrderLine { ItemId = 1' ItemName = "1" }' new OrderLine { ItemId = 2' ItemName = "2" }'  			});
Magic Number,CartographerTests,CollectionMappingTests,D:\research\architectureSmells\repos\kkozmic_Cartographer\src\Cartographer.Tests\CollectionMappingTests.cs,Can_properly_map_collection_to_a_new_collection,The following statement contains a magic number: Assert.Equal(2' dtos.Length);
Magic Number,CartographerTests,ComplexMappingTests,D:\research\architectureSmells\repos\kkozmic_Cartographer\src\Cartographer.Tests\ComplexMappingTests.cs,Can_map_complex_property_to_new_object,The following statement contains a magic number: var dto = mapper.Convert<Order2Dto>(new Order2  			{  				Customer = new Customer { ItemId = 42' LastModified = lastModified }  			});
Magic Number,CartographerTests,ComplexMappingTests,D:\research\architectureSmells\repos\kkozmic_Cartographer\src\Cartographer.Tests\ComplexMappingTests.cs,Can_map_complex_property_to_new_object,The following statement contains a magic number: Assert.Equal(42' dto.CustomerIdentifier.Id);
Magic Number,CartographerTests,ComplexMappingTests,D:\research\architectureSmells\repos\kkozmic_Cartographer\src\Cartographer.Tests\ComplexMappingTests.cs,Can_use_call_site_arguments_in_mapping,The following statement contains a magic number: var dateTime = DateTime.UtcNow.Date.Add(TimeSpan.FromHours(15));
Magic Number,CartographerTests,ComplexMappingTests,D:\research\architectureSmells\repos\kkozmic_Cartographer\src\Cartographer.Tests\ComplexMappingTests.cs,Can_use_call_site_arguments_in_mapping,The following statement contains a magic number: var utcOffset = TimeSpan.FromHours(10);
Magic Number,CartographerTests,CustomConstructorTests,D:\research\architectureSmells\repos\kkozmic_Cartographer\src\Cartographer.Tests\CustomConstructorTests.cs,Can_map_using_custom_constructor,The following statement contains a magic number: var dto = mapper.Convert<AccountWithCtorDto>(new Account { Number = "abc123"' Owner = new Person { Id = 42 } });
Magic Number,CartographerTests,CustomConstructorTests,D:\research\architectureSmells\repos\kkozmic_Cartographer\src\Cartographer.Tests\CustomConstructorTests.cs,Can_map_using_custom_constructor,The following statement contains a magic number: Assert.Equal(42' dto.OwnerId);
Magic Number,CartographerTests,CustomConstructorTests,D:\research\architectureSmells\repos\kkozmic_Cartographer\src\Cartographer.Tests\CustomConstructorTests.cs,Can_map_when_harcoded_mapping,The following statement contains a magic number: var dto = mapper.Convert<AccountWith2CtorsDto>(new Account { Number = "abc123"' Owner = new Person { Id = 42 } });
Magic Number,CartographerTests,CustomConstructorTests,D:\research\architectureSmells\repos\kkozmic_Cartographer\src\Cartographer.Tests\CustomConstructorTests.cs,Can_map_when_harcoded_mapping,The following statement contains a magic number: Assert.Equal(42' dto.OwnerId);
Magic Number,CartographerTests,CustomConstructorTests,D:\research\architectureSmells\repos\kkozmic_Cartographer\src\Cartographer.Tests\CustomConstructorTests.cs,Can_map_when_target_exists,The following statement contains a magic number: var dto = mapper.Convert(new Account { Number = "abc123"' Owner = new Person { Id = 42 } }' new AccountWith3CtorsDto());
Magic Number,CartographerTests,CustomConstructorTests,D:\research\architectureSmells\repos\kkozmic_Cartographer\src\Cartographer.Tests\CustomConstructorTests.cs,Can_map_when_target_exists,The following statement contains a magic number: Assert.Equal(42' dto.OwnerId);
Magic Number,CartographerTests,CustomConstructorTests,D:\research\architectureSmells\repos\kkozmic_Cartographer\src\Cartographer.Tests\CustomConstructorTests.cs,Can_map_with_callsite_parameter,The following statement contains a magic number: var dto = mapper.ConvertWithArguments<AccountWithAdditionalParameterDto>(new Account { Number = "abc123"' Owner = new Person { Id = 42 } }' new { language = "en-AU" });
Magic Number,CartographerTests,CustomConstructorTests,D:\research\architectureSmells\repos\kkozmic_Cartographer\src\Cartographer.Tests\CustomConstructorTests.cs,Can_map_with_callsite_parameter,The following statement contains a magic number: Assert.Equal(42' dto.OwnerId);
Magic Number,CartographerTests,CustomConstructorTests,D:\research\architectureSmells\repos\kkozmic_Cartographer\src\Cartographer.Tests\CustomConstructorTests.cs,Can_map_with_callsite_parameter_via_custom_mapping_step,The following statement contains a magic number: var dto = mapper.ConvertWithArguments<AccountWithAdditionalParameterDto>(new Account { Number = "abc123"' Owner = new Person { Id = 42 } }' new { language = "en-AU" });
Magic Number,CartographerTests,CustomConstructorTests,D:\research\architectureSmells\repos\kkozmic_Cartographer\src\Cartographer.Tests\CustomConstructorTests.cs,Can_map_with_callsite_parameter_via_custom_mapping_step,The following statement contains a magic number: Assert.Equal(42' dto.OwnerId);
Magic Number,CartographerTests,MappingDescriptorTests,D:\research\architectureSmells\repos\kkozmic_Cartographer\src\Cartographer.Tests\MappingDescriptorTests.cs,Can_describe_flattened_mapping,The following statement contains a magic number: mapper.Convert<AccountDto>(new Account { Number = "abc123"' Owner = new Person { Id = 42 } });
Magic Number,CartographerTests,MappingToExistingObjectTests,D:\research\architectureSmells\repos\kkozmic_Cartographer\src\Cartographer.Tests\MappingToExistingObjectTests.cs,Can_map_to_existing_object,The following statement contains a magic number: mapper.Convert(new Account { Number = "abc123"' Owner = new Person { Id = 42 } }' dto);
Magic Number,CartographerTests,MappingToExistingObjectTests,D:\research\architectureSmells\repos\kkozmic_Cartographer\src\Cartographer.Tests\MappingToExistingObjectTests.cs,Can_map_to_existing_object_as_base,The following statement contains a magic number: mapper.Convert<IAccount5Dto>(new Account { Number = "abc123"' Owner = new Person { Id = 42 } }' dto);
Magic Number,CartographerTests,MappingToExistingObjectTests,D:\research\architectureSmells\repos\kkozmic_Cartographer\src\Cartographer.Tests\MappingToExistingObjectTests.cs,Mapping_to_new_and_existing_objects_can_coexist,The following statement contains a magic number: mapper.Convert(new Account { Number = "abc123"' Owner = new Person { Id = 42 } }' dto);
Magic Number,CartographerTests,MappingToExistingObjectTests,D:\research\architectureSmells\repos\kkozmic_Cartographer\src\Cartographer.Tests\MappingToExistingObjectTests.cs,Mapping_to_new_and_existing_objects_can_coexist,The following statement contains a magic number: dto = mapper.Convert<AccountDto>(new Account { Number = "abc123"' Owner = new Person { Id = 42 } });
Magic Number,CartographerTests,OneToOneMappingTests,D:\research\architectureSmells\repos\kkozmic_Cartographer\src\Cartographer.Tests\OneToOneMappingTests.cs,Can_flatten_Foo_Bar_to_FooBar,The following statement contains a magic number: var dto = mapper.Convert<AccountDto>(new Account { Number = "abc123"' Owner = new Person { Id = 42 } });
Magic Number,CartographerTests,OneToOneMappingTests,D:\research\architectureSmells\repos\kkozmic_Cartographer\src\Cartographer.Tests\OneToOneMappingTests.cs,Can_flatten_Foo_Bar_to_FooBar,The following statement contains a magic number: Assert.Equal(42' dto.OwnerId);
Magic Number,CartographerTests,OneToOneMappingTests,D:\research\architectureSmells\repos\kkozmic_Cartographer\src\Cartographer.Tests\OneToOneMappingTests.cs,Can_flatten_deep_path_with_nullable_and_non_nullable,The following statement contains a magic number: var dto = mapper.Convert<Account3Dto>(new Account2 { Number = "abc123"' Owner = new Person2 { Id = 42' Address = new Address2 { Zip = new ZipCode { Number = 4000 } } } });
Magic Number,CartographerTests,OneToOneMappingTests,D:\research\architectureSmells\repos\kkozmic_Cartographer\src\Cartographer.Tests\OneToOneMappingTests.cs,Can_flatten_deep_path_with_nullable_and_non_nullable,The following statement contains a magic number: var dto = mapper.Convert<Account3Dto>(new Account2 { Number = "abc123"' Owner = new Person2 { Id = 42' Address = new Address2 { Zip = new ZipCode { Number = 4000 } } } });
Magic Number,CartographerTests,OneToOneMappingTests,D:\research\architectureSmells\repos\kkozmic_Cartographer\src\Cartographer.Tests\OneToOneMappingTests.cs,Can_flatten_deep_path_with_nullable_and_non_nullable,The following statement contains a magic number: Assert.Equal(42' dto.OwnerId);
Magic Number,CartographerTests,OneToOneMappingTests,D:\research\architectureSmells\repos\kkozmic_Cartographer\src\Cartographer.Tests\OneToOneMappingTests.cs,Can_flatten_deep_path_with_nullable_and_non_nullable,The following statement contains a magic number: Assert.Equal(4000' dto.OwnerAddressZipNumber);
Magic Number,CartographerTests,OneToOneMappingTests,D:\research\architectureSmells\repos\kkozmic_Cartographer\src\Cartographer.Tests\OneToOneMappingTests.cs,Can_map_collections,The following statement contains a magic number: var dto = mapper.Convert<OrderDto>(new Order  			{  				OrderLines = new[]  				{  					new OrderLine  					{  						ItemId = 1'  						ItemName = "The Ring"  					}'  					new OrderLine  					{  						ItemId = 2'  						ItemName = "A dagger"  					}  				}  			});
Magic Number,CartographerTests,OneToOneMappingTests,D:\research\architectureSmells\repos\kkozmic_Cartographer\src\Cartographer.Tests\OneToOneMappingTests.cs,Can_map_collections,The following statement contains a magic number: Assert.Equal(2' dto.OrderLines.Length);
Magic Number,CartographerTests,OneToOneMappingTests,D:\research\architectureSmells\repos\kkozmic_Cartographer\src\Cartographer.Tests\OneToOneMappingTests.cs,Can_map_nullable_property,The following statement contains a magic number: var dto = mapper.Convert<Account4Dto>(new Account4 { Number = "123"' TotalAmount = 12.3m });
Magic Number,CartographerTests,OneToOneMappingTests,D:\research\architectureSmells\repos\kkozmic_Cartographer\src\Cartographer.Tests\OneToOneMappingTests.cs,Can_map_nullable_property,The following statement contains a magic number: Assert.Equal(12.3m' dto.TotalAmount);
Magic Number,CartographerTests,OneToOneMappingTests,D:\research\architectureSmells\repos\kkozmic_Cartographer\src\Cartographer.Tests\OneToOneMappingTests.cs,Can_map_to_type_with_non_accessible_setter,The following statement contains a magic number: var dto = mapper.Convert<Account7Dto>(new Account2 { Number = "abc123"' Owner = new Person2 { Id = 42' Address = new Address2 { Zip = new ZipCode { Number = 4000 } } } });
Magic Number,CartographerTests,OneToOneMappingTests,D:\research\architectureSmells\repos\kkozmic_Cartographer\src\Cartographer.Tests\OneToOneMappingTests.cs,Can_map_to_type_with_non_accessible_setter,The following statement contains a magic number: var dto = mapper.Convert<Account7Dto>(new Account2 { Number = "abc123"' Owner = new Person2 { Id = 42' Address = new Address2 { Zip = new ZipCode { Number = 4000 } } } });
Magic Number,CartographerTests,OneToOneMappingTests,D:\research\architectureSmells\repos\kkozmic_Cartographer\src\Cartographer.Tests\OneToOneMappingTests.cs,Can_map_to_type_with_non_accessible_setter,The following statement contains a magic number: Assert.Equal(42' dto.OwnerId);
Magic Number,CartographerTests,UsingCatalogsTests,D:\research\architectureSmells\repos\kkozmic_Cartographer\src\Cartographer.Tests\UsingCatalogsTests.cs,Can_register_mappings_via_catalog,The following statement contains a magic number: mapper.Convert<AccountDto>(new Account { Number = "number"' Owner = new Person { Id = 3 } });
Magic Number,CartographerTests.ContainerIntegration,WindsorMappingTests,D:\research\architectureSmells\repos\kkozmic_Cartographer\src\Cartographer.Tests\ContainerIntegration\WindsorMappingTests.cs,Can_use_conversion_pattern_registered_in_the_container,The following statement contains a magic number: var dto = mapper.Convert<Account6Dto>(new Account { Number = "abc123"' Owner = new Person { Id = 42 } });
Magic Number,CartographerTests.ConversionPatterns,NonGenericConversionPattern,D:\research\architectureSmells\repos\kkozmic_Cartographer\src\Cartographer.Tests\ConversionPatterns\NonGenericConversionPattern.cs,BuildConversionExpression,The following statement contains a magic number: return (d' m' c) => Decimal.Round(d' 2);
