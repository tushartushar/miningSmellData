Implementation smell,Namespace,Class,File,Method,Description
Long Method,Nancy.ReSharper.Plugin.CustomReferences,NancyMvcViewReference,C:\repos\NancyFx_Nancy.ReSharper\src\Nancy.ReSharper.Plugin\CustomReferences\NancyMvcViewReference.8.1.cs,GetReferenceSymbolTable,The method has 125 lines of code.
Complex Method,Nancy.ReSharper.Plugin.CustomReferences,NancyMvcViewReference,C:\repos\NancyFx_Nancy.ReSharper\src\Nancy.ReSharper.Plugin\CustomReferences\NancyMvcViewReference.8.1.cs,GetReferenceSymbolTable,Cyclomatic complexity of the method is 13
Long Parameter List,Nancy.ReSharper.Plugin.CustomReferences,NancyMvcViewReference,C:\repos\NancyFx_Nancy.ReSharper\src\Nancy.ReSharper.Plugin\CustomReferences\NancyMvcViewReference.8.1.cs,GetReferenceSymbolTable,The method has 7 parameters. Parameters: psiServices' area' controller' view' mvcKind' project' version
Long Parameter List,Nancy.ReSharper.Plugin.CustomReferences,NancyUtil,C:\repos\NancyFx_Nancy.ReSharper\src\Shared\Nancy.ReSharper.Plugin\CustomReferences\NancyUtil.cs,GetAvailableModules,The method has 5 parameters. Parameters: module' searchDomain' contex' includingIntermediateControllers' baseClass
Long Parameter List,Nancy.ReSharper.Plugin.CustomReferences.Razor,NancyRazorLayoutReference<TToken>,C:\repos\NancyFx_Nancy.ReSharper\src\Shared\Nancy.ReSharper.Plugin\CustomReferences\Razor\NancyRazorLayoutReference.cs,NancyRazorLayoutReference,The method has 7 parameters. Parameters: owner' qualifier' token' rangeWithin' expectedFileType' noCircular' allowEmptyName
Long Identifier,Nancy.ReSharper.Plugin.CustomReferences,NancyUtil,C:\repos\NancyFx_Nancy.ReSharper\src\Shared\Nancy.ReSharper.Plugin\CustomReferences\NancyUtil.cs,GetAvailableModules,The length of the parameter includingIntermediateControllers is 32.
Long Identifier,Nancy.ReSharper.Plugin.CustomReferences,NancyUtil,C:\repos\NancyFx_Nancy.ReSharper\src\Shared\Nancy.ReSharper.Plugin\CustomReferences\NancyUtil.cs,GetAvailableModules,The length of the parameter includingIntermediateControllers is 32.
Long Identifier,Nancy.ReSharper.Plugin.CustomReferences,NancyUtil,C:\repos\NancyFx_Nancy.ReSharper\src\Shared\Nancy.ReSharper.Plugin\CustomReferences\NancyUtil.cs,,The length of the parameter MvcKindAnonymousPropertyInitializers is 36.
Long Identifier,Nancy.ReSharper.Plugin.CustomReferences,NancyUtil,C:\repos\NancyFx_Nancy.ReSharper\src\Shared\Nancy.ReSharper.Plugin\CustomReferences\NancyUtil.cs,,The length of the parameter ourAspMvcActionNameSelectorAttribute is 36.
Long Identifier,Nancy.ReSharper.Plugin.CustomReferences.Razor,NancyRazorCodeBehindReferenceProvider<TAssignmentExpression;TLiteralExpression>,C:\repos\NancyFx_Nancy.ReSharper\src\Shared\Nancy.ReSharper.Plugin\CustomReferences\Razor\NancyRazorCodeBehindReferenceProvider.cs,,The length of the parameter RazorSectionExternalAttributeName is 33.
Long Identifier,Nancy.ReSharper.Plugin.CustomReferences.Razor,NancyRazorCodeBehindReferenceProvider<TAssignmentExpression;TLiteralExpression>,C:\repos\NancyFx_Nancy.ReSharper\src\Shared\Nancy.ReSharper.Plugin\CustomReferences\Razor\NancyRazorCodeBehindReferenceProvider.cs,,The length of the parameter RazorLayoutExternalAttributeName is 32.
Long Statement,Nancy.ReSharper.Plugin.CustomReferences,NancyMvcViewReference,C:\repos\NancyFx_Nancy.ReSharper\src\Nancy.ReSharper.Plugin\CustomReferences\NancyMvcViewReference.8.1.cs,GetReferenceSymbolTable,The length of the statement  "                    symbolTable2 = GetReferenceSymbolTable(psiServices' tuple.A' tuple.B' useReferenceName ? name : null' mvcKind' project' version); " is 129.
Long Statement,Nancy.ReSharper.Plugin.CustomReferences,NancyMvcViewReference,C:\repos\NancyFx_Nancy.ReSharper\src\Nancy.ReSharper.Plugin\CustomReferences\NancyMvcViewReference.8.1.cs,GetSearcheableProjects,The length of the statement  "                            from _ in psiModules.GetPsiModules(prj).SelectMany((IPsiModule _) => psiModules.GetModuleReferences(_' project.GetResolveContext())) " is 132.
Long Statement,Nancy.ReSharper.Plugin.CustomReferences,NancyCustomReferencesSettings,C:\repos\NancyFx_Nancy.ReSharper\src\Shared\Nancy.ReSharper.Plugin\CustomReferences\NancyCustomReferencesSettings.cs,IsProjectReferencingNancy,The length of the statement  "            if (!ReferencedAssembliesService.IsProjectReferencingAssemblyByName(projectElement' NancyAssemblyName' out referencedAssembly)) " is 127.
Long Statement,Nancy.ReSharper.Plugin.CustomReferences,NancyCustomReferencesSettings,C:\repos\NancyFx_Nancy.ReSharper\src\Shared\Nancy.ReSharper.Plugin\CustomReferences\NancyCustomReferencesSettings.cs,IsProjectReferencingNancyRazorViewEngine,The length of the statement  "            return ReferencedAssembliesService.IsProjectReferencingAssemblyByName(projectElement' NancyRazorAssemblyName' out referencedAssembly); " is 134.
Long Statement,Nancy.ReSharper.Plugin.CustomReferences,NancyCustomReferencesSettings,C:\repos\NancyFx_Nancy.ReSharper\src\Shared\Nancy.ReSharper.Plugin\CustomReferences\NancyCustomReferencesSettings.cs,IsProjectReferencingAssembly,The length of the statement  "            return ReferencedAssembliesService.IsProjectReferencingAssemblyByName(projectElement' assemblyNameInfo' out referencedAssembly); " is 128.
Long Statement,Nancy.ReSharper.Plugin.CustomReferences,NancyMvcReferenceProviderBase<TLiteral;TExpression;TMethod>,C:\repos\NancyFx_Nancy.ReSharper\src\Shared\Nancy.ReSharper.Plugin\CustomReferences\NancyMvcReferenceProviderBase.cs,GetReferences,The length of the statement  "            IParameter parameter = mvcLiteral.GetContainingNode<IArgument>().IfNotNull(d => d.MatchingParameter).IfNotNull(p => p.Element); " is 127.
Long Statement,Nancy.ReSharper.Plugin.CustomReferences,NancyMvcReferenceProviderBase<TLiteral;TExpression;TMethod>,C:\repos\NancyFx_Nancy.ReSharper\src\Shared\Nancy.ReSharper.Plugin\CustomReferences\NancyMvcReferenceProviderBase.cs,GetReferences,The length of the statement  "            var jt = parameter.GetMvcKinds().FirstOrDefault(_ => StringComparer.OrdinalIgnoreCase.Equals(_.B' anonymousPropertyName)); " is 122.
Long Statement,Nancy.ReSharper.Plugin.CustomReferences,NancyMvcReferenceProviderBase<TLiteral;TExpression;TMethod>,C:\repos\NancyFx_Nancy.ReSharper\src\Shared\Nancy.ReSharper.Plugin\CustomReferences\NancyMvcReferenceProviderBase.cs,GetReferences,The length of the statement  "                        .DefaultIfEmpty(JetTuple.Of((string)null' (string)null' MvcUtil.DeterminationKind.Explicit' (ICollection<IClass>)null)).ToList(); " is 129.
Long Statement,Nancy.ReSharper.Plugin.CustomReferences,NancyMvcReferenceProviderBase<TLiteral;TExpression;TMethod>,C:\repos\NancyFx_Nancy.ReSharper\src\Shared\Nancy.ReSharper.Plugin\CustomReferences\NancyMvcReferenceProviderBase.cs,GetImplicitReferences,The length of the statement  "            foreach (JetTuple<MvcKind' string' IAttributeInstance> jt in ((IEnumerable<IReference>)expression.GetFirstClassReferences()) " is 124.
Long Statement,Nancy.ReSharper.Plugin.CustomReferences,NancyUtil,C:\repos\NancyFx_Nancy.ReSharper\src\Shared\Nancy.ReSharper.Plugin\CustomReferences\NancyUtil.cs,GetModulesNotCached,The length of the statement  "                let availableModules = GetAvailableModules(psiModule' argumentsOwner.GetResolveContext()' includingIntermediateControllers: tuple.D) " is 132.
Long Statement,Nancy.ReSharper.Plugin.CustomReferences,NancyUtil,C:\repos\NancyFx_Nancy.ReSharper\src\Shared\Nancy.ReSharper.Plugin\CustomReferences\NancyUtil.cs,ProcessArgumentsExpression,The length of the statement  "            IDeclaredType stringType = TypeFactory.CreateTypeByCLRName(PredefinedType.STRING_FQN' argumentsOwner.GetPsiModule()' argumentsOwner.GetResolveContext()); " is 153.
Long Statement,Nancy.ReSharper.Plugin.CustomReferences.Razor,NancyRazorCodeBehindReferenceProvider<TAssignmentExpression;TLiteralExpression>,C:\repos\NancyFx_Nancy.ReSharper\src\Shared\Nancy.ReSharper.Plugin\CustomReferences\Razor\NancyRazorCodeBehindReferenceProvider.cs,GetReferences,The length of the statement  "            IExpression annotatedSectionExpression = razorServices.GetAnnotatedLiteralExpression(element' RazorSectionExternalAttributeName' assignmentChecker); " is 148.
Long Statement,Nancy.ReSharper.Plugin.CustomReferences.Razor,NancyRazorCodeBehindReferenceProvider<TAssignmentExpression;TLiteralExpression>,C:\repos\NancyFx_Nancy.ReSharper\src\Shared\Nancy.ReSharper.Plugin\CustomReferences\Razor\NancyRazorCodeBehindReferenceProvider.cs,GetReferences,The length of the statement  "            IExpression annotatedLiteralExpression = razorServices.GetAnnotatedLiteralExpression(element' RazorLayoutExternalAttributeName' assignmentChecker); " is 147.
Long Statement,Nancy.ReSharper.Plugin.CustomReferences.Razor,NancyRazorCSharpReferenceProviderFactory,C:\repos\NancyFx_Nancy.ReSharper\src\Shared\Nancy.ReSharper.Plugin\CustomReferences\Razor\NancyRazorCSharpReferenceProviderFactory.cs,IsNancyRazorPage,The length of the statement  "            return !string.IsNullOrWhiteSpace(pageBaseType) && pageBaseType.StartsWith("Nancy.ViewEngines.Razor.NancyRazorViewBase"); " is 121.
Long Statement,Nancy.ReSharper.Plugin.CustomReferences.Razor,NancyRazorLayoutReference<TToken>,C:\repos\NancyFx_Nancy.ReSharper\src\Shared\Nancy.ReSharper.Plugin\CustomReferences\Razor\NancyRazorLayoutReference.cs,LocalResolveWithoutCache,The length of the statement  "            List<IDeclaredElement> list = GetReferenceSymbolTable(true).GetAllSymbolInfos().Select(info => info.GetDeclaredElement()).Where(ResolveFilter).ToList(); " is 152.
Long Statement,Nancy.ReSharper.Plugin.Daemon,NancyDaemonStageProcess,C:\repos\NancyFx_Nancy.ReSharper\src\Shared\Nancy.ReSharper.Plugin\Daemon\NancyDaemonStageProcess.cs,CheckResolved,The length of the statement  "                return ErrorHighlightings.GetOrCreateValue(mvcResolveErrorType' () => _ => new AspConfigurableNotResolvedErrorHighlighting<IMvcReference>(_' null' new object[0]))(reference); " is 174.
Complex Conditional,Nancy.ReSharper.Plugin.CustomReferences,NancyMvcReferenceProviderBase<TLiteral;TExpression;TMethod>,C:\repos\NancyFx_Nancy.ReSharper\src\Shared\Nancy.ReSharper.Plugin\CustomReferences\NancyMvcReferenceProviderBase.cs,GetReferences,The conditional expression  "oldReferences != null && oldReferences.Any() && oldReferences.All(reference =>              {                  if (reference is IMvcReference && reference.GetTreeNode() == element)                      return ((IMvcReference)reference).IsInternalValid;                    return false;              })"  is complex.
Empty Catch Block,Nancy.ReSharper.Plugin.CustomReferences,NancyMvcViewReference,C:\repos\NancyFx_Nancy.ReSharper\src\Nancy.ReSharper.Plugin\CustomReferences\NancyMvcViewReference.8.1.cs,GetReferenceSymbolTable,The method has an empty catch block.
Empty Catch Block,Nancy.ReSharper.Plugin.CustomReferences,NancyUtil,C:\repos\NancyFx_Nancy.ReSharper\src\Shared\Nancy.ReSharper.Plugin\CustomReferences\NancyUtil.cs,GetControllerFolder,The method has an empty catch block.
Empty Catch Block,Nancy.ReSharper.Plugin.CustomReferences.Razor,NancyReferenceSymbolTableUtil,C:\repos\NancyFx_Nancy.ReSharper\src\Shared\Nancy.ReSharper.Plugin\CustomReferences\Razor\NancyReferenceSymbolTableUtil.cs,GetReferenceSymbolTableByLocation,The method has an empty catch block.
Magic Number,Nancy.ReSharper.Plugin.CustomReferences,NancyMvcViewReference,C:\repos\NancyFx_Nancy.ReSharper\src\Nancy.ReSharper.Plugin\CustomReferences\NancyMvcViewReference.8.1.cs,GetReferenceSymbolTable,The following statement contains a magic number: foreach (IProject current in searcheableProjects)              {                  ISymbolTable symbolTable2 = EmptySymbolTable.INSTANCE;                  string text = null;                  if (view != null)                  {                      string text2 = Path.IsPathRooted(view) ? ("~" + view) : view;                      text = HtmlPathReferenceUtil.ExpandRootName(text2.Replace('/'' '\\')' current);                      if (Path.IsPathRooted(text))                      {                          FileSystemPath fileSystemPath = FileSystemPath.Parse(text);                          if (!fileSystemPath.IsAbsolute)                          {                              fileSystemPath = WebPathReferenceUtil.GetRootPath(project).Combine(fileSystemPath);                          }                          symbolTable2 = symbolTable2.Merge(new DeclaredElementsSymbolTable<PathDeclaredElement>(psiServices' new[]                              {                                  new PathDeclaredElement(psiServices' fileSystemPath)                              }' 0' null));                      }                  }                  List<string> list = null;                  if (hasExtension)                  {                      list = component.GetDisplayModes(current).ToList();                  }                  string[] arg_152_0;                  if (!area.IsEmpty())                  {                      var array = new string[2];                      array[0] = area;                      arg_152_0 = array;                  }                  else                  {                      arg_152_0 = new[]                      {                          area                      };                  }                  string[] array2 = arg_152_0;                  for (int i = 0; i < array2.Length; i++)                  {                      string area2 = array2[i];                      foreach (                          string current2 in                              component.GetLocations(current' MvcUtil.GetViewLocationType(mvcKind' area2)' true))                      {                          using (                              IEnumerator<Pair<string' string>> enumerator3 =                                  ParseLocationFormatString(current2' mvcKind' controller' area2).GetEnumerator())                          {                              while (enumerator3.MoveNext())                              {                                  Pair<string' string> location = enumerator3.Current;                                  FileSystemPath fileSystemPath2 = FileSystemPath.TryParse(location.First);                                  FileSystemPath location2 = (location.First.LastIndexOf('\\') ==                                                              location.First.Length - 1)                                      ? fileSystemPath2                                      : fileSystemPath2.Directory;                                  var projectFolder = current.FindProjectItemByLocation(location2) as IProjectFolder;                                  if (projectFolder != null)                                  {                                      Func<IProjectItem' bool> extensionFilter =                                          (IProjectItem item) =>                                              item.Location.FullPath.EndsWith(location.Second'                                                  StringComparison.OrdinalIgnoreCase);                                      Func<IProjectItem' bool> preFilter = extensionFilter;                                      if (view != null)                                      {                                          string text3 = Path.IsPathRooted(text)                                              ? text                                              : (location.First + text + location.Second);                                          string extension = Path.GetExtension(text3);                                          var possibleNames = new HashSet<string>(StringComparer.OrdinalIgnoreCase)                                          {                                              text3                                          };                                          if (list != null)                                          {                                              foreach (string current3 in list)                                              {                                                  possibleNames.Add(Path.ChangeExtension(text3' current3 + extension));                                              }                                          }                                          preFilter = item => extensionFilter(item) && possibleNames.Contains(item.Location.FullPath);                                      }                                      symbolTable2 = symbolTable2.Merge(PathReferenceUtil.GetSymbolTableByPath(                                              projectFolder.Location' psiServices' null' null' false' true'                                              projectItem => GetViewName(projectItem.Location' location)' preFilter));                                  }                              }                          }                      }                  }                  symbolTable = symbolTable.Merge(symbolTable2.Filter(new[]                  {                      FileFilters.FileExists'                      new FileFilters.ItemInProjectFilter(current)                  }));              }
Magic Number,Nancy.ReSharper.Plugin.CustomReferences,PathInfoComparer,C:\repos\NancyFx_Nancy.ReSharper\src\Nancy.ReSharper.Plugin\CustomReferences\NancyMvcViewReference.8.1.cs,GetHashCode,The following statement contains a magic number: return text.ToUpperInvariant().GetHashCode() * 397 ^ ((project != null) ? project.GetHashCode() : 0);
