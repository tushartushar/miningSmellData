Implementation smell,Namespace,Class,File,Method,Description
Long Method,PrintAWBLabels,clsOneilOC3,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\clsOneilOC3.cs,PrintLabel,The method has 153 lines of code.
Long Method,PrintAWBLabels,cls_DetamaxPrint,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\cls_DetamaxPrint.cs,prepareSFCLabel,The method has 127 lines of code.
Complex Method,PrintAWBLabels,clsOneilOC3,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\clsOneilOC3.cs,PrintLabel,Cyclomatic complexity of the method is 10
Complex Method,PrintAWBLabels,Program,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\Program.cs,Main,Cyclomatic complexity of the method is 9
Long Parameter List,PrintAWBLabels,clsOneilOC3,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\clsOneilOC3.cs,PrintLabel,The method has 6 parameters.
Long Parameter List,PrintAWBLabels,clsOneilOC3,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\clsOneilOC3.cs,SendCommand,The method has 5 parameters.
Long Parameter List,PrintAWBLabels,cls_DetamaxPrint,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\cls_DetamaxPrint.cs,PrintLabel,The method has 7 parameters.
Long Parameter List,PrintAWBLabels,cls_DetamaxPrint,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\cls_DetamaxPrint.cs,prepareSFCLabel,The method has 6 parameters.
Long Parameter List,PrintAWBLabels,cls_DetamaxPrint,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\cls_DetamaxPrint.cs,prepareSecurityLabel,The method has 5 parameters.
Long Parameter List,PrintAWBLabels,cls_DetamaxPrint,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\cls_DetamaxPrint.cs,CallPrinterXray,The method has 5 parameters.
Long Parameter List,PrintAWBLabels,cls_DetamaxPrint,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\cls_DetamaxPrint.cs,PrintXrayLabel,The method has 5 parameters.
Long Statement,PrintAWBLabels,clsOneilOC3,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\clsOneilOC3.cs,PrintLabel,The length of the statement  "		string LabelData = mhead + name + lPhone + vLine1 + vLine2 + vLine3 + hLine2 + hLine3 + hLine4 + AXB + AXBValue1 + AXBValue2 + mdest + mdestValue + destpin + msource + msourceValue + mvia + mitm + mitemValue + mBaxb + mLaxb + mtDate + lFooter + mFooter; " is 253.
Long Statement,PrintAWBLabels,clsOneilOC3,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\clsOneilOC3.cs,PrintLabel,The length of the statement  "				//    result = MessageBox.Show("Please Check Printer Paper and Continue"'"Print"'MessageBoxButtons.YesNo'MessageBoxIcon.Question'MessageBoxDefaultButton.Button1 ); " is 163.
Long Statement,PrintAWBLabels,cls_DetamaxPrint,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\cls_DetamaxPrint.cs,CallPrinter,The length of the statement  "			//    this.prepareAirLabel(AXBNo' Source' SourceLoc' Destination' destLoc' destPin' ItemCount.ToString()' i.ToString()' UBI); " is 125.
Long Statement,PrintAWBLabels,cls_DetamaxPrint,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\cls_DetamaxPrint.cs,prepareSecurityLabel,The length of the statement  "		WriteToFile ("1911S0100250050P010P010" + Location.Trim ().ToUpper () + ": " + DateTime.Now.ToString ("dd-MM-yyyy HH:mm:ss")); " is 125.
Empty Catch Block,PrintAWBLabels,clsOneilOC3,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\clsOneilOC3.cs,Delay,The method has an empty catch block.
Empty Catch Block,PrintAWBLabels,clsOneilOC3,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\clsOneilOC3.cs,SendCommand,The method has an empty catch block.
Empty Catch Block,PrintAWBLabels,clsOneilOC3,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\clsOneilOC3.cs,SendCommand,The method has an empty catch block.
Empty Catch Block,PrintAWBLabels,clsOneilOC3,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\clsOneilOC3.cs,SendCommand,The method has an empty catch block.
Empty Catch Block,PrintAWBLabels,clsOneilOC3,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\clsOneilOC3.cs,SendCommand,The method has an empty catch block.
Empty Catch Block,PrintAWBLabels,clsOneilOC3,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\clsOneilOC3.cs,getValueFromConf,The method has an empty catch block.
Empty Catch Block,PrintAWBLabels,cls_DetamaxPrint,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\cls_DetamaxPrint.cs,prepareSFCLabel,The method has an empty catch block.
Empty Catch Block,PrintAWBLabels,cls_DetamaxPrint,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\cls_DetamaxPrint.cs,getValueFromConf,The method has an empty catch block.
Empty Catch Block,PrintAWBLabels,cls_DetamaxPrint,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\cls_DetamaxPrint.cs,Delay,The method has an empty catch block.
Empty Catch Block,PrintAWBLabels,cls_DetamaxPrint,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\cls_DetamaxPrint.cs,prepareSecurityLabel,The method has an empty catch block.
Magic Number,PrintAWBLabels,clsOneilOC3,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\clsOneilOC3.cs,PrintLabel,The following statement contains a magic number: try {  	//int option = 0;  	//awb.PadLeft(11' '0');  	string lblHeader = "";  	try {  		lblHeader = getValueFromConf ("lableHeading");  	}  	catch (Exception ex) {  		lblHeader = "GoAir CARGO";  	}  	string ClientPhone = "";  	try {  		ClientPhone = getValueFromConf ("clientContact");  	}  	catch (Exception ex) {  		ClientPhone = "";  	}  	string mhead = "{PRINT:";  	//string name = "@0'50:MF107' HM2' VM2|Jet Airways CARGO|";  	string name = "@0'50:MF107' HM2' VM2|" + lblHeader.Trim () + "|";  	//string lPhone = "@40'170:MF226' HM1' VM1|Ph: 1800222111/09223222111|";  	string lPhone = "@40'170:MF226' HM1' VM1|" + ClientPhone.Trim () + "|";  	string AXB = "@80'50:MF107|AWBNo|";  	string AXBValue1 = "";  	string AXBValue2 = "";  	if (awb.Trim ().Length == 10) {  		AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 6) + "|";  		AXBValue2 = "@115'180:MF226' HM3' VMULT3|" + awb.Substring (6' 4) + "|";  	}  	else if (awb.Trim ().Length == 11) {  		if (awb.Trim ().ToUpper ().Substring (0' 3) == "SAC") {  			AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 3) + "|";  			AXBValue1 += "@135'110:MF226' HM2' VMULT2|" + awb.Substring (3' 4) + "|";  			AXBValue2 = "@115'185:MF226' HM3' VMULT3|" + awb.Substring (7' 4) + "|";  		}  		else {  			AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 7) + "|";  			AXBValue2 = "@115'180:MF226' HM3' VMULT3|" + awb.Substring (7' 4) + "|";  		}  	}  	//string mtype = "@35'140:MF204' HM3' V6|" + type + "|";  	string mitm = "@80'310:MF107|No Of PCS|";  	string mitemValue = "@135'310:MF226' HM3' VMULT2|" + no.ToString () + "/" + item + " |";  	string mdest = "@220'310:MF107|DEST|";  	//string mdestValue = "@255'310:MF226' HM8' VMULT3|" + dest + "|";  	string mdestValue = "@255'310:MF107' HM4' VMULT3|" + dest + "|";  	string destpin = "@300'310:MF107| |";  	string msource = "@220'50:MF107|ORIGIN|";  	//string msourceValue = "@255'50:MF226' HM8' VMULT3|" + source + "|";  	string msourceValue = "@255'50:MF107' HM4' VMULT3|" + source + "|";  	string mvia = "@222'350:MF107' HM3' VM2|" + via + "|";  	//string mwt = "@275'350:MF075' HM3' VM2|WT- " + weight + "|";  	//string mBaxb = "@335'50:BC39N'HIGH 25'WIDE 4|" + axb + "|";  	string mBaxb = "@338'100:BC39N'HIGH 15'WIDE 2|" + awb.Trim () + no.ToString ().Trim ().PadLeft (4' '0') + "|";  	string mLaxb = "@420'150:MF226' HM3' VMULT2|" + awb.Trim () + "|";  	string tDate = DateTime.Now.ToString ("dd-MM-yyyy HH:mm:ss");  	string mtDate = "@470'60:MF107|Date:" + tDate + "|";  	string lFooter = "@508'150:MF226|Powered By QID Ph: 020-40039501|";  	//string mtDate = "@528'60:MF107|Date:" + tDate + "|";  	//string hLine1 = "@0'40:HLINE' length 520' thick 5|";  //  	string hLine2 = "@60'40:HLINE' length 520' thick 5|";  	//  	string vLine1 = "@60'40:VLINE' length 270' thick 5|";  	//  	string vLine3 = "@60'300:VLINE' length 270' thick 5|";  	//  	string vLine2 = "@60'555:VLINE' length 270' thick 5|";  	//  	string hLine4 = "@325'40:HLINE' length 520' thick 5|";  	//  	string hLine3 = "@200'40:HLINE' length 520' thick 5|";  	//  	string mFooter = "}";  	//string changeMode = "{LP}";  	string back = "{BACK:15}";  	string ahead = "{AHEAD:114}";  	byte[] mByte = new byte[1];  	mByte [0] = 14;  	byte[] mmByte = new byte[3];  	mmByte [0] = 27;  	mmByte [1] = 67;  	mmByte [2] = 14;  	byte[] query = new byte[6];  	query [0] = 27;  	query [1] = 123;  	query [2] = 83;  	query [3] = 84;  	query [4] = 63;  	query [5] = 125;  	string config = Convert.ToChar (27) + "{CL!M:1}";  	string LabelData = mhead + name + lPhone + vLine1 + vLine2 + vLine3 + hLine2 + hLine3 + hLine4 + AXB + AXBValue1 + AXBValue2 + mdest + mdestValue + destpin + msource + msourceValue + mvia + mitm + mitemValue + mBaxb + mLaxb + mtDate + lFooter + mFooter;  	if (openport ())//open serial port  	 {  		try {  			//srPort.WriteLine(config);  			srPort.DiscardInBuffer ();  			srPort.DiscardOutBuffer ();  			srPort.Write (query' 0' 6);  			//send query to printer  			Delay (5000);  			//char[] buffer = new char[srPort.BytesToRead];  			//srPort.Read(buffer' 0' srPort.BytesToRead);  			//if(buffer[18] != 'P')  			//{  			//    DialogResult result = new DialogResult();  			//    result = MessageBox.Show("Please Check Printer Paper and Continue"'"Print"'MessageBoxButtons.YesNo'MessageBoxIcon.Question'MessageBoxDefaultButton.Button1 );  			//    if (result == DialogResult.Yes)  			//    {  			//        return 2;  			//    }  			//    else  			//    {  			//        return 0;  			//    }  			//}  			//  srPort.WriteTimeout = 200;  			int btw = srPort.BytesToWrite;  			//srPort.Write(mmByte' 0' 3); //set form size to 14  			srPort.Write (setEasyMode);  			//set printer to easy mode  			//srPort.Write(back);  			srPort.Write (LabelData);  			//print label  			srPort.Write (ahead);  			Delay (1000);  			while (srPort.BytesToWrite > 0) {  				Application.DoEvents ();  			}  			//srPort.Write(changeMode);   //set printer to line mode by using {LP}  			//srPort.Write(mByte' 0' 1);  //set form feed  			srPort.Close ();  			//close the serial port  		}  		catch (Exception ex) {  			srPort.Close ();  			//close the serial port  			return (0);  		}  		finally {  			srPort.Close ();  			//close the serial port  		}  		return (1);  	}  	else {  		return (0);  	}  }  catch (Exception) {  	return (0);  }  
Magic Number,PrintAWBLabels,clsOneilOC3,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\clsOneilOC3.cs,PrintLabel,The following statement contains a magic number: try {  	//int option = 0;  	//awb.PadLeft(11' '0');  	string lblHeader = "";  	try {  		lblHeader = getValueFromConf ("lableHeading");  	}  	catch (Exception ex) {  		lblHeader = "GoAir CARGO";  	}  	string ClientPhone = "";  	try {  		ClientPhone = getValueFromConf ("clientContact");  	}  	catch (Exception ex) {  		ClientPhone = "";  	}  	string mhead = "{PRINT:";  	//string name = "@0'50:MF107' HM2' VM2|Jet Airways CARGO|";  	string name = "@0'50:MF107' HM2' VM2|" + lblHeader.Trim () + "|";  	//string lPhone = "@40'170:MF226' HM1' VM1|Ph: 1800222111/09223222111|";  	string lPhone = "@40'170:MF226' HM1' VM1|" + ClientPhone.Trim () + "|";  	string AXB = "@80'50:MF107|AWBNo|";  	string AXBValue1 = "";  	string AXBValue2 = "";  	if (awb.Trim ().Length == 10) {  		AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 6) + "|";  		AXBValue2 = "@115'180:MF226' HM3' VMULT3|" + awb.Substring (6' 4) + "|";  	}  	else if (awb.Trim ().Length == 11) {  		if (awb.Trim ().ToUpper ().Substring (0' 3) == "SAC") {  			AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 3) + "|";  			AXBValue1 += "@135'110:MF226' HM2' VMULT2|" + awb.Substring (3' 4) + "|";  			AXBValue2 = "@115'185:MF226' HM3' VMULT3|" + awb.Substring (7' 4) + "|";  		}  		else {  			AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 7) + "|";  			AXBValue2 = "@115'180:MF226' HM3' VMULT3|" + awb.Substring (7' 4) + "|";  		}  	}  	//string mtype = "@35'140:MF204' HM3' V6|" + type + "|";  	string mitm = "@80'310:MF107|No Of PCS|";  	string mitemValue = "@135'310:MF226' HM3' VMULT2|" + no.ToString () + "/" + item + " |";  	string mdest = "@220'310:MF107|DEST|";  	//string mdestValue = "@255'310:MF226' HM8' VMULT3|" + dest + "|";  	string mdestValue = "@255'310:MF107' HM4' VMULT3|" + dest + "|";  	string destpin = "@300'310:MF107| |";  	string msource = "@220'50:MF107|ORIGIN|";  	//string msourceValue = "@255'50:MF226' HM8' VMULT3|" + source + "|";  	string msourceValue = "@255'50:MF107' HM4' VMULT3|" + source + "|";  	string mvia = "@222'350:MF107' HM3' VM2|" + via + "|";  	//string mwt = "@275'350:MF075' HM3' VM2|WT- " + weight + "|";  	//string mBaxb = "@335'50:BC39N'HIGH 25'WIDE 4|" + axb + "|";  	string mBaxb = "@338'100:BC39N'HIGH 15'WIDE 2|" + awb.Trim () + no.ToString ().Trim ().PadLeft (4' '0') + "|";  	string mLaxb = "@420'150:MF226' HM3' VMULT2|" + awb.Trim () + "|";  	string tDate = DateTime.Now.ToString ("dd-MM-yyyy HH:mm:ss");  	string mtDate = "@470'60:MF107|Date:" + tDate + "|";  	string lFooter = "@508'150:MF226|Powered By QID Ph: 020-40039501|";  	//string mtDate = "@528'60:MF107|Date:" + tDate + "|";  	//string hLine1 = "@0'40:HLINE' length 520' thick 5|";  //  	string hLine2 = "@60'40:HLINE' length 520' thick 5|";  	//  	string vLine1 = "@60'40:VLINE' length 270' thick 5|";  	//  	string vLine3 = "@60'300:VLINE' length 270' thick 5|";  	//  	string vLine2 = "@60'555:VLINE' length 270' thick 5|";  	//  	string hLine4 = "@325'40:HLINE' length 520' thick 5|";  	//  	string hLine3 = "@200'40:HLINE' length 520' thick 5|";  	//  	string mFooter = "}";  	//string changeMode = "{LP}";  	string back = "{BACK:15}";  	string ahead = "{AHEAD:114}";  	byte[] mByte = new byte[1];  	mByte [0] = 14;  	byte[] mmByte = new byte[3];  	mmByte [0] = 27;  	mmByte [1] = 67;  	mmByte [2] = 14;  	byte[] query = new byte[6];  	query [0] = 27;  	query [1] = 123;  	query [2] = 83;  	query [3] = 84;  	query [4] = 63;  	query [5] = 125;  	string config = Convert.ToChar (27) + "{CL!M:1}";  	string LabelData = mhead + name + lPhone + vLine1 + vLine2 + vLine3 + hLine2 + hLine3 + hLine4 + AXB + AXBValue1 + AXBValue2 + mdest + mdestValue + destpin + msource + msourceValue + mvia + mitm + mitemValue + mBaxb + mLaxb + mtDate + lFooter + mFooter;  	if (openport ())//open serial port  	 {  		try {  			//srPort.WriteLine(config);  			srPort.DiscardInBuffer ();  			srPort.DiscardOutBuffer ();  			srPort.Write (query' 0' 6);  			//send query to printer  			Delay (5000);  			//char[] buffer = new char[srPort.BytesToRead];  			//srPort.Read(buffer' 0' srPort.BytesToRead);  			//if(buffer[18] != 'P')  			//{  			//    DialogResult result = new DialogResult();  			//    result = MessageBox.Show("Please Check Printer Paper and Continue"'"Print"'MessageBoxButtons.YesNo'MessageBoxIcon.Question'MessageBoxDefaultButton.Button1 );  			//    if (result == DialogResult.Yes)  			//    {  			//        return 2;  			//    }  			//    else  			//    {  			//        return 0;  			//    }  			//}  			//  srPort.WriteTimeout = 200;  			int btw = srPort.BytesToWrite;  			//srPort.Write(mmByte' 0' 3); //set form size to 14  			srPort.Write (setEasyMode);  			//set printer to easy mode  			//srPort.Write(back);  			srPort.Write (LabelData);  			//print label  			srPort.Write (ahead);  			Delay (1000);  			while (srPort.BytesToWrite > 0) {  				Application.DoEvents ();  			}  			//srPort.Write(changeMode);   //set printer to line mode by using {LP}  			//srPort.Write(mByte' 0' 1);  //set form feed  			srPort.Close ();  			//close the serial port  		}  		catch (Exception ex) {  			srPort.Close ();  			//close the serial port  			return (0);  		}  		finally {  			srPort.Close ();  			//close the serial port  		}  		return (1);  	}  	else {  		return (0);  	}  }  catch (Exception) {  	return (0);  }  
Magic Number,PrintAWBLabels,clsOneilOC3,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\clsOneilOC3.cs,PrintLabel,The following statement contains a magic number: try {  	//int option = 0;  	//awb.PadLeft(11' '0');  	string lblHeader = "";  	try {  		lblHeader = getValueFromConf ("lableHeading");  	}  	catch (Exception ex) {  		lblHeader = "GoAir CARGO";  	}  	string ClientPhone = "";  	try {  		ClientPhone = getValueFromConf ("clientContact");  	}  	catch (Exception ex) {  		ClientPhone = "";  	}  	string mhead = "{PRINT:";  	//string name = "@0'50:MF107' HM2' VM2|Jet Airways CARGO|";  	string name = "@0'50:MF107' HM2' VM2|" + lblHeader.Trim () + "|";  	//string lPhone = "@40'170:MF226' HM1' VM1|Ph: 1800222111/09223222111|";  	string lPhone = "@40'170:MF226' HM1' VM1|" + ClientPhone.Trim () + "|";  	string AXB = "@80'50:MF107|AWBNo|";  	string AXBValue1 = "";  	string AXBValue2 = "";  	if (awb.Trim ().Length == 10) {  		AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 6) + "|";  		AXBValue2 = "@115'180:MF226' HM3' VMULT3|" + awb.Substring (6' 4) + "|";  	}  	else if (awb.Trim ().Length == 11) {  		if (awb.Trim ().ToUpper ().Substring (0' 3) == "SAC") {  			AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 3) + "|";  			AXBValue1 += "@135'110:MF226' HM2' VMULT2|" + awb.Substring (3' 4) + "|";  			AXBValue2 = "@115'185:MF226' HM3' VMULT3|" + awb.Substring (7' 4) + "|";  		}  		else {  			AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 7) + "|";  			AXBValue2 = "@115'180:MF226' HM3' VMULT3|" + awb.Substring (7' 4) + "|";  		}  	}  	//string mtype = "@35'140:MF204' HM3' V6|" + type + "|";  	string mitm = "@80'310:MF107|No Of PCS|";  	string mitemValue = "@135'310:MF226' HM3' VMULT2|" + no.ToString () + "/" + item + " |";  	string mdest = "@220'310:MF107|DEST|";  	//string mdestValue = "@255'310:MF226' HM8' VMULT3|" + dest + "|";  	string mdestValue = "@255'310:MF107' HM4' VMULT3|" + dest + "|";  	string destpin = "@300'310:MF107| |";  	string msource = "@220'50:MF107|ORIGIN|";  	//string msourceValue = "@255'50:MF226' HM8' VMULT3|" + source + "|";  	string msourceValue = "@255'50:MF107' HM4' VMULT3|" + source + "|";  	string mvia = "@222'350:MF107' HM3' VM2|" + via + "|";  	//string mwt = "@275'350:MF075' HM3' VM2|WT- " + weight + "|";  	//string mBaxb = "@335'50:BC39N'HIGH 25'WIDE 4|" + axb + "|";  	string mBaxb = "@338'100:BC39N'HIGH 15'WIDE 2|" + awb.Trim () + no.ToString ().Trim ().PadLeft (4' '0') + "|";  	string mLaxb = "@420'150:MF226' HM3' VMULT2|" + awb.Trim () + "|";  	string tDate = DateTime.Now.ToString ("dd-MM-yyyy HH:mm:ss");  	string mtDate = "@470'60:MF107|Date:" + tDate + "|";  	string lFooter = "@508'150:MF226|Powered By QID Ph: 020-40039501|";  	//string mtDate = "@528'60:MF107|Date:" + tDate + "|";  	//string hLine1 = "@0'40:HLINE' length 520' thick 5|";  //  	string hLine2 = "@60'40:HLINE' length 520' thick 5|";  	//  	string vLine1 = "@60'40:VLINE' length 270' thick 5|";  	//  	string vLine3 = "@60'300:VLINE' length 270' thick 5|";  	//  	string vLine2 = "@60'555:VLINE' length 270' thick 5|";  	//  	string hLine4 = "@325'40:HLINE' length 520' thick 5|";  	//  	string hLine3 = "@200'40:HLINE' length 520' thick 5|";  	//  	string mFooter = "}";  	//string changeMode = "{LP}";  	string back = "{BACK:15}";  	string ahead = "{AHEAD:114}";  	byte[] mByte = new byte[1];  	mByte [0] = 14;  	byte[] mmByte = new byte[3];  	mmByte [0] = 27;  	mmByte [1] = 67;  	mmByte [2] = 14;  	byte[] query = new byte[6];  	query [0] = 27;  	query [1] = 123;  	query [2] = 83;  	query [3] = 84;  	query [4] = 63;  	query [5] = 125;  	string config = Convert.ToChar (27) + "{CL!M:1}";  	string LabelData = mhead + name + lPhone + vLine1 + vLine2 + vLine3 + hLine2 + hLine3 + hLine4 + AXB + AXBValue1 + AXBValue2 + mdest + mdestValue + destpin + msource + msourceValue + mvia + mitm + mitemValue + mBaxb + mLaxb + mtDate + lFooter + mFooter;  	if (openport ())//open serial port  	 {  		try {  			//srPort.WriteLine(config);  			srPort.DiscardInBuffer ();  			srPort.DiscardOutBuffer ();  			srPort.Write (query' 0' 6);  			//send query to printer  			Delay (5000);  			//char[] buffer = new char[srPort.BytesToRead];  			//srPort.Read(buffer' 0' srPort.BytesToRead);  			//if(buffer[18] != 'P')  			//{  			//    DialogResult result = new DialogResult();  			//    result = MessageBox.Show("Please Check Printer Paper and Continue"'"Print"'MessageBoxButtons.YesNo'MessageBoxIcon.Question'MessageBoxDefaultButton.Button1 );  			//    if (result == DialogResult.Yes)  			//    {  			//        return 2;  			//    }  			//    else  			//    {  			//        return 0;  			//    }  			//}  			//  srPort.WriteTimeout = 200;  			int btw = srPort.BytesToWrite;  			//srPort.Write(mmByte' 0' 3); //set form size to 14  			srPort.Write (setEasyMode);  			//set printer to easy mode  			//srPort.Write(back);  			srPort.Write (LabelData);  			//print label  			srPort.Write (ahead);  			Delay (1000);  			while (srPort.BytesToWrite > 0) {  				Application.DoEvents ();  			}  			//srPort.Write(changeMode);   //set printer to line mode by using {LP}  			//srPort.Write(mByte' 0' 1);  //set form feed  			srPort.Close ();  			//close the serial port  		}  		catch (Exception ex) {  			srPort.Close ();  			//close the serial port  			return (0);  		}  		finally {  			srPort.Close ();  			//close the serial port  		}  		return (1);  	}  	else {  		return (0);  	}  }  catch (Exception) {  	return (0);  }  
Magic Number,PrintAWBLabels,clsOneilOC3,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\clsOneilOC3.cs,PrintLabel,The following statement contains a magic number: try {  	//int option = 0;  	//awb.PadLeft(11' '0');  	string lblHeader = "";  	try {  		lblHeader = getValueFromConf ("lableHeading");  	}  	catch (Exception ex) {  		lblHeader = "GoAir CARGO";  	}  	string ClientPhone = "";  	try {  		ClientPhone = getValueFromConf ("clientContact");  	}  	catch (Exception ex) {  		ClientPhone = "";  	}  	string mhead = "{PRINT:";  	//string name = "@0'50:MF107' HM2' VM2|Jet Airways CARGO|";  	string name = "@0'50:MF107' HM2' VM2|" + lblHeader.Trim () + "|";  	//string lPhone = "@40'170:MF226' HM1' VM1|Ph: 1800222111/09223222111|";  	string lPhone = "@40'170:MF226' HM1' VM1|" + ClientPhone.Trim () + "|";  	string AXB = "@80'50:MF107|AWBNo|";  	string AXBValue1 = "";  	string AXBValue2 = "";  	if (awb.Trim ().Length == 10) {  		AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 6) + "|";  		AXBValue2 = "@115'180:MF226' HM3' VMULT3|" + awb.Substring (6' 4) + "|";  	}  	else if (awb.Trim ().Length == 11) {  		if (awb.Trim ().ToUpper ().Substring (0' 3) == "SAC") {  			AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 3) + "|";  			AXBValue1 += "@135'110:MF226' HM2' VMULT2|" + awb.Substring (3' 4) + "|";  			AXBValue2 = "@115'185:MF226' HM3' VMULT3|" + awb.Substring (7' 4) + "|";  		}  		else {  			AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 7) + "|";  			AXBValue2 = "@115'180:MF226' HM3' VMULT3|" + awb.Substring (7' 4) + "|";  		}  	}  	//string mtype = "@35'140:MF204' HM3' V6|" + type + "|";  	string mitm = "@80'310:MF107|No Of PCS|";  	string mitemValue = "@135'310:MF226' HM3' VMULT2|" + no.ToString () + "/" + item + " |";  	string mdest = "@220'310:MF107|DEST|";  	//string mdestValue = "@255'310:MF226' HM8' VMULT3|" + dest + "|";  	string mdestValue = "@255'310:MF107' HM4' VMULT3|" + dest + "|";  	string destpin = "@300'310:MF107| |";  	string msource = "@220'50:MF107|ORIGIN|";  	//string msourceValue = "@255'50:MF226' HM8' VMULT3|" + source + "|";  	string msourceValue = "@255'50:MF107' HM4' VMULT3|" + source + "|";  	string mvia = "@222'350:MF107' HM3' VM2|" + via + "|";  	//string mwt = "@275'350:MF075' HM3' VM2|WT- " + weight + "|";  	//string mBaxb = "@335'50:BC39N'HIGH 25'WIDE 4|" + axb + "|";  	string mBaxb = "@338'100:BC39N'HIGH 15'WIDE 2|" + awb.Trim () + no.ToString ().Trim ().PadLeft (4' '0') + "|";  	string mLaxb = "@420'150:MF226' HM3' VMULT2|" + awb.Trim () + "|";  	string tDate = DateTime.Now.ToString ("dd-MM-yyyy HH:mm:ss");  	string mtDate = "@470'60:MF107|Date:" + tDate + "|";  	string lFooter = "@508'150:MF226|Powered By QID Ph: 020-40039501|";  	//string mtDate = "@528'60:MF107|Date:" + tDate + "|";  	//string hLine1 = "@0'40:HLINE' length 520' thick 5|";  //  	string hLine2 = "@60'40:HLINE' length 520' thick 5|";  	//  	string vLine1 = "@60'40:VLINE' length 270' thick 5|";  	//  	string vLine3 = "@60'300:VLINE' length 270' thick 5|";  	//  	string vLine2 = "@60'555:VLINE' length 270' thick 5|";  	//  	string hLine4 = "@325'40:HLINE' length 520' thick 5|";  	//  	string hLine3 = "@200'40:HLINE' length 520' thick 5|";  	//  	string mFooter = "}";  	//string changeMode = "{LP}";  	string back = "{BACK:15}";  	string ahead = "{AHEAD:114}";  	byte[] mByte = new byte[1];  	mByte [0] = 14;  	byte[] mmByte = new byte[3];  	mmByte [0] = 27;  	mmByte [1] = 67;  	mmByte [2] = 14;  	byte[] query = new byte[6];  	query [0] = 27;  	query [1] = 123;  	query [2] = 83;  	query [3] = 84;  	query [4] = 63;  	query [5] = 125;  	string config = Convert.ToChar (27) + "{CL!M:1}";  	string LabelData = mhead + name + lPhone + vLine1 + vLine2 + vLine3 + hLine2 + hLine3 + hLine4 + AXB + AXBValue1 + AXBValue2 + mdest + mdestValue + destpin + msource + msourceValue + mvia + mitm + mitemValue + mBaxb + mLaxb + mtDate + lFooter + mFooter;  	if (openport ())//open serial port  	 {  		try {  			//srPort.WriteLine(config);  			srPort.DiscardInBuffer ();  			srPort.DiscardOutBuffer ();  			srPort.Write (query' 0' 6);  			//send query to printer  			Delay (5000);  			//char[] buffer = new char[srPort.BytesToRead];  			//srPort.Read(buffer' 0' srPort.BytesToRead);  			//if(buffer[18] != 'P')  			//{  			//    DialogResult result = new DialogResult();  			//    result = MessageBox.Show("Please Check Printer Paper and Continue"'"Print"'MessageBoxButtons.YesNo'MessageBoxIcon.Question'MessageBoxDefaultButton.Button1 );  			//    if (result == DialogResult.Yes)  			//    {  			//        return 2;  			//    }  			//    else  			//    {  			//        return 0;  			//    }  			//}  			//  srPort.WriteTimeout = 200;  			int btw = srPort.BytesToWrite;  			//srPort.Write(mmByte' 0' 3); //set form size to 14  			srPort.Write (setEasyMode);  			//set printer to easy mode  			//srPort.Write(back);  			srPort.Write (LabelData);  			//print label  			srPort.Write (ahead);  			Delay (1000);  			while (srPort.BytesToWrite > 0) {  				Application.DoEvents ();  			}  			//srPort.Write(changeMode);   //set printer to line mode by using {LP}  			//srPort.Write(mByte' 0' 1);  //set form feed  			srPort.Close ();  			//close the serial port  		}  		catch (Exception ex) {  			srPort.Close ();  			//close the serial port  			return (0);  		}  		finally {  			srPort.Close ();  			//close the serial port  		}  		return (1);  	}  	else {  		return (0);  	}  }  catch (Exception) {  	return (0);  }  
Magic Number,PrintAWBLabels,clsOneilOC3,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\clsOneilOC3.cs,PrintLabel,The following statement contains a magic number: try {  	//int option = 0;  	//awb.PadLeft(11' '0');  	string lblHeader = "";  	try {  		lblHeader = getValueFromConf ("lableHeading");  	}  	catch (Exception ex) {  		lblHeader = "GoAir CARGO";  	}  	string ClientPhone = "";  	try {  		ClientPhone = getValueFromConf ("clientContact");  	}  	catch (Exception ex) {  		ClientPhone = "";  	}  	string mhead = "{PRINT:";  	//string name = "@0'50:MF107' HM2' VM2|Jet Airways CARGO|";  	string name = "@0'50:MF107' HM2' VM2|" + lblHeader.Trim () + "|";  	//string lPhone = "@40'170:MF226' HM1' VM1|Ph: 1800222111/09223222111|";  	string lPhone = "@40'170:MF226' HM1' VM1|" + ClientPhone.Trim () + "|";  	string AXB = "@80'50:MF107|AWBNo|";  	string AXBValue1 = "";  	string AXBValue2 = "";  	if (awb.Trim ().Length == 10) {  		AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 6) + "|";  		AXBValue2 = "@115'180:MF226' HM3' VMULT3|" + awb.Substring (6' 4) + "|";  	}  	else if (awb.Trim ().Length == 11) {  		if (awb.Trim ().ToUpper ().Substring (0' 3) == "SAC") {  			AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 3) + "|";  			AXBValue1 += "@135'110:MF226' HM2' VMULT2|" + awb.Substring (3' 4) + "|";  			AXBValue2 = "@115'185:MF226' HM3' VMULT3|" + awb.Substring (7' 4) + "|";  		}  		else {  			AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 7) + "|";  			AXBValue2 = "@115'180:MF226' HM3' VMULT3|" + awb.Substring (7' 4) + "|";  		}  	}  	//string mtype = "@35'140:MF204' HM3' V6|" + type + "|";  	string mitm = "@80'310:MF107|No Of PCS|";  	string mitemValue = "@135'310:MF226' HM3' VMULT2|" + no.ToString () + "/" + item + " |";  	string mdest = "@220'310:MF107|DEST|";  	//string mdestValue = "@255'310:MF226' HM8' VMULT3|" + dest + "|";  	string mdestValue = "@255'310:MF107' HM4' VMULT3|" + dest + "|";  	string destpin = "@300'310:MF107| |";  	string msource = "@220'50:MF107|ORIGIN|";  	//string msourceValue = "@255'50:MF226' HM8' VMULT3|" + source + "|";  	string msourceValue = "@255'50:MF107' HM4' VMULT3|" + source + "|";  	string mvia = "@222'350:MF107' HM3' VM2|" + via + "|";  	//string mwt = "@275'350:MF075' HM3' VM2|WT- " + weight + "|";  	//string mBaxb = "@335'50:BC39N'HIGH 25'WIDE 4|" + axb + "|";  	string mBaxb = "@338'100:BC39N'HIGH 15'WIDE 2|" + awb.Trim () + no.ToString ().Trim ().PadLeft (4' '0') + "|";  	string mLaxb = "@420'150:MF226' HM3' VMULT2|" + awb.Trim () + "|";  	string tDate = DateTime.Now.ToString ("dd-MM-yyyy HH:mm:ss");  	string mtDate = "@470'60:MF107|Date:" + tDate + "|";  	string lFooter = "@508'150:MF226|Powered By QID Ph: 020-40039501|";  	//string mtDate = "@528'60:MF107|Date:" + tDate + "|";  	//string hLine1 = "@0'40:HLINE' length 520' thick 5|";  //  	string hLine2 = "@60'40:HLINE' length 520' thick 5|";  	//  	string vLine1 = "@60'40:VLINE' length 270' thick 5|";  	//  	string vLine3 = "@60'300:VLINE' length 270' thick 5|";  	//  	string vLine2 = "@60'555:VLINE' length 270' thick 5|";  	//  	string hLine4 = "@325'40:HLINE' length 520' thick 5|";  	//  	string hLine3 = "@200'40:HLINE' length 520' thick 5|";  	//  	string mFooter = "}";  	//string changeMode = "{LP}";  	string back = "{BACK:15}";  	string ahead = "{AHEAD:114}";  	byte[] mByte = new byte[1];  	mByte [0] = 14;  	byte[] mmByte = new byte[3];  	mmByte [0] = 27;  	mmByte [1] = 67;  	mmByte [2] = 14;  	byte[] query = new byte[6];  	query [0] = 27;  	query [1] = 123;  	query [2] = 83;  	query [3] = 84;  	query [4] = 63;  	query [5] = 125;  	string config = Convert.ToChar (27) + "{CL!M:1}";  	string LabelData = mhead + name + lPhone + vLine1 + vLine2 + vLine3 + hLine2 + hLine3 + hLine4 + AXB + AXBValue1 + AXBValue2 + mdest + mdestValue + destpin + msource + msourceValue + mvia + mitm + mitemValue + mBaxb + mLaxb + mtDate + lFooter + mFooter;  	if (openport ())//open serial port  	 {  		try {  			//srPort.WriteLine(config);  			srPort.DiscardInBuffer ();  			srPort.DiscardOutBuffer ();  			srPort.Write (query' 0' 6);  			//send query to printer  			Delay (5000);  			//char[] buffer = new char[srPort.BytesToRead];  			//srPort.Read(buffer' 0' srPort.BytesToRead);  			//if(buffer[18] != 'P')  			//{  			//    DialogResult result = new DialogResult();  			//    result = MessageBox.Show("Please Check Printer Paper and Continue"'"Print"'MessageBoxButtons.YesNo'MessageBoxIcon.Question'MessageBoxDefaultButton.Button1 );  			//    if (result == DialogResult.Yes)  			//    {  			//        return 2;  			//    }  			//    else  			//    {  			//        return 0;  			//    }  			//}  			//  srPort.WriteTimeout = 200;  			int btw = srPort.BytesToWrite;  			//srPort.Write(mmByte' 0' 3); //set form size to 14  			srPort.Write (setEasyMode);  			//set printer to easy mode  			//srPort.Write(back);  			srPort.Write (LabelData);  			//print label  			srPort.Write (ahead);  			Delay (1000);  			while (srPort.BytesToWrite > 0) {  				Application.DoEvents ();  			}  			//srPort.Write(changeMode);   //set printer to line mode by using {LP}  			//srPort.Write(mByte' 0' 1);  //set form feed  			srPort.Close ();  			//close the serial port  		}  		catch (Exception ex) {  			srPort.Close ();  			//close the serial port  			return (0);  		}  		finally {  			srPort.Close ();  			//close the serial port  		}  		return (1);  	}  	else {  		return (0);  	}  }  catch (Exception) {  	return (0);  }  
Magic Number,PrintAWBLabels,clsOneilOC3,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\clsOneilOC3.cs,PrintLabel,The following statement contains a magic number: try {  	//int option = 0;  	//awb.PadLeft(11' '0');  	string lblHeader = "";  	try {  		lblHeader = getValueFromConf ("lableHeading");  	}  	catch (Exception ex) {  		lblHeader = "GoAir CARGO";  	}  	string ClientPhone = "";  	try {  		ClientPhone = getValueFromConf ("clientContact");  	}  	catch (Exception ex) {  		ClientPhone = "";  	}  	string mhead = "{PRINT:";  	//string name = "@0'50:MF107' HM2' VM2|Jet Airways CARGO|";  	string name = "@0'50:MF107' HM2' VM2|" + lblHeader.Trim () + "|";  	//string lPhone = "@40'170:MF226' HM1' VM1|Ph: 1800222111/09223222111|";  	string lPhone = "@40'170:MF226' HM1' VM1|" + ClientPhone.Trim () + "|";  	string AXB = "@80'50:MF107|AWBNo|";  	string AXBValue1 = "";  	string AXBValue2 = "";  	if (awb.Trim ().Length == 10) {  		AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 6) + "|";  		AXBValue2 = "@115'180:MF226' HM3' VMULT3|" + awb.Substring (6' 4) + "|";  	}  	else if (awb.Trim ().Length == 11) {  		if (awb.Trim ().ToUpper ().Substring (0' 3) == "SAC") {  			AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 3) + "|";  			AXBValue1 += "@135'110:MF226' HM2' VMULT2|" + awb.Substring (3' 4) + "|";  			AXBValue2 = "@115'185:MF226' HM3' VMULT3|" + awb.Substring (7' 4) + "|";  		}  		else {  			AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 7) + "|";  			AXBValue2 = "@115'180:MF226' HM3' VMULT3|" + awb.Substring (7' 4) + "|";  		}  	}  	//string mtype = "@35'140:MF204' HM3' V6|" + type + "|";  	string mitm = "@80'310:MF107|No Of PCS|";  	string mitemValue = "@135'310:MF226' HM3' VMULT2|" + no.ToString () + "/" + item + " |";  	string mdest = "@220'310:MF107|DEST|";  	//string mdestValue = "@255'310:MF226' HM8' VMULT3|" + dest + "|";  	string mdestValue = "@255'310:MF107' HM4' VMULT3|" + dest + "|";  	string destpin = "@300'310:MF107| |";  	string msource = "@220'50:MF107|ORIGIN|";  	//string msourceValue = "@255'50:MF226' HM8' VMULT3|" + source + "|";  	string msourceValue = "@255'50:MF107' HM4' VMULT3|" + source + "|";  	string mvia = "@222'350:MF107' HM3' VM2|" + via + "|";  	//string mwt = "@275'350:MF075' HM3' VM2|WT- " + weight + "|";  	//string mBaxb = "@335'50:BC39N'HIGH 25'WIDE 4|" + axb + "|";  	string mBaxb = "@338'100:BC39N'HIGH 15'WIDE 2|" + awb.Trim () + no.ToString ().Trim ().PadLeft (4' '0') + "|";  	string mLaxb = "@420'150:MF226' HM3' VMULT2|" + awb.Trim () + "|";  	string tDate = DateTime.Now.ToString ("dd-MM-yyyy HH:mm:ss");  	string mtDate = "@470'60:MF107|Date:" + tDate + "|";  	string lFooter = "@508'150:MF226|Powered By QID Ph: 020-40039501|";  	//string mtDate = "@528'60:MF107|Date:" + tDate + "|";  	//string hLine1 = "@0'40:HLINE' length 520' thick 5|";  //  	string hLine2 = "@60'40:HLINE' length 520' thick 5|";  	//  	string vLine1 = "@60'40:VLINE' length 270' thick 5|";  	//  	string vLine3 = "@60'300:VLINE' length 270' thick 5|";  	//  	string vLine2 = "@60'555:VLINE' length 270' thick 5|";  	//  	string hLine4 = "@325'40:HLINE' length 520' thick 5|";  	//  	string hLine3 = "@200'40:HLINE' length 520' thick 5|";  	//  	string mFooter = "}";  	//string changeMode = "{LP}";  	string back = "{BACK:15}";  	string ahead = "{AHEAD:114}";  	byte[] mByte = new byte[1];  	mByte [0] = 14;  	byte[] mmByte = new byte[3];  	mmByte [0] = 27;  	mmByte [1] = 67;  	mmByte [2] = 14;  	byte[] query = new byte[6];  	query [0] = 27;  	query [1] = 123;  	query [2] = 83;  	query [3] = 84;  	query [4] = 63;  	query [5] = 125;  	string config = Convert.ToChar (27) + "{CL!M:1}";  	string LabelData = mhead + name + lPhone + vLine1 + vLine2 + vLine3 + hLine2 + hLine3 + hLine4 + AXB + AXBValue1 + AXBValue2 + mdest + mdestValue + destpin + msource + msourceValue + mvia + mitm + mitemValue + mBaxb + mLaxb + mtDate + lFooter + mFooter;  	if (openport ())//open serial port  	 {  		try {  			//srPort.WriteLine(config);  			srPort.DiscardInBuffer ();  			srPort.DiscardOutBuffer ();  			srPort.Write (query' 0' 6);  			//send query to printer  			Delay (5000);  			//char[] buffer = new char[srPort.BytesToRead];  			//srPort.Read(buffer' 0' srPort.BytesToRead);  			//if(buffer[18] != 'P')  			//{  			//    DialogResult result = new DialogResult();  			//    result = MessageBox.Show("Please Check Printer Paper and Continue"'"Print"'MessageBoxButtons.YesNo'MessageBoxIcon.Question'MessageBoxDefaultButton.Button1 );  			//    if (result == DialogResult.Yes)  			//    {  			//        return 2;  			//    }  			//    else  			//    {  			//        return 0;  			//    }  			//}  			//  srPort.WriteTimeout = 200;  			int btw = srPort.BytesToWrite;  			//srPort.Write(mmByte' 0' 3); //set form size to 14  			srPort.Write (setEasyMode);  			//set printer to easy mode  			//srPort.Write(back);  			srPort.Write (LabelData);  			//print label  			srPort.Write (ahead);  			Delay (1000);  			while (srPort.BytesToWrite > 0) {  				Application.DoEvents ();  			}  			//srPort.Write(changeMode);   //set printer to line mode by using {LP}  			//srPort.Write(mByte' 0' 1);  //set form feed  			srPort.Close ();  			//close the serial port  		}  		catch (Exception ex) {  			srPort.Close ();  			//close the serial port  			return (0);  		}  		finally {  			srPort.Close ();  			//close the serial port  		}  		return (1);  	}  	else {  		return (0);  	}  }  catch (Exception) {  	return (0);  }  
Magic Number,PrintAWBLabels,clsOneilOC3,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\clsOneilOC3.cs,PrintLabel,The following statement contains a magic number: try {  	//int option = 0;  	//awb.PadLeft(11' '0');  	string lblHeader = "";  	try {  		lblHeader = getValueFromConf ("lableHeading");  	}  	catch (Exception ex) {  		lblHeader = "GoAir CARGO";  	}  	string ClientPhone = "";  	try {  		ClientPhone = getValueFromConf ("clientContact");  	}  	catch (Exception ex) {  		ClientPhone = "";  	}  	string mhead = "{PRINT:";  	//string name = "@0'50:MF107' HM2' VM2|Jet Airways CARGO|";  	string name = "@0'50:MF107' HM2' VM2|" + lblHeader.Trim () + "|";  	//string lPhone = "@40'170:MF226' HM1' VM1|Ph: 1800222111/09223222111|";  	string lPhone = "@40'170:MF226' HM1' VM1|" + ClientPhone.Trim () + "|";  	string AXB = "@80'50:MF107|AWBNo|";  	string AXBValue1 = "";  	string AXBValue2 = "";  	if (awb.Trim ().Length == 10) {  		AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 6) + "|";  		AXBValue2 = "@115'180:MF226' HM3' VMULT3|" + awb.Substring (6' 4) + "|";  	}  	else if (awb.Trim ().Length == 11) {  		if (awb.Trim ().ToUpper ().Substring (0' 3) == "SAC") {  			AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 3) + "|";  			AXBValue1 += "@135'110:MF226' HM2' VMULT2|" + awb.Substring (3' 4) + "|";  			AXBValue2 = "@115'185:MF226' HM3' VMULT3|" + awb.Substring (7' 4) + "|";  		}  		else {  			AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 7) + "|";  			AXBValue2 = "@115'180:MF226' HM3' VMULT3|" + awb.Substring (7' 4) + "|";  		}  	}  	//string mtype = "@35'140:MF204' HM3' V6|" + type + "|";  	string mitm = "@80'310:MF107|No Of PCS|";  	string mitemValue = "@135'310:MF226' HM3' VMULT2|" + no.ToString () + "/" + item + " |";  	string mdest = "@220'310:MF107|DEST|";  	//string mdestValue = "@255'310:MF226' HM8' VMULT3|" + dest + "|";  	string mdestValue = "@255'310:MF107' HM4' VMULT3|" + dest + "|";  	string destpin = "@300'310:MF107| |";  	string msource = "@220'50:MF107|ORIGIN|";  	//string msourceValue = "@255'50:MF226' HM8' VMULT3|" + source + "|";  	string msourceValue = "@255'50:MF107' HM4' VMULT3|" + source + "|";  	string mvia = "@222'350:MF107' HM3' VM2|" + via + "|";  	//string mwt = "@275'350:MF075' HM3' VM2|WT- " + weight + "|";  	//string mBaxb = "@335'50:BC39N'HIGH 25'WIDE 4|" + axb + "|";  	string mBaxb = "@338'100:BC39N'HIGH 15'WIDE 2|" + awb.Trim () + no.ToString ().Trim ().PadLeft (4' '0') + "|";  	string mLaxb = "@420'150:MF226' HM3' VMULT2|" + awb.Trim () + "|";  	string tDate = DateTime.Now.ToString ("dd-MM-yyyy HH:mm:ss");  	string mtDate = "@470'60:MF107|Date:" + tDate + "|";  	string lFooter = "@508'150:MF226|Powered By QID Ph: 020-40039501|";  	//string mtDate = "@528'60:MF107|Date:" + tDate + "|";  	//string hLine1 = "@0'40:HLINE' length 520' thick 5|";  //  	string hLine2 = "@60'40:HLINE' length 520' thick 5|";  	//  	string vLine1 = "@60'40:VLINE' length 270' thick 5|";  	//  	string vLine3 = "@60'300:VLINE' length 270' thick 5|";  	//  	string vLine2 = "@60'555:VLINE' length 270' thick 5|";  	//  	string hLine4 = "@325'40:HLINE' length 520' thick 5|";  	//  	string hLine3 = "@200'40:HLINE' length 520' thick 5|";  	//  	string mFooter = "}";  	//string changeMode = "{LP}";  	string back = "{BACK:15}";  	string ahead = "{AHEAD:114}";  	byte[] mByte = new byte[1];  	mByte [0] = 14;  	byte[] mmByte = new byte[3];  	mmByte [0] = 27;  	mmByte [1] = 67;  	mmByte [2] = 14;  	byte[] query = new byte[6];  	query [0] = 27;  	query [1] = 123;  	query [2] = 83;  	query [3] = 84;  	query [4] = 63;  	query [5] = 125;  	string config = Convert.ToChar (27) + "{CL!M:1}";  	string LabelData = mhead + name + lPhone + vLine1 + vLine2 + vLine3 + hLine2 + hLine3 + hLine4 + AXB + AXBValue1 + AXBValue2 + mdest + mdestValue + destpin + msource + msourceValue + mvia + mitm + mitemValue + mBaxb + mLaxb + mtDate + lFooter + mFooter;  	if (openport ())//open serial port  	 {  		try {  			//srPort.WriteLine(config);  			srPort.DiscardInBuffer ();  			srPort.DiscardOutBuffer ();  			srPort.Write (query' 0' 6);  			//send query to printer  			Delay (5000);  			//char[] buffer = new char[srPort.BytesToRead];  			//srPort.Read(buffer' 0' srPort.BytesToRead);  			//if(buffer[18] != 'P')  			//{  			//    DialogResult result = new DialogResult();  			//    result = MessageBox.Show("Please Check Printer Paper and Continue"'"Print"'MessageBoxButtons.YesNo'MessageBoxIcon.Question'MessageBoxDefaultButton.Button1 );  			//    if (result == DialogResult.Yes)  			//    {  			//        return 2;  			//    }  			//    else  			//    {  			//        return 0;  			//    }  			//}  			//  srPort.WriteTimeout = 200;  			int btw = srPort.BytesToWrite;  			//srPort.Write(mmByte' 0' 3); //set form size to 14  			srPort.Write (setEasyMode);  			//set printer to easy mode  			//srPort.Write(back);  			srPort.Write (LabelData);  			//print label  			srPort.Write (ahead);  			Delay (1000);  			while (srPort.BytesToWrite > 0) {  				Application.DoEvents ();  			}  			//srPort.Write(changeMode);   //set printer to line mode by using {LP}  			//srPort.Write(mByte' 0' 1);  //set form feed  			srPort.Close ();  			//close the serial port  		}  		catch (Exception ex) {  			srPort.Close ();  			//close the serial port  			return (0);  		}  		finally {  			srPort.Close ();  			//close the serial port  		}  		return (1);  	}  	else {  		return (0);  	}  }  catch (Exception) {  	return (0);  }  
Magic Number,PrintAWBLabels,clsOneilOC3,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\clsOneilOC3.cs,PrintLabel,The following statement contains a magic number: try {  	//int option = 0;  	//awb.PadLeft(11' '0');  	string lblHeader = "";  	try {  		lblHeader = getValueFromConf ("lableHeading");  	}  	catch (Exception ex) {  		lblHeader = "GoAir CARGO";  	}  	string ClientPhone = "";  	try {  		ClientPhone = getValueFromConf ("clientContact");  	}  	catch (Exception ex) {  		ClientPhone = "";  	}  	string mhead = "{PRINT:";  	//string name = "@0'50:MF107' HM2' VM2|Jet Airways CARGO|";  	string name = "@0'50:MF107' HM2' VM2|" + lblHeader.Trim () + "|";  	//string lPhone = "@40'170:MF226' HM1' VM1|Ph: 1800222111/09223222111|";  	string lPhone = "@40'170:MF226' HM1' VM1|" + ClientPhone.Trim () + "|";  	string AXB = "@80'50:MF107|AWBNo|";  	string AXBValue1 = "";  	string AXBValue2 = "";  	if (awb.Trim ().Length == 10) {  		AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 6) + "|";  		AXBValue2 = "@115'180:MF226' HM3' VMULT3|" + awb.Substring (6' 4) + "|";  	}  	else if (awb.Trim ().Length == 11) {  		if (awb.Trim ().ToUpper ().Substring (0' 3) == "SAC") {  			AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 3) + "|";  			AXBValue1 += "@135'110:MF226' HM2' VMULT2|" + awb.Substring (3' 4) + "|";  			AXBValue2 = "@115'185:MF226' HM3' VMULT3|" + awb.Substring (7' 4) + "|";  		}  		else {  			AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 7) + "|";  			AXBValue2 = "@115'180:MF226' HM3' VMULT3|" + awb.Substring (7' 4) + "|";  		}  	}  	//string mtype = "@35'140:MF204' HM3' V6|" + type + "|";  	string mitm = "@80'310:MF107|No Of PCS|";  	string mitemValue = "@135'310:MF226' HM3' VMULT2|" + no.ToString () + "/" + item + " |";  	string mdest = "@220'310:MF107|DEST|";  	//string mdestValue = "@255'310:MF226' HM8' VMULT3|" + dest + "|";  	string mdestValue = "@255'310:MF107' HM4' VMULT3|" + dest + "|";  	string destpin = "@300'310:MF107| |";  	string msource = "@220'50:MF107|ORIGIN|";  	//string msourceValue = "@255'50:MF226' HM8' VMULT3|" + source + "|";  	string msourceValue = "@255'50:MF107' HM4' VMULT3|" + source + "|";  	string mvia = "@222'350:MF107' HM3' VM2|" + via + "|";  	//string mwt = "@275'350:MF075' HM3' VM2|WT- " + weight + "|";  	//string mBaxb = "@335'50:BC39N'HIGH 25'WIDE 4|" + axb + "|";  	string mBaxb = "@338'100:BC39N'HIGH 15'WIDE 2|" + awb.Trim () + no.ToString ().Trim ().PadLeft (4' '0') + "|";  	string mLaxb = "@420'150:MF226' HM3' VMULT2|" + awb.Trim () + "|";  	string tDate = DateTime.Now.ToString ("dd-MM-yyyy HH:mm:ss");  	string mtDate = "@470'60:MF107|Date:" + tDate + "|";  	string lFooter = "@508'150:MF226|Powered By QID Ph: 020-40039501|";  	//string mtDate = "@528'60:MF107|Date:" + tDate + "|";  	//string hLine1 = "@0'40:HLINE' length 520' thick 5|";  //  	string hLine2 = "@60'40:HLINE' length 520' thick 5|";  	//  	string vLine1 = "@60'40:VLINE' length 270' thick 5|";  	//  	string vLine3 = "@60'300:VLINE' length 270' thick 5|";  	//  	string vLine2 = "@60'555:VLINE' length 270' thick 5|";  	//  	string hLine4 = "@325'40:HLINE' length 520' thick 5|";  	//  	string hLine3 = "@200'40:HLINE' length 520' thick 5|";  	//  	string mFooter = "}";  	//string changeMode = "{LP}";  	string back = "{BACK:15}";  	string ahead = "{AHEAD:114}";  	byte[] mByte = new byte[1];  	mByte [0] = 14;  	byte[] mmByte = new byte[3];  	mmByte [0] = 27;  	mmByte [1] = 67;  	mmByte [2] = 14;  	byte[] query = new byte[6];  	query [0] = 27;  	query [1] = 123;  	query [2] = 83;  	query [3] = 84;  	query [4] = 63;  	query [5] = 125;  	string config = Convert.ToChar (27) + "{CL!M:1}";  	string LabelData = mhead + name + lPhone + vLine1 + vLine2 + vLine3 + hLine2 + hLine3 + hLine4 + AXB + AXBValue1 + AXBValue2 + mdest + mdestValue + destpin + msource + msourceValue + mvia + mitm + mitemValue + mBaxb + mLaxb + mtDate + lFooter + mFooter;  	if (openport ())//open serial port  	 {  		try {  			//srPort.WriteLine(config);  			srPort.DiscardInBuffer ();  			srPort.DiscardOutBuffer ();  			srPort.Write (query' 0' 6);  			//send query to printer  			Delay (5000);  			//char[] buffer = new char[srPort.BytesToRead];  			//srPort.Read(buffer' 0' srPort.BytesToRead);  			//if(buffer[18] != 'P')  			//{  			//    DialogResult result = new DialogResult();  			//    result = MessageBox.Show("Please Check Printer Paper and Continue"'"Print"'MessageBoxButtons.YesNo'MessageBoxIcon.Question'MessageBoxDefaultButton.Button1 );  			//    if (result == DialogResult.Yes)  			//    {  			//        return 2;  			//    }  			//    else  			//    {  			//        return 0;  			//    }  			//}  			//  srPort.WriteTimeout = 200;  			int btw = srPort.BytesToWrite;  			//srPort.Write(mmByte' 0' 3); //set form size to 14  			srPort.Write (setEasyMode);  			//set printer to easy mode  			//srPort.Write(back);  			srPort.Write (LabelData);  			//print label  			srPort.Write (ahead);  			Delay (1000);  			while (srPort.BytesToWrite > 0) {  				Application.DoEvents ();  			}  			//srPort.Write(changeMode);   //set printer to line mode by using {LP}  			//srPort.Write(mByte' 0' 1);  //set form feed  			srPort.Close ();  			//close the serial port  		}  		catch (Exception ex) {  			srPort.Close ();  			//close the serial port  			return (0);  		}  		finally {  			srPort.Close ();  			//close the serial port  		}  		return (1);  	}  	else {  		return (0);  	}  }  catch (Exception) {  	return (0);  }  
Magic Number,PrintAWBLabels,clsOneilOC3,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\clsOneilOC3.cs,PrintLabel,The following statement contains a magic number: try {  	//int option = 0;  	//awb.PadLeft(11' '0');  	string lblHeader = "";  	try {  		lblHeader = getValueFromConf ("lableHeading");  	}  	catch (Exception ex) {  		lblHeader = "GoAir CARGO";  	}  	string ClientPhone = "";  	try {  		ClientPhone = getValueFromConf ("clientContact");  	}  	catch (Exception ex) {  		ClientPhone = "";  	}  	string mhead = "{PRINT:";  	//string name = "@0'50:MF107' HM2' VM2|Jet Airways CARGO|";  	string name = "@0'50:MF107' HM2' VM2|" + lblHeader.Trim () + "|";  	//string lPhone = "@40'170:MF226' HM1' VM1|Ph: 1800222111/09223222111|";  	string lPhone = "@40'170:MF226' HM1' VM1|" + ClientPhone.Trim () + "|";  	string AXB = "@80'50:MF107|AWBNo|";  	string AXBValue1 = "";  	string AXBValue2 = "";  	if (awb.Trim ().Length == 10) {  		AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 6) + "|";  		AXBValue2 = "@115'180:MF226' HM3' VMULT3|" + awb.Substring (6' 4) + "|";  	}  	else if (awb.Trim ().Length == 11) {  		if (awb.Trim ().ToUpper ().Substring (0' 3) == "SAC") {  			AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 3) + "|";  			AXBValue1 += "@135'110:MF226' HM2' VMULT2|" + awb.Substring (3' 4) + "|";  			AXBValue2 = "@115'185:MF226' HM3' VMULT3|" + awb.Substring (7' 4) + "|";  		}  		else {  			AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 7) + "|";  			AXBValue2 = "@115'180:MF226' HM3' VMULT3|" + awb.Substring (7' 4) + "|";  		}  	}  	//string mtype = "@35'140:MF204' HM3' V6|" + type + "|";  	string mitm = "@80'310:MF107|No Of PCS|";  	string mitemValue = "@135'310:MF226' HM3' VMULT2|" + no.ToString () + "/" + item + " |";  	string mdest = "@220'310:MF107|DEST|";  	//string mdestValue = "@255'310:MF226' HM8' VMULT3|" + dest + "|";  	string mdestValue = "@255'310:MF107' HM4' VMULT3|" + dest + "|";  	string destpin = "@300'310:MF107| |";  	string msource = "@220'50:MF107|ORIGIN|";  	//string msourceValue = "@255'50:MF226' HM8' VMULT3|" + source + "|";  	string msourceValue = "@255'50:MF107' HM4' VMULT3|" + source + "|";  	string mvia = "@222'350:MF107' HM3' VM2|" + via + "|";  	//string mwt = "@275'350:MF075' HM3' VM2|WT- " + weight + "|";  	//string mBaxb = "@335'50:BC39N'HIGH 25'WIDE 4|" + axb + "|";  	string mBaxb = "@338'100:BC39N'HIGH 15'WIDE 2|" + awb.Trim () + no.ToString ().Trim ().PadLeft (4' '0') + "|";  	string mLaxb = "@420'150:MF226' HM3' VMULT2|" + awb.Trim () + "|";  	string tDate = DateTime.Now.ToString ("dd-MM-yyyy HH:mm:ss");  	string mtDate = "@470'60:MF107|Date:" + tDate + "|";  	string lFooter = "@508'150:MF226|Powered By QID Ph: 020-40039501|";  	//string mtDate = "@528'60:MF107|Date:" + tDate + "|";  	//string hLine1 = "@0'40:HLINE' length 520' thick 5|";  //  	string hLine2 = "@60'40:HLINE' length 520' thick 5|";  	//  	string vLine1 = "@60'40:VLINE' length 270' thick 5|";  	//  	string vLine3 = "@60'300:VLINE' length 270' thick 5|";  	//  	string vLine2 = "@60'555:VLINE' length 270' thick 5|";  	//  	string hLine4 = "@325'40:HLINE' length 520' thick 5|";  	//  	string hLine3 = "@200'40:HLINE' length 520' thick 5|";  	//  	string mFooter = "}";  	//string changeMode = "{LP}";  	string back = "{BACK:15}";  	string ahead = "{AHEAD:114}";  	byte[] mByte = new byte[1];  	mByte [0] = 14;  	byte[] mmByte = new byte[3];  	mmByte [0] = 27;  	mmByte [1] = 67;  	mmByte [2] = 14;  	byte[] query = new byte[6];  	query [0] = 27;  	query [1] = 123;  	query [2] = 83;  	query [3] = 84;  	query [4] = 63;  	query [5] = 125;  	string config = Convert.ToChar (27) + "{CL!M:1}";  	string LabelData = mhead + name + lPhone + vLine1 + vLine2 + vLine3 + hLine2 + hLine3 + hLine4 + AXB + AXBValue1 + AXBValue2 + mdest + mdestValue + destpin + msource + msourceValue + mvia + mitm + mitemValue + mBaxb + mLaxb + mtDate + lFooter + mFooter;  	if (openport ())//open serial port  	 {  		try {  			//srPort.WriteLine(config);  			srPort.DiscardInBuffer ();  			srPort.DiscardOutBuffer ();  			srPort.Write (query' 0' 6);  			//send query to printer  			Delay (5000);  			//char[] buffer = new char[srPort.BytesToRead];  			//srPort.Read(buffer' 0' srPort.BytesToRead);  			//if(buffer[18] != 'P')  			//{  			//    DialogResult result = new DialogResult();  			//    result = MessageBox.Show("Please Check Printer Paper and Continue"'"Print"'MessageBoxButtons.YesNo'MessageBoxIcon.Question'MessageBoxDefaultButton.Button1 );  			//    if (result == DialogResult.Yes)  			//    {  			//        return 2;  			//    }  			//    else  			//    {  			//        return 0;  			//    }  			//}  			//  srPort.WriteTimeout = 200;  			int btw = srPort.BytesToWrite;  			//srPort.Write(mmByte' 0' 3); //set form size to 14  			srPort.Write (setEasyMode);  			//set printer to easy mode  			//srPort.Write(back);  			srPort.Write (LabelData);  			//print label  			srPort.Write (ahead);  			Delay (1000);  			while (srPort.BytesToWrite > 0) {  				Application.DoEvents ();  			}  			//srPort.Write(changeMode);   //set printer to line mode by using {LP}  			//srPort.Write(mByte' 0' 1);  //set form feed  			srPort.Close ();  			//close the serial port  		}  		catch (Exception ex) {  			srPort.Close ();  			//close the serial port  			return (0);  		}  		finally {  			srPort.Close ();  			//close the serial port  		}  		return (1);  	}  	else {  		return (0);  	}  }  catch (Exception) {  	return (0);  }  
Magic Number,PrintAWBLabels,clsOneilOC3,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\clsOneilOC3.cs,PrintLabel,The following statement contains a magic number: try {  	//int option = 0;  	//awb.PadLeft(11' '0');  	string lblHeader = "";  	try {  		lblHeader = getValueFromConf ("lableHeading");  	}  	catch (Exception ex) {  		lblHeader = "GoAir CARGO";  	}  	string ClientPhone = "";  	try {  		ClientPhone = getValueFromConf ("clientContact");  	}  	catch (Exception ex) {  		ClientPhone = "";  	}  	string mhead = "{PRINT:";  	//string name = "@0'50:MF107' HM2' VM2|Jet Airways CARGO|";  	string name = "@0'50:MF107' HM2' VM2|" + lblHeader.Trim () + "|";  	//string lPhone = "@40'170:MF226' HM1' VM1|Ph: 1800222111/09223222111|";  	string lPhone = "@40'170:MF226' HM1' VM1|" + ClientPhone.Trim () + "|";  	string AXB = "@80'50:MF107|AWBNo|";  	string AXBValue1 = "";  	string AXBValue2 = "";  	if (awb.Trim ().Length == 10) {  		AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 6) + "|";  		AXBValue2 = "@115'180:MF226' HM3' VMULT3|" + awb.Substring (6' 4) + "|";  	}  	else if (awb.Trim ().Length == 11) {  		if (awb.Trim ().ToUpper ().Substring (0' 3) == "SAC") {  			AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 3) + "|";  			AXBValue1 += "@135'110:MF226' HM2' VMULT2|" + awb.Substring (3' 4) + "|";  			AXBValue2 = "@115'185:MF226' HM3' VMULT3|" + awb.Substring (7' 4) + "|";  		}  		else {  			AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 7) + "|";  			AXBValue2 = "@115'180:MF226' HM3' VMULT3|" + awb.Substring (7' 4) + "|";  		}  	}  	//string mtype = "@35'140:MF204' HM3' V6|" + type + "|";  	string mitm = "@80'310:MF107|No Of PCS|";  	string mitemValue = "@135'310:MF226' HM3' VMULT2|" + no.ToString () + "/" + item + " |";  	string mdest = "@220'310:MF107|DEST|";  	//string mdestValue = "@255'310:MF226' HM8' VMULT3|" + dest + "|";  	string mdestValue = "@255'310:MF107' HM4' VMULT3|" + dest + "|";  	string destpin = "@300'310:MF107| |";  	string msource = "@220'50:MF107|ORIGIN|";  	//string msourceValue = "@255'50:MF226' HM8' VMULT3|" + source + "|";  	string msourceValue = "@255'50:MF107' HM4' VMULT3|" + source + "|";  	string mvia = "@222'350:MF107' HM3' VM2|" + via + "|";  	//string mwt = "@275'350:MF075' HM3' VM2|WT- " + weight + "|";  	//string mBaxb = "@335'50:BC39N'HIGH 25'WIDE 4|" + axb + "|";  	string mBaxb = "@338'100:BC39N'HIGH 15'WIDE 2|" + awb.Trim () + no.ToString ().Trim ().PadLeft (4' '0') + "|";  	string mLaxb = "@420'150:MF226' HM3' VMULT2|" + awb.Trim () + "|";  	string tDate = DateTime.Now.ToString ("dd-MM-yyyy HH:mm:ss");  	string mtDate = "@470'60:MF107|Date:" + tDate + "|";  	string lFooter = "@508'150:MF226|Powered By QID Ph: 020-40039501|";  	//string mtDate = "@528'60:MF107|Date:" + tDate + "|";  	//string hLine1 = "@0'40:HLINE' length 520' thick 5|";  //  	string hLine2 = "@60'40:HLINE' length 520' thick 5|";  	//  	string vLine1 = "@60'40:VLINE' length 270' thick 5|";  	//  	string vLine3 = "@60'300:VLINE' length 270' thick 5|";  	//  	string vLine2 = "@60'555:VLINE' length 270' thick 5|";  	//  	string hLine4 = "@325'40:HLINE' length 520' thick 5|";  	//  	string hLine3 = "@200'40:HLINE' length 520' thick 5|";  	//  	string mFooter = "}";  	//string changeMode = "{LP}";  	string back = "{BACK:15}";  	string ahead = "{AHEAD:114}";  	byte[] mByte = new byte[1];  	mByte [0] = 14;  	byte[] mmByte = new byte[3];  	mmByte [0] = 27;  	mmByte [1] = 67;  	mmByte [2] = 14;  	byte[] query = new byte[6];  	query [0] = 27;  	query [1] = 123;  	query [2] = 83;  	query [3] = 84;  	query [4] = 63;  	query [5] = 125;  	string config = Convert.ToChar (27) + "{CL!M:1}";  	string LabelData = mhead + name + lPhone + vLine1 + vLine2 + vLine3 + hLine2 + hLine3 + hLine4 + AXB + AXBValue1 + AXBValue2 + mdest + mdestValue + destpin + msource + msourceValue + mvia + mitm + mitemValue + mBaxb + mLaxb + mtDate + lFooter + mFooter;  	if (openport ())//open serial port  	 {  		try {  			//srPort.WriteLine(config);  			srPort.DiscardInBuffer ();  			srPort.DiscardOutBuffer ();  			srPort.Write (query' 0' 6);  			//send query to printer  			Delay (5000);  			//char[] buffer = new char[srPort.BytesToRead];  			//srPort.Read(buffer' 0' srPort.BytesToRead);  			//if(buffer[18] != 'P')  			//{  			//    DialogResult result = new DialogResult();  			//    result = MessageBox.Show("Please Check Printer Paper and Continue"'"Print"'MessageBoxButtons.YesNo'MessageBoxIcon.Question'MessageBoxDefaultButton.Button1 );  			//    if (result == DialogResult.Yes)  			//    {  			//        return 2;  			//    }  			//    else  			//    {  			//        return 0;  			//    }  			//}  			//  srPort.WriteTimeout = 200;  			int btw = srPort.BytesToWrite;  			//srPort.Write(mmByte' 0' 3); //set form size to 14  			srPort.Write (setEasyMode);  			//set printer to easy mode  			//srPort.Write(back);  			srPort.Write (LabelData);  			//print label  			srPort.Write (ahead);  			Delay (1000);  			while (srPort.BytesToWrite > 0) {  				Application.DoEvents ();  			}  			//srPort.Write(changeMode);   //set printer to line mode by using {LP}  			//srPort.Write(mByte' 0' 1);  //set form feed  			srPort.Close ();  			//close the serial port  		}  		catch (Exception ex) {  			srPort.Close ();  			//close the serial port  			return (0);  		}  		finally {  			srPort.Close ();  			//close the serial port  		}  		return (1);  	}  	else {  		return (0);  	}  }  catch (Exception) {  	return (0);  }  
Magic Number,PrintAWBLabels,clsOneilOC3,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\clsOneilOC3.cs,PrintLabel,The following statement contains a magic number: try {  	//int option = 0;  	//awb.PadLeft(11' '0');  	string lblHeader = "";  	try {  		lblHeader = getValueFromConf ("lableHeading");  	}  	catch (Exception ex) {  		lblHeader = "GoAir CARGO";  	}  	string ClientPhone = "";  	try {  		ClientPhone = getValueFromConf ("clientContact");  	}  	catch (Exception ex) {  		ClientPhone = "";  	}  	string mhead = "{PRINT:";  	//string name = "@0'50:MF107' HM2' VM2|Jet Airways CARGO|";  	string name = "@0'50:MF107' HM2' VM2|" + lblHeader.Trim () + "|";  	//string lPhone = "@40'170:MF226' HM1' VM1|Ph: 1800222111/09223222111|";  	string lPhone = "@40'170:MF226' HM1' VM1|" + ClientPhone.Trim () + "|";  	string AXB = "@80'50:MF107|AWBNo|";  	string AXBValue1 = "";  	string AXBValue2 = "";  	if (awb.Trim ().Length == 10) {  		AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 6) + "|";  		AXBValue2 = "@115'180:MF226' HM3' VMULT3|" + awb.Substring (6' 4) + "|";  	}  	else if (awb.Trim ().Length == 11) {  		if (awb.Trim ().ToUpper ().Substring (0' 3) == "SAC") {  			AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 3) + "|";  			AXBValue1 += "@135'110:MF226' HM2' VMULT2|" + awb.Substring (3' 4) + "|";  			AXBValue2 = "@115'185:MF226' HM3' VMULT3|" + awb.Substring (7' 4) + "|";  		}  		else {  			AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 7) + "|";  			AXBValue2 = "@115'180:MF226' HM3' VMULT3|" + awb.Substring (7' 4) + "|";  		}  	}  	//string mtype = "@35'140:MF204' HM3' V6|" + type + "|";  	string mitm = "@80'310:MF107|No Of PCS|";  	string mitemValue = "@135'310:MF226' HM3' VMULT2|" + no.ToString () + "/" + item + " |";  	string mdest = "@220'310:MF107|DEST|";  	//string mdestValue = "@255'310:MF226' HM8' VMULT3|" + dest + "|";  	string mdestValue = "@255'310:MF107' HM4' VMULT3|" + dest + "|";  	string destpin = "@300'310:MF107| |";  	string msource = "@220'50:MF107|ORIGIN|";  	//string msourceValue = "@255'50:MF226' HM8' VMULT3|" + source + "|";  	string msourceValue = "@255'50:MF107' HM4' VMULT3|" + source + "|";  	string mvia = "@222'350:MF107' HM3' VM2|" + via + "|";  	//string mwt = "@275'350:MF075' HM3' VM2|WT- " + weight + "|";  	//string mBaxb = "@335'50:BC39N'HIGH 25'WIDE 4|" + axb + "|";  	string mBaxb = "@338'100:BC39N'HIGH 15'WIDE 2|" + awb.Trim () + no.ToString ().Trim ().PadLeft (4' '0') + "|";  	string mLaxb = "@420'150:MF226' HM3' VMULT2|" + awb.Trim () + "|";  	string tDate = DateTime.Now.ToString ("dd-MM-yyyy HH:mm:ss");  	string mtDate = "@470'60:MF107|Date:" + tDate + "|";  	string lFooter = "@508'150:MF226|Powered By QID Ph: 020-40039501|";  	//string mtDate = "@528'60:MF107|Date:" + tDate + "|";  	//string hLine1 = "@0'40:HLINE' length 520' thick 5|";  //  	string hLine2 = "@60'40:HLINE' length 520' thick 5|";  	//  	string vLine1 = "@60'40:VLINE' length 270' thick 5|";  	//  	string vLine3 = "@60'300:VLINE' length 270' thick 5|";  	//  	string vLine2 = "@60'555:VLINE' length 270' thick 5|";  	//  	string hLine4 = "@325'40:HLINE' length 520' thick 5|";  	//  	string hLine3 = "@200'40:HLINE' length 520' thick 5|";  	//  	string mFooter = "}";  	//string changeMode = "{LP}";  	string back = "{BACK:15}";  	string ahead = "{AHEAD:114}";  	byte[] mByte = new byte[1];  	mByte [0] = 14;  	byte[] mmByte = new byte[3];  	mmByte [0] = 27;  	mmByte [1] = 67;  	mmByte [2] = 14;  	byte[] query = new byte[6];  	query [0] = 27;  	query [1] = 123;  	query [2] = 83;  	query [3] = 84;  	query [4] = 63;  	query [5] = 125;  	string config = Convert.ToChar (27) + "{CL!M:1}";  	string LabelData = mhead + name + lPhone + vLine1 + vLine2 + vLine3 + hLine2 + hLine3 + hLine4 + AXB + AXBValue1 + AXBValue2 + mdest + mdestValue + destpin + msource + msourceValue + mvia + mitm + mitemValue + mBaxb + mLaxb + mtDate + lFooter + mFooter;  	if (openport ())//open serial port  	 {  		try {  			//srPort.WriteLine(config);  			srPort.DiscardInBuffer ();  			srPort.DiscardOutBuffer ();  			srPort.Write (query' 0' 6);  			//send query to printer  			Delay (5000);  			//char[] buffer = new char[srPort.BytesToRead];  			//srPort.Read(buffer' 0' srPort.BytesToRead);  			//if(buffer[18] != 'P')  			//{  			//    DialogResult result = new DialogResult();  			//    result = MessageBox.Show("Please Check Printer Paper and Continue"'"Print"'MessageBoxButtons.YesNo'MessageBoxIcon.Question'MessageBoxDefaultButton.Button1 );  			//    if (result == DialogResult.Yes)  			//    {  			//        return 2;  			//    }  			//    else  			//    {  			//        return 0;  			//    }  			//}  			//  srPort.WriteTimeout = 200;  			int btw = srPort.BytesToWrite;  			//srPort.Write(mmByte' 0' 3); //set form size to 14  			srPort.Write (setEasyMode);  			//set printer to easy mode  			//srPort.Write(back);  			srPort.Write (LabelData);  			//print label  			srPort.Write (ahead);  			Delay (1000);  			while (srPort.BytesToWrite > 0) {  				Application.DoEvents ();  			}  			//srPort.Write(changeMode);   //set printer to line mode by using {LP}  			//srPort.Write(mByte' 0' 1);  //set form feed  			srPort.Close ();  			//close the serial port  		}  		catch (Exception ex) {  			srPort.Close ();  			//close the serial port  			return (0);  		}  		finally {  			srPort.Close ();  			//close the serial port  		}  		return (1);  	}  	else {  		return (0);  	}  }  catch (Exception) {  	return (0);  }  
Magic Number,PrintAWBLabels,clsOneilOC3,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\clsOneilOC3.cs,PrintLabel,The following statement contains a magic number: try {  	//int option = 0;  	//awb.PadLeft(11' '0');  	string lblHeader = "";  	try {  		lblHeader = getValueFromConf ("lableHeading");  	}  	catch (Exception ex) {  		lblHeader = "GoAir CARGO";  	}  	string ClientPhone = "";  	try {  		ClientPhone = getValueFromConf ("clientContact");  	}  	catch (Exception ex) {  		ClientPhone = "";  	}  	string mhead = "{PRINT:";  	//string name = "@0'50:MF107' HM2' VM2|Jet Airways CARGO|";  	string name = "@0'50:MF107' HM2' VM2|" + lblHeader.Trim () + "|";  	//string lPhone = "@40'170:MF226' HM1' VM1|Ph: 1800222111/09223222111|";  	string lPhone = "@40'170:MF226' HM1' VM1|" + ClientPhone.Trim () + "|";  	string AXB = "@80'50:MF107|AWBNo|";  	string AXBValue1 = "";  	string AXBValue2 = "";  	if (awb.Trim ().Length == 10) {  		AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 6) + "|";  		AXBValue2 = "@115'180:MF226' HM3' VMULT3|" + awb.Substring (6' 4) + "|";  	}  	else if (awb.Trim ().Length == 11) {  		if (awb.Trim ().ToUpper ().Substring (0' 3) == "SAC") {  			AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 3) + "|";  			AXBValue1 += "@135'110:MF226' HM2' VMULT2|" + awb.Substring (3' 4) + "|";  			AXBValue2 = "@115'185:MF226' HM3' VMULT3|" + awb.Substring (7' 4) + "|";  		}  		else {  			AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 7) + "|";  			AXBValue2 = "@115'180:MF226' HM3' VMULT3|" + awb.Substring (7' 4) + "|";  		}  	}  	//string mtype = "@35'140:MF204' HM3' V6|" + type + "|";  	string mitm = "@80'310:MF107|No Of PCS|";  	string mitemValue = "@135'310:MF226' HM3' VMULT2|" + no.ToString () + "/" + item + " |";  	string mdest = "@220'310:MF107|DEST|";  	//string mdestValue = "@255'310:MF226' HM8' VMULT3|" + dest + "|";  	string mdestValue = "@255'310:MF107' HM4' VMULT3|" + dest + "|";  	string destpin = "@300'310:MF107| |";  	string msource = "@220'50:MF107|ORIGIN|";  	//string msourceValue = "@255'50:MF226' HM8' VMULT3|" + source + "|";  	string msourceValue = "@255'50:MF107' HM4' VMULT3|" + source + "|";  	string mvia = "@222'350:MF107' HM3' VM2|" + via + "|";  	//string mwt = "@275'350:MF075' HM3' VM2|WT- " + weight + "|";  	//string mBaxb = "@335'50:BC39N'HIGH 25'WIDE 4|" + axb + "|";  	string mBaxb = "@338'100:BC39N'HIGH 15'WIDE 2|" + awb.Trim () + no.ToString ().Trim ().PadLeft (4' '0') + "|";  	string mLaxb = "@420'150:MF226' HM3' VMULT2|" + awb.Trim () + "|";  	string tDate = DateTime.Now.ToString ("dd-MM-yyyy HH:mm:ss");  	string mtDate = "@470'60:MF107|Date:" + tDate + "|";  	string lFooter = "@508'150:MF226|Powered By QID Ph: 020-40039501|";  	//string mtDate = "@528'60:MF107|Date:" + tDate + "|";  	//string hLine1 = "@0'40:HLINE' length 520' thick 5|";  //  	string hLine2 = "@60'40:HLINE' length 520' thick 5|";  	//  	string vLine1 = "@60'40:VLINE' length 270' thick 5|";  	//  	string vLine3 = "@60'300:VLINE' length 270' thick 5|";  	//  	string vLine2 = "@60'555:VLINE' length 270' thick 5|";  	//  	string hLine4 = "@325'40:HLINE' length 520' thick 5|";  	//  	string hLine3 = "@200'40:HLINE' length 520' thick 5|";  	//  	string mFooter = "}";  	//string changeMode = "{LP}";  	string back = "{BACK:15}";  	string ahead = "{AHEAD:114}";  	byte[] mByte = new byte[1];  	mByte [0] = 14;  	byte[] mmByte = new byte[3];  	mmByte [0] = 27;  	mmByte [1] = 67;  	mmByte [2] = 14;  	byte[] query = new byte[6];  	query [0] = 27;  	query [1] = 123;  	query [2] = 83;  	query [3] = 84;  	query [4] = 63;  	query [5] = 125;  	string config = Convert.ToChar (27) + "{CL!M:1}";  	string LabelData = mhead + name + lPhone + vLine1 + vLine2 + vLine3 + hLine2 + hLine3 + hLine4 + AXB + AXBValue1 + AXBValue2 + mdest + mdestValue + destpin + msource + msourceValue + mvia + mitm + mitemValue + mBaxb + mLaxb + mtDate + lFooter + mFooter;  	if (openport ())//open serial port  	 {  		try {  			//srPort.WriteLine(config);  			srPort.DiscardInBuffer ();  			srPort.DiscardOutBuffer ();  			srPort.Write (query' 0' 6);  			//send query to printer  			Delay (5000);  			//char[] buffer = new char[srPort.BytesToRead];  			//srPort.Read(buffer' 0' srPort.BytesToRead);  			//if(buffer[18] != 'P')  			//{  			//    DialogResult result = new DialogResult();  			//    result = MessageBox.Show("Please Check Printer Paper and Continue"'"Print"'MessageBoxButtons.YesNo'MessageBoxIcon.Question'MessageBoxDefaultButton.Button1 );  			//    if (result == DialogResult.Yes)  			//    {  			//        return 2;  			//    }  			//    else  			//    {  			//        return 0;  			//    }  			//}  			//  srPort.WriteTimeout = 200;  			int btw = srPort.BytesToWrite;  			//srPort.Write(mmByte' 0' 3); //set form size to 14  			srPort.Write (setEasyMode);  			//set printer to easy mode  			//srPort.Write(back);  			srPort.Write (LabelData);  			//print label  			srPort.Write (ahead);  			Delay (1000);  			while (srPort.BytesToWrite > 0) {  				Application.DoEvents ();  			}  			//srPort.Write(changeMode);   //set printer to line mode by using {LP}  			//srPort.Write(mByte' 0' 1);  //set form feed  			srPort.Close ();  			//close the serial port  		}  		catch (Exception ex) {  			srPort.Close ();  			//close the serial port  			return (0);  		}  		finally {  			srPort.Close ();  			//close the serial port  		}  		return (1);  	}  	else {  		return (0);  	}  }  catch (Exception) {  	return (0);  }  
Magic Number,PrintAWBLabels,clsOneilOC3,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\clsOneilOC3.cs,PrintLabel,The following statement contains a magic number: try {  	//int option = 0;  	//awb.PadLeft(11' '0');  	string lblHeader = "";  	try {  		lblHeader = getValueFromConf ("lableHeading");  	}  	catch (Exception ex) {  		lblHeader = "GoAir CARGO";  	}  	string ClientPhone = "";  	try {  		ClientPhone = getValueFromConf ("clientContact");  	}  	catch (Exception ex) {  		ClientPhone = "";  	}  	string mhead = "{PRINT:";  	//string name = "@0'50:MF107' HM2' VM2|Jet Airways CARGO|";  	string name = "@0'50:MF107' HM2' VM2|" + lblHeader.Trim () + "|";  	//string lPhone = "@40'170:MF226' HM1' VM1|Ph: 1800222111/09223222111|";  	string lPhone = "@40'170:MF226' HM1' VM1|" + ClientPhone.Trim () + "|";  	string AXB = "@80'50:MF107|AWBNo|";  	string AXBValue1 = "";  	string AXBValue2 = "";  	if (awb.Trim ().Length == 10) {  		AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 6) + "|";  		AXBValue2 = "@115'180:MF226' HM3' VMULT3|" + awb.Substring (6' 4) + "|";  	}  	else if (awb.Trim ().Length == 11) {  		if (awb.Trim ().ToUpper ().Substring (0' 3) == "SAC") {  			AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 3) + "|";  			AXBValue1 += "@135'110:MF226' HM2' VMULT2|" + awb.Substring (3' 4) + "|";  			AXBValue2 = "@115'185:MF226' HM3' VMULT3|" + awb.Substring (7' 4) + "|";  		}  		else {  			AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 7) + "|";  			AXBValue2 = "@115'180:MF226' HM3' VMULT3|" + awb.Substring (7' 4) + "|";  		}  	}  	//string mtype = "@35'140:MF204' HM3' V6|" + type + "|";  	string mitm = "@80'310:MF107|No Of PCS|";  	string mitemValue = "@135'310:MF226' HM3' VMULT2|" + no.ToString () + "/" + item + " |";  	string mdest = "@220'310:MF107|DEST|";  	//string mdestValue = "@255'310:MF226' HM8' VMULT3|" + dest + "|";  	string mdestValue = "@255'310:MF107' HM4' VMULT3|" + dest + "|";  	string destpin = "@300'310:MF107| |";  	string msource = "@220'50:MF107|ORIGIN|";  	//string msourceValue = "@255'50:MF226' HM8' VMULT3|" + source + "|";  	string msourceValue = "@255'50:MF107' HM4' VMULT3|" + source + "|";  	string mvia = "@222'350:MF107' HM3' VM2|" + via + "|";  	//string mwt = "@275'350:MF075' HM3' VM2|WT- " + weight + "|";  	//string mBaxb = "@335'50:BC39N'HIGH 25'WIDE 4|" + axb + "|";  	string mBaxb = "@338'100:BC39N'HIGH 15'WIDE 2|" + awb.Trim () + no.ToString ().Trim ().PadLeft (4' '0') + "|";  	string mLaxb = "@420'150:MF226' HM3' VMULT2|" + awb.Trim () + "|";  	string tDate = DateTime.Now.ToString ("dd-MM-yyyy HH:mm:ss");  	string mtDate = "@470'60:MF107|Date:" + tDate + "|";  	string lFooter = "@508'150:MF226|Powered By QID Ph: 020-40039501|";  	//string mtDate = "@528'60:MF107|Date:" + tDate + "|";  	//string hLine1 = "@0'40:HLINE' length 520' thick 5|";  //  	string hLine2 = "@60'40:HLINE' length 520' thick 5|";  	//  	string vLine1 = "@60'40:VLINE' length 270' thick 5|";  	//  	string vLine3 = "@60'300:VLINE' length 270' thick 5|";  	//  	string vLine2 = "@60'555:VLINE' length 270' thick 5|";  	//  	string hLine4 = "@325'40:HLINE' length 520' thick 5|";  	//  	string hLine3 = "@200'40:HLINE' length 520' thick 5|";  	//  	string mFooter = "}";  	//string changeMode = "{LP}";  	string back = "{BACK:15}";  	string ahead = "{AHEAD:114}";  	byte[] mByte = new byte[1];  	mByte [0] = 14;  	byte[] mmByte = new byte[3];  	mmByte [0] = 27;  	mmByte [1] = 67;  	mmByte [2] = 14;  	byte[] query = new byte[6];  	query [0] = 27;  	query [1] = 123;  	query [2] = 83;  	query [3] = 84;  	query [4] = 63;  	query [5] = 125;  	string config = Convert.ToChar (27) + "{CL!M:1}";  	string LabelData = mhead + name + lPhone + vLine1 + vLine2 + vLine3 + hLine2 + hLine3 + hLine4 + AXB + AXBValue1 + AXBValue2 + mdest + mdestValue + destpin + msource + msourceValue + mvia + mitm + mitemValue + mBaxb + mLaxb + mtDate + lFooter + mFooter;  	if (openport ())//open serial port  	 {  		try {  			//srPort.WriteLine(config);  			srPort.DiscardInBuffer ();  			srPort.DiscardOutBuffer ();  			srPort.Write (query' 0' 6);  			//send query to printer  			Delay (5000);  			//char[] buffer = new char[srPort.BytesToRead];  			//srPort.Read(buffer' 0' srPort.BytesToRead);  			//if(buffer[18] != 'P')  			//{  			//    DialogResult result = new DialogResult();  			//    result = MessageBox.Show("Please Check Printer Paper and Continue"'"Print"'MessageBoxButtons.YesNo'MessageBoxIcon.Question'MessageBoxDefaultButton.Button1 );  			//    if (result == DialogResult.Yes)  			//    {  			//        return 2;  			//    }  			//    else  			//    {  			//        return 0;  			//    }  			//}  			//  srPort.WriteTimeout = 200;  			int btw = srPort.BytesToWrite;  			//srPort.Write(mmByte' 0' 3); //set form size to 14  			srPort.Write (setEasyMode);  			//set printer to easy mode  			//srPort.Write(back);  			srPort.Write (LabelData);  			//print label  			srPort.Write (ahead);  			Delay (1000);  			while (srPort.BytesToWrite > 0) {  				Application.DoEvents ();  			}  			//srPort.Write(changeMode);   //set printer to line mode by using {LP}  			//srPort.Write(mByte' 0' 1);  //set form feed  			srPort.Close ();  			//close the serial port  		}  		catch (Exception ex) {  			srPort.Close ();  			//close the serial port  			return (0);  		}  		finally {  			srPort.Close ();  			//close the serial port  		}  		return (1);  	}  	else {  		return (0);  	}  }  catch (Exception) {  	return (0);  }  
Magic Number,PrintAWBLabels,clsOneilOC3,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\clsOneilOC3.cs,PrintLabel,The following statement contains a magic number: try {  	//int option = 0;  	//awb.PadLeft(11' '0');  	string lblHeader = "";  	try {  		lblHeader = getValueFromConf ("lableHeading");  	}  	catch (Exception ex) {  		lblHeader = "GoAir CARGO";  	}  	string ClientPhone = "";  	try {  		ClientPhone = getValueFromConf ("clientContact");  	}  	catch (Exception ex) {  		ClientPhone = "";  	}  	string mhead = "{PRINT:";  	//string name = "@0'50:MF107' HM2' VM2|Jet Airways CARGO|";  	string name = "@0'50:MF107' HM2' VM2|" + lblHeader.Trim () + "|";  	//string lPhone = "@40'170:MF226' HM1' VM1|Ph: 1800222111/09223222111|";  	string lPhone = "@40'170:MF226' HM1' VM1|" + ClientPhone.Trim () + "|";  	string AXB = "@80'50:MF107|AWBNo|";  	string AXBValue1 = "";  	string AXBValue2 = "";  	if (awb.Trim ().Length == 10) {  		AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 6) + "|";  		AXBValue2 = "@115'180:MF226' HM3' VMULT3|" + awb.Substring (6' 4) + "|";  	}  	else if (awb.Trim ().Length == 11) {  		if (awb.Trim ().ToUpper ().Substring (0' 3) == "SAC") {  			AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 3) + "|";  			AXBValue1 += "@135'110:MF226' HM2' VMULT2|" + awb.Substring (3' 4) + "|";  			AXBValue2 = "@115'185:MF226' HM3' VMULT3|" + awb.Substring (7' 4) + "|";  		}  		else {  			AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 7) + "|";  			AXBValue2 = "@115'180:MF226' HM3' VMULT3|" + awb.Substring (7' 4) + "|";  		}  	}  	//string mtype = "@35'140:MF204' HM3' V6|" + type + "|";  	string mitm = "@80'310:MF107|No Of PCS|";  	string mitemValue = "@135'310:MF226' HM3' VMULT2|" + no.ToString () + "/" + item + " |";  	string mdest = "@220'310:MF107|DEST|";  	//string mdestValue = "@255'310:MF226' HM8' VMULT3|" + dest + "|";  	string mdestValue = "@255'310:MF107' HM4' VMULT3|" + dest + "|";  	string destpin = "@300'310:MF107| |";  	string msource = "@220'50:MF107|ORIGIN|";  	//string msourceValue = "@255'50:MF226' HM8' VMULT3|" + source + "|";  	string msourceValue = "@255'50:MF107' HM4' VMULT3|" + source + "|";  	string mvia = "@222'350:MF107' HM3' VM2|" + via + "|";  	//string mwt = "@275'350:MF075' HM3' VM2|WT- " + weight + "|";  	//string mBaxb = "@335'50:BC39N'HIGH 25'WIDE 4|" + axb + "|";  	string mBaxb = "@338'100:BC39N'HIGH 15'WIDE 2|" + awb.Trim () + no.ToString ().Trim ().PadLeft (4' '0') + "|";  	string mLaxb = "@420'150:MF226' HM3' VMULT2|" + awb.Trim () + "|";  	string tDate = DateTime.Now.ToString ("dd-MM-yyyy HH:mm:ss");  	string mtDate = "@470'60:MF107|Date:" + tDate + "|";  	string lFooter = "@508'150:MF226|Powered By QID Ph: 020-40039501|";  	//string mtDate = "@528'60:MF107|Date:" + tDate + "|";  	//string hLine1 = "@0'40:HLINE' length 520' thick 5|";  //  	string hLine2 = "@60'40:HLINE' length 520' thick 5|";  	//  	string vLine1 = "@60'40:VLINE' length 270' thick 5|";  	//  	string vLine3 = "@60'300:VLINE' length 270' thick 5|";  	//  	string vLine2 = "@60'555:VLINE' length 270' thick 5|";  	//  	string hLine4 = "@325'40:HLINE' length 520' thick 5|";  	//  	string hLine3 = "@200'40:HLINE' length 520' thick 5|";  	//  	string mFooter = "}";  	//string changeMode = "{LP}";  	string back = "{BACK:15}";  	string ahead = "{AHEAD:114}";  	byte[] mByte = new byte[1];  	mByte [0] = 14;  	byte[] mmByte = new byte[3];  	mmByte [0] = 27;  	mmByte [1] = 67;  	mmByte [2] = 14;  	byte[] query = new byte[6];  	query [0] = 27;  	query [1] = 123;  	query [2] = 83;  	query [3] = 84;  	query [4] = 63;  	query [5] = 125;  	string config = Convert.ToChar (27) + "{CL!M:1}";  	string LabelData = mhead + name + lPhone + vLine1 + vLine2 + vLine3 + hLine2 + hLine3 + hLine4 + AXB + AXBValue1 + AXBValue2 + mdest + mdestValue + destpin + msource + msourceValue + mvia + mitm + mitemValue + mBaxb + mLaxb + mtDate + lFooter + mFooter;  	if (openport ())//open serial port  	 {  		try {  			//srPort.WriteLine(config);  			srPort.DiscardInBuffer ();  			srPort.DiscardOutBuffer ();  			srPort.Write (query' 0' 6);  			//send query to printer  			Delay (5000);  			//char[] buffer = new char[srPort.BytesToRead];  			//srPort.Read(buffer' 0' srPort.BytesToRead);  			//if(buffer[18] != 'P')  			//{  			//    DialogResult result = new DialogResult();  			//    result = MessageBox.Show("Please Check Printer Paper and Continue"'"Print"'MessageBoxButtons.YesNo'MessageBoxIcon.Question'MessageBoxDefaultButton.Button1 );  			//    if (result == DialogResult.Yes)  			//    {  			//        return 2;  			//    }  			//    else  			//    {  			//        return 0;  			//    }  			//}  			//  srPort.WriteTimeout = 200;  			int btw = srPort.BytesToWrite;  			//srPort.Write(mmByte' 0' 3); //set form size to 14  			srPort.Write (setEasyMode);  			//set printer to easy mode  			//srPort.Write(back);  			srPort.Write (LabelData);  			//print label  			srPort.Write (ahead);  			Delay (1000);  			while (srPort.BytesToWrite > 0) {  				Application.DoEvents ();  			}  			//srPort.Write(changeMode);   //set printer to line mode by using {LP}  			//srPort.Write(mByte' 0' 1);  //set form feed  			srPort.Close ();  			//close the serial port  		}  		catch (Exception ex) {  			srPort.Close ();  			//close the serial port  			return (0);  		}  		finally {  			srPort.Close ();  			//close the serial port  		}  		return (1);  	}  	else {  		return (0);  	}  }  catch (Exception) {  	return (0);  }  
Magic Number,PrintAWBLabels,clsOneilOC3,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\clsOneilOC3.cs,PrintLabel,The following statement contains a magic number: try {  	//int option = 0;  	//awb.PadLeft(11' '0');  	string lblHeader = "";  	try {  		lblHeader = getValueFromConf ("lableHeading");  	}  	catch (Exception ex) {  		lblHeader = "GoAir CARGO";  	}  	string ClientPhone = "";  	try {  		ClientPhone = getValueFromConf ("clientContact");  	}  	catch (Exception ex) {  		ClientPhone = "";  	}  	string mhead = "{PRINT:";  	//string name = "@0'50:MF107' HM2' VM2|Jet Airways CARGO|";  	string name = "@0'50:MF107' HM2' VM2|" + lblHeader.Trim () + "|";  	//string lPhone = "@40'170:MF226' HM1' VM1|Ph: 1800222111/09223222111|";  	string lPhone = "@40'170:MF226' HM1' VM1|" + ClientPhone.Trim () + "|";  	string AXB = "@80'50:MF107|AWBNo|";  	string AXBValue1 = "";  	string AXBValue2 = "";  	if (awb.Trim ().Length == 10) {  		AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 6) + "|";  		AXBValue2 = "@115'180:MF226' HM3' VMULT3|" + awb.Substring (6' 4) + "|";  	}  	else if (awb.Trim ().Length == 11) {  		if (awb.Trim ().ToUpper ().Substring (0' 3) == "SAC") {  			AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 3) + "|";  			AXBValue1 += "@135'110:MF226' HM2' VMULT2|" + awb.Substring (3' 4) + "|";  			AXBValue2 = "@115'185:MF226' HM3' VMULT3|" + awb.Substring (7' 4) + "|";  		}  		else {  			AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 7) + "|";  			AXBValue2 = "@115'180:MF226' HM3' VMULT3|" + awb.Substring (7' 4) + "|";  		}  	}  	//string mtype = "@35'140:MF204' HM3' V6|" + type + "|";  	string mitm = "@80'310:MF107|No Of PCS|";  	string mitemValue = "@135'310:MF226' HM3' VMULT2|" + no.ToString () + "/" + item + " |";  	string mdest = "@220'310:MF107|DEST|";  	//string mdestValue = "@255'310:MF226' HM8' VMULT3|" + dest + "|";  	string mdestValue = "@255'310:MF107' HM4' VMULT3|" + dest + "|";  	string destpin = "@300'310:MF107| |";  	string msource = "@220'50:MF107|ORIGIN|";  	//string msourceValue = "@255'50:MF226' HM8' VMULT3|" + source + "|";  	string msourceValue = "@255'50:MF107' HM4' VMULT3|" + source + "|";  	string mvia = "@222'350:MF107' HM3' VM2|" + via + "|";  	//string mwt = "@275'350:MF075' HM3' VM2|WT- " + weight + "|";  	//string mBaxb = "@335'50:BC39N'HIGH 25'WIDE 4|" + axb + "|";  	string mBaxb = "@338'100:BC39N'HIGH 15'WIDE 2|" + awb.Trim () + no.ToString ().Trim ().PadLeft (4' '0') + "|";  	string mLaxb = "@420'150:MF226' HM3' VMULT2|" + awb.Trim () + "|";  	string tDate = DateTime.Now.ToString ("dd-MM-yyyy HH:mm:ss");  	string mtDate = "@470'60:MF107|Date:" + tDate + "|";  	string lFooter = "@508'150:MF226|Powered By QID Ph: 020-40039501|";  	//string mtDate = "@528'60:MF107|Date:" + tDate + "|";  	//string hLine1 = "@0'40:HLINE' length 520' thick 5|";  //  	string hLine2 = "@60'40:HLINE' length 520' thick 5|";  	//  	string vLine1 = "@60'40:VLINE' length 270' thick 5|";  	//  	string vLine3 = "@60'300:VLINE' length 270' thick 5|";  	//  	string vLine2 = "@60'555:VLINE' length 270' thick 5|";  	//  	string hLine4 = "@325'40:HLINE' length 520' thick 5|";  	//  	string hLine3 = "@200'40:HLINE' length 520' thick 5|";  	//  	string mFooter = "}";  	//string changeMode = "{LP}";  	string back = "{BACK:15}";  	string ahead = "{AHEAD:114}";  	byte[] mByte = new byte[1];  	mByte [0] = 14;  	byte[] mmByte = new byte[3];  	mmByte [0] = 27;  	mmByte [1] = 67;  	mmByte [2] = 14;  	byte[] query = new byte[6];  	query [0] = 27;  	query [1] = 123;  	query [2] = 83;  	query [3] = 84;  	query [4] = 63;  	query [5] = 125;  	string config = Convert.ToChar (27) + "{CL!M:1}";  	string LabelData = mhead + name + lPhone + vLine1 + vLine2 + vLine3 + hLine2 + hLine3 + hLine4 + AXB + AXBValue1 + AXBValue2 + mdest + mdestValue + destpin + msource + msourceValue + mvia + mitm + mitemValue + mBaxb + mLaxb + mtDate + lFooter + mFooter;  	if (openport ())//open serial port  	 {  		try {  			//srPort.WriteLine(config);  			srPort.DiscardInBuffer ();  			srPort.DiscardOutBuffer ();  			srPort.Write (query' 0' 6);  			//send query to printer  			Delay (5000);  			//char[] buffer = new char[srPort.BytesToRead];  			//srPort.Read(buffer' 0' srPort.BytesToRead);  			//if(buffer[18] != 'P')  			//{  			//    DialogResult result = new DialogResult();  			//    result = MessageBox.Show("Please Check Printer Paper and Continue"'"Print"'MessageBoxButtons.YesNo'MessageBoxIcon.Question'MessageBoxDefaultButton.Button1 );  			//    if (result == DialogResult.Yes)  			//    {  			//        return 2;  			//    }  			//    else  			//    {  			//        return 0;  			//    }  			//}  			//  srPort.WriteTimeout = 200;  			int btw = srPort.BytesToWrite;  			//srPort.Write(mmByte' 0' 3); //set form size to 14  			srPort.Write (setEasyMode);  			//set printer to easy mode  			//srPort.Write(back);  			srPort.Write (LabelData);  			//print label  			srPort.Write (ahead);  			Delay (1000);  			while (srPort.BytesToWrite > 0) {  				Application.DoEvents ();  			}  			//srPort.Write(changeMode);   //set printer to line mode by using {LP}  			//srPort.Write(mByte' 0' 1);  //set form feed  			srPort.Close ();  			//close the serial port  		}  		catch (Exception ex) {  			srPort.Close ();  			//close the serial port  			return (0);  		}  		finally {  			srPort.Close ();  			//close the serial port  		}  		return (1);  	}  	else {  		return (0);  	}  }  catch (Exception) {  	return (0);  }  
Magic Number,PrintAWBLabels,clsOneilOC3,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\clsOneilOC3.cs,PrintLabel,The following statement contains a magic number: try {  	//int option = 0;  	//awb.PadLeft(11' '0');  	string lblHeader = "";  	try {  		lblHeader = getValueFromConf ("lableHeading");  	}  	catch (Exception ex) {  		lblHeader = "GoAir CARGO";  	}  	string ClientPhone = "";  	try {  		ClientPhone = getValueFromConf ("clientContact");  	}  	catch (Exception ex) {  		ClientPhone = "";  	}  	string mhead = "{PRINT:";  	//string name = "@0'50:MF107' HM2' VM2|Jet Airways CARGO|";  	string name = "@0'50:MF107' HM2' VM2|" + lblHeader.Trim () + "|";  	//string lPhone = "@40'170:MF226' HM1' VM1|Ph: 1800222111/09223222111|";  	string lPhone = "@40'170:MF226' HM1' VM1|" + ClientPhone.Trim () + "|";  	string AXB = "@80'50:MF107|AWBNo|";  	string AXBValue1 = "";  	string AXBValue2 = "";  	if (awb.Trim ().Length == 10) {  		AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 6) + "|";  		AXBValue2 = "@115'180:MF226' HM3' VMULT3|" + awb.Substring (6' 4) + "|";  	}  	else if (awb.Trim ().Length == 11) {  		if (awb.Trim ().ToUpper ().Substring (0' 3) == "SAC") {  			AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 3) + "|";  			AXBValue1 += "@135'110:MF226' HM2' VMULT2|" + awb.Substring (3' 4) + "|";  			AXBValue2 = "@115'185:MF226' HM3' VMULT3|" + awb.Substring (7' 4) + "|";  		}  		else {  			AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 7) + "|";  			AXBValue2 = "@115'180:MF226' HM3' VMULT3|" + awb.Substring (7' 4) + "|";  		}  	}  	//string mtype = "@35'140:MF204' HM3' V6|" + type + "|";  	string mitm = "@80'310:MF107|No Of PCS|";  	string mitemValue = "@135'310:MF226' HM3' VMULT2|" + no.ToString () + "/" + item + " |";  	string mdest = "@220'310:MF107|DEST|";  	//string mdestValue = "@255'310:MF226' HM8' VMULT3|" + dest + "|";  	string mdestValue = "@255'310:MF107' HM4' VMULT3|" + dest + "|";  	string destpin = "@300'310:MF107| |";  	string msource = "@220'50:MF107|ORIGIN|";  	//string msourceValue = "@255'50:MF226' HM8' VMULT3|" + source + "|";  	string msourceValue = "@255'50:MF107' HM4' VMULT3|" + source + "|";  	string mvia = "@222'350:MF107' HM3' VM2|" + via + "|";  	//string mwt = "@275'350:MF075' HM3' VM2|WT- " + weight + "|";  	//string mBaxb = "@335'50:BC39N'HIGH 25'WIDE 4|" + axb + "|";  	string mBaxb = "@338'100:BC39N'HIGH 15'WIDE 2|" + awb.Trim () + no.ToString ().Trim ().PadLeft (4' '0') + "|";  	string mLaxb = "@420'150:MF226' HM3' VMULT2|" + awb.Trim () + "|";  	string tDate = DateTime.Now.ToString ("dd-MM-yyyy HH:mm:ss");  	string mtDate = "@470'60:MF107|Date:" + tDate + "|";  	string lFooter = "@508'150:MF226|Powered By QID Ph: 020-40039501|";  	//string mtDate = "@528'60:MF107|Date:" + tDate + "|";  	//string hLine1 = "@0'40:HLINE' length 520' thick 5|";  //  	string hLine2 = "@60'40:HLINE' length 520' thick 5|";  	//  	string vLine1 = "@60'40:VLINE' length 270' thick 5|";  	//  	string vLine3 = "@60'300:VLINE' length 270' thick 5|";  	//  	string vLine2 = "@60'555:VLINE' length 270' thick 5|";  	//  	string hLine4 = "@325'40:HLINE' length 520' thick 5|";  	//  	string hLine3 = "@200'40:HLINE' length 520' thick 5|";  	//  	string mFooter = "}";  	//string changeMode = "{LP}";  	string back = "{BACK:15}";  	string ahead = "{AHEAD:114}";  	byte[] mByte = new byte[1];  	mByte [0] = 14;  	byte[] mmByte = new byte[3];  	mmByte [0] = 27;  	mmByte [1] = 67;  	mmByte [2] = 14;  	byte[] query = new byte[6];  	query [0] = 27;  	query [1] = 123;  	query [2] = 83;  	query [3] = 84;  	query [4] = 63;  	query [5] = 125;  	string config = Convert.ToChar (27) + "{CL!M:1}";  	string LabelData = mhead + name + lPhone + vLine1 + vLine2 + vLine3 + hLine2 + hLine3 + hLine4 + AXB + AXBValue1 + AXBValue2 + mdest + mdestValue + destpin + msource + msourceValue + mvia + mitm + mitemValue + mBaxb + mLaxb + mtDate + lFooter + mFooter;  	if (openport ())//open serial port  	 {  		try {  			//srPort.WriteLine(config);  			srPort.DiscardInBuffer ();  			srPort.DiscardOutBuffer ();  			srPort.Write (query' 0' 6);  			//send query to printer  			Delay (5000);  			//char[] buffer = new char[srPort.BytesToRead];  			//srPort.Read(buffer' 0' srPort.BytesToRead);  			//if(buffer[18] != 'P')  			//{  			//    DialogResult result = new DialogResult();  			//    result = MessageBox.Show("Please Check Printer Paper and Continue"'"Print"'MessageBoxButtons.YesNo'MessageBoxIcon.Question'MessageBoxDefaultButton.Button1 );  			//    if (result == DialogResult.Yes)  			//    {  			//        return 2;  			//    }  			//    else  			//    {  			//        return 0;  			//    }  			//}  			//  srPort.WriteTimeout = 200;  			int btw = srPort.BytesToWrite;  			//srPort.Write(mmByte' 0' 3); //set form size to 14  			srPort.Write (setEasyMode);  			//set printer to easy mode  			//srPort.Write(back);  			srPort.Write (LabelData);  			//print label  			srPort.Write (ahead);  			Delay (1000);  			while (srPort.BytesToWrite > 0) {  				Application.DoEvents ();  			}  			//srPort.Write(changeMode);   //set printer to line mode by using {LP}  			//srPort.Write(mByte' 0' 1);  //set form feed  			srPort.Close ();  			//close the serial port  		}  		catch (Exception ex) {  			srPort.Close ();  			//close the serial port  			return (0);  		}  		finally {  			srPort.Close ();  			//close the serial port  		}  		return (1);  	}  	else {  		return (0);  	}  }  catch (Exception) {  	return (0);  }  
Magic Number,PrintAWBLabels,clsOneilOC3,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\clsOneilOC3.cs,PrintLabel,The following statement contains a magic number: try {  	//int option = 0;  	//awb.PadLeft(11' '0');  	string lblHeader = "";  	try {  		lblHeader = getValueFromConf ("lableHeading");  	}  	catch (Exception ex) {  		lblHeader = "GoAir CARGO";  	}  	string ClientPhone = "";  	try {  		ClientPhone = getValueFromConf ("clientContact");  	}  	catch (Exception ex) {  		ClientPhone = "";  	}  	string mhead = "{PRINT:";  	//string name = "@0'50:MF107' HM2' VM2|Jet Airways CARGO|";  	string name = "@0'50:MF107' HM2' VM2|" + lblHeader.Trim () + "|";  	//string lPhone = "@40'170:MF226' HM1' VM1|Ph: 1800222111/09223222111|";  	string lPhone = "@40'170:MF226' HM1' VM1|" + ClientPhone.Trim () + "|";  	string AXB = "@80'50:MF107|AWBNo|";  	string AXBValue1 = "";  	string AXBValue2 = "";  	if (awb.Trim ().Length == 10) {  		AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 6) + "|";  		AXBValue2 = "@115'180:MF226' HM3' VMULT3|" + awb.Substring (6' 4) + "|";  	}  	else if (awb.Trim ().Length == 11) {  		if (awb.Trim ().ToUpper ().Substring (0' 3) == "SAC") {  			AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 3) + "|";  			AXBValue1 += "@135'110:MF226' HM2' VMULT2|" + awb.Substring (3' 4) + "|";  			AXBValue2 = "@115'185:MF226' HM3' VMULT3|" + awb.Substring (7' 4) + "|";  		}  		else {  			AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 7) + "|";  			AXBValue2 = "@115'180:MF226' HM3' VMULT3|" + awb.Substring (7' 4) + "|";  		}  	}  	//string mtype = "@35'140:MF204' HM3' V6|" + type + "|";  	string mitm = "@80'310:MF107|No Of PCS|";  	string mitemValue = "@135'310:MF226' HM3' VMULT2|" + no.ToString () + "/" + item + " |";  	string mdest = "@220'310:MF107|DEST|";  	//string mdestValue = "@255'310:MF226' HM8' VMULT3|" + dest + "|";  	string mdestValue = "@255'310:MF107' HM4' VMULT3|" + dest + "|";  	string destpin = "@300'310:MF107| |";  	string msource = "@220'50:MF107|ORIGIN|";  	//string msourceValue = "@255'50:MF226' HM8' VMULT3|" + source + "|";  	string msourceValue = "@255'50:MF107' HM4' VMULT3|" + source + "|";  	string mvia = "@222'350:MF107' HM3' VM2|" + via + "|";  	//string mwt = "@275'350:MF075' HM3' VM2|WT- " + weight + "|";  	//string mBaxb = "@335'50:BC39N'HIGH 25'WIDE 4|" + axb + "|";  	string mBaxb = "@338'100:BC39N'HIGH 15'WIDE 2|" + awb.Trim () + no.ToString ().Trim ().PadLeft (4' '0') + "|";  	string mLaxb = "@420'150:MF226' HM3' VMULT2|" + awb.Trim () + "|";  	string tDate = DateTime.Now.ToString ("dd-MM-yyyy HH:mm:ss");  	string mtDate = "@470'60:MF107|Date:" + tDate + "|";  	string lFooter = "@508'150:MF226|Powered By QID Ph: 020-40039501|";  	//string mtDate = "@528'60:MF107|Date:" + tDate + "|";  	//string hLine1 = "@0'40:HLINE' length 520' thick 5|";  //  	string hLine2 = "@60'40:HLINE' length 520' thick 5|";  	//  	string vLine1 = "@60'40:VLINE' length 270' thick 5|";  	//  	string vLine3 = "@60'300:VLINE' length 270' thick 5|";  	//  	string vLine2 = "@60'555:VLINE' length 270' thick 5|";  	//  	string hLine4 = "@325'40:HLINE' length 520' thick 5|";  	//  	string hLine3 = "@200'40:HLINE' length 520' thick 5|";  	//  	string mFooter = "}";  	//string changeMode = "{LP}";  	string back = "{BACK:15}";  	string ahead = "{AHEAD:114}";  	byte[] mByte = new byte[1];  	mByte [0] = 14;  	byte[] mmByte = new byte[3];  	mmByte [0] = 27;  	mmByte [1] = 67;  	mmByte [2] = 14;  	byte[] query = new byte[6];  	query [0] = 27;  	query [1] = 123;  	query [2] = 83;  	query [3] = 84;  	query [4] = 63;  	query [5] = 125;  	string config = Convert.ToChar (27) + "{CL!M:1}";  	string LabelData = mhead + name + lPhone + vLine1 + vLine2 + vLine3 + hLine2 + hLine3 + hLine4 + AXB + AXBValue1 + AXBValue2 + mdest + mdestValue + destpin + msource + msourceValue + mvia + mitm + mitemValue + mBaxb + mLaxb + mtDate + lFooter + mFooter;  	if (openport ())//open serial port  	 {  		try {  			//srPort.WriteLine(config);  			srPort.DiscardInBuffer ();  			srPort.DiscardOutBuffer ();  			srPort.Write (query' 0' 6);  			//send query to printer  			Delay (5000);  			//char[] buffer = new char[srPort.BytesToRead];  			//srPort.Read(buffer' 0' srPort.BytesToRead);  			//if(buffer[18] != 'P')  			//{  			//    DialogResult result = new DialogResult();  			//    result = MessageBox.Show("Please Check Printer Paper and Continue"'"Print"'MessageBoxButtons.YesNo'MessageBoxIcon.Question'MessageBoxDefaultButton.Button1 );  			//    if (result == DialogResult.Yes)  			//    {  			//        return 2;  			//    }  			//    else  			//    {  			//        return 0;  			//    }  			//}  			//  srPort.WriteTimeout = 200;  			int btw = srPort.BytesToWrite;  			//srPort.Write(mmByte' 0' 3); //set form size to 14  			srPort.Write (setEasyMode);  			//set printer to easy mode  			//srPort.Write(back);  			srPort.Write (LabelData);  			//print label  			srPort.Write (ahead);  			Delay (1000);  			while (srPort.BytesToWrite > 0) {  				Application.DoEvents ();  			}  			//srPort.Write(changeMode);   //set printer to line mode by using {LP}  			//srPort.Write(mByte' 0' 1);  //set form feed  			srPort.Close ();  			//close the serial port  		}  		catch (Exception ex) {  			srPort.Close ();  			//close the serial port  			return (0);  		}  		finally {  			srPort.Close ();  			//close the serial port  		}  		return (1);  	}  	else {  		return (0);  	}  }  catch (Exception) {  	return (0);  }  
Magic Number,PrintAWBLabels,clsOneilOC3,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\clsOneilOC3.cs,PrintLabel,The following statement contains a magic number: try {  	//int option = 0;  	//awb.PadLeft(11' '0');  	string lblHeader = "";  	try {  		lblHeader = getValueFromConf ("lableHeading");  	}  	catch (Exception ex) {  		lblHeader = "GoAir CARGO";  	}  	string ClientPhone = "";  	try {  		ClientPhone = getValueFromConf ("clientContact");  	}  	catch (Exception ex) {  		ClientPhone = "";  	}  	string mhead = "{PRINT:";  	//string name = "@0'50:MF107' HM2' VM2|Jet Airways CARGO|";  	string name = "@0'50:MF107' HM2' VM2|" + lblHeader.Trim () + "|";  	//string lPhone = "@40'170:MF226' HM1' VM1|Ph: 1800222111/09223222111|";  	string lPhone = "@40'170:MF226' HM1' VM1|" + ClientPhone.Trim () + "|";  	string AXB = "@80'50:MF107|AWBNo|";  	string AXBValue1 = "";  	string AXBValue2 = "";  	if (awb.Trim ().Length == 10) {  		AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 6) + "|";  		AXBValue2 = "@115'180:MF226' HM3' VMULT3|" + awb.Substring (6' 4) + "|";  	}  	else if (awb.Trim ().Length == 11) {  		if (awb.Trim ().ToUpper ().Substring (0' 3) == "SAC") {  			AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 3) + "|";  			AXBValue1 += "@135'110:MF226' HM2' VMULT2|" + awb.Substring (3' 4) + "|";  			AXBValue2 = "@115'185:MF226' HM3' VMULT3|" + awb.Substring (7' 4) + "|";  		}  		else {  			AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 7) + "|";  			AXBValue2 = "@115'180:MF226' HM3' VMULT3|" + awb.Substring (7' 4) + "|";  		}  	}  	//string mtype = "@35'140:MF204' HM3' V6|" + type + "|";  	string mitm = "@80'310:MF107|No Of PCS|";  	string mitemValue = "@135'310:MF226' HM3' VMULT2|" + no.ToString () + "/" + item + " |";  	string mdest = "@220'310:MF107|DEST|";  	//string mdestValue = "@255'310:MF226' HM8' VMULT3|" + dest + "|";  	string mdestValue = "@255'310:MF107' HM4' VMULT3|" + dest + "|";  	string destpin = "@300'310:MF107| |";  	string msource = "@220'50:MF107|ORIGIN|";  	//string msourceValue = "@255'50:MF226' HM8' VMULT3|" + source + "|";  	string msourceValue = "@255'50:MF107' HM4' VMULT3|" + source + "|";  	string mvia = "@222'350:MF107' HM3' VM2|" + via + "|";  	//string mwt = "@275'350:MF075' HM3' VM2|WT- " + weight + "|";  	//string mBaxb = "@335'50:BC39N'HIGH 25'WIDE 4|" + axb + "|";  	string mBaxb = "@338'100:BC39N'HIGH 15'WIDE 2|" + awb.Trim () + no.ToString ().Trim ().PadLeft (4' '0') + "|";  	string mLaxb = "@420'150:MF226' HM3' VMULT2|" + awb.Trim () + "|";  	string tDate = DateTime.Now.ToString ("dd-MM-yyyy HH:mm:ss");  	string mtDate = "@470'60:MF107|Date:" + tDate + "|";  	string lFooter = "@508'150:MF226|Powered By QID Ph: 020-40039501|";  	//string mtDate = "@528'60:MF107|Date:" + tDate + "|";  	//string hLine1 = "@0'40:HLINE' length 520' thick 5|";  //  	string hLine2 = "@60'40:HLINE' length 520' thick 5|";  	//  	string vLine1 = "@60'40:VLINE' length 270' thick 5|";  	//  	string vLine3 = "@60'300:VLINE' length 270' thick 5|";  	//  	string vLine2 = "@60'555:VLINE' length 270' thick 5|";  	//  	string hLine4 = "@325'40:HLINE' length 520' thick 5|";  	//  	string hLine3 = "@200'40:HLINE' length 520' thick 5|";  	//  	string mFooter = "}";  	//string changeMode = "{LP}";  	string back = "{BACK:15}";  	string ahead = "{AHEAD:114}";  	byte[] mByte = new byte[1];  	mByte [0] = 14;  	byte[] mmByte = new byte[3];  	mmByte [0] = 27;  	mmByte [1] = 67;  	mmByte [2] = 14;  	byte[] query = new byte[6];  	query [0] = 27;  	query [1] = 123;  	query [2] = 83;  	query [3] = 84;  	query [4] = 63;  	query [5] = 125;  	string config = Convert.ToChar (27) + "{CL!M:1}";  	string LabelData = mhead + name + lPhone + vLine1 + vLine2 + vLine3 + hLine2 + hLine3 + hLine4 + AXB + AXBValue1 + AXBValue2 + mdest + mdestValue + destpin + msource + msourceValue + mvia + mitm + mitemValue + mBaxb + mLaxb + mtDate + lFooter + mFooter;  	if (openport ())//open serial port  	 {  		try {  			//srPort.WriteLine(config);  			srPort.DiscardInBuffer ();  			srPort.DiscardOutBuffer ();  			srPort.Write (query' 0' 6);  			//send query to printer  			Delay (5000);  			//char[] buffer = new char[srPort.BytesToRead];  			//srPort.Read(buffer' 0' srPort.BytesToRead);  			//if(buffer[18] != 'P')  			//{  			//    DialogResult result = new DialogResult();  			//    result = MessageBox.Show("Please Check Printer Paper and Continue"'"Print"'MessageBoxButtons.YesNo'MessageBoxIcon.Question'MessageBoxDefaultButton.Button1 );  			//    if (result == DialogResult.Yes)  			//    {  			//        return 2;  			//    }  			//    else  			//    {  			//        return 0;  			//    }  			//}  			//  srPort.WriteTimeout = 200;  			int btw = srPort.BytesToWrite;  			//srPort.Write(mmByte' 0' 3); //set form size to 14  			srPort.Write (setEasyMode);  			//set printer to easy mode  			//srPort.Write(back);  			srPort.Write (LabelData);  			//print label  			srPort.Write (ahead);  			Delay (1000);  			while (srPort.BytesToWrite > 0) {  				Application.DoEvents ();  			}  			//srPort.Write(changeMode);   //set printer to line mode by using {LP}  			//srPort.Write(mByte' 0' 1);  //set form feed  			srPort.Close ();  			//close the serial port  		}  		catch (Exception ex) {  			srPort.Close ();  			//close the serial port  			return (0);  		}  		finally {  			srPort.Close ();  			//close the serial port  		}  		return (1);  	}  	else {  		return (0);  	}  }  catch (Exception) {  	return (0);  }  
Magic Number,PrintAWBLabels,clsOneilOC3,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\clsOneilOC3.cs,PrintLabel,The following statement contains a magic number: try {  	//int option = 0;  	//awb.PadLeft(11' '0');  	string lblHeader = "";  	try {  		lblHeader = getValueFromConf ("lableHeading");  	}  	catch (Exception ex) {  		lblHeader = "GoAir CARGO";  	}  	string ClientPhone = "";  	try {  		ClientPhone = getValueFromConf ("clientContact");  	}  	catch (Exception ex) {  		ClientPhone = "";  	}  	string mhead = "{PRINT:";  	//string name = "@0'50:MF107' HM2' VM2|Jet Airways CARGO|";  	string name = "@0'50:MF107' HM2' VM2|" + lblHeader.Trim () + "|";  	//string lPhone = "@40'170:MF226' HM1' VM1|Ph: 1800222111/09223222111|";  	string lPhone = "@40'170:MF226' HM1' VM1|" + ClientPhone.Trim () + "|";  	string AXB = "@80'50:MF107|AWBNo|";  	string AXBValue1 = "";  	string AXBValue2 = "";  	if (awb.Trim ().Length == 10) {  		AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 6) + "|";  		AXBValue2 = "@115'180:MF226' HM3' VMULT3|" + awb.Substring (6' 4) + "|";  	}  	else if (awb.Trim ().Length == 11) {  		if (awb.Trim ().ToUpper ().Substring (0' 3) == "SAC") {  			AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 3) + "|";  			AXBValue1 += "@135'110:MF226' HM2' VMULT2|" + awb.Substring (3' 4) + "|";  			AXBValue2 = "@115'185:MF226' HM3' VMULT3|" + awb.Substring (7' 4) + "|";  		}  		else {  			AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 7) + "|";  			AXBValue2 = "@115'180:MF226' HM3' VMULT3|" + awb.Substring (7' 4) + "|";  		}  	}  	//string mtype = "@35'140:MF204' HM3' V6|" + type + "|";  	string mitm = "@80'310:MF107|No Of PCS|";  	string mitemValue = "@135'310:MF226' HM3' VMULT2|" + no.ToString () + "/" + item + " |";  	string mdest = "@220'310:MF107|DEST|";  	//string mdestValue = "@255'310:MF226' HM8' VMULT3|" + dest + "|";  	string mdestValue = "@255'310:MF107' HM4' VMULT3|" + dest + "|";  	string destpin = "@300'310:MF107| |";  	string msource = "@220'50:MF107|ORIGIN|";  	//string msourceValue = "@255'50:MF226' HM8' VMULT3|" + source + "|";  	string msourceValue = "@255'50:MF107' HM4' VMULT3|" + source + "|";  	string mvia = "@222'350:MF107' HM3' VM2|" + via + "|";  	//string mwt = "@275'350:MF075' HM3' VM2|WT- " + weight + "|";  	//string mBaxb = "@335'50:BC39N'HIGH 25'WIDE 4|" + axb + "|";  	string mBaxb = "@338'100:BC39N'HIGH 15'WIDE 2|" + awb.Trim () + no.ToString ().Trim ().PadLeft (4' '0') + "|";  	string mLaxb = "@420'150:MF226' HM3' VMULT2|" + awb.Trim () + "|";  	string tDate = DateTime.Now.ToString ("dd-MM-yyyy HH:mm:ss");  	string mtDate = "@470'60:MF107|Date:" + tDate + "|";  	string lFooter = "@508'150:MF226|Powered By QID Ph: 020-40039501|";  	//string mtDate = "@528'60:MF107|Date:" + tDate + "|";  	//string hLine1 = "@0'40:HLINE' length 520' thick 5|";  //  	string hLine2 = "@60'40:HLINE' length 520' thick 5|";  	//  	string vLine1 = "@60'40:VLINE' length 270' thick 5|";  	//  	string vLine3 = "@60'300:VLINE' length 270' thick 5|";  	//  	string vLine2 = "@60'555:VLINE' length 270' thick 5|";  	//  	string hLine4 = "@325'40:HLINE' length 520' thick 5|";  	//  	string hLine3 = "@200'40:HLINE' length 520' thick 5|";  	//  	string mFooter = "}";  	//string changeMode = "{LP}";  	string back = "{BACK:15}";  	string ahead = "{AHEAD:114}";  	byte[] mByte = new byte[1];  	mByte [0] = 14;  	byte[] mmByte = new byte[3];  	mmByte [0] = 27;  	mmByte [1] = 67;  	mmByte [2] = 14;  	byte[] query = new byte[6];  	query [0] = 27;  	query [1] = 123;  	query [2] = 83;  	query [3] = 84;  	query [4] = 63;  	query [5] = 125;  	string config = Convert.ToChar (27) + "{CL!M:1}";  	string LabelData = mhead + name + lPhone + vLine1 + vLine2 + vLine3 + hLine2 + hLine3 + hLine4 + AXB + AXBValue1 + AXBValue2 + mdest + mdestValue + destpin + msource + msourceValue + mvia + mitm + mitemValue + mBaxb + mLaxb + mtDate + lFooter + mFooter;  	if (openport ())//open serial port  	 {  		try {  			//srPort.WriteLine(config);  			srPort.DiscardInBuffer ();  			srPort.DiscardOutBuffer ();  			srPort.Write (query' 0' 6);  			//send query to printer  			Delay (5000);  			//char[] buffer = new char[srPort.BytesToRead];  			//srPort.Read(buffer' 0' srPort.BytesToRead);  			//if(buffer[18] != 'P')  			//{  			//    DialogResult result = new DialogResult();  			//    result = MessageBox.Show("Please Check Printer Paper and Continue"'"Print"'MessageBoxButtons.YesNo'MessageBoxIcon.Question'MessageBoxDefaultButton.Button1 );  			//    if (result == DialogResult.Yes)  			//    {  			//        return 2;  			//    }  			//    else  			//    {  			//        return 0;  			//    }  			//}  			//  srPort.WriteTimeout = 200;  			int btw = srPort.BytesToWrite;  			//srPort.Write(mmByte' 0' 3); //set form size to 14  			srPort.Write (setEasyMode);  			//set printer to easy mode  			//srPort.Write(back);  			srPort.Write (LabelData);  			//print label  			srPort.Write (ahead);  			Delay (1000);  			while (srPort.BytesToWrite > 0) {  				Application.DoEvents ();  			}  			//srPort.Write(changeMode);   //set printer to line mode by using {LP}  			//srPort.Write(mByte' 0' 1);  //set form feed  			srPort.Close ();  			//close the serial port  		}  		catch (Exception ex) {  			srPort.Close ();  			//close the serial port  			return (0);  		}  		finally {  			srPort.Close ();  			//close the serial port  		}  		return (1);  	}  	else {  		return (0);  	}  }  catch (Exception) {  	return (0);  }  
Magic Number,PrintAWBLabels,clsOneilOC3,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\clsOneilOC3.cs,PrintLabel,The following statement contains a magic number: try {  	//int option = 0;  	//awb.PadLeft(11' '0');  	string lblHeader = "";  	try {  		lblHeader = getValueFromConf ("lableHeading");  	}  	catch (Exception ex) {  		lblHeader = "GoAir CARGO";  	}  	string ClientPhone = "";  	try {  		ClientPhone = getValueFromConf ("clientContact");  	}  	catch (Exception ex) {  		ClientPhone = "";  	}  	string mhead = "{PRINT:";  	//string name = "@0'50:MF107' HM2' VM2|Jet Airways CARGO|";  	string name = "@0'50:MF107' HM2' VM2|" + lblHeader.Trim () + "|";  	//string lPhone = "@40'170:MF226' HM1' VM1|Ph: 1800222111/09223222111|";  	string lPhone = "@40'170:MF226' HM1' VM1|" + ClientPhone.Trim () + "|";  	string AXB = "@80'50:MF107|AWBNo|";  	string AXBValue1 = "";  	string AXBValue2 = "";  	if (awb.Trim ().Length == 10) {  		AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 6) + "|";  		AXBValue2 = "@115'180:MF226' HM3' VMULT3|" + awb.Substring (6' 4) + "|";  	}  	else if (awb.Trim ().Length == 11) {  		if (awb.Trim ().ToUpper ().Substring (0' 3) == "SAC") {  			AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 3) + "|";  			AXBValue1 += "@135'110:MF226' HM2' VMULT2|" + awb.Substring (3' 4) + "|";  			AXBValue2 = "@115'185:MF226' HM3' VMULT3|" + awb.Substring (7' 4) + "|";  		}  		else {  			AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 7) + "|";  			AXBValue2 = "@115'180:MF226' HM3' VMULT3|" + awb.Substring (7' 4) + "|";  		}  	}  	//string mtype = "@35'140:MF204' HM3' V6|" + type + "|";  	string mitm = "@80'310:MF107|No Of PCS|";  	string mitemValue = "@135'310:MF226' HM3' VMULT2|" + no.ToString () + "/" + item + " |";  	string mdest = "@220'310:MF107|DEST|";  	//string mdestValue = "@255'310:MF226' HM8' VMULT3|" + dest + "|";  	string mdestValue = "@255'310:MF107' HM4' VMULT3|" + dest + "|";  	string destpin = "@300'310:MF107| |";  	string msource = "@220'50:MF107|ORIGIN|";  	//string msourceValue = "@255'50:MF226' HM8' VMULT3|" + source + "|";  	string msourceValue = "@255'50:MF107' HM4' VMULT3|" + source + "|";  	string mvia = "@222'350:MF107' HM3' VM2|" + via + "|";  	//string mwt = "@275'350:MF075' HM3' VM2|WT- " + weight + "|";  	//string mBaxb = "@335'50:BC39N'HIGH 25'WIDE 4|" + axb + "|";  	string mBaxb = "@338'100:BC39N'HIGH 15'WIDE 2|" + awb.Trim () + no.ToString ().Trim ().PadLeft (4' '0') + "|";  	string mLaxb = "@420'150:MF226' HM3' VMULT2|" + awb.Trim () + "|";  	string tDate = DateTime.Now.ToString ("dd-MM-yyyy HH:mm:ss");  	string mtDate = "@470'60:MF107|Date:" + tDate + "|";  	string lFooter = "@508'150:MF226|Powered By QID Ph: 020-40039501|";  	//string mtDate = "@528'60:MF107|Date:" + tDate + "|";  	//string hLine1 = "@0'40:HLINE' length 520' thick 5|";  //  	string hLine2 = "@60'40:HLINE' length 520' thick 5|";  	//  	string vLine1 = "@60'40:VLINE' length 270' thick 5|";  	//  	string vLine3 = "@60'300:VLINE' length 270' thick 5|";  	//  	string vLine2 = "@60'555:VLINE' length 270' thick 5|";  	//  	string hLine4 = "@325'40:HLINE' length 520' thick 5|";  	//  	string hLine3 = "@200'40:HLINE' length 520' thick 5|";  	//  	string mFooter = "}";  	//string changeMode = "{LP}";  	string back = "{BACK:15}";  	string ahead = "{AHEAD:114}";  	byte[] mByte = new byte[1];  	mByte [0] = 14;  	byte[] mmByte = new byte[3];  	mmByte [0] = 27;  	mmByte [1] = 67;  	mmByte [2] = 14;  	byte[] query = new byte[6];  	query [0] = 27;  	query [1] = 123;  	query [2] = 83;  	query [3] = 84;  	query [4] = 63;  	query [5] = 125;  	string config = Convert.ToChar (27) + "{CL!M:1}";  	string LabelData = mhead + name + lPhone + vLine1 + vLine2 + vLine3 + hLine2 + hLine3 + hLine4 + AXB + AXBValue1 + AXBValue2 + mdest + mdestValue + destpin + msource + msourceValue + mvia + mitm + mitemValue + mBaxb + mLaxb + mtDate + lFooter + mFooter;  	if (openport ())//open serial port  	 {  		try {  			//srPort.WriteLine(config);  			srPort.DiscardInBuffer ();  			srPort.DiscardOutBuffer ();  			srPort.Write (query' 0' 6);  			//send query to printer  			Delay (5000);  			//char[] buffer = new char[srPort.BytesToRead];  			//srPort.Read(buffer' 0' srPort.BytesToRead);  			//if(buffer[18] != 'P')  			//{  			//    DialogResult result = new DialogResult();  			//    result = MessageBox.Show("Please Check Printer Paper and Continue"'"Print"'MessageBoxButtons.YesNo'MessageBoxIcon.Question'MessageBoxDefaultButton.Button1 );  			//    if (result == DialogResult.Yes)  			//    {  			//        return 2;  			//    }  			//    else  			//    {  			//        return 0;  			//    }  			//}  			//  srPort.WriteTimeout = 200;  			int btw = srPort.BytesToWrite;  			//srPort.Write(mmByte' 0' 3); //set form size to 14  			srPort.Write (setEasyMode);  			//set printer to easy mode  			//srPort.Write(back);  			srPort.Write (LabelData);  			//print label  			srPort.Write (ahead);  			Delay (1000);  			while (srPort.BytesToWrite > 0) {  				Application.DoEvents ();  			}  			//srPort.Write(changeMode);   //set printer to line mode by using {LP}  			//srPort.Write(mByte' 0' 1);  //set form feed  			srPort.Close ();  			//close the serial port  		}  		catch (Exception ex) {  			srPort.Close ();  			//close the serial port  			return (0);  		}  		finally {  			srPort.Close ();  			//close the serial port  		}  		return (1);  	}  	else {  		return (0);  	}  }  catch (Exception) {  	return (0);  }  
Magic Number,PrintAWBLabels,clsOneilOC3,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\clsOneilOC3.cs,PrintLabel,The following statement contains a magic number: try {  	//int option = 0;  	//awb.PadLeft(11' '0');  	string lblHeader = "";  	try {  		lblHeader = getValueFromConf ("lableHeading");  	}  	catch (Exception ex) {  		lblHeader = "GoAir CARGO";  	}  	string ClientPhone = "";  	try {  		ClientPhone = getValueFromConf ("clientContact");  	}  	catch (Exception ex) {  		ClientPhone = "";  	}  	string mhead = "{PRINT:";  	//string name = "@0'50:MF107' HM2' VM2|Jet Airways CARGO|";  	string name = "@0'50:MF107' HM2' VM2|" + lblHeader.Trim () + "|";  	//string lPhone = "@40'170:MF226' HM1' VM1|Ph: 1800222111/09223222111|";  	string lPhone = "@40'170:MF226' HM1' VM1|" + ClientPhone.Trim () + "|";  	string AXB = "@80'50:MF107|AWBNo|";  	string AXBValue1 = "";  	string AXBValue2 = "";  	if (awb.Trim ().Length == 10) {  		AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 6) + "|";  		AXBValue2 = "@115'180:MF226' HM3' VMULT3|" + awb.Substring (6' 4) + "|";  	}  	else if (awb.Trim ().Length == 11) {  		if (awb.Trim ().ToUpper ().Substring (0' 3) == "SAC") {  			AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 3) + "|";  			AXBValue1 += "@135'110:MF226' HM2' VMULT2|" + awb.Substring (3' 4) + "|";  			AXBValue2 = "@115'185:MF226' HM3' VMULT3|" + awb.Substring (7' 4) + "|";  		}  		else {  			AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 7) + "|";  			AXBValue2 = "@115'180:MF226' HM3' VMULT3|" + awb.Substring (7' 4) + "|";  		}  	}  	//string mtype = "@35'140:MF204' HM3' V6|" + type + "|";  	string mitm = "@80'310:MF107|No Of PCS|";  	string mitemValue = "@135'310:MF226' HM3' VMULT2|" + no.ToString () + "/" + item + " |";  	string mdest = "@220'310:MF107|DEST|";  	//string mdestValue = "@255'310:MF226' HM8' VMULT3|" + dest + "|";  	string mdestValue = "@255'310:MF107' HM4' VMULT3|" + dest + "|";  	string destpin = "@300'310:MF107| |";  	string msource = "@220'50:MF107|ORIGIN|";  	//string msourceValue = "@255'50:MF226' HM8' VMULT3|" + source + "|";  	string msourceValue = "@255'50:MF107' HM4' VMULT3|" + source + "|";  	string mvia = "@222'350:MF107' HM3' VM2|" + via + "|";  	//string mwt = "@275'350:MF075' HM3' VM2|WT- " + weight + "|";  	//string mBaxb = "@335'50:BC39N'HIGH 25'WIDE 4|" + axb + "|";  	string mBaxb = "@338'100:BC39N'HIGH 15'WIDE 2|" + awb.Trim () + no.ToString ().Trim ().PadLeft (4' '0') + "|";  	string mLaxb = "@420'150:MF226' HM3' VMULT2|" + awb.Trim () + "|";  	string tDate = DateTime.Now.ToString ("dd-MM-yyyy HH:mm:ss");  	string mtDate = "@470'60:MF107|Date:" + tDate + "|";  	string lFooter = "@508'150:MF226|Powered By QID Ph: 020-40039501|";  	//string mtDate = "@528'60:MF107|Date:" + tDate + "|";  	//string hLine1 = "@0'40:HLINE' length 520' thick 5|";  //  	string hLine2 = "@60'40:HLINE' length 520' thick 5|";  	//  	string vLine1 = "@60'40:VLINE' length 270' thick 5|";  	//  	string vLine3 = "@60'300:VLINE' length 270' thick 5|";  	//  	string vLine2 = "@60'555:VLINE' length 270' thick 5|";  	//  	string hLine4 = "@325'40:HLINE' length 520' thick 5|";  	//  	string hLine3 = "@200'40:HLINE' length 520' thick 5|";  	//  	string mFooter = "}";  	//string changeMode = "{LP}";  	string back = "{BACK:15}";  	string ahead = "{AHEAD:114}";  	byte[] mByte = new byte[1];  	mByte [0] = 14;  	byte[] mmByte = new byte[3];  	mmByte [0] = 27;  	mmByte [1] = 67;  	mmByte [2] = 14;  	byte[] query = new byte[6];  	query [0] = 27;  	query [1] = 123;  	query [2] = 83;  	query [3] = 84;  	query [4] = 63;  	query [5] = 125;  	string config = Convert.ToChar (27) + "{CL!M:1}";  	string LabelData = mhead + name + lPhone + vLine1 + vLine2 + vLine3 + hLine2 + hLine3 + hLine4 + AXB + AXBValue1 + AXBValue2 + mdest + mdestValue + destpin + msource + msourceValue + mvia + mitm + mitemValue + mBaxb + mLaxb + mtDate + lFooter + mFooter;  	if (openport ())//open serial port  	 {  		try {  			//srPort.WriteLine(config);  			srPort.DiscardInBuffer ();  			srPort.DiscardOutBuffer ();  			srPort.Write (query' 0' 6);  			//send query to printer  			Delay (5000);  			//char[] buffer = new char[srPort.BytesToRead];  			//srPort.Read(buffer' 0' srPort.BytesToRead);  			//if(buffer[18] != 'P')  			//{  			//    DialogResult result = new DialogResult();  			//    result = MessageBox.Show("Please Check Printer Paper and Continue"'"Print"'MessageBoxButtons.YesNo'MessageBoxIcon.Question'MessageBoxDefaultButton.Button1 );  			//    if (result == DialogResult.Yes)  			//    {  			//        return 2;  			//    }  			//    else  			//    {  			//        return 0;  			//    }  			//}  			//  srPort.WriteTimeout = 200;  			int btw = srPort.BytesToWrite;  			//srPort.Write(mmByte' 0' 3); //set form size to 14  			srPort.Write (setEasyMode);  			//set printer to easy mode  			//srPort.Write(back);  			srPort.Write (LabelData);  			//print label  			srPort.Write (ahead);  			Delay (1000);  			while (srPort.BytesToWrite > 0) {  				Application.DoEvents ();  			}  			//srPort.Write(changeMode);   //set printer to line mode by using {LP}  			//srPort.Write(mByte' 0' 1);  //set form feed  			srPort.Close ();  			//close the serial port  		}  		catch (Exception ex) {  			srPort.Close ();  			//close the serial port  			return (0);  		}  		finally {  			srPort.Close ();  			//close the serial port  		}  		return (1);  	}  	else {  		return (0);  	}  }  catch (Exception) {  	return (0);  }  
Magic Number,PrintAWBLabels,clsOneilOC3,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\clsOneilOC3.cs,PrintLabel,The following statement contains a magic number: try {  	//int option = 0;  	//awb.PadLeft(11' '0');  	string lblHeader = "";  	try {  		lblHeader = getValueFromConf ("lableHeading");  	}  	catch (Exception ex) {  		lblHeader = "GoAir CARGO";  	}  	string ClientPhone = "";  	try {  		ClientPhone = getValueFromConf ("clientContact");  	}  	catch (Exception ex) {  		ClientPhone = "";  	}  	string mhead = "{PRINT:";  	//string name = "@0'50:MF107' HM2' VM2|Jet Airways CARGO|";  	string name = "@0'50:MF107' HM2' VM2|" + lblHeader.Trim () + "|";  	//string lPhone = "@40'170:MF226' HM1' VM1|Ph: 1800222111/09223222111|";  	string lPhone = "@40'170:MF226' HM1' VM1|" + ClientPhone.Trim () + "|";  	string AXB = "@80'50:MF107|AWBNo|";  	string AXBValue1 = "";  	string AXBValue2 = "";  	if (awb.Trim ().Length == 10) {  		AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 6) + "|";  		AXBValue2 = "@115'180:MF226' HM3' VMULT3|" + awb.Substring (6' 4) + "|";  	}  	else if (awb.Trim ().Length == 11) {  		if (awb.Trim ().ToUpper ().Substring (0' 3) == "SAC") {  			AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 3) + "|";  			AXBValue1 += "@135'110:MF226' HM2' VMULT2|" + awb.Substring (3' 4) + "|";  			AXBValue2 = "@115'185:MF226' HM3' VMULT3|" + awb.Substring (7' 4) + "|";  		}  		else {  			AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 7) + "|";  			AXBValue2 = "@115'180:MF226' HM3' VMULT3|" + awb.Substring (7' 4) + "|";  		}  	}  	//string mtype = "@35'140:MF204' HM3' V6|" + type + "|";  	string mitm = "@80'310:MF107|No Of PCS|";  	string mitemValue = "@135'310:MF226' HM3' VMULT2|" + no.ToString () + "/" + item + " |";  	string mdest = "@220'310:MF107|DEST|";  	//string mdestValue = "@255'310:MF226' HM8' VMULT3|" + dest + "|";  	string mdestValue = "@255'310:MF107' HM4' VMULT3|" + dest + "|";  	string destpin = "@300'310:MF107| |";  	string msource = "@220'50:MF107|ORIGIN|";  	//string msourceValue = "@255'50:MF226' HM8' VMULT3|" + source + "|";  	string msourceValue = "@255'50:MF107' HM4' VMULT3|" + source + "|";  	string mvia = "@222'350:MF107' HM3' VM2|" + via + "|";  	//string mwt = "@275'350:MF075' HM3' VM2|WT- " + weight + "|";  	//string mBaxb = "@335'50:BC39N'HIGH 25'WIDE 4|" + axb + "|";  	string mBaxb = "@338'100:BC39N'HIGH 15'WIDE 2|" + awb.Trim () + no.ToString ().Trim ().PadLeft (4' '0') + "|";  	string mLaxb = "@420'150:MF226' HM3' VMULT2|" + awb.Trim () + "|";  	string tDate = DateTime.Now.ToString ("dd-MM-yyyy HH:mm:ss");  	string mtDate = "@470'60:MF107|Date:" + tDate + "|";  	string lFooter = "@508'150:MF226|Powered By QID Ph: 020-40039501|";  	//string mtDate = "@528'60:MF107|Date:" + tDate + "|";  	//string hLine1 = "@0'40:HLINE' length 520' thick 5|";  //  	string hLine2 = "@60'40:HLINE' length 520' thick 5|";  	//  	string vLine1 = "@60'40:VLINE' length 270' thick 5|";  	//  	string vLine3 = "@60'300:VLINE' length 270' thick 5|";  	//  	string vLine2 = "@60'555:VLINE' length 270' thick 5|";  	//  	string hLine4 = "@325'40:HLINE' length 520' thick 5|";  	//  	string hLine3 = "@200'40:HLINE' length 520' thick 5|";  	//  	string mFooter = "}";  	//string changeMode = "{LP}";  	string back = "{BACK:15}";  	string ahead = "{AHEAD:114}";  	byte[] mByte = new byte[1];  	mByte [0] = 14;  	byte[] mmByte = new byte[3];  	mmByte [0] = 27;  	mmByte [1] = 67;  	mmByte [2] = 14;  	byte[] query = new byte[6];  	query [0] = 27;  	query [1] = 123;  	query [2] = 83;  	query [3] = 84;  	query [4] = 63;  	query [5] = 125;  	string config = Convert.ToChar (27) + "{CL!M:1}";  	string LabelData = mhead + name + lPhone + vLine1 + vLine2 + vLine3 + hLine2 + hLine3 + hLine4 + AXB + AXBValue1 + AXBValue2 + mdest + mdestValue + destpin + msource + msourceValue + mvia + mitm + mitemValue + mBaxb + mLaxb + mtDate + lFooter + mFooter;  	if (openport ())//open serial port  	 {  		try {  			//srPort.WriteLine(config);  			srPort.DiscardInBuffer ();  			srPort.DiscardOutBuffer ();  			srPort.Write (query' 0' 6);  			//send query to printer  			Delay (5000);  			//char[] buffer = new char[srPort.BytesToRead];  			//srPort.Read(buffer' 0' srPort.BytesToRead);  			//if(buffer[18] != 'P')  			//{  			//    DialogResult result = new DialogResult();  			//    result = MessageBox.Show("Please Check Printer Paper and Continue"'"Print"'MessageBoxButtons.YesNo'MessageBoxIcon.Question'MessageBoxDefaultButton.Button1 );  			//    if (result == DialogResult.Yes)  			//    {  			//        return 2;  			//    }  			//    else  			//    {  			//        return 0;  			//    }  			//}  			//  srPort.WriteTimeout = 200;  			int btw = srPort.BytesToWrite;  			//srPort.Write(mmByte' 0' 3); //set form size to 14  			srPort.Write (setEasyMode);  			//set printer to easy mode  			//srPort.Write(back);  			srPort.Write (LabelData);  			//print label  			srPort.Write (ahead);  			Delay (1000);  			while (srPort.BytesToWrite > 0) {  				Application.DoEvents ();  			}  			//srPort.Write(changeMode);   //set printer to line mode by using {LP}  			//srPort.Write(mByte' 0' 1);  //set form feed  			srPort.Close ();  			//close the serial port  		}  		catch (Exception ex) {  			srPort.Close ();  			//close the serial port  			return (0);  		}  		finally {  			srPort.Close ();  			//close the serial port  		}  		return (1);  	}  	else {  		return (0);  	}  }  catch (Exception) {  	return (0);  }  
Magic Number,PrintAWBLabels,clsOneilOC3,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\clsOneilOC3.cs,PrintLabel,The following statement contains a magic number: try {  	//int option = 0;  	//awb.PadLeft(11' '0');  	string lblHeader = "";  	try {  		lblHeader = getValueFromConf ("lableHeading");  	}  	catch (Exception ex) {  		lblHeader = "GoAir CARGO";  	}  	string ClientPhone = "";  	try {  		ClientPhone = getValueFromConf ("clientContact");  	}  	catch (Exception ex) {  		ClientPhone = "";  	}  	string mhead = "{PRINT:";  	//string name = "@0'50:MF107' HM2' VM2|Jet Airways CARGO|";  	string name = "@0'50:MF107' HM2' VM2|" + lblHeader.Trim () + "|";  	//string lPhone = "@40'170:MF226' HM1' VM1|Ph: 1800222111/09223222111|";  	string lPhone = "@40'170:MF226' HM1' VM1|" + ClientPhone.Trim () + "|";  	string AXB = "@80'50:MF107|AWBNo|";  	string AXBValue1 = "";  	string AXBValue2 = "";  	if (awb.Trim ().Length == 10) {  		AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 6) + "|";  		AXBValue2 = "@115'180:MF226' HM3' VMULT3|" + awb.Substring (6' 4) + "|";  	}  	else if (awb.Trim ().Length == 11) {  		if (awb.Trim ().ToUpper ().Substring (0' 3) == "SAC") {  			AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 3) + "|";  			AXBValue1 += "@135'110:MF226' HM2' VMULT2|" + awb.Substring (3' 4) + "|";  			AXBValue2 = "@115'185:MF226' HM3' VMULT3|" + awb.Substring (7' 4) + "|";  		}  		else {  			AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 7) + "|";  			AXBValue2 = "@115'180:MF226' HM3' VMULT3|" + awb.Substring (7' 4) + "|";  		}  	}  	//string mtype = "@35'140:MF204' HM3' V6|" + type + "|";  	string mitm = "@80'310:MF107|No Of PCS|";  	string mitemValue = "@135'310:MF226' HM3' VMULT2|" + no.ToString () + "/" + item + " |";  	string mdest = "@220'310:MF107|DEST|";  	//string mdestValue = "@255'310:MF226' HM8' VMULT3|" + dest + "|";  	string mdestValue = "@255'310:MF107' HM4' VMULT3|" + dest + "|";  	string destpin = "@300'310:MF107| |";  	string msource = "@220'50:MF107|ORIGIN|";  	//string msourceValue = "@255'50:MF226' HM8' VMULT3|" + source + "|";  	string msourceValue = "@255'50:MF107' HM4' VMULT3|" + source + "|";  	string mvia = "@222'350:MF107' HM3' VM2|" + via + "|";  	//string mwt = "@275'350:MF075' HM3' VM2|WT- " + weight + "|";  	//string mBaxb = "@335'50:BC39N'HIGH 25'WIDE 4|" + axb + "|";  	string mBaxb = "@338'100:BC39N'HIGH 15'WIDE 2|" + awb.Trim () + no.ToString ().Trim ().PadLeft (4' '0') + "|";  	string mLaxb = "@420'150:MF226' HM3' VMULT2|" + awb.Trim () + "|";  	string tDate = DateTime.Now.ToString ("dd-MM-yyyy HH:mm:ss");  	string mtDate = "@470'60:MF107|Date:" + tDate + "|";  	string lFooter = "@508'150:MF226|Powered By QID Ph: 020-40039501|";  	//string mtDate = "@528'60:MF107|Date:" + tDate + "|";  	//string hLine1 = "@0'40:HLINE' length 520' thick 5|";  //  	string hLine2 = "@60'40:HLINE' length 520' thick 5|";  	//  	string vLine1 = "@60'40:VLINE' length 270' thick 5|";  	//  	string vLine3 = "@60'300:VLINE' length 270' thick 5|";  	//  	string vLine2 = "@60'555:VLINE' length 270' thick 5|";  	//  	string hLine4 = "@325'40:HLINE' length 520' thick 5|";  	//  	string hLine3 = "@200'40:HLINE' length 520' thick 5|";  	//  	string mFooter = "}";  	//string changeMode = "{LP}";  	string back = "{BACK:15}";  	string ahead = "{AHEAD:114}";  	byte[] mByte = new byte[1];  	mByte [0] = 14;  	byte[] mmByte = new byte[3];  	mmByte [0] = 27;  	mmByte [1] = 67;  	mmByte [2] = 14;  	byte[] query = new byte[6];  	query [0] = 27;  	query [1] = 123;  	query [2] = 83;  	query [3] = 84;  	query [4] = 63;  	query [5] = 125;  	string config = Convert.ToChar (27) + "{CL!M:1}";  	string LabelData = mhead + name + lPhone + vLine1 + vLine2 + vLine3 + hLine2 + hLine3 + hLine4 + AXB + AXBValue1 + AXBValue2 + mdest + mdestValue + destpin + msource + msourceValue + mvia + mitm + mitemValue + mBaxb + mLaxb + mtDate + lFooter + mFooter;  	if (openport ())//open serial port  	 {  		try {  			//srPort.WriteLine(config);  			srPort.DiscardInBuffer ();  			srPort.DiscardOutBuffer ();  			srPort.Write (query' 0' 6);  			//send query to printer  			Delay (5000);  			//char[] buffer = new char[srPort.BytesToRead];  			//srPort.Read(buffer' 0' srPort.BytesToRead);  			//if(buffer[18] != 'P')  			//{  			//    DialogResult result = new DialogResult();  			//    result = MessageBox.Show("Please Check Printer Paper and Continue"'"Print"'MessageBoxButtons.YesNo'MessageBoxIcon.Question'MessageBoxDefaultButton.Button1 );  			//    if (result == DialogResult.Yes)  			//    {  			//        return 2;  			//    }  			//    else  			//    {  			//        return 0;  			//    }  			//}  			//  srPort.WriteTimeout = 200;  			int btw = srPort.BytesToWrite;  			//srPort.Write(mmByte' 0' 3); //set form size to 14  			srPort.Write (setEasyMode);  			//set printer to easy mode  			//srPort.Write(back);  			srPort.Write (LabelData);  			//print label  			srPort.Write (ahead);  			Delay (1000);  			while (srPort.BytesToWrite > 0) {  				Application.DoEvents ();  			}  			//srPort.Write(changeMode);   //set printer to line mode by using {LP}  			//srPort.Write(mByte' 0' 1);  //set form feed  			srPort.Close ();  			//close the serial port  		}  		catch (Exception ex) {  			srPort.Close ();  			//close the serial port  			return (0);  		}  		finally {  			srPort.Close ();  			//close the serial port  		}  		return (1);  	}  	else {  		return (0);  	}  }  catch (Exception) {  	return (0);  }  
Magic Number,PrintAWBLabels,clsOneilOC3,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\clsOneilOC3.cs,PrintLabel,The following statement contains a magic number: try {  	//int option = 0;  	//awb.PadLeft(11' '0');  	string lblHeader = "";  	try {  		lblHeader = getValueFromConf ("lableHeading");  	}  	catch (Exception ex) {  		lblHeader = "GoAir CARGO";  	}  	string ClientPhone = "";  	try {  		ClientPhone = getValueFromConf ("clientContact");  	}  	catch (Exception ex) {  		ClientPhone = "";  	}  	string mhead = "{PRINT:";  	//string name = "@0'50:MF107' HM2' VM2|Jet Airways CARGO|";  	string name = "@0'50:MF107' HM2' VM2|" + lblHeader.Trim () + "|";  	//string lPhone = "@40'170:MF226' HM1' VM1|Ph: 1800222111/09223222111|";  	string lPhone = "@40'170:MF226' HM1' VM1|" + ClientPhone.Trim () + "|";  	string AXB = "@80'50:MF107|AWBNo|";  	string AXBValue1 = "";  	string AXBValue2 = "";  	if (awb.Trim ().Length == 10) {  		AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 6) + "|";  		AXBValue2 = "@115'180:MF226' HM3' VMULT3|" + awb.Substring (6' 4) + "|";  	}  	else if (awb.Trim ().Length == 11) {  		if (awb.Trim ().ToUpper ().Substring (0' 3) == "SAC") {  			AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 3) + "|";  			AXBValue1 += "@135'110:MF226' HM2' VMULT2|" + awb.Substring (3' 4) + "|";  			AXBValue2 = "@115'185:MF226' HM3' VMULT3|" + awb.Substring (7' 4) + "|";  		}  		else {  			AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 7) + "|";  			AXBValue2 = "@115'180:MF226' HM3' VMULT3|" + awb.Substring (7' 4) + "|";  		}  	}  	//string mtype = "@35'140:MF204' HM3' V6|" + type + "|";  	string mitm = "@80'310:MF107|No Of PCS|";  	string mitemValue = "@135'310:MF226' HM3' VMULT2|" + no.ToString () + "/" + item + " |";  	string mdest = "@220'310:MF107|DEST|";  	//string mdestValue = "@255'310:MF226' HM8' VMULT3|" + dest + "|";  	string mdestValue = "@255'310:MF107' HM4' VMULT3|" + dest + "|";  	string destpin = "@300'310:MF107| |";  	string msource = "@220'50:MF107|ORIGIN|";  	//string msourceValue = "@255'50:MF226' HM8' VMULT3|" + source + "|";  	string msourceValue = "@255'50:MF107' HM4' VMULT3|" + source + "|";  	string mvia = "@222'350:MF107' HM3' VM2|" + via + "|";  	//string mwt = "@275'350:MF075' HM3' VM2|WT- " + weight + "|";  	//string mBaxb = "@335'50:BC39N'HIGH 25'WIDE 4|" + axb + "|";  	string mBaxb = "@338'100:BC39N'HIGH 15'WIDE 2|" + awb.Trim () + no.ToString ().Trim ().PadLeft (4' '0') + "|";  	string mLaxb = "@420'150:MF226' HM3' VMULT2|" + awb.Trim () + "|";  	string tDate = DateTime.Now.ToString ("dd-MM-yyyy HH:mm:ss");  	string mtDate = "@470'60:MF107|Date:" + tDate + "|";  	string lFooter = "@508'150:MF226|Powered By QID Ph: 020-40039501|";  	//string mtDate = "@528'60:MF107|Date:" + tDate + "|";  	//string hLine1 = "@0'40:HLINE' length 520' thick 5|";  //  	string hLine2 = "@60'40:HLINE' length 520' thick 5|";  	//  	string vLine1 = "@60'40:VLINE' length 270' thick 5|";  	//  	string vLine3 = "@60'300:VLINE' length 270' thick 5|";  	//  	string vLine2 = "@60'555:VLINE' length 270' thick 5|";  	//  	string hLine4 = "@325'40:HLINE' length 520' thick 5|";  	//  	string hLine3 = "@200'40:HLINE' length 520' thick 5|";  	//  	string mFooter = "}";  	//string changeMode = "{LP}";  	string back = "{BACK:15}";  	string ahead = "{AHEAD:114}";  	byte[] mByte = new byte[1];  	mByte [0] = 14;  	byte[] mmByte = new byte[3];  	mmByte [0] = 27;  	mmByte [1] = 67;  	mmByte [2] = 14;  	byte[] query = new byte[6];  	query [0] = 27;  	query [1] = 123;  	query [2] = 83;  	query [3] = 84;  	query [4] = 63;  	query [5] = 125;  	string config = Convert.ToChar (27) + "{CL!M:1}";  	string LabelData = mhead + name + lPhone + vLine1 + vLine2 + vLine3 + hLine2 + hLine3 + hLine4 + AXB + AXBValue1 + AXBValue2 + mdest + mdestValue + destpin + msource + msourceValue + mvia + mitm + mitemValue + mBaxb + mLaxb + mtDate + lFooter + mFooter;  	if (openport ())//open serial port  	 {  		try {  			//srPort.WriteLine(config);  			srPort.DiscardInBuffer ();  			srPort.DiscardOutBuffer ();  			srPort.Write (query' 0' 6);  			//send query to printer  			Delay (5000);  			//char[] buffer = new char[srPort.BytesToRead];  			//srPort.Read(buffer' 0' srPort.BytesToRead);  			//if(buffer[18] != 'P')  			//{  			//    DialogResult result = new DialogResult();  			//    result = MessageBox.Show("Please Check Printer Paper and Continue"'"Print"'MessageBoxButtons.YesNo'MessageBoxIcon.Question'MessageBoxDefaultButton.Button1 );  			//    if (result == DialogResult.Yes)  			//    {  			//        return 2;  			//    }  			//    else  			//    {  			//        return 0;  			//    }  			//}  			//  srPort.WriteTimeout = 200;  			int btw = srPort.BytesToWrite;  			//srPort.Write(mmByte' 0' 3); //set form size to 14  			srPort.Write (setEasyMode);  			//set printer to easy mode  			//srPort.Write(back);  			srPort.Write (LabelData);  			//print label  			srPort.Write (ahead);  			Delay (1000);  			while (srPort.BytesToWrite > 0) {  				Application.DoEvents ();  			}  			//srPort.Write(changeMode);   //set printer to line mode by using {LP}  			//srPort.Write(mByte' 0' 1);  //set form feed  			srPort.Close ();  			//close the serial port  		}  		catch (Exception ex) {  			srPort.Close ();  			//close the serial port  			return (0);  		}  		finally {  			srPort.Close ();  			//close the serial port  		}  		return (1);  	}  	else {  		return (0);  	}  }  catch (Exception) {  	return (0);  }  
Magic Number,PrintAWBLabels,clsOneilOC3,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\clsOneilOC3.cs,PrintLabel,The following statement contains a magic number: try {  	//int option = 0;  	//awb.PadLeft(11' '0');  	string lblHeader = "";  	try {  		lblHeader = getValueFromConf ("lableHeading");  	}  	catch (Exception ex) {  		lblHeader = "GoAir CARGO";  	}  	string ClientPhone = "";  	try {  		ClientPhone = getValueFromConf ("clientContact");  	}  	catch (Exception ex) {  		ClientPhone = "";  	}  	string mhead = "{PRINT:";  	//string name = "@0'50:MF107' HM2' VM2|Jet Airways CARGO|";  	string name = "@0'50:MF107' HM2' VM2|" + lblHeader.Trim () + "|";  	//string lPhone = "@40'170:MF226' HM1' VM1|Ph: 1800222111/09223222111|";  	string lPhone = "@40'170:MF226' HM1' VM1|" + ClientPhone.Trim () + "|";  	string AXB = "@80'50:MF107|AWBNo|";  	string AXBValue1 = "";  	string AXBValue2 = "";  	if (awb.Trim ().Length == 10) {  		AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 6) + "|";  		AXBValue2 = "@115'180:MF226' HM3' VMULT3|" + awb.Substring (6' 4) + "|";  	}  	else if (awb.Trim ().Length == 11) {  		if (awb.Trim ().ToUpper ().Substring (0' 3) == "SAC") {  			AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 3) + "|";  			AXBValue1 += "@135'110:MF226' HM2' VMULT2|" + awb.Substring (3' 4) + "|";  			AXBValue2 = "@115'185:MF226' HM3' VMULT3|" + awb.Substring (7' 4) + "|";  		}  		else {  			AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 7) + "|";  			AXBValue2 = "@115'180:MF226' HM3' VMULT3|" + awb.Substring (7' 4) + "|";  		}  	}  	//string mtype = "@35'140:MF204' HM3' V6|" + type + "|";  	string mitm = "@80'310:MF107|No Of PCS|";  	string mitemValue = "@135'310:MF226' HM3' VMULT2|" + no.ToString () + "/" + item + " |";  	string mdest = "@220'310:MF107|DEST|";  	//string mdestValue = "@255'310:MF226' HM8' VMULT3|" + dest + "|";  	string mdestValue = "@255'310:MF107' HM4' VMULT3|" + dest + "|";  	string destpin = "@300'310:MF107| |";  	string msource = "@220'50:MF107|ORIGIN|";  	//string msourceValue = "@255'50:MF226' HM8' VMULT3|" + source + "|";  	string msourceValue = "@255'50:MF107' HM4' VMULT3|" + source + "|";  	string mvia = "@222'350:MF107' HM3' VM2|" + via + "|";  	//string mwt = "@275'350:MF075' HM3' VM2|WT- " + weight + "|";  	//string mBaxb = "@335'50:BC39N'HIGH 25'WIDE 4|" + axb + "|";  	string mBaxb = "@338'100:BC39N'HIGH 15'WIDE 2|" + awb.Trim () + no.ToString ().Trim ().PadLeft (4' '0') + "|";  	string mLaxb = "@420'150:MF226' HM3' VMULT2|" + awb.Trim () + "|";  	string tDate = DateTime.Now.ToString ("dd-MM-yyyy HH:mm:ss");  	string mtDate = "@470'60:MF107|Date:" + tDate + "|";  	string lFooter = "@508'150:MF226|Powered By QID Ph: 020-40039501|";  	//string mtDate = "@528'60:MF107|Date:" + tDate + "|";  	//string hLine1 = "@0'40:HLINE' length 520' thick 5|";  //  	string hLine2 = "@60'40:HLINE' length 520' thick 5|";  	//  	string vLine1 = "@60'40:VLINE' length 270' thick 5|";  	//  	string vLine3 = "@60'300:VLINE' length 270' thick 5|";  	//  	string vLine2 = "@60'555:VLINE' length 270' thick 5|";  	//  	string hLine4 = "@325'40:HLINE' length 520' thick 5|";  	//  	string hLine3 = "@200'40:HLINE' length 520' thick 5|";  	//  	string mFooter = "}";  	//string changeMode = "{LP}";  	string back = "{BACK:15}";  	string ahead = "{AHEAD:114}";  	byte[] mByte = new byte[1];  	mByte [0] = 14;  	byte[] mmByte = new byte[3];  	mmByte [0] = 27;  	mmByte [1] = 67;  	mmByte [2] = 14;  	byte[] query = new byte[6];  	query [0] = 27;  	query [1] = 123;  	query [2] = 83;  	query [3] = 84;  	query [4] = 63;  	query [5] = 125;  	string config = Convert.ToChar (27) + "{CL!M:1}";  	string LabelData = mhead + name + lPhone + vLine1 + vLine2 + vLine3 + hLine2 + hLine3 + hLine4 + AXB + AXBValue1 + AXBValue2 + mdest + mdestValue + destpin + msource + msourceValue + mvia + mitm + mitemValue + mBaxb + mLaxb + mtDate + lFooter + mFooter;  	if (openport ())//open serial port  	 {  		try {  			//srPort.WriteLine(config);  			srPort.DiscardInBuffer ();  			srPort.DiscardOutBuffer ();  			srPort.Write (query' 0' 6);  			//send query to printer  			Delay (5000);  			//char[] buffer = new char[srPort.BytesToRead];  			//srPort.Read(buffer' 0' srPort.BytesToRead);  			//if(buffer[18] != 'P')  			//{  			//    DialogResult result = new DialogResult();  			//    result = MessageBox.Show("Please Check Printer Paper and Continue"'"Print"'MessageBoxButtons.YesNo'MessageBoxIcon.Question'MessageBoxDefaultButton.Button1 );  			//    if (result == DialogResult.Yes)  			//    {  			//        return 2;  			//    }  			//    else  			//    {  			//        return 0;  			//    }  			//}  			//  srPort.WriteTimeout = 200;  			int btw = srPort.BytesToWrite;  			//srPort.Write(mmByte' 0' 3); //set form size to 14  			srPort.Write (setEasyMode);  			//set printer to easy mode  			//srPort.Write(back);  			srPort.Write (LabelData);  			//print label  			srPort.Write (ahead);  			Delay (1000);  			while (srPort.BytesToWrite > 0) {  				Application.DoEvents ();  			}  			//srPort.Write(changeMode);   //set printer to line mode by using {LP}  			//srPort.Write(mByte' 0' 1);  //set form feed  			srPort.Close ();  			//close the serial port  		}  		catch (Exception ex) {  			srPort.Close ();  			//close the serial port  			return (0);  		}  		finally {  			srPort.Close ();  			//close the serial port  		}  		return (1);  	}  	else {  		return (0);  	}  }  catch (Exception) {  	return (0);  }  
Magic Number,PrintAWBLabels,clsOneilOC3,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\clsOneilOC3.cs,PrintLabel,The following statement contains a magic number: try {  	//int option = 0;  	//awb.PadLeft(11' '0');  	string lblHeader = "";  	try {  		lblHeader = getValueFromConf ("lableHeading");  	}  	catch (Exception ex) {  		lblHeader = "GoAir CARGO";  	}  	string ClientPhone = "";  	try {  		ClientPhone = getValueFromConf ("clientContact");  	}  	catch (Exception ex) {  		ClientPhone = "";  	}  	string mhead = "{PRINT:";  	//string name = "@0'50:MF107' HM2' VM2|Jet Airways CARGO|";  	string name = "@0'50:MF107' HM2' VM2|" + lblHeader.Trim () + "|";  	//string lPhone = "@40'170:MF226' HM1' VM1|Ph: 1800222111/09223222111|";  	string lPhone = "@40'170:MF226' HM1' VM1|" + ClientPhone.Trim () + "|";  	string AXB = "@80'50:MF107|AWBNo|";  	string AXBValue1 = "";  	string AXBValue2 = "";  	if (awb.Trim ().Length == 10) {  		AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 6) + "|";  		AXBValue2 = "@115'180:MF226' HM3' VMULT3|" + awb.Substring (6' 4) + "|";  	}  	else if (awb.Trim ().Length == 11) {  		if (awb.Trim ().ToUpper ().Substring (0' 3) == "SAC") {  			AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 3) + "|";  			AXBValue1 += "@135'110:MF226' HM2' VMULT2|" + awb.Substring (3' 4) + "|";  			AXBValue2 = "@115'185:MF226' HM3' VMULT3|" + awb.Substring (7' 4) + "|";  		}  		else {  			AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 7) + "|";  			AXBValue2 = "@115'180:MF226' HM3' VMULT3|" + awb.Substring (7' 4) + "|";  		}  	}  	//string mtype = "@35'140:MF204' HM3' V6|" + type + "|";  	string mitm = "@80'310:MF107|No Of PCS|";  	string mitemValue = "@135'310:MF226' HM3' VMULT2|" + no.ToString () + "/" + item + " |";  	string mdest = "@220'310:MF107|DEST|";  	//string mdestValue = "@255'310:MF226' HM8' VMULT3|" + dest + "|";  	string mdestValue = "@255'310:MF107' HM4' VMULT3|" + dest + "|";  	string destpin = "@300'310:MF107| |";  	string msource = "@220'50:MF107|ORIGIN|";  	//string msourceValue = "@255'50:MF226' HM8' VMULT3|" + source + "|";  	string msourceValue = "@255'50:MF107' HM4' VMULT3|" + source + "|";  	string mvia = "@222'350:MF107' HM3' VM2|" + via + "|";  	//string mwt = "@275'350:MF075' HM3' VM2|WT- " + weight + "|";  	//string mBaxb = "@335'50:BC39N'HIGH 25'WIDE 4|" + axb + "|";  	string mBaxb = "@338'100:BC39N'HIGH 15'WIDE 2|" + awb.Trim () + no.ToString ().Trim ().PadLeft (4' '0') + "|";  	string mLaxb = "@420'150:MF226' HM3' VMULT2|" + awb.Trim () + "|";  	string tDate = DateTime.Now.ToString ("dd-MM-yyyy HH:mm:ss");  	string mtDate = "@470'60:MF107|Date:" + tDate + "|";  	string lFooter = "@508'150:MF226|Powered By QID Ph: 020-40039501|";  	//string mtDate = "@528'60:MF107|Date:" + tDate + "|";  	//string hLine1 = "@0'40:HLINE' length 520' thick 5|";  //  	string hLine2 = "@60'40:HLINE' length 520' thick 5|";  	//  	string vLine1 = "@60'40:VLINE' length 270' thick 5|";  	//  	string vLine3 = "@60'300:VLINE' length 270' thick 5|";  	//  	string vLine2 = "@60'555:VLINE' length 270' thick 5|";  	//  	string hLine4 = "@325'40:HLINE' length 520' thick 5|";  	//  	string hLine3 = "@200'40:HLINE' length 520' thick 5|";  	//  	string mFooter = "}";  	//string changeMode = "{LP}";  	string back = "{BACK:15}";  	string ahead = "{AHEAD:114}";  	byte[] mByte = new byte[1];  	mByte [0] = 14;  	byte[] mmByte = new byte[3];  	mmByte [0] = 27;  	mmByte [1] = 67;  	mmByte [2] = 14;  	byte[] query = new byte[6];  	query [0] = 27;  	query [1] = 123;  	query [2] = 83;  	query [3] = 84;  	query [4] = 63;  	query [5] = 125;  	string config = Convert.ToChar (27) + "{CL!M:1}";  	string LabelData = mhead + name + lPhone + vLine1 + vLine2 + vLine3 + hLine2 + hLine3 + hLine4 + AXB + AXBValue1 + AXBValue2 + mdest + mdestValue + destpin + msource + msourceValue + mvia + mitm + mitemValue + mBaxb + mLaxb + mtDate + lFooter + mFooter;  	if (openport ())//open serial port  	 {  		try {  			//srPort.WriteLine(config);  			srPort.DiscardInBuffer ();  			srPort.DiscardOutBuffer ();  			srPort.Write (query' 0' 6);  			//send query to printer  			Delay (5000);  			//char[] buffer = new char[srPort.BytesToRead];  			//srPort.Read(buffer' 0' srPort.BytesToRead);  			//if(buffer[18] != 'P')  			//{  			//    DialogResult result = new DialogResult();  			//    result = MessageBox.Show("Please Check Printer Paper and Continue"'"Print"'MessageBoxButtons.YesNo'MessageBoxIcon.Question'MessageBoxDefaultButton.Button1 );  			//    if (result == DialogResult.Yes)  			//    {  			//        return 2;  			//    }  			//    else  			//    {  			//        return 0;  			//    }  			//}  			//  srPort.WriteTimeout = 200;  			int btw = srPort.BytesToWrite;  			//srPort.Write(mmByte' 0' 3); //set form size to 14  			srPort.Write (setEasyMode);  			//set printer to easy mode  			//srPort.Write(back);  			srPort.Write (LabelData);  			//print label  			srPort.Write (ahead);  			Delay (1000);  			while (srPort.BytesToWrite > 0) {  				Application.DoEvents ();  			}  			//srPort.Write(changeMode);   //set printer to line mode by using {LP}  			//srPort.Write(mByte' 0' 1);  //set form feed  			srPort.Close ();  			//close the serial port  		}  		catch (Exception ex) {  			srPort.Close ();  			//close the serial port  			return (0);  		}  		finally {  			srPort.Close ();  			//close the serial port  		}  		return (1);  	}  	else {  		return (0);  	}  }  catch (Exception) {  	return (0);  }  
Magic Number,PrintAWBLabels,clsOneilOC3,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\clsOneilOC3.cs,PrintLabel,The following statement contains a magic number: try {  	//int option = 0;  	//awb.PadLeft(11' '0');  	string lblHeader = "";  	try {  		lblHeader = getValueFromConf ("lableHeading");  	}  	catch (Exception ex) {  		lblHeader = "GoAir CARGO";  	}  	string ClientPhone = "";  	try {  		ClientPhone = getValueFromConf ("clientContact");  	}  	catch (Exception ex) {  		ClientPhone = "";  	}  	string mhead = "{PRINT:";  	//string name = "@0'50:MF107' HM2' VM2|Jet Airways CARGO|";  	string name = "@0'50:MF107' HM2' VM2|" + lblHeader.Trim () + "|";  	//string lPhone = "@40'170:MF226' HM1' VM1|Ph: 1800222111/09223222111|";  	string lPhone = "@40'170:MF226' HM1' VM1|" + ClientPhone.Trim () + "|";  	string AXB = "@80'50:MF107|AWBNo|";  	string AXBValue1 = "";  	string AXBValue2 = "";  	if (awb.Trim ().Length == 10) {  		AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 6) + "|";  		AXBValue2 = "@115'180:MF226' HM3' VMULT3|" + awb.Substring (6' 4) + "|";  	}  	else if (awb.Trim ().Length == 11) {  		if (awb.Trim ().ToUpper ().Substring (0' 3) == "SAC") {  			AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 3) + "|";  			AXBValue1 += "@135'110:MF226' HM2' VMULT2|" + awb.Substring (3' 4) + "|";  			AXBValue2 = "@115'185:MF226' HM3' VMULT3|" + awb.Substring (7' 4) + "|";  		}  		else {  			AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 7) + "|";  			AXBValue2 = "@115'180:MF226' HM3' VMULT3|" + awb.Substring (7' 4) + "|";  		}  	}  	//string mtype = "@35'140:MF204' HM3' V6|" + type + "|";  	string mitm = "@80'310:MF107|No Of PCS|";  	string mitemValue = "@135'310:MF226' HM3' VMULT2|" + no.ToString () + "/" + item + " |";  	string mdest = "@220'310:MF107|DEST|";  	//string mdestValue = "@255'310:MF226' HM8' VMULT3|" + dest + "|";  	string mdestValue = "@255'310:MF107' HM4' VMULT3|" + dest + "|";  	string destpin = "@300'310:MF107| |";  	string msource = "@220'50:MF107|ORIGIN|";  	//string msourceValue = "@255'50:MF226' HM8' VMULT3|" + source + "|";  	string msourceValue = "@255'50:MF107' HM4' VMULT3|" + source + "|";  	string mvia = "@222'350:MF107' HM3' VM2|" + via + "|";  	//string mwt = "@275'350:MF075' HM3' VM2|WT- " + weight + "|";  	//string mBaxb = "@335'50:BC39N'HIGH 25'WIDE 4|" + axb + "|";  	string mBaxb = "@338'100:BC39N'HIGH 15'WIDE 2|" + awb.Trim () + no.ToString ().Trim ().PadLeft (4' '0') + "|";  	string mLaxb = "@420'150:MF226' HM3' VMULT2|" + awb.Trim () + "|";  	string tDate = DateTime.Now.ToString ("dd-MM-yyyy HH:mm:ss");  	string mtDate = "@470'60:MF107|Date:" + tDate + "|";  	string lFooter = "@508'150:MF226|Powered By QID Ph: 020-40039501|";  	//string mtDate = "@528'60:MF107|Date:" + tDate + "|";  	//string hLine1 = "@0'40:HLINE' length 520' thick 5|";  //  	string hLine2 = "@60'40:HLINE' length 520' thick 5|";  	//  	string vLine1 = "@60'40:VLINE' length 270' thick 5|";  	//  	string vLine3 = "@60'300:VLINE' length 270' thick 5|";  	//  	string vLine2 = "@60'555:VLINE' length 270' thick 5|";  	//  	string hLine4 = "@325'40:HLINE' length 520' thick 5|";  	//  	string hLine3 = "@200'40:HLINE' length 520' thick 5|";  	//  	string mFooter = "}";  	//string changeMode = "{LP}";  	string back = "{BACK:15}";  	string ahead = "{AHEAD:114}";  	byte[] mByte = new byte[1];  	mByte [0] = 14;  	byte[] mmByte = new byte[3];  	mmByte [0] = 27;  	mmByte [1] = 67;  	mmByte [2] = 14;  	byte[] query = new byte[6];  	query [0] = 27;  	query [1] = 123;  	query [2] = 83;  	query [3] = 84;  	query [4] = 63;  	query [5] = 125;  	string config = Convert.ToChar (27) + "{CL!M:1}";  	string LabelData = mhead + name + lPhone + vLine1 + vLine2 + vLine3 + hLine2 + hLine3 + hLine4 + AXB + AXBValue1 + AXBValue2 + mdest + mdestValue + destpin + msource + msourceValue + mvia + mitm + mitemValue + mBaxb + mLaxb + mtDate + lFooter + mFooter;  	if (openport ())//open serial port  	 {  		try {  			//srPort.WriteLine(config);  			srPort.DiscardInBuffer ();  			srPort.DiscardOutBuffer ();  			srPort.Write (query' 0' 6);  			//send query to printer  			Delay (5000);  			//char[] buffer = new char[srPort.BytesToRead];  			//srPort.Read(buffer' 0' srPort.BytesToRead);  			//if(buffer[18] != 'P')  			//{  			//    DialogResult result = new DialogResult();  			//    result = MessageBox.Show("Please Check Printer Paper and Continue"'"Print"'MessageBoxButtons.YesNo'MessageBoxIcon.Question'MessageBoxDefaultButton.Button1 );  			//    if (result == DialogResult.Yes)  			//    {  			//        return 2;  			//    }  			//    else  			//    {  			//        return 0;  			//    }  			//}  			//  srPort.WriteTimeout = 200;  			int btw = srPort.BytesToWrite;  			//srPort.Write(mmByte' 0' 3); //set form size to 14  			srPort.Write (setEasyMode);  			//set printer to easy mode  			//srPort.Write(back);  			srPort.Write (LabelData);  			//print label  			srPort.Write (ahead);  			Delay (1000);  			while (srPort.BytesToWrite > 0) {  				Application.DoEvents ();  			}  			//srPort.Write(changeMode);   //set printer to line mode by using {LP}  			//srPort.Write(mByte' 0' 1);  //set form feed  			srPort.Close ();  			//close the serial port  		}  		catch (Exception ex) {  			srPort.Close ();  			//close the serial port  			return (0);  		}  		finally {  			srPort.Close ();  			//close the serial port  		}  		return (1);  	}  	else {  		return (0);  	}  }  catch (Exception) {  	return (0);  }  
Magic Number,PrintAWBLabels,clsOneilOC3,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\clsOneilOC3.cs,PrintLabel,The following statement contains a magic number: try {  	//int option = 0;  	//awb.PadLeft(11' '0');  	string lblHeader = "";  	try {  		lblHeader = getValueFromConf ("lableHeading");  	}  	catch (Exception ex) {  		lblHeader = "GoAir CARGO";  	}  	string ClientPhone = "";  	try {  		ClientPhone = getValueFromConf ("clientContact");  	}  	catch (Exception ex) {  		ClientPhone = "";  	}  	string mhead = "{PRINT:";  	//string name = "@0'50:MF107' HM2' VM2|Jet Airways CARGO|";  	string name = "@0'50:MF107' HM2' VM2|" + lblHeader.Trim () + "|";  	//string lPhone = "@40'170:MF226' HM1' VM1|Ph: 1800222111/09223222111|";  	string lPhone = "@40'170:MF226' HM1' VM1|" + ClientPhone.Trim () + "|";  	string AXB = "@80'50:MF107|AWBNo|";  	string AXBValue1 = "";  	string AXBValue2 = "";  	if (awb.Trim ().Length == 10) {  		AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 6) + "|";  		AXBValue2 = "@115'180:MF226' HM3' VMULT3|" + awb.Substring (6' 4) + "|";  	}  	else if (awb.Trim ().Length == 11) {  		if (awb.Trim ().ToUpper ().Substring (0' 3) == "SAC") {  			AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 3) + "|";  			AXBValue1 += "@135'110:MF226' HM2' VMULT2|" + awb.Substring (3' 4) + "|";  			AXBValue2 = "@115'185:MF226' HM3' VMULT3|" + awb.Substring (7' 4) + "|";  		}  		else {  			AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 7) + "|";  			AXBValue2 = "@115'180:MF226' HM3' VMULT3|" + awb.Substring (7' 4) + "|";  		}  	}  	//string mtype = "@35'140:MF204' HM3' V6|" + type + "|";  	string mitm = "@80'310:MF107|No Of PCS|";  	string mitemValue = "@135'310:MF226' HM3' VMULT2|" + no.ToString () + "/" + item + " |";  	string mdest = "@220'310:MF107|DEST|";  	//string mdestValue = "@255'310:MF226' HM8' VMULT3|" + dest + "|";  	string mdestValue = "@255'310:MF107' HM4' VMULT3|" + dest + "|";  	string destpin = "@300'310:MF107| |";  	string msource = "@220'50:MF107|ORIGIN|";  	//string msourceValue = "@255'50:MF226' HM8' VMULT3|" + source + "|";  	string msourceValue = "@255'50:MF107' HM4' VMULT3|" + source + "|";  	string mvia = "@222'350:MF107' HM3' VM2|" + via + "|";  	//string mwt = "@275'350:MF075' HM3' VM2|WT- " + weight + "|";  	//string mBaxb = "@335'50:BC39N'HIGH 25'WIDE 4|" + axb + "|";  	string mBaxb = "@338'100:BC39N'HIGH 15'WIDE 2|" + awb.Trim () + no.ToString ().Trim ().PadLeft (4' '0') + "|";  	string mLaxb = "@420'150:MF226' HM3' VMULT2|" + awb.Trim () + "|";  	string tDate = DateTime.Now.ToString ("dd-MM-yyyy HH:mm:ss");  	string mtDate = "@470'60:MF107|Date:" + tDate + "|";  	string lFooter = "@508'150:MF226|Powered By QID Ph: 020-40039501|";  	//string mtDate = "@528'60:MF107|Date:" + tDate + "|";  	//string hLine1 = "@0'40:HLINE' length 520' thick 5|";  //  	string hLine2 = "@60'40:HLINE' length 520' thick 5|";  	//  	string vLine1 = "@60'40:VLINE' length 270' thick 5|";  	//  	string vLine3 = "@60'300:VLINE' length 270' thick 5|";  	//  	string vLine2 = "@60'555:VLINE' length 270' thick 5|";  	//  	string hLine4 = "@325'40:HLINE' length 520' thick 5|";  	//  	string hLine3 = "@200'40:HLINE' length 520' thick 5|";  	//  	string mFooter = "}";  	//string changeMode = "{LP}";  	string back = "{BACK:15}";  	string ahead = "{AHEAD:114}";  	byte[] mByte = new byte[1];  	mByte [0] = 14;  	byte[] mmByte = new byte[3];  	mmByte [0] = 27;  	mmByte [1] = 67;  	mmByte [2] = 14;  	byte[] query = new byte[6];  	query [0] = 27;  	query [1] = 123;  	query [2] = 83;  	query [3] = 84;  	query [4] = 63;  	query [5] = 125;  	string config = Convert.ToChar (27) + "{CL!M:1}";  	string LabelData = mhead + name + lPhone + vLine1 + vLine2 + vLine3 + hLine2 + hLine3 + hLine4 + AXB + AXBValue1 + AXBValue2 + mdest + mdestValue + destpin + msource + msourceValue + mvia + mitm + mitemValue + mBaxb + mLaxb + mtDate + lFooter + mFooter;  	if (openport ())//open serial port  	 {  		try {  			//srPort.WriteLine(config);  			srPort.DiscardInBuffer ();  			srPort.DiscardOutBuffer ();  			srPort.Write (query' 0' 6);  			//send query to printer  			Delay (5000);  			//char[] buffer = new char[srPort.BytesToRead];  			//srPort.Read(buffer' 0' srPort.BytesToRead);  			//if(buffer[18] != 'P')  			//{  			//    DialogResult result = new DialogResult();  			//    result = MessageBox.Show("Please Check Printer Paper and Continue"'"Print"'MessageBoxButtons.YesNo'MessageBoxIcon.Question'MessageBoxDefaultButton.Button1 );  			//    if (result == DialogResult.Yes)  			//    {  			//        return 2;  			//    }  			//    else  			//    {  			//        return 0;  			//    }  			//}  			//  srPort.WriteTimeout = 200;  			int btw = srPort.BytesToWrite;  			//srPort.Write(mmByte' 0' 3); //set form size to 14  			srPort.Write (setEasyMode);  			//set printer to easy mode  			//srPort.Write(back);  			srPort.Write (LabelData);  			//print label  			srPort.Write (ahead);  			Delay (1000);  			while (srPort.BytesToWrite > 0) {  				Application.DoEvents ();  			}  			//srPort.Write(changeMode);   //set printer to line mode by using {LP}  			//srPort.Write(mByte' 0' 1);  //set form feed  			srPort.Close ();  			//close the serial port  		}  		catch (Exception ex) {  			srPort.Close ();  			//close the serial port  			return (0);  		}  		finally {  			srPort.Close ();  			//close the serial port  		}  		return (1);  	}  	else {  		return (0);  	}  }  catch (Exception) {  	return (0);  }  
Magic Number,PrintAWBLabels,clsOneilOC3,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\clsOneilOC3.cs,PrintLabel,The following statement contains a magic number: try {  	//int option = 0;  	//awb.PadLeft(11' '0');  	string lblHeader = "";  	try {  		lblHeader = getValueFromConf ("lableHeading");  	}  	catch (Exception ex) {  		lblHeader = "GoAir CARGO";  	}  	string ClientPhone = "";  	try {  		ClientPhone = getValueFromConf ("clientContact");  	}  	catch (Exception ex) {  		ClientPhone = "";  	}  	string mhead = "{PRINT:";  	//string name = "@0'50:MF107' HM2' VM2|Jet Airways CARGO|";  	string name = "@0'50:MF107' HM2' VM2|" + lblHeader.Trim () + "|";  	//string lPhone = "@40'170:MF226' HM1' VM1|Ph: 1800222111/09223222111|";  	string lPhone = "@40'170:MF226' HM1' VM1|" + ClientPhone.Trim () + "|";  	string AXB = "@80'50:MF107|AWBNo|";  	string AXBValue1 = "";  	string AXBValue2 = "";  	if (awb.Trim ().Length == 10) {  		AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 6) + "|";  		AXBValue2 = "@115'180:MF226' HM3' VMULT3|" + awb.Substring (6' 4) + "|";  	}  	else if (awb.Trim ().Length == 11) {  		if (awb.Trim ().ToUpper ().Substring (0' 3) == "SAC") {  			AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 3) + "|";  			AXBValue1 += "@135'110:MF226' HM2' VMULT2|" + awb.Substring (3' 4) + "|";  			AXBValue2 = "@115'185:MF226' HM3' VMULT3|" + awb.Substring (7' 4) + "|";  		}  		else {  			AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 7) + "|";  			AXBValue2 = "@115'180:MF226' HM3' VMULT3|" + awb.Substring (7' 4) + "|";  		}  	}  	//string mtype = "@35'140:MF204' HM3' V6|" + type + "|";  	string mitm = "@80'310:MF107|No Of PCS|";  	string mitemValue = "@135'310:MF226' HM3' VMULT2|" + no.ToString () + "/" + item + " |";  	string mdest = "@220'310:MF107|DEST|";  	//string mdestValue = "@255'310:MF226' HM8' VMULT3|" + dest + "|";  	string mdestValue = "@255'310:MF107' HM4' VMULT3|" + dest + "|";  	string destpin = "@300'310:MF107| |";  	string msource = "@220'50:MF107|ORIGIN|";  	//string msourceValue = "@255'50:MF226' HM8' VMULT3|" + source + "|";  	string msourceValue = "@255'50:MF107' HM4' VMULT3|" + source + "|";  	string mvia = "@222'350:MF107' HM3' VM2|" + via + "|";  	//string mwt = "@275'350:MF075' HM3' VM2|WT- " + weight + "|";  	//string mBaxb = "@335'50:BC39N'HIGH 25'WIDE 4|" + axb + "|";  	string mBaxb = "@338'100:BC39N'HIGH 15'WIDE 2|" + awb.Trim () + no.ToString ().Trim ().PadLeft (4' '0') + "|";  	string mLaxb = "@420'150:MF226' HM3' VMULT2|" + awb.Trim () + "|";  	string tDate = DateTime.Now.ToString ("dd-MM-yyyy HH:mm:ss");  	string mtDate = "@470'60:MF107|Date:" + tDate + "|";  	string lFooter = "@508'150:MF226|Powered By QID Ph: 020-40039501|";  	//string mtDate = "@528'60:MF107|Date:" + tDate + "|";  	//string hLine1 = "@0'40:HLINE' length 520' thick 5|";  //  	string hLine2 = "@60'40:HLINE' length 520' thick 5|";  	//  	string vLine1 = "@60'40:VLINE' length 270' thick 5|";  	//  	string vLine3 = "@60'300:VLINE' length 270' thick 5|";  	//  	string vLine2 = "@60'555:VLINE' length 270' thick 5|";  	//  	string hLine4 = "@325'40:HLINE' length 520' thick 5|";  	//  	string hLine3 = "@200'40:HLINE' length 520' thick 5|";  	//  	string mFooter = "}";  	//string changeMode = "{LP}";  	string back = "{BACK:15}";  	string ahead = "{AHEAD:114}";  	byte[] mByte = new byte[1];  	mByte [0] = 14;  	byte[] mmByte = new byte[3];  	mmByte [0] = 27;  	mmByte [1] = 67;  	mmByte [2] = 14;  	byte[] query = new byte[6];  	query [0] = 27;  	query [1] = 123;  	query [2] = 83;  	query [3] = 84;  	query [4] = 63;  	query [5] = 125;  	string config = Convert.ToChar (27) + "{CL!M:1}";  	string LabelData = mhead + name + lPhone + vLine1 + vLine2 + vLine3 + hLine2 + hLine3 + hLine4 + AXB + AXBValue1 + AXBValue2 + mdest + mdestValue + destpin + msource + msourceValue + mvia + mitm + mitemValue + mBaxb + mLaxb + mtDate + lFooter + mFooter;  	if (openport ())//open serial port  	 {  		try {  			//srPort.WriteLine(config);  			srPort.DiscardInBuffer ();  			srPort.DiscardOutBuffer ();  			srPort.Write (query' 0' 6);  			//send query to printer  			Delay (5000);  			//char[] buffer = new char[srPort.BytesToRead];  			//srPort.Read(buffer' 0' srPort.BytesToRead);  			//if(buffer[18] != 'P')  			//{  			//    DialogResult result = new DialogResult();  			//    result = MessageBox.Show("Please Check Printer Paper and Continue"'"Print"'MessageBoxButtons.YesNo'MessageBoxIcon.Question'MessageBoxDefaultButton.Button1 );  			//    if (result == DialogResult.Yes)  			//    {  			//        return 2;  			//    }  			//    else  			//    {  			//        return 0;  			//    }  			//}  			//  srPort.WriteTimeout = 200;  			int btw = srPort.BytesToWrite;  			//srPort.Write(mmByte' 0' 3); //set form size to 14  			srPort.Write (setEasyMode);  			//set printer to easy mode  			//srPort.Write(back);  			srPort.Write (LabelData);  			//print label  			srPort.Write (ahead);  			Delay (1000);  			while (srPort.BytesToWrite > 0) {  				Application.DoEvents ();  			}  			//srPort.Write(changeMode);   //set printer to line mode by using {LP}  			//srPort.Write(mByte' 0' 1);  //set form feed  			srPort.Close ();  			//close the serial port  		}  		catch (Exception ex) {  			srPort.Close ();  			//close the serial port  			return (0);  		}  		finally {  			srPort.Close ();  			//close the serial port  		}  		return (1);  	}  	else {  		return (0);  	}  }  catch (Exception) {  	return (0);  }  
Magic Number,PrintAWBLabels,clsOneilOC3,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\clsOneilOC3.cs,PrintLabel,The following statement contains a magic number: try {  	//int option = 0;  	//awb.PadLeft(11' '0');  	string lblHeader = "";  	try {  		lblHeader = getValueFromConf ("lableHeading");  	}  	catch (Exception ex) {  		lblHeader = "GoAir CARGO";  	}  	string ClientPhone = "";  	try {  		ClientPhone = getValueFromConf ("clientContact");  	}  	catch (Exception ex) {  		ClientPhone = "";  	}  	string mhead = "{PRINT:";  	//string name = "@0'50:MF107' HM2' VM2|Jet Airways CARGO|";  	string name = "@0'50:MF107' HM2' VM2|" + lblHeader.Trim () + "|";  	//string lPhone = "@40'170:MF226' HM1' VM1|Ph: 1800222111/09223222111|";  	string lPhone = "@40'170:MF226' HM1' VM1|" + ClientPhone.Trim () + "|";  	string AXB = "@80'50:MF107|AWBNo|";  	string AXBValue1 = "";  	string AXBValue2 = "";  	if (awb.Trim ().Length == 10) {  		AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 6) + "|";  		AXBValue2 = "@115'180:MF226' HM3' VMULT3|" + awb.Substring (6' 4) + "|";  	}  	else if (awb.Trim ().Length == 11) {  		if (awb.Trim ().ToUpper ().Substring (0' 3) == "SAC") {  			AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 3) + "|";  			AXBValue1 += "@135'110:MF226' HM2' VMULT2|" + awb.Substring (3' 4) + "|";  			AXBValue2 = "@115'185:MF226' HM3' VMULT3|" + awb.Substring (7' 4) + "|";  		}  		else {  			AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 7) + "|";  			AXBValue2 = "@115'180:MF226' HM3' VMULT3|" + awb.Substring (7' 4) + "|";  		}  	}  	//string mtype = "@35'140:MF204' HM3' V6|" + type + "|";  	string mitm = "@80'310:MF107|No Of PCS|";  	string mitemValue = "@135'310:MF226' HM3' VMULT2|" + no.ToString () + "/" + item + " |";  	string mdest = "@220'310:MF107|DEST|";  	//string mdestValue = "@255'310:MF226' HM8' VMULT3|" + dest + "|";  	string mdestValue = "@255'310:MF107' HM4' VMULT3|" + dest + "|";  	string destpin = "@300'310:MF107| |";  	string msource = "@220'50:MF107|ORIGIN|";  	//string msourceValue = "@255'50:MF226' HM8' VMULT3|" + source + "|";  	string msourceValue = "@255'50:MF107' HM4' VMULT3|" + source + "|";  	string mvia = "@222'350:MF107' HM3' VM2|" + via + "|";  	//string mwt = "@275'350:MF075' HM3' VM2|WT- " + weight + "|";  	//string mBaxb = "@335'50:BC39N'HIGH 25'WIDE 4|" + axb + "|";  	string mBaxb = "@338'100:BC39N'HIGH 15'WIDE 2|" + awb.Trim () + no.ToString ().Trim ().PadLeft (4' '0') + "|";  	string mLaxb = "@420'150:MF226' HM3' VMULT2|" + awb.Trim () + "|";  	string tDate = DateTime.Now.ToString ("dd-MM-yyyy HH:mm:ss");  	string mtDate = "@470'60:MF107|Date:" + tDate + "|";  	string lFooter = "@508'150:MF226|Powered By QID Ph: 020-40039501|";  	//string mtDate = "@528'60:MF107|Date:" + tDate + "|";  	//string hLine1 = "@0'40:HLINE' length 520' thick 5|";  //  	string hLine2 = "@60'40:HLINE' length 520' thick 5|";  	//  	string vLine1 = "@60'40:VLINE' length 270' thick 5|";  	//  	string vLine3 = "@60'300:VLINE' length 270' thick 5|";  	//  	string vLine2 = "@60'555:VLINE' length 270' thick 5|";  	//  	string hLine4 = "@325'40:HLINE' length 520' thick 5|";  	//  	string hLine3 = "@200'40:HLINE' length 520' thick 5|";  	//  	string mFooter = "}";  	//string changeMode = "{LP}";  	string back = "{BACK:15}";  	string ahead = "{AHEAD:114}";  	byte[] mByte = new byte[1];  	mByte [0] = 14;  	byte[] mmByte = new byte[3];  	mmByte [0] = 27;  	mmByte [1] = 67;  	mmByte [2] = 14;  	byte[] query = new byte[6];  	query [0] = 27;  	query [1] = 123;  	query [2] = 83;  	query [3] = 84;  	query [4] = 63;  	query [5] = 125;  	string config = Convert.ToChar (27) + "{CL!M:1}";  	string LabelData = mhead + name + lPhone + vLine1 + vLine2 + vLine3 + hLine2 + hLine3 + hLine4 + AXB + AXBValue1 + AXBValue2 + mdest + mdestValue + destpin + msource + msourceValue + mvia + mitm + mitemValue + mBaxb + mLaxb + mtDate + lFooter + mFooter;  	if (openport ())//open serial port  	 {  		try {  			//srPort.WriteLine(config);  			srPort.DiscardInBuffer ();  			srPort.DiscardOutBuffer ();  			srPort.Write (query' 0' 6);  			//send query to printer  			Delay (5000);  			//char[] buffer = new char[srPort.BytesToRead];  			//srPort.Read(buffer' 0' srPort.BytesToRead);  			//if(buffer[18] != 'P')  			//{  			//    DialogResult result = new DialogResult();  			//    result = MessageBox.Show("Please Check Printer Paper and Continue"'"Print"'MessageBoxButtons.YesNo'MessageBoxIcon.Question'MessageBoxDefaultButton.Button1 );  			//    if (result == DialogResult.Yes)  			//    {  			//        return 2;  			//    }  			//    else  			//    {  			//        return 0;  			//    }  			//}  			//  srPort.WriteTimeout = 200;  			int btw = srPort.BytesToWrite;  			//srPort.Write(mmByte' 0' 3); //set form size to 14  			srPort.Write (setEasyMode);  			//set printer to easy mode  			//srPort.Write(back);  			srPort.Write (LabelData);  			//print label  			srPort.Write (ahead);  			Delay (1000);  			while (srPort.BytesToWrite > 0) {  				Application.DoEvents ();  			}  			//srPort.Write(changeMode);   //set printer to line mode by using {LP}  			//srPort.Write(mByte' 0' 1);  //set form feed  			srPort.Close ();  			//close the serial port  		}  		catch (Exception ex) {  			srPort.Close ();  			//close the serial port  			return (0);  		}  		finally {  			srPort.Close ();  			//close the serial port  		}  		return (1);  	}  	else {  		return (0);  	}  }  catch (Exception) {  	return (0);  }  
Magic Number,PrintAWBLabels,clsOneilOC3,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\clsOneilOC3.cs,PrintLabel,The following statement contains a magic number: try {  	//int option = 0;  	//awb.PadLeft(11' '0');  	string lblHeader = "";  	try {  		lblHeader = getValueFromConf ("lableHeading");  	}  	catch (Exception ex) {  		lblHeader = "GoAir CARGO";  	}  	string ClientPhone = "";  	try {  		ClientPhone = getValueFromConf ("clientContact");  	}  	catch (Exception ex) {  		ClientPhone = "";  	}  	string mhead = "{PRINT:";  	//string name = "@0'50:MF107' HM2' VM2|Jet Airways CARGO|";  	string name = "@0'50:MF107' HM2' VM2|" + lblHeader.Trim () + "|";  	//string lPhone = "@40'170:MF226' HM1' VM1|Ph: 1800222111/09223222111|";  	string lPhone = "@40'170:MF226' HM1' VM1|" + ClientPhone.Trim () + "|";  	string AXB = "@80'50:MF107|AWBNo|";  	string AXBValue1 = "";  	string AXBValue2 = "";  	if (awb.Trim ().Length == 10) {  		AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 6) + "|";  		AXBValue2 = "@115'180:MF226' HM3' VMULT3|" + awb.Substring (6' 4) + "|";  	}  	else if (awb.Trim ().Length == 11) {  		if (awb.Trim ().ToUpper ().Substring (0' 3) == "SAC") {  			AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 3) + "|";  			AXBValue1 += "@135'110:MF226' HM2' VMULT2|" + awb.Substring (3' 4) + "|";  			AXBValue2 = "@115'185:MF226' HM3' VMULT3|" + awb.Substring (7' 4) + "|";  		}  		else {  			AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 7) + "|";  			AXBValue2 = "@115'180:MF226' HM3' VMULT3|" + awb.Substring (7' 4) + "|";  		}  	}  	//string mtype = "@35'140:MF204' HM3' V6|" + type + "|";  	string mitm = "@80'310:MF107|No Of PCS|";  	string mitemValue = "@135'310:MF226' HM3' VMULT2|" + no.ToString () + "/" + item + " |";  	string mdest = "@220'310:MF107|DEST|";  	//string mdestValue = "@255'310:MF226' HM8' VMULT3|" + dest + "|";  	string mdestValue = "@255'310:MF107' HM4' VMULT3|" + dest + "|";  	string destpin = "@300'310:MF107| |";  	string msource = "@220'50:MF107|ORIGIN|";  	//string msourceValue = "@255'50:MF226' HM8' VMULT3|" + source + "|";  	string msourceValue = "@255'50:MF107' HM4' VMULT3|" + source + "|";  	string mvia = "@222'350:MF107' HM3' VM2|" + via + "|";  	//string mwt = "@275'350:MF075' HM3' VM2|WT- " + weight + "|";  	//string mBaxb = "@335'50:BC39N'HIGH 25'WIDE 4|" + axb + "|";  	string mBaxb = "@338'100:BC39N'HIGH 15'WIDE 2|" + awb.Trim () + no.ToString ().Trim ().PadLeft (4' '0') + "|";  	string mLaxb = "@420'150:MF226' HM3' VMULT2|" + awb.Trim () + "|";  	string tDate = DateTime.Now.ToString ("dd-MM-yyyy HH:mm:ss");  	string mtDate = "@470'60:MF107|Date:" + tDate + "|";  	string lFooter = "@508'150:MF226|Powered By QID Ph: 020-40039501|";  	//string mtDate = "@528'60:MF107|Date:" + tDate + "|";  	//string hLine1 = "@0'40:HLINE' length 520' thick 5|";  //  	string hLine2 = "@60'40:HLINE' length 520' thick 5|";  	//  	string vLine1 = "@60'40:VLINE' length 270' thick 5|";  	//  	string vLine3 = "@60'300:VLINE' length 270' thick 5|";  	//  	string vLine2 = "@60'555:VLINE' length 270' thick 5|";  	//  	string hLine4 = "@325'40:HLINE' length 520' thick 5|";  	//  	string hLine3 = "@200'40:HLINE' length 520' thick 5|";  	//  	string mFooter = "}";  	//string changeMode = "{LP}";  	string back = "{BACK:15}";  	string ahead = "{AHEAD:114}";  	byte[] mByte = new byte[1];  	mByte [0] = 14;  	byte[] mmByte = new byte[3];  	mmByte [0] = 27;  	mmByte [1] = 67;  	mmByte [2] = 14;  	byte[] query = new byte[6];  	query [0] = 27;  	query [1] = 123;  	query [2] = 83;  	query [3] = 84;  	query [4] = 63;  	query [5] = 125;  	string config = Convert.ToChar (27) + "{CL!M:1}";  	string LabelData = mhead + name + lPhone + vLine1 + vLine2 + vLine3 + hLine2 + hLine3 + hLine4 + AXB + AXBValue1 + AXBValue2 + mdest + mdestValue + destpin + msource + msourceValue + mvia + mitm + mitemValue + mBaxb + mLaxb + mtDate + lFooter + mFooter;  	if (openport ())//open serial port  	 {  		try {  			//srPort.WriteLine(config);  			srPort.DiscardInBuffer ();  			srPort.DiscardOutBuffer ();  			srPort.Write (query' 0' 6);  			//send query to printer  			Delay (5000);  			//char[] buffer = new char[srPort.BytesToRead];  			//srPort.Read(buffer' 0' srPort.BytesToRead);  			//if(buffer[18] != 'P')  			//{  			//    DialogResult result = new DialogResult();  			//    result = MessageBox.Show("Please Check Printer Paper and Continue"'"Print"'MessageBoxButtons.YesNo'MessageBoxIcon.Question'MessageBoxDefaultButton.Button1 );  			//    if (result == DialogResult.Yes)  			//    {  			//        return 2;  			//    }  			//    else  			//    {  			//        return 0;  			//    }  			//}  			//  srPort.WriteTimeout = 200;  			int btw = srPort.BytesToWrite;  			//srPort.Write(mmByte' 0' 3); //set form size to 14  			srPort.Write (setEasyMode);  			//set printer to easy mode  			//srPort.Write(back);  			srPort.Write (LabelData);  			//print label  			srPort.Write (ahead);  			Delay (1000);  			while (srPort.BytesToWrite > 0) {  				Application.DoEvents ();  			}  			//srPort.Write(changeMode);   //set printer to line mode by using {LP}  			//srPort.Write(mByte' 0' 1);  //set form feed  			srPort.Close ();  			//close the serial port  		}  		catch (Exception ex) {  			srPort.Close ();  			//close the serial port  			return (0);  		}  		finally {  			srPort.Close ();  			//close the serial port  		}  		return (1);  	}  	else {  		return (0);  	}  }  catch (Exception) {  	return (0);  }  
Magic Number,PrintAWBLabels,clsOneilOC3,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\clsOneilOC3.cs,PrintLabel,The following statement contains a magic number: try {  	//int option = 0;  	//awb.PadLeft(11' '0');  	string lblHeader = "";  	try {  		lblHeader = getValueFromConf ("lableHeading");  	}  	catch (Exception ex) {  		lblHeader = "GoAir CARGO";  	}  	string ClientPhone = "";  	try {  		ClientPhone = getValueFromConf ("clientContact");  	}  	catch (Exception ex) {  		ClientPhone = "";  	}  	string mhead = "{PRINT:";  	//string name = "@0'50:MF107' HM2' VM2|Jet Airways CARGO|";  	string name = "@0'50:MF107' HM2' VM2|" + lblHeader.Trim () + "|";  	//string lPhone = "@40'170:MF226' HM1' VM1|Ph: 1800222111/09223222111|";  	string lPhone = "@40'170:MF226' HM1' VM1|" + ClientPhone.Trim () + "|";  	string AXB = "@80'50:MF107|AWBNo|";  	string AXBValue1 = "";  	string AXBValue2 = "";  	if (awb.Trim ().Length == 10) {  		AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 6) + "|";  		AXBValue2 = "@115'180:MF226' HM3' VMULT3|" + awb.Substring (6' 4) + "|";  	}  	else if (awb.Trim ().Length == 11) {  		if (awb.Trim ().ToUpper ().Substring (0' 3) == "SAC") {  			AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 3) + "|";  			AXBValue1 += "@135'110:MF226' HM2' VMULT2|" + awb.Substring (3' 4) + "|";  			AXBValue2 = "@115'185:MF226' HM3' VMULT3|" + awb.Substring (7' 4) + "|";  		}  		else {  			AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 7) + "|";  			AXBValue2 = "@115'180:MF226' HM3' VMULT3|" + awb.Substring (7' 4) + "|";  		}  	}  	//string mtype = "@35'140:MF204' HM3' V6|" + type + "|";  	string mitm = "@80'310:MF107|No Of PCS|";  	string mitemValue = "@135'310:MF226' HM3' VMULT2|" + no.ToString () + "/" + item + " |";  	string mdest = "@220'310:MF107|DEST|";  	//string mdestValue = "@255'310:MF226' HM8' VMULT3|" + dest + "|";  	string mdestValue = "@255'310:MF107' HM4' VMULT3|" + dest + "|";  	string destpin = "@300'310:MF107| |";  	string msource = "@220'50:MF107|ORIGIN|";  	//string msourceValue = "@255'50:MF226' HM8' VMULT3|" + source + "|";  	string msourceValue = "@255'50:MF107' HM4' VMULT3|" + source + "|";  	string mvia = "@222'350:MF107' HM3' VM2|" + via + "|";  	//string mwt = "@275'350:MF075' HM3' VM2|WT- " + weight + "|";  	//string mBaxb = "@335'50:BC39N'HIGH 25'WIDE 4|" + axb + "|";  	string mBaxb = "@338'100:BC39N'HIGH 15'WIDE 2|" + awb.Trim () + no.ToString ().Trim ().PadLeft (4' '0') + "|";  	string mLaxb = "@420'150:MF226' HM3' VMULT2|" + awb.Trim () + "|";  	string tDate = DateTime.Now.ToString ("dd-MM-yyyy HH:mm:ss");  	string mtDate = "@470'60:MF107|Date:" + tDate + "|";  	string lFooter = "@508'150:MF226|Powered By QID Ph: 020-40039501|";  	//string mtDate = "@528'60:MF107|Date:" + tDate + "|";  	//string hLine1 = "@0'40:HLINE' length 520' thick 5|";  //  	string hLine2 = "@60'40:HLINE' length 520' thick 5|";  	//  	string vLine1 = "@60'40:VLINE' length 270' thick 5|";  	//  	string vLine3 = "@60'300:VLINE' length 270' thick 5|";  	//  	string vLine2 = "@60'555:VLINE' length 270' thick 5|";  	//  	string hLine4 = "@325'40:HLINE' length 520' thick 5|";  	//  	string hLine3 = "@200'40:HLINE' length 520' thick 5|";  	//  	string mFooter = "}";  	//string changeMode = "{LP}";  	string back = "{BACK:15}";  	string ahead = "{AHEAD:114}";  	byte[] mByte = new byte[1];  	mByte [0] = 14;  	byte[] mmByte = new byte[3];  	mmByte [0] = 27;  	mmByte [1] = 67;  	mmByte [2] = 14;  	byte[] query = new byte[6];  	query [0] = 27;  	query [1] = 123;  	query [2] = 83;  	query [3] = 84;  	query [4] = 63;  	query [5] = 125;  	string config = Convert.ToChar (27) + "{CL!M:1}";  	string LabelData = mhead + name + lPhone + vLine1 + vLine2 + vLine3 + hLine2 + hLine3 + hLine4 + AXB + AXBValue1 + AXBValue2 + mdest + mdestValue + destpin + msource + msourceValue + mvia + mitm + mitemValue + mBaxb + mLaxb + mtDate + lFooter + mFooter;  	if (openport ())//open serial port  	 {  		try {  			//srPort.WriteLine(config);  			srPort.DiscardInBuffer ();  			srPort.DiscardOutBuffer ();  			srPort.Write (query' 0' 6);  			//send query to printer  			Delay (5000);  			//char[] buffer = new char[srPort.BytesToRead];  			//srPort.Read(buffer' 0' srPort.BytesToRead);  			//if(buffer[18] != 'P')  			//{  			//    DialogResult result = new DialogResult();  			//    result = MessageBox.Show("Please Check Printer Paper and Continue"'"Print"'MessageBoxButtons.YesNo'MessageBoxIcon.Question'MessageBoxDefaultButton.Button1 );  			//    if (result == DialogResult.Yes)  			//    {  			//        return 2;  			//    }  			//    else  			//    {  			//        return 0;  			//    }  			//}  			//  srPort.WriteTimeout = 200;  			int btw = srPort.BytesToWrite;  			//srPort.Write(mmByte' 0' 3); //set form size to 14  			srPort.Write (setEasyMode);  			//set printer to easy mode  			//srPort.Write(back);  			srPort.Write (LabelData);  			//print label  			srPort.Write (ahead);  			Delay (1000);  			while (srPort.BytesToWrite > 0) {  				Application.DoEvents ();  			}  			//srPort.Write(changeMode);   //set printer to line mode by using {LP}  			//srPort.Write(mByte' 0' 1);  //set form feed  			srPort.Close ();  			//close the serial port  		}  		catch (Exception ex) {  			srPort.Close ();  			//close the serial port  			return (0);  		}  		finally {  			srPort.Close ();  			//close the serial port  		}  		return (1);  	}  	else {  		return (0);  	}  }  catch (Exception) {  	return (0);  }  
Magic Number,PrintAWBLabels,clsOneilOC3,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\clsOneilOC3.cs,PrintLabel,The following statement contains a magic number: try {  	//int option = 0;  	//awb.PadLeft(11' '0');  	string lblHeader = "";  	try {  		lblHeader = getValueFromConf ("lableHeading");  	}  	catch (Exception ex) {  		lblHeader = "GoAir CARGO";  	}  	string ClientPhone = "";  	try {  		ClientPhone = getValueFromConf ("clientContact");  	}  	catch (Exception ex) {  		ClientPhone = "";  	}  	string mhead = "{PRINT:";  	//string name = "@0'50:MF107' HM2' VM2|Jet Airways CARGO|";  	string name = "@0'50:MF107' HM2' VM2|" + lblHeader.Trim () + "|";  	//string lPhone = "@40'170:MF226' HM1' VM1|Ph: 1800222111/09223222111|";  	string lPhone = "@40'170:MF226' HM1' VM1|" + ClientPhone.Trim () + "|";  	string AXB = "@80'50:MF107|AWBNo|";  	string AXBValue1 = "";  	string AXBValue2 = "";  	if (awb.Trim ().Length == 10) {  		AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 6) + "|";  		AXBValue2 = "@115'180:MF226' HM3' VMULT3|" + awb.Substring (6' 4) + "|";  	}  	else if (awb.Trim ().Length == 11) {  		if (awb.Trim ().ToUpper ().Substring (0' 3) == "SAC") {  			AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 3) + "|";  			AXBValue1 += "@135'110:MF226' HM2' VMULT2|" + awb.Substring (3' 4) + "|";  			AXBValue2 = "@115'185:MF226' HM3' VMULT3|" + awb.Substring (7' 4) + "|";  		}  		else {  			AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 7) + "|";  			AXBValue2 = "@115'180:MF226' HM3' VMULT3|" + awb.Substring (7' 4) + "|";  		}  	}  	//string mtype = "@35'140:MF204' HM3' V6|" + type + "|";  	string mitm = "@80'310:MF107|No Of PCS|";  	string mitemValue = "@135'310:MF226' HM3' VMULT2|" + no.ToString () + "/" + item + " |";  	string mdest = "@220'310:MF107|DEST|";  	//string mdestValue = "@255'310:MF226' HM8' VMULT3|" + dest + "|";  	string mdestValue = "@255'310:MF107' HM4' VMULT3|" + dest + "|";  	string destpin = "@300'310:MF107| |";  	string msource = "@220'50:MF107|ORIGIN|";  	//string msourceValue = "@255'50:MF226' HM8' VMULT3|" + source + "|";  	string msourceValue = "@255'50:MF107' HM4' VMULT3|" + source + "|";  	string mvia = "@222'350:MF107' HM3' VM2|" + via + "|";  	//string mwt = "@275'350:MF075' HM3' VM2|WT- " + weight + "|";  	//string mBaxb = "@335'50:BC39N'HIGH 25'WIDE 4|" + axb + "|";  	string mBaxb = "@338'100:BC39N'HIGH 15'WIDE 2|" + awb.Trim () + no.ToString ().Trim ().PadLeft (4' '0') + "|";  	string mLaxb = "@420'150:MF226' HM3' VMULT2|" + awb.Trim () + "|";  	string tDate = DateTime.Now.ToString ("dd-MM-yyyy HH:mm:ss");  	string mtDate = "@470'60:MF107|Date:" + tDate + "|";  	string lFooter = "@508'150:MF226|Powered By QID Ph: 020-40039501|";  	//string mtDate = "@528'60:MF107|Date:" + tDate + "|";  	//string hLine1 = "@0'40:HLINE' length 520' thick 5|";  //  	string hLine2 = "@60'40:HLINE' length 520' thick 5|";  	//  	string vLine1 = "@60'40:VLINE' length 270' thick 5|";  	//  	string vLine3 = "@60'300:VLINE' length 270' thick 5|";  	//  	string vLine2 = "@60'555:VLINE' length 270' thick 5|";  	//  	string hLine4 = "@325'40:HLINE' length 520' thick 5|";  	//  	string hLine3 = "@200'40:HLINE' length 520' thick 5|";  	//  	string mFooter = "}";  	//string changeMode = "{LP}";  	string back = "{BACK:15}";  	string ahead = "{AHEAD:114}";  	byte[] mByte = new byte[1];  	mByte [0] = 14;  	byte[] mmByte = new byte[3];  	mmByte [0] = 27;  	mmByte [1] = 67;  	mmByte [2] = 14;  	byte[] query = new byte[6];  	query [0] = 27;  	query [1] = 123;  	query [2] = 83;  	query [3] = 84;  	query [4] = 63;  	query [5] = 125;  	string config = Convert.ToChar (27) + "{CL!M:1}";  	string LabelData = mhead + name + lPhone + vLine1 + vLine2 + vLine3 + hLine2 + hLine3 + hLine4 + AXB + AXBValue1 + AXBValue2 + mdest + mdestValue + destpin + msource + msourceValue + mvia + mitm + mitemValue + mBaxb + mLaxb + mtDate + lFooter + mFooter;  	if (openport ())//open serial port  	 {  		try {  			//srPort.WriteLine(config);  			srPort.DiscardInBuffer ();  			srPort.DiscardOutBuffer ();  			srPort.Write (query' 0' 6);  			//send query to printer  			Delay (5000);  			//char[] buffer = new char[srPort.BytesToRead];  			//srPort.Read(buffer' 0' srPort.BytesToRead);  			//if(buffer[18] != 'P')  			//{  			//    DialogResult result = new DialogResult();  			//    result = MessageBox.Show("Please Check Printer Paper and Continue"'"Print"'MessageBoxButtons.YesNo'MessageBoxIcon.Question'MessageBoxDefaultButton.Button1 );  			//    if (result == DialogResult.Yes)  			//    {  			//        return 2;  			//    }  			//    else  			//    {  			//        return 0;  			//    }  			//}  			//  srPort.WriteTimeout = 200;  			int btw = srPort.BytesToWrite;  			//srPort.Write(mmByte' 0' 3); //set form size to 14  			srPort.Write (setEasyMode);  			//set printer to easy mode  			//srPort.Write(back);  			srPort.Write (LabelData);  			//print label  			srPort.Write (ahead);  			Delay (1000);  			while (srPort.BytesToWrite > 0) {  				Application.DoEvents ();  			}  			//srPort.Write(changeMode);   //set printer to line mode by using {LP}  			//srPort.Write(mByte' 0' 1);  //set form feed  			srPort.Close ();  			//close the serial port  		}  		catch (Exception ex) {  			srPort.Close ();  			//close the serial port  			return (0);  		}  		finally {  			srPort.Close ();  			//close the serial port  		}  		return (1);  	}  	else {  		return (0);  	}  }  catch (Exception) {  	return (0);  }  
Magic Number,PrintAWBLabels,clsOneilOC3,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\clsOneilOC3.cs,PrintLabel,The following statement contains a magic number: try {  	//int option = 0;  	//awb.PadLeft(11' '0');  	string lblHeader = "";  	try {  		lblHeader = getValueFromConf ("lableHeading");  	}  	catch (Exception ex) {  		lblHeader = "GoAir CARGO";  	}  	string ClientPhone = "";  	try {  		ClientPhone = getValueFromConf ("clientContact");  	}  	catch (Exception ex) {  		ClientPhone = "";  	}  	string mhead = "{PRINT:";  	//string name = "@0'50:MF107' HM2' VM2|Jet Airways CARGO|";  	string name = "@0'50:MF107' HM2' VM2|" + lblHeader.Trim () + "|";  	//string lPhone = "@40'170:MF226' HM1' VM1|Ph: 1800222111/09223222111|";  	string lPhone = "@40'170:MF226' HM1' VM1|" + ClientPhone.Trim () + "|";  	string AXB = "@80'50:MF107|AWBNo|";  	string AXBValue1 = "";  	string AXBValue2 = "";  	if (awb.Trim ().Length == 10) {  		AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 6) + "|";  		AXBValue2 = "@115'180:MF226' HM3' VMULT3|" + awb.Substring (6' 4) + "|";  	}  	else if (awb.Trim ().Length == 11) {  		if (awb.Trim ().ToUpper ().Substring (0' 3) == "SAC") {  			AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 3) + "|";  			AXBValue1 += "@135'110:MF226' HM2' VMULT2|" + awb.Substring (3' 4) + "|";  			AXBValue2 = "@115'185:MF226' HM3' VMULT3|" + awb.Substring (7' 4) + "|";  		}  		else {  			AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 7) + "|";  			AXBValue2 = "@115'180:MF226' HM3' VMULT3|" + awb.Substring (7' 4) + "|";  		}  	}  	//string mtype = "@35'140:MF204' HM3' V6|" + type + "|";  	string mitm = "@80'310:MF107|No Of PCS|";  	string mitemValue = "@135'310:MF226' HM3' VMULT2|" + no.ToString () + "/" + item + " |";  	string mdest = "@220'310:MF107|DEST|";  	//string mdestValue = "@255'310:MF226' HM8' VMULT3|" + dest + "|";  	string mdestValue = "@255'310:MF107' HM4' VMULT3|" + dest + "|";  	string destpin = "@300'310:MF107| |";  	string msource = "@220'50:MF107|ORIGIN|";  	//string msourceValue = "@255'50:MF226' HM8' VMULT3|" + source + "|";  	string msourceValue = "@255'50:MF107' HM4' VMULT3|" + source + "|";  	string mvia = "@222'350:MF107' HM3' VM2|" + via + "|";  	//string mwt = "@275'350:MF075' HM3' VM2|WT- " + weight + "|";  	//string mBaxb = "@335'50:BC39N'HIGH 25'WIDE 4|" + axb + "|";  	string mBaxb = "@338'100:BC39N'HIGH 15'WIDE 2|" + awb.Trim () + no.ToString ().Trim ().PadLeft (4' '0') + "|";  	string mLaxb = "@420'150:MF226' HM3' VMULT2|" + awb.Trim () + "|";  	string tDate = DateTime.Now.ToString ("dd-MM-yyyy HH:mm:ss");  	string mtDate = "@470'60:MF107|Date:" + tDate + "|";  	string lFooter = "@508'150:MF226|Powered By QID Ph: 020-40039501|";  	//string mtDate = "@528'60:MF107|Date:" + tDate + "|";  	//string hLine1 = "@0'40:HLINE' length 520' thick 5|";  //  	string hLine2 = "@60'40:HLINE' length 520' thick 5|";  	//  	string vLine1 = "@60'40:VLINE' length 270' thick 5|";  	//  	string vLine3 = "@60'300:VLINE' length 270' thick 5|";  	//  	string vLine2 = "@60'555:VLINE' length 270' thick 5|";  	//  	string hLine4 = "@325'40:HLINE' length 520' thick 5|";  	//  	string hLine3 = "@200'40:HLINE' length 520' thick 5|";  	//  	string mFooter = "}";  	//string changeMode = "{LP}";  	string back = "{BACK:15}";  	string ahead = "{AHEAD:114}";  	byte[] mByte = new byte[1];  	mByte [0] = 14;  	byte[] mmByte = new byte[3];  	mmByte [0] = 27;  	mmByte [1] = 67;  	mmByte [2] = 14;  	byte[] query = new byte[6];  	query [0] = 27;  	query [1] = 123;  	query [2] = 83;  	query [3] = 84;  	query [4] = 63;  	query [5] = 125;  	string config = Convert.ToChar (27) + "{CL!M:1}";  	string LabelData = mhead + name + lPhone + vLine1 + vLine2 + vLine3 + hLine2 + hLine3 + hLine4 + AXB + AXBValue1 + AXBValue2 + mdest + mdestValue + destpin + msource + msourceValue + mvia + mitm + mitemValue + mBaxb + mLaxb + mtDate + lFooter + mFooter;  	if (openport ())//open serial port  	 {  		try {  			//srPort.WriteLine(config);  			srPort.DiscardInBuffer ();  			srPort.DiscardOutBuffer ();  			srPort.Write (query' 0' 6);  			//send query to printer  			Delay (5000);  			//char[] buffer = new char[srPort.BytesToRead];  			//srPort.Read(buffer' 0' srPort.BytesToRead);  			//if(buffer[18] != 'P')  			//{  			//    DialogResult result = new DialogResult();  			//    result = MessageBox.Show("Please Check Printer Paper and Continue"'"Print"'MessageBoxButtons.YesNo'MessageBoxIcon.Question'MessageBoxDefaultButton.Button1 );  			//    if (result == DialogResult.Yes)  			//    {  			//        return 2;  			//    }  			//    else  			//    {  			//        return 0;  			//    }  			//}  			//  srPort.WriteTimeout = 200;  			int btw = srPort.BytesToWrite;  			//srPort.Write(mmByte' 0' 3); //set form size to 14  			srPort.Write (setEasyMode);  			//set printer to easy mode  			//srPort.Write(back);  			srPort.Write (LabelData);  			//print label  			srPort.Write (ahead);  			Delay (1000);  			while (srPort.BytesToWrite > 0) {  				Application.DoEvents ();  			}  			//srPort.Write(changeMode);   //set printer to line mode by using {LP}  			//srPort.Write(mByte' 0' 1);  //set form feed  			srPort.Close ();  			//close the serial port  		}  		catch (Exception ex) {  			srPort.Close ();  			//close the serial port  			return (0);  		}  		finally {  			srPort.Close ();  			//close the serial port  		}  		return (1);  	}  	else {  		return (0);  	}  }  catch (Exception) {  	return (0);  }  
Magic Number,PrintAWBLabels,clsOneilOC3,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\clsOneilOC3.cs,PrintLabel,The following statement contains a magic number: try {  	//int option = 0;  	//awb.PadLeft(11' '0');  	string lblHeader = "";  	try {  		lblHeader = getValueFromConf ("lableHeading");  	}  	catch (Exception ex) {  		lblHeader = "GoAir CARGO";  	}  	string ClientPhone = "";  	try {  		ClientPhone = getValueFromConf ("clientContact");  	}  	catch (Exception ex) {  		ClientPhone = "";  	}  	string mhead = "{PRINT:";  	//string name = "@0'50:MF107' HM2' VM2|Jet Airways CARGO|";  	string name = "@0'50:MF107' HM2' VM2|" + lblHeader.Trim () + "|";  	//string lPhone = "@40'170:MF226' HM1' VM1|Ph: 1800222111/09223222111|";  	string lPhone = "@40'170:MF226' HM1' VM1|" + ClientPhone.Trim () + "|";  	string AXB = "@80'50:MF107|AWBNo|";  	string AXBValue1 = "";  	string AXBValue2 = "";  	if (awb.Trim ().Length == 10) {  		AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 6) + "|";  		AXBValue2 = "@115'180:MF226' HM3' VMULT3|" + awb.Substring (6' 4) + "|";  	}  	else if (awb.Trim ().Length == 11) {  		if (awb.Trim ().ToUpper ().Substring (0' 3) == "SAC") {  			AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 3) + "|";  			AXBValue1 += "@135'110:MF226' HM2' VMULT2|" + awb.Substring (3' 4) + "|";  			AXBValue2 = "@115'185:MF226' HM3' VMULT3|" + awb.Substring (7' 4) + "|";  		}  		else {  			AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 7) + "|";  			AXBValue2 = "@115'180:MF226' HM3' VMULT3|" + awb.Substring (7' 4) + "|";  		}  	}  	//string mtype = "@35'140:MF204' HM3' V6|" + type + "|";  	string mitm = "@80'310:MF107|No Of PCS|";  	string mitemValue = "@135'310:MF226' HM3' VMULT2|" + no.ToString () + "/" + item + " |";  	string mdest = "@220'310:MF107|DEST|";  	//string mdestValue = "@255'310:MF226' HM8' VMULT3|" + dest + "|";  	string mdestValue = "@255'310:MF107' HM4' VMULT3|" + dest + "|";  	string destpin = "@300'310:MF107| |";  	string msource = "@220'50:MF107|ORIGIN|";  	//string msourceValue = "@255'50:MF226' HM8' VMULT3|" + source + "|";  	string msourceValue = "@255'50:MF107' HM4' VMULT3|" + source + "|";  	string mvia = "@222'350:MF107' HM3' VM2|" + via + "|";  	//string mwt = "@275'350:MF075' HM3' VM2|WT- " + weight + "|";  	//string mBaxb = "@335'50:BC39N'HIGH 25'WIDE 4|" + axb + "|";  	string mBaxb = "@338'100:BC39N'HIGH 15'WIDE 2|" + awb.Trim () + no.ToString ().Trim ().PadLeft (4' '0') + "|";  	string mLaxb = "@420'150:MF226' HM3' VMULT2|" + awb.Trim () + "|";  	string tDate = DateTime.Now.ToString ("dd-MM-yyyy HH:mm:ss");  	string mtDate = "@470'60:MF107|Date:" + tDate + "|";  	string lFooter = "@508'150:MF226|Powered By QID Ph: 020-40039501|";  	//string mtDate = "@528'60:MF107|Date:" + tDate + "|";  	//string hLine1 = "@0'40:HLINE' length 520' thick 5|";  //  	string hLine2 = "@60'40:HLINE' length 520' thick 5|";  	//  	string vLine1 = "@60'40:VLINE' length 270' thick 5|";  	//  	string vLine3 = "@60'300:VLINE' length 270' thick 5|";  	//  	string vLine2 = "@60'555:VLINE' length 270' thick 5|";  	//  	string hLine4 = "@325'40:HLINE' length 520' thick 5|";  	//  	string hLine3 = "@200'40:HLINE' length 520' thick 5|";  	//  	string mFooter = "}";  	//string changeMode = "{LP}";  	string back = "{BACK:15}";  	string ahead = "{AHEAD:114}";  	byte[] mByte = new byte[1];  	mByte [0] = 14;  	byte[] mmByte = new byte[3];  	mmByte [0] = 27;  	mmByte [1] = 67;  	mmByte [2] = 14;  	byte[] query = new byte[6];  	query [0] = 27;  	query [1] = 123;  	query [2] = 83;  	query [3] = 84;  	query [4] = 63;  	query [5] = 125;  	string config = Convert.ToChar (27) + "{CL!M:1}";  	string LabelData = mhead + name + lPhone + vLine1 + vLine2 + vLine3 + hLine2 + hLine3 + hLine4 + AXB + AXBValue1 + AXBValue2 + mdest + mdestValue + destpin + msource + msourceValue + mvia + mitm + mitemValue + mBaxb + mLaxb + mtDate + lFooter + mFooter;  	if (openport ())//open serial port  	 {  		try {  			//srPort.WriteLine(config);  			srPort.DiscardInBuffer ();  			srPort.DiscardOutBuffer ();  			srPort.Write (query' 0' 6);  			//send query to printer  			Delay (5000);  			//char[] buffer = new char[srPort.BytesToRead];  			//srPort.Read(buffer' 0' srPort.BytesToRead);  			//if(buffer[18] != 'P')  			//{  			//    DialogResult result = new DialogResult();  			//    result = MessageBox.Show("Please Check Printer Paper and Continue"'"Print"'MessageBoxButtons.YesNo'MessageBoxIcon.Question'MessageBoxDefaultButton.Button1 );  			//    if (result == DialogResult.Yes)  			//    {  			//        return 2;  			//    }  			//    else  			//    {  			//        return 0;  			//    }  			//}  			//  srPort.WriteTimeout = 200;  			int btw = srPort.BytesToWrite;  			//srPort.Write(mmByte' 0' 3); //set form size to 14  			srPort.Write (setEasyMode);  			//set printer to easy mode  			//srPort.Write(back);  			srPort.Write (LabelData);  			//print label  			srPort.Write (ahead);  			Delay (1000);  			while (srPort.BytesToWrite > 0) {  				Application.DoEvents ();  			}  			//srPort.Write(changeMode);   //set printer to line mode by using {LP}  			//srPort.Write(mByte' 0' 1);  //set form feed  			srPort.Close ();  			//close the serial port  		}  		catch (Exception ex) {  			srPort.Close ();  			//close the serial port  			return (0);  		}  		finally {  			srPort.Close ();  			//close the serial port  		}  		return (1);  	}  	else {  		return (0);  	}  }  catch (Exception) {  	return (0);  }  
Magic Number,PrintAWBLabels,clsOneilOC3,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\clsOneilOC3.cs,PrintLabel,The following statement contains a magic number: try {  	//int option = 0;  	//awb.PadLeft(11' '0');  	string lblHeader = "";  	try {  		lblHeader = getValueFromConf ("lableHeading");  	}  	catch (Exception ex) {  		lblHeader = "GoAir CARGO";  	}  	string ClientPhone = "";  	try {  		ClientPhone = getValueFromConf ("clientContact");  	}  	catch (Exception ex) {  		ClientPhone = "";  	}  	string mhead = "{PRINT:";  	//string name = "@0'50:MF107' HM2' VM2|Jet Airways CARGO|";  	string name = "@0'50:MF107' HM2' VM2|" + lblHeader.Trim () + "|";  	//string lPhone = "@40'170:MF226' HM1' VM1|Ph: 1800222111/09223222111|";  	string lPhone = "@40'170:MF226' HM1' VM1|" + ClientPhone.Trim () + "|";  	string AXB = "@80'50:MF107|AWBNo|";  	string AXBValue1 = "";  	string AXBValue2 = "";  	if (awb.Trim ().Length == 10) {  		AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 6) + "|";  		AXBValue2 = "@115'180:MF226' HM3' VMULT3|" + awb.Substring (6' 4) + "|";  	}  	else if (awb.Trim ().Length == 11) {  		if (awb.Trim ().ToUpper ().Substring (0' 3) == "SAC") {  			AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 3) + "|";  			AXBValue1 += "@135'110:MF226' HM2' VMULT2|" + awb.Substring (3' 4) + "|";  			AXBValue2 = "@115'185:MF226' HM3' VMULT3|" + awb.Substring (7' 4) + "|";  		}  		else {  			AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 7) + "|";  			AXBValue2 = "@115'180:MF226' HM3' VMULT3|" + awb.Substring (7' 4) + "|";  		}  	}  	//string mtype = "@35'140:MF204' HM3' V6|" + type + "|";  	string mitm = "@80'310:MF107|No Of PCS|";  	string mitemValue = "@135'310:MF226' HM3' VMULT2|" + no.ToString () + "/" + item + " |";  	string mdest = "@220'310:MF107|DEST|";  	//string mdestValue = "@255'310:MF226' HM8' VMULT3|" + dest + "|";  	string mdestValue = "@255'310:MF107' HM4' VMULT3|" + dest + "|";  	string destpin = "@300'310:MF107| |";  	string msource = "@220'50:MF107|ORIGIN|";  	//string msourceValue = "@255'50:MF226' HM8' VMULT3|" + source + "|";  	string msourceValue = "@255'50:MF107' HM4' VMULT3|" + source + "|";  	string mvia = "@222'350:MF107' HM3' VM2|" + via + "|";  	//string mwt = "@275'350:MF075' HM3' VM2|WT- " + weight + "|";  	//string mBaxb = "@335'50:BC39N'HIGH 25'WIDE 4|" + axb + "|";  	string mBaxb = "@338'100:BC39N'HIGH 15'WIDE 2|" + awb.Trim () + no.ToString ().Trim ().PadLeft (4' '0') + "|";  	string mLaxb = "@420'150:MF226' HM3' VMULT2|" + awb.Trim () + "|";  	string tDate = DateTime.Now.ToString ("dd-MM-yyyy HH:mm:ss");  	string mtDate = "@470'60:MF107|Date:" + tDate + "|";  	string lFooter = "@508'150:MF226|Powered By QID Ph: 020-40039501|";  	//string mtDate = "@528'60:MF107|Date:" + tDate + "|";  	//string hLine1 = "@0'40:HLINE' length 520' thick 5|";  //  	string hLine2 = "@60'40:HLINE' length 520' thick 5|";  	//  	string vLine1 = "@60'40:VLINE' length 270' thick 5|";  	//  	string vLine3 = "@60'300:VLINE' length 270' thick 5|";  	//  	string vLine2 = "@60'555:VLINE' length 270' thick 5|";  	//  	string hLine4 = "@325'40:HLINE' length 520' thick 5|";  	//  	string hLine3 = "@200'40:HLINE' length 520' thick 5|";  	//  	string mFooter = "}";  	//string changeMode = "{LP}";  	string back = "{BACK:15}";  	string ahead = "{AHEAD:114}";  	byte[] mByte = new byte[1];  	mByte [0] = 14;  	byte[] mmByte = new byte[3];  	mmByte [0] = 27;  	mmByte [1] = 67;  	mmByte [2] = 14;  	byte[] query = new byte[6];  	query [0] = 27;  	query [1] = 123;  	query [2] = 83;  	query [3] = 84;  	query [4] = 63;  	query [5] = 125;  	string config = Convert.ToChar (27) + "{CL!M:1}";  	string LabelData = mhead + name + lPhone + vLine1 + vLine2 + vLine3 + hLine2 + hLine3 + hLine4 + AXB + AXBValue1 + AXBValue2 + mdest + mdestValue + destpin + msource + msourceValue + mvia + mitm + mitemValue + mBaxb + mLaxb + mtDate + lFooter + mFooter;  	if (openport ())//open serial port  	 {  		try {  			//srPort.WriteLine(config);  			srPort.DiscardInBuffer ();  			srPort.DiscardOutBuffer ();  			srPort.Write (query' 0' 6);  			//send query to printer  			Delay (5000);  			//char[] buffer = new char[srPort.BytesToRead];  			//srPort.Read(buffer' 0' srPort.BytesToRead);  			//if(buffer[18] != 'P')  			//{  			//    DialogResult result = new DialogResult();  			//    result = MessageBox.Show("Please Check Printer Paper and Continue"'"Print"'MessageBoxButtons.YesNo'MessageBoxIcon.Question'MessageBoxDefaultButton.Button1 );  			//    if (result == DialogResult.Yes)  			//    {  			//        return 2;  			//    }  			//    else  			//    {  			//        return 0;  			//    }  			//}  			//  srPort.WriteTimeout = 200;  			int btw = srPort.BytesToWrite;  			//srPort.Write(mmByte' 0' 3); //set form size to 14  			srPort.Write (setEasyMode);  			//set printer to easy mode  			//srPort.Write(back);  			srPort.Write (LabelData);  			//print label  			srPort.Write (ahead);  			Delay (1000);  			while (srPort.BytesToWrite > 0) {  				Application.DoEvents ();  			}  			//srPort.Write(changeMode);   //set printer to line mode by using {LP}  			//srPort.Write(mByte' 0' 1);  //set form feed  			srPort.Close ();  			//close the serial port  		}  		catch (Exception ex) {  			srPort.Close ();  			//close the serial port  			return (0);  		}  		finally {  			srPort.Close ();  			//close the serial port  		}  		return (1);  	}  	else {  		return (0);  	}  }  catch (Exception) {  	return (0);  }  
Magic Number,PrintAWBLabels,clsOneilOC3,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\clsOneilOC3.cs,PrintLabel,The following statement contains a magic number: if (awb.Trim ().Length == 10) {  	AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 6) + "|";  	AXBValue2 = "@115'180:MF226' HM3' VMULT3|" + awb.Substring (6' 4) + "|";  }  else if (awb.Trim ().Length == 11) {  	if (awb.Trim ().ToUpper ().Substring (0' 3) == "SAC") {  		AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 3) + "|";  		AXBValue1 += "@135'110:MF226' HM2' VMULT2|" + awb.Substring (3' 4) + "|";  		AXBValue2 = "@115'185:MF226' HM3' VMULT3|" + awb.Substring (7' 4) + "|";  	}  	else {  		AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 7) + "|";  		AXBValue2 = "@115'180:MF226' HM3' VMULT3|" + awb.Substring (7' 4) + "|";  	}  }  
Magic Number,PrintAWBLabels,clsOneilOC3,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\clsOneilOC3.cs,PrintLabel,The following statement contains a magic number: if (awb.Trim ().Length == 10) {  	AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 6) + "|";  	AXBValue2 = "@115'180:MF226' HM3' VMULT3|" + awb.Substring (6' 4) + "|";  }  else if (awb.Trim ().Length == 11) {  	if (awb.Trim ().ToUpper ().Substring (0' 3) == "SAC") {  		AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 3) + "|";  		AXBValue1 += "@135'110:MF226' HM2' VMULT2|" + awb.Substring (3' 4) + "|";  		AXBValue2 = "@115'185:MF226' HM3' VMULT3|" + awb.Substring (7' 4) + "|";  	}  	else {  		AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 7) + "|";  		AXBValue2 = "@115'180:MF226' HM3' VMULT3|" + awb.Substring (7' 4) + "|";  	}  }  
Magic Number,PrintAWBLabels,clsOneilOC3,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\clsOneilOC3.cs,PrintLabel,The following statement contains a magic number: if (awb.Trim ().Length == 10) {  	AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 6) + "|";  	AXBValue2 = "@115'180:MF226' HM3' VMULT3|" + awb.Substring (6' 4) + "|";  }  else if (awb.Trim ().Length == 11) {  	if (awb.Trim ().ToUpper ().Substring (0' 3) == "SAC") {  		AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 3) + "|";  		AXBValue1 += "@135'110:MF226' HM2' VMULT2|" + awb.Substring (3' 4) + "|";  		AXBValue2 = "@115'185:MF226' HM3' VMULT3|" + awb.Substring (7' 4) + "|";  	}  	else {  		AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 7) + "|";  		AXBValue2 = "@115'180:MF226' HM3' VMULT3|" + awb.Substring (7' 4) + "|";  	}  }  
Magic Number,PrintAWBLabels,clsOneilOC3,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\clsOneilOC3.cs,PrintLabel,The following statement contains a magic number: if (awb.Trim ().Length == 10) {  	AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 6) + "|";  	AXBValue2 = "@115'180:MF226' HM3' VMULT3|" + awb.Substring (6' 4) + "|";  }  else if (awb.Trim ().Length == 11) {  	if (awb.Trim ().ToUpper ().Substring (0' 3) == "SAC") {  		AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 3) + "|";  		AXBValue1 += "@135'110:MF226' HM2' VMULT2|" + awb.Substring (3' 4) + "|";  		AXBValue2 = "@115'185:MF226' HM3' VMULT3|" + awb.Substring (7' 4) + "|";  	}  	else {  		AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 7) + "|";  		AXBValue2 = "@115'180:MF226' HM3' VMULT3|" + awb.Substring (7' 4) + "|";  	}  }  
Magic Number,PrintAWBLabels,clsOneilOC3,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\clsOneilOC3.cs,PrintLabel,The following statement contains a magic number: if (awb.Trim ().Length == 10) {  	AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 6) + "|";  	AXBValue2 = "@115'180:MF226' HM3' VMULT3|" + awb.Substring (6' 4) + "|";  }  else if (awb.Trim ().Length == 11) {  	if (awb.Trim ().ToUpper ().Substring (0' 3) == "SAC") {  		AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 3) + "|";  		AXBValue1 += "@135'110:MF226' HM2' VMULT2|" + awb.Substring (3' 4) + "|";  		AXBValue2 = "@115'185:MF226' HM3' VMULT3|" + awb.Substring (7' 4) + "|";  	}  	else {  		AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 7) + "|";  		AXBValue2 = "@115'180:MF226' HM3' VMULT3|" + awb.Substring (7' 4) + "|";  	}  }  
Magic Number,PrintAWBLabels,clsOneilOC3,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\clsOneilOC3.cs,PrintLabel,The following statement contains a magic number: if (awb.Trim ().Length == 10) {  	AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 6) + "|";  	AXBValue2 = "@115'180:MF226' HM3' VMULT3|" + awb.Substring (6' 4) + "|";  }  else if (awb.Trim ().Length == 11) {  	if (awb.Trim ().ToUpper ().Substring (0' 3) == "SAC") {  		AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 3) + "|";  		AXBValue1 += "@135'110:MF226' HM2' VMULT2|" + awb.Substring (3' 4) + "|";  		AXBValue2 = "@115'185:MF226' HM3' VMULT3|" + awb.Substring (7' 4) + "|";  	}  	else {  		AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 7) + "|";  		AXBValue2 = "@115'180:MF226' HM3' VMULT3|" + awb.Substring (7' 4) + "|";  	}  }  
Magic Number,PrintAWBLabels,clsOneilOC3,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\clsOneilOC3.cs,PrintLabel,The following statement contains a magic number: if (awb.Trim ().Length == 10) {  	AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 6) + "|";  	AXBValue2 = "@115'180:MF226' HM3' VMULT3|" + awb.Substring (6' 4) + "|";  }  else if (awb.Trim ().Length == 11) {  	if (awb.Trim ().ToUpper ().Substring (0' 3) == "SAC") {  		AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 3) + "|";  		AXBValue1 += "@135'110:MF226' HM2' VMULT2|" + awb.Substring (3' 4) + "|";  		AXBValue2 = "@115'185:MF226' HM3' VMULT3|" + awb.Substring (7' 4) + "|";  	}  	else {  		AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 7) + "|";  		AXBValue2 = "@115'180:MF226' HM3' VMULT3|" + awb.Substring (7' 4) + "|";  	}  }  
Magic Number,PrintAWBLabels,clsOneilOC3,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\clsOneilOC3.cs,PrintLabel,The following statement contains a magic number: if (awb.Trim ().Length == 10) {  	AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 6) + "|";  	AXBValue2 = "@115'180:MF226' HM3' VMULT3|" + awb.Substring (6' 4) + "|";  }  else if (awb.Trim ().Length == 11) {  	if (awb.Trim ().ToUpper ().Substring (0' 3) == "SAC") {  		AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 3) + "|";  		AXBValue1 += "@135'110:MF226' HM2' VMULT2|" + awb.Substring (3' 4) + "|";  		AXBValue2 = "@115'185:MF226' HM3' VMULT3|" + awb.Substring (7' 4) + "|";  	}  	else {  		AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 7) + "|";  		AXBValue2 = "@115'180:MF226' HM3' VMULT3|" + awb.Substring (7' 4) + "|";  	}  }  
Magic Number,PrintAWBLabels,clsOneilOC3,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\clsOneilOC3.cs,PrintLabel,The following statement contains a magic number: if (awb.Trim ().Length == 10) {  	AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 6) + "|";  	AXBValue2 = "@115'180:MF226' HM3' VMULT3|" + awb.Substring (6' 4) + "|";  }  else if (awb.Trim ().Length == 11) {  	if (awb.Trim ().ToUpper ().Substring (0' 3) == "SAC") {  		AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 3) + "|";  		AXBValue1 += "@135'110:MF226' HM2' VMULT2|" + awb.Substring (3' 4) + "|";  		AXBValue2 = "@115'185:MF226' HM3' VMULT3|" + awb.Substring (7' 4) + "|";  	}  	else {  		AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 7) + "|";  		AXBValue2 = "@115'180:MF226' HM3' VMULT3|" + awb.Substring (7' 4) + "|";  	}  }  
Magic Number,PrintAWBLabels,clsOneilOC3,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\clsOneilOC3.cs,PrintLabel,The following statement contains a magic number: if (awb.Trim ().Length == 10) {  	AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 6) + "|";  	AXBValue2 = "@115'180:MF226' HM3' VMULT3|" + awb.Substring (6' 4) + "|";  }  else if (awb.Trim ().Length == 11) {  	if (awb.Trim ().ToUpper ().Substring (0' 3) == "SAC") {  		AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 3) + "|";  		AXBValue1 += "@135'110:MF226' HM2' VMULT2|" + awb.Substring (3' 4) + "|";  		AXBValue2 = "@115'185:MF226' HM3' VMULT3|" + awb.Substring (7' 4) + "|";  	}  	else {  		AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 7) + "|";  		AXBValue2 = "@115'180:MF226' HM3' VMULT3|" + awb.Substring (7' 4) + "|";  	}  }  
Magic Number,PrintAWBLabels,clsOneilOC3,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\clsOneilOC3.cs,PrintLabel,The following statement contains a magic number: if (awb.Trim ().Length == 10) {  	AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 6) + "|";  	AXBValue2 = "@115'180:MF226' HM3' VMULT3|" + awb.Substring (6' 4) + "|";  }  else if (awb.Trim ().Length == 11) {  	if (awb.Trim ().ToUpper ().Substring (0' 3) == "SAC") {  		AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 3) + "|";  		AXBValue1 += "@135'110:MF226' HM2' VMULT2|" + awb.Substring (3' 4) + "|";  		AXBValue2 = "@115'185:MF226' HM3' VMULT3|" + awb.Substring (7' 4) + "|";  	}  	else {  		AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 7) + "|";  		AXBValue2 = "@115'180:MF226' HM3' VMULT3|" + awb.Substring (7' 4) + "|";  	}  }  
Magic Number,PrintAWBLabels,clsOneilOC3,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\clsOneilOC3.cs,PrintLabel,The following statement contains a magic number: if (awb.Trim ().Length == 10) {  	AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 6) + "|";  	AXBValue2 = "@115'180:MF226' HM3' VMULT3|" + awb.Substring (6' 4) + "|";  }  else if (awb.Trim ().Length == 11) {  	if (awb.Trim ().ToUpper ().Substring (0' 3) == "SAC") {  		AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 3) + "|";  		AXBValue1 += "@135'110:MF226' HM2' VMULT2|" + awb.Substring (3' 4) + "|";  		AXBValue2 = "@115'185:MF226' HM3' VMULT3|" + awb.Substring (7' 4) + "|";  	}  	else {  		AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 7) + "|";  		AXBValue2 = "@115'180:MF226' HM3' VMULT3|" + awb.Substring (7' 4) + "|";  	}  }  
Magic Number,PrintAWBLabels,clsOneilOC3,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\clsOneilOC3.cs,PrintLabel,The following statement contains a magic number: if (awb.Trim ().Length == 10) {  	AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 6) + "|";  	AXBValue2 = "@115'180:MF226' HM3' VMULT3|" + awb.Substring (6' 4) + "|";  }  else if (awb.Trim ().Length == 11) {  	if (awb.Trim ().ToUpper ().Substring (0' 3) == "SAC") {  		AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 3) + "|";  		AXBValue1 += "@135'110:MF226' HM2' VMULT2|" + awb.Substring (3' 4) + "|";  		AXBValue2 = "@115'185:MF226' HM3' VMULT3|" + awb.Substring (7' 4) + "|";  	}  	else {  		AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 7) + "|";  		AXBValue2 = "@115'180:MF226' HM3' VMULT3|" + awb.Substring (7' 4) + "|";  	}  }  
Magic Number,PrintAWBLabels,clsOneilOC3,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\clsOneilOC3.cs,PrintLabel,The following statement contains a magic number: if (awb.Trim ().Length == 10) {  	AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 6) + "|";  	AXBValue2 = "@115'180:MF226' HM3' VMULT3|" + awb.Substring (6' 4) + "|";  }  else if (awb.Trim ().Length == 11) {  	if (awb.Trim ().ToUpper ().Substring (0' 3) == "SAC") {  		AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 3) + "|";  		AXBValue1 += "@135'110:MF226' HM2' VMULT2|" + awb.Substring (3' 4) + "|";  		AXBValue2 = "@115'185:MF226' HM3' VMULT3|" + awb.Substring (7' 4) + "|";  	}  	else {  		AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 7) + "|";  		AXBValue2 = "@115'180:MF226' HM3' VMULT3|" + awb.Substring (7' 4) + "|";  	}  }  
Magic Number,PrintAWBLabels,clsOneilOC3,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\clsOneilOC3.cs,PrintLabel,The following statement contains a magic number: AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 6) + "|";  
Magic Number,PrintAWBLabels,clsOneilOC3,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\clsOneilOC3.cs,PrintLabel,The following statement contains a magic number: AXBValue2 = "@115'180:MF226' HM3' VMULT3|" + awb.Substring (6' 4) + "|";  
Magic Number,PrintAWBLabels,clsOneilOC3,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\clsOneilOC3.cs,PrintLabel,The following statement contains a magic number: AXBValue2 = "@115'180:MF226' HM3' VMULT3|" + awb.Substring (6' 4) + "|";  
Magic Number,PrintAWBLabels,clsOneilOC3,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\clsOneilOC3.cs,PrintLabel,The following statement contains a magic number: if (awb.Trim ().Length == 11) {  	if (awb.Trim ().ToUpper ().Substring (0' 3) == "SAC") {  		AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 3) + "|";  		AXBValue1 += "@135'110:MF226' HM2' VMULT2|" + awb.Substring (3' 4) + "|";  		AXBValue2 = "@115'185:MF226' HM3' VMULT3|" + awb.Substring (7' 4) + "|";  	}  	else {  		AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 7) + "|";  		AXBValue2 = "@115'180:MF226' HM3' VMULT3|" + awb.Substring (7' 4) + "|";  	}  }  
Magic Number,PrintAWBLabels,clsOneilOC3,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\clsOneilOC3.cs,PrintLabel,The following statement contains a magic number: if (awb.Trim ().Length == 11) {  	if (awb.Trim ().ToUpper ().Substring (0' 3) == "SAC") {  		AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 3) + "|";  		AXBValue1 += "@135'110:MF226' HM2' VMULT2|" + awb.Substring (3' 4) + "|";  		AXBValue2 = "@115'185:MF226' HM3' VMULT3|" + awb.Substring (7' 4) + "|";  	}  	else {  		AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 7) + "|";  		AXBValue2 = "@115'180:MF226' HM3' VMULT3|" + awb.Substring (7' 4) + "|";  	}  }  
Magic Number,PrintAWBLabels,clsOneilOC3,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\clsOneilOC3.cs,PrintLabel,The following statement contains a magic number: if (awb.Trim ().Length == 11) {  	if (awb.Trim ().ToUpper ().Substring (0' 3) == "SAC") {  		AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 3) + "|";  		AXBValue1 += "@135'110:MF226' HM2' VMULT2|" + awb.Substring (3' 4) + "|";  		AXBValue2 = "@115'185:MF226' HM3' VMULT3|" + awb.Substring (7' 4) + "|";  	}  	else {  		AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 7) + "|";  		AXBValue2 = "@115'180:MF226' HM3' VMULT3|" + awb.Substring (7' 4) + "|";  	}  }  
Magic Number,PrintAWBLabels,clsOneilOC3,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\clsOneilOC3.cs,PrintLabel,The following statement contains a magic number: if (awb.Trim ().Length == 11) {  	if (awb.Trim ().ToUpper ().Substring (0' 3) == "SAC") {  		AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 3) + "|";  		AXBValue1 += "@135'110:MF226' HM2' VMULT2|" + awb.Substring (3' 4) + "|";  		AXBValue2 = "@115'185:MF226' HM3' VMULT3|" + awb.Substring (7' 4) + "|";  	}  	else {  		AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 7) + "|";  		AXBValue2 = "@115'180:MF226' HM3' VMULT3|" + awb.Substring (7' 4) + "|";  	}  }  
Magic Number,PrintAWBLabels,clsOneilOC3,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\clsOneilOC3.cs,PrintLabel,The following statement contains a magic number: if (awb.Trim ().Length == 11) {  	if (awb.Trim ().ToUpper ().Substring (0' 3) == "SAC") {  		AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 3) + "|";  		AXBValue1 += "@135'110:MF226' HM2' VMULT2|" + awb.Substring (3' 4) + "|";  		AXBValue2 = "@115'185:MF226' HM3' VMULT3|" + awb.Substring (7' 4) + "|";  	}  	else {  		AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 7) + "|";  		AXBValue2 = "@115'180:MF226' HM3' VMULT3|" + awb.Substring (7' 4) + "|";  	}  }  
Magic Number,PrintAWBLabels,clsOneilOC3,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\clsOneilOC3.cs,PrintLabel,The following statement contains a magic number: if (awb.Trim ().Length == 11) {  	if (awb.Trim ().ToUpper ().Substring (0' 3) == "SAC") {  		AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 3) + "|";  		AXBValue1 += "@135'110:MF226' HM2' VMULT2|" + awb.Substring (3' 4) + "|";  		AXBValue2 = "@115'185:MF226' HM3' VMULT3|" + awb.Substring (7' 4) + "|";  	}  	else {  		AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 7) + "|";  		AXBValue2 = "@115'180:MF226' HM3' VMULT3|" + awb.Substring (7' 4) + "|";  	}  }  
Magic Number,PrintAWBLabels,clsOneilOC3,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\clsOneilOC3.cs,PrintLabel,The following statement contains a magic number: if (awb.Trim ().Length == 11) {  	if (awb.Trim ().ToUpper ().Substring (0' 3) == "SAC") {  		AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 3) + "|";  		AXBValue1 += "@135'110:MF226' HM2' VMULT2|" + awb.Substring (3' 4) + "|";  		AXBValue2 = "@115'185:MF226' HM3' VMULT3|" + awb.Substring (7' 4) + "|";  	}  	else {  		AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 7) + "|";  		AXBValue2 = "@115'180:MF226' HM3' VMULT3|" + awb.Substring (7' 4) + "|";  	}  }  
Magic Number,PrintAWBLabels,clsOneilOC3,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\clsOneilOC3.cs,PrintLabel,The following statement contains a magic number: if (awb.Trim ().Length == 11) {  	if (awb.Trim ().ToUpper ().Substring (0' 3) == "SAC") {  		AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 3) + "|";  		AXBValue1 += "@135'110:MF226' HM2' VMULT2|" + awb.Substring (3' 4) + "|";  		AXBValue2 = "@115'185:MF226' HM3' VMULT3|" + awb.Substring (7' 4) + "|";  	}  	else {  		AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 7) + "|";  		AXBValue2 = "@115'180:MF226' HM3' VMULT3|" + awb.Substring (7' 4) + "|";  	}  }  
Magic Number,PrintAWBLabels,clsOneilOC3,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\clsOneilOC3.cs,PrintLabel,The following statement contains a magic number: if (awb.Trim ().Length == 11) {  	if (awb.Trim ().ToUpper ().Substring (0' 3) == "SAC") {  		AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 3) + "|";  		AXBValue1 += "@135'110:MF226' HM2' VMULT2|" + awb.Substring (3' 4) + "|";  		AXBValue2 = "@115'185:MF226' HM3' VMULT3|" + awb.Substring (7' 4) + "|";  	}  	else {  		AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 7) + "|";  		AXBValue2 = "@115'180:MF226' HM3' VMULT3|" + awb.Substring (7' 4) + "|";  	}  }  
Magic Number,PrintAWBLabels,clsOneilOC3,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\clsOneilOC3.cs,PrintLabel,The following statement contains a magic number: if (awb.Trim ().Length == 11) {  	if (awb.Trim ().ToUpper ().Substring (0' 3) == "SAC") {  		AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 3) + "|";  		AXBValue1 += "@135'110:MF226' HM2' VMULT2|" + awb.Substring (3' 4) + "|";  		AXBValue2 = "@115'185:MF226' HM3' VMULT3|" + awb.Substring (7' 4) + "|";  	}  	else {  		AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 7) + "|";  		AXBValue2 = "@115'180:MF226' HM3' VMULT3|" + awb.Substring (7' 4) + "|";  	}  }  
Magic Number,PrintAWBLabels,clsOneilOC3,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\clsOneilOC3.cs,PrintLabel,The following statement contains a magic number: if (awb.Trim ().ToUpper ().Substring (0' 3) == "SAC") {  	AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 3) + "|";  	AXBValue1 += "@135'110:MF226' HM2' VMULT2|" + awb.Substring (3' 4) + "|";  	AXBValue2 = "@115'185:MF226' HM3' VMULT3|" + awb.Substring (7' 4) + "|";  }  else {  	AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 7) + "|";  	AXBValue2 = "@115'180:MF226' HM3' VMULT3|" + awb.Substring (7' 4) + "|";  }  
Magic Number,PrintAWBLabels,clsOneilOC3,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\clsOneilOC3.cs,PrintLabel,The following statement contains a magic number: if (awb.Trim ().ToUpper ().Substring (0' 3) == "SAC") {  	AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 3) + "|";  	AXBValue1 += "@135'110:MF226' HM2' VMULT2|" + awb.Substring (3' 4) + "|";  	AXBValue2 = "@115'185:MF226' HM3' VMULT3|" + awb.Substring (7' 4) + "|";  }  else {  	AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 7) + "|";  	AXBValue2 = "@115'180:MF226' HM3' VMULT3|" + awb.Substring (7' 4) + "|";  }  
Magic Number,PrintAWBLabels,clsOneilOC3,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\clsOneilOC3.cs,PrintLabel,The following statement contains a magic number: if (awb.Trim ().ToUpper ().Substring (0' 3) == "SAC") {  	AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 3) + "|";  	AXBValue1 += "@135'110:MF226' HM2' VMULT2|" + awb.Substring (3' 4) + "|";  	AXBValue2 = "@115'185:MF226' HM3' VMULT3|" + awb.Substring (7' 4) + "|";  }  else {  	AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 7) + "|";  	AXBValue2 = "@115'180:MF226' HM3' VMULT3|" + awb.Substring (7' 4) + "|";  }  
Magic Number,PrintAWBLabels,clsOneilOC3,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\clsOneilOC3.cs,PrintLabel,The following statement contains a magic number: if (awb.Trim ().ToUpper ().Substring (0' 3) == "SAC") {  	AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 3) + "|";  	AXBValue1 += "@135'110:MF226' HM2' VMULT2|" + awb.Substring (3' 4) + "|";  	AXBValue2 = "@115'185:MF226' HM3' VMULT3|" + awb.Substring (7' 4) + "|";  }  else {  	AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 7) + "|";  	AXBValue2 = "@115'180:MF226' HM3' VMULT3|" + awb.Substring (7' 4) + "|";  }  
Magic Number,PrintAWBLabels,clsOneilOC3,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\clsOneilOC3.cs,PrintLabel,The following statement contains a magic number: if (awb.Trim ().ToUpper ().Substring (0' 3) == "SAC") {  	AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 3) + "|";  	AXBValue1 += "@135'110:MF226' HM2' VMULT2|" + awb.Substring (3' 4) + "|";  	AXBValue2 = "@115'185:MF226' HM3' VMULT3|" + awb.Substring (7' 4) + "|";  }  else {  	AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 7) + "|";  	AXBValue2 = "@115'180:MF226' HM3' VMULT3|" + awb.Substring (7' 4) + "|";  }  
Magic Number,PrintAWBLabels,clsOneilOC3,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\clsOneilOC3.cs,PrintLabel,The following statement contains a magic number: if (awb.Trim ().ToUpper ().Substring (0' 3) == "SAC") {  	AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 3) + "|";  	AXBValue1 += "@135'110:MF226' HM2' VMULT2|" + awb.Substring (3' 4) + "|";  	AXBValue2 = "@115'185:MF226' HM3' VMULT3|" + awb.Substring (7' 4) + "|";  }  else {  	AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 7) + "|";  	AXBValue2 = "@115'180:MF226' HM3' VMULT3|" + awb.Substring (7' 4) + "|";  }  
Magic Number,PrintAWBLabels,clsOneilOC3,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\clsOneilOC3.cs,PrintLabel,The following statement contains a magic number: if (awb.Trim ().ToUpper ().Substring (0' 3) == "SAC") {  	AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 3) + "|";  	AXBValue1 += "@135'110:MF226' HM2' VMULT2|" + awb.Substring (3' 4) + "|";  	AXBValue2 = "@115'185:MF226' HM3' VMULT3|" + awb.Substring (7' 4) + "|";  }  else {  	AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 7) + "|";  	AXBValue2 = "@115'180:MF226' HM3' VMULT3|" + awb.Substring (7' 4) + "|";  }  
Magic Number,PrintAWBLabels,clsOneilOC3,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\clsOneilOC3.cs,PrintLabel,The following statement contains a magic number: if (awb.Trim ().ToUpper ().Substring (0' 3) == "SAC") {  	AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 3) + "|";  	AXBValue1 += "@135'110:MF226' HM2' VMULT2|" + awb.Substring (3' 4) + "|";  	AXBValue2 = "@115'185:MF226' HM3' VMULT3|" + awb.Substring (7' 4) + "|";  }  else {  	AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 7) + "|";  	AXBValue2 = "@115'180:MF226' HM3' VMULT3|" + awb.Substring (7' 4) + "|";  }  
Magic Number,PrintAWBLabels,clsOneilOC3,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\clsOneilOC3.cs,PrintLabel,The following statement contains a magic number: if (awb.Trim ().ToUpper ().Substring (0' 3) == "SAC") {  	AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 3) + "|";  	AXBValue1 += "@135'110:MF226' HM2' VMULT2|" + awb.Substring (3' 4) + "|";  	AXBValue2 = "@115'185:MF226' HM3' VMULT3|" + awb.Substring (7' 4) + "|";  }  else {  	AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 7) + "|";  	AXBValue2 = "@115'180:MF226' HM3' VMULT3|" + awb.Substring (7' 4) + "|";  }  
Magic Number,PrintAWBLabels,clsOneilOC3,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\clsOneilOC3.cs,PrintLabel,The following statement contains a magic number: AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 3) + "|";  
Magic Number,PrintAWBLabels,clsOneilOC3,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\clsOneilOC3.cs,PrintLabel,The following statement contains a magic number: AXBValue1 += "@135'110:MF226' HM2' VMULT2|" + awb.Substring (3' 4) + "|";  
Magic Number,PrintAWBLabels,clsOneilOC3,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\clsOneilOC3.cs,PrintLabel,The following statement contains a magic number: AXBValue1 += "@135'110:MF226' HM2' VMULT2|" + awb.Substring (3' 4) + "|";  
Magic Number,PrintAWBLabels,clsOneilOC3,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\clsOneilOC3.cs,PrintLabel,The following statement contains a magic number: AXBValue2 = "@115'185:MF226' HM3' VMULT3|" + awb.Substring (7' 4) + "|";  
Magic Number,PrintAWBLabels,clsOneilOC3,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\clsOneilOC3.cs,PrintLabel,The following statement contains a magic number: AXBValue2 = "@115'185:MF226' HM3' VMULT3|" + awb.Substring (7' 4) + "|";  
Magic Number,PrintAWBLabels,clsOneilOC3,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\clsOneilOC3.cs,PrintLabel,The following statement contains a magic number: AXBValue1 = "@135'50:MF226' HM2' VMULT2|" + awb.Substring (0' 7) + "|";  
Magic Number,PrintAWBLabels,clsOneilOC3,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\clsOneilOC3.cs,PrintLabel,The following statement contains a magic number: AXBValue2 = "@115'180:MF226' HM3' VMULT3|" + awb.Substring (7' 4) + "|";  
Magic Number,PrintAWBLabels,clsOneilOC3,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\clsOneilOC3.cs,PrintLabel,The following statement contains a magic number: AXBValue2 = "@115'180:MF226' HM3' VMULT3|" + awb.Substring (7' 4) + "|";  
Magic Number,PrintAWBLabels,clsOneilOC3,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\clsOneilOC3.cs,PrintLabel,The following statement contains a magic number: mByte [0] = 14;  
Magic Number,PrintAWBLabels,clsOneilOC3,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\clsOneilOC3.cs,PrintLabel,The following statement contains a magic number: mmByte [0] = 27;  
Magic Number,PrintAWBLabels,clsOneilOC3,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\clsOneilOC3.cs,PrintLabel,The following statement contains a magic number: mmByte [1] = 67;  
Magic Number,PrintAWBLabels,clsOneilOC3,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\clsOneilOC3.cs,PrintLabel,The following statement contains a magic number: mmByte [2] = 14;  
Magic Number,PrintAWBLabels,clsOneilOC3,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\clsOneilOC3.cs,PrintLabel,The following statement contains a magic number: mmByte [2] = 14;  
Magic Number,PrintAWBLabels,clsOneilOC3,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\clsOneilOC3.cs,PrintLabel,The following statement contains a magic number: query [0] = 27;  
Magic Number,PrintAWBLabels,clsOneilOC3,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\clsOneilOC3.cs,PrintLabel,The following statement contains a magic number: query [1] = 123;  
Magic Number,PrintAWBLabels,clsOneilOC3,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\clsOneilOC3.cs,PrintLabel,The following statement contains a magic number: query [2] = 83;  
Magic Number,PrintAWBLabels,clsOneilOC3,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\clsOneilOC3.cs,PrintLabel,The following statement contains a magic number: query [2] = 83;  
Magic Number,PrintAWBLabels,clsOneilOC3,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\clsOneilOC3.cs,PrintLabel,The following statement contains a magic number: query [3] = 84;  
Magic Number,PrintAWBLabels,clsOneilOC3,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\clsOneilOC3.cs,PrintLabel,The following statement contains a magic number: query [3] = 84;  
Magic Number,PrintAWBLabels,clsOneilOC3,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\clsOneilOC3.cs,PrintLabel,The following statement contains a magic number: query [4] = 63;  
Magic Number,PrintAWBLabels,clsOneilOC3,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\clsOneilOC3.cs,PrintLabel,The following statement contains a magic number: query [4] = 63;  
Magic Number,PrintAWBLabels,clsOneilOC3,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\clsOneilOC3.cs,PrintLabel,The following statement contains a magic number: query [5] = 125;  
Magic Number,PrintAWBLabels,clsOneilOC3,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\clsOneilOC3.cs,PrintLabel,The following statement contains a magic number: query [5] = 125;  
Magic Number,PrintAWBLabels,clsOneilOC3,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\clsOneilOC3.cs,PrintLabel,The following statement contains a magic number: if (openport ())//open serial port   {  	try {  		//srPort.WriteLine(config);  		srPort.DiscardInBuffer ();  		srPort.DiscardOutBuffer ();  		srPort.Write (query' 0' 6);  		//send query to printer  		Delay (5000);  		//char[] buffer = new char[srPort.BytesToRead];  		//srPort.Read(buffer' 0' srPort.BytesToRead);  		//if(buffer[18] != 'P')  		//{  		//    DialogResult result = new DialogResult();  		//    result = MessageBox.Show("Please Check Printer Paper and Continue"'"Print"'MessageBoxButtons.YesNo'MessageBoxIcon.Question'MessageBoxDefaultButton.Button1 );  		//    if (result == DialogResult.Yes)  		//    {  		//        return 2;  		//    }  		//    else  		//    {  		//        return 0;  		//    }  		//}  		//  srPort.WriteTimeout = 200;  		int btw = srPort.BytesToWrite;  		//srPort.Write(mmByte' 0' 3); //set form size to 14  		srPort.Write (setEasyMode);  		//set printer to easy mode  		//srPort.Write(back);  		srPort.Write (LabelData);  		//print label  		srPort.Write (ahead);  		Delay (1000);  		while (srPort.BytesToWrite > 0) {  			Application.DoEvents ();  		}  		//srPort.Write(changeMode);   //set printer to line mode by using {LP}  		//srPort.Write(mByte' 0' 1);  //set form feed  		srPort.Close ();  		//close the serial port  	}  	catch (Exception ex) {  		srPort.Close ();  		//close the serial port  		return (0);  	}  	finally {  		srPort.Close ();  		//close the serial port  	}  	return (1);  }  else {  	return (0);  }  
Magic Number,PrintAWBLabels,clsOneilOC3,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\clsOneilOC3.cs,PrintLabel,The following statement contains a magic number: if (openport ())//open serial port   {  	try {  		//srPort.WriteLine(config);  		srPort.DiscardInBuffer ();  		srPort.DiscardOutBuffer ();  		srPort.Write (query' 0' 6);  		//send query to printer  		Delay (5000);  		//char[] buffer = new char[srPort.BytesToRead];  		//srPort.Read(buffer' 0' srPort.BytesToRead);  		//if(buffer[18] != 'P')  		//{  		//    DialogResult result = new DialogResult();  		//    result = MessageBox.Show("Please Check Printer Paper and Continue"'"Print"'MessageBoxButtons.YesNo'MessageBoxIcon.Question'MessageBoxDefaultButton.Button1 );  		//    if (result == DialogResult.Yes)  		//    {  		//        return 2;  		//    }  		//    else  		//    {  		//        return 0;  		//    }  		//}  		//  srPort.WriteTimeout = 200;  		int btw = srPort.BytesToWrite;  		//srPort.Write(mmByte' 0' 3); //set form size to 14  		srPort.Write (setEasyMode);  		//set printer to easy mode  		//srPort.Write(back);  		srPort.Write (LabelData);  		//print label  		srPort.Write (ahead);  		Delay (1000);  		while (srPort.BytesToWrite > 0) {  			Application.DoEvents ();  		}  		//srPort.Write(changeMode);   //set printer to line mode by using {LP}  		//srPort.Write(mByte' 0' 1);  //set form feed  		srPort.Close ();  		//close the serial port  	}  	catch (Exception ex) {  		srPort.Close ();  		//close the serial port  		return (0);  	}  	finally {  		srPort.Close ();  		//close the serial port  	}  	return (1);  }  else {  	return (0);  }  
Magic Number,PrintAWBLabels,clsOneilOC3,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\clsOneilOC3.cs,PrintLabel,The following statement contains a magic number: if (openport ())//open serial port   {  	try {  		//srPort.WriteLine(config);  		srPort.DiscardInBuffer ();  		srPort.DiscardOutBuffer ();  		srPort.Write (query' 0' 6);  		//send query to printer  		Delay (5000);  		//char[] buffer = new char[srPort.BytesToRead];  		//srPort.Read(buffer' 0' srPort.BytesToRead);  		//if(buffer[18] != 'P')  		//{  		//    DialogResult result = new DialogResult();  		//    result = MessageBox.Show("Please Check Printer Paper and Continue"'"Print"'MessageBoxButtons.YesNo'MessageBoxIcon.Question'MessageBoxDefaultButton.Button1 );  		//    if (result == DialogResult.Yes)  		//    {  		//        return 2;  		//    }  		//    else  		//    {  		//        return 0;  		//    }  		//}  		//  srPort.WriteTimeout = 200;  		int btw = srPort.BytesToWrite;  		//srPort.Write(mmByte' 0' 3); //set form size to 14  		srPort.Write (setEasyMode);  		//set printer to easy mode  		//srPort.Write(back);  		srPort.Write (LabelData);  		//print label  		srPort.Write (ahead);  		Delay (1000);  		while (srPort.BytesToWrite > 0) {  			Application.DoEvents ();  		}  		//srPort.Write(changeMode);   //set printer to line mode by using {LP}  		//srPort.Write(mByte' 0' 1);  //set form feed  		srPort.Close ();  		//close the serial port  	}  	catch (Exception ex) {  		srPort.Close ();  		//close the serial port  		return (0);  	}  	finally {  		srPort.Close ();  		//close the serial port  	}  	return (1);  }  else {  	return (0);  }  
Magic Number,PrintAWBLabels,clsOneilOC3,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\clsOneilOC3.cs,PrintLabel,The following statement contains a magic number: try {  	//srPort.WriteLine(config);  	srPort.DiscardInBuffer ();  	srPort.DiscardOutBuffer ();  	srPort.Write (query' 0' 6);  	//send query to printer  	Delay (5000);  	//char[] buffer = new char[srPort.BytesToRead];  	//srPort.Read(buffer' 0' srPort.BytesToRead);  	//if(buffer[18] != 'P')  	//{  	//    DialogResult result = new DialogResult();  	//    result = MessageBox.Show("Please Check Printer Paper and Continue"'"Print"'MessageBoxButtons.YesNo'MessageBoxIcon.Question'MessageBoxDefaultButton.Button1 );  	//    if (result == DialogResult.Yes)  	//    {  	//        return 2;  	//    }  	//    else  	//    {  	//        return 0;  	//    }  	//}  	//  srPort.WriteTimeout = 200;  	int btw = srPort.BytesToWrite;  	//srPort.Write(mmByte' 0' 3); //set form size to 14  	srPort.Write (setEasyMode);  	//set printer to easy mode  	//srPort.Write(back);  	srPort.Write (LabelData);  	//print label  	srPort.Write (ahead);  	Delay (1000);  	while (srPort.BytesToWrite > 0) {  		Application.DoEvents ();  	}  	//srPort.Write(changeMode);   //set printer to line mode by using {LP}  	//srPort.Write(mByte' 0' 1);  //set form feed  	srPort.Close ();  	//close the serial port  }  catch (Exception ex) {  	srPort.Close ();  	//close the serial port  	return (0);  }  finally {  	srPort.Close ();  	//close the serial port  }  
Magic Number,PrintAWBLabels,clsOneilOC3,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\clsOneilOC3.cs,PrintLabel,The following statement contains a magic number: try {  	//srPort.WriteLine(config);  	srPort.DiscardInBuffer ();  	srPort.DiscardOutBuffer ();  	srPort.Write (query' 0' 6);  	//send query to printer  	Delay (5000);  	//char[] buffer = new char[srPort.BytesToRead];  	//srPort.Read(buffer' 0' srPort.BytesToRead);  	//if(buffer[18] != 'P')  	//{  	//    DialogResult result = new DialogResult();  	//    result = MessageBox.Show("Please Check Printer Paper and Continue"'"Print"'MessageBoxButtons.YesNo'MessageBoxIcon.Question'MessageBoxDefaultButton.Button1 );  	//    if (result == DialogResult.Yes)  	//    {  	//        return 2;  	//    }  	//    else  	//    {  	//        return 0;  	//    }  	//}  	//  srPort.WriteTimeout = 200;  	int btw = srPort.BytesToWrite;  	//srPort.Write(mmByte' 0' 3); //set form size to 14  	srPort.Write (setEasyMode);  	//set printer to easy mode  	//srPort.Write(back);  	srPort.Write (LabelData);  	//print label  	srPort.Write (ahead);  	Delay (1000);  	while (srPort.BytesToWrite > 0) {  		Application.DoEvents ();  	}  	//srPort.Write(changeMode);   //set printer to line mode by using {LP}  	//srPort.Write(mByte' 0' 1);  //set form feed  	srPort.Close ();  	//close the serial port  }  catch (Exception ex) {  	srPort.Close ();  	//close the serial port  	return (0);  }  finally {  	srPort.Close ();  	//close the serial port  }  
Magic Number,PrintAWBLabels,clsOneilOC3,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\clsOneilOC3.cs,PrintLabel,The following statement contains a magic number: try {  	//srPort.WriteLine(config);  	srPort.DiscardInBuffer ();  	srPort.DiscardOutBuffer ();  	srPort.Write (query' 0' 6);  	//send query to printer  	Delay (5000);  	//char[] buffer = new char[srPort.BytesToRead];  	//srPort.Read(buffer' 0' srPort.BytesToRead);  	//if(buffer[18] != 'P')  	//{  	//    DialogResult result = new DialogResult();  	//    result = MessageBox.Show("Please Check Printer Paper and Continue"'"Print"'MessageBoxButtons.YesNo'MessageBoxIcon.Question'MessageBoxDefaultButton.Button1 );  	//    if (result == DialogResult.Yes)  	//    {  	//        return 2;  	//    }  	//    else  	//    {  	//        return 0;  	//    }  	//}  	//  srPort.WriteTimeout = 200;  	int btw = srPort.BytesToWrite;  	//srPort.Write(mmByte' 0' 3); //set form size to 14  	srPort.Write (setEasyMode);  	//set printer to easy mode  	//srPort.Write(back);  	srPort.Write (LabelData);  	//print label  	srPort.Write (ahead);  	Delay (1000);  	while (srPort.BytesToWrite > 0) {  		Application.DoEvents ();  	}  	//srPort.Write(changeMode);   //set printer to line mode by using {LP}  	//srPort.Write(mByte' 0' 1);  //set form feed  	srPort.Close ();  	//close the serial port  }  catch (Exception ex) {  	srPort.Close ();  	//close the serial port  	return (0);  }  finally {  	srPort.Close ();  	//close the serial port  }  
Magic Number,PrintAWBLabels,clsOneilOC3,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\clsOneilOC3.cs,PrintLabel,The following statement contains a magic number: srPort.Write (query' 0' 6);  
Magic Number,PrintAWBLabels,clsOneilOC3,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\clsOneilOC3.cs,PrintLabel,The following statement contains a magic number: Delay (5000);  
Magic Number,PrintAWBLabels,clsOneilOC3,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\clsOneilOC3.cs,PrintLabel,The following statement contains a magic number: Delay (1000);  
Magic Number,PrintAWBLabels,clsOneilOC3,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\clsOneilOC3.cs,SendCommand,The following statement contains a magic number: try {  	if (!srPort.IsOpen)  		return;  	byte[] arrByte = new byte[3];  	arrByte [0] = Convert.ToByte (CMD_HEADER);  	arrByte [1] = Convert.ToByte (CMD_VALUE);  	arrByte [2] = Convert.ToByte (CMD_PARAM);  	srPort.Write (arrByte' 0' arrByte.Length);  }  catch (Exception) {  }  
Magic Number,PrintAWBLabels,clsOneilOC3,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\clsOneilOC3.cs,SendCommand,The following statement contains a magic number: try {  	if (!srPort.IsOpen)  		return;  	byte[] arrByte = new byte[3];  	arrByte [0] = Convert.ToByte (CMD_HEADER);  	arrByte [1] = Convert.ToByte (CMD_VALUE);  	arrByte [2] = Convert.ToByte (CMD_PARAM);  	srPort.Write (arrByte' 0' arrByte.Length);  }  catch (Exception) {  }  
Magic Number,PrintAWBLabels,clsOneilOC3,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\clsOneilOC3.cs,SendCommand,The following statement contains a magic number: arrByte [2] = Convert.ToByte (CMD_PARAM);  
Magic Number,PrintAWBLabels,clsOneilOC3,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\clsOneilOC3.cs,SendCommand,The following statement contains a magic number: try {  	if (!srPort.IsOpen)  		return;  	byte[] arrByte = new byte[2];  	arrByte [0] = Convert.ToByte (CMD_HEADER);  	arrByte [1] = Convert.ToByte (CMD_VALUE);  	srPort.Write (arrByte' 0' arrByte.Length);  }  catch (Exception) {  }  
Magic Number,PrintAWBLabels,clsOneilOC3,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\clsOneilOC3.cs,SendCommand,The following statement contains a magic number: try {  	if (!srPort.IsOpen)  		return;  	byte[] arrByte = new byte[4 + CMD_DATA.Length];  	arrByte [0] = Convert.ToByte (CMD_HEADER);  	arrByte [1] = Convert.ToByte (CMD_VALUE);  	arrByte [2] = Convert.ToByte (CMD_PARAM);  	arrByte [3] = Convert.ToByte (CMD_LENGTH);  	byte[] arayByte = Encoding.ASCII.GetBytes (CMD_DATA);  	for (int i = 0; i < arayByte.Length; i++) {  		try {  			arrByte [i + 4] = arayByte [i];  		}  		catch (Exception) {  			arrByte [i + 4] = 48;  		}  	}  	srPort.Write (arrByte' 0' arrByte.Length);  }  catch (Exception) {  }  
Magic Number,PrintAWBLabels,clsOneilOC3,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\clsOneilOC3.cs,SendCommand,The following statement contains a magic number: try {  	if (!srPort.IsOpen)  		return;  	byte[] arrByte = new byte[4 + CMD_DATA.Length];  	arrByte [0] = Convert.ToByte (CMD_HEADER);  	arrByte [1] = Convert.ToByte (CMD_VALUE);  	arrByte [2] = Convert.ToByte (CMD_PARAM);  	arrByte [3] = Convert.ToByte (CMD_LENGTH);  	byte[] arayByte = Encoding.ASCII.GetBytes (CMD_DATA);  	for (int i = 0; i < arayByte.Length; i++) {  		try {  			arrByte [i + 4] = arayByte [i];  		}  		catch (Exception) {  			arrByte [i + 4] = 48;  		}  	}  	srPort.Write (arrByte' 0' arrByte.Length);  }  catch (Exception) {  }  
Magic Number,PrintAWBLabels,clsOneilOC3,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\clsOneilOC3.cs,SendCommand,The following statement contains a magic number: try {  	if (!srPort.IsOpen)  		return;  	byte[] arrByte = new byte[4 + CMD_DATA.Length];  	arrByte [0] = Convert.ToByte (CMD_HEADER);  	arrByte [1] = Convert.ToByte (CMD_VALUE);  	arrByte [2] = Convert.ToByte (CMD_PARAM);  	arrByte [3] = Convert.ToByte (CMD_LENGTH);  	byte[] arayByte = Encoding.ASCII.GetBytes (CMD_DATA);  	for (int i = 0; i < arayByte.Length; i++) {  		try {  			arrByte [i + 4] = arayByte [i];  		}  		catch (Exception) {  			arrByte [i + 4] = 48;  		}  	}  	srPort.Write (arrByte' 0' arrByte.Length);  }  catch (Exception) {  }  
Magic Number,PrintAWBLabels,clsOneilOC3,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\clsOneilOC3.cs,SendCommand,The following statement contains a magic number: try {  	if (!srPort.IsOpen)  		return;  	byte[] arrByte = new byte[4 + CMD_DATA.Length];  	arrByte [0] = Convert.ToByte (CMD_HEADER);  	arrByte [1] = Convert.ToByte (CMD_VALUE);  	arrByte [2] = Convert.ToByte (CMD_PARAM);  	arrByte [3] = Convert.ToByte (CMD_LENGTH);  	byte[] arayByte = Encoding.ASCII.GetBytes (CMD_DATA);  	for (int i = 0; i < arayByte.Length; i++) {  		try {  			arrByte [i + 4] = arayByte [i];  		}  		catch (Exception) {  			arrByte [i + 4] = 48;  		}  	}  	srPort.Write (arrByte' 0' arrByte.Length);  }  catch (Exception) {  }  
Magic Number,PrintAWBLabels,clsOneilOC3,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\clsOneilOC3.cs,SendCommand,The following statement contains a magic number: try {  	if (!srPort.IsOpen)  		return;  	byte[] arrByte = new byte[4 + CMD_DATA.Length];  	arrByte [0] = Convert.ToByte (CMD_HEADER);  	arrByte [1] = Convert.ToByte (CMD_VALUE);  	arrByte [2] = Convert.ToByte (CMD_PARAM);  	arrByte [3] = Convert.ToByte (CMD_LENGTH);  	byte[] arayByte = Encoding.ASCII.GetBytes (CMD_DATA);  	for (int i = 0; i < arayByte.Length; i++) {  		try {  			arrByte [i + 4] = arayByte [i];  		}  		catch (Exception) {  			arrByte [i + 4] = 48;  		}  	}  	srPort.Write (arrByte' 0' arrByte.Length);  }  catch (Exception) {  }  
Magic Number,PrintAWBLabels,clsOneilOC3,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\clsOneilOC3.cs,SendCommand,The following statement contains a magic number: try {  	if (!srPort.IsOpen)  		return;  	byte[] arrByte = new byte[4 + CMD_DATA.Length];  	arrByte [0] = Convert.ToByte (CMD_HEADER);  	arrByte [1] = Convert.ToByte (CMD_VALUE);  	arrByte [2] = Convert.ToByte (CMD_PARAM);  	arrByte [3] = Convert.ToByte (CMD_LENGTH);  	byte[] arayByte = Encoding.ASCII.GetBytes (CMD_DATA);  	for (int i = 0; i < arayByte.Length; i++) {  		try {  			arrByte [i + 4] = arayByte [i];  		}  		catch (Exception) {  			arrByte [i + 4] = 48;  		}  	}  	srPort.Write (arrByte' 0' arrByte.Length);  }  catch (Exception) {  }  
Magic Number,PrintAWBLabels,clsOneilOC3,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\clsOneilOC3.cs,SendCommand,The following statement contains a magic number: arrByte [2] = Convert.ToByte (CMD_PARAM);  
Magic Number,PrintAWBLabels,clsOneilOC3,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\clsOneilOC3.cs,SendCommand,The following statement contains a magic number: arrByte [3] = Convert.ToByte (CMD_LENGTH);  
Magic Number,PrintAWBLabels,clsOneilOC3,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\clsOneilOC3.cs,SendCommand,The following statement contains a magic number: for (int i = 0; i < arayByte.Length; i++) {  	try {  		arrByte [i + 4] = arayByte [i];  	}  	catch (Exception) {  		arrByte [i + 4] = 48;  	}  }  
Magic Number,PrintAWBLabels,clsOneilOC3,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\clsOneilOC3.cs,SendCommand,The following statement contains a magic number: for (int i = 0; i < arayByte.Length; i++) {  	try {  		arrByte [i + 4] = arayByte [i];  	}  	catch (Exception) {  		arrByte [i + 4] = 48;  	}  }  
Magic Number,PrintAWBLabels,clsOneilOC3,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\clsOneilOC3.cs,SendCommand,The following statement contains a magic number: for (int i = 0; i < arayByte.Length; i++) {  	try {  		arrByte [i + 4] = arayByte [i];  	}  	catch (Exception) {  		arrByte [i + 4] = 48;  	}  }  
Magic Number,PrintAWBLabels,clsOneilOC3,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\clsOneilOC3.cs,SendCommand,The following statement contains a magic number: try {  	arrByte [i + 4] = arayByte [i];  }  catch (Exception) {  	arrByte [i + 4] = 48;  }  
Magic Number,PrintAWBLabels,clsOneilOC3,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\clsOneilOC3.cs,SendCommand,The following statement contains a magic number: try {  	arrByte [i + 4] = arayByte [i];  }  catch (Exception) {  	arrByte [i + 4] = 48;  }  
Magic Number,PrintAWBLabels,clsOneilOC3,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\clsOneilOC3.cs,SendCommand,The following statement contains a magic number: try {  	arrByte [i + 4] = arayByte [i];  }  catch (Exception) {  	arrByte [i + 4] = 48;  }  
Magic Number,PrintAWBLabels,clsOneilOC3,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\clsOneilOC3.cs,SendCommand,The following statement contains a magic number: arrByte [i + 4] = arayByte [i];  
Magic Number,PrintAWBLabels,clsOneilOC3,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\clsOneilOC3.cs,SendCommand,The following statement contains a magic number: arrByte [i + 4] = 48;  
Magic Number,PrintAWBLabels,clsOneilOC3,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\clsOneilOC3.cs,SendCommand,The following statement contains a magic number: arrByte [i + 4] = 48;  
Magic Number,PrintAWBLabels,cls_DetamaxPrint,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\cls_DetamaxPrint.cs,cls_DetamaxPrint,The following statement contains a magic number: btSSP.BaudRate = 19200;  
Magic Number,PrintAWBLabels,cls_DetamaxPrint,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\cls_DetamaxPrint.cs,cls_DetamaxPrint,The following statement contains a magic number: btSSP.DataBits = 8;  
Magic Number,PrintAWBLabels,cls_DetamaxPrint,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\cls_DetamaxPrint.cs,cls_DetamaxPrint,The following statement contains a magic number: btSSP.DataBits = 8;  
Magic Number,PrintAWBLabels,cls_DetamaxPrint,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\cls_DetamaxPrint.cs,ConfigPort,The following statement contains a magic number: btSSP.BaudRate = 19200;  
Magic Number,PrintAWBLabels,cls_DetamaxPrint,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\cls_DetamaxPrint.cs,ConfigPort,The following statement contains a magic number: btSSP.DataBits = 8;  
Magic Number,PrintAWBLabels,cls_DetamaxPrint,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\cls_DetamaxPrint.cs,CallPrinter,The following statement contains a magic number: try {  	strFile = FilePath + "\\" + FileName;  	//this.ClearLogs();  	//int TotBags = 10; // int.Parse(txtNoOfPieces.Text);  	File.Delete (APP_PATH + "\\" + FileName);  	//for (int i = 1; i <= ItemCount; i++)  	//{  	//    Delay(5);  	//this.printLabel_DM(AWBNo' Source' Via' Destination' ItemCount.ToString()' TotalWt' i.ToString());  	//UBI = FromUBI;  	for (int i = int.Parse (FromPCS); i <= int.Parse (ToPCS); i++) {  		//if (lblType == "AIR")  		//{  		//    this.prepareAirLabel(AXBNo' Source' SourceLoc' Destination' destLoc' destPin' ItemCount.ToString()' i.ToString()' UBI);  		//    UBI = (double.Parse(UBI) + 1).ToString();  		//}  		//else if (lblType == "SFC")  		//{  		this.prepareSFCLabel (AXBNo' Source' Destination' destPin' ItemCount.ToString ()' i.ToString ());  		//}  		Delay (5);  	}  	//}  	Delay (15);  	//File.Copy(strFile' APP_PATH +"\\"+ FileName' true);  	System.Diagnostics.Process Process1 = new System.Diagnostics.Process ();  	//Process Process1 = new Process();  	Process1.EnableRaisingEvents = false;  	string cmd = APP_PATH + "\\" + batFileName;  	System.Diagnostics.ProcessStartInfo info = new ProcessStartInfo ();  	info.UseShellExecute = true;  	info.FileName = batFileName;  	//D:\Products\SCM\DesktopPrinter  	//info.WorkingDirectory = "D:\\DesktopPrinter\\";//APP_PATH +"\\";  	info.WorkingDirectory = APP_PATH + "\\";  	//info.Verb = "runas";  	System.Diagnostics.Process.Start (info);  	Process1.Close ();  }  catch (Exception ex) {  	MessageBox.Show ("Error: " + ex.Message);  }  
Magic Number,PrintAWBLabels,cls_DetamaxPrint,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\cls_DetamaxPrint.cs,CallPrinter,The following statement contains a magic number: try {  	strFile = FilePath + "\\" + FileName;  	//this.ClearLogs();  	//int TotBags = 10; // int.Parse(txtNoOfPieces.Text);  	File.Delete (APP_PATH + "\\" + FileName);  	//for (int i = 1; i <= ItemCount; i++)  	//{  	//    Delay(5);  	//this.printLabel_DM(AWBNo' Source' Via' Destination' ItemCount.ToString()' TotalWt' i.ToString());  	//UBI = FromUBI;  	for (int i = int.Parse (FromPCS); i <= int.Parse (ToPCS); i++) {  		//if (lblType == "AIR")  		//{  		//    this.prepareAirLabel(AXBNo' Source' SourceLoc' Destination' destLoc' destPin' ItemCount.ToString()' i.ToString()' UBI);  		//    UBI = (double.Parse(UBI) + 1).ToString();  		//}  		//else if (lblType == "SFC")  		//{  		this.prepareSFCLabel (AXBNo' Source' Destination' destPin' ItemCount.ToString ()' i.ToString ());  		//}  		Delay (5);  	}  	//}  	Delay (15);  	//File.Copy(strFile' APP_PATH +"\\"+ FileName' true);  	System.Diagnostics.Process Process1 = new System.Diagnostics.Process ();  	//Process Process1 = new Process();  	Process1.EnableRaisingEvents = false;  	string cmd = APP_PATH + "\\" + batFileName;  	System.Diagnostics.ProcessStartInfo info = new ProcessStartInfo ();  	info.UseShellExecute = true;  	info.FileName = batFileName;  	//D:\Products\SCM\DesktopPrinter  	//info.WorkingDirectory = "D:\\DesktopPrinter\\";//APP_PATH +"\\";  	info.WorkingDirectory = APP_PATH + "\\";  	//info.Verb = "runas";  	System.Diagnostics.Process.Start (info);  	Process1.Close ();  }  catch (Exception ex) {  	MessageBox.Show ("Error: " + ex.Message);  }  
Magic Number,PrintAWBLabels,cls_DetamaxPrint,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\cls_DetamaxPrint.cs,CallPrinter,The following statement contains a magic number: for (int i = int.Parse (FromPCS); i <= int.Parse (ToPCS); i++) {  	//if (lblType == "AIR")  	//{  	//    this.prepareAirLabel(AXBNo' Source' SourceLoc' Destination' destLoc' destPin' ItemCount.ToString()' i.ToString()' UBI);  	//    UBI = (double.Parse(UBI) + 1).ToString();  	//}  	//else if (lblType == "SFC")  	//{  	this.prepareSFCLabel (AXBNo' Source' Destination' destPin' ItemCount.ToString ()' i.ToString ());  	//}  	Delay (5);  }  
Magic Number,PrintAWBLabels,cls_DetamaxPrint,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\cls_DetamaxPrint.cs,CallPrinter,The following statement contains a magic number: Delay (5);  
Magic Number,PrintAWBLabels,cls_DetamaxPrint,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\cls_DetamaxPrint.cs,CallPrinter,The following statement contains a magic number: Delay (15);  
Magic Number,PrintAWBLabels,cls_DetamaxPrint,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\cls_DetamaxPrint.cs,prepareSFCLabel,The following statement contains a magic number: try {  	// First Create File  	//  this.CreateFile();  	// write content to file  	Delay (2);  	WriteToFile (str1);  	// = "n";  	WriteToFile (str2);  	// ="M0500";  	WriteToFile (str3);  	// ="V0";  	WriteToFile (str4);  	// ="Kf0075";  	WriteToFile (str5);  	// ="SM";  	WriteToFile (str6);  	// ="d";  	WriteToFile (str7);  	// ="L";  	WriteToFile (str8);  	// ="D11";  	WriteToFile (str9);  	// ="PM";  	WriteToFile (str10);  	// ="pG";  	WriteToFile (str11);  	// ="SM";  	WriteToFile (str12);  	// ="ySU8";  	WriteToFile (str13);  	// ="FB+";  	WriteToFile (str14);  	// ="A2";  	strBox = "1X1100001150010B275135002002";  	//strBox = "1X1100001150010B275135002002";  	WriteToFile (strBox);  	strLine1 = "1X1100001800010L275002";  	WriteToFile (strLine1);  	strLine2 = "1X1100001150150L002135";  	WriteToFile (strLine2);  	strAXB = "1911S0102300020P010P010AWBNo";  	WriteToFile (strAXB);  	RXBNo = RXBNo.PadLeft (10' '0');  	strAXBData = "1911S0101950015P013P012" + RXBNo.Substring (0' 6);  	WriteToFile (strAXBData);  	strAXBData = "1911S0101950080P025P020" + RXBNo.Substring (6' 4);  	WriteToFile (strAXBData);  	//strAXBData = "1911S0101950013P018P018" + RXBNo;  	//WriteToFile(strAXBData);  	strQty = "1911S0102300160P010P010No Of Pcs";  	WriteToFile (strQty);  	strQtyData = "1911S0101950155P018P018" + Ctr.ToString () + "/" + totPics;  	WriteToFile (strQtyData);  	strOrg = "1911S0101650020P010P010ORIGIN";  	WriteToFile (strOrg);  	strOrgData = "1911S0101250020P025P025" + Source;  	WriteToFile (strOrgData);  	//if (SourceLoc.Substring(SourceLoc.Length - 3' 3) == "CBC")  	//    strOrgLoc = "1911S0101250110P010P010CBC";  	//else  	//    strOrgLoc = "1911S0101250110P010P010" + SourceLoc;  	//WriteToFile(strOrgLoc);  	strDest = "1911S0101650160P010P010DESTINATION";  	WriteToFile (strDest);  	strDestData = "1911S0101250160P025P025" + Destination;  	WriteToFile (strDestData);  	//if (destLoc.Trim() != "")  	//{  	//    if (destLoc.Substring(destLoc.Length - 3' 3) == "CBC")  	//        strDestLoc = "1911S0101350235P010P010CBC";  	//    else  	//        strDestLoc = "1911S0101350235P010P010" + destLoc;  	//    WriteToFile(strDestLoc);  	//}  	strDestPincode = "1911S0101200165P010P010" + destPin;  	WriteToFile (strDestPincode);  	// barcode 1  	str26 = "1a0000000700025" + RXBNo + Ctr.ToString ().PadLeft (4' '0');  	//str26 = "1a8104100820049090-" + UBI;  	//str26 = "1a3103100500039090-" + UBI;  	WriteToFile (str26);  	// ="1a3103100230039090-02768076"; // BARCODE 1  	// barcode 2  	str27 = "1911S0100450065P020P020" + RXBNo;  	//str27 = "1911S0100380035P040P027" + UBI;  	//str27 = "1911S0100100021P039P017" + UBI;  	WriteToFile (str27);  	// ="1911S0100090049P010P010090-02768076"; // BARCODE 2  	//WriteToFile("1911S0100100050P010P010Date - " + DateTime.Now.ToString("dd/MM/yyyy HH:mm:ss"));  	WriteToFile ("1911S0100250050P010P010Date - " + DateTime.Now.ToString ("dd-MM-yyyy HH:mm:ss"));  	//WriteToFile("1911S0100100080P014P014" + DateTime.Now.ToString("dd/MM/yyyy HH:mm:ss"));  	//WriteToFile(str28);// ="1X1100001600041L122015";1X1100001600041L122015  	WriteToFile (str29);  	// ="A1";  	//str30 = "1911S0102650025P018P018Jet Airways CARGO";  	str30 = "1911S0102650035P018P018Air Costa CARGO";  	//String strLableHeading = "Air Costa CARGO";  	//String strHedingCmd = "1911S0102650035P018P018";  	String lableHeading = "GoAir CARGO";  	String hedingCmd = "1911S0102650055P018P018";  	lableHeading = getValueFromConf ("lableHeading");  	hedingCmd = getValueFromConf ("hedingCmd");  	if (String.IsNullOrEmpty (hedingCmd))  		hedingCmd = "1911S0102650055P018P018";  	if (String.IsNullOrEmpty (lableHeading))  		lableHeading = "GoAir CARGO";  	str30 = hedingCmd + lableHeading;  	WriteToFile (str30);  	// ="1911S0101630042P008P008 Delex Cargo (AIR)";  	// strContactNo = "1911S0102520040P010P010Ph: 1800222111/09223222111";  	strContactNo = "1911S0102520040P010P010" + getValueFromConf ("clientContact");  	;  	//WriteToFile(strContactNo);  	strFooter = "1911S0100100055P007P007Powered By QID  Ph: 020-40039501";  	WriteToFile (strFooter);  	WriteToFile (str31);  	// ="A2";  	//WriteToFile(str32);// ="1X1100001560039B126021001001";  	WriteToFile (str33);  	// ="Q0001";  	WriteToFile (str34);  	// ="E";  }  catch (Exception ex) {  }  
Magic Number,PrintAWBLabels,cls_DetamaxPrint,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\cls_DetamaxPrint.cs,prepareSFCLabel,The following statement contains a magic number: try {  	// First Create File  	//  this.CreateFile();  	// write content to file  	Delay (2);  	WriteToFile (str1);  	// = "n";  	WriteToFile (str2);  	// ="M0500";  	WriteToFile (str3);  	// ="V0";  	WriteToFile (str4);  	// ="Kf0075";  	WriteToFile (str5);  	// ="SM";  	WriteToFile (str6);  	// ="d";  	WriteToFile (str7);  	// ="L";  	WriteToFile (str8);  	// ="D11";  	WriteToFile (str9);  	// ="PM";  	WriteToFile (str10);  	// ="pG";  	WriteToFile (str11);  	// ="SM";  	WriteToFile (str12);  	// ="ySU8";  	WriteToFile (str13);  	// ="FB+";  	WriteToFile (str14);  	// ="A2";  	strBox = "1X1100001150010B275135002002";  	//strBox = "1X1100001150010B275135002002";  	WriteToFile (strBox);  	strLine1 = "1X1100001800010L275002";  	WriteToFile (strLine1);  	strLine2 = "1X1100001150150L002135";  	WriteToFile (strLine2);  	strAXB = "1911S0102300020P010P010AWBNo";  	WriteToFile (strAXB);  	RXBNo = RXBNo.PadLeft (10' '0');  	strAXBData = "1911S0101950015P013P012" + RXBNo.Substring (0' 6);  	WriteToFile (strAXBData);  	strAXBData = "1911S0101950080P025P020" + RXBNo.Substring (6' 4);  	WriteToFile (strAXBData);  	//strAXBData = "1911S0101950013P018P018" + RXBNo;  	//WriteToFile(strAXBData);  	strQty = "1911S0102300160P010P010No Of Pcs";  	WriteToFile (strQty);  	strQtyData = "1911S0101950155P018P018" + Ctr.ToString () + "/" + totPics;  	WriteToFile (strQtyData);  	strOrg = "1911S0101650020P010P010ORIGIN";  	WriteToFile (strOrg);  	strOrgData = "1911S0101250020P025P025" + Source;  	WriteToFile (strOrgData);  	//if (SourceLoc.Substring(SourceLoc.Length - 3' 3) == "CBC")  	//    strOrgLoc = "1911S0101250110P010P010CBC";  	//else  	//    strOrgLoc = "1911S0101250110P010P010" + SourceLoc;  	//WriteToFile(strOrgLoc);  	strDest = "1911S0101650160P010P010DESTINATION";  	WriteToFile (strDest);  	strDestData = "1911S0101250160P025P025" + Destination;  	WriteToFile (strDestData);  	//if (destLoc.Trim() != "")  	//{  	//    if (destLoc.Substring(destLoc.Length - 3' 3) == "CBC")  	//        strDestLoc = "1911S0101350235P010P010CBC";  	//    else  	//        strDestLoc = "1911S0101350235P010P010" + destLoc;  	//    WriteToFile(strDestLoc);  	//}  	strDestPincode = "1911S0101200165P010P010" + destPin;  	WriteToFile (strDestPincode);  	// barcode 1  	str26 = "1a0000000700025" + RXBNo + Ctr.ToString ().PadLeft (4' '0');  	//str26 = "1a8104100820049090-" + UBI;  	//str26 = "1a3103100500039090-" + UBI;  	WriteToFile (str26);  	// ="1a3103100230039090-02768076"; // BARCODE 1  	// barcode 2  	str27 = "1911S0100450065P020P020" + RXBNo;  	//str27 = "1911S0100380035P040P027" + UBI;  	//str27 = "1911S0100100021P039P017" + UBI;  	WriteToFile (str27);  	// ="1911S0100090049P010P010090-02768076"; // BARCODE 2  	//WriteToFile("1911S0100100050P010P010Date - " + DateTime.Now.ToString("dd/MM/yyyy HH:mm:ss"));  	WriteToFile ("1911S0100250050P010P010Date - " + DateTime.Now.ToString ("dd-MM-yyyy HH:mm:ss"));  	//WriteToFile("1911S0100100080P014P014" + DateTime.Now.ToString("dd/MM/yyyy HH:mm:ss"));  	//WriteToFile(str28);// ="1X1100001600041L122015";1X1100001600041L122015  	WriteToFile (str29);  	// ="A1";  	//str30 = "1911S0102650025P018P018Jet Airways CARGO";  	str30 = "1911S0102650035P018P018Air Costa CARGO";  	//String strLableHeading = "Air Costa CARGO";  	//String strHedingCmd = "1911S0102650035P018P018";  	String lableHeading = "GoAir CARGO";  	String hedingCmd = "1911S0102650055P018P018";  	lableHeading = getValueFromConf ("lableHeading");  	hedingCmd = getValueFromConf ("hedingCmd");  	if (String.IsNullOrEmpty (hedingCmd))  		hedingCmd = "1911S0102650055P018P018";  	if (String.IsNullOrEmpty (lableHeading))  		lableHeading = "GoAir CARGO";  	str30 = hedingCmd + lableHeading;  	WriteToFile (str30);  	// ="1911S0101630042P008P008 Delex Cargo (AIR)";  	// strContactNo = "1911S0102520040P010P010Ph: 1800222111/09223222111";  	strContactNo = "1911S0102520040P010P010" + getValueFromConf ("clientContact");  	;  	//WriteToFile(strContactNo);  	strFooter = "1911S0100100055P007P007Powered By QID  Ph: 020-40039501";  	WriteToFile (strFooter);  	WriteToFile (str31);  	// ="A2";  	//WriteToFile(str32);// ="1X1100001560039B126021001001";  	WriteToFile (str33);  	// ="Q0001";  	WriteToFile (str34);  	// ="E";  }  catch (Exception ex) {  }  
Magic Number,PrintAWBLabels,cls_DetamaxPrint,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\cls_DetamaxPrint.cs,prepareSFCLabel,The following statement contains a magic number: try {  	// First Create File  	//  this.CreateFile();  	// write content to file  	Delay (2);  	WriteToFile (str1);  	// = "n";  	WriteToFile (str2);  	// ="M0500";  	WriteToFile (str3);  	// ="V0";  	WriteToFile (str4);  	// ="Kf0075";  	WriteToFile (str5);  	// ="SM";  	WriteToFile (str6);  	// ="d";  	WriteToFile (str7);  	// ="L";  	WriteToFile (str8);  	// ="D11";  	WriteToFile (str9);  	// ="PM";  	WriteToFile (str10);  	// ="pG";  	WriteToFile (str11);  	// ="SM";  	WriteToFile (str12);  	// ="ySU8";  	WriteToFile (str13);  	// ="FB+";  	WriteToFile (str14);  	// ="A2";  	strBox = "1X1100001150010B275135002002";  	//strBox = "1X1100001150010B275135002002";  	WriteToFile (strBox);  	strLine1 = "1X1100001800010L275002";  	WriteToFile (strLine1);  	strLine2 = "1X1100001150150L002135";  	WriteToFile (strLine2);  	strAXB = "1911S0102300020P010P010AWBNo";  	WriteToFile (strAXB);  	RXBNo = RXBNo.PadLeft (10' '0');  	strAXBData = "1911S0101950015P013P012" + RXBNo.Substring (0' 6);  	WriteToFile (strAXBData);  	strAXBData = "1911S0101950080P025P020" + RXBNo.Substring (6' 4);  	WriteToFile (strAXBData);  	//strAXBData = "1911S0101950013P018P018" + RXBNo;  	//WriteToFile(strAXBData);  	strQty = "1911S0102300160P010P010No Of Pcs";  	WriteToFile (strQty);  	strQtyData = "1911S0101950155P018P018" + Ctr.ToString () + "/" + totPics;  	WriteToFile (strQtyData);  	strOrg = "1911S0101650020P010P010ORIGIN";  	WriteToFile (strOrg);  	strOrgData = "1911S0101250020P025P025" + Source;  	WriteToFile (strOrgData);  	//if (SourceLoc.Substring(SourceLoc.Length - 3' 3) == "CBC")  	//    strOrgLoc = "1911S0101250110P010P010CBC";  	//else  	//    strOrgLoc = "1911S0101250110P010P010" + SourceLoc;  	//WriteToFile(strOrgLoc);  	strDest = "1911S0101650160P010P010DESTINATION";  	WriteToFile (strDest);  	strDestData = "1911S0101250160P025P025" + Destination;  	WriteToFile (strDestData);  	//if (destLoc.Trim() != "")  	//{  	//    if (destLoc.Substring(destLoc.Length - 3' 3) == "CBC")  	//        strDestLoc = "1911S0101350235P010P010CBC";  	//    else  	//        strDestLoc = "1911S0101350235P010P010" + destLoc;  	//    WriteToFile(strDestLoc);  	//}  	strDestPincode = "1911S0101200165P010P010" + destPin;  	WriteToFile (strDestPincode);  	// barcode 1  	str26 = "1a0000000700025" + RXBNo + Ctr.ToString ().PadLeft (4' '0');  	//str26 = "1a8104100820049090-" + UBI;  	//str26 = "1a3103100500039090-" + UBI;  	WriteToFile (str26);  	// ="1a3103100230039090-02768076"; // BARCODE 1  	// barcode 2  	str27 = "1911S0100450065P020P020" + RXBNo;  	//str27 = "1911S0100380035P040P027" + UBI;  	//str27 = "1911S0100100021P039P017" + UBI;  	WriteToFile (str27);  	// ="1911S0100090049P010P010090-02768076"; // BARCODE 2  	//WriteToFile("1911S0100100050P010P010Date - " + DateTime.Now.ToString("dd/MM/yyyy HH:mm:ss"));  	WriteToFile ("1911S0100250050P010P010Date - " + DateTime.Now.ToString ("dd-MM-yyyy HH:mm:ss"));  	//WriteToFile("1911S0100100080P014P014" + DateTime.Now.ToString("dd/MM/yyyy HH:mm:ss"));  	//WriteToFile(str28);// ="1X1100001600041L122015";1X1100001600041L122015  	WriteToFile (str29);  	// ="A1";  	//str30 = "1911S0102650025P018P018Jet Airways CARGO";  	str30 = "1911S0102650035P018P018Air Costa CARGO";  	//String strLableHeading = "Air Costa CARGO";  	//String strHedingCmd = "1911S0102650035P018P018";  	String lableHeading = "GoAir CARGO";  	String hedingCmd = "1911S0102650055P018P018";  	lableHeading = getValueFromConf ("lableHeading");  	hedingCmd = getValueFromConf ("hedingCmd");  	if (String.IsNullOrEmpty (hedingCmd))  		hedingCmd = "1911S0102650055P018P018";  	if (String.IsNullOrEmpty (lableHeading))  		lableHeading = "GoAir CARGO";  	str30 = hedingCmd + lableHeading;  	WriteToFile (str30);  	// ="1911S0101630042P008P008 Delex Cargo (AIR)";  	// strContactNo = "1911S0102520040P010P010Ph: 1800222111/09223222111";  	strContactNo = "1911S0102520040P010P010" + getValueFromConf ("clientContact");  	;  	//WriteToFile(strContactNo);  	strFooter = "1911S0100100055P007P007Powered By QID  Ph: 020-40039501";  	WriteToFile (strFooter);  	WriteToFile (str31);  	// ="A2";  	//WriteToFile(str32);// ="1X1100001560039B126021001001";  	WriteToFile (str33);  	// ="Q0001";  	WriteToFile (str34);  	// ="E";  }  catch (Exception ex) {  }  
Magic Number,PrintAWBLabels,cls_DetamaxPrint,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\cls_DetamaxPrint.cs,prepareSFCLabel,The following statement contains a magic number: try {  	// First Create File  	//  this.CreateFile();  	// write content to file  	Delay (2);  	WriteToFile (str1);  	// = "n";  	WriteToFile (str2);  	// ="M0500";  	WriteToFile (str3);  	// ="V0";  	WriteToFile (str4);  	// ="Kf0075";  	WriteToFile (str5);  	// ="SM";  	WriteToFile (str6);  	// ="d";  	WriteToFile (str7);  	// ="L";  	WriteToFile (str8);  	// ="D11";  	WriteToFile (str9);  	// ="PM";  	WriteToFile (str10);  	// ="pG";  	WriteToFile (str11);  	// ="SM";  	WriteToFile (str12);  	// ="ySU8";  	WriteToFile (str13);  	// ="FB+";  	WriteToFile (str14);  	// ="A2";  	strBox = "1X1100001150010B275135002002";  	//strBox = "1X1100001150010B275135002002";  	WriteToFile (strBox);  	strLine1 = "1X1100001800010L275002";  	WriteToFile (strLine1);  	strLine2 = "1X1100001150150L002135";  	WriteToFile (strLine2);  	strAXB = "1911S0102300020P010P010AWBNo";  	WriteToFile (strAXB);  	RXBNo = RXBNo.PadLeft (10' '0');  	strAXBData = "1911S0101950015P013P012" + RXBNo.Substring (0' 6);  	WriteToFile (strAXBData);  	strAXBData = "1911S0101950080P025P020" + RXBNo.Substring (6' 4);  	WriteToFile (strAXBData);  	//strAXBData = "1911S0101950013P018P018" + RXBNo;  	//WriteToFile(strAXBData);  	strQty = "1911S0102300160P010P010No Of Pcs";  	WriteToFile (strQty);  	strQtyData = "1911S0101950155P018P018" + Ctr.ToString () + "/" + totPics;  	WriteToFile (strQtyData);  	strOrg = "1911S0101650020P010P010ORIGIN";  	WriteToFile (strOrg);  	strOrgData = "1911S0101250020P025P025" + Source;  	WriteToFile (strOrgData);  	//if (SourceLoc.Substring(SourceLoc.Length - 3' 3) == "CBC")  	//    strOrgLoc = "1911S0101250110P010P010CBC";  	//else  	//    strOrgLoc = "1911S0101250110P010P010" + SourceLoc;  	//WriteToFile(strOrgLoc);  	strDest = "1911S0101650160P010P010DESTINATION";  	WriteToFile (strDest);  	strDestData = "1911S0101250160P025P025" + Destination;  	WriteToFile (strDestData);  	//if (destLoc.Trim() != "")  	//{  	//    if (destLoc.Substring(destLoc.Length - 3' 3) == "CBC")  	//        strDestLoc = "1911S0101350235P010P010CBC";  	//    else  	//        strDestLoc = "1911S0101350235P010P010" + destLoc;  	//    WriteToFile(strDestLoc);  	//}  	strDestPincode = "1911S0101200165P010P010" + destPin;  	WriteToFile (strDestPincode);  	// barcode 1  	str26 = "1a0000000700025" + RXBNo + Ctr.ToString ().PadLeft (4' '0');  	//str26 = "1a8104100820049090-" + UBI;  	//str26 = "1a3103100500039090-" + UBI;  	WriteToFile (str26);  	// ="1a3103100230039090-02768076"; // BARCODE 1  	// barcode 2  	str27 = "1911S0100450065P020P020" + RXBNo;  	//str27 = "1911S0100380035P040P027" + UBI;  	//str27 = "1911S0100100021P039P017" + UBI;  	WriteToFile (str27);  	// ="1911S0100090049P010P010090-02768076"; // BARCODE 2  	//WriteToFile("1911S0100100050P010P010Date - " + DateTime.Now.ToString("dd/MM/yyyy HH:mm:ss"));  	WriteToFile ("1911S0100250050P010P010Date - " + DateTime.Now.ToString ("dd-MM-yyyy HH:mm:ss"));  	//WriteToFile("1911S0100100080P014P014" + DateTime.Now.ToString("dd/MM/yyyy HH:mm:ss"));  	//WriteToFile(str28);// ="1X1100001600041L122015";1X1100001600041L122015  	WriteToFile (str29);  	// ="A1";  	//str30 = "1911S0102650025P018P018Jet Airways CARGO";  	str30 = "1911S0102650035P018P018Air Costa CARGO";  	//String strLableHeading = "Air Costa CARGO";  	//String strHedingCmd = "1911S0102650035P018P018";  	String lableHeading = "GoAir CARGO";  	String hedingCmd = "1911S0102650055P018P018";  	lableHeading = getValueFromConf ("lableHeading");  	hedingCmd = getValueFromConf ("hedingCmd");  	if (String.IsNullOrEmpty (hedingCmd))  		hedingCmd = "1911S0102650055P018P018";  	if (String.IsNullOrEmpty (lableHeading))  		lableHeading = "GoAir CARGO";  	str30 = hedingCmd + lableHeading;  	WriteToFile (str30);  	// ="1911S0101630042P008P008 Delex Cargo (AIR)";  	// strContactNo = "1911S0102520040P010P010Ph: 1800222111/09223222111";  	strContactNo = "1911S0102520040P010P010" + getValueFromConf ("clientContact");  	;  	//WriteToFile(strContactNo);  	strFooter = "1911S0100100055P007P007Powered By QID  Ph: 020-40039501";  	WriteToFile (strFooter);  	WriteToFile (str31);  	// ="A2";  	//WriteToFile(str32);// ="1X1100001560039B126021001001";  	WriteToFile (str33);  	// ="Q0001";  	WriteToFile (str34);  	// ="E";  }  catch (Exception ex) {  }  
Magic Number,PrintAWBLabels,cls_DetamaxPrint,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\cls_DetamaxPrint.cs,prepareSFCLabel,The following statement contains a magic number: try {  	// First Create File  	//  this.CreateFile();  	// write content to file  	Delay (2);  	WriteToFile (str1);  	// = "n";  	WriteToFile (str2);  	// ="M0500";  	WriteToFile (str3);  	// ="V0";  	WriteToFile (str4);  	// ="Kf0075";  	WriteToFile (str5);  	// ="SM";  	WriteToFile (str6);  	// ="d";  	WriteToFile (str7);  	// ="L";  	WriteToFile (str8);  	// ="D11";  	WriteToFile (str9);  	// ="PM";  	WriteToFile (str10);  	// ="pG";  	WriteToFile (str11);  	// ="SM";  	WriteToFile (str12);  	// ="ySU8";  	WriteToFile (str13);  	// ="FB+";  	WriteToFile (str14);  	// ="A2";  	strBox = "1X1100001150010B275135002002";  	//strBox = "1X1100001150010B275135002002";  	WriteToFile (strBox);  	strLine1 = "1X1100001800010L275002";  	WriteToFile (strLine1);  	strLine2 = "1X1100001150150L002135";  	WriteToFile (strLine2);  	strAXB = "1911S0102300020P010P010AWBNo";  	WriteToFile (strAXB);  	RXBNo = RXBNo.PadLeft (10' '0');  	strAXBData = "1911S0101950015P013P012" + RXBNo.Substring (0' 6);  	WriteToFile (strAXBData);  	strAXBData = "1911S0101950080P025P020" + RXBNo.Substring (6' 4);  	WriteToFile (strAXBData);  	//strAXBData = "1911S0101950013P018P018" + RXBNo;  	//WriteToFile(strAXBData);  	strQty = "1911S0102300160P010P010No Of Pcs";  	WriteToFile (strQty);  	strQtyData = "1911S0101950155P018P018" + Ctr.ToString () + "/" + totPics;  	WriteToFile (strQtyData);  	strOrg = "1911S0101650020P010P010ORIGIN";  	WriteToFile (strOrg);  	strOrgData = "1911S0101250020P025P025" + Source;  	WriteToFile (strOrgData);  	//if (SourceLoc.Substring(SourceLoc.Length - 3' 3) == "CBC")  	//    strOrgLoc = "1911S0101250110P010P010CBC";  	//else  	//    strOrgLoc = "1911S0101250110P010P010" + SourceLoc;  	//WriteToFile(strOrgLoc);  	strDest = "1911S0101650160P010P010DESTINATION";  	WriteToFile (strDest);  	strDestData = "1911S0101250160P025P025" + Destination;  	WriteToFile (strDestData);  	//if (destLoc.Trim() != "")  	//{  	//    if (destLoc.Substring(destLoc.Length - 3' 3) == "CBC")  	//        strDestLoc = "1911S0101350235P010P010CBC";  	//    else  	//        strDestLoc = "1911S0101350235P010P010" + destLoc;  	//    WriteToFile(strDestLoc);  	//}  	strDestPincode = "1911S0101200165P010P010" + destPin;  	WriteToFile (strDestPincode);  	// barcode 1  	str26 = "1a0000000700025" + RXBNo + Ctr.ToString ().PadLeft (4' '0');  	//str26 = "1a8104100820049090-" + UBI;  	//str26 = "1a3103100500039090-" + UBI;  	WriteToFile (str26);  	// ="1a3103100230039090-02768076"; // BARCODE 1  	// barcode 2  	str27 = "1911S0100450065P020P020" + RXBNo;  	//str27 = "1911S0100380035P040P027" + UBI;  	//str27 = "1911S0100100021P039P017" + UBI;  	WriteToFile (str27);  	// ="1911S0100090049P010P010090-02768076"; // BARCODE 2  	//WriteToFile("1911S0100100050P010P010Date - " + DateTime.Now.ToString("dd/MM/yyyy HH:mm:ss"));  	WriteToFile ("1911S0100250050P010P010Date - " + DateTime.Now.ToString ("dd-MM-yyyy HH:mm:ss"));  	//WriteToFile("1911S0100100080P014P014" + DateTime.Now.ToString("dd/MM/yyyy HH:mm:ss"));  	//WriteToFile(str28);// ="1X1100001600041L122015";1X1100001600041L122015  	WriteToFile (str29);  	// ="A1";  	//str30 = "1911S0102650025P018P018Jet Airways CARGO";  	str30 = "1911S0102650035P018P018Air Costa CARGO";  	//String strLableHeading = "Air Costa CARGO";  	//String strHedingCmd = "1911S0102650035P018P018";  	String lableHeading = "GoAir CARGO";  	String hedingCmd = "1911S0102650055P018P018";  	lableHeading = getValueFromConf ("lableHeading");  	hedingCmd = getValueFromConf ("hedingCmd");  	if (String.IsNullOrEmpty (hedingCmd))  		hedingCmd = "1911S0102650055P018P018";  	if (String.IsNullOrEmpty (lableHeading))  		lableHeading = "GoAir CARGO";  	str30 = hedingCmd + lableHeading;  	WriteToFile (str30);  	// ="1911S0101630042P008P008 Delex Cargo (AIR)";  	// strContactNo = "1911S0102520040P010P010Ph: 1800222111/09223222111";  	strContactNo = "1911S0102520040P010P010" + getValueFromConf ("clientContact");  	;  	//WriteToFile(strContactNo);  	strFooter = "1911S0100100055P007P007Powered By QID  Ph: 020-40039501";  	WriteToFile (strFooter);  	WriteToFile (str31);  	// ="A2";  	//WriteToFile(str32);// ="1X1100001560039B126021001001";  	WriteToFile (str33);  	// ="Q0001";  	WriteToFile (str34);  	// ="E";  }  catch (Exception ex) {  }  
Magic Number,PrintAWBLabels,cls_DetamaxPrint,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\cls_DetamaxPrint.cs,prepareSFCLabel,The following statement contains a magic number: try {  	// First Create File  	//  this.CreateFile();  	// write content to file  	Delay (2);  	WriteToFile (str1);  	// = "n";  	WriteToFile (str2);  	// ="M0500";  	WriteToFile (str3);  	// ="V0";  	WriteToFile (str4);  	// ="Kf0075";  	WriteToFile (str5);  	// ="SM";  	WriteToFile (str6);  	// ="d";  	WriteToFile (str7);  	// ="L";  	WriteToFile (str8);  	// ="D11";  	WriteToFile (str9);  	// ="PM";  	WriteToFile (str10);  	// ="pG";  	WriteToFile (str11);  	// ="SM";  	WriteToFile (str12);  	// ="ySU8";  	WriteToFile (str13);  	// ="FB+";  	WriteToFile (str14);  	// ="A2";  	strBox = "1X1100001150010B275135002002";  	//strBox = "1X1100001150010B275135002002";  	WriteToFile (strBox);  	strLine1 = "1X1100001800010L275002";  	WriteToFile (strLine1);  	strLine2 = "1X1100001150150L002135";  	WriteToFile (strLine2);  	strAXB = "1911S0102300020P010P010AWBNo";  	WriteToFile (strAXB);  	RXBNo = RXBNo.PadLeft (10' '0');  	strAXBData = "1911S0101950015P013P012" + RXBNo.Substring (0' 6);  	WriteToFile (strAXBData);  	strAXBData = "1911S0101950080P025P020" + RXBNo.Substring (6' 4);  	WriteToFile (strAXBData);  	//strAXBData = "1911S0101950013P018P018" + RXBNo;  	//WriteToFile(strAXBData);  	strQty = "1911S0102300160P010P010No Of Pcs";  	WriteToFile (strQty);  	strQtyData = "1911S0101950155P018P018" + Ctr.ToString () + "/" + totPics;  	WriteToFile (strQtyData);  	strOrg = "1911S0101650020P010P010ORIGIN";  	WriteToFile (strOrg);  	strOrgData = "1911S0101250020P025P025" + Source;  	WriteToFile (strOrgData);  	//if (SourceLoc.Substring(SourceLoc.Length - 3' 3) == "CBC")  	//    strOrgLoc = "1911S0101250110P010P010CBC";  	//else  	//    strOrgLoc = "1911S0101250110P010P010" + SourceLoc;  	//WriteToFile(strOrgLoc);  	strDest = "1911S0101650160P010P010DESTINATION";  	WriteToFile (strDest);  	strDestData = "1911S0101250160P025P025" + Destination;  	WriteToFile (strDestData);  	//if (destLoc.Trim() != "")  	//{  	//    if (destLoc.Substring(destLoc.Length - 3' 3) == "CBC")  	//        strDestLoc = "1911S0101350235P010P010CBC";  	//    else  	//        strDestLoc = "1911S0101350235P010P010" + destLoc;  	//    WriteToFile(strDestLoc);  	//}  	strDestPincode = "1911S0101200165P010P010" + destPin;  	WriteToFile (strDestPincode);  	// barcode 1  	str26 = "1a0000000700025" + RXBNo + Ctr.ToString ().PadLeft (4' '0');  	//str26 = "1a8104100820049090-" + UBI;  	//str26 = "1a3103100500039090-" + UBI;  	WriteToFile (str26);  	// ="1a3103100230039090-02768076"; // BARCODE 1  	// barcode 2  	str27 = "1911S0100450065P020P020" + RXBNo;  	//str27 = "1911S0100380035P040P027" + UBI;  	//str27 = "1911S0100100021P039P017" + UBI;  	WriteToFile (str27);  	// ="1911S0100090049P010P010090-02768076"; // BARCODE 2  	//WriteToFile("1911S0100100050P010P010Date - " + DateTime.Now.ToString("dd/MM/yyyy HH:mm:ss"));  	WriteToFile ("1911S0100250050P010P010Date - " + DateTime.Now.ToString ("dd-MM-yyyy HH:mm:ss"));  	//WriteToFile("1911S0100100080P014P014" + DateTime.Now.ToString("dd/MM/yyyy HH:mm:ss"));  	//WriteToFile(str28);// ="1X1100001600041L122015";1X1100001600041L122015  	WriteToFile (str29);  	// ="A1";  	//str30 = "1911S0102650025P018P018Jet Airways CARGO";  	str30 = "1911S0102650035P018P018Air Costa CARGO";  	//String strLableHeading = "Air Costa CARGO";  	//String strHedingCmd = "1911S0102650035P018P018";  	String lableHeading = "GoAir CARGO";  	String hedingCmd = "1911S0102650055P018P018";  	lableHeading = getValueFromConf ("lableHeading");  	hedingCmd = getValueFromConf ("hedingCmd");  	if (String.IsNullOrEmpty (hedingCmd))  		hedingCmd = "1911S0102650055P018P018";  	if (String.IsNullOrEmpty (lableHeading))  		lableHeading = "GoAir CARGO";  	str30 = hedingCmd + lableHeading;  	WriteToFile (str30);  	// ="1911S0101630042P008P008 Delex Cargo (AIR)";  	// strContactNo = "1911S0102520040P010P010Ph: 1800222111/09223222111";  	strContactNo = "1911S0102520040P010P010" + getValueFromConf ("clientContact");  	;  	//WriteToFile(strContactNo);  	strFooter = "1911S0100100055P007P007Powered By QID  Ph: 020-40039501";  	WriteToFile (strFooter);  	WriteToFile (str31);  	// ="A2";  	//WriteToFile(str32);// ="1X1100001560039B126021001001";  	WriteToFile (str33);  	// ="Q0001";  	WriteToFile (str34);  	// ="E";  }  catch (Exception ex) {  }  
Magic Number,PrintAWBLabels,cls_DetamaxPrint,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\cls_DetamaxPrint.cs,prepareSFCLabel,The following statement contains a magic number: Delay (2);  
Magic Number,PrintAWBLabels,cls_DetamaxPrint,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\cls_DetamaxPrint.cs,prepareSFCLabel,The following statement contains a magic number: RXBNo = RXBNo.PadLeft (10' '0');  
Magic Number,PrintAWBLabels,cls_DetamaxPrint,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\cls_DetamaxPrint.cs,prepareSFCLabel,The following statement contains a magic number: strAXBData = "1911S0101950015P013P012" + RXBNo.Substring (0' 6);  
Magic Number,PrintAWBLabels,cls_DetamaxPrint,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\cls_DetamaxPrint.cs,prepareSFCLabel,The following statement contains a magic number: strAXBData = "1911S0101950080P025P020" + RXBNo.Substring (6' 4);  
Magic Number,PrintAWBLabels,cls_DetamaxPrint,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\cls_DetamaxPrint.cs,prepareSFCLabel,The following statement contains a magic number: strAXBData = "1911S0101950080P025P020" + RXBNo.Substring (6' 4);  
Magic Number,PrintAWBLabels,cls_DetamaxPrint,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\cls_DetamaxPrint.cs,prepareSFCLabel,The following statement contains a magic number: str26 = "1a0000000700025" + RXBNo + Ctr.ToString ().PadLeft (4' '0');  
Magic Number,PrintAWBLabels,cls_DetamaxPrint,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\cls_DetamaxPrint.cs,Delay,The following statement contains a magic number: try {  	int time = seconds * 1000;  	for (int i = 0; i < time; i++) {  		// do nothing  	}  }  catch (Exception ex) {  }  
Magic Number,PrintAWBLabels,cls_DetamaxPrint,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\cls_DetamaxPrint.cs,WriteToFile,The following statement contains a magic number: try {  	StreamWriter sw = new StreamWriter (strFile' true);  	sw.WriteLine (Message);  	sw.Close ();  	Delay (100);  }  catch (Exception ex) {  	MessageBox.Show ("Error: " + ex.Message);  }  
Magic Number,PrintAWBLabels,cls_DetamaxPrint,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\cls_DetamaxPrint.cs,WriteToFile,The following statement contains a magic number: Delay (100);  
Magic Number,PrintAWBLabels,cls_DetamaxPrint,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\cls_DetamaxPrint.cs,prepareSecurityLabel,The following statement contains a magic number: try {  	// First Create File  	//  this.CreateFile();  	// write content to file  	Delay (2);  	WriteToFile (str1);  	// = "n";  	WriteToFile (str2);  	// ="M0500";  	WriteToFile (str3);  	// ="V0";  	WriteToFile (str4);  	// ="Kf0075";  	WriteToFile (str5);  	// ="SM";  	WriteToFile (str6);  	// ="d";  	WriteToFile (str7);  	// ="L";  	WriteToFile (str8);  	// ="D11";  	WriteToFile (str9);  	// ="PM";  	WriteToFile (str10);  	// ="pG";  	WriteToFile (str11);  	// ="SM";  	WriteToFile (str12);  	// ="ySU8";  	WriteToFile (str13);  	// ="FB+";  	WriteToFile (str14);  	// ="A2";  	str30 = "1911S0102650025P018P018Jet Airways CARGO";  	WriteToFile (str30);  	str31 = "1911S0102350060P018P018Security Check";  	WriteToFile (str31);  	string strSecurity = "1911S0102050060P018P018" + SecurityCode;  	WriteToFile (strSecurity);  	string strBarcode = "1W1c77000008000902000000000" + AWBNo + "'" + SecurityCode + "'" + Shipper + "'" + Consignee;  	WriteToFile (strBarcode);  	string strAWB = "1911S0100500025P018P018AWB: " + AWBNo;  	WriteToFile (strAWB);  	//WriteToFile("1911S0100100050P010P010Date - " + DateTime.Now.ToString("dd/MM/yyyy HH:mm:ss"));  	WriteToFile ("1911S0100250050P010P010" + Location.Trim ().ToUpper () + ": " + DateTime.Now.ToString ("dd-MM-yyyy HH:mm:ss"));  	//WriteToFile("1911S0100100080P014P014" + DateTime.Now.ToString("dd/MM/yyyy HH:mm:ss"));  	//WriteToFile(str28);// ="1X1100001600041L122015";1X1100001600041L122015  	WriteToFile (str29);  	// ="A1";  	strContactNo = "1911S0102520040P010P010Ph: 1800222111/09223222111";  	//WriteToFile(strContactNo);  	strFooter = "1911S0100100055P007P007Powered By QID  Ph: 020-40039501";  	WriteToFile (strFooter);  	str31 = "A2";  	WriteToFile (str31);  	// ="A2";  	//WriteToFile(str32);// ="1X1100001560039B126021001001";  	WriteToFile (str33);  	// ="Q0001";  	WriteToFile (str34);  	// ="E";  }  catch (Exception ex) {  }  
Magic Number,PrintAWBLabels,cls_DetamaxPrint,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\cls_DetamaxPrint.cs,prepareSecurityLabel,The following statement contains a magic number: Delay (2);  
Magic Number,PrintAWBLabels,cls_DetamaxPrint,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\cls_DetamaxPrint.cs,CallPrinterXray,The following statement contains a magic number: try {  	string[] strPieceIds = PieceInfo.Split ('|');  	strFile = FilePath + "\\" + FileName;  	//this.ClearLogs();  	//int TotBags = 10; // int.Parse(txtNoOfPieces.Text);  	File.Delete (APP_PATH + "\\" + FileName);  	for (int i = 0; i < strPieceIds.Length; i++) {  		this.prepareSecurityLabel (AWBNumber' strPieceIds [i]' Location' Shipper' Consignee);  		Delay (5);  	}  	Delay (15);  	//File.Copy(strFile' APP_PATH +"\\"+ FileName' true);  	System.Diagnostics.Process Process1 = new System.Diagnostics.Process ();  	//Process Process1 = new Process();  	Process1.EnableRaisingEvents = false;  	string cmd = APP_PATH + "\\" + batFileName;  	System.Diagnostics.ProcessStartInfo info = new ProcessStartInfo ();  	info.UseShellExecute = true;  	info.FileName = batFileName;  	//D:\Products\SCM\DesktopPrinter  	//info.WorkingDirectory = "D:\\DesktopPrinter\\";//APP_PATH +"\\";  	info.WorkingDirectory = APP_PATH + "\\";  	//info.Verb = "runas";  	System.Diagnostics.Process.Start (info);  	Process1.Close ();  }  catch (Exception ex) {  	MessageBox.Show ("Error: " + ex.Message);  }  
Magic Number,PrintAWBLabels,cls_DetamaxPrint,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\cls_DetamaxPrint.cs,CallPrinterXray,The following statement contains a magic number: try {  	string[] strPieceIds = PieceInfo.Split ('|');  	strFile = FilePath + "\\" + FileName;  	//this.ClearLogs();  	//int TotBags = 10; // int.Parse(txtNoOfPieces.Text);  	File.Delete (APP_PATH + "\\" + FileName);  	for (int i = 0; i < strPieceIds.Length; i++) {  		this.prepareSecurityLabel (AWBNumber' strPieceIds [i]' Location' Shipper' Consignee);  		Delay (5);  	}  	Delay (15);  	//File.Copy(strFile' APP_PATH +"\\"+ FileName' true);  	System.Diagnostics.Process Process1 = new System.Diagnostics.Process ();  	//Process Process1 = new Process();  	Process1.EnableRaisingEvents = false;  	string cmd = APP_PATH + "\\" + batFileName;  	System.Diagnostics.ProcessStartInfo info = new ProcessStartInfo ();  	info.UseShellExecute = true;  	info.FileName = batFileName;  	//D:\Products\SCM\DesktopPrinter  	//info.WorkingDirectory = "D:\\DesktopPrinter\\";//APP_PATH +"\\";  	info.WorkingDirectory = APP_PATH + "\\";  	//info.Verb = "runas";  	System.Diagnostics.Process.Start (info);  	Process1.Close ();  }  catch (Exception ex) {  	MessageBox.Show ("Error: " + ex.Message);  }  
Magic Number,PrintAWBLabels,cls_DetamaxPrint,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\cls_DetamaxPrint.cs,CallPrinterXray,The following statement contains a magic number: for (int i = 0; i < strPieceIds.Length; i++) {  	this.prepareSecurityLabel (AWBNumber' strPieceIds [i]' Location' Shipper' Consignee);  	Delay (5);  }  
Magic Number,PrintAWBLabels,cls_DetamaxPrint,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\cls_DetamaxPrint.cs,CallPrinterXray,The following statement contains a magic number: Delay (5);  
Magic Number,PrintAWBLabels,cls_DetamaxPrint,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\cls_DetamaxPrint.cs,CallPrinterXray,The following statement contains a magic number: Delay (15);  
Magic Number,PrintAWBLabels,Program,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\Program.cs,Main,The following statement contains a magic number: try {  	PrintingType = args [6];  	// For X-Ray Label Printing or AWB Label Printing. (BK - Booking' XR - X-ray)              }  catch (Exception ex) {  	PrintingType = "BK";  }  
Magic Number,PrintAWBLabels,Program,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\Program.cs,Main,The following statement contains a magic number: PrintingType = args [6];  
Magic Number,PrintAWBLabels,Program,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\Program.cs,Main,The following statement contains a magic number: try {  	Location = args [7];  }  catch (Exception ex) {  	Location = "";  }  
Magic Number,PrintAWBLabels,Program,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\Program.cs,Main,The following statement contains a magic number: Location = args [7];  
Magic Number,PrintAWBLabels,Program,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\Program.cs,Main,The following statement contains a magic number: try {  	Shipper = args [8];  }  catch (Exception ex) {  	Shipper = "";  }  
Magic Number,PrintAWBLabels,Program,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\Program.cs,Main,The following statement contains a magic number: Shipper = args [8];  
Magic Number,PrintAWBLabels,Program,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\Program.cs,Main,The following statement contains a magic number: try {  	Consignee = args [9];  }  catch (Exception ex) {  	Consignee = "";  }  
Magic Number,PrintAWBLabels,Program,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\Program.cs,Main,The following statement contains a magic number: Consignee = args [9];  
Magic Number,PrintAWBLabels,Program,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\Program.cs,Main,The following statement contains a magic number: try {  	PieceInfo = args [10];  }  catch (Exception ex) {  	PieceInfo = "";  }  
Magic Number,PrintAWBLabels,Program,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\Program.cs,Main,The following statement contains a magic number: PieceInfo = args [10];  
Magic Number,PrintAWBLabels,Program,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\Program.cs,Main,The following statement contains a magic number: if (OC3 != "1") {  	cls_DetamaxPrint objPrint = new cls_DetamaxPrint ();  	if (PrintingType == "BK") {  		objPrint.PrintLabel (Destination' Origin' ""' PiecesCount' AWBNo' FromPcs' ToPcs);  	}  	else {  		objPrint.PrintXrayLabel (AWBNo' Location' Shipper' Consignee' PieceInfo);  	}  }  else {  	clsOneilOC3 objPrint = new clsOneilOC3 ();  	for (int ICount = 0; ICount < PiecesCount; ICount++) {  		objPrint.PrintLabel (Destination' Origin' ""' PiecesCount.ToString ()' AWBNo' PiecesCount - ICount);  		System.Threading.Thread.Sleep (2000);  	}  }  
Magic Number,PrintAWBLabels,Program,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\Program.cs,Main,The following statement contains a magic number: for (int ICount = 0; ICount < PiecesCount; ICount++) {  	objPrint.PrintLabel (Destination' Origin' ""' PiecesCount.ToString ()' AWBNo' PiecesCount - ICount);  	System.Threading.Thread.Sleep (2000);  }  
Magic Number,PrintAWBLabels,Program,C:\repos\vishaltillu_SCM_CORE_V3\PrintAWBLabels\Program.cs,Main,The following statement contains a magic number: System.Threading.Thread.Sleep (2000);  
