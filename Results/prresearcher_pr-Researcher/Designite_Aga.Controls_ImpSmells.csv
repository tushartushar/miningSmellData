Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Aga.Controls,GifDecoder,C:\repos\prresearcher_pr-Researcher\process-Researcher\TreeViewAdv\GifDecoder.cs,SetPixels,Cyclomatic complexity of the method is 24
Complex Method,Aga.Controls,GifDecoder,C:\repos\prresearcher_pr-Researcher\process-Researcher\TreeViewAdv\GifDecoder.cs,DecodeImageData,Cyclomatic complexity of the method is 19
Complex Method,Aga.Controls,GifDecoder,C:\repos\prresearcher_pr-Researcher\process-Researcher\TreeViewAdv\GifDecoder.cs,ReadContents,Cyclomatic complexity of the method is 16
Complex Method,Aga.Controls,NumericTextBox,C:\repos\prresearcher_pr-Researcher\process-Researcher\TreeViewAdv\NumericTextBox.cs,invalidNumeric,Cyclomatic complexity of the method is 8
Complex Method,Aga.Controls,NumericTextBox,C:\repos\prresearcher_pr-Researcher\process-Researcher\TreeViewAdv\NumericTextBox.cs,WndProc,Cyclomatic complexity of the method is 8
Complex Method,Aga.Controls.Tree,TreeViewAdv,C:\repos\prresearcher_pr-Researcher\process-Researcher\TreeViewAdv\Tree\TreeViewAdv.Draw.cs,DrawRow,Cyclomatic complexity of the method is 11
Complex Method,Aga.Controls.Tree,TreeColumn,C:\repos\prresearcher_pr-Researcher\process-Researcher\TreeViewAdv\Tree\TreeColumn.cs,DrawBackground,Cyclomatic complexity of the method is 8
Complex Method,Aga.Controls.Tree,NormalInputState,C:\repos\prresearcher_pr-Researcher\process-Researcher\TreeViewAdv\Tree\Input\NormalInputState.cs,KeyDown,Cyclomatic complexity of the method is 58
Long Parameter List,Aga.Controls.Tree,TreeColumn,C:\repos\prresearcher_pr-Researcher\process-Researcher\TreeViewAdv\Tree\TreeColumn.cs,Draw,The method has 5 parameters.
Long Parameter List,Aga.Controls.Tree.NodeControls,BaseTextControl,C:\repos\prresearcher_pr-Researcher\process-Researcher\TreeViewAdv\Tree\NodeControls\BaseTextControl.cs,CreateBrushes,The method has 7 parameters.
Long Statement,Aga.Controls,GifDecoder,C:\repos\prresearcher_pr-Researcher\process-Researcher\TreeViewAdv\GifDecoder.cs,DecodeImageData,The length of the statement  "	int available' clear' code_mask' code_size' end_of_information' in_code' old_code' bits' code' count' i' datum' data_size' first' top' bi' pi; " is 142.
Long Statement,Aga.Controls,BitmapHelper,C:\repos\prresearcher_pr-Researcher\process-Researcher\TreeViewAdv\BitmapHelper.cs,SetAlphaChanelValue,The length of the statement  "	BitmapData bitmapData = image.LockBits (new Rectangle (0' 0' image.Width' image.Height)' ImageLockMode.ReadWrite' PixelFormat.Format32bppArgb); " is 143.
Long Statement,Aga.Controls.Tree,TreeViewAdv,C:\repos\prresearcher_pr-Researcher\process-Researcher\TreeViewAdv\Tree\TreeViewAdv.Draw.cs,DrawRow,The length of the statement  "	if (!FullRowSelect || (FullRowSelect && context.DrawSelection != DrawSelectionMode.Active && context.DrawSelection != DrawSelectionMode.Inactive)) " is 146.
Long Statement,Aga.Controls.Tree,TreeViewAdv,C:\repos\prresearcher_pr-Researcher\process-Researcher\TreeViewAdv\Tree\TreeViewAdv.Draw.cs,DrawNode,The length of the statement  "		if (item.Bounds.X + item.Bounds.Width >= OffsetX && item.Bounds.X - OffsetX < this.Bounds.Width)// skip invisible nodes (fixed by wj32) " is 135.
Long Statement,Aga.Controls.Tree,TreeViewAdv,C:\repos\prresearcher_pr-Researcher\process-Researcher\TreeViewAdv\Tree\TreeViewAdv.Draw.cs,DrawScrollBarsBox,The length of the statement  "	gr.FillRectangle (SystemBrushes.Control' new Rectangle (r1.Right' r1.Bottom' r2.Width - r1.Width' r2.Height - r1.Height)); " is 122.
Long Statement,Aga.Controls.Tree,TreeColumn,C:\repos\prresearcher_pr-Researcher\process-Researcher\TreeViewAdv\Tree\TreeColumn.cs,DrawContent,The length of the statement  "	Rectangle innerBounds = new Rectangle (bounds.X + HeaderLeftMargin' bounds.Y' bounds.Width - HeaderLeftMargin - HeaderRightMargin' bounds.Height); " is 146.
Long Statement,Aga.Controls.Tree,TreeColumn,C:\repos\prresearcher_pr-Researcher\process-Researcher\TreeViewAdv\Tree\TreeColumn.cs,DrawContent,The length of the statement  "		TextRenderer.DrawText (gr' Header' font' innerBounds' SystemColors.ControlText' _baseHeaderFlags | TextFormatFlags.Left); " is 121.
Long Statement,Aga.Controls.Tree.NodeControls,BaseTextControl,C:\repos\prresearcher_pr-Researcher\process-Researcher\TreeViewAdv\Tree\NodeControls\BaseTextControl.cs,SetFormatFlags,The length of the statement  "	_formatFlags = _baseFormatFlags | TextHelper.TranslateAligmentToFlag (TextAlign) | TextHelper.TranslateTrimmingToFlag (Trimming); " is 129.
Long Statement,Aga.Controls.Tree.NodeControls,EditableControl,C:\repos\prresearcher_pr-Researcher\process-Researcher\TreeViewAdv\Tree\NodeControls\EditableControl.cs,SetEditorBounds,The length of the statement  "	context.Editor.Bounds = new Rectangle (context.Bounds.X' context.Bounds.Y' Math.Min (size.Width' context.Bounds.Width)' context.Bounds.Height); " is 143.
Long Statement,Aga.Controls.Tree.NodeControls,EditableControl,C:\repos\prresearcher_pr-Researcher\process-Researcher\TreeViewAdv\Tree\NodeControls\EditableControl.cs,MouseDown,The length of the statement  "	_editFlag = (!EditOnClick && args.Button == MouseButtons.Left && args.ModifierKeys == Keys.None && args.Node.IsSelected); " is 121.
Complex Conditional,Aga.Controls.Tree,TreeViewAdv,C:\repos\prresearcher_pr-Researcher\process-Researcher\TreeViewAdv\Tree\TreeViewAdv.Draw.cs,DrawRow,The conditional expression  "!FullRowSelect || (FullRowSelect && context.DrawSelection != DrawSelectionMode.Active && context.DrawSelection != DrawSelectionMode.Inactive)"  is complex.
Empty Catch Block,Aga.Controls,GifDecoder,C:\repos\prresearcher_pr-Researcher\process-Researcher\TreeViewAdv\GifDecoder.cs,ReadBlock,The method has an empty catch block.
Empty Catch Block,Aga.Controls,GifDecoder,C:\repos\prresearcher_pr-Researcher\process-Researcher\TreeViewAdv\GifDecoder.cs,ReadColorTable,The method has an empty catch block.
Magic Number,Aga.Controls,GifDecoder,C:\repos\prresearcher_pr-Researcher\process-Researcher\TreeViewAdv\GifDecoder.cs,SetPixels,The following statement contains a magic number: if (lastDispose > 0) {  	if (lastDispose == 3) {  		// use image before last  		int n = frameCount - 2;  		if (n > 0) {  			lastImage = GetFrame (n - 1).Image;  		}  		else {  			lastImage = null;  		}  	}  	if (lastImage != null) {  		//				int[] prev =  		//					((DataBufferInt) lastImage.getRaster().getDataBuffer()).getData();  		int[] prev = GetPixels (new Bitmap (lastImage));  		Array.Copy (prev' 0' dest' 0' width * height);  		// copy pixels  		if (lastDispose == 2) {  			// fill last image rect area with background color  			Graphics g = Graphics.FromImage (image);  			Color c = Color.Empty;  			if (transparency) {  				c = Color.FromArgb (0' 0' 0' 0);  				// assume background is transparent  			}  			else {  				c = Color.FromArgb (lastBgColor);  				//						c = new Color(lastBgColor); // use given background color  			}  			Brush brush = new SolidBrush (c);  			g.FillRectangle (brush' lastRect);  			brush.Dispose ();  			g.Dispose ();  		}  	}  }  
Magic Number,Aga.Controls,GifDecoder,C:\repos\prresearcher_pr-Researcher\process-Researcher\TreeViewAdv\GifDecoder.cs,SetPixels,The following statement contains a magic number: if (lastDispose > 0) {  	if (lastDispose == 3) {  		// use image before last  		int n = frameCount - 2;  		if (n > 0) {  			lastImage = GetFrame (n - 1).Image;  		}  		else {  			lastImage = null;  		}  	}  	if (lastImage != null) {  		//				int[] prev =  		//					((DataBufferInt) lastImage.getRaster().getDataBuffer()).getData();  		int[] prev = GetPixels (new Bitmap (lastImage));  		Array.Copy (prev' 0' dest' 0' width * height);  		// copy pixels  		if (lastDispose == 2) {  			// fill last image rect area with background color  			Graphics g = Graphics.FromImage (image);  			Color c = Color.Empty;  			if (transparency) {  				c = Color.FromArgb (0' 0' 0' 0);  				// assume background is transparent  			}  			else {  				c = Color.FromArgb (lastBgColor);  				//						c = new Color(lastBgColor); // use given background color  			}  			Brush brush = new SolidBrush (c);  			g.FillRectangle (brush' lastRect);  			brush.Dispose ();  			g.Dispose ();  		}  	}  }  
Magic Number,Aga.Controls,GifDecoder,C:\repos\prresearcher_pr-Researcher\process-Researcher\TreeViewAdv\GifDecoder.cs,SetPixels,The following statement contains a magic number: if (lastDispose > 0) {  	if (lastDispose == 3) {  		// use image before last  		int n = frameCount - 2;  		if (n > 0) {  			lastImage = GetFrame (n - 1).Image;  		}  		else {  			lastImage = null;  		}  	}  	if (lastImage != null) {  		//				int[] prev =  		//					((DataBufferInt) lastImage.getRaster().getDataBuffer()).getData();  		int[] prev = GetPixels (new Bitmap (lastImage));  		Array.Copy (prev' 0' dest' 0' width * height);  		// copy pixels  		if (lastDispose == 2) {  			// fill last image rect area with background color  			Graphics g = Graphics.FromImage (image);  			Color c = Color.Empty;  			if (transparency) {  				c = Color.FromArgb (0' 0' 0' 0);  				// assume background is transparent  			}  			else {  				c = Color.FromArgb (lastBgColor);  				//						c = new Color(lastBgColor); // use given background color  			}  			Brush brush = new SolidBrush (c);  			g.FillRectangle (brush' lastRect);  			brush.Dispose ();  			g.Dispose ();  		}  	}  }  
Magic Number,Aga.Controls,GifDecoder,C:\repos\prresearcher_pr-Researcher\process-Researcher\TreeViewAdv\GifDecoder.cs,SetPixels,The following statement contains a magic number: if (lastDispose == 3) {  	// use image before last  	int n = frameCount - 2;  	if (n > 0) {  		lastImage = GetFrame (n - 1).Image;  	}  	else {  		lastImage = null;  	}  }  
Magic Number,Aga.Controls,GifDecoder,C:\repos\prresearcher_pr-Researcher\process-Researcher\TreeViewAdv\GifDecoder.cs,SetPixels,The following statement contains a magic number: if (lastDispose == 3) {  	// use image before last  	int n = frameCount - 2;  	if (n > 0) {  		lastImage = GetFrame (n - 1).Image;  	}  	else {  		lastImage = null;  	}  }  
Magic Number,Aga.Controls,GifDecoder,C:\repos\prresearcher_pr-Researcher\process-Researcher\TreeViewAdv\GifDecoder.cs,SetPixels,The following statement contains a magic number: if (lastImage != null) {  	//				int[] prev =  	//					((DataBufferInt) lastImage.getRaster().getDataBuffer()).getData();  	int[] prev = GetPixels (new Bitmap (lastImage));  	Array.Copy (prev' 0' dest' 0' width * height);  	// copy pixels  	if (lastDispose == 2) {  		// fill last image rect area with background color  		Graphics g = Graphics.FromImage (image);  		Color c = Color.Empty;  		if (transparency) {  			c = Color.FromArgb (0' 0' 0' 0);  			// assume background is transparent  		}  		else {  			c = Color.FromArgb (lastBgColor);  			//						c = new Color(lastBgColor); // use given background color  		}  		Brush brush = new SolidBrush (c);  		g.FillRectangle (brush' lastRect);  		brush.Dispose ();  		g.Dispose ();  	}  }  
Magic Number,Aga.Controls,GifDecoder,C:\repos\prresearcher_pr-Researcher\process-Researcher\TreeViewAdv\GifDecoder.cs,SetPixels,The following statement contains a magic number: if (lastDispose == 2) {  	// fill last image rect area with background color  	Graphics g = Graphics.FromImage (image);  	Color c = Color.Empty;  	if (transparency) {  		c = Color.FromArgb (0' 0' 0' 0);  		// assume background is transparent  	}  	else {  		c = Color.FromArgb (lastBgColor);  		//						c = new Color(lastBgColor); // use given background color  	}  	Brush brush = new SolidBrush (c);  	g.FillRectangle (brush' lastRect);  	brush.Dispose ();  	g.Dispose ();  }  
Magic Number,Aga.Controls,GifDecoder,C:\repos\prresearcher_pr-Researcher\process-Researcher\TreeViewAdv\GifDecoder.cs,SetPixels,The following statement contains a magic number: for (int i = 0; i < ih; i++) {  	int line = i;  	if (interlace) {  		if (iline >= ih) {  			pass++;  			switch (pass) {  			case 2:  				iline = 4;  				break;  			case 3:  				iline = 2;  				inc = 4;  				break;  			case 4:  				iline = 1;  				inc = 2;  				break;  			}  		}  		line = iline;  		iline += inc;  	}  	line += iy;  	if (line < height) {  		int k = line * width;  		int dx = k + ix;  		// start of line in dest  		int dlim = dx + iw;  		// end of dest line  		if ((k + width) < dlim) {  			dlim = k + width;  			// past dest edge  		}  		int sx = i * iw;  		// start of line in source  		while (dx < dlim) {  			// map color and insert in destination  			int index = ((int)pixels [sx++]) & 0xff;  			int c = act [index];  			if (c != 0) {  				dest [dx] = c;  			}  			dx++;  		}  	}  }  
Magic Number,Aga.Controls,GifDecoder,C:\repos\prresearcher_pr-Researcher\process-Researcher\TreeViewAdv\GifDecoder.cs,SetPixels,The following statement contains a magic number: for (int i = 0; i < ih; i++) {  	int line = i;  	if (interlace) {  		if (iline >= ih) {  			pass++;  			switch (pass) {  			case 2:  				iline = 4;  				break;  			case 3:  				iline = 2;  				inc = 4;  				break;  			case 4:  				iline = 1;  				inc = 2;  				break;  			}  		}  		line = iline;  		iline += inc;  	}  	line += iy;  	if (line < height) {  		int k = line * width;  		int dx = k + ix;  		// start of line in dest  		int dlim = dx + iw;  		// end of dest line  		if ((k + width) < dlim) {  			dlim = k + width;  			// past dest edge  		}  		int sx = i * iw;  		// start of line in source  		while (dx < dlim) {  			// map color and insert in destination  			int index = ((int)pixels [sx++]) & 0xff;  			int c = act [index];  			if (c != 0) {  				dest [dx] = c;  			}  			dx++;  		}  	}  }  
Magic Number,Aga.Controls,GifDecoder,C:\repos\prresearcher_pr-Researcher\process-Researcher\TreeViewAdv\GifDecoder.cs,SetPixels,The following statement contains a magic number: for (int i = 0; i < ih; i++) {  	int line = i;  	if (interlace) {  		if (iline >= ih) {  			pass++;  			switch (pass) {  			case 2:  				iline = 4;  				break;  			case 3:  				iline = 2;  				inc = 4;  				break;  			case 4:  				iline = 1;  				inc = 2;  				break;  			}  		}  		line = iline;  		iline += inc;  	}  	line += iy;  	if (line < height) {  		int k = line * width;  		int dx = k + ix;  		// start of line in dest  		int dlim = dx + iw;  		// end of dest line  		if ((k + width) < dlim) {  			dlim = k + width;  			// past dest edge  		}  		int sx = i * iw;  		// start of line in source  		while (dx < dlim) {  			// map color and insert in destination  			int index = ((int)pixels [sx++]) & 0xff;  			int c = act [index];  			if (c != 0) {  				dest [dx] = c;  			}  			dx++;  		}  	}  }  
Magic Number,Aga.Controls,GifDecoder,C:\repos\prresearcher_pr-Researcher\process-Researcher\TreeViewAdv\GifDecoder.cs,SetPixels,The following statement contains a magic number: for (int i = 0; i < ih; i++) {  	int line = i;  	if (interlace) {  		if (iline >= ih) {  			pass++;  			switch (pass) {  			case 2:  				iline = 4;  				break;  			case 3:  				iline = 2;  				inc = 4;  				break;  			case 4:  				iline = 1;  				inc = 2;  				break;  			}  		}  		line = iline;  		iline += inc;  	}  	line += iy;  	if (line < height) {  		int k = line * width;  		int dx = k + ix;  		// start of line in dest  		int dlim = dx + iw;  		// end of dest line  		if ((k + width) < dlim) {  			dlim = k + width;  			// past dest edge  		}  		int sx = i * iw;  		// start of line in source  		while (dx < dlim) {  			// map color and insert in destination  			int index = ((int)pixels [sx++]) & 0xff;  			int c = act [index];  			if (c != 0) {  				dest [dx] = c;  			}  			dx++;  		}  	}  }  
Magic Number,Aga.Controls,GifDecoder,C:\repos\prresearcher_pr-Researcher\process-Researcher\TreeViewAdv\GifDecoder.cs,SetPixels,The following statement contains a magic number: for (int i = 0; i < ih; i++) {  	int line = i;  	if (interlace) {  		if (iline >= ih) {  			pass++;  			switch (pass) {  			case 2:  				iline = 4;  				break;  			case 3:  				iline = 2;  				inc = 4;  				break;  			case 4:  				iline = 1;  				inc = 2;  				break;  			}  		}  		line = iline;  		iline += inc;  	}  	line += iy;  	if (line < height) {  		int k = line * width;  		int dx = k + ix;  		// start of line in dest  		int dlim = dx + iw;  		// end of dest line  		if ((k + width) < dlim) {  			dlim = k + width;  			// past dest edge  		}  		int sx = i * iw;  		// start of line in source  		while (dx < dlim) {  			// map color and insert in destination  			int index = ((int)pixels [sx++]) & 0xff;  			int c = act [index];  			if (c != 0) {  				dest [dx] = c;  			}  			dx++;  		}  	}  }  
Magic Number,Aga.Controls,GifDecoder,C:\repos\prresearcher_pr-Researcher\process-Researcher\TreeViewAdv\GifDecoder.cs,SetPixels,The following statement contains a magic number: for (int i = 0; i < ih; i++) {  	int line = i;  	if (interlace) {  		if (iline >= ih) {  			pass++;  			switch (pass) {  			case 2:  				iline = 4;  				break;  			case 3:  				iline = 2;  				inc = 4;  				break;  			case 4:  				iline = 1;  				inc = 2;  				break;  			}  		}  		line = iline;  		iline += inc;  	}  	line += iy;  	if (line < height) {  		int k = line * width;  		int dx = k + ix;  		// start of line in dest  		int dlim = dx + iw;  		// end of dest line  		if ((k + width) < dlim) {  			dlim = k + width;  			// past dest edge  		}  		int sx = i * iw;  		// start of line in source  		while (dx < dlim) {  			// map color and insert in destination  			int index = ((int)pixels [sx++]) & 0xff;  			int c = act [index];  			if (c != 0) {  				dest [dx] = c;  			}  			dx++;  		}  	}  }  
Magic Number,Aga.Controls,GifDecoder,C:\repos\prresearcher_pr-Researcher\process-Researcher\TreeViewAdv\GifDecoder.cs,SetPixels,The following statement contains a magic number: for (int i = 0; i < ih; i++) {  	int line = i;  	if (interlace) {  		if (iline >= ih) {  			pass++;  			switch (pass) {  			case 2:  				iline = 4;  				break;  			case 3:  				iline = 2;  				inc = 4;  				break;  			case 4:  				iline = 1;  				inc = 2;  				break;  			}  		}  		line = iline;  		iline += inc;  	}  	line += iy;  	if (line < height) {  		int k = line * width;  		int dx = k + ix;  		// start of line in dest  		int dlim = dx + iw;  		// end of dest line  		if ((k + width) < dlim) {  			dlim = k + width;  			// past dest edge  		}  		int sx = i * iw;  		// start of line in source  		while (dx < dlim) {  			// map color and insert in destination  			int index = ((int)pixels [sx++]) & 0xff;  			int c = act [index];  			if (c != 0) {  				dest [dx] = c;  			}  			dx++;  		}  	}  }  
Magic Number,Aga.Controls,GifDecoder,C:\repos\prresearcher_pr-Researcher\process-Researcher\TreeViewAdv\GifDecoder.cs,SetPixels,The following statement contains a magic number: if (interlace) {  	if (iline >= ih) {  		pass++;  		switch (pass) {  		case 2:  			iline = 4;  			break;  		case 3:  			iline = 2;  			inc = 4;  			break;  		case 4:  			iline = 1;  			inc = 2;  			break;  		}  	}  	line = iline;  	iline += inc;  }  
Magic Number,Aga.Controls,GifDecoder,C:\repos\prresearcher_pr-Researcher\process-Researcher\TreeViewAdv\GifDecoder.cs,SetPixels,The following statement contains a magic number: if (interlace) {  	if (iline >= ih) {  		pass++;  		switch (pass) {  		case 2:  			iline = 4;  			break;  		case 3:  			iline = 2;  			inc = 4;  			break;  		case 4:  			iline = 1;  			inc = 2;  			break;  		}  	}  	line = iline;  	iline += inc;  }  
Magic Number,Aga.Controls,GifDecoder,C:\repos\prresearcher_pr-Researcher\process-Researcher\TreeViewAdv\GifDecoder.cs,SetPixels,The following statement contains a magic number: if (interlace) {  	if (iline >= ih) {  		pass++;  		switch (pass) {  		case 2:  			iline = 4;  			break;  		case 3:  			iline = 2;  			inc = 4;  			break;  		case 4:  			iline = 1;  			inc = 2;  			break;  		}  	}  	line = iline;  	iline += inc;  }  
Magic Number,Aga.Controls,GifDecoder,C:\repos\prresearcher_pr-Researcher\process-Researcher\TreeViewAdv\GifDecoder.cs,SetPixels,The following statement contains a magic number: if (interlace) {  	if (iline >= ih) {  		pass++;  		switch (pass) {  		case 2:  			iline = 4;  			break;  		case 3:  			iline = 2;  			inc = 4;  			break;  		case 4:  			iline = 1;  			inc = 2;  			break;  		}  	}  	line = iline;  	iline += inc;  }  
Magic Number,Aga.Controls,GifDecoder,C:\repos\prresearcher_pr-Researcher\process-Researcher\TreeViewAdv\GifDecoder.cs,SetPixels,The following statement contains a magic number: if (interlace) {  	if (iline >= ih) {  		pass++;  		switch (pass) {  		case 2:  			iline = 4;  			break;  		case 3:  			iline = 2;  			inc = 4;  			break;  		case 4:  			iline = 1;  			inc = 2;  			break;  		}  	}  	line = iline;  	iline += inc;  }  
Magic Number,Aga.Controls,GifDecoder,C:\repos\prresearcher_pr-Researcher\process-Researcher\TreeViewAdv\GifDecoder.cs,SetPixels,The following statement contains a magic number: if (interlace) {  	if (iline >= ih) {  		pass++;  		switch (pass) {  		case 2:  			iline = 4;  			break;  		case 3:  			iline = 2;  			inc = 4;  			break;  		case 4:  			iline = 1;  			inc = 2;  			break;  		}  	}  	line = iline;  	iline += inc;  }  
Magic Number,Aga.Controls,GifDecoder,C:\repos\prresearcher_pr-Researcher\process-Researcher\TreeViewAdv\GifDecoder.cs,SetPixels,The following statement contains a magic number: if (interlace) {  	if (iline >= ih) {  		pass++;  		switch (pass) {  		case 2:  			iline = 4;  			break;  		case 3:  			iline = 2;  			inc = 4;  			break;  		case 4:  			iline = 1;  			inc = 2;  			break;  		}  	}  	line = iline;  	iline += inc;  }  
Magic Number,Aga.Controls,GifDecoder,C:\repos\prresearcher_pr-Researcher\process-Researcher\TreeViewAdv\GifDecoder.cs,SetPixels,The following statement contains a magic number: if (iline >= ih) {  	pass++;  	switch (pass) {  	case 2:  		iline = 4;  		break;  	case 3:  		iline = 2;  		inc = 4;  		break;  	case 4:  		iline = 1;  		inc = 2;  		break;  	}  }  
Magic Number,Aga.Controls,GifDecoder,C:\repos\prresearcher_pr-Researcher\process-Researcher\TreeViewAdv\GifDecoder.cs,SetPixels,The following statement contains a magic number: if (iline >= ih) {  	pass++;  	switch (pass) {  	case 2:  		iline = 4;  		break;  	case 3:  		iline = 2;  		inc = 4;  		break;  	case 4:  		iline = 1;  		inc = 2;  		break;  	}  }  
Magic Number,Aga.Controls,GifDecoder,C:\repos\prresearcher_pr-Researcher\process-Researcher\TreeViewAdv\GifDecoder.cs,SetPixels,The following statement contains a magic number: if (iline >= ih) {  	pass++;  	switch (pass) {  	case 2:  		iline = 4;  		break;  	case 3:  		iline = 2;  		inc = 4;  		break;  	case 4:  		iline = 1;  		inc = 2;  		break;  	}  }  
Magic Number,Aga.Controls,GifDecoder,C:\repos\prresearcher_pr-Researcher\process-Researcher\TreeViewAdv\GifDecoder.cs,SetPixels,The following statement contains a magic number: if (iline >= ih) {  	pass++;  	switch (pass) {  	case 2:  		iline = 4;  		break;  	case 3:  		iline = 2;  		inc = 4;  		break;  	case 4:  		iline = 1;  		inc = 2;  		break;  	}  }  
Magic Number,Aga.Controls,GifDecoder,C:\repos\prresearcher_pr-Researcher\process-Researcher\TreeViewAdv\GifDecoder.cs,SetPixels,The following statement contains a magic number: if (iline >= ih) {  	pass++;  	switch (pass) {  	case 2:  		iline = 4;  		break;  	case 3:  		iline = 2;  		inc = 4;  		break;  	case 4:  		iline = 1;  		inc = 2;  		break;  	}  }  
Magic Number,Aga.Controls,GifDecoder,C:\repos\prresearcher_pr-Researcher\process-Researcher\TreeViewAdv\GifDecoder.cs,SetPixels,The following statement contains a magic number: if (iline >= ih) {  	pass++;  	switch (pass) {  	case 2:  		iline = 4;  		break;  	case 3:  		iline = 2;  		inc = 4;  		break;  	case 4:  		iline = 1;  		inc = 2;  		break;  	}  }  
Magic Number,Aga.Controls,GifDecoder,C:\repos\prresearcher_pr-Researcher\process-Researcher\TreeViewAdv\GifDecoder.cs,SetPixels,The following statement contains a magic number: if (iline >= ih) {  	pass++;  	switch (pass) {  	case 2:  		iline = 4;  		break;  	case 3:  		iline = 2;  		inc = 4;  		break;  	case 4:  		iline = 1;  		inc = 2;  		break;  	}  }  
Magic Number,Aga.Controls,GifDecoder,C:\repos\prresearcher_pr-Researcher\process-Researcher\TreeViewAdv\GifDecoder.cs,SetPixels,The following statement contains a magic number: switch (pass) {  case 2:  	iline = 4;  	break;  case 3:  	iline = 2;  	inc = 4;  	break;  case 4:  	iline = 1;  	inc = 2;  	break;  }  
Magic Number,Aga.Controls,GifDecoder,C:\repos\prresearcher_pr-Researcher\process-Researcher\TreeViewAdv\GifDecoder.cs,SetPixels,The following statement contains a magic number: switch (pass) {  case 2:  	iline = 4;  	break;  case 3:  	iline = 2;  	inc = 4;  	break;  case 4:  	iline = 1;  	inc = 2;  	break;  }  
Magic Number,Aga.Controls,GifDecoder,C:\repos\prresearcher_pr-Researcher\process-Researcher\TreeViewAdv\GifDecoder.cs,SetPixels,The following statement contains a magic number: switch (pass) {  case 2:  	iline = 4;  	break;  case 3:  	iline = 2;  	inc = 4;  	break;  case 4:  	iline = 1;  	inc = 2;  	break;  }  
Magic Number,Aga.Controls,GifDecoder,C:\repos\prresearcher_pr-Researcher\process-Researcher\TreeViewAdv\GifDecoder.cs,SetPixels,The following statement contains a magic number: switch (pass) {  case 2:  	iline = 4;  	break;  case 3:  	iline = 2;  	inc = 4;  	break;  case 4:  	iline = 1;  	inc = 2;  	break;  }  
Magic Number,Aga.Controls,GifDecoder,C:\repos\prresearcher_pr-Researcher\process-Researcher\TreeViewAdv\GifDecoder.cs,SetPixels,The following statement contains a magic number: switch (pass) {  case 2:  	iline = 4;  	break;  case 3:  	iline = 2;  	inc = 4;  	break;  case 4:  	iline = 1;  	inc = 2;  	break;  }  
Magic Number,Aga.Controls,GifDecoder,C:\repos\prresearcher_pr-Researcher\process-Researcher\TreeViewAdv\GifDecoder.cs,SetPixels,The following statement contains a magic number: switch (pass) {  case 2:  	iline = 4;  	break;  case 3:  	iline = 2;  	inc = 4;  	break;  case 4:  	iline = 1;  	inc = 2;  	break;  }  
Magic Number,Aga.Controls,GifDecoder,C:\repos\prresearcher_pr-Researcher\process-Researcher\TreeViewAdv\GifDecoder.cs,SetPixels,The following statement contains a magic number: switch (pass) {  case 2:  	iline = 4;  	break;  case 3:  	iline = 2;  	inc = 4;  	break;  case 4:  	iline = 1;  	inc = 2;  	break;  }  
Magic Number,Aga.Controls,GifDecoder,C:\repos\prresearcher_pr-Researcher\process-Researcher\TreeViewAdv\GifDecoder.cs,SetPixels,The following statement contains a magic number: iline = 4;  
Magic Number,Aga.Controls,GifDecoder,C:\repos\prresearcher_pr-Researcher\process-Researcher\TreeViewAdv\GifDecoder.cs,SetPixels,The following statement contains a magic number: iline = 2;  
Magic Number,Aga.Controls,GifDecoder,C:\repos\prresearcher_pr-Researcher\process-Researcher\TreeViewAdv\GifDecoder.cs,SetPixels,The following statement contains a magic number: inc = 4;  
Magic Number,Aga.Controls,GifDecoder,C:\repos\prresearcher_pr-Researcher\process-Researcher\TreeViewAdv\GifDecoder.cs,SetPixels,The following statement contains a magic number: inc = 2;  
Magic Number,Aga.Controls,GifDecoder,C:\repos\prresearcher_pr-Researcher\process-Researcher\TreeViewAdv\GifDecoder.cs,DecodeImageData,The following statement contains a magic number: available = clear + 2;  
Magic Number,Aga.Controls,GifDecoder,C:\repos\prresearcher_pr-Researcher\process-Researcher\TreeViewAdv\GifDecoder.cs,DecodeImageData,The following statement contains a magic number: for (i = 0; i < npix;) {  	if (top == 0) {  		if (bits < code_size) {  			//  Load bytes until there are enough bits for a code.  			if (count == 0) {  				// Read a new data block.  				count = ReadBlock ();  				if (count <= 0)  					break;  				bi = 0;  			}  			datum += (((int)block [bi]) & 0xff) << bits;  			bits += 8;  			bi++;  			count--;  			continue;  		}  		//  Get the next code.  		code = datum & code_mask;  		datum >>= code_size;  		bits -= code_size;  		//  Interpret the code  		if ((code > available) || (code == end_of_information))  			break;  		if (code == clear) {  			//  Reset decoder.  			code_size = data_size + 1;  			code_mask = (1 << code_size) - 1;  			available = clear + 2;  			old_code = NullCode;  			continue;  		}  		if (old_code == NullCode) {  			pixelStack [top++] = suffix [code];  			old_code = code;  			first = code;  			continue;  		}  		in_code = code;  		if (code == available) {  			pixelStack [top++] = (byte)first;  			code = old_code;  		}  		while (code > clear) {  			pixelStack [top++] = suffix [code];  			code = prefix [code];  		}  		first = ((int)suffix [code]) & 0xff;  		//  Add a new string to the string table'  		if (available >= MaxStackSize)  			break;  		pixelStack [top++] = (byte)first;  		prefix [available] = (short)old_code;  		suffix [available] = (byte)first;  		available++;  		if (((available & code_mask) == 0) && (available < MaxStackSize)) {  			code_size++;  			code_mask += available;  		}  		old_code = in_code;  	}  	//  Pop a pixel off the pixel stack.  	top--;  	pixels [pi++] = pixelStack [top];  	i++;  }  
Magic Number,Aga.Controls,GifDecoder,C:\repos\prresearcher_pr-Researcher\process-Researcher\TreeViewAdv\GifDecoder.cs,DecodeImageData,The following statement contains a magic number: for (i = 0; i < npix;) {  	if (top == 0) {  		if (bits < code_size) {  			//  Load bytes until there are enough bits for a code.  			if (count == 0) {  				// Read a new data block.  				count = ReadBlock ();  				if (count <= 0)  					break;  				bi = 0;  			}  			datum += (((int)block [bi]) & 0xff) << bits;  			bits += 8;  			bi++;  			count--;  			continue;  		}  		//  Get the next code.  		code = datum & code_mask;  		datum >>= code_size;  		bits -= code_size;  		//  Interpret the code  		if ((code > available) || (code == end_of_information))  			break;  		if (code == clear) {  			//  Reset decoder.  			code_size = data_size + 1;  			code_mask = (1 << code_size) - 1;  			available = clear + 2;  			old_code = NullCode;  			continue;  		}  		if (old_code == NullCode) {  			pixelStack [top++] = suffix [code];  			old_code = code;  			first = code;  			continue;  		}  		in_code = code;  		if (code == available) {  			pixelStack [top++] = (byte)first;  			code = old_code;  		}  		while (code > clear) {  			pixelStack [top++] = suffix [code];  			code = prefix [code];  		}  		first = ((int)suffix [code]) & 0xff;  		//  Add a new string to the string table'  		if (available >= MaxStackSize)  			break;  		pixelStack [top++] = (byte)first;  		prefix [available] = (short)old_code;  		suffix [available] = (byte)first;  		available++;  		if (((available & code_mask) == 0) && (available < MaxStackSize)) {  			code_size++;  			code_mask += available;  		}  		old_code = in_code;  	}  	//  Pop a pixel off the pixel stack.  	top--;  	pixels [pi++] = pixelStack [top];  	i++;  }  
Magic Number,Aga.Controls,GifDecoder,C:\repos\prresearcher_pr-Researcher\process-Researcher\TreeViewAdv\GifDecoder.cs,DecodeImageData,The following statement contains a magic number: if (top == 0) {  	if (bits < code_size) {  		//  Load bytes until there are enough bits for a code.  		if (count == 0) {  			// Read a new data block.  			count = ReadBlock ();  			if (count <= 0)  				break;  			bi = 0;  		}  		datum += (((int)block [bi]) & 0xff) << bits;  		bits += 8;  		bi++;  		count--;  		continue;  	}  	//  Get the next code.  	code = datum & code_mask;  	datum >>= code_size;  	bits -= code_size;  	//  Interpret the code  	if ((code > available) || (code == end_of_information))  		break;  	if (code == clear) {  		//  Reset decoder.  		code_size = data_size + 1;  		code_mask = (1 << code_size) - 1;  		available = clear + 2;  		old_code = NullCode;  		continue;  	}  	if (old_code == NullCode) {  		pixelStack [top++] = suffix [code];  		old_code = code;  		first = code;  		continue;  	}  	in_code = code;  	if (code == available) {  		pixelStack [top++] = (byte)first;  		code = old_code;  	}  	while (code > clear) {  		pixelStack [top++] = suffix [code];  		code = prefix [code];  	}  	first = ((int)suffix [code]) & 0xff;  	//  Add a new string to the string table'  	if (available >= MaxStackSize)  		break;  	pixelStack [top++] = (byte)first;  	prefix [available] = (short)old_code;  	suffix [available] = (byte)first;  	available++;  	if (((available & code_mask) == 0) && (available < MaxStackSize)) {  		code_size++;  		code_mask += available;  	}  	old_code = in_code;  }  
Magic Number,Aga.Controls,GifDecoder,C:\repos\prresearcher_pr-Researcher\process-Researcher\TreeViewAdv\GifDecoder.cs,DecodeImageData,The following statement contains a magic number: if (top == 0) {  	if (bits < code_size) {  		//  Load bytes until there are enough bits for a code.  		if (count == 0) {  			// Read a new data block.  			count = ReadBlock ();  			if (count <= 0)  				break;  			bi = 0;  		}  		datum += (((int)block [bi]) & 0xff) << bits;  		bits += 8;  		bi++;  		count--;  		continue;  	}  	//  Get the next code.  	code = datum & code_mask;  	datum >>= code_size;  	bits -= code_size;  	//  Interpret the code  	if ((code > available) || (code == end_of_information))  		break;  	if (code == clear) {  		//  Reset decoder.  		code_size = data_size + 1;  		code_mask = (1 << code_size) - 1;  		available = clear + 2;  		old_code = NullCode;  		continue;  	}  	if (old_code == NullCode) {  		pixelStack [top++] = suffix [code];  		old_code = code;  		first = code;  		continue;  	}  	in_code = code;  	if (code == available) {  		pixelStack [top++] = (byte)first;  		code = old_code;  	}  	while (code > clear) {  		pixelStack [top++] = suffix [code];  		code = prefix [code];  	}  	first = ((int)suffix [code]) & 0xff;  	//  Add a new string to the string table'  	if (available >= MaxStackSize)  		break;  	pixelStack [top++] = (byte)first;  	prefix [available] = (short)old_code;  	suffix [available] = (byte)first;  	available++;  	if (((available & code_mask) == 0) && (available < MaxStackSize)) {  		code_size++;  		code_mask += available;  	}  	old_code = in_code;  }  
Magic Number,Aga.Controls,GifDecoder,C:\repos\prresearcher_pr-Researcher\process-Researcher\TreeViewAdv\GifDecoder.cs,DecodeImageData,The following statement contains a magic number: if (bits < code_size) {  	//  Load bytes until there are enough bits for a code.  	if (count == 0) {  		// Read a new data block.  		count = ReadBlock ();  		if (count <= 0)  			break;  		bi = 0;  	}  	datum += (((int)block [bi]) & 0xff) << bits;  	bits += 8;  	bi++;  	count--;  	continue;  }  
Magic Number,Aga.Controls,GifDecoder,C:\repos\prresearcher_pr-Researcher\process-Researcher\TreeViewAdv\GifDecoder.cs,DecodeImageData,The following statement contains a magic number: bits += 8;  
Magic Number,Aga.Controls,GifDecoder,C:\repos\prresearcher_pr-Researcher\process-Researcher\TreeViewAdv\GifDecoder.cs,DecodeImageData,The following statement contains a magic number: if (code == clear) {  	//  Reset decoder.  	code_size = data_size + 1;  	code_mask = (1 << code_size) - 1;  	available = clear + 2;  	old_code = NullCode;  	continue;  }  
Magic Number,Aga.Controls,GifDecoder,C:\repos\prresearcher_pr-Researcher\process-Researcher\TreeViewAdv\GifDecoder.cs,DecodeImageData,The following statement contains a magic number: available = clear + 2;  
Magic Number,Aga.Controls,GifDecoder,C:\repos\prresearcher_pr-Researcher\process-Researcher\TreeViewAdv\GifDecoder.cs,ReadColorTable,The following statement contains a magic number: if (n < nbytes) {  	status = StatusFormatError;  }  else {  	tab = new int[256];  	// max size to avoid bounds checks  	int i = 0;  	int j = 0;  	while (i < ncolors) {  		int r = ((int)c [j++]) & 0xff;  		int g = ((int)c [j++]) & 0xff;  		int b = ((int)c [j++]) & 0xff;  		tab [i++] = (int)(0xff000000 | (r << 16) | (g << 8) | b);  	}  }  
Magic Number,Aga.Controls,GifDecoder,C:\repos\prresearcher_pr-Researcher\process-Researcher\TreeViewAdv\GifDecoder.cs,ReadColorTable,The following statement contains a magic number: if (n < nbytes) {  	status = StatusFormatError;  }  else {  	tab = new int[256];  	// max size to avoid bounds checks  	int i = 0;  	int j = 0;  	while (i < ncolors) {  		int r = ((int)c [j++]) & 0xff;  		int g = ((int)c [j++]) & 0xff;  		int b = ((int)c [j++]) & 0xff;  		tab [i++] = (int)(0xff000000 | (r << 16) | (g << 8) | b);  	}  }  
Magic Number,Aga.Controls,GifDecoder,C:\repos\prresearcher_pr-Researcher\process-Researcher\TreeViewAdv\GifDecoder.cs,ReadColorTable,The following statement contains a magic number: if (n < nbytes) {  	status = StatusFormatError;  }  else {  	tab = new int[256];  	// max size to avoid bounds checks  	int i = 0;  	int j = 0;  	while (i < ncolors) {  		int r = ((int)c [j++]) & 0xff;  		int g = ((int)c [j++]) & 0xff;  		int b = ((int)c [j++]) & 0xff;  		tab [i++] = (int)(0xff000000 | (r << 16) | (g << 8) | b);  	}  }  
Magic Number,Aga.Controls,GifDecoder,C:\repos\prresearcher_pr-Researcher\process-Researcher\TreeViewAdv\GifDecoder.cs,ReadColorTable,The following statement contains a magic number: tab = new int[256];  
Magic Number,Aga.Controls,GifDecoder,C:\repos\prresearcher_pr-Researcher\process-Researcher\TreeViewAdv\GifDecoder.cs,ReadColorTable,The following statement contains a magic number: while (i < ncolors) {  	int r = ((int)c [j++]) & 0xff;  	int g = ((int)c [j++]) & 0xff;  	int b = ((int)c [j++]) & 0xff;  	tab [i++] = (int)(0xff000000 | (r << 16) | (g << 8) | b);  }  
Magic Number,Aga.Controls,GifDecoder,C:\repos\prresearcher_pr-Researcher\process-Researcher\TreeViewAdv\GifDecoder.cs,ReadColorTable,The following statement contains a magic number: while (i < ncolors) {  	int r = ((int)c [j++]) & 0xff;  	int g = ((int)c [j++]) & 0xff;  	int b = ((int)c [j++]) & 0xff;  	tab [i++] = (int)(0xff000000 | (r << 16) | (g << 8) | b);  }  
Magic Number,Aga.Controls,GifDecoder,C:\repos\prresearcher_pr-Researcher\process-Researcher\TreeViewAdv\GifDecoder.cs,ReadColorTable,The following statement contains a magic number: tab [i++] = (int)(0xff000000 | (r << 16) | (g << 8) | b);  
Magic Number,Aga.Controls,GifDecoder,C:\repos\prresearcher_pr-Researcher\process-Researcher\TreeViewAdv\GifDecoder.cs,ReadColorTable,The following statement contains a magic number: tab [i++] = (int)(0xff000000 | (r << 16) | (g << 8) | b);  
Magic Number,Aga.Controls,GifDecoder,C:\repos\prresearcher_pr-Researcher\process-Researcher\TreeViewAdv\GifDecoder.cs,ReadContents,The following statement contains a magic number: while (!(done || Error ())) {  	int code = Read ();  	switch (code) {  	case 0x2C:  		// image separator  		ReadImage ();  		break;  	case 0x21:  		// extension  		code = Read ();  		switch (code) {  		case 0xf9:  			// graphics control extension  			ReadGraphicControlExt ();  			break;  		case 0xff:  			// application extension  			ReadBlock ();  			String app = "";  			for (int i = 0; i < 11; i++) {  				app += (char)block [i];  			}  			if (app.Equals ("NETSCAPE2.0")) {  				ReadNetscapeExt ();  			}  			else  				Skip ();  			// don't care  			break;  		default:  			// uninteresting extension  			Skip ();  			break;  		}  		break;  	case 0x3b:  		// terminator  		done = true;  		break;  	case 0x00:  		// bad byte' but keep going and see what happens  		break;  	default:  		status = StatusFormatError;  		break;  	}  }  
Magic Number,Aga.Controls,GifDecoder,C:\repos\prresearcher_pr-Researcher\process-Researcher\TreeViewAdv\GifDecoder.cs,ReadContents,The following statement contains a magic number: switch (code) {  case 0x2C:  	// image separator  	ReadImage ();  	break;  case 0x21:  	// extension  	code = Read ();  	switch (code) {  	case 0xf9:  		// graphics control extension  		ReadGraphicControlExt ();  		break;  	case 0xff:  		// application extension  		ReadBlock ();  		String app = "";  		for (int i = 0; i < 11; i++) {  			app += (char)block [i];  		}  		if (app.Equals ("NETSCAPE2.0")) {  			ReadNetscapeExt ();  		}  		else  			Skip ();  		// don't care  		break;  	default:  		// uninteresting extension  		Skip ();  		break;  	}  	break;  case 0x3b:  	// terminator  	done = true;  	break;  case 0x00:  	// bad byte' but keep going and see what happens  	break;  default:  	status = StatusFormatError;  	break;  }  
Magic Number,Aga.Controls,GifDecoder,C:\repos\prresearcher_pr-Researcher\process-Researcher\TreeViewAdv\GifDecoder.cs,ReadContents,The following statement contains a magic number: switch (code) {  case 0xf9:  	// graphics control extension  	ReadGraphicControlExt ();  	break;  case 0xff:  	// application extension  	ReadBlock ();  	String app = "";  	for (int i = 0; i < 11; i++) {  		app += (char)block [i];  	}  	if (app.Equals ("NETSCAPE2.0")) {  		ReadNetscapeExt ();  	}  	else  		Skip ();  	// don't care  	break;  default:  	// uninteresting extension  	Skip ();  	break;  }  
Magic Number,Aga.Controls,GifDecoder,C:\repos\prresearcher_pr-Researcher\process-Researcher\TreeViewAdv\GifDecoder.cs,ReadContents,The following statement contains a magic number: for (int i = 0; i < 11; i++) {  	app += (char)block [i];  }  
Magic Number,Aga.Controls,GifDecoder,C:\repos\prresearcher_pr-Researcher\process-Researcher\TreeViewAdv\GifDecoder.cs,ReadGraphicControlExt,The following statement contains a magic number: dispose = (packed & 0x1c) >> 2;  
Magic Number,Aga.Controls,GifDecoder,C:\repos\prresearcher_pr-Researcher\process-Researcher\TreeViewAdv\GifDecoder.cs,ReadGraphicControlExt,The following statement contains a magic number: delay = ReadShort () * 10;  
Magic Number,Aga.Controls,GifDecoder,C:\repos\prresearcher_pr-Researcher\process-Researcher\TreeViewAdv\GifDecoder.cs,ReadHeader,The following statement contains a magic number: for (int i = 0; i < 6; i++) {  	id += (char)Read ();  }  
Magic Number,Aga.Controls,GifDecoder,C:\repos\prresearcher_pr-Researcher\process-Researcher\TreeViewAdv\GifDecoder.cs,ReadImage,The following statement contains a magic number: lctSize = 2 << (packed & 7);  
Magic Number,Aga.Controls,GifDecoder,C:\repos\prresearcher_pr-Researcher\process-Researcher\TreeViewAdv\GifDecoder.cs,ReadImage,The following statement contains a magic number: lctSize = 2 << (packed & 7);  
Magic Number,Aga.Controls,GifDecoder,C:\repos\prresearcher_pr-Researcher\process-Researcher\TreeViewAdv\GifDecoder.cs,ReadLSD,The following statement contains a magic number: gctSize = 2 << (packed & 7);  
Magic Number,Aga.Controls,GifDecoder,C:\repos\prresearcher_pr-Researcher\process-Researcher\TreeViewAdv\GifDecoder.cs,ReadLSD,The following statement contains a magic number: gctSize = 2 << (packed & 7);  
Magic Number,Aga.Controls,GifDecoder,C:\repos\prresearcher_pr-Researcher\process-Researcher\TreeViewAdv\GifDecoder.cs,ReadNetscapeExt,The following statement contains a magic number: do {  	ReadBlock ();  	if (block [0] == 1) {  		// loop count sub-block  		int b1 = ((int)block [1]) & 0xff;  		int b2 = ((int)block [2]) & 0xff;  		loopCount = (b2 << 8) | b1;  	}  }  while ((blockSize > 0) && !Error ());  
Magic Number,Aga.Controls,GifDecoder,C:\repos\prresearcher_pr-Researcher\process-Researcher\TreeViewAdv\GifDecoder.cs,ReadNetscapeExt,The following statement contains a magic number: do {  	ReadBlock ();  	if (block [0] == 1) {  		// loop count sub-block  		int b1 = ((int)block [1]) & 0xff;  		int b2 = ((int)block [2]) & 0xff;  		loopCount = (b2 << 8) | b1;  	}  }  while ((blockSize > 0) && !Error ());  
Magic Number,Aga.Controls,GifDecoder,C:\repos\prresearcher_pr-Researcher\process-Researcher\TreeViewAdv\GifDecoder.cs,ReadNetscapeExt,The following statement contains a magic number: if (block [0] == 1) {  	// loop count sub-block  	int b1 = ((int)block [1]) & 0xff;  	int b2 = ((int)block [2]) & 0xff;  	loopCount = (b2 << 8) | b1;  }  
Magic Number,Aga.Controls,GifDecoder,C:\repos\prresearcher_pr-Researcher\process-Researcher\TreeViewAdv\GifDecoder.cs,ReadNetscapeExt,The following statement contains a magic number: if (block [0] == 1) {  	// loop count sub-block  	int b1 = ((int)block [1]) & 0xff;  	int b2 = ((int)block [2]) & 0xff;  	loopCount = (b2 << 8) | b1;  }  
Magic Number,Aga.Controls,GifDecoder,C:\repos\prresearcher_pr-Researcher\process-Researcher\TreeViewAdv\GifDecoder.cs,ReadNetscapeExt,The following statement contains a magic number: loopCount = (b2 << 8) | b1;  
Magic Number,Aga.Controls,GifDecoder,C:\repos\prresearcher_pr-Researcher\process-Researcher\TreeViewAdv\GifDecoder.cs,ReadShort,The following statement contains a magic number: return Read () | (Read () << 8);  
Magic Number,Aga.Controls,BitmapHelper,C:\repos\prresearcher_pr-Researcher\process-Researcher\TreeViewAdv\BitmapHelper.cs,SetAlphaChanelValue,The following statement contains a magic number: unsafe {  	PixelData* pPixel = (PixelData*)bitmapData.Scan0;  	for (int i = 0; i < bitmapData.Height; i++) {  		for (int j = 0; j < bitmapData.Width; j++) {  			pPixel->A = value;  			pPixel++;  		}  		pPixel += bitmapData.Stride - (bitmapData.Width * 4);  	}  }  
Magic Number,Aga.Controls,BitmapHelper,C:\repos\prresearcher_pr-Researcher\process-Researcher\TreeViewAdv\BitmapHelper.cs,SetAlphaChanelValue,The following statement contains a magic number: for (int i = 0; i < bitmapData.Height; i++) {  	for (int j = 0; j < bitmapData.Width; j++) {  		pPixel->A = value;  		pPixel++;  	}  	pPixel += bitmapData.Stride - (bitmapData.Width * 4);  }  
Magic Number,Aga.Controls,BitmapHelper,C:\repos\prresearcher_pr-Researcher\process-Researcher\TreeViewAdv\BitmapHelper.cs,SetAlphaChanelValue,The following statement contains a magic number: pPixel += bitmapData.Stride - (bitmapData.Width * 4);  
Magic Number,Aga.Controls.Tree,ReorderColumnState,C:\repos\prresearcher_pr-Researcher\process-Researcher\TreeViewAdv\Tree\Input\ReorderColumnState.cs,MouseMove,The following statement contains a magic number: foreach (TreeColumn c in Tree.Columns) {  	if (c.IsVisible) {  		if (_location.X < x + c.Width / 2) {  			_dropColumn = c;  			break;  		}  		x += c.Width;  	}  }  
Magic Number,Aga.Controls.Tree,ReorderColumnState,C:\repos\prresearcher_pr-Researcher\process-Researcher\TreeViewAdv\Tree\Input\ReorderColumnState.cs,MouseMove,The following statement contains a magic number: if (c.IsVisible) {  	if (_location.X < x + c.Width / 2) {  		_dropColumn = c;  		break;  	}  	x += c.Width;  }  
Magic Number,Aga.Controls.Tree,ReorderColumnState,C:\repos\prresearcher_pr-Researcher\process-Researcher\TreeViewAdv\Tree\Input\ReorderColumnState.cs,MouseMove,The following statement contains a magic number: if (_location.X < x + c.Width / 2) {  	_dropColumn = c;  	break;  }  
Magic Number,Aga.Controls.Tree,TreeViewAdv,C:\repos\prresearcher_pr-Researcher\process-Researcher\TreeViewAdv\Tree\TreeViewAdv.Draw.cs,DrawColumnHeaders,The following statement contains a magic number: TreeColumn.DrawBackground (gr' new Rectangle (0' 0' ClientRectangle.Width + 2' ColumnHeaderHeight - 1)' false' false);  
Magic Number,Aga.Controls.Tree,TreeViewAdv,C:\repos\prresearcher_pr-Researcher\process-Researcher\TreeViewAdv\Tree\TreeViewAdv.Draw.cs,DrawLines,The following statement contains a magic number: while (curNode != _root && curNode != null) {  	int level = curNode.Level;  	int x = (level - 1) * _indent + NodePlusMinus.ImageSize / 2 + LeftMargin;  	int width = NodePlusMinus.Width - NodePlusMinus.ImageSize / 2;  	int y = rowRect.Y;  	int y2 = y + rowRect.Height;  	if (curNode == node) {  		int midy = y + rowRect.Height / 2;  		gr.DrawLine (_linePen' x' midy' x + width' midy);  		if (curNode.NextNode == null)  			y2 = y + rowRect.Height / 2;  	}  	if (node.Row == 0)  		y = rowRect.Height / 2;  	if (curNode.NextNode != null || curNode == node)  		gr.DrawLine (_linePen' x' y' x' y2);  	curNode = curNode.Parent;  }  
Magic Number,Aga.Controls.Tree,TreeViewAdv,C:\repos\prresearcher_pr-Researcher\process-Researcher\TreeViewAdv\Tree\TreeViewAdv.Draw.cs,DrawLines,The following statement contains a magic number: while (curNode != _root && curNode != null) {  	int level = curNode.Level;  	int x = (level - 1) * _indent + NodePlusMinus.ImageSize / 2 + LeftMargin;  	int width = NodePlusMinus.Width - NodePlusMinus.ImageSize / 2;  	int y = rowRect.Y;  	int y2 = y + rowRect.Height;  	if (curNode == node) {  		int midy = y + rowRect.Height / 2;  		gr.DrawLine (_linePen' x' midy' x + width' midy);  		if (curNode.NextNode == null)  			y2 = y + rowRect.Height / 2;  	}  	if (node.Row == 0)  		y = rowRect.Height / 2;  	if (curNode.NextNode != null || curNode == node)  		gr.DrawLine (_linePen' x' y' x' y2);  	curNode = curNode.Parent;  }  
Magic Number,Aga.Controls.Tree,TreeViewAdv,C:\repos\prresearcher_pr-Researcher\process-Researcher\TreeViewAdv\Tree\TreeViewAdv.Draw.cs,DrawLines,The following statement contains a magic number: while (curNode != _root && curNode != null) {  	int level = curNode.Level;  	int x = (level - 1) * _indent + NodePlusMinus.ImageSize / 2 + LeftMargin;  	int width = NodePlusMinus.Width - NodePlusMinus.ImageSize / 2;  	int y = rowRect.Y;  	int y2 = y + rowRect.Height;  	if (curNode == node) {  		int midy = y + rowRect.Height / 2;  		gr.DrawLine (_linePen' x' midy' x + width' midy);  		if (curNode.NextNode == null)  			y2 = y + rowRect.Height / 2;  	}  	if (node.Row == 0)  		y = rowRect.Height / 2;  	if (curNode.NextNode != null || curNode == node)  		gr.DrawLine (_linePen' x' y' x' y2);  	curNode = curNode.Parent;  }  
Magic Number,Aga.Controls.Tree,TreeViewAdv,C:\repos\prresearcher_pr-Researcher\process-Researcher\TreeViewAdv\Tree\TreeViewAdv.Draw.cs,DrawLines,The following statement contains a magic number: while (curNode != _root && curNode != null) {  	int level = curNode.Level;  	int x = (level - 1) * _indent + NodePlusMinus.ImageSize / 2 + LeftMargin;  	int width = NodePlusMinus.Width - NodePlusMinus.ImageSize / 2;  	int y = rowRect.Y;  	int y2 = y + rowRect.Height;  	if (curNode == node) {  		int midy = y + rowRect.Height / 2;  		gr.DrawLine (_linePen' x' midy' x + width' midy);  		if (curNode.NextNode == null)  			y2 = y + rowRect.Height / 2;  	}  	if (node.Row == 0)  		y = rowRect.Height / 2;  	if (curNode.NextNode != null || curNode == node)  		gr.DrawLine (_linePen' x' y' x' y2);  	curNode = curNode.Parent;  }  
Magic Number,Aga.Controls.Tree,TreeViewAdv,C:\repos\prresearcher_pr-Researcher\process-Researcher\TreeViewAdv\Tree\TreeViewAdv.Draw.cs,DrawLines,The following statement contains a magic number: while (curNode != _root && curNode != null) {  	int level = curNode.Level;  	int x = (level - 1) * _indent + NodePlusMinus.ImageSize / 2 + LeftMargin;  	int width = NodePlusMinus.Width - NodePlusMinus.ImageSize / 2;  	int y = rowRect.Y;  	int y2 = y + rowRect.Height;  	if (curNode == node) {  		int midy = y + rowRect.Height / 2;  		gr.DrawLine (_linePen' x' midy' x + width' midy);  		if (curNode.NextNode == null)  			y2 = y + rowRect.Height / 2;  	}  	if (node.Row == 0)  		y = rowRect.Height / 2;  	if (curNode.NextNode != null || curNode == node)  		gr.DrawLine (_linePen' x' y' x' y2);  	curNode = curNode.Parent;  }  
Magic Number,Aga.Controls.Tree,TreeViewAdv,C:\repos\prresearcher_pr-Researcher\process-Researcher\TreeViewAdv\Tree\TreeViewAdv.Draw.cs,DrawLines,The following statement contains a magic number: if (curNode == node) {  	int midy = y + rowRect.Height / 2;  	gr.DrawLine (_linePen' x' midy' x + width' midy);  	if (curNode.NextNode == null)  		y2 = y + rowRect.Height / 2;  }  
Magic Number,Aga.Controls.Tree,TreeViewAdv,C:\repos\prresearcher_pr-Researcher\process-Researcher\TreeViewAdv\Tree\TreeViewAdv.Draw.cs,DrawLines,The following statement contains a magic number: if (curNode == node) {  	int midy = y + rowRect.Height / 2;  	gr.DrawLine (_linePen' x' midy' x + width' midy);  	if (curNode.NextNode == null)  		y2 = y + rowRect.Height / 2;  }  
Magic Number,Aga.Controls.Tree,TreeViewAdv,C:\repos\prresearcher_pr-Researcher\process-Researcher\TreeViewAdv\Tree\TreeViewAdv.Draw.cs,DrawLines,The following statement contains a magic number: if (curNode.NextNode == null)  	y2 = y + rowRect.Height / 2;  
Magic Number,Aga.Controls.Tree,TreeViewAdv,C:\repos\prresearcher_pr-Researcher\process-Researcher\TreeViewAdv\Tree\TreeViewAdv.Draw.cs,DrawLines,The following statement contains a magic number: y2 = y + rowRect.Height / 2;  
Magic Number,Aga.Controls.Tree,TreeViewAdv,C:\repos\prresearcher_pr-Researcher\process-Researcher\TreeViewAdv\Tree\TreeViewAdv.Draw.cs,DrawLines,The following statement contains a magic number: if (node.Row == 0)  	y = rowRect.Height / 2;  
Magic Number,Aga.Controls.Tree,TreeViewAdv,C:\repos\prresearcher_pr-Researcher\process-Researcher\TreeViewAdv\Tree\TreeViewAdv.Draw.cs,DrawLines,The following statement contains a magic number: y = rowRect.Height / 2;  
Magic Number,Aga.Controls.Tree,TreeColumn,C:\repos\prresearcher_pr-Researcher\process-Researcher\TreeViewAdv\Tree\TreeColumn.cs,CreateGhostImage,The following statement contains a magic number: BitmapHelper.SetAlphaChanelValue (b' 150);  
Magic Number,Aga.Controls.Tree,TreeColumn,C:\repos\prresearcher_pr-Researcher\process-Researcher\TreeViewAdv\Tree\TreeColumn.cs,DrawContent,The following statement contains a magic number: if (SortOrder != SortOrder.None) {  	int tw = Math.Min (textSize.Width' innerBounds.Size.Width);  	int x = 0;  	if (TextAlign == HorizontalAlignment.Left)  		x = innerBounds.X + tw + SortOrderMarkMargin;  	else if (TextAlign == HorizontalAlignment.Right)  		x = innerBounds.Right + SortOrderMarkMargin;  	else  		x = innerBounds.X + tw + (innerBounds.Width - tw) / 2 + SortOrderMarkMargin;  	DrawSortMark (gr' bounds' x);  }  
Magic Number,Aga.Controls.Tree,TreeColumn,C:\repos\prresearcher_pr-Researcher\process-Researcher\TreeViewAdv\Tree\TreeColumn.cs,DrawContent,The following statement contains a magic number: if (TextAlign == HorizontalAlignment.Left)  	x = innerBounds.X + tw + SortOrderMarkMargin;  else if (TextAlign == HorizontalAlignment.Right)  	x = innerBounds.Right + SortOrderMarkMargin;  else  	x = innerBounds.X + tw + (innerBounds.Width - tw) / 2 + SortOrderMarkMargin;  
Magic Number,Aga.Controls.Tree,TreeColumn,C:\repos\prresearcher_pr-Researcher\process-Researcher\TreeViewAdv\Tree\TreeColumn.cs,DrawContent,The following statement contains a magic number: if (TextAlign == HorizontalAlignment.Right)  	x = innerBounds.Right + SortOrderMarkMargin;  else  	x = innerBounds.X + tw + (innerBounds.Width - tw) / 2 + SortOrderMarkMargin;  
Magic Number,Aga.Controls.Tree,TreeColumn,C:\repos\prresearcher_pr-Researcher\process-Researcher\TreeViewAdv\Tree\TreeColumn.cs,DrawContent,The following statement contains a magic number: x = innerBounds.X + tw + (innerBounds.Width - tw) / 2 + SortOrderMarkMargin;  
Magic Number,Aga.Controls.Tree,TreeColumn,C:\repos\prresearcher_pr-Researcher\process-Researcher\TreeViewAdv\Tree\TreeColumn.cs,DrawDropMark,The following statement contains a magic number: gr.FillRectangle (SystemBrushes.HotTrack' rect.X - 1' rect.Y' 2' rect.Height);  
Magic Number,Aga.Controls.Tree,TreeColumn,C:\repos\prresearcher_pr-Researcher\process-Researcher\TreeViewAdv\Tree\TreeColumn.cs,DrawBackground,The following statement contains a magic number: if (Application.RenderWithVisualStyles) {  	if (_normalRenderer == null)  		_normalRenderer = new VisualStyleRenderer (VisualStyleElement.Header.Item.Normal);  	if (_hotRenderer == null)  		_hotRenderer = new VisualStyleRenderer (VisualStyleElement.Header.Item.Hot);  	if (_pressedRenderer == null)  		_pressedRenderer = new VisualStyleRenderer (VisualStyleElement.Header.Item.Pressed);  	if (pressed)  		_pressedRenderer.DrawBackground (gr' bounds);  	else if (hot)  		_hotRenderer.DrawBackground (gr' bounds);  	else  		_normalRenderer.DrawBackground (gr' bounds);  }  else {  	gr.FillRectangle (SystemBrushes.Control' bounds);  	Pen p1 = SystemPens.ControlLightLight;  	Pen p2 = SystemPens.ControlDark;  	Pen p3 = SystemPens.ControlDarkDark;  	if (pressed)  		gr.DrawRectangle (p2' bounds.X' bounds.Y' bounds.Width' bounds.Height);  	else {  		gr.DrawLine (p1' bounds.X' bounds.Y' bounds.Right' bounds.Y);  		gr.DrawLine (p3' bounds.X' bounds.Bottom' bounds.Right' bounds.Bottom);  		gr.DrawLine (p3' bounds.Right - 1' bounds.Y' bounds.Right - 1' bounds.Bottom - 1);  		gr.DrawLine (p1' bounds.Left' bounds.Y + 1' bounds.Left' bounds.Bottom - 2);  		gr.DrawLine (p2' bounds.Right - 2' bounds.Y + 1' bounds.Right - 2' bounds.Bottom - 2);  		gr.DrawLine (p2' bounds.X' bounds.Bottom - 1' bounds.Right - 2' bounds.Bottom - 1);  	}  }  
Magic Number,Aga.Controls.Tree,TreeColumn,C:\repos\prresearcher_pr-Researcher\process-Researcher\TreeViewAdv\Tree\TreeColumn.cs,DrawBackground,The following statement contains a magic number: if (Application.RenderWithVisualStyles) {  	if (_normalRenderer == null)  		_normalRenderer = new VisualStyleRenderer (VisualStyleElement.Header.Item.Normal);  	if (_hotRenderer == null)  		_hotRenderer = new VisualStyleRenderer (VisualStyleElement.Header.Item.Hot);  	if (_pressedRenderer == null)  		_pressedRenderer = new VisualStyleRenderer (VisualStyleElement.Header.Item.Pressed);  	if (pressed)  		_pressedRenderer.DrawBackground (gr' bounds);  	else if (hot)  		_hotRenderer.DrawBackground (gr' bounds);  	else  		_normalRenderer.DrawBackground (gr' bounds);  }  else {  	gr.FillRectangle (SystemBrushes.Control' bounds);  	Pen p1 = SystemPens.ControlLightLight;  	Pen p2 = SystemPens.ControlDark;  	Pen p3 = SystemPens.ControlDarkDark;  	if (pressed)  		gr.DrawRectangle (p2' bounds.X' bounds.Y' bounds.Width' bounds.Height);  	else {  		gr.DrawLine (p1' bounds.X' bounds.Y' bounds.Right' bounds.Y);  		gr.DrawLine (p3' bounds.X' bounds.Bottom' bounds.Right' bounds.Bottom);  		gr.DrawLine (p3' bounds.Right - 1' bounds.Y' bounds.Right - 1' bounds.Bottom - 1);  		gr.DrawLine (p1' bounds.Left' bounds.Y + 1' bounds.Left' bounds.Bottom - 2);  		gr.DrawLine (p2' bounds.Right - 2' bounds.Y + 1' bounds.Right - 2' bounds.Bottom - 2);  		gr.DrawLine (p2' bounds.X' bounds.Bottom - 1' bounds.Right - 2' bounds.Bottom - 1);  	}  }  
Magic Number,Aga.Controls.Tree,TreeColumn,C:\repos\prresearcher_pr-Researcher\process-Researcher\TreeViewAdv\Tree\TreeColumn.cs,DrawBackground,The following statement contains a magic number: if (Application.RenderWithVisualStyles) {  	if (_normalRenderer == null)  		_normalRenderer = new VisualStyleRenderer (VisualStyleElement.Header.Item.Normal);  	if (_hotRenderer == null)  		_hotRenderer = new VisualStyleRenderer (VisualStyleElement.Header.Item.Hot);  	if (_pressedRenderer == null)  		_pressedRenderer = new VisualStyleRenderer (VisualStyleElement.Header.Item.Pressed);  	if (pressed)  		_pressedRenderer.DrawBackground (gr' bounds);  	else if (hot)  		_hotRenderer.DrawBackground (gr' bounds);  	else  		_normalRenderer.DrawBackground (gr' bounds);  }  else {  	gr.FillRectangle (SystemBrushes.Control' bounds);  	Pen p1 = SystemPens.ControlLightLight;  	Pen p2 = SystemPens.ControlDark;  	Pen p3 = SystemPens.ControlDarkDark;  	if (pressed)  		gr.DrawRectangle (p2' bounds.X' bounds.Y' bounds.Width' bounds.Height);  	else {  		gr.DrawLine (p1' bounds.X' bounds.Y' bounds.Right' bounds.Y);  		gr.DrawLine (p3' bounds.X' bounds.Bottom' bounds.Right' bounds.Bottom);  		gr.DrawLine (p3' bounds.Right - 1' bounds.Y' bounds.Right - 1' bounds.Bottom - 1);  		gr.DrawLine (p1' bounds.Left' bounds.Y + 1' bounds.Left' bounds.Bottom - 2);  		gr.DrawLine (p2' bounds.Right - 2' bounds.Y + 1' bounds.Right - 2' bounds.Bottom - 2);  		gr.DrawLine (p2' bounds.X' bounds.Bottom - 1' bounds.Right - 2' bounds.Bottom - 1);  	}  }  
Magic Number,Aga.Controls.Tree,TreeColumn,C:\repos\prresearcher_pr-Researcher\process-Researcher\TreeViewAdv\Tree\TreeColumn.cs,DrawBackground,The following statement contains a magic number: if (Application.RenderWithVisualStyles) {  	if (_normalRenderer == null)  		_normalRenderer = new VisualStyleRenderer (VisualStyleElement.Header.Item.Normal);  	if (_hotRenderer == null)  		_hotRenderer = new VisualStyleRenderer (VisualStyleElement.Header.Item.Hot);  	if (_pressedRenderer == null)  		_pressedRenderer = new VisualStyleRenderer (VisualStyleElement.Header.Item.Pressed);  	if (pressed)  		_pressedRenderer.DrawBackground (gr' bounds);  	else if (hot)  		_hotRenderer.DrawBackground (gr' bounds);  	else  		_normalRenderer.DrawBackground (gr' bounds);  }  else {  	gr.FillRectangle (SystemBrushes.Control' bounds);  	Pen p1 = SystemPens.ControlLightLight;  	Pen p2 = SystemPens.ControlDark;  	Pen p3 = SystemPens.ControlDarkDark;  	if (pressed)  		gr.DrawRectangle (p2' bounds.X' bounds.Y' bounds.Width' bounds.Height);  	else {  		gr.DrawLine (p1' bounds.X' bounds.Y' bounds.Right' bounds.Y);  		gr.DrawLine (p3' bounds.X' bounds.Bottom' bounds.Right' bounds.Bottom);  		gr.DrawLine (p3' bounds.Right - 1' bounds.Y' bounds.Right - 1' bounds.Bottom - 1);  		gr.DrawLine (p1' bounds.Left' bounds.Y + 1' bounds.Left' bounds.Bottom - 2);  		gr.DrawLine (p2' bounds.Right - 2' bounds.Y + 1' bounds.Right - 2' bounds.Bottom - 2);  		gr.DrawLine (p2' bounds.X' bounds.Bottom - 1' bounds.Right - 2' bounds.Bottom - 1);  	}  }  
Magic Number,Aga.Controls.Tree,TreeColumn,C:\repos\prresearcher_pr-Researcher\process-Researcher\TreeViewAdv\Tree\TreeColumn.cs,DrawBackground,The following statement contains a magic number: if (Application.RenderWithVisualStyles) {  	if (_normalRenderer == null)  		_normalRenderer = new VisualStyleRenderer (VisualStyleElement.Header.Item.Normal);  	if (_hotRenderer == null)  		_hotRenderer = new VisualStyleRenderer (VisualStyleElement.Header.Item.Hot);  	if (_pressedRenderer == null)  		_pressedRenderer = new VisualStyleRenderer (VisualStyleElement.Header.Item.Pressed);  	if (pressed)  		_pressedRenderer.DrawBackground (gr' bounds);  	else if (hot)  		_hotRenderer.DrawBackground (gr' bounds);  	else  		_normalRenderer.DrawBackground (gr' bounds);  }  else {  	gr.FillRectangle (SystemBrushes.Control' bounds);  	Pen p1 = SystemPens.ControlLightLight;  	Pen p2 = SystemPens.ControlDark;  	Pen p3 = SystemPens.ControlDarkDark;  	if (pressed)  		gr.DrawRectangle (p2' bounds.X' bounds.Y' bounds.Width' bounds.Height);  	else {  		gr.DrawLine (p1' bounds.X' bounds.Y' bounds.Right' bounds.Y);  		gr.DrawLine (p3' bounds.X' bounds.Bottom' bounds.Right' bounds.Bottom);  		gr.DrawLine (p3' bounds.Right - 1' bounds.Y' bounds.Right - 1' bounds.Bottom - 1);  		gr.DrawLine (p1' bounds.Left' bounds.Y + 1' bounds.Left' bounds.Bottom - 2);  		gr.DrawLine (p2' bounds.Right - 2' bounds.Y + 1' bounds.Right - 2' bounds.Bottom - 2);  		gr.DrawLine (p2' bounds.X' bounds.Bottom - 1' bounds.Right - 2' bounds.Bottom - 1);  	}  }  
Magic Number,Aga.Controls.Tree,TreeColumn,C:\repos\prresearcher_pr-Researcher\process-Researcher\TreeViewAdv\Tree\TreeColumn.cs,DrawBackground,The following statement contains a magic number: if (pressed)  	gr.DrawRectangle (p2' bounds.X' bounds.Y' bounds.Width' bounds.Height);  else {  	gr.DrawLine (p1' bounds.X' bounds.Y' bounds.Right' bounds.Y);  	gr.DrawLine (p3' bounds.X' bounds.Bottom' bounds.Right' bounds.Bottom);  	gr.DrawLine (p3' bounds.Right - 1' bounds.Y' bounds.Right - 1' bounds.Bottom - 1);  	gr.DrawLine (p1' bounds.Left' bounds.Y + 1' bounds.Left' bounds.Bottom - 2);  	gr.DrawLine (p2' bounds.Right - 2' bounds.Y + 1' bounds.Right - 2' bounds.Bottom - 2);  	gr.DrawLine (p2' bounds.X' bounds.Bottom - 1' bounds.Right - 2' bounds.Bottom - 1);  }  
Magic Number,Aga.Controls.Tree,TreeColumn,C:\repos\prresearcher_pr-Researcher\process-Researcher\TreeViewAdv\Tree\TreeColumn.cs,DrawBackground,The following statement contains a magic number: if (pressed)  	gr.DrawRectangle (p2' bounds.X' bounds.Y' bounds.Width' bounds.Height);  else {  	gr.DrawLine (p1' bounds.X' bounds.Y' bounds.Right' bounds.Y);  	gr.DrawLine (p3' bounds.X' bounds.Bottom' bounds.Right' bounds.Bottom);  	gr.DrawLine (p3' bounds.Right - 1' bounds.Y' bounds.Right - 1' bounds.Bottom - 1);  	gr.DrawLine (p1' bounds.Left' bounds.Y + 1' bounds.Left' bounds.Bottom - 2);  	gr.DrawLine (p2' bounds.Right - 2' bounds.Y + 1' bounds.Right - 2' bounds.Bottom - 2);  	gr.DrawLine (p2' bounds.X' bounds.Bottom - 1' bounds.Right - 2' bounds.Bottom - 1);  }  
Magic Number,Aga.Controls.Tree,TreeColumn,C:\repos\prresearcher_pr-Researcher\process-Researcher\TreeViewAdv\Tree\TreeColumn.cs,DrawBackground,The following statement contains a magic number: if (pressed)  	gr.DrawRectangle (p2' bounds.X' bounds.Y' bounds.Width' bounds.Height);  else {  	gr.DrawLine (p1' bounds.X' bounds.Y' bounds.Right' bounds.Y);  	gr.DrawLine (p3' bounds.X' bounds.Bottom' bounds.Right' bounds.Bottom);  	gr.DrawLine (p3' bounds.Right - 1' bounds.Y' bounds.Right - 1' bounds.Bottom - 1);  	gr.DrawLine (p1' bounds.Left' bounds.Y + 1' bounds.Left' bounds.Bottom - 2);  	gr.DrawLine (p2' bounds.Right - 2' bounds.Y + 1' bounds.Right - 2' bounds.Bottom - 2);  	gr.DrawLine (p2' bounds.X' bounds.Bottom - 1' bounds.Right - 2' bounds.Bottom - 1);  }  
Magic Number,Aga.Controls.Tree,TreeColumn,C:\repos\prresearcher_pr-Researcher\process-Researcher\TreeViewAdv\Tree\TreeColumn.cs,DrawBackground,The following statement contains a magic number: if (pressed)  	gr.DrawRectangle (p2' bounds.X' bounds.Y' bounds.Width' bounds.Height);  else {  	gr.DrawLine (p1' bounds.X' bounds.Y' bounds.Right' bounds.Y);  	gr.DrawLine (p3' bounds.X' bounds.Bottom' bounds.Right' bounds.Bottom);  	gr.DrawLine (p3' bounds.Right - 1' bounds.Y' bounds.Right - 1' bounds.Bottom - 1);  	gr.DrawLine (p1' bounds.Left' bounds.Y + 1' bounds.Left' bounds.Bottom - 2);  	gr.DrawLine (p2' bounds.Right - 2' bounds.Y + 1' bounds.Right - 2' bounds.Bottom - 2);  	gr.DrawLine (p2' bounds.X' bounds.Bottom - 1' bounds.Right - 2' bounds.Bottom - 1);  }  
Magic Number,Aga.Controls.Tree,TreeColumn,C:\repos\prresearcher_pr-Researcher\process-Researcher\TreeViewAdv\Tree\TreeColumn.cs,DrawBackground,The following statement contains a magic number: if (pressed)  	gr.DrawRectangle (p2' bounds.X' bounds.Y' bounds.Width' bounds.Height);  else {  	gr.DrawLine (p1' bounds.X' bounds.Y' bounds.Right' bounds.Y);  	gr.DrawLine (p3' bounds.X' bounds.Bottom' bounds.Right' bounds.Bottom);  	gr.DrawLine (p3' bounds.Right - 1' bounds.Y' bounds.Right - 1' bounds.Bottom - 1);  	gr.DrawLine (p1' bounds.Left' bounds.Y + 1' bounds.Left' bounds.Bottom - 2);  	gr.DrawLine (p2' bounds.Right - 2' bounds.Y + 1' bounds.Right - 2' bounds.Bottom - 2);  	gr.DrawLine (p2' bounds.X' bounds.Bottom - 1' bounds.Right - 2' bounds.Bottom - 1);  }  
Magic Number,Aga.Controls.Tree,TreeColumn,C:\repos\prresearcher_pr-Researcher\process-Researcher\TreeViewAdv\Tree\TreeColumn.cs,DrawBackground,The following statement contains a magic number: gr.DrawLine (p1' bounds.Left' bounds.Y + 1' bounds.Left' bounds.Bottom - 2);  
Magic Number,Aga.Controls.Tree,TreeColumn,C:\repos\prresearcher_pr-Researcher\process-Researcher\TreeViewAdv\Tree\TreeColumn.cs,DrawBackground,The following statement contains a magic number: gr.DrawLine (p2' bounds.Right - 2' bounds.Y + 1' bounds.Right - 2' bounds.Bottom - 2);  
Magic Number,Aga.Controls.Tree,TreeColumn,C:\repos\prresearcher_pr-Researcher\process-Researcher\TreeViewAdv\Tree\TreeColumn.cs,DrawBackground,The following statement contains a magic number: gr.DrawLine (p2' bounds.Right - 2' bounds.Y + 1' bounds.Right - 2' bounds.Bottom - 2);  
Magic Number,Aga.Controls.Tree,TreeColumn,C:\repos\prresearcher_pr-Researcher\process-Researcher\TreeViewAdv\Tree\TreeColumn.cs,DrawBackground,The following statement contains a magic number: gr.DrawLine (p2' bounds.Right - 2' bounds.Y + 1' bounds.Right - 2' bounds.Bottom - 2);  
Magic Number,Aga.Controls.Tree,TreeColumn,C:\repos\prresearcher_pr-Researcher\process-Researcher\TreeViewAdv\Tree\TreeColumn.cs,DrawBackground,The following statement contains a magic number: gr.DrawLine (p2' bounds.X' bounds.Bottom - 1' bounds.Right - 2' bounds.Bottom - 1);  
Magic Number,Aga.Controls.Tree,TreeNodeAdv,C:\repos\prresearcher_pr-Researcher\process-Researcher\TreeViewAdv\Tree\TreeNodeAdv.cs,GetForeColor,The following statement contains a magic number: if (color.GetBrightness () > 0.4)  	return Color.Black;  else  	return Color.White;  
Magic Number,Aga.Controls.Tree.NodeControls,BaseTextControl,C:\repos\prresearcher_pr-Researcher\process-Researcher\TreeViewAdv\Tree\NodeControls\BaseTextControl.cs,BaseTextControl,The following statement contains a magic number: LeftMargin = 3;  
Magic Number,Aga.Controls.Tree.NodeControls,BaseTextControl,C:\repos\prresearcher_pr-Researcher\process-Researcher\TreeViewAdv\Tree\NodeControls\BaseTextControl.cs,GetLabelSize,The following statement contains a magic number: if (!s.IsEmpty)  	return s;  else  	return new Size (10' Font.Height);  
Magic Number,Aga.Controls.Tree.NodeControls,BaseTextControl,C:\repos\prresearcher_pr-Researcher\process-Researcher\TreeViewAdv\Tree\NodeControls\BaseTextControl.cs,GetLabelSize,The following statement contains a magic number: return new Size (10' Font.Height);  
Magic Number,Aga.Controls.Tree.NodeControls,EditableControl,C:\repos\prresearcher_pr-Researcher\process-Researcher\TreeViewAdv\Tree\NodeControls\EditableControl.cs,EditableControl,The following statement contains a magic number: _timer.Interval = 1000;  
Magic Number,Aga.Controls.Tree.NodeControls,NodeControl,C:\repos\prresearcher_pr-Researcher\process-Researcher\TreeViewAdv\Tree\NodeControls\NodeControl.cs,GetBounds,The following statement contains a magic number: switch (VerticalAlign) {  case VerticalAlignment.Top:  	return new Rectangle (new Point (r.X + LeftMargin' r.Y)' bs);  case VerticalAlignment.Bottom:  	return new Rectangle (new Point (r.X + LeftMargin' r.Bottom - s.Height)' bs);  default:  	return new Rectangle (new Point (r.X + LeftMargin' r.Y + (r.Height - s.Height) / 2)' bs);  }  
Magic Number,Aga.Controls.Tree.NodeControls,NodeControl,C:\repos\prresearcher_pr-Researcher\process-Researcher\TreeViewAdv\Tree\NodeControls\NodeControl.cs,GetBounds,The following statement contains a magic number: return new Rectangle (new Point (r.X + LeftMargin' r.Y + (r.Height - s.Height) / 2)' bs);  
Magic Number,Aga.Controls.Tree.NodeControls,NodePlusMinus,C:\repos\prresearcher_pr-Researcher\process-Researcher\TreeViewAdv\Tree\NodeControls\NodePlusMinus.cs,Draw,The following statement contains a magic number: if (node.CanExpand) {  	Rectangle r = context.Bounds;  	int dy = (int)Math.Round ((float)(r.Height - ImageSize) / 2);  	if (_useVisualStyles) {  		VisualStyleRenderer renderer;  		if (node.IsExpanded)  			renderer = _openedRenderer;  		else  			renderer = _closedRenderer;  		try {  			renderer.DrawBackground (context.Graphics' new Rectangle (r.X' r.Y + dy' ImageSize' ImageSize));  		}  		catch (InvalidOperationException) {  			// Fucking retarded VisualStyleRenderer throws exceptions.  			_useVisualStyles = false;  		}  	}  	if (!_useVisualStyles) {  		Image img;  		if (node.IsExpanded)  			img = this.Minus;  		else  			img = this.Plus;  		context.Graphics.DrawImageUnscaled (img' new Point (r.X' r.Y + dy));  	}  }  
Missing Default,Aga.Controls,GifDecoder,C:\repos\prresearcher_pr-Researcher\process-Researcher\TreeViewAdv\GifDecoder.cs,SetPixels,The following switch statement is missing a default case: switch (pass) {  case 2:  	iline = 4;  	break;  case 3:  	iline = 2;  	inc = 4;  	break;  case 4:  	iline = 1;  	inc = 2;  	break;  }  
Missing Default,Aga.Controls,NumericTextBox,C:\repos\prresearcher_pr-Researcher\process-Researcher\TreeViewAdv\NumericTextBox.cs,WndProc,The following switch statement is missing a default case: switch (m.Msg) {  case WM_PASTE: {  	// Get clipboard object to paste  	IDataObject clipboardData = Clipboard.GetDataObject ();  	// Get text from clipboard data  	string pasteText = (string)clipboardData.GetData (DataFormats.UnicodeText);  	// Get the number of characters to replace  	int selectionLength = SelectionLength;  	// If no replacement or insertion' we are done  	if (pasteText.Length == 0) {  		break;  	}  	else if (selectionLength != 0) {  		base.Text = base.Text.Remove (SelectionStart' selectionLength);  	}  	bool containsInvalidChars = false;  	foreach (char c in pasteText) {  		if (containsInvalidChars) {  			break;  		}  		else if (invalidNumeric (c)) {  			containsInvalidChars = true;  		}  	}  	if (!containsInvalidChars) {  		base.Text = base.Text.Insert (SelectionStart' pasteText);  	}  	return;  }  }  
Missing Default,Aga.Controls.Tree,NormalInputState,C:\repos\prresearcher_pr-Researcher\process-Researcher\TreeViewAdv\Tree\Input\NormalInputState.cs,KeyDown,The following switch statement is missing a default case: switch (args.KeyCode) {  case Keys.Right:  	if (!Tree.CurrentNode.IsExpanded) {  		Tree.CurrentNode.IsExpanded = true;  		// by fliser  		Tree.FullUpdate ();  	}  	else if (Tree.CurrentNode.Nodes.Count > 0)  		Tree.SelectedNode = Tree.CurrentNode.Nodes [0];  	args.Handled = true;  	break;  case Keys.Left:  	if (Tree.CurrentNode.IsExpanded) {  		Tree.CurrentNode.IsExpanded = false;  		// by fliser  		Tree.FullUpdate ();  	}  	else if (Tree.CurrentNode.Parent != Tree.Root)  		Tree.SelectedNode = Tree.CurrentNode.Parent;  	args.Handled = true;  	break;  case Keys.Down:  	NavigateForward (1);  	args.Handled = true;  	break;  case Keys.Up:  	NavigateBackward (1);  	args.Handled = true;  	break;  case Keys.PageDown:  	NavigateForward (Math.Max (1' Tree.CurrentPageSize - 1));  	args.Handled = true;  	break;  case Keys.PageUp:  	NavigateBackward (Math.Max (1' Tree.CurrentPageSize - 1));  	args.Handled = true;  	break;  case Keys.Home:  	if (Tree.RowMap.Count > 0)  		FocusRow (Tree.RowMap [0]);  	args.Handled = true;  	break;  case Keys.End:  	if (Tree.RowMap.Count > 0)  		FocusRow (Tree.RowMap [Tree.RowMap.Count - 1]);  	args.Handled = true;  	break;  case Keys.Subtract:  	Tree.CurrentNode.Collapse ();  	// by fliser  	Tree.FullUpdate ();  	args.Handled = true;  	args.SuppressKeyPress = true;  	break;  case Keys.Add:  	Tree.CurrentNode.Expand ();  	// by fliser  	Tree.FullUpdate ();  	args.Handled = true;  	args.SuppressKeyPress = true;  	break;  case Keys.Multiply:  	Tree.CurrentNode.ExpandAll ();  	// by fliser  	Tree.FullUpdate ();  	args.Handled = true;  	args.SuppressKeyPress = true;  	break;  }  
