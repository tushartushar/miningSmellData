Implementation smell,Namespace,Class,File,Method,Description
Complex Method,ProcessHacker.Common,BaseConverter,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\BaseConverter.cs,ToNumberParse,Cyclomatic complexity of the method is 9
Complex Method,ProcessHacker.Common,ByteStreamReader,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\ByteStreamReader.cs,Seek,Cyclomatic complexity of the method is 11
Complex Method,ProcessHacker.Common,Tokenizer,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Tokenizer.cs,EatQuotedString,Cyclomatic complexity of the method is 11
Complex Method,ProcessHacker.Common,Tokenizer,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Tokenizer.cs,EatWhitespace,Cyclomatic complexity of the method is 8
Complex Method,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,FormatRelativeDateTime,Cyclomatic complexity of the method is 16
Complex Method,ProcessHacker.Common.Threading,FairResourceLock,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Threading\FairResourceLock.cs,AcquireShared,Cyclomatic complexity of the method is 9
Complex Method,ProcessHacker.Common.Threading,FairResourceLock,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Threading\FairResourceLock.cs,Block,Cyclomatic complexity of the method is 8
Complex Method,ProcessHacker.Common.Threading,FairResourceLock,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Threading\FairResourceLock.cs,InsertWaitBlock,Cyclomatic complexity of the method is 9
Complex Method,ProcessHacker.Common.Threading,FairResourceLock,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Threading\FairResourceLock.cs,Wake,Cyclomatic complexity of the method is 8
Complex Method,ProcessHacker.Common.Threading,FastLock,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Threading\FastLock.cs,Acquire,Cyclomatic complexity of the method is 8
Complex Method,ProcessHacker.Common.Threading,FastResourceLock,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Threading\FastResourceLock.cs,AcquireExclusive,Cyclomatic complexity of the method is 8
Complex Method,ProcessHacker.Common.Threading,FastResourceLock,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Threading\FastResourceLock.cs,AcquireShared,Cyclomatic complexity of the method is 9
Complex Method,ProcessHacker.Common.Threading,FastResourceLock,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Threading\FastResourceLock.cs,SpinAcquireShared,Cyclomatic complexity of the method is 8
Complex Method,ProcessHacker.Common.Ui,ColumnHeaderExtensions,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Ui\ColumnHeaderExtensions.cs,SetSortIcon,Cyclomatic complexity of the method is 10
Long Statement,ProcessHacker.Common,Logging,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Logging.cs,Log,The length of the statement  "		string debugMessage = DateTime.Now.ToString ("hh:mm:ss:fff:") + " ProcessHacker (T" + System.Threading.Thread.CurrentThread.ManagedThreadId + "): (" + importance.ToString () + ") " + message + "\r\n\r\n" + Environment.StackTrace; " is 229.
Long Statement,ProcessHacker.Common,Tokenizer,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Tokenizer.cs,EatNumber,The length of the statement  "			if (!(char.IsDigit (_text [_i]) || char.ToLower (_text [_i]) == 'a' || char.ToLower (_text [_i]) == 'b' || char.ToLower (_text [_i]) == 'c' || char.ToLower (_text [_i]) == 'd' || char.ToLower (_text [_i]) == 'e' || char.ToLower (_text [_i]) == 'f')) " is 249.
Long Statement,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,FormatLongTimeSpan,The length of the statement  "	return String.Format ("{0}{1:d2}:{2:d2}:{3:d2}"' time.Days != 0 ? (time.Days.ToString () + ".") : ""' time.Hours' time.Minutes' time.Seconds); " is 142.
Long Statement,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,SetDoubleBuffered,The length of the statement  "		_doubleBufferedProperty = doubleBufferedProperty = t.GetProperty ("DoubleBuffered"' BindingFlags.NonPublic | BindingFlags.Instance); " is 132.
Long Statement,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,ToInt64,The length of the statement  "		return (data [0]) | (data [1] << 8) | (data [2] << 16) | (data [3] << 24) | (data [4] << 32) | (data [5] << 40) | (data [6] << 48) | (data [7] << 56); " is 150.
Long Statement,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,ToInt64,The length of the statement  "		return (data [0] << 56) | (data [1] << 48) | (data [2] << 40) | (data [3] << 32) | (data [4] << 24) | (data [5] << 16) | (data [6] << 8) | (data [7]); " is 150.
Long Statement,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,ToUInt32,The length of the statement  "		return (uint)(data [offset]) | (uint)(data [offset + 1] << 8) | (uint)(data [offset + 2] << 16) | (uint)(data [offset + 3] << 24); " is 130.
Long Statement,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,ToUInt32,The length of the statement  "		return (uint)(data [offset] << 24) | (uint)(data [offset + 1] << 16) | (uint)(data [offset + 2] << 8) | (uint)(data [offset + 3]); " is 130.
Long Statement,ProcessHacker.Common.Objects,DelayedReleasePool,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Objects\DelayedReleasePool.cs,PopPool,The length of the statement  "		throw new OutOfOrderException ("Attempted to pop a pool when it wasn't on top of the stack. " + "This usually indicates that a pool was popped out-of-order."); " is 159.
Long Statement,ProcessHacker.Common.Threading,FairResourceLock,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Threading\FairResourceLock.cs,AcquireShared,The length of the statement  "		if ((value & LockOwned) == 0 || ((value & LockWaiters) == 0 && ((value >> LockSharedOwnersShift) & LockSharedOwnersMask) != 0)) { " is 129.
Long Statement,ProcessHacker.Common.Threading,FairResourceLock,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Threading\FairResourceLock.cs,TryAcquireShared,The length of the statement  "	if ((value & LockOwned) == 0 || ((value & LockWaiters) == 0 && ((value >> LockSharedOwnersShift) & LockSharedOwnersMask) != 0)) { " is 129.
Long Statement,ProcessHacker.Common.Threading,FastResourceLock,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Threading\FastResourceLock.cs,AcquireShared,The length of the statement  "		else if ((value & LockOwned) != 0 && ((value >> LockSharedOwnersShift) & LockSharedOwnersMask) != 0 && (value & ExclusiveMask) == 0) { " is 134.
Long Statement,ProcessHacker.Common.Threading,FastResourceLock,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Threading\FastResourceLock.cs,ConvertExclusiveToShared,The length of the statement  "		if (Interlocked.CompareExchange (ref _value' (value + LockSharedOwnersIncrement) & ~(LockSharedWaitersMask << LockSharedWaitersShift)' value) == value) { " is 153.
Long Statement,ProcessHacker.Common.Threading,FastResourceLock,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Threading\FastResourceLock.cs,ReleaseExclusive,The length of the statement  "			if (Interlocked.CompareExchange (ref _value' value - LockOwned + LockExclusiveWaking - LockExclusiveWaitersIncrement' value) == value) { " is 136.
Long Statement,ProcessHacker.Common.Threading,FastResourceLock,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Threading\FastResourceLock.cs,ReleaseExclusive,The length of the statement  "			if (Interlocked.CompareExchange (ref _value' value & ~(LockOwned | (LockSharedWaitersMask << LockSharedWaitersShift))' value) == value) { " is 137.
Long Statement,ProcessHacker.Common.Threading,FastResourceLock,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Threading\FastResourceLock.cs,ReleaseShared,The length of the statement  "			if (Interlocked.CompareExchange (ref _value' value - LockOwned + LockExclusiveWaking - LockSharedOwnersIncrement - LockExclusiveWaitersIncrement' value) == value) { " is 164.
Complex Conditional,ProcessHacker.Common,Tokenizer,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Tokenizer.cs,EatNumber,The conditional expression  "!(char.IsDigit (_text [_i]) || char.ToLower (_text [_i]) == 'a' || char.ToLower (_text [_i]) == 'b' || char.ToLower (_text [_i]) == 'c' || char.ToLower (_text [_i]) == 'd' || char.ToLower (_text [_i]) == 'e' || char.ToLower (_text [_i]) == 'f')"  is complex.
Complex Conditional,ProcessHacker.Common,Tokenizer,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Tokenizer.cs,EatWhitespace,The conditional expression  "!(_text [_i] == '\r' || _text [_i] == '\n' || _text [_i] == ' ' || _text [_i] == '\t') && !inComment"  is complex.
Magic Number,ProcessHacker.Common,BaseConverter,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\BaseConverter.cs,ToNumber,The following statement contains a magic number: if (b > 70)  	return 0;  
Magic Number,ProcessHacker.Common,BaseConverter,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\BaseConverter.cs,ToNumberParse,The following statement contains a magic number: if (number.Length > 2 && (number.Substring (0' 2) == "0x"))// hexadecimal   {  	result = ToNumber (number.Substring (2)' 16);  }  else if (number.Length > 1) {  	if (number [0] == '0')// octal  	 {  		result = ToNumber (number.Substring (1)' 8);  	}  	else if (number [0] == 'b' && allowNonStandardExts)// binary  	 {  		result = ToNumber (number.Substring (1)' 2);  	}  	else if (number [0] == 't' && allowNonStandardExts)// ternary  	 {  		result = ToNumber (number.Substring (1)' 3);  	}  	else if (number [0] == 'q' && allowNonStandardExts)// quaternary  	 {  		result = ToNumber (number.Substring (1)' 4);  	}  	else if (number [0] == 'w' && allowNonStandardExts)// base 12  	 {  		result = ToNumber (number.Substring (1)' 12);  	}  	else if (number [0] == 'r' && allowNonStandardExts)// base 32  	 {  		result = ToNumber (number.Substring (1)' 32);  	}  	else// base 10  	 {  		result = ToNumber (number' 10);  	}  }  else// base 10   {  	result = ToNumber (number' 10);  }  
Magic Number,ProcessHacker.Common,BaseConverter,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\BaseConverter.cs,ToNumberParse,The following statement contains a magic number: if (number.Length > 2 && (number.Substring (0' 2) == "0x"))// hexadecimal   {  	result = ToNumber (number.Substring (2)' 16);  }  else if (number.Length > 1) {  	if (number [0] == '0')// octal  	 {  		result = ToNumber (number.Substring (1)' 8);  	}  	else if (number [0] == 'b' && allowNonStandardExts)// binary  	 {  		result = ToNumber (number.Substring (1)' 2);  	}  	else if (number [0] == 't' && allowNonStandardExts)// ternary  	 {  		result = ToNumber (number.Substring (1)' 3);  	}  	else if (number [0] == 'q' && allowNonStandardExts)// quaternary  	 {  		result = ToNumber (number.Substring (1)' 4);  	}  	else if (number [0] == 'w' && allowNonStandardExts)// base 12  	 {  		result = ToNumber (number.Substring (1)' 12);  	}  	else if (number [0] == 'r' && allowNonStandardExts)// base 32  	 {  		result = ToNumber (number.Substring (1)' 32);  	}  	else// base 10  	 {  		result = ToNumber (number' 10);  	}  }  else// base 10   {  	result = ToNumber (number' 10);  }  
Magic Number,ProcessHacker.Common,BaseConverter,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\BaseConverter.cs,ToNumberParse,The following statement contains a magic number: if (number.Length > 2 && (number.Substring (0' 2) == "0x"))// hexadecimal   {  	result = ToNumber (number.Substring (2)' 16);  }  else if (number.Length > 1) {  	if (number [0] == '0')// octal  	 {  		result = ToNumber (number.Substring (1)' 8);  	}  	else if (number [0] == 'b' && allowNonStandardExts)// binary  	 {  		result = ToNumber (number.Substring (1)' 2);  	}  	else if (number [0] == 't' && allowNonStandardExts)// ternary  	 {  		result = ToNumber (number.Substring (1)' 3);  	}  	else if (number [0] == 'q' && allowNonStandardExts)// quaternary  	 {  		result = ToNumber (number.Substring (1)' 4);  	}  	else if (number [0] == 'w' && allowNonStandardExts)// base 12  	 {  		result = ToNumber (number.Substring (1)' 12);  	}  	else if (number [0] == 'r' && allowNonStandardExts)// base 32  	 {  		result = ToNumber (number.Substring (1)' 32);  	}  	else// base 10  	 {  		result = ToNumber (number' 10);  	}  }  else// base 10   {  	result = ToNumber (number' 10);  }  
Magic Number,ProcessHacker.Common,BaseConverter,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\BaseConverter.cs,ToNumberParse,The following statement contains a magic number: if (number.Length > 2 && (number.Substring (0' 2) == "0x"))// hexadecimal   {  	result = ToNumber (number.Substring (2)' 16);  }  else if (number.Length > 1) {  	if (number [0] == '0')// octal  	 {  		result = ToNumber (number.Substring (1)' 8);  	}  	else if (number [0] == 'b' && allowNonStandardExts)// binary  	 {  		result = ToNumber (number.Substring (1)' 2);  	}  	else if (number [0] == 't' && allowNonStandardExts)// ternary  	 {  		result = ToNumber (number.Substring (1)' 3);  	}  	else if (number [0] == 'q' && allowNonStandardExts)// quaternary  	 {  		result = ToNumber (number.Substring (1)' 4);  	}  	else if (number [0] == 'w' && allowNonStandardExts)// base 12  	 {  		result = ToNumber (number.Substring (1)' 12);  	}  	else if (number [0] == 'r' && allowNonStandardExts)// base 32  	 {  		result = ToNumber (number.Substring (1)' 32);  	}  	else// base 10  	 {  		result = ToNumber (number' 10);  	}  }  else// base 10   {  	result = ToNumber (number' 10);  }  
Magic Number,ProcessHacker.Common,BaseConverter,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\BaseConverter.cs,ToNumberParse,The following statement contains a magic number: if (number.Length > 2 && (number.Substring (0' 2) == "0x"))// hexadecimal   {  	result = ToNumber (number.Substring (2)' 16);  }  else if (number.Length > 1) {  	if (number [0] == '0')// octal  	 {  		result = ToNumber (number.Substring (1)' 8);  	}  	else if (number [0] == 'b' && allowNonStandardExts)// binary  	 {  		result = ToNumber (number.Substring (1)' 2);  	}  	else if (number [0] == 't' && allowNonStandardExts)// ternary  	 {  		result = ToNumber (number.Substring (1)' 3);  	}  	else if (number [0] == 'q' && allowNonStandardExts)// quaternary  	 {  		result = ToNumber (number.Substring (1)' 4);  	}  	else if (number [0] == 'w' && allowNonStandardExts)// base 12  	 {  		result = ToNumber (number.Substring (1)' 12);  	}  	else if (number [0] == 'r' && allowNonStandardExts)// base 32  	 {  		result = ToNumber (number.Substring (1)' 32);  	}  	else// base 10  	 {  		result = ToNumber (number' 10);  	}  }  else// base 10   {  	result = ToNumber (number' 10);  }  
Magic Number,ProcessHacker.Common,BaseConverter,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\BaseConverter.cs,ToNumberParse,The following statement contains a magic number: if (number.Length > 2 && (number.Substring (0' 2) == "0x"))// hexadecimal   {  	result = ToNumber (number.Substring (2)' 16);  }  else if (number.Length > 1) {  	if (number [0] == '0')// octal  	 {  		result = ToNumber (number.Substring (1)' 8);  	}  	else if (number [0] == 'b' && allowNonStandardExts)// binary  	 {  		result = ToNumber (number.Substring (1)' 2);  	}  	else if (number [0] == 't' && allowNonStandardExts)// ternary  	 {  		result = ToNumber (number.Substring (1)' 3);  	}  	else if (number [0] == 'q' && allowNonStandardExts)// quaternary  	 {  		result = ToNumber (number.Substring (1)' 4);  	}  	else if (number [0] == 'w' && allowNonStandardExts)// base 12  	 {  		result = ToNumber (number.Substring (1)' 12);  	}  	else if (number [0] == 'r' && allowNonStandardExts)// base 32  	 {  		result = ToNumber (number.Substring (1)' 32);  	}  	else// base 10  	 {  		result = ToNumber (number' 10);  	}  }  else// base 10   {  	result = ToNumber (number' 10);  }  
Magic Number,ProcessHacker.Common,BaseConverter,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\BaseConverter.cs,ToNumberParse,The following statement contains a magic number: if (number.Length > 2 && (number.Substring (0' 2) == "0x"))// hexadecimal   {  	result = ToNumber (number.Substring (2)' 16);  }  else if (number.Length > 1) {  	if (number [0] == '0')// octal  	 {  		result = ToNumber (number.Substring (1)' 8);  	}  	else if (number [0] == 'b' && allowNonStandardExts)// binary  	 {  		result = ToNumber (number.Substring (1)' 2);  	}  	else if (number [0] == 't' && allowNonStandardExts)// ternary  	 {  		result = ToNumber (number.Substring (1)' 3);  	}  	else if (number [0] == 'q' && allowNonStandardExts)// quaternary  	 {  		result = ToNumber (number.Substring (1)' 4);  	}  	else if (number [0] == 'w' && allowNonStandardExts)// base 12  	 {  		result = ToNumber (number.Substring (1)' 12);  	}  	else if (number [0] == 'r' && allowNonStandardExts)// base 32  	 {  		result = ToNumber (number.Substring (1)' 32);  	}  	else// base 10  	 {  		result = ToNumber (number' 10);  	}  }  else// base 10   {  	result = ToNumber (number' 10);  }  
Magic Number,ProcessHacker.Common,BaseConverter,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\BaseConverter.cs,ToNumberParse,The following statement contains a magic number: if (number.Length > 2 && (number.Substring (0' 2) == "0x"))// hexadecimal   {  	result = ToNumber (number.Substring (2)' 16);  }  else if (number.Length > 1) {  	if (number [0] == '0')// octal  	 {  		result = ToNumber (number.Substring (1)' 8);  	}  	else if (number [0] == 'b' && allowNonStandardExts)// binary  	 {  		result = ToNumber (number.Substring (1)' 2);  	}  	else if (number [0] == 't' && allowNonStandardExts)// ternary  	 {  		result = ToNumber (number.Substring (1)' 3);  	}  	else if (number [0] == 'q' && allowNonStandardExts)// quaternary  	 {  		result = ToNumber (number.Substring (1)' 4);  	}  	else if (number [0] == 'w' && allowNonStandardExts)// base 12  	 {  		result = ToNumber (number.Substring (1)' 12);  	}  	else if (number [0] == 'r' && allowNonStandardExts)// base 32  	 {  		result = ToNumber (number.Substring (1)' 32);  	}  	else// base 10  	 {  		result = ToNumber (number' 10);  	}  }  else// base 10   {  	result = ToNumber (number' 10);  }  
Magic Number,ProcessHacker.Common,BaseConverter,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\BaseConverter.cs,ToNumberParse,The following statement contains a magic number: if (number.Length > 2 && (number.Substring (0' 2) == "0x"))// hexadecimal   {  	result = ToNumber (number.Substring (2)' 16);  }  else if (number.Length > 1) {  	if (number [0] == '0')// octal  	 {  		result = ToNumber (number.Substring (1)' 8);  	}  	else if (number [0] == 'b' && allowNonStandardExts)// binary  	 {  		result = ToNumber (number.Substring (1)' 2);  	}  	else if (number [0] == 't' && allowNonStandardExts)// ternary  	 {  		result = ToNumber (number.Substring (1)' 3);  	}  	else if (number [0] == 'q' && allowNonStandardExts)// quaternary  	 {  		result = ToNumber (number.Substring (1)' 4);  	}  	else if (number [0] == 'w' && allowNonStandardExts)// base 12  	 {  		result = ToNumber (number.Substring (1)' 12);  	}  	else if (number [0] == 'r' && allowNonStandardExts)// base 32  	 {  		result = ToNumber (number.Substring (1)' 32);  	}  	else// base 10  	 {  		result = ToNumber (number' 10);  	}  }  else// base 10   {  	result = ToNumber (number' 10);  }  
Magic Number,ProcessHacker.Common,BaseConverter,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\BaseConverter.cs,ToNumberParse,The following statement contains a magic number: if (number.Length > 2 && (number.Substring (0' 2) == "0x"))// hexadecimal   {  	result = ToNumber (number.Substring (2)' 16);  }  else if (number.Length > 1) {  	if (number [0] == '0')// octal  	 {  		result = ToNumber (number.Substring (1)' 8);  	}  	else if (number [0] == 'b' && allowNonStandardExts)// binary  	 {  		result = ToNumber (number.Substring (1)' 2);  	}  	else if (number [0] == 't' && allowNonStandardExts)// ternary  	 {  		result = ToNumber (number.Substring (1)' 3);  	}  	else if (number [0] == 'q' && allowNonStandardExts)// quaternary  	 {  		result = ToNumber (number.Substring (1)' 4);  	}  	else if (number [0] == 'w' && allowNonStandardExts)// base 12  	 {  		result = ToNumber (number.Substring (1)' 12);  	}  	else if (number [0] == 'r' && allowNonStandardExts)// base 32  	 {  		result = ToNumber (number.Substring (1)' 32);  	}  	else// base 10  	 {  		result = ToNumber (number' 10);  	}  }  else// base 10   {  	result = ToNumber (number' 10);  }  
Magic Number,ProcessHacker.Common,BaseConverter,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\BaseConverter.cs,ToNumberParse,The following statement contains a magic number: if (number.Length > 2 && (number.Substring (0' 2) == "0x"))// hexadecimal   {  	result = ToNumber (number.Substring (2)' 16);  }  else if (number.Length > 1) {  	if (number [0] == '0')// octal  	 {  		result = ToNumber (number.Substring (1)' 8);  	}  	else if (number [0] == 'b' && allowNonStandardExts)// binary  	 {  		result = ToNumber (number.Substring (1)' 2);  	}  	else if (number [0] == 't' && allowNonStandardExts)// ternary  	 {  		result = ToNumber (number.Substring (1)' 3);  	}  	else if (number [0] == 'q' && allowNonStandardExts)// quaternary  	 {  		result = ToNumber (number.Substring (1)' 4);  	}  	else if (number [0] == 'w' && allowNonStandardExts)// base 12  	 {  		result = ToNumber (number.Substring (1)' 12);  	}  	else if (number [0] == 'r' && allowNonStandardExts)// base 32  	 {  		result = ToNumber (number.Substring (1)' 32);  	}  	else// base 10  	 {  		result = ToNumber (number' 10);  	}  }  else// base 10   {  	result = ToNumber (number' 10);  }  
Magic Number,ProcessHacker.Common,BaseConverter,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\BaseConverter.cs,ToNumberParse,The following statement contains a magic number: if (number.Length > 2 && (number.Substring (0' 2) == "0x"))// hexadecimal   {  	result = ToNumber (number.Substring (2)' 16);  }  else if (number.Length > 1) {  	if (number [0] == '0')// octal  	 {  		result = ToNumber (number.Substring (1)' 8);  	}  	else if (number [0] == 'b' && allowNonStandardExts)// binary  	 {  		result = ToNumber (number.Substring (1)' 2);  	}  	else if (number [0] == 't' && allowNonStandardExts)// ternary  	 {  		result = ToNumber (number.Substring (1)' 3);  	}  	else if (number [0] == 'q' && allowNonStandardExts)// quaternary  	 {  		result = ToNumber (number.Substring (1)' 4);  	}  	else if (number [0] == 'w' && allowNonStandardExts)// base 12  	 {  		result = ToNumber (number.Substring (1)' 12);  	}  	else if (number [0] == 'r' && allowNonStandardExts)// base 32  	 {  		result = ToNumber (number.Substring (1)' 32);  	}  	else// base 10  	 {  		result = ToNumber (number' 10);  	}  }  else// base 10   {  	result = ToNumber (number' 10);  }  
Magic Number,ProcessHacker.Common,BaseConverter,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\BaseConverter.cs,ToNumberParse,The following statement contains a magic number: result = ToNumber (number.Substring (2)' 16);  
Magic Number,ProcessHacker.Common,BaseConverter,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\BaseConverter.cs,ToNumberParse,The following statement contains a magic number: result = ToNumber (number.Substring (2)' 16);  
Magic Number,ProcessHacker.Common,BaseConverter,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\BaseConverter.cs,ToNumberParse,The following statement contains a magic number: if (number.Length > 1) {  	if (number [0] == '0')// octal  	 {  		result = ToNumber (number.Substring (1)' 8);  	}  	else if (number [0] == 'b' && allowNonStandardExts)// binary  	 {  		result = ToNumber (number.Substring (1)' 2);  	}  	else if (number [0] == 't' && allowNonStandardExts)// ternary  	 {  		result = ToNumber (number.Substring (1)' 3);  	}  	else if (number [0] == 'q' && allowNonStandardExts)// quaternary  	 {  		result = ToNumber (number.Substring (1)' 4);  	}  	else if (number [0] == 'w' && allowNonStandardExts)// base 12  	 {  		result = ToNumber (number.Substring (1)' 12);  	}  	else if (number [0] == 'r' && allowNonStandardExts)// base 32  	 {  		result = ToNumber (number.Substring (1)' 32);  	}  	else// base 10  	 {  		result = ToNumber (number' 10);  	}  }  else// base 10   {  	result = ToNumber (number' 10);  }  
Magic Number,ProcessHacker.Common,BaseConverter,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\BaseConverter.cs,ToNumberParse,The following statement contains a magic number: if (number.Length > 1) {  	if (number [0] == '0')// octal  	 {  		result = ToNumber (number.Substring (1)' 8);  	}  	else if (number [0] == 'b' && allowNonStandardExts)// binary  	 {  		result = ToNumber (number.Substring (1)' 2);  	}  	else if (number [0] == 't' && allowNonStandardExts)// ternary  	 {  		result = ToNumber (number.Substring (1)' 3);  	}  	else if (number [0] == 'q' && allowNonStandardExts)// quaternary  	 {  		result = ToNumber (number.Substring (1)' 4);  	}  	else if (number [0] == 'w' && allowNonStandardExts)// base 12  	 {  		result = ToNumber (number.Substring (1)' 12);  	}  	else if (number [0] == 'r' && allowNonStandardExts)// base 32  	 {  		result = ToNumber (number.Substring (1)' 32);  	}  	else// base 10  	 {  		result = ToNumber (number' 10);  	}  }  else// base 10   {  	result = ToNumber (number' 10);  }  
Magic Number,ProcessHacker.Common,BaseConverter,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\BaseConverter.cs,ToNumberParse,The following statement contains a magic number: if (number.Length > 1) {  	if (number [0] == '0')// octal  	 {  		result = ToNumber (number.Substring (1)' 8);  	}  	else if (number [0] == 'b' && allowNonStandardExts)// binary  	 {  		result = ToNumber (number.Substring (1)' 2);  	}  	else if (number [0] == 't' && allowNonStandardExts)// ternary  	 {  		result = ToNumber (number.Substring (1)' 3);  	}  	else if (number [0] == 'q' && allowNonStandardExts)// quaternary  	 {  		result = ToNumber (number.Substring (1)' 4);  	}  	else if (number [0] == 'w' && allowNonStandardExts)// base 12  	 {  		result = ToNumber (number.Substring (1)' 12);  	}  	else if (number [0] == 'r' && allowNonStandardExts)// base 32  	 {  		result = ToNumber (number.Substring (1)' 32);  	}  	else// base 10  	 {  		result = ToNumber (number' 10);  	}  }  else// base 10   {  	result = ToNumber (number' 10);  }  
Magic Number,ProcessHacker.Common,BaseConverter,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\BaseConverter.cs,ToNumberParse,The following statement contains a magic number: if (number.Length > 1) {  	if (number [0] == '0')// octal  	 {  		result = ToNumber (number.Substring (1)' 8);  	}  	else if (number [0] == 'b' && allowNonStandardExts)// binary  	 {  		result = ToNumber (number.Substring (1)' 2);  	}  	else if (number [0] == 't' && allowNonStandardExts)// ternary  	 {  		result = ToNumber (number.Substring (1)' 3);  	}  	else if (number [0] == 'q' && allowNonStandardExts)// quaternary  	 {  		result = ToNumber (number.Substring (1)' 4);  	}  	else if (number [0] == 'w' && allowNonStandardExts)// base 12  	 {  		result = ToNumber (number.Substring (1)' 12);  	}  	else if (number [0] == 'r' && allowNonStandardExts)// base 32  	 {  		result = ToNumber (number.Substring (1)' 32);  	}  	else// base 10  	 {  		result = ToNumber (number' 10);  	}  }  else// base 10   {  	result = ToNumber (number' 10);  }  
Magic Number,ProcessHacker.Common,BaseConverter,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\BaseConverter.cs,ToNumberParse,The following statement contains a magic number: if (number.Length > 1) {  	if (number [0] == '0')// octal  	 {  		result = ToNumber (number.Substring (1)' 8);  	}  	else if (number [0] == 'b' && allowNonStandardExts)// binary  	 {  		result = ToNumber (number.Substring (1)' 2);  	}  	else if (number [0] == 't' && allowNonStandardExts)// ternary  	 {  		result = ToNumber (number.Substring (1)' 3);  	}  	else if (number [0] == 'q' && allowNonStandardExts)// quaternary  	 {  		result = ToNumber (number.Substring (1)' 4);  	}  	else if (number [0] == 'w' && allowNonStandardExts)// base 12  	 {  		result = ToNumber (number.Substring (1)' 12);  	}  	else if (number [0] == 'r' && allowNonStandardExts)// base 32  	 {  		result = ToNumber (number.Substring (1)' 32);  	}  	else// base 10  	 {  		result = ToNumber (number' 10);  	}  }  else// base 10   {  	result = ToNumber (number' 10);  }  
Magic Number,ProcessHacker.Common,BaseConverter,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\BaseConverter.cs,ToNumberParse,The following statement contains a magic number: if (number.Length > 1) {  	if (number [0] == '0')// octal  	 {  		result = ToNumber (number.Substring (1)' 8);  	}  	else if (number [0] == 'b' && allowNonStandardExts)// binary  	 {  		result = ToNumber (number.Substring (1)' 2);  	}  	else if (number [0] == 't' && allowNonStandardExts)// ternary  	 {  		result = ToNumber (number.Substring (1)' 3);  	}  	else if (number [0] == 'q' && allowNonStandardExts)// quaternary  	 {  		result = ToNumber (number.Substring (1)' 4);  	}  	else if (number [0] == 'w' && allowNonStandardExts)// base 12  	 {  		result = ToNumber (number.Substring (1)' 12);  	}  	else if (number [0] == 'r' && allowNonStandardExts)// base 32  	 {  		result = ToNumber (number.Substring (1)' 32);  	}  	else// base 10  	 {  		result = ToNumber (number' 10);  	}  }  else// base 10   {  	result = ToNumber (number' 10);  }  
Magic Number,ProcessHacker.Common,BaseConverter,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\BaseConverter.cs,ToNumberParse,The following statement contains a magic number: if (number.Length > 1) {  	if (number [0] == '0')// octal  	 {  		result = ToNumber (number.Substring (1)' 8);  	}  	else if (number [0] == 'b' && allowNonStandardExts)// binary  	 {  		result = ToNumber (number.Substring (1)' 2);  	}  	else if (number [0] == 't' && allowNonStandardExts)// ternary  	 {  		result = ToNumber (number.Substring (1)' 3);  	}  	else if (number [0] == 'q' && allowNonStandardExts)// quaternary  	 {  		result = ToNumber (number.Substring (1)' 4);  	}  	else if (number [0] == 'w' && allowNonStandardExts)// base 12  	 {  		result = ToNumber (number.Substring (1)' 12);  	}  	else if (number [0] == 'r' && allowNonStandardExts)// base 32  	 {  		result = ToNumber (number.Substring (1)' 32);  	}  	else// base 10  	 {  		result = ToNumber (number' 10);  	}  }  else// base 10   {  	result = ToNumber (number' 10);  }  
Magic Number,ProcessHacker.Common,BaseConverter,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\BaseConverter.cs,ToNumberParse,The following statement contains a magic number: if (number.Length > 1) {  	if (number [0] == '0')// octal  	 {  		result = ToNumber (number.Substring (1)' 8);  	}  	else if (number [0] == 'b' && allowNonStandardExts)// binary  	 {  		result = ToNumber (number.Substring (1)' 2);  	}  	else if (number [0] == 't' && allowNonStandardExts)// ternary  	 {  		result = ToNumber (number.Substring (1)' 3);  	}  	else if (number [0] == 'q' && allowNonStandardExts)// quaternary  	 {  		result = ToNumber (number.Substring (1)' 4);  	}  	else if (number [0] == 'w' && allowNonStandardExts)// base 12  	 {  		result = ToNumber (number.Substring (1)' 12);  	}  	else if (number [0] == 'r' && allowNonStandardExts)// base 32  	 {  		result = ToNumber (number.Substring (1)' 32);  	}  	else// base 10  	 {  		result = ToNumber (number' 10);  	}  }  else// base 10   {  	result = ToNumber (number' 10);  }  
Magic Number,ProcessHacker.Common,BaseConverter,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\BaseConverter.cs,ToNumberParse,The following statement contains a magic number: if (number [0] == '0')// octal   {  	result = ToNumber (number.Substring (1)' 8);  }  else if (number [0] == 'b' && allowNonStandardExts)// binary   {  	result = ToNumber (number.Substring (1)' 2);  }  else if (number [0] == 't' && allowNonStandardExts)// ternary   {  	result = ToNumber (number.Substring (1)' 3);  }  else if (number [0] == 'q' && allowNonStandardExts)// quaternary   {  	result = ToNumber (number.Substring (1)' 4);  }  else if (number [0] == 'w' && allowNonStandardExts)// base 12   {  	result = ToNumber (number.Substring (1)' 12);  }  else if (number [0] == 'r' && allowNonStandardExts)// base 32   {  	result = ToNumber (number.Substring (1)' 32);  }  else// base 10   {  	result = ToNumber (number' 10);  }  
Magic Number,ProcessHacker.Common,BaseConverter,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\BaseConverter.cs,ToNumberParse,The following statement contains a magic number: if (number [0] == '0')// octal   {  	result = ToNumber (number.Substring (1)' 8);  }  else if (number [0] == 'b' && allowNonStandardExts)// binary   {  	result = ToNumber (number.Substring (1)' 2);  }  else if (number [0] == 't' && allowNonStandardExts)// ternary   {  	result = ToNumber (number.Substring (1)' 3);  }  else if (number [0] == 'q' && allowNonStandardExts)// quaternary   {  	result = ToNumber (number.Substring (1)' 4);  }  else if (number [0] == 'w' && allowNonStandardExts)// base 12   {  	result = ToNumber (number.Substring (1)' 12);  }  else if (number [0] == 'r' && allowNonStandardExts)// base 32   {  	result = ToNumber (number.Substring (1)' 32);  }  else// base 10   {  	result = ToNumber (number' 10);  }  
Magic Number,ProcessHacker.Common,BaseConverter,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\BaseConverter.cs,ToNumberParse,The following statement contains a magic number: if (number [0] == '0')// octal   {  	result = ToNumber (number.Substring (1)' 8);  }  else if (number [0] == 'b' && allowNonStandardExts)// binary   {  	result = ToNumber (number.Substring (1)' 2);  }  else if (number [0] == 't' && allowNonStandardExts)// ternary   {  	result = ToNumber (number.Substring (1)' 3);  }  else if (number [0] == 'q' && allowNonStandardExts)// quaternary   {  	result = ToNumber (number.Substring (1)' 4);  }  else if (number [0] == 'w' && allowNonStandardExts)// base 12   {  	result = ToNumber (number.Substring (1)' 12);  }  else if (number [0] == 'r' && allowNonStandardExts)// base 32   {  	result = ToNumber (number.Substring (1)' 32);  }  else// base 10   {  	result = ToNumber (number' 10);  }  
Magic Number,ProcessHacker.Common,BaseConverter,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\BaseConverter.cs,ToNumberParse,The following statement contains a magic number: if (number [0] == '0')// octal   {  	result = ToNumber (number.Substring (1)' 8);  }  else if (number [0] == 'b' && allowNonStandardExts)// binary   {  	result = ToNumber (number.Substring (1)' 2);  }  else if (number [0] == 't' && allowNonStandardExts)// ternary   {  	result = ToNumber (number.Substring (1)' 3);  }  else if (number [0] == 'q' && allowNonStandardExts)// quaternary   {  	result = ToNumber (number.Substring (1)' 4);  }  else if (number [0] == 'w' && allowNonStandardExts)// base 12   {  	result = ToNumber (number.Substring (1)' 12);  }  else if (number [0] == 'r' && allowNonStandardExts)// base 32   {  	result = ToNumber (number.Substring (1)' 32);  }  else// base 10   {  	result = ToNumber (number' 10);  }  
Magic Number,ProcessHacker.Common,BaseConverter,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\BaseConverter.cs,ToNumberParse,The following statement contains a magic number: if (number [0] == '0')// octal   {  	result = ToNumber (number.Substring (1)' 8);  }  else if (number [0] == 'b' && allowNonStandardExts)// binary   {  	result = ToNumber (number.Substring (1)' 2);  }  else if (number [0] == 't' && allowNonStandardExts)// ternary   {  	result = ToNumber (number.Substring (1)' 3);  }  else if (number [0] == 'q' && allowNonStandardExts)// quaternary   {  	result = ToNumber (number.Substring (1)' 4);  }  else if (number [0] == 'w' && allowNonStandardExts)// base 12   {  	result = ToNumber (number.Substring (1)' 12);  }  else if (number [0] == 'r' && allowNonStandardExts)// base 32   {  	result = ToNumber (number.Substring (1)' 32);  }  else// base 10   {  	result = ToNumber (number' 10);  }  
Magic Number,ProcessHacker.Common,BaseConverter,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\BaseConverter.cs,ToNumberParse,The following statement contains a magic number: if (number [0] == '0')// octal   {  	result = ToNumber (number.Substring (1)' 8);  }  else if (number [0] == 'b' && allowNonStandardExts)// binary   {  	result = ToNumber (number.Substring (1)' 2);  }  else if (number [0] == 't' && allowNonStandardExts)// ternary   {  	result = ToNumber (number.Substring (1)' 3);  }  else if (number [0] == 'q' && allowNonStandardExts)// quaternary   {  	result = ToNumber (number.Substring (1)' 4);  }  else if (number [0] == 'w' && allowNonStandardExts)// base 12   {  	result = ToNumber (number.Substring (1)' 12);  }  else if (number [0] == 'r' && allowNonStandardExts)// base 32   {  	result = ToNumber (number.Substring (1)' 32);  }  else// base 10   {  	result = ToNumber (number' 10);  }  
Magic Number,ProcessHacker.Common,BaseConverter,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\BaseConverter.cs,ToNumberParse,The following statement contains a magic number: if (number [0] == '0')// octal   {  	result = ToNumber (number.Substring (1)' 8);  }  else if (number [0] == 'b' && allowNonStandardExts)// binary   {  	result = ToNumber (number.Substring (1)' 2);  }  else if (number [0] == 't' && allowNonStandardExts)// ternary   {  	result = ToNumber (number.Substring (1)' 3);  }  else if (number [0] == 'q' && allowNonStandardExts)// quaternary   {  	result = ToNumber (number.Substring (1)' 4);  }  else if (number [0] == 'w' && allowNonStandardExts)// base 12   {  	result = ToNumber (number.Substring (1)' 12);  }  else if (number [0] == 'r' && allowNonStandardExts)// base 32   {  	result = ToNumber (number.Substring (1)' 32);  }  else// base 10   {  	result = ToNumber (number' 10);  }  
Magic Number,ProcessHacker.Common,BaseConverter,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\BaseConverter.cs,ToNumberParse,The following statement contains a magic number: result = ToNumber (number.Substring (1)' 8);  
Magic Number,ProcessHacker.Common,BaseConverter,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\BaseConverter.cs,ToNumberParse,The following statement contains a magic number: if (number [0] == 'b' && allowNonStandardExts)// binary   {  	result = ToNumber (number.Substring (1)' 2);  }  else if (number [0] == 't' && allowNonStandardExts)// ternary   {  	result = ToNumber (number.Substring (1)' 3);  }  else if (number [0] == 'q' && allowNonStandardExts)// quaternary   {  	result = ToNumber (number.Substring (1)' 4);  }  else if (number [0] == 'w' && allowNonStandardExts)// base 12   {  	result = ToNumber (number.Substring (1)' 12);  }  else if (number [0] == 'r' && allowNonStandardExts)// base 32   {  	result = ToNumber (number.Substring (1)' 32);  }  else// base 10   {  	result = ToNumber (number' 10);  }  
Magic Number,ProcessHacker.Common,BaseConverter,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\BaseConverter.cs,ToNumberParse,The following statement contains a magic number: if (number [0] == 'b' && allowNonStandardExts)// binary   {  	result = ToNumber (number.Substring (1)' 2);  }  else if (number [0] == 't' && allowNonStandardExts)// ternary   {  	result = ToNumber (number.Substring (1)' 3);  }  else if (number [0] == 'q' && allowNonStandardExts)// quaternary   {  	result = ToNumber (number.Substring (1)' 4);  }  else if (number [0] == 'w' && allowNonStandardExts)// base 12   {  	result = ToNumber (number.Substring (1)' 12);  }  else if (number [0] == 'r' && allowNonStandardExts)// base 32   {  	result = ToNumber (number.Substring (1)' 32);  }  else// base 10   {  	result = ToNumber (number' 10);  }  
Magic Number,ProcessHacker.Common,BaseConverter,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\BaseConverter.cs,ToNumberParse,The following statement contains a magic number: if (number [0] == 'b' && allowNonStandardExts)// binary   {  	result = ToNumber (number.Substring (1)' 2);  }  else if (number [0] == 't' && allowNonStandardExts)// ternary   {  	result = ToNumber (number.Substring (1)' 3);  }  else if (number [0] == 'q' && allowNonStandardExts)// quaternary   {  	result = ToNumber (number.Substring (1)' 4);  }  else if (number [0] == 'w' && allowNonStandardExts)// base 12   {  	result = ToNumber (number.Substring (1)' 12);  }  else if (number [0] == 'r' && allowNonStandardExts)// base 32   {  	result = ToNumber (number.Substring (1)' 32);  }  else// base 10   {  	result = ToNumber (number' 10);  }  
Magic Number,ProcessHacker.Common,BaseConverter,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\BaseConverter.cs,ToNumberParse,The following statement contains a magic number: if (number [0] == 'b' && allowNonStandardExts)// binary   {  	result = ToNumber (number.Substring (1)' 2);  }  else if (number [0] == 't' && allowNonStandardExts)// ternary   {  	result = ToNumber (number.Substring (1)' 3);  }  else if (number [0] == 'q' && allowNonStandardExts)// quaternary   {  	result = ToNumber (number.Substring (1)' 4);  }  else if (number [0] == 'w' && allowNonStandardExts)// base 12   {  	result = ToNumber (number.Substring (1)' 12);  }  else if (number [0] == 'r' && allowNonStandardExts)// base 32   {  	result = ToNumber (number.Substring (1)' 32);  }  else// base 10   {  	result = ToNumber (number' 10);  }  
Magic Number,ProcessHacker.Common,BaseConverter,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\BaseConverter.cs,ToNumberParse,The following statement contains a magic number: if (number [0] == 'b' && allowNonStandardExts)// binary   {  	result = ToNumber (number.Substring (1)' 2);  }  else if (number [0] == 't' && allowNonStandardExts)// ternary   {  	result = ToNumber (number.Substring (1)' 3);  }  else if (number [0] == 'q' && allowNonStandardExts)// quaternary   {  	result = ToNumber (number.Substring (1)' 4);  }  else if (number [0] == 'w' && allowNonStandardExts)// base 12   {  	result = ToNumber (number.Substring (1)' 12);  }  else if (number [0] == 'r' && allowNonStandardExts)// base 32   {  	result = ToNumber (number.Substring (1)' 32);  }  else// base 10   {  	result = ToNumber (number' 10);  }  
Magic Number,ProcessHacker.Common,BaseConverter,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\BaseConverter.cs,ToNumberParse,The following statement contains a magic number: if (number [0] == 'b' && allowNonStandardExts)// binary   {  	result = ToNumber (number.Substring (1)' 2);  }  else if (number [0] == 't' && allowNonStandardExts)// ternary   {  	result = ToNumber (number.Substring (1)' 3);  }  else if (number [0] == 'q' && allowNonStandardExts)// quaternary   {  	result = ToNumber (number.Substring (1)' 4);  }  else if (number [0] == 'w' && allowNonStandardExts)// base 12   {  	result = ToNumber (number.Substring (1)' 12);  }  else if (number [0] == 'r' && allowNonStandardExts)// base 32   {  	result = ToNumber (number.Substring (1)' 32);  }  else// base 10   {  	result = ToNumber (number' 10);  }  
Magic Number,ProcessHacker.Common,BaseConverter,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\BaseConverter.cs,ToNumberParse,The following statement contains a magic number: result = ToNumber (number.Substring (1)' 2);  
Magic Number,ProcessHacker.Common,BaseConverter,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\BaseConverter.cs,ToNumberParse,The following statement contains a magic number: if (number [0] == 't' && allowNonStandardExts)// ternary   {  	result = ToNumber (number.Substring (1)' 3);  }  else if (number [0] == 'q' && allowNonStandardExts)// quaternary   {  	result = ToNumber (number.Substring (1)' 4);  }  else if (number [0] == 'w' && allowNonStandardExts)// base 12   {  	result = ToNumber (number.Substring (1)' 12);  }  else if (number [0] == 'r' && allowNonStandardExts)// base 32   {  	result = ToNumber (number.Substring (1)' 32);  }  else// base 10   {  	result = ToNumber (number' 10);  }  
Magic Number,ProcessHacker.Common,BaseConverter,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\BaseConverter.cs,ToNumberParse,The following statement contains a magic number: if (number [0] == 't' && allowNonStandardExts)// ternary   {  	result = ToNumber (number.Substring (1)' 3);  }  else if (number [0] == 'q' && allowNonStandardExts)// quaternary   {  	result = ToNumber (number.Substring (1)' 4);  }  else if (number [0] == 'w' && allowNonStandardExts)// base 12   {  	result = ToNumber (number.Substring (1)' 12);  }  else if (number [0] == 'r' && allowNonStandardExts)// base 32   {  	result = ToNumber (number.Substring (1)' 32);  }  else// base 10   {  	result = ToNumber (number' 10);  }  
Magic Number,ProcessHacker.Common,BaseConverter,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\BaseConverter.cs,ToNumberParse,The following statement contains a magic number: if (number [0] == 't' && allowNonStandardExts)// ternary   {  	result = ToNumber (number.Substring (1)' 3);  }  else if (number [0] == 'q' && allowNonStandardExts)// quaternary   {  	result = ToNumber (number.Substring (1)' 4);  }  else if (number [0] == 'w' && allowNonStandardExts)// base 12   {  	result = ToNumber (number.Substring (1)' 12);  }  else if (number [0] == 'r' && allowNonStandardExts)// base 32   {  	result = ToNumber (number.Substring (1)' 32);  }  else// base 10   {  	result = ToNumber (number' 10);  }  
Magic Number,ProcessHacker.Common,BaseConverter,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\BaseConverter.cs,ToNumberParse,The following statement contains a magic number: if (number [0] == 't' && allowNonStandardExts)// ternary   {  	result = ToNumber (number.Substring (1)' 3);  }  else if (number [0] == 'q' && allowNonStandardExts)// quaternary   {  	result = ToNumber (number.Substring (1)' 4);  }  else if (number [0] == 'w' && allowNonStandardExts)// base 12   {  	result = ToNumber (number.Substring (1)' 12);  }  else if (number [0] == 'r' && allowNonStandardExts)// base 32   {  	result = ToNumber (number.Substring (1)' 32);  }  else// base 10   {  	result = ToNumber (number' 10);  }  
Magic Number,ProcessHacker.Common,BaseConverter,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\BaseConverter.cs,ToNumberParse,The following statement contains a magic number: if (number [0] == 't' && allowNonStandardExts)// ternary   {  	result = ToNumber (number.Substring (1)' 3);  }  else if (number [0] == 'q' && allowNonStandardExts)// quaternary   {  	result = ToNumber (number.Substring (1)' 4);  }  else if (number [0] == 'w' && allowNonStandardExts)// base 12   {  	result = ToNumber (number.Substring (1)' 12);  }  else if (number [0] == 'r' && allowNonStandardExts)// base 32   {  	result = ToNumber (number.Substring (1)' 32);  }  else// base 10   {  	result = ToNumber (number' 10);  }  
Magic Number,ProcessHacker.Common,BaseConverter,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\BaseConverter.cs,ToNumberParse,The following statement contains a magic number: result = ToNumber (number.Substring (1)' 3);  
Magic Number,ProcessHacker.Common,BaseConverter,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\BaseConverter.cs,ToNumberParse,The following statement contains a magic number: if (number [0] == 'q' && allowNonStandardExts)// quaternary   {  	result = ToNumber (number.Substring (1)' 4);  }  else if (number [0] == 'w' && allowNonStandardExts)// base 12   {  	result = ToNumber (number.Substring (1)' 12);  }  else if (number [0] == 'r' && allowNonStandardExts)// base 32   {  	result = ToNumber (number.Substring (1)' 32);  }  else// base 10   {  	result = ToNumber (number' 10);  }  
Magic Number,ProcessHacker.Common,BaseConverter,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\BaseConverter.cs,ToNumberParse,The following statement contains a magic number: if (number [0] == 'q' && allowNonStandardExts)// quaternary   {  	result = ToNumber (number.Substring (1)' 4);  }  else if (number [0] == 'w' && allowNonStandardExts)// base 12   {  	result = ToNumber (number.Substring (1)' 12);  }  else if (number [0] == 'r' && allowNonStandardExts)// base 32   {  	result = ToNumber (number.Substring (1)' 32);  }  else// base 10   {  	result = ToNumber (number' 10);  }  
Magic Number,ProcessHacker.Common,BaseConverter,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\BaseConverter.cs,ToNumberParse,The following statement contains a magic number: if (number [0] == 'q' && allowNonStandardExts)// quaternary   {  	result = ToNumber (number.Substring (1)' 4);  }  else if (number [0] == 'w' && allowNonStandardExts)// base 12   {  	result = ToNumber (number.Substring (1)' 12);  }  else if (number [0] == 'r' && allowNonStandardExts)// base 32   {  	result = ToNumber (number.Substring (1)' 32);  }  else// base 10   {  	result = ToNumber (number' 10);  }  
Magic Number,ProcessHacker.Common,BaseConverter,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\BaseConverter.cs,ToNumberParse,The following statement contains a magic number: if (number [0] == 'q' && allowNonStandardExts)// quaternary   {  	result = ToNumber (number.Substring (1)' 4);  }  else if (number [0] == 'w' && allowNonStandardExts)// base 12   {  	result = ToNumber (number.Substring (1)' 12);  }  else if (number [0] == 'r' && allowNonStandardExts)// base 32   {  	result = ToNumber (number.Substring (1)' 32);  }  else// base 10   {  	result = ToNumber (number' 10);  }  
Magic Number,ProcessHacker.Common,BaseConverter,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\BaseConverter.cs,ToNumberParse,The following statement contains a magic number: result = ToNumber (number.Substring (1)' 4);  
Magic Number,ProcessHacker.Common,BaseConverter,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\BaseConverter.cs,ToNumberParse,The following statement contains a magic number: if (number [0] == 'w' && allowNonStandardExts)// base 12   {  	result = ToNumber (number.Substring (1)' 12);  }  else if (number [0] == 'r' && allowNonStandardExts)// base 32   {  	result = ToNumber (number.Substring (1)' 32);  }  else// base 10   {  	result = ToNumber (number' 10);  }  
Magic Number,ProcessHacker.Common,BaseConverter,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\BaseConverter.cs,ToNumberParse,The following statement contains a magic number: if (number [0] == 'w' && allowNonStandardExts)// base 12   {  	result = ToNumber (number.Substring (1)' 12);  }  else if (number [0] == 'r' && allowNonStandardExts)// base 32   {  	result = ToNumber (number.Substring (1)' 32);  }  else// base 10   {  	result = ToNumber (number' 10);  }  
Magic Number,ProcessHacker.Common,BaseConverter,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\BaseConverter.cs,ToNumberParse,The following statement contains a magic number: if (number [0] == 'w' && allowNonStandardExts)// base 12   {  	result = ToNumber (number.Substring (1)' 12);  }  else if (number [0] == 'r' && allowNonStandardExts)// base 32   {  	result = ToNumber (number.Substring (1)' 32);  }  else// base 10   {  	result = ToNumber (number' 10);  }  
Magic Number,ProcessHacker.Common,BaseConverter,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\BaseConverter.cs,ToNumberParse,The following statement contains a magic number: result = ToNumber (number.Substring (1)' 12);  
Magic Number,ProcessHacker.Common,BaseConverter,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\BaseConverter.cs,ToNumberParse,The following statement contains a magic number: if (number [0] == 'r' && allowNonStandardExts)// base 32   {  	result = ToNumber (number.Substring (1)' 32);  }  else// base 10   {  	result = ToNumber (number' 10);  }  
Magic Number,ProcessHacker.Common,BaseConverter,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\BaseConverter.cs,ToNumberParse,The following statement contains a magic number: if (number [0] == 'r' && allowNonStandardExts)// base 32   {  	result = ToNumber (number.Substring (1)' 32);  }  else// base 10   {  	result = ToNumber (number' 10);  }  
Magic Number,ProcessHacker.Common,BaseConverter,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\BaseConverter.cs,ToNumberParse,The following statement contains a magic number: result = ToNumber (number.Substring (1)' 32);  
Magic Number,ProcessHacker.Common,BaseConverter,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\BaseConverter.cs,ToNumberParse,The following statement contains a magic number: result = ToNumber (number' 10);  
Magic Number,ProcessHacker.Common,BaseConverter,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\BaseConverter.cs,ToNumberParse,The following statement contains a magic number: result = ToNumber (number' 10);  
Magic Number,ProcessHacker.Common,CircularBuffer,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\CircularBuffer.cs,CircularBuffer,The following statement contains a magic number: s.Read (buf' 0' 4);  
Magic Number,ProcessHacker.Common,CircularBuffer,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\CircularBuffer.cs,CircularBuffer,The following statement contains a magic number: s.Read (buf' 0' 4);  
Magic Number,ProcessHacker.Common,CircularBuffer,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\CircularBuffer.cs,CircularBuffer,The following statement contains a magic number: s.Read (buf' 0' 4);  
Magic Number,ProcessHacker.Common,CircularBuffer,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\CircularBuffer.cs,CircularBuffer,The following statement contains a magic number: buf = new byte[256];  
Magic Number,ProcessHacker.Common,LibC,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\LibC.cs,MemCpy,The following statement contains a magic number: while (length >= 8) {  	*((int*)dest) = *((int*)src);  	*((int*)dest + 1) = *((int*)src + 1);  	dest += 8;  	src += 8;  	length -= 8;  }  
Magic Number,ProcessHacker.Common,LibC,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\LibC.cs,MemCpy,The following statement contains a magic number: while (length >= 8) {  	*((int*)dest) = *((int*)src);  	*((int*)dest + 1) = *((int*)src + 1);  	dest += 8;  	src += 8;  	length -= 8;  }  
Magic Number,ProcessHacker.Common,LibC,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\LibC.cs,MemCpy,The following statement contains a magic number: while (length >= 8) {  	*((int*)dest) = *((int*)src);  	*((int*)dest + 1) = *((int*)src + 1);  	dest += 8;  	src += 8;  	length -= 8;  }  
Magic Number,ProcessHacker.Common,LibC,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\LibC.cs,MemCpy,The following statement contains a magic number: while (length >= 8) {  	*((int*)dest) = *((int*)src);  	*((int*)dest + 1) = *((int*)src + 1);  	dest += 8;  	src += 8;  	length -= 8;  }  
Magic Number,ProcessHacker.Common,LibC,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\LibC.cs,MemCpy,The following statement contains a magic number: dest += 8;  
Magic Number,ProcessHacker.Common,LibC,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\LibC.cs,MemCpy,The following statement contains a magic number: src += 8;  
Magic Number,ProcessHacker.Common,LibC,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\LibC.cs,MemCpy,The following statement contains a magic number: length -= 8;  
Magic Number,ProcessHacker.Common,LibC,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\LibC.cs,MemCpy,The following statement contains a magic number: if ((length & 4) != 0) {  	*(int*)dest = *(int*)src;  	dest += 4;  	src += 4;  }  
Magic Number,ProcessHacker.Common,LibC,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\LibC.cs,MemCpy,The following statement contains a magic number: if ((length & 4) != 0) {  	*(int*)dest = *(int*)src;  	dest += 4;  	src += 4;  }  
Magic Number,ProcessHacker.Common,LibC,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\LibC.cs,MemCpy,The following statement contains a magic number: if ((length & 4) != 0) {  	*(int*)dest = *(int*)src;  	dest += 4;  	src += 4;  }  
Magic Number,ProcessHacker.Common,LibC,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\LibC.cs,MemCpy,The following statement contains a magic number: dest += 4;  
Magic Number,ProcessHacker.Common,LibC,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\LibC.cs,MemCpy,The following statement contains a magic number: src += 4;  
Magic Number,ProcessHacker.Common,LibC,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\LibC.cs,MemCpy,The following statement contains a magic number: if ((length & 2) != 0) {  	*(short*)dest = *(short*)src;  	dest += 2;  	src += 2;  }  
Magic Number,ProcessHacker.Common,LibC,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\LibC.cs,MemCpy,The following statement contains a magic number: if ((length & 2) != 0) {  	*(short*)dest = *(short*)src;  	dest += 2;  	src += 2;  }  
Magic Number,ProcessHacker.Common,LibC,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\LibC.cs,MemCpy,The following statement contains a magic number: if ((length & 2) != 0) {  	*(short*)dest = *(short*)src;  	dest += 2;  	src += 2;  }  
Magic Number,ProcessHacker.Common,LibC,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\LibC.cs,MemCpy,The following statement contains a magic number: dest += 2;  
Magic Number,ProcessHacker.Common,LibC,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\LibC.cs,MemCpy,The following statement contains a magic number: src += 2;  
Magic Number,ProcessHacker.Common,LibC,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\LibC.cs,MemSet,The following statement contains a magic number: while (length >= 8) {  	*((int*)dest) = p;  	*((int*)dest + 1) = p;  	dest += 8;  	length -= 8;  }  
Magic Number,ProcessHacker.Common,LibC,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\LibC.cs,MemSet,The following statement contains a magic number: while (length >= 8) {  	*((int*)dest) = p;  	*((int*)dest + 1) = p;  	dest += 8;  	length -= 8;  }  
Magic Number,ProcessHacker.Common,LibC,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\LibC.cs,MemSet,The following statement contains a magic number: while (length >= 8) {  	*((int*)dest) = p;  	*((int*)dest + 1) = p;  	dest += 8;  	length -= 8;  }  
Magic Number,ProcessHacker.Common,LibC,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\LibC.cs,MemSet,The following statement contains a magic number: dest += 8;  
Magic Number,ProcessHacker.Common,LibC,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\LibC.cs,MemSet,The following statement contains a magic number: length -= 8;  
Magic Number,ProcessHacker.Common,LibC,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\LibC.cs,MemSet,The following statement contains a magic number: if ((length & 4) != 0) {  	*(int*)dest = p;  	dest += 4;  }  
Magic Number,ProcessHacker.Common,LibC,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\LibC.cs,MemSet,The following statement contains a magic number: if ((length & 4) != 0) {  	*(int*)dest = p;  	dest += 4;  }  
Magic Number,ProcessHacker.Common,LibC,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\LibC.cs,MemSet,The following statement contains a magic number: dest += 4;  
Magic Number,ProcessHacker.Common,LibC,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\LibC.cs,MemSet,The following statement contains a magic number: if ((length & 2) != 0) {  	*(short*)dest = (short)p;  	dest += 2;  }  
Magic Number,ProcessHacker.Common,LibC,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\LibC.cs,MemSet,The following statement contains a magic number: if ((length & 2) != 0) {  	*(short*)dest = (short)p;  	dest += 2;  }  
Magic Number,ProcessHacker.Common,LibC,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\LibC.cs,MemSet,The following statement contains a magic number: dest += 2;  
Magic Number,ProcessHacker.Common,LibC,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\LibC.cs,WMemCpy,The following statement contains a magic number: while (length >= 8) {  	*((int*)dest) = *((int*)src);  	*((int*)dest + 1) = *((int*)src + 1);  	*((int*)dest + 2) = *((int*)src + 2);  	*((int*)dest + 3) = *((int*)src + 3);  	dest += 8;  	src += 8;  	length -= 8;  }  
Magic Number,ProcessHacker.Common,LibC,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\LibC.cs,WMemCpy,The following statement contains a magic number: while (length >= 8) {  	*((int*)dest) = *((int*)src);  	*((int*)dest + 1) = *((int*)src + 1);  	*((int*)dest + 2) = *((int*)src + 2);  	*((int*)dest + 3) = *((int*)src + 3);  	dest += 8;  	src += 8;  	length -= 8;  }  
Magic Number,ProcessHacker.Common,LibC,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\LibC.cs,WMemCpy,The following statement contains a magic number: while (length >= 8) {  	*((int*)dest) = *((int*)src);  	*((int*)dest + 1) = *((int*)src + 1);  	*((int*)dest + 2) = *((int*)src + 2);  	*((int*)dest + 3) = *((int*)src + 3);  	dest += 8;  	src += 8;  	length -= 8;  }  
Magic Number,ProcessHacker.Common,LibC,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\LibC.cs,WMemCpy,The following statement contains a magic number: while (length >= 8) {  	*((int*)dest) = *((int*)src);  	*((int*)dest + 1) = *((int*)src + 1);  	*((int*)dest + 2) = *((int*)src + 2);  	*((int*)dest + 3) = *((int*)src + 3);  	dest += 8;  	src += 8;  	length -= 8;  }  
Magic Number,ProcessHacker.Common,LibC,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\LibC.cs,WMemCpy,The following statement contains a magic number: while (length >= 8) {  	*((int*)dest) = *((int*)src);  	*((int*)dest + 1) = *((int*)src + 1);  	*((int*)dest + 2) = *((int*)src + 2);  	*((int*)dest + 3) = *((int*)src + 3);  	dest += 8;  	src += 8;  	length -= 8;  }  
Magic Number,ProcessHacker.Common,LibC,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\LibC.cs,WMemCpy,The following statement contains a magic number: while (length >= 8) {  	*((int*)dest) = *((int*)src);  	*((int*)dest + 1) = *((int*)src + 1);  	*((int*)dest + 2) = *((int*)src + 2);  	*((int*)dest + 3) = *((int*)src + 3);  	dest += 8;  	src += 8;  	length -= 8;  }  
Magic Number,ProcessHacker.Common,LibC,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\LibC.cs,WMemCpy,The following statement contains a magic number: while (length >= 8) {  	*((int*)dest) = *((int*)src);  	*((int*)dest + 1) = *((int*)src + 1);  	*((int*)dest + 2) = *((int*)src + 2);  	*((int*)dest + 3) = *((int*)src + 3);  	dest += 8;  	src += 8;  	length -= 8;  }  
Magic Number,ProcessHacker.Common,LibC,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\LibC.cs,WMemCpy,The following statement contains a magic number: while (length >= 8) {  	*((int*)dest) = *((int*)src);  	*((int*)dest + 1) = *((int*)src + 1);  	*((int*)dest + 2) = *((int*)src + 2);  	*((int*)dest + 3) = *((int*)src + 3);  	dest += 8;  	src += 8;  	length -= 8;  }  
Magic Number,ProcessHacker.Common,LibC,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\LibC.cs,WMemCpy,The following statement contains a magic number: *((int*)dest + 2) = *((int*)src + 2);  
Magic Number,ProcessHacker.Common,LibC,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\LibC.cs,WMemCpy,The following statement contains a magic number: *((int*)dest + 2) = *((int*)src + 2);  
Magic Number,ProcessHacker.Common,LibC,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\LibC.cs,WMemCpy,The following statement contains a magic number: *((int*)dest + 3) = *((int*)src + 3);  
Magic Number,ProcessHacker.Common,LibC,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\LibC.cs,WMemCpy,The following statement contains a magic number: *((int*)dest + 3) = *((int*)src + 3);  
Magic Number,ProcessHacker.Common,LibC,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\LibC.cs,WMemCpy,The following statement contains a magic number: dest += 8;  
Magic Number,ProcessHacker.Common,LibC,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\LibC.cs,WMemCpy,The following statement contains a magic number: src += 8;  
Magic Number,ProcessHacker.Common,LibC,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\LibC.cs,WMemCpy,The following statement contains a magic number: length -= 8;  
Magic Number,ProcessHacker.Common,LibC,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\LibC.cs,WMemCpy,The following statement contains a magic number: if ((length & 4) != 0) {  	*((int*)dest) = *((int*)src);  	*((int*)dest + 1) = *((int*)src + 1);  	dest += 4;  	src += 4;  }  
Magic Number,ProcessHacker.Common,LibC,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\LibC.cs,WMemCpy,The following statement contains a magic number: if ((length & 4) != 0) {  	*((int*)dest) = *((int*)src);  	*((int*)dest + 1) = *((int*)src + 1);  	dest += 4;  	src += 4;  }  
Magic Number,ProcessHacker.Common,LibC,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\LibC.cs,WMemCpy,The following statement contains a magic number: if ((length & 4) != 0) {  	*((int*)dest) = *((int*)src);  	*((int*)dest + 1) = *((int*)src + 1);  	dest += 4;  	src += 4;  }  
Magic Number,ProcessHacker.Common,LibC,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\LibC.cs,WMemCpy,The following statement contains a magic number: dest += 4;  
Magic Number,ProcessHacker.Common,LibC,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\LibC.cs,WMemCpy,The following statement contains a magic number: src += 4;  
Magic Number,ProcessHacker.Common,LibC,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\LibC.cs,WMemCpy,The following statement contains a magic number: if ((length & 2) != 0) {  	*(int*)dest = *(int*)src;  	dest += 2;  	src += 2;  }  
Magic Number,ProcessHacker.Common,LibC,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\LibC.cs,WMemCpy,The following statement contains a magic number: if ((length & 2) != 0) {  	*(int*)dest = *(int*)src;  	dest += 2;  	src += 2;  }  
Magic Number,ProcessHacker.Common,LibC,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\LibC.cs,WMemCpy,The following statement contains a magic number: if ((length & 2) != 0) {  	*(int*)dest = *(int*)src;  	dest += 2;  	src += 2;  }  
Magic Number,ProcessHacker.Common,LibC,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\LibC.cs,WMemCpy,The following statement contains a magic number: dest += 2;  
Magic Number,ProcessHacker.Common,LibC,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\LibC.cs,WMemCpy,The following statement contains a magic number: src += 2;  
Magic Number,ProcessHacker.Common,LibC,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\LibC.cs,WMemCpyUnaligned,The following statement contains a magic number: if (((int)dest & 2) != 0) {  	*dest = *src;  	dest++;  	src++;  	length--;  }  
Magic Number,ProcessHacker.Common,LibC,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\LibC.cs,WMemCpyUnaligned,The following statement contains a magic number: while (length >= 8) {  	*((int*)dest) = *((int*)src);  	*((int*)dest + 1) = *((int*)src + 1);  	*((int*)dest + 2) = *((int*)src + 2);  	*((int*)dest + 3) = *((int*)src + 3);  	dest += 8;  	src += 8;  	length -= 8;  }  
Magic Number,ProcessHacker.Common,LibC,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\LibC.cs,WMemCpyUnaligned,The following statement contains a magic number: while (length >= 8) {  	*((int*)dest) = *((int*)src);  	*((int*)dest + 1) = *((int*)src + 1);  	*((int*)dest + 2) = *((int*)src + 2);  	*((int*)dest + 3) = *((int*)src + 3);  	dest += 8;  	src += 8;  	length -= 8;  }  
Magic Number,ProcessHacker.Common,LibC,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\LibC.cs,WMemCpyUnaligned,The following statement contains a magic number: while (length >= 8) {  	*((int*)dest) = *((int*)src);  	*((int*)dest + 1) = *((int*)src + 1);  	*((int*)dest + 2) = *((int*)src + 2);  	*((int*)dest + 3) = *((int*)src + 3);  	dest += 8;  	src += 8;  	length -= 8;  }  
Magic Number,ProcessHacker.Common,LibC,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\LibC.cs,WMemCpyUnaligned,The following statement contains a magic number: while (length >= 8) {  	*((int*)dest) = *((int*)src);  	*((int*)dest + 1) = *((int*)src + 1);  	*((int*)dest + 2) = *((int*)src + 2);  	*((int*)dest + 3) = *((int*)src + 3);  	dest += 8;  	src += 8;  	length -= 8;  }  
Magic Number,ProcessHacker.Common,LibC,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\LibC.cs,WMemCpyUnaligned,The following statement contains a magic number: while (length >= 8) {  	*((int*)dest) = *((int*)src);  	*((int*)dest + 1) = *((int*)src + 1);  	*((int*)dest + 2) = *((int*)src + 2);  	*((int*)dest + 3) = *((int*)src + 3);  	dest += 8;  	src += 8;  	length -= 8;  }  
Magic Number,ProcessHacker.Common,LibC,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\LibC.cs,WMemCpyUnaligned,The following statement contains a magic number: while (length >= 8) {  	*((int*)dest) = *((int*)src);  	*((int*)dest + 1) = *((int*)src + 1);  	*((int*)dest + 2) = *((int*)src + 2);  	*((int*)dest + 3) = *((int*)src + 3);  	dest += 8;  	src += 8;  	length -= 8;  }  
Magic Number,ProcessHacker.Common,LibC,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\LibC.cs,WMemCpyUnaligned,The following statement contains a magic number: while (length >= 8) {  	*((int*)dest) = *((int*)src);  	*((int*)dest + 1) = *((int*)src + 1);  	*((int*)dest + 2) = *((int*)src + 2);  	*((int*)dest + 3) = *((int*)src + 3);  	dest += 8;  	src += 8;  	length -= 8;  }  
Magic Number,ProcessHacker.Common,LibC,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\LibC.cs,WMemCpyUnaligned,The following statement contains a magic number: while (length >= 8) {  	*((int*)dest) = *((int*)src);  	*((int*)dest + 1) = *((int*)src + 1);  	*((int*)dest + 2) = *((int*)src + 2);  	*((int*)dest + 3) = *((int*)src + 3);  	dest += 8;  	src += 8;  	length -= 8;  }  
Magic Number,ProcessHacker.Common,LibC,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\LibC.cs,WMemCpyUnaligned,The following statement contains a magic number: *((int*)dest + 2) = *((int*)src + 2);  
Magic Number,ProcessHacker.Common,LibC,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\LibC.cs,WMemCpyUnaligned,The following statement contains a magic number: *((int*)dest + 2) = *((int*)src + 2);  
Magic Number,ProcessHacker.Common,LibC,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\LibC.cs,WMemCpyUnaligned,The following statement contains a magic number: *((int*)dest + 3) = *((int*)src + 3);  
Magic Number,ProcessHacker.Common,LibC,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\LibC.cs,WMemCpyUnaligned,The following statement contains a magic number: *((int*)dest + 3) = *((int*)src + 3);  
Magic Number,ProcessHacker.Common,LibC,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\LibC.cs,WMemCpyUnaligned,The following statement contains a magic number: dest += 8;  
Magic Number,ProcessHacker.Common,LibC,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\LibC.cs,WMemCpyUnaligned,The following statement contains a magic number: src += 8;  
Magic Number,ProcessHacker.Common,LibC,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\LibC.cs,WMemCpyUnaligned,The following statement contains a magic number: length -= 8;  
Magic Number,ProcessHacker.Common,LibC,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\LibC.cs,WMemCpyUnaligned,The following statement contains a magic number: if ((length & 4) != 0) {  	*((int*)dest) = *((int*)src);  	*((int*)dest + 1) = *((int*)src + 1);  	dest += 4;  	src += 4;  }  
Magic Number,ProcessHacker.Common,LibC,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\LibC.cs,WMemCpyUnaligned,The following statement contains a magic number: if ((length & 4) != 0) {  	*((int*)dest) = *((int*)src);  	*((int*)dest + 1) = *((int*)src + 1);  	dest += 4;  	src += 4;  }  
Magic Number,ProcessHacker.Common,LibC,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\LibC.cs,WMemCpyUnaligned,The following statement contains a magic number: if ((length & 4) != 0) {  	*((int*)dest) = *((int*)src);  	*((int*)dest + 1) = *((int*)src + 1);  	dest += 4;  	src += 4;  }  
Magic Number,ProcessHacker.Common,LibC,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\LibC.cs,WMemCpyUnaligned,The following statement contains a magic number: dest += 4;  
Magic Number,ProcessHacker.Common,LibC,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\LibC.cs,WMemCpyUnaligned,The following statement contains a magic number: src += 4;  
Magic Number,ProcessHacker.Common,LibC,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\LibC.cs,WMemCpyUnaligned,The following statement contains a magic number: if ((length & 2) != 0) {  	*(int*)dest = *(int*)src;  	dest += 2;  	src += 2;  }  
Magic Number,ProcessHacker.Common,LibC,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\LibC.cs,WMemCpyUnaligned,The following statement contains a magic number: if ((length & 2) != 0) {  	*(int*)dest = *(int*)src;  	dest += 2;  	src += 2;  }  
Magic Number,ProcessHacker.Common,LibC,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\LibC.cs,WMemCpyUnaligned,The following statement contains a magic number: if ((length & 2) != 0) {  	*(int*)dest = *(int*)src;  	dest += 2;  	src += 2;  }  
Magic Number,ProcessHacker.Common,LibC,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\LibC.cs,WMemCpyUnaligned,The following statement contains a magic number: dest += 2;  
Magic Number,ProcessHacker.Common,LibC,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\LibC.cs,WMemCpyUnaligned,The following statement contains a magic number: src += 2;  
Magic Number,ProcessHacker.Common,LibC,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\LibC.cs,WMemSet,The following statement contains a magic number: while (length >= 8) {  	*((int*)dest) = p;  	*((int*)dest + 1) = p;  	*((int*)dest + 2) = p;  	*((int*)dest + 3) = p;  	dest += 8;  	length -= 8;  }  
Magic Number,ProcessHacker.Common,LibC,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\LibC.cs,WMemSet,The following statement contains a magic number: while (length >= 8) {  	*((int*)dest) = p;  	*((int*)dest + 1) = p;  	*((int*)dest + 2) = p;  	*((int*)dest + 3) = p;  	dest += 8;  	length -= 8;  }  
Magic Number,ProcessHacker.Common,LibC,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\LibC.cs,WMemSet,The following statement contains a magic number: while (length >= 8) {  	*((int*)dest) = p;  	*((int*)dest + 1) = p;  	*((int*)dest + 2) = p;  	*((int*)dest + 3) = p;  	dest += 8;  	length -= 8;  }  
Magic Number,ProcessHacker.Common,LibC,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\LibC.cs,WMemSet,The following statement contains a magic number: while (length >= 8) {  	*((int*)dest) = p;  	*((int*)dest + 1) = p;  	*((int*)dest + 2) = p;  	*((int*)dest + 3) = p;  	dest += 8;  	length -= 8;  }  
Magic Number,ProcessHacker.Common,LibC,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\LibC.cs,WMemSet,The following statement contains a magic number: while (length >= 8) {  	*((int*)dest) = p;  	*((int*)dest + 1) = p;  	*((int*)dest + 2) = p;  	*((int*)dest + 3) = p;  	dest += 8;  	length -= 8;  }  
Magic Number,ProcessHacker.Common,LibC,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\LibC.cs,WMemSet,The following statement contains a magic number: *((int*)dest + 2) = p;  
Magic Number,ProcessHacker.Common,LibC,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\LibC.cs,WMemSet,The following statement contains a magic number: *((int*)dest + 3) = p;  
Magic Number,ProcessHacker.Common,LibC,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\LibC.cs,WMemSet,The following statement contains a magic number: dest += 8;  
Magic Number,ProcessHacker.Common,LibC,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\LibC.cs,WMemSet,The following statement contains a magic number: length -= 8;  
Magic Number,ProcessHacker.Common,LibC,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\LibC.cs,WMemSet,The following statement contains a magic number: if ((length & 4) != 0) {  	*((int*)dest) = p;  	*((int*)dest + 1) = p;  	dest += 4;  }  
Magic Number,ProcessHacker.Common,LibC,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\LibC.cs,WMemSet,The following statement contains a magic number: if ((length & 4) != 0) {  	*((int*)dest) = p;  	*((int*)dest + 1) = p;  	dest += 4;  }  
Magic Number,ProcessHacker.Common,LibC,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\LibC.cs,WMemSet,The following statement contains a magic number: dest += 4;  
Magic Number,ProcessHacker.Common,LibC,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\LibC.cs,WMemSet,The following statement contains a magic number: if ((length & 2) != 0) {  	*(int*)dest = p;  	dest += 2;  }  
Magic Number,ProcessHacker.Common,LibC,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\LibC.cs,WMemSet,The following statement contains a magic number: if ((length & 2) != 0) {  	*(int*)dest = p;  	dest += 2;  }  
Magic Number,ProcessHacker.Common,LibC,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\LibC.cs,WMemSet,The following statement contains a magic number: dest += 2;  
Magic Number,ProcessHacker.Common,String255,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\String255.cs,GetHashCode,The following statement contains a magic number: fixed (char* buffer = this.Buffer) {  	for (int i = 0; i < this.Length; i += 4) {  		hashCode += hashCode ^ (hashCode << ((i % 4) * 8));  	}  }  
Magic Number,ProcessHacker.Common,String255,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\String255.cs,GetHashCode,The following statement contains a magic number: fixed (char* buffer = this.Buffer) {  	for (int i = 0; i < this.Length; i += 4) {  		hashCode += hashCode ^ (hashCode << ((i % 4) * 8));  	}  }  
Magic Number,ProcessHacker.Common,String255,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\String255.cs,GetHashCode,The following statement contains a magic number: fixed (char* buffer = this.Buffer) {  	for (int i = 0; i < this.Length; i += 4) {  		hashCode += hashCode ^ (hashCode << ((i % 4) * 8));  	}  }  
Magic Number,ProcessHacker.Common,String255,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\String255.cs,GetHashCode,The following statement contains a magic number: for (int i = 0; i < this.Length; i += 4) {  	hashCode += hashCode ^ (hashCode << ((i % 4) * 8));  }  
Magic Number,ProcessHacker.Common,String255,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\String255.cs,GetHashCode,The following statement contains a magic number: for (int i = 0; i < this.Length; i += 4) {  	hashCode += hashCode ^ (hashCode << ((i % 4) * 8));  }  
Magic Number,ProcessHacker.Common,String255,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\String255.cs,GetHashCode,The following statement contains a magic number: for (int i = 0; i < this.Length; i += 4) {  	hashCode += hashCode ^ (hashCode << ((i % 4) * 8));  }  
Magic Number,ProcessHacker.Common,String255,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\String255.cs,GetHashCode,The following statement contains a magic number: i += 4
Magic Number,ProcessHacker.Common,String255,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\String255.cs,GetHashCode,The following statement contains a magic number: hashCode += hashCode ^ (hashCode << ((i % 4) * 8));  
Magic Number,ProcessHacker.Common,String255,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\String255.cs,GetHashCode,The following statement contains a magic number: hashCode += hashCode ^ (hashCode << ((i % 4) * 8));  
Magic Number,ProcessHacker.Common,Tokenizer,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Tokenizer.cs,EatNumber,The following statement contains a magic number: while (_i < _text.Length) {  	// allow hex numbers and floating-point numbers  	if (sb.Length == 1 && sb [0] == '0') {  		if (!char.IsDigit (_text [_i]) && char.ToLower (_text [_i]) != 'x' && _text [_i] != '.')  			break;  	}  	else if (sb.Length >= 2 && sb [0] == '0' && char.ToLower (sb [1]) == 'x') {  		if (!(char.IsDigit (_text [_i]) || char.ToLower (_text [_i]) == 'a' || char.ToLower (_text [_i]) == 'b' || char.ToLower (_text [_i]) == 'c' || char.ToLower (_text [_i]) == 'd' || char.ToLower (_text [_i]) == 'e' || char.ToLower (_text [_i]) == 'f'))  			break;  	}  	else {  		if (!char.IsDigit (_text [_i]))  			break;  	}  	sb.Append (_text [_i]);  	_i++;  }  
Magic Number,ProcessHacker.Common,Tokenizer,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Tokenizer.cs,EatNumber,The following statement contains a magic number: if (sb.Length == 1 && sb [0] == '0') {  	if (!char.IsDigit (_text [_i]) && char.ToLower (_text [_i]) != 'x' && _text [_i] != '.')  		break;  }  else if (sb.Length >= 2 && sb [0] == '0' && char.ToLower (sb [1]) == 'x') {  	if (!(char.IsDigit (_text [_i]) || char.ToLower (_text [_i]) == 'a' || char.ToLower (_text [_i]) == 'b' || char.ToLower (_text [_i]) == 'c' || char.ToLower (_text [_i]) == 'd' || char.ToLower (_text [_i]) == 'e' || char.ToLower (_text [_i]) == 'f'))  		break;  }  else {  	if (!char.IsDigit (_text [_i]))  		break;  }  
Magic Number,ProcessHacker.Common,Tokenizer,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Tokenizer.cs,EatNumber,The following statement contains a magic number: if (sb.Length >= 2 && sb [0] == '0' && char.ToLower (sb [1]) == 'x') {  	if (!(char.IsDigit (_text [_i]) || char.ToLower (_text [_i]) == 'a' || char.ToLower (_text [_i]) == 'b' || char.ToLower (_text [_i]) == 'c' || char.ToLower (_text [_i]) == 'd' || char.ToLower (_text [_i]) == 'e' || char.ToLower (_text [_i]) == 'f'))  		break;  }  else {  	if (!char.IsDigit (_text [_i]))  		break;  }  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,CreateEllipsis,The following statement contains a magic number: if (s.Length <= len)  	return s;  else  	return s.Substring (0' len - 4) + " ...";  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,CreateEllipsis,The following statement contains a magic number: return s.Substring (0' len - 4) + " ...";  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,CreateRandomString,The following statement contains a magic number: for (int i = 0; i < length; i++)  	sb.Append ((char)('A' + r.Next (25)));  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,CreateRandomString,The following statement contains a magic number: sb.Append ((char)('A' + r.Next (25)));  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,FormatFlags,The following statement contains a magic number: for (int i = 0; i < 32; i++) {  	long fv = 1 << i;  	if ((value & fv) == fv) {  		r += Enum.GetName (e' fv) + "' ";  	}  }  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,FormatFlags,The following statement contains a magic number: if (r.EndsWith ("' "))  	r = r.Remove (r.Length - 2' 2);  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,FormatFlags,The following statement contains a magic number: if (r.EndsWith ("' "))  	r = r.Remove (r.Length - 2' 2);  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,FormatFlags,The following statement contains a magic number: r = r.Remove (r.Length - 2' 2);  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,FormatFlags,The following statement contains a magic number: r = r.Remove (r.Length - 2' 2);  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,FormatRelativeDateTime,The following statement contains a magic number: if (str.StartsWith ("1 ")) {  	// Special vowel case: a hour -> an hour  	if (str [2] != 'h')  		str = "a " + str.Substring (2);  	else  		str = "an " + str.Substring (2);  }  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,FormatRelativeDateTime,The following statement contains a magic number: if (str.StartsWith ("1 ")) {  	// Special vowel case: a hour -> an hour  	if (str [2] != 'h')  		str = "a " + str.Substring (2);  	else  		str = "an " + str.Substring (2);  }  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,FormatRelativeDateTime,The following statement contains a magic number: if (str.StartsWith ("1 ")) {  	// Special vowel case: a hour -> an hour  	if (str [2] != 'h')  		str = "a " + str.Substring (2);  	else  		str = "an " + str.Substring (2);  }  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,FormatRelativeDateTime,The following statement contains a magic number: if (str [2] != 'h')  	str = "a " + str.Substring (2);  else  	str = "an " + str.Substring (2);  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,FormatRelativeDateTime,The following statement contains a magic number: if (str [2] != 'h')  	str = "a " + str.Substring (2);  else  	str = "an " + str.Substring (2);  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,FormatRelativeDateTime,The following statement contains a magic number: if (str [2] != 'h')  	str = "a " + str.Substring (2);  else  	str = "an " + str.Substring (2);  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,FormatRelativeDateTime,The following statement contains a magic number: str = "a " + str.Substring (2);  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,FormatRelativeDateTime,The following statement contains a magic number: str = "an " + str.Substring (2);  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,FormatSize,The following statement contains a magic number: while (s > 1024 && i < SizeUnitNames.Length && i < UnitSpecifier) {  	s /= 1024;  	i++;  }  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,FormatSize,The following statement contains a magic number: while (s > 1024 && i < SizeUnitNames.Length && i < UnitSpecifier) {  	s /= 1024;  	i++;  }  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,FormatSize,The following statement contains a magic number: s /= 1024;  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,FormatSize,The following statement contains a magic number: while (s > 1024 && i < SizeUnitNames.Length && i < UnitSpecifier) {  	s /= 1024;  	i++;  }  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,FormatSize,The following statement contains a magic number: while (s > 1024 && i < SizeUnitNames.Length && i < UnitSpecifier) {  	s /= 1024;  	i++;  }  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,FormatSize,The following statement contains a magic number: s /= 1024;  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,GetAssemblyBuildDate,The following statement contains a magic number: if (forceFileDate) {  	dt = GetAssemblyLastWriteTime (assembly);  }  else {  	dt = DateTime.Parse ("01/01/2000").AddDays (AssemblyVersion.Build).AddSeconds (AssemblyVersion.Revision * 2);  	if (TimeZone.IsDaylightSavingTime (dt' TimeZone.CurrentTimeZone.GetDaylightChanges (dt.Year))) {  		dt = dt.AddHours (1);  	}  	if (dt > DateTime.Now || AssemblyVersion.Build < 730 || AssemblyVersion.Revision == 0) {  		dt = GetAssemblyLastWriteTime (assembly);  	}  }  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,GetAssemblyBuildDate,The following statement contains a magic number: if (forceFileDate) {  	dt = GetAssemblyLastWriteTime (assembly);  }  else {  	dt = DateTime.Parse ("01/01/2000").AddDays (AssemblyVersion.Build).AddSeconds (AssemblyVersion.Revision * 2);  	if (TimeZone.IsDaylightSavingTime (dt' TimeZone.CurrentTimeZone.GetDaylightChanges (dt.Year))) {  		dt = dt.AddHours (1);  	}  	if (dt > DateTime.Now || AssemblyVersion.Build < 730 || AssemblyVersion.Revision == 0) {  		dt = GetAssemblyLastWriteTime (assembly);  	}  }  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,GetAssemblyBuildDate,The following statement contains a magic number: dt = DateTime.Parse ("01/01/2000").AddDays (AssemblyVersion.Build).AddSeconds (AssemblyVersion.Revision * 2);  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,GetAssemblyBuildDate,The following statement contains a magic number: if (dt > DateTime.Now || AssemblyVersion.Build < 730 || AssemblyVersion.Revision == 0) {  	dt = GetAssemblyLastWriteTime (assembly);  }  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,GetBytes,The following statement contains a magic number: if (type == Endianness.Little) {  	data [0] = (byte)(n & 0xff);  	data [1] = (byte)((n >> 8) & 0xff);  	data [2] = (byte)((n >> 16) & 0xff);  	data [3] = (byte)((n >> 24) & 0xff);  }  else if (type == Endianness.Big) {  	data [0] = (byte)((n >> 24) & 0xff);  	data [1] = (byte)((n >> 16) & 0xff);  	data [2] = (byte)((n >> 8) & 0xff);  	data [3] = (byte)(n & 0xff);  }  else {  	throw new ArgumentException ();  }  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,GetBytes,The following statement contains a magic number: if (type == Endianness.Little) {  	data [0] = (byte)(n & 0xff);  	data [1] = (byte)((n >> 8) & 0xff);  	data [2] = (byte)((n >> 16) & 0xff);  	data [3] = (byte)((n >> 24) & 0xff);  }  else if (type == Endianness.Big) {  	data [0] = (byte)((n >> 24) & 0xff);  	data [1] = (byte)((n >> 16) & 0xff);  	data [2] = (byte)((n >> 8) & 0xff);  	data [3] = (byte)(n & 0xff);  }  else {  	throw new ArgumentException ();  }  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,GetBytes,The following statement contains a magic number: if (type == Endianness.Little) {  	data [0] = (byte)(n & 0xff);  	data [1] = (byte)((n >> 8) & 0xff);  	data [2] = (byte)((n >> 16) & 0xff);  	data [3] = (byte)((n >> 24) & 0xff);  }  else if (type == Endianness.Big) {  	data [0] = (byte)((n >> 24) & 0xff);  	data [1] = (byte)((n >> 16) & 0xff);  	data [2] = (byte)((n >> 8) & 0xff);  	data [3] = (byte)(n & 0xff);  }  else {  	throw new ArgumentException ();  }  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,GetBytes,The following statement contains a magic number: if (type == Endianness.Little) {  	data [0] = (byte)(n & 0xff);  	data [1] = (byte)((n >> 8) & 0xff);  	data [2] = (byte)((n >> 16) & 0xff);  	data [3] = (byte)((n >> 24) & 0xff);  }  else if (type == Endianness.Big) {  	data [0] = (byte)((n >> 24) & 0xff);  	data [1] = (byte)((n >> 16) & 0xff);  	data [2] = (byte)((n >> 8) & 0xff);  	data [3] = (byte)(n & 0xff);  }  else {  	throw new ArgumentException ();  }  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,GetBytes,The following statement contains a magic number: if (type == Endianness.Little) {  	data [0] = (byte)(n & 0xff);  	data [1] = (byte)((n >> 8) & 0xff);  	data [2] = (byte)((n >> 16) & 0xff);  	data [3] = (byte)((n >> 24) & 0xff);  }  else if (type == Endianness.Big) {  	data [0] = (byte)((n >> 24) & 0xff);  	data [1] = (byte)((n >> 16) & 0xff);  	data [2] = (byte)((n >> 8) & 0xff);  	data [3] = (byte)(n & 0xff);  }  else {  	throw new ArgumentException ();  }  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,GetBytes,The following statement contains a magic number: if (type == Endianness.Little) {  	data [0] = (byte)(n & 0xff);  	data [1] = (byte)((n >> 8) & 0xff);  	data [2] = (byte)((n >> 16) & 0xff);  	data [3] = (byte)((n >> 24) & 0xff);  }  else if (type == Endianness.Big) {  	data [0] = (byte)((n >> 24) & 0xff);  	data [1] = (byte)((n >> 16) & 0xff);  	data [2] = (byte)((n >> 8) & 0xff);  	data [3] = (byte)(n & 0xff);  }  else {  	throw new ArgumentException ();  }  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,GetBytes,The following statement contains a magic number: if (type == Endianness.Little) {  	data [0] = (byte)(n & 0xff);  	data [1] = (byte)((n >> 8) & 0xff);  	data [2] = (byte)((n >> 16) & 0xff);  	data [3] = (byte)((n >> 24) & 0xff);  }  else if (type == Endianness.Big) {  	data [0] = (byte)((n >> 24) & 0xff);  	data [1] = (byte)((n >> 16) & 0xff);  	data [2] = (byte)((n >> 8) & 0xff);  	data [3] = (byte)(n & 0xff);  }  else {  	throw new ArgumentException ();  }  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,GetBytes,The following statement contains a magic number: if (type == Endianness.Little) {  	data [0] = (byte)(n & 0xff);  	data [1] = (byte)((n >> 8) & 0xff);  	data [2] = (byte)((n >> 16) & 0xff);  	data [3] = (byte)((n >> 24) & 0xff);  }  else if (type == Endianness.Big) {  	data [0] = (byte)((n >> 24) & 0xff);  	data [1] = (byte)((n >> 16) & 0xff);  	data [2] = (byte)((n >> 8) & 0xff);  	data [3] = (byte)(n & 0xff);  }  else {  	throw new ArgumentException ();  }  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,GetBytes,The following statement contains a magic number: if (type == Endianness.Little) {  	data [0] = (byte)(n & 0xff);  	data [1] = (byte)((n >> 8) & 0xff);  	data [2] = (byte)((n >> 16) & 0xff);  	data [3] = (byte)((n >> 24) & 0xff);  }  else if (type == Endianness.Big) {  	data [0] = (byte)((n >> 24) & 0xff);  	data [1] = (byte)((n >> 16) & 0xff);  	data [2] = (byte)((n >> 8) & 0xff);  	data [3] = (byte)(n & 0xff);  }  else {  	throw new ArgumentException ();  }  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,GetBytes,The following statement contains a magic number: if (type == Endianness.Little) {  	data [0] = (byte)(n & 0xff);  	data [1] = (byte)((n >> 8) & 0xff);  	data [2] = (byte)((n >> 16) & 0xff);  	data [3] = (byte)((n >> 24) & 0xff);  }  else if (type == Endianness.Big) {  	data [0] = (byte)((n >> 24) & 0xff);  	data [1] = (byte)((n >> 16) & 0xff);  	data [2] = (byte)((n >> 8) & 0xff);  	data [3] = (byte)(n & 0xff);  }  else {  	throw new ArgumentException ();  }  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,GetBytes,The following statement contains a magic number: data [1] = (byte)((n >> 8) & 0xff);  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,GetBytes,The following statement contains a magic number: data [2] = (byte)((n >> 16) & 0xff);  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,GetBytes,The following statement contains a magic number: data [2] = (byte)((n >> 16) & 0xff);  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,GetBytes,The following statement contains a magic number: data [3] = (byte)((n >> 24) & 0xff);  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,GetBytes,The following statement contains a magic number: data [3] = (byte)((n >> 24) & 0xff);  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,GetBytes,The following statement contains a magic number: if (type == Endianness.Big) {  	data [0] = (byte)((n >> 24) & 0xff);  	data [1] = (byte)((n >> 16) & 0xff);  	data [2] = (byte)((n >> 8) & 0xff);  	data [3] = (byte)(n & 0xff);  }  else {  	throw new ArgumentException ();  }  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,GetBytes,The following statement contains a magic number: if (type == Endianness.Big) {  	data [0] = (byte)((n >> 24) & 0xff);  	data [1] = (byte)((n >> 16) & 0xff);  	data [2] = (byte)((n >> 8) & 0xff);  	data [3] = (byte)(n & 0xff);  }  else {  	throw new ArgumentException ();  }  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,GetBytes,The following statement contains a magic number: if (type == Endianness.Big) {  	data [0] = (byte)((n >> 24) & 0xff);  	data [1] = (byte)((n >> 16) & 0xff);  	data [2] = (byte)((n >> 8) & 0xff);  	data [3] = (byte)(n & 0xff);  }  else {  	throw new ArgumentException ();  }  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,GetBytes,The following statement contains a magic number: if (type == Endianness.Big) {  	data [0] = (byte)((n >> 24) & 0xff);  	data [1] = (byte)((n >> 16) & 0xff);  	data [2] = (byte)((n >> 8) & 0xff);  	data [3] = (byte)(n & 0xff);  }  else {  	throw new ArgumentException ();  }  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,GetBytes,The following statement contains a magic number: if (type == Endianness.Big) {  	data [0] = (byte)((n >> 24) & 0xff);  	data [1] = (byte)((n >> 16) & 0xff);  	data [2] = (byte)((n >> 8) & 0xff);  	data [3] = (byte)(n & 0xff);  }  else {  	throw new ArgumentException ();  }  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,GetBytes,The following statement contains a magic number: data [0] = (byte)((n >> 24) & 0xff);  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,GetBytes,The following statement contains a magic number: data [1] = (byte)((n >> 16) & 0xff);  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,GetBytes,The following statement contains a magic number: data [2] = (byte)((n >> 8) & 0xff);  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,GetBytes,The following statement contains a magic number: data [2] = (byte)((n >> 8) & 0xff);  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,GetBytes,The following statement contains a magic number: data [3] = (byte)(n & 0xff);  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,GetBytes,The following statement contains a magic number: if (type == Endianness.Little) {  	data [0] = (byte)(n & 0xff);  	data [1] = (byte)((n >> 8) & 0xff);  	data [2] = (byte)((n >> 16) & 0xff);  	data [3] = (byte)((n >> 24) & 0xff);  }  else if (type == Endianness.Big) {  	data [0] = (byte)((n >> 24) & 0xff);  	data [1] = (byte)((n >> 16) & 0xff);  	data [2] = (byte)((n >> 8) & 0xff);  	data [3] = (byte)(n & 0xff);  }  else {  	throw new ArgumentException ();  }  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,GetBytes,The following statement contains a magic number: if (type == Endianness.Little) {  	data [0] = (byte)(n & 0xff);  	data [1] = (byte)((n >> 8) & 0xff);  	data [2] = (byte)((n >> 16) & 0xff);  	data [3] = (byte)((n >> 24) & 0xff);  }  else if (type == Endianness.Big) {  	data [0] = (byte)((n >> 24) & 0xff);  	data [1] = (byte)((n >> 16) & 0xff);  	data [2] = (byte)((n >> 8) & 0xff);  	data [3] = (byte)(n & 0xff);  }  else {  	throw new ArgumentException ();  }  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,GetBytes,The following statement contains a magic number: if (type == Endianness.Little) {  	data [0] = (byte)(n & 0xff);  	data [1] = (byte)((n >> 8) & 0xff);  	data [2] = (byte)((n >> 16) & 0xff);  	data [3] = (byte)((n >> 24) & 0xff);  }  else if (type == Endianness.Big) {  	data [0] = (byte)((n >> 24) & 0xff);  	data [1] = (byte)((n >> 16) & 0xff);  	data [2] = (byte)((n >> 8) & 0xff);  	data [3] = (byte)(n & 0xff);  }  else {  	throw new ArgumentException ();  }  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,GetBytes,The following statement contains a magic number: if (type == Endianness.Little) {  	data [0] = (byte)(n & 0xff);  	data [1] = (byte)((n >> 8) & 0xff);  	data [2] = (byte)((n >> 16) & 0xff);  	data [3] = (byte)((n >> 24) & 0xff);  }  else if (type == Endianness.Big) {  	data [0] = (byte)((n >> 24) & 0xff);  	data [1] = (byte)((n >> 16) & 0xff);  	data [2] = (byte)((n >> 8) & 0xff);  	data [3] = (byte)(n & 0xff);  }  else {  	throw new ArgumentException ();  }  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,GetBytes,The following statement contains a magic number: if (type == Endianness.Little) {  	data [0] = (byte)(n & 0xff);  	data [1] = (byte)((n >> 8) & 0xff);  	data [2] = (byte)((n >> 16) & 0xff);  	data [3] = (byte)((n >> 24) & 0xff);  }  else if (type == Endianness.Big) {  	data [0] = (byte)((n >> 24) & 0xff);  	data [1] = (byte)((n >> 16) & 0xff);  	data [2] = (byte)((n >> 8) & 0xff);  	data [3] = (byte)(n & 0xff);  }  else {  	throw new ArgumentException ();  }  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,GetBytes,The following statement contains a magic number: if (type == Endianness.Little) {  	data [0] = (byte)(n & 0xff);  	data [1] = (byte)((n >> 8) & 0xff);  	data [2] = (byte)((n >> 16) & 0xff);  	data [3] = (byte)((n >> 24) & 0xff);  }  else if (type == Endianness.Big) {  	data [0] = (byte)((n >> 24) & 0xff);  	data [1] = (byte)((n >> 16) & 0xff);  	data [2] = (byte)((n >> 8) & 0xff);  	data [3] = (byte)(n & 0xff);  }  else {  	throw new ArgumentException ();  }  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,GetBytes,The following statement contains a magic number: if (type == Endianness.Little) {  	data [0] = (byte)(n & 0xff);  	data [1] = (byte)((n >> 8) & 0xff);  	data [2] = (byte)((n >> 16) & 0xff);  	data [3] = (byte)((n >> 24) & 0xff);  }  else if (type == Endianness.Big) {  	data [0] = (byte)((n >> 24) & 0xff);  	data [1] = (byte)((n >> 16) & 0xff);  	data [2] = (byte)((n >> 8) & 0xff);  	data [3] = (byte)(n & 0xff);  }  else {  	throw new ArgumentException ();  }  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,GetBytes,The following statement contains a magic number: if (type == Endianness.Little) {  	data [0] = (byte)(n & 0xff);  	data [1] = (byte)((n >> 8) & 0xff);  	data [2] = (byte)((n >> 16) & 0xff);  	data [3] = (byte)((n >> 24) & 0xff);  }  else if (type == Endianness.Big) {  	data [0] = (byte)((n >> 24) & 0xff);  	data [1] = (byte)((n >> 16) & 0xff);  	data [2] = (byte)((n >> 8) & 0xff);  	data [3] = (byte)(n & 0xff);  }  else {  	throw new ArgumentException ();  }  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,GetBytes,The following statement contains a magic number: if (type == Endianness.Little) {  	data [0] = (byte)(n & 0xff);  	data [1] = (byte)((n >> 8) & 0xff);  	data [2] = (byte)((n >> 16) & 0xff);  	data [3] = (byte)((n >> 24) & 0xff);  }  else if (type == Endianness.Big) {  	data [0] = (byte)((n >> 24) & 0xff);  	data [1] = (byte)((n >> 16) & 0xff);  	data [2] = (byte)((n >> 8) & 0xff);  	data [3] = (byte)(n & 0xff);  }  else {  	throw new ArgumentException ();  }  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,GetBytes,The following statement contains a magic number: if (type == Endianness.Little) {  	data [0] = (byte)(n & 0xff);  	data [1] = (byte)((n >> 8) & 0xff);  	data [2] = (byte)((n >> 16) & 0xff);  	data [3] = (byte)((n >> 24) & 0xff);  }  else if (type == Endianness.Big) {  	data [0] = (byte)((n >> 24) & 0xff);  	data [1] = (byte)((n >> 16) & 0xff);  	data [2] = (byte)((n >> 8) & 0xff);  	data [3] = (byte)(n & 0xff);  }  else {  	throw new ArgumentException ();  }  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,GetBytes,The following statement contains a magic number: data [1] = (byte)((n >> 8) & 0xff);  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,GetBytes,The following statement contains a magic number: data [2] = (byte)((n >> 16) & 0xff);  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,GetBytes,The following statement contains a magic number: data [2] = (byte)((n >> 16) & 0xff);  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,GetBytes,The following statement contains a magic number: data [3] = (byte)((n >> 24) & 0xff);  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,GetBytes,The following statement contains a magic number: data [3] = (byte)((n >> 24) & 0xff);  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,GetBytes,The following statement contains a magic number: if (type == Endianness.Big) {  	data [0] = (byte)((n >> 24) & 0xff);  	data [1] = (byte)((n >> 16) & 0xff);  	data [2] = (byte)((n >> 8) & 0xff);  	data [3] = (byte)(n & 0xff);  }  else {  	throw new ArgumentException ();  }  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,GetBytes,The following statement contains a magic number: if (type == Endianness.Big) {  	data [0] = (byte)((n >> 24) & 0xff);  	data [1] = (byte)((n >> 16) & 0xff);  	data [2] = (byte)((n >> 8) & 0xff);  	data [3] = (byte)(n & 0xff);  }  else {  	throw new ArgumentException ();  }  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,GetBytes,The following statement contains a magic number: if (type == Endianness.Big) {  	data [0] = (byte)((n >> 24) & 0xff);  	data [1] = (byte)((n >> 16) & 0xff);  	data [2] = (byte)((n >> 8) & 0xff);  	data [3] = (byte)(n & 0xff);  }  else {  	throw new ArgumentException ();  }  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,GetBytes,The following statement contains a magic number: if (type == Endianness.Big) {  	data [0] = (byte)((n >> 24) & 0xff);  	data [1] = (byte)((n >> 16) & 0xff);  	data [2] = (byte)((n >> 8) & 0xff);  	data [3] = (byte)(n & 0xff);  }  else {  	throw new ArgumentException ();  }  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,GetBytes,The following statement contains a magic number: if (type == Endianness.Big) {  	data [0] = (byte)((n >> 24) & 0xff);  	data [1] = (byte)((n >> 16) & 0xff);  	data [2] = (byte)((n >> 8) & 0xff);  	data [3] = (byte)(n & 0xff);  }  else {  	throw new ArgumentException ();  }  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,GetBytes,The following statement contains a magic number: data [0] = (byte)((n >> 24) & 0xff);  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,GetBytes,The following statement contains a magic number: data [1] = (byte)((n >> 16) & 0xff);  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,GetBytes,The following statement contains a magic number: data [2] = (byte)((n >> 8) & 0xff);  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,GetBytes,The following statement contains a magic number: data [2] = (byte)((n >> 8) & 0xff);  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,GetBytes,The following statement contains a magic number: data [3] = (byte)(n & 0xff);  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,GetBytes,The following statement contains a magic number: if (type == Endianness.Little) {  	data [0] = (byte)(n & 0xff);  	data [1] = (byte)((n >> 8) & 0xff);  }  else if (type == Endianness.Big) {  	data [0] = (byte)((n >> 8) & 0xff);  	data [1] = (byte)(n & 0xff);  }  else {  	throw new ArgumentException ();  }  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,GetBytes,The following statement contains a magic number: if (type == Endianness.Little) {  	data [0] = (byte)(n & 0xff);  	data [1] = (byte)((n >> 8) & 0xff);  }  else if (type == Endianness.Big) {  	data [0] = (byte)((n >> 8) & 0xff);  	data [1] = (byte)(n & 0xff);  }  else {  	throw new ArgumentException ();  }  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,GetBytes,The following statement contains a magic number: data [1] = (byte)((n >> 8) & 0xff);  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,GetBytes,The following statement contains a magic number: if (type == Endianness.Big) {  	data [0] = (byte)((n >> 8) & 0xff);  	data [1] = (byte)(n & 0xff);  }  else {  	throw new ArgumentException ();  }  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,GetBytes,The following statement contains a magic number: data [0] = (byte)((n >> 8) & 0xff);  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,GetDateTimeFromUnixTime,The following statement contains a magic number: return (new DateTime (1970' 1' 1' 0' 0' 0)).Add (new TimeSpan (0' 0' 0' (int)time));  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,GetPrime,The following statement contains a magic number: for (int i = minimum | 1; i < int.MaxValue; i += 2) {  	if (IsPrime (i))  		return i;  }  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,GetPrime,The following statement contains a magic number: i += 2
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,GetRectangle,The following statement contains a magic number: return new Rectangle (int.Parse (split [0])' int.Parse (split [1])' int.Parse (split [2])' int.Parse (split [3]));  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,GetRectangle,The following statement contains a magic number: return new Rectangle (int.Parse (split [0])' int.Parse (split [1])' int.Parse (split [2])' int.Parse (split [3]));  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,IsPrime,The following statement contains a magic number: if ((number & 1) == 0)  	return number == 2;  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,IsPrime,The following statement contains a magic number: return number == 2;  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,IsPrime,The following statement contains a magic number: for (int i = 3; i <= x; i += 2) {  	if ((number % i) == 0)  		return false;  }  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,IsPrime,The following statement contains a magic number: for (int i = 3; i <= x; i += 2) {  	if ((number % i) == 0)  		return false;  }  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,IsPrime,The following statement contains a magic number: i += 2
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,ReadInt32,The following statement contains a magic number: if (s.Read (buffer' 0' 4) == 0)  	throw new EndOfStreamException ();  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,ReadUInt32,The following statement contains a magic number: if (s.Read (buffer' 0' 4) == 0)  	throw new EndOfStreamException ();  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,ReadUnicodeString,The following statement contains a magic number: while (i < length) {  	int b = s.ReadByte ();  	if (b == -1)  		break;  	int b2 = s.ReadByte ();  	if (b2 == -1)  		break;  	str.Append (Encoding.Unicode.GetChars (new byte[] {  		(byte)b'  		(byte)b2  	}));  	i += 2;  }  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,ReadUnicodeString,The following statement contains a magic number: i += 2;  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,Reverse,The following statement contains a magic number: return b4 | (b3 << 8) | (b2 << 16) | (b1 << 24);  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,Reverse,The following statement contains a magic number: return b4 | (b3 << 8) | (b2 << 16) | (b1 << 24);  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,Reverse,The following statement contains a magic number: return b4 | (b3 << 8) | (b2 << 16) | (b1 << 24);  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,Reverse,The following statement contains a magic number: b0 <<= 24;  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,Reverse,The following statement contains a magic number: b1 <<= 16;  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,Reverse,The following statement contains a magic number: b2 <<= 8;  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,Reverse,The following statement contains a magic number: return (ushort)(b2 | (b1 << 8));  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,RoundUpTwo,The following statement contains a magic number: value |= value >> 2;  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,RoundUpTwo,The following statement contains a magic number: value |= value >> 4;  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,RoundUpTwo,The following statement contains a magic number: value |= value >> 8;  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,RoundUpTwo,The following statement contains a magic number: value |= value >> 16;  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,RoundUpTwo,The following statement contains a magic number: value |= value >> 2;  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,RoundUpTwo,The following statement contains a magic number: value |= value >> 4;  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,RoundUpTwo,The following statement contains a magic number: value |= value >> 8;  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,RoundUpTwo,The following statement contains a magic number: value |= value >> 16;  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,RoundUpTwo,The following statement contains a magic number: value |= value >> 32;  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,ToInt32,The following statement contains a magic number: if (type == Endianness.Little) {  	return (data [0]) | (data [1] << 8) | (data [2] << 16) | (data [3] << 24);  }  else if (type == Endianness.Big) {  	return (data [0] << 24) | (data [1] << 16) | (data [2] << 8) | (data [3]);  }  else {  	throw new ArgumentException ();  }  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,ToInt32,The following statement contains a magic number: if (type == Endianness.Little) {  	return (data [0]) | (data [1] << 8) | (data [2] << 16) | (data [3] << 24);  }  else if (type == Endianness.Big) {  	return (data [0] << 24) | (data [1] << 16) | (data [2] << 8) | (data [3]);  }  else {  	throw new ArgumentException ();  }  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,ToInt32,The following statement contains a magic number: if (type == Endianness.Little) {  	return (data [0]) | (data [1] << 8) | (data [2] << 16) | (data [3] << 24);  }  else if (type == Endianness.Big) {  	return (data [0] << 24) | (data [1] << 16) | (data [2] << 8) | (data [3]);  }  else {  	throw new ArgumentException ();  }  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,ToInt32,The following statement contains a magic number: if (type == Endianness.Little) {  	return (data [0]) | (data [1] << 8) | (data [2] << 16) | (data [3] << 24);  }  else if (type == Endianness.Big) {  	return (data [0] << 24) | (data [1] << 16) | (data [2] << 8) | (data [3]);  }  else {  	throw new ArgumentException ();  }  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,ToInt32,The following statement contains a magic number: if (type == Endianness.Little) {  	return (data [0]) | (data [1] << 8) | (data [2] << 16) | (data [3] << 24);  }  else if (type == Endianness.Big) {  	return (data [0] << 24) | (data [1] << 16) | (data [2] << 8) | (data [3]);  }  else {  	throw new ArgumentException ();  }  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,ToInt32,The following statement contains a magic number: if (type == Endianness.Little) {  	return (data [0]) | (data [1] << 8) | (data [2] << 16) | (data [3] << 24);  }  else if (type == Endianness.Big) {  	return (data [0] << 24) | (data [1] << 16) | (data [2] << 8) | (data [3]);  }  else {  	throw new ArgumentException ();  }  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,ToInt32,The following statement contains a magic number: if (type == Endianness.Little) {  	return (data [0]) | (data [1] << 8) | (data [2] << 16) | (data [3] << 24);  }  else if (type == Endianness.Big) {  	return (data [0] << 24) | (data [1] << 16) | (data [2] << 8) | (data [3]);  }  else {  	throw new ArgumentException ();  }  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,ToInt32,The following statement contains a magic number: if (type == Endianness.Little) {  	return (data [0]) | (data [1] << 8) | (data [2] << 16) | (data [3] << 24);  }  else if (type == Endianness.Big) {  	return (data [0] << 24) | (data [1] << 16) | (data [2] << 8) | (data [3]);  }  else {  	throw new ArgumentException ();  }  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,ToInt32,The following statement contains a magic number: if (type == Endianness.Little) {  	return (data [0]) | (data [1] << 8) | (data [2] << 16) | (data [3] << 24);  }  else if (type == Endianness.Big) {  	return (data [0] << 24) | (data [1] << 16) | (data [2] << 8) | (data [3]);  }  else {  	throw new ArgumentException ();  }  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,ToInt32,The following statement contains a magic number: if (type == Endianness.Little) {  	return (data [0]) | (data [1] << 8) | (data [2] << 16) | (data [3] << 24);  }  else if (type == Endianness.Big) {  	return (data [0] << 24) | (data [1] << 16) | (data [2] << 8) | (data [3]);  }  else {  	throw new ArgumentException ();  }  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,ToInt32,The following statement contains a magic number: return (data [0]) | (data [1] << 8) | (data [2] << 16) | (data [3] << 24);  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,ToInt32,The following statement contains a magic number: return (data [0]) | (data [1] << 8) | (data [2] << 16) | (data [3] << 24);  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,ToInt32,The following statement contains a magic number: return (data [0]) | (data [1] << 8) | (data [2] << 16) | (data [3] << 24);  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,ToInt32,The following statement contains a magic number: return (data [0]) | (data [1] << 8) | (data [2] << 16) | (data [3] << 24);  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,ToInt32,The following statement contains a magic number: return (data [0]) | (data [1] << 8) | (data [2] << 16) | (data [3] << 24);  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,ToInt32,The following statement contains a magic number: if (type == Endianness.Big) {  	return (data [0] << 24) | (data [1] << 16) | (data [2] << 8) | (data [3]);  }  else {  	throw new ArgumentException ();  }  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,ToInt32,The following statement contains a magic number: if (type == Endianness.Big) {  	return (data [0] << 24) | (data [1] << 16) | (data [2] << 8) | (data [3]);  }  else {  	throw new ArgumentException ();  }  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,ToInt32,The following statement contains a magic number: if (type == Endianness.Big) {  	return (data [0] << 24) | (data [1] << 16) | (data [2] << 8) | (data [3]);  }  else {  	throw new ArgumentException ();  }  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,ToInt32,The following statement contains a magic number: if (type == Endianness.Big) {  	return (data [0] << 24) | (data [1] << 16) | (data [2] << 8) | (data [3]);  }  else {  	throw new ArgumentException ();  }  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,ToInt32,The following statement contains a magic number: if (type == Endianness.Big) {  	return (data [0] << 24) | (data [1] << 16) | (data [2] << 8) | (data [3]);  }  else {  	throw new ArgumentException ();  }  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,ToInt32,The following statement contains a magic number: return (data [0] << 24) | (data [1] << 16) | (data [2] << 8) | (data [3]);  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,ToInt32,The following statement contains a magic number: return (data [0] << 24) | (data [1] << 16) | (data [2] << 8) | (data [3]);  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,ToInt32,The following statement contains a magic number: return (data [0] << 24) | (data [1] << 16) | (data [2] << 8) | (data [3]);  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,ToInt32,The following statement contains a magic number: return (data [0] << 24) | (data [1] << 16) | (data [2] << 8) | (data [3]);  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,ToInt32,The following statement contains a magic number: return (data [0] << 24) | (data [1] << 16) | (data [2] << 8) | (data [3]);  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,ToInt64,The following statement contains a magic number: if (type == Endianness.Little) {  	return (data [0]) | (data [1] << 8) | (data [2] << 16) | (data [3] << 24) | (data [4] << 32) | (data [5] << 40) | (data [6] << 48) | (data [7] << 56);  }  else if (type == Endianness.Big) {  	return (data [0] << 56) | (data [1] << 48) | (data [2] << 40) | (data [3] << 32) | (data [4] << 24) | (data [5] << 16) | (data [6] << 8) | (data [7]);  }  else {  	throw new ArgumentException ();  }  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,ToInt64,The following statement contains a magic number: if (type == Endianness.Little) {  	return (data [0]) | (data [1] << 8) | (data [2] << 16) | (data [3] << 24) | (data [4] << 32) | (data [5] << 40) | (data [6] << 48) | (data [7] << 56);  }  else if (type == Endianness.Big) {  	return (data [0] << 56) | (data [1] << 48) | (data [2] << 40) | (data [3] << 32) | (data [4] << 24) | (data [5] << 16) | (data [6] << 8) | (data [7]);  }  else {  	throw new ArgumentException ();  }  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,ToInt64,The following statement contains a magic number: if (type == Endianness.Little) {  	return (data [0]) | (data [1] << 8) | (data [2] << 16) | (data [3] << 24) | (data [4] << 32) | (data [5] << 40) | (data [6] << 48) | (data [7] << 56);  }  else if (type == Endianness.Big) {  	return (data [0] << 56) | (data [1] << 48) | (data [2] << 40) | (data [3] << 32) | (data [4] << 24) | (data [5] << 16) | (data [6] << 8) | (data [7]);  }  else {  	throw new ArgumentException ();  }  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,ToInt64,The following statement contains a magic number: if (type == Endianness.Little) {  	return (data [0]) | (data [1] << 8) | (data [2] << 16) | (data [3] << 24) | (data [4] << 32) | (data [5] << 40) | (data [6] << 48) | (data [7] << 56);  }  else if (type == Endianness.Big) {  	return (data [0] << 56) | (data [1] << 48) | (data [2] << 40) | (data [3] << 32) | (data [4] << 24) | (data [5] << 16) | (data [6] << 8) | (data [7]);  }  else {  	throw new ArgumentException ();  }  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,ToInt64,The following statement contains a magic number: if (type == Endianness.Little) {  	return (data [0]) | (data [1] << 8) | (data [2] << 16) | (data [3] << 24) | (data [4] << 32) | (data [5] << 40) | (data [6] << 48) | (data [7] << 56);  }  else if (type == Endianness.Big) {  	return (data [0] << 56) | (data [1] << 48) | (data [2] << 40) | (data [3] << 32) | (data [4] << 24) | (data [5] << 16) | (data [6] << 8) | (data [7]);  }  else {  	throw new ArgumentException ();  }  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,ToInt64,The following statement contains a magic number: if (type == Endianness.Little) {  	return (data [0]) | (data [1] << 8) | (data [2] << 16) | (data [3] << 24) | (data [4] << 32) | (data [5] << 40) | (data [6] << 48) | (data [7] << 56);  }  else if (type == Endianness.Big) {  	return (data [0] << 56) | (data [1] << 48) | (data [2] << 40) | (data [3] << 32) | (data [4] << 24) | (data [5] << 16) | (data [6] << 8) | (data [7]);  }  else {  	throw new ArgumentException ();  }  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,ToInt64,The following statement contains a magic number: if (type == Endianness.Little) {  	return (data [0]) | (data [1] << 8) | (data [2] << 16) | (data [3] << 24) | (data [4] << 32) | (data [5] << 40) | (data [6] << 48) | (data [7] << 56);  }  else if (type == Endianness.Big) {  	return (data [0] << 56) | (data [1] << 48) | (data [2] << 40) | (data [3] << 32) | (data [4] << 24) | (data [5] << 16) | (data [6] << 8) | (data [7]);  }  else {  	throw new ArgumentException ();  }  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,ToInt64,The following statement contains a magic number: if (type == Endianness.Little) {  	return (data [0]) | (data [1] << 8) | (data [2] << 16) | (data [3] << 24) | (data [4] << 32) | (data [5] << 40) | (data [6] << 48) | (data [7] << 56);  }  else if (type == Endianness.Big) {  	return (data [0] << 56) | (data [1] << 48) | (data [2] << 40) | (data [3] << 32) | (data [4] << 24) | (data [5] << 16) | (data [6] << 8) | (data [7]);  }  else {  	throw new ArgumentException ();  }  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,ToInt64,The following statement contains a magic number: if (type == Endianness.Little) {  	return (data [0]) | (data [1] << 8) | (data [2] << 16) | (data [3] << 24) | (data [4] << 32) | (data [5] << 40) | (data [6] << 48) | (data [7] << 56);  }  else if (type == Endianness.Big) {  	return (data [0] << 56) | (data [1] << 48) | (data [2] << 40) | (data [3] << 32) | (data [4] << 24) | (data [5] << 16) | (data [6] << 8) | (data [7]);  }  else {  	throw new ArgumentException ();  }  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,ToInt64,The following statement contains a magic number: if (type == Endianness.Little) {  	return (data [0]) | (data [1] << 8) | (data [2] << 16) | (data [3] << 24) | (data [4] << 32) | (data [5] << 40) | (data [6] << 48) | (data [7] << 56);  }  else if (type == Endianness.Big) {  	return (data [0] << 56) | (data [1] << 48) | (data [2] << 40) | (data [3] << 32) | (data [4] << 24) | (data [5] << 16) | (data [6] << 8) | (data [7]);  }  else {  	throw new ArgumentException ();  }  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,ToInt64,The following statement contains a magic number: if (type == Endianness.Little) {  	return (data [0]) | (data [1] << 8) | (data [2] << 16) | (data [3] << 24) | (data [4] << 32) | (data [5] << 40) | (data [6] << 48) | (data [7] << 56);  }  else if (type == Endianness.Big) {  	return (data [0] << 56) | (data [1] << 48) | (data [2] << 40) | (data [3] << 32) | (data [4] << 24) | (data [5] << 16) | (data [6] << 8) | (data [7]);  }  else {  	throw new ArgumentException ();  }  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,ToInt64,The following statement contains a magic number: if (type == Endianness.Little) {  	return (data [0]) | (data [1] << 8) | (data [2] << 16) | (data [3] << 24) | (data [4] << 32) | (data [5] << 40) | (data [6] << 48) | (data [7] << 56);  }  else if (type == Endianness.Big) {  	return (data [0] << 56) | (data [1] << 48) | (data [2] << 40) | (data [3] << 32) | (data [4] << 24) | (data [5] << 16) | (data [6] << 8) | (data [7]);  }  else {  	throw new ArgumentException ();  }  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,ToInt64,The following statement contains a magic number: if (type == Endianness.Little) {  	return (data [0]) | (data [1] << 8) | (data [2] << 16) | (data [3] << 24) | (data [4] << 32) | (data [5] << 40) | (data [6] << 48) | (data [7] << 56);  }  else if (type == Endianness.Big) {  	return (data [0] << 56) | (data [1] << 48) | (data [2] << 40) | (data [3] << 32) | (data [4] << 24) | (data [5] << 16) | (data [6] << 8) | (data [7]);  }  else {  	throw new ArgumentException ();  }  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,ToInt64,The following statement contains a magic number: if (type == Endianness.Little) {  	return (data [0]) | (data [1] << 8) | (data [2] << 16) | (data [3] << 24) | (data [4] << 32) | (data [5] << 40) | (data [6] << 48) | (data [7] << 56);  }  else if (type == Endianness.Big) {  	return (data [0] << 56) | (data [1] << 48) | (data [2] << 40) | (data [3] << 32) | (data [4] << 24) | (data [5] << 16) | (data [6] << 8) | (data [7]);  }  else {  	throw new ArgumentException ();  }  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,ToInt64,The following statement contains a magic number: if (type == Endianness.Little) {  	return (data [0]) | (data [1] << 8) | (data [2] << 16) | (data [3] << 24) | (data [4] << 32) | (data [5] << 40) | (data [6] << 48) | (data [7] << 56);  }  else if (type == Endianness.Big) {  	return (data [0] << 56) | (data [1] << 48) | (data [2] << 40) | (data [3] << 32) | (data [4] << 24) | (data [5] << 16) | (data [6] << 8) | (data [7]);  }  else {  	throw new ArgumentException ();  }  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,ToInt64,The following statement contains a magic number: if (type == Endianness.Little) {  	return (data [0]) | (data [1] << 8) | (data [2] << 16) | (data [3] << 24) | (data [4] << 32) | (data [5] << 40) | (data [6] << 48) | (data [7] << 56);  }  else if (type == Endianness.Big) {  	return (data [0] << 56) | (data [1] << 48) | (data [2] << 40) | (data [3] << 32) | (data [4] << 24) | (data [5] << 16) | (data [6] << 8) | (data [7]);  }  else {  	throw new ArgumentException ();  }  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,ToInt64,The following statement contains a magic number: if (type == Endianness.Little) {  	return (data [0]) | (data [1] << 8) | (data [2] << 16) | (data [3] << 24) | (data [4] << 32) | (data [5] << 40) | (data [6] << 48) | (data [7] << 56);  }  else if (type == Endianness.Big) {  	return (data [0] << 56) | (data [1] << 48) | (data [2] << 40) | (data [3] << 32) | (data [4] << 24) | (data [5] << 16) | (data [6] << 8) | (data [7]);  }  else {  	throw new ArgumentException ();  }  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,ToInt64,The following statement contains a magic number: if (type == Endianness.Little) {  	return (data [0]) | (data [1] << 8) | (data [2] << 16) | (data [3] << 24) | (data [4] << 32) | (data [5] << 40) | (data [6] << 48) | (data [7] << 56);  }  else if (type == Endianness.Big) {  	return (data [0] << 56) | (data [1] << 48) | (data [2] << 40) | (data [3] << 32) | (data [4] << 24) | (data [5] << 16) | (data [6] << 8) | (data [7]);  }  else {  	throw new ArgumentException ();  }  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,ToInt64,The following statement contains a magic number: if (type == Endianness.Little) {  	return (data [0]) | (data [1] << 8) | (data [2] << 16) | (data [3] << 24) | (data [4] << 32) | (data [5] << 40) | (data [6] << 48) | (data [7] << 56);  }  else if (type == Endianness.Big) {  	return (data [0] << 56) | (data [1] << 48) | (data [2] << 40) | (data [3] << 32) | (data [4] << 24) | (data [5] << 16) | (data [6] << 8) | (data [7]);  }  else {  	throw new ArgumentException ();  }  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,ToInt64,The following statement contains a magic number: if (type == Endianness.Little) {  	return (data [0]) | (data [1] << 8) | (data [2] << 16) | (data [3] << 24) | (data [4] << 32) | (data [5] << 40) | (data [6] << 48) | (data [7] << 56);  }  else if (type == Endianness.Big) {  	return (data [0] << 56) | (data [1] << 48) | (data [2] << 40) | (data [3] << 32) | (data [4] << 24) | (data [5] << 16) | (data [6] << 8) | (data [7]);  }  else {  	throw new ArgumentException ();  }  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,ToInt64,The following statement contains a magic number: if (type == Endianness.Little) {  	return (data [0]) | (data [1] << 8) | (data [2] << 16) | (data [3] << 24) | (data [4] << 32) | (data [5] << 40) | (data [6] << 48) | (data [7] << 56);  }  else if (type == Endianness.Big) {  	return (data [0] << 56) | (data [1] << 48) | (data [2] << 40) | (data [3] << 32) | (data [4] << 24) | (data [5] << 16) | (data [6] << 8) | (data [7]);  }  else {  	throw new ArgumentException ();  }  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,ToInt64,The following statement contains a magic number: if (type == Endianness.Little) {  	return (data [0]) | (data [1] << 8) | (data [2] << 16) | (data [3] << 24) | (data [4] << 32) | (data [5] << 40) | (data [6] << 48) | (data [7] << 56);  }  else if (type == Endianness.Big) {  	return (data [0] << 56) | (data [1] << 48) | (data [2] << 40) | (data [3] << 32) | (data [4] << 24) | (data [5] << 16) | (data [6] << 8) | (data [7]);  }  else {  	throw new ArgumentException ();  }  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,ToInt64,The following statement contains a magic number: if (type == Endianness.Little) {  	return (data [0]) | (data [1] << 8) | (data [2] << 16) | (data [3] << 24) | (data [4] << 32) | (data [5] << 40) | (data [6] << 48) | (data [7] << 56);  }  else if (type == Endianness.Big) {  	return (data [0] << 56) | (data [1] << 48) | (data [2] << 40) | (data [3] << 32) | (data [4] << 24) | (data [5] << 16) | (data [6] << 8) | (data [7]);  }  else {  	throw new ArgumentException ();  }  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,ToInt64,The following statement contains a magic number: if (type == Endianness.Little) {  	return (data [0]) | (data [1] << 8) | (data [2] << 16) | (data [3] << 24) | (data [4] << 32) | (data [5] << 40) | (data [6] << 48) | (data [7] << 56);  }  else if (type == Endianness.Big) {  	return (data [0] << 56) | (data [1] << 48) | (data [2] << 40) | (data [3] << 32) | (data [4] << 24) | (data [5] << 16) | (data [6] << 8) | (data [7]);  }  else {  	throw new ArgumentException ();  }  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,ToInt64,The following statement contains a magic number: if (type == Endianness.Little) {  	return (data [0]) | (data [1] << 8) | (data [2] << 16) | (data [3] << 24) | (data [4] << 32) | (data [5] << 40) | (data [6] << 48) | (data [7] << 56);  }  else if (type == Endianness.Big) {  	return (data [0] << 56) | (data [1] << 48) | (data [2] << 40) | (data [3] << 32) | (data [4] << 24) | (data [5] << 16) | (data [6] << 8) | (data [7]);  }  else {  	throw new ArgumentException ();  }  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,ToInt64,The following statement contains a magic number: if (type == Endianness.Little) {  	return (data [0]) | (data [1] << 8) | (data [2] << 16) | (data [3] << 24) | (data [4] << 32) | (data [5] << 40) | (data [6] << 48) | (data [7] << 56);  }  else if (type == Endianness.Big) {  	return (data [0] << 56) | (data [1] << 48) | (data [2] << 40) | (data [3] << 32) | (data [4] << 24) | (data [5] << 16) | (data [6] << 8) | (data [7]);  }  else {  	throw new ArgumentException ();  }  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,ToInt64,The following statement contains a magic number: return (data [0]) | (data [1] << 8) | (data [2] << 16) | (data [3] << 24) | (data [4] << 32) | (data [5] << 40) | (data [6] << 48) | (data [7] << 56);  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,ToInt64,The following statement contains a magic number: return (data [0]) | (data [1] << 8) | (data [2] << 16) | (data [3] << 24) | (data [4] << 32) | (data [5] << 40) | (data [6] << 48) | (data [7] << 56);  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,ToInt64,The following statement contains a magic number: return (data [0]) | (data [1] << 8) | (data [2] << 16) | (data [3] << 24) | (data [4] << 32) | (data [5] << 40) | (data [6] << 48) | (data [7] << 56);  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,ToInt64,The following statement contains a magic number: return (data [0]) | (data [1] << 8) | (data [2] << 16) | (data [3] << 24) | (data [4] << 32) | (data [5] << 40) | (data [6] << 48) | (data [7] << 56);  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,ToInt64,The following statement contains a magic number: return (data [0]) | (data [1] << 8) | (data [2] << 16) | (data [3] << 24) | (data [4] << 32) | (data [5] << 40) | (data [6] << 48) | (data [7] << 56);  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,ToInt64,The following statement contains a magic number: return (data [0]) | (data [1] << 8) | (data [2] << 16) | (data [3] << 24) | (data [4] << 32) | (data [5] << 40) | (data [6] << 48) | (data [7] << 56);  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,ToInt64,The following statement contains a magic number: return (data [0]) | (data [1] << 8) | (data [2] << 16) | (data [3] << 24) | (data [4] << 32) | (data [5] << 40) | (data [6] << 48) | (data [7] << 56);  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,ToInt64,The following statement contains a magic number: return (data [0]) | (data [1] << 8) | (data [2] << 16) | (data [3] << 24) | (data [4] << 32) | (data [5] << 40) | (data [6] << 48) | (data [7] << 56);  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,ToInt64,The following statement contains a magic number: return (data [0]) | (data [1] << 8) | (data [2] << 16) | (data [3] << 24) | (data [4] << 32) | (data [5] << 40) | (data [6] << 48) | (data [7] << 56);  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,ToInt64,The following statement contains a magic number: return (data [0]) | (data [1] << 8) | (data [2] << 16) | (data [3] << 24) | (data [4] << 32) | (data [5] << 40) | (data [6] << 48) | (data [7] << 56);  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,ToInt64,The following statement contains a magic number: return (data [0]) | (data [1] << 8) | (data [2] << 16) | (data [3] << 24) | (data [4] << 32) | (data [5] << 40) | (data [6] << 48) | (data [7] << 56);  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,ToInt64,The following statement contains a magic number: return (data [0]) | (data [1] << 8) | (data [2] << 16) | (data [3] << 24) | (data [4] << 32) | (data [5] << 40) | (data [6] << 48) | (data [7] << 56);  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,ToInt64,The following statement contains a magic number: return (data [0]) | (data [1] << 8) | (data [2] << 16) | (data [3] << 24) | (data [4] << 32) | (data [5] << 40) | (data [6] << 48) | (data [7] << 56);  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,ToInt64,The following statement contains a magic number: if (type == Endianness.Big) {  	return (data [0] << 56) | (data [1] << 48) | (data [2] << 40) | (data [3] << 32) | (data [4] << 24) | (data [5] << 16) | (data [6] << 8) | (data [7]);  }  else {  	throw new ArgumentException ();  }  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,ToInt64,The following statement contains a magic number: if (type == Endianness.Big) {  	return (data [0] << 56) | (data [1] << 48) | (data [2] << 40) | (data [3] << 32) | (data [4] << 24) | (data [5] << 16) | (data [6] << 8) | (data [7]);  }  else {  	throw new ArgumentException ();  }  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,ToInt64,The following statement contains a magic number: if (type == Endianness.Big) {  	return (data [0] << 56) | (data [1] << 48) | (data [2] << 40) | (data [3] << 32) | (data [4] << 24) | (data [5] << 16) | (data [6] << 8) | (data [7]);  }  else {  	throw new ArgumentException ();  }  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,ToInt64,The following statement contains a magic number: if (type == Endianness.Big) {  	return (data [0] << 56) | (data [1] << 48) | (data [2] << 40) | (data [3] << 32) | (data [4] << 24) | (data [5] << 16) | (data [6] << 8) | (data [7]);  }  else {  	throw new ArgumentException ();  }  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,ToInt64,The following statement contains a magic number: if (type == Endianness.Big) {  	return (data [0] << 56) | (data [1] << 48) | (data [2] << 40) | (data [3] << 32) | (data [4] << 24) | (data [5] << 16) | (data [6] << 8) | (data [7]);  }  else {  	throw new ArgumentException ();  }  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,ToInt64,The following statement contains a magic number: if (type == Endianness.Big) {  	return (data [0] << 56) | (data [1] << 48) | (data [2] << 40) | (data [3] << 32) | (data [4] << 24) | (data [5] << 16) | (data [6] << 8) | (data [7]);  }  else {  	throw new ArgumentException ();  }  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,ToInt64,The following statement contains a magic number: if (type == Endianness.Big) {  	return (data [0] << 56) | (data [1] << 48) | (data [2] << 40) | (data [3] << 32) | (data [4] << 24) | (data [5] << 16) | (data [6] << 8) | (data [7]);  }  else {  	throw new ArgumentException ();  }  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,ToInt64,The following statement contains a magic number: if (type == Endianness.Big) {  	return (data [0] << 56) | (data [1] << 48) | (data [2] << 40) | (data [3] << 32) | (data [4] << 24) | (data [5] << 16) | (data [6] << 8) | (data [7]);  }  else {  	throw new ArgumentException ();  }  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,ToInt64,The following statement contains a magic number: if (type == Endianness.Big) {  	return (data [0] << 56) | (data [1] << 48) | (data [2] << 40) | (data [3] << 32) | (data [4] << 24) | (data [5] << 16) | (data [6] << 8) | (data [7]);  }  else {  	throw new ArgumentException ();  }  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,ToInt64,The following statement contains a magic number: if (type == Endianness.Big) {  	return (data [0] << 56) | (data [1] << 48) | (data [2] << 40) | (data [3] << 32) | (data [4] << 24) | (data [5] << 16) | (data [6] << 8) | (data [7]);  }  else {  	throw new ArgumentException ();  }  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,ToInt64,The following statement contains a magic number: if (type == Endianness.Big) {  	return (data [0] << 56) | (data [1] << 48) | (data [2] << 40) | (data [3] << 32) | (data [4] << 24) | (data [5] << 16) | (data [6] << 8) | (data [7]);  }  else {  	throw new ArgumentException ();  }  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,ToInt64,The following statement contains a magic number: if (type == Endianness.Big) {  	return (data [0] << 56) | (data [1] << 48) | (data [2] << 40) | (data [3] << 32) | (data [4] << 24) | (data [5] << 16) | (data [6] << 8) | (data [7]);  }  else {  	throw new ArgumentException ();  }  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,ToInt64,The following statement contains a magic number: if (type == Endianness.Big) {  	return (data [0] << 56) | (data [1] << 48) | (data [2] << 40) | (data [3] << 32) | (data [4] << 24) | (data [5] << 16) | (data [6] << 8) | (data [7]);  }  else {  	throw new ArgumentException ();  }  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,ToInt64,The following statement contains a magic number: return (data [0] << 56) | (data [1] << 48) | (data [2] << 40) | (data [3] << 32) | (data [4] << 24) | (data [5] << 16) | (data [6] << 8) | (data [7]);  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,ToInt64,The following statement contains a magic number: return (data [0] << 56) | (data [1] << 48) | (data [2] << 40) | (data [3] << 32) | (data [4] << 24) | (data [5] << 16) | (data [6] << 8) | (data [7]);  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,ToInt64,The following statement contains a magic number: return (data [0] << 56) | (data [1] << 48) | (data [2] << 40) | (data [3] << 32) | (data [4] << 24) | (data [5] << 16) | (data [6] << 8) | (data [7]);  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,ToInt64,The following statement contains a magic number: return (data [0] << 56) | (data [1] << 48) | (data [2] << 40) | (data [3] << 32) | (data [4] << 24) | (data [5] << 16) | (data [6] << 8) | (data [7]);  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,ToInt64,The following statement contains a magic number: return (data [0] << 56) | (data [1] << 48) | (data [2] << 40) | (data [3] << 32) | (data [4] << 24) | (data [5] << 16) | (data [6] << 8) | (data [7]);  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,ToInt64,The following statement contains a magic number: return (data [0] << 56) | (data [1] << 48) | (data [2] << 40) | (data [3] << 32) | (data [4] << 24) | (data [5] << 16) | (data [6] << 8) | (data [7]);  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,ToInt64,The following statement contains a magic number: return (data [0] << 56) | (data [1] << 48) | (data [2] << 40) | (data [3] << 32) | (data [4] << 24) | (data [5] << 16) | (data [6] << 8) | (data [7]);  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,ToInt64,The following statement contains a magic number: return (data [0] << 56) | (data [1] << 48) | (data [2] << 40) | (data [3] << 32) | (data [4] << 24) | (data [5] << 16) | (data [6] << 8) | (data [7]);  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,ToInt64,The following statement contains a magic number: return (data [0] << 56) | (data [1] << 48) | (data [2] << 40) | (data [3] << 32) | (data [4] << 24) | (data [5] << 16) | (data [6] << 8) | (data [7]);  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,ToInt64,The following statement contains a magic number: return (data [0] << 56) | (data [1] << 48) | (data [2] << 40) | (data [3] << 32) | (data [4] << 24) | (data [5] << 16) | (data [6] << 8) | (data [7]);  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,ToInt64,The following statement contains a magic number: return (data [0] << 56) | (data [1] << 48) | (data [2] << 40) | (data [3] << 32) | (data [4] << 24) | (data [5] << 16) | (data [6] << 8) | (data [7]);  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,ToInt64,The following statement contains a magic number: return (data [0] << 56) | (data [1] << 48) | (data [2] << 40) | (data [3] << 32) | (data [4] << 24) | (data [5] << 16) | (data [6] << 8) | (data [7]);  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,ToInt64,The following statement contains a magic number: return (data [0] << 56) | (data [1] << 48) | (data [2] << 40) | (data [3] << 32) | (data [4] << 24) | (data [5] << 16) | (data [6] << 8) | (data [7]);  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,ToUInt16,The following statement contains a magic number: if (type == Endianness.Little) {  	return (ushort)(data [offset] | (data [offset + 1] << 8));  }  else if (type == Endianness.Big) {  	return (ushort)((data [offset] << 8) | data [offset + 1]);  }  else {  	throw new ArgumentException ();  }  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,ToUInt16,The following statement contains a magic number: if (type == Endianness.Little) {  	return (ushort)(data [offset] | (data [offset + 1] << 8));  }  else if (type == Endianness.Big) {  	return (ushort)((data [offset] << 8) | data [offset + 1]);  }  else {  	throw new ArgumentException ();  }  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,ToUInt16,The following statement contains a magic number: return (ushort)(data [offset] | (data [offset + 1] << 8));  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,ToUInt16,The following statement contains a magic number: if (type == Endianness.Big) {  	return (ushort)((data [offset] << 8) | data [offset + 1]);  }  else {  	throw new ArgumentException ();  }  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,ToUInt16,The following statement contains a magic number: return (ushort)((data [offset] << 8) | data [offset + 1]);  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,ToUInt32,The following statement contains a magic number: if (type == Endianness.Little) {  	return (uint)(data [offset]) | (uint)(data [offset + 1] << 8) | (uint)(data [offset + 2] << 16) | (uint)(data [offset + 3] << 24);  }  else if (type == Endianness.Big) {  	return (uint)(data [offset] << 24) | (uint)(data [offset + 1] << 16) | (uint)(data [offset + 2] << 8) | (uint)(data [offset + 3]);  }  else {  	throw new ArgumentException ();  }  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,ToUInt32,The following statement contains a magic number: if (type == Endianness.Little) {  	return (uint)(data [offset]) | (uint)(data [offset + 1] << 8) | (uint)(data [offset + 2] << 16) | (uint)(data [offset + 3] << 24);  }  else if (type == Endianness.Big) {  	return (uint)(data [offset] << 24) | (uint)(data [offset + 1] << 16) | (uint)(data [offset + 2] << 8) | (uint)(data [offset + 3]);  }  else {  	throw new ArgumentException ();  }  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,ToUInt32,The following statement contains a magic number: if (type == Endianness.Little) {  	return (uint)(data [offset]) | (uint)(data [offset + 1] << 8) | (uint)(data [offset + 2] << 16) | (uint)(data [offset + 3] << 24);  }  else if (type == Endianness.Big) {  	return (uint)(data [offset] << 24) | (uint)(data [offset + 1] << 16) | (uint)(data [offset + 2] << 8) | (uint)(data [offset + 3]);  }  else {  	throw new ArgumentException ();  }  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,ToUInt32,The following statement contains a magic number: if (type == Endianness.Little) {  	return (uint)(data [offset]) | (uint)(data [offset + 1] << 8) | (uint)(data [offset + 2] << 16) | (uint)(data [offset + 3] << 24);  }  else if (type == Endianness.Big) {  	return (uint)(data [offset] << 24) | (uint)(data [offset + 1] << 16) | (uint)(data [offset + 2] << 8) | (uint)(data [offset + 3]);  }  else {  	throw new ArgumentException ();  }  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,ToUInt32,The following statement contains a magic number: if (type == Endianness.Little) {  	return (uint)(data [offset]) | (uint)(data [offset + 1] << 8) | (uint)(data [offset + 2] << 16) | (uint)(data [offset + 3] << 24);  }  else if (type == Endianness.Big) {  	return (uint)(data [offset] << 24) | (uint)(data [offset + 1] << 16) | (uint)(data [offset + 2] << 8) | (uint)(data [offset + 3]);  }  else {  	throw new ArgumentException ();  }  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,ToUInt32,The following statement contains a magic number: if (type == Endianness.Little) {  	return (uint)(data [offset]) | (uint)(data [offset + 1] << 8) | (uint)(data [offset + 2] << 16) | (uint)(data [offset + 3] << 24);  }  else if (type == Endianness.Big) {  	return (uint)(data [offset] << 24) | (uint)(data [offset + 1] << 16) | (uint)(data [offset + 2] << 8) | (uint)(data [offset + 3]);  }  else {  	throw new ArgumentException ();  }  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,ToUInt32,The following statement contains a magic number: if (type == Endianness.Little) {  	return (uint)(data [offset]) | (uint)(data [offset + 1] << 8) | (uint)(data [offset + 2] << 16) | (uint)(data [offset + 3] << 24);  }  else if (type == Endianness.Big) {  	return (uint)(data [offset] << 24) | (uint)(data [offset + 1] << 16) | (uint)(data [offset + 2] << 8) | (uint)(data [offset + 3]);  }  else {  	throw new ArgumentException ();  }  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,ToUInt32,The following statement contains a magic number: if (type == Endianness.Little) {  	return (uint)(data [offset]) | (uint)(data [offset + 1] << 8) | (uint)(data [offset + 2] << 16) | (uint)(data [offset + 3] << 24);  }  else if (type == Endianness.Big) {  	return (uint)(data [offset] << 24) | (uint)(data [offset + 1] << 16) | (uint)(data [offset + 2] << 8) | (uint)(data [offset + 3]);  }  else {  	throw new ArgumentException ();  }  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,ToUInt32,The following statement contains a magic number: if (type == Endianness.Little) {  	return (uint)(data [offset]) | (uint)(data [offset + 1] << 8) | (uint)(data [offset + 2] << 16) | (uint)(data [offset + 3] << 24);  }  else if (type == Endianness.Big) {  	return (uint)(data [offset] << 24) | (uint)(data [offset + 1] << 16) | (uint)(data [offset + 2] << 8) | (uint)(data [offset + 3]);  }  else {  	throw new ArgumentException ();  }  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,ToUInt32,The following statement contains a magic number: if (type == Endianness.Little) {  	return (uint)(data [offset]) | (uint)(data [offset + 1] << 8) | (uint)(data [offset + 2] << 16) | (uint)(data [offset + 3] << 24);  }  else if (type == Endianness.Big) {  	return (uint)(data [offset] << 24) | (uint)(data [offset + 1] << 16) | (uint)(data [offset + 2] << 8) | (uint)(data [offset + 3]);  }  else {  	throw new ArgumentException ();  }  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,ToUInt32,The following statement contains a magic number: return (uint)(data [offset]) | (uint)(data [offset + 1] << 8) | (uint)(data [offset + 2] << 16) | (uint)(data [offset + 3] << 24);  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,ToUInt32,The following statement contains a magic number: return (uint)(data [offset]) | (uint)(data [offset + 1] << 8) | (uint)(data [offset + 2] << 16) | (uint)(data [offset + 3] << 24);  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,ToUInt32,The following statement contains a magic number: return (uint)(data [offset]) | (uint)(data [offset + 1] << 8) | (uint)(data [offset + 2] << 16) | (uint)(data [offset + 3] << 24);  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,ToUInt32,The following statement contains a magic number: return (uint)(data [offset]) | (uint)(data [offset + 1] << 8) | (uint)(data [offset + 2] << 16) | (uint)(data [offset + 3] << 24);  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,ToUInt32,The following statement contains a magic number: return (uint)(data [offset]) | (uint)(data [offset + 1] << 8) | (uint)(data [offset + 2] << 16) | (uint)(data [offset + 3] << 24);  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,ToUInt32,The following statement contains a magic number: if (type == Endianness.Big) {  	return (uint)(data [offset] << 24) | (uint)(data [offset + 1] << 16) | (uint)(data [offset + 2] << 8) | (uint)(data [offset + 3]);  }  else {  	throw new ArgumentException ();  }  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,ToUInt32,The following statement contains a magic number: if (type == Endianness.Big) {  	return (uint)(data [offset] << 24) | (uint)(data [offset + 1] << 16) | (uint)(data [offset + 2] << 8) | (uint)(data [offset + 3]);  }  else {  	throw new ArgumentException ();  }  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,ToUInt32,The following statement contains a magic number: if (type == Endianness.Big) {  	return (uint)(data [offset] << 24) | (uint)(data [offset + 1] << 16) | (uint)(data [offset + 2] << 8) | (uint)(data [offset + 3]);  }  else {  	throw new ArgumentException ();  }  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,ToUInt32,The following statement contains a magic number: if (type == Endianness.Big) {  	return (uint)(data [offset] << 24) | (uint)(data [offset + 1] << 16) | (uint)(data [offset + 2] << 8) | (uint)(data [offset + 3]);  }  else {  	throw new ArgumentException ();  }  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,ToUInt32,The following statement contains a magic number: if (type == Endianness.Big) {  	return (uint)(data [offset] << 24) | (uint)(data [offset + 1] << 16) | (uint)(data [offset + 2] << 8) | (uint)(data [offset + 3]);  }  else {  	throw new ArgumentException ();  }  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,ToUInt32,The following statement contains a magic number: return (uint)(data [offset] << 24) | (uint)(data [offset + 1] << 16) | (uint)(data [offset + 2] << 8) | (uint)(data [offset + 3]);  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,ToUInt32,The following statement contains a magic number: return (uint)(data [offset] << 24) | (uint)(data [offset + 1] << 16) | (uint)(data [offset + 2] << 8) | (uint)(data [offset + 3]);  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,ToUInt32,The following statement contains a magic number: return (uint)(data [offset] << 24) | (uint)(data [offset + 1] << 16) | (uint)(data [offset + 2] << 8) | (uint)(data [offset + 3]);  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,ToUInt32,The following statement contains a magic number: return (uint)(data [offset] << 24) | (uint)(data [offset + 1] << 16) | (uint)(data [offset + 2] << 8) | (uint)(data [offset + 3]);  
Magic Number,ProcessHacker.Common,Utils,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Utils.cs,ToUInt32,The following statement contains a magic number: return (uint)(data [offset] << 24) | (uint)(data [offset + 1] << 16) | (uint)(data [offset + 2] << 8) | (uint)(data [offset + 3]);  
Magic Number,ProcessHacker.Common.Threading,FastEvent,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Threading\FastEvent.cs,SpinWait,The following statement contains a magic number: if (NativeMethods.SpinEnabled) {  	while (Thread.VolatileRead (ref _value) == 0)  		Thread.SpinWait (400);  }  else {  	while (Thread.VolatileRead (ref _value) == 0)  		Thread.Sleep (0);  }  
Magic Number,ProcessHacker.Common.Threading,FastEvent,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Threading\FastEvent.cs,SpinWait,The following statement contains a magic number: while (Thread.VolatileRead (ref _value) == 0)  	Thread.SpinWait (400);  
Magic Number,ProcessHacker.Common.Threading,FastEvent,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Threading\FastEvent.cs,SpinWait,The following statement contains a magic number: Thread.SpinWait (400);  
Magic Number,ProcessHacker.Common.Threading,FastResourceLock,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Threading\FastResourceLock.cs,SpinAcquireExclusive,The following statement contains a magic number: while (true) {  	value = _value;  	if ((value & (LockOwned | LockExclusiveWaking)) == 0) {  		if (Interlocked.CompareExchange (ref _value' value + LockOwned' value) == value)  			break;  	}  	if (NativeMethods.SpinEnabled)  		Thread.SpinWait (8);  	else  		Thread.Sleep (0);  }  
Magic Number,ProcessHacker.Common.Threading,FastResourceLock,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Threading\FastResourceLock.cs,SpinAcquireExclusive,The following statement contains a magic number: if (NativeMethods.SpinEnabled)  	Thread.SpinWait (8);  else  	Thread.Sleep (0);  
Magic Number,ProcessHacker.Common.Threading,FastResourceLock,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Threading\FastResourceLock.cs,SpinAcquireExclusive,The following statement contains a magic number: Thread.SpinWait (8);  
Magic Number,ProcessHacker.Common.Threading,FastResourceLock,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Threading\FastResourceLock.cs,SpinAcquireShared,The following statement contains a magic number: while (true) {  	value = _value;  	if ((value & ExclusiveMask) == 0) {  		if ((value & LockOwned) == 0) {  			if (Interlocked.CompareExchange (ref _value' value + LockOwned + LockSharedOwnersIncrement' value) == value)  				break;  		}  		else if (((value >> LockSharedOwnersShift) & LockSharedOwnersMask) != 0) {  			if (Interlocked.CompareExchange (ref _value' value + LockSharedOwnersIncrement' value) == value)  				break;  		}  	}  	if (NativeMethods.SpinEnabled)  		Thread.SpinWait (8);  	else  		Thread.Sleep (0);  }  
Magic Number,ProcessHacker.Common.Threading,FastResourceLock,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Threading\FastResourceLock.cs,SpinAcquireShared,The following statement contains a magic number: if (NativeMethods.SpinEnabled)  	Thread.SpinWait (8);  else  	Thread.Sleep (0);  
Magic Number,ProcessHacker.Common.Threading,FastResourceLock,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Threading\FastResourceLock.cs,SpinAcquireShared,The following statement contains a magic number: Thread.SpinWait (8);  
Magic Number,ProcessHacker.Common.Threading,FastResourceLock,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Threading\FastResourceLock.cs,SpinConvertSharedToExclusive,The following statement contains a magic number: while (true) {  	value = _value;  	// Can't convert if there are other shared owners.  	if (((value >> LockSharedOwnersShift) & LockSharedOwnersMask) == 1) {  		if (Interlocked.CompareExchange (ref _value' value - LockSharedOwnersIncrement' value) == value)  			break;  	}  	if (NativeMethods.SpinEnabled)  		Thread.SpinWait (8);  	else  		Thread.Sleep (0);  }  
Magic Number,ProcessHacker.Common.Threading,FastResourceLock,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Threading\FastResourceLock.cs,SpinConvertSharedToExclusive,The following statement contains a magic number: if (NativeMethods.SpinEnabled)  	Thread.SpinWait (8);  else  	Thread.Sleep (0);  
Magic Number,ProcessHacker.Common.Threading,FastResourceLock,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Threading\FastResourceLock.cs,SpinConvertSharedToExclusive,The following statement contains a magic number: Thread.SpinWait (8);  
Magic Number,ProcessHacker.Common.Threading,SpinLock,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Threading\SpinLock.cs,Acquire,The following statement contains a magic number: if (NativeMethods.SpinEnabled) {  	while (Interlocked.CompareExchange (ref _value' 1' 0) == 1)  		Thread.SpinWait (8);  }  else {  	while (Interlocked.CompareExchange (ref _value' 1' 0) == 1)  		Thread.Sleep (0);  }  
Magic Number,ProcessHacker.Common.Threading,SpinLock,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Threading\SpinLock.cs,Acquire,The following statement contains a magic number: while (Interlocked.CompareExchange (ref _value' 1' 0) == 1)  	Thread.SpinWait (8);  
Magic Number,ProcessHacker.Common.Threading,SpinLock,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Threading\SpinLock.cs,Acquire,The following statement contains a magic number: Thread.SpinWait (8);  
Missing Default,ProcessHacker.Common.Threading,FairResourceLock,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Threading\FairResourceLock.cs,InsertWaitBlock,The following switch statement is missing a default case: switch (position) {  case ListPosition.First:  	InsertHeadList (_waitersListHead' waitBlock);  	break;  case ListPosition.LastExclusive:  	InsertTailList (_firstSharedWaiter' waitBlock);  	break;  case ListPosition.Last:  	InsertTailList (_waitersListHead' waitBlock);  	break;  }  
Missing Default,ProcessHacker.Common.Ui,ColumnHeaderExtensions,C:\repos\prresearcher_pr-Researcher\process-Researcher\ProcessHacker.Common\Ui\ColumnHeaderExtensions.cs,SetSortIcon,The following switch statement is missing a default case: switch (order) {  case SortOrder.Ascending:  	lvColumn.fmt &= ~HDF_SORTDOWN;  	lvColumn.fmt |= HDF_SORTUP;  	break;  case SortOrder.Descending:  	lvColumn.fmt &= ~HDF_SORTUP;  	lvColumn.fmt |= HDF_SORTDOWN;  	break;  }  
