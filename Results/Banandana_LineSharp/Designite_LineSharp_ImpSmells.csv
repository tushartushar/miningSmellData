Implementation smell,Namespace,Class,File,Method,Description
Long Method,LineSharp,LineClient,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\LineClient.cs,Login,The method has 160 lines of code.
Long Method,LineSharp,LineClient,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\LineClient.cs,Update,The method has 222 lines of code.
Long Method,LineSharp.Datatypes,CoinHistory,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\CoinHistory.cs,Read,The method has 104 lines of code.
Long Method,LineSharp.Datatypes,CoinHistory,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\CoinHistory.cs,Write,The method has 103 lines of code.
Long Method,LineSharp.Datatypes,Contact,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Contact.cs,Read,The method has 152 lines of code.
Long Method,LineSharp.Datatypes,Contact,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Contact.cs,Write,The method has 159 lines of code.
Long Method,LineSharp.Datatypes,Message,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Message.cs,Read,The method has 116 lines of code.
Long Method,LineSharp.Datatypes,Message,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Message.cs,Write,The method has 111 lines of code.
Long Method,LineSharp.Datatypes,Product,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Read,The method has 215 lines of code.
Long Method,LineSharp.Datatypes,Product,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Write,The method has 231 lines of code.
Long Method,LineSharp.Datatypes,Profile,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Profile.cs,Read,The method has 110 lines of code.
Long Method,LineSharp.Datatypes,Profile,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Profile.cs,Write,The method has 111 lines of code.
Long Method,LineSharp.Datatypes,Settings,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Read,The method has 211 lines of code.
Long Method,LineSharp.Datatypes,Settings,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Write,The method has 215 lines of code.
Long Method,LineSharp.Datatypes,Processor,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Processor,The method has 189 lines of code.
Complex Method,LineSharp,LineClient,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\LineClient.cs,Login,Cyclomatic complexity of the method is 11
Complex Method,LineSharp,LineClient,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\LineClient.cs,Update,Cyclomatic complexity of the method is 122
Complex Method,LineSharp.Datatypes,Announcement,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Announcement.cs,Read,Cyclomatic complexity of the method is 17
Complex Method,LineSharp.Datatypes,Announcement,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Announcement.cs,Write,Cyclomatic complexity of the method is 8
Complex Method,LineSharp.Datatypes,Coin,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Coin.cs,Read,Cyclomatic complexity of the method is 11
Complex Method,LineSharp.Datatypes,CoinHistory,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\CoinHistory.cs,Read,Cyclomatic complexity of the method is 27
Complex Method,LineSharp.Datatypes,CoinHistory,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\CoinHistory.cs,Write,Cyclomatic complexity of the method is 13
Complex Method,LineSharp.Datatypes,CoinHistoryCondition,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\CoinHistoryCondition.cs,Read,Cyclomatic complexity of the method is 13
Complex Method,LineSharp.Datatypes,CoinHistoryResult,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\CoinHistoryResult.cs,Read,Cyclomatic complexity of the method is 10
Complex Method,LineSharp.Datatypes,CoinPayLoad,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\CoinPayLoad.cs,Read,Cyclomatic complexity of the method is 11
Complex Method,LineSharp.Datatypes,CoinProductItem,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\CoinProductItem.cs,Read,Cyclomatic complexity of the method is 19
Complex Method,LineSharp.Datatypes,CoinProductItem,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\CoinProductItem.cs,Write,Cyclomatic complexity of the method is 9
Complex Method,LineSharp.Datatypes,CoinPurchaseReservation,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\CoinPurchaseReservation.cs,Read,Cyclomatic complexity of the method is 19
Complex Method,LineSharp.Datatypes,CoinPurchaseReservation,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\CoinPurchaseReservation.cs,Write,Cyclomatic complexity of the method is 9
Complex Method,LineSharp.Datatypes,CompactContact,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\CompactContact.cs,Read,Cyclomatic complexity of the method is 15
Complex Method,LineSharp.Datatypes,Contact,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Contact.cs,Read,Cyclomatic complexity of the method is 41
Complex Method,LineSharp.Datatypes,Contact,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Contact.cs,Write,Cyclomatic complexity of the method is 20
Complex Method,LineSharp.Datatypes,ContactModification,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ContactModification.cs,Read,Cyclomatic complexity of the method is 16
Complex Method,LineSharp.Datatypes,ContactModification,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ContactModification.cs,Write,Cyclomatic complexity of the method is 9
Complex Method,LineSharp.Datatypes,ContactRegistration,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ContactRegistration.cs,Read,Cyclomatic complexity of the method is 11
Complex Method,LineSharp.Datatypes,ContactReport,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ContactReport.cs,Read,Cyclomatic complexity of the method is 9
Complex Method,LineSharp.Datatypes,DeviceInfo,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\DeviceInfo.cs,Read,Cyclomatic complexity of the method is 17
Complex Method,LineSharp.Datatypes,DeviceInfo,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\DeviceInfo.cs,Write,Cyclomatic complexity of the method is 8
Complex Method,LineSharp.Datatypes,EmailConfirmation,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\EmailConfirmation.cs,Read,Cyclomatic complexity of the method is 11
Complex Method,LineSharp.Datatypes,EmailConfirmationSession,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\EmailConfirmationSession.cs,Read,Cyclomatic complexity of the method is 9
Complex Method,LineSharp.Datatypes,Group,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Group.cs,Read,Cyclomatic complexity of the method is 21
Complex Method,LineSharp.Datatypes,Group,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Group.cs,Write,Cyclomatic complexity of the method is 11
Complex Method,LineSharp.Datatypes,IdentityCredential,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\IdentityCredential.cs,Read,Cyclomatic complexity of the method is 9
Complex Method,LineSharp.Datatypes,Location,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Location.cs,Read,Cyclomatic complexity of the method is 13
Complex Method,LineSharp.Datatypes,LoginResult,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\LoginResult.cs,Read,Cyclomatic complexity of the method is 13
Complex Method,LineSharp.Datatypes,LoginSession,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\LoginSession.cs,Read,Cyclomatic complexity of the method is 13
Complex Method,LineSharp.Datatypes,Message,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Message.cs,Read,Cyclomatic complexity of the method is 28
Complex Method,LineSharp.Datatypes,Message,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Message.cs,Write,Cyclomatic complexity of the method is 14
Complex Method,LineSharp.Datatypes,Operation,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Operation.cs,Read,Cyclomatic complexity of the method is 23
Complex Method,LineSharp.Datatypes,Operation,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Operation.cs,Write,Cyclomatic complexity of the method is 11
Complex Method,LineSharp.Datatypes,PaymentReservation,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\PaymentReservation.cs,Read,Cyclomatic complexity of the method is 23
Complex Method,LineSharp.Datatypes,PaymentReservation,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\PaymentReservation.cs,Write,Cyclomatic complexity of the method is 11
Complex Method,LineSharp.Datatypes,PaymentReservationResult,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\PaymentReservationResult.cs,Read,Cyclomatic complexity of the method is 10
Complex Method,LineSharp.Datatypes,Product,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Read,Cyclomatic complexity of the method is 59
Complex Method,LineSharp.Datatypes,Product,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Write,Cyclomatic complexity of the method is 29
Complex Method,LineSharp.Datatypes,ProductList,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ProductList.cs,Read,Cyclomatic complexity of the method is 16
Complex Method,LineSharp.Datatypes,ProductList,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ProductList.cs,Write,Cyclomatic complexity of the method is 8
Complex Method,LineSharp.Datatypes,ProductSimple,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ProductSimple.cs,Read,Cyclomatic complexity of the method is 13
Complex Method,LineSharp.Datatypes,ProductSimpleList,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ProductSimpleList.cs,Read,Cyclomatic complexity of the method is 16
Complex Method,LineSharp.Datatypes,ProductSimpleList,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ProductSimpleList.cs,Write,Cyclomatic complexity of the method is 8
Complex Method,LineSharp.Datatypes,Profile,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Profile.cs,Read,Cyclomatic complexity of the method is 29
Complex Method,LineSharp.Datatypes,Profile,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Profile.cs,Write,Cyclomatic complexity of the method is 14
Complex Method,LineSharp.Datatypes,ProximityMatchCandidateResult,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ProximityMatchCandidateResult.cs,Read,Cyclomatic complexity of the method is 9
Complex Method,LineSharp.Datatypes,Room,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Room.cs,Read,Cyclomatic complexity of the method is 12
Complex Method,LineSharp.Datatypes,RSAKey,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\RSAKey.cs,Read,Cyclomatic complexity of the method is 11
Complex Method,LineSharp.Datatypes,Settings,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Read,Cyclomatic complexity of the method is 53
Complex Method,LineSharp.Datatypes,Settings,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Write,Cyclomatic complexity of the method is 27
Complex Method,LineSharp.Datatypes,buyFreeProduct_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Read,Cyclomatic complexity of the method is 15
Complex Method,LineSharp.Datatypes,buyMustbuyProduct_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Read,Cyclomatic complexity of the method is 17
Complex Method,LineSharp.Datatypes,buyMustbuyProduct_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Write,Cyclomatic complexity of the method is 8
Complex Method,LineSharp.Datatypes,checkCanReceivePresent_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Read,Cyclomatic complexity of the method is 11
Complex Method,LineSharp.Datatypes,getActivePurchases_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Read,Cyclomatic complexity of the method is 11
Complex Method,LineSharp.Datatypes,getActivePurchaseVersions_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Read,Cyclomatic complexity of the method is 11
Complex Method,LineSharp.Datatypes,getCoinProducts_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Read,Cyclomatic complexity of the method is 9
Complex Method,LineSharp.Datatypes,getCoinProducts_result,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Read,Cyclomatic complexity of the method is 8
Complex Method,LineSharp.Datatypes,getCoinProductsByPgCode_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Read,Cyclomatic complexity of the method is 11
Complex Method,LineSharp.Datatypes,getCoinProductsByPgCode_result,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Read,Cyclomatic complexity of the method is 8
Complex Method,LineSharp.Datatypes,getDownloads_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Read,Cyclomatic complexity of the method is 11
Complex Method,LineSharp.Datatypes,getEventPackages_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Read,Cyclomatic complexity of the method is 11
Complex Method,LineSharp.Datatypes,getNewlyReleasedPackages_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Read,Cyclomatic complexity of the method is 11
Complex Method,LineSharp.Datatypes,getPopularPackages_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Read,Cyclomatic complexity of the method is 11
Complex Method,LineSharp.Datatypes,getPresentsReceived_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Read,Cyclomatic complexity of the method is 11
Complex Method,LineSharp.Datatypes,getPresentsSent_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Read,Cyclomatic complexity of the method is 11
Complex Method,LineSharp.Datatypes,getProduct_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Read,Cyclomatic complexity of the method is 9
Complex Method,LineSharp.Datatypes,getProductList_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Read,Cyclomatic complexity of the method is 10
Complex Method,LineSharp.Datatypes,getProductListWithCarrier_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Read,Cyclomatic complexity of the method is 12
Complex Method,LineSharp.Datatypes,getProductWithCarrier_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Read,Cyclomatic complexity of the method is 11
Complex Method,LineSharp.Datatypes,getPurchaseHistory_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Read,Cyclomatic complexity of the method is 11
Complex Method,LineSharp.Datatypes,SnsFriend,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\SnsFriend.cs,Read,Cyclomatic complexity of the method is 9
Complex Method,LineSharp.Datatypes,SnsFriendContactRegistration,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\SnsFriendContactRegistration.cs,Read,Cyclomatic complexity of the method is 9
Complex Method,LineSharp.Datatypes,SnsIdUserStatus,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\SnsIdUserStatus.cs,Read,Cyclomatic complexity of the method is 9
Complex Method,LineSharp.Datatypes,SystemConfiguration,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\SystemConfiguration.cs,Read,Cyclomatic complexity of the method is 13
Complex Method,LineSharp.Datatypes,TalkException,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkException.cs,Read,Cyclomatic complexity of the method is 10
Complex Method,LineSharp.Datatypes,acceptProximityMatches_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,Cyclomatic complexity of the method is 8
Complex Method,LineSharp.Datatypes,acquireCallRoute_result,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,Cyclomatic complexity of the method is 8
Complex Method,LineSharp.Datatypes,cancelGroupInvitation_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,Cyclomatic complexity of the method is 10
Complex Method,LineSharp.Datatypes,commitSendMessage_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,Cyclomatic complexity of the method is 10
Complex Method,LineSharp.Datatypes,commitSendMessage_result,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,Cyclomatic complexity of the method is 8
Complex Method,LineSharp.Datatypes,commitSendMessages_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,Cyclomatic complexity of the method is 11
Complex Method,LineSharp.Datatypes,commitSendMessages_result,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,Cyclomatic complexity of the method is 8
Complex Method,LineSharp.Datatypes,commitUpdateProfile_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,Cyclomatic complexity of the method is 11
Complex Method,LineSharp.Datatypes,commitUpdateProfile_result,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,Cyclomatic complexity of the method is 8
Complex Method,LineSharp.Datatypes,createGroup_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,Cyclomatic complexity of the method is 10
Complex Method,LineSharp.Datatypes,createQrcodeBase64Image_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,Cyclomatic complexity of the method is 17
Complex Method,LineSharp.Datatypes,createQrcodeBase64Image_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,Cyclomatic complexity of the method is 8
Complex Method,LineSharp.Datatypes,createRoom_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,Cyclomatic complexity of the method is 8
Complex Method,LineSharp.Datatypes,fetchAnnouncements_result,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,Cyclomatic complexity of the method is 8
Complex Method,LineSharp.Datatypes,fetchMessages_result,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,Cyclomatic complexity of the method is 8
Complex Method,LineSharp.Datatypes,fetchOperations_result,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,Cyclomatic complexity of the method is 8
Complex Method,LineSharp.Datatypes,fetchOps_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,Cyclomatic complexity of the method is 11
Complex Method,LineSharp.Datatypes,fetchOps_result,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,Cyclomatic complexity of the method is 8
Complex Method,LineSharp.Datatypes,findAndAddContactsByEmail_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,Cyclomatic complexity of the method is 8
Complex Method,LineSharp.Datatypes,findAndAddContactsByEmail_result,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,Cyclomatic complexity of the method is 8
Complex Method,LineSharp.Datatypes,findAndAddContactsByMid_result,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,Cyclomatic complexity of the method is 8
Complex Method,LineSharp.Datatypes,findAndAddContactsByPhone_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,Cyclomatic complexity of the method is 8
Complex Method,LineSharp.Datatypes,findAndAddContactsByPhone_result,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,Cyclomatic complexity of the method is 8
Complex Method,LineSharp.Datatypes,findAndAddContactsByUserid_result,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,Cyclomatic complexity of the method is 8
Complex Method,LineSharp.Datatypes,findContactsByEmail_result,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,Cyclomatic complexity of the method is 8
Complex Method,LineSharp.Datatypes,findContactsByPhone_result,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,Cyclomatic complexity of the method is 8
Complex Method,LineSharp.Datatypes,findSnsIdUserStatus_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,Cyclomatic complexity of the method is 9
Complex Method,LineSharp.Datatypes,getAcceptedProximityMatches_result,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,Cyclomatic complexity of the method is 8
Complex Method,LineSharp.Datatypes,getActiveBuddySubscriberIds_result,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,Cyclomatic complexity of the method is 8
Complex Method,LineSharp.Datatypes,getAllContactIds_result,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,Cyclomatic complexity of the method is 8
Complex Method,LineSharp.Datatypes,getBlockedContactIds_result,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,Cyclomatic complexity of the method is 8
Complex Method,LineSharp.Datatypes,getBlockedContactIdsByRange_result,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,Cyclomatic complexity of the method is 8
Complex Method,LineSharp.Datatypes,getBlockedRecommendationIds_result,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,Cyclomatic complexity of the method is 8
Complex Method,LineSharp.Datatypes,getBuddyBlockerIds_result,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,Cyclomatic complexity of the method is 8
Complex Method,LineSharp.Datatypes,getCompactContactsModifiedSince_result,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,Cyclomatic complexity of the method is 8
Complex Method,LineSharp.Datatypes,getContacts_result,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,Cyclomatic complexity of the method is 8
Complex Method,LineSharp.Datatypes,getFavoriteMids_result,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,Cyclomatic complexity of the method is 8
Complex Method,LineSharp.Datatypes,getGroupIdsInvited_result,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,Cyclomatic complexity of the method is 8
Complex Method,LineSharp.Datatypes,getGroupIdsJoined_result,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,Cyclomatic complexity of the method is 8
Complex Method,LineSharp.Datatypes,getGroups_result,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,Cyclomatic complexity of the method is 8
Complex Method,LineSharp.Datatypes,getHiddenContactMids_result,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,Cyclomatic complexity of the method is 8
Complex Method,LineSharp.Datatypes,getMessageBox_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,Cyclomatic complexity of the method is 9
Complex Method,LineSharp.Datatypes,getMessageBoxList_result,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,Cyclomatic complexity of the method is 8
Complex Method,LineSharp.Datatypes,getMessageBoxListByStatus_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,Cyclomatic complexity of the method is 9
Complex Method,LineSharp.Datatypes,getMessageBoxListByStatus_result,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,Cyclomatic complexity of the method is 8
Complex Method,LineSharp.Datatypes,getMessagesBySequenceNumber_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,Cyclomatic complexity of the method is 11
Complex Method,LineSharp.Datatypes,getMessagesBySequenceNumber_result,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,Cyclomatic complexity of the method is 8
Complex Method,LineSharp.Datatypes,getNextMessages_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,Cyclomatic complexity of the method is 9
Complex Method,LineSharp.Datatypes,getNextMessages_result,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,Cyclomatic complexity of the method is 8
Complex Method,LineSharp.Datatypes,getNotificationPolicy_result,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,Cyclomatic complexity of the method is 8
Complex Method,LineSharp.Datatypes,getPreviousMessages_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,Cyclomatic complexity of the method is 9
Complex Method,LineSharp.Datatypes,getPreviousMessages_result,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,Cyclomatic complexity of the method is 8
Complex Method,LineSharp.Datatypes,getProximityMatchCandidates_result,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,Cyclomatic complexity of the method is 8
Complex Method,LineSharp.Datatypes,getRecentMessages_result,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,Cyclomatic complexity of the method is 8
Complex Method,LineSharp.Datatypes,getRecommendationIds_result,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,Cyclomatic complexity of the method is 8
Complex Method,LineSharp.Datatypes,getSessions_result,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,Cyclomatic complexity of the method is 8
Complex Method,LineSharp.Datatypes,inviteIntoGroup_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,Cyclomatic complexity of the method is 10
Complex Method,LineSharp.Datatypes,inviteIntoRoom_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,Cyclomatic complexity of the method is 10
Complex Method,LineSharp.Datatypes,inviteViaEmail_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,Cyclomatic complexity of the method is 9
Complex Method,LineSharp.Datatypes,kickoutFromGroup_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,Cyclomatic complexity of the method is 10
Complex Method,LineSharp.Datatypes,loginWithIdentityCredential_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,Cyclomatic complexity of the method is 17
Complex Method,LineSharp.Datatypes,loginWithIdentityCredential_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,Cyclomatic complexity of the method is 8
Complex Method,LineSharp.Datatypes,loginWithIdentityCredentialForCertificate_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,Cyclomatic complexity of the method is 17
Complex Method,LineSharp.Datatypes,loginWithIdentityCredentialForCertificate_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,Cyclomatic complexity of the method is 8
Complex Method,LineSharp.Datatypes,notifyBuddyOnAir_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,Cyclomatic complexity of the method is 8
Complex Method,LineSharp.Datatypes,notifyBuddyOnAir_result,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,Cyclomatic complexity of the method is 8
Complex Method,LineSharp.Datatypes,notifyIndividualEvent_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,Cyclomatic complexity of the method is 8
Complex Method,LineSharp.Datatypes,registerDeviceWithIdentityCredential_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,Cyclomatic complexity of the method is 11
Complex Method,LineSharp.Datatypes,registerDeviceWithoutPhoneNumber_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,Cyclomatic complexity of the method is 9
Complex Method,LineSharp.Datatypes,registerDeviceWithoutPhoneNumberWithIdentityCredential_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,Cyclomatic complexity of the method is 17
Complex Method,LineSharp.Datatypes,registerDeviceWithoutPhoneNumberWithIdentityCredential_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,Cyclomatic complexity of the method is 8
Complex Method,LineSharp.Datatypes,registerWapDevice_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,Cyclomatic complexity of the method is 11
Complex Method,LineSharp.Datatypes,registerWithExistingSnsIdAndIdentityCredential_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,Cyclomatic complexity of the method is 11
Complex Method,LineSharp.Datatypes,registerWithSnsId_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,Cyclomatic complexity of the method is 15
Complex Method,LineSharp.Datatypes,registerWithSnsIdAndIdentityCredential_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,Cyclomatic complexity of the method is 15
Complex Method,LineSharp.Datatypes,report_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,Cyclomatic complexity of the method is 9
Complex Method,LineSharp.Datatypes,reportContacts_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,Cyclomatic complexity of the method is 12
Complex Method,LineSharp.Datatypes,reportContacts_result,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,Cyclomatic complexity of the method is 8
Complex Method,LineSharp.Datatypes,reportGroups_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,Cyclomatic complexity of the method is 8
Complex Method,LineSharp.Datatypes,reportRooms_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,Cyclomatic complexity of the method is 8
Complex Method,LineSharp.Datatypes,reportSpammer_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,Cyclomatic complexity of the method is 11
Complex Method,LineSharp.Datatypes,requestAccountPasswordReset_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,Cyclomatic complexity of the method is 9
Complex Method,LineSharp.Datatypes,sendChatChecked_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,Cyclomatic complexity of the method is 9
Complex Method,LineSharp.Datatypes,sendChatRemoved_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,Cyclomatic complexity of the method is 9
Complex Method,LineSharp.Datatypes,sendContentPreviewUpdated_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,Cyclomatic complexity of the method is 10
Complex Method,LineSharp.Datatypes,sendContentPreviewUpdated_result,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,Cyclomatic complexity of the method is 8
Complex Method,LineSharp.Datatypes,sendContentReceipt_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,Cyclomatic complexity of the method is 9
Complex Method,LineSharp.Datatypes,sendMessageIgnored_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,Cyclomatic complexity of the method is 10
Complex Method,LineSharp.Datatypes,sendMessageReceipt_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,Cyclomatic complexity of the method is 10
Complex Method,LineSharp.Datatypes,setBuddyLocation_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,Cyclomatic complexity of the method is 9
Complex Method,LineSharp.Datatypes,setIdentityCredential_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,Cyclomatic complexity of the method is 9
Complex Method,LineSharp.Datatypes,setNotificationsEnabled_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,Cyclomatic complexity of the method is 11
Complex Method,LineSharp.Datatypes,startUpdateVerification_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,Cyclomatic complexity of the method is 17
Complex Method,LineSharp.Datatypes,startUpdateVerification_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,Cyclomatic complexity of the method is 8
Complex Method,LineSharp.Datatypes,startVerification_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,Cyclomatic complexity of the method is 19
Complex Method,LineSharp.Datatypes,startVerification_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,Cyclomatic complexity of the method is 9
Complex Method,LineSharp.Datatypes,storeUpdateProfileAttribute_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,Cyclomatic complexity of the method is 9
Complex Method,LineSharp.Datatypes,syncContactBySnsIds_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,Cyclomatic complexity of the method is 8
Complex Method,LineSharp.Datatypes,syncContactBySnsIds_result,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,Cyclomatic complexity of the method is 8
Complex Method,LineSharp.Datatypes,syncContacts_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,Cyclomatic complexity of the method is 8
Complex Method,LineSharp.Datatypes,syncContacts_result,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,Cyclomatic complexity of the method is 8
Complex Method,LineSharp.Datatypes,updateContactSetting_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,Cyclomatic complexity of the method is 11
Complex Method,LineSharp.Datatypes,updateCustomModeSettings_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,Cyclomatic complexity of the method is 8
Complex Method,LineSharp.Datatypes,updateProfileAttribute_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,Cyclomatic complexity of the method is 9
Complex Method,LineSharp.Datatypes,updateSettingsAttribute_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,Cyclomatic complexity of the method is 9
Complex Method,LineSharp.Datatypes,updateSettingsAttributes_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,Cyclomatic complexity of the method is 9
Complex Method,LineSharp.Datatypes,verifyIdentityCredential_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,Cyclomatic complexity of the method is 9
Complex Method,LineSharp.Datatypes,verifyPhone_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,Cyclomatic complexity of the method is 9
Complex Method,LineSharp.Datatypes,Ticket,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Ticket.cs,Read,Cyclomatic complexity of the method is 9
Complex Method,LineSharp.Datatypes,TMessageBox,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TMessageBox.cs,Read,Cyclomatic complexity of the method is 20
Complex Method,LineSharp.Datatypes,TMessageBox,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TMessageBox.cs,Write,Cyclomatic complexity of the method is 10
Complex Method,LineSharp.Datatypes,TMessageBoxWrapUp,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TMessageBoxWrapUp.cs,Read,Cyclomatic complexity of the method is 12
Complex Method,LineSharp.Datatypes,TMessageBoxWrapUpResponse,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TMessageBoxWrapUpResponse.cs,Read,Cyclomatic complexity of the method is 8
Complex Method,LineSharp.Datatypes,UserAuthStatus,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\UserAuthStatus.cs,Read,Cyclomatic complexity of the method is 8
Complex Method,LineSharp.Datatypes,VerificationSessionData,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\VerificationSessionData.cs,Read,Cyclomatic complexity of the method is 18
Complex Method,LineSharp.Datatypes,VerificationSessionData,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\VerificationSessionData.cs,Write,Cyclomatic complexity of the method is 9
Complex Method,LineSharp.Datatypes,WapInvitation,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\WapInvitation.cs,Read,Cyclomatic complexity of the method is 11
Long Parameter List,LineSharp.Datatypes,Iface,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,buyFreeProduct,The method has 6 parameters. Parameters: receiverMid' productId' messageTemplate' language' country' packageId
Long Parameter List,LineSharp.Datatypes,Iface,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,buyMustbuyProduct,The method has 7 parameters. Parameters: receiverMid' productId' messageTemplate' language' country' packageId' serialNumber
Long Parameter List,LineSharp.Datatypes,Iface,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,createQrcodeBase64Image,The method has 7 parameters. Parameters: url' characterSet' imageSize' x' y' width' height
Long Parameter List,LineSharp.Datatypes,Iface,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,loginWithIdentityCredential,The method has 7 parameters. Parameters: identityProvider' identifier' password' keepLoggedIn' accessLocation' systemName' certificate
Long Parameter List,LineSharp.Datatypes,Iface,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,loginWithIdentityCredentialForCertificate,The method has 7 parameters. Parameters: identityProvider' identifier' password' keepLoggedIn' accessLocation' systemName' certificate
Long Parameter List,LineSharp.Datatypes,Iface,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,registerDeviceWithoutPhoneNumberWithIdentityCredential,The method has 7 parameters. Parameters: region' udidHash' deviceInfo' provider' identifier' verifier' mid
Long Parameter List,LineSharp.Datatypes,Iface,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,registerWithSnsId,The method has 6 parameters. Parameters: snsIdType' snsAccessToken' region' udidHash' deviceInfo' mid
Long Parameter List,LineSharp.Datatypes,Iface,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,registerWithSnsIdAndIdentityCredential,The method has 6 parameters. Parameters: snsIdType' snsAccessToken' identityCredential' region' udidHash' deviceInfo
Long Parameter List,LineSharp.Datatypes,Iface,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,startUpdateVerification,The method has 7 parameters. Parameters: region' carrier' phone' udidHash' deviceInfo' networkCode' locale
Long Parameter List,LineSharp.Datatypes,Iface,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,startVerification,The method has 8 parameters. Parameters: region' carrier' phone' udidHash' deviceInfo' networkCode' mid' locale
Long Parameter List,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,buyFreeProduct,The method has 6 parameters. Parameters: receiverMid' productId' messageTemplate' language' country' packageId
Long Parameter List,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,send_buyFreeProduct,The method has 6 parameters. Parameters: receiverMid' productId' messageTemplate' language' country' packageId
Long Parameter List,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,buyMustbuyProduct,The method has 7 parameters. Parameters: receiverMid' productId' messageTemplate' language' country' packageId' serialNumber
Long Parameter List,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,send_buyMustbuyProduct,The method has 7 parameters. Parameters: receiverMid' productId' messageTemplate' language' country' packageId' serialNumber
Long Parameter List,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,createQrcodeBase64Image,The method has 7 parameters. Parameters: url' characterSet' imageSize' x' y' width' height
Long Parameter List,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,send_createQrcodeBase64Image,The method has 7 parameters. Parameters: url' characterSet' imageSize' x' y' width' height
Long Parameter List,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,loginWithIdentityCredential,The method has 7 parameters. Parameters: identityProvider' identifier' password' keepLoggedIn' accessLocation' systemName' certificate
Long Parameter List,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,send_loginWithIdentityCredential,The method has 7 parameters. Parameters: identityProvider' identifier' password' keepLoggedIn' accessLocation' systemName' certificate
Long Parameter List,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,loginWithIdentityCredentialForCertificate,The method has 7 parameters. Parameters: identityProvider' identifier' password' keepLoggedIn' accessLocation' systemName' certificate
Long Parameter List,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,send_loginWithIdentityCredentialForCertificate,The method has 7 parameters. Parameters: identityProvider' identifier' password' keepLoggedIn' accessLocation' systemName' certificate
Long Parameter List,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,registerDeviceWithoutPhoneNumberWithIdentityCredential,The method has 7 parameters. Parameters: region' udidHash' deviceInfo' provider' identifier' verifier' mid
Long Parameter List,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,send_registerDeviceWithoutPhoneNumberWithIdentityCredential,The method has 7 parameters. Parameters: region' udidHash' deviceInfo' provider' identifier' verifier' mid
Long Parameter List,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,registerWithSnsId,The method has 6 parameters. Parameters: snsIdType' snsAccessToken' region' udidHash' deviceInfo' mid
Long Parameter List,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,send_registerWithSnsId,The method has 6 parameters. Parameters: snsIdType' snsAccessToken' region' udidHash' deviceInfo' mid
Long Parameter List,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,registerWithSnsIdAndIdentityCredential,The method has 6 parameters. Parameters: snsIdType' snsAccessToken' identityCredential' region' udidHash' deviceInfo
Long Parameter List,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,send_registerWithSnsIdAndIdentityCredential,The method has 6 parameters. Parameters: snsIdType' snsAccessToken' identityCredential' region' udidHash' deviceInfo
Long Parameter List,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,startUpdateVerification,The method has 7 parameters. Parameters: region' carrier' phone' udidHash' deviceInfo' networkCode' locale
Long Parameter List,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,send_startUpdateVerification,The method has 7 parameters. Parameters: region' carrier' phone' udidHash' deviceInfo' networkCode' locale
Long Parameter List,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,startVerification,The method has 8 parameters. Parameters: region' carrier' phone' udidHash' deviceInfo' networkCode' mid' locale
Long Parameter List,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,send_startVerification,The method has 8 parameters. Parameters: region' carrier' phone' udidHash' deviceInfo' networkCode' mid' locale
Long Identifier,LineSharp.Datatypes,Isset,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Announcement.cs,,The length of the parameter privacyAllowSecondaryDeviceLogin is 32.
Long Identifier,LineSharp.Datatypes,Isset,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Announcement.cs,,The length of the parameter privacyProfileImagePostToMyhome is 31.
Long Identifier,LineSharp.Datatypes,Isset,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Announcement.cs,,The length of the parameter privacyReceiveMessagesFromNotFriend is 35.
Long Identifier,LineSharp.Datatypes,Settings,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,,The length of the parameter _privacyAllowSecondaryDeviceLogin is 33.
Long Identifier,LineSharp.Datatypes,Settings,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,,The length of the parameter _privacyProfileImagePostToMyhome is 32.
Long Identifier,LineSharp.Datatypes,Settings,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,,The length of the parameter _privacyReceiveMessagesFromNotFriend is 36.
Long Identifier,LineSharp.Datatypes,notifyInstalled_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,,The length of the parameter _applicationTypeWithExtensions is 30.
Long Identifier,LineSharp.Datatypes,notifyRegistrationComplete_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,,The length of the parameter _applicationTypeWithExtensions is 30.
Long Statement,LineSharp,LineClient,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\LineClient.cs,Update,The length of the statement  "                    if (OnInviteintoGroup != null) OnInviteintoGroup.Invoke(this' new InviteintoGroupEventArgs(operation.Param1' operation.Param2)); " is 128.
Long Statement,LineSharp,LineClient,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\LineClient.cs,Update,The length of the statement  "                    if (OnNotifiedAcceptGroupInvitation != null) OnNotifiedAcceptGroupInvitation.Invoke(this' new NotifiedAcceptGroupInvitationEventArgs()); " is 136.
Long Statement,LineSharp,LineClient,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\LineClient.cs,Update,The length of the statement  "                    if (OnNotifiedKickoutfromGroup != null) OnNotifiedKickoutfromGroup.Invoke(this' new NotifiedKickoutfromGroupEventArgs()); " is 121.
Long Statement,LineSharp,LineClient,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\LineClient.cs,Update,The length of the statement  "                    if (OnNotifiedCancelInvitationGroup != null) OnNotifiedCancelInvitationGroup.Invoke(this' new NotifiedCancelInvitationGroupEventArgs()); " is 136.
Long Statement,LineSharp,LineClient,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\LineClient.cs,Update,The length of the statement  "                    if (OnNotifiedRejectGroupInvitation != null) OnNotifiedRejectGroupInvitation.Invoke(this' new NotifiedRejectGroupInvitationEventArgs()); " is 136.
Long Statement,LineSharp,LineClient,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\LineClient.cs,Update,The length of the statement  "                    if (OnNotifiedUpdateContentPreview != null) OnNotifiedUpdateContentPreview.Invoke(this' new NotifiedUpdateContentPreviewEventArgs()); " is 133.
Long Statement,LineSharp,LineClient,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\LineClient.cs,Update,The length of the statement  "                    if (OnNotifiedPushNoticenterItem != null) OnNotifiedPushNoticenterItem.Invoke(this' new NotifiedPushNoticenterItemEventArgs()); " is 127.
Long Statement,LineSharp,OperationHandler,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\OperationHandler.cs,Listen,The length of the statement  "            byte[] oprev_response = connection.CallApi(URL.TalkService' Serial.Serialize("send_getLastOpRevision"' new object[] { })); " is 122.
Long Statement,LineSharp,OperationHandler,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\OperationHandler.cs,Listen,The length of the statement  "                byte[] fetch_operations_response = connection.CallApi(URL.P' Serial.Serialize("send_fetchOperations"' new object[] { oprev' 50 })); " is 131.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,buyFreeProduct,The length of the statement  "        var asyncResult = Begin_buyFreeProduct(null' null' receiverMid' productId' messageTemplate' language' country' packageId); " is 122.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,buyMustbuyProduct,The length of the statement  "        var asyncResult = Begin_buyMustbuyProduct(null' null' receiverMid' productId' messageTemplate' language' country' packageId' serialNumber); " is 139.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,recv_getActivePurchases,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "getActivePurchases failed: unknown result"); " is 128.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,recv_getActivePurchaseVersions,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "getActivePurchaseVersions failed: unknown result"); " is 135.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,recv_getCoinProducts,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "getCoinProducts failed: unknown result"); " is 125.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,recv_getCoinProductsByPgCode,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "getCoinProductsByPgCode failed: unknown result"); " is 133.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,recv_getCoinPurchaseHistory,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "getCoinPurchaseHistory failed: unknown result"); " is 132.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,recv_getCoinUseAndRefundHistory,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "getCoinUseAndRefundHistory failed: unknown result"); " is 136.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,recv_getDownloads,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "getDownloads failed: unknown result"); " is 122.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,recv_getEventPackages,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "getEventPackages failed: unknown result"); " is 126.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,recv_getNewlyReleasedPackages,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "getNewlyReleasedPackages failed: unknown result"); " is 134.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,recv_getPopularPackages,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "getPopularPackages failed: unknown result"); " is 128.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,recv_getPresentsReceived,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "getPresentsReceived failed: unknown result"); " is 129.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,recv_getPresentsSent,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "getPresentsSent failed: unknown result"); " is 125.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,recv_getProduct,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "getProduct failed: unknown result"); " is 120.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,recv_getProductList,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "getProductList failed: unknown result"); " is 124.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,recv_getProductListWithCarrier,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "getProductListWithCarrier failed: unknown result"); " is 135.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,recv_getProductWithCarrier,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "getProductWithCarrier failed: unknown result"); " is 131.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,recv_getPurchaseHistory,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "getPurchaseHistory failed: unknown result"); " is 128.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,recv_getTotalBalance,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "getTotalBalance failed: unknown result"); " is 125.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,recv_notifyDownloaded,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "notifyDownloaded failed: unknown result"); " is 126.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,recv_reserveCoinPurchase,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "reserveCoinPurchase failed: unknown result"); " is 129.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,recv_reservePayment,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "reservePayment failed: unknown result"); " is 124.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,recv_acquireCallRoute,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "acquireCallRoute failed: unknown result"); " is 126.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,recv_acquireCallTicket,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "acquireCallTicket failed: unknown result"); " is 127.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,recv_acquireEncryptedAccessToken,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "acquireEncryptedAccessToken failed: unknown result"); " is 137.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,recv_changeVerificationMethod,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "changeVerificationMethod failed: unknown result"); " is 134.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,recv_commitSendMessage,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "commitSendMessage failed: unknown result"); " is 127.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,recv_commitSendMessages,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "commitSendMessages failed: unknown result"); " is 128.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,recv_commitUpdateProfile,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "commitUpdateProfile failed: unknown result"); " is 129.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,recv_createGroup,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "createGroup failed: unknown result"); " is 121.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,recv_createQrcodeBase64Image,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "createQrcodeBase64Image failed: unknown result"); " is 133.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,recv_createRoom,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "createRoom failed: unknown result"); " is 120.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,recv_createSession,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "createSession failed: unknown result"); " is 123.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,recv_fetchAnnouncements,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "fetchAnnouncements failed: unknown result"); " is 128.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,recv_fetchMessages,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "fetchMessages failed: unknown result"); " is 123.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,recv_fetchOperations,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "fetchOperations failed: unknown result"); " is 125.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,recv_findAndAddContactsByEmail,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "findAndAddContactsByEmail failed: unknown result"); " is 135.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,recv_findAndAddContactsByMid,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "findAndAddContactsByMid failed: unknown result"); " is 133.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,recv_findAndAddContactsByPhone,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "findAndAddContactsByPhone failed: unknown result"); " is 135.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,recv_findAndAddContactsByUserid,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "findAndAddContactsByUserid failed: unknown result"); " is 136.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,recv_findContactByUserid,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "findContactByUserid failed: unknown result"); " is 129.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,recv_findContactByUserTicket,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "findContactByUserTicket failed: unknown result"); " is 133.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,recv_findContactsByEmail,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "findContactsByEmail failed: unknown result"); " is 129.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,recv_findContactsByPhone,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "findContactsByPhone failed: unknown result"); " is 129.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,recv_findSnsIdUserStatus,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "findSnsIdUserStatus failed: unknown result"); " is 129.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,recv_generateUserTicket,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "generateUserTicket failed: unknown result"); " is 128.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,recv_getAcceptedProximityMatches,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "getAcceptedProximityMatches failed: unknown result"); " is 137.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,recv_getActiveBuddySubscriberIds,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "getActiveBuddySubscriberIds failed: unknown result"); " is 137.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,recv_getAllContactIds,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "getAllContactIds failed: unknown result"); " is 126.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,recv_getAuthQrcode,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "getAuthQrcode failed: unknown result"); " is 123.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,recv_getBlockedContactIds,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "getBlockedContactIds failed: unknown result"); " is 130.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,recv_getBlockedContactIdsByRange,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "getBlockedContactIdsByRange failed: unknown result"); " is 137.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,recv_getBlockedRecommendationIds,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "getBlockedRecommendationIds failed: unknown result"); " is 137.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,recv_getBuddyBlockerIds,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "getBuddyBlockerIds failed: unknown result"); " is 128.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,recv_getBuddyLocation,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "getBuddyLocation failed: unknown result"); " is 126.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,recv_getCompactContactsModifiedSince,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "getCompactContactsModifiedSince failed: unknown result"); " is 141.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,recv_getCompactGroup,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "getCompactGroup failed: unknown result"); " is 125.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,recv_getCompactRoom,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "getCompactRoom failed: unknown result"); " is 124.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,recv_getContact,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "getContact failed: unknown result"); " is 120.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,recv_getContacts,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "getContacts failed: unknown result"); " is 121.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,recv_getCountryWithRequestIp,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "getCountryWithRequestIp failed: unknown result"); " is 133.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,recv_getFavoriteMids,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "getFavoriteMids failed: unknown result"); " is 125.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,recv_getGroupIdsInvited,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "getGroupIdsInvited failed: unknown result"); " is 128.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,recv_getGroupIdsJoined,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "getGroupIdsJoined failed: unknown result"); " is 127.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,recv_getHiddenContactMids,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "getHiddenContactMids failed: unknown result"); " is 130.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,recv_getIdentityIdentifier,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "getIdentityIdentifier failed: unknown result"); " is 131.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,recv_getLastAnnouncementIndex,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "getLastAnnouncementIndex failed: unknown result"); " is 134.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,recv_getLastOpRevision,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "getLastOpRevision failed: unknown result"); " is 127.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,recv_getMessageBox,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "getMessageBox failed: unknown result"); " is 123.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,recv_getMessageBoxCompactWrapUp,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "getMessageBoxCompactWrapUp failed: unknown result"); " is 136.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,recv_getMessageBoxCompactWrapUpList,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "getMessageBoxCompactWrapUpList failed: unknown result"); " is 140.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,recv_getMessageBoxList,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "getMessageBoxList failed: unknown result"); " is 127.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,recv_getMessageBoxListByStatus,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "getMessageBoxListByStatus failed: unknown result"); " is 135.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,recv_getMessageBoxWrapUp,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "getMessageBoxWrapUp failed: unknown result"); " is 129.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,recv_getMessageBoxWrapUpList,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "getMessageBoxWrapUpList failed: unknown result"); " is 133.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,recv_getMessagesBySequenceNumber,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "getMessagesBySequenceNumber failed: unknown result"); " is 137.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,recv_getNextMessages,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "getNextMessages failed: unknown result"); " is 125.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,recv_getNotificationPolicy,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "getNotificationPolicy failed: unknown result"); " is 131.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,recv_getPreviousMessages,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "getPreviousMessages failed: unknown result"); " is 129.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,recv_getProfile,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "getProfile failed: unknown result"); " is 120.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,recv_getProximityMatchCandidateList,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "getProximityMatchCandidateList failed: unknown result"); " is 140.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,recv_getProximityMatchCandidates,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "getProximityMatchCandidates failed: unknown result"); " is 137.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,recv_getRecentMessages,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "getRecentMessages failed: unknown result"); " is 127.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,recv_getRecommendationIds,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "getRecommendationIds failed: unknown result"); " is 130.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,recv_getRSAKeyInfo,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "getRSAKeyInfo failed: unknown result"); " is 123.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,recv_getServerTime,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "getServerTime failed: unknown result"); " is 123.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,recv_getSessions,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "getSessions failed: unknown result"); " is 121.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,recv_getSettings,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "getSettings failed: unknown result"); " is 121.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,recv_getSettingsAttributes,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "getSettingsAttributes failed: unknown result"); " is 131.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,recv_getSystemConfiguration,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "getSystemConfiguration failed: unknown result"); " is 132.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,recv_getUserTicket,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "getUserTicket failed: unknown result"); " is 123.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,recv_getWapInvitation,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "getWapInvitation failed: unknown result"); " is 126.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,recv_isIdentityIdentifierAvailable,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "isIdentityIdentifierAvailable failed: unknown result"); " is 139.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,recv_isUseridAvailable,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "isUseridAvailable failed: unknown result"); " is 127.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,loginWithIdentityCredential,The length of the statement  "        send_loginWithIdentityCredential(identityProvider' identifier' password' keepLoggedIn' accessLocation' systemName' certificate); " is 128.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,loginWithIdentityCredential,The length of the statement  "        var asyncResult = Begin_loginWithIdentityCredential(null' null' identityProvider' identifier' password' keepLoggedIn' accessLocation' systemName' certificate); " is 159.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,recv_loginWithIdentityCredential,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "loginWithIdentityCredential failed: unknown result"); " is 137.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,loginWithIdentityCredentialForCertificate,The length of the statement  "        send_loginWithIdentityCredentialForCertificate(identityProvider' identifier' password' keepLoggedIn' accessLocation' systemName' certificate); " is 142.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,loginWithIdentityCredentialForCertificate,The length of the statement  "        var asyncResult = Begin_loginWithIdentityCredentialForCertificate(null' null' identityProvider' identifier' password' keepLoggedIn' accessLocation' systemName' certificate); " is 173.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,recv_loginWithIdentityCredentialForCertificate,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "loginWithIdentityCredentialForCertificate failed: unknown result"); " is 151.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,recv_loginWithVerifier,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "loginWithVerifier failed: unknown result"); " is 127.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,recv_loginWithVerifierForCerificate,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "loginWithVerifierForCerificate failed: unknown result"); " is 140.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,recv_loginWithVerifierForCertificate,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "loginWithVerifierForCertificate failed: unknown result"); " is 141.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,recv_notifyBuddyOnAir,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "notifyBuddyOnAir failed: unknown result"); " is 126.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,recv_openProximityMatch,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "openProximityMatch failed: unknown result"); " is 128.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,recv_registerBuddyUser,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "registerBuddyUser failed: unknown result"); " is 127.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,recv_registerDevice,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "registerDevice failed: unknown result"); " is 124.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,recv_registerDeviceWithIdentityCredential,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "registerDeviceWithIdentityCredential failed: unknown result"); " is 146.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,recv_registerDeviceWithoutPhoneNumber,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "registerDeviceWithoutPhoneNumber failed: unknown result"); " is 142.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,registerDeviceWithoutPhoneNumberWithIdentityCredential,The length of the statement  "        send_registerDeviceWithoutPhoneNumberWithIdentityCredential(region' udidHash' deviceInfo' provider' identifier' verifier' mid); " is 127.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,registerDeviceWithoutPhoneNumberWithIdentityCredential,The length of the statement  "        var asyncResult = Begin_registerDeviceWithoutPhoneNumberWithIdentityCredential(null' null' region' udidHash' deviceInfo' provider' identifier' verifier' mid); " is 158.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,send_registerDeviceWithoutPhoneNumberWithIdentityCredential,The length of the statement  "        oprot_.WriteMessageBegin(new TMessage("registerDeviceWithoutPhoneNumberWithIdentityCredential"' TMessageType.Call' seqid_)); " is 124.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,send_registerDeviceWithoutPhoneNumberWithIdentityCredential,The length of the statement  "        registerDeviceWithoutPhoneNumberWithIdentityCredential_args args = new registerDeviceWithoutPhoneNumberWithIdentityCredential_args(); " is 133.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,recv_registerDeviceWithoutPhoneNumberWithIdentityCredential,The length of the statement  "        registerDeviceWithoutPhoneNumberWithIdentityCredential_result result = new registerDeviceWithoutPhoneNumberWithIdentityCredential_result(); " is 139.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,recv_registerDeviceWithoutPhoneNumberWithIdentityCredential,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "registerDeviceWithoutPhoneNumberWithIdentityCredential failed: unknown result"); " is 164.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,recv_registerUserid,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "registerUserid failed: unknown result"); " is 124.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,recv_registerWapDevice,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "registerWapDevice failed: unknown result"); " is 127.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,registerWithExistingSnsIdAndIdentityCredential,The length of the statement  "        var asyncResult = Begin_registerWithExistingSnsIdAndIdentityCredential(null' null' identityCredential' region' udidHash' deviceInfo); " is 133.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,recv_registerWithExistingSnsIdAndIdentityCredential,The length of the statement  "        registerWithExistingSnsIdAndIdentityCredential_result result = new registerWithExistingSnsIdAndIdentityCredential_result(); " is 123.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,recv_registerWithExistingSnsIdAndIdentityCredential,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "registerWithExistingSnsIdAndIdentityCredential failed: unknown result"); " is 156.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,recv_registerWithSnsId,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "registerWithSnsId failed: unknown result"); " is 127.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,registerWithSnsIdAndIdentityCredential,The length of the statement  "        send_registerWithSnsIdAndIdentityCredential(snsIdType' snsAccessToken' identityCredential' region' udidHash' deviceInfo); " is 121.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,registerWithSnsIdAndIdentityCredential,The length of the statement  "        var asyncResult = Begin_registerWithSnsIdAndIdentityCredential(null' null' snsIdType' snsAccessToken' identityCredential' region' udidHash' deviceInfo); " is 152.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,recv_registerWithSnsIdAndIdentityCredential,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "registerWithSnsIdAndIdentityCredential failed: unknown result"); " is 148.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,recv_reissueDeviceCredential,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "reissueDeviceCredential failed: unknown result"); " is 133.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,recv_reissueUserTicket,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "reissueUserTicket failed: unknown result"); " is 127.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,recv_removeMessage,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "removeMessage failed: unknown result"); " is 123.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,recv_removeMessageFromMyHome,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "removeMessageFromMyHome failed: unknown result"); " is 133.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,recv_removeSnsId,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "removeSnsId failed: unknown result"); " is 121.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,recv_reportContacts,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "reportContacts failed: unknown result"); " is 124.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,recv_requestEmailConfirmation,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "requestEmailConfirmation failed: unknown result"); " is 134.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,recv_resendEmailConfirmation,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "resendEmailConfirmation failed: unknown result"); " is 133.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,recv_sendContentPreviewUpdated,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "sendContentPreviewUpdated failed: unknown result"); " is 135.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,recv_sendMessage,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "sendMessage failed: unknown result"); " is 121.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,recv_sendMessageToMyHome,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "sendMessageToMyHome failed: unknown result"); " is 129.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,startUpdateVerification,The length of the statement  "        var asyncResult = Begin_startUpdateVerification(null' null' region' carrier' phone' udidHash' deviceInfo' networkCode' locale); " is 127.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,recv_startUpdateVerification,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "startUpdateVerification failed: unknown result"); " is 133.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,startVerification,The length of the statement  "        var asyncResult = Begin_startVerification(null' null' region' carrier' phone' udidHash' deviceInfo' networkCode' mid' locale); " is 126.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,recv_startVerification,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "startVerification failed: unknown result"); " is 127.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,recv_syncContactBySnsIds,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "syncContactBySnsIds failed: unknown result"); " is 129.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,recv_syncContacts,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "syncContacts failed: unknown result"); " is 122.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,recv_trySendMessage,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "trySendMessage failed: unknown result"); " is 124.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,recv_unregisterUserAndDevice,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "unregisterUserAndDevice failed: unknown result"); " is 133.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,recv_updateSettings2,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "updateSettings2 failed: unknown result"); " is 125.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,recv_updateSettingsAttributes,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "updateSettingsAttributes failed: unknown result"); " is 134.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,recv_verifyIdentityCredentialWithResult,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "verifyIdentityCredentialWithResult failed: unknown result"); " is 144.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,recv_verifyPhone,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "verifyPhone failed: unknown result"); " is 121.
Long Statement,LineSharp.Datatypes,Client,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,recv_verifyQrcode,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "verifyQrcode failed: unknown result"); " is 122.
Long Statement,LineSharp.Datatypes,Processor,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Process,The length of the statement  "            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod' "Invalid method name: '" + msg.Name + "'"); " is 147.
Long Statement,LineSharp.Datatypes,Processor,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,buyFreeProduct_Process,The length of the statement  "          iface_.buyFreeProduct(args.ReceiverMid' args.ProductId' args.MessageTemplate' args.Language' args.Country' args.PackageId); " is 123.
Long Statement,LineSharp.Datatypes,Processor,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,buyMustbuyProduct_Process,The length of the statement  "          iface_.buyMustbuyProduct(args.ReceiverMid' args.ProductId' args.MessageTemplate' args.Language' args.Country' args.PackageId' args.SerialNumber); " is 145.
Long Statement,LineSharp.Datatypes,Processor,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Process,The length of the statement  "            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod' "Invalid method name: '" + msg.Name + "'"); " is 147.
Long Statement,LineSharp.Datatypes,Processor,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,createQrcodeBase64Image_Process,The length of the statement  "          result.Success = iface_.createQrcodeBase64Image(args.Url' args.CharacterSet' args.ImageSize' args.X' args.Y' args.Width' args.Height); " is 134.
Long Statement,LineSharp.Datatypes,Processor,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,loginWithIdentityCredential_Process,The length of the statement  "          result.Success = iface_.loginWithIdentityCredential(args.IdentityProvider' args.Identifier' args.Password' args.KeepLoggedIn' args.AccessLocation' args.SystemName' args.Certificate); " is 182.
Long Statement,LineSharp.Datatypes,Processor,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,loginWithIdentityCredentialForCertificate_Process,The length of the statement  "          result.Success = iface_.loginWithIdentityCredentialForCertificate(args.IdentityProvider' args.Identifier' args.Password' args.KeepLoggedIn' args.AccessLocation' args.SystemName' args.Certificate); " is 196.
Long Statement,LineSharp.Datatypes,Processor,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,registerDeviceWithIdentityCredential_Process,The length of the statement  "          result.Success = iface_.registerDeviceWithIdentityCredential(args.SessionId' args.Provider' args.Identifier' args.Verifier); " is 124.
Long Statement,LineSharp.Datatypes,Processor,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,registerDeviceWithoutPhoneNumberWithIdentityCredential_Process,The length of the statement  "        registerDeviceWithoutPhoneNumberWithIdentityCredential_args args = new registerDeviceWithoutPhoneNumberWithIdentityCredential_args(); " is 133.
Long Statement,LineSharp.Datatypes,Processor,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,registerDeviceWithoutPhoneNumberWithIdentityCredential_Process,The length of the statement  "        registerDeviceWithoutPhoneNumberWithIdentityCredential_result result = new registerDeviceWithoutPhoneNumberWithIdentityCredential_result(); " is 139.
Long Statement,LineSharp.Datatypes,Processor,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,registerDeviceWithoutPhoneNumberWithIdentityCredential_Process,The length of the statement  "          result.Success = iface_.registerDeviceWithoutPhoneNumberWithIdentityCredential(args.Region' args.UdidHash' args.DeviceInfo' args.Provider' args.Identifier' args.Verifier' args.Mid); " is 181.
Long Statement,LineSharp.Datatypes,Processor,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,registerDeviceWithoutPhoneNumberWithIdentityCredential_Process,The length of the statement  "        oprot.WriteMessageBegin(new TMessage("registerDeviceWithoutPhoneNumberWithIdentityCredential"' TMessageType.Reply' seqid));  " is 123.
Long Statement,LineSharp.Datatypes,Processor,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,registerWithExistingSnsIdAndIdentityCredential_Process,The length of the statement  "        registerWithExistingSnsIdAndIdentityCredential_result result = new registerWithExistingSnsIdAndIdentityCredential_result(); " is 123.
Long Statement,LineSharp.Datatypes,Processor,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,registerWithExistingSnsIdAndIdentityCredential_Process,The length of the statement  "          result.Success = iface_.registerWithExistingSnsIdAndIdentityCredential(args.IdentityCredential' args.Region' args.UdidHash' args.DeviceInfo); " is 141.
Long Statement,LineSharp.Datatypes,Processor,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,registerWithSnsId_Process,The length of the statement  "          result.Success = iface_.registerWithSnsId(args.SnsIdType' args.SnsAccessToken' args.Region' args.UdidHash' args.DeviceInfo' args.Mid); " is 134.
Long Statement,LineSharp.Datatypes,Processor,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,registerWithSnsIdAndIdentityCredential_Process,The length of the statement  "          result.Success = iface_.registerWithSnsIdAndIdentityCredential(args.SnsIdType' args.SnsAccessToken' args.IdentityCredential' args.Region' args.UdidHash' args.DeviceInfo); " is 170.
Long Statement,LineSharp.Datatypes,Processor,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,startUpdateVerification_Process,The length of the statement  "          result.Success = iface_.startUpdateVerification(args.Region' args.Carrier' args.Phone' args.UdidHash' args.DeviceInfo' args.NetworkCode' args.Locale); " is 150.
Long Statement,LineSharp.Datatypes,Processor,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,startVerification_Process,The length of the statement  "          result.Success = iface_.startVerification(args.Region' args.Carrier' args.Phone' args.UdidHash' args.DeviceInfo' args.NetworkCode' args.Mid' args.Locale); " is 154.
Complex Conditional,LineSharp,LineClient,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\LineClient.cs,VerifyPin,The conditional expression  "pin_verified.Result != null &&                  !String.IsNullOrEmpty(pin_verified.Result.Verifier) &&                  !String.IsNullOrEmpty(pin_verified.Result.AuthPhase) &&                  pin_verified.Result.AuthPhase.Equals("QRCODE_VERIFIED")"  is complex.
Magic Number,LineSharp,LineClient,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\LineClient.cs,Login,The following statement contains a magic number: string exponent = rsaData.Split(''')[2];
Magic Number,LineSharp,OperationHandler,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\OperationHandler.cs,Listen,The following statement contains a magic number: byte[] fetch_operations_response = connection.CallApi(URL.P' Serial.Serialize("send_fetchOperations"' new object[] { oprev' 50 }));
Magic Number,LineSharp.Functions,Serial,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\Functions\Serial.cs,Serialize,The following statement contains a magic number: var serialstream = new MemoryStream(4096);
Magic Number,LineSharp.Functions,Serial,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\Functions\Serial.cs,SerializeOperation,The following statement contains a magic number: var serialstream = new MemoryStream(4096);
Magic Number,LineSharp.Functions,Auth,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\Functions\Auth.cs,GenerateAuthCode,The following statement contains a magic number: var data = new MemoryStream(sessionId.Length + username.Length + password.Length + 3);
Magic Number,LineSharp.Functions,Bytes,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\Functions\Bytes.cs,HexStringToByteArray,The following statement contains a magic number: string hexVal = hexString.Substring(i' 2);
Magic Number,LineSharp.Functions,Bytes,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\Functions\Bytes.cs,HexStringToByteArray,The following statement contains a magic number: int val = Convert.ToInt32(hexVal' 16);
Magic Number,LineSharp.Functions,Bytes,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\Functions\Bytes.cs,GetExponentFromString,The following statement contains a magic number: double ExponentLen_Double = Convert.ToDouble(exponent.Length) / 2;
Magic Number,LineSharp.Functions,Bytes,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\Functions\Bytes.cs,GetExponentFromString,The following statement contains a magic number: exponent.Substring(i * 2' 2) == "01"
Magic Number,LineSharp.Functions,Bytes,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\Functions\Bytes.cs,GetExponentFromString,The following statement contains a magic number: exponent.Substring(i * 2' 2) == "01"
Magic Number,LineSharp.Datatypes,Announcement,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Announcement.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.I32) {                Index = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.Bool) {                ForceUpdate = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.String) {                Title = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.String) {                Text = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 13:              if (field.Type == TType.I64) {                CreatedTime = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 14:              if (field.Type == TType.String) {                PictureUrl = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 15:              if (field.Type == TType.String) {                ThumbnailUrl = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,Announcement,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Announcement.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.I32) {                Index = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.Bool) {                ForceUpdate = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.String) {                Title = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.String) {                Text = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 13:              if (field.Type == TType.I64) {                CreatedTime = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 14:              if (field.Type == TType.String) {                PictureUrl = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 15:              if (field.Type == TType.String) {                ThumbnailUrl = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,Announcement,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Announcement.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.I32) {                Index = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.Bool) {                ForceUpdate = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.String) {                Title = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.String) {                Text = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 13:              if (field.Type == TType.I64) {                CreatedTime = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 14:              if (field.Type == TType.String) {                PictureUrl = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 15:              if (field.Type == TType.String) {                ThumbnailUrl = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,Announcement,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Announcement.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.I32) {                Index = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.Bool) {                ForceUpdate = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.String) {                Title = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.String) {                Text = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 13:              if (field.Type == TType.I64) {                CreatedTime = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 14:              if (field.Type == TType.String) {                PictureUrl = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 15:              if (field.Type == TType.String) {                ThumbnailUrl = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,Announcement,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Announcement.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.I32) {                Index = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.Bool) {                ForceUpdate = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.String) {                Title = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.String) {                Text = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 13:              if (field.Type == TType.I64) {                CreatedTime = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 14:              if (field.Type == TType.String) {                PictureUrl = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 15:              if (field.Type == TType.String) {                ThumbnailUrl = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,Announcement,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Announcement.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.I32) {                Index = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.Bool) {                ForceUpdate = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.String) {                Title = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.String) {                Text = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 13:              if (field.Type == TType.I64) {                CreatedTime = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 14:              if (field.Type == TType.String) {                PictureUrl = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 15:              if (field.Type == TType.String) {                ThumbnailUrl = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,Announcement,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Announcement.cs,Write,The following statement contains a magic number: field.ID = 10;
Magic Number,LineSharp.Datatypes,Announcement,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Announcement.cs,Write,The following statement contains a magic number: field.ID = 11;
Magic Number,LineSharp.Datatypes,Announcement,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Announcement.cs,Write,The following statement contains a magic number: field.ID = 12;
Magic Number,LineSharp.Datatypes,Announcement,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Announcement.cs,Write,The following statement contains a magic number: field.ID = 13;
Magic Number,LineSharp.Datatypes,Announcement,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Announcement.cs,Write,The following statement contains a magic number: field.ID = 14;
Magic Number,LineSharp.Datatypes,Announcement,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Announcement.cs,Write,The following statement contains a magic number: field.ID = 15;
Magic Number,LineSharp.Datatypes,AuthQrcode,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\AuthQrcode.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                Qrcode = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.String) {                Verifier = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,AuthQrcode,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\AuthQrcode.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,Coin,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Coin.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.I32) {                FreeCoinBalance = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.I32) {                PayedCoinBalance = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.I32) {                TotalCoinBalance = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.I32) {                RewardCoinBalance = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,Coin,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Coin.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.I32) {                FreeCoinBalance = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.I32) {                PayedCoinBalance = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.I32) {                TotalCoinBalance = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.I32) {                RewardCoinBalance = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,Coin,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Coin.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.I32) {                FreeCoinBalance = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.I32) {                PayedCoinBalance = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.I32) {                TotalCoinBalance = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.I32) {                RewardCoinBalance = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,Coin,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Coin.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,Coin,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Coin.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,LineSharp.Datatypes,Coin,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Coin.cs,Write,The following statement contains a magic number: field.ID = 4;
Magic Number,LineSharp.Datatypes,CoinHistory,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\CoinHistory.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.I64) {                PayDate = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.I32) {                CoinBalance = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.I32) {                Coin = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.String) {                Price = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.String) {                Title = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.Bool) {                Refund = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 7:              if (field.Type == TType.String) {                PaySeq = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 8:              if (field.Type == TType.String) {                Currency = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 9:              if (field.Type == TType.String) {                CurrencySign = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.String) {                DisplayPrice = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.Struct) {                Payload = new CoinPayLoad();                Payload.Read(iprot);              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.String) {                ChannelId = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,CoinHistory,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\CoinHistory.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.I64) {                PayDate = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.I32) {                CoinBalance = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.I32) {                Coin = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.String) {                Price = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.String) {                Title = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.Bool) {                Refund = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 7:              if (field.Type == TType.String) {                PaySeq = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 8:              if (field.Type == TType.String) {                Currency = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 9:              if (field.Type == TType.String) {                CurrencySign = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.String) {                DisplayPrice = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.Struct) {                Payload = new CoinPayLoad();                Payload.Read(iprot);              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.String) {                ChannelId = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,CoinHistory,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\CoinHistory.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.I64) {                PayDate = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.I32) {                CoinBalance = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.I32) {                Coin = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.String) {                Price = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.String) {                Title = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.Bool) {                Refund = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 7:              if (field.Type == TType.String) {                PaySeq = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 8:              if (field.Type == TType.String) {                Currency = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 9:              if (field.Type == TType.String) {                CurrencySign = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.String) {                DisplayPrice = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.Struct) {                Payload = new CoinPayLoad();                Payload.Read(iprot);              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.String) {                ChannelId = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,CoinHistory,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\CoinHistory.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.I64) {                PayDate = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.I32) {                CoinBalance = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.I32) {                Coin = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.String) {                Price = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.String) {                Title = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.Bool) {                Refund = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 7:              if (field.Type == TType.String) {                PaySeq = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 8:              if (field.Type == TType.String) {                Currency = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 9:              if (field.Type == TType.String) {                CurrencySign = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.String) {                DisplayPrice = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.Struct) {                Payload = new CoinPayLoad();                Payload.Read(iprot);              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.String) {                ChannelId = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,CoinHistory,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\CoinHistory.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.I64) {                PayDate = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.I32) {                CoinBalance = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.I32) {                Coin = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.String) {                Price = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.String) {                Title = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.Bool) {                Refund = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 7:              if (field.Type == TType.String) {                PaySeq = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 8:              if (field.Type == TType.String) {                Currency = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 9:              if (field.Type == TType.String) {                CurrencySign = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.String) {                DisplayPrice = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.Struct) {                Payload = new CoinPayLoad();                Payload.Read(iprot);              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.String) {                ChannelId = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,CoinHistory,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\CoinHistory.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.I64) {                PayDate = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.I32) {                CoinBalance = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.I32) {                Coin = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.String) {                Price = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.String) {                Title = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.Bool) {                Refund = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 7:              if (field.Type == TType.String) {                PaySeq = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 8:              if (field.Type == TType.String) {                Currency = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 9:              if (field.Type == TType.String) {                CurrencySign = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.String) {                DisplayPrice = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.Struct) {                Payload = new CoinPayLoad();                Payload.Read(iprot);              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.String) {                ChannelId = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,CoinHistory,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\CoinHistory.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.I64) {                PayDate = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.I32) {                CoinBalance = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.I32) {                Coin = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.String) {                Price = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.String) {                Title = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.Bool) {                Refund = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 7:              if (field.Type == TType.String) {                PaySeq = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 8:              if (field.Type == TType.String) {                Currency = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 9:              if (field.Type == TType.String) {                CurrencySign = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.String) {                DisplayPrice = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.Struct) {                Payload = new CoinPayLoad();                Payload.Read(iprot);              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.String) {                ChannelId = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,CoinHistory,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\CoinHistory.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.I64) {                PayDate = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.I32) {                CoinBalance = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.I32) {                Coin = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.String) {                Price = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.String) {                Title = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.Bool) {                Refund = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 7:              if (field.Type == TType.String) {                PaySeq = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 8:              if (field.Type == TType.String) {                Currency = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 9:              if (field.Type == TType.String) {                CurrencySign = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.String) {                DisplayPrice = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.Struct) {                Payload = new CoinPayLoad();                Payload.Read(iprot);              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.String) {                ChannelId = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,CoinHistory,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\CoinHistory.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.I64) {                PayDate = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.I32) {                CoinBalance = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.I32) {                Coin = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.String) {                Price = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.String) {                Title = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.Bool) {                Refund = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 7:              if (field.Type == TType.String) {                PaySeq = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 8:              if (field.Type == TType.String) {                Currency = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 9:              if (field.Type == TType.String) {                CurrencySign = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.String) {                DisplayPrice = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.Struct) {                Payload = new CoinPayLoad();                Payload.Read(iprot);              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.String) {                ChannelId = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,CoinHistory,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\CoinHistory.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.I64) {                PayDate = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.I32) {                CoinBalance = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.I32) {                Coin = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.String) {                Price = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.String) {                Title = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.Bool) {                Refund = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 7:              if (field.Type == TType.String) {                PaySeq = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 8:              if (field.Type == TType.String) {                Currency = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 9:              if (field.Type == TType.String) {                CurrencySign = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.String) {                DisplayPrice = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.Struct) {                Payload = new CoinPayLoad();                Payload.Read(iprot);              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.String) {                ChannelId = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,CoinHistory,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\CoinHistory.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.I64) {                PayDate = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.I32) {                CoinBalance = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.I32) {                Coin = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.String) {                Price = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.String) {                Title = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.Bool) {                Refund = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 7:              if (field.Type == TType.String) {                PaySeq = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 8:              if (field.Type == TType.String) {                Currency = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 9:              if (field.Type == TType.String) {                CurrencySign = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.String) {                DisplayPrice = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.Struct) {                Payload = new CoinPayLoad();                Payload.Read(iprot);              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.String) {                ChannelId = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,CoinHistory,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\CoinHistory.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,CoinHistory,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\CoinHistory.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,LineSharp.Datatypes,CoinHistory,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\CoinHistory.cs,Write,The following statement contains a magic number: field.ID = 4;
Magic Number,LineSharp.Datatypes,CoinHistory,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\CoinHistory.cs,Write,The following statement contains a magic number: field.ID = 5;
Magic Number,LineSharp.Datatypes,CoinHistory,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\CoinHistory.cs,Write,The following statement contains a magic number: field.ID = 6;
Magic Number,LineSharp.Datatypes,CoinHistory,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\CoinHistory.cs,Write,The following statement contains a magic number: field.ID = 7;
Magic Number,LineSharp.Datatypes,CoinHistory,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\CoinHistory.cs,Write,The following statement contains a magic number: field.ID = 8;
Magic Number,LineSharp.Datatypes,CoinHistory,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\CoinHistory.cs,Write,The following statement contains a magic number: field.ID = 9;
Magic Number,LineSharp.Datatypes,CoinHistory,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\CoinHistory.cs,Write,The following statement contains a magic number: field.ID = 10;
Magic Number,LineSharp.Datatypes,CoinHistory,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\CoinHistory.cs,Write,The following statement contains a magic number: field.ID = 11;
Magic Number,LineSharp.Datatypes,CoinHistory,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\CoinHistory.cs,Write,The following statement contains a magic number: field.ID = 12;
Magic Number,LineSharp.Datatypes,CoinHistoryCondition,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\CoinHistoryCondition.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.I64) {                Start = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.I32) {                Size = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.String) {                Language = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.String) {                Eddt = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.I32) {                AppStoreCode = (PaymentType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,CoinHistoryCondition,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\CoinHistoryCondition.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.I64) {                Start = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.I32) {                Size = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.String) {                Language = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.String) {                Eddt = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.I32) {                AppStoreCode = (PaymentType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,CoinHistoryCondition,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\CoinHistoryCondition.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.I64) {                Start = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.I32) {                Size = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.String) {                Language = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.String) {                Eddt = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.I32) {                AppStoreCode = (PaymentType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,CoinHistoryCondition,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\CoinHistoryCondition.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.I64) {                Start = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.I32) {                Size = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.String) {                Language = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.String) {                Eddt = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.I32) {                AppStoreCode = (PaymentType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,CoinHistoryCondition,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\CoinHistoryCondition.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,CoinHistoryCondition,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\CoinHistoryCondition.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,LineSharp.Datatypes,CoinHistoryCondition,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\CoinHistoryCondition.cs,Write,The following statement contains a magic number: field.ID = 4;
Magic Number,LineSharp.Datatypes,CoinHistoryCondition,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\CoinHistoryCondition.cs,Write,The following statement contains a magic number: field.ID = 5;
Magic Number,LineSharp.Datatypes,CoinHistoryResult,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\CoinHistoryResult.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.List) {                {                  Historys = new List<CoinHistory>();                  TList _list0 = iprot.ReadListBegin();                  for( int _i1 = 0; _i1 < _list0.Count; ++_i1)                  {                    CoinHistory _elem2 = new CoinHistory();                    _elem2 = new CoinHistory();                    _elem2.Read(iprot);                    Historys.Add(_elem2);                  }                  iprot.ReadListEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.Struct) {                Balance = new Coin();                Balance.Read(iprot);              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.Bool) {                HasNext = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,CoinHistoryResult,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\CoinHistoryResult.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.List) {                {                  Historys = new List<CoinHistory>();                  TList _list0 = iprot.ReadListBegin();                  for( int _i1 = 0; _i1 < _list0.Count; ++_i1)                  {                    CoinHistory _elem2 = new CoinHistory();                    _elem2 = new CoinHistory();                    _elem2.Read(iprot);                    Historys.Add(_elem2);                  }                  iprot.ReadListEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.Struct) {                Balance = new Coin();                Balance.Read(iprot);              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.Bool) {                HasNext = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,CoinHistoryResult,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\CoinHistoryResult.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,CoinHistoryResult,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\CoinHistoryResult.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,LineSharp.Datatypes,CoinPayLoad,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\CoinPayLoad.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.I32) {                PayCoin = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.I32) {                FreeCoin = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.I32) {                Type = (PayloadType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.I32) {                RewardCoin = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,CoinPayLoad,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\CoinPayLoad.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.I32) {                PayCoin = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.I32) {                FreeCoin = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.I32) {                Type = (PayloadType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.I32) {                RewardCoin = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,CoinPayLoad,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\CoinPayLoad.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.I32) {                PayCoin = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.I32) {                FreeCoin = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.I32) {                Type = (PayloadType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.I32) {                RewardCoin = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,CoinPayLoad,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\CoinPayLoad.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,CoinPayLoad,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\CoinPayLoad.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,LineSharp.Datatypes,CoinPayLoad,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\CoinPayLoad.cs,Write,The following statement contains a magic number: field.ID = 4;
Magic Number,LineSharp.Datatypes,CoinProductItem,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\CoinProductItem.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                ItemId = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.I32) {                Coin = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.I32) {                FreeCoin = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.String) {                Currency = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.String) {                Price = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 7:              if (field.Type == TType.String) {                DisplayPrice = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 8:              if (field.Type == TType.String) {                Name = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 9:              if (field.Type == TType.String) {                Desc = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,CoinProductItem,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\CoinProductItem.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                ItemId = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.I32) {                Coin = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.I32) {                FreeCoin = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.String) {                Currency = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.String) {                Price = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 7:              if (field.Type == TType.String) {                DisplayPrice = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 8:              if (field.Type == TType.String) {                Name = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 9:              if (field.Type == TType.String) {                Desc = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,CoinProductItem,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\CoinProductItem.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                ItemId = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.I32) {                Coin = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.I32) {                FreeCoin = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.String) {                Currency = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.String) {                Price = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 7:              if (field.Type == TType.String) {                DisplayPrice = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 8:              if (field.Type == TType.String) {                Name = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 9:              if (field.Type == TType.String) {                Desc = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,CoinProductItem,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\CoinProductItem.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                ItemId = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.I32) {                Coin = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.I32) {                FreeCoin = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.String) {                Currency = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.String) {                Price = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 7:              if (field.Type == TType.String) {                DisplayPrice = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 8:              if (field.Type == TType.String) {                Name = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 9:              if (field.Type == TType.String) {                Desc = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,CoinProductItem,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\CoinProductItem.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                ItemId = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.I32) {                Coin = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.I32) {                FreeCoin = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.String) {                Currency = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.String) {                Price = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 7:              if (field.Type == TType.String) {                DisplayPrice = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 8:              if (field.Type == TType.String) {                Name = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 9:              if (field.Type == TType.String) {                Desc = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,CoinProductItem,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\CoinProductItem.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                ItemId = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.I32) {                Coin = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.I32) {                FreeCoin = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.String) {                Currency = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.String) {                Price = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 7:              if (field.Type == TType.String) {                DisplayPrice = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 8:              if (field.Type == TType.String) {                Name = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 9:              if (field.Type == TType.String) {                Desc = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,CoinProductItem,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\CoinProductItem.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                ItemId = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.I32) {                Coin = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.I32) {                FreeCoin = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.String) {                Currency = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.String) {                Price = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 7:              if (field.Type == TType.String) {                DisplayPrice = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 8:              if (field.Type == TType.String) {                Name = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 9:              if (field.Type == TType.String) {                Desc = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,CoinProductItem,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\CoinProductItem.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,CoinProductItem,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\CoinProductItem.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,LineSharp.Datatypes,CoinProductItem,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\CoinProductItem.cs,Write,The following statement contains a magic number: field.ID = 5;
Magic Number,LineSharp.Datatypes,CoinProductItem,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\CoinProductItem.cs,Write,The following statement contains a magic number: field.ID = 6;
Magic Number,LineSharp.Datatypes,CoinProductItem,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\CoinProductItem.cs,Write,The following statement contains a magic number: field.ID = 7;
Magic Number,LineSharp.Datatypes,CoinProductItem,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\CoinProductItem.cs,Write,The following statement contains a magic number: field.ID = 8;
Magic Number,LineSharp.Datatypes,CoinProductItem,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\CoinProductItem.cs,Write,The following statement contains a magic number: field.ID = 9;
Magic Number,LineSharp.Datatypes,CoinPurchaseReservation,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\CoinPurchaseReservation.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                ProductId = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.String) {                Country = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.String) {                Currency = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.String) {                Price = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.I32) {                AppStoreCode = (PaymentType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.String) {                Language = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 7:              if (field.Type == TType.I32) {                PgCode = (PaymentPgType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 8:              if (field.Type == TType.String) {                RedirectUrl = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,CoinPurchaseReservation,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\CoinPurchaseReservation.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                ProductId = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.String) {                Country = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.String) {                Currency = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.String) {                Price = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.I32) {                AppStoreCode = (PaymentType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.String) {                Language = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 7:              if (field.Type == TType.I32) {                PgCode = (PaymentPgType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 8:              if (field.Type == TType.String) {                RedirectUrl = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,CoinPurchaseReservation,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\CoinPurchaseReservation.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                ProductId = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.String) {                Country = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.String) {                Currency = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.String) {                Price = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.I32) {                AppStoreCode = (PaymentType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.String) {                Language = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 7:              if (field.Type == TType.I32) {                PgCode = (PaymentPgType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 8:              if (field.Type == TType.String) {                RedirectUrl = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,CoinPurchaseReservation,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\CoinPurchaseReservation.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                ProductId = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.String) {                Country = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.String) {                Currency = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.String) {                Price = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.I32) {                AppStoreCode = (PaymentType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.String) {                Language = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 7:              if (field.Type == TType.I32) {                PgCode = (PaymentPgType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 8:              if (field.Type == TType.String) {                RedirectUrl = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,CoinPurchaseReservation,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\CoinPurchaseReservation.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                ProductId = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.String) {                Country = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.String) {                Currency = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.String) {                Price = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.I32) {                AppStoreCode = (PaymentType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.String) {                Language = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 7:              if (field.Type == TType.I32) {                PgCode = (PaymentPgType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 8:              if (field.Type == TType.String) {                RedirectUrl = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,CoinPurchaseReservation,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\CoinPurchaseReservation.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                ProductId = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.String) {                Country = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.String) {                Currency = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.String) {                Price = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.I32) {                AppStoreCode = (PaymentType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.String) {                Language = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 7:              if (field.Type == TType.I32) {                PgCode = (PaymentPgType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 8:              if (field.Type == TType.String) {                RedirectUrl = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,CoinPurchaseReservation,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\CoinPurchaseReservation.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                ProductId = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.String) {                Country = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.String) {                Currency = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.String) {                Price = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.I32) {                AppStoreCode = (PaymentType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.String) {                Language = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 7:              if (field.Type == TType.I32) {                PgCode = (PaymentPgType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 8:              if (field.Type == TType.String) {                RedirectUrl = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,CoinPurchaseReservation,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\CoinPurchaseReservation.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,CoinPurchaseReservation,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\CoinPurchaseReservation.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,LineSharp.Datatypes,CoinPurchaseReservation,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\CoinPurchaseReservation.cs,Write,The following statement contains a magic number: field.ID = 4;
Magic Number,LineSharp.Datatypes,CoinPurchaseReservation,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\CoinPurchaseReservation.cs,Write,The following statement contains a magic number: field.ID = 5;
Magic Number,LineSharp.Datatypes,CoinPurchaseReservation,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\CoinPurchaseReservation.cs,Write,The following statement contains a magic number: field.ID = 6;
Magic Number,LineSharp.Datatypes,CoinPurchaseReservation,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\CoinPurchaseReservation.cs,Write,The following statement contains a magic number: field.ID = 7;
Magic Number,LineSharp.Datatypes,CoinPurchaseReservation,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\CoinPurchaseReservation.cs,Write,The following statement contains a magic number: field.ID = 8;
Magic Number,LineSharp.Datatypes,CompactContact,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\CompactContact.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                Mid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.I64) {                CreatedTime = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.I64) {                ModifiedTime = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.I32) {                Status = (ContactStatus)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.I64) {                Settings = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.String) {                DisplayNameOverridden = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,CompactContact,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\CompactContact.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                Mid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.I64) {                CreatedTime = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.I64) {                ModifiedTime = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.I32) {                Status = (ContactStatus)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.I64) {                Settings = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.String) {                DisplayNameOverridden = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,CompactContact,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\CompactContact.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                Mid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.I64) {                CreatedTime = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.I64) {                ModifiedTime = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.I32) {                Status = (ContactStatus)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.I64) {                Settings = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.String) {                DisplayNameOverridden = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,CompactContact,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\CompactContact.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                Mid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.I64) {                CreatedTime = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.I64) {                ModifiedTime = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.I32) {                Status = (ContactStatus)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.I64) {                Settings = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.String) {                DisplayNameOverridden = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,CompactContact,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\CompactContact.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                Mid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.I64) {                CreatedTime = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.I64) {                ModifiedTime = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.I32) {                Status = (ContactStatus)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.I64) {                Settings = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.String) {                DisplayNameOverridden = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,CompactContact,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\CompactContact.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,CompactContact,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\CompactContact.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,LineSharp.Datatypes,CompactContact,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\CompactContact.cs,Write,The following statement contains a magic number: field.ID = 4;
Magic Number,LineSharp.Datatypes,CompactContact,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\CompactContact.cs,Write,The following statement contains a magic number: field.ID = 5;
Magic Number,LineSharp.Datatypes,CompactContact,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\CompactContact.cs,Write,The following statement contains a magic number: field.ID = 6;
Magic Number,LineSharp.Datatypes,Contact,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Contact.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                Mid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.I64) {                CreatedTime = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.I32) {                Type = (ContactType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.I32) {                Status = (ContactStatus)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 21:              if (field.Type == TType.I32) {                Relation = (ContactRelation)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 22:              if (field.Type == TType.String) {                DisplayName = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 23:              if (field.Type == TType.String) {                PhoneticName = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 24:              if (field.Type == TType.String) {                PictureStatus = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 25:              if (field.Type == TType.String) {                ThumbnailUrl = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 26:              if (field.Type == TType.String) {                StatusMessage = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 27:              if (field.Type == TType.String) {                DisplayNameOverridden = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 28:              if (field.Type == TType.I64) {                FavoriteTime = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 31:              if (field.Type == TType.Bool) {                CapableVoiceCall = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 32:              if (field.Type == TType.Bool) {                CapableVideoCall = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 33:              if (field.Type == TType.Bool) {                CapableMyhome = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 34:              if (field.Type == TType.Bool) {                CapableBuddy = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 35:              if (field.Type == TType.I32) {                Attributes = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 36:              if (field.Type == TType.I64) {                Settings = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 37:              if (field.Type == TType.String) {                PicturePath = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,Contact,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Contact.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                Mid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.I64) {                CreatedTime = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.I32) {                Type = (ContactType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.I32) {                Status = (ContactStatus)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 21:              if (field.Type == TType.I32) {                Relation = (ContactRelation)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 22:              if (field.Type == TType.String) {                DisplayName = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 23:              if (field.Type == TType.String) {                PhoneticName = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 24:              if (field.Type == TType.String) {                PictureStatus = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 25:              if (field.Type == TType.String) {                ThumbnailUrl = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 26:              if (field.Type == TType.String) {                StatusMessage = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 27:              if (field.Type == TType.String) {                DisplayNameOverridden = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 28:              if (field.Type == TType.I64) {                FavoriteTime = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 31:              if (field.Type == TType.Bool) {                CapableVoiceCall = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 32:              if (field.Type == TType.Bool) {                CapableVideoCall = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 33:              if (field.Type == TType.Bool) {                CapableMyhome = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 34:              if (field.Type == TType.Bool) {                CapableBuddy = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 35:              if (field.Type == TType.I32) {                Attributes = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 36:              if (field.Type == TType.I64) {                Settings = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 37:              if (field.Type == TType.String) {                PicturePath = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,Contact,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Contact.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                Mid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.I64) {                CreatedTime = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.I32) {                Type = (ContactType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.I32) {                Status = (ContactStatus)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 21:              if (field.Type == TType.I32) {                Relation = (ContactRelation)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 22:              if (field.Type == TType.String) {                DisplayName = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 23:              if (field.Type == TType.String) {                PhoneticName = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 24:              if (field.Type == TType.String) {                PictureStatus = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 25:              if (field.Type == TType.String) {                ThumbnailUrl = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 26:              if (field.Type == TType.String) {                StatusMessage = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 27:              if (field.Type == TType.String) {                DisplayNameOverridden = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 28:              if (field.Type == TType.I64) {                FavoriteTime = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 31:              if (field.Type == TType.Bool) {                CapableVoiceCall = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 32:              if (field.Type == TType.Bool) {                CapableVideoCall = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 33:              if (field.Type == TType.Bool) {                CapableMyhome = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 34:              if (field.Type == TType.Bool) {                CapableBuddy = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 35:              if (field.Type == TType.I32) {                Attributes = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 36:              if (field.Type == TType.I64) {                Settings = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 37:              if (field.Type == TType.String) {                PicturePath = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,Contact,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Contact.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                Mid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.I64) {                CreatedTime = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.I32) {                Type = (ContactType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.I32) {                Status = (ContactStatus)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 21:              if (field.Type == TType.I32) {                Relation = (ContactRelation)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 22:              if (field.Type == TType.String) {                DisplayName = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 23:              if (field.Type == TType.String) {                PhoneticName = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 24:              if (field.Type == TType.String) {                PictureStatus = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 25:              if (field.Type == TType.String) {                ThumbnailUrl = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 26:              if (field.Type == TType.String) {                StatusMessage = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 27:              if (field.Type == TType.String) {                DisplayNameOverridden = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 28:              if (field.Type == TType.I64) {                FavoriteTime = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 31:              if (field.Type == TType.Bool) {                CapableVoiceCall = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 32:              if (field.Type == TType.Bool) {                CapableVideoCall = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 33:              if (field.Type == TType.Bool) {                CapableMyhome = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 34:              if (field.Type == TType.Bool) {                CapableBuddy = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 35:              if (field.Type == TType.I32) {                Attributes = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 36:              if (field.Type == TType.I64) {                Settings = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 37:              if (field.Type == TType.String) {                PicturePath = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,Contact,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Contact.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                Mid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.I64) {                CreatedTime = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.I32) {                Type = (ContactType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.I32) {                Status = (ContactStatus)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 21:              if (field.Type == TType.I32) {                Relation = (ContactRelation)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 22:              if (field.Type == TType.String) {                DisplayName = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 23:              if (field.Type == TType.String) {                PhoneticName = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 24:              if (field.Type == TType.String) {                PictureStatus = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 25:              if (field.Type == TType.String) {                ThumbnailUrl = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 26:              if (field.Type == TType.String) {                StatusMessage = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 27:              if (field.Type == TType.String) {                DisplayNameOverridden = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 28:              if (field.Type == TType.I64) {                FavoriteTime = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 31:              if (field.Type == TType.Bool) {                CapableVoiceCall = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 32:              if (field.Type == TType.Bool) {                CapableVideoCall = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 33:              if (field.Type == TType.Bool) {                CapableMyhome = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 34:              if (field.Type == TType.Bool) {                CapableBuddy = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 35:              if (field.Type == TType.I32) {                Attributes = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 36:              if (field.Type == TType.I64) {                Settings = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 37:              if (field.Type == TType.String) {                PicturePath = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,Contact,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Contact.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                Mid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.I64) {                CreatedTime = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.I32) {                Type = (ContactType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.I32) {                Status = (ContactStatus)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 21:              if (field.Type == TType.I32) {                Relation = (ContactRelation)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 22:              if (field.Type == TType.String) {                DisplayName = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 23:              if (field.Type == TType.String) {                PhoneticName = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 24:              if (field.Type == TType.String) {                PictureStatus = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 25:              if (field.Type == TType.String) {                ThumbnailUrl = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 26:              if (field.Type == TType.String) {                StatusMessage = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 27:              if (field.Type == TType.String) {                DisplayNameOverridden = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 28:              if (field.Type == TType.I64) {                FavoriteTime = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 31:              if (field.Type == TType.Bool) {                CapableVoiceCall = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 32:              if (field.Type == TType.Bool) {                CapableVideoCall = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 33:              if (field.Type == TType.Bool) {                CapableMyhome = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 34:              if (field.Type == TType.Bool) {                CapableBuddy = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 35:              if (field.Type == TType.I32) {                Attributes = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 36:              if (field.Type == TType.I64) {                Settings = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 37:              if (field.Type == TType.String) {                PicturePath = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,Contact,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Contact.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                Mid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.I64) {                CreatedTime = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.I32) {                Type = (ContactType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.I32) {                Status = (ContactStatus)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 21:              if (field.Type == TType.I32) {                Relation = (ContactRelation)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 22:              if (field.Type == TType.String) {                DisplayName = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 23:              if (field.Type == TType.String) {                PhoneticName = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 24:              if (field.Type == TType.String) {                PictureStatus = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 25:              if (field.Type == TType.String) {                ThumbnailUrl = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 26:              if (field.Type == TType.String) {                StatusMessage = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 27:              if (field.Type == TType.String) {                DisplayNameOverridden = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 28:              if (field.Type == TType.I64) {                FavoriteTime = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 31:              if (field.Type == TType.Bool) {                CapableVoiceCall = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 32:              if (field.Type == TType.Bool) {                CapableVideoCall = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 33:              if (field.Type == TType.Bool) {                CapableMyhome = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 34:              if (field.Type == TType.Bool) {                CapableBuddy = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 35:              if (field.Type == TType.I32) {                Attributes = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 36:              if (field.Type == TType.I64) {                Settings = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 37:              if (field.Type == TType.String) {                PicturePath = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,Contact,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Contact.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                Mid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.I64) {                CreatedTime = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.I32) {                Type = (ContactType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.I32) {                Status = (ContactStatus)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 21:              if (field.Type == TType.I32) {                Relation = (ContactRelation)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 22:              if (field.Type == TType.String) {                DisplayName = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 23:              if (field.Type == TType.String) {                PhoneticName = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 24:              if (field.Type == TType.String) {                PictureStatus = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 25:              if (field.Type == TType.String) {                ThumbnailUrl = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 26:              if (field.Type == TType.String) {                StatusMessage = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 27:              if (field.Type == TType.String) {                DisplayNameOverridden = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 28:              if (field.Type == TType.I64) {                FavoriteTime = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 31:              if (field.Type == TType.Bool) {                CapableVoiceCall = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 32:              if (field.Type == TType.Bool) {                CapableVideoCall = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 33:              if (field.Type == TType.Bool) {                CapableMyhome = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 34:              if (field.Type == TType.Bool) {                CapableBuddy = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 35:              if (field.Type == TType.I32) {                Attributes = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 36:              if (field.Type == TType.I64) {                Settings = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 37:              if (field.Type == TType.String) {                PicturePath = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,Contact,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Contact.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                Mid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.I64) {                CreatedTime = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.I32) {                Type = (ContactType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.I32) {                Status = (ContactStatus)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 21:              if (field.Type == TType.I32) {                Relation = (ContactRelation)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 22:              if (field.Type == TType.String) {                DisplayName = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 23:              if (field.Type == TType.String) {                PhoneticName = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 24:              if (field.Type == TType.String) {                PictureStatus = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 25:              if (field.Type == TType.String) {                ThumbnailUrl = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 26:              if (field.Type == TType.String) {                StatusMessage = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 27:              if (field.Type == TType.String) {                DisplayNameOverridden = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 28:              if (field.Type == TType.I64) {                FavoriteTime = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 31:              if (field.Type == TType.Bool) {                CapableVoiceCall = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 32:              if (field.Type == TType.Bool) {                CapableVideoCall = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 33:              if (field.Type == TType.Bool) {                CapableMyhome = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 34:              if (field.Type == TType.Bool) {                CapableBuddy = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 35:              if (field.Type == TType.I32) {                Attributes = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 36:              if (field.Type == TType.I64) {                Settings = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 37:              if (field.Type == TType.String) {                PicturePath = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,Contact,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Contact.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                Mid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.I64) {                CreatedTime = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.I32) {                Type = (ContactType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.I32) {                Status = (ContactStatus)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 21:              if (field.Type == TType.I32) {                Relation = (ContactRelation)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 22:              if (field.Type == TType.String) {                DisplayName = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 23:              if (field.Type == TType.String) {                PhoneticName = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 24:              if (field.Type == TType.String) {                PictureStatus = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 25:              if (field.Type == TType.String) {                ThumbnailUrl = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 26:              if (field.Type == TType.String) {                StatusMessage = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 27:              if (field.Type == TType.String) {                DisplayNameOverridden = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 28:              if (field.Type == TType.I64) {                FavoriteTime = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 31:              if (field.Type == TType.Bool) {                CapableVoiceCall = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 32:              if (field.Type == TType.Bool) {                CapableVideoCall = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 33:              if (field.Type == TType.Bool) {                CapableMyhome = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 34:              if (field.Type == TType.Bool) {                CapableBuddy = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 35:              if (field.Type == TType.I32) {                Attributes = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 36:              if (field.Type == TType.I64) {                Settings = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 37:              if (field.Type == TType.String) {                PicturePath = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,Contact,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Contact.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                Mid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.I64) {                CreatedTime = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.I32) {                Type = (ContactType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.I32) {                Status = (ContactStatus)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 21:              if (field.Type == TType.I32) {                Relation = (ContactRelation)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 22:              if (field.Type == TType.String) {                DisplayName = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 23:              if (field.Type == TType.String) {                PhoneticName = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 24:              if (field.Type == TType.String) {                PictureStatus = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 25:              if (field.Type == TType.String) {                ThumbnailUrl = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 26:              if (field.Type == TType.String) {                StatusMessage = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 27:              if (field.Type == TType.String) {                DisplayNameOverridden = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 28:              if (field.Type == TType.I64) {                FavoriteTime = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 31:              if (field.Type == TType.Bool) {                CapableVoiceCall = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 32:              if (field.Type == TType.Bool) {                CapableVideoCall = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 33:              if (field.Type == TType.Bool) {                CapableMyhome = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 34:              if (field.Type == TType.Bool) {                CapableBuddy = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 35:              if (field.Type == TType.I32) {                Attributes = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 36:              if (field.Type == TType.I64) {                Settings = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 37:              if (field.Type == TType.String) {                PicturePath = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,Contact,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Contact.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                Mid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.I64) {                CreatedTime = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.I32) {                Type = (ContactType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.I32) {                Status = (ContactStatus)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 21:              if (field.Type == TType.I32) {                Relation = (ContactRelation)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 22:              if (field.Type == TType.String) {                DisplayName = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 23:              if (field.Type == TType.String) {                PhoneticName = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 24:              if (field.Type == TType.String) {                PictureStatus = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 25:              if (field.Type == TType.String) {                ThumbnailUrl = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 26:              if (field.Type == TType.String) {                StatusMessage = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 27:              if (field.Type == TType.String) {                DisplayNameOverridden = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 28:              if (field.Type == TType.I64) {                FavoriteTime = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 31:              if (field.Type == TType.Bool) {                CapableVoiceCall = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 32:              if (field.Type == TType.Bool) {                CapableVideoCall = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 33:              if (field.Type == TType.Bool) {                CapableMyhome = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 34:              if (field.Type == TType.Bool) {                CapableBuddy = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 35:              if (field.Type == TType.I32) {                Attributes = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 36:              if (field.Type == TType.I64) {                Settings = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 37:              if (field.Type == TType.String) {                PicturePath = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,Contact,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Contact.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                Mid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.I64) {                CreatedTime = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.I32) {                Type = (ContactType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.I32) {                Status = (ContactStatus)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 21:              if (field.Type == TType.I32) {                Relation = (ContactRelation)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 22:              if (field.Type == TType.String) {                DisplayName = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 23:              if (field.Type == TType.String) {                PhoneticName = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 24:              if (field.Type == TType.String) {                PictureStatus = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 25:              if (field.Type == TType.String) {                ThumbnailUrl = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 26:              if (field.Type == TType.String) {                StatusMessage = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 27:              if (field.Type == TType.String) {                DisplayNameOverridden = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 28:              if (field.Type == TType.I64) {                FavoriteTime = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 31:              if (field.Type == TType.Bool) {                CapableVoiceCall = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 32:              if (field.Type == TType.Bool) {                CapableVideoCall = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 33:              if (field.Type == TType.Bool) {                CapableMyhome = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 34:              if (field.Type == TType.Bool) {                CapableBuddy = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 35:              if (field.Type == TType.I32) {                Attributes = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 36:              if (field.Type == TType.I64) {                Settings = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 37:              if (field.Type == TType.String) {                PicturePath = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,Contact,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Contact.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                Mid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.I64) {                CreatedTime = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.I32) {                Type = (ContactType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.I32) {                Status = (ContactStatus)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 21:              if (field.Type == TType.I32) {                Relation = (ContactRelation)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 22:              if (field.Type == TType.String) {                DisplayName = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 23:              if (field.Type == TType.String) {                PhoneticName = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 24:              if (field.Type == TType.String) {                PictureStatus = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 25:              if (field.Type == TType.String) {                ThumbnailUrl = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 26:              if (field.Type == TType.String) {                StatusMessage = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 27:              if (field.Type == TType.String) {                DisplayNameOverridden = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 28:              if (field.Type == TType.I64) {                FavoriteTime = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 31:              if (field.Type == TType.Bool) {                CapableVoiceCall = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 32:              if (field.Type == TType.Bool) {                CapableVideoCall = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 33:              if (field.Type == TType.Bool) {                CapableMyhome = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 34:              if (field.Type == TType.Bool) {                CapableBuddy = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 35:              if (field.Type == TType.I32) {                Attributes = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 36:              if (field.Type == TType.I64) {                Settings = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 37:              if (field.Type == TType.String) {                PicturePath = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,Contact,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Contact.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                Mid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.I64) {                CreatedTime = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.I32) {                Type = (ContactType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.I32) {                Status = (ContactStatus)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 21:              if (field.Type == TType.I32) {                Relation = (ContactRelation)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 22:              if (field.Type == TType.String) {                DisplayName = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 23:              if (field.Type == TType.String) {                PhoneticName = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 24:              if (field.Type == TType.String) {                PictureStatus = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 25:              if (field.Type == TType.String) {                ThumbnailUrl = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 26:              if (field.Type == TType.String) {                StatusMessage = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 27:              if (field.Type == TType.String) {                DisplayNameOverridden = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 28:              if (field.Type == TType.I64) {                FavoriteTime = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 31:              if (field.Type == TType.Bool) {                CapableVoiceCall = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 32:              if (field.Type == TType.Bool) {                CapableVideoCall = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 33:              if (field.Type == TType.Bool) {                CapableMyhome = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 34:              if (field.Type == TType.Bool) {                CapableBuddy = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 35:              if (field.Type == TType.I32) {                Attributes = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 36:              if (field.Type == TType.I64) {                Settings = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 37:              if (field.Type == TType.String) {                PicturePath = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,Contact,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Contact.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                Mid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.I64) {                CreatedTime = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.I32) {                Type = (ContactType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.I32) {                Status = (ContactStatus)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 21:              if (field.Type == TType.I32) {                Relation = (ContactRelation)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 22:              if (field.Type == TType.String) {                DisplayName = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 23:              if (field.Type == TType.String) {                PhoneticName = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 24:              if (field.Type == TType.String) {                PictureStatus = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 25:              if (field.Type == TType.String) {                ThumbnailUrl = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 26:              if (field.Type == TType.String) {                StatusMessage = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 27:              if (field.Type == TType.String) {                DisplayNameOverridden = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 28:              if (field.Type == TType.I64) {                FavoriteTime = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 31:              if (field.Type == TType.Bool) {                CapableVoiceCall = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 32:              if (field.Type == TType.Bool) {                CapableVideoCall = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 33:              if (field.Type == TType.Bool) {                CapableMyhome = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 34:              if (field.Type == TType.Bool) {                CapableBuddy = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 35:              if (field.Type == TType.I32) {                Attributes = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 36:              if (field.Type == TType.I64) {                Settings = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 37:              if (field.Type == TType.String) {                PicturePath = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,Contact,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Contact.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                Mid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.I64) {                CreatedTime = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.I32) {                Type = (ContactType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.I32) {                Status = (ContactStatus)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 21:              if (field.Type == TType.I32) {                Relation = (ContactRelation)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 22:              if (field.Type == TType.String) {                DisplayName = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 23:              if (field.Type == TType.String) {                PhoneticName = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 24:              if (field.Type == TType.String) {                PictureStatus = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 25:              if (field.Type == TType.String) {                ThumbnailUrl = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 26:              if (field.Type == TType.String) {                StatusMessage = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 27:              if (field.Type == TType.String) {                DisplayNameOverridden = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 28:              if (field.Type == TType.I64) {                FavoriteTime = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 31:              if (field.Type == TType.Bool) {                CapableVoiceCall = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 32:              if (field.Type == TType.Bool) {                CapableVideoCall = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 33:              if (field.Type == TType.Bool) {                CapableMyhome = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 34:              if (field.Type == TType.Bool) {                CapableBuddy = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 35:              if (field.Type == TType.I32) {                Attributes = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 36:              if (field.Type == TType.I64) {                Settings = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 37:              if (field.Type == TType.String) {                PicturePath = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,Contact,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Contact.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                Mid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.I64) {                CreatedTime = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.I32) {                Type = (ContactType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.I32) {                Status = (ContactStatus)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 21:              if (field.Type == TType.I32) {                Relation = (ContactRelation)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 22:              if (field.Type == TType.String) {                DisplayName = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 23:              if (field.Type == TType.String) {                PhoneticName = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 24:              if (field.Type == TType.String) {                PictureStatus = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 25:              if (field.Type == TType.String) {                ThumbnailUrl = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 26:              if (field.Type == TType.String) {                StatusMessage = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 27:              if (field.Type == TType.String) {                DisplayNameOverridden = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 28:              if (field.Type == TType.I64) {                FavoriteTime = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 31:              if (field.Type == TType.Bool) {                CapableVoiceCall = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 32:              if (field.Type == TType.Bool) {                CapableVideoCall = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 33:              if (field.Type == TType.Bool) {                CapableMyhome = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 34:              if (field.Type == TType.Bool) {                CapableBuddy = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 35:              if (field.Type == TType.I32) {                Attributes = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 36:              if (field.Type == TType.I64) {                Settings = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 37:              if (field.Type == TType.String) {                PicturePath = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,Contact,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Contact.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,Contact,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Contact.cs,Write,The following statement contains a magic number: field.ID = 10;
Magic Number,LineSharp.Datatypes,Contact,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Contact.cs,Write,The following statement contains a magic number: field.ID = 11;
Magic Number,LineSharp.Datatypes,Contact,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Contact.cs,Write,The following statement contains a magic number: field.ID = 21;
Magic Number,LineSharp.Datatypes,Contact,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Contact.cs,Write,The following statement contains a magic number: field.ID = 22;
Magic Number,LineSharp.Datatypes,Contact,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Contact.cs,Write,The following statement contains a magic number: field.ID = 23;
Magic Number,LineSharp.Datatypes,Contact,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Contact.cs,Write,The following statement contains a magic number: field.ID = 24;
Magic Number,LineSharp.Datatypes,Contact,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Contact.cs,Write,The following statement contains a magic number: field.ID = 25;
Magic Number,LineSharp.Datatypes,Contact,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Contact.cs,Write,The following statement contains a magic number: field.ID = 26;
Magic Number,LineSharp.Datatypes,Contact,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Contact.cs,Write,The following statement contains a magic number: field.ID = 27;
Magic Number,LineSharp.Datatypes,Contact,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Contact.cs,Write,The following statement contains a magic number: field.ID = 28;
Magic Number,LineSharp.Datatypes,Contact,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Contact.cs,Write,The following statement contains a magic number: field.ID = 31;
Magic Number,LineSharp.Datatypes,Contact,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Contact.cs,Write,The following statement contains a magic number: field.ID = 32;
Magic Number,LineSharp.Datatypes,Contact,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Contact.cs,Write,The following statement contains a magic number: field.ID = 33;
Magic Number,LineSharp.Datatypes,Contact,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Contact.cs,Write,The following statement contains a magic number: field.ID = 34;
Magic Number,LineSharp.Datatypes,Contact,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Contact.cs,Write,The following statement contains a magic number: field.ID = 35;
Magic Number,LineSharp.Datatypes,Contact,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Contact.cs,Write,The following statement contains a magic number: field.ID = 36;
Magic Number,LineSharp.Datatypes,Contact,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Contact.cs,Write,The following statement contains a magic number: field.ID = 37;
Magic Number,LineSharp.Datatypes,ContactModification,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ContactModification.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.I32) {                Type = (ModificationType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.String) {                Luid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.List) {                {                  Phones = new List<string>();                  TList _list4 = iprot.ReadListBegin();                  for( int _i5 = 0; _i5 < _list4.Count; ++_i5)                  {                    string _elem6 = null;                    _elem6 = iprot.ReadString();                    Phones.Add(_elem6);                  }                  iprot.ReadListEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.List) {                {                  Emails = new List<string>();                  TList _list7 = iprot.ReadListBegin();                  for( int _i8 = 0; _i8 < _list7.Count; ++_i8)                  {                    string _elem9 = null;                    _elem9 = iprot.ReadString();                    Emails.Add(_elem9);                  }                  iprot.ReadListEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 13:              if (field.Type == TType.List) {                {                  Userids = new List<string>();                  TList _list10 = iprot.ReadListBegin();                  for( int _i11 = 0; _i11 < _list10.Count; ++_i11)                  {                    string _elem12 = null;                    _elem12 = iprot.ReadString();                    Userids.Add(_elem12);                  }                  iprot.ReadListEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,ContactModification,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ContactModification.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.I32) {                Type = (ModificationType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.String) {                Luid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.List) {                {                  Phones = new List<string>();                  TList _list4 = iprot.ReadListBegin();                  for( int _i5 = 0; _i5 < _list4.Count; ++_i5)                  {                    string _elem6 = null;                    _elem6 = iprot.ReadString();                    Phones.Add(_elem6);                  }                  iprot.ReadListEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.List) {                {                  Emails = new List<string>();                  TList _list7 = iprot.ReadListBegin();                  for( int _i8 = 0; _i8 < _list7.Count; ++_i8)                  {                    string _elem9 = null;                    _elem9 = iprot.ReadString();                    Emails.Add(_elem9);                  }                  iprot.ReadListEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 13:              if (field.Type == TType.List) {                {                  Userids = new List<string>();                  TList _list10 = iprot.ReadListBegin();                  for( int _i11 = 0; _i11 < _list10.Count; ++_i11)                  {                    string _elem12 = null;                    _elem12 = iprot.ReadString();                    Userids.Add(_elem12);                  }                  iprot.ReadListEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,ContactModification,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ContactModification.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.I32) {                Type = (ModificationType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.String) {                Luid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.List) {                {                  Phones = new List<string>();                  TList _list4 = iprot.ReadListBegin();                  for( int _i5 = 0; _i5 < _list4.Count; ++_i5)                  {                    string _elem6 = null;                    _elem6 = iprot.ReadString();                    Phones.Add(_elem6);                  }                  iprot.ReadListEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.List) {                {                  Emails = new List<string>();                  TList _list7 = iprot.ReadListBegin();                  for( int _i8 = 0; _i8 < _list7.Count; ++_i8)                  {                    string _elem9 = null;                    _elem9 = iprot.ReadString();                    Emails.Add(_elem9);                  }                  iprot.ReadListEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 13:              if (field.Type == TType.List) {                {                  Userids = new List<string>();                  TList _list10 = iprot.ReadListBegin();                  for( int _i11 = 0; _i11 < _list10.Count; ++_i11)                  {                    string _elem12 = null;                    _elem12 = iprot.ReadString();                    Userids.Add(_elem12);                  }                  iprot.ReadListEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,ContactModification,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ContactModification.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.I32) {                Type = (ModificationType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.String) {                Luid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.List) {                {                  Phones = new List<string>();                  TList _list4 = iprot.ReadListBegin();                  for( int _i5 = 0; _i5 < _list4.Count; ++_i5)                  {                    string _elem6 = null;                    _elem6 = iprot.ReadString();                    Phones.Add(_elem6);                  }                  iprot.ReadListEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.List) {                {                  Emails = new List<string>();                  TList _list7 = iprot.ReadListBegin();                  for( int _i8 = 0; _i8 < _list7.Count; ++_i8)                  {                    string _elem9 = null;                    _elem9 = iprot.ReadString();                    Emails.Add(_elem9);                  }                  iprot.ReadListEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 13:              if (field.Type == TType.List) {                {                  Userids = new List<string>();                  TList _list10 = iprot.ReadListBegin();                  for( int _i11 = 0; _i11 < _list10.Count; ++_i11)                  {                    string _elem12 = null;                    _elem12 = iprot.ReadString();                    Userids.Add(_elem12);                  }                  iprot.ReadListEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,ContactModification,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ContactModification.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,ContactModification,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ContactModification.cs,Write,The following statement contains a magic number: field.ID = 11;
Magic Number,LineSharp.Datatypes,ContactModification,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ContactModification.cs,Write,The following statement contains a magic number: field.ID = 12;
Magic Number,LineSharp.Datatypes,ContactModification,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ContactModification.cs,Write,The following statement contains a magic number: field.ID = 13;
Magic Number,LineSharp.Datatypes,ContactRegistration,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ContactRegistration.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.Struct) {                Contact = new Contact();                Contact.Read(iprot);              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.String) {                Luid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.I32) {                ContactType = (ContactType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.String) {                ContactKey = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,ContactRegistration,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ContactRegistration.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.Struct) {                Contact = new Contact();                Contact.Read(iprot);              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.String) {                Luid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.I32) {                ContactType = (ContactType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.String) {                ContactKey = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,ContactRegistration,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ContactRegistration.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.Struct) {                Contact = new Contact();                Contact.Read(iprot);              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.String) {                Luid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.I32) {                ContactType = (ContactType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.String) {                ContactKey = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,ContactRegistration,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ContactRegistration.cs,Write,The following statement contains a magic number: field.ID = 10;
Magic Number,LineSharp.Datatypes,ContactRegistration,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ContactRegistration.cs,Write,The following statement contains a magic number: field.ID = 11;
Magic Number,LineSharp.Datatypes,ContactRegistration,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ContactRegistration.cs,Write,The following statement contains a magic number: field.ID = 12;
Magic Number,LineSharp.Datatypes,ContactReport,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ContactReport.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                Mid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.Bool) {                Exists = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.Struct) {                Contact = new Contact();                Contact.Read(iprot);              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,ContactReport,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ContactReport.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                Mid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.Bool) {                Exists = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.Struct) {                Contact = new Contact();                Contact.Read(iprot);              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,ContactReport,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ContactReport.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,ContactReport,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ContactReport.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,LineSharp.Datatypes,ContactReportResult,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ContactReportResult.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                Mid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.Bool) {                Exists = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,ContactReportResult,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ContactReportResult.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,DeviceInfo,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\DeviceInfo.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                DeviceName = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.String) {                SystemName = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.String) {                SystemVersion = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.String) {                Model = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.I32) {                CarrierCode = (CarrierCode)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.String) {                CarrierName = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 20:              if (field.Type == TType.I32) {                ApplicationType = (ApplicationType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,DeviceInfo,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\DeviceInfo.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                DeviceName = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.String) {                SystemName = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.String) {                SystemVersion = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.String) {                Model = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.I32) {                CarrierCode = (CarrierCode)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.String) {                CarrierName = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 20:              if (field.Type == TType.I32) {                ApplicationType = (ApplicationType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,DeviceInfo,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\DeviceInfo.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                DeviceName = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.String) {                SystemName = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.String) {                SystemVersion = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.String) {                Model = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.I32) {                CarrierCode = (CarrierCode)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.String) {                CarrierName = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 20:              if (field.Type == TType.I32) {                ApplicationType = (ApplicationType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,DeviceInfo,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\DeviceInfo.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                DeviceName = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.String) {                SystemName = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.String) {                SystemVersion = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.String) {                Model = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.I32) {                CarrierCode = (CarrierCode)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.String) {                CarrierName = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 20:              if (field.Type == TType.I32) {                ApplicationType = (ApplicationType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,DeviceInfo,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\DeviceInfo.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                DeviceName = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.String) {                SystemName = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.String) {                SystemVersion = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.String) {                Model = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.I32) {                CarrierCode = (CarrierCode)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.String) {                CarrierName = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 20:              if (field.Type == TType.I32) {                ApplicationType = (ApplicationType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,DeviceInfo,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\DeviceInfo.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                DeviceName = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.String) {                SystemName = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.String) {                SystemVersion = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.String) {                Model = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.I32) {                CarrierCode = (CarrierCode)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.String) {                CarrierName = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 20:              if (field.Type == TType.I32) {                ApplicationType = (ApplicationType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,DeviceInfo,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\DeviceInfo.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,DeviceInfo,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\DeviceInfo.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,LineSharp.Datatypes,DeviceInfo,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\DeviceInfo.cs,Write,The following statement contains a magic number: field.ID = 4;
Magic Number,LineSharp.Datatypes,DeviceInfo,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\DeviceInfo.cs,Write,The following statement contains a magic number: field.ID = 10;
Magic Number,LineSharp.Datatypes,DeviceInfo,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\DeviceInfo.cs,Write,The following statement contains a magic number: field.ID = 11;
Magic Number,LineSharp.Datatypes,DeviceInfo,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\DeviceInfo.cs,Write,The following statement contains a magic number: field.ID = 20;
Magic Number,LineSharp.Datatypes,EmailConfirmation,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\EmailConfirmation.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.Bool) {                UsePasswordSet = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.String) {                Email = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.String) {                Password = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.Bool) {                IgnoreDuplication = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,EmailConfirmation,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\EmailConfirmation.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.Bool) {                UsePasswordSet = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.String) {                Email = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.String) {                Password = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.Bool) {                IgnoreDuplication = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,EmailConfirmation,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\EmailConfirmation.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.Bool) {                UsePasswordSet = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.String) {                Email = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.String) {                Password = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.Bool) {                IgnoreDuplication = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,EmailConfirmation,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\EmailConfirmation.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,EmailConfirmation,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\EmailConfirmation.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,LineSharp.Datatypes,EmailConfirmation,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\EmailConfirmation.cs,Write,The following statement contains a magic number: field.ID = 4;
Magic Number,LineSharp.Datatypes,EmailConfirmationSession,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\EmailConfirmationSession.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.I32) {                EmailConfirmationType = (EmailConfirmationType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.String) {                Verifier = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.String) {                TargetEmail = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,EmailConfirmationSession,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\EmailConfirmationSession.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.I32) {                EmailConfirmationType = (EmailConfirmationType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.String) {                Verifier = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.String) {                TargetEmail = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,EmailConfirmationSession,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\EmailConfirmationSession.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,EmailConfirmationSession,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\EmailConfirmationSession.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,LineSharp.Datatypes,Geolocation,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Geolocation.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.Double) {                Longitude = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.Double) {                Latitude = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,Geolocation,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Geolocation.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,Group,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Group.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                Id = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.I64) {                CreatedTime = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.String) {                Name = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.String) {                PictureStatus = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 20:              if (field.Type == TType.List) {                {                  Members = new List<Contact>();                  TList _list16 = iprot.ReadListBegin();                  for( int _i17 = 0; _i17 < _list16.Count; ++_i17)                  {                    Contact _elem18 = new Contact();                    _elem18 = new Contact();                    _elem18.Read(iprot);                    Members.Add(_elem18);                  }                  iprot.ReadListEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 21:              if (field.Type == TType.Struct) {                Creator = new Contact();                Creator.Read(iprot);              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 22:              if (field.Type == TType.List) {                {                  Invitee = new List<Contact>();                  TList _list19 = iprot.ReadListBegin();                  for( int _i20 = 0; _i20 < _list19.Count; ++_i20)                  {                    Contact _elem21 = new Contact();                    _elem21 = new Contact();                    _elem21.Read(iprot);                    Invitee.Add(_elem21);                  }                  iprot.ReadListEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 31:              if (field.Type == TType.Bool) {                NotificationDisabled = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,Group,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Group.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                Id = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.I64) {                CreatedTime = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.String) {                Name = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.String) {                PictureStatus = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 20:              if (field.Type == TType.List) {                {                  Members = new List<Contact>();                  TList _list16 = iprot.ReadListBegin();                  for( int _i17 = 0; _i17 < _list16.Count; ++_i17)                  {                    Contact _elem18 = new Contact();                    _elem18 = new Contact();                    _elem18.Read(iprot);                    Members.Add(_elem18);                  }                  iprot.ReadListEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 21:              if (field.Type == TType.Struct) {                Creator = new Contact();                Creator.Read(iprot);              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 22:              if (field.Type == TType.List) {                {                  Invitee = new List<Contact>();                  TList _list19 = iprot.ReadListBegin();                  for( int _i20 = 0; _i20 < _list19.Count; ++_i20)                  {                    Contact _elem21 = new Contact();                    _elem21 = new Contact();                    _elem21.Read(iprot);                    Invitee.Add(_elem21);                  }                  iprot.ReadListEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 31:              if (field.Type == TType.Bool) {                NotificationDisabled = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,Group,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Group.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                Id = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.I64) {                CreatedTime = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.String) {                Name = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.String) {                PictureStatus = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 20:              if (field.Type == TType.List) {                {                  Members = new List<Contact>();                  TList _list16 = iprot.ReadListBegin();                  for( int _i17 = 0; _i17 < _list16.Count; ++_i17)                  {                    Contact _elem18 = new Contact();                    _elem18 = new Contact();                    _elem18.Read(iprot);                    Members.Add(_elem18);                  }                  iprot.ReadListEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 21:              if (field.Type == TType.Struct) {                Creator = new Contact();                Creator.Read(iprot);              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 22:              if (field.Type == TType.List) {                {                  Invitee = new List<Contact>();                  TList _list19 = iprot.ReadListBegin();                  for( int _i20 = 0; _i20 < _list19.Count; ++_i20)                  {                    Contact _elem21 = new Contact();                    _elem21 = new Contact();                    _elem21.Read(iprot);                    Invitee.Add(_elem21);                  }                  iprot.ReadListEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 31:              if (field.Type == TType.Bool) {                NotificationDisabled = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,Group,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Group.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                Id = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.I64) {                CreatedTime = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.String) {                Name = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.String) {                PictureStatus = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 20:              if (field.Type == TType.List) {                {                  Members = new List<Contact>();                  TList _list16 = iprot.ReadListBegin();                  for( int _i17 = 0; _i17 < _list16.Count; ++_i17)                  {                    Contact _elem18 = new Contact();                    _elem18 = new Contact();                    _elem18.Read(iprot);                    Members.Add(_elem18);                  }                  iprot.ReadListEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 21:              if (field.Type == TType.Struct) {                Creator = new Contact();                Creator.Read(iprot);              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 22:              if (field.Type == TType.List) {                {                  Invitee = new List<Contact>();                  TList _list19 = iprot.ReadListBegin();                  for( int _i20 = 0; _i20 < _list19.Count; ++_i20)                  {                    Contact _elem21 = new Contact();                    _elem21 = new Contact();                    _elem21.Read(iprot);                    Invitee.Add(_elem21);                  }                  iprot.ReadListEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 31:              if (field.Type == TType.Bool) {                NotificationDisabled = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,Group,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Group.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                Id = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.I64) {                CreatedTime = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.String) {                Name = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.String) {                PictureStatus = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 20:              if (field.Type == TType.List) {                {                  Members = new List<Contact>();                  TList _list16 = iprot.ReadListBegin();                  for( int _i17 = 0; _i17 < _list16.Count; ++_i17)                  {                    Contact _elem18 = new Contact();                    _elem18 = new Contact();                    _elem18.Read(iprot);                    Members.Add(_elem18);                  }                  iprot.ReadListEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 21:              if (field.Type == TType.Struct) {                Creator = new Contact();                Creator.Read(iprot);              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 22:              if (field.Type == TType.List) {                {                  Invitee = new List<Contact>();                  TList _list19 = iprot.ReadListBegin();                  for( int _i20 = 0; _i20 < _list19.Count; ++_i20)                  {                    Contact _elem21 = new Contact();                    _elem21 = new Contact();                    _elem21.Read(iprot);                    Invitee.Add(_elem21);                  }                  iprot.ReadListEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 31:              if (field.Type == TType.Bool) {                NotificationDisabled = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,Group,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Group.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                Id = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.I64) {                CreatedTime = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.String) {                Name = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.String) {                PictureStatus = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 20:              if (field.Type == TType.List) {                {                  Members = new List<Contact>();                  TList _list16 = iprot.ReadListBegin();                  for( int _i17 = 0; _i17 < _list16.Count; ++_i17)                  {                    Contact _elem18 = new Contact();                    _elem18 = new Contact();                    _elem18.Read(iprot);                    Members.Add(_elem18);                  }                  iprot.ReadListEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 21:              if (field.Type == TType.Struct) {                Creator = new Contact();                Creator.Read(iprot);              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 22:              if (field.Type == TType.List) {                {                  Invitee = new List<Contact>();                  TList _list19 = iprot.ReadListBegin();                  for( int _i20 = 0; _i20 < _list19.Count; ++_i20)                  {                    Contact _elem21 = new Contact();                    _elem21 = new Contact();                    _elem21.Read(iprot);                    Invitee.Add(_elem21);                  }                  iprot.ReadListEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 31:              if (field.Type == TType.Bool) {                NotificationDisabled = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,Group,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Group.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                Id = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.I64) {                CreatedTime = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.String) {                Name = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.String) {                PictureStatus = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 20:              if (field.Type == TType.List) {                {                  Members = new List<Contact>();                  TList _list16 = iprot.ReadListBegin();                  for( int _i17 = 0; _i17 < _list16.Count; ++_i17)                  {                    Contact _elem18 = new Contact();                    _elem18 = new Contact();                    _elem18.Read(iprot);                    Members.Add(_elem18);                  }                  iprot.ReadListEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 21:              if (field.Type == TType.Struct) {                Creator = new Contact();                Creator.Read(iprot);              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 22:              if (field.Type == TType.List) {                {                  Invitee = new List<Contact>();                  TList _list19 = iprot.ReadListBegin();                  for( int _i20 = 0; _i20 < _list19.Count; ++_i20)                  {                    Contact _elem21 = new Contact();                    _elem21 = new Contact();                    _elem21.Read(iprot);                    Invitee.Add(_elem21);                  }                  iprot.ReadListEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 31:              if (field.Type == TType.Bool) {                NotificationDisabled = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,Group,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Group.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,Group,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Group.cs,Write,The following statement contains a magic number: field.ID = 10;
Magic Number,LineSharp.Datatypes,Group,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Group.cs,Write,The following statement contains a magic number: field.ID = 11;
Magic Number,LineSharp.Datatypes,Group,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Group.cs,Write,The following statement contains a magic number: field.ID = 20;
Magic Number,LineSharp.Datatypes,Group,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Group.cs,Write,The following statement contains a magic number: field.ID = 21;
Magic Number,LineSharp.Datatypes,Group,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Group.cs,Write,The following statement contains a magic number: field.ID = 22;
Magic Number,LineSharp.Datatypes,Group,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Group.cs,Write,The following statement contains a magic number: field.ID = 31;
Magic Number,LineSharp.Datatypes,IdentityCredential,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\IdentityCredential.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.I32) {                Provider = (IdentityProvider)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.String) {                Identifier = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.String) {                Password = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,IdentityCredential,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\IdentityCredential.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.I32) {                Provider = (IdentityProvider)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.String) {                Identifier = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.String) {                Password = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,IdentityCredential,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\IdentityCredential.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,IdentityCredential,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\IdentityCredential.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,LineSharp.Datatypes,Location,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Location.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                Title = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.String) {                Address = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.Double) {                Latitude = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.Double) {                Longitude = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.String) {                Phone = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,Location,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Location.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                Title = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.String) {                Address = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.Double) {                Latitude = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.Double) {                Longitude = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.String) {                Phone = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,Location,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Location.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                Title = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.String) {                Address = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.Double) {                Latitude = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.Double) {                Longitude = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.String) {                Phone = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,Location,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Location.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                Title = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.String) {                Address = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.Double) {                Latitude = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.Double) {                Longitude = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.String) {                Phone = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,Location,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Location.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,Location,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Location.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,LineSharp.Datatypes,Location,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Location.cs,Write,The following statement contains a magic number: field.ID = 4;
Magic Number,LineSharp.Datatypes,Location,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Location.cs,Write,The following statement contains a magic number: field.ID = 5;
Magic Number,LineSharp.Datatypes,LoginResult,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\LoginResult.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                AuthToken = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.String) {                Certificate = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.String) {                Verifier = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.String) {                PinCode = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.I32) {                Type = (LoginResultType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,LoginResult,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\LoginResult.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                AuthToken = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.String) {                Certificate = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.String) {                Verifier = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.String) {                PinCode = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.I32) {                Type = (LoginResultType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,LoginResult,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\LoginResult.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                AuthToken = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.String) {                Certificate = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.String) {                Verifier = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.String) {                PinCode = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.I32) {                Type = (LoginResultType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,LoginResult,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\LoginResult.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                AuthToken = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.String) {                Certificate = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.String) {                Verifier = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.String) {                PinCode = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.I32) {                Type = (LoginResultType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,LoginResult,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\LoginResult.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,LoginResult,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\LoginResult.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,LineSharp.Datatypes,LoginResult,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\LoginResult.cs,Write,The following statement contains a magic number: field.ID = 4;
Magic Number,LineSharp.Datatypes,LoginResult,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\LoginResult.cs,Write,The following statement contains a magic number: field.ID = 5;
Magic Number,LineSharp.Datatypes,LoginSession,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\LoginSession.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                TokenKey = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.I64) {                ExpirationTime = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.I32) {                ApplicationType = (ApplicationType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.String) {                SystemName = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 22:              if (field.Type == TType.String) {                AccessLocation = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,LoginSession,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\LoginSession.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                TokenKey = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.I64) {                ExpirationTime = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.I32) {                ApplicationType = (ApplicationType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.String) {                SystemName = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 22:              if (field.Type == TType.String) {                AccessLocation = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,LoginSession,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\LoginSession.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                TokenKey = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.I64) {                ExpirationTime = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.I32) {                ApplicationType = (ApplicationType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.String) {                SystemName = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 22:              if (field.Type == TType.String) {                AccessLocation = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,LoginSession,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\LoginSession.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                TokenKey = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.I64) {                ExpirationTime = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.I32) {                ApplicationType = (ApplicationType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.String) {                SystemName = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 22:              if (field.Type == TType.String) {                AccessLocation = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,LoginSession,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\LoginSession.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,LineSharp.Datatypes,LoginSession,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\LoginSession.cs,Write,The following statement contains a magic number: field.ID = 11;
Magic Number,LineSharp.Datatypes,LoginSession,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\LoginSession.cs,Write,The following statement contains a magic number: field.ID = 12;
Magic Number,LineSharp.Datatypes,LoginSession,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\LoginSession.cs,Write,The following statement contains a magic number: field.ID = 22;
Magic Number,LineSharp.Datatypes,Message,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Message.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                From = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.String) {                To = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.I32) {                ToType = (MIDType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.String) {                Id = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.I64) {                CreatedTime = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.I64) {                DeliveredTime = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.String) {                Text = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.Struct) {                Location = new Location();                Location.Read(iprot);              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 14:              if (field.Type == TType.Bool) {                HasContent = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 15:              if (field.Type == TType.I32) {                ContentType = (ContentType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 17:              if (field.Type == TType.String) {                ContentPreview = iprot.ReadBinary();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 18:              if (field.Type == TType.Map) {                {                  ContentMetadata = new Dictionary<string' string>();                  TMap _map24 = iprot.ReadMapBegin();                  for( int _i25 = 0; _i25 < _map24.Count; ++_i25)                  {                    string _key26;                    string _val27;                    _key26 = iprot.ReadString();                    _val27 = iprot.ReadString();                    ContentMetadata[_key26] = _val27;                  }                  iprot.ReadMapEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,Message,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Message.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                From = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.String) {                To = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.I32) {                ToType = (MIDType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.String) {                Id = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.I64) {                CreatedTime = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.I64) {                DeliveredTime = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.String) {                Text = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.Struct) {                Location = new Location();                Location.Read(iprot);              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 14:              if (field.Type == TType.Bool) {                HasContent = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 15:              if (field.Type == TType.I32) {                ContentType = (ContentType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 17:              if (field.Type == TType.String) {                ContentPreview = iprot.ReadBinary();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 18:              if (field.Type == TType.Map) {                {                  ContentMetadata = new Dictionary<string' string>();                  TMap _map24 = iprot.ReadMapBegin();                  for( int _i25 = 0; _i25 < _map24.Count; ++_i25)                  {                    string _key26;                    string _val27;                    _key26 = iprot.ReadString();                    _val27 = iprot.ReadString();                    ContentMetadata[_key26] = _val27;                  }                  iprot.ReadMapEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,Message,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Message.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                From = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.String) {                To = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.I32) {                ToType = (MIDType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.String) {                Id = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.I64) {                CreatedTime = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.I64) {                DeliveredTime = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.String) {                Text = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.Struct) {                Location = new Location();                Location.Read(iprot);              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 14:              if (field.Type == TType.Bool) {                HasContent = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 15:              if (field.Type == TType.I32) {                ContentType = (ContentType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 17:              if (field.Type == TType.String) {                ContentPreview = iprot.ReadBinary();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 18:              if (field.Type == TType.Map) {                {                  ContentMetadata = new Dictionary<string' string>();                  TMap _map24 = iprot.ReadMapBegin();                  for( int _i25 = 0; _i25 < _map24.Count; ++_i25)                  {                    string _key26;                    string _val27;                    _key26 = iprot.ReadString();                    _val27 = iprot.ReadString();                    ContentMetadata[_key26] = _val27;                  }                  iprot.ReadMapEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,Message,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Message.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                From = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.String) {                To = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.I32) {                ToType = (MIDType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.String) {                Id = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.I64) {                CreatedTime = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.I64) {                DeliveredTime = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.String) {                Text = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.Struct) {                Location = new Location();                Location.Read(iprot);              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 14:              if (field.Type == TType.Bool) {                HasContent = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 15:              if (field.Type == TType.I32) {                ContentType = (ContentType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 17:              if (field.Type == TType.String) {                ContentPreview = iprot.ReadBinary();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 18:              if (field.Type == TType.Map) {                {                  ContentMetadata = new Dictionary<string' string>();                  TMap _map24 = iprot.ReadMapBegin();                  for( int _i25 = 0; _i25 < _map24.Count; ++_i25)                  {                    string _key26;                    string _val27;                    _key26 = iprot.ReadString();                    _val27 = iprot.ReadString();                    ContentMetadata[_key26] = _val27;                  }                  iprot.ReadMapEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,Message,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Message.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                From = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.String) {                To = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.I32) {                ToType = (MIDType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.String) {                Id = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.I64) {                CreatedTime = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.I64) {                DeliveredTime = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.String) {                Text = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.Struct) {                Location = new Location();                Location.Read(iprot);              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 14:              if (field.Type == TType.Bool) {                HasContent = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 15:              if (field.Type == TType.I32) {                ContentType = (ContentType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 17:              if (field.Type == TType.String) {                ContentPreview = iprot.ReadBinary();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 18:              if (field.Type == TType.Map) {                {                  ContentMetadata = new Dictionary<string' string>();                  TMap _map24 = iprot.ReadMapBegin();                  for( int _i25 = 0; _i25 < _map24.Count; ++_i25)                  {                    string _key26;                    string _val27;                    _key26 = iprot.ReadString();                    _val27 = iprot.ReadString();                    ContentMetadata[_key26] = _val27;                  }                  iprot.ReadMapEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,Message,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Message.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                From = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.String) {                To = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.I32) {                ToType = (MIDType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.String) {                Id = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.I64) {                CreatedTime = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.I64) {                DeliveredTime = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.String) {                Text = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.Struct) {                Location = new Location();                Location.Read(iprot);              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 14:              if (field.Type == TType.Bool) {                HasContent = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 15:              if (field.Type == TType.I32) {                ContentType = (ContentType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 17:              if (field.Type == TType.String) {                ContentPreview = iprot.ReadBinary();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 18:              if (field.Type == TType.Map) {                {                  ContentMetadata = new Dictionary<string' string>();                  TMap _map24 = iprot.ReadMapBegin();                  for( int _i25 = 0; _i25 < _map24.Count; ++_i25)                  {                    string _key26;                    string _val27;                    _key26 = iprot.ReadString();                    _val27 = iprot.ReadString();                    ContentMetadata[_key26] = _val27;                  }                  iprot.ReadMapEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,Message,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Message.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                From = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.String) {                To = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.I32) {                ToType = (MIDType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.String) {                Id = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.I64) {                CreatedTime = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.I64) {                DeliveredTime = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.String) {                Text = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.Struct) {                Location = new Location();                Location.Read(iprot);              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 14:              if (field.Type == TType.Bool) {                HasContent = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 15:              if (field.Type == TType.I32) {                ContentType = (ContentType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 17:              if (field.Type == TType.String) {                ContentPreview = iprot.ReadBinary();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 18:              if (field.Type == TType.Map) {                {                  ContentMetadata = new Dictionary<string' string>();                  TMap _map24 = iprot.ReadMapBegin();                  for( int _i25 = 0; _i25 < _map24.Count; ++_i25)                  {                    string _key26;                    string _val27;                    _key26 = iprot.ReadString();                    _val27 = iprot.ReadString();                    ContentMetadata[_key26] = _val27;                  }                  iprot.ReadMapEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,Message,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Message.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                From = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.String) {                To = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.I32) {                ToType = (MIDType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.String) {                Id = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.I64) {                CreatedTime = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.I64) {                DeliveredTime = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.String) {                Text = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.Struct) {                Location = new Location();                Location.Read(iprot);              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 14:              if (field.Type == TType.Bool) {                HasContent = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 15:              if (field.Type == TType.I32) {                ContentType = (ContentType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 17:              if (field.Type == TType.String) {                ContentPreview = iprot.ReadBinary();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 18:              if (field.Type == TType.Map) {                {                  ContentMetadata = new Dictionary<string' string>();                  TMap _map24 = iprot.ReadMapBegin();                  for( int _i25 = 0; _i25 < _map24.Count; ++_i25)                  {                    string _key26;                    string _val27;                    _key26 = iprot.ReadString();                    _val27 = iprot.ReadString();                    ContentMetadata[_key26] = _val27;                  }                  iprot.ReadMapEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,Message,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Message.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                From = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.String) {                To = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.I32) {                ToType = (MIDType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.String) {                Id = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.I64) {                CreatedTime = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.I64) {                DeliveredTime = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.String) {                Text = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.Struct) {                Location = new Location();                Location.Read(iprot);              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 14:              if (field.Type == TType.Bool) {                HasContent = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 15:              if (field.Type == TType.I32) {                ContentType = (ContentType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 17:              if (field.Type == TType.String) {                ContentPreview = iprot.ReadBinary();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 18:              if (field.Type == TType.Map) {                {                  ContentMetadata = new Dictionary<string' string>();                  TMap _map24 = iprot.ReadMapBegin();                  for( int _i25 = 0; _i25 < _map24.Count; ++_i25)                  {                    string _key26;                    string _val27;                    _key26 = iprot.ReadString();                    _val27 = iprot.ReadString();                    ContentMetadata[_key26] = _val27;                  }                  iprot.ReadMapEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,Message,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Message.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                From = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.String) {                To = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.I32) {                ToType = (MIDType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.String) {                Id = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.I64) {                CreatedTime = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.I64) {                DeliveredTime = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.String) {                Text = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.Struct) {                Location = new Location();                Location.Read(iprot);              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 14:              if (field.Type == TType.Bool) {                HasContent = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 15:              if (field.Type == TType.I32) {                ContentType = (ContentType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 17:              if (field.Type == TType.String) {                ContentPreview = iprot.ReadBinary();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 18:              if (field.Type == TType.Map) {                {                  ContentMetadata = new Dictionary<string' string>();                  TMap _map24 = iprot.ReadMapBegin();                  for( int _i25 = 0; _i25 < _map24.Count; ++_i25)                  {                    string _key26;                    string _val27;                    _key26 = iprot.ReadString();                    _val27 = iprot.ReadString();                    ContentMetadata[_key26] = _val27;                  }                  iprot.ReadMapEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,Message,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Message.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                From = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.String) {                To = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.I32) {                ToType = (MIDType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.String) {                Id = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.I64) {                CreatedTime = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.I64) {                DeliveredTime = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.String) {                Text = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.Struct) {                Location = new Location();                Location.Read(iprot);              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 14:              if (field.Type == TType.Bool) {                HasContent = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 15:              if (field.Type == TType.I32) {                ContentType = (ContentType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 17:              if (field.Type == TType.String) {                ContentPreview = iprot.ReadBinary();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 18:              if (field.Type == TType.Map) {                {                  ContentMetadata = new Dictionary<string' string>();                  TMap _map24 = iprot.ReadMapBegin();                  for( int _i25 = 0; _i25 < _map24.Count; ++_i25)                  {                    string _key26;                    string _val27;                    _key26 = iprot.ReadString();                    _val27 = iprot.ReadString();                    ContentMetadata[_key26] = _val27;                  }                  iprot.ReadMapEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,Message,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Message.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,Message,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Message.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,LineSharp.Datatypes,Message,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Message.cs,Write,The following statement contains a magic number: field.ID = 4;
Magic Number,LineSharp.Datatypes,Message,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Message.cs,Write,The following statement contains a magic number: field.ID = 5;
Magic Number,LineSharp.Datatypes,Message,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Message.cs,Write,The following statement contains a magic number: field.ID = 6;
Magic Number,LineSharp.Datatypes,Message,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Message.cs,Write,The following statement contains a magic number: field.ID = 10;
Magic Number,LineSharp.Datatypes,Message,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Message.cs,Write,The following statement contains a magic number: field.ID = 11;
Magic Number,LineSharp.Datatypes,Message,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Message.cs,Write,The following statement contains a magic number: field.ID = 14;
Magic Number,LineSharp.Datatypes,Message,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Message.cs,Write,The following statement contains a magic number: field.ID = 15;
Magic Number,LineSharp.Datatypes,Message,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Message.cs,Write,The following statement contains a magic number: field.ID = 17;
Magic Number,LineSharp.Datatypes,Message,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Message.cs,Write,The following statement contains a magic number: field.ID = 18;
Magic Number,LineSharp.Datatypes,Operation,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Operation.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.I64) {                Revision = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.I64) {                CreatedTime = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.I32) {                Type = (OpType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.I32) {                ReqSeq = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.String) {                Checksum = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 7:              if (field.Type == TType.I32) {                Status = (OpStatus)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.String) {                Param1 = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.String) {                Param2 = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.String) {                Param3 = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 20:              if (field.Type == TType.Struct) {                Message = new Message();                Message.Read(iprot);              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,Operation,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Operation.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.I64) {                Revision = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.I64) {                CreatedTime = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.I32) {                Type = (OpType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.I32) {                ReqSeq = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.String) {                Checksum = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 7:              if (field.Type == TType.I32) {                Status = (OpStatus)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.String) {                Param1 = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.String) {                Param2 = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.String) {                Param3 = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 20:              if (field.Type == TType.Struct) {                Message = new Message();                Message.Read(iprot);              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,Operation,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Operation.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.I64) {                Revision = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.I64) {                CreatedTime = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.I32) {                Type = (OpType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.I32) {                ReqSeq = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.String) {                Checksum = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 7:              if (field.Type == TType.I32) {                Status = (OpStatus)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.String) {                Param1 = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.String) {                Param2 = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.String) {                Param3 = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 20:              if (field.Type == TType.Struct) {                Message = new Message();                Message.Read(iprot);              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,Operation,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Operation.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.I64) {                Revision = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.I64) {                CreatedTime = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.I32) {                Type = (OpType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.I32) {                ReqSeq = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.String) {                Checksum = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 7:              if (field.Type == TType.I32) {                Status = (OpStatus)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.String) {                Param1 = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.String) {                Param2 = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.String) {                Param3 = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 20:              if (field.Type == TType.Struct) {                Message = new Message();                Message.Read(iprot);              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,Operation,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Operation.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.I64) {                Revision = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.I64) {                CreatedTime = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.I32) {                Type = (OpType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.I32) {                ReqSeq = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.String) {                Checksum = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 7:              if (field.Type == TType.I32) {                Status = (OpStatus)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.String) {                Param1 = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.String) {                Param2 = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.String) {                Param3 = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 20:              if (field.Type == TType.Struct) {                Message = new Message();                Message.Read(iprot);              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,Operation,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Operation.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.I64) {                Revision = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.I64) {                CreatedTime = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.I32) {                Type = (OpType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.I32) {                ReqSeq = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.String) {                Checksum = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 7:              if (field.Type == TType.I32) {                Status = (OpStatus)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.String) {                Param1 = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.String) {                Param2 = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.String) {                Param3 = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 20:              if (field.Type == TType.Struct) {                Message = new Message();                Message.Read(iprot);              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,Operation,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Operation.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.I64) {                Revision = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.I64) {                CreatedTime = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.I32) {                Type = (OpType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.I32) {                ReqSeq = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.String) {                Checksum = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 7:              if (field.Type == TType.I32) {                Status = (OpStatus)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.String) {                Param1 = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.String) {                Param2 = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.String) {                Param3 = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 20:              if (field.Type == TType.Struct) {                Message = new Message();                Message.Read(iprot);              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,Operation,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Operation.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.I64) {                Revision = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.I64) {                CreatedTime = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.I32) {                Type = (OpType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.I32) {                ReqSeq = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.String) {                Checksum = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 7:              if (field.Type == TType.I32) {                Status = (OpStatus)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.String) {                Param1 = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.String) {                Param2 = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.String) {                Param3 = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 20:              if (field.Type == TType.Struct) {                Message = new Message();                Message.Read(iprot);              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,Operation,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Operation.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.I64) {                Revision = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.I64) {                CreatedTime = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.I32) {                Type = (OpType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.I32) {                ReqSeq = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.String) {                Checksum = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 7:              if (field.Type == TType.I32) {                Status = (OpStatus)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.String) {                Param1 = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.String) {                Param2 = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.String) {                Param3 = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 20:              if (field.Type == TType.Struct) {                Message = new Message();                Message.Read(iprot);              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,Operation,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Operation.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,Operation,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Operation.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,LineSharp.Datatypes,Operation,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Operation.cs,Write,The following statement contains a magic number: field.ID = 4;
Magic Number,LineSharp.Datatypes,Operation,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Operation.cs,Write,The following statement contains a magic number: field.ID = 5;
Magic Number,LineSharp.Datatypes,Operation,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Operation.cs,Write,The following statement contains a magic number: field.ID = 7;
Magic Number,LineSharp.Datatypes,Operation,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Operation.cs,Write,The following statement contains a magic number: field.ID = 10;
Magic Number,LineSharp.Datatypes,Operation,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Operation.cs,Write,The following statement contains a magic number: field.ID = 11;
Magic Number,LineSharp.Datatypes,Operation,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Operation.cs,Write,The following statement contains a magic number: field.ID = 12;
Magic Number,LineSharp.Datatypes,Operation,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Operation.cs,Write,The following statement contains a magic number: field.ID = 20;
Magic Number,LineSharp.Datatypes,PaymentReservation,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\PaymentReservation.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                ReceiverMid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.String) {                ProductId = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.String) {                Language = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.String) {                Location = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.String) {                Currency = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.String) {                Price = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 7:              if (field.Type == TType.I32) {                AppStoreCode = (PaymentType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 8:              if (field.Type == TType.String) {                MessageText = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 9:              if (field.Type == TType.I32) {                MessageTemplate = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.I64) {                PackageId = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,PaymentReservation,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\PaymentReservation.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                ReceiverMid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.String) {                ProductId = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.String) {                Language = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.String) {                Location = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.String) {                Currency = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.String) {                Price = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 7:              if (field.Type == TType.I32) {                AppStoreCode = (PaymentType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 8:              if (field.Type == TType.String) {                MessageText = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 9:              if (field.Type == TType.I32) {                MessageTemplate = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.I64) {                PackageId = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,PaymentReservation,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\PaymentReservation.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                ReceiverMid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.String) {                ProductId = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.String) {                Language = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.String) {                Location = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.String) {                Currency = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.String) {                Price = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 7:              if (field.Type == TType.I32) {                AppStoreCode = (PaymentType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 8:              if (field.Type == TType.String) {                MessageText = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 9:              if (field.Type == TType.I32) {                MessageTemplate = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.I64) {                PackageId = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,PaymentReservation,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\PaymentReservation.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                ReceiverMid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.String) {                ProductId = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.String) {                Language = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.String) {                Location = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.String) {                Currency = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.String) {                Price = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 7:              if (field.Type == TType.I32) {                AppStoreCode = (PaymentType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 8:              if (field.Type == TType.String) {                MessageText = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 9:              if (field.Type == TType.I32) {                MessageTemplate = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.I64) {                PackageId = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,PaymentReservation,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\PaymentReservation.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                ReceiverMid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.String) {                ProductId = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.String) {                Language = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.String) {                Location = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.String) {                Currency = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.String) {                Price = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 7:              if (field.Type == TType.I32) {                AppStoreCode = (PaymentType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 8:              if (field.Type == TType.String) {                MessageText = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 9:              if (field.Type == TType.I32) {                MessageTemplate = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.I64) {                PackageId = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,PaymentReservation,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\PaymentReservation.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                ReceiverMid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.String) {                ProductId = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.String) {                Language = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.String) {                Location = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.String) {                Currency = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.String) {                Price = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 7:              if (field.Type == TType.I32) {                AppStoreCode = (PaymentType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 8:              if (field.Type == TType.String) {                MessageText = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 9:              if (field.Type == TType.I32) {                MessageTemplate = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.I64) {                PackageId = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,PaymentReservation,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\PaymentReservation.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                ReceiverMid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.String) {                ProductId = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.String) {                Language = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.String) {                Location = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.String) {                Currency = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.String) {                Price = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 7:              if (field.Type == TType.I32) {                AppStoreCode = (PaymentType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 8:              if (field.Type == TType.String) {                MessageText = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 9:              if (field.Type == TType.I32) {                MessageTemplate = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.I64) {                PackageId = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,PaymentReservation,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\PaymentReservation.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                ReceiverMid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.String) {                ProductId = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.String) {                Language = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.String) {                Location = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.String) {                Currency = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.String) {                Price = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 7:              if (field.Type == TType.I32) {                AppStoreCode = (PaymentType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 8:              if (field.Type == TType.String) {                MessageText = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 9:              if (field.Type == TType.I32) {                MessageTemplate = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.I64) {                PackageId = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,PaymentReservation,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\PaymentReservation.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                ReceiverMid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.String) {                ProductId = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.String) {                Language = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.String) {                Location = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.String) {                Currency = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.String) {                Price = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 7:              if (field.Type == TType.I32) {                AppStoreCode = (PaymentType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 8:              if (field.Type == TType.String) {                MessageText = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 9:              if (field.Type == TType.I32) {                MessageTemplate = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.I64) {                PackageId = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,PaymentReservation,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\PaymentReservation.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,PaymentReservation,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\PaymentReservation.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,LineSharp.Datatypes,PaymentReservation,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\PaymentReservation.cs,Write,The following statement contains a magic number: field.ID = 4;
Magic Number,LineSharp.Datatypes,PaymentReservation,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\PaymentReservation.cs,Write,The following statement contains a magic number: field.ID = 5;
Magic Number,LineSharp.Datatypes,PaymentReservation,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\PaymentReservation.cs,Write,The following statement contains a magic number: field.ID = 6;
Magic Number,LineSharp.Datatypes,PaymentReservation,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\PaymentReservation.cs,Write,The following statement contains a magic number: field.ID = 7;
Magic Number,LineSharp.Datatypes,PaymentReservation,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\PaymentReservation.cs,Write,The following statement contains a magic number: field.ID = 8;
Magic Number,LineSharp.Datatypes,PaymentReservation,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\PaymentReservation.cs,Write,The following statement contains a magic number: field.ID = 9;
Magic Number,LineSharp.Datatypes,PaymentReservation,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\PaymentReservation.cs,Write,The following statement contains a magic number: field.ID = 10;
Magic Number,LineSharp.Datatypes,PaymentReservationResult,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\PaymentReservationResult.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                OrderId = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.String) {                ConfirmUrl = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.Map) {                {                  Extras = new Dictionary<string' string>();                  TMap _map29 = iprot.ReadMapBegin();                  for( int _i30 = 0; _i30 < _map29.Count; ++_i30)                  {                    string _key31;                    string _val32;                    _key31 = iprot.ReadString();                    _val32 = iprot.ReadString();                    Extras[_key31] = _val32;                  }                  iprot.ReadMapEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,PaymentReservationResult,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\PaymentReservationResult.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                OrderId = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.String) {                ConfirmUrl = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.Map) {                {                  Extras = new Dictionary<string' string>();                  TMap _map29 = iprot.ReadMapBegin();                  for( int _i30 = 0; _i30 < _map29.Count; ++_i30)                  {                    string _key31;                    string _val32;                    _key31 = iprot.ReadString();                    _val32 = iprot.ReadString();                    Extras[_key31] = _val32;                  }                  iprot.ReadMapEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,PaymentReservationResult,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\PaymentReservationResult.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,PaymentReservationResult,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\PaymentReservationResult.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,LineSharp.Datatypes,Product,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                ProductId = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.I64) {                PackageId = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.I32) {                Version = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.String) {                AuthorName = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.Bool) {                OnSale = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.I32) {                ValidDays = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 7:              if (field.Type == TType.I32) {                SaleType = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 8:              if (field.Type == TType.String) {                Copyright = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 9:              if (field.Type == TType.String) {                Title = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.String) {                DescriptionText = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.I64) {                ShopOrderId = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.String) {                FromMid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 13:              if (field.Type == TType.String) {                ToMid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 14:              if (field.Type == TType.I64) {                ValidUntil = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 15:              if (field.Type == TType.I32) {                PriceTier = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 16:              if (field.Type == TType.String) {                Price = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 17:              if (field.Type == TType.String) {                Currency = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 18:              if (field.Type == TType.String) {                CurrencySymbol = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 19:              if (field.Type == TType.I32) {                PaymentType = (PaymentType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 20:              if (field.Type == TType.I64) {                CreateDate = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 21:              if (field.Type == TType.Bool) {                OwnFlag = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 22:              if (field.Type == TType.I32) {                EventType = (ProductEventType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 23:              if (field.Type == TType.String) {                UrlSchema = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 24:              if (field.Type == TType.String) {                DownloadUrl = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 25:              if (field.Type == TType.String) {                BuddyMid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 26:              if (field.Type == TType.I64) {                PublishSince = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 27:              if (field.Type == TType.Bool) {                NewFlag = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 28:              if (field.Type == TType.Bool) {                MissionFlag = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,Product,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                ProductId = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.I64) {                PackageId = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.I32) {                Version = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.String) {                AuthorName = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.Bool) {                OnSale = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.I32) {                ValidDays = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 7:              if (field.Type == TType.I32) {                SaleType = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 8:              if (field.Type == TType.String) {                Copyright = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 9:              if (field.Type == TType.String) {                Title = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.String) {                DescriptionText = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.I64) {                ShopOrderId = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.String) {                FromMid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 13:              if (field.Type == TType.String) {                ToMid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 14:              if (field.Type == TType.I64) {                ValidUntil = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 15:              if (field.Type == TType.I32) {                PriceTier = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 16:              if (field.Type == TType.String) {                Price = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 17:              if (field.Type == TType.String) {                Currency = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 18:              if (field.Type == TType.String) {                CurrencySymbol = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 19:              if (field.Type == TType.I32) {                PaymentType = (PaymentType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 20:              if (field.Type == TType.I64) {                CreateDate = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 21:              if (field.Type == TType.Bool) {                OwnFlag = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 22:              if (field.Type == TType.I32) {                EventType = (ProductEventType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 23:              if (field.Type == TType.String) {                UrlSchema = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 24:              if (field.Type == TType.String) {                DownloadUrl = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 25:              if (field.Type == TType.String) {                BuddyMid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 26:              if (field.Type == TType.I64) {                PublishSince = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 27:              if (field.Type == TType.Bool) {                NewFlag = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 28:              if (field.Type == TType.Bool) {                MissionFlag = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,Product,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                ProductId = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.I64) {                PackageId = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.I32) {                Version = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.String) {                AuthorName = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.Bool) {                OnSale = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.I32) {                ValidDays = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 7:              if (field.Type == TType.I32) {                SaleType = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 8:              if (field.Type == TType.String) {                Copyright = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 9:              if (field.Type == TType.String) {                Title = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.String) {                DescriptionText = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.I64) {                ShopOrderId = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.String) {                FromMid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 13:              if (field.Type == TType.String) {                ToMid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 14:              if (field.Type == TType.I64) {                ValidUntil = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 15:              if (field.Type == TType.I32) {                PriceTier = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 16:              if (field.Type == TType.String) {                Price = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 17:              if (field.Type == TType.String) {                Currency = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 18:              if (field.Type == TType.String) {                CurrencySymbol = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 19:              if (field.Type == TType.I32) {                PaymentType = (PaymentType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 20:              if (field.Type == TType.I64) {                CreateDate = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 21:              if (field.Type == TType.Bool) {                OwnFlag = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 22:              if (field.Type == TType.I32) {                EventType = (ProductEventType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 23:              if (field.Type == TType.String) {                UrlSchema = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 24:              if (field.Type == TType.String) {                DownloadUrl = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 25:              if (field.Type == TType.String) {                BuddyMid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 26:              if (field.Type == TType.I64) {                PublishSince = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 27:              if (field.Type == TType.Bool) {                NewFlag = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 28:              if (field.Type == TType.Bool) {                MissionFlag = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,Product,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                ProductId = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.I64) {                PackageId = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.I32) {                Version = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.String) {                AuthorName = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.Bool) {                OnSale = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.I32) {                ValidDays = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 7:              if (field.Type == TType.I32) {                SaleType = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 8:              if (field.Type == TType.String) {                Copyright = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 9:              if (field.Type == TType.String) {                Title = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.String) {                DescriptionText = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.I64) {                ShopOrderId = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.String) {                FromMid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 13:              if (field.Type == TType.String) {                ToMid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 14:              if (field.Type == TType.I64) {                ValidUntil = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 15:              if (field.Type == TType.I32) {                PriceTier = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 16:              if (field.Type == TType.String) {                Price = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 17:              if (field.Type == TType.String) {                Currency = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 18:              if (field.Type == TType.String) {                CurrencySymbol = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 19:              if (field.Type == TType.I32) {                PaymentType = (PaymentType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 20:              if (field.Type == TType.I64) {                CreateDate = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 21:              if (field.Type == TType.Bool) {                OwnFlag = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 22:              if (field.Type == TType.I32) {                EventType = (ProductEventType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 23:              if (field.Type == TType.String) {                UrlSchema = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 24:              if (field.Type == TType.String) {                DownloadUrl = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 25:              if (field.Type == TType.String) {                BuddyMid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 26:              if (field.Type == TType.I64) {                PublishSince = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 27:              if (field.Type == TType.Bool) {                NewFlag = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 28:              if (field.Type == TType.Bool) {                MissionFlag = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,Product,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                ProductId = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.I64) {                PackageId = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.I32) {                Version = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.String) {                AuthorName = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.Bool) {                OnSale = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.I32) {                ValidDays = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 7:              if (field.Type == TType.I32) {                SaleType = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 8:              if (field.Type == TType.String) {                Copyright = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 9:              if (field.Type == TType.String) {                Title = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.String) {                DescriptionText = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.I64) {                ShopOrderId = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.String) {                FromMid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 13:              if (field.Type == TType.String) {                ToMid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 14:              if (field.Type == TType.I64) {                ValidUntil = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 15:              if (field.Type == TType.I32) {                PriceTier = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 16:              if (field.Type == TType.String) {                Price = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 17:              if (field.Type == TType.String) {                Currency = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 18:              if (field.Type == TType.String) {                CurrencySymbol = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 19:              if (field.Type == TType.I32) {                PaymentType = (PaymentType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 20:              if (field.Type == TType.I64) {                CreateDate = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 21:              if (field.Type == TType.Bool) {                OwnFlag = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 22:              if (field.Type == TType.I32) {                EventType = (ProductEventType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 23:              if (field.Type == TType.String) {                UrlSchema = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 24:              if (field.Type == TType.String) {                DownloadUrl = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 25:              if (field.Type == TType.String) {                BuddyMid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 26:              if (field.Type == TType.I64) {                PublishSince = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 27:              if (field.Type == TType.Bool) {                NewFlag = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 28:              if (field.Type == TType.Bool) {                MissionFlag = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,Product,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                ProductId = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.I64) {                PackageId = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.I32) {                Version = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.String) {                AuthorName = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.Bool) {                OnSale = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.I32) {                ValidDays = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 7:              if (field.Type == TType.I32) {                SaleType = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 8:              if (field.Type == TType.String) {                Copyright = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 9:              if (field.Type == TType.String) {                Title = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.String) {                DescriptionText = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.I64) {                ShopOrderId = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.String) {                FromMid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 13:              if (field.Type == TType.String) {                ToMid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 14:              if (field.Type == TType.I64) {                ValidUntil = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 15:              if (field.Type == TType.I32) {                PriceTier = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 16:              if (field.Type == TType.String) {                Price = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 17:              if (field.Type == TType.String) {                Currency = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 18:              if (field.Type == TType.String) {                CurrencySymbol = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 19:              if (field.Type == TType.I32) {                PaymentType = (PaymentType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 20:              if (field.Type == TType.I64) {                CreateDate = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 21:              if (field.Type == TType.Bool) {                OwnFlag = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 22:              if (field.Type == TType.I32) {                EventType = (ProductEventType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 23:              if (field.Type == TType.String) {                UrlSchema = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 24:              if (field.Type == TType.String) {                DownloadUrl = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 25:              if (field.Type == TType.String) {                BuddyMid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 26:              if (field.Type == TType.I64) {                PublishSince = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 27:              if (field.Type == TType.Bool) {                NewFlag = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 28:              if (field.Type == TType.Bool) {                MissionFlag = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,Product,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                ProductId = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.I64) {                PackageId = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.I32) {                Version = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.String) {                AuthorName = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.Bool) {                OnSale = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.I32) {                ValidDays = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 7:              if (field.Type == TType.I32) {                SaleType = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 8:              if (field.Type == TType.String) {                Copyright = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 9:              if (field.Type == TType.String) {                Title = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.String) {                DescriptionText = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.I64) {                ShopOrderId = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.String) {                FromMid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 13:              if (field.Type == TType.String) {                ToMid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 14:              if (field.Type == TType.I64) {                ValidUntil = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 15:              if (field.Type == TType.I32) {                PriceTier = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 16:              if (field.Type == TType.String) {                Price = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 17:              if (field.Type == TType.String) {                Currency = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 18:              if (field.Type == TType.String) {                CurrencySymbol = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 19:              if (field.Type == TType.I32) {                PaymentType = (PaymentType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 20:              if (field.Type == TType.I64) {                CreateDate = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 21:              if (field.Type == TType.Bool) {                OwnFlag = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 22:              if (field.Type == TType.I32) {                EventType = (ProductEventType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 23:              if (field.Type == TType.String) {                UrlSchema = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 24:              if (field.Type == TType.String) {                DownloadUrl = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 25:              if (field.Type == TType.String) {                BuddyMid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 26:              if (field.Type == TType.I64) {                PublishSince = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 27:              if (field.Type == TType.Bool) {                NewFlag = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 28:              if (field.Type == TType.Bool) {                MissionFlag = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,Product,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                ProductId = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.I64) {                PackageId = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.I32) {                Version = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.String) {                AuthorName = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.Bool) {                OnSale = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.I32) {                ValidDays = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 7:              if (field.Type == TType.I32) {                SaleType = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 8:              if (field.Type == TType.String) {                Copyright = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 9:              if (field.Type == TType.String) {                Title = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.String) {                DescriptionText = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.I64) {                ShopOrderId = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.String) {                FromMid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 13:              if (field.Type == TType.String) {                ToMid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 14:              if (field.Type == TType.I64) {                ValidUntil = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 15:              if (field.Type == TType.I32) {                PriceTier = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 16:              if (field.Type == TType.String) {                Price = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 17:              if (field.Type == TType.String) {                Currency = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 18:              if (field.Type == TType.String) {                CurrencySymbol = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 19:              if (field.Type == TType.I32) {                PaymentType = (PaymentType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 20:              if (field.Type == TType.I64) {                CreateDate = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 21:              if (field.Type == TType.Bool) {                OwnFlag = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 22:              if (field.Type == TType.I32) {                EventType = (ProductEventType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 23:              if (field.Type == TType.String) {                UrlSchema = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 24:              if (field.Type == TType.String) {                DownloadUrl = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 25:              if (field.Type == TType.String) {                BuddyMid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 26:              if (field.Type == TType.I64) {                PublishSince = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 27:              if (field.Type == TType.Bool) {                NewFlag = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 28:              if (field.Type == TType.Bool) {                MissionFlag = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,Product,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                ProductId = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.I64) {                PackageId = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.I32) {                Version = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.String) {                AuthorName = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.Bool) {                OnSale = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.I32) {                ValidDays = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 7:              if (field.Type == TType.I32) {                SaleType = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 8:              if (field.Type == TType.String) {                Copyright = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 9:              if (field.Type == TType.String) {                Title = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.String) {                DescriptionText = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.I64) {                ShopOrderId = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.String) {                FromMid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 13:              if (field.Type == TType.String) {                ToMid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 14:              if (field.Type == TType.I64) {                ValidUntil = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 15:              if (field.Type == TType.I32) {                PriceTier = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 16:              if (field.Type == TType.String) {                Price = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 17:              if (field.Type == TType.String) {                Currency = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 18:              if (field.Type == TType.String) {                CurrencySymbol = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 19:              if (field.Type == TType.I32) {                PaymentType = (PaymentType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 20:              if (field.Type == TType.I64) {                CreateDate = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 21:              if (field.Type == TType.Bool) {                OwnFlag = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 22:              if (field.Type == TType.I32) {                EventType = (ProductEventType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 23:              if (field.Type == TType.String) {                UrlSchema = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 24:              if (field.Type == TType.String) {                DownloadUrl = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 25:              if (field.Type == TType.String) {                BuddyMid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 26:              if (field.Type == TType.I64) {                PublishSince = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 27:              if (field.Type == TType.Bool) {                NewFlag = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 28:              if (field.Type == TType.Bool) {                MissionFlag = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,Product,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                ProductId = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.I64) {                PackageId = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.I32) {                Version = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.String) {                AuthorName = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.Bool) {                OnSale = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.I32) {                ValidDays = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 7:              if (field.Type == TType.I32) {                SaleType = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 8:              if (field.Type == TType.String) {                Copyright = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 9:              if (field.Type == TType.String) {                Title = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.String) {                DescriptionText = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.I64) {                ShopOrderId = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.String) {                FromMid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 13:              if (field.Type == TType.String) {                ToMid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 14:              if (field.Type == TType.I64) {                ValidUntil = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 15:              if (field.Type == TType.I32) {                PriceTier = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 16:              if (field.Type == TType.String) {                Price = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 17:              if (field.Type == TType.String) {                Currency = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 18:              if (field.Type == TType.String) {                CurrencySymbol = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 19:              if (field.Type == TType.I32) {                PaymentType = (PaymentType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 20:              if (field.Type == TType.I64) {                CreateDate = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 21:              if (field.Type == TType.Bool) {                OwnFlag = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 22:              if (field.Type == TType.I32) {                EventType = (ProductEventType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 23:              if (field.Type == TType.String) {                UrlSchema = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 24:              if (field.Type == TType.String) {                DownloadUrl = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 25:              if (field.Type == TType.String) {                BuddyMid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 26:              if (field.Type == TType.I64) {                PublishSince = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 27:              if (field.Type == TType.Bool) {                NewFlag = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 28:              if (field.Type == TType.Bool) {                MissionFlag = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,Product,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                ProductId = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.I64) {                PackageId = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.I32) {                Version = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.String) {                AuthorName = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.Bool) {                OnSale = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.I32) {                ValidDays = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 7:              if (field.Type == TType.I32) {                SaleType = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 8:              if (field.Type == TType.String) {                Copyright = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 9:              if (field.Type == TType.String) {                Title = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.String) {                DescriptionText = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.I64) {                ShopOrderId = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.String) {                FromMid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 13:              if (field.Type == TType.String) {                ToMid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 14:              if (field.Type == TType.I64) {                ValidUntil = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 15:              if (field.Type == TType.I32) {                PriceTier = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 16:              if (field.Type == TType.String) {                Price = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 17:              if (field.Type == TType.String) {                Currency = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 18:              if (field.Type == TType.String) {                CurrencySymbol = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 19:              if (field.Type == TType.I32) {                PaymentType = (PaymentType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 20:              if (field.Type == TType.I64) {                CreateDate = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 21:              if (field.Type == TType.Bool) {                OwnFlag = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 22:              if (field.Type == TType.I32) {                EventType = (ProductEventType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 23:              if (field.Type == TType.String) {                UrlSchema = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 24:              if (field.Type == TType.String) {                DownloadUrl = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 25:              if (field.Type == TType.String) {                BuddyMid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 26:              if (field.Type == TType.I64) {                PublishSince = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 27:              if (field.Type == TType.Bool) {                NewFlag = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 28:              if (field.Type == TType.Bool) {                MissionFlag = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,Product,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                ProductId = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.I64) {                PackageId = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.I32) {                Version = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.String) {                AuthorName = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.Bool) {                OnSale = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.I32) {                ValidDays = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 7:              if (field.Type == TType.I32) {                SaleType = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 8:              if (field.Type == TType.String) {                Copyright = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 9:              if (field.Type == TType.String) {                Title = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.String) {                DescriptionText = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.I64) {                ShopOrderId = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.String) {                FromMid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 13:              if (field.Type == TType.String) {                ToMid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 14:              if (field.Type == TType.I64) {                ValidUntil = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 15:              if (field.Type == TType.I32) {                PriceTier = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 16:              if (field.Type == TType.String) {                Price = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 17:              if (field.Type == TType.String) {                Currency = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 18:              if (field.Type == TType.String) {                CurrencySymbol = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 19:              if (field.Type == TType.I32) {                PaymentType = (PaymentType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 20:              if (field.Type == TType.I64) {                CreateDate = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 21:              if (field.Type == TType.Bool) {                OwnFlag = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 22:              if (field.Type == TType.I32) {                EventType = (ProductEventType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 23:              if (field.Type == TType.String) {                UrlSchema = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 24:              if (field.Type == TType.String) {                DownloadUrl = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 25:              if (field.Type == TType.String) {                BuddyMid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 26:              if (field.Type == TType.I64) {                PublishSince = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 27:              if (field.Type == TType.Bool) {                NewFlag = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 28:              if (field.Type == TType.Bool) {                MissionFlag = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,Product,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                ProductId = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.I64) {                PackageId = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.I32) {                Version = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.String) {                AuthorName = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.Bool) {                OnSale = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.I32) {                ValidDays = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 7:              if (field.Type == TType.I32) {                SaleType = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 8:              if (field.Type == TType.String) {                Copyright = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 9:              if (field.Type == TType.String) {                Title = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.String) {                DescriptionText = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.I64) {                ShopOrderId = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.String) {                FromMid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 13:              if (field.Type == TType.String) {                ToMid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 14:              if (field.Type == TType.I64) {                ValidUntil = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 15:              if (field.Type == TType.I32) {                PriceTier = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 16:              if (field.Type == TType.String) {                Price = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 17:              if (field.Type == TType.String) {                Currency = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 18:              if (field.Type == TType.String) {                CurrencySymbol = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 19:              if (field.Type == TType.I32) {                PaymentType = (PaymentType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 20:              if (field.Type == TType.I64) {                CreateDate = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 21:              if (field.Type == TType.Bool) {                OwnFlag = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 22:              if (field.Type == TType.I32) {                EventType = (ProductEventType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 23:              if (field.Type == TType.String) {                UrlSchema = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 24:              if (field.Type == TType.String) {                DownloadUrl = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 25:              if (field.Type == TType.String) {                BuddyMid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 26:              if (field.Type == TType.I64) {                PublishSince = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 27:              if (field.Type == TType.Bool) {                NewFlag = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 28:              if (field.Type == TType.Bool) {                MissionFlag = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,Product,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                ProductId = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.I64) {                PackageId = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.I32) {                Version = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.String) {                AuthorName = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.Bool) {                OnSale = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.I32) {                ValidDays = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 7:              if (field.Type == TType.I32) {                SaleType = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 8:              if (field.Type == TType.String) {                Copyright = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 9:              if (field.Type == TType.String) {                Title = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.String) {                DescriptionText = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.I64) {                ShopOrderId = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.String) {                FromMid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 13:              if (field.Type == TType.String) {                ToMid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 14:              if (field.Type == TType.I64) {                ValidUntil = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 15:              if (field.Type == TType.I32) {                PriceTier = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 16:              if (field.Type == TType.String) {                Price = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 17:              if (field.Type == TType.String) {                Currency = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 18:              if (field.Type == TType.String) {                CurrencySymbol = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 19:              if (field.Type == TType.I32) {                PaymentType = (PaymentType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 20:              if (field.Type == TType.I64) {                CreateDate = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 21:              if (field.Type == TType.Bool) {                OwnFlag = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 22:              if (field.Type == TType.I32) {                EventType = (ProductEventType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 23:              if (field.Type == TType.String) {                UrlSchema = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 24:              if (field.Type == TType.String) {                DownloadUrl = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 25:              if (field.Type == TType.String) {                BuddyMid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 26:              if (field.Type == TType.I64) {                PublishSince = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 27:              if (field.Type == TType.Bool) {                NewFlag = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 28:              if (field.Type == TType.Bool) {                MissionFlag = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,Product,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                ProductId = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.I64) {                PackageId = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.I32) {                Version = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.String) {                AuthorName = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.Bool) {                OnSale = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.I32) {                ValidDays = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 7:              if (field.Type == TType.I32) {                SaleType = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 8:              if (field.Type == TType.String) {                Copyright = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 9:              if (field.Type == TType.String) {                Title = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.String) {                DescriptionText = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.I64) {                ShopOrderId = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.String) {                FromMid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 13:              if (field.Type == TType.String) {                ToMid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 14:              if (field.Type == TType.I64) {                ValidUntil = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 15:              if (field.Type == TType.I32) {                PriceTier = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 16:              if (field.Type == TType.String) {                Price = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 17:              if (field.Type == TType.String) {                Currency = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 18:              if (field.Type == TType.String) {                CurrencySymbol = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 19:              if (field.Type == TType.I32) {                PaymentType = (PaymentType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 20:              if (field.Type == TType.I64) {                CreateDate = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 21:              if (field.Type == TType.Bool) {                OwnFlag = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 22:              if (field.Type == TType.I32) {                EventType = (ProductEventType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 23:              if (field.Type == TType.String) {                UrlSchema = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 24:              if (field.Type == TType.String) {                DownloadUrl = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 25:              if (field.Type == TType.String) {                BuddyMid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 26:              if (field.Type == TType.I64) {                PublishSince = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 27:              if (field.Type == TType.Bool) {                NewFlag = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 28:              if (field.Type == TType.Bool) {                MissionFlag = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,Product,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                ProductId = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.I64) {                PackageId = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.I32) {                Version = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.String) {                AuthorName = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.Bool) {                OnSale = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.I32) {                ValidDays = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 7:              if (field.Type == TType.I32) {                SaleType = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 8:              if (field.Type == TType.String) {                Copyright = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 9:              if (field.Type == TType.String) {                Title = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.String) {                DescriptionText = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.I64) {                ShopOrderId = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.String) {                FromMid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 13:              if (field.Type == TType.String) {                ToMid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 14:              if (field.Type == TType.I64) {                ValidUntil = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 15:              if (field.Type == TType.I32) {                PriceTier = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 16:              if (field.Type == TType.String) {                Price = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 17:              if (field.Type == TType.String) {                Currency = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 18:              if (field.Type == TType.String) {                CurrencySymbol = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 19:              if (field.Type == TType.I32) {                PaymentType = (PaymentType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 20:              if (field.Type == TType.I64) {                CreateDate = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 21:              if (field.Type == TType.Bool) {                OwnFlag = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 22:              if (field.Type == TType.I32) {                EventType = (ProductEventType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 23:              if (field.Type == TType.String) {                UrlSchema = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 24:              if (field.Type == TType.String) {                DownloadUrl = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 25:              if (field.Type == TType.String) {                BuddyMid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 26:              if (field.Type == TType.I64) {                PublishSince = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 27:              if (field.Type == TType.Bool) {                NewFlag = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 28:              if (field.Type == TType.Bool) {                MissionFlag = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,Product,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                ProductId = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.I64) {                PackageId = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.I32) {                Version = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.String) {                AuthorName = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.Bool) {                OnSale = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.I32) {                ValidDays = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 7:              if (field.Type == TType.I32) {                SaleType = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 8:              if (field.Type == TType.String) {                Copyright = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 9:              if (field.Type == TType.String) {                Title = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.String) {                DescriptionText = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.I64) {                ShopOrderId = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.String) {                FromMid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 13:              if (field.Type == TType.String) {                ToMid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 14:              if (field.Type == TType.I64) {                ValidUntil = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 15:              if (field.Type == TType.I32) {                PriceTier = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 16:              if (field.Type == TType.String) {                Price = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 17:              if (field.Type == TType.String) {                Currency = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 18:              if (field.Type == TType.String) {                CurrencySymbol = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 19:              if (field.Type == TType.I32) {                PaymentType = (PaymentType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 20:              if (field.Type == TType.I64) {                CreateDate = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 21:              if (field.Type == TType.Bool) {                OwnFlag = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 22:              if (field.Type == TType.I32) {                EventType = (ProductEventType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 23:              if (field.Type == TType.String) {                UrlSchema = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 24:              if (field.Type == TType.String) {                DownloadUrl = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 25:              if (field.Type == TType.String) {                BuddyMid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 26:              if (field.Type == TType.I64) {                PublishSince = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 27:              if (field.Type == TType.Bool) {                NewFlag = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 28:              if (field.Type == TType.Bool) {                MissionFlag = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,Product,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                ProductId = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.I64) {                PackageId = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.I32) {                Version = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.String) {                AuthorName = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.Bool) {                OnSale = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.I32) {                ValidDays = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 7:              if (field.Type == TType.I32) {                SaleType = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 8:              if (field.Type == TType.String) {                Copyright = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 9:              if (field.Type == TType.String) {                Title = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.String) {                DescriptionText = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.I64) {                ShopOrderId = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.String) {                FromMid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 13:              if (field.Type == TType.String) {                ToMid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 14:              if (field.Type == TType.I64) {                ValidUntil = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 15:              if (field.Type == TType.I32) {                PriceTier = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 16:              if (field.Type == TType.String) {                Price = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 17:              if (field.Type == TType.String) {                Currency = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 18:              if (field.Type == TType.String) {                CurrencySymbol = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 19:              if (field.Type == TType.I32) {                PaymentType = (PaymentType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 20:              if (field.Type == TType.I64) {                CreateDate = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 21:              if (field.Type == TType.Bool) {                OwnFlag = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 22:              if (field.Type == TType.I32) {                EventType = (ProductEventType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 23:              if (field.Type == TType.String) {                UrlSchema = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 24:              if (field.Type == TType.String) {                DownloadUrl = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 25:              if (field.Type == TType.String) {                BuddyMid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 26:              if (field.Type == TType.I64) {                PublishSince = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 27:              if (field.Type == TType.Bool) {                NewFlag = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 28:              if (field.Type == TType.Bool) {                MissionFlag = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,Product,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                ProductId = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.I64) {                PackageId = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.I32) {                Version = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.String) {                AuthorName = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.Bool) {                OnSale = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.I32) {                ValidDays = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 7:              if (field.Type == TType.I32) {                SaleType = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 8:              if (field.Type == TType.String) {                Copyright = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 9:              if (field.Type == TType.String) {                Title = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.String) {                DescriptionText = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.I64) {                ShopOrderId = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.String) {                FromMid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 13:              if (field.Type == TType.String) {                ToMid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 14:              if (field.Type == TType.I64) {                ValidUntil = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 15:              if (field.Type == TType.I32) {                PriceTier = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 16:              if (field.Type == TType.String) {                Price = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 17:              if (field.Type == TType.String) {                Currency = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 18:              if (field.Type == TType.String) {                CurrencySymbol = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 19:              if (field.Type == TType.I32) {                PaymentType = (PaymentType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 20:              if (field.Type == TType.I64) {                CreateDate = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 21:              if (field.Type == TType.Bool) {                OwnFlag = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 22:              if (field.Type == TType.I32) {                EventType = (ProductEventType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 23:              if (field.Type == TType.String) {                UrlSchema = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 24:              if (field.Type == TType.String) {                DownloadUrl = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 25:              if (field.Type == TType.String) {                BuddyMid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 26:              if (field.Type == TType.I64) {                PublishSince = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 27:              if (field.Type == TType.Bool) {                NewFlag = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 28:              if (field.Type == TType.Bool) {                MissionFlag = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,Product,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                ProductId = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.I64) {                PackageId = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.I32) {                Version = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.String) {                AuthorName = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.Bool) {                OnSale = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.I32) {                ValidDays = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 7:              if (field.Type == TType.I32) {                SaleType = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 8:              if (field.Type == TType.String) {                Copyright = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 9:              if (field.Type == TType.String) {                Title = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.String) {                DescriptionText = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.I64) {                ShopOrderId = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.String) {                FromMid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 13:              if (field.Type == TType.String) {                ToMid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 14:              if (field.Type == TType.I64) {                ValidUntil = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 15:              if (field.Type == TType.I32) {                PriceTier = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 16:              if (field.Type == TType.String) {                Price = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 17:              if (field.Type == TType.String) {                Currency = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 18:              if (field.Type == TType.String) {                CurrencySymbol = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 19:              if (field.Type == TType.I32) {                PaymentType = (PaymentType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 20:              if (field.Type == TType.I64) {                CreateDate = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 21:              if (field.Type == TType.Bool) {                OwnFlag = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 22:              if (field.Type == TType.I32) {                EventType = (ProductEventType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 23:              if (field.Type == TType.String) {                UrlSchema = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 24:              if (field.Type == TType.String) {                DownloadUrl = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 25:              if (field.Type == TType.String) {                BuddyMid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 26:              if (field.Type == TType.I64) {                PublishSince = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 27:              if (field.Type == TType.Bool) {                NewFlag = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 28:              if (field.Type == TType.Bool) {                MissionFlag = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,Product,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                ProductId = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.I64) {                PackageId = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.I32) {                Version = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.String) {                AuthorName = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.Bool) {                OnSale = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.I32) {                ValidDays = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 7:              if (field.Type == TType.I32) {                SaleType = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 8:              if (field.Type == TType.String) {                Copyright = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 9:              if (field.Type == TType.String) {                Title = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.String) {                DescriptionText = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.I64) {                ShopOrderId = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.String) {                FromMid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 13:              if (field.Type == TType.String) {                ToMid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 14:              if (field.Type == TType.I64) {                ValidUntil = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 15:              if (field.Type == TType.I32) {                PriceTier = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 16:              if (field.Type == TType.String) {                Price = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 17:              if (field.Type == TType.String) {                Currency = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 18:              if (field.Type == TType.String) {                CurrencySymbol = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 19:              if (field.Type == TType.I32) {                PaymentType = (PaymentType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 20:              if (field.Type == TType.I64) {                CreateDate = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 21:              if (field.Type == TType.Bool) {                OwnFlag = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 22:              if (field.Type == TType.I32) {                EventType = (ProductEventType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 23:              if (field.Type == TType.String) {                UrlSchema = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 24:              if (field.Type == TType.String) {                DownloadUrl = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 25:              if (field.Type == TType.String) {                BuddyMid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 26:              if (field.Type == TType.I64) {                PublishSince = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 27:              if (field.Type == TType.Bool) {                NewFlag = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 28:              if (field.Type == TType.Bool) {                MissionFlag = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,Product,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                ProductId = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.I64) {                PackageId = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.I32) {                Version = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.String) {                AuthorName = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.Bool) {                OnSale = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.I32) {                ValidDays = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 7:              if (field.Type == TType.I32) {                SaleType = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 8:              if (field.Type == TType.String) {                Copyright = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 9:              if (field.Type == TType.String) {                Title = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.String) {                DescriptionText = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.I64) {                ShopOrderId = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.String) {                FromMid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 13:              if (field.Type == TType.String) {                ToMid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 14:              if (field.Type == TType.I64) {                ValidUntil = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 15:              if (field.Type == TType.I32) {                PriceTier = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 16:              if (field.Type == TType.String) {                Price = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 17:              if (field.Type == TType.String) {                Currency = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 18:              if (field.Type == TType.String) {                CurrencySymbol = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 19:              if (field.Type == TType.I32) {                PaymentType = (PaymentType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 20:              if (field.Type == TType.I64) {                CreateDate = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 21:              if (field.Type == TType.Bool) {                OwnFlag = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 22:              if (field.Type == TType.I32) {                EventType = (ProductEventType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 23:              if (field.Type == TType.String) {                UrlSchema = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 24:              if (field.Type == TType.String) {                DownloadUrl = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 25:              if (field.Type == TType.String) {                BuddyMid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 26:              if (field.Type == TType.I64) {                PublishSince = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 27:              if (field.Type == TType.Bool) {                NewFlag = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 28:              if (field.Type == TType.Bool) {                MissionFlag = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,Product,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                ProductId = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.I64) {                PackageId = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.I32) {                Version = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.String) {                AuthorName = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.Bool) {                OnSale = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.I32) {                ValidDays = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 7:              if (field.Type == TType.I32) {                SaleType = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 8:              if (field.Type == TType.String) {                Copyright = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 9:              if (field.Type == TType.String) {                Title = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.String) {                DescriptionText = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.I64) {                ShopOrderId = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.String) {                FromMid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 13:              if (field.Type == TType.String) {                ToMid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 14:              if (field.Type == TType.I64) {                ValidUntil = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 15:              if (field.Type == TType.I32) {                PriceTier = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 16:              if (field.Type == TType.String) {                Price = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 17:              if (field.Type == TType.String) {                Currency = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 18:              if (field.Type == TType.String) {                CurrencySymbol = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 19:              if (field.Type == TType.I32) {                PaymentType = (PaymentType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 20:              if (field.Type == TType.I64) {                CreateDate = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 21:              if (field.Type == TType.Bool) {                OwnFlag = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 22:              if (field.Type == TType.I32) {                EventType = (ProductEventType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 23:              if (field.Type == TType.String) {                UrlSchema = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 24:              if (field.Type == TType.String) {                DownloadUrl = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 25:              if (field.Type == TType.String) {                BuddyMid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 26:              if (field.Type == TType.I64) {                PublishSince = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 27:              if (field.Type == TType.Bool) {                NewFlag = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 28:              if (field.Type == TType.Bool) {                MissionFlag = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,Product,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                ProductId = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.I64) {                PackageId = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.I32) {                Version = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.String) {                AuthorName = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.Bool) {                OnSale = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.I32) {                ValidDays = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 7:              if (field.Type == TType.I32) {                SaleType = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 8:              if (field.Type == TType.String) {                Copyright = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 9:              if (field.Type == TType.String) {                Title = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.String) {                DescriptionText = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.I64) {                ShopOrderId = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.String) {                FromMid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 13:              if (field.Type == TType.String) {                ToMid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 14:              if (field.Type == TType.I64) {                ValidUntil = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 15:              if (field.Type == TType.I32) {                PriceTier = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 16:              if (field.Type == TType.String) {                Price = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 17:              if (field.Type == TType.String) {                Currency = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 18:              if (field.Type == TType.String) {                CurrencySymbol = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 19:              if (field.Type == TType.I32) {                PaymentType = (PaymentType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 20:              if (field.Type == TType.I64) {                CreateDate = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 21:              if (field.Type == TType.Bool) {                OwnFlag = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 22:              if (field.Type == TType.I32) {                EventType = (ProductEventType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 23:              if (field.Type == TType.String) {                UrlSchema = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 24:              if (field.Type == TType.String) {                DownloadUrl = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 25:              if (field.Type == TType.String) {                BuddyMid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 26:              if (field.Type == TType.I64) {                PublishSince = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 27:              if (field.Type == TType.Bool) {                NewFlag = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 28:              if (field.Type == TType.Bool) {                MissionFlag = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,Product,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                ProductId = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.I64) {                PackageId = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.I32) {                Version = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.String) {                AuthorName = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.Bool) {                OnSale = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.I32) {                ValidDays = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 7:              if (field.Type == TType.I32) {                SaleType = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 8:              if (field.Type == TType.String) {                Copyright = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 9:              if (field.Type == TType.String) {                Title = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.String) {                DescriptionText = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.I64) {                ShopOrderId = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.String) {                FromMid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 13:              if (field.Type == TType.String) {                ToMid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 14:              if (field.Type == TType.I64) {                ValidUntil = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 15:              if (field.Type == TType.I32) {                PriceTier = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 16:              if (field.Type == TType.String) {                Price = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 17:              if (field.Type == TType.String) {                Currency = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 18:              if (field.Type == TType.String) {                CurrencySymbol = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 19:              if (field.Type == TType.I32) {                PaymentType = (PaymentType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 20:              if (field.Type == TType.I64) {                CreateDate = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 21:              if (field.Type == TType.Bool) {                OwnFlag = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 22:              if (field.Type == TType.I32) {                EventType = (ProductEventType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 23:              if (field.Type == TType.String) {                UrlSchema = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 24:              if (field.Type == TType.String) {                DownloadUrl = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 25:              if (field.Type == TType.String) {                BuddyMid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 26:              if (field.Type == TType.I64) {                PublishSince = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 27:              if (field.Type == TType.Bool) {                NewFlag = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 28:              if (field.Type == TType.Bool) {                MissionFlag = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,Product,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                ProductId = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.I64) {                PackageId = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.I32) {                Version = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.String) {                AuthorName = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.Bool) {                OnSale = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.I32) {                ValidDays = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 7:              if (field.Type == TType.I32) {                SaleType = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 8:              if (field.Type == TType.String) {                Copyright = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 9:              if (field.Type == TType.String) {                Title = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.String) {                DescriptionText = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.I64) {                ShopOrderId = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.String) {                FromMid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 13:              if (field.Type == TType.String) {                ToMid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 14:              if (field.Type == TType.I64) {                ValidUntil = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 15:              if (field.Type == TType.I32) {                PriceTier = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 16:              if (field.Type == TType.String) {                Price = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 17:              if (field.Type == TType.String) {                Currency = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 18:              if (field.Type == TType.String) {                CurrencySymbol = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 19:              if (field.Type == TType.I32) {                PaymentType = (PaymentType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 20:              if (field.Type == TType.I64) {                CreateDate = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 21:              if (field.Type == TType.Bool) {                OwnFlag = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 22:              if (field.Type == TType.I32) {                EventType = (ProductEventType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 23:              if (field.Type == TType.String) {                UrlSchema = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 24:              if (field.Type == TType.String) {                DownloadUrl = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 25:              if (field.Type == TType.String) {                BuddyMid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 26:              if (field.Type == TType.I64) {                PublishSince = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 27:              if (field.Type == TType.Bool) {                NewFlag = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 28:              if (field.Type == TType.Bool) {                MissionFlag = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,Product,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                ProductId = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.I64) {                PackageId = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.I32) {                Version = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.String) {                AuthorName = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.Bool) {                OnSale = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.I32) {                ValidDays = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 7:              if (field.Type == TType.I32) {                SaleType = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 8:              if (field.Type == TType.String) {                Copyright = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 9:              if (field.Type == TType.String) {                Title = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.String) {                DescriptionText = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.I64) {                ShopOrderId = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.String) {                FromMid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 13:              if (field.Type == TType.String) {                ToMid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 14:              if (field.Type == TType.I64) {                ValidUntil = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 15:              if (field.Type == TType.I32) {                PriceTier = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 16:              if (field.Type == TType.String) {                Price = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 17:              if (field.Type == TType.String) {                Currency = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 18:              if (field.Type == TType.String) {                CurrencySymbol = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 19:              if (field.Type == TType.I32) {                PaymentType = (PaymentType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 20:              if (field.Type == TType.I64) {                CreateDate = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 21:              if (field.Type == TType.Bool) {                OwnFlag = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 22:              if (field.Type == TType.I32) {                EventType = (ProductEventType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 23:              if (field.Type == TType.String) {                UrlSchema = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 24:              if (field.Type == TType.String) {                DownloadUrl = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 25:              if (field.Type == TType.String) {                BuddyMid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 26:              if (field.Type == TType.I64) {                PublishSince = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 27:              if (field.Type == TType.Bool) {                NewFlag = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 28:              if (field.Type == TType.Bool) {                MissionFlag = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,Product,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,Product,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,LineSharp.Datatypes,Product,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Write,The following statement contains a magic number: field.ID = 4;
Magic Number,LineSharp.Datatypes,Product,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Write,The following statement contains a magic number: field.ID = 5;
Magic Number,LineSharp.Datatypes,Product,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Write,The following statement contains a magic number: field.ID = 6;
Magic Number,LineSharp.Datatypes,Product,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Write,The following statement contains a magic number: field.ID = 7;
Magic Number,LineSharp.Datatypes,Product,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Write,The following statement contains a magic number: field.ID = 8;
Magic Number,LineSharp.Datatypes,Product,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Write,The following statement contains a magic number: field.ID = 9;
Magic Number,LineSharp.Datatypes,Product,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Write,The following statement contains a magic number: field.ID = 10;
Magic Number,LineSharp.Datatypes,Product,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Write,The following statement contains a magic number: field.ID = 11;
Magic Number,LineSharp.Datatypes,Product,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Write,The following statement contains a magic number: field.ID = 12;
Magic Number,LineSharp.Datatypes,Product,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Write,The following statement contains a magic number: field.ID = 13;
Magic Number,LineSharp.Datatypes,Product,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Write,The following statement contains a magic number: field.ID = 14;
Magic Number,LineSharp.Datatypes,Product,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Write,The following statement contains a magic number: field.ID = 15;
Magic Number,LineSharp.Datatypes,Product,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Write,The following statement contains a magic number: field.ID = 16;
Magic Number,LineSharp.Datatypes,Product,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Write,The following statement contains a magic number: field.ID = 17;
Magic Number,LineSharp.Datatypes,Product,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Write,The following statement contains a magic number: field.ID = 18;
Magic Number,LineSharp.Datatypes,Product,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Write,The following statement contains a magic number: field.ID = 19;
Magic Number,LineSharp.Datatypes,Product,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Write,The following statement contains a magic number: field.ID = 20;
Magic Number,LineSharp.Datatypes,Product,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Write,The following statement contains a magic number: field.ID = 21;
Magic Number,LineSharp.Datatypes,Product,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Write,The following statement contains a magic number: field.ID = 22;
Magic Number,LineSharp.Datatypes,Product,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Write,The following statement contains a magic number: field.ID = 23;
Magic Number,LineSharp.Datatypes,Product,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Write,The following statement contains a magic number: field.ID = 24;
Magic Number,LineSharp.Datatypes,Product,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Write,The following statement contains a magic number: field.ID = 25;
Magic Number,LineSharp.Datatypes,Product,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Write,The following statement contains a magic number: field.ID = 26;
Magic Number,LineSharp.Datatypes,Product,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Write,The following statement contains a magic number: field.ID = 27;
Magic Number,LineSharp.Datatypes,Product,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Product.cs,Write,The following statement contains a magic number: field.ID = 28;
Magic Number,LineSharp.Datatypes,ProductList,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ProductList.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.Bool) {                HasNext = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.I64) {                BannerSequence = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.I32) {                BannerTargetType = (ProductBannerLinkType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.String) {                BannerTargetPath = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 7:              if (field.Type == TType.List) {                {                  ProductList_ = new List<Product>();                  TList _list34 = iprot.ReadListBegin();                  for( int _i35 = 0; _i35 < _list34.Count; ++_i35)                  {                    Product _elem36 = new Product();                    _elem36 = new Product();                    _elem36.Read(iprot);                    ProductList_.Add(_elem36);                  }                  iprot.ReadListEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 8:              if (field.Type == TType.String) {                BannerLang = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,ProductList,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ProductList.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.Bool) {                HasNext = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.I64) {                BannerSequence = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.I32) {                BannerTargetType = (ProductBannerLinkType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.String) {                BannerTargetPath = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 7:              if (field.Type == TType.List) {                {                  ProductList_ = new List<Product>();                  TList _list34 = iprot.ReadListBegin();                  for( int _i35 = 0; _i35 < _list34.Count; ++_i35)                  {                    Product _elem36 = new Product();                    _elem36 = new Product();                    _elem36.Read(iprot);                    ProductList_.Add(_elem36);                  }                  iprot.ReadListEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 8:              if (field.Type == TType.String) {                BannerLang = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,ProductList,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ProductList.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.Bool) {                HasNext = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.I64) {                BannerSequence = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.I32) {                BannerTargetType = (ProductBannerLinkType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.String) {                BannerTargetPath = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 7:              if (field.Type == TType.List) {                {                  ProductList_ = new List<Product>();                  TList _list34 = iprot.ReadListBegin();                  for( int _i35 = 0; _i35 < _list34.Count; ++_i35)                  {                    Product _elem36 = new Product();                    _elem36 = new Product();                    _elem36.Read(iprot);                    ProductList_.Add(_elem36);                  }                  iprot.ReadListEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 8:              if (field.Type == TType.String) {                BannerLang = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,ProductList,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ProductList.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.Bool) {                HasNext = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.I64) {                BannerSequence = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.I32) {                BannerTargetType = (ProductBannerLinkType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.String) {                BannerTargetPath = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 7:              if (field.Type == TType.List) {                {                  ProductList_ = new List<Product>();                  TList _list34 = iprot.ReadListBegin();                  for( int _i35 = 0; _i35 < _list34.Count; ++_i35)                  {                    Product _elem36 = new Product();                    _elem36 = new Product();                    _elem36.Read(iprot);                    ProductList_.Add(_elem36);                  }                  iprot.ReadListEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 8:              if (field.Type == TType.String) {                BannerLang = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,ProductList,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ProductList.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.Bool) {                HasNext = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.I64) {                BannerSequence = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.I32) {                BannerTargetType = (ProductBannerLinkType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.String) {                BannerTargetPath = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 7:              if (field.Type == TType.List) {                {                  ProductList_ = new List<Product>();                  TList _list34 = iprot.ReadListBegin();                  for( int _i35 = 0; _i35 < _list34.Count; ++_i35)                  {                    Product _elem36 = new Product();                    _elem36 = new Product();                    _elem36.Read(iprot);                    ProductList_.Add(_elem36);                  }                  iprot.ReadListEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 8:              if (field.Type == TType.String) {                BannerLang = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,ProductList,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ProductList.cs,Write,The following statement contains a magic number: field.ID = 4;
Magic Number,LineSharp.Datatypes,ProductList,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ProductList.cs,Write,The following statement contains a magic number: field.ID = 5;
Magic Number,LineSharp.Datatypes,ProductList,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ProductList.cs,Write,The following statement contains a magic number: field.ID = 6;
Magic Number,LineSharp.Datatypes,ProductList,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ProductList.cs,Write,The following statement contains a magic number: field.ID = 7;
Magic Number,LineSharp.Datatypes,ProductList,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ProductList.cs,Write,The following statement contains a magic number: field.ID = 8;
Magic Number,LineSharp.Datatypes,ProductSimple,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ProductSimple.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                ProductId = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.I64) {                PackageId = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.I32) {                Version = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.Bool) {                OnSale = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.I64) {                ValidUntil = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,ProductSimple,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ProductSimple.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                ProductId = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.I64) {                PackageId = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.I32) {                Version = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.Bool) {                OnSale = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.I64) {                ValidUntil = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,ProductSimple,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ProductSimple.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                ProductId = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.I64) {                PackageId = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.I32) {                Version = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.Bool) {                OnSale = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.I64) {                ValidUntil = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,ProductSimple,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ProductSimple.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                ProductId = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.I64) {                PackageId = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.I32) {                Version = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.Bool) {                OnSale = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.I64) {                ValidUntil = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,ProductSimple,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ProductSimple.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,ProductSimple,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ProductSimple.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,LineSharp.Datatypes,ProductSimple,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ProductSimple.cs,Write,The following statement contains a magic number: field.ID = 4;
Magic Number,LineSharp.Datatypes,ProductSimple,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ProductSimple.cs,Write,The following statement contains a magic number: field.ID = 5;
Magic Number,LineSharp.Datatypes,ProductSimpleList,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ProductSimpleList.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.Bool) {                HasNext = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.I32) {                ReinvokeHour = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.I64) {                LastVersionSeq = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.List) {                {                  ProductList = new List<ProductSimple>();                  TList _list38 = iprot.ReadListBegin();                  for( int _i39 = 0; _i39 < _list38.Count; ++_i39)                  {                    ProductSimple _elem40 = new ProductSimple();                    _elem40 = new ProductSimple();                    _elem40.Read(iprot);                    ProductList.Add(_elem40);                  }                  iprot.ReadListEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.I64) {                RecentNewReleaseDate = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.I64) {                RecentEventReleaseDate = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,ProductSimpleList,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ProductSimpleList.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.Bool) {                HasNext = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.I32) {                ReinvokeHour = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.I64) {                LastVersionSeq = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.List) {                {                  ProductList = new List<ProductSimple>();                  TList _list38 = iprot.ReadListBegin();                  for( int _i39 = 0; _i39 < _list38.Count; ++_i39)                  {                    ProductSimple _elem40 = new ProductSimple();                    _elem40 = new ProductSimple();                    _elem40.Read(iprot);                    ProductList.Add(_elem40);                  }                  iprot.ReadListEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.I64) {                RecentNewReleaseDate = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.I64) {                RecentEventReleaseDate = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,ProductSimpleList,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ProductSimpleList.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.Bool) {                HasNext = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.I32) {                ReinvokeHour = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.I64) {                LastVersionSeq = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.List) {                {                  ProductList = new List<ProductSimple>();                  TList _list38 = iprot.ReadListBegin();                  for( int _i39 = 0; _i39 < _list38.Count; ++_i39)                  {                    ProductSimple _elem40 = new ProductSimple();                    _elem40 = new ProductSimple();                    _elem40.Read(iprot);                    ProductList.Add(_elem40);                  }                  iprot.ReadListEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.I64) {                RecentNewReleaseDate = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.I64) {                RecentEventReleaseDate = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,ProductSimpleList,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ProductSimpleList.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.Bool) {                HasNext = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.I32) {                ReinvokeHour = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.I64) {                LastVersionSeq = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.List) {                {                  ProductList = new List<ProductSimple>();                  TList _list38 = iprot.ReadListBegin();                  for( int _i39 = 0; _i39 < _list38.Count; ++_i39)                  {                    ProductSimple _elem40 = new ProductSimple();                    _elem40 = new ProductSimple();                    _elem40.Read(iprot);                    ProductList.Add(_elem40);                  }                  iprot.ReadListEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.I64) {                RecentNewReleaseDate = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.I64) {                RecentEventReleaseDate = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,ProductSimpleList,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ProductSimpleList.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.Bool) {                HasNext = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.I32) {                ReinvokeHour = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.I64) {                LastVersionSeq = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.List) {                {                  ProductList = new List<ProductSimple>();                  TList _list38 = iprot.ReadListBegin();                  for( int _i39 = 0; _i39 < _list38.Count; ++_i39)                  {                    ProductSimple _elem40 = new ProductSimple();                    _elem40 = new ProductSimple();                    _elem40.Read(iprot);                    ProductList.Add(_elem40);                  }                  iprot.ReadListEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.I64) {                RecentNewReleaseDate = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.I64) {                RecentEventReleaseDate = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,ProductSimpleList,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ProductSimpleList.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,ProductSimpleList,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ProductSimpleList.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,LineSharp.Datatypes,ProductSimpleList,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ProductSimpleList.cs,Write,The following statement contains a magic number: field.ID = 4;
Magic Number,LineSharp.Datatypes,ProductSimpleList,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ProductSimpleList.cs,Write,The following statement contains a magic number: field.ID = 5;
Magic Number,LineSharp.Datatypes,ProductSimpleList,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ProductSimpleList.cs,Write,The following statement contains a magic number: field.ID = 6;
Magic Number,LineSharp.Datatypes,Profile,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Profile.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                Mid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.String) {                Userid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.String) {                Phone = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.String) {                Email = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.String) {                RegionCode = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 20:              if (field.Type == TType.String) {                DisplayName = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 21:              if (field.Type == TType.String) {                PhoneticName = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 22:              if (field.Type == TType.String) {                PictureStatus = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 23:              if (field.Type == TType.String) {                ThumbnailUrl = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 24:              if (field.Type == TType.String) {                StatusMessage = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 31:              if (field.Type == TType.Bool) {                AllowSearchByUserid = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 32:              if (field.Type == TType.Bool) {                AllowSearchByEmail = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 33:              if (field.Type == TType.String) {                PicturePath = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,Profile,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Profile.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                Mid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.String) {                Userid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.String) {                Phone = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.String) {                Email = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.String) {                RegionCode = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 20:              if (field.Type == TType.String) {                DisplayName = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 21:              if (field.Type == TType.String) {                PhoneticName = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 22:              if (field.Type == TType.String) {                PictureStatus = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 23:              if (field.Type == TType.String) {                ThumbnailUrl = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 24:              if (field.Type == TType.String) {                StatusMessage = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 31:              if (field.Type == TType.Bool) {                AllowSearchByUserid = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 32:              if (field.Type == TType.Bool) {                AllowSearchByEmail = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 33:              if (field.Type == TType.String) {                PicturePath = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,Profile,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Profile.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                Mid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.String) {                Userid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.String) {                Phone = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.String) {                Email = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.String) {                RegionCode = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 20:              if (field.Type == TType.String) {                DisplayName = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 21:              if (field.Type == TType.String) {                PhoneticName = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 22:              if (field.Type == TType.String) {                PictureStatus = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 23:              if (field.Type == TType.String) {                ThumbnailUrl = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 24:              if (field.Type == TType.String) {                StatusMessage = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 31:              if (field.Type == TType.Bool) {                AllowSearchByUserid = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 32:              if (field.Type == TType.Bool) {                AllowSearchByEmail = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 33:              if (field.Type == TType.String) {                PicturePath = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,Profile,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Profile.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                Mid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.String) {                Userid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.String) {                Phone = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.String) {                Email = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.String) {                RegionCode = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 20:              if (field.Type == TType.String) {                DisplayName = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 21:              if (field.Type == TType.String) {                PhoneticName = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 22:              if (field.Type == TType.String) {                PictureStatus = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 23:              if (field.Type == TType.String) {                ThumbnailUrl = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 24:              if (field.Type == TType.String) {                StatusMessage = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 31:              if (field.Type == TType.Bool) {                AllowSearchByUserid = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 32:              if (field.Type == TType.Bool) {                AllowSearchByEmail = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 33:              if (field.Type == TType.String) {                PicturePath = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,Profile,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Profile.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                Mid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.String) {                Userid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.String) {                Phone = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.String) {                Email = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.String) {                RegionCode = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 20:              if (field.Type == TType.String) {                DisplayName = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 21:              if (field.Type == TType.String) {                PhoneticName = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 22:              if (field.Type == TType.String) {                PictureStatus = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 23:              if (field.Type == TType.String) {                ThumbnailUrl = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 24:              if (field.Type == TType.String) {                StatusMessage = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 31:              if (field.Type == TType.Bool) {                AllowSearchByUserid = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 32:              if (field.Type == TType.Bool) {                AllowSearchByEmail = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 33:              if (field.Type == TType.String) {                PicturePath = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,Profile,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Profile.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                Mid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.String) {                Userid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.String) {                Phone = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.String) {                Email = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.String) {                RegionCode = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 20:              if (field.Type == TType.String) {                DisplayName = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 21:              if (field.Type == TType.String) {                PhoneticName = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 22:              if (field.Type == TType.String) {                PictureStatus = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 23:              if (field.Type == TType.String) {                ThumbnailUrl = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 24:              if (field.Type == TType.String) {                StatusMessage = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 31:              if (field.Type == TType.Bool) {                AllowSearchByUserid = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 32:              if (field.Type == TType.Bool) {                AllowSearchByEmail = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 33:              if (field.Type == TType.String) {                PicturePath = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,Profile,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Profile.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                Mid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.String) {                Userid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.String) {                Phone = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.String) {                Email = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.String) {                RegionCode = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 20:              if (field.Type == TType.String) {                DisplayName = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 21:              if (field.Type == TType.String) {                PhoneticName = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 22:              if (field.Type == TType.String) {                PictureStatus = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 23:              if (field.Type == TType.String) {                ThumbnailUrl = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 24:              if (field.Type == TType.String) {                StatusMessage = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 31:              if (field.Type == TType.Bool) {                AllowSearchByUserid = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 32:              if (field.Type == TType.Bool) {                AllowSearchByEmail = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 33:              if (field.Type == TType.String) {                PicturePath = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,Profile,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Profile.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                Mid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.String) {                Userid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.String) {                Phone = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.String) {                Email = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.String) {                RegionCode = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 20:              if (field.Type == TType.String) {                DisplayName = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 21:              if (field.Type == TType.String) {                PhoneticName = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 22:              if (field.Type == TType.String) {                PictureStatus = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 23:              if (field.Type == TType.String) {                ThumbnailUrl = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 24:              if (field.Type == TType.String) {                StatusMessage = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 31:              if (field.Type == TType.Bool) {                AllowSearchByUserid = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 32:              if (field.Type == TType.Bool) {                AllowSearchByEmail = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 33:              if (field.Type == TType.String) {                PicturePath = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,Profile,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Profile.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                Mid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.String) {                Userid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.String) {                Phone = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.String) {                Email = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.String) {                RegionCode = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 20:              if (field.Type == TType.String) {                DisplayName = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 21:              if (field.Type == TType.String) {                PhoneticName = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 22:              if (field.Type == TType.String) {                PictureStatus = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 23:              if (field.Type == TType.String) {                ThumbnailUrl = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 24:              if (field.Type == TType.String) {                StatusMessage = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 31:              if (field.Type == TType.Bool) {                AllowSearchByUserid = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 32:              if (field.Type == TType.Bool) {                AllowSearchByEmail = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 33:              if (field.Type == TType.String) {                PicturePath = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,Profile,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Profile.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                Mid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.String) {                Userid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.String) {                Phone = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.String) {                Email = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.String) {                RegionCode = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 20:              if (field.Type == TType.String) {                DisplayName = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 21:              if (field.Type == TType.String) {                PhoneticName = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 22:              if (field.Type == TType.String) {                PictureStatus = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 23:              if (field.Type == TType.String) {                ThumbnailUrl = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 24:              if (field.Type == TType.String) {                StatusMessage = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 31:              if (field.Type == TType.Bool) {                AllowSearchByUserid = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 32:              if (field.Type == TType.Bool) {                AllowSearchByEmail = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 33:              if (field.Type == TType.String) {                PicturePath = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,Profile,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Profile.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                Mid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.String) {                Userid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.String) {                Phone = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.String) {                Email = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.String) {                RegionCode = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 20:              if (field.Type == TType.String) {                DisplayName = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 21:              if (field.Type == TType.String) {                PhoneticName = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 22:              if (field.Type == TType.String) {                PictureStatus = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 23:              if (field.Type == TType.String) {                ThumbnailUrl = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 24:              if (field.Type == TType.String) {                StatusMessage = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 31:              if (field.Type == TType.Bool) {                AllowSearchByUserid = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 32:              if (field.Type == TType.Bool) {                AllowSearchByEmail = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 33:              if (field.Type == TType.String) {                PicturePath = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,Profile,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Profile.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                Mid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.String) {                Userid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.String) {                Phone = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.String) {                Email = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.String) {                RegionCode = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 20:              if (field.Type == TType.String) {                DisplayName = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 21:              if (field.Type == TType.String) {                PhoneticName = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 22:              if (field.Type == TType.String) {                PictureStatus = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 23:              if (field.Type == TType.String) {                ThumbnailUrl = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 24:              if (field.Type == TType.String) {                StatusMessage = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 31:              if (field.Type == TType.Bool) {                AllowSearchByUserid = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 32:              if (field.Type == TType.Bool) {                AllowSearchByEmail = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 33:              if (field.Type == TType.String) {                PicturePath = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,Profile,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Profile.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,LineSharp.Datatypes,Profile,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Profile.cs,Write,The following statement contains a magic number: field.ID = 10;
Magic Number,LineSharp.Datatypes,Profile,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Profile.cs,Write,The following statement contains a magic number: field.ID = 11;
Magic Number,LineSharp.Datatypes,Profile,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Profile.cs,Write,The following statement contains a magic number: field.ID = 12;
Magic Number,LineSharp.Datatypes,Profile,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Profile.cs,Write,The following statement contains a magic number: field.ID = 20;
Magic Number,LineSharp.Datatypes,Profile,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Profile.cs,Write,The following statement contains a magic number: field.ID = 21;
Magic Number,LineSharp.Datatypes,Profile,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Profile.cs,Write,The following statement contains a magic number: field.ID = 22;
Magic Number,LineSharp.Datatypes,Profile,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Profile.cs,Write,The following statement contains a magic number: field.ID = 23;
Magic Number,LineSharp.Datatypes,Profile,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Profile.cs,Write,The following statement contains a magic number: field.ID = 24;
Magic Number,LineSharp.Datatypes,Profile,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Profile.cs,Write,The following statement contains a magic number: field.ID = 31;
Magic Number,LineSharp.Datatypes,Profile,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Profile.cs,Write,The following statement contains a magic number: field.ID = 32;
Magic Number,LineSharp.Datatypes,Profile,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Profile.cs,Write,The following statement contains a magic number: field.ID = 33;
Magic Number,LineSharp.Datatypes,ProximityMatchCandidateResult,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ProximityMatchCandidateResult.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.List) {                {                  Users = new List<Contact>();                  TList _list42 = iprot.ReadListBegin();                  for( int _i43 = 0; _i43 < _list42.Count; ++_i43)                  {                    Contact _elem44 = new Contact();                    _elem44 = new Contact();                    _elem44.Read(iprot);                    Users.Add(_elem44);                  }                  iprot.ReadListEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.List) {                {                  Buddies = new List<Contact>();                  TList _list45 = iprot.ReadListBegin();                  for( int _i46 = 0; _i46 < _list45.Count; ++_i46)                  {                    Contact _elem47 = new Contact();                    _elem47 = new Contact();                    _elem47.Read(iprot);                    Buddies.Add(_elem47);                  }                  iprot.ReadListEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,ProximityMatchCandidateResult,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ProximityMatchCandidateResult.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,RegisterWithSnsIdResult,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\RegisterWithSnsIdResult.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                AuthToken = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.Bool) {                UserCreated = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,RegisterWithSnsIdResult,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\RegisterWithSnsIdResult.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,Room,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Room.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                Mid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.I64) {                CreatedTime = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.List) {                {                  Contacts = new List<Contact>();                  TList _list50 = iprot.ReadListBegin();                  for( int _i51 = 0; _i51 < _list50.Count; ++_i51)                  {                    Contact _elem52 = new Contact();                    _elem52 = new Contact();                    _elem52.Read(iprot);                    Contacts.Add(_elem52);                  }                  iprot.ReadListEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 31:              if (field.Type == TType.Bool) {                NotificationDisabled = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,Room,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Room.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                Mid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.I64) {                CreatedTime = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.List) {                {                  Contacts = new List<Contact>();                  TList _list50 = iprot.ReadListBegin();                  for( int _i51 = 0; _i51 < _list50.Count; ++_i51)                  {                    Contact _elem52 = new Contact();                    _elem52 = new Contact();                    _elem52.Read(iprot);                    Contacts.Add(_elem52);                  }                  iprot.ReadListEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 31:              if (field.Type == TType.Bool) {                NotificationDisabled = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,Room,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Room.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                Mid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.I64) {                CreatedTime = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.List) {                {                  Contacts = new List<Contact>();                  TList _list50 = iprot.ReadListBegin();                  for( int _i51 = 0; _i51 < _list50.Count; ++_i51)                  {                    Contact _elem52 = new Contact();                    _elem52 = new Contact();                    _elem52.Read(iprot);                    Contacts.Add(_elem52);                  }                  iprot.ReadListEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 31:              if (field.Type == TType.Bool) {                NotificationDisabled = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,Room,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Room.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,Room,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Room.cs,Write,The following statement contains a magic number: field.ID = 10;
Magic Number,LineSharp.Datatypes,Room,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Room.cs,Write,The following statement contains a magic number: field.ID = 31;
Magic Number,LineSharp.Datatypes,RSAKey,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\RSAKey.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                Keynm = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.String) {                Nvalue = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.String) {                Evalue = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.String) {                SessionKey = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,RSAKey,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\RSAKey.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                Keynm = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.String) {                Nvalue = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.String) {                Evalue = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.String) {                SessionKey = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,RSAKey,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\RSAKey.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                Keynm = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.String) {                Nvalue = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.String) {                Evalue = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.String) {                SessionKey = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,RSAKey,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\RSAKey.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,RSAKey,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\RSAKey.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,LineSharp.Datatypes,RSAKey,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\RSAKey.cs,Write,The following statement contains a magic number: field.ID = 4;
Magic Number,LineSharp.Datatypes,Settings,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 10:              if (field.Type == TType.Bool) {                NotificationEnable = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.I64) {                NotificationMuteExpiration = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.Bool) {                NotificationNewMessage = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 13:              if (field.Type == TType.Bool) {                NotificationGroupInvitation = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 14:              if (field.Type == TType.Bool) {                NotificationShowMessage = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 15:              if (field.Type == TType.Bool) {                NotificationIncomingCall = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 16:              if (field.Type == TType.String) {                NotificationSoundMessage = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 17:              if (field.Type == TType.String) {                NotificationSoundGroup = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 18:              if (field.Type == TType.Bool) {                NotificationDisabledWithSub = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 20:              if (field.Type == TType.Bool) {                PrivacySyncContacts = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 21:              if (field.Type == TType.Bool) {                PrivacySearchByPhoneNumber = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 22:              if (field.Type == TType.Bool) {                PrivacySearchByUserid = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 23:              if (field.Type == TType.Bool) {                PrivacySearchByEmail = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 24:              if (field.Type == TType.Bool) {                PrivacyAllowSecondaryDeviceLogin = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 25:              if (field.Type == TType.Bool) {                PrivacyProfileImagePostToMyhome = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 26:              if (field.Type == TType.Bool) {                PrivacyReceiveMessagesFromNotFriend = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 30:              if (field.Type == TType.String) {                ContactMyTicket = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 40:              if (field.Type == TType.I32) {                IdentityProvider = (IdentityProvider)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 41:              if (field.Type == TType.String) {                IdentityIdentifier = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 42:              if (field.Type == TType.Map) {                {                  SnsAccounts = new Dictionary<SnsIdType' string>();                  TMap _map54 = iprot.ReadMapBegin();                  for( int _i55 = 0; _i55 < _map54.Count; ++_i55)                  {                    SnsIdType _key56;                    string _val57;                    _key56 = (SnsIdType)iprot.ReadI32();                    _val57 = iprot.ReadString();                    SnsAccounts[_key56] = _val57;                  }                  iprot.ReadMapEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 43:              if (field.Type == TType.Bool) {                PhoneRegistration = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 44:              if (field.Type == TType.I32) {                EmailConfirmationStatus = (EmailConfirmationStatus)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 50:              if (field.Type == TType.String) {                PreferenceLocale = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 60:              if (field.Type == TType.Map) {                {                  CustomModes = new Dictionary<CustomMode' string>();                  TMap _map58 = iprot.ReadMapBegin();                  for( int _i59 = 0; _i59 < _map58.Count; ++_i59)                  {                    CustomMode _key60;                    string _val61;                    _key60 = (CustomMode)iprot.ReadI32();                    _val61 = iprot.ReadString();                    CustomModes[_key60] = _val61;                  }                  iprot.ReadMapEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,Settings,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 10:              if (field.Type == TType.Bool) {                NotificationEnable = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.I64) {                NotificationMuteExpiration = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.Bool) {                NotificationNewMessage = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 13:              if (field.Type == TType.Bool) {                NotificationGroupInvitation = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 14:              if (field.Type == TType.Bool) {                NotificationShowMessage = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 15:              if (field.Type == TType.Bool) {                NotificationIncomingCall = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 16:              if (field.Type == TType.String) {                NotificationSoundMessage = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 17:              if (field.Type == TType.String) {                NotificationSoundGroup = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 18:              if (field.Type == TType.Bool) {                NotificationDisabledWithSub = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 20:              if (field.Type == TType.Bool) {                PrivacySyncContacts = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 21:              if (field.Type == TType.Bool) {                PrivacySearchByPhoneNumber = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 22:              if (field.Type == TType.Bool) {                PrivacySearchByUserid = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 23:              if (field.Type == TType.Bool) {                PrivacySearchByEmail = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 24:              if (field.Type == TType.Bool) {                PrivacyAllowSecondaryDeviceLogin = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 25:              if (field.Type == TType.Bool) {                PrivacyProfileImagePostToMyhome = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 26:              if (field.Type == TType.Bool) {                PrivacyReceiveMessagesFromNotFriend = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 30:              if (field.Type == TType.String) {                ContactMyTicket = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 40:              if (field.Type == TType.I32) {                IdentityProvider = (IdentityProvider)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 41:              if (field.Type == TType.String) {                IdentityIdentifier = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 42:              if (field.Type == TType.Map) {                {                  SnsAccounts = new Dictionary<SnsIdType' string>();                  TMap _map54 = iprot.ReadMapBegin();                  for( int _i55 = 0; _i55 < _map54.Count; ++_i55)                  {                    SnsIdType _key56;                    string _val57;                    _key56 = (SnsIdType)iprot.ReadI32();                    _val57 = iprot.ReadString();                    SnsAccounts[_key56] = _val57;                  }                  iprot.ReadMapEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 43:              if (field.Type == TType.Bool) {                PhoneRegistration = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 44:              if (field.Type == TType.I32) {                EmailConfirmationStatus = (EmailConfirmationStatus)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 50:              if (field.Type == TType.String) {                PreferenceLocale = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 60:              if (field.Type == TType.Map) {                {                  CustomModes = new Dictionary<CustomMode' string>();                  TMap _map58 = iprot.ReadMapBegin();                  for( int _i59 = 0; _i59 < _map58.Count; ++_i59)                  {                    CustomMode _key60;                    string _val61;                    _key60 = (CustomMode)iprot.ReadI32();                    _val61 = iprot.ReadString();                    CustomModes[_key60] = _val61;                  }                  iprot.ReadMapEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,Settings,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 10:              if (field.Type == TType.Bool) {                NotificationEnable = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.I64) {                NotificationMuteExpiration = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.Bool) {                NotificationNewMessage = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 13:              if (field.Type == TType.Bool) {                NotificationGroupInvitation = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 14:              if (field.Type == TType.Bool) {                NotificationShowMessage = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 15:              if (field.Type == TType.Bool) {                NotificationIncomingCall = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 16:              if (field.Type == TType.String) {                NotificationSoundMessage = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 17:              if (field.Type == TType.String) {                NotificationSoundGroup = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 18:              if (field.Type == TType.Bool) {                NotificationDisabledWithSub = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 20:              if (field.Type == TType.Bool) {                PrivacySyncContacts = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 21:              if (field.Type == TType.Bool) {                PrivacySearchByPhoneNumber = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 22:              if (field.Type == TType.Bool) {                PrivacySearchByUserid = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 23:              if (field.Type == TType.Bool) {                PrivacySearchByEmail = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 24:              if (field.Type == TType.Bool) {                PrivacyAllowSecondaryDeviceLogin = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 25:              if (field.Type == TType.Bool) {                PrivacyProfileImagePostToMyhome = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 26:              if (field.Type == TType.Bool) {                PrivacyReceiveMessagesFromNotFriend = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 30:              if (field.Type == TType.String) {                ContactMyTicket = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 40:              if (field.Type == TType.I32) {                IdentityProvider = (IdentityProvider)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 41:              if (field.Type == TType.String) {                IdentityIdentifier = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 42:              if (field.Type == TType.Map) {                {                  SnsAccounts = new Dictionary<SnsIdType' string>();                  TMap _map54 = iprot.ReadMapBegin();                  for( int _i55 = 0; _i55 < _map54.Count; ++_i55)                  {                    SnsIdType _key56;                    string _val57;                    _key56 = (SnsIdType)iprot.ReadI32();                    _val57 = iprot.ReadString();                    SnsAccounts[_key56] = _val57;                  }                  iprot.ReadMapEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 43:              if (field.Type == TType.Bool) {                PhoneRegistration = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 44:              if (field.Type == TType.I32) {                EmailConfirmationStatus = (EmailConfirmationStatus)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 50:              if (field.Type == TType.String) {                PreferenceLocale = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 60:              if (field.Type == TType.Map) {                {                  CustomModes = new Dictionary<CustomMode' string>();                  TMap _map58 = iprot.ReadMapBegin();                  for( int _i59 = 0; _i59 < _map58.Count; ++_i59)                  {                    CustomMode _key60;                    string _val61;                    _key60 = (CustomMode)iprot.ReadI32();                    _val61 = iprot.ReadString();                    CustomModes[_key60] = _val61;                  }                  iprot.ReadMapEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,Settings,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 10:              if (field.Type == TType.Bool) {                NotificationEnable = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.I64) {                NotificationMuteExpiration = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.Bool) {                NotificationNewMessage = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 13:              if (field.Type == TType.Bool) {                NotificationGroupInvitation = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 14:              if (field.Type == TType.Bool) {                NotificationShowMessage = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 15:              if (field.Type == TType.Bool) {                NotificationIncomingCall = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 16:              if (field.Type == TType.String) {                NotificationSoundMessage = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 17:              if (field.Type == TType.String) {                NotificationSoundGroup = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 18:              if (field.Type == TType.Bool) {                NotificationDisabledWithSub = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 20:              if (field.Type == TType.Bool) {                PrivacySyncContacts = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 21:              if (field.Type == TType.Bool) {                PrivacySearchByPhoneNumber = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 22:              if (field.Type == TType.Bool) {                PrivacySearchByUserid = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 23:              if (field.Type == TType.Bool) {                PrivacySearchByEmail = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 24:              if (field.Type == TType.Bool) {                PrivacyAllowSecondaryDeviceLogin = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 25:              if (field.Type == TType.Bool) {                PrivacyProfileImagePostToMyhome = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 26:              if (field.Type == TType.Bool) {                PrivacyReceiveMessagesFromNotFriend = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 30:              if (field.Type == TType.String) {                ContactMyTicket = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 40:              if (field.Type == TType.I32) {                IdentityProvider = (IdentityProvider)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 41:              if (field.Type == TType.String) {                IdentityIdentifier = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 42:              if (field.Type == TType.Map) {                {                  SnsAccounts = new Dictionary<SnsIdType' string>();                  TMap _map54 = iprot.ReadMapBegin();                  for( int _i55 = 0; _i55 < _map54.Count; ++_i55)                  {                    SnsIdType _key56;                    string _val57;                    _key56 = (SnsIdType)iprot.ReadI32();                    _val57 = iprot.ReadString();                    SnsAccounts[_key56] = _val57;                  }                  iprot.ReadMapEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 43:              if (field.Type == TType.Bool) {                PhoneRegistration = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 44:              if (field.Type == TType.I32) {                EmailConfirmationStatus = (EmailConfirmationStatus)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 50:              if (field.Type == TType.String) {                PreferenceLocale = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 60:              if (field.Type == TType.Map) {                {                  CustomModes = new Dictionary<CustomMode' string>();                  TMap _map58 = iprot.ReadMapBegin();                  for( int _i59 = 0; _i59 < _map58.Count; ++_i59)                  {                    CustomMode _key60;                    string _val61;                    _key60 = (CustomMode)iprot.ReadI32();                    _val61 = iprot.ReadString();                    CustomModes[_key60] = _val61;                  }                  iprot.ReadMapEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,Settings,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 10:              if (field.Type == TType.Bool) {                NotificationEnable = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.I64) {                NotificationMuteExpiration = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.Bool) {                NotificationNewMessage = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 13:              if (field.Type == TType.Bool) {                NotificationGroupInvitation = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 14:              if (field.Type == TType.Bool) {                NotificationShowMessage = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 15:              if (field.Type == TType.Bool) {                NotificationIncomingCall = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 16:              if (field.Type == TType.String) {                NotificationSoundMessage = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 17:              if (field.Type == TType.String) {                NotificationSoundGroup = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 18:              if (field.Type == TType.Bool) {                NotificationDisabledWithSub = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 20:              if (field.Type == TType.Bool) {                PrivacySyncContacts = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 21:              if (field.Type == TType.Bool) {                PrivacySearchByPhoneNumber = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 22:              if (field.Type == TType.Bool) {                PrivacySearchByUserid = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 23:              if (field.Type == TType.Bool) {                PrivacySearchByEmail = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 24:              if (field.Type == TType.Bool) {                PrivacyAllowSecondaryDeviceLogin = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 25:              if (field.Type == TType.Bool) {                PrivacyProfileImagePostToMyhome = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 26:              if (field.Type == TType.Bool) {                PrivacyReceiveMessagesFromNotFriend = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 30:              if (field.Type == TType.String) {                ContactMyTicket = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 40:              if (field.Type == TType.I32) {                IdentityProvider = (IdentityProvider)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 41:              if (field.Type == TType.String) {                IdentityIdentifier = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 42:              if (field.Type == TType.Map) {                {                  SnsAccounts = new Dictionary<SnsIdType' string>();                  TMap _map54 = iprot.ReadMapBegin();                  for( int _i55 = 0; _i55 < _map54.Count; ++_i55)                  {                    SnsIdType _key56;                    string _val57;                    _key56 = (SnsIdType)iprot.ReadI32();                    _val57 = iprot.ReadString();                    SnsAccounts[_key56] = _val57;                  }                  iprot.ReadMapEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 43:              if (field.Type == TType.Bool) {                PhoneRegistration = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 44:              if (field.Type == TType.I32) {                EmailConfirmationStatus = (EmailConfirmationStatus)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 50:              if (field.Type == TType.String) {                PreferenceLocale = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 60:              if (field.Type == TType.Map) {                {                  CustomModes = new Dictionary<CustomMode' string>();                  TMap _map58 = iprot.ReadMapBegin();                  for( int _i59 = 0; _i59 < _map58.Count; ++_i59)                  {                    CustomMode _key60;                    string _val61;                    _key60 = (CustomMode)iprot.ReadI32();                    _val61 = iprot.ReadString();                    CustomModes[_key60] = _val61;                  }                  iprot.ReadMapEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,Settings,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 10:              if (field.Type == TType.Bool) {                NotificationEnable = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.I64) {                NotificationMuteExpiration = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.Bool) {                NotificationNewMessage = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 13:              if (field.Type == TType.Bool) {                NotificationGroupInvitation = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 14:              if (field.Type == TType.Bool) {                NotificationShowMessage = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 15:              if (field.Type == TType.Bool) {                NotificationIncomingCall = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 16:              if (field.Type == TType.String) {                NotificationSoundMessage = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 17:              if (field.Type == TType.String) {                NotificationSoundGroup = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 18:              if (field.Type == TType.Bool) {                NotificationDisabledWithSub = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 20:              if (field.Type == TType.Bool) {                PrivacySyncContacts = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 21:              if (field.Type == TType.Bool) {                PrivacySearchByPhoneNumber = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 22:              if (field.Type == TType.Bool) {                PrivacySearchByUserid = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 23:              if (field.Type == TType.Bool) {                PrivacySearchByEmail = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 24:              if (field.Type == TType.Bool) {                PrivacyAllowSecondaryDeviceLogin = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 25:              if (field.Type == TType.Bool) {                PrivacyProfileImagePostToMyhome = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 26:              if (field.Type == TType.Bool) {                PrivacyReceiveMessagesFromNotFriend = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 30:              if (field.Type == TType.String) {                ContactMyTicket = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 40:              if (field.Type == TType.I32) {                IdentityProvider = (IdentityProvider)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 41:              if (field.Type == TType.String) {                IdentityIdentifier = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 42:              if (field.Type == TType.Map) {                {                  SnsAccounts = new Dictionary<SnsIdType' string>();                  TMap _map54 = iprot.ReadMapBegin();                  for( int _i55 = 0; _i55 < _map54.Count; ++_i55)                  {                    SnsIdType _key56;                    string _val57;                    _key56 = (SnsIdType)iprot.ReadI32();                    _val57 = iprot.ReadString();                    SnsAccounts[_key56] = _val57;                  }                  iprot.ReadMapEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 43:              if (field.Type == TType.Bool) {                PhoneRegistration = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 44:              if (field.Type == TType.I32) {                EmailConfirmationStatus = (EmailConfirmationStatus)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 50:              if (field.Type == TType.String) {                PreferenceLocale = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 60:              if (field.Type == TType.Map) {                {                  CustomModes = new Dictionary<CustomMode' string>();                  TMap _map58 = iprot.ReadMapBegin();                  for( int _i59 = 0; _i59 < _map58.Count; ++_i59)                  {                    CustomMode _key60;                    string _val61;                    _key60 = (CustomMode)iprot.ReadI32();                    _val61 = iprot.ReadString();                    CustomModes[_key60] = _val61;                  }                  iprot.ReadMapEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,Settings,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 10:              if (field.Type == TType.Bool) {                NotificationEnable = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.I64) {                NotificationMuteExpiration = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.Bool) {                NotificationNewMessage = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 13:              if (field.Type == TType.Bool) {                NotificationGroupInvitation = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 14:              if (field.Type == TType.Bool) {                NotificationShowMessage = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 15:              if (field.Type == TType.Bool) {                NotificationIncomingCall = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 16:              if (field.Type == TType.String) {                NotificationSoundMessage = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 17:              if (field.Type == TType.String) {                NotificationSoundGroup = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 18:              if (field.Type == TType.Bool) {                NotificationDisabledWithSub = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 20:              if (field.Type == TType.Bool) {                PrivacySyncContacts = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 21:              if (field.Type == TType.Bool) {                PrivacySearchByPhoneNumber = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 22:              if (field.Type == TType.Bool) {                PrivacySearchByUserid = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 23:              if (field.Type == TType.Bool) {                PrivacySearchByEmail = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 24:              if (field.Type == TType.Bool) {                PrivacyAllowSecondaryDeviceLogin = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 25:              if (field.Type == TType.Bool) {                PrivacyProfileImagePostToMyhome = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 26:              if (field.Type == TType.Bool) {                PrivacyReceiveMessagesFromNotFriend = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 30:              if (field.Type == TType.String) {                ContactMyTicket = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 40:              if (field.Type == TType.I32) {                IdentityProvider = (IdentityProvider)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 41:              if (field.Type == TType.String) {                IdentityIdentifier = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 42:              if (field.Type == TType.Map) {                {                  SnsAccounts = new Dictionary<SnsIdType' string>();                  TMap _map54 = iprot.ReadMapBegin();                  for( int _i55 = 0; _i55 < _map54.Count; ++_i55)                  {                    SnsIdType _key56;                    string _val57;                    _key56 = (SnsIdType)iprot.ReadI32();                    _val57 = iprot.ReadString();                    SnsAccounts[_key56] = _val57;                  }                  iprot.ReadMapEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 43:              if (field.Type == TType.Bool) {                PhoneRegistration = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 44:              if (field.Type == TType.I32) {                EmailConfirmationStatus = (EmailConfirmationStatus)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 50:              if (field.Type == TType.String) {                PreferenceLocale = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 60:              if (field.Type == TType.Map) {                {                  CustomModes = new Dictionary<CustomMode' string>();                  TMap _map58 = iprot.ReadMapBegin();                  for( int _i59 = 0; _i59 < _map58.Count; ++_i59)                  {                    CustomMode _key60;                    string _val61;                    _key60 = (CustomMode)iprot.ReadI32();                    _val61 = iprot.ReadString();                    CustomModes[_key60] = _val61;                  }                  iprot.ReadMapEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,Settings,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 10:              if (field.Type == TType.Bool) {                NotificationEnable = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.I64) {                NotificationMuteExpiration = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.Bool) {                NotificationNewMessage = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 13:              if (field.Type == TType.Bool) {                NotificationGroupInvitation = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 14:              if (field.Type == TType.Bool) {                NotificationShowMessage = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 15:              if (field.Type == TType.Bool) {                NotificationIncomingCall = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 16:              if (field.Type == TType.String) {                NotificationSoundMessage = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 17:              if (field.Type == TType.String) {                NotificationSoundGroup = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 18:              if (field.Type == TType.Bool) {                NotificationDisabledWithSub = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 20:              if (field.Type == TType.Bool) {                PrivacySyncContacts = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 21:              if (field.Type == TType.Bool) {                PrivacySearchByPhoneNumber = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 22:              if (field.Type == TType.Bool) {                PrivacySearchByUserid = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 23:              if (field.Type == TType.Bool) {                PrivacySearchByEmail = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 24:              if (field.Type == TType.Bool) {                PrivacyAllowSecondaryDeviceLogin = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 25:              if (field.Type == TType.Bool) {                PrivacyProfileImagePostToMyhome = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 26:              if (field.Type == TType.Bool) {                PrivacyReceiveMessagesFromNotFriend = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 30:              if (field.Type == TType.String) {                ContactMyTicket = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 40:              if (field.Type == TType.I32) {                IdentityProvider = (IdentityProvider)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 41:              if (field.Type == TType.String) {                IdentityIdentifier = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 42:              if (field.Type == TType.Map) {                {                  SnsAccounts = new Dictionary<SnsIdType' string>();                  TMap _map54 = iprot.ReadMapBegin();                  for( int _i55 = 0; _i55 < _map54.Count; ++_i55)                  {                    SnsIdType _key56;                    string _val57;                    _key56 = (SnsIdType)iprot.ReadI32();                    _val57 = iprot.ReadString();                    SnsAccounts[_key56] = _val57;                  }                  iprot.ReadMapEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 43:              if (field.Type == TType.Bool) {                PhoneRegistration = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 44:              if (field.Type == TType.I32) {                EmailConfirmationStatus = (EmailConfirmationStatus)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 50:              if (field.Type == TType.String) {                PreferenceLocale = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 60:              if (field.Type == TType.Map) {                {                  CustomModes = new Dictionary<CustomMode' string>();                  TMap _map58 = iprot.ReadMapBegin();                  for( int _i59 = 0; _i59 < _map58.Count; ++_i59)                  {                    CustomMode _key60;                    string _val61;                    _key60 = (CustomMode)iprot.ReadI32();                    _val61 = iprot.ReadString();                    CustomModes[_key60] = _val61;                  }                  iprot.ReadMapEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,Settings,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 10:              if (field.Type == TType.Bool) {                NotificationEnable = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.I64) {                NotificationMuteExpiration = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.Bool) {                NotificationNewMessage = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 13:              if (field.Type == TType.Bool) {                NotificationGroupInvitation = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 14:              if (field.Type == TType.Bool) {                NotificationShowMessage = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 15:              if (field.Type == TType.Bool) {                NotificationIncomingCall = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 16:              if (field.Type == TType.String) {                NotificationSoundMessage = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 17:              if (field.Type == TType.String) {                NotificationSoundGroup = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 18:              if (field.Type == TType.Bool) {                NotificationDisabledWithSub = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 20:              if (field.Type == TType.Bool) {                PrivacySyncContacts = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 21:              if (field.Type == TType.Bool) {                PrivacySearchByPhoneNumber = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 22:              if (field.Type == TType.Bool) {                PrivacySearchByUserid = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 23:              if (field.Type == TType.Bool) {                PrivacySearchByEmail = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 24:              if (field.Type == TType.Bool) {                PrivacyAllowSecondaryDeviceLogin = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 25:              if (field.Type == TType.Bool) {                PrivacyProfileImagePostToMyhome = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 26:              if (field.Type == TType.Bool) {                PrivacyReceiveMessagesFromNotFriend = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 30:              if (field.Type == TType.String) {                ContactMyTicket = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 40:              if (field.Type == TType.I32) {                IdentityProvider = (IdentityProvider)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 41:              if (field.Type == TType.String) {                IdentityIdentifier = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 42:              if (field.Type == TType.Map) {                {                  SnsAccounts = new Dictionary<SnsIdType' string>();                  TMap _map54 = iprot.ReadMapBegin();                  for( int _i55 = 0; _i55 < _map54.Count; ++_i55)                  {                    SnsIdType _key56;                    string _val57;                    _key56 = (SnsIdType)iprot.ReadI32();                    _val57 = iprot.ReadString();                    SnsAccounts[_key56] = _val57;                  }                  iprot.ReadMapEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 43:              if (field.Type == TType.Bool) {                PhoneRegistration = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 44:              if (field.Type == TType.I32) {                EmailConfirmationStatus = (EmailConfirmationStatus)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 50:              if (field.Type == TType.String) {                PreferenceLocale = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 60:              if (field.Type == TType.Map) {                {                  CustomModes = new Dictionary<CustomMode' string>();                  TMap _map58 = iprot.ReadMapBegin();                  for( int _i59 = 0; _i59 < _map58.Count; ++_i59)                  {                    CustomMode _key60;                    string _val61;                    _key60 = (CustomMode)iprot.ReadI32();                    _val61 = iprot.ReadString();                    CustomModes[_key60] = _val61;                  }                  iprot.ReadMapEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,Settings,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 10:              if (field.Type == TType.Bool) {                NotificationEnable = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.I64) {                NotificationMuteExpiration = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.Bool) {                NotificationNewMessage = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 13:              if (field.Type == TType.Bool) {                NotificationGroupInvitation = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 14:              if (field.Type == TType.Bool) {                NotificationShowMessage = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 15:              if (field.Type == TType.Bool) {                NotificationIncomingCall = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 16:              if (field.Type == TType.String) {                NotificationSoundMessage = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 17:              if (field.Type == TType.String) {                NotificationSoundGroup = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 18:              if (field.Type == TType.Bool) {                NotificationDisabledWithSub = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 20:              if (field.Type == TType.Bool) {                PrivacySyncContacts = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 21:              if (field.Type == TType.Bool) {                PrivacySearchByPhoneNumber = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 22:              if (field.Type == TType.Bool) {                PrivacySearchByUserid = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 23:              if (field.Type == TType.Bool) {                PrivacySearchByEmail = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 24:              if (field.Type == TType.Bool) {                PrivacyAllowSecondaryDeviceLogin = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 25:              if (field.Type == TType.Bool) {                PrivacyProfileImagePostToMyhome = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 26:              if (field.Type == TType.Bool) {                PrivacyReceiveMessagesFromNotFriend = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 30:              if (field.Type == TType.String) {                ContactMyTicket = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 40:              if (field.Type == TType.I32) {                IdentityProvider = (IdentityProvider)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 41:              if (field.Type == TType.String) {                IdentityIdentifier = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 42:              if (field.Type == TType.Map) {                {                  SnsAccounts = new Dictionary<SnsIdType' string>();                  TMap _map54 = iprot.ReadMapBegin();                  for( int _i55 = 0; _i55 < _map54.Count; ++_i55)                  {                    SnsIdType _key56;                    string _val57;                    _key56 = (SnsIdType)iprot.ReadI32();                    _val57 = iprot.ReadString();                    SnsAccounts[_key56] = _val57;                  }                  iprot.ReadMapEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 43:              if (field.Type == TType.Bool) {                PhoneRegistration = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 44:              if (field.Type == TType.I32) {                EmailConfirmationStatus = (EmailConfirmationStatus)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 50:              if (field.Type == TType.String) {                PreferenceLocale = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 60:              if (field.Type == TType.Map) {                {                  CustomModes = new Dictionary<CustomMode' string>();                  TMap _map58 = iprot.ReadMapBegin();                  for( int _i59 = 0; _i59 < _map58.Count; ++_i59)                  {                    CustomMode _key60;                    string _val61;                    _key60 = (CustomMode)iprot.ReadI32();                    _val61 = iprot.ReadString();                    CustomModes[_key60] = _val61;                  }                  iprot.ReadMapEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,Settings,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 10:              if (field.Type == TType.Bool) {                NotificationEnable = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.I64) {                NotificationMuteExpiration = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.Bool) {                NotificationNewMessage = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 13:              if (field.Type == TType.Bool) {                NotificationGroupInvitation = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 14:              if (field.Type == TType.Bool) {                NotificationShowMessage = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 15:              if (field.Type == TType.Bool) {                NotificationIncomingCall = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 16:              if (field.Type == TType.String) {                NotificationSoundMessage = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 17:              if (field.Type == TType.String) {                NotificationSoundGroup = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 18:              if (field.Type == TType.Bool) {                NotificationDisabledWithSub = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 20:              if (field.Type == TType.Bool) {                PrivacySyncContacts = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 21:              if (field.Type == TType.Bool) {                PrivacySearchByPhoneNumber = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 22:              if (field.Type == TType.Bool) {                PrivacySearchByUserid = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 23:              if (field.Type == TType.Bool) {                PrivacySearchByEmail = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 24:              if (field.Type == TType.Bool) {                PrivacyAllowSecondaryDeviceLogin = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 25:              if (field.Type == TType.Bool) {                PrivacyProfileImagePostToMyhome = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 26:              if (field.Type == TType.Bool) {                PrivacyReceiveMessagesFromNotFriend = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 30:              if (field.Type == TType.String) {                ContactMyTicket = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 40:              if (field.Type == TType.I32) {                IdentityProvider = (IdentityProvider)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 41:              if (field.Type == TType.String) {                IdentityIdentifier = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 42:              if (field.Type == TType.Map) {                {                  SnsAccounts = new Dictionary<SnsIdType' string>();                  TMap _map54 = iprot.ReadMapBegin();                  for( int _i55 = 0; _i55 < _map54.Count; ++_i55)                  {                    SnsIdType _key56;                    string _val57;                    _key56 = (SnsIdType)iprot.ReadI32();                    _val57 = iprot.ReadString();                    SnsAccounts[_key56] = _val57;                  }                  iprot.ReadMapEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 43:              if (field.Type == TType.Bool) {                PhoneRegistration = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 44:              if (field.Type == TType.I32) {                EmailConfirmationStatus = (EmailConfirmationStatus)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 50:              if (field.Type == TType.String) {                PreferenceLocale = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 60:              if (field.Type == TType.Map) {                {                  CustomModes = new Dictionary<CustomMode' string>();                  TMap _map58 = iprot.ReadMapBegin();                  for( int _i59 = 0; _i59 < _map58.Count; ++_i59)                  {                    CustomMode _key60;                    string _val61;                    _key60 = (CustomMode)iprot.ReadI32();                    _val61 = iprot.ReadString();                    CustomModes[_key60] = _val61;                  }                  iprot.ReadMapEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,Settings,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 10:              if (field.Type == TType.Bool) {                NotificationEnable = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.I64) {                NotificationMuteExpiration = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.Bool) {                NotificationNewMessage = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 13:              if (field.Type == TType.Bool) {                NotificationGroupInvitation = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 14:              if (field.Type == TType.Bool) {                NotificationShowMessage = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 15:              if (field.Type == TType.Bool) {                NotificationIncomingCall = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 16:              if (field.Type == TType.String) {                NotificationSoundMessage = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 17:              if (field.Type == TType.String) {                NotificationSoundGroup = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 18:              if (field.Type == TType.Bool) {                NotificationDisabledWithSub = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 20:              if (field.Type == TType.Bool) {                PrivacySyncContacts = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 21:              if (field.Type == TType.Bool) {                PrivacySearchByPhoneNumber = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 22:              if (field.Type == TType.Bool) {                PrivacySearchByUserid = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 23:              if (field.Type == TType.Bool) {                PrivacySearchByEmail = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 24:              if (field.Type == TType.Bool) {                PrivacyAllowSecondaryDeviceLogin = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 25:              if (field.Type == TType.Bool) {                PrivacyProfileImagePostToMyhome = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 26:              if (field.Type == TType.Bool) {                PrivacyReceiveMessagesFromNotFriend = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 30:              if (field.Type == TType.String) {                ContactMyTicket = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 40:              if (field.Type == TType.I32) {                IdentityProvider = (IdentityProvider)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 41:              if (field.Type == TType.String) {                IdentityIdentifier = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 42:              if (field.Type == TType.Map) {                {                  SnsAccounts = new Dictionary<SnsIdType' string>();                  TMap _map54 = iprot.ReadMapBegin();                  for( int _i55 = 0; _i55 < _map54.Count; ++_i55)                  {                    SnsIdType _key56;                    string _val57;                    _key56 = (SnsIdType)iprot.ReadI32();                    _val57 = iprot.ReadString();                    SnsAccounts[_key56] = _val57;                  }                  iprot.ReadMapEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 43:              if (field.Type == TType.Bool) {                PhoneRegistration = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 44:              if (field.Type == TType.I32) {                EmailConfirmationStatus = (EmailConfirmationStatus)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 50:              if (field.Type == TType.String) {                PreferenceLocale = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 60:              if (field.Type == TType.Map) {                {                  CustomModes = new Dictionary<CustomMode' string>();                  TMap _map58 = iprot.ReadMapBegin();                  for( int _i59 = 0; _i59 < _map58.Count; ++_i59)                  {                    CustomMode _key60;                    string _val61;                    _key60 = (CustomMode)iprot.ReadI32();                    _val61 = iprot.ReadString();                    CustomModes[_key60] = _val61;                  }                  iprot.ReadMapEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,Settings,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 10:              if (field.Type == TType.Bool) {                NotificationEnable = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.I64) {                NotificationMuteExpiration = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.Bool) {                NotificationNewMessage = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 13:              if (field.Type == TType.Bool) {                NotificationGroupInvitation = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 14:              if (field.Type == TType.Bool) {                NotificationShowMessage = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 15:              if (field.Type == TType.Bool) {                NotificationIncomingCall = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 16:              if (field.Type == TType.String) {                NotificationSoundMessage = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 17:              if (field.Type == TType.String) {                NotificationSoundGroup = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 18:              if (field.Type == TType.Bool) {                NotificationDisabledWithSub = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 20:              if (field.Type == TType.Bool) {                PrivacySyncContacts = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 21:              if (field.Type == TType.Bool) {                PrivacySearchByPhoneNumber = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 22:              if (field.Type == TType.Bool) {                PrivacySearchByUserid = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 23:              if (field.Type == TType.Bool) {                PrivacySearchByEmail = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 24:              if (field.Type == TType.Bool) {                PrivacyAllowSecondaryDeviceLogin = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 25:              if (field.Type == TType.Bool) {                PrivacyProfileImagePostToMyhome = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 26:              if (field.Type == TType.Bool) {                PrivacyReceiveMessagesFromNotFriend = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 30:              if (field.Type == TType.String) {                ContactMyTicket = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 40:              if (field.Type == TType.I32) {                IdentityProvider = (IdentityProvider)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 41:              if (field.Type == TType.String) {                IdentityIdentifier = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 42:              if (field.Type == TType.Map) {                {                  SnsAccounts = new Dictionary<SnsIdType' string>();                  TMap _map54 = iprot.ReadMapBegin();                  for( int _i55 = 0; _i55 < _map54.Count; ++_i55)                  {                    SnsIdType _key56;                    string _val57;                    _key56 = (SnsIdType)iprot.ReadI32();                    _val57 = iprot.ReadString();                    SnsAccounts[_key56] = _val57;                  }                  iprot.ReadMapEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 43:              if (field.Type == TType.Bool) {                PhoneRegistration = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 44:              if (field.Type == TType.I32) {                EmailConfirmationStatus = (EmailConfirmationStatus)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 50:              if (field.Type == TType.String) {                PreferenceLocale = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 60:              if (field.Type == TType.Map) {                {                  CustomModes = new Dictionary<CustomMode' string>();                  TMap _map58 = iprot.ReadMapBegin();                  for( int _i59 = 0; _i59 < _map58.Count; ++_i59)                  {                    CustomMode _key60;                    string _val61;                    _key60 = (CustomMode)iprot.ReadI32();                    _val61 = iprot.ReadString();                    CustomModes[_key60] = _val61;                  }                  iprot.ReadMapEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,Settings,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 10:              if (field.Type == TType.Bool) {                NotificationEnable = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.I64) {                NotificationMuteExpiration = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.Bool) {                NotificationNewMessage = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 13:              if (field.Type == TType.Bool) {                NotificationGroupInvitation = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 14:              if (field.Type == TType.Bool) {                NotificationShowMessage = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 15:              if (field.Type == TType.Bool) {                NotificationIncomingCall = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 16:              if (field.Type == TType.String) {                NotificationSoundMessage = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 17:              if (field.Type == TType.String) {                NotificationSoundGroup = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 18:              if (field.Type == TType.Bool) {                NotificationDisabledWithSub = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 20:              if (field.Type == TType.Bool) {                PrivacySyncContacts = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 21:              if (field.Type == TType.Bool) {                PrivacySearchByPhoneNumber = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 22:              if (field.Type == TType.Bool) {                PrivacySearchByUserid = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 23:              if (field.Type == TType.Bool) {                PrivacySearchByEmail = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 24:              if (field.Type == TType.Bool) {                PrivacyAllowSecondaryDeviceLogin = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 25:              if (field.Type == TType.Bool) {                PrivacyProfileImagePostToMyhome = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 26:              if (field.Type == TType.Bool) {                PrivacyReceiveMessagesFromNotFriend = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 30:              if (field.Type == TType.String) {                ContactMyTicket = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 40:              if (field.Type == TType.I32) {                IdentityProvider = (IdentityProvider)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 41:              if (field.Type == TType.String) {                IdentityIdentifier = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 42:              if (field.Type == TType.Map) {                {                  SnsAccounts = new Dictionary<SnsIdType' string>();                  TMap _map54 = iprot.ReadMapBegin();                  for( int _i55 = 0; _i55 < _map54.Count; ++_i55)                  {                    SnsIdType _key56;                    string _val57;                    _key56 = (SnsIdType)iprot.ReadI32();                    _val57 = iprot.ReadString();                    SnsAccounts[_key56] = _val57;                  }                  iprot.ReadMapEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 43:              if (field.Type == TType.Bool) {                PhoneRegistration = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 44:              if (field.Type == TType.I32) {                EmailConfirmationStatus = (EmailConfirmationStatus)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 50:              if (field.Type == TType.String) {                PreferenceLocale = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 60:              if (field.Type == TType.Map) {                {                  CustomModes = new Dictionary<CustomMode' string>();                  TMap _map58 = iprot.ReadMapBegin();                  for( int _i59 = 0; _i59 < _map58.Count; ++_i59)                  {                    CustomMode _key60;                    string _val61;                    _key60 = (CustomMode)iprot.ReadI32();                    _val61 = iprot.ReadString();                    CustomModes[_key60] = _val61;                  }                  iprot.ReadMapEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,Settings,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 10:              if (field.Type == TType.Bool) {                NotificationEnable = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.I64) {                NotificationMuteExpiration = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.Bool) {                NotificationNewMessage = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 13:              if (field.Type == TType.Bool) {                NotificationGroupInvitation = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 14:              if (field.Type == TType.Bool) {                NotificationShowMessage = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 15:              if (field.Type == TType.Bool) {                NotificationIncomingCall = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 16:              if (field.Type == TType.String) {                NotificationSoundMessage = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 17:              if (field.Type == TType.String) {                NotificationSoundGroup = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 18:              if (field.Type == TType.Bool) {                NotificationDisabledWithSub = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 20:              if (field.Type == TType.Bool) {                PrivacySyncContacts = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 21:              if (field.Type == TType.Bool) {                PrivacySearchByPhoneNumber = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 22:              if (field.Type == TType.Bool) {                PrivacySearchByUserid = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 23:              if (field.Type == TType.Bool) {                PrivacySearchByEmail = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 24:              if (field.Type == TType.Bool) {                PrivacyAllowSecondaryDeviceLogin = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 25:              if (field.Type == TType.Bool) {                PrivacyProfileImagePostToMyhome = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 26:              if (field.Type == TType.Bool) {                PrivacyReceiveMessagesFromNotFriend = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 30:              if (field.Type == TType.String) {                ContactMyTicket = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 40:              if (field.Type == TType.I32) {                IdentityProvider = (IdentityProvider)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 41:              if (field.Type == TType.String) {                IdentityIdentifier = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 42:              if (field.Type == TType.Map) {                {                  SnsAccounts = new Dictionary<SnsIdType' string>();                  TMap _map54 = iprot.ReadMapBegin();                  for( int _i55 = 0; _i55 < _map54.Count; ++_i55)                  {                    SnsIdType _key56;                    string _val57;                    _key56 = (SnsIdType)iprot.ReadI32();                    _val57 = iprot.ReadString();                    SnsAccounts[_key56] = _val57;                  }                  iprot.ReadMapEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 43:              if (field.Type == TType.Bool) {                PhoneRegistration = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 44:              if (field.Type == TType.I32) {                EmailConfirmationStatus = (EmailConfirmationStatus)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 50:              if (field.Type == TType.String) {                PreferenceLocale = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 60:              if (field.Type == TType.Map) {                {                  CustomModes = new Dictionary<CustomMode' string>();                  TMap _map58 = iprot.ReadMapBegin();                  for( int _i59 = 0; _i59 < _map58.Count; ++_i59)                  {                    CustomMode _key60;                    string _val61;                    _key60 = (CustomMode)iprot.ReadI32();                    _val61 = iprot.ReadString();                    CustomModes[_key60] = _val61;                  }                  iprot.ReadMapEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,Settings,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 10:              if (field.Type == TType.Bool) {                NotificationEnable = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.I64) {                NotificationMuteExpiration = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.Bool) {                NotificationNewMessage = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 13:              if (field.Type == TType.Bool) {                NotificationGroupInvitation = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 14:              if (field.Type == TType.Bool) {                NotificationShowMessage = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 15:              if (field.Type == TType.Bool) {                NotificationIncomingCall = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 16:              if (field.Type == TType.String) {                NotificationSoundMessage = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 17:              if (field.Type == TType.String) {                NotificationSoundGroup = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 18:              if (field.Type == TType.Bool) {                NotificationDisabledWithSub = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 20:              if (field.Type == TType.Bool) {                PrivacySyncContacts = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 21:              if (field.Type == TType.Bool) {                PrivacySearchByPhoneNumber = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 22:              if (field.Type == TType.Bool) {                PrivacySearchByUserid = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 23:              if (field.Type == TType.Bool) {                PrivacySearchByEmail = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 24:              if (field.Type == TType.Bool) {                PrivacyAllowSecondaryDeviceLogin = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 25:              if (field.Type == TType.Bool) {                PrivacyProfileImagePostToMyhome = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 26:              if (field.Type == TType.Bool) {                PrivacyReceiveMessagesFromNotFriend = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 30:              if (field.Type == TType.String) {                ContactMyTicket = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 40:              if (field.Type == TType.I32) {                IdentityProvider = (IdentityProvider)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 41:              if (field.Type == TType.String) {                IdentityIdentifier = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 42:              if (field.Type == TType.Map) {                {                  SnsAccounts = new Dictionary<SnsIdType' string>();                  TMap _map54 = iprot.ReadMapBegin();                  for( int _i55 = 0; _i55 < _map54.Count; ++_i55)                  {                    SnsIdType _key56;                    string _val57;                    _key56 = (SnsIdType)iprot.ReadI32();                    _val57 = iprot.ReadString();                    SnsAccounts[_key56] = _val57;                  }                  iprot.ReadMapEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 43:              if (field.Type == TType.Bool) {                PhoneRegistration = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 44:              if (field.Type == TType.I32) {                EmailConfirmationStatus = (EmailConfirmationStatus)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 50:              if (field.Type == TType.String) {                PreferenceLocale = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 60:              if (field.Type == TType.Map) {                {                  CustomModes = new Dictionary<CustomMode' string>();                  TMap _map58 = iprot.ReadMapBegin();                  for( int _i59 = 0; _i59 < _map58.Count; ++_i59)                  {                    CustomMode _key60;                    string _val61;                    _key60 = (CustomMode)iprot.ReadI32();                    _val61 = iprot.ReadString();                    CustomModes[_key60] = _val61;                  }                  iprot.ReadMapEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,Settings,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 10:              if (field.Type == TType.Bool) {                NotificationEnable = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.I64) {                NotificationMuteExpiration = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.Bool) {                NotificationNewMessage = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 13:              if (field.Type == TType.Bool) {                NotificationGroupInvitation = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 14:              if (field.Type == TType.Bool) {                NotificationShowMessage = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 15:              if (field.Type == TType.Bool) {                NotificationIncomingCall = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 16:              if (field.Type == TType.String) {                NotificationSoundMessage = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 17:              if (field.Type == TType.String) {                NotificationSoundGroup = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 18:              if (field.Type == TType.Bool) {                NotificationDisabledWithSub = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 20:              if (field.Type == TType.Bool) {                PrivacySyncContacts = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 21:              if (field.Type == TType.Bool) {                PrivacySearchByPhoneNumber = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 22:              if (field.Type == TType.Bool) {                PrivacySearchByUserid = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 23:              if (field.Type == TType.Bool) {                PrivacySearchByEmail = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 24:              if (field.Type == TType.Bool) {                PrivacyAllowSecondaryDeviceLogin = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 25:              if (field.Type == TType.Bool) {                PrivacyProfileImagePostToMyhome = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 26:              if (field.Type == TType.Bool) {                PrivacyReceiveMessagesFromNotFriend = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 30:              if (field.Type == TType.String) {                ContactMyTicket = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 40:              if (field.Type == TType.I32) {                IdentityProvider = (IdentityProvider)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 41:              if (field.Type == TType.String) {                IdentityIdentifier = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 42:              if (field.Type == TType.Map) {                {                  SnsAccounts = new Dictionary<SnsIdType' string>();                  TMap _map54 = iprot.ReadMapBegin();                  for( int _i55 = 0; _i55 < _map54.Count; ++_i55)                  {                    SnsIdType _key56;                    string _val57;                    _key56 = (SnsIdType)iprot.ReadI32();                    _val57 = iprot.ReadString();                    SnsAccounts[_key56] = _val57;                  }                  iprot.ReadMapEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 43:              if (field.Type == TType.Bool) {                PhoneRegistration = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 44:              if (field.Type == TType.I32) {                EmailConfirmationStatus = (EmailConfirmationStatus)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 50:              if (field.Type == TType.String) {                PreferenceLocale = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 60:              if (field.Type == TType.Map) {                {                  CustomModes = new Dictionary<CustomMode' string>();                  TMap _map58 = iprot.ReadMapBegin();                  for( int _i59 = 0; _i59 < _map58.Count; ++_i59)                  {                    CustomMode _key60;                    string _val61;                    _key60 = (CustomMode)iprot.ReadI32();                    _val61 = iprot.ReadString();                    CustomModes[_key60] = _val61;                  }                  iprot.ReadMapEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,Settings,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 10:              if (field.Type == TType.Bool) {                NotificationEnable = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.I64) {                NotificationMuteExpiration = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.Bool) {                NotificationNewMessage = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 13:              if (field.Type == TType.Bool) {                NotificationGroupInvitation = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 14:              if (field.Type == TType.Bool) {                NotificationShowMessage = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 15:              if (field.Type == TType.Bool) {                NotificationIncomingCall = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 16:              if (field.Type == TType.String) {                NotificationSoundMessage = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 17:              if (field.Type == TType.String) {                NotificationSoundGroup = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 18:              if (field.Type == TType.Bool) {                NotificationDisabledWithSub = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 20:              if (field.Type == TType.Bool) {                PrivacySyncContacts = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 21:              if (field.Type == TType.Bool) {                PrivacySearchByPhoneNumber = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 22:              if (field.Type == TType.Bool) {                PrivacySearchByUserid = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 23:              if (field.Type == TType.Bool) {                PrivacySearchByEmail = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 24:              if (field.Type == TType.Bool) {                PrivacyAllowSecondaryDeviceLogin = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 25:              if (field.Type == TType.Bool) {                PrivacyProfileImagePostToMyhome = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 26:              if (field.Type == TType.Bool) {                PrivacyReceiveMessagesFromNotFriend = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 30:              if (field.Type == TType.String) {                ContactMyTicket = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 40:              if (field.Type == TType.I32) {                IdentityProvider = (IdentityProvider)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 41:              if (field.Type == TType.String) {                IdentityIdentifier = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 42:              if (field.Type == TType.Map) {                {                  SnsAccounts = new Dictionary<SnsIdType' string>();                  TMap _map54 = iprot.ReadMapBegin();                  for( int _i55 = 0; _i55 < _map54.Count; ++_i55)                  {                    SnsIdType _key56;                    string _val57;                    _key56 = (SnsIdType)iprot.ReadI32();                    _val57 = iprot.ReadString();                    SnsAccounts[_key56] = _val57;                  }                  iprot.ReadMapEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 43:              if (field.Type == TType.Bool) {                PhoneRegistration = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 44:              if (field.Type == TType.I32) {                EmailConfirmationStatus = (EmailConfirmationStatus)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 50:              if (field.Type == TType.String) {                PreferenceLocale = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 60:              if (field.Type == TType.Map) {                {                  CustomModes = new Dictionary<CustomMode' string>();                  TMap _map58 = iprot.ReadMapBegin();                  for( int _i59 = 0; _i59 < _map58.Count; ++_i59)                  {                    CustomMode _key60;                    string _val61;                    _key60 = (CustomMode)iprot.ReadI32();                    _val61 = iprot.ReadString();                    CustomModes[_key60] = _val61;                  }                  iprot.ReadMapEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,Settings,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 10:              if (field.Type == TType.Bool) {                NotificationEnable = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.I64) {                NotificationMuteExpiration = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.Bool) {                NotificationNewMessage = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 13:              if (field.Type == TType.Bool) {                NotificationGroupInvitation = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 14:              if (field.Type == TType.Bool) {                NotificationShowMessage = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 15:              if (field.Type == TType.Bool) {                NotificationIncomingCall = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 16:              if (field.Type == TType.String) {                NotificationSoundMessage = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 17:              if (field.Type == TType.String) {                NotificationSoundGroup = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 18:              if (field.Type == TType.Bool) {                NotificationDisabledWithSub = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 20:              if (field.Type == TType.Bool) {                PrivacySyncContacts = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 21:              if (field.Type == TType.Bool) {                PrivacySearchByPhoneNumber = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 22:              if (field.Type == TType.Bool) {                PrivacySearchByUserid = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 23:              if (field.Type == TType.Bool) {                PrivacySearchByEmail = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 24:              if (field.Type == TType.Bool) {                PrivacyAllowSecondaryDeviceLogin = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 25:              if (field.Type == TType.Bool) {                PrivacyProfileImagePostToMyhome = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 26:              if (field.Type == TType.Bool) {                PrivacyReceiveMessagesFromNotFriend = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 30:              if (field.Type == TType.String) {                ContactMyTicket = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 40:              if (field.Type == TType.I32) {                IdentityProvider = (IdentityProvider)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 41:              if (field.Type == TType.String) {                IdentityIdentifier = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 42:              if (field.Type == TType.Map) {                {                  SnsAccounts = new Dictionary<SnsIdType' string>();                  TMap _map54 = iprot.ReadMapBegin();                  for( int _i55 = 0; _i55 < _map54.Count; ++_i55)                  {                    SnsIdType _key56;                    string _val57;                    _key56 = (SnsIdType)iprot.ReadI32();                    _val57 = iprot.ReadString();                    SnsAccounts[_key56] = _val57;                  }                  iprot.ReadMapEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 43:              if (field.Type == TType.Bool) {                PhoneRegistration = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 44:              if (field.Type == TType.I32) {                EmailConfirmationStatus = (EmailConfirmationStatus)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 50:              if (field.Type == TType.String) {                PreferenceLocale = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 60:              if (field.Type == TType.Map) {                {                  CustomModes = new Dictionary<CustomMode' string>();                  TMap _map58 = iprot.ReadMapBegin();                  for( int _i59 = 0; _i59 < _map58.Count; ++_i59)                  {                    CustomMode _key60;                    string _val61;                    _key60 = (CustomMode)iprot.ReadI32();                    _val61 = iprot.ReadString();                    CustomModes[_key60] = _val61;                  }                  iprot.ReadMapEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,Settings,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 10:              if (field.Type == TType.Bool) {                NotificationEnable = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.I64) {                NotificationMuteExpiration = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.Bool) {                NotificationNewMessage = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 13:              if (field.Type == TType.Bool) {                NotificationGroupInvitation = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 14:              if (field.Type == TType.Bool) {                NotificationShowMessage = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 15:              if (field.Type == TType.Bool) {                NotificationIncomingCall = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 16:              if (field.Type == TType.String) {                NotificationSoundMessage = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 17:              if (field.Type == TType.String) {                NotificationSoundGroup = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 18:              if (field.Type == TType.Bool) {                NotificationDisabledWithSub = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 20:              if (field.Type == TType.Bool) {                PrivacySyncContacts = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 21:              if (field.Type == TType.Bool) {                PrivacySearchByPhoneNumber = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 22:              if (field.Type == TType.Bool) {                PrivacySearchByUserid = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 23:              if (field.Type == TType.Bool) {                PrivacySearchByEmail = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 24:              if (field.Type == TType.Bool) {                PrivacyAllowSecondaryDeviceLogin = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 25:              if (field.Type == TType.Bool) {                PrivacyProfileImagePostToMyhome = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 26:              if (field.Type == TType.Bool) {                PrivacyReceiveMessagesFromNotFriend = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 30:              if (field.Type == TType.String) {                ContactMyTicket = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 40:              if (field.Type == TType.I32) {                IdentityProvider = (IdentityProvider)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 41:              if (field.Type == TType.String) {                IdentityIdentifier = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 42:              if (field.Type == TType.Map) {                {                  SnsAccounts = new Dictionary<SnsIdType' string>();                  TMap _map54 = iprot.ReadMapBegin();                  for( int _i55 = 0; _i55 < _map54.Count; ++_i55)                  {                    SnsIdType _key56;                    string _val57;                    _key56 = (SnsIdType)iprot.ReadI32();                    _val57 = iprot.ReadString();                    SnsAccounts[_key56] = _val57;                  }                  iprot.ReadMapEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 43:              if (field.Type == TType.Bool) {                PhoneRegistration = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 44:              if (field.Type == TType.I32) {                EmailConfirmationStatus = (EmailConfirmationStatus)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 50:              if (field.Type == TType.String) {                PreferenceLocale = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 60:              if (field.Type == TType.Map) {                {                  CustomModes = new Dictionary<CustomMode' string>();                  TMap _map58 = iprot.ReadMapBegin();                  for( int _i59 = 0; _i59 < _map58.Count; ++_i59)                  {                    CustomMode _key60;                    string _val61;                    _key60 = (CustomMode)iprot.ReadI32();                    _val61 = iprot.ReadString();                    CustomModes[_key60] = _val61;                  }                  iprot.ReadMapEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,Settings,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 10:              if (field.Type == TType.Bool) {                NotificationEnable = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.I64) {                NotificationMuteExpiration = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.Bool) {                NotificationNewMessage = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 13:              if (field.Type == TType.Bool) {                NotificationGroupInvitation = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 14:              if (field.Type == TType.Bool) {                NotificationShowMessage = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 15:              if (field.Type == TType.Bool) {                NotificationIncomingCall = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 16:              if (field.Type == TType.String) {                NotificationSoundMessage = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 17:              if (field.Type == TType.String) {                NotificationSoundGroup = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 18:              if (field.Type == TType.Bool) {                NotificationDisabledWithSub = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 20:              if (field.Type == TType.Bool) {                PrivacySyncContacts = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 21:              if (field.Type == TType.Bool) {                PrivacySearchByPhoneNumber = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 22:              if (field.Type == TType.Bool) {                PrivacySearchByUserid = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 23:              if (field.Type == TType.Bool) {                PrivacySearchByEmail = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 24:              if (field.Type == TType.Bool) {                PrivacyAllowSecondaryDeviceLogin = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 25:              if (field.Type == TType.Bool) {                PrivacyProfileImagePostToMyhome = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 26:              if (field.Type == TType.Bool) {                PrivacyReceiveMessagesFromNotFriend = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 30:              if (field.Type == TType.String) {                ContactMyTicket = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 40:              if (field.Type == TType.I32) {                IdentityProvider = (IdentityProvider)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 41:              if (field.Type == TType.String) {                IdentityIdentifier = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 42:              if (field.Type == TType.Map) {                {                  SnsAccounts = new Dictionary<SnsIdType' string>();                  TMap _map54 = iprot.ReadMapBegin();                  for( int _i55 = 0; _i55 < _map54.Count; ++_i55)                  {                    SnsIdType _key56;                    string _val57;                    _key56 = (SnsIdType)iprot.ReadI32();                    _val57 = iprot.ReadString();                    SnsAccounts[_key56] = _val57;                  }                  iprot.ReadMapEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 43:              if (field.Type == TType.Bool) {                PhoneRegistration = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 44:              if (field.Type == TType.I32) {                EmailConfirmationStatus = (EmailConfirmationStatus)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 50:              if (field.Type == TType.String) {                PreferenceLocale = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 60:              if (field.Type == TType.Map) {                {                  CustomModes = new Dictionary<CustomMode' string>();                  TMap _map58 = iprot.ReadMapBegin();                  for( int _i59 = 0; _i59 < _map58.Count; ++_i59)                  {                    CustomMode _key60;                    string _val61;                    _key60 = (CustomMode)iprot.ReadI32();                    _val61 = iprot.ReadString();                    CustomModes[_key60] = _val61;                  }                  iprot.ReadMapEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,Settings,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 10:              if (field.Type == TType.Bool) {                NotificationEnable = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.I64) {                NotificationMuteExpiration = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.Bool) {                NotificationNewMessage = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 13:              if (field.Type == TType.Bool) {                NotificationGroupInvitation = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 14:              if (field.Type == TType.Bool) {                NotificationShowMessage = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 15:              if (field.Type == TType.Bool) {                NotificationIncomingCall = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 16:              if (field.Type == TType.String) {                NotificationSoundMessage = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 17:              if (field.Type == TType.String) {                NotificationSoundGroup = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 18:              if (field.Type == TType.Bool) {                NotificationDisabledWithSub = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 20:              if (field.Type == TType.Bool) {                PrivacySyncContacts = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 21:              if (field.Type == TType.Bool) {                PrivacySearchByPhoneNumber = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 22:              if (field.Type == TType.Bool) {                PrivacySearchByUserid = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 23:              if (field.Type == TType.Bool) {                PrivacySearchByEmail = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 24:              if (field.Type == TType.Bool) {                PrivacyAllowSecondaryDeviceLogin = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 25:              if (field.Type == TType.Bool) {                PrivacyProfileImagePostToMyhome = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 26:              if (field.Type == TType.Bool) {                PrivacyReceiveMessagesFromNotFriend = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 30:              if (field.Type == TType.String) {                ContactMyTicket = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 40:              if (field.Type == TType.I32) {                IdentityProvider = (IdentityProvider)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 41:              if (field.Type == TType.String) {                IdentityIdentifier = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 42:              if (field.Type == TType.Map) {                {                  SnsAccounts = new Dictionary<SnsIdType' string>();                  TMap _map54 = iprot.ReadMapBegin();                  for( int _i55 = 0; _i55 < _map54.Count; ++_i55)                  {                    SnsIdType _key56;                    string _val57;                    _key56 = (SnsIdType)iprot.ReadI32();                    _val57 = iprot.ReadString();                    SnsAccounts[_key56] = _val57;                  }                  iprot.ReadMapEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 43:              if (field.Type == TType.Bool) {                PhoneRegistration = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 44:              if (field.Type == TType.I32) {                EmailConfirmationStatus = (EmailConfirmationStatus)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 50:              if (field.Type == TType.String) {                PreferenceLocale = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 60:              if (field.Type == TType.Map) {                {                  CustomModes = new Dictionary<CustomMode' string>();                  TMap _map58 = iprot.ReadMapBegin();                  for( int _i59 = 0; _i59 < _map58.Count; ++_i59)                  {                    CustomMode _key60;                    string _val61;                    _key60 = (CustomMode)iprot.ReadI32();                    _val61 = iprot.ReadString();                    CustomModes[_key60] = _val61;                  }                  iprot.ReadMapEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,Settings,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 10:              if (field.Type == TType.Bool) {                NotificationEnable = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.I64) {                NotificationMuteExpiration = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.Bool) {                NotificationNewMessage = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 13:              if (field.Type == TType.Bool) {                NotificationGroupInvitation = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 14:              if (field.Type == TType.Bool) {                NotificationShowMessage = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 15:              if (field.Type == TType.Bool) {                NotificationIncomingCall = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 16:              if (field.Type == TType.String) {                NotificationSoundMessage = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 17:              if (field.Type == TType.String) {                NotificationSoundGroup = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 18:              if (field.Type == TType.Bool) {                NotificationDisabledWithSub = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 20:              if (field.Type == TType.Bool) {                PrivacySyncContacts = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 21:              if (field.Type == TType.Bool) {                PrivacySearchByPhoneNumber = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 22:              if (field.Type == TType.Bool) {                PrivacySearchByUserid = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 23:              if (field.Type == TType.Bool) {                PrivacySearchByEmail = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 24:              if (field.Type == TType.Bool) {                PrivacyAllowSecondaryDeviceLogin = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 25:              if (field.Type == TType.Bool) {                PrivacyProfileImagePostToMyhome = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 26:              if (field.Type == TType.Bool) {                PrivacyReceiveMessagesFromNotFriend = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 30:              if (field.Type == TType.String) {                ContactMyTicket = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 40:              if (field.Type == TType.I32) {                IdentityProvider = (IdentityProvider)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 41:              if (field.Type == TType.String) {                IdentityIdentifier = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 42:              if (field.Type == TType.Map) {                {                  SnsAccounts = new Dictionary<SnsIdType' string>();                  TMap _map54 = iprot.ReadMapBegin();                  for( int _i55 = 0; _i55 < _map54.Count; ++_i55)                  {                    SnsIdType _key56;                    string _val57;                    _key56 = (SnsIdType)iprot.ReadI32();                    _val57 = iprot.ReadString();                    SnsAccounts[_key56] = _val57;                  }                  iprot.ReadMapEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 43:              if (field.Type == TType.Bool) {                PhoneRegistration = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 44:              if (field.Type == TType.I32) {                EmailConfirmationStatus = (EmailConfirmationStatus)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 50:              if (field.Type == TType.String) {                PreferenceLocale = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 60:              if (field.Type == TType.Map) {                {                  CustomModes = new Dictionary<CustomMode' string>();                  TMap _map58 = iprot.ReadMapBegin();                  for( int _i59 = 0; _i59 < _map58.Count; ++_i59)                  {                    CustomMode _key60;                    string _val61;                    _key60 = (CustomMode)iprot.ReadI32();                    _val61 = iprot.ReadString();                    CustomModes[_key60] = _val61;                  }                  iprot.ReadMapEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,Settings,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 10:              if (field.Type == TType.Bool) {                NotificationEnable = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.I64) {                NotificationMuteExpiration = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.Bool) {                NotificationNewMessage = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 13:              if (field.Type == TType.Bool) {                NotificationGroupInvitation = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 14:              if (field.Type == TType.Bool) {                NotificationShowMessage = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 15:              if (field.Type == TType.Bool) {                NotificationIncomingCall = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 16:              if (field.Type == TType.String) {                NotificationSoundMessage = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 17:              if (field.Type == TType.String) {                NotificationSoundGroup = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 18:              if (field.Type == TType.Bool) {                NotificationDisabledWithSub = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 20:              if (field.Type == TType.Bool) {                PrivacySyncContacts = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 21:              if (field.Type == TType.Bool) {                PrivacySearchByPhoneNumber = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 22:              if (field.Type == TType.Bool) {                PrivacySearchByUserid = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 23:              if (field.Type == TType.Bool) {                PrivacySearchByEmail = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 24:              if (field.Type == TType.Bool) {                PrivacyAllowSecondaryDeviceLogin = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 25:              if (field.Type == TType.Bool) {                PrivacyProfileImagePostToMyhome = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 26:              if (field.Type == TType.Bool) {                PrivacyReceiveMessagesFromNotFriend = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 30:              if (field.Type == TType.String) {                ContactMyTicket = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 40:              if (field.Type == TType.I32) {                IdentityProvider = (IdentityProvider)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 41:              if (field.Type == TType.String) {                IdentityIdentifier = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 42:              if (field.Type == TType.Map) {                {                  SnsAccounts = new Dictionary<SnsIdType' string>();                  TMap _map54 = iprot.ReadMapBegin();                  for( int _i55 = 0; _i55 < _map54.Count; ++_i55)                  {                    SnsIdType _key56;                    string _val57;                    _key56 = (SnsIdType)iprot.ReadI32();                    _val57 = iprot.ReadString();                    SnsAccounts[_key56] = _val57;                  }                  iprot.ReadMapEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 43:              if (field.Type == TType.Bool) {                PhoneRegistration = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 44:              if (field.Type == TType.I32) {                EmailConfirmationStatus = (EmailConfirmationStatus)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 50:              if (field.Type == TType.String) {                PreferenceLocale = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 60:              if (field.Type == TType.Map) {                {                  CustomModes = new Dictionary<CustomMode' string>();                  TMap _map58 = iprot.ReadMapBegin();                  for( int _i59 = 0; _i59 < _map58.Count; ++_i59)                  {                    CustomMode _key60;                    string _val61;                    _key60 = (CustomMode)iprot.ReadI32();                    _val61 = iprot.ReadString();                    CustomModes[_key60] = _val61;                  }                  iprot.ReadMapEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,Settings,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Write,The following statement contains a magic number: field.ID = 10;
Magic Number,LineSharp.Datatypes,Settings,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Write,The following statement contains a magic number: field.ID = 11;
Magic Number,LineSharp.Datatypes,Settings,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Write,The following statement contains a magic number: field.ID = 12;
Magic Number,LineSharp.Datatypes,Settings,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Write,The following statement contains a magic number: field.ID = 13;
Magic Number,LineSharp.Datatypes,Settings,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Write,The following statement contains a magic number: field.ID = 14;
Magic Number,LineSharp.Datatypes,Settings,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Write,The following statement contains a magic number: field.ID = 15;
Magic Number,LineSharp.Datatypes,Settings,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Write,The following statement contains a magic number: field.ID = 16;
Magic Number,LineSharp.Datatypes,Settings,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Write,The following statement contains a magic number: field.ID = 17;
Magic Number,LineSharp.Datatypes,Settings,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Write,The following statement contains a magic number: field.ID = 18;
Magic Number,LineSharp.Datatypes,Settings,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Write,The following statement contains a magic number: field.ID = 20;
Magic Number,LineSharp.Datatypes,Settings,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Write,The following statement contains a magic number: field.ID = 21;
Magic Number,LineSharp.Datatypes,Settings,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Write,The following statement contains a magic number: field.ID = 22;
Magic Number,LineSharp.Datatypes,Settings,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Write,The following statement contains a magic number: field.ID = 23;
Magic Number,LineSharp.Datatypes,Settings,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Write,The following statement contains a magic number: field.ID = 24;
Magic Number,LineSharp.Datatypes,Settings,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Write,The following statement contains a magic number: field.ID = 25;
Magic Number,LineSharp.Datatypes,Settings,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Write,The following statement contains a magic number: field.ID = 26;
Magic Number,LineSharp.Datatypes,Settings,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Write,The following statement contains a magic number: field.ID = 30;
Magic Number,LineSharp.Datatypes,Settings,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Write,The following statement contains a magic number: field.ID = 40;
Magic Number,LineSharp.Datatypes,Settings,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Write,The following statement contains a magic number: field.ID = 41;
Magic Number,LineSharp.Datatypes,Settings,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Write,The following statement contains a magic number: field.ID = 42;
Magic Number,LineSharp.Datatypes,Settings,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Write,The following statement contains a magic number: field.ID = 43;
Magic Number,LineSharp.Datatypes,Settings,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Write,The following statement contains a magic number: field.ID = 44;
Magic Number,LineSharp.Datatypes,Settings,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Write,The following statement contains a magic number: field.ID = 50;
Magic Number,LineSharp.Datatypes,Settings,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Settings.cs,Write,The following statement contains a magic number: field.ID = 60;
Magic Number,LineSharp.Datatypes,buyCoinProduct_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.Struct) {                  PaymentReservation = new PaymentReservation();                  PaymentReservation.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,buyCoinProduct_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,buyFreeProduct_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  ReceiverMid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  ProductId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.I32) {                  MessageTemplate = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  Language = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  Country = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.I64) {                  PackageId = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,buyFreeProduct_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  ReceiverMid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  ProductId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.I32) {                  MessageTemplate = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  Language = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  Country = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.I64) {                  PackageId = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,buyFreeProduct_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  ReceiverMid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  ProductId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.I32) {                  MessageTemplate = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  Language = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  Country = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.I64) {                  PackageId = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,buyFreeProduct_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  ReceiverMid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  ProductId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.I32) {                  MessageTemplate = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  Language = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  Country = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.I64) {                  PackageId = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,buyFreeProduct_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  ReceiverMid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  ProductId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.I32) {                  MessageTemplate = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  Language = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  Country = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.I64) {                  PackageId = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,buyFreeProduct_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  ReceiverMid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  ProductId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.I32) {                  MessageTemplate = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  Language = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  Country = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.I64) {                  PackageId = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,buyFreeProduct_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,buyFreeProduct_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,LineSharp.Datatypes,buyFreeProduct_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Write,The following statement contains a magic number: field.ID = 4;
Magic Number,LineSharp.Datatypes,buyFreeProduct_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Write,The following statement contains a magic number: field.ID = 5;
Magic Number,LineSharp.Datatypes,buyFreeProduct_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Write,The following statement contains a magic number: field.ID = 6;
Magic Number,LineSharp.Datatypes,buyFreeProduct_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Write,The following statement contains a magic number: field.ID = 7;
Magic Number,LineSharp.Datatypes,buyMustbuyProduct_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  ReceiverMid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  ProductId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.I32) {                  MessageTemplate = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  Language = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  Country = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.I64) {                  PackageId = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.String) {                  SerialNumber = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,buyMustbuyProduct_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  ReceiverMid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  ProductId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.I32) {                  MessageTemplate = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  Language = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  Country = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.I64) {                  PackageId = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.String) {                  SerialNumber = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,buyMustbuyProduct_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  ReceiverMid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  ProductId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.I32) {                  MessageTemplate = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  Language = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  Country = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.I64) {                  PackageId = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.String) {                  SerialNumber = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,buyMustbuyProduct_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  ReceiverMid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  ProductId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.I32) {                  MessageTemplate = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  Language = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  Country = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.I64) {                  PackageId = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.String) {                  SerialNumber = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,buyMustbuyProduct_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  ReceiverMid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  ProductId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.I32) {                  MessageTemplate = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  Language = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  Country = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.I64) {                  PackageId = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.String) {                  SerialNumber = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,buyMustbuyProduct_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  ReceiverMid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  ProductId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.I32) {                  MessageTemplate = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  Language = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  Country = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.I64) {                  PackageId = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.String) {                  SerialNumber = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,buyMustbuyProduct_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  ReceiverMid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  ProductId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.I32) {                  MessageTemplate = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  Language = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  Country = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.I64) {                  PackageId = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.String) {                  SerialNumber = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,buyMustbuyProduct_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,buyMustbuyProduct_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,LineSharp.Datatypes,buyMustbuyProduct_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Write,The following statement contains a magic number: field.ID = 4;
Magic Number,LineSharp.Datatypes,buyMustbuyProduct_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Write,The following statement contains a magic number: field.ID = 5;
Magic Number,LineSharp.Datatypes,buyMustbuyProduct_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Write,The following statement contains a magic number: field.ID = 6;
Magic Number,LineSharp.Datatypes,buyMustbuyProduct_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Write,The following statement contains a magic number: field.ID = 7;
Magic Number,LineSharp.Datatypes,buyMustbuyProduct_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Write,The following statement contains a magic number: field.ID = 8;
Magic Number,LineSharp.Datatypes,checkCanReceivePresent_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  RecipientMid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I64) {                  PackageId = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Language = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  Country = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,checkCanReceivePresent_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  RecipientMid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I64) {                  PackageId = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Language = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  Country = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,checkCanReceivePresent_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  RecipientMid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I64) {                  PackageId = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Language = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  Country = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,checkCanReceivePresent_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  RecipientMid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I64) {                  PackageId = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Language = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  Country = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,checkCanReceivePresent_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,checkCanReceivePresent_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,LineSharp.Datatypes,checkCanReceivePresent_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Write,The following statement contains a magic number: field.ID = 4;
Magic Number,LineSharp.Datatypes,checkCanReceivePresent_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Write,The following statement contains a magic number: field.ID = 5;
Magic Number,LineSharp.Datatypes,getActivePurchases_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.I64) {                  Start = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I32) {                  Size = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Language = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  Country = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,getActivePurchases_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.I64) {                  Start = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I32) {                  Size = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Language = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  Country = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,getActivePurchases_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.I64) {                  Start = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I32) {                  Size = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Language = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  Country = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,getActivePurchases_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.I64) {                  Start = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I32) {                  Size = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Language = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  Country = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,getActivePurchases_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,getActivePurchases_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,LineSharp.Datatypes,getActivePurchases_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Write,The following statement contains a magic number: field.ID = 4;
Magic Number,LineSharp.Datatypes,getActivePurchases_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Write,The following statement contains a magic number: field.ID = 5;
Magic Number,LineSharp.Datatypes,getActivePurchaseVersions_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.I64) {                  Start = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I32) {                  Size = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Language = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  Country = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,getActivePurchaseVersions_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.I64) {                  Start = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I32) {                  Size = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Language = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  Country = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,getActivePurchaseVersions_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.I64) {                  Start = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I32) {                  Size = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Language = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  Country = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,getActivePurchaseVersions_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.I64) {                  Start = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I32) {                  Size = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Language = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  Country = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,getActivePurchaseVersions_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,getActivePurchaseVersions_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,LineSharp.Datatypes,getActivePurchaseVersions_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Write,The following statement contains a magic number: field.ID = 4;
Magic Number,LineSharp.Datatypes,getActivePurchaseVersions_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Write,The following statement contains a magic number: field.ID = 5;
Magic Number,LineSharp.Datatypes,getCoinProducts_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.I32) {                  AppStoreCode = (PaymentType)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  Country = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Language = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,getCoinProducts_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.I32) {                  AppStoreCode = (PaymentType)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  Country = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Language = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,getCoinProducts_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.I32) {                  AppStoreCode = (PaymentType)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  Country = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Language = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,getCoinProducts_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,getCoinProducts_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,LineSharp.Datatypes,getCoinProducts_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Write,The following statement contains a magic number: field.ID = 4;
Magic Number,LineSharp.Datatypes,getCoinProductsByPgCode_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.I32) {                  AppStoreCode = (PaymentType)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I32) {                  PgCode = (PaymentPgType)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Country = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  Language = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,getCoinProductsByPgCode_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.I32) {                  AppStoreCode = (PaymentType)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I32) {                  PgCode = (PaymentPgType)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Country = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  Language = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,getCoinProductsByPgCode_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.I32) {                  AppStoreCode = (PaymentType)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I32) {                  PgCode = (PaymentPgType)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Country = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  Language = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,getCoinProductsByPgCode_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.I32) {                  AppStoreCode = (PaymentType)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I32) {                  PgCode = (PaymentPgType)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Country = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  Language = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,getCoinProductsByPgCode_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,getCoinProductsByPgCode_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,LineSharp.Datatypes,getCoinProductsByPgCode_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Write,The following statement contains a magic number: field.ID = 4;
Magic Number,LineSharp.Datatypes,getCoinProductsByPgCode_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Write,The following statement contains a magic number: field.ID = 5;
Magic Number,LineSharp.Datatypes,getCoinPurchaseHistory_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.Struct) {                  Request = new CoinHistoryCondition();                  Request.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,getCoinPurchaseHistory_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,getCoinUseAndRefundHistory_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.Struct) {                  Request = new CoinHistoryCondition();                  Request.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,getCoinUseAndRefundHistory_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,getDownloads_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.I64) {                  Start = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I32) {                  Size = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Language = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  Country = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,getDownloads_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.I64) {                  Start = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I32) {                  Size = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Language = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  Country = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,getDownloads_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.I64) {                  Start = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I32) {                  Size = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Language = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  Country = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,getDownloads_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.I64) {                  Start = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I32) {                  Size = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Language = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  Country = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,getDownloads_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,getDownloads_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,LineSharp.Datatypes,getDownloads_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Write,The following statement contains a magic number: field.ID = 4;
Magic Number,LineSharp.Datatypes,getDownloads_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Write,The following statement contains a magic number: field.ID = 5;
Magic Number,LineSharp.Datatypes,getEventPackages_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.I64) {                  Start = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I32) {                  Size = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Language = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  Country = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,getEventPackages_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.I64) {                  Start = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I32) {                  Size = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Language = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  Country = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,getEventPackages_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.I64) {                  Start = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I32) {                  Size = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Language = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  Country = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,getEventPackages_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.I64) {                  Start = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I32) {                  Size = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Language = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  Country = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,getEventPackages_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,getEventPackages_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,LineSharp.Datatypes,getEventPackages_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Write,The following statement contains a magic number: field.ID = 4;
Magic Number,LineSharp.Datatypes,getEventPackages_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Write,The following statement contains a magic number: field.ID = 5;
Magic Number,LineSharp.Datatypes,getNewlyReleasedPackages_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.I64) {                  Start = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I32) {                  Size = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Language = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  Country = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,getNewlyReleasedPackages_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.I64) {                  Start = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I32) {                  Size = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Language = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  Country = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,getNewlyReleasedPackages_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.I64) {                  Start = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I32) {                  Size = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Language = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  Country = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,getNewlyReleasedPackages_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.I64) {                  Start = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I32) {                  Size = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Language = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  Country = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,getNewlyReleasedPackages_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,getNewlyReleasedPackages_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,LineSharp.Datatypes,getNewlyReleasedPackages_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Write,The following statement contains a magic number: field.ID = 4;
Magic Number,LineSharp.Datatypes,getNewlyReleasedPackages_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Write,The following statement contains a magic number: field.ID = 5;
Magic Number,LineSharp.Datatypes,getPopularPackages_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.I64) {                  Start = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I32) {                  Size = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Language = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  Country = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,getPopularPackages_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.I64) {                  Start = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I32) {                  Size = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Language = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  Country = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,getPopularPackages_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.I64) {                  Start = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I32) {                  Size = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Language = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  Country = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,getPopularPackages_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.I64) {                  Start = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I32) {                  Size = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Language = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  Country = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,getPopularPackages_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,getPopularPackages_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,LineSharp.Datatypes,getPopularPackages_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Write,The following statement contains a magic number: field.ID = 4;
Magic Number,LineSharp.Datatypes,getPopularPackages_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Write,The following statement contains a magic number: field.ID = 5;
Magic Number,LineSharp.Datatypes,getPresentsReceived_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.I64) {                  Start = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I32) {                  Size = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Language = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  Country = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,getPresentsReceived_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.I64) {                  Start = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I32) {                  Size = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Language = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  Country = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,getPresentsReceived_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.I64) {                  Start = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I32) {                  Size = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Language = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  Country = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,getPresentsReceived_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.I64) {                  Start = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I32) {                  Size = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Language = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  Country = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,getPresentsReceived_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,getPresentsReceived_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,LineSharp.Datatypes,getPresentsReceived_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Write,The following statement contains a magic number: field.ID = 4;
Magic Number,LineSharp.Datatypes,getPresentsReceived_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Write,The following statement contains a magic number: field.ID = 5;
Magic Number,LineSharp.Datatypes,getPresentsSent_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.I64) {                  Start = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I32) {                  Size = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Language = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  Country = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,getPresentsSent_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.I64) {                  Start = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I32) {                  Size = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Language = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  Country = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,getPresentsSent_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.I64) {                  Start = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I32) {                  Size = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Language = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  Country = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,getPresentsSent_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.I64) {                  Start = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I32) {                  Size = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Language = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  Country = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,getPresentsSent_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,getPresentsSent_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,LineSharp.Datatypes,getPresentsSent_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Write,The following statement contains a magic number: field.ID = 4;
Magic Number,LineSharp.Datatypes,getPresentsSent_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Write,The following statement contains a magic number: field.ID = 5;
Magic Number,LineSharp.Datatypes,getProduct_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.I64) {                  PackageID = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  Language = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Country = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,getProduct_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.I64) {                  PackageID = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  Language = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Country = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,getProduct_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.I64) {                  PackageID = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  Language = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Country = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,getProduct_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,getProduct_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,LineSharp.Datatypes,getProduct_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Write,The following statement contains a magic number: field.ID = 4;
Magic Number,LineSharp.Datatypes,getProductList_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.List) {                  {                    ProductIdList = new List<string>();                    TList _list97 = iprot.ReadListBegin();                    for( int _i98 = 0; _i98 < _list97.Count; ++_i98)                    {                      string _elem99 = null;                      _elem99 = iprot.ReadString();                      ProductIdList.Add(_elem99);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  Language = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Country = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,getProductList_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.List) {                  {                    ProductIdList = new List<string>();                    TList _list97 = iprot.ReadListBegin();                    for( int _i98 = 0; _i98 < _list97.Count; ++_i98)                    {                      string _elem99 = null;                      _elem99 = iprot.ReadString();                      ProductIdList.Add(_elem99);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  Language = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Country = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,getProductList_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.List) {                  {                    ProductIdList = new List<string>();                    TList _list97 = iprot.ReadListBegin();                    for( int _i98 = 0; _i98 < _list97.Count; ++_i98)                    {                      string _elem99 = null;                      _elem99 = iprot.ReadString();                      ProductIdList.Add(_elem99);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  Language = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Country = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,getProductList_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,getProductList_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,LineSharp.Datatypes,getProductList_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Write,The following statement contains a magic number: field.ID = 4;
Magic Number,LineSharp.Datatypes,getProductListWithCarrier_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.List) {                  {                    ProductIdList = new List<string>();                    TList _list101 = iprot.ReadListBegin();                    for( int _i102 = 0; _i102 < _list101.Count; ++_i102)                    {                      string _elem103 = null;                      _elem103 = iprot.ReadString();                      ProductIdList.Add(_elem103);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  Language = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Country = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  CarrierCode = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,getProductListWithCarrier_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.List) {                  {                    ProductIdList = new List<string>();                    TList _list101 = iprot.ReadListBegin();                    for( int _i102 = 0; _i102 < _list101.Count; ++_i102)                    {                      string _elem103 = null;                      _elem103 = iprot.ReadString();                      ProductIdList.Add(_elem103);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  Language = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Country = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  CarrierCode = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,getProductListWithCarrier_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.List) {                  {                    ProductIdList = new List<string>();                    TList _list101 = iprot.ReadListBegin();                    for( int _i102 = 0; _i102 < _list101.Count; ++_i102)                    {                      string _elem103 = null;                      _elem103 = iprot.ReadString();                      ProductIdList.Add(_elem103);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  Language = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Country = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  CarrierCode = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,getProductListWithCarrier_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.List) {                  {                    ProductIdList = new List<string>();                    TList _list101 = iprot.ReadListBegin();                    for( int _i102 = 0; _i102 < _list101.Count; ++_i102)                    {                      string _elem103 = null;                      _elem103 = iprot.ReadString();                      ProductIdList.Add(_elem103);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  Language = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Country = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  CarrierCode = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,getProductListWithCarrier_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,getProductListWithCarrier_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,LineSharp.Datatypes,getProductListWithCarrier_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Write,The following statement contains a magic number: field.ID = 4;
Magic Number,LineSharp.Datatypes,getProductListWithCarrier_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Write,The following statement contains a magic number: field.ID = 5;
Magic Number,LineSharp.Datatypes,getProductWithCarrier_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.I64) {                  PackageID = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  Language = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Country = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  CarrierCode = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,getProductWithCarrier_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.I64) {                  PackageID = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  Language = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Country = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  CarrierCode = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,getProductWithCarrier_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.I64) {                  PackageID = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  Language = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Country = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  CarrierCode = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,getProductWithCarrier_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.I64) {                  PackageID = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  Language = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Country = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  CarrierCode = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,getProductWithCarrier_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,getProductWithCarrier_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,LineSharp.Datatypes,getProductWithCarrier_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Write,The following statement contains a magic number: field.ID = 4;
Magic Number,LineSharp.Datatypes,getProductWithCarrier_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Write,The following statement contains a magic number: field.ID = 5;
Magic Number,LineSharp.Datatypes,getPurchaseHistory_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.I64) {                  Start = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I32) {                  Size = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Language = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  Country = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,getPurchaseHistory_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.I64) {                  Start = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I32) {                  Size = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Language = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  Country = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,getPurchaseHistory_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.I64) {                  Start = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I32) {                  Size = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Language = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  Country = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,getPurchaseHistory_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.I64) {                  Start = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I32) {                  Size = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Language = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  Country = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,getPurchaseHistory_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,getPurchaseHistory_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,LineSharp.Datatypes,getPurchaseHistory_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Write,The following statement contains a magic number: field.ID = 4;
Magic Number,LineSharp.Datatypes,getPurchaseHistory_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Write,The following statement contains a magic number: field.ID = 5;
Magic Number,LineSharp.Datatypes,getTotalBalance_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.I32) {                  AppStoreCode = (PaymentType)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,getTotalBalance_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,notifyDownloaded_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.I64) {                  PackageId = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  Language = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,notifyDownloaded_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.I64) {                  PackageId = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  Language = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,notifyDownloaded_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,notifyDownloaded_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,LineSharp.Datatypes,reserveCoinPurchase_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.Struct) {                  Request = new CoinPurchaseReservation();                  Request.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,reserveCoinPurchase_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,reservePayment_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.Struct) {                  PaymentReservation = new PaymentReservation();                  PaymentReservation.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,reservePayment_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\ShopService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,SnsFriend,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\SnsFriend.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                SnsUserId = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.String) {                SnsUserName = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.I32) {                SnsIdType = (SnsIdType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,SnsFriend,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\SnsFriend.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                SnsUserId = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.String) {                SnsUserName = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.I32) {                SnsIdType = (SnsIdType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,SnsFriend,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\SnsFriend.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,SnsFriend,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\SnsFriend.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,LineSharp.Datatypes,SnsFriendContactRegistration,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\SnsFriendContactRegistration.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.Struct) {                Contact = new Contact();                Contact.Read(iprot);              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.I32) {                SnsIdType = (SnsIdType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.String) {                SnsUserId = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,SnsFriendContactRegistration,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\SnsFriendContactRegistration.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.Struct) {                Contact = new Contact();                Contact.Read(iprot);              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.I32) {                SnsIdType = (SnsIdType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.String) {                SnsUserId = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,SnsFriendContactRegistration,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\SnsFriendContactRegistration.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,SnsFriendContactRegistration,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\SnsFriendContactRegistration.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,LineSharp.Datatypes,SnsFriendModification,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\SnsFriendModification.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.I32) {                Type = (ModificationType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.Struct) {                SnsFriend = new SnsFriend();                SnsFriend.Read(iprot);              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,SnsFriendModification,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\SnsFriendModification.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,SnsIdUserStatus,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\SnsIdUserStatus.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.Bool) {                UserExisting = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.Bool) {                PhoneNumberRegistered = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.Bool) {                SameDevice = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,SnsIdUserStatus,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\SnsIdUserStatus.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.Bool) {                UserExisting = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.Bool) {                PhoneNumberRegistered = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.Bool) {                SameDevice = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,SnsIdUserStatus,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\SnsIdUserStatus.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,SnsIdUserStatus,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\SnsIdUserStatus.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,LineSharp.Datatypes,SystemConfiguration,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\SystemConfiguration.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                Endpoint = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.String) {                EndpointSsl = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.String) {                UpdateUrl = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.String) {                C2dmAccount = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.String) {                NniServer = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,SystemConfiguration,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\SystemConfiguration.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                Endpoint = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.String) {                EndpointSsl = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.String) {                UpdateUrl = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.String) {                C2dmAccount = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.String) {                NniServer = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,SystemConfiguration,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\SystemConfiguration.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                Endpoint = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.String) {                EndpointSsl = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.String) {                UpdateUrl = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.String) {                C2dmAccount = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.String) {                NniServer = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,SystemConfiguration,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\SystemConfiguration.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                Endpoint = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.String) {                EndpointSsl = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.String) {                UpdateUrl = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.String) {                C2dmAccount = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.String) {                NniServer = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,SystemConfiguration,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\SystemConfiguration.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,SystemConfiguration,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\SystemConfiguration.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,LineSharp.Datatypes,SystemConfiguration,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\SystemConfiguration.cs,Write,The following statement contains a magic number: field.ID = 11;
Magic Number,LineSharp.Datatypes,SystemConfiguration,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\SystemConfiguration.cs,Write,The following statement contains a magic number: field.ID = 12;
Magic Number,LineSharp.Datatypes,TalkException,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkException.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.I32) {                Code = (ErrorCode)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.String) {                Reason = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.Map) {                {                  ParameterMap = new Dictionary<string' string>();                  TMap _map64 = iprot.ReadMapBegin();                  for( int _i65 = 0; _i65 < _map64.Count; ++_i65)                  {                    string _key66;                    string _val67;                    _key66 = iprot.ReadString();                    _val67 = iprot.ReadString();                    ParameterMap[_key66] = _val67;                  }                  iprot.ReadMapEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,TalkException,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkException.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.I32) {                Code = (ErrorCode)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.String) {                Reason = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.Map) {                {                  ParameterMap = new Dictionary<string' string>();                  TMap _map64 = iprot.ReadMapBegin();                  for( int _i65 = 0; _i65 < _map64.Count; ++_i65)                  {                    string _key66;                    string _val67;                    _key66 = iprot.ReadString();                    _val67 = iprot.ReadString();                    ParameterMap[_key66] = _val67;                  }                  iprot.ReadMapEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,TalkException,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkException.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,TalkException,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkException.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,LineSharp.Datatypes,acceptGroupInvitation_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I32) {                  ReqSeq = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  GroupId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,acceptGroupInvitation_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,acceptProximityMatches_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  SessionId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Set) {                  {                    Ids = new THashSet<string>();                    TSet _set105 = iprot.ReadSetBegin();                    for( int _i106 = 0; _i106 < _set105.Count; ++_i106)                    {                      string _elem107 = null;                      _elem107 = iprot.ReadString();                      Ids.Add(_elem107);                    }                    iprot.ReadSetEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,acceptProximityMatches_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  SessionId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Set) {                  {                    Ids = new THashSet<string>();                    TSet _set105 = iprot.ReadSetBegin();                    for( int _i106 = 0; _i106 < _set105.Count; ++_i106)                    {                      string _elem107 = null;                      _elem107 = iprot.ReadString();                      Ids.Add(_elem107);                    }                    iprot.ReadSetEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,acceptProximityMatches_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,acceptProximityMatches_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,LineSharp.Datatypes,acquireCallRoute_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  To = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,acquireCallRoute_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,acquireCallTicket_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  To = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,acquireCallTicket_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,acquireEncryptedAccessToken_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.I32) {                  FeatureType = (FeatureType)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,acquireEncryptedAccessToken_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,addSnsId_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.I32) {                  SnsIdType = (SnsIdType)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  SnsAccessToken = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,addSnsId_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.I32) {                  SnsIdType = (SnsIdType)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  SnsAccessToken = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,addSnsId_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,addSnsId_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,LineSharp.Datatypes,blockContact_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I32) {                  ReqSeq = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  Id = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,blockContact_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,blockRecommendation_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I32) {                  ReqSeq = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  Id = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,blockRecommendation_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,cancelGroupInvitation_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I32) {                  ReqSeq = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  GroupId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.List) {                  {                    ContactIds = new List<string>();                    TList _list113 = iprot.ReadListBegin();                    for( int _i114 = 0; _i114 < _list113.Count; ++_i114)                    {                      string _elem115 = null;                      _elem115 = iprot.ReadString();                      ContactIds.Add(_elem115);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,cancelGroupInvitation_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I32) {                  ReqSeq = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  GroupId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.List) {                  {                    ContactIds = new List<string>();                    TList _list113 = iprot.ReadListBegin();                    for( int _i114 = 0; _i114 < _list113.Count; ++_i114)                    {                      string _elem115 = null;                      _elem115 = iprot.ReadString();                      ContactIds.Add(_elem115);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,cancelGroupInvitation_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,cancelGroupInvitation_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,LineSharp.Datatypes,changeVerificationMethod_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  SessionId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I32) {                  Method = (VerificationMethod)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,changeVerificationMethod_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  SessionId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I32) {                  Method = (VerificationMethod)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,changeVerificationMethod_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,changeVerificationMethod_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,LineSharp.Datatypes,clearMessageBox_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  ChannelId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  MessageBoxId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,clearMessageBox_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  ChannelId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  MessageBoxId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,clearMessageBox_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,clearMessageBox_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,LineSharp.Datatypes,closeProximityMatch_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  SessionId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,closeProximityMatch_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,commitSendMessage_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I32) {                  Seq = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  MessageId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.List) {                  {                    ReceiverMids = new List<string>();                    TList _list117 = iprot.ReadListBegin();                    for( int _i118 = 0; _i118 < _list117.Count; ++_i118)                    {                      string _elem119 = null;                      _elem119 = iprot.ReadString();                      ReceiverMids.Add(_elem119);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,commitSendMessage_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I32) {                  Seq = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  MessageId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.List) {                  {                    ReceiverMids = new List<string>();                    TList _list117 = iprot.ReadListBegin();                    for( int _i118 = 0; _i118 < _list117.Count; ++_i118)                    {                      string _elem119 = null;                      _elem119 = iprot.ReadString();                      ReceiverMids.Add(_elem119);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,commitSendMessage_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,commitSendMessage_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,LineSharp.Datatypes,commitSendMessages_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I32) {                  Seq = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.List) {                  {                    MessageIds = new List<string>();                    TList _list126 = iprot.ReadListBegin();                    for( int _i127 = 0; _i127 < _list126.Count; ++_i127)                    {                      string _elem128 = null;                      _elem128 = iprot.ReadString();                      MessageIds.Add(_elem128);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.List) {                  {                    ReceiverMids = new List<string>();                    TList _list129 = iprot.ReadListBegin();                    for( int _i130 = 0; _i130 < _list129.Count; ++_i130)                    {                      string _elem131 = null;                      _elem131 = iprot.ReadString();                      ReceiverMids.Add(_elem131);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,commitSendMessages_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I32) {                  Seq = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.List) {                  {                    MessageIds = new List<string>();                    TList _list126 = iprot.ReadListBegin();                    for( int _i127 = 0; _i127 < _list126.Count; ++_i127)                    {                      string _elem128 = null;                      _elem128 = iprot.ReadString();                      MessageIds.Add(_elem128);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.List) {                  {                    ReceiverMids = new List<string>();                    TList _list129 = iprot.ReadListBegin();                    for( int _i130 = 0; _i130 < _list129.Count; ++_i130)                    {                      string _elem131 = null;                      _elem131 = iprot.ReadString();                      ReceiverMids.Add(_elem131);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,commitSendMessages_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,commitSendMessages_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,LineSharp.Datatypes,commitUpdateProfile_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I32) {                  Seq = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.List) {                  {                    Attrs = new List<ProfileAttribute>();                    TList _list139 = iprot.ReadListBegin();                    for( int _i140 = 0; _i140 < _list139.Count; ++_i140)                    {                      ProfileAttribute _elem141 = (ProfileAttribute)0;                      _elem141 = (ProfileAttribute)iprot.ReadI32();                      Attrs.Add(_elem141);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.List) {                  {                    ReceiverMids = new List<string>();                    TList _list142 = iprot.ReadListBegin();                    for( int _i143 = 0; _i143 < _list142.Count; ++_i143)                    {                      string _elem144 = null;                      _elem144 = iprot.ReadString();                      ReceiverMids.Add(_elem144);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,commitUpdateProfile_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I32) {                  Seq = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.List) {                  {                    Attrs = new List<ProfileAttribute>();                    TList _list139 = iprot.ReadListBegin();                    for( int _i140 = 0; _i140 < _list139.Count; ++_i140)                    {                      ProfileAttribute _elem141 = (ProfileAttribute)0;                      _elem141 = (ProfileAttribute)iprot.ReadI32();                      Attrs.Add(_elem141);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.List) {                  {                    ReceiverMids = new List<string>();                    TList _list142 = iprot.ReadListBegin();                    for( int _i143 = 0; _i143 < _list142.Count; ++_i143)                    {                      string _elem144 = null;                      _elem144 = iprot.ReadString();                      ReceiverMids.Add(_elem144);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,commitUpdateProfile_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,commitUpdateProfile_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,LineSharp.Datatypes,confirmEmail_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  Verifier = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  PinCode = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,confirmEmail_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  Verifier = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  PinCode = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,confirmEmail_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,confirmEmail_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,LineSharp.Datatypes,createGroup_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I32) {                  Seq = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  Name = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.List) {                  {                    ContactIds = new List<string>();                    TList _list152 = iprot.ReadListBegin();                    for( int _i153 = 0; _i153 < _list152.Count; ++_i153)                    {                      string _elem154 = null;                      _elem154 = iprot.ReadString();                      ContactIds.Add(_elem154);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,createGroup_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I32) {                  Seq = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  Name = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.List) {                  {                    ContactIds = new List<string>();                    TList _list152 = iprot.ReadListBegin();                    for( int _i153 = 0; _i153 < _list152.Count; ++_i153)                    {                      string _elem154 = null;                      _elem154 = iprot.ReadString();                      ContactIds.Add(_elem154);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,createGroup_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,createGroup_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,LineSharp.Datatypes,createQrcodeBase64Image_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  Url = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  CharacterSet = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.I32) {                  ImageSize = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.I32) {                  X = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.I32) {                  Y = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.I32) {                  Width = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.I32) {                  Height = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,createQrcodeBase64Image_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  Url = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  CharacterSet = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.I32) {                  ImageSize = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.I32) {                  X = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.I32) {                  Y = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.I32) {                  Width = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.I32) {                  Height = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,createQrcodeBase64Image_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  Url = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  CharacterSet = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.I32) {                  ImageSize = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.I32) {                  X = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.I32) {                  Y = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.I32) {                  Width = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.I32) {                  Height = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,createQrcodeBase64Image_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  Url = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  CharacterSet = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.I32) {                  ImageSize = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.I32) {                  X = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.I32) {                  Y = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.I32) {                  Width = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.I32) {                  Height = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,createQrcodeBase64Image_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  Url = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  CharacterSet = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.I32) {                  ImageSize = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.I32) {                  X = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.I32) {                  Y = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.I32) {                  Width = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.I32) {                  Height = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,createQrcodeBase64Image_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  Url = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  CharacterSet = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.I32) {                  ImageSize = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.I32) {                  X = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.I32) {                  Y = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.I32) {                  Width = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.I32) {                  Height = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,createQrcodeBase64Image_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  Url = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  CharacterSet = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.I32) {                  ImageSize = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.I32) {                  X = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.I32) {                  Y = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.I32) {                  Width = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.I32) {                  Height = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,createQrcodeBase64Image_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,createQrcodeBase64Image_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,LineSharp.Datatypes,createQrcodeBase64Image_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 4;
Magic Number,LineSharp.Datatypes,createQrcodeBase64Image_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 5;
Magic Number,LineSharp.Datatypes,createQrcodeBase64Image_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 6;
Magic Number,LineSharp.Datatypes,createQrcodeBase64Image_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 7;
Magic Number,LineSharp.Datatypes,createQrcodeBase64Image_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 8;
Magic Number,LineSharp.Datatypes,createRoom_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I32) {                  ReqSeq = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.List) {                  {                    ContactIds = new List<string>();                    TList _list156 = iprot.ReadListBegin();                    for( int _i157 = 0; _i157 < _list156.Count; ++_i157)                    {                      string _elem158 = null;                      _elem158 = iprot.ReadString();                      ContactIds.Add(_elem158);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,createRoom_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,fetchAnnouncements_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.I32) {                  LastFetchedIndex = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,fetchAnnouncements_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,fetchMessages_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.I64) {                  LocalTs = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I32) {                  Count = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,fetchMessages_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.I64) {                  LocalTs = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I32) {                  Count = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,fetchMessages_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,fetchMessages_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,LineSharp.Datatypes,fetchOperations_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.I64) {                  LocalRev = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I32) {                  Count = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,fetchOperations_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.I64) {                  LocalRev = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I32) {                  Count = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,fetchOperations_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,fetchOperations_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,LineSharp.Datatypes,fetchOps_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.I64) {                  LocalRev = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I32) {                  Count = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.I64) {                  GlobalRev = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.I64) {                  IndividualRev = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,fetchOps_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.I64) {                  LocalRev = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I32) {                  Count = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.I64) {                  GlobalRev = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.I64) {                  IndividualRev = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,fetchOps_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.I64) {                  LocalRev = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I32) {                  Count = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.I64) {                  GlobalRev = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.I64) {                  IndividualRev = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,fetchOps_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.I64) {                  LocalRev = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I32) {                  Count = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.I64) {                  GlobalRev = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.I64) {                  IndividualRev = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,fetchOps_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,fetchOps_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,LineSharp.Datatypes,fetchOps_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 4;
Magic Number,LineSharp.Datatypes,fetchOps_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 5;
Magic Number,LineSharp.Datatypes,findAndAddContactsByEmail_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I32) {                  ReqSeq = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Set) {                  {                    Emails = new THashSet<string>();                    TSet _set176 = iprot.ReadSetBegin();                    for( int _i177 = 0; _i177 < _set176.Count; ++_i177)                    {                      string _elem178 = null;                      _elem178 = iprot.ReadString();                      Emails.Add(_elem178);                    }                    iprot.ReadSetEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,findAndAddContactsByEmail_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,findAndAddContactsByMid_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I32) {                  ReqSeq = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  Mid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,findAndAddContactsByMid_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,findAndAddContactsByPhone_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I32) {                  ReqSeq = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Set) {                  {                    Phones = new THashSet<string>();                    TSet _set190 = iprot.ReadSetBegin();                    for( int _i191 = 0; _i191 < _set190.Count; ++_i191)                    {                      string _elem192 = null;                      _elem192 = iprot.ReadString();                      Phones.Add(_elem192);                    }                    iprot.ReadSetEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,findAndAddContactsByPhone_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,findAndAddContactsByUserid_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I32) {                  ReqSeq = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  Userid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,findAndAddContactsByUserid_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,findContactByUserid_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  Userid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,findContactByUserid_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,findContactByUserTicket_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  TicketId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,findContactByUserTicket_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,findContactsByEmail_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.Set) {                  {                    Emails = new THashSet<string>();                    TSet _set204 = iprot.ReadSetBegin();                    for( int _i205 = 0; _i205 < _set204.Count; ++_i205)                    {                      string _elem206 = null;                      _elem206 = iprot.ReadString();                      Emails.Add(_elem206);                    }                    iprot.ReadSetEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,findContactsByEmail_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,findContactsByPhone_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.Set) {                  {                    Phones = new THashSet<string>();                    TSet _set213 = iprot.ReadSetBegin();                    for( int _i214 = 0; _i214 < _set213.Count; ++_i214)                    {                      string _elem215 = null;                      _elem215 = iprot.ReadString();                      Phones.Add(_elem215);                    }                    iprot.ReadSetEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,findContactsByPhone_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,findSnsIdUserStatus_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.I32) {                  SnsIdType = (SnsIdType)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  SnsAccessToken = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  UdidHash = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,findSnsIdUserStatus_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.I32) {                  SnsIdType = (SnsIdType)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  SnsAccessToken = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  UdidHash = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,findSnsIdUserStatus_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.I32) {                  SnsIdType = (SnsIdType)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  SnsAccessToken = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  UdidHash = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,findSnsIdUserStatus_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,findSnsIdUserStatus_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,LineSharp.Datatypes,findSnsIdUserStatus_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 4;
Magic Number,LineSharp.Datatypes,finishUpdateVerification_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  SessionId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,finishUpdateVerification_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,generateUserTicket_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 3:                if (field.Type == TType.I64) {                  ExpirationTime = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.I32) {                  MaxUseCount = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,generateUserTicket_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 3:                if (field.Type == TType.I64) {                  ExpirationTime = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.I32) {                  MaxUseCount = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,generateUserTicket_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,LineSharp.Datatypes,generateUserTicket_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 4;
Magic Number,LineSharp.Datatypes,getAcceptedProximityMatches_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  SessionId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,getAcceptedProximityMatches_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,getAuthQrcode_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.Bool) {                  KeepLoggedIn = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  SystemName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,getAuthQrcode_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.Bool) {                  KeepLoggedIn = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  SystemName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,getAuthQrcode_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,getAuthQrcode_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,LineSharp.Datatypes,getBlockedContactIdsByRange_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.I32) {                  Start = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I32) {                  Count = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,getBlockedContactIdsByRange_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.I32) {                  Start = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I32) {                  Count = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,getBlockedContactIdsByRange_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,getBlockedContactIdsByRange_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,LineSharp.Datatypes,getBuddyLocation_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  Mid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I32) {                  Index = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,getBuddyLocation_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  Mid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I32) {                  Index = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,getBuddyLocation_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,getBuddyLocation_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,LineSharp.Datatypes,getCompactContactsModifiedSince_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.I64) {                  Timestamp = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,getCompactContactsModifiedSince_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,getCompactGroup_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  GroupId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,getCompactGroup_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,getCompactRoom_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  RoomId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,getCompactRoom_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,getContact_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  Id = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,getContact_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,getContacts_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.List) {                  {                    Ids = new List<string>();                    TList _list254 = iprot.ReadListBegin();                    for( int _i255 = 0; _i255 < _list254.Count; ++_i255)                    {                      string _elem256 = null;                      _elem256 = iprot.ReadString();                      Ids.Add(_elem256);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,getContacts_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,getGroup_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  GroupId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,getGroup_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,getGroups_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.List) {                  {                    GroupIds = new List<string>();                    TList _list274 = iprot.ReadListBegin();                    for( int _i275 = 0; _i275 < _list274.Count; ++_i275)                    {                      string _elem276 = null;                      _elem276 = iprot.ReadString();                      GroupIds.Add(_elem276);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,getGroups_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,getMessageBox_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  ChannelId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  MessageBoxId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.I32) {                  LastMessagesCount = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,getMessageBox_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  ChannelId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  MessageBoxId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.I32) {                  LastMessagesCount = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,getMessageBox_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  ChannelId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  MessageBoxId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.I32) {                  LastMessagesCount = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,getMessageBox_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,getMessageBox_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,LineSharp.Datatypes,getMessageBox_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 4;
Magic Number,LineSharp.Datatypes,getMessageBoxCompactWrapUp_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  Mid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,getMessageBoxCompactWrapUp_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,getMessageBoxCompactWrapUpList_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.I32) {                  Start = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I32) {                  MessageBoxCount = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,getMessageBoxCompactWrapUpList_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.I32) {                  Start = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I32) {                  MessageBoxCount = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,getMessageBoxCompactWrapUpList_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,getMessageBoxCompactWrapUpList_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,LineSharp.Datatypes,getMessageBoxList_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  ChannelId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I32) {                  LastMessagesCount = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,getMessageBoxList_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  ChannelId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I32) {                  LastMessagesCount = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,getMessageBoxList_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,getMessageBoxList_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,LineSharp.Datatypes,getMessageBoxListByStatus_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  ChannelId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I32) {                  LastMessagesCount = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.I32) {                  Status = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,getMessageBoxListByStatus_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  ChannelId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I32) {                  LastMessagesCount = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.I32) {                  Status = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,getMessageBoxListByStatus_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  ChannelId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I32) {                  LastMessagesCount = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.I32) {                  Status = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,getMessageBoxListByStatus_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,getMessageBoxListByStatus_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,LineSharp.Datatypes,getMessageBoxListByStatus_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 4;
Magic Number,LineSharp.Datatypes,getMessageBoxWrapUp_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  Mid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,getMessageBoxWrapUp_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,getMessageBoxWrapUpList_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.I32) {                  Start = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I32) {                  MessageBoxCount = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,getMessageBoxWrapUpList_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.I32) {                  Start = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I32) {                  MessageBoxCount = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,getMessageBoxWrapUpList_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,getMessageBoxWrapUpList_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,LineSharp.Datatypes,getMessagesBySequenceNumber_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  ChannelId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  MessageBoxId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.I64) {                  StartSeq = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.I64) {                  EndSeq = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,getMessagesBySequenceNumber_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  ChannelId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  MessageBoxId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.I64) {                  StartSeq = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.I64) {                  EndSeq = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,getMessagesBySequenceNumber_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  ChannelId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  MessageBoxId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.I64) {                  StartSeq = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.I64) {                  EndSeq = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,getMessagesBySequenceNumber_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  ChannelId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  MessageBoxId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.I64) {                  StartSeq = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.I64) {                  EndSeq = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,getMessagesBySequenceNumber_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,getMessagesBySequenceNumber_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,LineSharp.Datatypes,getMessagesBySequenceNumber_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 4;
Magic Number,LineSharp.Datatypes,getMessagesBySequenceNumber_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 5;
Magic Number,LineSharp.Datatypes,getNextMessages_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  MessageBoxId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I64) {                  StartSeq = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.I32) {                  MessagesCount = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,getNextMessages_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  MessageBoxId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I64) {                  StartSeq = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.I32) {                  MessagesCount = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,getNextMessages_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  MessageBoxId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I64) {                  StartSeq = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.I32) {                  MessagesCount = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,getNextMessages_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,getNextMessages_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,LineSharp.Datatypes,getNextMessages_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 4;
Magic Number,LineSharp.Datatypes,getNotificationPolicy_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.I32) {                  Carrier = (CarrierCode)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,getNotificationPolicy_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,getPreviousMessages_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  MessageBoxId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I64) {                  EndSeq = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.I32) {                  MessagesCount = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,getPreviousMessages_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  MessageBoxId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I64) {                  EndSeq = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.I32) {                  MessagesCount = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,getPreviousMessages_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  MessageBoxId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I64) {                  EndSeq = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.I32) {                  MessagesCount = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,getPreviousMessages_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,getPreviousMessages_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,LineSharp.Datatypes,getPreviousMessages_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 4;
Magic Number,LineSharp.Datatypes,getProximityMatchCandidateList_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  SessionId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,getProximityMatchCandidateList_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,getProximityMatchCandidates_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  SessionId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,getProximityMatchCandidates_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,getRecentMessages_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  MessageBoxId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I32) {                  MessagesCount = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,getRecentMessages_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  MessageBoxId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I32) {                  MessagesCount = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,getRecentMessages_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,getRecentMessages_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,LineSharp.Datatypes,getRoom_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  RoomId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,getRoom_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,getRSAKeyInfo_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.I32) {                  Provider = (IdentityProvider)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,getRSAKeyInfo_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,getSettingsAttributes_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.I32) {                  AttrBitset = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,getSettingsAttributes_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,getWapInvitation_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  InvitationHash = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,getWapInvitation_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,inviteFriendsBySms_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.List) {                  {                    PhoneNumberList = new List<string>();                    TList _list326 = iprot.ReadListBegin();                    for( int _i327 = 0; _i327 < _list326.Count; ++_i327)                    {                      string _elem328 = null;                      _elem328 = iprot.ReadString();                      PhoneNumberList.Add(_elem328);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,inviteFriendsBySms_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,inviteIntoGroup_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I32) {                  ReqSeq = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  GroupId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.List) {                  {                    ContactIds = new List<string>();                    TList _list330 = iprot.ReadListBegin();                    for( int _i331 = 0; _i331 < _list330.Count; ++_i331)                    {                      string _elem332 = null;                      _elem332 = iprot.ReadString();                      ContactIds.Add(_elem332);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,inviteIntoGroup_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I32) {                  ReqSeq = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  GroupId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.List) {                  {                    ContactIds = new List<string>();                    TList _list330 = iprot.ReadListBegin();                    for( int _i331 = 0; _i331 < _list330.Count; ++_i331)                    {                      string _elem332 = null;                      _elem332 = iprot.ReadString();                      ContactIds.Add(_elem332);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,inviteIntoGroup_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,inviteIntoGroup_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,LineSharp.Datatypes,inviteIntoRoom_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I32) {                  ReqSeq = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  RoomId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.List) {                  {                    ContactIds = new List<string>();                    TList _list334 = iprot.ReadListBegin();                    for( int _i335 = 0; _i335 < _list334.Count; ++_i335)                    {                      string _elem336 = null;                      _elem336 = iprot.ReadString();                      ContactIds.Add(_elem336);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,inviteIntoRoom_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I32) {                  ReqSeq = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  RoomId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.List) {                  {                    ContactIds = new List<string>();                    TList _list334 = iprot.ReadListBegin();                    for( int _i335 = 0; _i335 < _list334.Count; ++_i335)                    {                      string _elem336 = null;                      _elem336 = iprot.ReadString();                      ContactIds.Add(_elem336);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,inviteIntoRoom_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,inviteIntoRoom_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,LineSharp.Datatypes,inviteViaEmail_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I32) {                  ReqSeq = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  Email = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  Name = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,inviteViaEmail_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I32) {                  ReqSeq = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  Email = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  Name = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,inviteViaEmail_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,inviteViaEmail_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,LineSharp.Datatypes,isIdentityIdentifierAvailable_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 3:                if (field.Type == TType.I32) {                  Provider = (IdentityProvider)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  Identifier = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,isIdentityIdentifierAvailable_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 3:                if (field.Type == TType.I32) {                  Provider = (IdentityProvider)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  Identifier = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,isIdentityIdentifierAvailable_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,isIdentityIdentifierAvailable_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,LineSharp.Datatypes,isUseridAvailable_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  Userid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,isUseridAvailable_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,kickoutFromGroup_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I32) {                  ReqSeq = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  GroupId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.List) {                  {                    ContactIds = new List<string>();                    TList _list338 = iprot.ReadListBegin();                    for( int _i339 = 0; _i339 < _list338.Count; ++_i339)                    {                      string _elem340 = null;                      _elem340 = iprot.ReadString();                      ContactIds.Add(_elem340);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,kickoutFromGroup_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I32) {                  ReqSeq = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  GroupId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.List) {                  {                    ContactIds = new List<string>();                    TList _list338 = iprot.ReadListBegin();                    for( int _i339 = 0; _i339 < _list338.Count; ++_i339)                    {                      string _elem340 = null;                      _elem340 = iprot.ReadString();                      ContactIds.Add(_elem340);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,kickoutFromGroup_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,kickoutFromGroup_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,LineSharp.Datatypes,leaveGroup_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I32) {                  ReqSeq = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  GroupId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,leaveGroup_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,leaveRoom_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I32) {                  ReqSeq = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  RoomId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,leaveRoom_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,loginWithIdentityCredential_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 8:                if (field.Type == TType.I32) {                  IdentityProvider = (IdentityProvider)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  Identifier = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Password = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.Bool) {                  KeepLoggedIn = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  AccessLocation = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.String) {                  SystemName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.String) {                  Certificate = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,loginWithIdentityCredential_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 8:                if (field.Type == TType.I32) {                  IdentityProvider = (IdentityProvider)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  Identifier = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Password = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.Bool) {                  KeepLoggedIn = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  AccessLocation = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.String) {                  SystemName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.String) {                  Certificate = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,loginWithIdentityCredential_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 8:                if (field.Type == TType.I32) {                  IdentityProvider = (IdentityProvider)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  Identifier = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Password = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.Bool) {                  KeepLoggedIn = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  AccessLocation = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.String) {                  SystemName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.String) {                  Certificate = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,loginWithIdentityCredential_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 8:                if (field.Type == TType.I32) {                  IdentityProvider = (IdentityProvider)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  Identifier = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Password = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.Bool) {                  KeepLoggedIn = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  AccessLocation = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.String) {                  SystemName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.String) {                  Certificate = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,loginWithIdentityCredential_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 8:                if (field.Type == TType.I32) {                  IdentityProvider = (IdentityProvider)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  Identifier = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Password = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.Bool) {                  KeepLoggedIn = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  AccessLocation = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.String) {                  SystemName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.String) {                  Certificate = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,loginWithIdentityCredential_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 8:                if (field.Type == TType.I32) {                  IdentityProvider = (IdentityProvider)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  Identifier = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Password = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.Bool) {                  KeepLoggedIn = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  AccessLocation = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.String) {                  SystemName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.String) {                  Certificate = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,loginWithIdentityCredential_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 8:                if (field.Type == TType.I32) {                  IdentityProvider = (IdentityProvider)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  Identifier = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Password = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.Bool) {                  KeepLoggedIn = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  AccessLocation = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.String) {                  SystemName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.String) {                  Certificate = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,loginWithIdentityCredential_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,LineSharp.Datatypes,loginWithIdentityCredential_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 4;
Magic Number,LineSharp.Datatypes,loginWithIdentityCredential_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 5;
Magic Number,LineSharp.Datatypes,loginWithIdentityCredential_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 6;
Magic Number,LineSharp.Datatypes,loginWithIdentityCredential_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 7;
Magic Number,LineSharp.Datatypes,loginWithIdentityCredential_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 8;
Magic Number,LineSharp.Datatypes,loginWithIdentityCredential_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 9;
Magic Number,LineSharp.Datatypes,loginWithIdentityCredentialForCertificate_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 8:                if (field.Type == TType.I32) {                  IdentityProvider = (IdentityProvider)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  Identifier = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Password = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.Bool) {                  KeepLoggedIn = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  AccessLocation = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.String) {                  SystemName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.String) {                  Certificate = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,loginWithIdentityCredentialForCertificate_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 8:                if (field.Type == TType.I32) {                  IdentityProvider = (IdentityProvider)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  Identifier = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Password = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.Bool) {                  KeepLoggedIn = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  AccessLocation = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.String) {                  SystemName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.String) {                  Certificate = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,loginWithIdentityCredentialForCertificate_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 8:                if (field.Type == TType.I32) {                  IdentityProvider = (IdentityProvider)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  Identifier = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Password = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.Bool) {                  KeepLoggedIn = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  AccessLocation = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.String) {                  SystemName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.String) {                  Certificate = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,loginWithIdentityCredentialForCertificate_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 8:                if (field.Type == TType.I32) {                  IdentityProvider = (IdentityProvider)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  Identifier = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Password = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.Bool) {                  KeepLoggedIn = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  AccessLocation = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.String) {                  SystemName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.String) {                  Certificate = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,loginWithIdentityCredentialForCertificate_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 8:                if (field.Type == TType.I32) {                  IdentityProvider = (IdentityProvider)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  Identifier = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Password = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.Bool) {                  KeepLoggedIn = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  AccessLocation = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.String) {                  SystemName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.String) {                  Certificate = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,loginWithIdentityCredentialForCertificate_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 8:                if (field.Type == TType.I32) {                  IdentityProvider = (IdentityProvider)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  Identifier = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Password = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.Bool) {                  KeepLoggedIn = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  AccessLocation = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.String) {                  SystemName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.String) {                  Certificate = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,loginWithIdentityCredentialForCertificate_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 8:                if (field.Type == TType.I32) {                  IdentityProvider = (IdentityProvider)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  Identifier = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Password = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.Bool) {                  KeepLoggedIn = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  AccessLocation = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.String) {                  SystemName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.String) {                  Certificate = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,loginWithIdentityCredentialForCertificate_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,LineSharp.Datatypes,loginWithIdentityCredentialForCertificate_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 4;
Magic Number,LineSharp.Datatypes,loginWithIdentityCredentialForCertificate_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 5;
Magic Number,LineSharp.Datatypes,loginWithIdentityCredentialForCertificate_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 6;
Magic Number,LineSharp.Datatypes,loginWithIdentityCredentialForCertificate_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 7;
Magic Number,LineSharp.Datatypes,loginWithIdentityCredentialForCertificate_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 8;
Magic Number,LineSharp.Datatypes,loginWithIdentityCredentialForCertificate_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 9;
Magic Number,LineSharp.Datatypes,loginWithVerifier_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 3:                if (field.Type == TType.String) {                  Verifier = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,loginWithVerifier_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,LineSharp.Datatypes,loginWithVerifierForCerificate_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 3:                if (field.Type == TType.String) {                  Verifier = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,loginWithVerifierForCerificate_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,LineSharp.Datatypes,loginWithVerifierForCertificate_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 3:                if (field.Type == TType.String) {                  Verifier = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,loginWithVerifierForCertificate_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,LineSharp.Datatypes,logoutSession_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  TokenKey = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,logoutSession_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,notifiedRedirect_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.Map) {                  {                    ParamMap = new Dictionary<string' string>();                    TMap _map342 = iprot.ReadMapBegin();                    for( int _i343 = 0; _i343 < _map342.Count; ++_i343)                    {                      string _key344;                      string _val345;                      _key344 = iprot.ReadString();                      _val345 = iprot.ReadString();                      ParamMap[_key344] = _val345;                    }                    iprot.ReadMapEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,notifiedRedirect_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,notifyBuddyOnAir_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I32) {                  Seq = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.List) {                  {                    ReceiverMids = new List<string>();                    TList _list347 = iprot.ReadListBegin();                    for( int _i348 = 0; _i348 < _list347.Count; ++_i348)                    {                      string _elem349 = null;                      _elem349 = iprot.ReadString();                      ReceiverMids.Add(_elem349);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,notifyBuddyOnAir_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,notifyIndividualEvent_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.I32) {                  NotificationStatus = (NotificationStatus)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.List) {                  {                    ReceiverMids = new List<string>();                    TList _list356 = iprot.ReadListBegin();                    for( int _i357 = 0; _i357 < _list356.Count; ++_i357)                    {                      string _elem358 = null;                      _elem358 = iprot.ReadString();                      ReceiverMids.Add(_elem358);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,notifyIndividualEvent_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.I32) {                  NotificationStatus = (NotificationStatus)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.List) {                  {                    ReceiverMids = new List<string>();                    TList _list356 = iprot.ReadListBegin();                    for( int _i357 = 0; _i357 < _list356.Count; ++_i357)                    {                      string _elem358 = null;                      _elem358 = iprot.ReadString();                      ReceiverMids.Add(_elem358);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,notifyIndividualEvent_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,notifyIndividualEvent_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,LineSharp.Datatypes,notifyInstalled_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  UdidHash = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  ApplicationTypeWithExtensions = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,notifyInstalled_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  UdidHash = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  ApplicationTypeWithExtensions = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,notifyInstalled_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,notifyInstalled_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,LineSharp.Datatypes,notifyRegistrationComplete_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  UdidHash = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  ApplicationTypeWithExtensions = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,notifyRegistrationComplete_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  UdidHash = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  ApplicationTypeWithExtensions = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,notifyRegistrationComplete_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,notifyRegistrationComplete_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,LineSharp.Datatypes,notifySleep_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.I64) {                  LastRev = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I32) {                  Badge = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,notifySleep_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.I64) {                  LastRev = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I32) {                  Badge = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,notifySleep_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,notifySleep_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,LineSharp.Datatypes,notifyUpdated_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.I64) {                  LastRev = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Struct) {                  DeviceInfo = new DeviceInfo();                  DeviceInfo.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,notifyUpdated_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.I64) {                  LastRev = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Struct) {                  DeviceInfo = new DeviceInfo();                  DeviceInfo.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,notifyUpdated_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,notifyUpdated_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,LineSharp.Datatypes,openProximityMatch_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.Struct) {                  Location = new Location();                  Location.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,openProximityMatch_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,registerBuddyUser_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  BuddyId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  RegistrarPassword = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,registerBuddyUser_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  BuddyId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  RegistrarPassword = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,registerBuddyUser_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,registerBuddyUser_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,LineSharp.Datatypes,registerBuddyUserid_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.I32) {                  Seq = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  Userid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,registerBuddyUserid_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.I32) {                  Seq = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  Userid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,registerBuddyUserid_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,registerBuddyUserid_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,LineSharp.Datatypes,registerDevice_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  SessionId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,registerDevice_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,registerDeviceWithIdentityCredential_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  SessionId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.I32) {                  Provider = (IdentityProvider)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  Identifier = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Verifier = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,registerDeviceWithIdentityCredential_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  SessionId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.I32) {                  Provider = (IdentityProvider)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  Identifier = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Verifier = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,registerDeviceWithIdentityCredential_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  SessionId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.I32) {                  Provider = (IdentityProvider)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  Identifier = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Verifier = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,registerDeviceWithIdentityCredential_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  SessionId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.I32) {                  Provider = (IdentityProvider)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  Identifier = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Verifier = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,registerDeviceWithIdentityCredential_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,registerDeviceWithIdentityCredential_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,LineSharp.Datatypes,registerDeviceWithIdentityCredential_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 4;
Magic Number,LineSharp.Datatypes,registerDeviceWithIdentityCredential_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 5;
Magic Number,LineSharp.Datatypes,registerDeviceWithoutPhoneNumber_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  Region = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  UdidHash = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.Struct) {                  DeviceInfo = new DeviceInfo();                  DeviceInfo.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,registerDeviceWithoutPhoneNumber_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  Region = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  UdidHash = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.Struct) {                  DeviceInfo = new DeviceInfo();                  DeviceInfo.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,registerDeviceWithoutPhoneNumber_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  Region = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  UdidHash = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.Struct) {                  DeviceInfo = new DeviceInfo();                  DeviceInfo.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,registerDeviceWithoutPhoneNumber_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,registerDeviceWithoutPhoneNumber_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,LineSharp.Datatypes,registerDeviceWithoutPhoneNumber_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 4;
Magic Number,LineSharp.Datatypes,registerDeviceWithoutPhoneNumberWithIdentityCredential_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  Region = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  UdidHash = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.Struct) {                  DeviceInfo = new DeviceInfo();                  DeviceInfo.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.I32) {                  Provider = (IdentityProvider)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  Identifier = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.String) {                  Verifier = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.String) {                  Mid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,registerDeviceWithoutPhoneNumberWithIdentityCredential_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  Region = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  UdidHash = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.Struct) {                  DeviceInfo = new DeviceInfo();                  DeviceInfo.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.I32) {                  Provider = (IdentityProvider)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  Identifier = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.String) {                  Verifier = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.String) {                  Mid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,registerDeviceWithoutPhoneNumberWithIdentityCredential_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  Region = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  UdidHash = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.Struct) {                  DeviceInfo = new DeviceInfo();                  DeviceInfo.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.I32) {                  Provider = (IdentityProvider)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  Identifier = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.String) {                  Verifier = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.String) {                  Mid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,registerDeviceWithoutPhoneNumberWithIdentityCredential_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  Region = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  UdidHash = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.Struct) {                  DeviceInfo = new DeviceInfo();                  DeviceInfo.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.I32) {                  Provider = (IdentityProvider)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  Identifier = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.String) {                  Verifier = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.String) {                  Mid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,registerDeviceWithoutPhoneNumberWithIdentityCredential_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  Region = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  UdidHash = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.Struct) {                  DeviceInfo = new DeviceInfo();                  DeviceInfo.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.I32) {                  Provider = (IdentityProvider)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  Identifier = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.String) {                  Verifier = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.String) {                  Mid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,registerDeviceWithoutPhoneNumberWithIdentityCredential_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  Region = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  UdidHash = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.Struct) {                  DeviceInfo = new DeviceInfo();                  DeviceInfo.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.I32) {                  Provider = (IdentityProvider)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  Identifier = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.String) {                  Verifier = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.String) {                  Mid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,registerDeviceWithoutPhoneNumberWithIdentityCredential_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  Region = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  UdidHash = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.Struct) {                  DeviceInfo = new DeviceInfo();                  DeviceInfo.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.I32) {                  Provider = (IdentityProvider)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  Identifier = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.String) {                  Verifier = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.String) {                  Mid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,registerDeviceWithoutPhoneNumberWithIdentityCredential_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,registerDeviceWithoutPhoneNumberWithIdentityCredential_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,LineSharp.Datatypes,registerDeviceWithoutPhoneNumberWithIdentityCredential_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 4;
Magic Number,LineSharp.Datatypes,registerDeviceWithoutPhoneNumberWithIdentityCredential_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 5;
Magic Number,LineSharp.Datatypes,registerDeviceWithoutPhoneNumberWithIdentityCredential_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 6;
Magic Number,LineSharp.Datatypes,registerDeviceWithoutPhoneNumberWithIdentityCredential_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 7;
Magic Number,LineSharp.Datatypes,registerDeviceWithoutPhoneNumberWithIdentityCredential_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 8;
Magic Number,LineSharp.Datatypes,registerUserid_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I32) {                  ReqSeq = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  Userid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,registerUserid_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,registerWapDevice_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  InvitationHash = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  GuidHash = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Email = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.Struct) {                  DeviceInfo = new DeviceInfo();                  DeviceInfo.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,registerWapDevice_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  InvitationHash = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  GuidHash = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Email = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.Struct) {                  DeviceInfo = new DeviceInfo();                  DeviceInfo.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,registerWapDevice_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  InvitationHash = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  GuidHash = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Email = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.Struct) {                  DeviceInfo = new DeviceInfo();                  DeviceInfo.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,registerWapDevice_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  InvitationHash = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  GuidHash = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Email = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.Struct) {                  DeviceInfo = new DeviceInfo();                  DeviceInfo.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,registerWapDevice_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,registerWapDevice_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,LineSharp.Datatypes,registerWapDevice_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 4;
Magic Number,LineSharp.Datatypes,registerWapDevice_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 5;
Magic Number,LineSharp.Datatypes,registerWithExistingSnsIdAndIdentityCredential_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.Struct) {                  IdentityCredential = new IdentityCredential();                  IdentityCredential.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  Region = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  UdidHash = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.Struct) {                  DeviceInfo = new DeviceInfo();                  DeviceInfo.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,registerWithExistingSnsIdAndIdentityCredential_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.Struct) {                  IdentityCredential = new IdentityCredential();                  IdentityCredential.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  Region = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  UdidHash = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.Struct) {                  DeviceInfo = new DeviceInfo();                  DeviceInfo.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,registerWithExistingSnsIdAndIdentityCredential_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.Struct) {                  IdentityCredential = new IdentityCredential();                  IdentityCredential.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  Region = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  UdidHash = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.Struct) {                  DeviceInfo = new DeviceInfo();                  DeviceInfo.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,registerWithExistingSnsIdAndIdentityCredential_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.Struct) {                  IdentityCredential = new IdentityCredential();                  IdentityCredential.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  Region = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  UdidHash = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.Struct) {                  DeviceInfo = new DeviceInfo();                  DeviceInfo.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,registerWithExistingSnsIdAndIdentityCredential_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,registerWithExistingSnsIdAndIdentityCredential_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,LineSharp.Datatypes,registerWithExistingSnsIdAndIdentityCredential_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 4;
Magic Number,LineSharp.Datatypes,registerWithExistingSnsIdAndIdentityCredential_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 5;
Magic Number,LineSharp.Datatypes,registerWithSnsId_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.I32) {                  SnsIdType = (SnsIdType)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  SnsAccessToken = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Region = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  UdidHash = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.Struct) {                  DeviceInfo = new DeviceInfo();                  DeviceInfo.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.String) {                  Mid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,registerWithSnsId_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.I32) {                  SnsIdType = (SnsIdType)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  SnsAccessToken = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Region = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  UdidHash = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.Struct) {                  DeviceInfo = new DeviceInfo();                  DeviceInfo.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.String) {                  Mid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,registerWithSnsId_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.I32) {                  SnsIdType = (SnsIdType)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  SnsAccessToken = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Region = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  UdidHash = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.Struct) {                  DeviceInfo = new DeviceInfo();                  DeviceInfo.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.String) {                  Mid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,registerWithSnsId_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.I32) {                  SnsIdType = (SnsIdType)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  SnsAccessToken = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Region = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  UdidHash = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.Struct) {                  DeviceInfo = new DeviceInfo();                  DeviceInfo.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.String) {                  Mid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,registerWithSnsId_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.I32) {                  SnsIdType = (SnsIdType)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  SnsAccessToken = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Region = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  UdidHash = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.Struct) {                  DeviceInfo = new DeviceInfo();                  DeviceInfo.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.String) {                  Mid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,registerWithSnsId_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.I32) {                  SnsIdType = (SnsIdType)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  SnsAccessToken = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Region = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  UdidHash = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.Struct) {                  DeviceInfo = new DeviceInfo();                  DeviceInfo.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.String) {                  Mid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,registerWithSnsId_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,registerWithSnsId_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,LineSharp.Datatypes,registerWithSnsId_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 4;
Magic Number,LineSharp.Datatypes,registerWithSnsId_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 5;
Magic Number,LineSharp.Datatypes,registerWithSnsId_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 6;
Magic Number,LineSharp.Datatypes,registerWithSnsId_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 7;
Magic Number,LineSharp.Datatypes,registerWithSnsIdAndIdentityCredential_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.I32) {                  SnsIdType = (SnsIdType)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  SnsAccessToken = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.Struct) {                  IdentityCredential = new IdentityCredential();                  IdentityCredential.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  Region = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  UdidHash = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.Struct) {                  DeviceInfo = new DeviceInfo();                  DeviceInfo.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,registerWithSnsIdAndIdentityCredential_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.I32) {                  SnsIdType = (SnsIdType)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  SnsAccessToken = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.Struct) {                  IdentityCredential = new IdentityCredential();                  IdentityCredential.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  Region = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  UdidHash = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.Struct) {                  DeviceInfo = new DeviceInfo();                  DeviceInfo.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,registerWithSnsIdAndIdentityCredential_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.I32) {                  SnsIdType = (SnsIdType)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  SnsAccessToken = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.Struct) {                  IdentityCredential = new IdentityCredential();                  IdentityCredential.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  Region = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  UdidHash = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.Struct) {                  DeviceInfo = new DeviceInfo();                  DeviceInfo.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,registerWithSnsIdAndIdentityCredential_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.I32) {                  SnsIdType = (SnsIdType)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  SnsAccessToken = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.Struct) {                  IdentityCredential = new IdentityCredential();                  IdentityCredential.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  Region = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  UdidHash = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.Struct) {                  DeviceInfo = new DeviceInfo();                  DeviceInfo.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,registerWithSnsIdAndIdentityCredential_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.I32) {                  SnsIdType = (SnsIdType)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  SnsAccessToken = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.Struct) {                  IdentityCredential = new IdentityCredential();                  IdentityCredential.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  Region = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  UdidHash = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.Struct) {                  DeviceInfo = new DeviceInfo();                  DeviceInfo.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,registerWithSnsIdAndIdentityCredential_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.I32) {                  SnsIdType = (SnsIdType)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  SnsAccessToken = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.Struct) {                  IdentityCredential = new IdentityCredential();                  IdentityCredential.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  Region = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  UdidHash = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.Struct) {                  DeviceInfo = new DeviceInfo();                  DeviceInfo.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,registerWithSnsIdAndIdentityCredential_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,registerWithSnsIdAndIdentityCredential_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,LineSharp.Datatypes,registerWithSnsIdAndIdentityCredential_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 4;
Magic Number,LineSharp.Datatypes,registerWithSnsIdAndIdentityCredential_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 5;
Magic Number,LineSharp.Datatypes,registerWithSnsIdAndIdentityCredential_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 6;
Magic Number,LineSharp.Datatypes,registerWithSnsIdAndIdentityCredential_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 7;
Magic Number,LineSharp.Datatypes,reissueUserTicket_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 3:                if (field.Type == TType.I64) {                  ExpirationTime = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.I32) {                  MaxUseCount = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,reissueUserTicket_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 3:                if (field.Type == TType.I64) {                  ExpirationTime = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.I32) {                  MaxUseCount = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,reissueUserTicket_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,LineSharp.Datatypes,reissueUserTicket_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 4;
Magic Number,LineSharp.Datatypes,rejectGroupInvitation_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I32) {                  ReqSeq = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  GroupId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,rejectGroupInvitation_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,removeAllMessages_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I32) {                  Seq = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  LastMessageId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,removeAllMessages_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,removeBuddyLocation_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  Mid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I32) {                  Index = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,removeBuddyLocation_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  Mid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I32) {                  Index = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,removeBuddyLocation_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,removeBuddyLocation_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,LineSharp.Datatypes,removeMessage_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  MessageId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,removeMessage_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,removeMessageFromMyHome_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  MessageId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,removeMessageFromMyHome_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,removeSnsId_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.I32) {                  SnsIdType = (SnsIdType)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,removeSnsId_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,report_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.I64) {                  SyncOpRevision = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I32) {                  Category = (SyncCategory)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Report = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,report_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.I64) {                  SyncOpRevision = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I32) {                  Category = (SyncCategory)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Report = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,report_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.I64) {                  SyncOpRevision = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I32) {                  Category = (SyncCategory)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Report = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,report_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,report_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,LineSharp.Datatypes,report_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 4;
Magic Number,LineSharp.Datatypes,reportContacts_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.I64) {                  SyncOpRevision = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I32) {                  Category = (SyncCategory)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.List) {                  {                    ContactReports = new List<ContactReport>();                    TList _list360 = iprot.ReadListBegin();                    for( int _i361 = 0; _i361 < _list360.Count; ++_i361)                    {                      ContactReport _elem362 = new ContactReport();                      _elem362 = new ContactReport();                      _elem362.Read(iprot);                      ContactReports.Add(_elem362);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.I32) {                  ActionType = (SyncActionType)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,reportContacts_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.I64) {                  SyncOpRevision = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I32) {                  Category = (SyncCategory)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.List) {                  {                    ContactReports = new List<ContactReport>();                    TList _list360 = iprot.ReadListBegin();                    for( int _i361 = 0; _i361 < _list360.Count; ++_i361)                    {                      ContactReport _elem362 = new ContactReport();                      _elem362 = new ContactReport();                      _elem362.Read(iprot);                      ContactReports.Add(_elem362);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.I32) {                  ActionType = (SyncActionType)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,reportContacts_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.I64) {                  SyncOpRevision = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I32) {                  Category = (SyncCategory)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.List) {                  {                    ContactReports = new List<ContactReport>();                    TList _list360 = iprot.ReadListBegin();                    for( int _i361 = 0; _i361 < _list360.Count; ++_i361)                    {                      ContactReport _elem362 = new ContactReport();                      _elem362 = new ContactReport();                      _elem362.Read(iprot);                      ContactReports.Add(_elem362);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.I32) {                  ActionType = (SyncActionType)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,reportContacts_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.I64) {                  SyncOpRevision = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I32) {                  Category = (SyncCategory)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.List) {                  {                    ContactReports = new List<ContactReport>();                    TList _list360 = iprot.ReadListBegin();                    for( int _i361 = 0; _i361 < _list360.Count; ++_i361)                    {                      ContactReport _elem362 = new ContactReport();                      _elem362 = new ContactReport();                      _elem362.Read(iprot);                      ContactReports.Add(_elem362);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.I32) {                  ActionType = (SyncActionType)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,reportContacts_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,reportContacts_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,LineSharp.Datatypes,reportContacts_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 4;
Magic Number,LineSharp.Datatypes,reportContacts_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 5;
Magic Number,LineSharp.Datatypes,reportGroups_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.I64) {                  SyncOpRevision = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.List) {                  {                    Groups = new List<Group>();                    TList _list368 = iprot.ReadListBegin();                    for( int _i369 = 0; _i369 < _list368.Count; ++_i369)                    {                      Group _elem370 = new Group();                      _elem370 = new Group();                      _elem370.Read(iprot);                      Groups.Add(_elem370);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,reportGroups_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.I64) {                  SyncOpRevision = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.List) {                  {                    Groups = new List<Group>();                    TList _list368 = iprot.ReadListBegin();                    for( int _i369 = 0; _i369 < _list368.Count; ++_i369)                    {                      Group _elem370 = new Group();                      _elem370 = new Group();                      _elem370.Read(iprot);                      Groups.Add(_elem370);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,reportGroups_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,reportGroups_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,LineSharp.Datatypes,reportProfile_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.I64) {                  SyncOpRevision = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Struct) {                  Profile = new Profile();                  Profile.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,reportProfile_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.I64) {                  SyncOpRevision = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Struct) {                  Profile = new Profile();                  Profile.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,reportProfile_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,reportProfile_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,LineSharp.Datatypes,reportRooms_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.I64) {                  SyncOpRevision = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.List) {                  {                    Rooms = new List<Room>();                    TList _list372 = iprot.ReadListBegin();                    for( int _i373 = 0; _i373 < _list372.Count; ++_i373)                    {                      Room _elem374 = new Room();                      _elem374 = new Room();                      _elem374.Read(iprot);                      Rooms.Add(_elem374);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,reportRooms_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.I64) {                  SyncOpRevision = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.List) {                  {                    Rooms = new List<Room>();                    TList _list372 = iprot.ReadListBegin();                    for( int _i373 = 0; _i373 < _list372.Count; ++_i373)                    {                      Room _elem374 = new Room();                      _elem374 = new Room();                      _elem374.Read(iprot);                      Rooms.Add(_elem374);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,reportRooms_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,reportRooms_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,LineSharp.Datatypes,reportSettings_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.I64) {                  SyncOpRevision = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Struct) {                  Settings = new Settings();                  Settings.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,reportSettings_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.I64) {                  SyncOpRevision = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Struct) {                  Settings = new Settings();                  Settings.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,reportSettings_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,reportSettings_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,LineSharp.Datatypes,reportSpammer_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  SpammerMid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.List) {                  {                    SpammerReasons = new List<SpammerReason>();                    TList _list376 = iprot.ReadListBegin();                    for( int _i377 = 0; _i377 < _list376.Count; ++_i377)                    {                      SpammerReason _elem378 = (SpammerReason)0;                      _elem378 = (SpammerReason)iprot.ReadI32();                      SpammerReasons.Add(_elem378);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.List) {                  {                    SpamMessageIds = new List<string>();                    TList _list379 = iprot.ReadListBegin();                    for( int _i380 = 0; _i380 < _list379.Count; ++_i380)                    {                      string _elem381 = null;                      _elem381 = iprot.ReadString();                      SpamMessageIds.Add(_elem381);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,reportSpammer_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  SpammerMid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.List) {                  {                    SpammerReasons = new List<SpammerReason>();                    TList _list376 = iprot.ReadListBegin();                    for( int _i377 = 0; _i377 < _list376.Count; ++_i377)                    {                      SpammerReason _elem378 = (SpammerReason)0;                      _elem378 = (SpammerReason)iprot.ReadI32();                      SpammerReasons.Add(_elem378);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.List) {                  {                    SpamMessageIds = new List<string>();                    TList _list379 = iprot.ReadListBegin();                    for( int _i380 = 0; _i380 < _list379.Count; ++_i380)                    {                      string _elem381 = null;                      _elem381 = iprot.ReadString();                      SpamMessageIds.Add(_elem381);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,reportSpammer_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  SpammerMid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.List) {                  {                    SpammerReasons = new List<SpammerReason>();                    TList _list376 = iprot.ReadListBegin();                    for( int _i377 = 0; _i377 < _list376.Count; ++_i377)                    {                      SpammerReason _elem378 = (SpammerReason)0;                      _elem378 = (SpammerReason)iprot.ReadI32();                      SpammerReasons.Add(_elem378);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.List) {                  {                    SpamMessageIds = new List<string>();                    TList _list379 = iprot.ReadListBegin();                    for( int _i380 = 0; _i380 < _list379.Count; ++_i380)                    {                      string _elem381 = null;                      _elem381 = iprot.ReadString();                      SpamMessageIds.Add(_elem381);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,reportSpammer_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,reportSpammer_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,LineSharp.Datatypes,reportSpammer_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 4;
Magic Number,LineSharp.Datatypes,requestAccountPasswordReset_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 4:                if (field.Type == TType.I32) {                  Provider = (IdentityProvider)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  Identifier = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  Locale = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,requestAccountPasswordReset_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 4:                if (field.Type == TType.I32) {                  Provider = (IdentityProvider)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  Identifier = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  Locale = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,requestAccountPasswordReset_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 4:                if (field.Type == TType.I32) {                  Provider = (IdentityProvider)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  Identifier = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  Locale = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,requestAccountPasswordReset_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,requestAccountPasswordReset_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 4;
Magic Number,LineSharp.Datatypes,requestAccountPasswordReset_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 5;
Magic Number,LineSharp.Datatypes,requestEmailConfirmation_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.Struct) {                  EmailConfirmation = new EmailConfirmation();                  EmailConfirmation.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,requestEmailConfirmation_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,requestIdentityUnbind_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 4:                if (field.Type == TType.I32) {                  Provider = (IdentityProvider)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  Identifier = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,requestIdentityUnbind_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 4:                if (field.Type == TType.I32) {                  Provider = (IdentityProvider)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  Identifier = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,requestIdentityUnbind_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,requestIdentityUnbind_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 4;
Magic Number,LineSharp.Datatypes,resendEmailConfirmation_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  Verifier = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,resendEmailConfirmation_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,resendPinCode_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  SessionId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,resendPinCode_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,resendPinCodeBySMS_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  SessionId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,resendPinCodeBySMS_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,sendChatChecked_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I32) {                  Seq = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  Consumer = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  LastMessageId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,sendChatChecked_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I32) {                  Seq = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  Consumer = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  LastMessageId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,sendChatChecked_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,sendChatChecked_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,LineSharp.Datatypes,sendChatRemoved_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I32) {                  Seq = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  Consumer = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  LastMessageId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,sendChatRemoved_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I32) {                  Seq = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  Consumer = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  LastMessageId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,sendChatRemoved_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,sendChatRemoved_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,LineSharp.Datatypes,sendContentPreviewUpdated_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I32) {                  Esq = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  MessageId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.List) {                  {                    ReceiverMids = new List<string>();                    TList _list384 = iprot.ReadListBegin();                    for( int _i385 = 0; _i385 < _list384.Count; ++_i385)                    {                      string _elem386 = null;                      _elem386 = iprot.ReadString();                      ReceiverMids.Add(_elem386);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,sendContentPreviewUpdated_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I32) {                  Esq = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  MessageId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.List) {                  {                    ReceiverMids = new List<string>();                    TList _list384 = iprot.ReadListBegin();                    for( int _i385 = 0; _i385 < _list384.Count; ++_i385)                    {                      string _elem386 = null;                      _elem386 = iprot.ReadString();                      ReceiverMids.Add(_elem386);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,sendContentPreviewUpdated_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,sendContentPreviewUpdated_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,LineSharp.Datatypes,sendContentReceipt_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I32) {                  Seq = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  Consumer = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  MessageId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,sendContentReceipt_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I32) {                  Seq = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  Consumer = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  MessageId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,sendContentReceipt_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,sendContentReceipt_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,LineSharp.Datatypes,sendEvent_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I32) {                  Seq = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Struct) {                  Message = new Message();                  Message.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,sendEvent_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,sendMessage_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I32) {                  Seq = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Struct) {                  Message = new Message();                  Message.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,sendMessage_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,sendMessageIgnored_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I32) {                  Seq = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  Consumer = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.List) {                  {                    MessageIds = new List<string>();                    TList _list393 = iprot.ReadListBegin();                    for( int _i394 = 0; _i394 < _list393.Count; ++_i394)                    {                      string _elem395 = null;                      _elem395 = iprot.ReadString();                      MessageIds.Add(_elem395);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,sendMessageIgnored_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I32) {                  Seq = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  Consumer = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.List) {                  {                    MessageIds = new List<string>();                    TList _list393 = iprot.ReadListBegin();                    for( int _i394 = 0; _i394 < _list393.Count; ++_i394)                    {                      string _elem395 = null;                      _elem395 = iprot.ReadString();                      MessageIds.Add(_elem395);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,sendMessageIgnored_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,sendMessageIgnored_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,LineSharp.Datatypes,sendMessageReceipt_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I32) {                  Seq = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  Consumer = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.List) {                  {                    MessageIds = new List<string>();                    TList _list397 = iprot.ReadListBegin();                    for( int _i398 = 0; _i398 < _list397.Count; ++_i398)                    {                      string _elem399 = null;                      _elem399 = iprot.ReadString();                      MessageIds.Add(_elem399);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,sendMessageReceipt_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I32) {                  Seq = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  Consumer = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.List) {                  {                    MessageIds = new List<string>();                    TList _list397 = iprot.ReadListBegin();                    for( int _i398 = 0; _i398 < _list397.Count; ++_i398)                    {                      string _elem399 = null;                      _elem399 = iprot.ReadString();                      MessageIds.Add(_elem399);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,sendMessageReceipt_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,sendMessageReceipt_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,LineSharp.Datatypes,sendMessageToMyHome_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I32) {                  Seq = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Struct) {                  Message = new Message();                  Message.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,sendMessageToMyHome_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,setBuddyLocation_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  Mid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I32) {                  Index = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.Struct) {                  Location = new Geolocation();                  Location.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,setBuddyLocation_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  Mid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I32) {                  Index = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.Struct) {                  Location = new Geolocation();                  Location.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,setBuddyLocation_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  Mid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I32) {                  Index = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.Struct) {                  Location = new Geolocation();                  Location.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,setBuddyLocation_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,setBuddyLocation_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,LineSharp.Datatypes,setBuddyLocation_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 4;
Magic Number,LineSharp.Datatypes,setIdentityCredential_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 4:                if (field.Type == TType.I32) {                  Provider = (IdentityProvider)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  Identifier = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  Verifier = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,setIdentityCredential_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 4:                if (field.Type == TType.I32) {                  Provider = (IdentityProvider)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  Identifier = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  Verifier = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,setIdentityCredential_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 4:                if (field.Type == TType.I32) {                  Provider = (IdentityProvider)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  Identifier = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  Verifier = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,setIdentityCredential_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,setIdentityCredential_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,LineSharp.Datatypes,setIdentityCredential_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 4;
Magic Number,LineSharp.Datatypes,setNotificationsEnabled_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I32) {                  ReqSeq = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.I32) {                  Type = (MIDType)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  Target = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.Bool) {                  Enablement = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,setNotificationsEnabled_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I32) {                  ReqSeq = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.I32) {                  Type = (MIDType)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  Target = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.Bool) {                  Enablement = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,setNotificationsEnabled_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I32) {                  ReqSeq = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.I32) {                  Type = (MIDType)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  Target = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.Bool) {                  Enablement = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,setNotificationsEnabled_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,setNotificationsEnabled_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,LineSharp.Datatypes,setNotificationsEnabled_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 4;
Magic Number,LineSharp.Datatypes,startUpdateVerification_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  Region = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I32) {                  Carrier = (CarrierCode)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Phone = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  UdidHash = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.Struct) {                  DeviceInfo = new DeviceInfo();                  DeviceInfo.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.String) {                  NetworkCode = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.String) {                  Locale = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,startUpdateVerification_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  Region = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I32) {                  Carrier = (CarrierCode)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Phone = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  UdidHash = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.Struct) {                  DeviceInfo = new DeviceInfo();                  DeviceInfo.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.String) {                  NetworkCode = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.String) {                  Locale = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,startUpdateVerification_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  Region = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I32) {                  Carrier = (CarrierCode)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Phone = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  UdidHash = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.Struct) {                  DeviceInfo = new DeviceInfo();                  DeviceInfo.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.String) {                  NetworkCode = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.String) {                  Locale = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,startUpdateVerification_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  Region = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I32) {                  Carrier = (CarrierCode)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Phone = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  UdidHash = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.Struct) {                  DeviceInfo = new DeviceInfo();                  DeviceInfo.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.String) {                  NetworkCode = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.String) {                  Locale = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,startUpdateVerification_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  Region = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I32) {                  Carrier = (CarrierCode)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Phone = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  UdidHash = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.Struct) {                  DeviceInfo = new DeviceInfo();                  DeviceInfo.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.String) {                  NetworkCode = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.String) {                  Locale = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,startUpdateVerification_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  Region = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I32) {                  Carrier = (CarrierCode)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Phone = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  UdidHash = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.Struct) {                  DeviceInfo = new DeviceInfo();                  DeviceInfo.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.String) {                  NetworkCode = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.String) {                  Locale = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,startUpdateVerification_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  Region = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I32) {                  Carrier = (CarrierCode)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Phone = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  UdidHash = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.Struct) {                  DeviceInfo = new DeviceInfo();                  DeviceInfo.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.String) {                  NetworkCode = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.String) {                  Locale = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,startUpdateVerification_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,startUpdateVerification_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,LineSharp.Datatypes,startUpdateVerification_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 4;
Magic Number,LineSharp.Datatypes,startUpdateVerification_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 5;
Magic Number,LineSharp.Datatypes,startUpdateVerification_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 6;
Magic Number,LineSharp.Datatypes,startUpdateVerification_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 7;
Magic Number,LineSharp.Datatypes,startUpdateVerification_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 8;
Magic Number,LineSharp.Datatypes,startVerification_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  Region = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I32) {                  Carrier = (CarrierCode)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Phone = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  UdidHash = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.Struct) {                  DeviceInfo = new DeviceInfo();                  DeviceInfo.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.String) {                  NetworkCode = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.String) {                  Mid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.String) {                  Locale = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,startVerification_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  Region = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I32) {                  Carrier = (CarrierCode)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Phone = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  UdidHash = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.Struct) {                  DeviceInfo = new DeviceInfo();                  DeviceInfo.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.String) {                  NetworkCode = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.String) {                  Mid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.String) {                  Locale = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,startVerification_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  Region = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I32) {                  Carrier = (CarrierCode)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Phone = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  UdidHash = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.Struct) {                  DeviceInfo = new DeviceInfo();                  DeviceInfo.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.String) {                  NetworkCode = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.String) {                  Mid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.String) {                  Locale = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,startVerification_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  Region = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I32) {                  Carrier = (CarrierCode)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Phone = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  UdidHash = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.Struct) {                  DeviceInfo = new DeviceInfo();                  DeviceInfo.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.String) {                  NetworkCode = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.String) {                  Mid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.String) {                  Locale = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,startVerification_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  Region = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I32) {                  Carrier = (CarrierCode)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Phone = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  UdidHash = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.Struct) {                  DeviceInfo = new DeviceInfo();                  DeviceInfo.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.String) {                  NetworkCode = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.String) {                  Mid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.String) {                  Locale = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,startVerification_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  Region = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I32) {                  Carrier = (CarrierCode)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Phone = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  UdidHash = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.Struct) {                  DeviceInfo = new DeviceInfo();                  DeviceInfo.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.String) {                  NetworkCode = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.String) {                  Mid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.String) {                  Locale = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,startVerification_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  Region = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I32) {                  Carrier = (CarrierCode)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Phone = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  UdidHash = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.Struct) {                  DeviceInfo = new DeviceInfo();                  DeviceInfo.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.String) {                  NetworkCode = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.String) {                  Mid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.String) {                  Locale = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,startVerification_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  Region = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I32) {                  Carrier = (CarrierCode)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Phone = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  UdidHash = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.Struct) {                  DeviceInfo = new DeviceInfo();                  DeviceInfo.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.String) {                  NetworkCode = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.String) {                  Mid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.String) {                  Locale = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,startVerification_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,startVerification_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,LineSharp.Datatypes,startVerification_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 4;
Magic Number,LineSharp.Datatypes,startVerification_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 5;
Magic Number,LineSharp.Datatypes,startVerification_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 6;
Magic Number,LineSharp.Datatypes,startVerification_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 7;
Magic Number,LineSharp.Datatypes,startVerification_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 8;
Magic Number,LineSharp.Datatypes,startVerification_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 9;
Magic Number,LineSharp.Datatypes,storeUpdateProfileAttribute_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I32) {                  Seq = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.I32) {                  ProfileAttribute = (ProfileAttribute)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  Value = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,storeUpdateProfileAttribute_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I32) {                  Seq = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.I32) {                  ProfileAttribute = (ProfileAttribute)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  Value = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,storeUpdateProfileAttribute_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,storeUpdateProfileAttribute_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,LineSharp.Datatypes,syncContactBySnsIds_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I32) {                  ReqSeq = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.List) {                  {                    Modifications = new List<SnsFriendModification>();                    TList _list401 = iprot.ReadListBegin();                    for( int _i402 = 0; _i402 < _list401.Count; ++_i402)                    {                      SnsFriendModification _elem403 = new SnsFriendModification();                      _elem403 = new SnsFriendModification();                      _elem403.Read(iprot);                      Modifications.Add(_elem403);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,syncContactBySnsIds_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,syncContacts_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I32) {                  ReqSeq = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.List) {                  {                    LocalContacts = new List<ContactModification>();                    TList _list409 = iprot.ReadListBegin();                    for( int _i410 = 0; _i410 < _list409.Count; ++_i410)                    {                      ContactModification _elem411 = new ContactModification();                      _elem411 = new ContactModification();                      _elem411.Read(iprot);                      LocalContacts.Add(_elem411);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,syncContacts_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,trySendMessage_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I32) {                  Seq = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Struct) {                  Message = new Message();                  Message.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,trySendMessage_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,unblockContact_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I32) {                  ReqSeq = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  Id = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,unblockContact_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,unblockRecommendation_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I32) {                  ReqSeq = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  Id = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,unblockRecommendation_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,updateApnsDeviceToken_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  ApnsDeviceToken = iprot.ReadBinary();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,updateApnsDeviceToken_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,updateBuddySetting_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  Key = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  Value = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,updateBuddySetting_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  Key = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  Value = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,updateBuddySetting_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,updateBuddySetting_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,LineSharp.Datatypes,updateC2DMRegistrationId_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  RegistrationId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,updateC2DMRegistrationId_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,updateContactSetting_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I32) {                  ReqSeq = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  Mid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I32) {                  Flag = (ContactSetting)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Value = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,updateContactSetting_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I32) {                  ReqSeq = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  Mid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I32) {                  Flag = (ContactSetting)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Value = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,updateContactSetting_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I32) {                  ReqSeq = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  Mid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I32) {                  Flag = (ContactSetting)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Value = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,updateContactSetting_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,updateContactSetting_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,LineSharp.Datatypes,updateContactSetting_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 4;
Magic Number,LineSharp.Datatypes,updateCustomModeSettings_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.I32) {                  CustomMode = (CustomMode)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Map) {                  {                    ParamMap = new Dictionary<string' string>();                    TMap _map418 = iprot.ReadMapBegin();                    for( int _i419 = 0; _i419 < _map418.Count; ++_i419)                    {                      string _key420;                      string _val421;                      _key420 = iprot.ReadString();                      _val421 = iprot.ReadString();                      ParamMap[_key420] = _val421;                    }                    iprot.ReadMapEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,updateCustomModeSettings_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.I32) {                  CustomMode = (CustomMode)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Map) {                  {                    ParamMap = new Dictionary<string' string>();                    TMap _map418 = iprot.ReadMapBegin();                    for( int _i419 = 0; _i419 < _map418.Count; ++_i419)                    {                      string _key420;                      string _val421;                      _key420 = iprot.ReadString();                      _val421 = iprot.ReadString();                      ParamMap[_key420] = _val421;                    }                    iprot.ReadMapEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,updateCustomModeSettings_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,updateCustomModeSettings_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,LineSharp.Datatypes,updateDeviceInfo_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  DeviceUid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Struct) {                  DeviceInfo = new DeviceInfo();                  DeviceInfo.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,updateDeviceInfo_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  DeviceUid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Struct) {                  DeviceInfo = new DeviceInfo();                  DeviceInfo.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,updateDeviceInfo_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,updateDeviceInfo_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,LineSharp.Datatypes,updateGroup_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I32) {                  ReqSeq = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Struct) {                  Group = new Group();                  Group.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,updateGroup_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,updateNotificationToken_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 3:                if (field.Type == TType.I32) {                  Type = (NotificationType)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  Token = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,updateNotificationToken_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 3:                if (field.Type == TType.I32) {                  Type = (NotificationType)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  Token = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,updateNotificationToken_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,updateNotificationToken_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,LineSharp.Datatypes,updateNotificationTokenWithBytes_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 3:                if (field.Type == TType.I32) {                  Type = (NotificationType)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  Token = iprot.ReadBinary();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,updateNotificationTokenWithBytes_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 3:                if (field.Type == TType.I32) {                  Type = (NotificationType)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  Token = iprot.ReadBinary();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,updateNotificationTokenWithBytes_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,updateNotificationTokenWithBytes_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,LineSharp.Datatypes,updateProfile_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I32) {                  ReqSeq = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Struct) {                  Profile = new Profile();                  Profile.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,updateProfile_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,updateProfileAttribute_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I32) {                  ReqSeq = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.I32) {                  Attr = (ProfileAttribute)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  Value = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,updateProfileAttribute_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I32) {                  ReqSeq = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.I32) {                  Attr = (ProfileAttribute)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  Value = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,updateProfileAttribute_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,updateProfileAttribute_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,LineSharp.Datatypes,updateRegion_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  Region = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,updateRegion_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,updateSettings_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I32) {                  ReqSeq = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Struct) {                  Settings = new Settings();                  Settings.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,updateSettings_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,updateSettings2_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I32) {                  ReqSeq = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Struct) {                  Settings = new Settings();                  Settings.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,updateSettings2_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,updateSettingsAttribute_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I32) {                  ReqSeq = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.I32) {                  Attr = (SettingsAttribute)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  Value = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,updateSettingsAttribute_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I32) {                  ReqSeq = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.I32) {                  Attr = (SettingsAttribute)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  Value = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,updateSettingsAttribute_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,updateSettingsAttribute_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,LineSharp.Datatypes,updateSettingsAttributes_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I32) {                  ReqSeq = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.I32) {                  AttrBitset = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Struct) {                  Settings = new Settings();                  Settings.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,updateSettingsAttributes_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I32) {                  ReqSeq = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.I32) {                  AttrBitset = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Struct) {                  Settings = new Settings();                  Settings.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,updateSettingsAttributes_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,updateSettingsAttributes_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,LineSharp.Datatypes,verifyIdentityCredential_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 8:                if (field.Type == TType.I32) {                  IdentityProvider = (IdentityProvider)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  Identifier = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Password = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,verifyIdentityCredential_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 8:                if (field.Type == TType.I32) {                  IdentityProvider = (IdentityProvider)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  Identifier = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Password = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,verifyIdentityCredential_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 8:                if (field.Type == TType.I32) {                  IdentityProvider = (IdentityProvider)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  Identifier = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Password = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,verifyIdentityCredential_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,LineSharp.Datatypes,verifyIdentityCredential_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 4;
Magic Number,LineSharp.Datatypes,verifyIdentityCredential_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 8;
Magic Number,LineSharp.Datatypes,verifyIdentityCredentialWithResult_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.Struct) {                  IdentityCredential = new IdentityCredential();                  IdentityCredential.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,verifyIdentityCredentialWithResult_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,verifyPhone_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  SessionId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  PinCode = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  UdidHash = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,verifyPhone_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  SessionId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  PinCode = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  UdidHash = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,verifyPhone_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  SessionId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  PinCode = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  UdidHash = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,verifyPhone_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,verifyPhone_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,LineSharp.Datatypes,verifyPhone_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 4;
Magic Number,LineSharp.Datatypes,verifyQrcode_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  Verifier = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  PinCode = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,verifyQrcode_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  Verifier = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  PinCode = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,LineSharp.Datatypes,verifyQrcode_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,verifyQrcode_args,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TalkService.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,LineSharp.Datatypes,Ticket,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Ticket.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                Id = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.I64) {                ExpirationTime = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 21:              if (field.Type == TType.I32) {                MaxUseCount = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,Ticket,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Ticket.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                Id = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.I64) {                ExpirationTime = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 21:              if (field.Type == TType.I32) {                MaxUseCount = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,Ticket,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Ticket.cs,Write,The following statement contains a magic number: field.ID = 10;
Magic Number,LineSharp.Datatypes,Ticket,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\Ticket.cs,Write,The following statement contains a magic number: field.ID = 21;
Magic Number,LineSharp.Datatypes,TMessageBox,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TMessageBox.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                Id = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.String) {                ChannelId = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.I64) {                LastSeq = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.I64) {                UnreadCount = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 7:              if (field.Type == TType.I64) {                LastModifiedTime = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 8:              if (field.Type == TType.I32) {                Status = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 9:              if (field.Type == TType.I32) {                MidType = (MIDType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.List) {                {                  LastMessages = new List<Message>();                  TList _list69 = iprot.ReadListBegin();                  for( int _i70 = 0; _i70 < _list69.Count; ++_i70)                  {                    Message _elem71 = new Message();                    _elem71 = new Message();                    _elem71.Read(iprot);                    LastMessages.Add(_elem71);                  }                  iprot.ReadListEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,TMessageBox,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TMessageBox.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                Id = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.String) {                ChannelId = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.I64) {                LastSeq = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.I64) {                UnreadCount = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 7:              if (field.Type == TType.I64) {                LastModifiedTime = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 8:              if (field.Type == TType.I32) {                Status = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 9:              if (field.Type == TType.I32) {                MidType = (MIDType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.List) {                {                  LastMessages = new List<Message>();                  TList _list69 = iprot.ReadListBegin();                  for( int _i70 = 0; _i70 < _list69.Count; ++_i70)                  {                    Message _elem71 = new Message();                    _elem71 = new Message();                    _elem71.Read(iprot);                    LastMessages.Add(_elem71);                  }                  iprot.ReadListEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,TMessageBox,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TMessageBox.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                Id = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.String) {                ChannelId = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.I64) {                LastSeq = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.I64) {                UnreadCount = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 7:              if (field.Type == TType.I64) {                LastModifiedTime = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 8:              if (field.Type == TType.I32) {                Status = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 9:              if (field.Type == TType.I32) {                MidType = (MIDType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.List) {                {                  LastMessages = new List<Message>();                  TList _list69 = iprot.ReadListBegin();                  for( int _i70 = 0; _i70 < _list69.Count; ++_i70)                  {                    Message _elem71 = new Message();                    _elem71 = new Message();                    _elem71.Read(iprot);                    LastMessages.Add(_elem71);                  }                  iprot.ReadListEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,TMessageBox,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TMessageBox.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                Id = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.String) {                ChannelId = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.I64) {                LastSeq = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.I64) {                UnreadCount = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 7:              if (field.Type == TType.I64) {                LastModifiedTime = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 8:              if (field.Type == TType.I32) {                Status = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 9:              if (field.Type == TType.I32) {                MidType = (MIDType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.List) {                {                  LastMessages = new List<Message>();                  TList _list69 = iprot.ReadListBegin();                  for( int _i70 = 0; _i70 < _list69.Count; ++_i70)                  {                    Message _elem71 = new Message();                    _elem71 = new Message();                    _elem71.Read(iprot);                    LastMessages.Add(_elem71);                  }                  iprot.ReadListEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,TMessageBox,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TMessageBox.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                Id = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.String) {                ChannelId = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.I64) {                LastSeq = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.I64) {                UnreadCount = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 7:              if (field.Type == TType.I64) {                LastModifiedTime = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 8:              if (field.Type == TType.I32) {                Status = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 9:              if (field.Type == TType.I32) {                MidType = (MIDType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.List) {                {                  LastMessages = new List<Message>();                  TList _list69 = iprot.ReadListBegin();                  for( int _i70 = 0; _i70 < _list69.Count; ++_i70)                  {                    Message _elem71 = new Message();                    _elem71 = new Message();                    _elem71.Read(iprot);                    LastMessages.Add(_elem71);                  }                  iprot.ReadListEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,TMessageBox,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TMessageBox.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                Id = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.String) {                ChannelId = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.I64) {                LastSeq = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.I64) {                UnreadCount = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 7:              if (field.Type == TType.I64) {                LastModifiedTime = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 8:              if (field.Type == TType.I32) {                Status = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 9:              if (field.Type == TType.I32) {                MidType = (MIDType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.List) {                {                  LastMessages = new List<Message>();                  TList _list69 = iprot.ReadListBegin();                  for( int _i70 = 0; _i70 < _list69.Count; ++_i70)                  {                    Message _elem71 = new Message();                    _elem71 = new Message();                    _elem71.Read(iprot);                    LastMessages.Add(_elem71);                  }                  iprot.ReadListEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,TMessageBox,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TMessageBox.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                Id = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.String) {                ChannelId = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.I64) {                LastSeq = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.I64) {                UnreadCount = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 7:              if (field.Type == TType.I64) {                LastModifiedTime = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 8:              if (field.Type == TType.I32) {                Status = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 9:              if (field.Type == TType.I32) {                MidType = (MIDType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.List) {                {                  LastMessages = new List<Message>();                  TList _list69 = iprot.ReadListBegin();                  for( int _i70 = 0; _i70 < _list69.Count; ++_i70)                  {                    Message _elem71 = new Message();                    _elem71 = new Message();                    _elem71.Read(iprot);                    LastMessages.Add(_elem71);                  }                  iprot.ReadListEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,TMessageBox,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TMessageBox.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,TMessageBox,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TMessageBox.cs,Write,The following statement contains a magic number: field.ID = 5;
Magic Number,LineSharp.Datatypes,TMessageBox,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TMessageBox.cs,Write,The following statement contains a magic number: field.ID = 6;
Magic Number,LineSharp.Datatypes,TMessageBox,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TMessageBox.cs,Write,The following statement contains a magic number: field.ID = 7;
Magic Number,LineSharp.Datatypes,TMessageBox,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TMessageBox.cs,Write,The following statement contains a magic number: field.ID = 8;
Magic Number,LineSharp.Datatypes,TMessageBox,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TMessageBox.cs,Write,The following statement contains a magic number: field.ID = 9;
Magic Number,LineSharp.Datatypes,TMessageBox,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TMessageBox.cs,Write,The following statement contains a magic number: field.ID = 10;
Magic Number,LineSharp.Datatypes,TMessageBoxWrapUp,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TMessageBoxWrapUp.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.Struct) {                MessageBox = new TMessageBox();                MessageBox.Read(iprot);              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.String) {                Name = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.List) {                {                  Contacts = new List<Contact>();                  TList _list73 = iprot.ReadListBegin();                  for( int _i74 = 0; _i74 < _list73.Count; ++_i74)                  {                    Contact _elem75 = new Contact();                    _elem75 = new Contact();                    _elem75.Read(iprot);                    Contacts.Add(_elem75);                  }                  iprot.ReadListEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.String) {                PictureRevision = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,TMessageBoxWrapUp,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TMessageBoxWrapUp.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.Struct) {                MessageBox = new TMessageBox();                MessageBox.Read(iprot);              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.String) {                Name = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.List) {                {                  Contacts = new List<Contact>();                  TList _list73 = iprot.ReadListBegin();                  for( int _i74 = 0; _i74 < _list73.Count; ++_i74)                  {                    Contact _elem75 = new Contact();                    _elem75 = new Contact();                    _elem75.Read(iprot);                    Contacts.Add(_elem75);                  }                  iprot.ReadListEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.String) {                PictureRevision = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,TMessageBoxWrapUp,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TMessageBoxWrapUp.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.Struct) {                MessageBox = new TMessageBox();                MessageBox.Read(iprot);              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.String) {                Name = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.List) {                {                  Contacts = new List<Contact>();                  TList _list73 = iprot.ReadListBegin();                  for( int _i74 = 0; _i74 < _list73.Count; ++_i74)                  {                    Contact _elem75 = new Contact();                    _elem75 = new Contact();                    _elem75.Read(iprot);                    Contacts.Add(_elem75);                  }                  iprot.ReadListEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.String) {                PictureRevision = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,TMessageBoxWrapUp,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TMessageBoxWrapUp.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,TMessageBoxWrapUp,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TMessageBoxWrapUp.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,LineSharp.Datatypes,TMessageBoxWrapUp,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TMessageBoxWrapUp.cs,Write,The following statement contains a magic number: field.ID = 4;
Magic Number,LineSharp.Datatypes,TMessageBoxWrapUpResponse,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TMessageBoxWrapUpResponse.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.List) {                {                  MessageBoxWrapUpList = new List<TMessageBoxWrapUp>();                  TList _list77 = iprot.ReadListBegin();                  for( int _i78 = 0; _i78 < _list77.Count; ++_i78)                  {                    TMessageBoxWrapUp _elem79 = new TMessageBoxWrapUp();                    _elem79 = new TMessageBoxWrapUp();                    _elem79.Read(iprot);                    MessageBoxWrapUpList.Add(_elem79);                  }                  iprot.ReadListEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.I32) {                TotalSize = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,TMessageBoxWrapUpResponse,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\TMessageBoxWrapUpResponse.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,UserAuthStatus,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\UserAuthStatus.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.Bool) {                PhoneNumberRegistered = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.List) {                {                  RegisteredSnsIdTypes = new List<SnsIdType>();                  TList _list81 = iprot.ReadListBegin();                  for( int _i82 = 0; _i82 < _list81.Count; ++_i82)                  {                    SnsIdType _elem83 = (SnsIdType)0;                    _elem83 = (SnsIdType)iprot.ReadI32();                    RegisteredSnsIdTypes.Add(_elem83);                  }                  iprot.ReadListEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,UserAuthStatus,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\UserAuthStatus.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,VerificationSessionData,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\VerificationSessionData.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                SessionId = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.I32) {                Method = (VerificationMethod)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.String) {                Callback = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.String) {                NormalizedPhone = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.String) {                CountryCode = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.String) {                NationalSignificantNumber = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 7:              if (field.Type == TType.List) {                {                  AvailableVerificationMethods = new List<VerificationMethod>();                  TList _list85 = iprot.ReadListBegin();                  for( int _i86 = 0; _i86 < _list85.Count; ++_i86)                  {                    VerificationMethod _elem87 = (VerificationMethod)0;                    _elem87 = (VerificationMethod)iprot.ReadI32();                    AvailableVerificationMethods.Add(_elem87);                  }                  iprot.ReadListEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,VerificationSessionData,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\VerificationSessionData.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                SessionId = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.I32) {                Method = (VerificationMethod)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.String) {                Callback = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.String) {                NormalizedPhone = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.String) {                CountryCode = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.String) {                NationalSignificantNumber = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 7:              if (field.Type == TType.List) {                {                  AvailableVerificationMethods = new List<VerificationMethod>();                  TList _list85 = iprot.ReadListBegin();                  for( int _i86 = 0; _i86 < _list85.Count; ++_i86)                  {                    VerificationMethod _elem87 = (VerificationMethod)0;                    _elem87 = (VerificationMethod)iprot.ReadI32();                    AvailableVerificationMethods.Add(_elem87);                  }                  iprot.ReadListEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,VerificationSessionData,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\VerificationSessionData.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                SessionId = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.I32) {                Method = (VerificationMethod)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.String) {                Callback = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.String) {                NormalizedPhone = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.String) {                CountryCode = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.String) {                NationalSignificantNumber = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 7:              if (field.Type == TType.List) {                {                  AvailableVerificationMethods = new List<VerificationMethod>();                  TList _list85 = iprot.ReadListBegin();                  for( int _i86 = 0; _i86 < _list85.Count; ++_i86)                  {                    VerificationMethod _elem87 = (VerificationMethod)0;                    _elem87 = (VerificationMethod)iprot.ReadI32();                    AvailableVerificationMethods.Add(_elem87);                  }                  iprot.ReadListEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,VerificationSessionData,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\VerificationSessionData.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                SessionId = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.I32) {                Method = (VerificationMethod)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.String) {                Callback = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.String) {                NormalizedPhone = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.String) {                CountryCode = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.String) {                NationalSignificantNumber = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 7:              if (field.Type == TType.List) {                {                  AvailableVerificationMethods = new List<VerificationMethod>();                  TList _list85 = iprot.ReadListBegin();                  for( int _i86 = 0; _i86 < _list85.Count; ++_i86)                  {                    VerificationMethod _elem87 = (VerificationMethod)0;                    _elem87 = (VerificationMethod)iprot.ReadI32();                    AvailableVerificationMethods.Add(_elem87);                  }                  iprot.ReadListEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,VerificationSessionData,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\VerificationSessionData.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                SessionId = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.I32) {                Method = (VerificationMethod)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.String) {                Callback = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.String) {                NormalizedPhone = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.String) {                CountryCode = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.String) {                NationalSignificantNumber = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 7:              if (field.Type == TType.List) {                {                  AvailableVerificationMethods = new List<VerificationMethod>();                  TList _list85 = iprot.ReadListBegin();                  for( int _i86 = 0; _i86 < _list85.Count; ++_i86)                  {                    VerificationMethod _elem87 = (VerificationMethod)0;                    _elem87 = (VerificationMethod)iprot.ReadI32();                    AvailableVerificationMethods.Add(_elem87);                  }                  iprot.ReadListEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,VerificationSessionData,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\VerificationSessionData.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                SessionId = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.I32) {                Method = (VerificationMethod)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.String) {                Callback = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.String) {                NormalizedPhone = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.String) {                CountryCode = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.String) {                NationalSignificantNumber = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 7:              if (field.Type == TType.List) {                {                  AvailableVerificationMethods = new List<VerificationMethod>();                  TList _list85 = iprot.ReadListBegin();                  for( int _i86 = 0; _i86 < _list85.Count; ++_i86)                  {                    VerificationMethod _elem87 = (VerificationMethod)0;                    _elem87 = (VerificationMethod)iprot.ReadI32();                    AvailableVerificationMethods.Add(_elem87);                  }                  iprot.ReadListEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,VerificationSessionData,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\VerificationSessionData.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,LineSharp.Datatypes,VerificationSessionData,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\VerificationSessionData.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,LineSharp.Datatypes,VerificationSessionData,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\VerificationSessionData.cs,Write,The following statement contains a magic number: field.ID = 4;
Magic Number,LineSharp.Datatypes,VerificationSessionData,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\VerificationSessionData.cs,Write,The following statement contains a magic number: field.ID = 5;
Magic Number,LineSharp.Datatypes,VerificationSessionData,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\VerificationSessionData.cs,Write,The following statement contains a magic number: field.ID = 6;
Magic Number,LineSharp.Datatypes,VerificationSessionData,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\VerificationSessionData.cs,Write,The following statement contains a magic number: field.ID = 7;
Magic Number,LineSharp.Datatypes,WapInvitation,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\WapInvitation.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.I32) {                Type = (WapInvitationType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.String) {                InviteeEmail = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.String) {                InviterMid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.String) {                RoomMid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,WapInvitation,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\WapInvitation.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.I32) {                Type = (WapInvitationType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.String) {                InviteeEmail = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.String) {                InviterMid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.String) {                RoomMid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,WapInvitation,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\WapInvitation.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.I32) {                Type = (WapInvitationType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.String) {                InviteeEmail = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.String) {                InviterMid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.String) {                RoomMid = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,LineSharp.Datatypes,WapInvitation,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\WapInvitation.cs,Write,The following statement contains a magic number: field.ID = 10;
Magic Number,LineSharp.Datatypes,WapInvitation,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\WapInvitation.cs,Write,The following statement contains a magic number: field.ID = 11;
Magic Number,LineSharp.Datatypes,WapInvitation,D:\research\architectureSmells\repos\Banandana_LineSharp\LINE\gen-csharp\WapInvitation.cs,Write,The following statement contains a magic number: field.ID = 12;
